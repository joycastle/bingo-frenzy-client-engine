(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/extensions/spine/skeleton-cache.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var TrackEntryListeners = require('./track-entry-listeners');
        var spine = require('./lib/spine');
        var MaxCacheTime = 30;
        var FrameTime = 1 / 60;
        var _vertices = [];
        var _indices = [];
        var _vertexOffset = 0;
        var _indexOffset = 0;
        var _vfOffset = 0;
        var _preTexUrl = null;
        var _preBlendMode = null;
        var _segVCount = 0;
        var _segICount = 0;
        var _segOffset = 0;
        var _colorOffset = 0;
        var _preFinalColor = null;
        var _preDarkColor = null;
        var _perVertexSize = 6;
        var _perClipVertexSize = 12;
        var _vfCount = 0, _indexCount = 0;
        var _tempr = void 0, _tempg = void 0, _tempb = void 0, _tempa = void 0;
        var _finalColor32 = void 0, _darkColor32 = void 0;
        var _finalColor = new spine.Color(1, 1, 1, 1);
        var _darkColor = new spine.Color(1, 1, 1, 1);
        var _quadTriangles = [
            0,
            1,
            2,
            2,
            3,
            0
        ];
        var AnimationCache = cc.Class({
            ctor: function ctor() {
                this._inited = false;
                this._invalid = true;
                this.frames = [];
                this.totalTime = 0;
                this._frameIdx = -1;
                this.isCompleted = false;
                this._skeletonInfo = null;
                this._animationName = null;
                this._tempSegments = null;
                this._tempColors = null;
            },
            init: function init(skeletonInfo, animationName) {
                this._inited = true;
                this._animationName = animationName;
                this._skeletonInfo = skeletonInfo;
            },
            clear: function clear() {
                this._inited = false;
                for (var i = 0, n = this.frames.length; i < n; i++) {
                    var frame = this.frames[i];
                    frame.segments.length = 0;
                }
                this.invalidAllFrame();
            },
            bind: function bind(listener) {
                var completeHandle = function (entry) {
                    if (entry && entry.animation.name === this._animationName) {
                        this.isCompleted = true;
                    }
                }.bind(this);
                listener.complete = completeHandle;
            },
            unbind: function unbind(listener) {
                listener.complete = null;
            },
            begin: function begin() {
                if (!this._invalid)
                    return;
                var skeletonInfo = this._skeletonInfo;
                var preAnimationCache = skeletonInfo.curAnimationCache;
                if (preAnimationCache && preAnimationCache !== this) {
                    preAnimationCache.updateToFrame();
                }
                var skeleton = skeletonInfo.skeleton;
                var listener = skeletonInfo.listener;
                var state = skeletonInfo.state;
                var animation = skeleton.data.findAnimation(this._animationName);
                state.setAnimationWith(0, animation, false);
                this.bind(listener);
                skeletonInfo.curAnimationCache = this;
                this._frameIdx = -1;
                this.isCompleted = false;
                this.totalTime = 0;
                this._invalid = false;
            },
            end: function end() {
                if (!this._needToUpdate()) {
                    this._skeletonInfo.curAnimationCache = null;
                    this.frames.length = this._frameIdx + 1;
                    this.isCompleted = true;
                    this.unbind(this._skeletonInfo.listener);
                }
            },
            _needToUpdate: function _needToUpdate(toFrameIdx) {
                return !this.isCompleted && this.totalTime < MaxCacheTime && (toFrameIdx == undefined || this._frameIdx < toFrameIdx);
            },
            updateToFrame: function updateToFrame(toFrameIdx) {
                if (!this._inited)
                    return;
                this.begin();
                if (!this._needToUpdate(toFrameIdx))
                    return;
                var skeletonInfo = this._skeletonInfo;
                var skeleton = skeletonInfo.skeleton;
                var clipper = skeletonInfo.clipper;
                var state = skeletonInfo.state;
                do {
                    skeleton.update(FrameTime);
                    state.update(FrameTime);
                    state.apply(skeleton);
                    skeleton.updateWorldTransform();
                    this._frameIdx++;
                    this._updateFrame(skeleton, clipper, this._frameIdx);
                    this.totalTime += FrameTime;
                } while (this._needToUpdate(toFrameIdx));
                this.end();
            },
            isInited: function isInited() {
                return this._inited;
            },
            isInvalid: function isInvalid() {
                return this._invalid;
            },
            invalidAllFrame: function invalidAllFrame() {
                this.isCompleted = false;
                this._invalid = true;
            },
            updateAllFrame: function updateAllFrame() {
                this.invalidAllFrame();
                this.updateToFrame();
            },
            _updateFrame: function _updateFrame(skeleton, clipper, index) {
                _vfOffset = 0;
                _indexOffset = 0;
                _vertexOffset = 0;
                _preTexUrl = null;
                _preBlendMode = null;
                _segVCount = 0;
                _segICount = 0;
                _segOffset = 0;
                _colorOffset = 0;
                _preFinalColor = null;
                _preDarkColor = null;
                this.frames[index] = this.frames[index] || {
                    segments: [],
                    colors: [],
                    vertices: null,
                    uintVert: null,
                    indices: null
                };
                var frame = this.frames[index];
                var segments = this._tempSegments = frame.segments;
                var colors = this._tempColors = frame.colors;
                this._traverseSkeleton(skeleton, clipper);
                if (_colorOffset > 0) {
                    colors[_colorOffset - 1].vfOffset = _vfOffset;
                }
                colors.length = _colorOffset;
                var preSegOffset = _segOffset - 1;
                if (preSegOffset >= 0) {
                    if (_segICount > 0) {
                        var preSegInfo = segments[preSegOffset];
                        preSegInfo.indexCount = _segICount;
                        preSegInfo.vfCount = _segVCount * _perVertexSize;
                        preSegInfo.vertexCount = _segVCount;
                        segments.length = _segOffset;
                    } else {
                        segments.length = _segOffset - 1;
                    }
                }
                if (segments.length == 0)
                    return;
                var vertices = frame.vertices;
                var uintVert = frame.uintVert;
                if (!vertices || vertices.length < _vfOffset) {
                    vertices = frame.vertices = new Float32Array(_vfOffset);
                    uintVert = frame.uintVert = new Uint32Array(vertices.buffer);
                }
                for (var i = 0, j = 0; i < _vfOffset;) {
                    vertices[i++] = _vertices[j++];
                    vertices[i++] = _vertices[j++];
                    vertices[i++] = _vertices[j++];
                    vertices[i++] = _vertices[j++];
                    uintVert[i++] = _vertices[j++];
                    uintVert[i++] = _vertices[j++];
                }
                var indices = frame.indices;
                if (!indices || indices.length < _indexOffset) {
                    indices = frame.indices = new Uint16Array(_indexOffset);
                }
                for (var _i = 0; _i < _indexOffset; _i++) {
                    indices[_i] = _indices[_i];
                }
                frame.vertices = vertices;
                frame.uintVert = uintVert;
                frame.indices = indices;
            },
            fillVertices: function fillVertices(skeletonColor, attachmentColor, slotColor, clipper, slot) {
                _tempa = slotColor.a * attachmentColor.a * skeletonColor.a * 255;
                _tempr = attachmentColor.r * skeletonColor.r * 255;
                _tempg = attachmentColor.g * skeletonColor.g * 255;
                _tempb = attachmentColor.b * skeletonColor.b * 255;
                _finalColor.r = _tempr * slotColor.r;
                _finalColor.g = _tempg * slotColor.g;
                _finalColor.b = _tempb * slotColor.b;
                _finalColor.a = _tempa;
                if (slot.darkColor == null) {
                    _darkColor.set(0, 0, 0, 1);
                } else {
                    _darkColor.r = slot.darkColor.r * _tempr;
                    _darkColor.g = slot.darkColor.g * _tempg;
                    _darkColor.b = slot.darkColor.b * _tempb;
                }
                _darkColor.a = 0;
                _finalColor32 = (_finalColor.a << 24 >>> 0) + (_finalColor.b << 16) + (_finalColor.g << 8) + _finalColor.r;
                _darkColor32 = (_darkColor.a << 24 >>> 0) + (_darkColor.b << 16) + (_darkColor.g << 8) + _darkColor.r;
                if (_preFinalColor !== _finalColor32 || _preDarkColor !== _darkColor32) {
                    var colors = this._tempColors;
                    _preFinalColor = _finalColor32;
                    _preDarkColor = _darkColor32;
                    if (_colorOffset > 0) {
                        colors[_colorOffset - 1].vfOffset = _vfOffset;
                    }
                    colors[_colorOffset++] = {
                        fr: _finalColor.r,
                        fg: _finalColor.g,
                        fb: _finalColor.b,
                        fa: _finalColor.a,
                        dr: _darkColor.r,
                        dg: _darkColor.g,
                        db: _darkColor.b,
                        da: _darkColor.a,
                        vfOffset: 0
                    };
                }
                if (!clipper.isClipping()) {
                    for (var v = _vfOffset, n = _vfOffset + _vfCount; v < n; v += _perVertexSize) {
                        _vertices[v + 4] = _finalColor32;
                        _vertices[v + 5] = _darkColor32;
                    }
                } else {
                    clipper.clipTriangles(_vertices, _vfCount, _indices, _indexCount, _vertices, _finalColor, _darkColor, true, _perVertexSize, _indexOffset, _vfOffset, _vfOffset + 2);
                    var clippedVertices = clipper.clippedVertices;
                    var clippedTriangles = clipper.clippedTriangles;
                    _indexCount = clippedTriangles.length;
                    _vfCount = clippedVertices.length / _perClipVertexSize * _perVertexSize;
                    for (var ii = 0, jj = _indexOffset, nn = clippedTriangles.length; ii < nn;) {
                        _indices[jj++] = clippedTriangles[ii++];
                    }
                    for (var _v = 0, _n = clippedVertices.length, offset = _vfOffset; _v < _n; _v += 12, offset += _perVertexSize) {
                        _vertices[offset] = clippedVertices[_v];
                        _vertices[offset + 1] = clippedVertices[_v + 1];
                        _vertices[offset + 2] = clippedVertices[_v + 6];
                        _vertices[offset + 3] = clippedVertices[_v + 7];
                        _vertices[offset + 4] = _finalColor32;
                        _vertices[offset + 5] = _darkColor32;
                    }
                }
            },
            _traverseSkeleton: function _traverseSkeleton(skeleton, clipper) {
                var segments = this._tempSegments;
                var skeletonColor = skeleton.color;
                var attachment = void 0, attachmentColor = void 0, slotColor = void 0, uvs = void 0, triangles = void 0;
                var isRegion = void 0, isMesh = void 0, isClip = void 0;
                var texture = void 0;
                var preSegOffset = void 0, preSegInfo = void 0;
                var blendMode = void 0;
                var slot = void 0;
                for (var slotIdx = 0, slotCount = skeleton.drawOrder.length; slotIdx < slotCount; slotIdx++) {
                    slot = skeleton.drawOrder[slotIdx];
                    _vfCount = 0;
                    _indexCount = 0;
                    attachment = slot.getAttachment();
                    if (!attachment) {
                        clipper.clipEndWithSlot(slot);
                        continue;
                    }
                    isRegion = attachment instanceof spine.RegionAttachment;
                    isMesh = attachment instanceof spine.MeshAttachment;
                    isClip = attachment instanceof spine.ClippingAttachment;
                    if (isClip) {
                        clipper.clipStart(slot, attachment);
                        continue;
                    }
                    if (!isRegion && !isMesh) {
                        clipper.clipEndWithSlot(slot);
                        continue;
                    }
                    texture = attachment.region.texture._texture;
                    if (!texture) {
                        clipper.clipEndWithSlot(slot);
                        continue;
                    }
                    blendMode = slot.data.blendMode;
                    if (_preTexUrl !== texture.url || _preBlendMode !== blendMode) {
                        _preTexUrl = texture.url;
                        _preBlendMode = blendMode;
                        preSegOffset = _segOffset - 1;
                        if (preSegOffset >= 0) {
                            if (_segICount > 0) {
                                preSegInfo = segments[preSegOffset];
                                preSegInfo.indexCount = _segICount;
                                preSegInfo.vertexCount = _segVCount;
                                preSegInfo.vfCount = _segVCount * _perVertexSize;
                            } else {
                                _segOffset--;
                            }
                        }
                        segments[_segOffset] = {
                            tex: texture,
                            blendMode: blendMode,
                            indexCount: 0,
                            vertexCount: 0,
                            vfCount: 0
                        };
                        _segOffset++;
                        _segICount = 0;
                        _segVCount = 0;
                    }
                    if (isRegion) {
                        triangles = _quadTriangles;
                        _vfCount = 4 * _perVertexSize;
                        _indexCount = 6;
                        attachment.computeWorldVertices(slot.bone, _vertices, _vfOffset, _perVertexSize);
                    } else if (isMesh) {
                        triangles = attachment.triangles;
                        _vfCount = (attachment.worldVerticesLength >> 1) * _perVertexSize;
                        _indexCount = triangles.length;
                        attachment.computeWorldVertices(slot, 0, attachment.worldVerticesLength, _vertices, _vfOffset, _perVertexSize);
                    }
                    if (_vfCount == 0 || _indexCount == 0) {
                        clipper.clipEndWithSlot(slot);
                        continue;
                    }
                    for (var ii = 0, jj = _indexOffset, nn = triangles.length; ii < nn;) {
                        _indices[jj++] = triangles[ii++];
                    }
                    uvs = attachment.uvs;
                    for (var v = _vfOffset, n = _vfOffset + _vfCount, u = 0; v < n; v += _perVertexSize, u += 2) {
                        _vertices[v + 2] = uvs[u];
                        _vertices[v + 3] = uvs[u + 1];
                    }
                    attachmentColor = attachment.color;
                    slotColor = slot.color;
                    this.fillVertices(skeletonColor, attachmentColor, slotColor, clipper, slot);
                    if (_indexCount > 0) {
                        for (var _ii = _indexOffset, _nn = _indexOffset + _indexCount; _ii < _nn; _ii++) {
                            _indices[_ii] += _segVCount;
                        }
                        _indexOffset += _indexCount;
                        _vfOffset += _vfCount;
                        _vertexOffset = _vfOffset / _perVertexSize;
                        _segICount += _indexCount;
                        _segVCount += _vfCount / _perVertexSize;
                    }
                    clipper.clipEndWithSlot(slot);
                }
                clipper.clipEnd();
            }
        });
        var SkeletonCache = cc.Class({
            ctor: function ctor() {
                this._animationPool = {};
                this._skeletonCache = {};
            },
            clear: function clear() {
                this._animationPool = {};
                this._skeletonCache = {};
            },
            removeSkeleton: function removeSkeleton(uuid) {
                var skeletonInfo = this._skeletonCache[uuid];
                if (!skeletonInfo)
                    return;
                var animationsCache = skeletonInfo.animationsCache;
                for (var aniKey in animationsCache) {
                    var animationCache = animationsCache[aniKey];
                    if (!animationCache)
                        continue;
                    this._animationPool[uuid + '#' + aniKey] = animationCache;
                    animationCache.clear();
                }
                delete this._skeletonCache[uuid];
            },
            getSkeletonCache: function getSkeletonCache(uuid, skeletonData) {
                var skeletonInfo = this._skeletonCache[uuid];
                if (!skeletonInfo) {
                    var skeleton = new spine.Skeleton(skeletonData);
                    var clipper = new spine.SkeletonClipping();
                    var stateData = new spine.AnimationStateData(skeleton.data);
                    var state = new spine.AnimationState(stateData);
                    var listener = new TrackEntryListeners();
                    state.addListener(listener);
                    this._skeletonCache[uuid] = skeletonInfo = {
                        skeleton: skeleton,
                        clipper: clipper,
                        state: state,
                        listener: listener,
                        animationsCache: {},
                        curAnimationCache: null
                    };
                }
                return skeletonInfo;
            },
            getAnimationCache: function getAnimationCache(uuid, animationName) {
                var skeletonInfo = this._skeletonCache[uuid];
                if (!skeletonInfo)
                    return null;
                var animationsCache = skeletonInfo.animationsCache;
                return animationsCache[animationName];
            },
            invalidAnimationCache: function invalidAnimationCache(uuid) {
                var skeletonInfo = this._skeletonCache[uuid];
                var skeleton = skeletonInfo && skeletonInfo.skeleton;
                if (!skeleton)
                    return;
                var animationsCache = skeletonInfo.animationsCache;
                for (var aniKey in animationsCache) {
                    var animationCache = animationsCache[aniKey];
                    animationCache.invalidAllFrame();
                }
            },
            initAnimationCache: function initAnimationCache(uuid, animationName) {
                if (!animationName)
                    return null;
                var skeletonInfo = this._skeletonCache[uuid];
                var skeleton = skeletonInfo && skeletonInfo.skeleton;
                if (!skeleton)
                    return null;
                var animation = skeleton.data.findAnimation(animationName);
                if (!animation) {
                    return null;
                }
                var animationsCache = skeletonInfo.animationsCache;
                var animationCache = animationsCache[animationName];
                if (!animationCache) {
                    var poolKey = uuid + '#' + animationName;
                    animationCache = this._animationPool[poolKey];
                    if (animationCache) {
                        delete this._animationPool[poolKey];
                    } else {
                        animationCache = new AnimationCache();
                    }
                    animationCache.init(skeletonInfo, animationName);
                    animationsCache[animationName] = animationCache;
                }
                return animationCache;
            },
            updateAnimationCache: function updateAnimationCache(uuid, animationName) {
                if (animationName) {
                    var animationCache = this.initAnimationCache(uuid, animationName);
                    if (!animationCache)
                        return null;
                    animationCache.updateAllFrame();
                } else {
                    var skeletonInfo = this._skeletonCache[uuid];
                    var skeleton = skeletonInfo && skeletonInfo.skeleton;
                    if (!skeleton)
                        return;
                    var animationsCache = skeletonInfo.animationsCache;
                    for (var aniKey in animationsCache) {
                        var _animationCache = animationsCache[aniKey];
                        _animationCache.updateAllFrame();
                    }
                }
            }
        });
        SkeletonCache.FrameTime = FrameTime;
        SkeletonCache.sharedCache = new SkeletonCache();
        module.exports = SkeletonCache;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,