(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/extensions/spine/spine-assembler.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _assembler = require('../../cocos2d/core/renderer/assembler');
        var _assembler2 = _interopRequireDefault(_assembler);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var Skeleton = require('./Skeleton');
        var spine = require('./lib/spine');
        var RenderFlow = require('../../cocos2d/core/renderer/render-flow');
        var VertexFormat = require('../../cocos2d/core/renderer/webgl/vertex-format');
        var VFOneColor = VertexFormat.vfmtPosUvColor;
        var VFTwoColor = VertexFormat.vfmtPosUvTwoColor;
        var gfx = cc.gfx;
        var FLAG_BATCH = 16;
        var FLAG_TWO_COLOR = 1;
        var _handleVal = 0;
        var _quadTriangles = [
            0,
            1,
            2,
            2,
            3,
            0
        ];
        var _slotColor = cc.color(0, 0, 255, 255);
        var _boneColor = cc.color(255, 0, 0, 255);
        var _originColor = cc.color(0, 255, 0, 255);
        var _meshColor = cc.color(255, 255, 0, 255);
        var _finalColor = null;
        var _darkColor = null;
        var _tempPos = null, _tempUv = null;
        if (!CC_NATIVERENDERER) {
            _finalColor = new spine.Color(1, 1, 1, 1);
            _darkColor = new spine.Color(1, 1, 1, 1);
            _tempPos = new spine.Vector2();
            _tempUv = new spine.Vector2();
        }
        var _premultipliedAlpha = void 0;
        var _multiplier = void 0;
        var _slotRangeStart = void 0;
        var _slotRangeEnd = void 0;
        var _useTint = void 0;
        var _debugSlots = void 0;
        var _debugBones = void 0;
        var _debugMesh = void 0;
        var _nodeR = void 0, _nodeG = void 0, _nodeB = void 0, _nodeA = void 0;
        var _finalColor32 = void 0, _darkColor32 = void 0;
        var _vertexFormat = void 0;
        var _perVertexSize = void 0;
        var _perClipVertexSize = void 0;
        var _vertexFloatCount = 0, _vertexCount = 0, _vertexFloatOffset = 0, _vertexOffset = 0, _indexCount = 0, _indexOffset = 0, _vfOffset = 0;
        var _tempr = void 0, _tempg = void 0, _tempb = void 0;
        var _inRange = void 0;
        var _mustFlush = void 0;
        var _x = void 0, _y = void 0, _m00 = void 0, _m04 = void 0, _m12 = void 0, _m01 = void 0, _m05 = void 0, _m13 = void 0;
        var _r = void 0, _g = void 0, _b = void 0, _fr = void 0, _fg = void 0, _fb = void 0, _fa = void 0, _dr = void 0, _dg = void 0, _db = void 0, _da = void 0;
        var _comp = void 0, _buffer = void 0, _renderer = void 0, _node = void 0, _needColor = void 0, _vertexEffect = void 0;
        function _getSlotMaterial(tex, blendMode) {
            var src = void 0, dst = void 0;
            switch (blendMode) {
            case spine.BlendMode.Additive:
                src = _premultipliedAlpha ? cc.macro.ONE : cc.macro.SRC_ALPHA;
                dst = cc.macro.ONE;
                break;
            case spine.BlendMode.Multiply:
                src = cc.macro.DST_COLOR;
                dst = cc.macro.ONE_MINUS_SRC_ALPHA;
                break;
            case spine.BlendMode.Screen:
                src = cc.macro.ONE;
                dst = cc.macro.ONE_MINUS_SRC_COLOR;
                break;
            case spine.BlendMode.Normal:
            default:
                src = _premultipliedAlpha ? cc.macro.ONE : cc.macro.SRC_ALPHA;
                dst = cc.macro.ONE_MINUS_SRC_ALPHA;
                break;
            }
            var useModel = !_comp.enableBatch;
            var key = tex.getId() + src + dst + _useTint + useModel;
            var baseMaterial = _comp.sharedMaterials[0];
            if (!baseMaterial)
                return null;
            var materialCache = _comp._materialCache;
            var material = materialCache[key];
            if (!material) {
                var baseKey = baseMaterial._hash;
                if (!materialCache[baseKey]) {
                    material = baseMaterial;
                } else {
                    material = new cc.Material();
                    material.copy(baseMaterial);
                }
                material.define('CC_USE_MODEL', useModel);
                material.define('USE_TINT', _useTint);
                material.setProperty('texture', tex);
                material.effect.setBlend(true, gfx.BLEND_FUNC_ADD, src, dst, gfx.BLEND_FUNC_ADD, src, dst);
                material.updateHash(key);
                materialCache[key] = material;
            } else if (material.getProperty('texture') !== tex) {
                material.setProperty('texture', tex);
                material.updateHash(key);
            }
            return material;
        }
        function _handleColor(color) {
            _fa = color.fa * _nodeA;
            _multiplier = _premultipliedAlpha ? _fa / 255 : 1;
            _r = _nodeR * _multiplier;
            _g = _nodeG * _multiplier;
            _b = _nodeB * _multiplier;
            _fr = color.fr * _r;
            _fg = color.fg * _g;
            _fb = color.fb * _b;
            _finalColor32 = (_fa << 24 >>> 0) + (_fb << 16) + (_fg << 8) + _fr;
            _dr = color.dr * _r;
            _dg = color.dg * _g;
            _db = color.db * _b;
            _da = _premultipliedAlpha ? 255 : 0;
            _darkColor32 = (_da << 24 >>> 0) + (_db << 16) + (_dg << 8) + _dr;
        }
        function _spineColorToInt32(spineColor) {
            return (spineColor.a << 24 >>> 0) + (spineColor.b << 16) + (spineColor.g << 8) + spineColor.r;
        }
        var SpineAssembler = function (_Assembler) {
            _inherits(SpineAssembler, _Assembler);
            function SpineAssembler() {
                _classCallCheck(this, SpineAssembler);
                return _possibleConstructorReturn(this, (SpineAssembler.__proto__ || Object.getPrototypeOf(SpineAssembler)).apply(this, arguments));
            }
            _createClass(SpineAssembler, [
                {
                    key: 'updateRenderData',
                    value: function updateRenderData(comp) {
                        if (comp.isAnimationCached())
                            return;
                        var skeleton = comp._skeleton;
                        if (skeleton) {
                            skeleton.updateWorldTransform();
                        }
                    }
                },
                {
                    key: 'fillVertices',
                    value: function fillVertices(skeletonColor, attachmentColor, slotColor, clipper, slot) {
                        var vbuf = _buffer._vData, ibuf = _buffer._iData, uintVData = _buffer._uintVData;
                        var offsetInfo = void 0;
                        _finalColor.a = slotColor.a * attachmentColor.a * skeletonColor.a * _nodeA * 255;
                        _multiplier = _premultipliedAlpha ? _finalColor.a : 255;
                        _tempr = _nodeR * attachmentColor.r * skeletonColor.r * _multiplier;
                        _tempg = _nodeG * attachmentColor.g * skeletonColor.g * _multiplier;
                        _tempb = _nodeB * attachmentColor.b * skeletonColor.b * _multiplier;
                        _finalColor.r = _tempr * slotColor.r;
                        _finalColor.g = _tempg * slotColor.g;
                        _finalColor.b = _tempb * slotColor.b;
                        if (slot.darkColor == null) {
                            _darkColor.set(0, 0, 0, 1);
                        } else {
                            _darkColor.r = slot.darkColor.r * _tempr;
                            _darkColor.g = slot.darkColor.g * _tempg;
                            _darkColor.b = slot.darkColor.b * _tempb;
                        }
                        _darkColor.a = _premultipliedAlpha ? 255 : 0;
                        if (!clipper.isClipping()) {
                            if (_vertexEffect) {
                                for (var v = _vertexFloatOffset, n = _vertexFloatOffset + _vertexFloatCount; v < n; v += _perVertexSize) {
                                    _tempPos.x = vbuf[v];
                                    _tempPos.y = vbuf[v + 1];
                                    _tempUv.x = vbuf[v + 2];
                                    _tempUv.y = vbuf[v + 3];
                                    _vertexEffect.transform(_tempPos, _tempUv, _finalColor, _darkColor);
                                    vbuf[v] = _tempPos.x;
                                    vbuf[v + 1] = _tempPos.y;
                                    vbuf[v + 2] = _tempUv.x;
                                    vbuf[v + 3] = _tempUv.y;
                                    uintVData[v + 4] = _spineColorToInt32(_finalColor);
                                    _useTint && (uintVData[v + 5] = _spineColorToInt32(_darkColor));
                                }
                            } else {
                                _finalColor32 = _spineColorToInt32(_finalColor);
                                _darkColor32 = _spineColorToInt32(_darkColor);
                                for (var _v = _vertexFloatOffset, _n = _vertexFloatOffset + _vertexFloatCount; _v < _n; _v += _perVertexSize) {
                                    uintVData[_v + 4] = _finalColor32;
                                    _useTint && (uintVData[_v + 5] = _darkColor32);
                                }
                            }
                        } else {
                            var uvs = vbuf.subarray(_vertexFloatOffset + 2);
                            clipper.clipTriangles(vbuf.subarray(_vertexFloatOffset), _vertexFloatCount, ibuf.subarray(_indexOffset), _indexCount, uvs, _finalColor, _darkColor, _useTint, _perVertexSize);
                            var clippedVertices = new Float32Array(clipper.clippedVertices);
                            var clippedTriangles = clipper.clippedTriangles;
                            _indexCount = clippedTriangles.length;
                            _vertexFloatCount = clippedVertices.length / _perClipVertexSize * _perVertexSize;
                            offsetInfo = _buffer.request(_vertexFloatCount / _perVertexSize, _indexCount);
                            _indexOffset = offsetInfo.indiceOffset, _vertexOffset = offsetInfo.vertexOffset, _vertexFloatOffset = offsetInfo.byteOffset >> 2;
                            vbuf = _buffer._vData, ibuf = _buffer._iData;
                            uintVData = _buffer._uintVData;
                            ibuf.set(clippedTriangles, _indexOffset);
                            if (_vertexEffect) {
                                for (var _v2 = 0, _n2 = clippedVertices.length, offset = _vertexFloatOffset; _v2 < _n2; _v2 += _perClipVertexSize, offset += _perVertexSize) {
                                    _tempPos.x = clippedVertices[_v2];
                                    _tempPos.y = clippedVertices[_v2 + 1];
                                    _finalColor.set(clippedVertices[_v2 + 2], clippedVertices[_v2 + 3], clippedVertices[_v2 + 4], clippedVertices[_v2 + 5]);
                                    _tempUv.x = clippedVertices[_v2 + 6];
                                    _tempUv.y = clippedVertices[_v2 + 7];
                                    if (_useTint) {
                                        _darkColor.set(clippedVertices[_v2 + 8], clippedVertices[_v2 + 9], clippedVertices[_v2 + 10], clippedVertices[_v2 + 11]);
                                    } else {
                                        _darkColor.set(0, 0, 0, 0);
                                    }
                                    _vertexEffect.transform(_tempPos, _tempUv, _finalColor, _darkColor);
                                    vbuf[offset] = _tempPos.x;
                                    vbuf[offset + 1] = _tempPos.y;
                                    vbuf[offset + 2] = _tempUv.x;
                                    vbuf[offset + 3] = _tempUv.y;
                                    uintVData[offset + 4] = _spineColorToInt32(_finalColor);
                                    if (_useTint) {
                                        uintVData[offset + 5] = _spineColorToInt32(_darkColor);
                                    }
                                }
                            } else {
                                for (var _v3 = 0, _n3 = clippedVertices.length, _offset = _vertexFloatOffset; _v3 < _n3; _v3 += _perClipVertexSize, _offset += _perVertexSize) {
                                    vbuf[_offset] = clippedVertices[_v3];
                                    vbuf[_offset + 1] = clippedVertices[_v3 + 1];
                                    vbuf[_offset + 2] = clippedVertices[_v3 + 6];
                                    vbuf[_offset + 3] = clippedVertices[_v3 + 7];
                                    _finalColor32 = (clippedVertices[_v3 + 5] << 24 >>> 0) + (clippedVertices[_v3 + 4] << 16) + (clippedVertices[_v3 + 3] << 8) + clippedVertices[_v3 + 2];
                                    uintVData[_offset + 4] = _finalColor32;
                                    if (_useTint) {
                                        _darkColor32 = (clippedVertices[_v3 + 11] << 24 >>> 0) + (clippedVertices[_v3 + 10] << 16) + (clippedVertices[_v3 + 9] << 8) + clippedVertices[_v3 + 8];
                                        uintVData[_offset + 5] = _darkColor32;
                                    }
                                }
                            }
                        }
                    }
                },
                {
                    key: 'realTimeTraverse',
                    value: function realTimeTraverse(worldMat) {
                        var vbuf = void 0;
                        var ibuf = void 0;
                        var locSkeleton = _comp._skeleton;
                        var skeletonColor = locSkeleton.color;
                        var graphics = _comp._debugRenderer;
                        var clipper = _comp._clipper;
                        var material = null;
                        var attachment = void 0, attachmentColor = void 0, slotColor = void 0, uvs = void 0, triangles = void 0;
                        var isRegion = void 0, isMesh = void 0, isClip = void 0;
                        var offsetInfo = void 0;
                        var slot = void 0;
                        var worldMatm = void 0;
                        _slotRangeStart = _comp._startSlotIndex;
                        _slotRangeEnd = _comp._endSlotIndex;
                        _inRange = false;
                        if (_slotRangeStart == -1)
                            _inRange = true;
                        _debugSlots = _comp.debugSlots;
                        _debugBones = _comp.debugBones;
                        _debugMesh = _comp.debugMesh;
                        if (graphics && (_debugBones || _debugSlots || _debugMesh)) {
                            graphics.clear();
                            graphics.lineWidth = 2;
                        }
                        _perClipVertexSize = _useTint ? 12 : 8;
                        _vertexFloatCount = 0;
                        _vertexFloatOffset = 0;
                        _vertexOffset = 0;
                        _indexCount = 0;
                        _indexOffset = 0;
                        for (var slotIdx = 0, slotCount = locSkeleton.drawOrder.length; slotIdx < slotCount; slotIdx++) {
                            slot = locSkeleton.drawOrder[slotIdx];
                            if (_slotRangeStart >= 0 && _slotRangeStart == slot.data.index) {
                                _inRange = true;
                            }
                            if (!_inRange) {
                                clipper.clipEndWithSlot(slot);
                                continue;
                            }
                            if (_slotRangeEnd >= 0 && _slotRangeEnd == slot.data.index) {
                                _inRange = false;
                            }
                            _vertexFloatCount = 0;
                            _indexCount = 0;
                            attachment = slot.getAttachment();
                            if (!attachment) {
                                clipper.clipEndWithSlot(slot);
                                continue;
                            }
                            isRegion = attachment instanceof spine.RegionAttachment;
                            isMesh = attachment instanceof spine.MeshAttachment;
                            isClip = attachment instanceof spine.ClippingAttachment;
                            if (isClip) {
                                clipper.clipStart(slot, attachment);
                                continue;
                            }
                            if (!isRegion && !isMesh) {
                                clipper.clipEndWithSlot(slot);
                                continue;
                            }
                            material = _getSlotMaterial(attachment.region.texture._texture, slot.data.blendMode);
                            if (!material) {
                                clipper.clipEndWithSlot(slot);
                                continue;
                            }
                            if (_mustFlush || material._hash !== _renderer.material._hash) {
                                _mustFlush = false;
                                _renderer._flush();
                                _renderer.node = _node;
                                _renderer.material = material;
                            }
                            if (isRegion) {
                                triangles = _quadTriangles;
                                _vertexFloatCount = 4 * _perVertexSize;
                                _indexCount = 6;
                                offsetInfo = _buffer.request(4, 6);
                                _indexOffset = offsetInfo.indiceOffset, _vertexOffset = offsetInfo.vertexOffset, _vertexFloatOffset = offsetInfo.byteOffset >> 2;
                                vbuf = _buffer._vData, ibuf = _buffer._iData;
                                attachment.computeWorldVertices(slot.bone, vbuf, _vertexFloatOffset, _perVertexSize);
                                if (graphics && _debugSlots) {
                                    graphics.strokeColor = _slotColor;
                                    graphics.moveTo(vbuf[_vertexFloatOffset], vbuf[_vertexFloatOffset + 1]);
                                    for (var ii = _vertexFloatOffset + _perVertexSize, nn = _vertexFloatOffset + _vertexFloatCount; ii < nn; ii += _perVertexSize) {
                                        graphics.lineTo(vbuf[ii], vbuf[ii + 1]);
                                    }
                                    graphics.close();
                                    graphics.stroke();
                                }
                            } else if (isMesh) {
                                triangles = attachment.triangles;
                                _vertexFloatCount = (attachment.worldVerticesLength >> 1) * _perVertexSize;
                                _indexCount = triangles.length;
                                offsetInfo = _buffer.request(_vertexFloatCount / _perVertexSize, _indexCount);
                                _indexOffset = offsetInfo.indiceOffset, _vertexOffset = offsetInfo.vertexOffset, _vertexFloatOffset = offsetInfo.byteOffset >> 2;
                                vbuf = _buffer._vData, ibuf = _buffer._iData;
                                attachment.computeWorldVertices(slot, 0, attachment.worldVerticesLength, vbuf, _vertexFloatOffset, _perVertexSize);
                                if (graphics && _debugMesh) {
                                    graphics.strokeColor = _meshColor;
                                    for (var _ii = 0, _nn = triangles.length; _ii < _nn; _ii += 3) {
                                        var v1 = triangles[_ii] * _perVertexSize + _vertexFloatOffset;
                                        var v2 = triangles[_ii + 1] * _perVertexSize + _vertexFloatOffset;
                                        var v3 = triangles[_ii + 2] * _perVertexSize + _vertexFloatOffset;
                                        graphics.moveTo(vbuf[v1], vbuf[v1 + 1]);
                                        graphics.lineTo(vbuf[v2], vbuf[v2 + 1]);
                                        graphics.lineTo(vbuf[v3], vbuf[v3 + 1]);
                                        graphics.close();
                                        graphics.stroke();
                                    }
                                }
                            }
                            if (_vertexFloatCount == 0 || _indexCount == 0) {
                                clipper.clipEndWithSlot(slot);
                                continue;
                            }
                            ibuf.set(triangles, _indexOffset);
                            uvs = attachment.uvs;
                            for (var v = _vertexFloatOffset, n = _vertexFloatOffset + _vertexFloatCount, u = 0; v < n; v += _perVertexSize, u += 2) {
                                vbuf[v + 2] = uvs[u];
                                vbuf[v + 3] = uvs[u + 1];
                            }
                            attachmentColor = attachment.color, slotColor = slot.color;
                            this.fillVertices(skeletonColor, attachmentColor, slotColor, clipper, slot);
                            if (_indexCount > 0) {
                                for (var _ii2 = _indexOffset, _nn2 = _indexOffset + _indexCount; _ii2 < _nn2; _ii2++) {
                                    ibuf[_ii2] += _vertexOffset;
                                }
                                if (worldMat) {
                                    worldMatm = worldMat.m;
                                    _m00 = worldMatm[0];
                                    _m04 = worldMatm[4];
                                    _m12 = worldMatm[12];
                                    _m01 = worldMatm[1];
                                    _m05 = worldMatm[5];
                                    _m13 = worldMatm[13];
                                    for (var _ii3 = _vertexFloatOffset, _nn3 = _vertexFloatOffset + _vertexFloatCount; _ii3 < _nn3; _ii3 += _perVertexSize) {
                                        _x = vbuf[_ii3];
                                        _y = vbuf[_ii3 + 1];
                                        vbuf[_ii3] = _x * _m00 + _y * _m04 + _m12;
                                        vbuf[_ii3 + 1] = _x * _m01 + _y * _m05 + _m13;
                                    }
                                }
                                _buffer.adjust(_vertexFloatCount / _perVertexSize, _indexCount);
                            }
                            clipper.clipEndWithSlot(slot);
                        }
                        clipper.clipEnd();
                        if (graphics && _debugBones) {
                            var bone = void 0;
                            graphics.strokeColor = _boneColor;
                            graphics.fillColor = _slotColor;
                            for (var i = 0, _n4 = locSkeleton.bones.length; i < _n4; i++) {
                                bone = locSkeleton.bones[i];
                                var x = bone.data.length * bone.a + bone.worldX;
                                var y = bone.data.length * bone.c + bone.worldY;
                                graphics.moveTo(bone.worldX, bone.worldY);
                                graphics.lineTo(x, y);
                                graphics.stroke();
                                graphics.circle(bone.worldX, bone.worldY, Math.PI * 1.5);
                                graphics.fill();
                                if (i === 0) {
                                    graphics.fillColor = _originColor;
                                }
                            }
                        }
                    }
                },
                {
                    key: 'cacheTraverse',
                    value: function cacheTraverse(worldMat) {
                        var frame = _comp._curFrame;
                        if (!frame)
                            return;
                        var segments = frame.segments;
                        if (segments.length == 0)
                            return;
                        var vbuf = void 0, ibuf = void 0, uintbuf = void 0;
                        var material = void 0;
                        var offsetInfo = void 0;
                        var vertices = frame.vertices;
                        var indices = frame.indices;
                        var worldMatm = void 0;
                        var frameVFOffset = 0, frameIndexOffset = 0, segVFCount = 0;
                        if (worldMat) {
                            worldMatm = worldMat.m;
                            _m00 = worldMatm[0];
                            _m01 = worldMatm[1];
                            _m04 = worldMatm[4];
                            _m05 = worldMatm[5];
                            _m12 = worldMatm[12];
                            _m13 = worldMatm[13];
                        }
                        var justTranslate = _m00 === 1 && _m01 === 0 && _m04 === 0 && _m05 === 1;
                        var needBatch = _handleVal & FLAG_BATCH;
                        var calcTranslate = needBatch && justTranslate;
                        var colorOffset = 0;
                        var colors = frame.colors;
                        var nowColor = colors[colorOffset++];
                        var maxVFOffset = nowColor.vfOffset;
                        _handleColor(nowColor);
                        for (var i = 0, n = segments.length; i < n; i++) {
                            var segInfo = segments[i];
                            material = _getSlotMaterial(segInfo.tex, segInfo.blendMode);
                            if (!material)
                                continue;
                            if (_mustFlush || material._hash !== _renderer.material._hash) {
                                _mustFlush = false;
                                _renderer._flush();
                                _renderer.node = _node;
                                _renderer.material = material;
                            }
                            _vertexCount = segInfo.vertexCount;
                            _indexCount = segInfo.indexCount;
                            offsetInfo = _buffer.request(_vertexCount, _indexCount);
                            _indexOffset = offsetInfo.indiceOffset;
                            _vertexOffset = offsetInfo.vertexOffset;
                            _vfOffset = offsetInfo.byteOffset >> 2;
                            vbuf = _buffer._vData;
                            ibuf = _buffer._iData;
                            uintbuf = _buffer._uintVData;
                            for (var ii = _indexOffset, il = _indexOffset + _indexCount; ii < il; ii++) {
                                ibuf[ii] = _vertexOffset + indices[frameIndexOffset++];
                            }
                            segVFCount = segInfo.vfCount;
                            vbuf.set(vertices.subarray(frameVFOffset, frameVFOffset + segVFCount), _vfOffset);
                            frameVFOffset += segVFCount;
                            if (calcTranslate) {
                                for (var _ii4 = _vfOffset, _il = _vfOffset + segVFCount; _ii4 < _il; _ii4 += 6) {
                                    vbuf[_ii4] += _m12;
                                    vbuf[_ii4 + 1] += _m13;
                                }
                            } else if (needBatch) {
                                for (var _ii5 = _vfOffset, _il2 = _vfOffset + segVFCount; _ii5 < _il2; _ii5 += 6) {
                                    _x = vbuf[_ii5];
                                    _y = vbuf[_ii5 + 1];
                                    vbuf[_ii5] = _x * _m00 + _y * _m04 + _m12;
                                    vbuf[_ii5 + 1] = _x * _m01 + _y * _m05 + _m13;
                                }
                            }
                            _buffer.adjust(_vertexCount, _indexCount);
                            if (!_needColor)
                                continue;
                            var frameColorOffset = frameVFOffset - segVFCount;
                            for (var _ii6 = _vfOffset + 4, _il3 = _vfOffset + 4 + segVFCount; _ii6 < _il3; _ii6 += 6, frameColorOffset += 6) {
                                if (frameColorOffset >= maxVFOffset) {
                                    nowColor = colors[colorOffset++];
                                    _handleColor(nowColor);
                                    maxVFOffset = nowColor.vfOffset;
                                }
                                uintbuf[_ii6] = _finalColor32;
                                uintbuf[_ii6 + 1] = _darkColor32;
                            }
                        }
                    }
                },
                {
                    key: 'fillBuffers',
                    value: function fillBuffers(comp, renderer) {
                        var node = comp.node;
                        node._renderFlag |= RenderFlow.FLAG_UPDATE_RENDER_DATA;
                        if (!comp._skeleton)
                            return;
                        var nodeColor = node._color;
                        _nodeR = nodeColor.r / 255;
                        _nodeG = nodeColor.g / 255;
                        _nodeB = nodeColor.b / 255;
                        _nodeA = nodeColor.a / 255;
                        _useTint = comp.useTint || comp.isAnimationCached();
                        _vertexFormat = _useTint ? VFTwoColor : VFOneColor;
                        _perVertexSize = _useTint ? 6 : 5;
                        _node = comp.node;
                        _buffer = renderer.getBuffer('spine', _vertexFormat);
                        _renderer = renderer;
                        _comp = comp;
                        _mustFlush = true;
                        _premultipliedAlpha = comp.premultipliedAlpha;
                        _multiplier = 1;
                        _handleVal = 0;
                        _needColor = false;
                        _vertexEffect = comp._effectDelegate && comp._effectDelegate._vertexEffect;
                        if (nodeColor._val !== 4294967295 || _premultipliedAlpha) {
                            _needColor = true;
                        }
                        if (_useTint) {
                            _handleVal |= FLAG_TWO_COLOR;
                        }
                        var worldMat = undefined;
                        if (_comp.enableBatch) {
                            worldMat = _node._worldMatrix;
                            _mustFlush = false;
                            _handleVal |= FLAG_BATCH;
                        }
                        if (comp.isAnimationCached()) {
                            this.cacheTraverse(worldMat);
                        } else {
                            if (_vertexEffect)
                                _vertexEffect.begin(comp._skeleton);
                            this.realTimeTraverse(worldMat);
                            if (_vertexEffect)
                                _vertexEffect.end();
                        }
                        _node = undefined;
                        _buffer = undefined;
                        _renderer = undefined;
                        _comp = undefined;
                        _vertexEffect = null;
                    }
                }
            ]);
            return SpineAssembler;
        }(_assembler2.default);
        exports.default = SpineAssembler;
        _assembler2.default.register(Skeleton, SpineAssembler);
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,