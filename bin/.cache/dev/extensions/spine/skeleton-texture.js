(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/extensions/spine/skeleton-texture.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        sp.SkeletonTexture = cc.Class({
            name: 'sp.SkeletonTexture',
            extends: sp.spine.Texture,
            _texture: null,
            _material: null,
            setRealTexture: function setRealTexture(tex) {
                this._texture = tex;
            },
            getRealTexture: function getRealTexture() {
                return this._texture;
            },
            setFilters: function setFilters(minFilter, magFilter) {
                if (this._texture) {
                    this._texture.setFilters(minFilter, magFilter);
                }
            },
            setWraps: function setWraps(uWrap, vWrap) {
                if (this._texture) {
                    this._texture.setWrapMode(uWrap, vWrap);
                }
            },
            dispose: function dispose() {
            }
        });
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,