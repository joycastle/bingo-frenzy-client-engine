(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/extensions/spine/Skeleton.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var TrackEntryListeners = require('./track-entry-listeners');
        var RenderComponent = require('../../cocos2d/core/components/CCRenderComponent');
        var spine = require('./lib/spine');
        var Material = require('../../cocos2d/core/assets/material/CCMaterial');
        var Graphics = require('../../cocos2d/core/graphics/graphics');
        var SkeletonCache = require('./skeleton-cache');
        var DefaultSkinsEnum = cc.Enum({ 'default': -1 });
        var DefaultAnimsEnum = cc.Enum({ '<None>': 0 });
        var AnimationCacheMode = cc.Enum({
            REALTIME: 0,
            SHARED_CACHE: 1,
            PRIVATE_CACHE: 2
        });
        function setEnumAttr(obj, propName, enumDef) {
            cc.Class.Attr.setClassAttr(obj, propName, 'type', 'Enum');
            cc.Class.Attr.setClassAttr(obj, propName, 'enumList', cc.Enum.getList(enumDef));
        }
        sp.Skeleton = cc.Class({
            name: 'sp.Skeleton',
            extends: RenderComponent,
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.renderers/Spine Skeleton',
                help: 'app://docs/html/components/spine.html'
            },
            statics: { AnimationCacheMode: AnimationCacheMode },
            properties: {
                paused: {
                    default: false,
                    visible: false
                },
                skeletonData: {
                    default: null,
                    type: sp.SkeletonData,
                    notify: function notify() {
                        this.defaultSkin = '';
                        this.defaultAnimation = '';
                        if (CC_EDITOR) {
                            this._refreshInspector();
                        }
                        this._updateSkeletonData();
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.skeleton.skeleton_data'
                },
                defaultSkin: {
                    default: '',
                    visible: false
                },
                defaultAnimation: {
                    default: '',
                    visible: false
                },
                animation: {
                    get: function get() {
                        if (this.isAnimationCached()) {
                            return this._animationName;
                        } else {
                            var entry = this.getCurrent(0);
                            return entry && entry.animation.name || '';
                        }
                    },
                    set: function set(value) {
                        this.defaultAnimation = value;
                        if (value) {
                            this.setAnimation(0, value, this.loop);
                        } else if (!this.isAnimationCached()) {
                            this.clearTrack(0);
                            this.setToSetupPose();
                        }
                    },
                    visible: false
                },
                _defaultSkinIndex: {
                    get: function get() {
                        if (this.skeletonData && this.defaultSkin) {
                            var skinsEnum = this.skeletonData.getSkinsEnum();
                            if (skinsEnum) {
                                var skinIndex = skinsEnum[this.defaultSkin];
                                if (skinIndex !== undefined) {
                                    return skinIndex;
                                }
                            }
                        }
                        return 0;
                    },
                    set: function set(value) {
                        var skinsEnum;
                        if (this.skeletonData) {
                            skinsEnum = this.skeletonData.getSkinsEnum();
                        }
                        if (!skinsEnum) {
                            return cc.errorID('', this.name);
                        }
                        var skinName = skinsEnum[value];
                        if (skinName !== undefined) {
                            this.defaultSkin = skinName;
                            this.setSkin(this.defaultSkin);
                            if (CC_EDITOR && !cc.engine.isPlaying) {
                                this._refreshInspector();
                            }
                        } else {
                            cc.errorID(7501, this.name);
                        }
                    },
                    type: DefaultSkinsEnum,
                    visible: true,
                    displayName: 'Default Skin',
                    tooltip: CC_DEV && 'i18n:COMPONENT.skeleton.default_skin'
                },
                _animationIndex: {
                    get: function get() {
                        var animationName = !CC_EDITOR || cc.engine.isPlaying ? this.animation : this.defaultAnimation;
                        if (this.skeletonData && animationName) {
                            var animsEnum = this.skeletonData.getAnimsEnum();
                            if (animsEnum) {
                                var animIndex = animsEnum[animationName];
                                if (animIndex !== undefined) {
                                    return animIndex;
                                }
                            }
                        }
                        return 0;
                    },
                    set: function set(value) {
                        if (value === 0) {
                            this.animation = '';
                            return;
                        }
                        var animsEnum;
                        if (this.skeletonData) {
                            animsEnum = this.skeletonData.getAnimsEnum();
                        }
                        if (!animsEnum) {
                            return cc.errorID(7502, this.name);
                        }
                        var animName = animsEnum[value];
                        if (animName !== undefined) {
                            this.animation = animName;
                        } else {
                            cc.errorID(7503, this.name);
                        }
                    },
                    type: DefaultAnimsEnum,
                    visible: true,
                    displayName: 'Animation',
                    tooltip: CC_DEV && 'i18n:COMPONENT.skeleton.animation'
                },
                _preCacheMode: -1,
                _cacheMode: AnimationCacheMode.REALTIME,
                _defaultCacheMode: {
                    default: 0,
                    type: AnimationCacheMode,
                    notify: function notify() {
                        this.setAnimationCacheMode(this._defaultCacheMode);
                    },
                    editorOnly: true,
                    visible: true,
                    animatable: false,
                    displayName: 'Animation Cache Mode',
                    tooltip: CC_DEV && 'i18n:COMPONENT.skeleton.animation_cache_mode'
                },
                loop: {
                    default: true,
                    tooltip: CC_DEV && 'i18n:COMPONENT.skeleton.loop'
                },
                premultipliedAlpha: {
                    default: true,
                    tooltip: CC_DEV && 'i18n:COMPONENT.skeleton.premultipliedAlpha'
                },
                timeScale: {
                    default: 1,
                    tooltip: CC_DEV && 'i18n:COMPONENT.skeleton.time_scale'
                },
                debugSlots: {
                    default: false,
                    editorOnly: true,
                    tooltip: CC_DEV && 'i18n:COMPONENT.skeleton.debug_slots',
                    notify: function notify() {
                        this._updateDebugDraw();
                    }
                },
                debugBones: {
                    default: false,
                    editorOnly: true,
                    tooltip: CC_DEV && 'i18n:COMPONENT.skeleton.debug_bones',
                    notify: function notify() {
                        this._updateDebugDraw();
                    }
                },
                debugMesh: {
                    default: false,
                    editorOnly: true,
                    tooltip: CC_DEV && 'i18n:COMPONENT.skeleton.debug_mesh',
                    notify: function notify() {
                        this._updateDebugDraw();
                    }
                },
                useTint: {
                    default: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.skeleton.use_tint',
                    notify: function notify() {
                        this._updateUseTint();
                    }
                },
                enableBatch: {
                    default: false,
                    notify: function notify() {
                        this._updateBatch();
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.skeleton.enabled_batch'
                },
                _accTime: 0,
                _playCount: 0,
                _frameCache: null,
                _curFrame: null,
                _skeletonCache: null,
                _animationName: '',
                _animationQueue: [],
                _headAniInfo: null,
                _playTimes: 0,
                _isAniComplete: true
            },
            ctor: function ctor() {
                this._effectDelegate = null;
                this._skeleton = null;
                this._rootBone = null;
                this._listener = null;
                this._boundingBox = cc.rect();
                this._materialCache = {};
                this._debugRenderer = null;
                this._startSlotIndex = -1;
                this._endSlotIndex = -1;
                this._startEntry = {
                    animation: { name: '' },
                    trackIndex: 0
                };
                this._endEntry = {
                    animation: { name: '' },
                    trackIndex: 0
                };
            },
            setMaterial: function setMaterial(index, material) {
                this._super(index, material);
                this._materialCache = {};
            },
            _updateUseTint: function _updateUseTint() {
                var baseMaterial = this.getMaterial(0);
                var useTint = this.useTint || this.isAnimationCached();
                if (baseMaterial) {
                    baseMaterial.define('USE_TINT', useTint);
                }
                var cache = this._materialCache;
                for (var mKey in cache) {
                    var material = cache[mKey];
                    if (material) {
                        material.define('USE_TINT', useTint);
                    }
                }
            },
            _updateBatch: function _updateBatch() {
                var baseMaterial = this.getMaterial(0);
                if (baseMaterial) {
                    baseMaterial.define('CC_USE_MODEL', !this.enableBatch);
                }
                var cache = this._materialCache;
                for (var mKey in cache) {
                    var material = cache[mKey];
                    if (material) {
                        material.define('CC_USE_MODEL', !this.enableBatch);
                    }
                }
            },
            setSkeletonData: function setSkeletonData(skeletonData) {
                if (skeletonData.width != null && skeletonData.height != null) {
                    this.node.setContentSize(skeletonData.width, skeletonData.height);
                }
                if (!CC_EDITOR) {
                    if (this._cacheMode === AnimationCacheMode.SHARED_CACHE) {
                        this._skeletonCache = SkeletonCache.sharedCache;
                    } else if (this._cacheMode === AnimationCacheMode.PRIVATE_CACHE) {
                        this._skeletonCache = new SkeletonCache();
                    }
                }
                if (this.isAnimationCached()) {
                    if (this.debugBones || this.debugSlots) {
                        cc.warn('Debug bones or slots is invalid in cached mode');
                    }
                    var skeletonInfo = this._skeletonCache.getSkeletonCache(this.skeletonData._uuid, skeletonData);
                    this._skeleton = skeletonInfo.skeleton;
                    this._clipper = skeletonInfo.clipper;
                    this._rootBone = this._skeleton.getRootBone();
                } else {
                    this._skeleton = new spine.Skeleton(skeletonData);
                    this._clipper = new spine.SkeletonClipping();
                    this._rootBone = this._skeleton.getRootBone();
                }
                this._activateMaterial();
            },
            setSlotsRange: function setSlotsRange(startSlotIndex, endSlotIndex) {
                if (this.isAnimationCached()) {
                    cc.warn('Slots visible range can not be modified in cached mode.');
                } else {
                    this._startSlotIndex = startSlotIndex;
                    this._endSlotIndex = endSlotIndex;
                }
            },
            setAnimationStateData: function setAnimationStateData(stateData) {
                if (this.isAnimationCached()) {
                    cc.warn('\'setAnimationStateData\' interface can not be invoked in cached mode.');
                } else {
                    var state = new spine.AnimationState(stateData);
                    if (this._listener) {
                        if (this._state) {
                            this._state.removeListener(this._listener);
                        }
                        state.addListener(this._listener);
                    }
                    this._state = state;
                }
            },
            __preload: function __preload() {
                if (CC_EDITOR) {
                    var Flags = cc.Object.Flags;
                    this._objFlags |= Flags.IsAnchorLocked | Flags.IsSizeLocked;
                    this._refreshInspector();
                }
                var children = this.node.children;
                for (var i = 0, n = children.length; i < n; i++) {
                    var child = children[i];
                    if (child && child._name === 'DEBUG_DRAW_NODE') {
                        child.destroy();
                    }
                }
                this._resetAssembler();
                this._updateSkeletonData();
                this._updateDebugDraw();
                this._updateUseTint();
                this._updateBatch();
            },
            setAnimationCacheMode: function setAnimationCacheMode(cacheMode) {
                if (this._preCacheMode !== cacheMode) {
                    this._cacheMode = cacheMode;
                    this._updateSkeletonData();
                    this._updateUseTint();
                }
            },
            isAnimationCached: function isAnimationCached() {
                if (CC_EDITOR)
                    return false;
                return this._cacheMode !== AnimationCacheMode.REALTIME;
            },
            update: function update(dt) {
                if (CC_EDITOR)
                    return;
                if (this.paused)
                    return;
                dt *= this.timeScale * sp.timeScale;
                if (this.isAnimationCached()) {
                    if (this._isAniComplete) {
                        if (this._animationQueue.length === 0 && !this._headAniInfo) {
                            var frameCache = this._frameCache;
                            if (frameCache && frameCache.isInvalid()) {
                                frameCache.updateToFrame();
                                var frames = frameCache.frames;
                                this._curFrame = frames[frames.length - 1];
                            }
                            return;
                        }
                        if (!this._headAniInfo) {
                            this._headAniInfo = this._animationQueue.shift();
                        }
                        this._accTime += dt;
                        if (this._accTime > this._headAniInfo.delay) {
                            var aniInfo = this._headAniInfo;
                            this._headAniInfo = null;
                            this.setAnimation(0, aniInfo.animationName, aniInfo.loop);
                        }
                        return;
                    }
                    this._updateCache(dt);
                } else {
                    this._updateRealtime(dt);
                }
            },
            _emitCacheCompleteEvent: function _emitCacheCompleteEvent() {
                if (!this._listener)
                    return;
                this._endEntry.animation.name = this._animationName;
                this._listener.complete && this._listener.complete(this._endEntry);
                this._listener.end && this._listener.end(this._endEntry);
            },
            _updateCache: function _updateCache(dt) {
                var frameCache = this._frameCache;
                if (!frameCache.isInited()) {
                    return;
                }
                var frames = frameCache.frames;
                var frameTime = SkeletonCache.FrameTime;
                if (this._accTime == 0 && this._playCount == 0) {
                    this._startEntry.animation.name = this._animationName;
                    this._listener && this._listener.start && this._listener.start(this._startEntry);
                }
                this._accTime += dt;
                var frameIdx = Math.floor(this._accTime / frameTime);
                if (!frameCache.isCompleted) {
                    frameCache.updateToFrame(frameIdx);
                }
                if (frameCache.isCompleted && frameIdx >= frames.length) {
                    this._playCount++;
                    if (this._playTimes > 0 && this._playCount >= this._playTimes) {
                        this._curFrame = frames[frames.length - 1];
                        this._accTime = 0;
                        this._playCount = 0;
                        this._isAniComplete = true;
                        this._emitCacheCompleteEvent();
                        return;
                    }
                    this._accTime = 0;
                    frameIdx = 0;
                    this._emitCacheCompleteEvent();
                }
                this._curFrame = frames[frameIdx];
            },
            _updateRealtime: function _updateRealtime(dt) {
                var skeleton = this._skeleton;
                var state = this._state;
                if (skeleton) {
                    skeleton.update(dt);
                    if (state) {
                        state.update(dt);
                        state.apply(skeleton);
                    }
                }
            },
            _activateMaterial: function _activateMaterial() {
                if (!this.skeletonData) {
                    this.disableRender();
                    return;
                }
                this.skeletonData.ensureTexturesLoaded(function (result) {
                    if (!result) {
                        this.disableRender();
                        return;
                    }
                    var material = this.sharedMaterials[0];
                    if (!material) {
                        material = Material.getInstantiatedBuiltinMaterial('2d-spine', this);
                    } else {
                        material = Material.getInstantiatedMaterial(material, this);
                    }
                    material.define('CC_USE_MODEL', true);
                    this._prepareToRender(material);
                }, this);
            },
            _prepareToRender: function _prepareToRender(material) {
                this.setMaterial(0, material);
                if (this.node && this.node._renderComponent == this) {
                    this.markForRender(true);
                }
            },
            onEnable: function onEnable() {
                this._super();
                this._activateMaterial();
            },
            onRestore: function onRestore() {
                this._boundingBox = cc.rect();
            },
            setVertexEffectDelegate: function setVertexEffectDelegate(effectDelegate) {
                this._effectDelegate = effectDelegate;
            },
            updateWorldTransform: function updateWorldTransform() {
                if (!this.isAnimationCached())
                    return;
                if (this._skeleton) {
                    this._skeleton.updateWorldTransform();
                }
            },
            setToSetupPose: function setToSetupPose() {
                if (this._skeleton) {
                    this._skeleton.setToSetupPose();
                }
            },
            setBonesToSetupPose: function setBonesToSetupPose() {
                if (this._skeleton) {
                    this._skeleton.setBonesToSetupPose();
                }
            },
            setSlotsToSetupPose: function setSlotsToSetupPose() {
                if (this._skeleton) {
                    this._skeleton.setSlotsToSetupPose();
                }
            },
            updateAnimationCache: function updateAnimationCache(animName) {
                if (!this.isAnimationCached())
                    return;
                var uuid = this.skeletonData._uuid;
                if (this._skeletonCache) {
                    this._skeletonCache.updateAnimationCache(uuid, animName);
                }
            },
            invalidAnimationCache: function invalidAnimationCache() {
                if (!this.isAnimationCached())
                    return;
                if (this._skeletonCache) {
                    this._skeletonCache.invalidAnimationCache(this.skeletonData._uuid);
                }
            },
            findBone: function findBone(boneName) {
                if (this._skeleton) {
                    return this._skeleton.findBone(boneName);
                }
                return null;
            },
            findSlot: function findSlot(slotName) {
                if (this._skeleton) {
                    return this._skeleton.findSlot(slotName);
                }
                return null;
            },
            setSkin: function setSkin(skinName) {
                if (this._skeleton) {
                    this._skeleton.setSkinByName(skinName);
                    this._skeleton.setSlotsToSetupPose();
                }
                this.invalidAnimationCache();
            },
            getAttachment: function getAttachment(slotName, attachmentName) {
                if (this._skeleton) {
                    return this._skeleton.getAttachmentByName(slotName, attachmentName);
                }
                return null;
            },
            setAttachment: function setAttachment(slotName, attachmentName) {
                if (this._skeleton) {
                    this._skeleton.setAttachment(slotName, attachmentName);
                }
                this.invalidAnimationCache();
            },
            getTextureAtlas: function getTextureAtlas(regionAttachment) {
                return regionAttachment.region;
            },
            setMix: function setMix(fromAnimation, toAnimation, duration) {
                if (this._state) {
                    this._state.data.setMix(fromAnimation, toAnimation, duration);
                }
            },
            setAnimation: function setAnimation(trackIndex, name, loop) {
                this._playTimes = loop ? 0 : 1;
                this._animationName = name;
                if (this.isAnimationCached()) {
                    if (trackIndex !== 0) {
                        cc.warn('Track index can not greater than 0 in cached mode.');
                    }
                    if (!this._skeletonCache)
                        return null;
                    var cache = this._skeletonCache.getAnimationCache(this.skeletonData._uuid, name);
                    if (!cache) {
                        cache = this._skeletonCache.initAnimationCache(this.skeletonData._uuid, name);
                    }
                    if (cache) {
                        this._isAniComplete = false;
                        this._accTime = 0;
                        this._playCount = 0;
                        this._frameCache = cache;
                        this._frameCache.updateToFrame(0);
                        this._curFrame = this._frameCache.frames[0];
                    }
                } else {
                    if (this._skeleton) {
                        var animation = this._skeleton.data.findAnimation(name);
                        if (!animation) {
                            cc.logID(7509, name);
                            return null;
                        }
                        var res = this._state.setAnimationWith(trackIndex, animation, loop);
                        this._state.apply(this._skeleton);
                        return res;
                    }
                }
                return null;
            },
            addAnimation: function addAnimation(trackIndex, name, loop, delay) {
                delay = delay || 0;
                if (this.isAnimationCached()) {
                    if (trackIndex !== 0) {
                        cc.warn('Track index can not greater than 0 in cached mode.');
                    }
                    this._animationQueue.push({
                        animationName: name,
                        loop: loop,
                        delay: delay
                    });
                } else {
                    if (this._skeleton) {
                        var animation = this._skeleton.data.findAnimation(name);
                        if (!animation) {
                            cc.logID(7510, name);
                            return null;
                        }
                        return this._state.addAnimationWith(trackIndex, animation, loop, delay);
                    }
                }
                return null;
            },
            findAnimation: function findAnimation(name) {
                if (this._skeleton) {
                    return this._skeleton.data.findAnimation(name);
                }
                return null;
            },
            getCurrent: function getCurrent(trackIndex) {
                if (this.isAnimationCached()) {
                    cc.warn('\'getCurrent\' interface can not be invoked in cached mode.');
                } else {
                    if (this._state) {
                        return this._state.getCurrent(trackIndex);
                    }
                }
                return null;
            },
            clearTracks: function clearTracks() {
                if (this.isAnimationCached()) {
                    cc.warn('\'clearTracks\' interface can not be invoked in cached mode.');
                } else {
                    if (this._state) {
                        this._state.clearTracks();
                    }
                }
            },
            clearTrack: function clearTrack(trackIndex) {
                if (this.isAnimationCached()) {
                    cc.warn('\'clearTrack\' interface can not be invoked in cached mode.');
                } else {
                    if (this._state) {
                        this._state.clearTrack(trackIndex);
                        if (CC_EDITOR && !cc.engine.isPlaying) {
                            this._state.update(0);
                        }
                    }
                }
            },
            setStartListener: function setStartListener(listener) {
                this._ensureListener();
                this._listener.start = listener;
            },
            setInterruptListener: function setInterruptListener(listener) {
                this._ensureListener();
                this._listener.interrupt = listener;
            },
            setEndListener: function setEndListener(listener) {
                this._ensureListener();
                this._listener.end = listener;
            },
            setDisposeListener: function setDisposeListener(listener) {
                this._ensureListener();
                this._listener.dispose = listener;
            },
            setCompleteListener: function setCompleteListener(listener) {
                this._ensureListener();
                this._listener.complete = listener;
            },
            setEventListener: function setEventListener(listener) {
                this._ensureListener();
                this._listener.event = listener;
            },
            setTrackStartListener: function setTrackStartListener(entry, listener) {
                TrackEntryListeners.getListeners(entry).start = listener;
            },
            setTrackInterruptListener: function setTrackInterruptListener(entry, listener) {
                TrackEntryListeners.getListeners(entry).interrupt = listener;
            },
            setTrackEndListener: function setTrackEndListener(entry, listener) {
                TrackEntryListeners.getListeners(entry).end = listener;
            },
            setTrackDisposeListener: function setTrackDisposeListener(entry, listener) {
                TrackEntryListeners.getListeners(entry).dispose = listener;
            },
            setTrackCompleteListener: function setTrackCompleteListener(entry, listener) {
                TrackEntryListeners.getListeners(entry).complete = function (trackEntry) {
                    var loopCount = Math.floor(trackEntry.trackTime / trackEntry.animationEnd);
                    listener(trackEntry, loopCount);
                };
            },
            setTrackEventListener: function setTrackEventListener(entry, listener) {
                TrackEntryListeners.getListeners(entry).event = listener;
            },
            getState: function getState() {
                return this._state;
            },
            _updateAnimEnum: CC_EDITOR && function () {
                var animEnum;
                if (this.skeletonData) {
                    animEnum = this.skeletonData.getAnimsEnum();
                }
                setEnumAttr(this, '_animationIndex', animEnum || DefaultAnimsEnum);
            },
            _updateSkinEnum: CC_EDITOR && function () {
                var skinEnum;
                if (this.skeletonData) {
                    skinEnum = this.skeletonData.getSkinsEnum();
                }
                setEnumAttr(this, '_defaultSkinIndex', skinEnum || DefaultSkinsEnum);
            },
            _ensureListener: function _ensureListener() {
                if (!this._listener) {
                    this._listener = new TrackEntryListeners();
                    if (this._state) {
                        this._state.addListener(this._listener);
                    }
                }
            },
            _updateSkeletonData: function _updateSkeletonData() {
                if (!this.node) {
                    cc.warn('node has been destroyed, can\'t set sp.skeletonData');
                    return;
                }
                if (!this.skeletonData) {
                    this.disableRender();
                    return;
                }
                ;
                var data = this.skeletonData.getRuntimeData();
                if (!data) {
                    this.disableRender();
                    return;
                }
                ;
                try {
                    this.setSkeletonData(data);
                    if (!this.isAnimationCached()) {
                        this.setAnimationStateData(new spine.AnimationStateData(this._skeleton.data));
                    }
                    this.defaultSkin && this.setSkin(this.defaultSkin);
                } catch (e) {
                    cc.warn(e);
                }
                this._preCacheMode = this._cacheMode;
                this.animation = this.defaultAnimation;
            },
            _refreshInspector: function _refreshInspector() {
                this._updateAnimEnum();
                this._updateSkinEnum();
                Editor.Utils.refreshSelectedInspector('node', this.node.uuid);
            },
            _updateDebugDraw: function _updateDebugDraw() {
                if (this.debugBones || this.debugSlots) {
                    if (!this._debugRenderer) {
                        var debugDrawNode = new cc.PrivateNode();
                        debugDrawNode.name = 'DEBUG_DRAW_NODE';
                        var debugDraw = debugDrawNode.addComponent(Graphics);
                        debugDraw.lineWidth = 1;
                        debugDraw.strokeColor = cc.color(255, 0, 0, 255);
                        this._debugRenderer = debugDraw;
                    }
                    this._debugRenderer.node.parent = this.node;
                    if (this.isAnimationCached()) {
                        cc.warn('Debug bones or slots is invalid in cached mode');
                    }
                } else if (this._debugRenderer) {
                    this._debugRenderer.node.parent = null;
                }
            }
        });
        module.exports = sp.Skeleton;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNrZWxldG9uLmpzIiwiL1VzZXJzL2dhb3lhbmcvV29ya1NwYWNlL2pveWNhc3RsZS9iaW5nby9jbGllbnQvYmluZ28vZW5naW5lL2V4dGVuc2lvbnMvc3BpbmUvU2tlbGV0b24uanMiXSwibmFtZXMiOlsiVHJhY2tFbnRyeUxpc3RlbmVycyIsInJlcXVpcmUiLCJSZW5kZXJDb21wb25lbnQiLCJzcGluZSIsIk1hdGVyaWFsIiwiR3JhcGhpY3MiLCJTa2VsZXRvbkNhY2hlIiwiRGVmYXVsdFNraW5zRW51bSIsImNjIiwiRW51bSIsIkRlZmF1bHRBbmltc0VudW0iLCJBbmltYXRpb25DYWNoZU1vZGUiLCJSRUFMVElNRSIsIlNIQVJFRF9DQUNIRSIsIlBSSVZBVEVfQ0FDSEUiLCJzZXRFbnVtQXR0ciIsIm9iaiIsInByb3BOYW1lIiwiZW51bURlZiIsIkNsYXNzIiwiQXR0ciIsInNldENsYXNzQXR0ciIsImdldExpc3QiLCJzcCIsIlNrZWxldG9uIiwibmFtZSIsImV4dGVuZHMiLCJlZGl0b3IiLCJDQ19FRElUT1IiLCJtZW51IiwiaGVscCIsInN0YXRpY3MiLCJwcm9wZXJ0aWVzIiwicGF1c2VkIiwiZGVmYXVsdCIsInZpc2libGUiLCJza2VsZXRvbkRhdGEiLCJ0eXBlIiwiU2tlbGV0b25EYXRhIiwibm90aWZ5IiwiZGVmYXVsdFNraW4iLCJkZWZhdWx0QW5pbWF0aW9uIiwiX3JlZnJlc2hJbnNwZWN0b3IiLCJfdXBkYXRlU2tlbGV0b25EYXRhIiwidG9vbHRpcCIsIkNDX0RFViIsImFuaW1hdGlvbiIsImdldCIsImlzQW5pbWF0aW9uQ2FjaGVkIiwiX2FuaW1hdGlvbk5hbWUiLCJlbnRyeSIsImdldEN1cnJlbnQiLCJzZXQiLCJ2YWx1ZSIsInNldEFuaW1hdGlvbiIsImxvb3AiLCJjbGVhclRyYWNrIiwic2V0VG9TZXR1cFBvc2UiLCJfZGVmYXVsdFNraW5JbmRleCIsInNraW5zRW51bSIsImdldFNraW5zRW51bSIsInNraW5JbmRleCIsInVuZGVmaW5lZCIsImVycm9ySUQiLCJza2luTmFtZSIsInNldFNraW4iLCJlbmdpbmUiLCJpc1BsYXlpbmciLCJkaXNwbGF5TmFtZSIsIl9hbmltYXRpb25JbmRleCIsImFuaW1hdGlvbk5hbWUiLCJhbmltc0VudW0iLCJnZXRBbmltc0VudW0iLCJhbmltSW5kZXgiLCJhbmltTmFtZSIsIl9wcmVDYWNoZU1vZGUiLCJfY2FjaGVNb2RlIiwiX2RlZmF1bHRDYWNoZU1vZGUiLCJzZXRBbmltYXRpb25DYWNoZU1vZGUiLCJlZGl0b3JPbmx5IiwiYW5pbWF0YWJsZSIsInByZW11bHRpcGxpZWRBbHBoYSIsInRpbWVTY2FsZSIsImRlYnVnU2xvdHMiLCJfdXBkYXRlRGVidWdEcmF3IiwiZGVidWdCb25lcyIsImRlYnVnTWVzaCIsInVzZVRpbnQiLCJfdXBkYXRlVXNlVGludCIsImVuYWJsZUJhdGNoIiwiX3VwZGF0ZUJhdGNoIiwiX2FjY1RpbWUiLCJfcGxheUNvdW50IiwiX2ZyYW1lQ2FjaGUiLCJfY3VyRnJhbWUiLCJfc2tlbGV0b25DYWNoZSIsIl9hbmltYXRpb25RdWV1ZSIsIl9oZWFkQW5pSW5mbyIsIl9wbGF5VGltZXMiLCJfaXNBbmlDb21wbGV0ZSIsImN0b3IiLCJfZWZmZWN0RGVsZWdhdGUiLCJfc2tlbGV0b24iLCJfcm9vdEJvbmUiLCJfbGlzdGVuZXIiLCJfYm91bmRpbmdCb3giLCJyZWN0IiwiX21hdGVyaWFsQ2FjaGUiLCJfZGVidWdSZW5kZXJlciIsIl9zdGFydFNsb3RJbmRleCIsIl9lbmRTbG90SW5kZXgiLCJfc3RhcnRFbnRyeSIsInRyYWNrSW5kZXgiLCJfZW5kRW50cnkiLCJzZXRNYXRlcmlhbCIsImluZGV4IiwibWF0ZXJpYWwiLCJfc3VwZXIiLCJiYXNlTWF0ZXJpYWwiLCJnZXRNYXRlcmlhbCIsImRlZmluZSIsImNhY2hlIiwibUtleSIsInNldFNrZWxldG9uRGF0YSIsIndpZHRoIiwiaGVpZ2h0Iiwibm9kZSIsInNldENvbnRlbnRTaXplIiwic2hhcmVkQ2FjaGUiLCJ3YXJuIiwic2tlbGV0b25JbmZvIiwiZ2V0U2tlbGV0b25DYWNoZSIsIl91dWlkIiwic2tlbGV0b24iLCJfY2xpcHBlciIsImNsaXBwZXIiLCJnZXRSb290Qm9uZSIsIlNrZWxldG9uQ2xpcHBpbmciLCJfYWN0aXZhdGVNYXRlcmlhbCIsInNldFNsb3RzUmFuZ2UiLCJzdGFydFNsb3RJbmRleCIsImVuZFNsb3RJbmRleCIsInNldEFuaW1hdGlvblN0YXRlRGF0YSIsInN0YXRlRGF0YSIsInN0YXRlIiwiQW5pbWF0aW9uU3RhdGUiLCJfc3RhdGUiLCJyZW1vdmVMaXN0ZW5lciIsImFkZExpc3RlbmVyIiwiX19wcmVsb2FkIiwiRmxhZ3MiLCJPYmplY3QiLCJfb2JqRmxhZ3MiLCJJc0FuY2hvckxvY2tlZCIsIklzU2l6ZUxvY2tlZCIsImNoaWxkcmVuIiwiaSIsIm4iLCJsZW5ndGgiLCJjaGlsZCIsIl9uYW1lIiwiZGVzdHJveSIsIl9yZXNldEFzc2VtYmxlciIsImNhY2hlTW9kZSIsInVwZGF0ZSIsImR0IiwiZnJhbWVDYWNoZSIsImlzSW52YWxpZCIsInVwZGF0ZVRvRnJhbWUiLCJmcmFtZXMiLCJzaGlmdCIsImRlbGF5IiwiYW5pSW5mbyIsIl91cGRhdGVDYWNoZSIsIl91cGRhdGVSZWFsdGltZSIsIl9lbWl0Q2FjaGVDb21wbGV0ZUV2ZW50IiwiY29tcGxldGUiLCJlbmQiLCJpc0luaXRlZCIsImZyYW1lVGltZSIsIkZyYW1lVGltZSIsInN0YXJ0IiwiZnJhbWVJZHgiLCJNYXRoIiwiZmxvb3IiLCJpc0NvbXBsZXRlZCIsImFwcGx5IiwiZGlzYWJsZVJlbmRlciIsImVuc3VyZVRleHR1cmVzTG9hZGVkIiwicmVzdWx0Iiwic2hhcmVkTWF0ZXJpYWxzIiwiZ2V0SW5zdGFudGlhdGVkQnVpbHRpbk1hdGVyaWFsIiwiZ2V0SW5zdGFudGlhdGVkTWF0ZXJpYWwiLCJfcHJlcGFyZVRvUmVuZGVyIiwiX3JlbmRlckNvbXBvbmVudCIsIm1hcmtGb3JSZW5kZXIiLCJvbkVuYWJsZSIsIm9uUmVzdG9yZSIsInNldFZlcnRleEVmZmVjdERlbGVnYXRlIiwiZWZmZWN0RGVsZWdhdGUiLCJ1cGRhdGVXb3JsZFRyYW5zZm9ybSIsInNldEJvbmVzVG9TZXR1cFBvc2UiLCJzZXRTbG90c1RvU2V0dXBQb3NlIiwidXBkYXRlQW5pbWF0aW9uQ2FjaGUiLCJ1dWlkIiwiaW52YWxpZEFuaW1hdGlvbkNhY2hlIiwiZmluZEJvbmUiLCJib25lTmFtZSIsImZpbmRTbG90Iiwic2xvdE5hbWUiLCJzZXRTa2luQnlOYW1lIiwiZ2V0QXR0YWNobWVudCIsImF0dGFjaG1lbnROYW1lIiwiZ2V0QXR0YWNobWVudEJ5TmFtZSIsInNldEF0dGFjaG1lbnQiLCJnZXRUZXh0dXJlQXRsYXMiLCJyZWdpb25BdHRhY2htZW50IiwicmVnaW9uIiwic2V0TWl4IiwiZnJvbUFuaW1hdGlvbiIsInRvQW5pbWF0aW9uIiwiZHVyYXRpb24iLCJkYXRhIiwiZ2V0QW5pbWF0aW9uQ2FjaGUiLCJpbml0QW5pbWF0aW9uQ2FjaGUiLCJmaW5kQW5pbWF0aW9uIiwibG9nSUQiLCJyZXMiLCJzZXRBbmltYXRpb25XaXRoIiwiYWRkQW5pbWF0aW9uIiwicHVzaCIsImFkZEFuaW1hdGlvbldpdGgiLCJjbGVhclRyYWNrcyIsInNldFN0YXJ0TGlzdGVuZXIiLCJsaXN0ZW5lciIsIl9lbnN1cmVMaXN0ZW5lciIsInNldEludGVycnVwdExpc3RlbmVyIiwiaW50ZXJydXB0Iiwic2V0RW5kTGlzdGVuZXIiLCJzZXREaXNwb3NlTGlzdGVuZXIiLCJkaXNwb3NlIiwic2V0Q29tcGxldGVMaXN0ZW5lciIsInNldEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInNldFRyYWNrU3RhcnRMaXN0ZW5lciIsImdldExpc3RlbmVycyIsInNldFRyYWNrSW50ZXJydXB0TGlzdGVuZXIiLCJzZXRUcmFja0VuZExpc3RlbmVyIiwic2V0VHJhY2tEaXNwb3NlTGlzdGVuZXIiLCJzZXRUcmFja0NvbXBsZXRlTGlzdGVuZXIiLCJ0cmFja0VudHJ5IiwibG9vcENvdW50IiwidHJhY2tUaW1lIiwiYW5pbWF0aW9uRW5kIiwic2V0VHJhY2tFdmVudExpc3RlbmVyIiwiZ2V0U3RhdGUiLCJfdXBkYXRlQW5pbUVudW0iLCJhbmltRW51bSIsIl91cGRhdGVTa2luRW51bSIsInNraW5FbnVtIiwiZ2V0UnVudGltZURhdGEiLCJBbmltYXRpb25TdGF0ZURhdGEiLCJlIiwiRWRpdG9yIiwiVXRpbHMiLCJyZWZyZXNoU2VsZWN0ZWRJbnNwZWN0b3IiLCJkZWJ1Z0RyYXdOb2RlIiwiUHJpdmF0ZU5vZGUiLCJkZWJ1Z0RyYXciLCJhZGRDb21wb25lbnQiLCJsaW5lV2lkdGgiLCJzdHJva2VDb2xvciIsImNvbG9yIiwicGFyZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjtJQUFBLElBQUEsT0FBQSxHQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUEsSUFBQSxPQUFBLE9BQUEsS0FBQSxXQUFBOzs7Ozs7Ozs7Ozs7O1FBMEJBLElBQU1BLG1CQUFBQSxHQUFzQkMsT0FBQUEsQ0FBUSx5QkFBUkEsQ0FBNUI7UUFDQSxJQUFNQyxlQUFBQSxHQUFrQkQsT0FBQUEsQ0FBUSxpREFBUkEsQ0FBeEI7UUFDQSxJQUFNRSxLQUFBQSxHQUFRRixPQUFBQSxDQUFRLGFBQVJBLENBQWQ7UUFDQSxJQUFNRyxRQUFBQSxHQUFXSCxPQUFBQSxDQUFRLCtDQUFSQSxDQUFqQjtRQUNBLElBQU1JLFFBQUFBLEdBQVdKLE9BQUFBLENBQVEsc0NBQVJBLENBQWpCO1FBRUEsSUFBSUssYUFBQUEsR0FBZ0JMLE9BQUFBLENBQVEsa0JBQVJBLENBQXBCO1FBS0EsSUFBSU0sZ0JBQUFBLEdBQW1CQyxFQUFBQSxDQUFHQyxJQUFIRCxDQUFRLEVBQUUsV0FBVyxDQUFDLENBQWQsRUFBUkEsQ0FBdkI7UUFDQSxJQUFJRSxnQkFBQUEsR0FBbUJGLEVBQUFBLENBQUdDLElBQUhELENBQVEsRUFBRSxVQUFVLENBQVosRUFBUkEsQ0FBdkI7UUFPQSxJQUFJRyxrQkFBQUEsR0FBcUJILEVBQUFBLENBQUdDLElBQUhELENBQVE7QUFBQSxZQU03QkksUUFBQUEsRUFB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R3RCLElBQUlFLFNBQUFBLEdBQVlGLGFBQUFBLENBQWNHLFlBQWRILENBQTJCclEsUUFBM0JxUSxDQUFoQixDQUhzQjtBQUFBLHdCQUl0QkUsU0FBQUEsQ0FBVUUsU0FBVkYsR0FBc0IsQ0FBdEJBLENBSnNCO0FBQUEsd0JBS3RCQSxTQUFBQSxDQUFVRyxXQUFWSCxHQUF3QnBRLEVBQUFBLENBQUd3USxLQUFIeFEsQ0FBUyxHQUFUQSxFQUFjLENBQWRBLEVBQWlCLENBQWpCQSxFQUFvQixHQUFwQkEsQ0FBeEJvUSxDQUxzQjtBQUFBLHdCQU90QixLQUFLaEssY0FBTCxHQUFzQmdLLFNBQXRCLENBUHNCO0FBQUEscUJBRFU7QUFBQSxvQkFXcEMsS0FBS2hLLGNBQUwsQ0FBb0JrQixJQUFwQixDQUF5Qm1KLE1BQXpCLEdBQWtDLEtBQUtuSixJQUF2QyxDQVhvQztBQUFBLG9CQVlwQyxJQUFJLEtBQUs5RSxpQkFBTCxFQUFKLEVBQThCO0FBQUEsd0JBQzFCeEMsRUFBQUEsQ0FBR3lILElBQUh6SCxDQUFRLGdEQUFSQSxFQUQwQjtBQUFBLHFCQVpNO0FBQUEsaUJBQXhDLE1BZ0JLLElBQUksS0FBS29HLGNBQVQsRUFBeUI7QUFBQSxvQkFDMUIsS0FBS0EsY0FBTCxDQUFvQmtCLElBQXBCLENBQXlCbUosTUFBekIsR0FBa0MsSUFBbEMsQ0FEMEI7QUFBQSxpQkFqQko7QUFBQSxhQWx1Q1g7QUFBQSxTQUFUelEsQ0FBZGU7UUF5dkNBMlAsTUFBQUEsQ0FBT0MsT0FBUEQsR0FBaUIzUCxFQUFBQSxDQUFHQyxRQUFwQjBQIiwiZmlsZSI6IlNrZWxldG9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxNiBDaHVrb25nIFRlY2hub2xvZ2llcyBJbmMuXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXG4gIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxuICBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcbiAgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXG5cbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5jb25zdCBUcmFja0VudHJ5TGlzdGVuZXJzID0gcmVxdWlyZSgnLi90cmFjay1lbnRyeS1saXN0ZW5lcnMnKTtcbmNvbnN0IFJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uLy4uL2NvY29zMmQvY29yZS9jb21wb25lbnRzL0NDUmVuZGVyQ29tcG9uZW50Jyk7XG5jb25zdCBzcGluZSA9IHJlcXVpcmUoJy4vbGliL3NwaW5lJyk7XG5jb25zdCBNYXRlcmlhbCA9IHJlcXVpcmUoJy4uLy4uL2NvY29zMmQvY29yZS9hc3NldHMvbWF0ZXJpYWwvQ0NNYXRlcmlhbCcpO1xuY29uc3QgR3JhcGhpY3MgPSByZXF1aXJlKCcuLi8uLi9jb2NvczJkL2NvcmUvZ3JhcGhpY3MvZ3JhcGhpY3MnKTtcblxubGV0IFNrZWxldG9uQ2FjaGUgPSByZXF1aXJlKCcuL3NrZWxldG9uLWNhY2hlJyk7XG5cbi8qKlxuICogQG1vZHVsZSBzcFxuICovXG5sZXQgRGVmYXVsdFNraW5zRW51bSA9IGNjLkVudW0oeyAnZGVmYXVsdCc6IC0xIH0pO1xubGV0IERlZmF1bHRBbmltc0VudW0gPSBjYy5FbnVtKHsgJzxOb25lPic6IDAgfSk7XG5cbi8qKlxuICogISNlbiBFbnVtIGZvciBhbmltYXRpb24gY2FjaGUgbW9kZSB0eXBlLlxuICogISN6aCBTcGluZeWKqOeUu+e8k+WtmOexu+Wei1xuICogQGVudW0gU2tlbGV0b24uQW5pbWF0aW9uQ2FjaGVNb2RlXG4gKi9cbmxldCBBbmltYXRpb25DYWNoZU1vZGUgPSBjYy5FbnVtKHtcbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSByZWFsdGltZSBtb2RlLlxuICAgICAqICEjemgg5a6e5pe26K6h566X5qih5byP44CCXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFJFQUxUSU1FXG4gICAgICovXG4gICAgUkVBTFRJTUU6IDAsXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgc2hhcmVkIGNhY2hlIG1vZGUuXG4gICAgICogISN6aCDlhbHkuqvnvJPlrZjmqKHlvI/jgIJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gU0hBUkVEX0NBQ0hFXG4gICAgICovXG4gICAgU0hBUkVEX0NBQ0hFOiAxLFxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIHByaXZhdGUgY2FjaGUgbW9kZS5cbiAgICAgKiAhI3poIOengeaciee8k+WtmOaooeW8j+OAglxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBQUklWQVRFX0NBQ0hFXG4gICAgICovXG4gICAgUFJJVkFURV9DQUNIRTogMiBcbn0pO1xuXG5mdW5jdGlvbiBzZXRFbnVtQXR0ciAob2JqLCBwcm9wTmFtZSwgZW51bURlZikge1xuICAgIGNjLkNsYXNzLkF0dHIuc2V0Q2xhc3NBdHRyKG9iaiwgcHJvcE5hbWUsICd0eXBlJywgJ0VudW0nKTtcbiAgICBjYy5DbGFzcy5BdHRyLnNldENsYXNzQXR0cihvYmosIHByb3BOYW1lLCAnZW51bUxpc3QnLCBjYy5FbnVtLmdldExpc3QoZW51bURlZikpO1xufVxuXG4vKipcbiAqICEjZW5cbiAqIFRoZSBza2VsZXRvbiBvZiBTcGluZSA8YnIvPlxuICogPGJyLz5cbiAqIChTa2VsZXRvbiBoYXMgYSByZWZlcmVuY2UgdG8gYSBTa2VsZXRvbkRhdGEgYW5kIHN0b3JlcyB0aGUgc3RhdGUgZm9yIHNrZWxldG9uIGluc3RhbmNlLFxuICogd2hpY2ggY29uc2lzdHMgb2YgdGhlIGN1cnJlbnQgcG9zZSdzIGJvbmUgU1JULCBzbG90IGNvbG9ycywgYW5kIHdoaWNoIHNsb3QgYXR0YWNobWVudHMgYXJlIHZpc2libGUuIDxici8+XG4gKiBNdWx0aXBsZSBza2VsZXRvbnMgY2FuIHVzZSB0aGUgc2FtZSBTa2VsZXRvbkRhdGEgd2hpY2ggaW5jbHVkZXMgYWxsIGFuaW1hdGlvbnMsIHNraW5zLCBhbmQgYXR0YWNobWVudHMuKSA8YnIvPlxuICogISN6aFxuICogU3BpbmUg6aqo6aq85Yqo55S7IDxici8+XG4gKiA8YnIvPlxuICogKFNrZWxldG9uIOWFt+acieWvuemqqOmqvOaVsOaNrueahOW8leeUqOW5tuS4lOWtmOWCqOS6humqqOmqvOWunuS+i+eahOeKtuaAge+8jFxuICog5a6D55Sx5b2T5YmN55qE6aqo6aq85Yqo5L2c77yMc2xvdCDpopzoibLvvIzlkozlj6/op4HnmoQgc2xvdCBhdHRhY2htZW50cyDnu4TmiJDjgII8YnIvPlxuICog5aSa5LiqIFNrZWxldG9uIOWPr+S7peS9v+eUqOebuOWQjOeahOmqqOmqvOaVsOaNru+8jOWFtuS4reWMheaLrOaJgOacieeahOWKqOeUu++8jOearuiCpOWSjCBhdHRhY2htZW50c+OAglxuICpcbiAqIEBjbGFzcyBTa2VsZXRvblxuICogQGV4dGVuZHMgUmVuZGVyQ29tcG9uZW50XG4gKi9cbnNwLlNrZWxldG9uID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdzcC5Ta2VsZXRvbicsXG4gICAgZXh0ZW5kczogUmVuZGVyQ29tcG9uZW50LFxuICAgIGVkaXRvcjogQ0NfRURJVE9SICYmIHtcbiAgICAgICAgbWVudTogJ2kxOG46TUFJTl9NRU5VLmNvbXBvbmVudC5yZW5kZXJlcnMvU3BpbmUgU2tlbGV0b24nLFxuICAgICAgICBoZWxwOiAnYXBwOi8vZG9jcy9odG1sL2NvbXBvbmVudHMvc3BpbmUuaHRtbCcsXG4gICAgICAgIC8vcGxheU9uRm9jdXM6IHRydWVcbiAgICB9LFxuXG4gICAgc3RhdGljczoge1xuICAgICAgICBBbmltYXRpb25DYWNoZU1vZGU6IEFuaW1hdGlvbkNhY2hlTW9kZSxcbiAgICB9LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBUaGUgc2tlbGV0YWwgYW5pbWF0aW9uIGlzIHBhdXNlZD9cbiAgICAgICAgICogISN6aCDor6XpqqjpqrzliqjnlLvmmK/lkKbmmoLlgZzjgIJcbiAgICAgICAgICogQHByb3BlcnR5IHBhdXNlZFxuICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgICAgICogQHJlYWRPbmx5XG4gICAgICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICBwYXVzZWQ6IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlblxuICAgICAgICAgKiBUaGUgc2tlbGV0b24gZGF0YSBjb250YWlucyB0aGUgc2tlbGV0b24gaW5mb3JtYXRpb24gKGJpbmQgcG9zZSBib25lcywgc2xvdHMsIGRyYXcgb3JkZXIsXG4gICAgICAgICAqIGF0dGFjaG1lbnRzLCBza2lucywgZXRjKSBhbmQgYW5pbWF0aW9ucyBidXQgZG9lcyBub3QgaG9sZCBhbnkgc3RhdGUuPGJyLz5cbiAgICAgICAgICogTXVsdGlwbGUgc2tlbGV0b25zIGNhbiBzaGFyZSB0aGUgc2FtZSBza2VsZXRvbiBkYXRhLlxuICAgICAgICAgKiAhI3poXG4gICAgICAgICAqIOmqqOmqvOaVsOaNruWMheWQq+S6humqqOmqvOS/oeaBr++8iOe7keWumumqqOmqvOWKqOS9nO+8jHNsb3Rz77yM5riy5p+T6aG65bqP77yMXG4gICAgICAgICAqIGF0dGFjaG1lbnRz77yM55qu6IKk562J562J77yJ5ZKM5Yqo55S75L2G5LiN5oyB5pyJ5Lu75L2V54q25oCB44CCPGJyLz5cbiAgICAgICAgICog5aSa5LiqIFNrZWxldG9uIOWPr+S7peWFseeUqOebuOWQjOeahOmqqOmqvOaVsOaNruOAglxuICAgICAgICAgKiBAcHJvcGVydHkge3NwLlNrZWxldG9uRGF0YX0gc2tlbGV0b25EYXRhXG4gICAgICAgICAqL1xuICAgICAgICBza2VsZXRvbkRhdGE6IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICAgICAgICB0eXBlOiBzcC5Ta2VsZXRvbkRhdGEsXG4gICAgICAgICAgICBub3RpZnkgKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVmYXVsdFNraW4gPSAnJztcbiAgICAgICAgICAgICAgICB0aGlzLmRlZmF1bHRBbmltYXRpb24gPSAnJztcbiAgICAgICAgICAgICAgICBpZiAoQ0NfRURJVE9SKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlZnJlc2hJbnNwZWN0b3IoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlU2tlbGV0b25EYXRhKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC5za2VsZXRvbi5za2VsZXRvbl9kYXRhJ1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIOeUseS6jiBzcGluZSDnmoQgc2tpbiDmmK/ml6Dms5XkuozmrKHmm7/mjaLnmoTvvIzmiYDku6Xlj6rog73orr7nva7pu5jorqTnmoQgc2tpblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBUaGUgbmFtZSBvZiBkZWZhdWx0IHNraW4uXG4gICAgICAgICAqICEjemgg6buY6K6k55qE55qu6IKk5ZCN56ew44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkZWZhdWx0U2tpblxuICAgICAgICAgKi9cbiAgICAgICAgZGVmYXVsdFNraW46IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6ICcnLFxuICAgICAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBUaGUgbmFtZSBvZiBkZWZhdWx0IGFuaW1hdGlvbi5cbiAgICAgICAgICogISN6aCDpu5jorqTnmoTliqjnlLvlkI3np7DjgIJcbiAgICAgICAgICogQHByb3BlcnR5IHtTdHJpbmd9IGRlZmF1bHRBbmltYXRpb25cbiAgICAgICAgICovXG4gICAgICAgIGRlZmF1bHRBbmltYXRpb246IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6ICcnLFxuICAgICAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBUaGUgbmFtZSBvZiBjdXJyZW50IHBsYXlpbmcgYW5pbWF0aW9uLlxuICAgICAgICAgKiAhI3poIOW9k+WJjeaSreaUvueahOWKqOeUu+WQjeensOOAglxuICAgICAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gYW5pbWF0aW9uXG4gICAgICAgICAqL1xuICAgICAgICBhbmltYXRpb246IHtcbiAgICAgICAgICAgIGdldCAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNBbmltYXRpb25DYWNoZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYW5pbWF0aW9uTmFtZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZW50cnkgPSB0aGlzLmdldEN1cnJlbnQoMCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoZW50cnkgJiYgZW50cnkuYW5pbWF0aW9uLm5hbWUpIHx8IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldCAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlZmF1bHRBbmltYXRpb24gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRBbmltYXRpb24oMCwgdmFsdWUsIHRoaXMubG9vcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCF0aGlzLmlzQW5pbWF0aW9uQ2FjaGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhclRyYWNrKDApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFRvU2V0dXBQb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBfZGVmYXVsdFNraW5JbmRleFxuICAgICAgICAgKi9cbiAgICAgICAgX2RlZmF1bHRTa2luSW5kZXg6IHtcbiAgICAgICAgICAgIGdldCAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2tlbGV0b25EYXRhICYmIHRoaXMuZGVmYXVsdFNraW4pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNraW5zRW51bSA9IHRoaXMuc2tlbGV0b25EYXRhLmdldFNraW5zRW51bSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2tpbnNFbnVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2tpbkluZGV4ID0gc2tpbnNFbnVtW3RoaXMuZGVmYXVsdFNraW5dO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNraW5JbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNraW5JbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNraW5zRW51bTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5za2VsZXRvbkRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgc2tpbnNFbnVtID0gdGhpcy5za2VsZXRvbkRhdGEuZ2V0U2tpbnNFbnVtKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICggIXNraW5zRW51bSApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNjLmVycm9ySUQoJycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgc2tpbk5hbWUgPSBza2luc0VudW1bdmFsdWVdO1xuICAgICAgICAgICAgICAgIGlmIChza2luTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVmYXVsdFNraW4gPSBza2luTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTa2luKHRoaXMuZGVmYXVsdFNraW4pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoQ0NfRURJVE9SICYmICFjYy5lbmdpbmUuaXNQbGF5aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWZyZXNoSW5zcGVjdG9yKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNjLmVycm9ySUQoNzUwMSwgdGhpcy5uYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHlwZTogRGVmYXVsdFNraW5zRW51bSxcbiAgICAgICAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogXCJEZWZhdWx0IFNraW5cIixcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQuc2tlbGV0b24uZGVmYXVsdF9za2luJ1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIHZhbHVlIG9mIDAgcmVwcmVzZW50cyBubyBhbmltYXRpb25cbiAgICAgICAgX2FuaW1hdGlvbkluZGV4OiB7XG4gICAgICAgICAgICBnZXQgKCkge1xuICAgICAgICAgICAgICAgIHZhciBhbmltYXRpb25OYW1lID0gKCFDQ19FRElUT1IgfHwgY2MuZW5naW5lLmlzUGxheWluZykgPyB0aGlzLmFuaW1hdGlvbiA6IHRoaXMuZGVmYXVsdEFuaW1hdGlvbjtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5za2VsZXRvbkRhdGEgJiYgYW5pbWF0aW9uTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYW5pbXNFbnVtID0gdGhpcy5za2VsZXRvbkRhdGEuZ2V0QW5pbXNFbnVtKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhbmltc0VudW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbmltSW5kZXggPSBhbmltc0VudW1bYW5pbWF0aW9uTmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYW5pbUluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldCAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb24gPSAnJztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgYW5pbXNFbnVtO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNrZWxldG9uRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBhbmltc0VudW0gPSB0aGlzLnNrZWxldG9uRGF0YS5nZXRBbmltc0VudW0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCAhYW5pbXNFbnVtICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2MuZXJyb3JJRCg3NTAyLCB0aGlzLm5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgYW5pbU5hbWUgPSBhbmltc0VudW1bdmFsdWVdO1xuICAgICAgICAgICAgICAgIGlmIChhbmltTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uID0gYW5pbU5hbWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjYy5lcnJvcklEKDc1MDMsIHRoaXMubmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHlwZTogRGVmYXVsdEFuaW1zRW51bSxcbiAgICAgICAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogJ0FuaW1hdGlvbicsXG4gICAgICAgICAgICB0b29sdGlwOiBDQ19ERVYgJiYgJ2kxOG46Q09NUE9ORU5ULnNrZWxldG9uLmFuaW1hdGlvbidcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBSZWNvcmQgcHJlIGNhY2hlIG1vZGUuXG4gICAgICAgIF9wcmVDYWNoZU1vZGU6IC0xLFxuICAgICAgICBfY2FjaGVNb2RlOiBBbmltYXRpb25DYWNoZU1vZGUuUkVBTFRJTUUsXG4gICAgICAgIF9kZWZhdWx0Q2FjaGVNb2RlOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiAwLFxuICAgICAgICAgICAgdHlwZTogQW5pbWF0aW9uQ2FjaGVNb2RlLFxuICAgICAgICAgICAgbm90aWZ5ICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEFuaW1hdGlvbkNhY2hlTW9kZSh0aGlzLl9kZWZhdWx0Q2FjaGVNb2RlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlZGl0b3JPbmx5OiB0cnVlLFxuICAgICAgICAgICAgdmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGFuaW1hdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6IFwiQW5pbWF0aW9uIENhY2hlIE1vZGVcIixcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQuc2tlbGV0b24uYW5pbWF0aW9uX2NhY2hlX21vZGUnXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gVE9ET1xuICAgICAgICAgKiAhI3poIOaYr+WQpuW+queOr+aSreaUvuW9k+WJjemqqOmqvOWKqOeUu+OAglxuICAgICAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGxvb3BcbiAgICAgICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAgICAgKi9cbiAgICAgICAgbG9vcDoge1xuICAgICAgICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQuc2tlbGV0b24ubG9vcCdcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBJbmRpY2F0ZXMgd2hldGhlciB0byBlbmFibGUgcHJlbXVsdGlwbGllZCBhbHBoYS5cbiAgICAgICAgICogWW91IHNob3VsZCBkaXNhYmxlIHRoaXMgb3B0aW9uIHdoZW4gaW1hZ2UncyB0cmFuc3BhcmVudCBhcmVhIGFwcGVhcnMgdG8gaGF2ZSBvcGFxdWUgcGl4ZWxzLFxuICAgICAgICAgKiBvciBlbmFibGUgdGhpcyBvcHRpb24gd2hlbiBpbWFnZSdzIGhhbGYgdHJhbnNwYXJlbnQgYXJlYSBhcHBlYXJzIHRvIGJlIGRhcmtlbi5cbiAgICAgICAgICogISN6aCDmmK/lkKblkK/nlKjotLTlm77pooTkuZjjgIJcbiAgICAgICAgICog5b2T5Zu+54mH55qE6YCP5piO5Yy65Z+f5Ye6546w6Imy5Z2X5pe26ZyA6KaB5YWz6Zet6K+l6YCJ6aG577yM5b2T5Zu+54mH55qE5Y2K6YCP5piO5Yy65Z+f6aKc6Imy5Y+Y6buR5pe26ZyA6KaB5ZCv55So6K+l6YCJ6aG544CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gcHJlbXVsdGlwbGllZEFscGhhXG4gICAgICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgICAgICovXG4gICAgICAgIHByZW11bHRpcGxpZWRBbHBoYToge1xuICAgICAgICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQuc2tlbGV0b24ucHJlbXVsdGlwbGllZEFscGhhJ1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIFRoZSB0aW1lIHNjYWxlIG9mIHRoaXMgc2tlbGV0b24uXG4gICAgICAgICAqICEjemgg5b2T5YmN6aqo6aq85Lit5omA5pyJ5Yqo55S755qE5pe26Ze057yp5pS+546H44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSB0aW1lU2NhbGVcbiAgICAgICAgICogQGRlZmF1bHQgMVxuICAgICAgICAgKi9cbiAgICAgICAgdGltZVNjYWxlOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiAxLFxuICAgICAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC5za2VsZXRvbi50aW1lX3NjYWxlJ1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIEluZGljYXRlcyB3aGV0aGVyIG9wZW4gZGVidWcgc2xvdHMuXG4gICAgICAgICAqICEjemgg5piv5ZCm5pi+56S6IHNsb3Qg55qEIGRlYnVnIOS/oeaBr+OAglxuICAgICAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGRlYnVnU2xvdHNcbiAgICAgICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgICAgICovXG4gICAgICAgIGRlYnVnU2xvdHM6IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgICAgICAgZWRpdG9yT25seTogdHJ1ZSxcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQuc2tlbGV0b24uZGVidWdfc2xvdHMnLFxuICAgICAgICAgICAgbm90aWZ5ICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVEZWJ1Z0RyYXcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBJbmRpY2F0ZXMgd2hldGhlciBvcGVuIGRlYnVnIGJvbmVzLlxuICAgICAgICAgKiAhI3poIOaYr+WQpuaYvuekuiBib25lIOeahCBkZWJ1ZyDkv6Hmga/jgIJcbiAgICAgICAgICogQHByb3BlcnR5IHtCb29sZWFufSBkZWJ1Z0JvbmVzXG4gICAgICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICBkZWJ1Z0JvbmVzOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICAgICAgICAgIGVkaXRvck9ubHk6IHRydWUsXG4gICAgICAgICAgICB0b29sdGlwOiBDQ19ERVYgJiYgJ2kxOG46Q09NUE9ORU5ULnNrZWxldG9uLmRlYnVnX2JvbmVzJyxcbiAgICAgICAgICAgIG5vdGlmeSAoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlRGVidWdEcmF3KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gSW5kaWNhdGVzIHdoZXRoZXIgb3BlbiBkZWJ1ZyBtZXNoLlxuICAgICAgICAgKiAhI3poIOaYr+WQpuaYvuekuiBtZXNoIOeahCBkZWJ1ZyDkv6Hmga/jgIJcbiAgICAgICAgICogQHByb3BlcnR5IHtCb29sZWFufSBkZWJ1Z01lc2hcbiAgICAgICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgICAgICovXG4gICAgICAgIGRlYnVnTWVzaDoge1xuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICAgICAgICBlZGl0b3JPbmx5OiB0cnVlLFxuICAgICAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC5za2VsZXRvbi5kZWJ1Z19tZXNoJyxcbiAgICAgICAgICAgIG5vdGlmeSAoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlRGVidWdEcmF3KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gRW5hYmxlZCB0d28gY29sb3IgdGludC5cbiAgICAgICAgICogISN6aCDmmK/lkKblkK/nlKjmn5PoibLmlYjmnpzjgIJcbiAgICAgICAgICogQHByb3BlcnR5IHtCb29sZWFufSB1c2VUaW50XG4gICAgICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICB1c2VUaW50OiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQuc2tlbGV0b24udXNlX3RpbnQnLFxuICAgICAgICAgICAgbm90aWZ5ICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVVc2VUaW50KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gRW5hYmxlZCBiYXRjaCBtb2RlbCwgaWYgc2tlbGV0b24gaXMgY29tcGxleCwgZG8gbm90IGVuYWJsZSBiYXRjaCwgb3Igd2lsbCBsb3dlciBwZXJmb3JtYW5jZS5cbiAgICAgICAgICogISN6aCDlvIDlkK/lkIjmibnvvIzlpoLmnpzmuLLmn5PlpKfph4/nm7jlkIznurnnkIbvvIzkuJTnu5PmnoTnroDljZXnmoTpqqjpqrzliqjnlLvvvIzlvIDlkK/lkIjmibnlj6/ku6XpmY3kvY5kcmF3Y2FsbO+8jOWQpuWImeivt+S4jeimgeW8gOWQr++8jGNwdea2iOiAl+S8muS4iuWNh+OAglxuICAgICAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGVuYWJsZUJhdGNoXG4gICAgICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICBlbmFibGVCYXRjaDoge1xuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICAgICAgICBub3RpZnkgKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUJhdGNoKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC5za2VsZXRvbi5lbmFibGVkX2JhdGNoJ1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIEJlbG93IHByb3BlcnRpZXMgd2lsbCBlZmZlY3Qgd2hlbiBjYWNoZSBtb2RlIGlzIFNIQVJFRF9DQUNIRSBvciBQUklWQVRFX0NBQ0hFLlxuICAgICAgICAvLyBhY2N1bXVsYXRlIHRpbWVcbiAgICAgICAgX2FjY1RpbWU6IDAsXG4gICAgICAgIC8vIFBsYXkgdGltZXMgY291bnRlclxuICAgICAgICBfcGxheUNvdW50OiAwLFxuICAgICAgICAvLyBGcmFtZSBjYWNoZVxuICAgICAgICBfZnJhbWVDYWNoZTogbnVsbCxcbiAgICAgICAgLy8gQ3VyIGZyYW1lXG4gICAgICAgIF9jdXJGcmFtZTogbnVsbCxcbiAgICAgICAgLy8gU2tlbGV0b24gY2FjaGVcbiAgICAgICAgX3NrZWxldG9uQ2FjaGUgOiBudWxsLFxuICAgICAgICAvLyBBaW1hdGlvbiBuYW1lXG4gICAgICAgIF9hbmltYXRpb25OYW1lIDogXCJcIixcbiAgICAgICAgLy8gQW5pbWF0aW9uIHF1ZXVlXG4gICAgICAgIF9hbmltYXRpb25RdWV1ZSA6IFtdLFxuICAgICAgICAvLyBIZWFkIGFuaW1hdGlvbiBpbmZvIG9mIFxuICAgICAgICBfaGVhZEFuaUluZm8gOiBudWxsLFxuICAgICAgICAvLyBQbGF5IHRpbWVzXG4gICAgICAgIF9wbGF5VGltZXMgOiAwLFxuICAgICAgICAvLyBJcyBhbmltYXRpb24gY29tcGxldGUuXG4gICAgICAgIF9pc0FuaUNvbXBsZXRlIDogdHJ1ZSxcbiAgICB9LFxuXG4gICAgLy8gQ09OU1RSVUNUT1JcbiAgICBjdG9yICgpIHtcbiAgICAgICAgdGhpcy5fZWZmZWN0RGVsZWdhdGUgPSBudWxsO1xuICAgICAgICB0aGlzLl9za2VsZXRvbiA9IG51bGw7XG4gICAgICAgIHRoaXMuX3Jvb3RCb25lID0gbnVsbDtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXIgPSBudWxsO1xuICAgICAgICB0aGlzLl9ib3VuZGluZ0JveCA9IGNjLnJlY3QoKTtcbiAgICAgICAgdGhpcy5fbWF0ZXJpYWxDYWNoZSA9IHt9O1xuICAgICAgICB0aGlzLl9kZWJ1Z1JlbmRlcmVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc3RhcnRTbG90SW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy5fZW5kU2xvdEluZGV4ID0gLTE7XG4gICAgICAgIHRoaXMuX3N0YXJ0RW50cnkgPSB7YW5pbWF0aW9uIDoge25hbWUgOiBcIlwifSwgdHJhY2tJbmRleCA6IDB9O1xuICAgICAgICB0aGlzLl9lbmRFbnRyeSA9IHthbmltYXRpb24gOiB7bmFtZSA6IFwiXCJ9LCB0cmFja0luZGV4IDogMH07XG4gICAgfSxcblxuICAgIC8vIG92ZXJyaWRlXG4gICAgc2V0TWF0ZXJpYWwgKGluZGV4LCBtYXRlcmlhbCkge1xuICAgICAgICB0aGlzLl9zdXBlcihpbmRleCwgbWF0ZXJpYWwpO1xuICAgICAgICB0aGlzLl9tYXRlcmlhbENhY2hlID0ge307XG4gICAgfSxcblxuICAgIF91cGRhdGVVc2VUaW50ICgpIHtcbiAgICAgICAgbGV0IGJhc2VNYXRlcmlhbCA9IHRoaXMuZ2V0TWF0ZXJpYWwoMCk7XG4gICAgICAgIGxldCB1c2VUaW50ID0gdGhpcy51c2VUaW50IHx8IHRoaXMuaXNBbmltYXRpb25DYWNoZWQoKTtcbiAgICAgICAgaWYgKGJhc2VNYXRlcmlhbCkge1xuICAgICAgICAgICAgYmFzZU1hdGVyaWFsLmRlZmluZSgnVVNFX1RJTlQnLCB1c2VUaW50KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2FjaGUgPSB0aGlzLl9tYXRlcmlhbENhY2hlO1xuICAgICAgICBmb3IgKHZhciBtS2V5IGluIGNhY2hlKSB7XG4gICAgICAgICAgICB2YXIgbWF0ZXJpYWwgPSBjYWNoZVttS2V5XTtcbiAgICAgICAgICAgIGlmIChtYXRlcmlhbCkge1xuICAgICAgICAgICAgICAgIG1hdGVyaWFsLmRlZmluZSgnVVNFX1RJTlQnLCB1c2VUaW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfdXBkYXRlQmF0Y2ggKCkge1xuICAgICAgICBsZXQgYmFzZU1hdGVyaWFsID0gdGhpcy5nZXRNYXRlcmlhbCgwKTtcbiAgICAgICAgaWYgKGJhc2VNYXRlcmlhbCkge1xuICAgICAgICAgICAgYmFzZU1hdGVyaWFsLmRlZmluZSgnQ0NfVVNFX01PREVMJywgIXRoaXMuZW5hYmxlQmF0Y2gpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjYWNoZSA9IHRoaXMuX21hdGVyaWFsQ2FjaGU7XG4gICAgICAgIGZvciAobGV0IG1LZXkgaW4gY2FjaGUpIHtcbiAgICAgICAgICAgIGxldCBtYXRlcmlhbCA9IGNhY2hlW21LZXldO1xuICAgICAgICAgICAgaWYgKG1hdGVyaWFsKSB7XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwuZGVmaW5lKCdDQ19VU0VfTU9ERUwnLCAhdGhpcy5lbmFibGVCYXRjaCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIFNldHMgcnVudGltZSBza2VsZXRvbiBkYXRhIHRvIHNwLlNrZWxldG9uLjxicj5cbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBkaWZmZXJlbnQgZnJvbSB0aGUgYHNrZWxldG9uRGF0YWAgcHJvcGVydHkuIFRoaXMgbWV0aG9kIGlzIHBhc3NlZCBpbiB0aGUgcmF3IGRhdGEgcHJvdmlkZWQgYnkgdGhlIFNwaW5lIHJ1bnRpbWUsIGFuZCB0aGUgc2tlbGV0b25EYXRhIHR5cGUgaXMgdGhlIGFzc2V0IHR5cGUgcHJvdmlkZWQgYnkgQ3JlYXRvci5cbiAgICAgKiAhI3poXG4gICAgICog6K6+572u5bqV5bGC6L+Q6KGM5pe255So5Yiw55qEIFNrZWxldG9uRGF0YeOAgjxicj5cbiAgICAgKiDov5nkuKrmjqXlj6PmnInliKvkuo4gYHNrZWxldG9uRGF0YWAg5bGe5oCn77yM6L+Z5Liq5o6l5Y+j5Lyg5YWl55qE5pivIFNwaW5lIHJ1bnRpbWUg5o+Q5L6b55qE5Y6f5aeL5pWw5o2u77yM6ICMIHNrZWxldG9uRGF0YSDnmoTnsbvlnovmmK8gQ3JlYXRvciDmj5DkvpvnmoTotYTmupDnsbvlnovjgIJcbiAgICAgKiBAbWV0aG9kIHNldFNrZWxldG9uRGF0YVxuICAgICAqIEBwYXJhbSB7c3Auc3BpbmUuU2tlbGV0b25EYXRhfSBza2VsZXRvbkRhdGFcbiAgICAgKi9cbiAgICBzZXRTa2VsZXRvbkRhdGEgKHNrZWxldG9uRGF0YSkge1xuICAgICAgICBpZiAoc2tlbGV0b25EYXRhLndpZHRoICE9IG51bGwgJiYgc2tlbGV0b25EYXRhLmhlaWdodCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLm5vZGUuc2V0Q29udGVudFNpemUoc2tlbGV0b25EYXRhLndpZHRoLCBza2VsZXRvbkRhdGEuaGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghQ0NfRURJVE9SKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2FjaGVNb2RlID09PSBBbmltYXRpb25DYWNoZU1vZGUuU0hBUkVEX0NBQ0hFKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2tlbGV0b25DYWNoZSA9IFNrZWxldG9uQ2FjaGUuc2hhcmVkQ2FjaGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2NhY2hlTW9kZSA9PT0gQW5pbWF0aW9uQ2FjaGVNb2RlLlBSSVZBVEVfQ0FDSEUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9za2VsZXRvbkNhY2hlID0gbmV3IFNrZWxldG9uQ2FjaGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5pc0FuaW1hdGlvbkNhY2hlZCgpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5kZWJ1Z0JvbmVzIHx8IHRoaXMuZGVidWdTbG90cykge1xuICAgICAgICAgICAgICAgIGNjLndhcm4oXCJEZWJ1ZyBib25lcyBvciBzbG90cyBpcyBpbnZhbGlkIGluIGNhY2hlZCBtb2RlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHNrZWxldG9uSW5mbyA9IHRoaXMuX3NrZWxldG9uQ2FjaGUuZ2V0U2tlbGV0b25DYWNoZSh0aGlzLnNrZWxldG9uRGF0YS5fdXVpZCwgc2tlbGV0b25EYXRhKTtcbiAgICAgICAgICAgIHRoaXMuX3NrZWxldG9uID0gc2tlbGV0b25JbmZvLnNrZWxldG9uO1xuICAgICAgICAgICAgdGhpcy5fY2xpcHBlciA9IHNrZWxldG9uSW5mby5jbGlwcGVyO1xuICAgICAgICAgICAgdGhpcy5fcm9vdEJvbmUgPSB0aGlzLl9za2VsZXRvbi5nZXRSb290Qm9uZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc2tlbGV0b24gPSBuZXcgc3BpbmUuU2tlbGV0b24oc2tlbGV0b25EYXRhKTtcbiAgICAgICAgICAgIHRoaXMuX2NsaXBwZXIgPSBuZXcgc3BpbmUuU2tlbGV0b25DbGlwcGluZygpO1xuICAgICAgICAgICAgdGhpcy5fcm9vdEJvbmUgPSB0aGlzLl9za2VsZXRvbi5nZXRSb290Qm9uZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fYWN0aXZhdGVNYXRlcmlhbCgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFNldHMgc2xvdHMgdmlzaWJsZSByYW5nZS5cbiAgICAgKiAhI3poIOiuvue9rumqqOmqvOaPkuanveWPr+inhuiMg+WbtOOAglxuICAgICAqIEBtZXRob2Qgc2V0U2xvdHNSYW5nZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydFNsb3RJbmRleFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBlbmRTbG90SW5kZXhcbiAgICAgKi9cbiAgICBzZXRTbG90c1JhbmdlIChzdGFydFNsb3RJbmRleCwgZW5kU2xvdEluZGV4KSB7XG4gICAgICAgIGlmICh0aGlzLmlzQW5pbWF0aW9uQ2FjaGVkKCkpIHtcbiAgICAgICAgICAgIGNjLndhcm4oXCJTbG90cyB2aXNpYmxlIHJhbmdlIGNhbiBub3QgYmUgbW9kaWZpZWQgaW4gY2FjaGVkIG1vZGUuXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc3RhcnRTbG90SW5kZXggPSBzdGFydFNsb3RJbmRleDtcbiAgICAgICAgICAgIHRoaXMuX2VuZFNsb3RJbmRleCA9IGVuZFNsb3RJbmRleDtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFNldHMgYW5pbWF0aW9uIHN0YXRlIGRhdGEuPGJyPlxuICAgICAqIFRoZSBwYXJhbWV0ZXIgdHlwZSBpcyB7eyNjcm9zc0xpbmtNb2R1bGUgXCJzcC5zcGluZVwifX1zcC5zcGluZXt7L2Nyb3NzTGlua01vZHVsZX19LkFuaW1hdGlvblN0YXRlRGF0YS5cbiAgICAgKiAhI3poIOiuvue9ruWKqOeUu+eKtuaAgeaVsOaNruOAgjxicj5cbiAgICAgKiDlj4LmlbDmmK8ge3sjY3Jvc3NMaW5rTW9kdWxlIFwic3Auc3BpbmVcIn19c3Auc3BpbmV7ey9jcm9zc0xpbmtNb2R1bGV9fS5BbmltYXRpb25TdGF0ZURhdGHjgIJcbiAgICAgKiBAbWV0aG9kIHNldEFuaW1hdGlvblN0YXRlRGF0YVxuICAgICAqIEBwYXJhbSB7c3Auc3BpbmUuQW5pbWF0aW9uU3RhdGVEYXRhfSBzdGF0ZURhdGFcbiAgICAgKi9cbiAgICBzZXRBbmltYXRpb25TdGF0ZURhdGEgKHN0YXRlRGF0YSkge1xuICAgICAgICBpZiAodGhpcy5pc0FuaW1hdGlvbkNhY2hlZCgpKSB7XG4gICAgICAgICAgICBjYy53YXJuKFwiJ3NldEFuaW1hdGlvblN0YXRlRGF0YScgaW50ZXJmYWNlIGNhbiBub3QgYmUgaW52b2tlZCBpbiBjYWNoZWQgbW9kZS5cIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgc3RhdGUgPSBuZXcgc3BpbmUuQW5pbWF0aW9uU3RhdGUoc3RhdGVEYXRhKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9saXN0ZW5lcikge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZS5yZW1vdmVMaXN0ZW5lcih0aGlzLl9saXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0YXRlLmFkZExpc3RlbmVyKHRoaXMuX2xpc3RlbmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gc3RhdGU7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfSxcblxuICAgIC8vIElNUExFTUVOVFxuICAgIF9fcHJlbG9hZCAoKSB7XG4gICAgICAgIGlmIChDQ19FRElUT1IpIHtcbiAgICAgICAgICAgIHZhciBGbGFncyA9IGNjLk9iamVjdC5GbGFncztcbiAgICAgICAgICAgIHRoaXMuX29iakZsYWdzIHw9IChGbGFncy5Jc0FuY2hvckxvY2tlZCB8IEZsYWdzLklzU2l6ZUxvY2tlZCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX3JlZnJlc2hJbnNwZWN0b3IoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMubm9kZS5jaGlsZHJlbjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgaWYgKGNoaWxkICYmIGNoaWxkLl9uYW1lID09PSBcIkRFQlVHX0RSQVdfTk9ERVwiICkge1xuICAgICAgICAgICAgICAgIGNoaWxkLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3Jlc2V0QXNzZW1ibGVyKCk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVNrZWxldG9uRGF0YSgpO1xuICAgICAgICB0aGlzLl91cGRhdGVEZWJ1Z0RyYXcoKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlVXNlVGludCgpO1xuICAgICAgICB0aGlzLl91cGRhdGVCYXRjaCgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogSXQncyBiZXN0IHRvIHNldCBjYWNoZSBtb2RlIGJlZm9yZSBzZXQgcHJvcGVydHkgJ2RyYWdvbkFzc2V0Jywgb3Igd2lsbCB3YXN0ZSBzb21lIGNwdSB0aW1lLlxuICAgICAqIElmIHNldCB0aGUgbW9kZSBpbiBlZGl0b3IsIHRoZW4gbm8gbmVlZCB0byB3b3JyeSBhYm91dCBvcmRlciBwcm9ibGVtLlxuICAgICAqICEjemggXG4gICAgICog6Iul5oOz5YiH5o2i5riy5p+T5qih5byP77yM5pyA5aW95Zyo6K6+572uJ2RyYWdvbkFzc2V0J+S5i+WJje+8jOWFiOiuvue9ruWlvea4suafk+aooeW8j++8jOWQpuWImeaciei/kOihjOaXtuW8gOmUgOOAglxuICAgICAqIOiLpeWcqOe8lui+keS4reiuvue9rua4suafk+aooeW8j++8jOWImeaXoOmcgOaLheW/g+iuvue9ruasoeW6j+eahOmXrumimOOAglxuICAgICAqIFxuICAgICAqIEBtZXRob2Qgc2V0QW5pbWF0aW9uQ2FjaGVNb2RlXG4gICAgICogQHBhcmFtIHtBbmltYXRpb25DYWNoZU1vZGV9IGNhY2hlTW9kZVxuICAgICAqIEBleGFtcGxlXG4gICAgICogc2tlbGV0b24uc2V0QW5pbWF0aW9uQ2FjaGVNb2RlKHNwLlNrZWxldG9uLkFuaW1hdGlvbkNhY2hlTW9kZS5TSEFSRURfQ0FDSEUpO1xuICAgICAqL1xuICAgIHNldEFuaW1hdGlvbkNhY2hlTW9kZSAoY2FjaGVNb2RlKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcmVDYWNoZU1vZGUgIT09IGNhY2hlTW9kZSkge1xuICAgICAgICAgICAgdGhpcy5fY2FjaGVNb2RlID0gY2FjaGVNb2RlO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlU2tlbGV0b25EYXRhKCk7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVVc2VUaW50KCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBXaGV0aGVyIGluIGNhY2hlZCBtb2RlLlxuICAgICAqICEjemgg5b2T5YmN5piv5ZCm5aSE5LqO57yT5a2Y5qih5byP44CCXG4gICAgICogQG1ldGhvZCBpc0FuaW1hdGlvbkNhY2hlZFxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaXNBbmltYXRpb25DYWNoZWQgKCkge1xuICAgICAgICBpZiAoQ0NfRURJVE9SKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzLl9jYWNoZU1vZGUgIT09IEFuaW1hdGlvbkNhY2hlTW9kZS5SRUFMVElNRTtcbiAgICB9LFxuXG4gICAgdXBkYXRlIChkdCkge1xuICAgICAgICBpZiAoQ0NfRURJVE9SKSByZXR1cm47XG4gICAgICAgIGlmICh0aGlzLnBhdXNlZCkgcmV0dXJuO1xuXG4gICAgICAgIGR0ICo9IHRoaXMudGltZVNjYWxlICogc3AudGltZVNjYWxlO1xuXG4gICAgICAgIGlmICh0aGlzLmlzQW5pbWF0aW9uQ2FjaGVkKCkpIHtcblxuICAgICAgICAgICAgLy8gQ2FjaGUgbW9kZSBhbmQgaGFzIGFuaW1hdGlvbiBxdWV1ZS5cbiAgICAgICAgICAgIGlmICh0aGlzLl9pc0FuaUNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2FuaW1hdGlvblF1ZXVlLmxlbmd0aCA9PT0gMCAmJiAhdGhpcy5faGVhZEFuaUluZm8pIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZyYW1lQ2FjaGUgPSB0aGlzLl9mcmFtZUNhY2hlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZnJhbWVDYWNoZSAmJiBmcmFtZUNhY2hlLmlzSW52YWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZUNhY2hlLnVwZGF0ZVRvRnJhbWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmcmFtZXMgPSBmcmFtZUNhY2hlLmZyYW1lcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1ckZyYW1lID0gZnJhbWVzW2ZyYW1lcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5faGVhZEFuaUluZm8pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGVhZEFuaUluZm8gPSB0aGlzLl9hbmltYXRpb25RdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9hY2NUaW1lICs9IGR0O1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hY2NUaW1lID4gdGhpcy5faGVhZEFuaUluZm8uZGVsYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFuaUluZm8gPSB0aGlzLl9oZWFkQW5pSW5mbztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGVhZEFuaUluZm8gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEFuaW1hdGlvbiAoMCwgYW5pSW5mby5hbmltYXRpb25OYW1lLCBhbmlJbmZvLmxvb3ApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUNhY2hlKGR0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVJlYWx0aW1lKGR0KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfZW1pdENhY2hlQ29tcGxldGVFdmVudCAoKSB7XG4gICAgICAgIGlmICghdGhpcy5fbGlzdGVuZXIpIHJldHVybjtcbiAgICAgICAgdGhpcy5fZW5kRW50cnkuYW5pbWF0aW9uLm5hbWUgPSB0aGlzLl9hbmltYXRpb25OYW1lO1xuICAgICAgICB0aGlzLl9saXN0ZW5lci5jb21wbGV0ZSAmJiB0aGlzLl9saXN0ZW5lci5jb21wbGV0ZSh0aGlzLl9lbmRFbnRyeSk7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyLmVuZCAmJiB0aGlzLl9saXN0ZW5lci5lbmQodGhpcy5fZW5kRW50cnkpO1xuICAgIH0sXG5cbiAgICBfdXBkYXRlQ2FjaGUgKGR0KSB7XG4gICAgICAgIGxldCBmcmFtZUNhY2hlID0gdGhpcy5fZnJhbWVDYWNoZTtcbiAgICAgICAgaWYgKCFmcmFtZUNhY2hlLmlzSW5pdGVkKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZnJhbWVzID0gZnJhbWVDYWNoZS5mcmFtZXM7XG4gICAgICAgIGxldCBmcmFtZVRpbWUgPSBTa2VsZXRvbkNhY2hlLkZyYW1lVGltZTtcblxuICAgICAgICAvLyBBbmltYXRpb24gU3RhcnQsIHRoZSBldmVudCBkaWZmcmVudCBmcm9tIGRyYWdvbmJvbmVzIGlubmVyIGV2ZW50LFxuICAgICAgICAvLyBJdCBoYXMgbm8gZXZlbnQgb2JqZWN0LlxuICAgICAgICBpZiAodGhpcy5fYWNjVGltZSA9PSAwICYmIHRoaXMuX3BsYXlDb3VudCA9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGFydEVudHJ5LmFuaW1hdGlvbi5uYW1lID0gdGhpcy5fYW5pbWF0aW9uTmFtZTtcbiAgICAgICAgICAgIHRoaXMuX2xpc3RlbmVyICYmIHRoaXMuX2xpc3RlbmVyLnN0YXJ0ICYmIHRoaXMuX2xpc3RlbmVyLnN0YXJ0KHRoaXMuX3N0YXJ0RW50cnkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fYWNjVGltZSArPSBkdDtcbiAgICAgICAgbGV0IGZyYW1lSWR4ID0gTWF0aC5mbG9vcih0aGlzLl9hY2NUaW1lIC8gZnJhbWVUaW1lKTtcbiAgICAgICAgaWYgKCFmcmFtZUNhY2hlLmlzQ29tcGxldGVkKSB7XG4gICAgICAgICAgICBmcmFtZUNhY2hlLnVwZGF0ZVRvRnJhbWUoZnJhbWVJZHgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZyYW1lQ2FjaGUuaXNDb21wbGV0ZWQgJiYgZnJhbWVJZHggPj0gZnJhbWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5fcGxheUNvdW50ICsrO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3BsYXlUaW1lcyA+IDAgJiYgdGhpcy5fcGxheUNvdW50ID49IHRoaXMuX3BsYXlUaW1lcykge1xuICAgICAgICAgICAgICAgIC8vIHNldCBmcmFtZSB0byBlbmQgZnJhbWUuXG4gICAgICAgICAgICAgICAgdGhpcy5fY3VyRnJhbWUgPSBmcmFtZXNbZnJhbWVzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgIHRoaXMuX2FjY1RpbWUgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuX3BsYXlDb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5faXNBbmlDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdENhY2hlQ29tcGxldGVFdmVudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2FjY1RpbWUgPSAwO1xuICAgICAgICAgICAgZnJhbWVJZHggPSAwO1xuICAgICAgICAgICAgdGhpcy5fZW1pdENhY2hlQ29tcGxldGVFdmVudCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2N1ckZyYW1lID0gZnJhbWVzW2ZyYW1lSWR4XTtcbiAgICB9LFxuXG4gICAgX3VwZGF0ZVJlYWx0aW1lIChkdCkge1xuICAgICAgICBsZXQgc2tlbGV0b24gPSB0aGlzLl9za2VsZXRvbjtcbiAgICAgICAgbGV0IHN0YXRlID0gdGhpcy5fc3RhdGU7XG4gICAgICAgIGlmIChza2VsZXRvbikge1xuICAgICAgICAgICAgc2tlbGV0b24udXBkYXRlKGR0KTtcbiAgICAgICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgICAgICAgIHN0YXRlLnVwZGF0ZShkdCk7XG4gICAgICAgICAgICAgICAgc3RhdGUuYXBwbHkoc2tlbGV0b24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9hY3RpdmF0ZU1hdGVyaWFsICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnNrZWxldG9uRGF0YSkge1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlUmVuZGVyKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMuc2tlbGV0b25EYXRhLmVuc3VyZVRleHR1cmVzTG9hZGVkKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNhYmxlUmVuZGVyKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgbWF0ZXJpYWwgPSB0aGlzLnNoYXJlZE1hdGVyaWFsc1swXTtcbiAgICAgICAgICAgIGlmICghbWF0ZXJpYWwpIHtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbCA9IE1hdGVyaWFsLmdldEluc3RhbnRpYXRlZEJ1aWx0aW5NYXRlcmlhbCgnMmQtc3BpbmUnLCB0aGlzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwgPSBNYXRlcmlhbC5nZXRJbnN0YW50aWF0ZWRNYXRlcmlhbChtYXRlcmlhbCwgdGhpcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1hdGVyaWFsLmRlZmluZSgnQ0NfVVNFX01PREVMJywgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLl9wcmVwYXJlVG9SZW5kZXIobWF0ZXJpYWwpO1xuICAgICAgICB9LCB0aGlzKTtcbiAgICB9LFxuXG4gICAgX3ByZXBhcmVUb1JlbmRlciAobWF0ZXJpYWwpIHtcbiAgICAgICAgdGhpcy5zZXRNYXRlcmlhbCgwLCBtYXRlcmlhbCk7XG4gICAgICAgIC8vIG9ubHkgd2hlbiBjb21wb25lbnQncyBvbkVuYWJsZSBmdW5jdGlvbiBoYXMgYmVlbiBpbnZva2UsIG5lZWQgdG8gZW5hYmxlIHJlbmRlclxuICAgICAgICBpZiAodGhpcy5ub2RlICYmIHRoaXMubm9kZS5fcmVuZGVyQ29tcG9uZW50ID09IHRoaXMpIHtcbiAgICAgICAgICAgIHRoaXMubWFya0ZvclJlbmRlcih0cnVlKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBvbkVuYWJsZSAoKSB7XG4gICAgICAgIHRoaXMuX3N1cGVyKCk7XG4gICAgICAgIHRoaXMuX2FjdGl2YXRlTWF0ZXJpYWwoKTtcbiAgICB9LFxuXG4gICAgb25SZXN0b3JlICgpIHtcbiAgICAgICAgLy8gRGVzdHJveWVkIGFuZCByZXN0b3JlZCBpbiBFZGl0b3JcbiAgICAgICAgdGhpcy5fYm91bmRpbmdCb3ggPSBjYy5yZWN0KCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gU2V0cyB2ZXJ0ZXggZWZmZWN0IGRlbGVnYXRlLlxuICAgICAqICEjemgg6K6+572u6aG254K55Yqo55S75Luj55CGXG4gICAgICogQG1ldGhvZCBzZXRWZXJ0ZXhFZmZlY3REZWxlZ2F0ZVxuICAgICAqIEBwYXJhbSB7c3AuVmVydGV4RWZmZWN0RGVsZWdhdGV9IGVmZmVjdERlbGVnYXRlXG4gICAgICovXG4gICAgc2V0VmVydGV4RWZmZWN0RGVsZWdhdGUgKGVmZmVjdERlbGVnYXRlKSB7XG4gICAgICAgIHRoaXMuX2VmZmVjdERlbGVnYXRlID0gZWZmZWN0RGVsZWdhdGU7XG4gICAgfSxcblxuICAgIC8vIFJFTkRFUkVSXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIENvbXB1dGVzIHRoZSB3b3JsZCBTUlQgZnJvbSB0aGUgbG9jYWwgU1JUIGZvciBlYWNoIGJvbmUuXG4gICAgICogISN6aCDph43mlrDmm7TmlrDmiYDmnInpqqjpqrznmoTkuJbnlYwgVHJhbnNmb3Jt77yMXG4gICAgICog5b2T6I635Y+WIGJvbmUg55qE5pWw5YC85pyq5pu05paw5pe277yM5Y2z5Y+v5L2/55So6K+l5Ye95pWw6L+b6KGM5pu05paw5pWw5YC844CCXG4gICAgICogQG1ldGhvZCB1cGRhdGVXb3JsZFRyYW5zZm9ybVxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIGJvbmUgPSBzcGluZS5maW5kQm9uZSgnaGVhZCcpO1xuICAgICAqIGNjLmxvZyhib25lLndvcmxkWCk7IC8vIHJldHVybiAwO1xuICAgICAqIHNwaW5lLnVwZGF0ZVdvcmxkVHJhbnNmb3JtKCk7XG4gICAgICogYm9uZSA9IHNwaW5lLmZpbmRCb25lKCdoZWFkJyk7XG4gICAgICogY2MubG9nKGJvbmUud29ybGRYKTsgLy8gcmV0dXJuIC0yMy4xMjtcbiAgICAgKi9cbiAgICB1cGRhdGVXb3JsZFRyYW5zZm9ybSAoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc0FuaW1hdGlvbkNhY2hlZCgpKSByZXR1cm47XG5cbiAgICAgICAgaWYgKHRoaXMuX3NrZWxldG9uKSB7XG4gICAgICAgICAgICB0aGlzLl9za2VsZXRvbi51cGRhdGVXb3JsZFRyYW5zZm9ybSgpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gU2V0cyB0aGUgYm9uZXMgYW5kIHNsb3RzIHRvIHRoZSBzZXR1cCBwb3NlLlxuICAgICAqICEjemgg6L+Y5Y6f5Yiw6LW35aeL5Yqo5L2cXG4gICAgICogQG1ldGhvZCBzZXRUb1NldHVwUG9zZVxuICAgICAqL1xuICAgIHNldFRvU2V0dXBQb3NlICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3NrZWxldG9uKSB7XG4gICAgICAgICAgICB0aGlzLl9za2VsZXRvbi5zZXRUb1NldHVwUG9zZSgpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBTZXRzIHRoZSBib25lcyB0byB0aGUgc2V0dXAgcG9zZSxcbiAgICAgKiB1c2luZyB0aGUgdmFsdWVzIGZyb20gdGhlIGBCb25lRGF0YWAgbGlzdCBpbiB0aGUgYFNrZWxldG9uRGF0YWAuXG4gICAgICogISN6aFxuICAgICAqIOiuvue9riBib25lIOWIsOi1t+Wni+WKqOS9nFxuICAgICAqIOS9v+eUqCBTa2VsZXRvbkRhdGEg5Lit55qEIEJvbmVEYXRhIOWIl+ihqOS4reeahOWAvOOAglxuICAgICAqIEBtZXRob2Qgc2V0Qm9uZXNUb1NldHVwUG9zZVxuICAgICAqL1xuICAgIHNldEJvbmVzVG9TZXR1cFBvc2UgKCkge1xuICAgICAgICBpZiAodGhpcy5fc2tlbGV0b24pIHtcbiAgICAgICAgICAgIHRoaXMuX3NrZWxldG9uLnNldEJvbmVzVG9TZXR1cFBvc2UoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogU2V0cyB0aGUgc2xvdHMgdG8gdGhlIHNldHVwIHBvc2UsXG4gICAgICogdXNpbmcgdGhlIHZhbHVlcyBmcm9tIHRoZSBgU2xvdERhdGFgIGxpc3QgaW4gdGhlIGBTa2VsZXRvbkRhdGFgLlxuICAgICAqICEjemhcbiAgICAgKiDorr7nva4gc2xvdCDliLDotbflp4vliqjkvZzjgIJcbiAgICAgKiDkvb/nlKggU2tlbGV0b25EYXRhIOS4reeahCBTbG90RGF0YSDliJfooajkuK3nmoTlgLzjgIJcbiAgICAgKiBAbWV0aG9kIHNldFNsb3RzVG9TZXR1cFBvc2VcbiAgICAgKi9cbiAgICBzZXRTbG90c1RvU2V0dXBQb3NlICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3NrZWxldG9uKSB7XG4gICAgICAgICAgICB0aGlzLl9za2VsZXRvbi5zZXRTbG90c1RvU2V0dXBQb3NlKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIFVwZGF0aW5nIGFuIGFuaW1hdGlvbiBjYWNoZSB0byBjYWxjdWxhdGUgYWxsIGZyYW1lIGRhdGEgaW4gdGhlIGFuaW1hdGlvbiBpcyBhIGNvc3QgaW4gXG4gICAgICogcGVyZm9ybWFuY2UgZHVlIHRvIGNhbGN1bGF0aW5nIGFsbCBkYXRhIGluIGEgc2luZ2xlIGZyYW1lLlxuICAgICAqIFRvIHVwZGF0ZSB0aGUgY2FjaGUsIHVzZSB0aGUgaW52YWxpZEFuaW1hdGlvbkNhY2hlIG1ldGhvZCB3aXRoIGhpZ2ggcGVyZm9ybWFuY2UuXG4gICAgICogISN6aFxuICAgICAqIOabtOaWsOafkOS4quWKqOeUu+e8k+WtmCwg6aKE6K6h566X5Yqo55S75Lit5omA5pyJ5bin5pWw5o2u77yM55Sx5LqO5Zyo5Y2V5bin6K6h566X5omA5pyJ5pWw5o2u77yM5omA5Lul6L6D5raI6ICX5oCn6IO944CCXG4gICAgICog6Iul5oOz5pu05paw57yT5a2Y77yM5Y+v5L2/55SoIGludmFsaWRBbmltYXRpb25DYWNoZSDmlrnms5XvvIzlhbfmnInovoPpq5jmgKfog73jgIJcbiAgICAgKiBAbWV0aG9kIHVwZGF0ZUFuaW1hdGlvbkNhY2hlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGFuaW1OYW1lXG4gICAgICovXG4gICAgdXBkYXRlQW5pbWF0aW9uQ2FjaGUgKGFuaW1OYW1lKSB7XG4gICAgICAgIGlmICghdGhpcy5pc0FuaW1hdGlvbkNhY2hlZCgpKSByZXR1cm47XG4gICAgICAgIGxldCB1dWlkID0gdGhpcy5za2VsZXRvbkRhdGEuX3V1aWQ7XG4gICAgICAgIGlmICh0aGlzLl9za2VsZXRvbkNhY2hlKSB7XG4gICAgICAgICAgICB0aGlzLl9za2VsZXRvbkNhY2hlLnVwZGF0ZUFuaW1hdGlvbkNhY2hlKHV1aWQsIGFuaW1OYW1lKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogSW52YWxpZGF0ZXMgdGhlIGFuaW1hdGlvbiBjYWNoZSwgd2hpY2ggaXMgdGhlbiByZWNvbXB1dGVkIG9uIGVhY2ggZnJhbWUuLlxuICAgICAqICEjemhcbiAgICAgKiDkvb/liqjnlLvnvJPlrZjlpLHmlYjvvIzkuYvlkI7kvJrlnKjmr4/luKfph43mlrDorqHnrpfjgIJcbiAgICAgKiBAbWV0aG9kIGludmFsaWRBbmltYXRpb25DYWNoZVxuICAgICAqL1xuICAgIGludmFsaWRBbmltYXRpb25DYWNoZSAoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc0FuaW1hdGlvbkNhY2hlZCgpKSByZXR1cm47XG4gICAgICAgIGlmICh0aGlzLl9za2VsZXRvbkNhY2hlKSB7XG4gICAgICAgICAgICB0aGlzLl9za2VsZXRvbkNhY2hlLmludmFsaWRBbmltYXRpb25DYWNoZSh0aGlzLnNrZWxldG9uRGF0YS5fdXVpZCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIEZpbmRzIGEgYm9uZSBieSBuYW1lLlxuICAgICAqIFRoaXMgZG9lcyBhIHN0cmluZyBjb21wYXJpc29uIGZvciBldmVyeSBib25lLjxicj5cbiAgICAgKiBSZXR1cm5zIGEge3sjY3Jvc3NMaW5rTW9kdWxlIFwic3Auc3BpbmVcIn19c3Auc3BpbmV7ey9jcm9zc0xpbmtNb2R1bGV9fS5Cb25lIG9iamVjdC5cbiAgICAgKiAhI3poXG4gICAgICog6YCa6L+H5ZCN56ew5p+l5om+IGJvbmXjgIJcbiAgICAgKiDov5nph4zlr7nmr4/kuKogYm9uZSDnmoTlkI3np7Dov5vooYzkuoblr7nmr5TjgII8YnI+XG4gICAgICog6L+U5Zue5LiA5LiqIHt7I2Nyb3NzTGlua01vZHVsZSBcInNwLnNwaW5lXCJ9fXNwLnNwaW5le3svY3Jvc3NMaW5rTW9kdWxlfX0uQm9uZSDlr7nosaHjgIJcbiAgICAgKlxuICAgICAqIEBtZXRob2QgZmluZEJvbmVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYm9uZU5hbWVcbiAgICAgKiBAcmV0dXJuIHtzcC5zcGluZS5Cb25lfVxuICAgICAqL1xuICAgIGZpbmRCb25lIChib25lTmFtZSkge1xuICAgICAgICBpZiAodGhpcy5fc2tlbGV0b24pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9za2VsZXRvbi5maW5kQm9uZShib25lTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBGaW5kcyBhIHNsb3QgYnkgbmFtZS4gVGhpcyBkb2VzIGEgc3RyaW5nIGNvbXBhcmlzb24gZm9yIGV2ZXJ5IHNsb3QuPGJyPlxuICAgICAqIFJldHVybnMgYSB7eyNjcm9zc0xpbmtNb2R1bGUgXCJzcC5zcGluZVwifX1zcC5zcGluZXt7L2Nyb3NzTGlua01vZHVsZX19LlNsb3Qgb2JqZWN0LlxuICAgICAqICEjemhcbiAgICAgKiDpgJrov4flkI3np7Dmn6Xmib4gc2xvdOOAgui/memHjOWvueavj+S4qiBzbG90IOeahOWQjeensOi/m+ihjOS6huavlOi+g+OAgjxicj5cbiAgICAgKiDov5Tlm57kuIDkuKoge3sjY3Jvc3NMaW5rTW9kdWxlIFwic3Auc3BpbmVcIn19c3Auc3BpbmV7ey9jcm9zc0xpbmtNb2R1bGV9fS5TbG90IOWvueixoeOAglxuICAgICAqXG4gICAgICogQG1ldGhvZCBmaW5kU2xvdFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzbG90TmFtZVxuICAgICAqIEByZXR1cm4ge3NwLnNwaW5lLlNsb3R9XG4gICAgICovXG4gICAgZmluZFNsb3QgKHNsb3ROYW1lKSB7XG4gICAgICAgIGlmICh0aGlzLl9za2VsZXRvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NrZWxldG9uLmZpbmRTbG90KHNsb3ROYW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIEZpbmRzIGEgc2tpbiBieSBuYW1lIGFuZCBtYWtlcyBpdCB0aGUgYWN0aXZlIHNraW4uXG4gICAgICogVGhpcyBkb2VzIGEgc3RyaW5nIGNvbXBhcmlzb24gZm9yIGV2ZXJ5IHNraW4uPGJyPlxuICAgICAqIE5vdGUgdGhhdCBzZXR0aW5nIHRoZSBza2luIGRvZXMgbm90IGNoYW5nZSB3aGljaCBhdHRhY2htZW50cyBhcmUgdmlzaWJsZS48YnI+XG4gICAgICogUmV0dXJucyBhIHt7I2Nyb3NzTGlua01vZHVsZSBcInNwLnNwaW5lXCJ9fXNwLnNwaW5le3svY3Jvc3NMaW5rTW9kdWxlfX0uU2tpbiBvYmplY3QuXG4gICAgICogISN6aFxuICAgICAqIOaMieWQjeensOafpeaJvuearuiCpO+8jOa/gOa0u+ivpeearuiCpOOAgui/memHjOWvueavj+S4quearuiCpOeahOWQjeensOi/m+ihjOS6huavlOi+g+OAgjxicj5cbiAgICAgKiDms6jmhI/vvJrorr7nva7nmq7ogqTkuI3kvJrmlLnlj5ggYXR0YWNobWVudCDnmoTlj6/op4HmgKfjgII8YnI+XG4gICAgICog6L+U5Zue5LiA5LiqIHt7I2Nyb3NzTGlua01vZHVsZSBcInNwLnNwaW5lXCJ9fXNwLnNwaW5le3svY3Jvc3NMaW5rTW9kdWxlfX0uU2tpbiDlr7nosaHjgIJcbiAgICAgKlxuICAgICAqIEBtZXRob2Qgc2V0U2tpblxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBza2luTmFtZVxuICAgICAqL1xuICAgIHNldFNraW4gKHNraW5OYW1lKSB7XG4gICAgICAgIGlmICh0aGlzLl9za2VsZXRvbikge1xuICAgICAgICAgICAgdGhpcy5fc2tlbGV0b24uc2V0U2tpbkJ5TmFtZShza2luTmFtZSk7XG4gICAgICAgICAgICB0aGlzLl9za2VsZXRvbi5zZXRTbG90c1RvU2V0dXBQb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbnZhbGlkQW5pbWF0aW9uQ2FjaGUoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIFJldHVybnMgdGhlIGF0dGFjaG1lbnQgZm9yIHRoZSBzbG90IGFuZCBhdHRhY2htZW50IG5hbWUuXG4gICAgICogVGhlIHNrZWxldG9uIGxvb2tzIGZpcnN0IGluIGl0cyBza2luLCB0aGVuIGluIHRoZSBza2VsZXRvbiBkYXRh4oCZcyBkZWZhdWx0IHNraW4uPGJyPlxuICAgICAqIFJldHVybnMgYSB7eyNjcm9zc0xpbmtNb2R1bGUgXCJzcC5zcGluZVwifX1zcC5zcGluZXt7L2Nyb3NzTGlua01vZHVsZX19LkF0dGFjaG1lbnQgb2JqZWN0LlxuICAgICAqICEjemhcbiAgICAgKiDpgJrov4cgc2xvdCDlkowgYXR0YWNobWVudCDnmoTlkI3np7Dojrflj5YgYXR0YWNobWVudOOAglNrZWxldG9uIOS8mOWFiOafpeaJvuWug+eahOearuiCpO+8jOeEtuWQjuaJjeaYryBTa2VsZXRvbiBEYXRhIOS4rem7mOiupOeahOearuiCpOOAgjxicj5cbiAgICAgKiDov5Tlm57kuIDkuKoge3sjY3Jvc3NMaW5rTW9kdWxlIFwic3Auc3BpbmVcIn19c3Auc3BpbmV7ey9jcm9zc0xpbmtNb2R1bGV9fS5BdHRhY2htZW50IOWvueixoeOAglxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRBdHRhY2htZW50XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHNsb3ROYW1lXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGF0dGFjaG1lbnROYW1lXG4gICAgICogQHJldHVybiB7c3Auc3BpbmUuQXR0YWNobWVudH1cbiAgICAgKi9cbiAgICBnZXRBdHRhY2htZW50IChzbG90TmFtZSwgYXR0YWNobWVudE5hbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3NrZWxldG9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2tlbGV0b24uZ2V0QXR0YWNobWVudEJ5TmFtZShzbG90TmFtZSwgYXR0YWNobWVudE5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogU2V0cyB0aGUgYXR0YWNobWVudCBmb3IgdGhlIHNsb3QgYW5kIGF0dGFjaG1lbnQgbmFtZS5cbiAgICAgKiBUaGUgc2tlbGV0b24gbG9va3MgZmlyc3QgaW4gaXRzIHNraW4sIHRoZW4gaW4gdGhlIHNrZWxldG9uIGRhdGHigJlzIGRlZmF1bHQgc2tpbi5cbiAgICAgKiAhI3poXG4gICAgICog6YCa6L+HIHNsb3Qg5ZKMIGF0dGFjaG1lbnQg55qE5ZCN5a2X5p2l6K6+572uIGF0dGFjaG1lbnTjgIJcbiAgICAgKiBTa2VsZXRvbiDkvJjlhYjmn6Xmib7lroPnmoTnmq7ogqTvvIznhLblkI7miY3mmK8gU2tlbGV0b24gRGF0YSDkuK3pu5jorqTnmoTnmq7ogqTjgIJcbiAgICAgKiBAbWV0aG9kIHNldEF0dGFjaG1lbnRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc2xvdE5hbWVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYXR0YWNobWVudE5hbWVcbiAgICAgKi9cbiAgICBzZXRBdHRhY2htZW50IChzbG90TmFtZSwgYXR0YWNobWVudE5hbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3NrZWxldG9uKSB7XG4gICAgICAgICAgICB0aGlzLl9za2VsZXRvbi5zZXRBdHRhY2htZW50KHNsb3ROYW1lLCBhdHRhY2htZW50TmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbnZhbGlkQW5pbWF0aW9uQ2FjaGUoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgKiBSZXR1cm4gdGhlIHJlbmRlcmVyIG9mIGF0dGFjaG1lbnQuXG4gICAgKiBAbWV0aG9kIGdldFRleHR1cmVBdGxhc1xuICAgICogQHBhcmFtIHtzcC5zcGluZS5SZWdpb25BdHRhY2htZW50fHNwaW5lLkJvdW5kaW5nQm94QXR0YWNobWVudH0gcmVnaW9uQXR0YWNobWVudFxuICAgICogQHJldHVybiB7c3Auc3BpbmUuVGV4dHVyZUF0bGFzUmVnaW9ufVxuICAgICovXG4gICAgZ2V0VGV4dHVyZUF0bGFzIChyZWdpb25BdHRhY2htZW50KSB7XG4gICAgICAgIHJldHVybiByZWdpb25BdHRhY2htZW50LnJlZ2lvbjtcbiAgICB9LFxuXG4gICAgLy8gQU5JTUFUSU9OXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIE1peCBhcHBsaWVzIGFsbCBrZXlmcmFtZSB2YWx1ZXMsXG4gICAgICogaW50ZXJwb2xhdGVkIGZvciB0aGUgc3BlY2lmaWVkIHRpbWUgYW5kIG1peGVkIHdpdGggdGhlIGN1cnJlbnQgdmFsdWVzLlxuICAgICAqICEjemgg5Li65omA5pyJ5YWz6ZSu5bin6K6+5a6a5re35ZCI5Y+K5re35ZCI5pe26Ze077yI5LuO5b2T5YmN5YC85byA5aeL5beu5YC877yJ44CCXG4gICAgICogQG1ldGhvZCBzZXRNaXhcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZnJvbUFuaW1hdGlvblxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0b0FuaW1hdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvblxuICAgICAqL1xuICAgIHNldE1peCAoZnJvbUFuaW1hdGlvbiwgdG9BbmltYXRpb24sIGR1cmF0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUuZGF0YS5zZXRNaXgoZnJvbUFuaW1hdGlvbiwgdG9BbmltYXRpb24sIGR1cmF0aW9uKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFNldCB0aGUgY3VycmVudCBhbmltYXRpb24uIEFueSBxdWV1ZWQgYW5pbWF0aW9ucyBhcmUgY2xlYXJlZC48YnI+XG4gICAgICogUmV0dXJucyBhIHt7I2Nyb3NzTGlua01vZHVsZSBcInNwLnNwaW5lXCJ9fXNwLnNwaW5le3svY3Jvc3NMaW5rTW9kdWxlfX0uVHJhY2tFbnRyeSBvYmplY3QuXG4gICAgICogISN6aCDorr7nva7lvZPliY3liqjnlLvjgILpmJ/liJfkuK3nmoTku7vkvZXnmoTliqjnlLvlsIbooqvmuIXpmaTjgII8YnI+XG4gICAgICog6L+U5Zue5LiA5LiqIHt7I2Nyb3NzTGlua01vZHVsZSBcInNwLnNwaW5lXCJ9fXNwLnNwaW5le3svY3Jvc3NMaW5rTW9kdWxlfX0uVHJhY2tFbnRyeSDlr7nosaHjgIJcbiAgICAgKiBAbWV0aG9kIHNldEFuaW1hdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0cmFja0luZGV4XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGxvb3BcbiAgICAgKiBAcmV0dXJuIHtzcC5zcGluZS5UcmFja0VudHJ5fVxuICAgICAqL1xuICAgIHNldEFuaW1hdGlvbiAodHJhY2tJbmRleCwgbmFtZSwgbG9vcCkge1xuXG4gICAgICAgIHRoaXMuX3BsYXlUaW1lcyA9IGxvb3AgPyAwIDogMTtcbiAgICAgICAgdGhpcy5fYW5pbWF0aW9uTmFtZSA9IG5hbWU7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNBbmltYXRpb25DYWNoZWQoKSkge1xuICAgICAgICAgICAgaWYgKHRyYWNrSW5kZXggIT09IDApIHtcbiAgICAgICAgICAgICAgICBjYy53YXJuKFwiVHJhY2sgaW5kZXggY2FuIG5vdCBncmVhdGVyIHRoYW4gMCBpbiBjYWNoZWQgbW9kZS5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3NrZWxldG9uQ2FjaGUpIHJldHVybiBudWxsO1xuICAgICAgICAgICAgbGV0IGNhY2hlID0gdGhpcy5fc2tlbGV0b25DYWNoZS5nZXRBbmltYXRpb25DYWNoZSh0aGlzLnNrZWxldG9uRGF0YS5fdXVpZCwgbmFtZSk7XG4gICAgICAgICAgICBpZiAoIWNhY2hlKSB7XG4gICAgICAgICAgICAgICAgY2FjaGUgPSB0aGlzLl9za2VsZXRvbkNhY2hlLmluaXRBbmltYXRpb25DYWNoZSh0aGlzLnNrZWxldG9uRGF0YS5fdXVpZCwgbmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pc0FuaUNvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWNjVGltZSA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGxheUNvdW50ID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLl9mcmFtZUNhY2hlID0gY2FjaGU7XG4gICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVDYWNoZS51cGRhdGVUb0ZyYW1lKDApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2N1ckZyYW1lID0gdGhpcy5fZnJhbWVDYWNoZS5mcmFtZXNbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fc2tlbGV0b24pIHtcbiAgICAgICAgICAgICAgICB2YXIgYW5pbWF0aW9uID0gdGhpcy5fc2tlbGV0b24uZGF0YS5maW5kQW5pbWF0aW9uKG5hbWUpO1xuICAgICAgICAgICAgICAgIGlmICghYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGNjLmxvZ0lEKDc1MDksIG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IHRoaXMuX3N0YXRlLnNldEFuaW1hdGlvbldpdGgodHJhY2tJbmRleCwgYW5pbWF0aW9uLCBsb29wKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZS5hcHBseSh0aGlzLl9za2VsZXRvbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBBZGRzIGFuIGFuaW1hdGlvbiB0byBiZSBwbGF5ZWQgZGVsYXkgc2Vjb25kcyBhZnRlciB0aGUgY3VycmVudCBvciBsYXN0IHF1ZXVlZCBhbmltYXRpb24uPGJyPlxuICAgICAqIFJldHVybnMgYSB7eyNjcm9zc0xpbmtNb2R1bGUgXCJzcC5zcGluZVwifX1zcC5zcGluZXt7L2Nyb3NzTGlua01vZHVsZX19LlRyYWNrRW50cnkgb2JqZWN0LlxuICAgICAqICEjemgg5re75Yqg5LiA5Liq5Yqo55S75Yiw5Yqo55S76Zif5YiX5bC+6YOo77yM6L+Y5Y+v5Lul5bu26L+f5oyH5a6a55qE56eS5pWw44CCPGJyPlxuICAgICAqIOi/lOWbnuS4gOS4qiB7eyNjcm9zc0xpbmtNb2R1bGUgXCJzcC5zcGluZVwifX1zcC5zcGluZXt7L2Nyb3NzTGlua01vZHVsZX19LlRyYWNrRW50cnkg5a+56LGh44CCXG4gICAgICogQG1ldGhvZCBhZGRBbmltYXRpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdHJhY2tJbmRleFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBsb29wXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtkZWxheT0wXVxuICAgICAqIEByZXR1cm4ge3NwLnNwaW5lLlRyYWNrRW50cnl9XG4gICAgICovXG4gICAgYWRkQW5pbWF0aW9uICh0cmFja0luZGV4LCBuYW1lLCBsb29wLCBkZWxheSkge1xuICAgICAgICBkZWxheSA9IGRlbGF5IHx8IDA7XG4gICAgICAgIGlmICh0aGlzLmlzQW5pbWF0aW9uQ2FjaGVkKCkpIHtcbiAgICAgICAgICAgIGlmICh0cmFja0luZGV4ICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgY2Mud2FybihcIlRyYWNrIGluZGV4IGNhbiBub3QgZ3JlYXRlciB0aGFuIDAgaW4gY2FjaGVkIG1vZGUuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uUXVldWUucHVzaCh7YW5pbWF0aW9uTmFtZSA6IG5hbWUsIGxvb3A6IGxvb3AsIGRlbGF5IDogZGVsYXl9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9za2VsZXRvbikge1xuICAgICAgICAgICAgICAgIHZhciBhbmltYXRpb24gPSB0aGlzLl9za2VsZXRvbi5kYXRhLmZpbmRBbmltYXRpb24obmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKCFhbmltYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgY2MubG9nSUQoNzUxMCwgbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGUuYWRkQW5pbWF0aW9uV2l0aCh0cmFja0luZGV4LCBhbmltYXRpb24sIGxvb3AsIGRlbGF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBGaW5kIGFuaW1hdGlvbiB3aXRoIHNwZWNpZmllZCBuYW1lLlxuICAgICAqICEjemgg5p+l5om+5oyH5a6a5ZCN56ew55qE5Yqo55S7XG4gICAgICogQG1ldGhvZCBmaW5kQW5pbWF0aW9uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAgICAgKiBAcmV0dXJucyB7c3Auc3BpbmUuQW5pbWF0aW9ufVxuICAgICAqL1xuICAgIGZpbmRBbmltYXRpb24gKG5hbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3NrZWxldG9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2tlbGV0b24uZGF0YS5maW5kQW5pbWF0aW9uKG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFJldHVybnMgdHJhY2sgZW50cnkgYnkgdHJhY2tJbmRleC48YnI+XG4gICAgICogUmV0dXJucyBhIHt7I2Nyb3NzTGlua01vZHVsZSBcInNwLnNwaW5lXCJ9fXNwLnNwaW5le3svY3Jvc3NMaW5rTW9kdWxlfX0uVHJhY2tFbnRyeSBvYmplY3QuXG4gICAgICogISN6aCDpgJrov4cgdHJhY2sg57Si5byV6I635Y+WIFRyYWNrRW50cnnjgII8YnI+XG4gICAgICog6L+U5Zue5LiA5LiqIHt7I2Nyb3NzTGlua01vZHVsZSBcInNwLnNwaW5lXCJ9fXNwLnNwaW5le3svY3Jvc3NMaW5rTW9kdWxlfX0uVHJhY2tFbnRyeSDlr7nosaHjgIJcbiAgICAgKiBAbWV0aG9kIGdldEN1cnJlbnRcbiAgICAgKiBAcGFyYW0gdHJhY2tJbmRleFxuICAgICAqIEByZXR1cm4ge3NwLnNwaW5lLlRyYWNrRW50cnl9XG4gICAgICovXG4gICAgZ2V0Q3VycmVudCAodHJhY2tJbmRleCkge1xuICAgICAgICBpZiAodGhpcy5pc0FuaW1hdGlvbkNhY2hlZCgpKSB7XG4gICAgICAgICAgICBjYy53YXJuKFwiJ2dldEN1cnJlbnQnIGludGVyZmFjZSBjYW4gbm90IGJlIGludm9rZWQgaW4gY2FjaGVkIG1vZGUuXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3N0YXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlLmdldEN1cnJlbnQodHJhY2tJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gQ2xlYXJzIGFsbCB0cmFja3Mgb2YgYW5pbWF0aW9uIHN0YXRlLlxuICAgICAqICEjemgg5riF6Zmk5omA5pyJIHRyYWNrIOeahOWKqOeUu+eKtuaAgeOAglxuICAgICAqIEBtZXRob2QgY2xlYXJUcmFja3NcbiAgICAgKi9cbiAgICBjbGVhclRyYWNrcyAoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzQW5pbWF0aW9uQ2FjaGVkKCkpIHtcbiAgICAgICAgICAgIGNjLndhcm4oXCInY2xlYXJUcmFja3MnIGludGVyZmFjZSBjYW4gbm90IGJlIGludm9rZWQgaW4gY2FjaGVkIG1vZGUuXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3N0YXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUuY2xlYXJUcmFja3MoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIENsZWFycyB0cmFjayBvZiBhbmltYXRpb24gc3RhdGUgYnkgdHJhY2tJbmRleC5cbiAgICAgKiAhI3poIOa4hemZpOWHuuaMh+WumiB0cmFjayDnmoTliqjnlLvnirbmgIHjgIJcbiAgICAgKiBAbWV0aG9kIGNsZWFyVHJhY2tcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdHJhY2tJbmRleFxuICAgICAqL1xuICAgIGNsZWFyVHJhY2sgKHRyYWNrSW5kZXgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNBbmltYXRpb25DYWNoZWQoKSkge1xuICAgICAgICAgICAgY2Mud2FybihcIidjbGVhclRyYWNrJyBpbnRlcmZhY2UgY2FuIG5vdCBiZSBpbnZva2VkIGluIGNhY2hlZCBtb2RlLlwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zdGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlLmNsZWFyVHJhY2sodHJhY2tJbmRleCk7XG4gICAgICAgICAgICAgICAgaWYgKENDX0VESVRPUiAmJiAhY2MuZW5naW5lLmlzUGxheWluZykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZS51cGRhdGUoMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gU2V0IHRoZSBzdGFydCBldmVudCBsaXN0ZW5lci5cbiAgICAgKiAhI3poIOeUqOadpeiuvue9ruW8gOWni+aSreaUvuWKqOeUu+eahOS6i+S7tuebkeWQrOOAglxuICAgICAqIEBtZXRob2Qgc2V0U3RhcnRMaXN0ZW5lclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyXG4gICAgICovXG4gICAgc2V0U3RhcnRMaXN0ZW5lciAobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fZW5zdXJlTGlzdGVuZXIoKTtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXIuc3RhcnQgPSBsaXN0ZW5lcjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBTZXQgdGhlIGludGVycnVwdCBldmVudCBsaXN0ZW5lci5cbiAgICAgKiAhI3poIOeUqOadpeiuvue9ruWKqOeUu+iiq+aJk+aWreeahOS6i+S7tuebkeWQrOOAglxuICAgICAqIEBtZXRob2Qgc2V0SW50ZXJydXB0TGlzdGVuZXJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lclxuICAgICAqL1xuICAgIHNldEludGVycnVwdExpc3RlbmVyIChsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9lbnN1cmVMaXN0ZW5lcigpO1xuICAgICAgICB0aGlzLl9saXN0ZW5lci5pbnRlcnJ1cHQgPSBsaXN0ZW5lcjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBTZXQgdGhlIGVuZCBldmVudCBsaXN0ZW5lci5cbiAgICAgKiAhI3poIOeUqOadpeiuvue9ruWKqOeUu+aSreaUvuWujOWQjueahOS6i+S7tuebkeWQrOOAglxuICAgICAqIEBtZXRob2Qgc2V0RW5kTGlzdGVuZXJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lclxuICAgICAqL1xuICAgIHNldEVuZExpc3RlbmVyIChsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9lbnN1cmVMaXN0ZW5lcigpO1xuICAgICAgICB0aGlzLl9saXN0ZW5lci5lbmQgPSBsaXN0ZW5lcjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBTZXQgdGhlIGRpc3Bvc2UgZXZlbnQgbGlzdGVuZXIuXG4gICAgICogISN6aCDnlKjmnaXorr7nva7liqjnlLvlsIbooqvplIDmr4HnmoTkuovku7bnm5HlkKzjgIJcbiAgICAgKiBAbWV0aG9kIHNldERpc3Bvc2VMaXN0ZW5lclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyXG4gICAgICovXG4gICAgc2V0RGlzcG9zZUxpc3RlbmVyIChsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9lbnN1cmVMaXN0ZW5lcigpO1xuICAgICAgICB0aGlzLl9saXN0ZW5lci5kaXNwb3NlID0gbGlzdGVuZXI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gU2V0IHRoZSBjb21wbGV0ZSBldmVudCBsaXN0ZW5lci5cbiAgICAgKiAhI3poIOeUqOadpeiuvue9ruWKqOeUu+aSreaUvuS4gOasoeW+queOr+e7k+adn+WQjueahOS6i+S7tuebkeWQrOOAglxuICAgICAqIEBtZXRob2Qgc2V0Q29tcGxldGVMaXN0ZW5lclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyXG4gICAgICovXG4gICAgc2V0Q29tcGxldGVMaXN0ZW5lciAobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fZW5zdXJlTGlzdGVuZXIoKTtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXIuY29tcGxldGUgPSBsaXN0ZW5lcjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBTZXQgdGhlIGFuaW1hdGlvbiBldmVudCBsaXN0ZW5lci5cbiAgICAgKiAhI3poIOeUqOadpeiuvue9ruWKqOeUu+aSreaUvui/h+eoi+S4reW4p+S6i+S7tueahOebkeWQrOOAglxuICAgICAqIEBtZXRob2Qgc2V0RXZlbnRMaXN0ZW5lclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyXG4gICAgICovXG4gICAgc2V0RXZlbnRMaXN0ZW5lciAobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fZW5zdXJlTGlzdGVuZXIoKTtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXIuZXZlbnQgPSBsaXN0ZW5lcjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBTZXQgdGhlIHN0YXJ0IGV2ZW50IGxpc3RlbmVyIGZvciBzcGVjaWZpZWQgVHJhY2tFbnRyeS5cbiAgICAgKiAhI3poIOeUqOadpeS4uuaMh+WumueahCBUcmFja0VudHJ5IOiuvue9ruWKqOeUu+W8gOWni+aSreaUvueahOS6i+S7tuebkeWQrOOAglxuICAgICAqIEBtZXRob2Qgc2V0VHJhY2tTdGFydExpc3RlbmVyXG4gICAgICogQHBhcmFtIHtzcC5zcGluZS5UcmFja0VudHJ5fSBlbnRyeVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyXG4gICAgICovXG4gICAgc2V0VHJhY2tTdGFydExpc3RlbmVyIChlbnRyeSwgbGlzdGVuZXIpIHtcbiAgICAgICAgVHJhY2tFbnRyeUxpc3RlbmVycy5nZXRMaXN0ZW5lcnMoZW50cnkpLnN0YXJ0ID0gbGlzdGVuZXI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gU2V0IHRoZSBpbnRlcnJ1cHQgZXZlbnQgbGlzdGVuZXIgZm9yIHNwZWNpZmllZCBUcmFja0VudHJ5LlxuICAgICAqICEjemgg55So5p2l5Li65oyH5a6a55qEIFRyYWNrRW50cnkg6K6+572u5Yqo55S76KKr5omT5pat55qE5LqL5Lu255uR5ZCs44CCXG4gICAgICogQG1ldGhvZCBzZXRUcmFja0ludGVycnVwdExpc3RlbmVyXG4gICAgICogQHBhcmFtIHtzcC5zcGluZS5UcmFja0VudHJ5fSBlbnRyeVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyXG4gICAgICovXG4gICAgc2V0VHJhY2tJbnRlcnJ1cHRMaXN0ZW5lciAoZW50cnksIGxpc3RlbmVyKSB7XG4gICAgICAgIFRyYWNrRW50cnlMaXN0ZW5lcnMuZ2V0TGlzdGVuZXJzKGVudHJ5KS5pbnRlcnJ1cHQgPSBsaXN0ZW5lcjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBTZXQgdGhlIGVuZCBldmVudCBsaXN0ZW5lciBmb3Igc3BlY2lmaWVkIFRyYWNrRW50cnkuXG4gICAgICogISN6aCDnlKjmnaXkuLrmjIflrprnmoQgVHJhY2tFbnRyeSDorr7nva7liqjnlLvmkq3mlL7nu5PmnZ/nmoTkuovku7bnm5HlkKzjgIJcbiAgICAgKiBAbWV0aG9kIHNldFRyYWNrRW5kTGlzdGVuZXJcbiAgICAgKiBAcGFyYW0ge3NwLnNwaW5lLlRyYWNrRW50cnl9IGVudHJ5XG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXJcbiAgICAgKi9cbiAgICBzZXRUcmFja0VuZExpc3RlbmVyIChlbnRyeSwgbGlzdGVuZXIpIHtcbiAgICAgICAgVHJhY2tFbnRyeUxpc3RlbmVycy5nZXRMaXN0ZW5lcnMoZW50cnkpLmVuZCA9IGxpc3RlbmVyO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFNldCB0aGUgZGlzcG9zZSBldmVudCBsaXN0ZW5lciBmb3Igc3BlY2lmaWVkIFRyYWNrRW50cnkuXG4gICAgICogISN6aCDnlKjmnaXkuLrmjIflrprnmoQgVHJhY2tFbnRyeSDorr7nva7liqjnlLvljbPlsIbooqvplIDmr4HnmoTkuovku7bnm5HlkKzjgIJcbiAgICAgKiBAbWV0aG9kIHNldFRyYWNrRGlzcG9zZUxpc3RlbmVyXG4gICAgICogQHBhcmFtIHtzcC5zcGluZS5UcmFja0VudHJ5fSBlbnRyeVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyXG4gICAgICovXG4gICAgc2V0VHJhY2tEaXNwb3NlTGlzdGVuZXIoZW50cnksIGxpc3RlbmVyKXtcbiAgICAgICAgVHJhY2tFbnRyeUxpc3RlbmVycy5nZXRMaXN0ZW5lcnMoZW50cnkpLmRpc3Bvc2UgPSBsaXN0ZW5lcjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBTZXQgdGhlIGNvbXBsZXRlIGV2ZW50IGxpc3RlbmVyIGZvciBzcGVjaWZpZWQgVHJhY2tFbnRyeS5cbiAgICAgKiAhI3poIOeUqOadpeS4uuaMh+WumueahCBUcmFja0VudHJ5IOiuvue9ruWKqOeUu+S4gOasoeW+queOr+aSreaUvue7k+adn+eahOS6i+S7tuebkeWQrOOAglxuICAgICAqIEBtZXRob2Qgc2V0VHJhY2tDb21wbGV0ZUxpc3RlbmVyXG4gICAgICogQHBhcmFtIHtzcC5zcGluZS5UcmFja0VudHJ5fSBlbnRyeVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyXG4gICAgICogQHBhcmFtIHtzcC5zcGluZS5UcmFja0VudHJ5fSBsaXN0ZW5lci5lbnRyeVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsaXN0ZW5lci5sb29wQ291bnRcbiAgICAgKi9cbiAgICBzZXRUcmFja0NvbXBsZXRlTGlzdGVuZXIgKGVudHJ5LCBsaXN0ZW5lcikge1xuICAgICAgICBUcmFja0VudHJ5TGlzdGVuZXJzLmdldExpc3RlbmVycyhlbnRyeSkuY29tcGxldGUgPSBmdW5jdGlvbiAodHJhY2tFbnRyeSkge1xuICAgICAgICAgICAgdmFyIGxvb3BDb3VudCA9IE1hdGguZmxvb3IodHJhY2tFbnRyeS50cmFja1RpbWUgLyB0cmFja0VudHJ5LmFuaW1hdGlvbkVuZCk7IFxuICAgICAgICAgICAgbGlzdGVuZXIodHJhY2tFbnRyeSwgbG9vcENvdW50KTtcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBTZXQgdGhlIGV2ZW50IGxpc3RlbmVyIGZvciBzcGVjaWZpZWQgVHJhY2tFbnRyeS5cbiAgICAgKiAhI3poIOeUqOadpeS4uuaMh+WumueahCBUcmFja0VudHJ5IOiuvue9ruWKqOeUu+W4p+S6i+S7tueahOebkeWQrOOAglxuICAgICAqIEBtZXRob2Qgc2V0VHJhY2tFdmVudExpc3RlbmVyXG4gICAgICogQHBhcmFtIHtzcC5zcGluZS5UcmFja0VudHJ5fSBlbnRyeVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyXG4gICAgICovXG4gICAgc2V0VHJhY2tFdmVudExpc3RlbmVyIChlbnRyeSwgbGlzdGVuZXIpIHtcbiAgICAgICAgVHJhY2tFbnRyeUxpc3RlbmVycy5nZXRMaXN0ZW5lcnMoZW50cnkpLmV2ZW50ID0gbGlzdGVuZXI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gR2V0IHRoZSBhbmltYXRpb24gc3RhdGUgb2JqZWN0XG4gICAgICogISN6aCDojrflj5ZcbiAgICAgKiBAbWV0aG9kIHNldFRyYWNrRXZlbnRMaXN0ZW5lclxuICAgICAqIEByZXR1cm4ge3NwLnNwaW5lLkFuaW1hdGlvblN0YXRlfSBzdGF0ZVxuICAgICAqL1xuICAgIGdldFN0YXRlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlO1xuICAgIH0sXG5cbiAgICAvLyB1cGRhdGUgYW5pbWF0aW9uIGxpc3QgZm9yIGVkaXRvclxuICAgIF91cGRhdGVBbmltRW51bTogQ0NfRURJVE9SICYmIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFuaW1FbnVtO1xuICAgICAgICBpZiAodGhpcy5za2VsZXRvbkRhdGEpIHtcbiAgICAgICAgICAgIGFuaW1FbnVtID0gdGhpcy5za2VsZXRvbkRhdGEuZ2V0QW5pbXNFbnVtKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2hhbmdlIGVudW1cbiAgICAgICAgc2V0RW51bUF0dHIodGhpcywgJ19hbmltYXRpb25JbmRleCcsIGFuaW1FbnVtIHx8IERlZmF1bHRBbmltc0VudW0pO1xuICAgIH0sXG4gICAgLy8gdXBkYXRlIHNraW4gbGlzdCBmb3IgZWRpdG9yXG4gICAgX3VwZGF0ZVNraW5FbnVtOiBDQ19FRElUT1IgJiYgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2tpbkVudW07XG4gICAgICAgIGlmICh0aGlzLnNrZWxldG9uRGF0YSkge1xuICAgICAgICAgICAgc2tpbkVudW0gPSB0aGlzLnNrZWxldG9uRGF0YS5nZXRTa2luc0VudW0oKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjaGFuZ2UgZW51bVxuICAgICAgICBzZXRFbnVtQXR0cih0aGlzLCAnX2RlZmF1bHRTa2luSW5kZXgnLCBza2luRW51bSB8fCBEZWZhdWx0U2tpbnNFbnVtKTtcbiAgICB9LFxuXG4gICAgX2Vuc3VyZUxpc3RlbmVyICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9saXN0ZW5lcikge1xuICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXIgPSBuZXcgVHJhY2tFbnRyeUxpc3RlbmVycygpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3N0YXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUuYWRkTGlzdGVuZXIodGhpcy5fbGlzdGVuZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIF91cGRhdGVTa2VsZXRvbkRhdGEoKSB7XG4gICAgICAgIGlmICghdGhpcy5ub2RlKSB7XG4gICAgICAgICAgICBjYy53YXJuKFwibm9kZSBoYXMgYmVlbiBkZXN0cm95ZWQsIGNhbid0IHNldCBzcC5za2VsZXRvbkRhdGFcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLnNrZWxldG9uRGF0YSkge1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlUmVuZGVyKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH07XG4gICAgICAgIGxldCBkYXRhID0gdGhpcy5za2VsZXRvbkRhdGEuZ2V0UnVudGltZURhdGEoKTtcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICB0aGlzLmRpc2FibGVSZW5kZXIoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5zZXRTa2VsZXRvbkRhdGEoZGF0YSk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNBbmltYXRpb25DYWNoZWQoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0QW5pbWF0aW9uU3RhdGVEYXRhKG5ldyBzcGluZS5BbmltYXRpb25TdGF0ZURhdGEodGhpcy5fc2tlbGV0b24uZGF0YSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kZWZhdWx0U2tpbiAmJiB0aGlzLnNldFNraW4odGhpcy5kZWZhdWx0U2tpbik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNjLndhcm4oZSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMuX3ByZUNhY2hlTW9kZSA9IHRoaXMuX2NhY2hlTW9kZTtcbiAgICAgICAgdGhpcy5hbmltYXRpb24gPSB0aGlzLmRlZmF1bHRBbmltYXRpb247XG4gICAgfSxcblxuICAgIF9yZWZyZXNoSW5zcGVjdG9yICgpIHtcbiAgICAgICAgLy8gdXBkYXRlIGluc3BlY3RvclxuICAgICAgICB0aGlzLl91cGRhdGVBbmltRW51bSgpO1xuICAgICAgICB0aGlzLl91cGRhdGVTa2luRW51bSgpO1xuICAgICAgICBFZGl0b3IuVXRpbHMucmVmcmVzaFNlbGVjdGVkSW5zcGVjdG9yKCdub2RlJywgdGhpcy5ub2RlLnV1aWQpO1xuICAgIH0sXG5cbiAgICBfdXBkYXRlRGVidWdEcmF3OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmRlYnVnQm9uZXMgfHwgdGhpcy5kZWJ1Z1Nsb3RzKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2RlYnVnUmVuZGVyZXIpIHtcbiAgICAgICAgICAgICAgICBsZXQgZGVidWdEcmF3Tm9kZSA9IG5ldyBjYy5Qcml2YXRlTm9kZSgpO1xuICAgICAgICAgICAgICAgIGRlYnVnRHJhd05vZGUubmFtZSA9ICdERUJVR19EUkFXX05PREUnO1xuICAgICAgICAgICAgICAgIGxldCBkZWJ1Z0RyYXcgPSBkZWJ1Z0RyYXdOb2RlLmFkZENvbXBvbmVudChHcmFwaGljcyk7XG4gICAgICAgICAgICAgICAgZGVidWdEcmF3LmxpbmVXaWR0aCA9IDE7XG4gICAgICAgICAgICAgICAgZGVidWdEcmF3LnN0cm9rZUNvbG9yID0gY2MuY29sb3IoMjU1LCAwLCAwLCAyNTUpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuX2RlYnVnUmVuZGVyZXIgPSBkZWJ1Z0RyYXc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2RlYnVnUmVuZGVyZXIubm9kZS5wYXJlbnQgPSB0aGlzLm5vZGU7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0FuaW1hdGlvbkNhY2hlZCgpKSB7XG4gICAgICAgICAgICAgICAgY2Mud2FybihcIkRlYnVnIGJvbmVzIG9yIHNsb3RzIGlzIGludmFsaWQgaW4gY2FjaGVkIG1vZGVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fZGVidWdSZW5kZXJlcikge1xuICAgICAgICAgICAgdGhpcy5fZGVidWdSZW5kZXJlci5ub2RlLnBhcmVudCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3AuU2tlbGV0b247XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gQ29weXJpZ2h0IChjKSAyMDEzLTIwMTYgQ2h1a29uZyBUZWNobm9sb2dpZXMgSW5jLlxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxuXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xuXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxuICB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcbiAgbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xuICB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXG4gIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxuXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxudmFyIFRyYWNrRW50cnlMaXN0ZW5lcnMgPSByZXF1aXJlKCcuL3RyYWNrLWVudHJ5LWxpc3RlbmVycycpO1xudmFyIFJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uLy4uL2NvY29zMmQvY29yZS9jb21wb25lbnRzL0NDUmVuZGVyQ29tcG9uZW50Jyk7XG52YXIgc3BpbmUgPSByZXF1aXJlKCcuL2xpYi9zcGluZScpO1xudmFyIE1hdGVyaWFsID0gcmVxdWlyZSgnLi4vLi4vY29jb3MyZC9jb3JlL2Fzc2V0cy9tYXRlcmlhbC9DQ01hdGVyaWFsJyk7XG52YXIgR3JhcGhpY3MgPSByZXF1aXJlKCcuLi8uLi9jb2NvczJkL2NvcmUvZ3JhcGhpY3MvZ3JhcGhpY3MnKTtcblxudmFyIFNrZWxldG9uQ2FjaGUgPSByZXF1aXJlKCcuL3NrZWxldG9uLWNhY2hlJyk7XG5cbi8qKlxuICogQG1vZHVsZSBzcFxuICovXG52YXIgRGVmYXVsdFNraW5zRW51bSA9IGNjLkVudW0oeyAnZGVmYXVsdCc6IC0xIH0pO1xudmFyIERlZmF1bHRBbmltc0VudW0gPSBjYy5FbnVtKHsgJzxOb25lPic6IDAgfSk7XG5cbi8qKlxuICogISNlbiBFbnVtIGZvciBhbmltYXRpb24gY2FjaGUgbW9kZSB0eXBlLlxuICogISN6aCBTcGluZeWKqOeUu+e8k+WtmOexu+Wei1xuICogQGVudW0gU2tlbGV0b24uQW5pbWF0aW9uQ2FjaGVNb2RlXG4gKi9cbnZhciBBbmltYXRpb25DYWNoZU1vZGUgPSBjYy5FbnVtKHtcbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSByZWFsdGltZSBtb2RlLlxuICAgICAqICEjemgg5a6e5pe26K6h566X5qih5byP44CCXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFJFQUxUSU1FXG4gICAgICovXG4gICAgUkVBTFRJTUU6IDAsXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgc2hhcmVkIGNhY2hlIG1vZGUuXG4gICAgICogISN6aCDlhbHkuqvnvJPlrZjmqKHlvI/jgIJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gU0hBUkVEX0NBQ0hFXG4gICAgICovXG4gICAgU0hBUkVEX0NBQ0hFOiAxLFxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIHByaXZhdGUgY2FjaGUgbW9kZS5cbiAgICAgKiAhI3poIOengeaciee8k+WtmOaooeW8j+OAglxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBQUklWQVRFX0NBQ0hFXG4gICAgICovXG4gICAgUFJJVkFURV9DQUNIRTogMlxufSk7XG5cbmZ1bmN0aW9uIHNldEVudW1BdHRyKG9iaiwgcHJvcE5hbWUsIGVudW1EZWYpIHtcbiAgICBjYy5DbGFzcy5BdHRyLnNldENsYXNzQXR0cihvYmosIHByb3BOYW1lLCAndHlwZScsICdFbnVtJyk7XG4gICAgY2MuQ2xhc3MuQXR0ci5zZXRDbGFzc0F0dHIob2JqLCBwcm9wTmFtZSwgJ2VudW1MaXN0JywgY2MuRW51bS5nZXRMaXN0KGVudW1EZWYpKTtcbn1cblxuLyoqXG4gKiAhI2VuXG4gKiBUaGUgc2tlbGV0b24gb2YgU3BpbmUgPGJyLz5cbiAqIDxici8+XG4gKiAoU2tlbGV0b24gaGFzIGEgcmVmZXJlbmNlIHRvIGEgU2tlbGV0b25EYXRhIGFuZCBzdG9yZXMgdGhlIHN0YXRlIGZvciBza2VsZXRvbiBpbnN0YW5jZSxcbiAqIHdoaWNoIGNvbnNpc3RzIG9mIHRoZSBjdXJyZW50IHBvc2UncyBib25lIFNSVCwgc2xvdCBjb2xvcnMsIGFuZCB3aGljaCBzbG90IGF0dGFjaG1lbnRzIGFyZSB2aXNpYmxlLiA8YnIvPlxuICogTXVsdGlwbGUgc2tlbGV0b25zIGNhbiB1c2UgdGhlIHNhbWUgU2tlbGV0b25EYXRhIHdoaWNoIGluY2x1ZGVzIGFsbCBhbmltYXRpb25zLCBza2lucywgYW5kIGF0dGFjaG1lbnRzLikgPGJyLz5cbiAqICEjemhcbiAqIFNwaW5lIOmqqOmqvOWKqOeUuyA8YnIvPlxuICogPGJyLz5cbiAqIChTa2VsZXRvbiDlhbfmnInlr7npqqjpqrzmlbDmja7nmoTlvJXnlKjlubbkuJTlrZjlgqjkuobpqqjpqrzlrp7kvovnmoTnirbmgIHvvIxcbiAqIOWug+eUseW9k+WJjeeahOmqqOmqvOWKqOS9nO+8jHNsb3Qg6aKc6Imy77yM5ZKM5Y+v6KeB55qEIHNsb3QgYXR0YWNobWVudHMg57uE5oiQ44CCPGJyLz5cbiAqIOWkmuS4qiBTa2VsZXRvbiDlj6/ku6Xkvb/nlKjnm7jlkIznmoTpqqjpqrzmlbDmja7vvIzlhbbkuK3ljIXmi6zmiYDmnInnmoTliqjnlLvvvIznmq7ogqTlkowgYXR0YWNobWVudHPjgIJcbiAqXG4gKiBAY2xhc3MgU2tlbGV0b25cbiAqIEBleHRlbmRzIFJlbmRlckNvbXBvbmVudFxuICovXG5zcC5Ta2VsZXRvbiA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnc3AuU2tlbGV0b24nLFxuICAgIGV4dGVuZHM6IFJlbmRlckNvbXBvbmVudCxcbiAgICBlZGl0b3I6IENDX0VESVRPUiAmJiB7XG4gICAgICAgIG1lbnU6ICdpMThuOk1BSU5fTUVOVS5jb21wb25lbnQucmVuZGVyZXJzL1NwaW5lIFNrZWxldG9uJyxcbiAgICAgICAgaGVscDogJ2FwcDovL2RvY3MvaHRtbC9jb21wb25lbnRzL3NwaW5lLmh0bWwnXG4gICAgICAgIC8vcGxheU9uRm9jdXM6IHRydWVcbiAgICB9LFxuXG4gICAgc3RhdGljczoge1xuICAgICAgICBBbmltYXRpb25DYWNoZU1vZGU6IEFuaW1hdGlvbkNhY2hlTW9kZVxuICAgIH0sXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIFRoZSBza2VsZXRhbCBhbmltYXRpb24gaXMgcGF1c2VkP1xuICAgICAgICAgKiAhI3poIOivpemqqOmqvOWKqOeUu+aYr+WQpuaaguWBnOOAglxuICAgICAgICAgKiBAcHJvcGVydHkgcGF1c2VkXG4gICAgICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgICAgICovXG4gICAgICAgIHBhdXNlZDoge1xuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICAgICAgICB2aXNpYmxlOiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuXG4gICAgICAgICAqIFRoZSBza2VsZXRvbiBkYXRhIGNvbnRhaW5zIHRoZSBza2VsZXRvbiBpbmZvcm1hdGlvbiAoYmluZCBwb3NlIGJvbmVzLCBzbG90cywgZHJhdyBvcmRlcixcbiAgICAgICAgICogYXR0YWNobWVudHMsIHNraW5zLCBldGMpIGFuZCBhbmltYXRpb25zIGJ1dCBkb2VzIG5vdCBob2xkIGFueSBzdGF0ZS48YnIvPlxuICAgICAgICAgKiBNdWx0aXBsZSBza2VsZXRvbnMgY2FuIHNoYXJlIHRoZSBzYW1lIHNrZWxldG9uIGRhdGEuXG4gICAgICAgICAqICEjemhcbiAgICAgICAgICog6aqo6aq85pWw5o2u5YyF5ZCr5LqG6aqo6aq85L+h5oGv77yI57uR5a6a6aqo6aq85Yqo5L2c77yMc2xvdHPvvIzmuLLmn5Ppobrluo/vvIxcbiAgICAgICAgICogYXR0YWNobWVudHPvvIznmq7ogqTnrYnnrYnvvInlkozliqjnlLvkvYbkuI3mjIHmnInku7vkvZXnirbmgIHjgII8YnIvPlxuICAgICAgICAgKiDlpJrkuKogU2tlbGV0b24g5Y+v5Lul5YWx55So55u45ZCM55qE6aqo6aq85pWw5o2u44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7c3AuU2tlbGV0b25EYXRhfSBza2VsZXRvbkRhdGFcbiAgICAgICAgICovXG4gICAgICAgIHNrZWxldG9uRGF0YToge1xuICAgICAgICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICAgICAgICAgIHR5cGU6IHNwLlNrZWxldG9uRGF0YSxcbiAgICAgICAgICAgIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVmYXVsdFNraW4gPSAnJztcbiAgICAgICAgICAgICAgICB0aGlzLmRlZmF1bHRBbmltYXRpb24gPSAnJztcbiAgICAgICAgICAgICAgICBpZiAoQ0NfRURJVE9SKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlZnJlc2hJbnNwZWN0b3IoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlU2tlbGV0b25EYXRhKCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0b29sdGlwOiBDQ19ERVYgJiYgJ2kxOG46Q09NUE9ORU5ULnNrZWxldG9uLnNrZWxldG9uX2RhdGEnXG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8g55Sx5LqOIHNwaW5lIOeahCBza2luIOaYr+aXoOazleS6jOasoeabv+aNoueahO+8jOaJgOS7peWPquiDveiuvue9rum7mOiupOeahCBza2luXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIFRoZSBuYW1lIG9mIGRlZmF1bHQgc2tpbi5cbiAgICAgICAgICogISN6aCDpu5jorqTnmoTnmq7ogqTlkI3np7DjgIJcbiAgICAgICAgICogQHByb3BlcnR5IHtTdHJpbmd9IGRlZmF1bHRTa2luXG4gICAgICAgICAqL1xuICAgICAgICBkZWZhdWx0U2tpbjoge1xuICAgICAgICAgICAgZGVmYXVsdDogJycsXG4gICAgICAgICAgICB2aXNpYmxlOiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIFRoZSBuYW1lIG9mIGRlZmF1bHQgYW5pbWF0aW9uLlxuICAgICAgICAgKiAhI3poIOm7mOiupOeahOWKqOeUu+WQjeensOOAglxuICAgICAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gZGVmYXVsdEFuaW1hdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgZGVmYXVsdEFuaW1hdGlvbjoge1xuICAgICAgICAgICAgZGVmYXVsdDogJycsXG4gICAgICAgICAgICB2aXNpYmxlOiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIFRoZSBuYW1lIG9mIGN1cnJlbnQgcGxheWluZyBhbmltYXRpb24uXG4gICAgICAgICAqICEjemgg5b2T5YmN5pKt5pS+55qE5Yqo55S75ZCN56ew44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBhbmltYXRpb25cbiAgICAgICAgICovXG4gICAgICAgIGFuaW1hdGlvbjoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNBbmltYXRpb25DYWNoZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYW5pbWF0aW9uTmFtZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZW50cnkgPSB0aGlzLmdldEN1cnJlbnQoMCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS5hbmltYXRpb24ubmFtZSB8fCBcIlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVmYXVsdEFuaW1hdGlvbiA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEFuaW1hdGlvbigwLCB2YWx1ZSwgdGhpcy5sb29wKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmlzQW5pbWF0aW9uQ2FjaGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhclRyYWNrKDApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFRvU2V0dXBQb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IF9kZWZhdWx0U2tpbkluZGV4XG4gICAgICAgICAqL1xuICAgICAgICBfZGVmYXVsdFNraW5JbmRleDoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2tlbGV0b25EYXRhICYmIHRoaXMuZGVmYXVsdFNraW4pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNraW5zRW51bSA9IHRoaXMuc2tlbGV0b25EYXRhLmdldFNraW5zRW51bSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2tpbnNFbnVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2tpbkluZGV4ID0gc2tpbnNFbnVtW3RoaXMuZGVmYXVsdFNraW5dO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNraW5JbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNraW5JbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBza2luc0VudW07XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2tlbGV0b25EYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHNraW5zRW51bSA9IHRoaXMuc2tlbGV0b25EYXRhLmdldFNraW5zRW51bSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXNraW5zRW51bSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2MuZXJyb3JJRCgnJywgdGhpcy5uYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHNraW5OYW1lID0gc2tpbnNFbnVtW3ZhbHVlXTtcbiAgICAgICAgICAgICAgICBpZiAoc2tpbk5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZmF1bHRTa2luID0gc2tpbk5hbWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U2tpbih0aGlzLmRlZmF1bHRTa2luKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKENDX0VESVRPUiAmJiAhY2MuZW5naW5lLmlzUGxheWluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVmcmVzaEluc3BlY3RvcigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2MuZXJyb3JJRCg3NTAxLCB0aGlzLm5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHR5cGU6IERlZmF1bHRTa2luc0VudW0sXG4gICAgICAgICAgICB2aXNpYmxlOiB0cnVlLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6IFwiRGVmYXVsdCBTa2luXCIsXG4gICAgICAgICAgICB0b29sdGlwOiBDQ19ERVYgJiYgJ2kxOG46Q09NUE9ORU5ULnNrZWxldG9uLmRlZmF1bHRfc2tpbidcbiAgICAgICAgfSxcblxuICAgICAgICAvLyB2YWx1ZSBvZiAwIHJlcHJlc2VudHMgbm8gYW5pbWF0aW9uXG4gICAgICAgIF9hbmltYXRpb25JbmRleDoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvbk5hbWUgPSAhQ0NfRURJVE9SIHx8IGNjLmVuZ2luZS5pc1BsYXlpbmcgPyB0aGlzLmFuaW1hdGlvbiA6IHRoaXMuZGVmYXVsdEFuaW1hdGlvbjtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5za2VsZXRvbkRhdGEgJiYgYW5pbWF0aW9uTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYW5pbXNFbnVtID0gdGhpcy5za2VsZXRvbkRhdGEuZ2V0QW5pbXNFbnVtKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhbmltc0VudW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbmltSW5kZXggPSBhbmltc0VudW1bYW5pbWF0aW9uTmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYW5pbUluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGFuaW1zRW51bTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5za2VsZXRvbkRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbXNFbnVtID0gdGhpcy5za2VsZXRvbkRhdGEuZ2V0QW5pbXNFbnVtKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghYW5pbXNFbnVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYy5lcnJvcklEKDc1MDIsIHRoaXMubmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBhbmltTmFtZSA9IGFuaW1zRW51bVt2YWx1ZV07XG4gICAgICAgICAgICAgICAgaWYgKGFuaW1OYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb24gPSBhbmltTmFtZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjYy5lcnJvcklEKDc1MDMsIHRoaXMubmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdHlwZTogRGVmYXVsdEFuaW1zRW51bSxcbiAgICAgICAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogJ0FuaW1hdGlvbicsXG4gICAgICAgICAgICB0b29sdGlwOiBDQ19ERVYgJiYgJ2kxOG46Q09NUE9ORU5ULnNrZWxldG9uLmFuaW1hdGlvbidcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBSZWNvcmQgcHJlIGNhY2hlIG1vZGUuXG4gICAgICAgIF9wcmVDYWNoZU1vZGU6IC0xLFxuICAgICAgICBfY2FjaGVNb2RlOiBBbmltYXRpb25DYWNoZU1vZGUuUkVBTFRJTUUsXG4gICAgICAgIF9kZWZhdWx0Q2FjaGVNb2RlOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiAwLFxuICAgICAgICAgICAgdHlwZTogQW5pbWF0aW9uQ2FjaGVNb2RlLFxuICAgICAgICAgICAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRBbmltYXRpb25DYWNoZU1vZGUodGhpcy5fZGVmYXVsdENhY2hlTW9kZSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBlZGl0b3JPbmx5OiB0cnVlLFxuICAgICAgICAgICAgdmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGFuaW1hdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6IFwiQW5pbWF0aW9uIENhY2hlIE1vZGVcIixcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQuc2tlbGV0b24uYW5pbWF0aW9uX2NhY2hlX21vZGUnXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gVE9ET1xuICAgICAgICAgKiAhI3poIOaYr+WQpuW+queOr+aSreaUvuW9k+WJjemqqOmqvOWKqOeUu+OAglxuICAgICAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGxvb3BcbiAgICAgICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAgICAgKi9cbiAgICAgICAgbG9vcDoge1xuICAgICAgICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQuc2tlbGV0b24ubG9vcCdcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBJbmRpY2F0ZXMgd2hldGhlciB0byBlbmFibGUgcHJlbXVsdGlwbGllZCBhbHBoYS5cbiAgICAgICAgICogWW91IHNob3VsZCBkaXNhYmxlIHRoaXMgb3B0aW9uIHdoZW4gaW1hZ2UncyB0cmFuc3BhcmVudCBhcmVhIGFwcGVhcnMgdG8gaGF2ZSBvcGFxdWUgcGl4ZWxzLFxuICAgICAgICAgKiBvciBlbmFibGUgdGhpcyBvcHRpb24gd2hlbiBpbWFnZSdzIGhhbGYgdHJhbnNwYXJlbnQgYXJlYSBhcHBlYXJzIHRvIGJlIGRhcmtlbi5cbiAgICAgICAgICogISN6aCDmmK/lkKblkK/nlKjotLTlm77pooTkuZjjgIJcbiAgICAgICAgICog5b2T5Zu+54mH55qE6YCP5piO5Yy65Z+f5Ye6546w6Imy5Z2X5pe26ZyA6KaB5YWz6Zet6K+l6YCJ6aG577yM5b2T5Zu+54mH55qE5Y2K6YCP5piO5Yy65Z+f6aKc6Imy5Y+Y6buR5pe26ZyA6KaB5ZCv55So6K+l6YCJ6aG544CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gcHJlbXVsdGlwbGllZEFscGhhXG4gICAgICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgICAgICovXG4gICAgICAgIHByZW11bHRpcGxpZWRBbHBoYToge1xuICAgICAgICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQuc2tlbGV0b24ucHJlbXVsdGlwbGllZEFscGhhJ1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIFRoZSB0aW1lIHNjYWxlIG9mIHRoaXMgc2tlbGV0b24uXG4gICAgICAgICAqICEjemgg5b2T5YmN6aqo6aq85Lit5omA5pyJ5Yqo55S755qE5pe26Ze057yp5pS+546H44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSB0aW1lU2NhbGVcbiAgICAgICAgICogQGRlZmF1bHQgMVxuICAgICAgICAgKi9cbiAgICAgICAgdGltZVNjYWxlOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiAxLFxuICAgICAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC5za2VsZXRvbi50aW1lX3NjYWxlJ1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIEluZGljYXRlcyB3aGV0aGVyIG9wZW4gZGVidWcgc2xvdHMuXG4gICAgICAgICAqICEjemgg5piv5ZCm5pi+56S6IHNsb3Qg55qEIGRlYnVnIOS/oeaBr+OAglxuICAgICAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGRlYnVnU2xvdHNcbiAgICAgICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgICAgICovXG4gICAgICAgIGRlYnVnU2xvdHM6IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgICAgICAgZWRpdG9yT25seTogdHJ1ZSxcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQuc2tlbGV0b24uZGVidWdfc2xvdHMnLFxuICAgICAgICAgICAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlRGVidWdEcmF3KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gSW5kaWNhdGVzIHdoZXRoZXIgb3BlbiBkZWJ1ZyBib25lcy5cbiAgICAgICAgICogISN6aCDmmK/lkKbmmL7npLogYm9uZSDnmoQgZGVidWcg5L+h5oGv44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZGVidWdCb25lc1xuICAgICAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAgICAgKi9cbiAgICAgICAgZGVidWdCb25lczoge1xuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICAgICAgICBlZGl0b3JPbmx5OiB0cnVlLFxuICAgICAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC5za2VsZXRvbi5kZWJ1Z19ib25lcycsXG4gICAgICAgICAgICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVEZWJ1Z0RyYXcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBJbmRpY2F0ZXMgd2hldGhlciBvcGVuIGRlYnVnIG1lc2guXG4gICAgICAgICAqICEjemgg5piv5ZCm5pi+56S6IG1lc2gg55qEIGRlYnVnIOS/oeaBr+OAglxuICAgICAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGRlYnVnTWVzaFxuICAgICAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAgICAgKi9cbiAgICAgICAgZGVidWdNZXNoOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICAgICAgICAgIGVkaXRvck9ubHk6IHRydWUsXG4gICAgICAgICAgICB0b29sdGlwOiBDQ19ERVYgJiYgJ2kxOG46Q09NUE9ORU5ULnNrZWxldG9uLmRlYnVnX21lc2gnLFxuICAgICAgICAgICAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlRGVidWdEcmF3KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gRW5hYmxlZCB0d28gY29sb3IgdGludC5cbiAgICAgICAgICogISN6aCDmmK/lkKblkK/nlKjmn5PoibLmlYjmnpzjgIJcbiAgICAgICAgICogQHByb3BlcnR5IHtCb29sZWFufSB1c2VUaW50XG4gICAgICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICB1c2VUaW50OiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQuc2tlbGV0b24udXNlX3RpbnQnLFxuICAgICAgICAgICAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlVXNlVGludCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIEVuYWJsZWQgYmF0Y2ggbW9kZWwsIGlmIHNrZWxldG9uIGlzIGNvbXBsZXgsIGRvIG5vdCBlbmFibGUgYmF0Y2gsIG9yIHdpbGwgbG93ZXIgcGVyZm9ybWFuY2UuXG4gICAgICAgICAqICEjemgg5byA5ZCv5ZCI5om577yM5aaC5p6c5riy5p+T5aSn6YeP55u45ZCM57q555CG77yM5LiU57uT5p6E566A5Y2V55qE6aqo6aq85Yqo55S777yM5byA5ZCv5ZCI5om55Y+v5Lul6ZmN5L2OZHJhd2NhbGzvvIzlkKbliJnor7fkuI3opoHlvIDlkK/vvIxjcHXmtojogJfkvJrkuIrljYfjgIJcbiAgICAgICAgICogQHByb3BlcnR5IHtCb29sZWFufSBlbmFibGVCYXRjaFxuICAgICAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAgICAgKi9cbiAgICAgICAgZW5hYmxlQmF0Y2g6IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgICAgICAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlQmF0Y2goKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQuc2tlbGV0b24uZW5hYmxlZF9iYXRjaCdcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBCZWxvdyBwcm9wZXJ0aWVzIHdpbGwgZWZmZWN0IHdoZW4gY2FjaGUgbW9kZSBpcyBTSEFSRURfQ0FDSEUgb3IgUFJJVkFURV9DQUNIRS5cbiAgICAgICAgLy8gYWNjdW11bGF0ZSB0aW1lXG4gICAgICAgIF9hY2NUaW1lOiAwLFxuICAgICAgICAvLyBQbGF5IHRpbWVzIGNvdW50ZXJcbiAgICAgICAgX3BsYXlDb3VudDogMCxcbiAgICAgICAgLy8gRnJhbWUgY2FjaGVcbiAgICAgICAgX2ZyYW1lQ2FjaGU6IG51bGwsXG4gICAgICAgIC8vIEN1ciBmcmFtZVxuICAgICAgICBfY3VyRnJhbWU6IG51bGwsXG4gICAgICAgIC8vIFNrZWxldG9uIGNhY2hlXG4gICAgICAgIF9za2VsZXRvbkNhY2hlOiBudWxsLFxuICAgICAgICAvLyBBaW1hdGlvbiBuYW1lXG4gICAgICAgIF9hbmltYXRpb25OYW1lOiBcIlwiLFxuICAgICAgICAvLyBBbmltYXRpb24gcXVldWVcbiAgICAgICAgX2FuaW1hdGlvblF1ZXVlOiBbXSxcbiAgICAgICAgLy8gSGVhZCBhbmltYXRpb24gaW5mbyBvZiBcbiAgICAgICAgX2hlYWRBbmlJbmZvOiBudWxsLFxuICAgICAgICAvLyBQbGF5IHRpbWVzXG4gICAgICAgIF9wbGF5VGltZXM6IDAsXG4gICAgICAgIC8vIElzIGFuaW1hdGlvbiBjb21wbGV0ZS5cbiAgICAgICAgX2lzQW5pQ29tcGxldGU6IHRydWVcbiAgICB9LFxuXG4gICAgLy8gQ09OU1RSVUNUT1JcbiAgICBjdG9yOiBmdW5jdGlvbiBjdG9yKCkge1xuICAgICAgICB0aGlzLl9lZmZlY3REZWxlZ2F0ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3NrZWxldG9uID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcm9vdEJvbmUgPSBudWxsO1xuICAgICAgICB0aGlzLl9saXN0ZW5lciA9IG51bGw7XG4gICAgICAgIHRoaXMuX2JvdW5kaW5nQm94ID0gY2MucmVjdCgpO1xuICAgICAgICB0aGlzLl9tYXRlcmlhbENhY2hlID0ge307XG4gICAgICAgIHRoaXMuX2RlYnVnUmVuZGVyZXIgPSBudWxsO1xuICAgICAgICB0aGlzLl9zdGFydFNsb3RJbmRleCA9IC0xO1xuICAgICAgICB0aGlzLl9lbmRTbG90SW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy5fc3RhcnRFbnRyeSA9IHsgYW5pbWF0aW9uOiB7IG5hbWU6IFwiXCIgfSwgdHJhY2tJbmRleDogMCB9O1xuICAgICAgICB0aGlzLl9lbmRFbnRyeSA9IHsgYW5pbWF0aW9uOiB7IG5hbWU6IFwiXCIgfSwgdHJhY2tJbmRleDogMCB9O1xuICAgIH0sXG5cblxuICAgIC8vIG92ZXJyaWRlXG4gICAgc2V0TWF0ZXJpYWw6IGZ1bmN0aW9uIHNldE1hdGVyaWFsKGluZGV4LCBtYXRlcmlhbCkge1xuICAgICAgICB0aGlzLl9zdXBlcihpbmRleCwgbWF0ZXJpYWwpO1xuICAgICAgICB0aGlzLl9tYXRlcmlhbENhY2hlID0ge307XG4gICAgfSxcbiAgICBfdXBkYXRlVXNlVGludDogZnVuY3Rpb24gX3VwZGF0ZVVzZVRpbnQoKSB7XG4gICAgICAgIHZhciBiYXNlTWF0ZXJpYWwgPSB0aGlzLmdldE1hdGVyaWFsKDApO1xuICAgICAgICB2YXIgdXNlVGludCA9IHRoaXMudXNlVGludCB8fCB0aGlzLmlzQW5pbWF0aW9uQ2FjaGVkKCk7XG4gICAgICAgIGlmIChiYXNlTWF0ZXJpYWwpIHtcbiAgICAgICAgICAgIGJhc2VNYXRlcmlhbC5kZWZpbmUoJ1VTRV9USU5UJywgdXNlVGludCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhY2hlID0gdGhpcy5fbWF0ZXJpYWxDYWNoZTtcbiAgICAgICAgZm9yICh2YXIgbUtleSBpbiBjYWNoZSkge1xuICAgICAgICAgICAgdmFyIG1hdGVyaWFsID0gY2FjaGVbbUtleV07XG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwpIHtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5kZWZpbmUoJ1VTRV9USU5UJywgdXNlVGludCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIF91cGRhdGVCYXRjaDogZnVuY3Rpb24gX3VwZGF0ZUJhdGNoKCkge1xuICAgICAgICB2YXIgYmFzZU1hdGVyaWFsID0gdGhpcy5nZXRNYXRlcmlhbCgwKTtcbiAgICAgICAgaWYgKGJhc2VNYXRlcmlhbCkge1xuICAgICAgICAgICAgYmFzZU1hdGVyaWFsLmRlZmluZSgnQ0NfVVNFX01PREVMJywgIXRoaXMuZW5hYmxlQmF0Y2gpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjYWNoZSA9IHRoaXMuX21hdGVyaWFsQ2FjaGU7XG4gICAgICAgIGZvciAodmFyIG1LZXkgaW4gY2FjaGUpIHtcbiAgICAgICAgICAgIHZhciBtYXRlcmlhbCA9IGNhY2hlW21LZXldO1xuICAgICAgICAgICAgaWYgKG1hdGVyaWFsKSB7XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwuZGVmaW5lKCdDQ19VU0VfTU9ERUwnLCAhdGhpcy5lbmFibGVCYXRjaCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogU2V0cyBydW50aW1lIHNrZWxldG9uIGRhdGEgdG8gc3AuU2tlbGV0b24uPGJyPlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGRpZmZlcmVudCBmcm9tIHRoZSBgc2tlbGV0b25EYXRhYCBwcm9wZXJ0eS4gVGhpcyBtZXRob2QgaXMgcGFzc2VkIGluIHRoZSByYXcgZGF0YSBwcm92aWRlZCBieSB0aGUgU3BpbmUgcnVudGltZSwgYW5kIHRoZSBza2VsZXRvbkRhdGEgdHlwZSBpcyB0aGUgYXNzZXQgdHlwZSBwcm92aWRlZCBieSBDcmVhdG9yLlxuICAgICAqICEjemhcbiAgICAgKiDorr7nva7lupXlsYLov5DooYzml7bnlKjliLDnmoQgU2tlbGV0b25EYXRh44CCPGJyPlxuICAgICAqIOi/meS4quaOpeWPo+acieWIq+S6jiBgc2tlbGV0b25EYXRhYCDlsZ7mgKfvvIzov5nkuKrmjqXlj6PkvKDlhaXnmoTmmK8gU3BpbmUgcnVudGltZSDmj5DkvpvnmoTljp/lp4vmlbDmja7vvIzogIwgc2tlbGV0b25EYXRhIOeahOexu+Wei+aYryBDcmVhdG9yIOaPkOS+m+eahOi1hOa6kOexu+Wei+OAglxuICAgICAqIEBtZXRob2Qgc2V0U2tlbGV0b25EYXRhXG4gICAgICogQHBhcmFtIHtzcC5zcGluZS5Ta2VsZXRvbkRhdGF9IHNrZWxldG9uRGF0YVxuICAgICAqL1xuICAgIHNldFNrZWxldG9uRGF0YTogZnVuY3Rpb24gc2V0U2tlbGV0b25EYXRhKHNrZWxldG9uRGF0YSkge1xuICAgICAgICBpZiAoc2tlbGV0b25EYXRhLndpZHRoICE9IG51bGwgJiYgc2tlbGV0b25EYXRhLmhlaWdodCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLm5vZGUuc2V0Q29udGVudFNpemUoc2tlbGV0b25EYXRhLndpZHRoLCBza2VsZXRvbkRhdGEuaGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghQ0NfRURJVE9SKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2FjaGVNb2RlID09PSBBbmltYXRpb25DYWNoZU1vZGUuU0hBUkVEX0NBQ0hFKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2tlbGV0b25DYWNoZSA9IFNrZWxldG9uQ2FjaGUuc2hhcmVkQ2FjaGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2NhY2hlTW9kZSA9PT0gQW5pbWF0aW9uQ2FjaGVNb2RlLlBSSVZBVEVfQ0FDSEUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9za2VsZXRvbkNhY2hlID0gbmV3IFNrZWxldG9uQ2FjaGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmlzQW5pbWF0aW9uQ2FjaGVkKCkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRlYnVnQm9uZXMgfHwgdGhpcy5kZWJ1Z1Nsb3RzKSB7XG4gICAgICAgICAgICAgICAgY2Mud2FybihcIkRlYnVnIGJvbmVzIG9yIHNsb3RzIGlzIGludmFsaWQgaW4gY2FjaGVkIG1vZGVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc2tlbGV0b25JbmZvID0gdGhpcy5fc2tlbGV0b25DYWNoZS5nZXRTa2VsZXRvbkNhY2hlKHRoaXMuc2tlbGV0b25EYXRhLl91dWlkLCBza2VsZXRvbkRhdGEpO1xuICAgICAgICAgICAgdGhpcy5fc2tlbGV0b24gPSBza2VsZXRvbkluZm8uc2tlbGV0b247XG4gICAgICAgICAgICB0aGlzLl9jbGlwcGVyID0gc2tlbGV0b25JbmZvLmNsaXBwZXI7XG4gICAgICAgICAgICB0aGlzLl9yb290Qm9uZSA9IHRoaXMuX3NrZWxldG9uLmdldFJvb3RCb25lKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9za2VsZXRvbiA9IG5ldyBzcGluZS5Ta2VsZXRvbihza2VsZXRvbkRhdGEpO1xuICAgICAgICAgICAgdGhpcy5fY2xpcHBlciA9IG5ldyBzcGluZS5Ta2VsZXRvbkNsaXBwaW5nKCk7XG4gICAgICAgICAgICB0aGlzLl9yb290Qm9uZSA9IHRoaXMuX3NrZWxldG9uLmdldFJvb3RCb25lKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9hY3RpdmF0ZU1hdGVyaWFsKCk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogISNlbiBTZXRzIHNsb3RzIHZpc2libGUgcmFuZ2UuXG4gICAgICogISN6aCDorr7nva7pqqjpqrzmj5Lmp73lj6/op4bojIPlm7TjgIJcbiAgICAgKiBAbWV0aG9kIHNldFNsb3RzUmFuZ2VcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc3RhcnRTbG90SW5kZXhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZW5kU2xvdEluZGV4XG4gICAgICovXG4gICAgc2V0U2xvdHNSYW5nZTogZnVuY3Rpb24gc2V0U2xvdHNSYW5nZShzdGFydFNsb3RJbmRleCwgZW5kU2xvdEluZGV4KSB7XG4gICAgICAgIGlmICh0aGlzLmlzQW5pbWF0aW9uQ2FjaGVkKCkpIHtcbiAgICAgICAgICAgIGNjLndhcm4oXCJTbG90cyB2aXNpYmxlIHJhbmdlIGNhbiBub3QgYmUgbW9kaWZpZWQgaW4gY2FjaGVkIG1vZGUuXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc3RhcnRTbG90SW5kZXggPSBzdGFydFNsb3RJbmRleDtcbiAgICAgICAgICAgIHRoaXMuX2VuZFNsb3RJbmRleCA9IGVuZFNsb3RJbmRleDtcbiAgICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqICEjZW4gU2V0cyBhbmltYXRpb24gc3RhdGUgZGF0YS48YnI+XG4gICAgICogVGhlIHBhcmFtZXRlciB0eXBlIGlzIHt7I2Nyb3NzTGlua01vZHVsZSBcInNwLnNwaW5lXCJ9fXNwLnNwaW5le3svY3Jvc3NMaW5rTW9kdWxlfX0uQW5pbWF0aW9uU3RhdGVEYXRhLlxuICAgICAqICEjemgg6K6+572u5Yqo55S754q25oCB5pWw5o2u44CCPGJyPlxuICAgICAqIOWPguaVsOaYryB7eyNjcm9zc0xpbmtNb2R1bGUgXCJzcC5zcGluZVwifX1zcC5zcGluZXt7L2Nyb3NzTGlua01vZHVsZX19LkFuaW1hdGlvblN0YXRlRGF0YeOAglxuICAgICAqIEBtZXRob2Qgc2V0QW5pbWF0aW9uU3RhdGVEYXRhXG4gICAgICogQHBhcmFtIHtzcC5zcGluZS5BbmltYXRpb25TdGF0ZURhdGF9IHN0YXRlRGF0YVxuICAgICAqL1xuICAgIHNldEFuaW1hdGlvblN0YXRlRGF0YTogZnVuY3Rpb24gc2V0QW5pbWF0aW9uU3RhdGVEYXRhKHN0YXRlRGF0YSkge1xuICAgICAgICBpZiAodGhpcy5pc0FuaW1hdGlvbkNhY2hlZCgpKSB7XG4gICAgICAgICAgICBjYy53YXJuKFwiJ3NldEFuaW1hdGlvblN0YXRlRGF0YScgaW50ZXJmYWNlIGNhbiBub3QgYmUgaW52b2tlZCBpbiBjYWNoZWQgbW9kZS5cIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgc3RhdGUgPSBuZXcgc3BpbmUuQW5pbWF0aW9uU3RhdGUoc3RhdGVEYXRhKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9saXN0ZW5lcikge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZS5yZW1vdmVMaXN0ZW5lcih0aGlzLl9saXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0YXRlLmFkZExpc3RlbmVyKHRoaXMuX2xpc3RlbmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gc3RhdGU7XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvLyBJTVBMRU1FTlRcbiAgICBfX3ByZWxvYWQ6IGZ1bmN0aW9uIF9fcHJlbG9hZCgpIHtcbiAgICAgICAgaWYgKENDX0VESVRPUikge1xuICAgICAgICAgICAgdmFyIEZsYWdzID0gY2MuT2JqZWN0LkZsYWdzO1xuICAgICAgICAgICAgdGhpcy5fb2JqRmxhZ3MgfD0gRmxhZ3MuSXNBbmNob3JMb2NrZWQgfCBGbGFncy5Jc1NpemVMb2NrZWQ7XG5cbiAgICAgICAgICAgIHRoaXMuX3JlZnJlc2hJbnNwZWN0b3IoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMubm9kZS5jaGlsZHJlbjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgaWYgKGNoaWxkICYmIGNoaWxkLl9uYW1lID09PSBcIkRFQlVHX0RSQVdfTk9ERVwiKSB7XG4gICAgICAgICAgICAgICAgY2hpbGQuZGVzdHJveSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcmVzZXRBc3NlbWJsZXIoKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlU2tlbGV0b25EYXRhKCk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZURlYnVnRHJhdygpO1xuICAgICAgICB0aGlzLl91cGRhdGVVc2VUaW50KCk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUJhdGNoKCk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIEl0J3MgYmVzdCB0byBzZXQgY2FjaGUgbW9kZSBiZWZvcmUgc2V0IHByb3BlcnR5ICdkcmFnb25Bc3NldCcsIG9yIHdpbGwgd2FzdGUgc29tZSBjcHUgdGltZS5cbiAgICAgKiBJZiBzZXQgdGhlIG1vZGUgaW4gZWRpdG9yLCB0aGVuIG5vIG5lZWQgdG8gd29ycnkgYWJvdXQgb3JkZXIgcHJvYmxlbS5cbiAgICAgKiAhI3poIFxuICAgICAqIOiLpeaDs+WIh+aNoua4suafk+aooeW8j++8jOacgOWlveWcqOiuvue9ridkcmFnb25Bc3NldCfkuYvliY3vvIzlhYjorr7nva7lpb3muLLmn5PmqKHlvI/vvIzlkKbliJnmnInov5DooYzml7blvIDplIDjgIJcbiAgICAgKiDoi6XlnKjnvJbovpHkuK3orr7nva7muLLmn5PmqKHlvI/vvIzliJnml6DpnIDmi4Xlv4Porr7nva7mrKHluo/nmoTpl67popjjgIJcbiAgICAgKiBcbiAgICAgKiBAbWV0aG9kIHNldEFuaW1hdGlvbkNhY2hlTW9kZVxuICAgICAqIEBwYXJhbSB7QW5pbWF0aW9uQ2FjaGVNb2RlfSBjYWNoZU1vZGVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHNrZWxldG9uLnNldEFuaW1hdGlvbkNhY2hlTW9kZShzcC5Ta2VsZXRvbi5BbmltYXRpb25DYWNoZU1vZGUuU0hBUkVEX0NBQ0hFKTtcbiAgICAgKi9cbiAgICBzZXRBbmltYXRpb25DYWNoZU1vZGU6IGZ1bmN0aW9uIHNldEFuaW1hdGlvbkNhY2hlTW9kZShjYWNoZU1vZGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByZUNhY2hlTW9kZSAhPT0gY2FjaGVNb2RlKSB7XG4gICAgICAgICAgICB0aGlzLl9jYWNoZU1vZGUgPSBjYWNoZU1vZGU7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVTa2VsZXRvbkRhdGEoKTtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVVzZVRpbnQoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqICEjZW4gV2hldGhlciBpbiBjYWNoZWQgbW9kZS5cbiAgICAgKiAhI3poIOW9k+WJjeaYr+WQpuWkhOS6jue8k+WtmOaooeW8j+OAglxuICAgICAqIEBtZXRob2QgaXNBbmltYXRpb25DYWNoZWRcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGlzQW5pbWF0aW9uQ2FjaGVkOiBmdW5jdGlvbiBpc0FuaW1hdGlvbkNhY2hlZCgpIHtcbiAgICAgICAgaWYgKENDX0VESVRPUikgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVNb2RlICE9PSBBbmltYXRpb25DYWNoZU1vZGUuUkVBTFRJTUU7XG4gICAgfSxcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShkdCkge1xuICAgICAgICBpZiAoQ0NfRURJVE9SKSByZXR1cm47XG4gICAgICAgIGlmICh0aGlzLnBhdXNlZCkgcmV0dXJuO1xuXG4gICAgICAgIGR0ICo9IHRoaXMudGltZVNjYWxlICogc3AudGltZVNjYWxlO1xuXG4gICAgICAgIGlmICh0aGlzLmlzQW5pbWF0aW9uQ2FjaGVkKCkpIHtcblxuICAgICAgICAgICAgLy8gQ2FjaGUgbW9kZSBhbmQgaGFzIGFuaW1hdGlvbiBxdWV1ZS5cbiAgICAgICAgICAgIGlmICh0aGlzLl9pc0FuaUNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2FuaW1hdGlvblF1ZXVlLmxlbmd0aCA9PT0gMCAmJiAhdGhpcy5faGVhZEFuaUluZm8pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZyYW1lQ2FjaGUgPSB0aGlzLl9mcmFtZUNhY2hlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZnJhbWVDYWNoZSAmJiBmcmFtZUNhY2hlLmlzSW52YWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZUNhY2hlLnVwZGF0ZVRvRnJhbWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmcmFtZXMgPSBmcmFtZUNhY2hlLmZyYW1lcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1ckZyYW1lID0gZnJhbWVzW2ZyYW1lcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5faGVhZEFuaUluZm8pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGVhZEFuaUluZm8gPSB0aGlzLl9hbmltYXRpb25RdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9hY2NUaW1lICs9IGR0O1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hY2NUaW1lID4gdGhpcy5faGVhZEFuaUluZm8uZGVsYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFuaUluZm8gPSB0aGlzLl9oZWFkQW5pSW5mbztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGVhZEFuaUluZm8gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEFuaW1hdGlvbigwLCBhbmlJbmZvLmFuaW1hdGlvbk5hbWUsIGFuaUluZm8ubG9vcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlQ2FjaGUoZHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlUmVhbHRpbWUoZHQpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBfZW1pdENhY2hlQ29tcGxldGVFdmVudDogZnVuY3Rpb24gX2VtaXRDYWNoZUNvbXBsZXRlRXZlbnQoKSB7XG4gICAgICAgIGlmICghdGhpcy5fbGlzdGVuZXIpIHJldHVybjtcbiAgICAgICAgdGhpcy5fZW5kRW50cnkuYW5pbWF0aW9uLm5hbWUgPSB0aGlzLl9hbmltYXRpb25OYW1lO1xuICAgICAgICB0aGlzLl9saXN0ZW5lci5jb21wbGV0ZSAmJiB0aGlzLl9saXN0ZW5lci5jb21wbGV0ZSh0aGlzLl9lbmRFbnRyeSk7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyLmVuZCAmJiB0aGlzLl9saXN0ZW5lci5lbmQodGhpcy5fZW5kRW50cnkpO1xuICAgIH0sXG4gICAgX3VwZGF0ZUNhY2hlOiBmdW5jdGlvbiBfdXBkYXRlQ2FjaGUoZHQpIHtcbiAgICAgICAgdmFyIGZyYW1lQ2FjaGUgPSB0aGlzLl9mcmFtZUNhY2hlO1xuICAgICAgICBpZiAoIWZyYW1lQ2FjaGUuaXNJbml0ZWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmcmFtZXMgPSBmcmFtZUNhY2hlLmZyYW1lcztcbiAgICAgICAgdmFyIGZyYW1lVGltZSA9IFNrZWxldG9uQ2FjaGUuRnJhbWVUaW1lO1xuXG4gICAgICAgIC8vIEFuaW1hdGlvbiBTdGFydCwgdGhlIGV2ZW50IGRpZmZyZW50IGZyb20gZHJhZ29uYm9uZXMgaW5uZXIgZXZlbnQsXG4gICAgICAgIC8vIEl0IGhhcyBubyBldmVudCBvYmplY3QuXG4gICAgICAgIGlmICh0aGlzLl9hY2NUaW1lID09IDAgJiYgdGhpcy5fcGxheUNvdW50ID09IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0RW50cnkuYW5pbWF0aW9uLm5hbWUgPSB0aGlzLl9hbmltYXRpb25OYW1lO1xuICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXIgJiYgdGhpcy5fbGlzdGVuZXIuc3RhcnQgJiYgdGhpcy5fbGlzdGVuZXIuc3RhcnQodGhpcy5fc3RhcnRFbnRyeSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9hY2NUaW1lICs9IGR0O1xuICAgICAgICB2YXIgZnJhbWVJZHggPSBNYXRoLmZsb29yKHRoaXMuX2FjY1RpbWUgLyBmcmFtZVRpbWUpO1xuICAgICAgICBpZiAoIWZyYW1lQ2FjaGUuaXNDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgIGZyYW1lQ2FjaGUudXBkYXRlVG9GcmFtZShmcmFtZUlkeCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZnJhbWVDYWNoZS5pc0NvbXBsZXRlZCAmJiBmcmFtZUlkeCA+PSBmcmFtZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLl9wbGF5Q291bnQrKztcbiAgICAgICAgICAgIGlmICh0aGlzLl9wbGF5VGltZXMgPiAwICYmIHRoaXMuX3BsYXlDb3VudCA+PSB0aGlzLl9wbGF5VGltZXMpIHtcbiAgICAgICAgICAgICAgICAvLyBzZXQgZnJhbWUgdG8gZW5kIGZyYW1lLlxuICAgICAgICAgICAgICAgIHRoaXMuX2N1ckZyYW1lID0gZnJhbWVzW2ZyYW1lcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICB0aGlzLl9hY2NUaW1lID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLl9wbGF5Q291bnQgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuX2lzQW5pQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXRDYWNoZUNvbXBsZXRlRXZlbnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9hY2NUaW1lID0gMDtcbiAgICAgICAgICAgIGZyYW1lSWR4ID0gMDtcbiAgICAgICAgICAgIHRoaXMuX2VtaXRDYWNoZUNvbXBsZXRlRXZlbnQoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jdXJGcmFtZSA9IGZyYW1lc1tmcmFtZUlkeF07XG4gICAgfSxcbiAgICBfdXBkYXRlUmVhbHRpbWU6IGZ1bmN0aW9uIF91cGRhdGVSZWFsdGltZShkdCkge1xuICAgICAgICB2YXIgc2tlbGV0b24gPSB0aGlzLl9za2VsZXRvbjtcbiAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5fc3RhdGU7XG4gICAgICAgIGlmIChza2VsZXRvbikge1xuICAgICAgICAgICAgc2tlbGV0b24udXBkYXRlKGR0KTtcbiAgICAgICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgICAgICAgIHN0YXRlLnVwZGF0ZShkdCk7XG4gICAgICAgICAgICAgICAgc3RhdGUuYXBwbHkoc2tlbGV0b24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBfYWN0aXZhdGVNYXRlcmlhbDogZnVuY3Rpb24gX2FjdGl2YXRlTWF0ZXJpYWwoKSB7XG4gICAgICAgIGlmICghdGhpcy5za2VsZXRvbkRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZVJlbmRlcigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5za2VsZXRvbkRhdGEuZW5zdXJlVGV4dHVyZXNMb2FkZWQoZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc2FibGVSZW5kZXIoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBtYXRlcmlhbCA9IHRoaXMuc2hhcmVkTWF0ZXJpYWxzWzBdO1xuICAgICAgICAgICAgaWYgKCFtYXRlcmlhbCkge1xuICAgICAgICAgICAgICAgIG1hdGVyaWFsID0gTWF0ZXJpYWwuZ2V0SW5zdGFudGlhdGVkQnVpbHRpbk1hdGVyaWFsKCcyZC1zcGluZScsIHRoaXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbCA9IE1hdGVyaWFsLmdldEluc3RhbnRpYXRlZE1hdGVyaWFsKG1hdGVyaWFsLCB0aGlzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWF0ZXJpYWwuZGVmaW5lKCdDQ19VU0VfTU9ERUwnLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuX3ByZXBhcmVUb1JlbmRlcihtYXRlcmlhbCk7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgIH0sXG4gICAgX3ByZXBhcmVUb1JlbmRlcjogZnVuY3Rpb24gX3ByZXBhcmVUb1JlbmRlcihtYXRlcmlhbCkge1xuICAgICAgICB0aGlzLnNldE1hdGVyaWFsKDAsIG1hdGVyaWFsKTtcbiAgICAgICAgLy8gb25seSB3aGVuIGNvbXBvbmVudCdzIG9uRW5hYmxlIGZ1bmN0aW9uIGhhcyBiZWVuIGludm9rZSwgbmVlZCB0byBlbmFibGUgcmVuZGVyXG4gICAgICAgIGlmICh0aGlzLm5vZGUgJiYgdGhpcy5ub2RlLl9yZW5kZXJDb21wb25lbnQgPT0gdGhpcykge1xuICAgICAgICAgICAgdGhpcy5tYXJrRm9yUmVuZGVyKHRydWUpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBvbkVuYWJsZTogZnVuY3Rpb24gb25FbmFibGUoKSB7XG4gICAgICAgIHRoaXMuX3N1cGVyKCk7XG4gICAgICAgIHRoaXMuX2FjdGl2YXRlTWF0ZXJpYWwoKTtcbiAgICB9LFxuICAgIG9uUmVzdG9yZTogZnVuY3Rpb24gb25SZXN0b3JlKCkge1xuICAgICAgICAvLyBEZXN0cm95ZWQgYW5kIHJlc3RvcmVkIGluIEVkaXRvclxuICAgICAgICB0aGlzLl9ib3VuZGluZ0JveCA9IGNjLnJlY3QoKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFNldHMgdmVydGV4IGVmZmVjdCBkZWxlZ2F0ZS5cbiAgICAgKiAhI3poIOiuvue9rumhtueCueWKqOeUu+S7o+eQhlxuICAgICAqIEBtZXRob2Qgc2V0VmVydGV4RWZmZWN0RGVsZWdhdGVcbiAgICAgKiBAcGFyYW0ge3NwLlZlcnRleEVmZmVjdERlbGVnYXRlfSBlZmZlY3REZWxlZ2F0ZVxuICAgICAqL1xuICAgIHNldFZlcnRleEVmZmVjdERlbGVnYXRlOiBmdW5jdGlvbiBzZXRWZXJ0ZXhFZmZlY3REZWxlZ2F0ZShlZmZlY3REZWxlZ2F0ZSkge1xuICAgICAgICB0aGlzLl9lZmZlY3REZWxlZ2F0ZSA9IGVmZmVjdERlbGVnYXRlO1xuICAgIH0sXG5cblxuICAgIC8vIFJFTkRFUkVSXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIENvbXB1dGVzIHRoZSB3b3JsZCBTUlQgZnJvbSB0aGUgbG9jYWwgU1JUIGZvciBlYWNoIGJvbmUuXG4gICAgICogISN6aCDph43mlrDmm7TmlrDmiYDmnInpqqjpqrznmoTkuJbnlYwgVHJhbnNmb3Jt77yMXG4gICAgICog5b2T6I635Y+WIGJvbmUg55qE5pWw5YC85pyq5pu05paw5pe277yM5Y2z5Y+v5L2/55So6K+l5Ye95pWw6L+b6KGM5pu05paw5pWw5YC844CCXG4gICAgICogQG1ldGhvZCB1cGRhdGVXb3JsZFRyYW5zZm9ybVxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIGJvbmUgPSBzcGluZS5maW5kQm9uZSgnaGVhZCcpO1xuICAgICAqIGNjLmxvZyhib25lLndvcmxkWCk7IC8vIHJldHVybiAwO1xuICAgICAqIHNwaW5lLnVwZGF0ZVdvcmxkVHJhbnNmb3JtKCk7XG4gICAgICogYm9uZSA9IHNwaW5lLmZpbmRCb25lKCdoZWFkJyk7XG4gICAgICogY2MubG9nKGJvbmUud29ybGRYKTsgLy8gcmV0dXJuIC0yMy4xMjtcbiAgICAgKi9cbiAgICB1cGRhdGVXb3JsZFRyYW5zZm9ybTogZnVuY3Rpb24gdXBkYXRlV29ybGRUcmFuc2Zvcm0oKSB7XG4gICAgICAgIGlmICghdGhpcy5pc0FuaW1hdGlvbkNhY2hlZCgpKSByZXR1cm47XG5cbiAgICAgICAgaWYgKHRoaXMuX3NrZWxldG9uKSB7XG4gICAgICAgICAgICB0aGlzLl9za2VsZXRvbi51cGRhdGVXb3JsZFRyYW5zZm9ybSgpO1xuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogISNlbiBTZXRzIHRoZSBib25lcyBhbmQgc2xvdHMgdG8gdGhlIHNldHVwIHBvc2UuXG4gICAgICogISN6aCDov5jljp/liLDotbflp4vliqjkvZxcbiAgICAgKiBAbWV0aG9kIHNldFRvU2V0dXBQb3NlXG4gICAgICovXG4gICAgc2V0VG9TZXR1cFBvc2U6IGZ1bmN0aW9uIHNldFRvU2V0dXBQb3NlKCkge1xuICAgICAgICBpZiAodGhpcy5fc2tlbGV0b24pIHtcbiAgICAgICAgICAgIHRoaXMuX3NrZWxldG9uLnNldFRvU2V0dXBQb3NlKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogU2V0cyB0aGUgYm9uZXMgdG8gdGhlIHNldHVwIHBvc2UsXG4gICAgICogdXNpbmcgdGhlIHZhbHVlcyBmcm9tIHRoZSBgQm9uZURhdGFgIGxpc3QgaW4gdGhlIGBTa2VsZXRvbkRhdGFgLlxuICAgICAqICEjemhcbiAgICAgKiDorr7nva4gYm9uZSDliLDotbflp4vliqjkvZxcbiAgICAgKiDkvb/nlKggU2tlbGV0b25EYXRhIOS4reeahCBCb25lRGF0YSDliJfooajkuK3nmoTlgLzjgIJcbiAgICAgKiBAbWV0aG9kIHNldEJvbmVzVG9TZXR1cFBvc2VcbiAgICAgKi9cbiAgICBzZXRCb25lc1RvU2V0dXBQb3NlOiBmdW5jdGlvbiBzZXRCb25lc1RvU2V0dXBQb3NlKCkge1xuICAgICAgICBpZiAodGhpcy5fc2tlbGV0b24pIHtcbiAgICAgICAgICAgIHRoaXMuX3NrZWxldG9uLnNldEJvbmVzVG9TZXR1cFBvc2UoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBTZXRzIHRoZSBzbG90cyB0byB0aGUgc2V0dXAgcG9zZSxcbiAgICAgKiB1c2luZyB0aGUgdmFsdWVzIGZyb20gdGhlIGBTbG90RGF0YWAgbGlzdCBpbiB0aGUgYFNrZWxldG9uRGF0YWAuXG4gICAgICogISN6aFxuICAgICAqIOiuvue9riBzbG90IOWIsOi1t+Wni+WKqOS9nOOAglxuICAgICAqIOS9v+eUqCBTa2VsZXRvbkRhdGEg5Lit55qEIFNsb3REYXRhIOWIl+ihqOS4reeahOWAvOOAglxuICAgICAqIEBtZXRob2Qgc2V0U2xvdHNUb1NldHVwUG9zZVxuICAgICAqL1xuICAgIHNldFNsb3RzVG9TZXR1cFBvc2U6IGZ1bmN0aW9uIHNldFNsb3RzVG9TZXR1cFBvc2UoKSB7XG4gICAgICAgIGlmICh0aGlzLl9za2VsZXRvbikge1xuICAgICAgICAgICAgdGhpcy5fc2tlbGV0b24uc2V0U2xvdHNUb1NldHVwUG9zZSgpO1xuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIFVwZGF0aW5nIGFuIGFuaW1hdGlvbiBjYWNoZSB0byBjYWxjdWxhdGUgYWxsIGZyYW1lIGRhdGEgaW4gdGhlIGFuaW1hdGlvbiBpcyBhIGNvc3QgaW4gXG4gICAgICogcGVyZm9ybWFuY2UgZHVlIHRvIGNhbGN1bGF0aW5nIGFsbCBkYXRhIGluIGEgc2luZ2xlIGZyYW1lLlxuICAgICAqIFRvIHVwZGF0ZSB0aGUgY2FjaGUsIHVzZSB0aGUgaW52YWxpZEFuaW1hdGlvbkNhY2hlIG1ldGhvZCB3aXRoIGhpZ2ggcGVyZm9ybWFuY2UuXG4gICAgICogISN6aFxuICAgICAqIOabtOaWsOafkOS4quWKqOeUu+e8k+WtmCwg6aKE6K6h566X5Yqo55S75Lit5omA5pyJ5bin5pWw5o2u77yM55Sx5LqO5Zyo5Y2V5bin6K6h566X5omA5pyJ5pWw5o2u77yM5omA5Lul6L6D5raI6ICX5oCn6IO944CCXG4gICAgICog6Iul5oOz5pu05paw57yT5a2Y77yM5Y+v5L2/55SoIGludmFsaWRBbmltYXRpb25DYWNoZSDmlrnms5XvvIzlhbfmnInovoPpq5jmgKfog73jgIJcbiAgICAgKiBAbWV0aG9kIHVwZGF0ZUFuaW1hdGlvbkNhY2hlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGFuaW1OYW1lXG4gICAgICovXG4gICAgdXBkYXRlQW5pbWF0aW9uQ2FjaGU6IGZ1bmN0aW9uIHVwZGF0ZUFuaW1hdGlvbkNhY2hlKGFuaW1OYW1lKSB7XG4gICAgICAgIGlmICghdGhpcy5pc0FuaW1hdGlvbkNhY2hlZCgpKSByZXR1cm47XG4gICAgICAgIHZhciB1dWlkID0gdGhpcy5za2VsZXRvbkRhdGEuX3V1aWQ7XG4gICAgICAgIGlmICh0aGlzLl9za2VsZXRvbkNhY2hlKSB7XG4gICAgICAgICAgICB0aGlzLl9za2VsZXRvbkNhY2hlLnVwZGF0ZUFuaW1hdGlvbkNhY2hlKHV1aWQsIGFuaW1OYW1lKTtcbiAgICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBJbnZhbGlkYXRlcyB0aGUgYW5pbWF0aW9uIGNhY2hlLCB3aGljaCBpcyB0aGVuIHJlY29tcHV0ZWQgb24gZWFjaCBmcmFtZS4uXG4gICAgICogISN6aFxuICAgICAqIOS9v+WKqOeUu+e8k+WtmOWkseaViO+8jOS5i+WQjuS8muWcqOavj+W4p+mHjeaWsOiuoeeul+OAglxuICAgICAqIEBtZXRob2QgaW52YWxpZEFuaW1hdGlvbkNhY2hlXG4gICAgICovXG4gICAgaW52YWxpZEFuaW1hdGlvbkNhY2hlOiBmdW5jdGlvbiBpbnZhbGlkQW5pbWF0aW9uQ2FjaGUoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc0FuaW1hdGlvbkNhY2hlZCgpKSByZXR1cm47XG4gICAgICAgIGlmICh0aGlzLl9za2VsZXRvbkNhY2hlKSB7XG4gICAgICAgICAgICB0aGlzLl9za2VsZXRvbkNhY2hlLmludmFsaWRBbmltYXRpb25DYWNoZSh0aGlzLnNrZWxldG9uRGF0YS5fdXVpZCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogRmluZHMgYSBib25lIGJ5IG5hbWUuXG4gICAgICogVGhpcyBkb2VzIGEgc3RyaW5nIGNvbXBhcmlzb24gZm9yIGV2ZXJ5IGJvbmUuPGJyPlxuICAgICAqIFJldHVybnMgYSB7eyNjcm9zc0xpbmtNb2R1bGUgXCJzcC5zcGluZVwifX1zcC5zcGluZXt7L2Nyb3NzTGlua01vZHVsZX19LkJvbmUgb2JqZWN0LlxuICAgICAqICEjemhcbiAgICAgKiDpgJrov4flkI3np7Dmn6Xmib4gYm9uZeOAglxuICAgICAqIOi/memHjOWvueavj+S4qiBib25lIOeahOWQjeensOi/m+ihjOS6huWvueavlOOAgjxicj5cbiAgICAgKiDov5Tlm57kuIDkuKoge3sjY3Jvc3NMaW5rTW9kdWxlIFwic3Auc3BpbmVcIn19c3Auc3BpbmV7ey9jcm9zc0xpbmtNb2R1bGV9fS5Cb25lIOWvueixoeOAglxuICAgICAqXG4gICAgICogQG1ldGhvZCBmaW5kQm9uZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBib25lTmFtZVxuICAgICAqIEByZXR1cm4ge3NwLnNwaW5lLkJvbmV9XG4gICAgICovXG4gICAgZmluZEJvbmU6IGZ1bmN0aW9uIGZpbmRCb25lKGJvbmVOYW1lKSB7XG4gICAgICAgIGlmICh0aGlzLl9za2VsZXRvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NrZWxldG9uLmZpbmRCb25lKGJvbmVOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogRmluZHMgYSBzbG90IGJ5IG5hbWUuIFRoaXMgZG9lcyBhIHN0cmluZyBjb21wYXJpc29uIGZvciBldmVyeSBzbG90Ljxicj5cbiAgICAgKiBSZXR1cm5zIGEge3sjY3Jvc3NMaW5rTW9kdWxlIFwic3Auc3BpbmVcIn19c3Auc3BpbmV7ey9jcm9zc0xpbmtNb2R1bGV9fS5TbG90IG9iamVjdC5cbiAgICAgKiAhI3poXG4gICAgICog6YCa6L+H5ZCN56ew5p+l5om+IHNsb3TjgILov5nph4zlr7nmr4/kuKogc2xvdCDnmoTlkI3np7Dov5vooYzkuobmr5TovoPjgII8YnI+XG4gICAgICog6L+U5Zue5LiA5LiqIHt7I2Nyb3NzTGlua01vZHVsZSBcInNwLnNwaW5lXCJ9fXNwLnNwaW5le3svY3Jvc3NMaW5rTW9kdWxlfX0uU2xvdCDlr7nosaHjgIJcbiAgICAgKlxuICAgICAqIEBtZXRob2QgZmluZFNsb3RcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc2xvdE5hbWVcbiAgICAgKiBAcmV0dXJuIHtzcC5zcGluZS5TbG90fVxuICAgICAqL1xuICAgIGZpbmRTbG90OiBmdW5jdGlvbiBmaW5kU2xvdChzbG90TmFtZSkge1xuICAgICAgICBpZiAodGhpcy5fc2tlbGV0b24pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9za2VsZXRvbi5maW5kU2xvdChzbG90TmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIEZpbmRzIGEgc2tpbiBieSBuYW1lIGFuZCBtYWtlcyBpdCB0aGUgYWN0aXZlIHNraW4uXG4gICAgICogVGhpcyBkb2VzIGEgc3RyaW5nIGNvbXBhcmlzb24gZm9yIGV2ZXJ5IHNraW4uPGJyPlxuICAgICAqIE5vdGUgdGhhdCBzZXR0aW5nIHRoZSBza2luIGRvZXMgbm90IGNoYW5nZSB3aGljaCBhdHRhY2htZW50cyBhcmUgdmlzaWJsZS48YnI+XG4gICAgICogUmV0dXJucyBhIHt7I2Nyb3NzTGlua01vZHVsZSBcInNwLnNwaW5lXCJ9fXNwLnNwaW5le3svY3Jvc3NMaW5rTW9kdWxlfX0uU2tpbiBvYmplY3QuXG4gICAgICogISN6aFxuICAgICAqIOaMieWQjeensOafpeaJvuearuiCpO+8jOa/gOa0u+ivpeearuiCpOOAgui/memHjOWvueavj+S4quearuiCpOeahOWQjeensOi/m+ihjOS6huavlOi+g+OAgjxicj5cbiAgICAgKiDms6jmhI/vvJrorr7nva7nmq7ogqTkuI3kvJrmlLnlj5ggYXR0YWNobWVudCDnmoTlj6/op4HmgKfjgII8YnI+XG4gICAgICog6L+U5Zue5LiA5LiqIHt7I2Nyb3NzTGlua01vZHVsZSBcInNwLnNwaW5lXCJ9fXNwLnNwaW5le3svY3Jvc3NMaW5rTW9kdWxlfX0uU2tpbiDlr7nosaHjgIJcbiAgICAgKlxuICAgICAqIEBtZXRob2Qgc2V0U2tpblxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBza2luTmFtZVxuICAgICAqL1xuICAgIHNldFNraW46IGZ1bmN0aW9uIHNldFNraW4oc2tpbk5hbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3NrZWxldG9uKSB7XG4gICAgICAgICAgICB0aGlzLl9za2VsZXRvbi5zZXRTa2luQnlOYW1lKHNraW5OYW1lKTtcbiAgICAgICAgICAgIHRoaXMuX3NrZWxldG9uLnNldFNsb3RzVG9TZXR1cFBvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmludmFsaWRBbmltYXRpb25DYWNoZSgpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBSZXR1cm5zIHRoZSBhdHRhY2htZW50IGZvciB0aGUgc2xvdCBhbmQgYXR0YWNobWVudCBuYW1lLlxuICAgICAqIFRoZSBza2VsZXRvbiBsb29rcyBmaXJzdCBpbiBpdHMgc2tpbiwgdGhlbiBpbiB0aGUgc2tlbGV0b24gZGF0YeKAmXMgZGVmYXVsdCBza2luLjxicj5cbiAgICAgKiBSZXR1cm5zIGEge3sjY3Jvc3NMaW5rTW9kdWxlIFwic3Auc3BpbmVcIn19c3Auc3BpbmV7ey9jcm9zc0xpbmtNb2R1bGV9fS5BdHRhY2htZW50IG9iamVjdC5cbiAgICAgKiAhI3poXG4gICAgICog6YCa6L+HIHNsb3Qg5ZKMIGF0dGFjaG1lbnQg55qE5ZCN56ew6I635Y+WIGF0dGFjaG1lbnTjgIJTa2VsZXRvbiDkvJjlhYjmn6Xmib7lroPnmoTnmq7ogqTvvIznhLblkI7miY3mmK8gU2tlbGV0b24gRGF0YSDkuK3pu5jorqTnmoTnmq7ogqTjgII8YnI+XG4gICAgICog6L+U5Zue5LiA5LiqIHt7I2Nyb3NzTGlua01vZHVsZSBcInNwLnNwaW5lXCJ9fXNwLnNwaW5le3svY3Jvc3NMaW5rTW9kdWxlfX0uQXR0YWNobWVudCDlr7nosaHjgIJcbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0QXR0YWNobWVudFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzbG90TmFtZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBhdHRhY2htZW50TmFtZVxuICAgICAqIEByZXR1cm4ge3NwLnNwaW5lLkF0dGFjaG1lbnR9XG4gICAgICovXG4gICAgZ2V0QXR0YWNobWVudDogZnVuY3Rpb24gZ2V0QXR0YWNobWVudChzbG90TmFtZSwgYXR0YWNobWVudE5hbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3NrZWxldG9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2tlbGV0b24uZ2V0QXR0YWNobWVudEJ5TmFtZShzbG90TmFtZSwgYXR0YWNobWVudE5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBTZXRzIHRoZSBhdHRhY2htZW50IGZvciB0aGUgc2xvdCBhbmQgYXR0YWNobWVudCBuYW1lLlxuICAgICAqIFRoZSBza2VsZXRvbiBsb29rcyBmaXJzdCBpbiBpdHMgc2tpbiwgdGhlbiBpbiB0aGUgc2tlbGV0b24gZGF0YeKAmXMgZGVmYXVsdCBza2luLlxuICAgICAqICEjemhcbiAgICAgKiDpgJrov4cgc2xvdCDlkowgYXR0YWNobWVudCDnmoTlkI3lrZfmnaXorr7nva4gYXR0YWNobWVudOOAglxuICAgICAqIFNrZWxldG9uIOS8mOWFiOafpeaJvuWug+eahOearuiCpO+8jOeEtuWQjuaJjeaYryBTa2VsZXRvbiBEYXRhIOS4rem7mOiupOeahOearuiCpOOAglxuICAgICAqIEBtZXRob2Qgc2V0QXR0YWNobWVudFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzbG90TmFtZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBhdHRhY2htZW50TmFtZVxuICAgICAqL1xuICAgIHNldEF0dGFjaG1lbnQ6IGZ1bmN0aW9uIHNldEF0dGFjaG1lbnQoc2xvdE5hbWUsIGF0dGFjaG1lbnROYW1lKSB7XG4gICAgICAgIGlmICh0aGlzLl9za2VsZXRvbikge1xuICAgICAgICAgICAgdGhpcy5fc2tlbGV0b24uc2V0QXR0YWNobWVudChzbG90TmFtZSwgYXR0YWNobWVudE5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW52YWxpZEFuaW1hdGlvbkNhY2hlKCk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgKiBSZXR1cm4gdGhlIHJlbmRlcmVyIG9mIGF0dGFjaG1lbnQuXG4gICAgKiBAbWV0aG9kIGdldFRleHR1cmVBdGxhc1xuICAgICogQHBhcmFtIHtzcC5zcGluZS5SZWdpb25BdHRhY2htZW50fHNwaW5lLkJvdW5kaW5nQm94QXR0YWNobWVudH0gcmVnaW9uQXR0YWNobWVudFxuICAgICogQHJldHVybiB7c3Auc3BpbmUuVGV4dHVyZUF0bGFzUmVnaW9ufVxuICAgICovXG4gICAgZ2V0VGV4dHVyZUF0bGFzOiBmdW5jdGlvbiBnZXRUZXh0dXJlQXRsYXMocmVnaW9uQXR0YWNobWVudCkge1xuICAgICAgICByZXR1cm4gcmVnaW9uQXR0YWNobWVudC5yZWdpb247XG4gICAgfSxcblxuXG4gICAgLy8gQU5JTUFUSU9OXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIE1peCBhcHBsaWVzIGFsbCBrZXlmcmFtZSB2YWx1ZXMsXG4gICAgICogaW50ZXJwb2xhdGVkIGZvciB0aGUgc3BlY2lmaWVkIHRpbWUgYW5kIG1peGVkIHdpdGggdGhlIGN1cnJlbnQgdmFsdWVzLlxuICAgICAqICEjemgg5Li65omA5pyJ5YWz6ZSu5bin6K6+5a6a5re35ZCI5Y+K5re35ZCI5pe26Ze077yI5LuO5b2T5YmN5YC85byA5aeL5beu5YC877yJ44CCXG4gICAgICogQG1ldGhvZCBzZXRNaXhcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZnJvbUFuaW1hdGlvblxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0b0FuaW1hdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvblxuICAgICAqL1xuICAgIHNldE1peDogZnVuY3Rpb24gc2V0TWl4KGZyb21BbmltYXRpb24sIHRvQW5pbWF0aW9uLCBkdXJhdGlvbikge1xuICAgICAgICBpZiAodGhpcy5fc3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlLmRhdGEuc2V0TWl4KGZyb21BbmltYXRpb24sIHRvQW5pbWF0aW9uLCBkdXJhdGlvbik7XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFNldCB0aGUgY3VycmVudCBhbmltYXRpb24uIEFueSBxdWV1ZWQgYW5pbWF0aW9ucyBhcmUgY2xlYXJlZC48YnI+XG4gICAgICogUmV0dXJucyBhIHt7I2Nyb3NzTGlua01vZHVsZSBcInNwLnNwaW5lXCJ9fXNwLnNwaW5le3svY3Jvc3NMaW5rTW9kdWxlfX0uVHJhY2tFbnRyeSBvYmplY3QuXG4gICAgICogISN6aCDorr7nva7lvZPliY3liqjnlLvjgILpmJ/liJfkuK3nmoTku7vkvZXnmoTliqjnlLvlsIbooqvmuIXpmaTjgII8YnI+XG4gICAgICog6L+U5Zue5LiA5LiqIHt7I2Nyb3NzTGlua01vZHVsZSBcInNwLnNwaW5lXCJ9fXNwLnNwaW5le3svY3Jvc3NMaW5rTW9kdWxlfX0uVHJhY2tFbnRyeSDlr7nosaHjgIJcbiAgICAgKiBAbWV0aG9kIHNldEFuaW1hdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0cmFja0luZGV4XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGxvb3BcbiAgICAgKiBAcmV0dXJuIHtzcC5zcGluZS5UcmFja0VudHJ5fVxuICAgICAqL1xuICAgIHNldEFuaW1hdGlvbjogZnVuY3Rpb24gc2V0QW5pbWF0aW9uKHRyYWNrSW5kZXgsIG5hbWUsIGxvb3ApIHtcblxuICAgICAgICB0aGlzLl9wbGF5VGltZXMgPSBsb29wID8gMCA6IDE7XG4gICAgICAgIHRoaXMuX2FuaW1hdGlvbk5hbWUgPSBuYW1lO1xuXG4gICAgICAgIGlmICh0aGlzLmlzQW5pbWF0aW9uQ2FjaGVkKCkpIHtcbiAgICAgICAgICAgIGlmICh0cmFja0luZGV4ICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgY2Mud2FybihcIlRyYWNrIGluZGV4IGNhbiBub3QgZ3JlYXRlciB0aGFuIDAgaW4gY2FjaGVkIG1vZGUuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLl9za2VsZXRvbkNhY2hlKSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIHZhciBjYWNoZSA9IHRoaXMuX3NrZWxldG9uQ2FjaGUuZ2V0QW5pbWF0aW9uQ2FjaGUodGhpcy5za2VsZXRvbkRhdGEuX3V1aWQsIG5hbWUpO1xuICAgICAgICAgICAgaWYgKCFjYWNoZSkge1xuICAgICAgICAgICAgICAgIGNhY2hlID0gdGhpcy5fc2tlbGV0b25DYWNoZS5pbml0QW5pbWF0aW9uQ2FjaGUodGhpcy5za2VsZXRvbkRhdGEuX3V1aWQsIG5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhY2hlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faXNBbmlDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuX2FjY1RpbWUgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuX3BsYXlDb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVDYWNoZSA9IGNhY2hlO1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lQ2FjaGUudXBkYXRlVG9GcmFtZSgwKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJGcmFtZSA9IHRoaXMuX2ZyYW1lQ2FjaGUuZnJhbWVzWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3NrZWxldG9uKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvbiA9IHRoaXMuX3NrZWxldG9uLmRhdGEuZmluZEFuaW1hdGlvbihuYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAoIWFuaW1hdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBjYy5sb2dJRCg3NTA5LCBuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciByZXMgPSB0aGlzLl9zdGF0ZS5zZXRBbmltYXRpb25XaXRoKHRyYWNrSW5kZXgsIGFuaW1hdGlvbiwgbG9vcCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUuYXBwbHkodGhpcy5fc2tlbGV0b24pO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogISNlbiBBZGRzIGFuIGFuaW1hdGlvbiB0byBiZSBwbGF5ZWQgZGVsYXkgc2Vjb25kcyBhZnRlciB0aGUgY3VycmVudCBvciBsYXN0IHF1ZXVlZCBhbmltYXRpb24uPGJyPlxuICAgICAqIFJldHVybnMgYSB7eyNjcm9zc0xpbmtNb2R1bGUgXCJzcC5zcGluZVwifX1zcC5zcGluZXt7L2Nyb3NzTGlua01vZHVsZX19LlRyYWNrRW50cnkgb2JqZWN0LlxuICAgICAqICEjemgg5re75Yqg5LiA5Liq5Yqo55S75Yiw5Yqo55S76Zif5YiX5bC+6YOo77yM6L+Y5Y+v5Lul5bu26L+f5oyH5a6a55qE56eS5pWw44CCPGJyPlxuICAgICAqIOi/lOWbnuS4gOS4qiB7eyNjcm9zc0xpbmtNb2R1bGUgXCJzcC5zcGluZVwifX1zcC5zcGluZXt7L2Nyb3NzTGlua01vZHVsZX19LlRyYWNrRW50cnkg5a+56LGh44CCXG4gICAgICogQG1ldGhvZCBhZGRBbmltYXRpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdHJhY2tJbmRleFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBsb29wXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtkZWxheT0wXVxuICAgICAqIEByZXR1cm4ge3NwLnNwaW5lLlRyYWNrRW50cnl9XG4gICAgICovXG4gICAgYWRkQW5pbWF0aW9uOiBmdW5jdGlvbiBhZGRBbmltYXRpb24odHJhY2tJbmRleCwgbmFtZSwgbG9vcCwgZGVsYXkpIHtcbiAgICAgICAgZGVsYXkgPSBkZWxheSB8fCAwO1xuICAgICAgICBpZiAodGhpcy5pc0FuaW1hdGlvbkNhY2hlZCgpKSB7XG4gICAgICAgICAgICBpZiAodHJhY2tJbmRleCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGNjLndhcm4oXCJUcmFjayBpbmRleCBjYW4gbm90IGdyZWF0ZXIgdGhhbiAwIGluIGNhY2hlZCBtb2RlLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvblF1ZXVlLnB1c2goeyBhbmltYXRpb25OYW1lOiBuYW1lLCBsb29wOiBsb29wLCBkZWxheTogZGVsYXkgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fc2tlbGV0b24pIHtcbiAgICAgICAgICAgICAgICB2YXIgYW5pbWF0aW9uID0gdGhpcy5fc2tlbGV0b24uZGF0YS5maW5kQW5pbWF0aW9uKG5hbWUpO1xuICAgICAgICAgICAgICAgIGlmICghYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGNjLmxvZ0lEKDc1MTAsIG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlLmFkZEFuaW1hdGlvbldpdGgodHJhY2tJbmRleCwgYW5pbWF0aW9uLCBsb29wLCBkZWxheSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogISNlbiBGaW5kIGFuaW1hdGlvbiB3aXRoIHNwZWNpZmllZCBuYW1lLlxuICAgICAqICEjemgg5p+l5om+5oyH5a6a5ZCN56ew55qE5Yqo55S7XG4gICAgICogQG1ldGhvZCBmaW5kQW5pbWF0aW9uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAgICAgKiBAcmV0dXJucyB7c3Auc3BpbmUuQW5pbWF0aW9ufVxuICAgICAqL1xuICAgIGZpbmRBbmltYXRpb246IGZ1bmN0aW9uIGZpbmRBbmltYXRpb24obmFtZSkge1xuICAgICAgICBpZiAodGhpcy5fc2tlbGV0b24pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9za2VsZXRvbi5kYXRhLmZpbmRBbmltYXRpb24obmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogISNlbiBSZXR1cm5zIHRyYWNrIGVudHJ5IGJ5IHRyYWNrSW5kZXguPGJyPlxuICAgICAqIFJldHVybnMgYSB7eyNjcm9zc0xpbmtNb2R1bGUgXCJzcC5zcGluZVwifX1zcC5zcGluZXt7L2Nyb3NzTGlua01vZHVsZX19LlRyYWNrRW50cnkgb2JqZWN0LlxuICAgICAqICEjemgg6YCa6L+HIHRyYWNrIOe0ouW8leiOt+WPliBUcmFja0VudHJ544CCPGJyPlxuICAgICAqIOi/lOWbnuS4gOS4qiB7eyNjcm9zc0xpbmtNb2R1bGUgXCJzcC5zcGluZVwifX1zcC5zcGluZXt7L2Nyb3NzTGlua01vZHVsZX19LlRyYWNrRW50cnkg5a+56LGh44CCXG4gICAgICogQG1ldGhvZCBnZXRDdXJyZW50XG4gICAgICogQHBhcmFtIHRyYWNrSW5kZXhcbiAgICAgKiBAcmV0dXJuIHtzcC5zcGluZS5UcmFja0VudHJ5fVxuICAgICAqL1xuICAgIGdldEN1cnJlbnQ6IGZ1bmN0aW9uIGdldEN1cnJlbnQodHJhY2tJbmRleCkge1xuICAgICAgICBpZiAodGhpcy5pc0FuaW1hdGlvbkNhY2hlZCgpKSB7XG4gICAgICAgICAgICBjYy53YXJuKFwiJ2dldEN1cnJlbnQnIGludGVyZmFjZSBjYW4gbm90IGJlIGludm9rZWQgaW4gY2FjaGVkIG1vZGUuXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3N0YXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlLmdldEN1cnJlbnQodHJhY2tJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogISNlbiBDbGVhcnMgYWxsIHRyYWNrcyBvZiBhbmltYXRpb24gc3RhdGUuXG4gICAgICogISN6aCDmuIXpmaTmiYDmnIkgdHJhY2sg55qE5Yqo55S754q25oCB44CCXG4gICAgICogQG1ldGhvZCBjbGVhclRyYWNrc1xuICAgICAqL1xuICAgIGNsZWFyVHJhY2tzOiBmdW5jdGlvbiBjbGVhclRyYWNrcygpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNBbmltYXRpb25DYWNoZWQoKSkge1xuICAgICAgICAgICAgY2Mud2FybihcIidjbGVhclRyYWNrcycgaW50ZXJmYWNlIGNhbiBub3QgYmUgaW52b2tlZCBpbiBjYWNoZWQgbW9kZS5cIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fc3RhdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZS5jbGVhclRyYWNrcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogISNlbiBDbGVhcnMgdHJhY2sgb2YgYW5pbWF0aW9uIHN0YXRlIGJ5IHRyYWNrSW5kZXguXG4gICAgICogISN6aCDmuIXpmaTlh7rmjIflrpogdHJhY2sg55qE5Yqo55S754q25oCB44CCXG4gICAgICogQG1ldGhvZCBjbGVhclRyYWNrXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRyYWNrSW5kZXhcbiAgICAgKi9cbiAgICBjbGVhclRyYWNrOiBmdW5jdGlvbiBjbGVhclRyYWNrKHRyYWNrSW5kZXgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNBbmltYXRpb25DYWNoZWQoKSkge1xuICAgICAgICAgICAgY2Mud2FybihcIidjbGVhclRyYWNrJyBpbnRlcmZhY2UgY2FuIG5vdCBiZSBpbnZva2VkIGluIGNhY2hlZCBtb2RlLlwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zdGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlLmNsZWFyVHJhY2sodHJhY2tJbmRleCk7XG4gICAgICAgICAgICAgICAgaWYgKENDX0VESVRPUiAmJiAhY2MuZW5naW5lLmlzUGxheWluZykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZS51cGRhdGUoMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogISNlbiBTZXQgdGhlIHN0YXJ0IGV2ZW50IGxpc3RlbmVyLlxuICAgICAqICEjemgg55So5p2l6K6+572u5byA5aeL5pKt5pS+5Yqo55S755qE5LqL5Lu255uR5ZCs44CCXG4gICAgICogQG1ldGhvZCBzZXRTdGFydExpc3RlbmVyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXJcbiAgICAgKi9cbiAgICBzZXRTdGFydExpc3RlbmVyOiBmdW5jdGlvbiBzZXRTdGFydExpc3RlbmVyKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX2Vuc3VyZUxpc3RlbmVyKCk7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyLnN0YXJ0ID0gbGlzdGVuZXI7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogISNlbiBTZXQgdGhlIGludGVycnVwdCBldmVudCBsaXN0ZW5lci5cbiAgICAgKiAhI3poIOeUqOadpeiuvue9ruWKqOeUu+iiq+aJk+aWreeahOS6i+S7tuebkeWQrOOAglxuICAgICAqIEBtZXRob2Qgc2V0SW50ZXJydXB0TGlzdGVuZXJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lclxuICAgICAqL1xuICAgIHNldEludGVycnVwdExpc3RlbmVyOiBmdW5jdGlvbiBzZXRJbnRlcnJ1cHRMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9lbnN1cmVMaXN0ZW5lcigpO1xuICAgICAgICB0aGlzLl9saXN0ZW5lci5pbnRlcnJ1cHQgPSBsaXN0ZW5lcjtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFNldCB0aGUgZW5kIGV2ZW50IGxpc3RlbmVyLlxuICAgICAqICEjemgg55So5p2l6K6+572u5Yqo55S75pKt5pS+5a6M5ZCO55qE5LqL5Lu255uR5ZCs44CCXG4gICAgICogQG1ldGhvZCBzZXRFbmRMaXN0ZW5lclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyXG4gICAgICovXG4gICAgc2V0RW5kTGlzdGVuZXI6IGZ1bmN0aW9uIHNldEVuZExpc3RlbmVyKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX2Vuc3VyZUxpc3RlbmVyKCk7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyLmVuZCA9IGxpc3RlbmVyO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqICEjZW4gU2V0IHRoZSBkaXNwb3NlIGV2ZW50IGxpc3RlbmVyLlxuICAgICAqICEjemgg55So5p2l6K6+572u5Yqo55S75bCG6KKr6ZSA5q+B55qE5LqL5Lu255uR5ZCs44CCXG4gICAgICogQG1ldGhvZCBzZXREaXNwb3NlTGlzdGVuZXJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lclxuICAgICAqL1xuICAgIHNldERpc3Bvc2VMaXN0ZW5lcjogZnVuY3Rpb24gc2V0RGlzcG9zZUxpc3RlbmVyKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX2Vuc3VyZUxpc3RlbmVyKCk7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyLmRpc3Bvc2UgPSBsaXN0ZW5lcjtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFNldCB0aGUgY29tcGxldGUgZXZlbnQgbGlzdGVuZXIuXG4gICAgICogISN6aCDnlKjmnaXorr7nva7liqjnlLvmkq3mlL7kuIDmrKHlvqrnjq/nu5PmnZ/lkI7nmoTkuovku7bnm5HlkKzjgIJcbiAgICAgKiBAbWV0aG9kIHNldENvbXBsZXRlTGlzdGVuZXJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lclxuICAgICAqL1xuICAgIHNldENvbXBsZXRlTGlzdGVuZXI6IGZ1bmN0aW9uIHNldENvbXBsZXRlTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fZW5zdXJlTGlzdGVuZXIoKTtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXIuY29tcGxldGUgPSBsaXN0ZW5lcjtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFNldCB0aGUgYW5pbWF0aW9uIGV2ZW50IGxpc3RlbmVyLlxuICAgICAqICEjemgg55So5p2l6K6+572u5Yqo55S75pKt5pS+6L+H56iL5Lit5bin5LqL5Lu255qE55uR5ZCs44CCXG4gICAgICogQG1ldGhvZCBzZXRFdmVudExpc3RlbmVyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXJcbiAgICAgKi9cbiAgICBzZXRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiBzZXRFdmVudExpc3RlbmVyKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX2Vuc3VyZUxpc3RlbmVyKCk7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyLmV2ZW50ID0gbGlzdGVuZXI7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogISNlbiBTZXQgdGhlIHN0YXJ0IGV2ZW50IGxpc3RlbmVyIGZvciBzcGVjaWZpZWQgVHJhY2tFbnRyeS5cbiAgICAgKiAhI3poIOeUqOadpeS4uuaMh+WumueahCBUcmFja0VudHJ5IOiuvue9ruWKqOeUu+W8gOWni+aSreaUvueahOS6i+S7tuebkeWQrOOAglxuICAgICAqIEBtZXRob2Qgc2V0VHJhY2tTdGFydExpc3RlbmVyXG4gICAgICogQHBhcmFtIHtzcC5zcGluZS5UcmFja0VudHJ5fSBlbnRyeVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyXG4gICAgICovXG4gICAgc2V0VHJhY2tTdGFydExpc3RlbmVyOiBmdW5jdGlvbiBzZXRUcmFja1N0YXJ0TGlzdGVuZXIoZW50cnksIGxpc3RlbmVyKSB7XG4gICAgICAgIFRyYWNrRW50cnlMaXN0ZW5lcnMuZ2V0TGlzdGVuZXJzKGVudHJ5KS5zdGFydCA9IGxpc3RlbmVyO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqICEjZW4gU2V0IHRoZSBpbnRlcnJ1cHQgZXZlbnQgbGlzdGVuZXIgZm9yIHNwZWNpZmllZCBUcmFja0VudHJ5LlxuICAgICAqICEjemgg55So5p2l5Li65oyH5a6a55qEIFRyYWNrRW50cnkg6K6+572u5Yqo55S76KKr5omT5pat55qE5LqL5Lu255uR5ZCs44CCXG4gICAgICogQG1ldGhvZCBzZXRUcmFja0ludGVycnVwdExpc3RlbmVyXG4gICAgICogQHBhcmFtIHtzcC5zcGluZS5UcmFja0VudHJ5fSBlbnRyeVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyXG4gICAgICovXG4gICAgc2V0VHJhY2tJbnRlcnJ1cHRMaXN0ZW5lcjogZnVuY3Rpb24gc2V0VHJhY2tJbnRlcnJ1cHRMaXN0ZW5lcihlbnRyeSwgbGlzdGVuZXIpIHtcbiAgICAgICAgVHJhY2tFbnRyeUxpc3RlbmVycy5nZXRMaXN0ZW5lcnMoZW50cnkpLmludGVycnVwdCA9IGxpc3RlbmVyO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqICEjZW4gU2V0IHRoZSBlbmQgZXZlbnQgbGlzdGVuZXIgZm9yIHNwZWNpZmllZCBUcmFja0VudHJ5LlxuICAgICAqICEjemgg55So5p2l5Li65oyH5a6a55qEIFRyYWNrRW50cnkg6K6+572u5Yqo55S75pKt5pS+57uT5p2f55qE5LqL5Lu255uR5ZCs44CCXG4gICAgICogQG1ldGhvZCBzZXRUcmFja0VuZExpc3RlbmVyXG4gICAgICogQHBhcmFtIHtzcC5zcGluZS5UcmFja0VudHJ5fSBlbnRyeVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyXG4gICAgICovXG4gICAgc2V0VHJhY2tFbmRMaXN0ZW5lcjogZnVuY3Rpb24gc2V0VHJhY2tFbmRMaXN0ZW5lcihlbnRyeSwgbGlzdGVuZXIpIHtcbiAgICAgICAgVHJhY2tFbnRyeUxpc3RlbmVycy5nZXRMaXN0ZW5lcnMoZW50cnkpLmVuZCA9IGxpc3RlbmVyO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqICEjZW4gU2V0IHRoZSBkaXNwb3NlIGV2ZW50IGxpc3RlbmVyIGZvciBzcGVjaWZpZWQgVHJhY2tFbnRyeS5cbiAgICAgKiAhI3poIOeUqOadpeS4uuaMh+WumueahCBUcmFja0VudHJ5IOiuvue9ruWKqOeUu+WNs+Wwhuiiq+mUgOavgeeahOS6i+S7tuebkeWQrOOAglxuICAgICAqIEBtZXRob2Qgc2V0VHJhY2tEaXNwb3NlTGlzdGVuZXJcbiAgICAgKiBAcGFyYW0ge3NwLnNwaW5lLlRyYWNrRW50cnl9IGVudHJ5XG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXJcbiAgICAgKi9cbiAgICBzZXRUcmFja0Rpc3Bvc2VMaXN0ZW5lcjogZnVuY3Rpb24gc2V0VHJhY2tEaXNwb3NlTGlzdGVuZXIoZW50cnksIGxpc3RlbmVyKSB7XG4gICAgICAgIFRyYWNrRW50cnlMaXN0ZW5lcnMuZ2V0TGlzdGVuZXJzKGVudHJ5KS5kaXNwb3NlID0gbGlzdGVuZXI7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogISNlbiBTZXQgdGhlIGNvbXBsZXRlIGV2ZW50IGxpc3RlbmVyIGZvciBzcGVjaWZpZWQgVHJhY2tFbnRyeS5cbiAgICAgKiAhI3poIOeUqOadpeS4uuaMh+WumueahCBUcmFja0VudHJ5IOiuvue9ruWKqOeUu+S4gOasoeW+queOr+aSreaUvue7k+adn+eahOS6i+S7tuebkeWQrOOAglxuICAgICAqIEBtZXRob2Qgc2V0VHJhY2tDb21wbGV0ZUxpc3RlbmVyXG4gICAgICogQHBhcmFtIHtzcC5zcGluZS5UcmFja0VudHJ5fSBlbnRyeVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyXG4gICAgICogQHBhcmFtIHtzcC5zcGluZS5UcmFja0VudHJ5fSBsaXN0ZW5lci5lbnRyeVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsaXN0ZW5lci5sb29wQ291bnRcbiAgICAgKi9cbiAgICBzZXRUcmFja0NvbXBsZXRlTGlzdGVuZXI6IGZ1bmN0aW9uIHNldFRyYWNrQ29tcGxldGVMaXN0ZW5lcihlbnRyeSwgbGlzdGVuZXIpIHtcbiAgICAgICAgVHJhY2tFbnRyeUxpc3RlbmVycy5nZXRMaXN0ZW5lcnMoZW50cnkpLmNvbXBsZXRlID0gZnVuY3Rpb24gKHRyYWNrRW50cnkpIHtcbiAgICAgICAgICAgIHZhciBsb29wQ291bnQgPSBNYXRoLmZsb29yKHRyYWNrRW50cnkudHJhY2tUaW1lIC8gdHJhY2tFbnRyeS5hbmltYXRpb25FbmQpO1xuICAgICAgICAgICAgbGlzdGVuZXIodHJhY2tFbnRyeSwgbG9vcENvdW50KTtcbiAgICAgICAgfTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFNldCB0aGUgZXZlbnQgbGlzdGVuZXIgZm9yIHNwZWNpZmllZCBUcmFja0VudHJ5LlxuICAgICAqICEjemgg55So5p2l5Li65oyH5a6a55qEIFRyYWNrRW50cnkg6K6+572u5Yqo55S75bin5LqL5Lu255qE55uR5ZCs44CCXG4gICAgICogQG1ldGhvZCBzZXRUcmFja0V2ZW50TGlzdGVuZXJcbiAgICAgKiBAcGFyYW0ge3NwLnNwaW5lLlRyYWNrRW50cnl9IGVudHJ5XG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXJcbiAgICAgKi9cbiAgICBzZXRUcmFja0V2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIHNldFRyYWNrRXZlbnRMaXN0ZW5lcihlbnRyeSwgbGlzdGVuZXIpIHtcbiAgICAgICAgVHJhY2tFbnRyeUxpc3RlbmVycy5nZXRMaXN0ZW5lcnMoZW50cnkpLmV2ZW50ID0gbGlzdGVuZXI7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogISNlbiBHZXQgdGhlIGFuaW1hdGlvbiBzdGF0ZSBvYmplY3RcbiAgICAgKiAhI3poIOiOt+WPllxuICAgICAqIEBtZXRob2Qgc2V0VHJhY2tFdmVudExpc3RlbmVyXG4gICAgICogQHJldHVybiB7c3Auc3BpbmUuQW5pbWF0aW9uU3RhdGV9IHN0YXRlXG4gICAgICovXG4gICAgZ2V0U3RhdGU6IGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGU7XG4gICAgfSxcblxuXG4gICAgLy8gdXBkYXRlIGFuaW1hdGlvbiBsaXN0IGZvciBlZGl0b3JcbiAgICBfdXBkYXRlQW5pbUVudW06IENDX0VESVRPUiAmJiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhbmltRW51bTtcbiAgICAgICAgaWYgKHRoaXMuc2tlbGV0b25EYXRhKSB7XG4gICAgICAgICAgICBhbmltRW51bSA9IHRoaXMuc2tlbGV0b25EYXRhLmdldEFuaW1zRW51bSgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNoYW5nZSBlbnVtXG4gICAgICAgIHNldEVudW1BdHRyKHRoaXMsICdfYW5pbWF0aW9uSW5kZXgnLCBhbmltRW51bSB8fCBEZWZhdWx0QW5pbXNFbnVtKTtcbiAgICB9LFxuICAgIC8vIHVwZGF0ZSBza2luIGxpc3QgZm9yIGVkaXRvclxuICAgIF91cGRhdGVTa2luRW51bTogQ0NfRURJVE9SICYmIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNraW5FbnVtO1xuICAgICAgICBpZiAodGhpcy5za2VsZXRvbkRhdGEpIHtcbiAgICAgICAgICAgIHNraW5FbnVtID0gdGhpcy5za2VsZXRvbkRhdGEuZ2V0U2tpbnNFbnVtKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2hhbmdlIGVudW1cbiAgICAgICAgc2V0RW51bUF0dHIodGhpcywgJ19kZWZhdWx0U2tpbkluZGV4Jywgc2tpbkVudW0gfHwgRGVmYXVsdFNraW5zRW51bSk7XG4gICAgfSxcblxuICAgIF9lbnN1cmVMaXN0ZW5lcjogZnVuY3Rpb24gX2Vuc3VyZUxpc3RlbmVyKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2xpc3RlbmVyKSB7XG4gICAgICAgICAgICB0aGlzLl9saXN0ZW5lciA9IG5ldyBUcmFja0VudHJ5TGlzdGVuZXJzKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5fc3RhdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZS5hZGRMaXN0ZW5lcih0aGlzLl9saXN0ZW5lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIF91cGRhdGVTa2VsZXRvbkRhdGE6IGZ1bmN0aW9uIF91cGRhdGVTa2VsZXRvbkRhdGEoKSB7XG4gICAgICAgIGlmICghdGhpcy5ub2RlKSB7XG4gICAgICAgICAgICBjYy53YXJuKFwibm9kZSBoYXMgYmVlbiBkZXN0cm95ZWQsIGNhbid0IHNldCBzcC5za2VsZXRvbkRhdGFcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLnNrZWxldG9uRGF0YSkge1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlUmVuZGVyKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH07XG4gICAgICAgIHZhciBkYXRhID0gdGhpcy5za2VsZXRvbkRhdGEuZ2V0UnVudGltZURhdGEoKTtcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICB0aGlzLmRpc2FibGVSZW5kZXIoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5zZXRTa2VsZXRvbkRhdGEoZGF0YSk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNBbmltYXRpb25DYWNoZWQoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0QW5pbWF0aW9uU3RhdGVEYXRhKG5ldyBzcGluZS5BbmltYXRpb25TdGF0ZURhdGEodGhpcy5fc2tlbGV0b24uZGF0YSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kZWZhdWx0U2tpbiAmJiB0aGlzLnNldFNraW4odGhpcy5kZWZhdWx0U2tpbik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNjLndhcm4oZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9wcmVDYWNoZU1vZGUgPSB0aGlzLl9jYWNoZU1vZGU7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uID0gdGhpcy5kZWZhdWx0QW5pbWF0aW9uO1xuICAgIH0sXG4gICAgX3JlZnJlc2hJbnNwZWN0b3I6IGZ1bmN0aW9uIF9yZWZyZXNoSW5zcGVjdG9yKCkge1xuICAgICAgICAvLyB1cGRhdGUgaW5zcGVjdG9yXG4gICAgICAgIHRoaXMuX3VwZGF0ZUFuaW1FbnVtKCk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVNraW5FbnVtKCk7XG4gICAgICAgIEVkaXRvci5VdGlscy5yZWZyZXNoU2VsZWN0ZWRJbnNwZWN0b3IoJ25vZGUnLCB0aGlzLm5vZGUudXVpZCk7XG4gICAgfSxcblxuXG4gICAgX3VwZGF0ZURlYnVnRHJhdzogZnVuY3Rpb24gX3VwZGF0ZURlYnVnRHJhdygpIHtcbiAgICAgICAgaWYgKHRoaXMuZGVidWdCb25lcyB8fCB0aGlzLmRlYnVnU2xvdHMpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fZGVidWdSZW5kZXJlcikge1xuICAgICAgICAgICAgICAgIHZhciBkZWJ1Z0RyYXdOb2RlID0gbmV3IGNjLlByaXZhdGVOb2RlKCk7XG4gICAgICAgICAgICAgICAgZGVidWdEcmF3Tm9kZS5uYW1lID0gJ0RFQlVHX0RSQVdfTk9ERSc7XG4gICAgICAgICAgICAgICAgdmFyIGRlYnVnRHJhdyA9IGRlYnVnRHJhd05vZGUuYWRkQ29tcG9uZW50KEdyYXBoaWNzKTtcbiAgICAgICAgICAgICAgICBkZWJ1Z0RyYXcubGluZVdpZHRoID0gMTtcbiAgICAgICAgICAgICAgICBkZWJ1Z0RyYXcuc3Ryb2tlQ29sb3IgPSBjYy5jb2xvcigyNTUsIDAsIDAsIDI1NSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9kZWJ1Z1JlbmRlcmVyID0gZGVidWdEcmF3O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9kZWJ1Z1JlbmRlcmVyLm5vZGUucGFyZW50ID0gdGhpcy5ub2RlO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNBbmltYXRpb25DYWNoZWQoKSkge1xuICAgICAgICAgICAgICAgIGNjLndhcm4oXCJEZWJ1ZyBib25lcyBvciBzbG90cyBpcyBpbnZhbGlkIGluIGNhY2hlZCBtb2RlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2RlYnVnUmVuZGVyZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2RlYnVnUmVuZGVyZXIubm9kZS5wYXJlbnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3AuU2tlbGV0b247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbE5yWld4bGRHOXVMbXB6SWwwc0ltNWhiV1Z6SWpwYklsUnlZV05yUlc1MGNubE1hWE4wWlc1bGNuTWlMQ0p5WlhGMWFYSmxJaXdpVW1WdVpHVnlRMjl0Y0c5dVpXNTBJaXdpYzNCcGJtVWlMQ0pOWVhSbGNtbGhiQ0lzSWtkeVlYQm9hV056SWl3aVUydGxiR1YwYjI1RFlXTm9aU0lzSWtSbFptRjFiSFJUYTJsdWMwVnVkVzBpTENKall5SXNJa1Z1ZFcwaUxDSkVaV1poZFd4MFFXNXBiWE5GYm5WdElpd2lRVzVwYldGMGFXOXVRMkZqYUdWTmIyUmxJaXdpVWtWQlRGUkpUVVVpTENKVFNFRlNSVVJmUTBGRFNFVWlMQ0pRVWtsV1FWUkZYME5CUTBoRklpd2ljMlYwUlc1MWJVRjBkSElpTENKdlltb2lMQ0p3Y205d1RtRnRaU0lzSW1WdWRXMUVaV1lpTENKRGJHRnpjeUlzSWtGMGRISWlMQ0p6WlhSRGJHRnpjMEYwZEhJaUxDSm5aWFJNYVhOMElpd2ljM0FpTENKVGEyVnNaWFJ2YmlJc0ltNWhiV1VpTENKbGVIUmxibVJ6SWl3aVpXUnBkRzl5SWl3aVEwTmZSVVJKVkU5U0lpd2liV1Z1ZFNJc0ltaGxiSEFpTENKemRHRjBhV056SWl3aWNISnZjR1Z5ZEdsbGN5SXNJbkJoZFhObFpDSXNJbVJsWm1GMWJIUWlMQ0oyYVhOcFlteGxJaXdpYzJ0bGJHVjBiMjVFWVhSaElpd2lkSGx3WlNJc0lsTnJaV3hsZEc5dVJHRjBZU0lzSW01dmRHbG1lU0lzSW1SbFptRjFiSFJUYTJsdUlpd2laR1ZtWVhWc2RFRnVhVzFoZEdsdmJpSXNJbDl5WldaeVpYTm9TVzV6Y0dWamRHOXlJaXdpWDNWd1pHRjBaVk5yWld4bGRHOXVSR0YwWVNJc0luUnZiMngwYVhBaUxDSkRRMTlFUlZZaUxDSmhibWx0WVhScGIyNGlMQ0puWlhRaUxDSnBjMEZ1YVcxaGRHbHZia05oWTJobFpDSXNJbDloYm1sdFlYUnBiMjVPWVcxbElpd2laVzUwY25raUxDSm5aWFJEZFhKeVpXNTBJaXdpYzJWMElpd2lkbUZzZFdVaUxDSnpaWFJCYm1sdFlYUnBiMjRpTENKc2IyOXdJaXdpWTJ4bFlYSlVjbUZqYXlJc0luTmxkRlJ2VTJWMGRYQlFiM05sSWl3aVgyUmxabUYxYkhSVGEybHVTVzVrWlhnaUxDSnphMmx1YzBWdWRXMGlMQ0puWlhSVGEybHVjMFZ1ZFcwaUxDSnphMmx1U1c1a1pYZ2lMQ0oxYm1SbFptbHVaV1FpTENKbGNuSnZja2xFSWl3aWMydHBiazVoYldVaUxDSnpaWFJUYTJsdUlpd2laVzVuYVc1bElpd2lhWE5RYkdGNWFXNW5JaXdpWkdsemNHeGhlVTVoYldVaUxDSmZZVzVwYldGMGFXOXVTVzVrWlhnaUxDSmhibWx0WVhScGIyNU9ZVzFsSWl3aVlXNXBiWE5GYm5WdElpd2laMlYwUVc1cGJYTkZiblZ0SWl3aVlXNXBiVWx1WkdWNElpd2lZVzVwYlU1aGJXVWlMQ0pmY0hKbFEyRmphR1ZOYjJSbElpd2lYMk5oWTJobFRXOWtaU0lzSWw5a1pXWmhkV3gwUTJGamFHVk5iMlJsSWl3aWMyVjBRVzVwYldGMGFXOXVRMkZqYUdWTmIyUmxJaXdpWldScGRHOXlUMjVzZVNJc0ltRnVhVzFoZEdGaWJHVWlMQ0p3Y21WdGRXeDBhWEJzYVdWa1FXeHdhR0VpTENKMGFXMWxVMk5oYkdVaUxDSmtaV0oxWjFOc2IzUnpJaXdpWDNWd1pHRjBaVVJsWW5WblJISmhkeUlzSW1SbFluVm5RbTl1WlhNaUxDSmtaV0oxWjAxbGMyZ2lMQ0oxYzJWVWFXNTBJaXdpWDNWd1pHRjBaVlZ6WlZScGJuUWlMQ0psYm1GaWJHVkNZWFJqYUNJc0lsOTFjR1JoZEdWQ1lYUmphQ0lzSWw5aFkyTlVhVzFsSWl3aVgzQnNZWGxEYjNWdWRDSXNJbDltY21GdFpVTmhZMmhsSWl3aVgyTjFja1p5WVcxbElpd2lYM05yWld4bGRHOXVRMkZqYUdVaUxDSmZZVzVwYldGMGFXOXVVWFZsZFdVaUxDSmZhR1ZoWkVGdWFVbHVabThpTENKZmNHeGhlVlJwYldWeklpd2lYMmx6UVc1cFEyOXRjR3hsZEdVaUxDSmpkRzl5SWl3aVgyVm1abVZqZEVSbGJHVm5ZWFJsSWl3aVgzTnJaV3hsZEc5dUlpd2lYM0p2YjNSQ2IyNWxJaXdpWDJ4cGMzUmxibVZ5SWl3aVgySnZkVzVrYVc1blFtOTRJaXdpY21WamRDSXNJbDl0WVhSbGNtbGhiRU5oWTJobElpd2lYMlJsWW5WblVtVnVaR1Z5WlhJaUxDSmZjM1JoY25SVGJHOTBTVzVrWlhnaUxDSmZaVzVrVTJ4dmRFbHVaR1Y0SWl3aVgzTjBZWEowUlc1MGNua2lMQ0owY21GamEwbHVaR1Y0SWl3aVgyVnVaRVZ1ZEhKNUlpd2ljMlYwVFdGMFpYSnBZV3dpTENKcGJtUmxlQ0lzSW0xaGRHVnlhV0ZzSWl3aVgzTjFjR1Z5SWl3aVltRnpaVTFoZEdWeWFXRnNJaXdpWjJWMFRXRjBaWEpwWVd3aUxDSmtaV1pwYm1VaUxDSmpZV05vWlNJc0ltMUxaWGtpTENKelpYUlRhMlZzWlhSdmJrUmhkR0VpTENKM2FXUjBhQ0lzSW1obGFXZG9kQ0lzSW01dlpHVWlMQ0p6WlhSRGIyNTBaVzUwVTJsNlpTSXNJbk5vWVhKbFpFTmhZMmhsSWl3aWQyRnliaUlzSW5OclpXeGxkRzl1U1c1bWJ5SXNJbWRsZEZOclpXeGxkRzl1UTJGamFHVWlMQ0pmZFhWcFpDSXNJbk5yWld4bGRHOXVJaXdpWDJOc2FYQndaWElpTENKamJHbHdjR1Z5SWl3aVoyVjBVbTl2ZEVKdmJtVWlMQ0pUYTJWc1pYUnZia05zYVhCd2FXNW5JaXdpWDJGamRHbDJZWFJsVFdGMFpYSnBZV3dpTENKelpYUlRiRzkwYzFKaGJtZGxJaXdpYzNSaGNuUlRiRzkwU1c1a1pYZ2lMQ0psYm1SVGJHOTBTVzVrWlhnaUxDSnpaWFJCYm1sdFlYUnBiMjVUZEdGMFpVUmhkR0VpTENKemRHRjBaVVJoZEdFaUxDSnpkR0YwWlNJc0lrRnVhVzFoZEdsdmJsTjBZWFJsSWl3aVgzTjBZWFJsSWl3aWNtVnRiM1psVEdsemRHVnVaWElpTENKaFpHUk1hWE4wWlc1bGNpSXNJbDlmY0hKbGJHOWhaQ0lzSWtac1lXZHpJaXdpVDJKcVpXTjBJaXdpWDI5aWFrWnNZV2R6SWl3aVNYTkJibU5vYjNKTWIyTnJaV1FpTENKSmMxTnBlbVZNYjJOclpXUWlMQ0pqYUdsc1pISmxiaUlzSW1raUxDSnVJaXdpYkdWdVozUm9JaXdpWTJocGJHUWlMQ0pmYm1GdFpTSXNJbVJsYzNSeWIza2lMQ0pmY21WelpYUkJjM05sYldKc1pYSWlMQ0pqWVdOb1pVMXZaR1VpTENKMWNHUmhkR1VpTENKa2RDSXNJbVp5WVcxbFEyRmphR1VpTENKcGMwbHVkbUZzYVdRaUxDSjFjR1JoZEdWVWIwWnlZVzFsSWl3aVpuSmhiV1Z6SWl3aWMyaHBablFpTENKa1pXeGhlU0lzSW1GdWFVbHVabThpTENKZmRYQmtZWFJsUTJGamFHVWlMQ0pmZFhCa1lYUmxVbVZoYkhScGJXVWlMQ0pmWlcxcGRFTmhZMmhsUTI5dGNHeGxkR1ZGZG1WdWRDSXNJbU52YlhCc1pYUmxJaXdpWlc1a0lpd2lhWE5KYm1sMFpXUWlMQ0ptY21GdFpWUnBiV1VpTENKR2NtRnRaVlJwYldVaUxDSnpkR0Z5ZENJc0ltWnlZVzFsU1dSNElpd2lUV0YwYUNJc0ltWnNiMjl5SWl3aWFYTkRiMjF3YkdWMFpXUWlMQ0poY0hCc2VTSXNJbVJwYzJGaWJHVlNaVzVrWlhJaUxDSmxibk4xY21WVVpYaDBkWEpsYzB4dllXUmxaQ0lzSW5KbGMzVnNkQ0lzSW5Ob1lYSmxaRTFoZEdWeWFXRnNjeUlzSW1kbGRFbHVjM1JoYm5ScFlYUmxaRUoxYVd4MGFXNU5ZWFJsY21saGJDSXNJbWRsZEVsdWMzUmhiblJwWVhSbFpFMWhkR1Z5YVdGc0lpd2lYM0J5WlhCaGNtVlViMUpsYm1SbGNpSXNJbDl5Wlc1a1pYSkRiMjF3YjI1bGJuUWlMQ0p0WVhKclJtOXlVbVZ1WkdWeUlpd2liMjVGYm1GaWJHVWlMQ0p2YmxKbGMzUnZjbVVpTENKelpYUldaWEowWlhoRlptWmxZM1JFWld4bFoyRjBaU0lzSW1WbVptVmpkRVJsYkdWbllYUmxJaXdpZFhCa1lYUmxWMjl5YkdSVWNtRnVjMlp2Y20waUxDSnpaWFJDYjI1bGMxUnZVMlYwZFhCUWIzTmxJaXdpYzJWMFUyeHZkSE5VYjFObGRIVndVRzl6WlNJc0luVndaR0YwWlVGdWFXMWhkR2x2YmtOaFkyaGxJaXdpZFhWcFpDSXNJbWx1ZG1Gc2FXUkJibWx0WVhScGIyNURZV05vWlNJc0ltWnBibVJDYjI1bElpd2lZbTl1WlU1aGJXVWlMQ0ptYVc1a1UyeHZkQ0lzSW5Oc2IzUk9ZVzFsSWl3aWMyVjBVMnRwYmtKNVRtRnRaU0lzSW1kbGRFRjBkR0ZqYUcxbGJuUWlMQ0poZEhSaFkyaHRaVzUwVG1GdFpTSXNJbWRsZEVGMGRHRmphRzFsYm5SQ2VVNWhiV1VpTENKelpYUkJkSFJoWTJodFpXNTBJaXdpWjJWMFZHVjRkSFZ5WlVGMGJHRnpJaXdpY21WbmFXOXVRWFIwWVdOb2JXVnVkQ0lzSW5KbFoybHZiaUlzSW5ObGRFMXBlQ0lzSW1aeWIyMUJibWx0WVhScGIyNGlMQ0owYjBGdWFXMWhkR2x2YmlJc0ltUjFjbUYwYVc5dUlpd2laR0YwWVNJc0ltZGxkRUZ1YVcxaGRHbHZia05oWTJobElpd2lhVzVwZEVGdWFXMWhkR2x2YmtOaFkyaGxJaXdpWm1sdVpFRnVhVzFoZEdsdmJpSXNJbXh2WjBsRUlpd2ljbVZ6SWl3aWMyVjBRVzVwYldGMGFXOXVWMmwwYUNJc0ltRmtaRUZ1YVcxaGRHbHZiaUlzSW5CMWMyZ2lMQ0poWkdSQmJtbHRZWFJwYjI1WGFYUm9JaXdpWTJ4bFlYSlVjbUZqYTNNaUxDSnpaWFJUZEdGeWRFeHBjM1JsYm1WeUlpd2liR2x6ZEdWdVpYSWlMQ0pmWlc1emRYSmxUR2x6ZEdWdVpYSWlMQ0p6WlhSSmJuUmxjbkoxY0hSTWFYTjBaVzVsY2lJc0ltbHVkR1Z5Y25Wd2RDSXNJbk5sZEVWdVpFeHBjM1JsYm1WeUlpd2ljMlYwUkdsemNHOXpaVXhwYzNSbGJtVnlJaXdpWkdsemNHOXpaU0lzSW5ObGRFTnZiWEJzWlhSbFRHbHpkR1Z1WlhJaUxDSnpaWFJGZG1WdWRFeHBjM1JsYm1WeUlpd2laWFpsYm5RaUxDSnpaWFJVY21GamExTjBZWEowVEdsemRHVnVaWElpTENKblpYUk1hWE4wWlc1bGNuTWlMQ0p6WlhSVWNtRmphMGx1ZEdWeWNuVndkRXhwYzNSbGJtVnlJaXdpYzJWMFZISmhZMnRGYm1STWFYTjBaVzVsY2lJc0luTmxkRlJ5WVdOclJHbHpjRzl6WlV4cGMzUmxibVZ5SWl3aWMyVjBWSEpoWTJ0RGIyMXdiR1YwWlV4cGMzUmxibVZ5SWl3aWRISmhZMnRGYm5SeWVTSXNJbXh2YjNCRGIzVnVkQ0lzSW5SeVlXTnJWR2x0WlNJc0ltRnVhVzFoZEdsdmJrVnVaQ0lzSW5ObGRGUnlZV05yUlhabGJuUk1hWE4wWlc1bGNpSXNJbWRsZEZOMFlYUmxJaXdpWDNWd1pHRjBaVUZ1YVcxRmJuVnRJaXdpWVc1cGJVVnVkVzBpTENKZmRYQmtZWFJsVTJ0cGJrVnVkVzBpTENKemEybHVSVzUxYlNJc0ltZGxkRkoxYm5ScGJXVkVZWFJoSWl3aVFXNXBiV0YwYVc5dVUzUmhkR1ZFWVhSaElpd2laU0lzSWtWa2FYUnZjaUlzSWxWMGFXeHpJaXdpY21WbWNtVnphRk5sYkdWamRHVmtTVzV6Y0dWamRHOXlJaXdpWkdWaWRXZEVjbUYzVG05a1pTSXNJbEJ5YVhaaGRHVk9iMlJsSWl3aVpHVmlkV2RFY21GM0lpd2lZV1JrUTI5dGNHOXVaVzUwSWl3aWJHbHVaVmRwWkhSb0lpd2ljM1J5YjJ0bFEyOXNiM0lpTENKamIyeHZjaUlzSW5CaGNtVnVkQ0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQk1FSkJMRWxCUVUxQkxITkNRVUZ6UWtNc1VVRkJVU3g1UWtGQlVpeERRVUUxUWp0QlFVTkJMRWxCUVUxRExHdENRVUZyUWtRc1VVRkJVU3hwUkVGQlVpeERRVUY0UWp0QlFVTkJMRWxCUVUxRkxGRkJRVkZHTEZGQlFWRXNZVUZCVWl4RFFVRmtPMEZCUTBFc1NVRkJUVWNzVjBGQlYwZ3NVVUZCVVN3clEwRkJVaXhEUVVGcVFqdEJRVU5CTEVsQlFVMUpMRmRCUVZkS0xGRkJRVkVzYzBOQlFWSXNRMEZCYWtJN08wRkJSVUVzU1VGQlNVc3NaMEpCUVdkQ1RDeFJRVUZSTEd0Q1FVRlNMRU5CUVhCQ096dEJRVVZCT3pzN1FVRkhRU3hKUVVGSlRTeHRRa0ZCYlVKRExFZEJRVWRETEVsQlFVZ3NRMEZCVVN4RlFVRkZMRmRCUVZjc1EwRkJReXhEUVVGa0xFVkJRVklzUTBGQmRrSTdRVUZEUVN4SlFVRkpReXh0UWtGQmJVSkdMRWRCUVVkRExFbEJRVWdzUTBGQlVTeEZRVUZGTEZWQlFWVXNRMEZCV2l4RlFVRlNMRU5CUVhaQ096dEJRVVZCT3pzN096dEJRVXRCTEVsQlFVbEZMSEZDUVVGeFFrZ3NSMEZCUjBNc1NVRkJTQ3hEUVVGUk8wRkJRemRDT3pzN096dEJRVXRCUnl4alFVRlZMRU5CVG0xQ08wRkJUemRDT3pzN096dEJRVXRCUXl4clFrRkJZeXhEUVZwbE8wRkJZVGRDT3pzN096dEJRVXRCUXl4dFFrRkJaVHRCUVd4Q1l5eERRVUZTTEVOQlFYcENPenRCUVhGQ1FTeFRRVUZUUXl4WFFVRlVMRU5CUVhOQ1F5eEhRVUYwUWl4RlFVRXlRa01zVVVGQk0wSXNSVUZCY1VORExFOUJRWEpETEVWQlFUaERPMEZCUXpGRFZpeFBRVUZIVnl4TFFVRklMRU5CUVZORExFbEJRVlFzUTBGQlkwTXNXVUZCWkN4RFFVRXlRa3dzUjBGQk0wSXNSVUZCWjBORExGRkJRV2hETEVWQlFUQkRMRTFCUVRGRExFVkJRV3RFTEUxQlFXeEVPMEZCUTBGVUxFOUJRVWRYTEV0QlFVZ3NRMEZCVTBNc1NVRkJWQ3hEUVVGalF5eFpRVUZrTEVOQlFUSkNUQ3hIUVVFelFpeEZRVUZuUTBNc1VVRkJhRU1zUlVGQk1FTXNWVUZCTVVNc1JVRkJjMFJVTEVkQlFVZERMRWxCUVVnc1EwRkJVV0VzVDBGQlVpeERRVUZuUWtvc1QwRkJhRUlzUTBGQmRFUTdRVUZEU0RzN1FVRkZSRHM3T3pzN096czdPenM3T3pzN096czdRVUZwUWtGTExFZEJRVWRETEZGQlFVZ3NSMEZCWTJoQ0xFZEJRVWRYTEV0QlFVZ3NRMEZCVXp0QlFVTnVRazBzVlVGQlRTeGhRVVJoTzBGQlJXNUNReXhoUVVGVGVFSXNaVUZHVlR0QlFVZHVRbmxDTEZsQlFWRkRMR0ZCUVdFN1FVRkRha0pETEdOQlFVMHNiVVJCUkZjN1FVRkZha0pETEdOQlFVMDdRVUZEVGp0QlFVaHBRaXhMUVVoR096dEJRVk51UWtNc1lVRkJVenRCUVVOTWNFSXNORUpCUVc5Q1FUdEJRVVJtTEV0QlZGVTdPMEZCWVc1Q2NVSXNaMEpCUVZrN1FVRkRVanM3T3pzN096czdRVUZSUVVNc1owSkJRVkU3UVVGRFNrTXNjVUpCUVZNc1MwRkVURHRCUVVWS1F5eHhRa0ZCVXp0QlFVWk1MRk5CVkVFN08wRkJZMUk3T3pzN096czdPenM3TzBGQlYwRkRMSE5DUVVGak8wRkJRMVpHTEhGQ1FVRlRMRWxCUkVNN1FVRkZWa2NzYTBKQlFVMWtMRWRCUVVkbExGbEJSa003UVVGSFZrTXNhMEpCU0ZVc2IwSkJSMEU3UVVGRFRpeHhRa0ZCUzBNc1YwRkJUQ3hIUVVGdFFpeEZRVUZ1UWp0QlFVTkJMSEZDUVVGTFF5eG5Ra0ZCVEN4SFFVRjNRaXhGUVVGNFFqdEJRVU5CTEc5Q1FVRkpZaXhUUVVGS0xFVkJRV1U3UVVGRFdDeDVRa0ZCUzJNc2FVSkJRVXc3UVVGRFNEdEJRVU5FTEhGQ1FVRkxReXh0UWtGQlREdEJRVU5JTEdGQlZsTTdPMEZCVjFaRExIRkNRVUZUUXl4VlFVRlZPMEZCV0ZRc1UwRjZRazQ3TzBGQmRVTlNPMEZCUTBFN096czdPMEZCUzBGTUxIRkNRVUZoTzBGQlExUk9MSEZDUVVGVExFVkJSRUU3UVVGRlZFTXNjVUpCUVZNN1FVRkdRU3hUUVRkRFREczdRVUZyUkZJN096czdPMEZCUzBGTkxEQkNRVUZyUWp0QlFVTmtVQ3h4UWtGQlV5eEZRVVJMTzBGQlJXUkRMSEZDUVVGVE8wRkJSa3NzVTBGMlJGWTdPMEZCTkVSU096czdPenRCUVV0QlZ5eHRRa0ZCVnp0QlFVTlFReXhsUVVSUExHbENRVU5CTzBGQlEwZ3NiMEpCUVVrc1MwRkJTME1zYVVKQlFVd3NSVUZCU2l4RlFVRTRRanRCUVVNeFFpd3lRa0ZCVHl4TFFVRkxReXhqUVVGYU8wRkJRMGdzYVVKQlJrUXNUVUZGVHp0QlFVTklMSGRDUVVGSlF5eFJRVUZSTEV0QlFVdERMRlZCUVV3c1EwRkJaMElzUTBGQmFFSXNRMEZCV2p0QlFVTkJMREpDUVVGUlJDeFRRVUZUUVN4TlFVRk5TaXhUUVVGT0xFTkJRV2RDY2tJc1NVRkJNVUlzU1VGQmJVTXNSVUZCTVVNN1FVRkRTRHRCUVVOS0xHRkJVazA3UVVGVFVESkNMR1ZCVkU4c1pVRlRSa01zUzBGVVJTeEZRVk5MTzBGQlExSXNjVUpCUVV0YUxHZENRVUZNTEVkQlFYZENXU3hMUVVGNFFqdEJRVU5CTEc5Q1FVRkpRU3hMUVVGS0xFVkJRVmM3UVVGRFVDeDVRa0ZCUzBNc1dVRkJUQ3hEUVVGclFpeERRVUZzUWl4RlFVRnhRa1FzUzBGQmNrSXNSVUZCTkVJc1MwRkJTMFVzU1VGQmFrTTdRVUZEU0N4cFFrRkdSQ3hOUVVkTExFbEJRVWtzUTBGQlF5eExRVUZMVUN4cFFrRkJUQ3hGUVVGTUxFVkJRU3RDTzBGQlEyaERMSGxDUVVGTFVTeFZRVUZNTEVOQlFXZENMRU5CUVdoQ08wRkJRMEVzZVVKQlFVdERMR05CUVV3N1FVRkRTRHRCUVVOS0xHRkJiRUpOT3p0QlFXMUNVSFJDTEhGQ1FVRlRPMEZCYmtKR0xGTkJha1ZJT3p0QlFYVkdVanM3TzBGQlIwRjFRaXd5UWtGQmJVSTdRVUZEWmxnc1pVRkVaU3hwUWtGRFVqdEJRVU5JTEc5Q1FVRkpMRXRCUVV0WUxGbEJRVXdzU1VGQmNVSXNTMEZCUzBrc1YwRkJPVUlzUlVGQk1rTTdRVUZEZGtNc2QwSkJRVWx0UWl4WlFVRlpMRXRCUVV0MlFpeFpRVUZNTEVOQlFXdENkMElzV1VGQmJFSXNSVUZCYUVJN1FVRkRRU3gzUWtGQlNVUXNVMEZCU2l4RlFVRmxPMEZCUTFnc05FSkJRVWxGTEZsQlFWbEdMRlZCUVZVc1MwRkJTMjVDTEZkQlFXWXNRMEZCYUVJN1FVRkRRU3cwUWtGQlNYRkNMR05CUVdORExGTkJRV3hDTEVWQlFUWkNPMEZCUTNwQ0xHMURRVUZQUkN4VFFVRlFPMEZCUTBnN1FVRkRTanRCUVVOS08wRkJRMFFzZFVKQlFVOHNRMEZCVUR0QlFVTklMR0ZCV21NN1FVRmhabFFzWlVGaVpTeGxRV0ZXUXl4TFFXSlZMRVZCWVVnN1FVRkRVaXh2UWtGQlNVMHNVMEZCU2p0QlFVTkJMRzlDUVVGSkxFdEJRVXQyUWl4WlFVRlVMRVZCUVhWQ08wRkJRMjVDZFVJc1owTkJRVmtzUzBGQlMzWkNMRmxCUVV3c1EwRkJhMEozUWl4WlFVRnNRaXhGUVVGYU8wRkJRMGc3UVVGRFJDeHZRa0ZCU3l4RFFVRkRSQ3hUUVVGT0xFVkJRV3RDTzBGQlEyUXNNa0pCUVU5dVJDeEhRVUZIZFVRc1QwRkJTQ3hEUVVGWExFVkJRVmdzUlVGRFNDeExRVUZMZEVNc1NVRkVSaXhEUVVGUU8wRkJSVWc3UVVGRFJDeHZRa0ZCU1hWRExGZEJRVmRNTEZWQlFWVk9MRXRCUVZZc1EwRkJaanRCUVVOQkxHOUNRVUZKVnl4aFFVRmhSaXhUUVVGcVFpeEZRVUUwUWp0QlFVTjRRaXg1UWtGQlMzUkNMRmRCUVV3c1IwRkJiVUozUWl4UlFVRnVRanRCUVVOQkxIbENRVUZMUXl4UFFVRk1MRU5CUVdFc1MwRkJTM3BDTEZkQlFXeENPMEZCUTBFc2QwSkJRVWxhTEdGQlFXRXNRMEZCUTNCQ0xFZEJRVWN3UkN4TlFVRklMRU5CUVZWRExGTkJRVFZDTEVWQlFYVkRPMEZCUTI1RExEWkNRVUZMZWtJc2FVSkJRVXc3UVVGRFNEdEJRVU5LTEdsQ1FVNUVMRTFCVDBzN1FVRkRSR3hETEhWQ1FVRkhkVVFzVDBGQlNDeERRVUZYTEVsQlFWZ3NSVUZCYVVJc1MwRkJTM1JETEVsQlFYUkNPMEZCUTBnN1FVRkRTaXhoUVdwRFl6czdRVUZyUTJaWkxHdENRVUZOT1VJc1owSkJiRU5UTzBGQmJVTm1ORUlzY1VKQlFWTXNTVUZ1UTAwN1FVRnZRMlpwUXl4NVFrRkJZU3hqUVhCRFJUdEJRWEZEWm5oQ0xIRkNRVUZUUXl4VlFVRlZPMEZCY2tOS0xGTkJNVVpZT3p0QlFXdEpVanRCUVVOQmQwSXNlVUpCUVdsQ08wRkJRMkowUWl4bFFVUmhMR2xDUVVOT08wRkJRMGdzYjBKQlFVbDFRaXhuUWtGQmFVSXNRMEZCUXpGRExGTkJRVVFzU1VGQlkzQkNMRWRCUVVjd1JDeE5RVUZJTEVOQlFWVkRMRk5CUVhwQ0xFZEJRWE5ETEV0QlFVdHlRaXhUUVVFelF5eEhRVUYxUkN4TFFVRkxUQ3huUWtGQmFFWTdRVUZEUVN4dlFrRkJTU3hMUVVGTFRDeFpRVUZNTEVsQlFYRkNhME1zWVVGQmVrSXNSVUZCZDBNN1FVRkRjRU1zZDBKQlFVbERMRmxCUVZrc1MwRkJTMjVETEZsQlFVd3NRMEZCYTBKdlF5eFpRVUZzUWl4RlFVRm9RanRCUVVOQkxIZENRVUZKUkN4VFFVRktMRVZCUVdVN1FVRkRXQ3cwUWtGQlNVVXNXVUZCV1VZc1ZVRkJWVVFzWVVGQlZpeERRVUZvUWp0QlFVTkJMRFJDUVVGSlJ5eGpRVUZqV0N4VFFVRnNRaXhGUVVFMlFqdEJRVU42UWl4dFEwRkJUMWNzVTBGQlVEdEJRVU5JTzBGQlEwbzdRVUZEU2p0QlFVTkVMSFZDUVVGUExFTkJRVkE3UVVGRFNDeGhRV0paTzBGQlkySnlRaXhsUVdSaExHVkJZMUpETEV0QlpGRXNSVUZqUkR0QlFVTlNMRzlDUVVGSlFTeFZRVUZWTEVOQlFXUXNSVUZCYVVJN1FVRkRZaXg1UWtGQlMxQXNVMEZCVEN4SFFVRnBRaXhGUVVGcVFqdEJRVU5CTzBGQlEwZzdRVUZEUkN4dlFrRkJTWGxDTEZOQlFVbzdRVUZEUVN4dlFrRkJTU3hMUVVGTGJrTXNXVUZCVkN4RlFVRjFRanRCUVVOdVFtMURMR2REUVVGWkxFdEJRVXR1UXl4WlFVRk1MRU5CUVd0Q2IwTXNXVUZCYkVJc1JVRkJXanRCUVVOSU8wRkJRMFFzYjBKQlFVc3NRMEZCUTBRc1UwRkJUaXhGUVVGclFqdEJRVU5rTERKQ1FVRlBMMFFzUjBGQlIzVkVMRTlCUVVnc1EwRkJWeXhKUVVGWUxFVkJRV2xDTEV0QlFVdDBReXhKUVVGMFFpeERRVUZRTzBGQlEwZzdRVUZEUkN4dlFrRkJTV2xFTEZkQlFWZElMRlZCUVZWc1FpeExRVUZXTEVOQlFXWTdRVUZEUVN4dlFrRkJTWEZDTEdGQlFXRmFMRk5CUVdwQ0xFVkJRVFJDTzBGQlEzaENMSGxDUVVGTGFFSXNVMEZCVEN4SFFVRnBRalJDTEZGQlFXcENPMEZCUTBnc2FVSkJSa1FzVFVGSFN6dEJRVU5FYkVVc2RVSkJRVWQxUkN4UFFVRklMRU5CUVZjc1NVRkJXQ3hGUVVGcFFpeExRVUZMZEVNc1NVRkJkRUk3UVVGRFNEdEJRVVZLTEdGQmJFTlpPenRCUVcxRFlsa3NhMEpCUVUwelFpeG5Ra0Z1UTA4N1FVRnZRMko1UWl4eFFrRkJVeXhKUVhCRFNUdEJRWEZEWW1sRExIbENRVUZoTEZkQmNrTkJPMEZCYzBOaWVFSXNjVUpCUVZORExGVkJRVlU3UVVGMFEwNHNVMEZ1U1ZRN08wRkJORXRTTzBGQlEwRTRRaXgxUWtGQlpTeERRVUZETEVOQk4wdFNPMEZCT0V0U1F5eHZRa0ZCV1dwRkxHMUNRVUZ0UWtNc1VVRTVTM1pDTzBGQkswdFNhVVVzTWtKQlFXMUNPMEZCUTJZelF5eHhRa0ZCVXl4RFFVUk5PMEZCUldaSExHdENRVUZOTVVJc2EwSkJSbE03UVVGSFpqUkNMR3RDUVVobExHOUNRVWRNTzBGQlEwNHNjVUpCUVV0MVF5eHhRa0ZCVEN4RFFVRXlRaXhMUVVGTFJDeHBRa0ZCYUVNN1FVRkRTQ3hoUVV4ak96dEJRVTFtUlN4M1FrRkJXU3hKUVU1SE8wRkJUMlkxUXl4eFFrRkJVeXhKUVZCTk8wRkJVV1kyUXl4M1FrRkJXU3hMUVZKSE8wRkJVMlphTEhsQ1FVRmhMSE5DUVZSRk8wRkJWV1o0UWl4eFFrRkJVME1zVlVGQlZUdEJRVlpLTEZOQkwwdFlPenRCUVRSTVVqczdPenM3TzBGQlRVRlZMR05CUVUwN1FVRkRSbkpDTEhGQ1FVRlRMRWxCUkZBN1FVRkZSbFVzY1VKQlFWTkRMRlZCUVZVN1FVRkdha0lzVTBGc1RVVTdPMEZCZFUxU096czdPenM3T3pzN1FVRlRRVzlETERSQ1FVRnZRanRCUVVOb1FpOURMSEZDUVVGVExFbEJSRTg3UVVGRmFFSlZMSEZDUVVGVFF5eFZRVUZWTzBGQlJrZ3NVMEZvVGxvN08wRkJjVTVTT3pzN096czdRVUZOUVhGRExHMUNRVUZYTzBGQlExQm9SQ3h4UWtGQlV5eERRVVJHTzBGQlJWQlZMSEZDUVVGVFF5eFZRVUZWTzBGQlJsb3NVMEV6VGtnN08wRkJaMDlTT3pzN096czdRVUZOUVhORExHOUNRVUZaTzBGQlExSnFSQ3h4UWtGQlV5eExRVVJFTzBGQlJWSTJReXgzUWtGQldTeEpRVVpLTzBGQlIxSnVReXh4UWtGQlUwTXNWVUZCVlN4eFEwRklXRHRCUVVsU1RpeHJRa0ZLVVN4dlFrRkpSVHRCUVVOT0xIRkNRVUZMTmtNc1owSkJRVXc3UVVGRFNEdEJRVTVQTEZOQmRFOUtPenRCUVN0UFVqczdPenM3TzBGQlRVRkRMRzlDUVVGWk8wRkJRMUp1UkN4eFFrRkJVeXhMUVVSRU8wRkJSVkkyUXl4M1FrRkJXU3hKUVVaS08wRkJSMUp1UXl4eFFrRkJVME1zVlVGQlZTeHhRMEZJV0R0QlFVbFNUaXhyUWtGS1VTeHZRa0ZKUlR0QlFVTk9MSEZDUVVGTE5rTXNaMEpCUVV3N1FVRkRTRHRCUVU1UExGTkJjbEJLT3p0QlFUaFFVanM3T3pzN08wRkJUVUZGTEcxQ1FVRlhPMEZCUTFCd1JDeHhRa0ZCVXl4TFFVUkdPMEZCUlZBMlF5eDNRa0ZCV1N4SlFVWk1PMEZCUjFCdVF5eHhRa0ZCVTBNc1ZVRkJWU3h2UTBGSVdqdEJRVWxRVGl4clFrRktUeXh2UWtGSlJ6dEJRVU5PTEhGQ1FVRkxOa01zWjBKQlFVdzdRVUZEU0R0QlFVNU5MRk5CY0ZGSU96dEJRVFpSVWpzN096czdPMEZCVFVGSExHbENRVUZUTzBGQlEweHlSQ3h4UWtGQlV5eExRVVJLTzBGQlJVeFZMSEZDUVVGVFF5eFZRVUZWTEd0RFFVWmtPMEZCUjB4T0xHdENRVWhMTEc5Q1FVZExPMEZCUTA0c2NVSkJRVXRwUkN4alFVRk1PMEZCUTBnN1FVRk1TU3hUUVc1U1JEczdRVUV5VWxJN096czdPenRCUVUxQlF5eHhRa0ZCWVR0QlFVTlVka1FzY1VKQlFWTXNTMEZFUVR0QlFVVlVTeXhyUWtGR1V5eHZRa0ZGUXp0QlFVTk9MSEZDUVVGTGJVUXNXVUZCVER0QlFVTklMR0ZCU2xFN08wRkJTMVE1UXl4eFFrRkJVME1zVlVGQlZUdEJRVXhXTEZOQmFsTk1PenRCUVhsVFVqdEJRVU5CTzBGQlEwRTRReXhyUWtGQlZTeERRVE5UUmp0QlFUUlRVanRCUVVOQlF5eHZRa0ZCV1N4RFFUZFRTanRCUVRoVFVqdEJRVU5CUXl4eFFrRkJZU3hKUVM5VFREdEJRV2RVVWp0QlFVTkJReXh0UWtGQlZ5eEpRV3BVU0R0QlFXdFVVanRCUVVOQlF5eDNRa0ZCYVVJc1NVRnVWRlE3UVVGdlZGSTdRVUZEUVRsRExIZENRVUZwUWl4RlFYSlVWRHRCUVhOVVVqdEJRVU5CSzBNc2VVSkJRV3RDTEVWQmRsUldPMEZCZDFSU08wRkJRMEZETEhOQ1FVRmxMRWxCZWxSUU8wRkJNRlJTTzBGQlEwRkRMRzlDUVVGaExFTkJNMVJNTzBGQk5GUlNPMEZCUTBGRExIZENRVUZwUWp0QlFUZFVWQ3hMUVdKUE96dEJRVFpWYmtJN1FVRkRRVU1zVVVFNVZXMUNMR3RDUVRoVldEdEJRVU5LTEdGQlFVdERMR1ZCUVV3c1IwRkJkVUlzU1VGQmRrSTdRVUZEUVN4aFFVRkxReXhUUVVGTUxFZEJRV2xDTEVsQlFXcENPMEZCUTBFc1lVRkJTME1zVTBGQlRDeEhRVUZwUWl4SlFVRnFRanRCUVVOQkxHRkJRVXRETEZOQlFVd3NSMEZCYVVJc1NVRkJha0k3UVVGRFFTeGhRVUZMUXl4WlFVRk1MRWRCUVc5Q2FrY3NSMEZCUjJ0SExFbEJRVWdzUlVGQmNFSTdRVUZEUVN4aFFVRkxReXhqUVVGTUxFZEJRWE5DTEVWQlFYUkNPMEZCUTBFc1lVRkJTME1zWTBGQlRDeEhRVUZ6UWl4SlFVRjBRanRCUVVOQkxHRkJRVXRETEdWQlFVd3NSMEZCZFVJc1EwRkJReXhEUVVGNFFqdEJRVU5CTEdGQlFVdERMR0ZCUVV3c1IwRkJjVUlzUTBGQlF5eERRVUYwUWp0QlFVTkJMR0ZCUVV0RExGZEJRVXdzUjBGQmJVSXNSVUZCUTJwRkxGZEJRVmtzUlVGQlEzSkNMRTFCUVU4c1JVRkJVaXhGUVVGaUxFVkJRVEJDZFVZc1dVRkJZU3hEUVVGMlF5eEZRVUZ1UWp0QlFVTkJMR0ZCUVV0RExGTkJRVXdzUjBGQmFVSXNSVUZCUTI1RkxGZEJRVmtzUlVGQlEzSkNMRTFCUVU4c1JVRkJVaXhGUVVGaUxFVkJRVEJDZFVZc1dVRkJZU3hEUVVGMlF5eEZRVUZxUWp0QlFVTklMRXRCTVZaclFqczdPMEZCTkZadVFqdEJRVU5CUlN4bFFUZFdiVUlzZFVKQk5sWk9ReXhMUVRkV1RTeEZRVFpXUTBNc1VVRTNWa1FzUlVFMlZsYzdRVUZETVVJc1lVRkJTME1zVFVGQlRDeERRVUZaUml4TFFVRmFMRVZCUVcxQ1F5eFJRVUZ1UWp0QlFVTkJMR0ZCUVV0VUxHTkJRVXdzUjBGQmMwSXNSVUZCZEVJN1FVRkRTQ3hMUVdoWGEwSTdRVUZyVjI1Q2JrSXNhMEpCYkZkdFFpdzBRa0ZyVjBRN1FVRkRaQ3haUVVGSk9FSXNaVUZCWlN4TFFVRkxReXhYUVVGTUxFTkJRV2xDTEVOQlFXcENMRU5CUVc1Q08wRkJRMEVzV1VGQlNXaERMRlZCUVZVc1MwRkJTMEVzVDBGQlRDeEpRVUZuUWl4TFFVRkxka01zYVVKQlFVd3NSVUZCT1VJN1FVRkRRU3haUVVGSmMwVXNXVUZCU2l4RlFVRnJRanRCUVVOa1FTeDVRa0ZCWVVVc1RVRkJZaXhEUVVGdlFpeFZRVUZ3UWl4RlFVRm5RMnBETEU5QlFXaERPMEZCUTBnN1FVRkRSQ3haUVVGSmEwTXNVVUZCVVN4TFFVRkxaQ3hqUVVGcVFqdEJRVU5CTEdGQlFVc3NTVUZCU1dVc1NVRkJWQ3hKUVVGcFFrUXNTMEZCYWtJc1JVRkJkMEk3UVVGRGNFSXNaMEpCUVVsTUxGZEJRVmRMTEUxQlFVMURMRWxCUVU0c1EwRkJaanRCUVVOQkxHZENRVUZKVGl4UlFVRktMRVZCUVdNN1FVRkRWa0VzZVVKQlFWTkpMRTFCUVZRc1EwRkJaMElzVlVGQmFFSXNSVUZCTkVKcVF5eFBRVUUxUWp0QlFVTklPMEZCUTBvN1FVRkRTaXhMUVM5WGEwSTdRVUZwV0c1Q1J5eG5Ra0ZxV0cxQ0xEQkNRV2xZU0R0QlFVTmFMRmxCUVVrMFFpeGxRVUZsTEV0QlFVdERMRmRCUVV3c1EwRkJhVUlzUTBGQmFrSXNRMEZCYmtJN1FVRkRRU3haUVVGSlJDeFpRVUZLTEVWQlFXdENPMEZCUTJSQkxIbENRVUZoUlN4TlFVRmlMRU5CUVc5Q0xHTkJRWEJDTEVWQlFXOURMRU5CUVVNc1MwRkJTeTlDTEZkQlFURkRPMEZCUTBnN1FVRkRSQ3haUVVGSlowTXNVVUZCVVN4TFFVRkxaQ3hqUVVGcVFqdEJRVU5CTEdGQlFVc3NTVUZCU1dVc1NVRkJWQ3hKUVVGcFFrUXNTMEZCYWtJc1JVRkJkMEk3UVVGRGNFSXNaMEpCUVVsTUxGZEJRVmRMTEUxQlFVMURMRWxCUVU0c1EwRkJaanRCUVVOQkxHZENRVUZKVGl4UlFVRktMRVZCUVdNN1FVRkRWa0VzZVVKQlFWTkpMRTFCUVZRc1EwRkJaMElzWTBGQmFFSXNSVUZCWjBNc1EwRkJReXhMUVVGTEwwSXNWMEZCZEVNN1FVRkRTRHRCUVVOS08wRkJRMG9zUzBFM1dHdENPenM3UVVFcldHNUNPenM3T3pzN096czdPMEZCVlVGclF5eHRRa0Y2V1cxQ0xESkNRWGxaUm5aR0xGbEJlbGxGTEVWQmVWbFpPMEZCUXpOQ0xGbEJRVWxCTEdGQlFXRjNSaXhMUVVGaUxFbEJRWE5DTEVsQlFYUkNMRWxCUVRoQ2VFWXNZVUZCWVhsR0xFMUJRV0lzU1VGQmRVSXNTVUZCZWtRc1JVRkJLMFE3UVVGRE0wUXNhVUpCUVV0RExFbEJRVXdzUTBGQlZVTXNZMEZCVml4RFFVRjVRak5HTEdGQlFXRjNSaXhMUVVGMFF5eEZRVUUyUTNoR0xHRkJRV0Y1Uml4TlFVRXhSRHRCUVVOSU96dEJRVVZFTEZsQlFVa3NRMEZCUTJwSExGTkJRVXdzUlVGQlowSTdRVUZEV2l4blFrRkJTU3hMUVVGTFowUXNWVUZCVEN4TFFVRnZRbXBGTEcxQ1FVRnRRa1VzV1VGQk0wTXNSVUZCZVVRN1FVRkRja1FzY1VKQlFVdHJSaXhqUVVGTUxFZEJRWE5DZWtZc1kwRkJZekJJTEZkQlFYQkRPMEZCUTBnc1lVRkdSQ3hOUVVWUExFbEJRVWtzUzBGQlMzQkVMRlZCUVV3c1MwRkJiMEpxUlN4dFFrRkJiVUpITEdGQlFUTkRMRVZCUVRCRU8wRkJRemRFTEhGQ1FVRkxhVVlzWTBGQlRDeEhRVUZ6UWl4SlFVRkpla1lzWVVGQlNpeEZRVUYwUWp0QlFVTklPMEZCUTBvN08wRkJSVVFzV1VGQlNTeExRVUZMTUVNc2FVSkJRVXdzUlVGQlNpeEZRVUU0UWp0QlFVTXhRaXhuUWtGQlNTeExRVUZMY1VNc1ZVRkJUQ3hKUVVGdFFpeExRVUZMUml4VlFVRTFRaXhGUVVGM1F6dEJRVU53UXpORkxHMUNRVUZIZVVnc1NVRkJTQ3hEUVVGUkxHZEVRVUZTTzBGQlEwZzdRVUZEUkN4blFrRkJTVU1zWlVGQlpTeExRVUZMYmtNc1kwRkJUQ3hEUVVGdlFtOURMR2RDUVVGd1FpeERRVUZ4UXl4TFFVRkxMMFlzV1VGQlRDeERRVUZyUW1kSExFdEJRWFpFTEVWQlFUaEVhRWNzV1VGQk9VUXNRMEZCYmtJN1FVRkRRU3hwUWtGQlMydEZMRk5CUVV3c1IwRkJhVUkwUWl4aFFVRmhSeXhSUVVFNVFqdEJRVU5CTEdsQ1FVRkxReXhSUVVGTUxFZEJRV2RDU2l4aFFVRmhTeXhQUVVFM1FqdEJRVU5CTEdsQ1FVRkxhRU1zVTBGQlRDeEhRVUZwUWl4TFFVRkxSQ3hUUVVGTUxFTkJRV1ZyUXl4WFFVRm1MRVZCUVdwQ08wRkJRMGdzVTBGU1JDeE5RVkZQTzBGQlEwZ3NhVUpCUVV0c1F5eFRRVUZNTEVkQlFXbENMRWxCUVVsdVJ5eE5RVUZOY1VJc1VVRkJWaXhEUVVGdFFsa3NXVUZCYmtJc1EwRkJha0k3UVVGRFFTeHBRa0ZCUzJ0SExGRkJRVXdzUjBGQlowSXNTVUZCU1c1SkxFMUJRVTF6U1N4blFrRkJWaXhGUVVGb1FqdEJRVU5CTEdsQ1FVRkxiRU1zVTBGQlRDeEhRVUZwUWl4TFFVRkxSQ3hUUVVGTUxFTkJRV1ZyUXl4WFFVRm1MRVZCUVdwQ08wRkJRMGc3TzBGQlJVUXNZVUZCUzBVc2FVSkJRVXc3UVVGRFNDeExRWEpoYTBJN096dEJRWFZoYmtJN096czdPenM3UVVGUFFVTXNhVUpCT1dGdFFpeDVRa0U0WVVwRExHTkJPV0ZKTEVWQk9HRlpReXhaUVRsaFdpeEZRVGhoTUVJN1FVRkRla01zV1VGQlNTeExRVUZMTjBZc2FVSkJRVXdzUlVGQlNpeEZRVUU0UWp0QlFVTXhRbmhETEdWQlFVZDVTQ3hKUVVGSUxFTkJRVkVzZVVSQlFWSTdRVUZEU0N4VFFVWkVMRTFCUlU4N1FVRkRTQ3hwUWtGQlMzQkNMR1ZCUVV3c1IwRkJkVUlyUWl4alFVRjJRanRCUVVOQkxHbENRVUZMT1VJc1lVRkJUQ3hIUVVGeFFpdENMRmxCUVhKQ08wRkJRMGc3UVVGRFNpeExRWEppYTBJN096dEJRWFZpYmtJN096czdPenM3TzBGQlVVRkRMSGxDUVM5aWJVSXNhVU5CSzJKSlF5eFRRUzlpU2l4RlFTdGlaVHRCUVVNNVFpeFpRVUZKTEV0QlFVc3ZSaXhwUWtGQlRDeEZRVUZLTEVWQlFUaENPMEZCUXpGQ2VFTXNaVUZCUjNsSUxFbEJRVWdzUTBGQlVTeHpSVUZCVWp0QlFVTklMRk5CUmtRc1RVRkZUenRCUVVOSUxHZENRVUZKWlN4UlFVRlJMRWxCUVVrM1NTeE5RVUZOT0Vrc1kwRkJWaXhEUVVGNVFrWXNVMEZCZWtJc1EwRkJXanRCUVVOQkxHZENRVUZKTEV0QlFVdDJReXhUUVVGVUxFVkJRVzlDTzBGQlEyaENMRzlDUVVGSkxFdEJRVXN3UXl4TlFVRlVMRVZCUVdsQ08wRkJRMklzZVVKQlFVdEJMRTFCUVV3c1EwRkJXVU1zWTBGQldpeERRVUV5UWl4TFFVRkxNME1zVTBGQmFFTTdRVUZEU0R0QlFVTkVkME1zYzBKQlFVMUpMRmRCUVU0c1EwRkJhMElzUzBGQlN6VkRMRk5CUVhaQ08wRkJRMGc3UVVGRFJDeHBRa0ZCU3pCRExFMUJRVXdzUjBGQlkwWXNTMEZCWkR0QlFVTklPMEZCUlVvc1MwRTNZMnRDT3pzN1FVRXJZMjVDTzBGQlEwRkxMR0ZCYUdSdFFpeDFRa0ZuWkU0N1FVRkRWQ3haUVVGSmVrZ3NVMEZCU2l4RlFVRmxPMEZCUTFnc1owSkJRVWt3U0N4UlFVRlJPVWtzUjBGQlJ5dEpMRTFCUVVnc1EwRkJWVVFzUzBGQmRFSTdRVUZEUVN4cFFrRkJTMFVzVTBGQlRDeEpRVUZ0UWtZc1RVRkJUVWNzWTBGQlRpeEhRVUYxUWtnc1RVRkJUVWtzV1VGQmFFUTdPMEZCUlVFc2FVSkJRVXRvU0N4cFFrRkJURHRCUVVOSU96dEJRVVZFTEZsQlFVbHBTQ3hYUVVGWExFdEJRVXMzUWl4SlFVRk1MRU5CUVZVMlFpeFJRVUY2UWp0QlFVTkJMR0ZCUVVzc1NVRkJTVU1zU1VGQlNTeERRVUZTTEVWQlFWZERMRWxCUVVsR0xGTkJRVk5ITEUxQlFUZENMRVZCUVhGRFJpeEpRVUZKUXl4RFFVRjZReXhGUVVFMFEwUXNSMEZCTlVNc1JVRkJhVVE3UVVGRE4wTXNaMEpCUVVsSExGRkJRVkZLTEZOQlFWTkRMRU5CUVZRc1EwRkJXanRCUVVOQkxHZENRVUZKUnl4VFFVRlRRU3hOUVVGTlF5eExRVUZPTEV0QlFXZENMR2xDUVVFM1FpeEZRVUZwUkR0QlFVTTNRMFFzYzBKQlFVMUZMRTlCUVU0N1FVRkRTRHRCUVVOS096dEJRVVZFTEdGQlFVdERMR1ZCUVV3N1FVRkRRU3hoUVVGTGRrZ3NiVUpCUVV3N1FVRkRRU3hoUVVGTGVVTXNaMEpCUVV3N1FVRkRRU3hoUVVGTFNTeGpRVUZNTzBGQlEwRXNZVUZCUzBVc1dVRkJURHRCUVVOSUxFdEJjbVZyUWpzN08wRkJkV1Z1UWpzN096czdPenM3T3pzN096dEJRV0ZCV2l4NVFrRndabTFDTEdsRFFXOW1TWEZHTEZOQmNHWktMRVZCYjJabE8wRkJRemxDTEZsQlFVa3NTMEZCUzNoR0xHRkJRVXdzUzBGQmRVSjNSaXhUUVVFelFpeEZRVUZ6UXp0QlFVTnNReXhwUWtGQlMzWkdMRlZCUVV3c1IwRkJhMEoxUml4VFFVRnNRanRCUVVOQkxHbENRVUZMZUVnc2JVSkJRVXc3UVVGRFFTeHBRa0ZCU3paRExHTkJRVXc3UVVGRFNEdEJRVU5LTEV0Qk1XWnJRanM3TzBGQk5HWnVRanM3T3pzN08wRkJUVUY0UXl4eFFrRnNaMEp0UWl3clFrRnJaMEpGTzBGQlEycENMRmxCUVVsd1FpeFRRVUZLTEVWQlFXVXNUMEZCVHl4TFFVRlFPMEZCUTJZc1pVRkJUeXhMUVVGTFowUXNWVUZCVEN4TFFVRnZRbXBGTEcxQ1FVRnRRa01zVVVGQk9VTTdRVUZEU0N4TFFYSm5RbXRDTzBGQmRXZENia0ozU2l4VlFYWm5RbTFDTEd0Q1FYVm5RbGhETEVWQmRtZENWeXhGUVhWblFsQTdRVUZEVWl4WlFVRkpla2tzVTBGQlNpeEZRVUZsTzBGQlEyWXNXVUZCU1N4TFFVRkxTeXhOUVVGVUxFVkJRV2xDT3p0QlFVVnFRbTlKTEdOQlFVMHNTMEZCUzI1R0xGTkJRVXdzUjBGQmFVSXpSQ3hIUVVGSE1rUXNVMEZCTVVJN08wRkJSVUVzV1VGQlNTeExRVUZMYkVNc2FVSkJRVXdzUlVGQlNpeEZRVUU0UWpzN1FVRkZNVUk3UVVGRFFTeG5Ra0ZCU1N4TFFVRkxiVVFzWTBGQlZDeEZRVUY1UWp0QlFVTnlRaXh2UWtGQlNTeExRVUZMU0N4bFFVRk1MRU5CUVhGQ09FUXNUVUZCY2tJc1MwRkJaME1zUTBGQmFFTXNTVUZCY1VNc1EwRkJReXhMUVVGTE4wUXNXVUZCTDBNc1JVRkJOa1E3UVVGRGVrUXNkMEpCUVVseFJTeGhRVUZoTEV0QlFVdDZSU3hYUVVGMFFqdEJRVU5CTEhkQ1FVRkplVVVzWTBGQlkwRXNWMEZCVjBNc1UwRkJXQ3hGUVVGc1FpeEZRVUV3UXp0QlFVTjBRMFFzYlVOQlFWZEZMR0ZCUVZnN1FVRkRRU3cwUWtGQlNVTXNVMEZCVTBnc1YwRkJWMGNzVFVGQmVFSTdRVUZEUVN3MlFrRkJTek5GTEZOQlFVd3NSMEZCYVVJeVJTeFBRVUZQUVN4UFFVRlBXQ3hOUVVGUUxFZEJRV2RDTEVOQlFYWkNMRU5CUVdwQ08wRkJRMGc3UVVGRFJEdEJRVU5JTzBGQlEwUXNiMEpCUVVrc1EwRkJReXhMUVVGTE4wUXNXVUZCVml4RlFVRjNRanRCUVVOd1FpeDVRa0ZCUzBFc1dVRkJUQ3hIUVVGdlFpeExRVUZMUkN4bFFVRk1MRU5CUVhGQ01FVXNTMEZCY2tJc1JVRkJjRUk3UVVGRFNEdEJRVU5FTEhGQ1FVRkxMMFVzVVVGQlRDeEpRVUZwUWpCRkxFVkJRV3BDTzBGQlEwRXNiMEpCUVVrc1MwRkJTekZGTEZGQlFVd3NSMEZCWjBJc1MwRkJTMDBzV1VGQlRDeERRVUZyUWpCRkxFdEJRWFJETEVWQlFUWkRPMEZCUTNwRExIZENRVUZKUXl4VlFVRlZMRXRCUVVzelJTeFpRVUZ1UWp0QlFVTkJMSGxDUVVGTFFTeFpRVUZNTEVkQlFXOUNMRWxCUVhCQ08wRkJRMEVzZVVKQlFVc3pReXhaUVVGTUxFTkJRVzFDTEVOQlFXNUNMRVZCUVhOQ2MwZ3NVVUZCVVhSSExHRkJRVGxDTEVWQlFUWkRjMGNzVVVGQlVYSklMRWxCUVhKRU8wRkJRMGc3UVVGRFJEdEJRVU5JT3p0QlFVVkVMR2xDUVVGTGMwZ3NXVUZCVEN4RFFVRnJRbElzUlVGQmJFSTdRVUZEU0N4VFFURkNSQ3hOUVRCQ1R6dEJRVU5JTEdsQ1FVRkxVeXhsUVVGTUxFTkJRWEZDVkN4RlFVRnlRanRCUVVOSU8wRkJRMG9zUzBFeGFVSnJRanRCUVRScFFtNUNWU3d5UWtFMWFVSnRRaXh4UTBFMGFVSlJPMEZCUTNaQ0xGbEJRVWtzUTBGQlF5eExRVUZMZGtVc1UwRkJWaXhGUVVGeFFqdEJRVU55UWl4aFFVRkxVeXhUUVVGTUxFTkJRV1Z1UlN4VFFVRm1MRU5CUVhsQ2NrSXNTVUZCZWtJc1IwRkJaME1zUzBGQlMzZENMR05CUVhKRE8wRkJRMEVzWVVGQlMzVkVMRk5CUVV3c1EwRkJaWGRGTEZGQlFXWXNTVUZCTWtJc1MwRkJTM2hGTEZOQlFVd3NRMEZCWlhkRkxGRkJRV1lzUTBGQmQwSXNTMEZCU3k5RUxGTkJRVGRDTEVOQlFUTkNPMEZCUTBFc1lVRkJTMVFzVTBGQlRDeERRVUZsZVVVc1IwRkJaaXhKUVVGelFpeExRVUZMZWtVc1UwRkJUQ3hEUVVGbGVVVXNSMEZCWml4RFFVRnRRaXhMUVVGTGFFVXNVMEZCZUVJc1EwRkJkRUk3UVVGRFNDeExRV3BxUW10Q08wRkJiV3BDYmtJMFJDeG5Ra0Z1YWtKdFFpeDNRa0Z0YWtKTVVpeEZRVzVxUWtzc1JVRnRha0pFTzBGQlEyUXNXVUZCU1VNc1lVRkJZU3hMUVVGTGVrVXNWMEZCZEVJN1FVRkRRU3haUVVGSkxFTkJRVU41UlN4WFFVRlhXU3hSUVVGWUxFVkJRVXdzUlVGQk5FSTdRVUZEZUVJN1FVRkRTRHRCUVVORUxGbEJRVWxVTEZOQlFWTklMRmRCUVZkSExFMUJRWGhDTzBGQlEwRXNXVUZCU1ZVc1dVRkJXVGRMTEdOQlFXTTRTeXhUUVVFNVFqczdRVUZGUVR0QlFVTkJPMEZCUTBFc1dVRkJTU3hMUVVGTGVrWXNVVUZCVEN4SlFVRnBRaXhEUVVGcVFpeEpRVUZ6UWl4TFFVRkxReXhWUVVGTUxFbEJRVzFDTEVOQlFUZERMRVZCUVdkRU8wRkJRelZETEdsQ1FVRkxiVUlzVjBGQlRDeERRVUZwUW1wRkxGTkJRV3BDTEVOQlFUSkNja0lzU1VGQk0wSXNSMEZCYTBNc1MwRkJTM2RDTEdOQlFYWkRPMEZCUTBFc2FVSkJRVXQxUkN4VFFVRk1MRWxCUVd0Q0xFdEJRVXRCTEZOQlFVd3NRMEZCWlRaRkxFdEJRV3BETEVsQlFUQkRMRXRCUVVzM1JTeFRRVUZNTEVOQlFXVTJSU3hMUVVGbUxFTkJRWEZDTEV0QlFVdDBSU3hYUVVFeFFpeERRVUV4UXp0QlFVTklPenRCUVVWRUxHRkJRVXR3UWl4UlFVRk1MRWxCUVdsQ01FVXNSVUZCYWtJN1FVRkRRU3haUVVGSmFVSXNWMEZCVjBNc1MwRkJTME1zUzBGQlRDeERRVUZYTEV0QlFVczNSaXhSUVVGTUxFZEJRV2RDZDBZc1UwRkJNMElzUTBGQlpqdEJRVU5CTEZsQlFVa3NRMEZCUTJJc1YwRkJWMjFDTEZkQlFXaENMRVZCUVRaQ08wRkJRM3BDYmtJc2RVSkJRVmRGTEdGQlFWZ3NRMEZCZVVKakxGRkJRWHBDTzBGQlEwZzdPMEZCUlVRc1dVRkJTV2hDTEZkQlFWZHRRaXhYUVVGWUxFbEJRVEJDU0N4WlFVRlpZaXhQUVVGUFdDeE5RVUZxUkN4RlFVRjVSRHRCUVVOeVJDeHBRa0ZCUzJ4RkxGVkJRVXc3UVVGRFFTeG5Ra0ZCU1N4TFFVRkxUU3hWUVVGTUxFZEJRV3RDTEVOQlFXeENMRWxCUVhWQ0xFdEJRVXRPTEZWQlFVd3NTVUZCYlVJc1MwRkJTMDBzVlVGQmJrUXNSVUZCSzBRN1FVRkRNMFE3UVVGRFFTeHhRa0ZCUzBvc1UwRkJUQ3hIUVVGcFFqSkZMRTlCUVU5QkxFOUJRVTlZTEUxQlFWQXNSMEZCWjBJc1EwRkJka0lzUTBGQmFrSTdRVUZEUVN4eFFrRkJTMjVGTEZGQlFVd3NSMEZCWjBJc1EwRkJhRUk3UVVGRFFTeHhRa0ZCUzBNc1ZVRkJUQ3hIUVVGclFpeERRVUZzUWp0QlFVTkJMSEZDUVVGTFR5eGpRVUZNTEVkQlFYTkNMRWxCUVhSQ08wRkJRMEVzY1VKQlFVczBSU3gxUWtGQlREdEJRVU5CTzBGQlEwZzdRVUZEUkN4cFFrRkJTM0JHTEZGQlFVd3NSMEZCWjBJc1EwRkJhRUk3UVVGRFFUSkdMSFZDUVVGWExFTkJRVmc3UVVGRFFTeHBRa0ZCUzFBc2RVSkJRVXc3UVVGRFNEdEJRVU5FTEdGQlFVdHFSaXhUUVVGTUxFZEJRV2xDTWtVc1QwRkJUMkVzVVVGQlVDeERRVUZxUWp0QlFVTklMRXRCZUd4Q2EwSTdRVUV3YkVKdVFsSXNiVUpCTVd4Q2JVSXNNa0pCTUd4Q1JsUXNSVUV4YkVKRkxFVkJNR3hDUlR0QlFVTnFRaXhaUVVGSmFFTXNWMEZCVnl4TFFVRkxMMElzVTBGQmNFSTdRVUZEUVN4WlFVRkpNRU1zVVVGQlVTeExRVUZMUlN4TlFVRnFRanRCUVVOQkxGbEJRVWxpTEZGQlFVb3NSVUZCWXp0QlFVTldRU3h4UWtGQlV5dENMRTFCUVZRc1EwRkJaMEpETEVWQlFXaENPMEZCUTBFc1owSkJRVWx5UWl4TFFVRktMRVZCUVZjN1FVRkRVRUVzYzBKQlFVMXZRaXhOUVVGT0xFTkJRV0ZETEVWQlFXSTdRVUZEUVhKQ0xITkNRVUZOTUVNc1MwRkJUaXhEUVVGWmNrUXNVVUZCV2p0QlFVTklPMEZCUTBvN1FVRkRTaXhMUVhCdFFtdENPMEZCYzIxQ2JrSkxMSEZDUVhSdFFtMUNMQ3RDUVhOdFFrVTdRVUZEYWtJc1dVRkJTU3hEUVVGRExFdEJRVXQwUnl4WlFVRldMRVZCUVhkQ08wRkJRM0JDTEdsQ1FVRkxkVW9zWVVGQlREdEJRVU5CTzBGQlEwZzdPMEZCUlVRc1lVRkJTM1pLTEZsQlFVd3NRMEZCYTBKM1NpeHZRa0ZCYkVJc1EwRkJkVU1zVlVGQlZVTXNUVUZCVml4RlFVRnJRanRCUVVOeVJDeG5Ra0ZCU1N4RFFVRkRRU3hOUVVGTUxFVkJRV0U3UVVGRFZDeHhRa0ZCUzBZc1lVRkJURHRCUVVOQk8wRkJRMGc3TzBGQlJVUXNaMEpCUVVsMlJTeFhRVUZYTEV0QlFVc3dSU3hsUVVGTUxFTkJRWEZDTEVOQlFYSkNMRU5CUVdZN1FVRkRRU3huUWtGQlNTeERRVUZETVVVc1VVRkJUQ3hGUVVGbE8wRkJRMWhCTERKQ1FVRlhhRWdzVTBGQlV6Sk1MRGhDUVVGVUxFTkJRWGRETEZWQlFYaERMRVZCUVc5RUxFbEJRWEJFTEVOQlFWZzdRVUZEU0N4aFFVWkVMRTFCUlU4N1FVRkRTRE5GTERKQ1FVRlhhRWdzVTBGQlV6Uk1MSFZDUVVGVUxFTkJRV2xETlVVc1VVRkJha01zUlVGQk1rTXNTVUZCTTBNc1EwRkJXRHRCUVVOSU96dEJRVVZFUVN4eFFrRkJVMGtzVFVGQlZDeERRVUZuUWl4alFVRm9RaXhGUVVGblF5eEpRVUZvUXp0QlFVTkJMR2xDUVVGTGVVVXNaMEpCUVV3c1EwRkJjMEkzUlN4UlFVRjBRanRCUVVOSUxGTkJaa1FzUlVGbFJ5eEpRV1pJTzBGQlowSklMRXRCTlc1Q2EwSTdRVUU0YmtKdVFqWkZMRzlDUVRsdVFtMUNMRFJDUVRodVFrUTNSU3hSUVRsdVFrTXNSVUU0YmtKVE8wRkJRM2hDTEdGQlFVdEdMRmRCUVV3c1EwRkJhVUlzUTBGQmFrSXNSVUZCYjBKRkxGRkJRWEJDTzBGQlEwRTdRVUZEUVN4WlFVRkpMRXRCUVV0VkxFbEJRVXdzU1VGQllTeExRVUZMUVN4SlFVRk1MRU5CUVZWdlJTeG5Ra0ZCVml4SlFVRTRRaXhKUVVFdlF5eEZRVUZ4UkR0QlFVTnFSQ3hwUWtGQlMwTXNZVUZCVEN4RFFVRnRRaXhKUVVGdVFqdEJRVU5JTzBGQlEwb3NTMEZ3YjBKclFqdEJRWE52UW01Q1F5eFpRWFJ2UW0xQ0xITkNRWE52UWxBN1FVRkRVaXhoUVVGTEwwVXNUVUZCVER0QlFVTkJMR0ZCUVV0eFFpeHBRa0ZCVER0QlFVTklMRXRCZW05Q2EwSTdRVUV5YjBKdVFqSkVMR0ZCTTI5Q2JVSXNkVUpCTW05Q1RqdEJRVU5VTzBGQlEwRXNZVUZCU3pWR0xGbEJRVXdzUjBGQmIwSnFSeXhIUVVGSGEwY3NTVUZCU0N4RlFVRndRanRCUVVOSUxFdEJPVzlDYTBJN096dEJRV2R3UW01Q096czdPenM3UVVGTlFUUkdMREpDUVhSd1FtMUNMRzFEUVhOd1FrMURMR05CZEhCQ1RpeEZRWE53UW5OQ08wRkJRM0pETEdGQlFVdHNSeXhsUVVGTUxFZEJRWFZDYTBjc1kwRkJka0k3UVVGRFNDeExRWGh3UW10Q096czdRVUV3Y0VKdVFqczdRVUZGUVRzN096czdPenM3T3pzN08wRkJXVUZETEhkQ1FYaHhRbTFDTEd0RFFYZHhRa3M3UVVGRGNFSXNXVUZCU1N4RFFVRkRMRXRCUVV0NFNpeHBRa0ZCVEN4RlFVRk1MRVZCUVN0Q096dEJRVVV2UWl4WlFVRkpMRXRCUVV0elJDeFRRVUZVTEVWQlFXOUNPMEZCUTJoQ0xHbENRVUZMUVN4VFFVRk1MRU5CUVdWclJ5eHZRa0ZCWmp0QlFVTklPMEZCUTBvc1MwRTVjVUpyUWpzN08wRkJaM0pDYmtJN096czdPMEZCUzBFdlNTeHJRa0Z5Y2tKdFFpdzBRa0Z4Y2tKRU8wRkJRMlFzV1VGQlNTeExRVUZMTmtNc1UwRkJWQ3hGUVVGdlFqdEJRVU5vUWl4cFFrRkJTMEVzVTBGQlRDeERRVUZsTjBNc1kwRkJaanRCUVVOSU8wRkJRMG9zUzBGNmNrSnJRanM3TzBGQk1uSkNia0k3T3pzN096czdPenRCUVZOQlowb3NkVUpCY0hOQ2JVSXNhVU5CYjNOQ1NUdEJRVU51UWl4WlFVRkpMRXRCUVV0dVJ5eFRRVUZVTEVWQlFXOUNPMEZCUTJoQ0xHbENRVUZMUVN4VFFVRk1MRU5CUVdWdFJ5eHRRa0ZCWmp0QlFVTklPMEZCUTBvc1MwRjRjMEpyUWpzN08wRkJNSE5DYmtJN096czdPenM3T3p0QlFWTkJReXgxUWtGdWRFSnRRaXhwUTBGdGRFSkpPMEZCUTI1Q0xGbEJRVWtzUzBGQlMzQkhMRk5CUVZRc1JVRkJiMEk3UVVGRGFFSXNhVUpCUVV0QkxGTkJRVXdzUTBGQlpXOUhMRzFDUVVGbU8wRkJRMGc3UVVGRFNpeExRWFowUW10Q096czdRVUY1ZEVKdVFqczdPenM3T3pzN096czdRVUZYUVVNc2QwSkJjSFZDYlVJc1owTkJiM1ZDUjJwSkxGRkJjSFZDU0N4RlFXOTFRbUU3UVVGRE5VSXNXVUZCU1N4RFFVRkRMRXRCUVVzeFFpeHBRa0ZCVEN4RlFVRk1MRVZCUVN0Q08wRkJReTlDTEZsQlFVazBTaXhQUVVGUExFdEJRVXQ0U3l4WlFVRk1MRU5CUVd0Q1owY3NTMEZCTjBJN1FVRkRRU3haUVVGSkxFdEJRVXR5UXl4alFVRlVMRVZCUVhsQ08wRkJRM0pDTEdsQ1FVRkxRU3hqUVVGTUxFTkJRVzlDTkVjc2IwSkJRWEJDTEVOQlFYbERReXhKUVVGNlF5eEZRVUVyUTJ4SkxGRkJRUzlETzBGQlEwZzdRVUZEU2l4TFFURjFRbXRDT3pzN1FVRTBkVUp1UWpzN096czdPenRCUVU5QmJVa3NlVUpCYm5aQ2JVSXNiVU5CYlhaQ1RUdEJRVU55UWl4WlFVRkpMRU5CUVVNc1MwRkJTemRLTEdsQ1FVRk1MRVZCUVV3c1JVRkJLMEk3UVVGREwwSXNXVUZCU1N4TFFVRkxLME1zWTBGQlZDeEZRVUY1UWp0QlFVTnlRaXhwUWtGQlMwRXNZMEZCVEN4RFFVRnZRamhITEhGQ1FVRndRaXhEUVVFd1F5eExRVUZMZWtzc1dVRkJUQ3hEUVVGclFtZEhMRXRCUVRWRU8wRkJRMGc3UVVGRFNpeExRWGgyUW10Q096czdRVUV3ZGtKdVFqczdPenM3T3pzN096czdPenM3UVVGalFUQkZMRmxCZUhkQ2JVSXNiMEpCZDNkQ1ZFTXNVVUY0ZDBKVExFVkJkM2RDUXp0QlFVTm9RaXhaUVVGSkxFdEJRVXQ2Unl4VFFVRlVMRVZCUVc5Q08wRkJRMmhDTEcxQ1FVRlBMRXRCUVV0QkxGTkJRVXdzUTBGQlpYZEhMRkZCUVdZc1EwRkJkMEpETEZGQlFYaENMRU5CUVZBN1FVRkRTRHRCUVVORUxHVkJRVThzU1VGQlVEdEJRVU5JTEV0Qk4zZENhMEk3T3p0QlFTdDNRbTVDT3pzN096czdPenM3T3pzN1FVRlpRVU1zV1VFemVFSnRRaXh2UWtFeWVFSlVReXhSUVRONFFsTXNSVUV5ZUVKRE8wRkJRMmhDTEZsQlFVa3NTMEZCU3pOSExGTkJRVlFzUlVGQmIwSTdRVUZEYUVJc2JVSkJRVThzUzBGQlMwRXNVMEZCVEN4RFFVRmxNRWNzVVVGQlppeERRVUYzUWtNc1VVRkJlRUlzUTBGQlVEdEJRVU5JTzBGQlEwUXNaVUZCVHl4SlFVRlFPMEZCUTBnc1MwRm9lVUpyUWpzN08wRkJhM2xDYmtJN096czdPenM3T3pzN096czdPMEZCWTBGb1NpeFhRV2g2UW0xQ0xHMUNRV2Q2UWxaRUxGRkJhSHBDVlN4RlFXZDZRa0U3UVVGRFppeFpRVUZKTEV0QlFVdHpReXhUUVVGVUxFVkJRVzlDTzBGQlEyaENMR2xDUVVGTFFTeFRRVUZNTEVOQlFXVTBSeXhoUVVGbUxFTkJRVFpDYkVvc1VVRkJOMEk3UVVGRFFTeHBRa0ZCUzNORExGTkJRVXdzUTBGQlpXOUhMRzFDUVVGbU8wRkJRMGc3UVVGRFJDeGhRVUZMUnl4eFFrRkJURHRCUVVOSUxFdEJkSHBDYTBJN096dEJRWGQ2UW01Q096czdPenM3T3pzN096czdPenRCUVdOQlRTeHBRa0YwTUVKdFFpeDVRa0Z6TUVKS1JpeFJRWFF3UWtrc1JVRnpNRUpOUnl4alFYUXdRazRzUlVGek1FSnpRanRCUVVOeVF5eFpRVUZKTEV0QlFVczVSeXhUUVVGVUxFVkJRVzlDTzBGQlEyaENMRzFDUVVGUExFdEJRVXRCTEZOQlFVd3NRMEZCWlN0SExHMUNRVUZtTEVOQlFXMURTaXhSUVVGdVF5eEZRVUUyUTBjc1kwRkJOME1zUTBGQlVEdEJRVU5JTzBGQlEwUXNaVUZCVHl4SlFVRlFPMEZCUTBnc1MwRXpNRUpyUWpzN08wRkJOakJDYmtJN096czdPenM3T3pzN08wRkJWMEZGTEdsQ1FYZ3hRbTFDTEhsQ1FYY3hRa3BNTEZGQmVERkNTU3hGUVhjeFFrMUhMR05CZURGQ1RpeEZRWGN4UW5OQ08wRkJRM0pETEZsQlFVa3NTMEZCU3psSExGTkJRVlFzUlVGQmIwSTdRVUZEYUVJc2FVSkJRVXRCTEZOQlFVd3NRMEZCWldkSUxHRkJRV1lzUTBGQk5rSk1MRkZCUVRkQ0xFVkJRWFZEUnl4alFVRjJRenRCUVVOSU8wRkJRMFFzWVVGQlMxQXNjVUpCUVV3N1FVRkRTQ3hMUVRjeFFtdENPenM3UVVFck1VSnVRanM3T3pzN08wRkJUVUZWTEcxQ1FYSXlRbTFDTERKQ1FYRXlRa1pETEdkQ1FYSXlRa1VzUlVGeE1rSm5RanRCUVVNdlFpeGxRVUZQUVN4cFFrRkJhVUpETEUxQlFYaENPMEZCUTBnc1MwRjJNa0pyUWpzN08wRkJlVEpDYmtJN1FVRkRRVHM3T3pzN096czdPenRCUVZWQlF5eFZRWEF6UW0xQ0xHdENRVzh6UWxoRExHRkJjRE5DVnl4RlFXOHpRa2xETEZkQmNETkNTaXhGUVc4elFtbENReXhSUVhBelFtcENMRVZCYnpOQ01rSTdRVUZETVVNc1dVRkJTU3hMUVVGTE0wVXNUVUZCVkN4RlFVRnBRanRCUVVOaUxHbENRVUZMUVN4TlFVRk1MRU5CUVZrMFJTeEpRVUZhTEVOQlFXbENTaXhOUVVGcVFpeERRVUYzUWtNc1lVRkJlRUlzUlVGQmRVTkRMRmRCUVhaRExFVkJRVzlFUXl4UlFVRndSRHRCUVVOSU8wRkJRMG9zUzBGNE0wSnJRanM3TzBGQk1ETkNia0k3T3pzN096czdPenM3TzBGQlYwRjJTeXhuUWtGeU5FSnRRaXgzUWtGeE5FSk1NRVFzVlVGeU5FSkxMRVZCY1RSQ1QzWkdMRWxCY2pSQ1VDeEZRWEUwUW1FNFFpeEpRWEkwUW1Jc1JVRnhORUp0UWpzN1FVRkZiRU1zWVVGQlN6SkRMRlZCUVV3c1IwRkJhMEl6UXl4UFFVRlBMRU5CUVZBc1IwRkJWeXhEUVVFM1FqdEJRVU5CTEdGQlFVdE9MR05CUVV3c1IwRkJjMEo0UWl4SlFVRjBRanM3UVVGRlFTeFpRVUZKTEV0QlFVdDFRaXhwUWtGQlRDeEZRVUZLTEVWQlFUaENPMEZCUXpGQ0xHZENRVUZKWjBVc1pVRkJaU3hEUVVGdVFpeEZRVUZ6UWp0QlFVTnNRbmhITEcxQ1FVRkhlVWdzU1VGQlNDeERRVUZSTEc5RVFVRlNPMEZCUTBnN1FVRkRSQ3huUWtGQlNTeERRVUZETEV0QlFVdHNReXhqUVVGV0xFVkJRVEJDTEU5QlFVOHNTVUZCVUR0QlFVTXhRaXhuUWtGQlNUQkNMRkZCUVZFc1MwRkJTekZDTEdOQlFVd3NRMEZCYjBKblNTeHBRa0ZCY0VJc1EwRkJjME1zUzBGQlN6Tk1MRmxCUVV3c1EwRkJhMEpuUnl4TFFVRjRSQ3hGUVVFclJETkhMRWxCUVM5RUxFTkJRVm83UVVGRFFTeG5Ra0ZCU1N4RFFVRkRaMGNzUzBGQlRDeEZRVUZaTzBGQlExSkJMSGRDUVVGUkxFdEJRVXN4UWl4alFVRk1MRU5CUVc5Q2FVa3NhMEpCUVhCQ0xFTkJRWFZETEV0QlFVczFUQ3haUVVGTUxFTkJRV3RDWjBjc1MwRkJla1FzUlVGQlowVXpSeXhKUVVGb1JTeERRVUZTTzBGQlEwZzdRVUZEUkN4blFrRkJTV2RITEV0QlFVb3NSVUZCVnp0QlFVTlFMSEZDUVVGTGRFSXNZMEZCVEN4SFFVRnpRaXhMUVVGMFFqdEJRVU5CTEhGQ1FVRkxVaXhSUVVGTUxFZEJRV2RDTEVOQlFXaENPMEZCUTBFc2NVSkJRVXRETEZWQlFVd3NSMEZCYTBJc1EwRkJiRUk3UVVGRFFTeHhRa0ZCUzBNc1YwRkJUQ3hIUVVGdFFqUkNMRXRCUVc1Q08wRkJRMEVzY1VKQlFVczFRaXhYUVVGTUxFTkJRV2xDTWtVc1lVRkJha0lzUTBGQkswSXNRMEZCTDBJN1FVRkRRU3h4UWtGQlN6RkZMRk5CUVV3c1IwRkJhVUlzUzBGQlMwUXNWMEZCVEN4RFFVRnBRalJGTEUxQlFXcENMRU5CUVhkQ0xFTkJRWGhDTEVOQlFXcENPMEZCUTBnN1FVRkRTaXhUUVdwQ1JDeE5RV2xDVHp0QlFVTklMR2RDUVVGSkxFdEJRVXR1UlN4VFFVRlVMRVZCUVc5Q08wRkJRMmhDTEc5Q1FVRkplRVFzV1VGQldTeExRVUZMZDBRc1UwRkJUQ3hEUVVGbGQwZ3NTVUZCWml4RFFVRnZRa2NzWVVGQmNFSXNRMEZCYTBONFRTeEpRVUZzUXl4RFFVRm9RanRCUVVOQkxHOUNRVUZKTEVOQlFVTnhRaXhUUVVGTUxFVkJRV2RDTzBGQlExcDBReXgxUWtGQlJ6Qk9MRXRCUVVnc1EwRkJVeXhKUVVGVUxFVkJRV1Y2VFN4SlFVRm1PMEZCUTBFc01rSkJRVThzU1VGQlVEdEJRVU5JTzBGQlEwUXNiMEpCUVVrd1RTeE5RVUZOTEV0QlFVdHFSaXhOUVVGTUxFTkJRVmxyUml4blFrRkJXaXhEUVVFMlFuQklMRlZCUVRkQ0xFVkJRWGxEYkVVc1UwRkJla01zUlVGQmIwUlRMRWxCUVhCRUxFTkJRVlk3UVVGRFFTeHhRa0ZCU3pKR0xFMUJRVXdzUTBGQldYZERMRXRCUVZvc1EwRkJhMElzUzBGQlMzQkdMRk5CUVhaQ08wRkJRMEVzZFVKQlFVODJTQ3hIUVVGUU8wRkJRMGc3UVVGRFNqdEJRVU5FTEdWQlFVOHNTVUZCVUR0QlFVTklMRXRCZURaQ2EwSTdPenRCUVRBMlFtNUNPenM3T3pzN096czdPenM3UVVGWlFVVXNaMEpCZERkQ2JVSXNkMEpCY3pkQ1RISklMRlZCZERkQ1N5eEZRWE0zUWs5MlJpeEpRWFEzUWxBc1JVRnpOMEpoT0VJc1NVRjBOMEppTEVWQmN6ZENiVUp2U0N4TFFYUTNRbTVDTEVWQmN6ZENNRUk3UVVGRGVrTkJMR2RDUVVGUlFTeFRRVUZUTEVOQlFXcENPMEZCUTBFc1dVRkJTU3hMUVVGTE0wZ3NhVUpCUVV3c1JVRkJTaXhGUVVFNFFqdEJRVU14UWl4blFrRkJTV2RGTEdWQlFXVXNRMEZCYmtJc1JVRkJjMEk3UVVGRGJFSjRSeXh0UWtGQlIzbElMRWxCUVVnc1EwRkJVU3h2UkVGQlVqdEJRVU5JTzBGQlEwUXNhVUpCUVV0cVF5eGxRVUZNTEVOQlFYRkNjMGtzU1VGQmNrSXNRMEZCTUVJc1JVRkJRMmhMTEdWQlFXZENOME1zU1VGQmFrSXNSVUZCZFVJNFFpeE5RVUZOUVN4SlFVRTNRaXhGUVVGdFEyOUlMRTlCUVZGQkxFdEJRVE5ETEVWQlFURkNPMEZCUTBnc1UwRk1SQ3hOUVV0UE8wRkJRMGdzWjBKQlFVa3NTMEZCUzNKRkxGTkJRVlFzUlVGQmIwSTdRVUZEYUVJc2IwSkJRVWw0UkN4WlFVRlpMRXRCUVV0M1JDeFRRVUZNTEVOQlFXVjNTQ3hKUVVGbUxFTkJRVzlDUnl4aFFVRndRaXhEUVVGclEzaE5MRWxCUVd4RExFTkJRV2hDTzBGQlEwRXNiMEpCUVVrc1EwRkJRM0ZDTEZOQlFVd3NSVUZCWjBJN1FVRkRXblJETEhWQ1FVRkhNRTRzUzBGQlNDeERRVUZUTEVsQlFWUXNSVUZCWlhwTkxFbEJRV1k3UVVGRFFTd3lRa0ZCVHl4SlFVRlFPMEZCUTBnN1FVRkRSQ3gxUWtGQlR5eExRVUZMZVVnc1RVRkJUQ3hEUVVGWmNVWXNaMEpCUVZvc1EwRkJOa0oyU0N4VlFVRTNRaXhGUVVGNVEyeEZMRk5CUVhwRExFVkJRVzlFVXl4SlFVRndSQ3hGUVVFd1JHOUlMRXRCUVRGRUxFTkJRVkE3UVVGRFNEdEJRVU5LTzBGQlEwUXNaVUZCVHl4SlFVRlFPMEZCUTBnc1MwRjRPRUpyUWpzN08wRkJNRGhDYmtJN096czdPenM3UVVGUFFYTkVMR2xDUVdvNVFtMUNMSGxDUVdrNVFrcDRUU3hKUVdvNVFra3NSVUZwT1VKRk8wRkJRMnBDTEZsQlFVa3NTMEZCU3paRkxGTkJRVlFzUlVGQmIwSTdRVUZEYUVJc2JVSkJRVThzUzBGQlMwRXNVMEZCVEN4RFFVRmxkMGdzU1VGQlppeERRVUZ2UWtjc1lVRkJjRUlzUTBGQmEwTjRUU3hKUVVGc1F5eERRVUZRTzBGQlEwZzdRVUZEUkN4bFFVRlBMRWxCUVZBN1FVRkRTQ3hMUVhRNVFtdENPenM3UVVGM09VSnVRanM3T3pzN096czdPMEZCVTBFd1FpeGpRV29yUW0xQ0xITkNRV2tyUWxBMlJDeFZRV29yUWs4c1JVRnBLMEpMTzBGQlEzQkNMRmxCUVVrc1MwRkJTMmhGTEdsQ1FVRk1MRVZCUVVvc1JVRkJPRUk3UVVGRE1VSjRReXhsUVVGSGVVZ3NTVUZCU0N4RFFVRlJMREpFUVVGU08wRkJRMGdzVTBGR1JDeE5RVVZQTzBGQlEwZ3NaMEpCUVVrc1MwRkJTMmxDTEUxQlFWUXNSVUZCYVVJN1FVRkRZaXgxUWtGQlR5eExRVUZMUVN4TlFVRk1MRU5CUVZrdlJpeFZRVUZhTEVOQlFYVkNOa1FzVlVGQmRrSXNRMEZCVUR0QlFVTklPMEZCUTBvN1FVRkRSQ3hsUVVGUExFbEJRVkE3UVVGRFNDeExRVEVyUW10Q096czdRVUUwSzBKdVFqczdPenM3UVVGTFFYZElMR1ZCYWk5Q2JVSXNlVUpCYVM5Q1NqdEJRVU5ZTEZsQlFVa3NTMEZCUzNoTUxHbENRVUZNTEVWQlFVb3NSVUZCT0VJN1FVRkRNVUo0UXl4bFFVRkhlVWdzU1VGQlNDeERRVUZSTERSRVFVRlNPMEZCUTBnc1UwRkdSQ3hOUVVWUE8wRkJRMGdzWjBKQlFVa3NTMEZCUzJsQ0xFMUJRVlFzUlVGQmFVSTdRVUZEWWl4eFFrRkJTMEVzVFVGQlRDeERRVUZaYzBZc1YwRkJXanRCUVVOSU8wRkJRMG83UVVGRFNpeExRWG92UW10Q096czdRVUV5TDBKdVFqczdPenM3TzBGQlRVRm9UQ3hqUVdwblEyMUNMSE5DUVdsblExQjNSQ3hWUVdwblEwOHNSVUZwWjBOTE8wRkJRM0JDTEZsQlFVa3NTMEZCUzJoRkxHbENRVUZNTEVWQlFVb3NSVUZCT0VJN1FVRkRNVUo0UXl4bFFVRkhlVWdzU1VGQlNDeERRVUZSTERKRVFVRlNPMEZCUTBnc1UwRkdSQ3hOUVVWUE8wRkJRMGdzWjBKQlFVa3NTMEZCUzJsQ0xFMUJRVlFzUlVGQmFVSTdRVUZEWWl4eFFrRkJTMEVzVFVGQlRDeERRVUZaTVVZc1ZVRkJXaXhEUVVGMVFuZEVMRlZCUVhaQ08wRkJRMEVzYjBKQlFVbHdSaXhoUVVGaExFTkJRVU53UWl4SFFVRkhNRVFzVFVGQlNDeERRVUZWUXl4VFFVRTFRaXhGUVVGMVF6dEJRVU51UXl4NVFrRkJTeXRGTEUxQlFVd3NRMEZCV1d0Q0xFMUJRVm9zUTBGQmJVSXNRMEZCYmtJN1FVRkRTRHRCUVVOS08wRkJRMG83UVVGRFNpeExRVFZuUTJ0Q096czdRVUU0WjBOdVFqczdPenM3TzBGQlRVRnhSU3h2UWtGd2FFTnRRaXcwUWtGdmFFTkVReXhSUVhCb1EwTXNSVUZ2YUVOVE8wRkJRM2hDTEdGQlFVdERMR1ZCUVV3N1FVRkRRU3hoUVVGTGJra3NVMEZCVEN4RFFVRmxOa1VzUzBGQlppeEhRVUYxUW5GRUxGRkJRWFpDTzBGQlEwZ3NTMEYyYUVOclFqczdPMEZCZVdoRGJrSTdPenM3T3p0QlFVMUJSU3gzUWtFdmFFTnRRaXhuUTBFcmFFTkhSaXhSUVM5b1EwZ3NSVUVyYUVOaE8wRkJRelZDTEdGQlFVdERMR1ZCUVV3N1FVRkRRU3hoUVVGTGJra3NVMEZCVEN4RFFVRmxjVWtzVTBGQlppeEhRVUV5UWtnc1VVRkJNMEk3UVVGRFNDeExRV3hwUTJ0Q096czdRVUZ2YVVOdVFqczdPenM3TzBGQlRVRkpMR3RDUVRGcFEyMUNMREJDUVRCcFEwaEtMRkZCTVdsRFJ5eEZRVEJwUTA4N1FVRkRkRUlzWVVGQlMwTXNaVUZCVER0QlFVTkJMR0ZCUVV0dVNTeFRRVUZNTEVOQlFXVjVSU3hIUVVGbUxFZEJRWEZDZVVRc1VVRkJja0k3UVVGRFNDeExRVGRwUTJ0Q096czdRVUVyYVVOdVFqczdPenM3TzBGQlRVRkxMSE5DUVhKcVEyMUNMRGhDUVhGcVEwTk1MRkZCY21wRFJDeEZRWEZxUTFjN1FVRkRNVUlzWVVGQlMwTXNaVUZCVER0QlFVTkJMR0ZCUVV0dVNTeFRRVUZNTEVOQlFXVjNTU3hQUVVGbUxFZEJRWGxDVGl4UlFVRjZRanRCUVVOSUxFdEJlR3BEYTBJN096dEJRVEJxUTI1Q096czdPenM3UVVGTlFVOHNkVUpCYUd0RGJVSXNLMEpCWjJ0RFJWQXNVVUZvYTBOR0xFVkJaMnREV1R0QlFVTXpRaXhoUVVGTFF5eGxRVUZNTzBGQlEwRXNZVUZCUzI1SkxGTkJRVXdzUTBGQlpYZEZMRkZCUVdZc1IwRkJNRUl3UkN4UlFVRXhRanRCUVVOSUxFdEJibXREYTBJN096dEJRWEZyUTI1Q096czdPenM3UVVGTlFWRXNiMEpCTTJ0RGJVSXNORUpCTW10RFJGSXNVVUV6YTBORExFVkJNbXREVXp0QlFVTjRRaXhoUVVGTFF5eGxRVUZNTzBGQlEwRXNZVUZCUzI1SkxGTkJRVXdzUTBGQlpUSkpMRXRCUVdZc1IwRkJkVUpVTEZGQlFYWkNPMEZCUTBnc1MwRTVhME5yUWpzN08wRkJaMnhEYmtJN096czdPenM3UVVGUFFWVXNlVUpCZG14RGJVSXNhVU5CZFd4RFNXeE5MRXRCZG14RFNpeEZRWFZzUTFkM1RDeFJRWFpzUTFnc1JVRjFiRU54UWp0QlFVTndRekZQTERSQ1FVRnZRbkZRTEZsQlFYQkNMRU5CUVdsRGJrMHNTMEZCYWtNc1JVRkJkME50U1N4TFFVRjRReXhIUVVGblJIRkVMRkZCUVdoRU8wRkJRMGdzUzBGNmJFTnJRanM3TzBGQk1teERia0k3T3pzN096czdRVUZQUVZrc05rSkJiRzFEYlVJc2NVTkJhMjFEVVhCTkxFdEJiRzFEVWl4RlFXdHRRMlYzVEN4UlFXeHRRMllzUlVGcmJVTjVRanRCUVVONFF6RlBMRFJDUVVGdlFuRlFMRmxCUVhCQ0xFTkJRV2xEYmswc1MwRkJha01zUlVGQmQwTXlUQ3hUUVVGNFF5eEhRVUZ2UkVnc1VVRkJjRVE3UVVGRFNDeExRWEJ0UTJ0Q096czdRVUZ6YlVOdVFqczdPenM3T3p0QlFVOUJZU3gxUWtFM2JVTnRRaXdyUWtFMmJVTkZjazBzUzBFM2JVTkdMRVZCTm0xRFUzZE1MRkZCTjIxRFZDeEZRVFp0UTIxQ08wRkJRMnhETVU4c05FSkJRVzlDY1ZBc1dVRkJjRUlzUTBGQmFVTnVUU3hMUVVGcVF5eEZRVUYzUXl0SUxFZEJRWGhETEVkQlFUaERlVVFzVVVGQk9VTTdRVUZEU0N4TFFTOXRRMnRDT3pzN1FVRnBia051UWpzN096czdPenRCUVU5Qll5d3lRa0Y0YmtOdFFpeHRRMEYzYmtOTGRFMHNTMEY0YmtOTUxFVkJkMjVEV1hkTUxGRkJlRzVEV2l4RlFYZHVRM0ZDTzBGQlEzQkRNVThzTkVKQlFXOUNjVkFzV1VGQmNFSXNRMEZCYVVOdVRTeExRVUZxUXl4RlFVRjNRemhNTEU5QlFYaERMRWRCUVd0RVRpeFJRVUZzUkR0QlFVTklMRXRCTVc1RGEwSTdPenRCUVRSdVEyNUNPenM3T3pzN096czdRVUZUUVdVc05FSkJjbTlEYlVJc2IwTkJjVzlEVDNaTkxFdEJjbTlEVUN4RlFYRnZRMk4zVEN4UlFYSnZRMlFzUlVGeGIwTjNRanRCUVVOMlF6RlBMRFJDUVVGdlFuRlFMRmxCUVhCQ0xFTkJRV2xEYmswc1MwRkJha01zUlVGQmQwTTRTQ3hSUVVGNFF5eEhRVUZ0UkN4VlFVRlZNRVVzVlVGQlZpeEZRVUZ6UWp0QlFVTnlSU3huUWtGQlNVTXNXVUZCV1hCRkxFdEJRVXRETEV0QlFVd3NRMEZCVjJ0RkxGZEJRVmRGTEZOQlFWZ3NSMEZCZFVKR0xGZEJRVmRITEZsQlFUZERMRU5CUVdoQ08wRkJRMEZ1UWl4eFFrRkJVMmRDTEZWQlFWUXNSVUZCY1VKRExGTkJRWEpDTzBGQlEwZ3NVMEZJUkR0QlFVbElMRXRCTVc5RGEwSTdPenRCUVRSdlEyNUNPenM3T3pzN08wRkJUMEZITEhsQ1FXNXdRMjFDTEdsRFFXMXdRMGsxVFN4TFFXNXdRMG9zUlVGdGNFTlhkMHdzVVVGdWNFTllMRVZCYlhCRGNVSTdRVUZEY0VNeFR5dzBRa0ZCYjBKeFVDeFpRVUZ3UWl4RFFVRnBRMjVOTEV0QlFXcERMRVZCUVhkRGFVMHNTMEZCZUVNc1IwRkJaMFJVTEZGQlFXaEVPMEZCUTBnc1MwRnljRU5yUWpzN08wRkJkWEJEYmtJN096czdPenRCUVUxQmNVSXNXVUUzY0VOdFFpeHpRa0UyY0VOUU8wRkJRMUlzWlVGQlR5eExRVUZMTjBjc1RVRkJXanRCUVVOSUxFdEJMM0JEYTBJN096dEJRV2x4UTI1Q08wRkJRMEU0Unl4eFFrRkJhVUp3VHl4aFFVRmhMRmxCUVZrN1FVRkRkRU1zV1VGQlNYRlBMRkZCUVVvN1FVRkRRU3haUVVGSkxFdEJRVXMzVGl4WlFVRlVMRVZCUVhWQ08wRkJRMjVDTms0c2RVSkJRVmNzUzBGQlN6ZE9MRmxCUVV3c1EwRkJhMEp2UXl4WlFVRnNRaXhGUVVGWU8wRkJRMGc3UVVGRFJEdEJRVU5CZWtRc2IwSkJRVmtzU1VGQldpeEZRVUZyUWl4cFFrRkJiRUlzUlVGQmNVTnJVQ3haUVVGWmRsQXNaMEpCUVdwRU8wRkJRMGdzUzBGNmNVTnJRanRCUVRCeFEyNUNPMEZCUTBGM1VDeHhRa0ZCYVVKMFR5eGhRVUZoTEZsQlFWazdRVUZEZEVNc1dVRkJTWFZQTEZGQlFVbzdRVUZEUVN4WlFVRkpMRXRCUVVzdlRpeFpRVUZVTEVWQlFYVkNPMEZCUTI1Q0swNHNkVUpCUVZjc1MwRkJTeTlPTEZsQlFVd3NRMEZCYTBKM1FpeFpRVUZzUWl4RlFVRllPMEZCUTBnN1FVRkRSRHRCUVVOQk4wTXNiMEpCUVZrc1NVRkJXaXhGUVVGclFpeHRRa0ZCYkVJc1JVRkJkVU52VUN4WlFVRlpOVkFzWjBKQlFXNUVPMEZCUTBnc1MwRnNja05yUWpzN1FVRnZja051UW05UExHMUNRWEJ5UTIxQ0xEWkNRVzl5UTBFN1FVRkRaaXhaUVVGSkxFTkJRVU1zUzBGQlMyNUpMRk5CUVZZc1JVRkJjVUk3UVVGRGFrSXNhVUpCUVV0QkxGTkJRVXdzUjBGQmFVSXNTVUZCU1hoSExHMUNRVUZLTEVWQlFXcENPMEZCUTBFc1owSkJRVWtzUzBGQlMydEtMRTFCUVZRc1JVRkJhVUk3UVVGRFlpeHhRa0ZCUzBFc1RVRkJUQ3hEUVVGWlJTeFhRVUZhTEVOQlFYZENMRXRCUVVzMVF5eFRRVUUzUWp0QlFVTklPMEZCUTBvN1FVRkRTaXhMUVROeVEydENPMEZCTm5KRGJrSTNSQ3gxUWtFM2NrTnRRaXhwUTBFMmNrTkhPMEZCUTJ4Q0xGbEJRVWtzUTBGQlF5eExRVUZMYlVZc1NVRkJWaXhGUVVGblFqdEJRVU5hZEVnc1pVRkJSM2xJTEVsQlFVZ3NRMEZCVVN4dlJFRkJVanRCUVVOQk8wRkJRMGc3UVVGRFJDeFpRVUZKTEVOQlFVTXNTMEZCU3pkR0xGbEJRVllzUlVGQmQwSTdRVUZEY0VJc2FVSkJRVXQxU2l4aFFVRk1PMEZCUTBFN1FVRkRTRHRCUVVORUxGbEJRVWx0UXl4UFFVRlBMRXRCUVVzeFRDeFpRVUZNTEVOQlFXdENaMDhzWTBGQmJFSXNSVUZCV0R0QlFVTkJMRmxCUVVrc1EwRkJRM1JETEVsQlFVd3NSVUZCVnp0QlFVTlFMR2xDUVVGTGJrTXNZVUZCVER0QlFVTkJPMEZCUTBnN08wRkJSVVFzV1VGQlNUdEJRVU5CTEdsQ1FVRkxhRVVzWlVGQlRDeERRVUZ4UW0xSExFbEJRWEpDTzBGQlEwRXNaMEpCUVVrc1EwRkJReXhMUVVGTE9Vc3NhVUpCUVV3c1JVRkJUQ3hGUVVFclFqdEJRVU16UWl4eFFrRkJTemhHTEhGQ1FVRk1MRU5CUVRKQ0xFbEJRVWt6U1N4TlFVRk5hMUVzYTBKQlFWWXNRMEZCTmtJc1MwRkJTeTlLTEZOQlFVd3NRMEZCWlhkSUxFbEJRVFZETEVOQlFUTkNPMEZCUTBnN1FVRkRSQ3hwUWtGQlMzUk1MRmRCUVV3c1NVRkJiMElzUzBGQlMzbENMRTlCUVV3c1EwRkJZU3hMUVVGTGVrSXNWMEZCYkVJc1EwRkJjRUk3UVVGRFNDeFRRVTVFTEVOQlQwRXNUMEZCVHpoT0xFTkJRVkFzUlVGQlZUdEJRVU5PT1ZBc1pVRkJSM2xJTEVsQlFVZ3NRMEZCVVhGSkxFTkJRVkk3UVVGRFNEczdRVUZGUkN4aFFVRkxNMHdzWVVGQlRDeEhRVUZ4UWl4TFFVRkxReXhWUVVFeFFqdEJRVU5CTEdGQlFVczVRaXhUUVVGTUxFZEJRV2xDTEV0QlFVdE1MR2RDUVVGMFFqdEJRVU5JTEV0QmVuUkRhMEk3UVVFeWRFTnVRa01zY1VKQk0zUkRiVUlzSzBKQk1uUkRSVHRCUVVOcVFqdEJRVU5CTEdGQlFVdHpUaXhsUVVGTU8wRkJRMEVzWVVGQlMwVXNaVUZCVER0QlFVTkJTeXhsUVVGUFF5eExRVUZRTEVOQlFXRkRMSGRDUVVGaUxFTkJRWE5ETEUxQlFYUkRMRVZCUVRoRExFdEJRVXN6U1N4SlFVRk1MRU5CUVZVNFJTeEpRVUY0UkR0QlFVTklMRXRCYUhWRGEwSTdPenRCUVd0MVEyNUNlRWdzYzBKQlFXdENMRFJDUVVGWk8wRkJRekZDTEZsQlFVa3NTMEZCUzBNc1ZVRkJUQ3hKUVVGdFFpeExRVUZMUml4VlFVRTFRaXhGUVVGM1F6dEJRVU53UXl4blFrRkJTU3hEUVVGRExFdEJRVXQ1UWl4alFVRldMRVZCUVRCQ08wRkJRM1JDTEc5Q1FVRkpPRW9zWjBKQlFXZENMRWxCUVVsc1VTeEhRVUZIYlZFc1YwRkJVQ3hGUVVGd1FqdEJRVU5CUkN3NFFrRkJZMnBRTEVsQlFXUXNSMEZCY1VJc2FVSkJRWEpDTzBGQlEwRXNiMEpCUVVsdFVDeFpRVUZaUml4alFVRmpSeXhaUVVGa0xFTkJRVEpDZUZFc1VVRkJNMElzUTBGQmFFSTdRVUZEUVhWUkxEQkNRVUZWUlN4VFFVRldMRWRCUVhOQ0xFTkJRWFJDTzBGQlEwRkdMREJDUVVGVlJ5eFhRVUZXTEVkQlFYZENkbEVzUjBGQlIzZFJMRXRCUVVnc1EwRkJVeXhIUVVGVUxFVkJRV01zUTBGQlpDeEZRVUZwUWl4RFFVRnFRaXhGUVVGdlFpeEhRVUZ3UWl4RFFVRjRRanM3UVVGRlFTeHhRa0ZCUzNCTExHTkJRVXdzUjBGQmMwSm5TeXhUUVVGMFFqdEJRVU5JT3p0QlFVVkVMR2xDUVVGTGFFc3NZMEZCVEN4RFFVRnZRbXRDTEVsQlFYQkNMRU5CUVhsQ2JVb3NUVUZCZWtJc1IwRkJhME1zUzBGQlMyNUtMRWxCUVhaRE8wRkJRMEVzWjBKQlFVa3NTMEZCU3psRkxHbENRVUZNTEVWQlFVb3NSVUZCT0VJN1FVRkRNVUo0UXl4dFFrRkJSM2xJTEVsQlFVZ3NRMEZCVVN4blJFRkJVanRCUVVOSU8wRkJRMG9zVTBGbVJDeE5RV2RDU3l4SlFVRkpMRXRCUVV0eVFpeGpRVUZVTEVWQlFYbENPMEZCUXpGQ0xHbENRVUZMUVN4alFVRk1MRU5CUVc5Q2EwSXNTVUZCY0VJc1EwRkJlVUp0U2l4TlFVRjZRaXhIUVVGclF5eEpRVUZzUXp0QlFVTklPMEZCUTBvN1FVRjBka05yUWl4RFFVRlVMRU5CUVdRN08wRkJlWFpEUVVNc1QwRkJUME1zVDBGQlVDeEhRVUZwUWpWUUxFZEJRVWRETEZGQlFYQkNJaXdpWm1sc1pTSTZJbE5yWld4bGRHOXVMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjYmlCRGIzQjVjbWxuYUhRZ0tHTXBJREl3TVRNdE1qQXhOaUJEYUhWcmIyNW5JRlJsWTJodWIyeHZaMmxsY3lCSmJtTXVYRzRnUTI5d2VYSnBaMmgwSUNoaktTQXlNREUzTFRJd01UZ2dXR2xoYldWdUlGbGhhbWtnVTI5bWRIZGhjbVVnUTI4dUxDQk1kR1F1WEc1Y2JpQm9kSFJ3Y3pvdkwzZDNkeTVqYjJOdmN5NWpiMjB2WEc1Y2JpQlFaWEp0YVhOemFXOXVJR2x6SUdobGNtVmllU0JuY21GdWRHVmtMQ0JtY21WbElHOW1JR05vWVhKblpTd2dkRzhnWVc1NUlIQmxjbk52YmlCdlluUmhhVzVwYm1jZ1lTQmpiM0I1WEc0Z2IyWWdkR2hwY3lCemIyWjBkMkZ5WlNCaGJtUWdZWE56YjJOcFlYUmxaQ0JsYm1kcGJtVWdjMjkxY21ObElHTnZaR1VnS0hSb1pTQmNJbE52Wm5SM1lYSmxYQ0lwTENCaElHeHBiV2wwWldRc1hHNGdJSGR2Y214a2QybGtaU3dnY205NVlXeDBlUzFtY21WbExDQnViMjR0WVhOemFXZHVZV0pzWlN3Z2NtVjJiMk5oWW14bElHRnVaQ0J1YjI0dFpYaGpiSFZ6YVhabElHeHBZMlZ1YzJWY2JpQjBieUIxYzJVZ1EyOWpiM01nUTNKbFlYUnZjaUJ6YjJ4bGJIa2dkRzhnWkdWMlpXeHZjQ0JuWVcxbGN5QnZiaUI1YjNWeUlIUmhjbWRsZENCd2JHRjBabTl5YlhNdUlGbHZkU0J6YUdGc2JGeHVJQ0J1YjNRZ2RYTmxJRU52WTI5eklFTnlaV0YwYjNJZ2MyOW1kSGRoY21VZ1ptOXlJR1JsZG1Wc2IzQnBibWNnYjNSb1pYSWdjMjltZEhkaGNtVWdiM0lnZEc5dmJITWdkR2hoZENkelhHNGdJSFZ6WldRZ1ptOXlJR1JsZG1Wc2IzQnBibWNnWjJGdFpYTXVJRmx2ZFNCaGNtVWdibTkwSUdkeVlXNTBaV1FnZEc4Z2NIVmliR2x6YUN3Z1pHbHpkSEpwWW5WMFpTeGNiaUFnYzNWaWJHbGpaVzV6WlN3Z1lXNWtMMjl5SUhObGJHd2dZMjl3YVdWeklHOW1JRU52WTI5eklFTnlaV0YwYjNJdVhHNWNiaUJVYUdVZ2MyOW1kSGRoY21VZ2IzSWdkRzl2YkhNZ2FXNGdkR2hwY3lCTWFXTmxibk5sSUVGbmNtVmxiV1Z1ZENCaGNtVWdiR2xqWlc1elpXUXNJRzV2ZENCemIyeGtMbHh1SUZocFlXMWxiaUJaWVdwcElGTnZablIzWVhKbElFTnZMaXdnVEhSa0xpQnlaWE5sY25abGN5QmhiR3dnY21sbmFIUnpJRzV2ZENCbGVIQnlaWE56YkhrZ1ozSmhiblJsWkNCMGJ5QjViM1V1WEc1Y2JpQlVTRVVnVTA5R1ZGZEJVa1VnU1ZNZ1VGSlBWa2xFUlVRZ1hDSkJVeUJKVTF3aUxDQlhTVlJJVDFWVUlGZEJVbEpCVGxSWklFOUdJRUZPV1NCTFNVNUVMQ0JGV0ZCU1JWTlRJRTlTWEc0Z1NVMVFURWxGUkN3Z1NVNURURlZFU1U1SElFSlZWQ0JPVDFRZ1RFbE5TVlJGUkNCVVR5QlVTRVVnVjBGU1VrRk9WRWxGVXlCUFJpQk5SVkpEU0VGT1ZFRkNTVXhKVkZrc1hHNGdSa2xVVGtWVFV5QkdUMUlnUVNCUVFWSlVTVU5WVEVGU0lGQlZVbEJQVTBVZ1FVNUVJRTVQVGtsT1JsSkpUa2RGVFVWT1ZDNGdTVTRnVGs4Z1JWWkZUbFFnVTBoQlRFd2dWRWhGWEc0Z1FWVlVTRTlTVXlCUFVpQkRUMUJaVWtsSFNGUWdTRTlNUkVWU1V5QkNSU0JNU1VGQ1RFVWdSazlTSUVGT1dTQkRURUZKVFN3Z1JFRk5RVWRGVXlCUFVpQlBWRWhGVWx4dUlFeEpRVUpKVEVsVVdTd2dWMGhGVkVoRlVpQkpUaUJCVGlCQlExUkpUMDRnVDBZZ1EwOU9WRkpCUTFRc0lGUlBVbFFnVDFJZ1QxUklSVkpYU1ZORkxDQkJVa2xUU1U1SElFWlNUMDBzWEc0Z1QxVlVJRTlHSUU5U0lFbE9JRU5QVGs1RlExUkpUMDRnVjBsVVNDQlVTRVVnVTA5R1ZGZEJVa1VnVDFJZ1ZFaEZJRlZUUlNCUFVpQlBWRWhGVWlCRVJVRk1TVTVIVXlCSlRseHVJRlJJUlNCVFQwWlVWMEZTUlM1Y2JpQXFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xTDF4dVhHNWpiMjV6ZENCVWNtRmphMFZ1ZEhKNVRHbHpkR1Z1WlhKeklEMGdjbVZ4ZFdseVpTZ25MaTkwY21GamF5MWxiblJ5ZVMxc2FYTjBaVzVsY25NbktUdGNibU52Ym5OMElGSmxibVJsY2tOdmJYQnZibVZ1ZENBOUlISmxjWFZwY21Vb0p5NHVMeTR1TDJOdlkyOXpNbVF2WTI5eVpTOWpiMjF3YjI1bGJuUnpMME5EVW1WdVpHVnlRMjl0Y0c5dVpXNTBKeWs3WEc1amIyNXpkQ0J6Y0dsdVpTQTlJSEpsY1hWcGNtVW9KeTR2YkdsaUwzTndhVzVsSnlrN1hHNWpiMjV6ZENCTllYUmxjbWxoYkNBOUlISmxjWFZwY21Vb0p5NHVMeTR1TDJOdlkyOXpNbVF2WTI5eVpTOWhjM05sZEhNdmJXRjBaWEpwWVd3dlEwTk5ZWFJsY21saGJDY3BPMXh1WTI5dWMzUWdSM0poY0docFkzTWdQU0J5WlhGMWFYSmxLQ2N1TGk4dUxpOWpiMk52Y3pKa0wyTnZjbVV2WjNKaGNHaHBZM012WjNKaGNHaHBZM01uS1R0Y2JseHViR1YwSUZOclpXeGxkRzl1UTJGamFHVWdQU0J5WlhGMWFYSmxLQ2N1TDNOclpXeGxkRzl1TFdOaFkyaGxKeWs3WEc1Y2JpOHFLbHh1SUNvZ1FHMXZaSFZzWlNCemNGeHVJQ292WEc1c1pYUWdSR1ZtWVhWc2RGTnJhVzV6Ulc1MWJTQTlJR05qTGtWdWRXMG9leUFuWkdWbVlYVnNkQ2M2SUMweElIMHBPMXh1YkdWMElFUmxabUYxYkhSQmJtbHRjMFZ1ZFcwZ1BTQmpZeTVGYm5WdEtIc2dKenhPYjI1bFBpYzZJREFnZlNrN1hHNWNiaThxS2x4dUlDb2dJU05sYmlCRmJuVnRJR1p2Y2lCaGJtbHRZWFJwYjI0Z1kyRmphR1VnYlc5a1pTQjBlWEJsTGx4dUlDb2dJU042YUNCVGNHbHVaZVdLcU9lVXUrZThrK1d0bU9leHUrV2VpMXh1SUNvZ1FHVnVkVzBnVTJ0bGJHVjBiMjR1UVc1cGJXRjBhVzl1UTJGamFHVk5iMlJsWEc0Z0tpOWNibXhsZENCQmJtbHRZWFJwYjI1RFlXTm9aVTF2WkdVZ1BTQmpZeTVGYm5WdEtIdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1SUZSb1pTQnlaV0ZzZEdsdFpTQnRiMlJsTGx4dUlDQWdJQ0FxSUNFamVtZ2c1YTZlNXBlMjZLNmg1NjZYNXFpaDVieVA0NENDWEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUh0T2RXMWlaWEo5SUZKRlFVeFVTVTFGWEc0Z0lDQWdJQ292WEc0Z0lDQWdVa1ZCVEZSSlRVVTZJREFzWEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQlVhR1VnYzJoaGNtVmtJR05oWTJobElHMXZaR1V1WEc0Z0lDQWdJQ29nSVNONmFDRGxoYkhrdXF2bnZKUGxyWmptcUtIbHZJL2pnSUpjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnZTA1MWJXSmxjbjBnVTBoQlVrVkVYME5CUTBoRlhHNGdJQ0FnSUNvdlhHNGdJQ0FnVTBoQlVrVkVYME5CUTBoRk9pQXhMRnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1ZHaGxJSEJ5YVhaaGRHVWdZMkZqYUdVZ2JXOWtaUzVjYmlBZ0lDQWdLaUFoSTNwb0lPZW5nZWFjaWVlOGsrV3RtT2Fvb2VXOGorT0FnbHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3VG5WdFltVnlmU0JRVWtsV1FWUkZYME5CUTBoRlhHNGdJQ0FnSUNvdlhHNGdJQ0FnVUZKSlZrRlVSVjlEUVVOSVJUb2dNaUJjYm4wcE8xeHVYRzVtZFc1amRHbHZiaUJ6WlhSRmJuVnRRWFIwY2lBb2IySnFMQ0J3Y205d1RtRnRaU3dnWlc1MWJVUmxaaWtnZTF4dUlDQWdJR05qTGtOc1lYTnpMa0YwZEhJdWMyVjBRMnhoYzNOQmRIUnlLRzlpYWl3Z2NISnZjRTVoYldVc0lDZDBlWEJsSnl3Z0owVnVkVzBuS1R0Y2JpQWdJQ0JqWXk1RGJHRnpjeTVCZEhSeUxuTmxkRU5zWVhOelFYUjBjaWh2WW1vc0lIQnliM0JPWVcxbExDQW5aVzUxYlV4cGMzUW5MQ0JqWXk1RmJuVnRMbWRsZEV4cGMzUW9aVzUxYlVSbFppa3BPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlDRWpaVzVjYmlBcUlGUm9aU0J6YTJWc1pYUnZiaUJ2WmlCVGNHbHVaU0E4WW5JdlBseHVJQ29nUEdKeUx6NWNiaUFxSUNoVGEyVnNaWFJ2YmlCb1lYTWdZU0J5WldabGNtVnVZMlVnZEc4Z1lTQlRhMlZzWlhSdmJrUmhkR0VnWVc1a0lITjBiM0psY3lCMGFHVWdjM1JoZEdVZ1ptOXlJSE5yWld4bGRHOXVJR2x1YzNSaGJtTmxMRnh1SUNvZ2QyaHBZMmdnWTI5dWMybHpkSE1nYjJZZ2RHaGxJR04xY25KbGJuUWdjRzl6WlNkeklHSnZibVVnVTFKVUxDQnpiRzkwSUdOdmJHOXljeXdnWVc1a0lIZG9hV05vSUhOc2IzUWdZWFIwWVdOb2JXVnVkSE1nWVhKbElIWnBjMmxpYkdVdUlEeGljaTgrWEc0Z0tpQk5kV3gwYVhCc1pTQnphMlZzWlhSdmJuTWdZMkZ1SUhWelpTQjBhR1VnYzJGdFpTQlRhMlZzWlhSdmJrUmhkR0VnZDJocFkyZ2dhVzVqYkhWa1pYTWdZV3hzSUdGdWFXMWhkR2x2Ym5Nc0lITnJhVzV6TENCaGJtUWdZWFIwWVdOb2JXVnVkSE11S1NBOFluSXZQbHh1SUNvZ0lTTjZhRnh1SUNvZ1UzQnBibVVnNmFxbzZhcTg1WXFvNTVTN0lEeGljaTgrWEc0Z0tpQThZbkl2UGx4dUlDb2dLRk5yWld4bGRHOXVJT1dGdCthY2llV3Z1ZW1xcU9tcXZPYVZzT2FOcnVlYWhPVzhsZWVVcU9XNXR1UzRsT1d0bU9XQ3FPUzZodW1xcU9tcXZPV3VudVMraStlYWhPZUt0dWFBZ2UrOGpGeHVJQ29nNWE2RDU1U3g1YjJUNVltTjU1cUU2YXFvNmFxODVZcW81TDJjNzd5TWMyeHZkQ0Rwb3B6b2liTHZ2SXpsa296bGo2L29wNEhubW9RZ2MyeHZkQ0JoZEhSaFkyaHRaVzUwY3lEbnU0VG1pSkRqZ0lJOFluSXZQbHh1SUNvZzVhU2E1TGlxSUZOclpXeGxkRzl1SU9XUHIrUzdwZVM5ditlVXFPZWJ1T1dRak9lYWhPbXFxT21xdk9hVnNPYU5ydSs4ak9XRnR1UzRyZVdNaGVhTHJPYUpnT2FjaWVlYWhPV0txT2VVdSsrOGpPZWFydWlDcE9XU2pDQmhkSFJoWTJodFpXNTBjK09BZ2x4dUlDcGNiaUFxSUVCamJHRnpjeUJUYTJWc1pYUnZibHh1SUNvZ1FHVjRkR1Z1WkhNZ1VtVnVaR1Z5UTI5dGNHOXVaVzUwWEc0Z0tpOWNibk53TGxOclpXeGxkRzl1SUQwZ1kyTXVRMnhoYzNNb2UxeHVJQ0FnSUc1aGJXVTZJQ2R6Y0M1VGEyVnNaWFJ2Ymljc1hHNGdJQ0FnWlhoMFpXNWtjem9nVW1WdVpHVnlRMjl0Y0c5dVpXNTBMRnh1SUNBZ0lHVmthWFJ2Y2pvZ1EwTmZSVVJKVkU5U0lDWW1JSHRjYmlBZ0lDQWdJQ0FnYldWdWRUb2dKMmt4T0c0NlRVRkpUbDlOUlU1VkxtTnZiWEJ2Ym1WdWRDNXlaVzVrWlhKbGNuTXZVM0JwYm1VZ1UydGxiR1YwYjI0bkxGeHVJQ0FnSUNBZ0lDQm9aV3h3T2lBbllYQndPaTh2Wkc5amN5OW9kRzFzTDJOdmJYQnZibVZ1ZEhNdmMzQnBibVV1YUhSdGJDY3NYRzRnSUNBZ0lDQWdJQzh2Y0d4aGVVOXVSbTlqZFhNNklIUnlkV1ZjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdjM1JoZEdsamN6b2dlMXh1SUNBZ0lDQWdJQ0JCYm1sdFlYUnBiMjVEWVdOb1pVMXZaR1U2SUVGdWFXMWhkR2x2YmtOaFkyaGxUVzlrWlN4Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnY0hKdmNHVnlkR2xsY3pvZ2UxeHVJQ0FnSUNBZ0lDQXZLaXBjYmlBZ0lDQWdJQ0FnSUNvZ0lTTmxiaUJVYUdVZ2MydGxiR1YwWVd3Z1lXNXBiV0YwYVc5dUlHbHpJSEJoZFhObFpEOWNiaUFnSUNBZ0lDQWdJQ29nSVNONmFDRG9yNlhwcXFqcHFyemxpcWpubEx2bW1LL2xrS2JtbW9MbGdaempnSUpjYmlBZ0lDQWdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIQmhkWE5sWkZ4dUlDQWdJQ0FnSUNBZ0tpQkFkSGx3WlNCN1FtOXZiR1ZoYm4xY2JpQWdJQ0FnSUNBZ0lDb2dRSEpsWVdSUGJteDVYRzRnSUNBZ0lDQWdJQ0FxSUVCa1pXWmhkV3gwSUdaaGJITmxYRzRnSUNBZ0lDQWdJQ0FxTDF4dUlDQWdJQ0FnSUNCd1lYVnpaV1E2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1semFXSnNaVG9nWm1Gc2MyVmNiaUFnSUNBZ0lDQWdmU3hjYmx4dUlDQWdJQ0FnSUNBdktpcGNiaUFnSUNBZ0lDQWdJQ29nSVNObGJseHVJQ0FnSUNBZ0lDQWdLaUJVYUdVZ2MydGxiR1YwYjI0Z1pHRjBZU0JqYjI1MFlXbHVjeUIwYUdVZ2MydGxiR1YwYjI0Z2FXNW1iM0p0WVhScGIyNGdLR0pwYm1RZ2NHOXpaU0JpYjI1bGN5d2djMnh2ZEhNc0lHUnlZWGNnYjNKa1pYSXNYRzRnSUNBZ0lDQWdJQ0FxSUdGMGRHRmphRzFsYm5SekxDQnphMmx1Y3l3Z1pYUmpLU0JoYm1RZ1lXNXBiV0YwYVc5dWN5QmlkWFFnWkc5bGN5QnViM1FnYUc5c1pDQmhibmtnYzNSaGRHVXVQR0p5THo1Y2JpQWdJQ0FnSUNBZ0lDb2dUWFZzZEdsd2JHVWdjMnRsYkdWMGIyNXpJR05oYmlCemFHRnlaU0IwYUdVZ2MyRnRaU0J6YTJWc1pYUnZiaUJrWVhSaExseHVJQ0FnSUNBZ0lDQWdLaUFoSTNwb1hHNGdJQ0FnSUNBZ0lDQXFJT21xcU9tcXZPYVZzT2FOcnVXTWhlV1FxK1M2aHVtcXFPbXF2T1Mvb2VhQnIrKzhpT2U3a2VXdW11bXFxT21xdk9XS3FPUzluTys4akhOc2IzUno3N3lNNXJpeTVwK1Q2YUc2NWJxUDc3eU1YRzRnSUNBZ0lDQWdJQ0FxSUdGMGRHRmphRzFsYm5Sejc3eU01NXF1NklLazU2Mko1NjJKNzd5SjVaS001WXFvNTVTNzVMMkc1TGlONW95QjVweUo1THU3NUwyVjU0cTI1b0NCNDRDQ1BHSnlMejVjYmlBZ0lDQWdJQ0FnSUNvZzVhU2E1TGlxSUZOclpXeGxkRzl1SU9XUHIrUzdwZVdGc2VlVXFPZWJ1T1dRak9lYWhPbXFxT21xdk9hVnNPYU5ydU9BZ2x4dUlDQWdJQ0FnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlM053TGxOclpXeGxkRzl1UkdGMFlYMGdjMnRsYkdWMGIyNUVZWFJoWEc0Z0lDQWdJQ0FnSUNBcUwxeHVJQ0FnSUNBZ0lDQnphMlZzWlhSdmJrUmhkR0U2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZJRzUxYkd3c1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQnpjQzVUYTJWc1pYUnZia1JoZEdFc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1YjNScFpua2dLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaR1ZtWVhWc2RGTnJhVzRnUFNBbkp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1SbFptRjFiSFJCYm1sdFlYUnBiMjRnUFNBbkp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvUTBOZlJVUkpWRTlTS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzSmxabkpsYzJoSmJuTndaV04wYjNJb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmRYQmtZWFJsVTJ0bGJHVjBiMjVFWVhSaEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEc5dmJIUnBjRG9nUTBOZlJFVldJQ1ltSUNkcE1UaHVPa05QVFZCUFRrVk9WQzV6YTJWc1pYUnZiaTV6YTJWc1pYUnZibDlrWVhSaEoxeHVJQ0FnSUNBZ0lDQjlMRnh1WEc0Z0lDQWdJQ0FnSUM4dklPZVVzZVM2amlCemNHbHVaU0RubW9RZ2MydHBiaURtbUsvbWw2RG1zNVhrdW96bXJLSG1tNy9tamFMbm1vVHZ2SXptaVlEa3U2WGxqNnJvZzczb3JyN252YTdwdTVqb3JxVG5tb1FnYzJ0cGJseHVJQ0FnSUNBZ0lDQXZLaXBjYmlBZ0lDQWdJQ0FnSUNvZ0lTTmxiaUJVYUdVZ2JtRnRaU0J2WmlCa1pXWmhkV3gwSUhOcmFXNHVYRzRnSUNBZ0lDQWdJQ0FxSUNFamVtZ2c2YnVZNks2azU1cUU1NXF1NklLazVaQ041NmV3NDRDQ1hHNGdJQ0FnSUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3VTNSeWFXNW5mU0JrWldaaGRXeDBVMnRwYmx4dUlDQWdJQ0FnSUNBZ0tpOWNiaUFnSUNBZ0lDQWdaR1ZtWVhWc2RGTnJhVzQ2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZJQ2NuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkbWx6YVdKc1pUb2dabUZzYzJWY2JpQWdJQ0FnSUNBZ2ZTeGNibHh1SUNBZ0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBZ0lDb2dJU05sYmlCVWFHVWdibUZ0WlNCdlppQmtaV1poZFd4MElHRnVhVzFoZEdsdmJpNWNiaUFnSUNBZ0lDQWdJQ29nSVNONmFDRHB1NWpvcnFUbm1vVGxpcWpubEx2bGtJM25wN0RqZ0lKY2JpQWdJQ0FnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRUZEhKcGJtZDlJR1JsWm1GMWJIUkJibWx0WVhScGIyNWNiaUFnSUNBZ0lDQWdJQ292WEc0Z0lDQWdJQ0FnSUdSbFptRjFiSFJCYm1sdFlYUnBiMjQ2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZJQ2NuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkbWx6YVdKc1pUb2dabUZzYzJWY2JpQWdJQ0FnSUNBZ2ZTeGNibHh1SUNBZ0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBZ0lDb2dJU05sYmlCVWFHVWdibUZ0WlNCdlppQmpkWEp5Wlc1MElIQnNZWGxwYm1jZ1lXNXBiV0YwYVc5dUxseHVJQ0FnSUNBZ0lDQWdLaUFoSTNwb0lPVzlrK1dKamVhU3JlYVV2dWVhaE9XS3FPZVV1K1dRamVlbnNPT0FnbHh1SUNBZ0lDQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2UxTjBjbWx1WjMwZ1lXNXBiV0YwYVc5dVhHNGdJQ0FnSUNBZ0lDQXFMMXh1SUNBZ0lDQWdJQ0JoYm1sdFlYUnBiMjQ2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2RsZENBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVhWE5CYm1sdFlYUnBiMjVEWVdOb1pXUW9LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWVc1cGJXRjBhVzl1VG1GdFpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1pXNTBjbmtnUFNCMGFHbHpMbWRsZEVOMWNuSmxiblFvTUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQW9aVzUwY25rZ0ppWWdaVzUwY25rdVlXNXBiV0YwYVc5dUxtNWhiV1VwSUh4OElGd2lYQ0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxkQ0FvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtUmxabUYxYkhSQmJtbHRZWFJwYjI0Z1BTQjJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaWFJCYm1sdFlYUnBiMjRvTUN3Z2RtRnNkV1VzSUhSb2FYTXViRzl2Y0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tDRjBhR2x6TG1selFXNXBiV0YwYVc5dVEyRmphR1ZrS0NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpiR1ZoY2xSeVlXTnJLREFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRGUnZVMlYwZFhCUWIzTmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIWnBjMmxpYkdVNklHWmhiSE5sWEc0Z0lDQWdJQ0FnSUgwc1hHNWNiaUFnSUNBZ0lDQWdMeW9xWEc0Z0lDQWdJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQjdUblZ0WW1WeWZTQmZaR1ZtWVhWc2RGTnJhVzVKYm1SbGVGeHVJQ0FnSUNBZ0lDQWdLaTljYmlBZ0lDQWdJQ0FnWDJSbFptRjFiSFJUYTJsdVNXNWtaWGc2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2RsZENBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVjMnRsYkdWMGIyNUVZWFJoSUNZbUlIUm9hWE11WkdWbVlYVnNkRk5yYVc0cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlITnJhVzV6Ulc1MWJTQTlJSFJvYVhNdWMydGxiR1YwYjI1RVlYUmhMbWRsZEZOcmFXNXpSVzUxYlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MydHBibk5GYm5WdEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYzJ0cGJrbHVaR1Y0SUQwZ2MydHBibk5GYm5WdFczUm9hWE11WkdWbVlYVnNkRk5yYVc1ZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE5yYVc1SmJtUmxlQ0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSE5yYVc1SmJtUmxlRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z01EdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6WlhRZ0tIWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSE5yYVc1elJXNTFiVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV6YTJWc1pYUnZia1JoZEdFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJ0cGJuTkZiblZ0SUQwZ2RHaHBjeTV6YTJWc1pYUnZia1JoZEdFdVoyVjBVMnRwYm5ORmJuVnRLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2dJWE5yYVc1elJXNTFiU0FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHTmpMbVZ5Y205eVNVUW9KeWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtNWhiV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjMnRwYms1aGJXVWdQU0J6YTJsdWMwVnVkVzFiZG1Gc2RXVmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoemEybHVUbUZ0WlNBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WkdWbVlYVnNkRk5yYVc0Z1BTQnphMmx1VG1GdFpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaWFJUYTJsdUtIUm9hWE11WkdWbVlYVnNkRk5yYVc0cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1EwTmZSVVJKVkU5U0lDWW1JQ0ZqWXk1bGJtZHBibVV1YVhOUWJHRjVhVzVuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl5WldaeVpYTm9TVzV6Y0dWamRHOXlLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05qTG1WeWNtOXlTVVFvTnpVd01Td2dkR2hwY3k1dVlXMWxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nUkdWbVlYVnNkRk5yYVc1elJXNTFiU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIWnBjMmxpYkdVNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmthWE53YkdGNVRtRnRaVG9nWENKRVpXWmhkV3gwSUZOcmFXNWNJaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnZiMngwYVhBNklFTkRYMFJGVmlBbUppQW5hVEU0YmpwRFQwMVFUMDVGVGxRdWMydGxiR1YwYjI0dVpHVm1ZWFZzZEY5emEybHVKMXh1SUNBZ0lDQWdJQ0I5TEZ4dVhHNGdJQ0FnSUNBZ0lDOHZJSFpoYkhWbElHOW1JREFnY21Wd2NtVnpaVzUwY3lCdWJ5QmhibWx0WVhScGIyNWNiaUFnSUNBZ0lDQWdYMkZ1YVcxaGRHbHZia2x1WkdWNE9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCblpYUWdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmhibWx0WVhScGIyNU9ZVzFsSUQwZ0tDRkRRMTlGUkVsVVQxSWdmSHdnWTJNdVpXNW5hVzVsTG1selVHeGhlV2x1WnlrZ1B5QjBhR2x6TG1GdWFXMWhkR2x2YmlBNklIUm9hWE11WkdWbVlYVnNkRUZ1YVcxaGRHbHZianRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV6YTJWc1pYUnZia1JoZEdFZ0ppWWdZVzVwYldGMGFXOXVUbUZ0WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1lXNXBiWE5GYm5WdElEMGdkR2hwY3k1emEyVnNaWFJ2YmtSaGRHRXVaMlYwUVc1cGJYTkZiblZ0S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoaGJtbHRjMFZ1ZFcwcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJoYm1sdFNXNWtaWGdnUFNCaGJtbHRjMFZ1ZFcxYllXNXBiV0YwYVc5dVRtRnRaVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1lXNXBiVWx1WkdWNElDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1lXNXBiVWx1WkdWNE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUF3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxkQ0FvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RtRnNkV1VnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVoYm1sdFlYUnBiMjRnUFNBbkp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1lXNXBiWE5GYm5WdE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuTnJaV3hsZEc5dVJHRjBZU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhibWx0YzBWdWRXMGdQU0IwYUdsekxuTnJaV3hsZEc5dVJHRjBZUzVuWlhSQmJtbHRjMFZ1ZFcwb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NBaFlXNXBiWE5GYm5WdElDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWTJNdVpYSnliM0pKUkNnM05UQXlMQ0IwYUdsekxtNWhiV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZVzVwYlU1aGJXVWdQU0JoYm1sdGMwVnVkVzFiZG1Gc2RXVmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoaGJtbHRUbUZ0WlNBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WVc1cGJXRjBhVzl1SUQwZ1lXNXBiVTVoYldVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZeTVsY25KdmNrbEVLRGMxTURNc0lIUm9hWE11Ym1GdFpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nUkdWbVlYVnNkRUZ1YVcxelJXNTFiU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIWnBjMmxpYkdVNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmthWE53YkdGNVRtRnRaVG9nSjBGdWFXMWhkR2x2Ymljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYjI5c2RHbHdPaUJEUTE5RVJWWWdKaVlnSjJreE9HNDZRMDlOVUU5T1JVNVVMbk5yWld4bGRHOXVMbUZ1YVcxaGRHbHZiaWRjYmlBZ0lDQWdJQ0FnZlN4Y2JseHVJQ0FnSUNBZ0lDQXZMeUJTWldOdmNtUWdjSEpsSUdOaFkyaGxJRzF2WkdVdVhHNGdJQ0FnSUNBZ0lGOXdjbVZEWVdOb1pVMXZaR1U2SUMweExGeHVJQ0FnSUNBZ0lDQmZZMkZqYUdWTmIyUmxPaUJCYm1sdFlYUnBiMjVEWVdOb1pVMXZaR1V1VWtWQlRGUkpUVVVzWEc0Z0lDQWdJQ0FnSUY5a1pXWmhkV3gwUTJGamFHVk5iMlJsT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWldaaGRXeDBPaUF3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ1FXNXBiV0YwYVc5dVEyRmphR1ZOYjJSbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYm05MGFXWjVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEVGdWFXMWhkR2x2YmtOaFkyaGxUVzlrWlNoMGFHbHpMbDlrWldaaGRXeDBRMkZqYUdWTmIyUmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCbFpHbDBiM0pQYm14NU9pQjBjblZsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkbWx6YVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0Z1YVcxaGRHRmliR1U2SUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHbHpjR3hoZVU1aGJXVTZJRndpUVc1cGJXRjBhVzl1SUVOaFkyaGxJRTF2WkdWY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUhSdmIyeDBhWEE2SUVORFgwUkZWaUFtSmlBbmFURTRianBEVDAxUVQwNUZUbFF1YzJ0bGJHVjBiMjR1WVc1cGJXRjBhVzl1WDJOaFkyaGxYMjF2WkdVblhHNGdJQ0FnSUNBZ0lIMHNYRzVjYmlBZ0lDQWdJQ0FnTHlvcVhHNGdJQ0FnSUNBZ0lDQXFJQ0VqWlc0Z1ZFOUVUMXh1SUNBZ0lDQWdJQ0FnS2lBaEkzcG9JT2FZcitXUXB1VytxdWVPcithU3JlYVV2dVc5aytXSmplbXFxT21xdk9XS3FPZVV1K09BZ2x4dUlDQWdJQ0FnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMEp2YjJ4bFlXNTlJR3h2YjNCY2JpQWdJQ0FnSUNBZ0lDb2dRR1JsWm1GMWJIUWdkSEoxWlZ4dUlDQWdJQ0FnSUNBZ0tpOWNiaUFnSUNBZ0lDQWdiRzl2Y0RvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdWbVlYVnNkRG9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhSdmIyeDBhWEE2SUVORFgwUkZWaUFtSmlBbmFURTRianBEVDAxUVQwNUZUbFF1YzJ0bGJHVjBiMjR1Ykc5dmNDZGNiaUFnSUNBZ0lDQWdmU3hjYmx4dUlDQWdJQ0FnSUNBdktpcGNiaUFnSUNBZ0lDQWdJQ29nSVNObGJpQkpibVJwWTJGMFpYTWdkMmhsZEdobGNpQjBieUJsYm1GaWJHVWdjSEpsYlhWc2RHbHdiR2xsWkNCaGJIQm9ZUzVjYmlBZ0lDQWdJQ0FnSUNvZ1dXOTFJSE5vYjNWc1pDQmthWE5oWW14bElIUm9hWE1nYjNCMGFXOXVJSGRvWlc0Z2FXMWhaMlVuY3lCMGNtRnVjM0JoY21WdWRDQmhjbVZoSUdGd2NHVmhjbk1nZEc4Z2FHRjJaU0J2Y0dGeGRXVWdjR2w0Wld4ekxGeHVJQ0FnSUNBZ0lDQWdLaUJ2Y2lCbGJtRmliR1VnZEdocGN5QnZjSFJwYjI0Z2QyaGxiaUJwYldGblpTZHpJR2hoYkdZZ2RISmhibk53WVhKbGJuUWdZWEpsWVNCaGNIQmxZWEp6SUhSdklHSmxJR1JoY210bGJpNWNiaUFnSUNBZ0lDQWdJQ29nSVNONmFDRG1tSy9sa0tibGtLL25sS2pvdExUbG03N3Bvb1RrdVpqamdJSmNiaUFnSUNBZ0lDQWdJQ29nNWIyVDVadSs1NG1INTVxRTZZQ1A1cGlPNVl5NjVaK2Y1WWU2NTQ2dzZJbXk1WjJYNXBlMjZaeUE2S2FCNVlXejZaZXQ2SytsNllDSjZhRzU3N3lNNWIyVDVadSs1NG1INTVxRTVZMks2WUNQNXBpTzVZeTY1WitmNmFLYzZJbXk1WStZNmJ1UjVwZTI2WnlBNkthQjVaQ3Y1NVNvNksrbDZZQ0o2YUc1NDRDQ1hHNGdJQ0FnSUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3UW05dmJHVmhibjBnY0hKbGJYVnNkR2x3YkdsbFpFRnNjR2hoWEc0Z0lDQWdJQ0FnSUNBcUlFQmtaV1poZFd4MElIUnlkV1ZjYmlBZ0lDQWdJQ0FnSUNvdlhHNGdJQ0FnSUNBZ0lIQnlaVzExYkhScGNHeHBaV1JCYkhCb1lUb2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZERvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnZiMngwYVhBNklFTkRYMFJGVmlBbUppQW5hVEU0YmpwRFQwMVFUMDVGVGxRdWMydGxiR1YwYjI0dWNISmxiWFZzZEdsd2JHbGxaRUZzY0doaEoxeHVJQ0FnSUNBZ0lDQjlMRnh1WEc0Z0lDQWdJQ0FnSUM4cUtseHVJQ0FnSUNBZ0lDQWdLaUFoSTJWdUlGUm9aU0IwYVcxbElITmpZV3hsSUc5bUlIUm9hWE1nYzJ0bGJHVjBiMjR1WEc0Z0lDQWdJQ0FnSUNBcUlDRWplbWdnNWIyVDVZbU42YXFvNmFxODVMaXQ1b21BNXB5SjVZcW81NVM3NTVxRTVwZTI2WmUwNTd5cDVwUys1NDZINDRDQ1hHNGdJQ0FnSUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3VG5WdFltVnlmU0IwYVcxbFUyTmhiR1ZjYmlBZ0lDQWdJQ0FnSUNvZ1FHUmxabUYxYkhRZ01WeHVJQ0FnSUNBZ0lDQWdLaTljYmlBZ0lDQWdJQ0FnZEdsdFpWTmpZV3hsT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWldaaGRXeDBPaUF4TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkRzl2YkhScGNEb2dRME5mUkVWV0lDWW1JQ2RwTVRodU9rTlBUVkJQVGtWT1ZDNXphMlZzWlhSdmJpNTBhVzFsWDNOallXeGxKMXh1SUNBZ0lDQWdJQ0I5TEZ4dVhHNGdJQ0FnSUNBZ0lDOHFLbHh1SUNBZ0lDQWdJQ0FnS2lBaEkyVnVJRWx1WkdsallYUmxjeUIzYUdWMGFHVnlJRzl3Wlc0Z1pHVmlkV2NnYzJ4dmRITXVYRzRnSUNBZ0lDQWdJQ0FxSUNFamVtZ2c1cGl2NVpDbTVwaSs1NlM2SUhOc2IzUWc1NXFFSUdSbFluVm5JT1Mvb2VhQnIrT0FnbHh1SUNBZ0lDQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2UwSnZiMnhsWVc1OUlHUmxZblZuVTJ4dmRITmNiaUFnSUNBZ0lDQWdJQ29nUUdSbFptRjFiSFFnWm1Gc2MyVmNiaUFnSUNBZ0lDQWdJQ292WEc0Z0lDQWdJQ0FnSUdSbFluVm5VMnh2ZEhNNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2SUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pXUnBkRzl5VDI1c2VUb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJ2YjJ4MGFYQTZJRU5EWDBSRlZpQW1KaUFuYVRFNGJqcERUMDFRVDA1RlRsUXVjMnRsYkdWMGIyNHVaR1ZpZFdkZmMyeHZkSE1uTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdibTkwYVdaNUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTFjR1JoZEdWRVpXSjFaMFJ5WVhjb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTeGNibHh1SUNBZ0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBZ0lDb2dJU05sYmlCSmJtUnBZMkYwWlhNZ2QyaGxkR2hsY2lCdmNHVnVJR1JsWW5WbklHSnZibVZ6TGx4dUlDQWdJQ0FnSUNBZ0tpQWhJM3BvSU9hWXIrV1FwdWFZdnVla3VpQmliMjVsSU9lYWhDQmtaV0oxWnlEa3Y2SG1nYS9qZ0lKY2JpQWdJQ0FnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRDYjI5c1pXRnVmU0JrWldKMVowSnZibVZ6WEc0Z0lDQWdJQ0FnSUNBcUlFQmtaV1poZFd4MElHWmhiSE5sWEc0Z0lDQWdJQ0FnSUNBcUwxeHVJQ0FnSUNBZ0lDQmtaV0oxWjBKdmJtVnpPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaV1poZFd4ME9pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1ZrYVhSdmNrOXViSGs2SUhSeWRXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCMGIyOXNkR2x3T2lCRFExOUVSVllnSmlZZ0oya3hPRzQ2UTA5TlVFOU9SVTVVTG5OclpXeGxkRzl1TG1SbFluVm5YMkp2Ym1Wekp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUc1dmRHbG1lU0FvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmZFhCa1lYUmxSR1ZpZFdkRWNtRjNLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBzWEc1Y2JpQWdJQ0FnSUNBZ0x5b3FYRzRnSUNBZ0lDQWdJQ0FxSUNFalpXNGdTVzVrYVdOaGRHVnpJSGRvWlhSb1pYSWdiM0JsYmlCa1pXSjFaeUJ0WlhOb0xseHVJQ0FnSUNBZ0lDQWdLaUFoSTNwb0lPYVlyK1dRcHVhWXZ1ZWt1aUJ0WlhOb0lPZWFoQ0JrWldKMVp5RGt2NkhtZ2EvamdJSmNiaUFnSUNBZ0lDQWdJQ29nUUhCeWIzQmxjblI1SUh0Q2IyOXNaV0Z1ZlNCa1pXSjFaMDFsYzJoY2JpQWdJQ0FnSUNBZ0lDb2dRR1JsWm1GMWJIUWdabUZzYzJWY2JpQWdJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQWdJR1JsWW5WblRXVnphRG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REb2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsWkdsMGIzSlBibXg1T2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHOXZiSFJwY0RvZ1EwTmZSRVZXSUNZbUlDZHBNVGh1T2tOUFRWQlBUa1ZPVkM1emEyVnNaWFJ2Ymk1a1pXSjFaMTl0WlhOb0p5eGNiaUFnSUNBZ0lDQWdJQ0FnSUc1dmRHbG1lU0FvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmZFhCa1lYUmxSR1ZpZFdkRWNtRjNLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBzWEc1Y2JpQWdJQ0FnSUNBZ0x5b3FYRzRnSUNBZ0lDQWdJQ0FxSUNFalpXNGdSVzVoWW14bFpDQjBkMjhnWTI5c2IzSWdkR2x1ZEM1Y2JpQWdJQ0FnSUNBZ0lDb2dJU042YUNEbW1LL2xrS2Jsa0svbmxLam1uNVBvaWJMbWxZam1ucHpqZ0lKY2JpQWdJQ0FnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRDYjI5c1pXRnVmU0IxYzJWVWFXNTBYRzRnSUNBZ0lDQWdJQ0FxSUVCa1pXWmhkV3gwSUdaaGJITmxYRzRnSUNBZ0lDQWdJQ0FxTDF4dUlDQWdJQ0FnSUNCMWMyVlVhVzUwT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWldaaGRXeDBPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhSdmIyeDBhWEE2SUVORFgwUkZWaUFtSmlBbmFURTRianBEVDAxUVQwNUZUbFF1YzJ0bGJHVjBiMjR1ZFhObFgzUnBiblFuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdibTkwYVdaNUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTFjR1JoZEdWVmMyVlVhVzUwS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwc1hHNWNiaUFnSUNBZ0lDQWdMeW9xWEc0Z0lDQWdJQ0FnSUNBcUlDRWpaVzRnUlc1aFlteGxaQ0JpWVhSamFDQnRiMlJsYkN3Z2FXWWdjMnRsYkdWMGIyNGdhWE1nWTI5dGNHeGxlQ3dnWkc4Z2JtOTBJR1Z1WVdKc1pTQmlZWFJqYUN3Z2IzSWdkMmxzYkNCc2IzZGxjaUJ3WlhKbWIzSnRZVzVqWlM1Y2JpQWdJQ0FnSUNBZ0lDb2dJU042YUNEbHZJRGxrSy9sa0lqbWlibnZ2SXpscG9MbW5wem11TExtbjVQbHBLZnBoNC9ubTdqbGtJem51cm5ua0lidnZJemt1SlRudTVQbW5vVG5yb0RsalpYbm1vVHBxcWpwcXJ6bGlxam5sTHZ2dkl6bHZJRGxrSy9sa0lqbWlibmxqNi9rdTZYcG1ZM2t2WTVrY21GM1kyRnNiTys4ak9XUXB1V0ltZWl2dCtTNGplaW1nZVc4Z09XUXIrKzhqR053ZGVhMmlPaUFsK1M4bXVTNGl1V05oK09BZ2x4dUlDQWdJQ0FnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMEp2YjJ4bFlXNTlJR1Z1WVdKc1pVSmhkR05vWEc0Z0lDQWdJQ0FnSUNBcUlFQmtaV1poZFd4MElHWmhiSE5sWEc0Z0lDQWdJQ0FnSUNBcUwxeHVJQ0FnSUNBZ0lDQmxibUZpYkdWQ1lYUmphRG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REb2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1YjNScFpua2dLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM1Z3WkdGMFpVSmhkR05vS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkRzl2YkhScGNEb2dRME5mUkVWV0lDWW1JQ2RwTVRodU9rTlBUVkJQVGtWT1ZDNXphMlZzWlhSdmJpNWxibUZpYkdWa1gySmhkR05vSjF4dUlDQWdJQ0FnSUNCOUxGeHVYRzRnSUNBZ0lDQWdJQzh2SUVKbGJHOTNJSEJ5YjNCbGNuUnBaWE1nZDJsc2JDQmxabVpsWTNRZ2QyaGxiaUJqWVdOb1pTQnRiMlJsSUdseklGTklRVkpGUkY5RFFVTklSU0J2Y2lCUVVrbFdRVlJGWDBOQlEwaEZMbHh1SUNBZ0lDQWdJQ0F2THlCaFkyTjFiWFZzWVhSbElIUnBiV1ZjYmlBZ0lDQWdJQ0FnWDJGalkxUnBiV1U2SURBc1hHNGdJQ0FnSUNBZ0lDOHZJRkJzWVhrZ2RHbHRaWE1nWTI5MWJuUmxjbHh1SUNBZ0lDQWdJQ0JmY0d4aGVVTnZkVzUwT2lBd0xGeHVJQ0FnSUNBZ0lDQXZMeUJHY21GdFpTQmpZV05vWlZ4dUlDQWdJQ0FnSUNCZlpuSmhiV1ZEWVdOb1pUb2diblZzYkN4Y2JpQWdJQ0FnSUNBZ0x5OGdRM1Z5SUdaeVlXMWxYRzRnSUNBZ0lDQWdJRjlqZFhKR2NtRnRaVG9nYm5Wc2JDeGNiaUFnSUNBZ0lDQWdMeThnVTJ0bGJHVjBiMjRnWTJGamFHVmNiaUFnSUNBZ0lDQWdYM05yWld4bGRHOXVRMkZqYUdVZ09pQnVkV3hzTEZ4dUlDQWdJQ0FnSUNBdkx5QkJhVzFoZEdsdmJpQnVZVzFsWEc0Z0lDQWdJQ0FnSUY5aGJtbHRZWFJwYjI1T1lXMWxJRG9nWENKY0lpeGNiaUFnSUNBZ0lDQWdMeThnUVc1cGJXRjBhVzl1SUhGMVpYVmxYRzRnSUNBZ0lDQWdJRjloYm1sdFlYUnBiMjVSZFdWMVpTQTZJRnRkTEZ4dUlDQWdJQ0FnSUNBdkx5QklaV0ZrSUdGdWFXMWhkR2x2YmlCcGJtWnZJRzltSUZ4dUlDQWdJQ0FnSUNCZmFHVmhaRUZ1YVVsdVptOGdPaUJ1ZFd4c0xGeHVJQ0FnSUNBZ0lDQXZMeUJRYkdGNUlIUnBiV1Z6WEc0Z0lDQWdJQ0FnSUY5d2JHRjVWR2x0WlhNZ09pQXdMRnh1SUNBZ0lDQWdJQ0F2THlCSmN5QmhibWx0WVhScGIyNGdZMjl0Y0d4bGRHVXVYRzRnSUNBZ0lDQWdJRjlwYzBGdWFVTnZiWEJzWlhSbElEb2dkSEoxWlN4Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHk4Z1EwOU9VMVJTVlVOVVQxSmNiaUFnSUNCamRHOXlJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWldabVpXTjBSR1ZzWldkaGRHVWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5emEyVnNaWFJ2YmlBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM0p2YjNSQ2IyNWxJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmJHbHpkR1Z1WlhJZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlpYjNWdVpHbHVaMEp2ZUNBOUlHTmpMbkpsWTNRb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmJXRjBaWEpwWVd4RFlXTm9aU0E5SUh0OU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5a1pXSjFaMUpsYm1SbGNtVnlJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmMzUmhjblJUYkc5MFNXNWtaWGdnUFNBdE1UdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlpXNWtVMnh2ZEVsdVpHVjRJRDBnTFRFN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNOMFlYSjBSVzUwY25rZ1BTQjdZVzVwYldGMGFXOXVJRG9nZTI1aGJXVWdPaUJjSWx3aWZTd2dkSEpoWTJ0SmJtUmxlQ0E2SURCOU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5bGJtUkZiblJ5ZVNBOUlIdGhibWx0WVhScGIyNGdPaUI3Ym1GdFpTQTZJRndpWENKOUxDQjBjbUZqYTBsdVpHVjRJRG9nTUgwN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4dklHOTJaWEp5YVdSbFhHNGdJQ0FnYzJWMFRXRjBaWEpwWVd3Z0tHbHVaR1Y0TENCdFlYUmxjbWxoYkNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5emRYQmxjaWhwYm1SbGVDd2diV0YwWlhKcFlXd3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXRZWFJsY21saGJFTmhZMmhsSUQwZ2UzMDdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lGOTFjR1JoZEdWVmMyVlVhVzUwSUNncElIdGNiaUFnSUNBZ0lDQWdiR1YwSUdKaGMyVk5ZWFJsY21saGJDQTlJSFJvYVhNdVoyVjBUV0YwWlhKcFlXd29NQ2s3WEc0Z0lDQWdJQ0FnSUd4bGRDQjFjMlZVYVc1MElEMGdkR2hwY3k1MWMyVlVhVzUwSUh4OElIUm9hWE11YVhOQmJtbHRZWFJwYjI1RFlXTm9aV1FvS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLR0poYzJWTllYUmxjbWxoYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWW1GelpVMWhkR1Z5YVdGc0xtUmxabWx1WlNnblZWTkZYMVJKVGxRbkxDQjFjMlZVYVc1MEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IyWVhJZ1kyRmphR1VnUFNCMGFHbHpMbDl0WVhSbGNtbGhiRU5oWTJobE8xeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnRTMlY1SUdsdUlHTmhZMmhsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2JXRjBaWEpwWVd3Z1BTQmpZV05vWlZ0dFMyVjVYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h0WVhSbGNtbGhiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxaGRHVnlhV0ZzTG1SbFptbHVaU2duVlZORlgxUkpUbFFuTENCMWMyVlVhVzUwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JmZFhCa1lYUmxRbUYwWTJnZ0tDa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ1ltRnpaVTFoZEdWeWFXRnNJRDBnZEdocGN5NW5aWFJOWVhSbGNtbGhiQ2d3S1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLR0poYzJWTllYUmxjbWxoYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWW1GelpVMWhkR1Z5YVdGc0xtUmxabWx1WlNnblEwTmZWVk5GWDAxUFJFVk1KeXdnSVhSb2FYTXVaVzVoWW14bFFtRjBZMmdwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHeGxkQ0JqWVdOb1pTQTlJSFJvYVhNdVgyMWhkR1Z5YVdGc1EyRmphR1U3WEc0Z0lDQWdJQ0FnSUdadmNpQW9iR1YwSUcxTFpYa2dhVzRnWTJGamFHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J0WVhSbGNtbGhiQ0E5SUdOaFkyaGxXMjFMWlhsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHMWhkR1Z5YVdGc0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV0YwWlhKcFlXd3VaR1ZtYVc1bEtDZERRMTlWVTBWZlRVOUVSVXduTENBaGRHaHBjeTVsYm1GaWJHVkNZWFJqYUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxibHh1SUNBZ0lDQXFJRk5sZEhNZ2NuVnVkR2x0WlNCemEyVnNaWFJ2YmlCa1lYUmhJSFJ2SUhOd0xsTnJaV3hsZEc5dUxqeGljajVjYmlBZ0lDQWdLaUJVYUdseklHMWxkR2h2WkNCcGN5QmthV1ptWlhKbGJuUWdabkp2YlNCMGFHVWdZSE5yWld4bGRHOXVSR0YwWVdBZ2NISnZjR1Z5ZEhrdUlGUm9hWE1nYldWMGFHOWtJR2x6SUhCaGMzTmxaQ0JwYmlCMGFHVWdjbUYzSUdSaGRHRWdjSEp2ZG1sa1pXUWdZbmtnZEdobElGTndhVzVsSUhKMWJuUnBiV1VzSUdGdVpDQjBhR1VnYzJ0bGJHVjBiMjVFWVhSaElIUjVjR1VnYVhNZ2RHaGxJR0Z6YzJWMElIUjVjR1VnY0hKdmRtbGtaV1FnWW5rZ1EzSmxZWFJ2Y2k1Y2JpQWdJQ0FnS2lBaEkzcG9YRzRnSUNBZ0lDb2c2SzYrNTcydTVicVY1YkdDNkwrUTZLR001cGUyNTVTbzVZaXc1NXFFSUZOclpXeGxkRzl1UkdGMFllT0FnanhpY2o1Y2JpQWdJQ0FnS2lEb3Y1bmt1S3JtanFYbGo2UG1uSW5saUt2a3VvNGdZSE5yWld4bGRHOXVSR0YwWVdBZzViR2U1b0NuNzd5TTZMK1o1TGlxNW82bDVZK2o1THlnNVlXbDU1cUU1cGl2SUZOd2FXNWxJSEoxYm5ScGJXVWc1bytRNUw2YjU1cUU1WTZmNWFlTDVwV3c1bzJ1Nzd5TTZJQ01JSE5yWld4bGRHOXVSR0YwWVNEbm1vVG5zYnZsbm92bW1LOGdRM0psWVhSdmNpRG1qNURrdnB2bm1vVG90WVRtdXBEbnNidmxub3ZqZ0lKY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUhObGRGTnJaV3hsZEc5dVJHRjBZVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdjM0F1YzNCcGJtVXVVMnRsYkdWMGIyNUVZWFJoZlNCemEyVnNaWFJ2YmtSaGRHRmNiaUFnSUNBZ0tpOWNiaUFnSUNCelpYUlRhMlZzWlhSdmJrUmhkR0VnS0hOclpXeGxkRzl1UkdGMFlTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2MydGxiR1YwYjI1RVlYUmhMbmRwWkhSb0lDRTlJRzUxYkd3Z0ppWWdjMnRsYkdWMGIyNUVZWFJoTG1obGFXZG9kQ0FoUFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG01dlpHVXVjMlYwUTI5dWRHVnVkRk5wZW1Vb2MydGxiR1YwYjI1RVlYUmhMbmRwWkhSb0xDQnphMlZzWlhSdmJrUmhkR0V1YUdWcFoyaDBLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2doUTBOZlJVUkpWRTlTS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmWTJGamFHVk5iMlJsSUQwOVBTQkJibWx0WVhScGIyNURZV05vWlUxdlpHVXVVMGhCVWtWRVgwTkJRMGhGS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYzJ0bGJHVjBiMjVEWVdOb1pTQTlJRk5yWld4bGRHOXVRMkZqYUdVdWMyaGhjbVZrUTJGamFHVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUm9hWE11WDJOaFkyaGxUVzlrWlNBOVBUMGdRVzVwYldGMGFXOXVRMkZqYUdWTmIyUmxMbEJTU1ZaQlZFVmZRMEZEU0VVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5emEyVnNaWFJ2YmtOaFkyaGxJRDBnYm1WM0lGTnJaV3hsZEc5dVEyRmphR1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1cGMwRnVhVzFoZEdsdmJrTmhZMmhsWkNncEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1a1pXSjFaMEp2Ym1WeklIeDhJSFJvYVhNdVpHVmlkV2RUYkc5MGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05qTG5kaGNtNG9YQ0pFWldKMVp5QmliMjVsY3lCdmNpQnpiRzkwY3lCcGN5QnBiblpoYkdsa0lHbHVJR05oWTJobFpDQnRiMlJsWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhOclpXeGxkRzl1U1c1bWJ5QTlJSFJvYVhNdVgzTnJaV3hsZEc5dVEyRmphR1V1WjJWMFUydGxiR1YwYjI1RFlXTm9aU2gwYUdsekxuTnJaV3hsZEc5dVJHRjBZUzVmZFhWcFpDd2djMnRsYkdWMGIyNUVZWFJoS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzTnJaV3hsZEc5dUlEMGdjMnRsYkdWMGIyNUpibVp2TG5OclpXeGxkRzl1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlkyeHBjSEJsY2lBOUlITnJaV3hsZEc5dVNXNW1ieTVqYkdsd2NHVnlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmY205dmRFSnZibVVnUFNCMGFHbHpMbDl6YTJWc1pYUnZiaTVuWlhSU2IyOTBRbTl1WlNncE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjMnRsYkdWMGIyNGdQU0J1WlhjZ2MzQnBibVV1VTJ0bGJHVjBiMjRvYzJ0bGJHVjBiMjVFWVhSaEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMk5zYVhCd1pYSWdQU0J1WlhjZ2MzQnBibVV1VTJ0bGJHVjBiMjVEYkdsd2NHbHVaeWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmNtOXZkRUp2Ym1VZ1BTQjBhR2x6TGw5emEyVnNaWFJ2Ymk1blpYUlNiMjkwUW05dVpTZ3BPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWVdOMGFYWmhkR1ZOWVhSbGNtbGhiQ2dwTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRk5sZEhNZ2MyeHZkSE1nZG1semFXSnNaU0J5WVc1blpTNWNiaUFnSUNBZ0tpQWhJM3BvSU9pdXZ1ZTlydW1xcU9tcXZPYVBrdWFudmVXUHIraW5odWlNZytXYnRPT0FnbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdjMlYwVTJ4dmRITlNZVzVuWlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0J6ZEdGeWRGTnNiM1JKYm1SbGVGeHVJQ0FnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCbGJtUlRiRzkwU1c1a1pYaGNiaUFnSUNBZ0tpOWNiaUFnSUNCelpYUlRiRzkwYzFKaGJtZGxJQ2h6ZEdGeWRGTnNiM1JKYm1SbGVDd2daVzVrVTJ4dmRFbHVaR1Y0S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtbHpRVzVwYldGMGFXOXVRMkZqYUdWa0tDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmpMbmRoY200b1hDSlRiRzkwY3lCMmFYTnBZbXhsSUhKaGJtZGxJR05oYmlCdWIzUWdZbVVnYlc5a2FXWnBaV1FnYVc0Z1kyRmphR1ZrSUcxdlpHVXVYQ0lwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmMzUmhjblJUYkc5MFNXNWtaWGdnUFNCemRHRnlkRk5zYjNSSmJtUmxlRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJWdVpGTnNiM1JKYm1SbGVDQTlJR1Z1WkZOc2IzUkpibVJsZUR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1SUZObGRITWdZVzVwYldGMGFXOXVJSE4wWVhSbElHUmhkR0V1UEdKeVBseHVJQ0FnSUNBcUlGUm9aU0J3WVhKaGJXVjBaWElnZEhsd1pTQnBjeUI3ZXlOamNtOXpjMHhwYm10TmIyUjFiR1VnWENKemNDNXpjR2x1WlZ3aWZYMXpjQzV6Y0dsdVpYdDdMMk55YjNOelRHbHVhMDF2WkhWc1pYMTlMa0Z1YVcxaGRHbHZibE4wWVhSbFJHRjBZUzVjYmlBZ0lDQWdLaUFoSTNwb0lPaXV2dWU5cnVXS3FPZVV1K2VLdHVhQWdlYVZzT2FOcnVPQWdqeGljajVjYmlBZ0lDQWdLaURsajRMbWxiRG1tSzhnZTNzalkzSnZjM05NYVc1clRXOWtkV3hsSUZ3aWMzQXVjM0JwYm1WY0luMTljM0F1YzNCcGJtVjdleTlqY205emMweHBibXROYjJSMWJHVjlmUzVCYm1sdFlYUnBiMjVUZEdGMFpVUmhkR0hqZ0lKY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUhObGRFRnVhVzFoZEdsdmJsTjBZWFJsUkdGMFlWeHVJQ0FnSUNBcUlFQndZWEpoYlNCN2MzQXVjM0JwYm1VdVFXNXBiV0YwYVc5dVUzUmhkR1ZFWVhSaGZTQnpkR0YwWlVSaGRHRmNiaUFnSUNBZ0tpOWNiaUFnSUNCelpYUkJibWx0WVhScGIyNVRkR0YwWlVSaGRHRWdLSE4wWVhSbFJHRjBZU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1cGMwRnVhVzFoZEdsdmJrTmhZMmhsWkNncEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCall5NTNZWEp1S0Z3aUozTmxkRUZ1YVcxaGRHbHZibE4wWVhSbFJHRjBZU2NnYVc1MFpYSm1ZV05sSUdOaGJpQnViM1FnWW1VZ2FXNTJiMnRsWkNCcGJpQmpZV05vWldRZ2JXOWtaUzVjSWlrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2MzUmhkR1VnUFNCdVpYY2djM0JwYm1VdVFXNXBiV0YwYVc5dVUzUmhkR1VvYzNSaGRHVkVZWFJoS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDlzYVhOMFpXNWxjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5emRHRjBaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5emRHRjBaUzV5WlcxdmRtVk1hWE4wWlc1bGNpaDBhR2x6TGw5c2FYTjBaVzVsY2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBZWFJsTG1Ga1pFeHBjM1JsYm1WeUtIUm9hWE11WDJ4cGMzUmxibVZ5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNOMFlYUmxJRDBnYzNSaGRHVTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzh2SUVsTlVFeEZUVVZPVkZ4dUlDQWdJRjlmY0hKbGJHOWhaQ0FvS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hEUTE5RlJFbFVUMUlwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCR2JHRm5jeUE5SUdOakxrOWlhbVZqZEM1R2JHRm5jenRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDI5aWFrWnNZV2R6SUh3OUlDaEdiR0ZuY3k1SmMwRnVZMmh2Y2t4dlkydGxaQ0I4SUVac1lXZHpMa2x6VTJsNlpVeHZZMnRsWkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNKbFpuSmxjMmhKYm5Od1pXTjBiM0lvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFpoY2lCamFHbHNaSEpsYmlBOUlIUm9hWE11Ym05a1pTNWphR2xzWkhKbGJqdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBc0lHNGdQU0JqYUdsc1pISmxiaTVzWlc1bmRHZzdJR2tnUENCdU95QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCamFHbHNaQ0E5SUdOb2FXeGtjbVZ1VzJsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTm9hV3hrSUNZbUlHTm9hV3hrTGw5dVlXMWxJRDA5UFNCY0lrUkZRbFZIWDBSU1FWZGZUazlFUlZ3aUlDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05vYVd4a0xtUmxjM1J5YjNrb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzSmxjMlYwUVhOelpXMWliR1Z5S0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNWd1pHRjBaVk5yWld4bGRHOXVSR0YwWVNncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5MWNHUmhkR1ZFWldKMVowUnlZWGNvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZFhCa1lYUmxWWE5sVkdsdWRDZ3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOTFjR1JoZEdWQ1lYUmphQ2dwTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVYRzRnSUNBZ0lDb2dTWFFuY3lCaVpYTjBJSFJ2SUhObGRDQmpZV05vWlNCdGIyUmxJR0psWm05eVpTQnpaWFFnY0hKdmNHVnlkSGtnSjJSeVlXZHZia0Z6YzJWMEp5d2diM0lnZDJsc2JDQjNZWE4wWlNCemIyMWxJR053ZFNCMGFXMWxMbHh1SUNBZ0lDQXFJRWxtSUhObGRDQjBhR1VnYlc5a1pTQnBiaUJsWkdsMGIzSXNJSFJvWlc0Z2JtOGdibVZsWkNCMGJ5QjNiM0p5ZVNCaFltOTFkQ0J2Y21SbGNpQndjbTlpYkdWdExseHVJQ0FnSUNBcUlDRWplbWdnWEc0Z0lDQWdJQ29nNkl1bDVvT3o1WWlINW8yaTVyaXk1cCtUNXFpaDVieVA3N3lNNXB5QTVhVzk1WnlvNks2KzU3MnVKMlJ5WVdkdmJrRnpjMlYwSitTNWkrV0pqZSs4ak9XRmlPaXV2dWU5cnVXbHZlYTRzdWFmaythb29lVzhqKys4ak9XUXB1V0ltZWFjaWVpL2tPaWhqT2FYdHVXOGdPbVVnT09BZ2x4dUlDQWdJQ0FxSU9pTHBlV2NxT2U4bHVpK2tlUzRyZWl1dnVlOXJ1YTRzdWFmaythb29lVzhqKys4ak9XSW1lYVhvT21jZ09hTGhlVy9nK2l1dnVlOXJ1YXNvZVc2aitlYWhPbVhydW1pbU9PQWdseHVJQ0FnSUNBcUlGeHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ2MyVjBRVzVwYldGMGFXOXVRMkZqYUdWTmIyUmxYRzRnSUNBZ0lDb2dRSEJoY21GdElIdEJibWx0WVhScGIyNURZV05vWlUxdlpHVjlJR05oWTJobFRXOWtaVnh1SUNBZ0lDQXFJRUJsZUdGdGNHeGxYRzRnSUNBZ0lDb2djMnRsYkdWMGIyNHVjMlYwUVc1cGJXRjBhVzl1UTJGamFHVk5iMlJsS0hOd0xsTnJaV3hsZEc5dUxrRnVhVzFoZEdsdmJrTmhZMmhsVFc5a1pTNVRTRUZTUlVSZlEwRkRTRVVwTzF4dUlDQWdJQ0FxTDF4dUlDQWdJSE5sZEVGdWFXMWhkR2x2YmtOaFkyaGxUVzlrWlNBb1kyRmphR1ZOYjJSbEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDl3Y21WRFlXTm9aVTF2WkdVZ0lUMDlJR05oWTJobFRXOWtaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlkyRmphR1ZOYjJSbElEMGdZMkZqYUdWTmIyUmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmZFhCa1lYUmxVMnRsYkdWMGIyNUVZWFJoS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTFjR1JoZEdWVmMyVlVhVzUwS0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCWGFHVjBhR1Z5SUdsdUlHTmhZMmhsWkNCdGIyUmxMbHh1SUNBZ0lDQXFJQ0VqZW1nZzViMlQ1WW1ONXBpdjVaQ201YVNFNUxxTzU3eVQ1YTJZNXFpaDVieVA0NENDWEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0JwYzBGdWFXMWhkR2x2YmtOaFkyaGxaRnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMEp2YjJ4bFlXNTlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FYTkJibWx0WVhScGIyNURZV05vWldRZ0tDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1EwTmZSVVJKVkU5U0tTQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWpZV05vWlUxdlpHVWdJVDA5SUVGdWFXMWhkR2x2YmtOaFkyaGxUVzlrWlM1U1JVRk1WRWxOUlR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnZFhCa1lYUmxJQ2hrZENrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvUTBOZlJVUkpWRTlTS1NCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5CaGRYTmxaQ2tnY21WMGRYSnVPMXh1WEc0Z0lDQWdJQ0FnSUdSMElDbzlJSFJvYVhNdWRHbHRaVk5qWVd4bElDb2djM0F1ZEdsdFpWTmpZV3hsTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtbHpRVzVwYldGMGFXOXVRMkZqYUdWa0tDa3BJSHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnUTJGamFHVWdiVzlrWlNCaGJtUWdhR0Z6SUdGdWFXMWhkR2x2YmlCeGRXVjFaUzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOXBjMEZ1YVVOdmJYQnNaWFJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgyRnVhVzFoZEdsdmJsRjFaWFZsTG14bGJtZDBhQ0E5UFQwZ01DQW1KaUFoZEdocGN5NWZhR1ZoWkVGdWFVbHVabThwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdaeVlXMWxRMkZqYUdVZ1BTQjBhR2x6TGw5bWNtRnRaVU5oWTJobE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1puSmhiV1ZEWVdOb1pTQW1KaUJtY21GdFpVTmhZMmhsTG1selNXNTJZV3hwWkNncEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1jbUZ0WlVOaFkyaGxMblZ3WkdGMFpWUnZSbkpoYldVb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JtY21GdFpYTWdQU0JtY21GdFpVTmhZMmhsTG1aeVlXMWxjenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyTjFja1p5WVcxbElEMGdabkpoYldWelcyWnlZVzFsY3k1c1pXNW5kR2dnTFNBeFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NWZhR1ZoWkVGdWFVbHVabThwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmFHVmhaRUZ1YVVsdVptOGdQU0IwYUdsekxsOWhibWx0WVhScGIyNVJkV1YxWlM1emFHbG1kQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDloWTJOVWFXMWxJQ3M5SUdSME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOWhZMk5VYVcxbElENGdkR2hwY3k1ZmFHVmhaRUZ1YVVsdVptOHVaR1ZzWVhrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHRnVhVWx1Wm04Z1BTQjBhR2x6TGw5b1pXRmtRVzVwU1c1bWJ6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZhR1ZoWkVGdWFVbHVabThnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEVGdWFXMWhkR2x2YmlBb01Dd2dZVzVwU1c1bWJ5NWhibWx0WVhScGIyNU9ZVzFsTENCaGJtbEpibVp2TG14dmIzQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM1Z3WkdGMFpVTmhZMmhsS0dSMEtUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM1Z3WkdGMFpWSmxZV3gwYVcxbEtHUjBLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JmWlcxcGRFTmhZMmhsUTI5dGNHeGxkR1ZGZG1WdWRDQW9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1ZmJHbHpkR1Z1WlhJcElISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWlc1a1JXNTBjbmt1WVc1cGJXRjBhVzl1TG01aGJXVWdQU0IwYUdsekxsOWhibWx0WVhScGIyNU9ZVzFsTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlzYVhOMFpXNWxjaTVqYjIxd2JHVjBaU0FtSmlCMGFHbHpMbDlzYVhOMFpXNWxjaTVqYjIxd2JHVjBaU2gwYUdsekxsOWxibVJGYm5SeWVTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyeHBjM1JsYm1WeUxtVnVaQ0FtSmlCMGFHbHpMbDlzYVhOMFpXNWxjaTVsYm1Rb2RHaHBjeTVmWlc1a1JXNTBjbmtwTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JmZFhCa1lYUmxRMkZqYUdVZ0tHUjBLU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQm1jbUZ0WlVOaFkyaGxJRDBnZEdocGN5NWZabkpoYldWRFlXTm9aVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRm1jbUZ0WlVOaFkyaGxMbWx6U1c1cGRHVmtLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JzWlhRZ1puSmhiV1Z6SUQwZ1puSmhiV1ZEWVdOb1pTNW1jbUZ0WlhNN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JtY21GdFpWUnBiV1VnUFNCVGEyVnNaWFJ2YmtOaFkyaGxMa1p5WVcxbFZHbHRaVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QkJibWx0WVhScGIyNGdVM1JoY25Rc0lIUm9aU0JsZG1WdWRDQmthV1ptY21WdWRDQm1jbTl0SUdSeVlXZHZibUp2Ym1WeklHbHVibVZ5SUdWMlpXNTBMRnh1SUNBZ0lDQWdJQ0F2THlCSmRDQm9ZWE1nYm04Z1pYWmxiblFnYjJKcVpXTjBMbHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmWVdOalZHbHRaU0E5UFNBd0lDWW1JSFJvYVhNdVgzQnNZWGxEYjNWdWRDQTlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXpkR0Z5ZEVWdWRISjVMbUZ1YVcxaGRHbHZiaTV1WVcxbElEMGdkR2hwY3k1ZllXNXBiV0YwYVc5dVRtRnRaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJ4cGMzUmxibVZ5SUNZbUlIUm9hWE11WDJ4cGMzUmxibVZ5TG5OMFlYSjBJQ1ltSUhSb2FYTXVYMnhwYzNSbGJtVnlMbk4wWVhKMEtIUm9hWE11WDNOMFlYSjBSVzUwY25rcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZV05qVkdsdFpTQXJQU0JrZER0Y2JpQWdJQ0FnSUNBZ2JHVjBJR1p5WVcxbFNXUjRJRDBnVFdGMGFDNW1iRzl2Y2loMGFHbHpMbDloWTJOVWFXMWxJQzhnWm5KaGJXVlVhVzFsS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZtY21GdFpVTmhZMmhsTG1selEyOXRjR3hsZEdWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWNtRnRaVU5oWTJobExuVndaR0YwWlZSdlJuSmhiV1VvWm5KaGJXVkpaSGdwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdhV1lnS0daeVlXMWxRMkZqYUdVdWFYTkRiMjF3YkdWMFpXUWdKaVlnWm5KaGJXVkpaSGdnUGowZ1puSmhiV1Z6TG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmNHeGhlVU52ZFc1MElDc3JPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgzQnNZWGxVYVcxbGN5QStJREFnSmlZZ2RHaHBjeTVmY0d4aGVVTnZkVzUwSUQ0OUlIUm9hWE11WDNCc1lYbFVhVzFsY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJSE5sZENCbWNtRnRaU0IwYnlCbGJtUWdabkpoYldVdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWTNWeVJuSmhiV1VnUFNCbWNtRnRaWE5iWm5KaGJXVnpMbXhsYm1kMGFDQXRJREZkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMkZqWTFScGJXVWdQU0F3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM0JzWVhsRGIzVnVkQ0E5SURBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYVhOQmJtbERiMjF3YkdWMFpTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWlcxcGRFTmhZMmhsUTI5dGNHeGxkR1ZGZG1WdWRDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyRmpZMVJwYldVZ1BTQXdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1puSmhiV1ZKWkhnZ1BTQXdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWlcxcGRFTmhZMmhsUTI5dGNHeGxkR1ZGZG1WdWRDZ3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMk4xY2taeVlXMWxJRDBnWm5KaGJXVnpXMlp5WVcxbFNXUjRYVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdYM1Z3WkdGMFpWSmxZV3gwYVcxbElDaGtkQ2tnZTF4dUlDQWdJQ0FnSUNCc1pYUWdjMnRsYkdWMGIyNGdQU0IwYUdsekxsOXphMlZzWlhSdmJqdGNiaUFnSUNBZ0lDQWdiR1YwSUhOMFlYUmxJRDBnZEdocGN5NWZjM1JoZEdVN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h6YTJWc1pYUnZiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjMnRsYkdWMGIyNHVkWEJrWVhSbEtHUjBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6ZEdGMFpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4wWVhSbExuVndaR0YwWlNoa2RDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1JoZEdVdVlYQndiSGtvYzJ0bGJHVjBiMjRwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYmx4dUlDQWdJRjloWTNScGRtRjBaVTFoZEdWeWFXRnNJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxuTnJaV3hsZEc5dVJHRjBZU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1a2FYTmhZbXhsVW1WdVpHVnlLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMydGxiR1YwYjI1RVlYUmhMbVZ1YzNWeVpWUmxlSFIxY21WelRHOWhaR1ZrS0daMWJtTjBhVzl1SUNoeVpYTjFiSFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGNtVnpkV3gwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVrYVhOaFlteGxVbVZ1WkdWeUtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiV0YwWlhKcFlXd2dQU0IwYUdsekxuTm9ZWEpsWkUxaGRHVnlhV0ZzYzFzd1hUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hiV0YwWlhKcFlXd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WVhSbGNtbGhiQ0E5SUUxaGRHVnlhV0ZzTG1kbGRFbHVjM1JoYm5ScFlYUmxaRUoxYVd4MGFXNU5ZWFJsY21saGJDZ25NbVF0YzNCcGJtVW5MQ0IwYUdsektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldGMFpYSnBZV3dnUFNCTllYUmxjbWxoYkM1blpYUkpibk4wWVc1MGFXRjBaV1JOWVhSbGNtbGhiQ2h0WVhSbGNtbGhiQ3dnZEdocGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUcxaGRHVnlhV0ZzTG1SbFptbHVaU2duUTBOZlZWTkZYMDFQUkVWTUp5d2dkSEoxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXdjbVZ3WVhKbFZHOVNaVzVrWlhJb2JXRjBaWEpwWVd3cE8xeHVJQ0FnSUNBZ0lDQjlMQ0IwYUdsektUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ1gzQnlaWEJoY21WVWIxSmxibVJsY2lBb2JXRjBaWEpwWVd3cElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpYUk5ZWFJsY21saGJDZ3dMQ0J0WVhSbGNtbGhiQ2s3WEc0Z0lDQWdJQ0FnSUM4dklHOXViSGtnZDJobGJpQmpiMjF3YjI1bGJuUW5jeUJ2YmtWdVlXSnNaU0JtZFc1amRHbHZiaUJvWVhNZ1ltVmxiaUJwYm5admEyVXNJRzVsWldRZ2RHOGdaVzVoWW14bElISmxibVJsY2x4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1dWIyUmxJQ1ltSUhSb2FYTXVibTlrWlM1ZmNtVnVaR1Z5UTI5dGNHOXVaVzUwSUQwOUlIUm9hWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJXRnlhMFp2Y2xKbGJtUmxjaWgwY25WbEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQnZia1Z1WVdKc1pTQW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM04xY0dWeUtDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyRmpkR2wyWVhSbFRXRjBaWEpwWVd3b0tUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2IyNVNaWE4wYjNKbElDZ3BJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1JHVnpkSEp2ZVdWa0lHRnVaQ0J5WlhOMGIzSmxaQ0JwYmlCRlpHbDBiM0pjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZbTkxYm1ScGJtZENiM2dnUFNCall5NXlaV04wS0NrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnVTJWMGN5QjJaWEowWlhnZ1pXWm1aV04wSUdSbGJHVm5ZWFJsTGx4dUlDQWdJQ0FxSUNFamVtZ2c2SzYrNTcydTZhRzI1NEs1NVlxbzU1Uzc1THVqNTVDR1hHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCelpYUldaWEowWlhoRlptWmxZM1JFWld4bFoyRjBaVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdjM0F1Vm1WeWRHVjRSV1ptWldOMFJHVnNaV2RoZEdWOUlHVm1abVZqZEVSbGJHVm5ZWFJsWEc0Z0lDQWdJQ292WEc0Z0lDQWdjMlYwVm1WeWRHVjRSV1ptWldOMFJHVnNaV2RoZEdVZ0tHVm1abVZqZEVSbGJHVm5ZWFJsS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJWbVptVmpkRVJsYkdWbllYUmxJRDBnWldabVpXTjBSR1ZzWldkaGRHVTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHZJRkpGVGtSRlVrVlNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdUlFTnZiWEIxZEdWeklIUm9aU0IzYjNKc1pDQlRVbFFnWm5KdmJTQjBhR1VnYkc5allXd2dVMUpVSUdadmNpQmxZV05vSUdKdmJtVXVYRzRnSUNBZ0lDb2dJU042YUNEcGg0M21sckRtbTdUbWxyRG1pWURtbklucHFxanBxcnpubW9Ua3VKYm5sWXdnVkhKaGJuTm1iM0p0Nzd5TVhHNGdJQ0FnSUNvZzViMlQ2STYzNVkrV0lHSnZibVVnNTVxRTVwV3c1WUM4NXB5cTVwdTA1cGF3NXBlMjc3eU01WTJ6NVkrdjVMMi81NVNvNksrbDVZZTk1cFd3NkwrYjZLR001cHUwNXBhdzVwV3c1WUM4NDRDQ1hHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCMWNHUmhkR1ZYYjNKc1pGUnlZVzV6Wm05eWJWeHVJQ0FnSUNBcUlFQmxlR0Z0Y0d4bFhHNGdJQ0FnSUNvZ2RtRnlJR0p2Ym1VZ1BTQnpjR2x1WlM1bWFXNWtRbTl1WlNnbmFHVmhaQ2NwTzF4dUlDQWdJQ0FxSUdOakxteHZaeWhpYjI1bExuZHZjbXhrV0NrN0lDOHZJSEpsZEhWeWJpQXdPMXh1SUNBZ0lDQXFJSE53YVc1bExuVndaR0YwWlZkdmNteGtWSEpoYm5ObWIzSnRLQ2s3WEc0Z0lDQWdJQ29nWW05dVpTQTlJSE53YVc1bExtWnBibVJDYjI1bEtDZG9aV0ZrSnlrN1hHNGdJQ0FnSUNvZ1kyTXViRzluS0dKdmJtVXVkMjl5YkdSWUtUc2dMeThnY21WMGRYSnVJQzB5TXk0eE1qdGNiaUFnSUNBZ0tpOWNiaUFnSUNCMWNHUmhkR1ZYYjNKc1pGUnlZVzV6Wm05eWJTQW9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1cGMwRnVhVzFoZEdsdmJrTmhZMmhsWkNncEtTQnlaWFIxY200N1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYM05yWld4bGRHOXVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5emEyVnNaWFJ2Ymk1MWNHUmhkR1ZYYjNKc1pGUnlZVzV6Wm05eWJTZ3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdVMlYwY3lCMGFHVWdZbTl1WlhNZ1lXNWtJSE5zYjNSeklIUnZJSFJvWlNCelpYUjFjQ0J3YjNObExseHVJQ0FnSUNBcUlDRWplbWdnNkwrWTVZNmY1WWl3NkxXMzVhZUw1WXFvNUwyY1hHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCelpYUlViMU5sZEhWd1VHOXpaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lITmxkRlJ2VTJWMGRYQlFiM05sSUNncElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYM05yWld4bGRHOXVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5emEyVnNaWFJ2Ymk1elpYUlViMU5sZEhWd1VHOXpaU2dwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzVjYmlBZ0lDQWdLaUJUWlhSeklIUm9aU0JpYjI1bGN5QjBieUIwYUdVZ2MyVjBkWEFnY0c5elpTeGNiaUFnSUNBZ0tpQjFjMmx1WnlCMGFHVWdkbUZzZFdWeklHWnliMjBnZEdobElHQkNiMjVsUkdGMFlXQWdiR2x6ZENCcGJpQjBhR1VnWUZOclpXeGxkRzl1UkdGMFlXQXVYRzRnSUNBZ0lDb2dJU042YUZ4dUlDQWdJQ0FxSU9pdXZ1ZTlyaUJpYjI1bElPV0lzT2kxdCtXbmkrV0txT1M5bkZ4dUlDQWdJQ0FxSU9TOXYrZVVxQ0JUYTJWc1pYUnZia1JoZEdFZzVMaXQ1NXFFSUVKdmJtVkVZWFJoSU9XSWwraWhxT1M0cmVlYWhPV0F2T09BZ2x4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnYzJWMFFtOXVaWE5VYjFObGRIVndVRzl6WlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSE5sZEVKdmJtVnpWRzlUWlhSMWNGQnZjMlVnS0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZjMnRsYkdWMGIyNHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNOclpXeGxkRzl1TG5ObGRFSnZibVZ6Vkc5VFpYUjFjRkJ2YzJVb0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdVhHNGdJQ0FnSUNvZ1UyVjBjeUIwYUdVZ2MyeHZkSE1nZEc4Z2RHaGxJSE5sZEhWd0lIQnZjMlVzWEc0Z0lDQWdJQ29nZFhOcGJtY2dkR2hsSUhaaGJIVmxjeUJtY205dElIUm9aU0JnVTJ4dmRFUmhkR0ZnSUd4cGMzUWdhVzRnZEdobElHQlRhMlZzWlhSdmJrUmhkR0ZnTGx4dUlDQWdJQ0FxSUNFamVtaGNiaUFnSUNBZ0tpRG9ycjdudmE0Z2MyeHZkQ0RsaUxEb3RiZmxwNHZsaXFqa3ZaempnSUpjYmlBZ0lDQWdLaURrdmIvbmxLZ2dVMnRsYkdWMGIyNUVZWFJoSU9TNHJlZWFoQ0JUYkc5MFJHRjBZU0RsaUpmb29hamt1SzNubW9UbGdMempnSUpjYmlBZ0lDQWdLaUJBYldWMGFHOWtJSE5sZEZOc2IzUnpWRzlUWlhSMWNGQnZjMlZjYmlBZ0lDQWdLaTljYmlBZ0lDQnpaWFJUYkc5MGMxUnZVMlYwZFhCUWIzTmxJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgzTnJaV3hsZEc5dUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl6YTJWc1pYUnZiaTV6WlhSVGJHOTBjMVJ2VTJWMGRYQlFiM05sS0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmx4dUlDQWdJQ0FxSUZWd1pHRjBhVzVuSUdGdUlHRnVhVzFoZEdsdmJpQmpZV05vWlNCMGJ5QmpZV3hqZFd4aGRHVWdZV3hzSUdaeVlXMWxJR1JoZEdFZ2FXNGdkR2hsSUdGdWFXMWhkR2x2YmlCcGN5QmhJR052YzNRZ2FXNGdYRzRnSUNBZ0lDb2djR1Z5Wm05eWJXRnVZMlVnWkhWbElIUnZJR05oYkdOMWJHRjBhVzVuSUdGc2JDQmtZWFJoSUdsdUlHRWdjMmx1WjJ4bElHWnlZVzFsTGx4dUlDQWdJQ0FxSUZSdklIVndaR0YwWlNCMGFHVWdZMkZqYUdVc0lIVnpaU0IwYUdVZ2FXNTJZV3hwWkVGdWFXMWhkR2x2YmtOaFkyaGxJRzFsZEdodlpDQjNhWFJvSUdocFoyZ2djR1Z5Wm05eWJXRnVZMlV1WEc0Z0lDQWdJQ29nSVNONmFGeHVJQ0FnSUNBcUlPYWJ0T2FXc09hZmtPUzRxdVdLcU9lVXUrZThrK1d0bUN3ZzZhS0U2SzZoNTY2WDVZcW81NVM3NUxpdDVvbUE1cHlKNWJpbjVwV3c1bzJ1Nzd5TTU1U3g1THFPNVp5bzVZMlY1YmluNks2aDU2Nlg1b21BNXB5SjVwV3c1bzJ1Nzd5TTVvbUE1THVsNkw2RDVyYUk2SUNYNW9DbjZJTzk0NENDWEc0Z0lDQWdJQ29nNkl1bDVvT3o1cHUwNXBhdzU3eVQ1YTJZNzd5TTVZK3Y1TDIvNTVTb0lHbHVkbUZzYVdSQmJtbHRZWFJwYjI1RFlXTm9aU0RtbHJubXM1WHZ2SXpsaGJmbW5Jbm92b1BwcTVqbWdLZm9nNzNqZ0lKY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUhWd1pHRjBaVUZ1YVcxaGRHbHZia05oWTJobFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUdGdWFXMU9ZVzFsWEc0Z0lDQWdJQ292WEc0Z0lDQWdkWEJrWVhSbFFXNXBiV0YwYVc5dVEyRmphR1VnS0dGdWFXMU9ZVzFsS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NXBjMEZ1YVcxaGRHbHZia05oWTJobFpDZ3BLU0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJR3hsZENCMWRXbGtJRDBnZEdocGN5NXphMlZzWlhSdmJrUmhkR0V1WDNWMWFXUTdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDl6YTJWc1pYUnZia05oWTJobEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl6YTJWc1pYUnZia05oWTJobExuVndaR0YwWlVGdWFXMWhkR2x2YmtOaFkyaGxLSFYxYVdRc0lHRnVhVzFPWVcxbEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdVhHNGdJQ0FnSUNvZ1NXNTJZV3hwWkdGMFpYTWdkR2hsSUdGdWFXMWhkR2x2YmlCallXTm9aU3dnZDJocFkyZ2dhWE1nZEdobGJpQnlaV052YlhCMWRHVmtJRzl1SUdWaFkyZ2dabkpoYldVdUxseHVJQ0FnSUNBcUlDRWplbWhjYmlBZ0lDQWdLaURrdmIvbGlxam5sTHZudkpQbHJaamxwTEhtbFlqdnZJemt1WXZsa0k3a3ZKcmxuS2ptcjQvbHVLZnBoNDNtbHJEb3JxSG5ycGZqZ0lKY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUdsdWRtRnNhV1JCYm1sdFlYUnBiMjVEWVdOb1pWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdsdWRtRnNhV1JCYm1sdFlYUnBiMjVEWVdOb1pTQW9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1cGMwRnVhVzFoZEdsdmJrTmhZMmhsWkNncEtTQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOXphMlZzWlhSdmJrTmhZMmhsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXphMlZzWlhSdmJrTmhZMmhsTG1sdWRtRnNhV1JCYm1sdFlYUnBiMjVEWVdOb1pTaDBhR2x6TG5OclpXeGxkRzl1UkdGMFlTNWZkWFZwWkNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmx4dUlDQWdJQ0FxSUVacGJtUnpJR0VnWW05dVpTQmllU0J1WVcxbExseHVJQ0FnSUNBcUlGUm9hWE1nWkc5bGN5QmhJSE4wY21sdVp5QmpiMjF3WVhKcGMyOXVJR1p2Y2lCbGRtVnllU0JpYjI1bExqeGljajVjYmlBZ0lDQWdLaUJTWlhSMWNtNXpJR0VnZTNzalkzSnZjM05NYVc1clRXOWtkV3hsSUZ3aWMzQXVjM0JwYm1WY0luMTljM0F1YzNCcGJtVjdleTlqY205emMweHBibXROYjJSMWJHVjlmUzVDYjI1bElHOWlhbVZqZEM1Y2JpQWdJQ0FnS2lBaEkzcG9YRzRnSUNBZ0lDb2c2WUNhNkwrSDVaQ041NmV3NXArbDVvbStJR0p2Ym1YamdJSmNiaUFnSUNBZ0tpRG92NW5waDR6bHI3bm1yNC9rdUtvZ1ltOXVaU0RubW9UbGtJM25wN0RvdjV2b29Zemt1b2JscjdubXI1VGpnSUk4WW5JK1hHNGdJQ0FnSUNvZzZMK1U1WnVlNUxpQTVMaXFJSHQ3STJOeWIzTnpUR2x1YTAxdlpIVnNaU0JjSW5Od0xuTndhVzVsWENKOWZYTndMbk53YVc1bGUzc3ZZM0p2YzNOTWFXNXJUVzlrZFd4bGZYMHVRbTl1WlNEbHI3bm9zYUhqZ0lKY2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnWm1sdVpFSnZibVZjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdZbTl1WlU1aGJXVmNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdHpjQzV6Y0dsdVpTNUNiMjVsZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJR1pwYm1SQ2IyNWxJQ2hpYjI1bFRtRnRaU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1ZmMydGxiR1YwYjI0cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXphMlZzWlhSdmJpNW1hVzVrUW05dVpTaGliMjVsVG1GdFpTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzVjYmlBZ0lDQWdLaUJHYVc1a2N5QmhJSE5zYjNRZ1lua2dibUZ0WlM0Z1ZHaHBjeUJrYjJWeklHRWdjM1J5YVc1bklHTnZiWEJoY21semIyNGdabTl5SUdWMlpYSjVJSE5zYjNRdVBHSnlQbHh1SUNBZ0lDQXFJRkpsZEhWeWJuTWdZU0I3ZXlOamNtOXpjMHhwYm10TmIyUjFiR1VnWENKemNDNXpjR2x1WlZ3aWZYMXpjQzV6Y0dsdVpYdDdMMk55YjNOelRHbHVhMDF2WkhWc1pYMTlMbE5zYjNRZ2IySnFaV04wTGx4dUlDQWdJQ0FxSUNFamVtaGNiaUFnSUNBZ0tpRHBnSnJvdjRmbGtJM25wN0RtbjZYbWliNGdjMnh2ZE9PQWd1aS9tZW1Iak9XdnVlYXZqK1M0cWlCemJHOTBJT2VhaE9XUWplZW5zT2kvbStpaGpPUzZodWF2bE9pK2crT0FnanhpY2o1Y2JpQWdJQ0FnS2lEb3Y1VGxtNTdrdUlEa3VLb2dlM3NqWTNKdmMzTk1hVzVyVFc5a2RXeGxJRndpYzNBdWMzQnBibVZjSW4xOWMzQXVjM0JwYm1WN2V5OWpjbTl6YzB4cGJtdE5iMlIxYkdWOWZTNVRiRzkwSU9XdnVlaXhvZU9BZ2x4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0JtYVc1a1UyeHZkRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdVM1J5YVc1bmZTQnpiRzkwVG1GdFpWeHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UzTndMbk53YVc1bExsTnNiM1I5WEc0Z0lDQWdJQ292WEc0Z0lDQWdabWx1WkZOc2IzUWdLSE5zYjNST1lXMWxLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5emEyVnNaWFJ2YmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzTnJaV3hsZEc5dUxtWnBibVJUYkc5MEtITnNiM1JPWVcxbEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxibHh1SUNBZ0lDQXFJRVpwYm1SeklHRWdjMnRwYmlCaWVTQnVZVzFsSUdGdVpDQnRZV3RsY3lCcGRDQjBhR1VnWVdOMGFYWmxJSE5yYVc0dVhHNGdJQ0FnSUNvZ1ZHaHBjeUJrYjJWeklHRWdjM1J5YVc1bklHTnZiWEJoY21semIyNGdabTl5SUdWMlpYSjVJSE5yYVc0dVBHSnlQbHh1SUNBZ0lDQXFJRTV2ZEdVZ2RHaGhkQ0J6WlhSMGFXNW5JSFJvWlNCemEybHVJR1J2WlhNZ2JtOTBJR05vWVc1blpTQjNhR2xqYUNCaGRIUmhZMmh0Wlc1MGN5QmhjbVVnZG1semFXSnNaUzQ4WW5JK1hHNGdJQ0FnSUNvZ1VtVjBkWEp1Y3lCaElIdDdJMk55YjNOelRHbHVhMDF2WkhWc1pTQmNJbk53TG5Od2FXNWxYQ0o5ZlhOd0xuTndhVzVsZTNzdlkzSnZjM05NYVc1clRXOWtkV3hsZlgwdVUydHBiaUJ2WW1wbFkzUXVYRzRnSUNBZ0lDb2dJU042YUZ4dUlDQWdJQ0FxSU9hTWllV1FqZWVuc09hZnBlYUp2dWVhcnVpQ3BPKzhqT2EvZ09hMHUraXZwZWVhcnVpQ3BPT0FndWkvbWVtSGpPV3Z1ZWF2aitTNHF1ZWFydWlDcE9lYWhPV1FqZWVuc09pL20raWhqT1M2aHVhdmxPaStnK09BZ2p4aWNqNWNiaUFnSUNBZ0tpRG1zNmptaEkvdnZKcm9ycjdudmE3bm1xN29ncVRrdUkza3ZKcm1sTG5sajVnZ1lYUjBZV05vYldWdWRDRG5tb1RsajYvb3A0SG1nS2ZqZ0lJOFluSStYRzRnSUNBZ0lDb2c2TCtVNVp1ZTVMaUE1TGlxSUh0N0kyTnliM056VEdsdWEwMXZaSFZzWlNCY0luTndMbk53YVc1bFhDSjlmWE53TG5Od2FXNWxlM3N2WTNKdmMzTk1hVzVyVFc5a2RXeGxmWDB1VTJ0cGJpRGxyN25vc2FIamdJSmNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ2MyVjBVMnRwYmx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0J6YTJsdVRtRnRaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lITmxkRk5yYVc0Z0tITnJhVzVPWVcxbEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDl6YTJWc1pYUnZiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmMydGxiR1YwYjI0dWMyVjBVMnRwYmtKNVRtRnRaU2h6YTJsdVRtRnRaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5emEyVnNaWFJ2Ymk1elpYUlRiRzkwYzFSdlUyVjBkWEJRYjNObEtDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZEdocGN5NXBiblpoYkdsa1FXNXBiV0YwYVc5dVEyRmphR1VvS1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxibHh1SUNBZ0lDQXFJRkpsZEhWeWJuTWdkR2hsSUdGMGRHRmphRzFsYm5RZ1ptOXlJSFJvWlNCemJHOTBJR0Z1WkNCaGRIUmhZMmh0Wlc1MElHNWhiV1V1WEc0Z0lDQWdJQ29nVkdobElITnJaV3hsZEc5dUlHeHZiMnR6SUdacGNuTjBJR2x1SUdsMGN5QnphMmx1TENCMGFHVnVJR2x1SUhSb1pTQnphMlZzWlhSdmJpQmtZWFJoNG9DWmN5QmtaV1poZFd4MElITnJhVzR1UEdKeVBseHVJQ0FnSUNBcUlGSmxkSFZ5Ym5NZ1lTQjdleU5qY205emMweHBibXROYjJSMWJHVWdYQ0p6Y0M1emNHbHVaVndpZlgxemNDNXpjR2x1Wlh0N0wyTnliM056VEdsdWEwMXZaSFZzWlgxOUxrRjBkR0ZqYUcxbGJuUWdiMkpxWldOMExseHVJQ0FnSUNBcUlDRWplbWhjYmlBZ0lDQWdLaURwZ0pyb3Y0Y2djMnh2ZENEbGtvd2dZWFIwWVdOb2JXVnVkQ0RubW9UbGtJM25wN0RvanJmbGo1WWdZWFIwWVdOb2JXVnVkT09BZ2xOclpXeGxkRzl1SU9TOG1PV0ZpT2FmcGVhSnZ1V3VnK2VhaE9lYXJ1aUNwTys4ak9lRXR1V1FqdWFKamVhWXJ5QlRhMlZzWlhSdmJpQkVZWFJoSU9TNHJlbTdtT2l1cE9lYWhPZWFydWlDcE9PQWdqeGljajVjYmlBZ0lDQWdLaURvdjVUbG01N2t1SURrdUtvZ2Uzc2pZM0p2YzNOTWFXNXJUVzlrZFd4bElGd2ljM0F1YzNCcGJtVmNJbjE5YzNBdWMzQnBibVY3ZXk5amNtOXpjMHhwYm10TmIyUjFiR1Y5ZlM1QmRIUmhZMmh0Wlc1MElPV3Z1ZWl4b2VPQWdseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCblpYUkJkSFJoWTJodFpXNTBYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlITnNiM1JPWVcxbFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUdGMGRHRmphRzFsYm5ST1lXMWxYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdjM0F1YzNCcGJtVXVRWFIwWVdOb2JXVnVkSDFjYmlBZ0lDQWdLaTljYmlBZ0lDQm5aWFJCZEhSaFkyaHRaVzUwSUNoemJHOTBUbUZ0WlN3Z1lYUjBZV05vYldWdWRFNWhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgzTnJaV3hsZEc5dUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjMnRsYkdWMGIyNHVaMlYwUVhSMFlXTm9iV1Z1ZEVKNVRtRnRaU2h6Ykc5MFRtRnRaU3dnWVhSMFlXTm9iV1Z1ZEU1aGJXVXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1WEc0Z0lDQWdJQ29nVTJWMGN5QjBhR1VnWVhSMFlXTm9iV1Z1ZENCbWIzSWdkR2hsSUhOc2IzUWdZVzVrSUdGMGRHRmphRzFsYm5RZ2JtRnRaUzVjYmlBZ0lDQWdLaUJVYUdVZ2MydGxiR1YwYjI0Z2JHOXZhM01nWm1seWMzUWdhVzRnYVhSeklITnJhVzRzSUhSb1pXNGdhVzRnZEdobElITnJaV3hsZEc5dUlHUmhkR0hpZ0pseklHUmxabUYxYkhRZ2MydHBiaTVjYmlBZ0lDQWdLaUFoSTNwb1hHNGdJQ0FnSUNvZzZZQ2E2TCtISUhOc2IzUWc1WktNSUdGMGRHRmphRzFsYm5RZzU1cUU1WkNONWEyWDVwMmw2SzYrNTcydUlHRjBkR0ZqYUcxbGJuVGpnSUpjYmlBZ0lDQWdLaUJUYTJWc1pYUnZiaURrdkpqbGhZam1uNlhtaWI3bHJvUG5tb1RubXE3b2dxVHZ2SXpuaExibGtJN21pWTNtbUs4Z1UydGxiR1YwYjI0Z1JHRjBZU0RrdUszcHU1am9ycVRubW9Ubm1xN29ncVRqZ0lKY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUhObGRFRjBkR0ZqYUcxbGJuUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ2MyeHZkRTVoYldWY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnWVhSMFlXTm9iV1Z1ZEU1aGJXVmNiaUFnSUNBZ0tpOWNiaUFnSUNCelpYUkJkSFJoWTJodFpXNTBJQ2h6Ykc5MFRtRnRaU3dnWVhSMFlXTm9iV1Z1ZEU1aGJXVXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDNOclpXeGxkRzl1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXphMlZzWlhSdmJpNXpaWFJCZEhSaFkyaHRaVzUwS0hOc2IzUk9ZVzFsTENCaGRIUmhZMmh0Wlc1MFRtRnRaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RHaHBjeTVwYm5aaGJHbGtRVzVwYldGMGFXOXVRMkZqYUdVb0tUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0tpQlNaWFIxY200Z2RHaGxJSEpsYm1SbGNtVnlJRzltSUdGMGRHRmphRzFsYm5RdVhHNGdJQ0FnS2lCQWJXVjBhRzlrSUdkbGRGUmxlSFIxY21WQmRHeGhjMXh1SUNBZ0lDb2dRSEJoY21GdElIdHpjQzV6Y0dsdVpTNVNaV2RwYjI1QmRIUmhZMmh0Wlc1MGZITndhVzVsTGtKdmRXNWthVzVuUW05NFFYUjBZV05vYldWdWRIMGdjbVZuYVc5dVFYUjBZV05vYldWdWRGeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN2MzQXVjM0JwYm1VdVZHVjRkSFZ5WlVGMGJHRnpVbVZuYVc5dWZWeHVJQ0FnSUNvdlhHNGdJQ0FnWjJWMFZHVjRkSFZ5WlVGMGJHRnpJQ2h5WldkcGIyNUJkSFJoWTJodFpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ5WldkcGIyNUJkSFJoWTJodFpXNTBMbkpsWjJsdmJqdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5OGdRVTVKVFVGVVNVOU9YRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmx4dUlDQWdJQ0FxSUUxcGVDQmhjSEJzYVdWeklHRnNiQ0JyWlhsbWNtRnRaU0IyWVd4MVpYTXNYRzRnSUNBZ0lDb2dhVzUwWlhKd2IyeGhkR1ZrSUdadmNpQjBhR1VnYzNCbFkybG1hV1ZrSUhScGJXVWdZVzVrSUcxcGVHVmtJSGRwZEdnZ2RHaGxJR04xY25KbGJuUWdkbUZzZFdWekxseHVJQ0FnSUNBcUlDRWplbWdnNUxpNjVvbUE1cHlKNVlXejZaU3U1YmluNks2KzVhNmE1cmUzNVpDSTVZK0s1cmUzNVpDSTVwZTI2WmUwNzd5STVMdU81YjJUNVltTjVZQzg1YnlBNWFlTDViZXU1WUM4Nzd5SjQ0Q0NYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQnpaWFJOYVhoY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnWm5KdmJVRnVhVzFoZEdsdmJseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCMGIwRnVhVzFoZEdsdmJseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCa2RYSmhkR2x2Ymx4dUlDQWdJQ0FxTDF4dUlDQWdJSE5sZEUxcGVDQW9abkp2YlVGdWFXMWhkR2x2Yml3Z2RHOUJibWx0WVhScGIyNHNJR1IxY21GMGFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5emRHRjBaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmMzUmhkR1V1WkdGMFlTNXpaWFJOYVhnb1puSnZiVUZ1YVcxaGRHbHZiaXdnZEc5QmJtbHRZWFJwYjI0c0lHUjFjbUYwYVc5dUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdUlGTmxkQ0IwYUdVZ1kzVnljbVZ1ZENCaGJtbHRZWFJwYjI0dUlFRnVlU0J4ZFdWMVpXUWdZVzVwYldGMGFXOXVjeUJoY21VZ1kyeGxZWEpsWkM0OFluSStYRzRnSUNBZ0lDb2dVbVYwZFhKdWN5QmhJSHQ3STJOeWIzTnpUR2x1YTAxdlpIVnNaU0JjSW5Od0xuTndhVzVsWENKOWZYTndMbk53YVc1bGUzc3ZZM0p2YzNOTWFXNXJUVzlrZFd4bGZYMHVWSEpoWTJ0RmJuUnllU0J2WW1wbFkzUXVYRzRnSUNBZ0lDb2dJU042YUNEb3JyN252YTdsdlpQbGlZM2xpcWpubEx2amdJTHBtSi9saUpma3VLM25tb1RrdTd2a3ZaWG5tb1RsaXFqbmxMdmxzSWJvb3F2bXVJWHBtYVRqZ0lJOFluSStYRzRnSUNBZ0lDb2c2TCtVNVp1ZTVMaUE1TGlxSUh0N0kyTnliM056VEdsdWEwMXZaSFZzWlNCY0luTndMbk53YVc1bFhDSjlmWE53TG5Od2FXNWxlM3N2WTNKdmMzTk1hVzVyVFc5a2RXeGxmWDB1VkhKaFkydEZiblJ5ZVNEbHI3bm9zYUhqZ0lKY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUhObGRFRnVhVzFoZEdsdmJseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCMGNtRmphMGx1WkdWNFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUc1aGJXVmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwSnZiMnhsWVc1OUlHeHZiM0JjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHR6Y0M1emNHbHVaUzVVY21GamEwVnVkSEo1ZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSE5sZEVGdWFXMWhkR2x2YmlBb2RISmhZMnRKYm1SbGVDd2dibUZ0WlN3Z2JHOXZjQ2tnZTF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNCc1lYbFVhVzFsY3lBOUlHeHZiM0FnUHlBd0lEb2dNVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZVzVwYldGMGFXOXVUbUZ0WlNBOUlHNWhiV1U3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWFYTkJibWx0WVhScGIyNURZV05vWldRb0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJ5WVdOclNXNWtaWGdnSVQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWXk1M1lYSnVLRndpVkhKaFkyc2dhVzVrWlhnZ1kyRnVJRzV2ZENCbmNtVmhkR1Z5SUhSb1lXNGdNQ0JwYmlCallXTm9aV1FnYlc5a1pTNWNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdVgzTnJaV3hsZEc5dVEyRmphR1VwSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHTmhZMmhsSUQwZ2RHaHBjeTVmYzJ0bGJHVjBiMjVEWVdOb1pTNW5aWFJCYm1sdFlYUnBiMjVEWVdOb1pTaDBhR2x6TG5OclpXeGxkRzl1UkdGMFlTNWZkWFZwWkN3Z2JtRnRaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdOaFkyaGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGamFHVWdQU0IwYUdsekxsOXphMlZzWlhSdmJrTmhZMmhsTG1sdWFYUkJibWx0WVhScGIyNURZV05vWlNoMGFHbHpMbk5yWld4bGRHOXVSR0YwWVM1ZmRYVnBaQ3dnYm1GdFpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1kyRmphR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlwYzBGdWFVTnZiWEJzWlhSbElEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWVdOalZHbHRaU0E5SURBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmY0d4aGVVTnZkVzUwSUQwZ01EdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5bWNtRnRaVU5oWTJobElEMGdZMkZqYUdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWm5KaGJXVkRZV05vWlM1MWNHUmhkR1ZVYjBaeVlXMWxLREFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMk4xY2taeVlXMWxJRDBnZEdocGN5NWZabkpoYldWRFlXTm9aUzVtY21GdFpYTmJNRjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1ZmMydGxiR1YwYjI0cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWVc1cGJXRjBhVzl1SUQwZ2RHaHBjeTVmYzJ0bGJHVjBiMjR1WkdGMFlTNW1hVzVrUVc1cGJXRjBhVzl1S0c1aGJXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFlXNXBiV0YwYVc5dUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOakxteHZaMGxFS0RjMU1Ea3NJRzVoYldVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEpsY3lBOUlIUm9hWE11WDNOMFlYUmxMbk5sZEVGdWFXMWhkR2x2YmxkcGRHZ29kSEpoWTJ0SmJtUmxlQ3dnWVc1cGJXRjBhVzl1TENCc2IyOXdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXpkR0YwWlM1aGNIQnNlU2gwYUdsekxsOXphMlZzWlhSdmJpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISmxjenRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJCWkdSeklHRnVJR0Z1YVcxaGRHbHZiaUIwYnlCaVpTQndiR0Y1WldRZ1pHVnNZWGtnYzJWamIyNWtjeUJoWm5SbGNpQjBhR1VnWTNWeWNtVnVkQ0J2Y2lCc1lYTjBJSEYxWlhWbFpDQmhibWx0WVhScGIyNHVQR0p5UGx4dUlDQWdJQ0FxSUZKbGRIVnlibk1nWVNCN2V5TmpjbTl6YzB4cGJtdE5iMlIxYkdVZ1hDSnpjQzV6Y0dsdVpWd2lmWDF6Y0M1emNHbHVaWHQ3TDJOeWIzTnpUR2x1YTAxdlpIVnNaWDE5TGxSeVlXTnJSVzUwY25rZ2IySnFaV04wTGx4dUlDQWdJQ0FxSUNFamVtZ2c1cmU3NVlxZzVMaUE1TGlxNVlxbzU1Uzc1WWl3NVlxbzU1Uzc2WmlmNVlpWDViQys2WU9vNzd5TTZMK1k1WSt2NUx1bDVidTI2TCtmNW95SDVhNmE1NXFFNTZlUzVwV3c0NENDUEdKeVBseHVJQ0FnSUNBcUlPaS9sT1dibnVTNGdPUzRxaUI3ZXlOamNtOXpjMHhwYm10TmIyUjFiR1VnWENKemNDNXpjR2x1WlZ3aWZYMXpjQzV6Y0dsdVpYdDdMMk55YjNOelRHbHVhMDF2WkhWc1pYMTlMbFJ5WVdOclJXNTBjbmtnNWErNTZMR2g0NENDWEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0JoWkdSQmJtbHRZWFJwYjI1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnZEhKaFkydEpibVJsZUZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0J1WVcxbFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0Q2IyOXNaV0Z1ZlNCc2IyOXdYRzRnSUNBZ0lDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlGdGtaV3hoZVQwd1hWeHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UzTndMbk53YVc1bExsUnlZV05yUlc1MGNubDlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1lXUmtRVzVwYldGMGFXOXVJQ2gwY21GamEwbHVaR1Y0TENCdVlXMWxMQ0JzYjI5d0xDQmtaV3hoZVNrZ2UxeHVJQ0FnSUNBZ0lDQmtaV3hoZVNBOUlHUmxiR0Y1SUh4OElEQTdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbWx6UVc1cGJXRjBhVzl1UTJGamFHVmtLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGNtRmphMGx1WkdWNElDRTlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyTXVkMkZ5YmloY0lsUnlZV05ySUdsdVpHVjRJR05oYmlCdWIzUWdaM0psWVhSbGNpQjBhR0Z1SURBZ2FXNGdZMkZqYUdWa0lHMXZaR1V1WENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZllXNXBiV0YwYVc5dVVYVmxkV1V1Y0hWemFDaDdZVzVwYldGMGFXOXVUbUZ0WlNBNklHNWhiV1VzSUd4dmIzQTZJR3h2YjNBc0lHUmxiR0Y1SURvZ1pHVnNZWGw5S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDl6YTJWc1pYUnZiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmhibWx0WVhScGIyNGdQU0IwYUdsekxsOXphMlZzWlhSdmJpNWtZWFJoTG1acGJtUkJibWx0WVhScGIyNG9ibUZ0WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZoYm1sdFlYUnBiMjRwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMk11Ykc5blNVUW9OelV4TUN3Z2JtRnRaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmMzUmhkR1V1WVdSa1FXNXBiV0YwYVc5dVYybDBhQ2gwY21GamEwbHVaR1Y0TENCaGJtbHRZWFJwYjI0c0lHeHZiM0FzSUdSbGJHRjVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJHYVc1a0lHRnVhVzFoZEdsdmJpQjNhWFJvSUhOd1pXTnBabWxsWkNCdVlXMWxMbHh1SUNBZ0lDQXFJQ0VqZW1nZzVwK2w1b20rNW95SDVhNmE1WkNONTZldzU1cUU1WXFvNTVTN1hHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCbWFXNWtRVzVwYldGMGFXOXVYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlHNWhiV1ZjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUI3YzNBdWMzQnBibVV1UVc1cGJXRjBhVzl1ZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJR1pwYm1SQmJtbHRZWFJwYjI0Z0tHNWhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgzTnJaV3hsZEc5dUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjMnRsYkdWMGIyNHVaR0YwWVM1bWFXNWtRVzVwYldGMGFXOXVLRzVoYldVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRkpsZEhWeWJuTWdkSEpoWTJzZ1pXNTBjbmtnWW5rZ2RISmhZMnRKYm1SbGVDNDhZbkkrWEc0Z0lDQWdJQ29nVW1WMGRYSnVjeUJoSUh0N0kyTnliM056VEdsdWEwMXZaSFZzWlNCY0luTndMbk53YVc1bFhDSjlmWE53TG5Od2FXNWxlM3N2WTNKdmMzTk1hVzVyVFc5a2RXeGxmWDB1VkhKaFkydEZiblJ5ZVNCdlltcGxZM1F1WEc0Z0lDQWdJQ29nSVNONmFDRHBnSnJvdjRjZ2RISmhZMnNnNTdTaTVieVY2STYzNVkrV0lGUnlZV05yUlc1MGNubmpnSUk4WW5JK1hHNGdJQ0FnSUNvZzZMK1U1WnVlNUxpQTVMaXFJSHQ3STJOeWIzTnpUR2x1YTAxdlpIVnNaU0JjSW5Od0xuTndhVzVsWENKOWZYTndMbk53YVc1bGUzc3ZZM0p2YzNOTWFXNXJUVzlrZFd4bGZYMHVWSEpoWTJ0RmJuUnllU0Rscjdub3NhSGpnSUpjYmlBZ0lDQWdLaUJBYldWMGFHOWtJR2RsZEVOMWNuSmxiblJjYmlBZ0lDQWdLaUJBY0dGeVlXMGdkSEpoWTJ0SmJtUmxlRnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlM053TG5Od2FXNWxMbFJ5WVdOclJXNTBjbmw5WEc0Z0lDQWdJQ292WEc0Z0lDQWdaMlYwUTNWeWNtVnVkQ0FvZEhKaFkydEpibVJsZUNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXBjMEZ1YVcxaGRHbHZia05oWTJobFpDZ3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZeTUzWVhKdUtGd2lKMmRsZEVOMWNuSmxiblFuSUdsdWRHVnlabUZqWlNCallXNGdibTkwSUdKbElHbHVkbTlyWldRZ2FXNGdZMkZqYUdWa0lHMXZaR1V1WENJcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDNOMFlYUmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzTjBZWFJsTG1kbGRFTjFjbkpsYm5Rb2RISmhZMnRKYm1SbGVDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdRMnhsWVhKeklHRnNiQ0IwY21GamEzTWdiMllnWVc1cGJXRjBhVzl1SUhOMFlYUmxMbHh1SUNBZ0lDQXFJQ0VqZW1nZzVyaUY2Wm1rNW9tQTVweUpJSFJ5WVdOcklPZWFoT1dLcU9lVXUrZUt0dWFBZ2VPQWdseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ1kyeGxZWEpVY21GamEzTmNiaUFnSUNBZ0tpOWNiaUFnSUNCamJHVmhjbFJ5WVdOcmN5QW9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1selFXNXBiV0YwYVc5dVEyRmphR1ZrS0NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOakxuZGhjbTRvWENJblkyeGxZWEpVY21GamEzTW5JR2x1ZEdWeVptRmpaU0JqWVc0Z2JtOTBJR0psSUdsdWRtOXJaV1FnYVc0Z1kyRmphR1ZrSUcxdlpHVXVYQ0lwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYM04wWVhSbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmMzUmhkR1V1WTJ4bFlYSlVjbUZqYTNNb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1SUVOc1pXRnljeUIwY21GamF5QnZaaUJoYm1sdFlYUnBiMjRnYzNSaGRHVWdZbmtnZEhKaFkydEpibVJsZUM1Y2JpQWdJQ0FnS2lBaEkzcG9JT2E0aGVtWnBPV0h1dWFNaCtXdW1pQjBjbUZqYXlEbm1vVGxpcWpubEx2bmlyYm1nSUhqZ0lKY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUdOc1pXRnlWSEpoWTJ0Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnZEhKaFkydEpibVJsZUZ4dUlDQWdJQ0FxTDF4dUlDQWdJR05zWldGeVZISmhZMnNnS0hSeVlXTnJTVzVrWlhncElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVhWE5CYm1sdFlYUnBiMjVEWVdOb1pXUW9LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMk11ZDJGeWJpaGNJaWRqYkdWaGNsUnlZV05ySnlCcGJuUmxjbVpoWTJVZ1kyRnVJRzV2ZENCaVpTQnBiblp2YTJWa0lHbHVJR05oWTJobFpDQnRiMlJsTGx3aUtUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5emRHRjBaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM04wWVhSbExtTnNaV0Z5VkhKaFkyc29kSEpoWTJ0SmJtUmxlQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tFTkRYMFZFU1ZSUFVpQW1KaUFoWTJNdVpXNW5hVzVsTG1selVHeGhlV2x1WnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXpkR0YwWlM1MWNHUmhkR1VvTUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnVTJWMElIUm9aU0J6ZEdGeWRDQmxkbVZ1ZENCc2FYTjBaVzVsY2k1Y2JpQWdJQ0FnS2lBaEkzcG9JT2VVcU9hZHBlaXV2dWU5cnVXOGdPV25pK2FTcmVhVXZ1V0txT2VVdStlYWhPUzZpK1M3dHVlYmtlV1FyT09BZ2x4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnYzJWMFUzUmhjblJNYVhOMFpXNWxjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdablZ1WTNScGIyNTlJR3hwYzNSbGJtVnlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MyVjBVM1JoY25STWFYTjBaVzVsY2lBb2JHbHpkR1Z1WlhJcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlpXNXpkWEpsVEdsemRHVnVaWElvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYkdsemRHVnVaWEl1YzNSaGNuUWdQU0JzYVhOMFpXNWxjanRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQlRaWFFnZEdobElHbHVkR1Z5Y25Wd2RDQmxkbVZ1ZENCc2FYTjBaVzVsY2k1Y2JpQWdJQ0FnS2lBaEkzcG9JT2VVcU9hZHBlaXV2dWU5cnVXS3FPZVV1K2lpcSthSmsrYVdyZWVhaE9TNmkrUzd0dWVia2VXUXJPT0FnbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdjMlYwU1c1MFpYSnlkWEIwVEdsemRHVnVaWEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMloxYm1OMGFXOXVmU0JzYVhOMFpXNWxjbHh1SUNBZ0lDQXFMMXh1SUNBZ0lITmxkRWx1ZEdWeWNuVndkRXhwYzNSbGJtVnlJQ2hzYVhOMFpXNWxjaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlsYm5OMWNtVk1hWE4wWlc1bGNpZ3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXNhWE4wWlc1bGNpNXBiblJsY25KMWNIUWdQU0JzYVhOMFpXNWxjanRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQlRaWFFnZEdobElHVnVaQ0JsZG1WdWRDQnNhWE4wWlc1bGNpNWNiaUFnSUNBZ0tpQWhJM3BvSU9lVXFPYWRwZWl1dnVlOXJ1V0txT2VVdSthU3JlYVV2dVd1ak9XUWp1ZWFoT1M2aStTN3R1ZWJrZVdRck9PQWdseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ2MyVjBSVzVrVEdsemRHVnVaWEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMloxYm1OMGFXOXVmU0JzYVhOMFpXNWxjbHh1SUNBZ0lDQXFMMXh1SUNBZ0lITmxkRVZ1WkV4cGMzUmxibVZ5SUNoc2FYTjBaVzVsY2lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5bGJuTjFjbVZNYVhOMFpXNWxjaWdwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlzYVhOMFpXNWxjaTVsYm1RZ1BTQnNhWE4wWlc1bGNqdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCVFpYUWdkR2hsSUdScGMzQnZjMlVnWlhabGJuUWdiR2x6ZEdWdVpYSXVYRzRnSUNBZ0lDb2dJU042YUNEbmxLam1uYVhvcnI3bnZhN2xpcWpubEx2bHNJYm9vcXZwbElEbXI0SG5tb1RrdW92a3U3Ym5tNUhsa0t6amdJSmNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lITmxkRVJwYzNCdmMyVk1hWE4wWlc1bGNseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1puVnVZM1JwYjI1OUlHeHBjM1JsYm1WeVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzJWMFJHbHpjRzl6WlV4cGMzUmxibVZ5SUNoc2FYTjBaVzVsY2lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5bGJuTjFjbVZNYVhOMFpXNWxjaWdwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlzYVhOMFpXNWxjaTVrYVhOd2IzTmxJRDBnYkdsemRHVnVaWEk3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdVMlYwSUhSb1pTQmpiMjF3YkdWMFpTQmxkbVZ1ZENCc2FYTjBaVzVsY2k1Y2JpQWdJQ0FnS2lBaEkzcG9JT2VVcU9hZHBlaXV2dWU5cnVXS3FPZVV1K2FTcmVhVXZ1UzRnT2Fzb2VXK3F1ZU9yK2U3aythZG4rV1FqdWVhaE9TNmkrUzd0dWVia2VXUXJPT0FnbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdjMlYwUTI5dGNHeGxkR1ZNYVhOMFpXNWxjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdablZ1WTNScGIyNTlJR3hwYzNSbGJtVnlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MyVjBRMjl0Y0d4bGRHVk1hWE4wWlc1bGNpQW9iR2x6ZEdWdVpYSXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZaVzV6ZFhKbFRHbHpkR1Z1WlhJb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmJHbHpkR1Z1WlhJdVkyOXRjR3hsZEdVZ1BTQnNhWE4wWlc1bGNqdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCVFpYUWdkR2hsSUdGdWFXMWhkR2x2YmlCbGRtVnVkQ0JzYVhOMFpXNWxjaTVjYmlBZ0lDQWdLaUFoSTNwb0lPZVVxT2FkcGVpdXZ1ZTlydVdLcU9lVXUrYVNyZWFVdnVpL2grZW9pK1M0cmVXNHArUzZpK1M3dHVlYWhPZWJrZVdRck9PQWdseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ2MyVjBSWFpsYm5STWFYTjBaVzVsY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Wm5WdVkzUnBiMjU5SUd4cGMzUmxibVZ5WEc0Z0lDQWdJQ292WEc0Z0lDQWdjMlYwUlhabGJuUk1hWE4wWlc1bGNpQW9iR2x6ZEdWdVpYSXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZaVzV6ZFhKbFRHbHpkR1Z1WlhJb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmJHbHpkR1Z1WlhJdVpYWmxiblFnUFNCc2FYTjBaVzVsY2p0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJUWlhRZ2RHaGxJSE4wWVhKMElHVjJaVzUwSUd4cGMzUmxibVZ5SUdadmNpQnpjR1ZqYVdacFpXUWdWSEpoWTJ0RmJuUnllUzVjYmlBZ0lDQWdLaUFoSTNwb0lPZVVxT2FkcGVTNHV1YU1oK1d1bXVlYWhDQlVjbUZqYTBWdWRISjVJT2l1dnVlOXJ1V0txT2VVdStXOGdPV25pK2FTcmVhVXZ1ZWFoT1M2aStTN3R1ZWJrZVdRck9PQWdseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ2MyVjBWSEpoWTJ0VGRHRnlkRXhwYzNSbGJtVnlYRzRnSUNBZ0lDb2dRSEJoY21GdElIdHpjQzV6Y0dsdVpTNVVjbUZqYTBWdWRISjVmU0JsYm5SeWVWeHVJQ0FnSUNBcUlFQndZWEpoYlNCN1puVnVZM1JwYjI1OUlHeHBjM1JsYm1WeVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzJWMFZISmhZMnRUZEdGeWRFeHBjM1JsYm1WeUlDaGxiblJ5ZVN3Z2JHbHpkR1Z1WlhJcElIdGNiaUFnSUNBZ0lDQWdWSEpoWTJ0RmJuUnllVXhwYzNSbGJtVnljeTVuWlhSTWFYTjBaVzVsY25Nb1pXNTBjbmtwTG5OMFlYSjBJRDBnYkdsemRHVnVaWEk3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdVMlYwSUhSb1pTQnBiblJsY25KMWNIUWdaWFpsYm5RZ2JHbHpkR1Z1WlhJZ1ptOXlJSE53WldOcFptbGxaQ0JVY21GamEwVnVkSEo1TGx4dUlDQWdJQ0FxSUNFamVtZ2c1NVNvNXAybDVMaTY1b3lINWE2YTU1cUVJRlJ5WVdOclJXNTBjbmtnNks2KzU3MnU1WXFvNTVTNzZLS3I1b21UNXBhdDU1cUU1THFMNUx1MjU1dVI1WkNzNDRDQ1hHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCelpYUlVjbUZqYTBsdWRHVnljblZ3ZEV4cGMzUmxibVZ5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHR6Y0M1emNHbHVaUzVVY21GamEwVnVkSEo1ZlNCbGJuUnllVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdablZ1WTNScGIyNTlJR3hwYzNSbGJtVnlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MyVjBWSEpoWTJ0SmJuUmxjbkoxY0hSTWFYTjBaVzVsY2lBb1pXNTBjbmtzSUd4cGMzUmxibVZ5S1NCN1hHNGdJQ0FnSUNBZ0lGUnlZV05yUlc1MGNubE1hWE4wWlc1bGNuTXVaMlYwVEdsemRHVnVaWEp6S0dWdWRISjVLUzVwYm5SbGNuSjFjSFFnUFNCc2FYTjBaVzVsY2p0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJUWlhRZ2RHaGxJR1Z1WkNCbGRtVnVkQ0JzYVhOMFpXNWxjaUJtYjNJZ2MzQmxZMmxtYVdWa0lGUnlZV05yUlc1MGNua3VYRzRnSUNBZ0lDb2dJU042YUNEbmxLam1uYVhrdUxybWpJZmxycHJubW9RZ1ZISmhZMnRGYm5SeWVTRG9ycjdudmE3bGlxam5sTHZta3EzbWxMN251NVBtblovbm1vVGt1b3ZrdTdibm01SGxrS3pqZ0lKY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUhObGRGUnlZV05yUlc1a1RHbHpkR1Z1WlhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTNOd0xuTndhVzVsTGxSeVlXTnJSVzUwY25sOUlHVnVkSEo1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRtZFc1amRHbHZibjBnYkdsemRHVnVaWEpjYmlBZ0lDQWdLaTljYmlBZ0lDQnpaWFJVY21GamEwVnVaRXhwYzNSbGJtVnlJQ2hsYm5SeWVTd2diR2x6ZEdWdVpYSXBJSHRjYmlBZ0lDQWdJQ0FnVkhKaFkydEZiblJ5ZVV4cGMzUmxibVZ5Y3k1blpYUk1hWE4wWlc1bGNuTW9aVzUwY25rcExtVnVaQ0E5SUd4cGMzUmxibVZ5TzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRk5sZENCMGFHVWdaR2x6Y0c5elpTQmxkbVZ1ZENCc2FYTjBaVzVsY2lCbWIzSWdjM0JsWTJsbWFXVmtJRlJ5WVdOclJXNTBjbmt1WEc0Z0lDQWdJQ29nSVNONmFDRG5sS2ptbmFYa3VMcm1qSWZscnBybm1vUWdWSEpoWTJ0RmJuUnllU0RvcnI3bnZhN2xpcWpubEx2bGpiUGxzSWJvb3F2cGxJRG1yNEhubW9Ua3Vvdmt1N2JubTVIbGtLempnSUpjYmlBZ0lDQWdLaUJBYldWMGFHOWtJSE5sZEZSeVlXTnJSR2x6Y0c5elpVeHBjM1JsYm1WeVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0emNDNXpjR2x1WlM1VWNtRmphMFZ1ZEhKNWZTQmxiblJ5ZVZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Wm5WdVkzUnBiMjU5SUd4cGMzUmxibVZ5WEc0Z0lDQWdJQ292WEc0Z0lDQWdjMlYwVkhKaFkydEVhWE53YjNObFRHbHpkR1Z1WlhJb1pXNTBjbmtzSUd4cGMzUmxibVZ5S1h0Y2JpQWdJQ0FnSUNBZ1ZISmhZMnRGYm5SeWVVeHBjM1JsYm1WeWN5NW5aWFJNYVhOMFpXNWxjbk1vWlc1MGNua3BMbVJwYzNCdmMyVWdQU0JzYVhOMFpXNWxjanRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQlRaWFFnZEdobElHTnZiWEJzWlhSbElHVjJaVzUwSUd4cGMzUmxibVZ5SUdadmNpQnpjR1ZqYVdacFpXUWdWSEpoWTJ0RmJuUnllUzVjYmlBZ0lDQWdLaUFoSTNwb0lPZVVxT2FkcGVTNHV1YU1oK1d1bXVlYWhDQlVjbUZqYTBWdWRISjVJT2l1dnVlOXJ1V0txT2VVdStTNGdPYXNvZVcrcXVlT3IrYVNyZWFVdnVlN2srYWRuK2VhaE9TNmkrUzd0dWVia2VXUXJPT0FnbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdjMlYwVkhKaFkydERiMjF3YkdWMFpVeHBjM1JsYm1WeVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0emNDNXpjR2x1WlM1VWNtRmphMFZ1ZEhKNWZTQmxiblJ5ZVZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Wm5WdVkzUnBiMjU5SUd4cGMzUmxibVZ5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHR6Y0M1emNHbHVaUzVVY21GamEwVnVkSEo1ZlNCc2FYTjBaVzVsY2k1bGJuUnllVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQnNhWE4wWlc1bGNpNXNiMjl3UTI5MWJuUmNiaUFnSUNBZ0tpOWNiaUFnSUNCelpYUlVjbUZqYTBOdmJYQnNaWFJsVEdsemRHVnVaWElnS0dWdWRISjVMQ0JzYVhOMFpXNWxjaWtnZTF4dUlDQWdJQ0FnSUNCVWNtRmphMFZ1ZEhKNVRHbHpkR1Z1WlhKekxtZGxkRXhwYzNSbGJtVnljeWhsYm5SeWVTa3VZMjl0Y0d4bGRHVWdQU0JtZFc1amRHbHZiaUFvZEhKaFkydEZiblJ5ZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHeHZiM0JEYjNWdWRDQTlJRTFoZEdndVpteHZiM0lvZEhKaFkydEZiblJ5ZVM1MGNtRmphMVJwYldVZ0x5QjBjbUZqYTBWdWRISjVMbUZ1YVcxaGRHbHZia1Z1WkNrN0lGeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdsemRHVnVaWElvZEhKaFkydEZiblJ5ZVN3Z2JHOXZjRU52ZFc1MEtUdGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQlRaWFFnZEdobElHVjJaVzUwSUd4cGMzUmxibVZ5SUdadmNpQnpjR1ZqYVdacFpXUWdWSEpoWTJ0RmJuUnllUzVjYmlBZ0lDQWdLaUFoSTNwb0lPZVVxT2FkcGVTNHV1YU1oK1d1bXVlYWhDQlVjbUZqYTBWdWRISjVJT2l1dnVlOXJ1V0txT2VVdStXNHArUzZpK1M3dHVlYWhPZWJrZVdRck9PQWdseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ2MyVjBWSEpoWTJ0RmRtVnVkRXhwYzNSbGJtVnlYRzRnSUNBZ0lDb2dRSEJoY21GdElIdHpjQzV6Y0dsdVpTNVVjbUZqYTBWdWRISjVmU0JsYm5SeWVWeHVJQ0FnSUNBcUlFQndZWEpoYlNCN1puVnVZM1JwYjI1OUlHeHBjM1JsYm1WeVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzJWMFZISmhZMnRGZG1WdWRFeHBjM1JsYm1WeUlDaGxiblJ5ZVN3Z2JHbHpkR1Z1WlhJcElIdGNiaUFnSUNBZ0lDQWdWSEpoWTJ0RmJuUnllVXhwYzNSbGJtVnljeTVuWlhSTWFYTjBaVzVsY25Nb1pXNTBjbmtwTG1WMlpXNTBJRDBnYkdsemRHVnVaWEk3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdSMlYwSUhSb1pTQmhibWx0WVhScGIyNGdjM1JoZEdVZ2IySnFaV04wWEc0Z0lDQWdJQ29nSVNONmFDRG9qcmZsajVaY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUhObGRGUnlZV05yUlhabGJuUk1hWE4wWlc1bGNseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UzTndMbk53YVc1bExrRnVhVzFoZEdsdmJsTjBZWFJsZlNCemRHRjBaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHZGxkRk4wWVhSbElDZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzTjBZWFJsTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2THlCMWNHUmhkR1VnWVc1cGJXRjBhVzl1SUd4cGMzUWdabTl5SUdWa2FYUnZjbHh1SUNBZ0lGOTFjR1JoZEdWQmJtbHRSVzUxYlRvZ1EwTmZSVVJKVkU5U0lDWW1JR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR0Z1YVcxRmJuVnRPMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV6YTJWc1pYUnZia1JoZEdFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdGdWFXMUZiblZ0SUQwZ2RHaHBjeTV6YTJWc1pYUnZia1JoZEdFdVoyVjBRVzVwYlhORmJuVnRLQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0x5OGdZMmhoYm1kbElHVnVkVzFjYmlBZ0lDQWdJQ0FnYzJWMFJXNTFiVUYwZEhJb2RHaHBjeXdnSjE5aGJtbHRZWFJwYjI1SmJtUmxlQ2NzSUdGdWFXMUZiblZ0SUh4OElFUmxabUYxYkhSQmJtbHRjMFZ1ZFcwcE8xeHVJQ0FnSUgwc1hHNGdJQ0FnTHk4Z2RYQmtZWFJsSUhOcmFXNGdiR2x6ZENCbWIzSWdaV1JwZEc5eVhHNGdJQ0FnWDNWd1pHRjBaVk5yYVc1RmJuVnRPaUJEUTE5RlJFbFVUMUlnSmlZZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2MydHBia1Z1ZFcwN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuTnJaV3hsZEc5dVJHRjBZU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjMnRwYmtWdWRXMGdQU0IwYUdsekxuTnJaV3hsZEc5dVJHRjBZUzVuWlhSVGEybHVjMFZ1ZFcwb0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0F2THlCamFHRnVaMlVnWlc1MWJWeHVJQ0FnSUNBZ0lDQnpaWFJGYm5WdFFYUjBjaWgwYUdsekxDQW5YMlJsWm1GMWJIUlRhMmx1U1c1a1pYZ25MQ0J6YTJsdVJXNTFiU0I4ZkNCRVpXWmhkV3gwVTJ0cGJuTkZiblZ0S1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWDJWdWMzVnlaVXhwYzNSbGJtVnlJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxsOXNhWE4wWlc1bGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYkdsemRHVnVaWElnUFNCdVpYY2dWSEpoWTJ0RmJuUnllVXhwYzNSbGJtVnljeWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYM04wWVhSbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmMzUmhkR1V1WVdSa1RHbHpkR1Z1WlhJb2RHaHBjeTVmYkdsemRHVnVaWElwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYmx4dUlDQWdJRjkxY0dSaGRHVlRhMlZzWlhSdmJrUmhkR0VvS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NXViMlJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWXk1M1lYSnVLRndpYm05a1pTQm9ZWE1nWW1WbGJpQmtaWE4wY205NVpXUXNJR05oYmlkMElITmxkQ0J6Y0M1emEyVnNaWFJ2YmtSaGRHRmNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbk5yWld4bGRHOXVSR0YwWVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWthWE5oWW14bFVtVnVaR1Z5S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUd4bGRDQmtZWFJoSUQwZ2RHaHBjeTV6YTJWc1pYUnZia1JoZEdFdVoyVjBVblZ1ZEdsdFpVUmhkR0VvS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZrWVhSaEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVJwYzJGaWJHVlNaVzVrWlhJb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpYUlRhMlZzWlhSdmJrUmhkR0VvWkdGMFlTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdWFYTkJibWx0WVhScGIyNURZV05vWldRb0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVjBRVzVwYldGMGFXOXVVM1JoZEdWRVlYUmhLRzVsZHlCemNHbHVaUzVCYm1sdFlYUnBiMjVUZEdGMFpVUmhkR0VvZEdocGN5NWZjMnRsYkdWMGIyNHVaR0YwWVNrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1a1pXWmhkV3gwVTJ0cGJpQW1KaUIwYUdsekxuTmxkRk5yYVc0b2RHaHBjeTVrWldaaGRXeDBVMnRwYmlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmpMbmRoY200b1pTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM0J5WlVOaFkyaGxUVzlrWlNBOUlIUm9hWE11WDJOaFkyaGxUVzlrWlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVoYm1sdFlYUnBiMjRnUFNCMGFHbHpMbVJsWm1GMWJIUkJibWx0WVhScGIyNDdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lGOXlaV1p5WlhOb1NXNXpjR1ZqZEc5eUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnTHk4Z2RYQmtZWFJsSUdsdWMzQmxZM1J2Y2x4dUlDQWdJQ0FnSUNCMGFHbHpMbDkxY0dSaGRHVkJibWx0Ulc1MWJTZ3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOTFjR1JoZEdWVGEybHVSVzUxYlNncE8xeHVJQ0FnSUNBZ0lDQkZaR2wwYjNJdVZYUnBiSE11Y21WbWNtVnphRk5sYkdWamRHVmtTVzV6Y0dWamRHOXlLQ2R1YjJSbEp5d2dkR2hwY3k1dWIyUmxMblYxYVdRcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCZmRYQmtZWFJsUkdWaWRXZEVjbUYzT2lCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbVJsWW5WblFtOXVaWE1nZkh3Z2RHaHBjeTVrWldKMVoxTnNiM1J6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11WDJSbFluVm5VbVZ1WkdWeVpYSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1pHVmlkV2RFY21GM1RtOWtaU0E5SUc1bGR5QmpZeTVRY21sMllYUmxUbTlrWlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxZblZuUkhKaGQwNXZaR1V1Ym1GdFpTQTlJQ2RFUlVKVlIxOUVVa0ZYWDA1UFJFVW5PMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCa1pXSjFaMFJ5WVhjZ1BTQmtaV0oxWjBSeVlYZE9iMlJsTG1Ga1pFTnZiWEJ2Ym1WdWRDaEhjbUZ3YUdsamN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZpZFdkRWNtRjNMbXhwYm1WWGFXUjBhQ0E5SURFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVmlkV2RFY21GM0xuTjBjbTlyWlVOdmJHOXlJRDBnWTJNdVkyOXNiM0lvTWpVMUxDQXdMQ0F3TENBeU5UVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyUmxZblZuVW1WdVpHVnlaWElnUFNCa1pXSjFaMFJ5WVhjN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyUmxZblZuVW1WdVpHVnlaWEl1Ym05a1pTNXdZWEpsYm5RZ1BTQjBhR2x6TG01dlpHVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1cGMwRnVhVzFoZEdsdmJrTmhZMmhsWkNncEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMk11ZDJGeWJpaGNJa1JsWW5WbklHSnZibVZ6SUc5eUlITnNiM1J6SUdseklHbHVkbUZzYVdRZ2FXNGdZMkZqYUdWa0lHMXZaR1ZjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb2RHaHBjeTVmWkdWaWRXZFNaVzVrWlhKbGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWkdWaWRXZFNaVzVrWlhKbGNpNXViMlJsTG5CaGNtVnVkQ0E5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1ZlNrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdjM0F1VTJ0bGJHVjBiMjQ3WEc0aVhYMD0iXX0=