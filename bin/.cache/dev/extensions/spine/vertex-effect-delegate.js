(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/extensions/spine/vertex-effect-delegate.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var spine = require('./lib/spine');
        sp.VertexEffectDelegate = cc.Class({
            name: 'sp.VertexEffectDelegate',
            ctor: function ctor() {
                this._vertexEffect = null;
                this._interpolation = null;
                this._effectType = 'none';
            },
            clear: function clear() {
                this._vertexEffect = null;
                this._interpolation = null;
                this._effectType = 'none';
            },
            initJitter: function initJitter(jitterX, jitterY) {
                this._effectType = 'jitter';
                this._vertexEffect = new spine.JitterEffect(jitterX, jitterY);
                return this._vertexEffect;
            },
            initSwirlWithPow: function initSwirlWithPow(radius, power) {
                this._interpolation = new spine.Pow(power);
                this._vertexEffect = new spine.SwirlEffect(radius, this._interpolation);
                return this._vertexEffect;
            },
            initSwirlWithPowOut: function initSwirlWithPowOut(radius, power) {
                this._interpolation = new spine.PowOut(power);
                this._vertexEffect = new spine.SwirlEffect(radius, this._interpolation);
                return this._vertexEffect;
            },
            getJitterVertexEffect: function getJitterVertexEffect() {
                return this._vertexEffect;
            },
            getSwirlVertexEffect: function getSwirlVertexEffect() {
                return this._vertexEffect;
            },
            getVertexEffect: function getVertexEffect() {
                return this._vertexEffect;
            },
            getEffectType: function getEffectType() {
                return this._effectType;
            }
        });
        module.exports = sp.VertexEffectDelegate;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,