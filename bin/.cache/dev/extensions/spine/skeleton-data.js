(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/extensions/spine/skeleton-data.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var SkeletonCache = !CC_JSB && require('./skeleton-cache').sharedCache;
        var SkeletonData = cc.Class({
            name: 'sp.SkeletonData',
            extends: cc.Asset,
            ctor: function ctor() {
                this.reset();
            },
            properties: {
                _skeletonJson: null,
                skeletonJsonStr: {
                    get: function get() {
                        if (this._skeletonJson) {
                            return JSON.stringify(this._skeletonJson);
                        } else {
                            return '';
                        }
                    }
                },
                skeletonJson: {
                    get: function get() {
                        return this._skeletonJson;
                    },
                    set: function set(value) {
                        if (typeof value == 'string') {
                            this._skeletonJson = JSON.parse(value);
                        } else {
                            this._skeletonJson = value;
                        }
                        if (!this._uuid && value.skeleton) {
                            this._uuid = value.skeleton.hash;
                        }
                        this.reset();
                    }
                },
                _atlasText: '',
                atlasText: {
                    get: function get() {
                        return this._atlasText;
                    },
                    set: function set(value) {
                        this._atlasText = value;
                        this.reset();
                    }
                },
                textures: {
                    default: [],
                    type: [cc.Texture2D]
                },
                textureNames: {
                    default: [],
                    type: [cc.String]
                },
                scale: 1
            },
            statics: {
                preventDeferredLoadDependents: true,
                preventPreloadNativeObject: true
            },
            createNode: CC_EDITOR && function (callback) {
                var node = new cc.Node(this.name);
                var skeleton = node.addComponent(sp.Skeleton);
                skeleton.skeletonData = this;
                return callback(null, node);
            },
            reset: function reset() {
                this._skeletonCache = null;
                this._atlasCache = null;
                if (CC_EDITOR) {
                    this._skinsEnum = null;
                    this._animsEnum = null;
                }
            },
            ensureTexturesLoaded: function ensureTexturesLoaded(loaded, caller) {
                var textures = this.textures;
                var texsLen = textures.length;
                if (texsLen == 0) {
                    loaded.call(caller, false);
                    return;
                }
                var loadedCount = 0;
                var loadedItem = function loadedItem() {
                    loadedCount++;
                    if (loadedCount >= texsLen) {
                        loaded && loaded.call(caller, true);
                        loaded = null;
                    }
                };
                for (var i = 0; i < texsLen; i++) {
                    var tex = textures[i];
                    if (tex.loaded) {
                        loadedItem();
                    } else {
                        tex.once('load', loadedItem);
                    }
                }
            },
            getRuntimeData: function getRuntimeData(quiet) {
                if (this._skeletonCache) {
                    return this._skeletonCache;
                }
                if (!(this.textures && this.textures.length > 0) && this.textureNames && this.textureNames.length > 0) {
                    if (!quiet) {
                        cc.errorID(7507, this.name);
                    }
                    return null;
                }
                var atlas = this._getAtlas(quiet);
                if (!atlas) {
                    return null;
                }
                var attachmentLoader = new sp.spine.AtlasAttachmentLoader(atlas);
                var jsonReader = new sp.spine.SkeletonJson(attachmentLoader);
                jsonReader.scale = this.scale;
                var json = this.skeletonJson;
                this._skeletonCache = jsonReader.readSkeletonData(json);
                atlas.dispose(jsonReader);
                return this._skeletonCache;
            },
            getSkinsEnum: CC_EDITOR && function () {
                if (this._skinsEnum) {
                    return this._skinsEnum;
                }
                var sd = this.getRuntimeData(true);
                if (sd) {
                    var skins = sd.skins;
                    var enumDef = {};
                    for (var i = 0; i < skins.length; i++) {
                        var name = skins[i].name;
                        enumDef[name] = i;
                    }
                    return this._skinsEnum = cc.Enum(enumDef);
                }
                return null;
            },
            getAnimsEnum: CC_EDITOR && function () {
                if (this._animsEnum) {
                    return this._animsEnum;
                }
                var sd = this.getRuntimeData(true);
                if (sd) {
                    var enumDef = { '<None>': 0 };
                    var anims = sd.animations;
                    for (var i = 0; i < anims.length; i++) {
                        var name = anims[i].name;
                        enumDef[name] = i + 1;
                    }
                    return this._animsEnum = cc.Enum(enumDef);
                }
                return null;
            },
            _getTexture: function _getTexture(line) {
                var names = this.textureNames;
                for (var i = 0; i < names.length; i++) {
                    if (names[i] === line) {
                        var texture = this.textures[i];
                        var tex = new sp.SkeletonTexture({
                            width: texture.width,
                            height: texture.height
                        });
                        tex.setRealTexture(texture);
                        return tex;
                    }
                }
                cc.errorID(7506, line);
                return null;
            },
            _getAtlas: function _getAtlas(quiet) {
                if (this._atlasCache) {
                    return this._atlasCache;
                }
                if (!this.atlasText) {
                    if (!quiet) {
                        cc.errorID(7508, this.name);
                    }
                    return null;
                }
                return this._atlasCache = new sp.spine.TextureAtlas(this.atlasText, this._getTexture.bind(this));
            },
            destroy: function destroy() {
                SkeletonCache.removeSkeleton(this._uuid);
                this._super();
            }
        });
        sp.SkeletonData = module.exports = SkeletonData;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,