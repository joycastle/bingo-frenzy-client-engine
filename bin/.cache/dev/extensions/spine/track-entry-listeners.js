(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/extensions/spine/track-entry-listeners.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var TrackEntryListeners = function TrackEntryListeners() {
            this.start = null;
            this.end = null;
            this.complete = null;
            this.event = null;
            this.interrupt = null;
            this.dispose = null;
        };
        TrackEntryListeners.getListeners = function (entry) {
            if (!entry.listener) {
                entry.listener = new TrackEntryListeners();
            }
            return entry.listener;
        };
        module.exports = TrackEntryListeners;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,