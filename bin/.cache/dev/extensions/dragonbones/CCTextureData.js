(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/extensions/dragonbones/CCTextureData.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        dragonBones.CCTextureAtlasData = cc.Class({
            extends: dragonBones.TextureAtlasData,
            name: 'dragonBones.CCTextureAtlasData',
            properties: {
                _renderTexture: {
                    default: null,
                    serializable: false
                },
                renderTexture: {
                    get: function get() {
                        return this._renderTexture;
                    },
                    set: function set(value) {
                        this._renderTexture = value;
                        if (value) {
                            for (var k in this.textures) {
                                var textureData = this.textures[k];
                                if (!textureData.spriteFrame) {
                                    var rect = null;
                                    if (textureData.rotated) {
                                        rect = cc.rect(textureData.region.x, textureData.region.y, textureData.region.height, textureData.region.width);
                                    } else {
                                        rect = cc.rect(textureData.region.x, textureData.region.y, textureData.region.width, textureData.region.height);
                                    }
                                    var offset = cc.v2(0, 0);
                                    var size = cc.size(rect.width, rect.height);
                                    textureData.spriteFrame = new cc.SpriteFrame();
                                    textureData.spriteFrame.setTexture(value, rect, false, offset, size);
                                }
                            }
                        } else {
                            for (var _k in this.textures) {
                                var _textureData = this.textures[_k];
                                _textureData.spriteFrame = null;
                            }
                        }
                    }
                }
            },
            statics: {
                toString: function toString() {
                    return '[class dragonBones.CCTextureAtlasData]';
                }
            },
            _onClear: function _onClear() {
                dragonBones.TextureAtlasData.prototype._onClear.call(this);
                this.renderTexture = null;
            },
            createTexture: function createTexture() {
                return dragonBones.BaseObject.borrowObject(dragonBones.CCTextureData);
            }
        });
        dragonBones.CCTextureData = cc.Class({
            extends: dragonBones.TextureData,
            name: 'dragonBones.CCTextureData',
            properties: {
                spriteFrame: {
                    default: null,
                    serializable: false
                }
            },
            statics: {
                toString: function toString() {
                    return '[class dragonBones.CCTextureData]';
                }
            },
            _onClear: function _onClear() {
                dragonBones.TextureData.prototype._onClear.call(this);
                this.spriteFrame = null;
            }
        });
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,