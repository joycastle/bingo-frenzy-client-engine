(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/extensions/dragonbones/DragonBonesAsset.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var ArmatureCache = !CC_JSB && require('./ArmatureCache').sharedCache;
        var DragonBonesAsset = cc.Class({
            name: 'dragonBones.DragonBonesAsset',
            extends: cc.Asset,
            ctor: function ctor() {
                this.reset();
            },
            properties: {
                _dragonBonesJson: '',
                dragonBonesJson: {
                    get: function get() {
                        return this._dragonBonesJson;
                    },
                    set: function set(value) {
                        this._dragonBonesJson = value;
                        this._dragonBonesJsonData = JSON.parse(value);
                        this.reset();
                    }
                },
                _nativeAsset: {
                    get: function get() {
                        return this._buffer;
                    },
                    set: function set(bin) {
                        this._buffer = bin.buffer || bin;
                        this.reset();
                    },
                    override: true
                }
            },
            statics: { preventDeferredLoadDependents: true },
            createNode: CC_EDITOR && function (callback) {
                var node = new cc.Node(this.name);
                var armatureDisplay = node.addComponent(dragonBones.ArmatureDisplay);
                armatureDisplay.dragonAsset = this;
                return callback(null, node);
            },
            reset: function reset() {
                this._clear();
                if (CC_EDITOR) {
                    this._armaturesEnum = null;
                }
            },
            init: function init(factory, atlasUUID) {
                if (CC_EDITOR) {
                    this._factory = factory || new dragonBones.CCFactory();
                } else {
                    this._factory = factory;
                }
                if (!this._dragonBonesJsonData && this.dragonBonesJson) {
                    this._dragonBonesJsonData = JSON.parse(this.dragonBonesJson);
                }
                var rawData = null;
                if (this._dragonBonesJsonData) {
                    rawData = this._dragonBonesJsonData;
                } else {
                    rawData = this._nativeAsset;
                }
                if (!this._uuid) {
                    var dbData = this._factory.getDragonBonesDataByRawData(rawData);
                    if (dbData) {
                        this._uuid = dbData.name;
                    } else {
                        cc.warn('dragonbones name is empty');
                    }
                }
                var armatureKey = this._uuid + '#' + atlasUUID;
                var dragonBonesData = this._factory.getDragonBonesData(armatureKey);
                if (dragonBonesData)
                    return armatureKey;
                this._factory.parseDragonBonesData(rawData, armatureKey);
                return armatureKey;
            },
            getArmatureEnum: CC_EDITOR && function () {
                if (this._armaturesEnum) {
                    return this._armaturesEnum;
                }
                this.init();
                var dragonBonesData = this._factory.getDragonBonesDataByUUID(this._uuid);
                if (dragonBonesData) {
                    var armatureNames = dragonBonesData.armatureNames;
                    var enumDef = {};
                    for (var i = 0; i < armatureNames.length; i++) {
                        var name = armatureNames[i];
                        enumDef[name] = i;
                    }
                    return this._armaturesEnum = cc.Enum(enumDef);
                }
                return null;
            },
            getAnimsEnum: CC_EDITOR && function (armatureName) {
                this.init();
                var dragonBonesData = this._factory.getDragonBonesDataByUUID(this._uuid);
                if (dragonBonesData) {
                    var armature = dragonBonesData.getArmature(armatureName);
                    if (!armature) {
                        return null;
                    }
                    var enumDef = { '<None>': 0 };
                    var anims = armature.animations;
                    var i = 0;
                    for (var animName in anims) {
                        if (anims.hasOwnProperty(animName)) {
                            enumDef[animName] = i + 1;
                            i++;
                        }
                    }
                    return cc.Enum(enumDef);
                }
                return null;
            },
            _clear: function _clear() {
                if (this._factory) {
                    ArmatureCache.resetArmature(this._uuid);
                    this._factory.removeDragonBonesDataByUUID(this._uuid, true);
                }
            },
            destroy: function destroy() {
                this._clear();
                this._super();
            }
        });
        dragonBones.DragonBonesAsset = module.exports = DragonBonesAsset;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,