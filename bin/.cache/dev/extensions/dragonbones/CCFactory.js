(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/extensions/dragonbones/CCFactory.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var BaseObject = dragonBones.BaseObject, BaseFactory = dragonBones.BaseFactory;
        var CCFactory = dragonBones.CCFactory = cc.Class({
            name: 'dragonBones.CCFactory',
            extends: BaseFactory,
            statics: {
                _factory: null,
                getInstance: function getInstance() {
                    if (!CCFactory._factory) {
                        CCFactory._factory = new CCFactory();
                    }
                    return CCFactory._factory;
                }
            },
            ctor: function ctor() {
                var eventManager = new dragonBones.CCArmatureDisplay();
                this._dragonBones = new dragonBones.DragonBones(eventManager);
                if (!CC_NATIVERENDERER && !CC_EDITOR && cc.director._scheduler) {
                    cc.game.on(cc.game.EVENT_RESTART, this.initUpdate, this);
                    this.initUpdate();
                }
            },
            initUpdate: function initUpdate(dt) {
                cc.director._scheduler.enableForTarget(this);
                cc.director._scheduler.scheduleUpdate(this, cc.Scheduler.PRIORITY_SYSTEM, false);
            },
            update: function update(dt) {
                this._dragonBones.advanceTime(dt);
            },
            getDragonBonesDataByRawData: function getDragonBonesDataByRawData(rawData) {
                var dataParser = rawData instanceof ArrayBuffer ? BaseFactory._binaryParser : this._dataParser;
                return dataParser.parseDragonBonesData(rawData, 1);
            },
            buildArmatureDisplay: function buildArmatureDisplay(armatureName, dragonBonesName, skinName, textureAtlasName) {
                var armature = this.buildArmature(armatureName, dragonBonesName, skinName, textureAtlasName);
                return armature && armature._display;
            },
            createArmatureNode: function createArmatureNode(comp, armatureName, node) {
                node = node || new cc.Node();
                var display = node.getComponent(dragonBones.ArmatureDisplay);
                if (!display) {
                    display = node.addComponent(dragonBones.ArmatureDisplay);
                }
                node.name = armatureName;
                display._armatureName = armatureName;
                display._N$dragonAsset = comp.dragonAsset;
                display._N$dragonAtlasAsset = comp.dragonAtlasAsset;
                display._init();
                return display;
            },
            _buildTextureAtlasData: function _buildTextureAtlasData(textureAtlasData, textureAtlas) {
                if (textureAtlasData) {
                    textureAtlasData.renderTexture = textureAtlas;
                } else {
                    textureAtlasData = BaseObject.borrowObject(dragonBones.CCTextureAtlasData);
                }
                return textureAtlasData;
            },
            _sortSlots: function _sortSlots() {
                var slots = this._slots;
                var sortedSlots = [];
                for (var i = 0, l = slots.length; i < l; i++) {
                    var slot = slots[i];
                    var zOrder = slot._zOrder;
                    var inserted = false;
                    for (var j = sortedSlots.length - 1; j >= 0; j--) {
                        if (zOrder >= sortedSlots[j]._zOrder) {
                            sortedSlots.splice(j + 1, 0, slot);
                            inserted = true;
                            break;
                        }
                    }
                    if (!inserted) {
                        sortedSlots.splice(0, 0, slot);
                    }
                }
                this._slots = sortedSlots;
            },
            _buildArmature: function _buildArmature(dataPackage) {
                var armature = BaseObject.borrowObject(dragonBones.Armature);
                armature._skinData = dataPackage.skin;
                armature._animation = BaseObject.borrowObject(dragonBones.Animation);
                armature._animation._armature = armature;
                armature._animation.animations = dataPackage.armature.animations;
                armature._isChildArmature = false;
                var display = new dragonBones.CCArmatureDisplay();
                armature.init(dataPackage.armature, display, display, this._dragonBones);
                return armature;
            },
            _buildSlot: function _buildSlot(dataPackage, slotData, displays) {
                var slot = BaseObject.borrowObject(dragonBones.CCSlot);
                var display = slot;
                slot.init(slotData, displays, display, display);
                return slot;
            },
            getDragonBonesDataByUUID: function getDragonBonesDataByUUID(uuid) {
                for (var name in this._dragonBonesDataMap) {
                    if (name.indexOf(uuid) != -1) {
                        return this._dragonBonesDataMap[name];
                    }
                }
                return null;
            },
            removeDragonBonesDataByUUID: function removeDragonBonesDataByUUID(uuid, disposeData) {
                if (disposeData === void 0) {
                    disposeData = true;
                }
                for (var name in this._dragonBonesDataMap) {
                    if (name.indexOf(uuid) === -1)
                        continue;
                    if (disposeData) {
                        this._dragonBones.bufferObject(this._dragonBonesDataMap[name]);
                    }
                    delete this._dragonBonesDataMap[name];
                }
            }
        });
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDRmFjdG9yeS5qcyIsIi9Vc2Vycy9TaGFyZWQvYmluZ29fZnJlbnp5L2VuZ2luZS9leHRlbnNpb25zL2RyYWdvbmJvbmVzL0NDRmFjdG9yeS5qcyJdLCJuYW1lcyI6WyJCYXNlT2JqZWN0IiwiZHJhZ29uQm9uZXMiLCJCYXNlRmFjdG9yeSIsIkNDRmFjdG9yeSIsImNjIiwiQ2xhc3MiLCJuYW1lIiwiZXh0ZW5kcyIsInN0YXRpY3MiLCJfZmFjdG9yeSIsImdldEluc3RhbmNlIiwiY3RvciIsImV2ZW50TWFuYWdlciIsIkNDQXJtYXR1cmVEaXNwbGF5IiwiX2RyYWdvbkJvbmVzIiwiRHJhZ29uQm9uZXMiLCJDQ19OQVRJVkVSRU5ERVJFUiIsIkNDX0VESVRPUiIsImRpcmVjdG9yIiwiX3NjaGVkdWxlciIsImdhbWUiLCJvbiIsIkVWRU5UX1JFU1RBUlQiLCJpbml0VXBkYXRlIiwiZHQiLCJlbmFibGVGb3JUYXJnZXQiLCJzY2hlZHVsZVVwZGF0ZSIsIlNjaGVkdWxlciIsIlBSSU9SSVRZX1NZU1RFTSIsInVwZGF0ZSIsImFkdmFuY2VUaW1lIiwiZ2V0RHJhZ29uQm9uZXNEYXRhQnlSYXdEYXRhIiwicmF3RGF0YSIsImRhdGFQYXJzZXIiLCJBcnJheUJ1ZmZlciIsIl9iaW5hcnlQYXJzZXIiLCJfZGF0YVBhcnNlciIsInBhcnNlRHJhZ29uQm9uZXNEYXRhIiwiYnVpbGRBcm1hdHVyZURpc3BsYXkiLCJhcm1hdHVyZU5hbWUiLCJkcmFnb25Cb25lc05hbWUiLCJza2luTmFtZSIsInRleHR1cmVBdGxhc05hbWUiLCJhcm1hdHVyZSIsImJ1aWxkQXJtYXR1cmUiLCJfZGlzcGxheSIsImNyZWF0ZUFybWF0dXJlTm9kZSIsImNvbXAiLCJub2RlIiwiTm9kZSIsImRpc3BsYXkiLCJnZXRDb21wb25lbnQiLCJBcm1hdHVyZURpc3BsYXkiLCJhZGRDb21wb25lbnQiLCJfYXJtYXR1cmVOYW1lIiwiX04kZHJhZ29uQXNzZXQiLCJkcmFnb25Bc3NldCIsIl9OJGRyYWdvbkF0bGFzQXNzZXQiLCJkcmFnb25BdGxhc0Fzc2V0IiwiX2luaXQiLCJfYnVpbGRUZXh0dXJlQXRsYXNEYXRhIiwidGV4dHVyZUF0bGFzRGF0YSIsInRleHR1cmVBdGxhcyIsInJlbmRlclRleHR1cmUiLCJib3Jyb3dPYmplY3QiLCJDQ1RleHR1cmVBdGxhc0RhdGEiLCJfc29ydFNsb3RzIiwic2xvdHMiLCJfc2xvdHMiLCJzb3J0ZWRTbG90cyIsImkiLCJsIiwibGVuZ3RoIiwic2xvdCIsInpPcmRlciIsIl96T3JkZXIiLCJpbnNlcnRlZCIsImoiLCJzcGxpY2UiLCJfYnVpbGRBcm1hdHVyZSIsImRhdGFQYWNrYWdlIiwiQXJtYXR1cmUiLCJfc2tpbkRhdGEiLCJza2luIiwiX2FuaW1hdGlvbiIsIkFuaW1hdGlvbiIsIl9hcm1hdHVyZSIsImFuaW1hdGlvbnMiLCJfaXNDaGlsZEFybWF0dXJlIiwiaW5pdCIsIl9idWlsZFNsb3QiLCJzbG90RGF0YSIsImRpc3BsYXlzIiwiQ0NTbG90IiwiZ2V0RHJhZ29uQm9uZXNEYXRhQnlVVUlEIiwidXVpZCIsIl9kcmFnb25Cb25lc0RhdGFNYXAiLCJpbmRleE9mIiwicmVtb3ZlRHJhZ29uQm9uZXNEYXRhQnlVVUlEIiwiZGlzcG9zZURhdGEiLCJidWZmZXJPYmplY3QiXSwibWFwcGluZ3MiOiI7SUFBQSxJQUFBLE9BQUEsR0FBQSxPQUFBLE9BQUEsS0FBQSxXQUFBLElBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQTs7Ozs7Ozs7Ozs7OztRQXlCQSxJQUFJQSxVQUFBQSxHQUFhQyxXQUFBQSxDQUFZRCxVQUE3QixFQUNJRSxXQUFBQSxHQUFjRCxXQUFBQSxDQUFZQyxXQUQ5QjtRQVdBLElBQUlDLFNBQUFBLEdBQVlGLFdBQUFBLENBQVlFLFNBQVpGLEdBQXdCRyxFQUFBQSxDQUFHQyxLQUFIRCxDQUFTO0FBQUEsWUFDN0NFLElBQUFBLEVBQU0sdUJBRHVDO0FBQUEsWUFFN0NDLE9BQUFBLEVBQVNMLFdBRm9DO0FBQUEsWUFVN0NNLE9BQUFBLEVBQVM7QUFBQSxnQkFD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QUFBQSxvQkFLdkMsT0FBTyxLQUFLMEYsbUJBQUwsQ0FBeUIxRixJQUF6QixDQUFQLENBTHVDO0FBQUEsaUJBRkM7QUFBQSxhQTNJSDtBQUFBLFNBQVRGLENBQXhDIiwiZmlsZSI6IkNDRmFjdG9yeS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gQ29weXJpZ2h0IChjKSAyMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHA6Ly93d3cuY29jb3MyZC14Lm9yZ1xuXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cbiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxubGV0IEJhc2VPYmplY3QgPSBkcmFnb25Cb25lcy5CYXNlT2JqZWN0LFxuICAgIEJhc2VGYWN0b3J5ID0gZHJhZ29uQm9uZXMuQmFzZUZhY3Rvcnk7XG5cbi8qKlxuICogQG1vZHVsZSBkcmFnb25Cb25lc1xuKi9cblxuLyoqXG4gKiBAY2xhc3MgQ0NGYWN0b3J5XG4gKiBAZXh0ZW5kcyBCYXNlRmFjdG9yeVxuKi9cbnZhciBDQ0ZhY3RvcnkgPSBkcmFnb25Cb25lcy5DQ0ZhY3RvcnkgPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2RyYWdvbkJvbmVzLkNDRmFjdG9yeScsXG4gICAgZXh0ZW5kczogQmFzZUZhY3RvcnksXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBnZXRJbnN0YW5jZVxuICAgICAqIEByZXR1cm4ge0NDRmFjdG9yeX1cbiAgICAgKiBAc3RhdGljXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBsZXQgZmFjdG9yeSA9IGRyYWdvbkJvbmVzLkNDRmFjdG9yeS5nZXRJbnN0YW5jZSgpO1xuICAgICovXG4gICAgc3RhdGljczoge1xuICAgICAgICBfZmFjdG9yeTogbnVsbCxcbiAgICAgICAgZ2V0SW5zdGFuY2UgKCkge1xuICAgICAgICAgICAgaWYgKCFDQ0ZhY3RvcnkuX2ZhY3RvcnkpIHtcbiAgICAgICAgICAgICAgICBDQ0ZhY3RvcnkuX2ZhY3RvcnkgPSBuZXcgQ0NGYWN0b3J5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gQ0NGYWN0b3J5Ll9mYWN0b3J5O1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGN0b3IgKCkge1xuICAgICAgICBsZXQgZXZlbnRNYW5hZ2VyID0gbmV3IGRyYWdvbkJvbmVzLkNDQXJtYXR1cmVEaXNwbGF5KCk7XG4gICAgICAgIHRoaXMuX2RyYWdvbkJvbmVzID0gbmV3IGRyYWdvbkJvbmVzLkRyYWdvbkJvbmVzKGV2ZW50TWFuYWdlcik7XG5cbiAgICAgICAgaWYgKCFDQ19OQVRJVkVSRU5ERVJFUiAmJiAhQ0NfRURJVE9SICYmIGNjLmRpcmVjdG9yLl9zY2hlZHVsZXIpIHtcbiAgICAgICAgICAgIGNjLmdhbWUub24oY2MuZ2FtZS5FVkVOVF9SRVNUQVJULCB0aGlzLmluaXRVcGRhdGUsIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5pbml0VXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgaW5pdFVwZGF0ZSAoZHQpIHtcbiAgICAgICAgY2MuZGlyZWN0b3IuX3NjaGVkdWxlci5lbmFibGVGb3JUYXJnZXQodGhpcyk7XG4gICAgICAgIGNjLmRpcmVjdG9yLl9zY2hlZHVsZXIuc2NoZWR1bGVVcGRhdGUodGhpcywgY2MuU2NoZWR1bGVyLlBSSU9SSVRZX1NZU1RFTSwgZmFsc2UpO1xuICAgIH0sXG5cbiAgICB1cGRhdGUgKGR0KSB7XG4gICAgICAgIHRoaXMuX2RyYWdvbkJvbmVzLmFkdmFuY2VUaW1lKGR0KTtcbiAgICB9LFxuXG4gICAgZ2V0RHJhZ29uQm9uZXNEYXRhQnlSYXdEYXRhIChyYXdEYXRhKSB7XG4gICAgICAgIHZhciBkYXRhUGFyc2VyID0gcmF3RGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyID8gQmFzZUZhY3RvcnkuX2JpbmFyeVBhcnNlciA6IHRoaXMuX2RhdGFQYXJzZXI7XG4gICAgICAgIHJldHVybiBkYXRhUGFyc2VyLnBhcnNlRHJhZ29uQm9uZXNEYXRhKHJhd0RhdGEsIDEuMCk7XG4gICAgfSxcblxuICAgIC8vIEJ1aWxkIG5ldyBhcmFtdHVyZSB3aXRoIGEgbmV3IGRpc3BsYXkuXG4gICAgYnVpbGRBcm1hdHVyZURpc3BsYXkgKGFybWF0dXJlTmFtZSwgZHJhZ29uQm9uZXNOYW1lLCBza2luTmFtZSwgdGV4dHVyZUF0bGFzTmFtZSkge1xuICAgICAgICBsZXQgYXJtYXR1cmUgPSB0aGlzLmJ1aWxkQXJtYXR1cmUoYXJtYXR1cmVOYW1lLCBkcmFnb25Cb25lc05hbWUsIHNraW5OYW1lLCB0ZXh0dXJlQXRsYXNOYW1lKTtcbiAgICAgICAgcmV0dXJuIGFybWF0dXJlICYmIGFybWF0dXJlLl9kaXNwbGF5O1xuICAgIH0sXG5cbiAgICAvLyBCdWlsZCBzdWIgYXJtYXR1cmUgZnJvbSBhbiBleGlzdCBhcm1hdHVyZSBjb21wb25lbnQuXG4gICAgLy8gSXQgd2lsbCBzaGFyZSBkcmFnb25Bc3NldCBhbmQgZHJhZ29uQXRsYXNBc3NldC5cbiAgICAvLyBCdXQgbm9kZSBjYW4gbm90IHNoYXJlLG9yIHdpbGwgY2F1c2UgcmVuZGVyIGVycm9yLlxuICAgIGNyZWF0ZUFybWF0dXJlTm9kZSAoY29tcCwgYXJtYXR1cmVOYW1lLCBub2RlKSB7XG4gICAgICAgIG5vZGUgPSBub2RlIHx8IG5ldyBjYy5Ob2RlKCk7XG4gICAgICAgIGxldCBkaXNwbGF5ID0gbm9kZS5nZXRDb21wb25lbnQoZHJhZ29uQm9uZXMuQXJtYXR1cmVEaXNwbGF5KTtcbiAgICAgICAgaWYgKCFkaXNwbGF5KSB7XG4gICAgICAgICAgICBkaXNwbGF5ID0gbm9kZS5hZGRDb21wb25lbnQoZHJhZ29uQm9uZXMuQXJtYXR1cmVEaXNwbGF5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGUubmFtZSA9IGFybWF0dXJlTmFtZTtcbiAgICAgICAgXG4gICAgICAgIGRpc3BsYXkuX2FybWF0dXJlTmFtZSA9IGFybWF0dXJlTmFtZTtcbiAgICAgICAgZGlzcGxheS5fTiRkcmFnb25Bc3NldCA9IGNvbXAuZHJhZ29uQXNzZXQ7XG4gICAgICAgIGRpc3BsYXkuX04kZHJhZ29uQXRsYXNBc3NldCA9IGNvbXAuZHJhZ29uQXRsYXNBc3NldDtcbiAgICAgICAgZGlzcGxheS5faW5pdCgpO1xuXG4gICAgICAgIHJldHVybiBkaXNwbGF5O1xuICAgIH0sXG4gICAgXG4gICAgX2J1aWxkVGV4dHVyZUF0bGFzRGF0YSAodGV4dHVyZUF0bGFzRGF0YSwgdGV4dHVyZUF0bGFzKSB7XG4gICAgICAgIGlmICh0ZXh0dXJlQXRsYXNEYXRhKSB7XG4gICAgICAgICAgICB0ZXh0dXJlQXRsYXNEYXRhLnJlbmRlclRleHR1cmUgPSB0ZXh0dXJlQXRsYXM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0ZXh0dXJlQXRsYXNEYXRhID0gQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoZHJhZ29uQm9uZXMuQ0NUZXh0dXJlQXRsYXNEYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGV4dHVyZUF0bGFzRGF0YTtcbiAgICB9LFxuXG4gICAgX3NvcnRTbG90cyAoKSB7XG4gICAgICAgIGxldCBzbG90cyA9IHRoaXMuX3Nsb3RzO1xuICAgICAgICBsZXQgc29ydGVkU2xvdHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBzbG90cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBzbG90ID0gc2xvdHNbaV07XG4gICAgICAgICAgICBsZXQgek9yZGVyID0gc2xvdC5fek9yZGVyO1xuICAgICAgICAgICAgbGV0IGluc2VydGVkID0gZmFsc2U7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gc29ydGVkU2xvdHMubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgICAgICAgICBpZiAoek9yZGVyID49IHNvcnRlZFNsb3RzW2pdLl96T3JkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgc29ydGVkU2xvdHMuc3BsaWNlKGorMSwgMCwgc2xvdCk7XG4gICAgICAgICAgICAgICAgICAgIGluc2VydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpbnNlcnRlZCkge1xuICAgICAgICAgICAgICAgIHNvcnRlZFNsb3RzLnNwbGljZSgwLCAwLCBzbG90KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zbG90cyA9IHNvcnRlZFNsb3RzO1xuICAgIH0sXG5cbiAgICBfYnVpbGRBcm1hdHVyZSAoZGF0YVBhY2thZ2UpIHtcbiAgICAgICAgbGV0IGFybWF0dXJlID0gQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoZHJhZ29uQm9uZXMuQXJtYXR1cmUpO1xuXG4gICAgICAgIGFybWF0dXJlLl9za2luRGF0YSA9IGRhdGFQYWNrYWdlLnNraW47XG4gICAgICAgIGFybWF0dXJlLl9hbmltYXRpb24gPSBCYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lcy5BbmltYXRpb24pO1xuICAgICAgICBhcm1hdHVyZS5fYW5pbWF0aW9uLl9hcm1hdHVyZSA9IGFybWF0dXJlO1xuICAgICAgICBhcm1hdHVyZS5fYW5pbWF0aW9uLmFuaW1hdGlvbnMgPSBkYXRhUGFja2FnZS5hcm1hdHVyZS5hbmltYXRpb25zO1xuXG4gICAgICAgIGFybWF0dXJlLl9pc0NoaWxkQXJtYXR1cmUgPSBmYWxzZTtcblxuICAgICAgICAvLyBmaXhlZCBkcmFnb25ib25lcyBzb3J0IGlzc3VlXG4gICAgICAgIC8vIGFybWF0dXJlLl9zb3J0U2xvdHMgPSB0aGlzLl9zb3J0U2xvdHM7XG5cbiAgICAgICAgdmFyIGRpc3BsYXkgPSBuZXcgZHJhZ29uQm9uZXMuQ0NBcm1hdHVyZURpc3BsYXkoKTtcblxuICAgICAgICBhcm1hdHVyZS5pbml0KGRhdGFQYWNrYWdlLmFybWF0dXJlLFxuICAgICAgICAgICAgZGlzcGxheSwgZGlzcGxheSwgdGhpcy5fZHJhZ29uQm9uZXNcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBhcm1hdHVyZTtcbiAgICB9LFxuXG4gICAgX2J1aWxkU2xvdCAoZGF0YVBhY2thZ2UsIHNsb3REYXRhLCBkaXNwbGF5cykge1xuICAgICAgICBsZXQgc2xvdCA9IEJhc2VPYmplY3QuYm9ycm93T2JqZWN0KGRyYWdvbkJvbmVzLkNDU2xvdCk7XG4gICAgICAgIGxldCBkaXNwbGF5ID0gc2xvdDtcbiAgICAgICAgc2xvdC5pbml0KHNsb3REYXRhLCBkaXNwbGF5cywgZGlzcGxheSwgZGlzcGxheSk7XG4gICAgICAgIHJldHVybiBzbG90O1xuICAgIH0sXG5cbiAgICBnZXREcmFnb25Cb25lc0RhdGFCeVVVSUQgKHV1aWQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLl9kcmFnb25Cb25lc0RhdGFNYXApIHtcbiAgICAgICAgICAgIGlmIChuYW1lLmluZGV4T2YodXVpZCkgIT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZHJhZ29uQm9uZXNEYXRhTWFwW25hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG5cbiAgICByZW1vdmVEcmFnb25Cb25lc0RhdGFCeVVVSUQgKHV1aWQsIGRpc3Bvc2VEYXRhKSB7XG4gICAgICAgIGlmIChkaXNwb3NlRGF0YSA9PT0gdm9pZCAwKSB7IGRpc3Bvc2VEYXRhID0gdHJ1ZTsgfVxuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMuX2RyYWdvbkJvbmVzRGF0YU1hcCkge1xuICAgICAgICAgICAgaWYgKG5hbWUuaW5kZXhPZih1dWlkKSA9PT0gLTEpIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKGRpc3Bvc2VEYXRhKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZHJhZ29uQm9uZXMuYnVmZmVyT2JqZWN0KHRoaXMuX2RyYWdvbkJvbmVzRGF0YU1hcFtuYW1lXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fZHJhZ29uQm9uZXNEYXRhTWFwW25hbWVdO1xuICAgICAgICB9XG4gICAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gQ29weXJpZ2h0IChjKSAyMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHA6Ly93d3cuY29jb3MyZC14Lm9yZ1xuXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cbiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxudmFyIEJhc2VPYmplY3QgPSBkcmFnb25Cb25lcy5CYXNlT2JqZWN0LFxuICAgIEJhc2VGYWN0b3J5ID0gZHJhZ29uQm9uZXMuQmFzZUZhY3Rvcnk7XG5cbi8qKlxuICogQG1vZHVsZSBkcmFnb25Cb25lc1xuKi9cblxuLyoqXG4gKiBAY2xhc3MgQ0NGYWN0b3J5XG4gKiBAZXh0ZW5kcyBCYXNlRmFjdG9yeVxuKi9cbnZhciBDQ0ZhY3RvcnkgPSBkcmFnb25Cb25lcy5DQ0ZhY3RvcnkgPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2RyYWdvbkJvbmVzLkNDRmFjdG9yeScsXG4gICAgZXh0ZW5kczogQmFzZUZhY3RvcnksXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBnZXRJbnN0YW5jZVxuICAgICAqIEByZXR1cm4ge0NDRmFjdG9yeX1cbiAgICAgKiBAc3RhdGljXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBsZXQgZmFjdG9yeSA9IGRyYWdvbkJvbmVzLkNDRmFjdG9yeS5nZXRJbnN0YW5jZSgpO1xuICAgICovXG4gICAgc3RhdGljczoge1xuICAgICAgICBfZmFjdG9yeTogbnVsbCxcbiAgICAgICAgZ2V0SW5zdGFuY2U6IGZ1bmN0aW9uIGdldEluc3RhbmNlKCkge1xuICAgICAgICAgICAgaWYgKCFDQ0ZhY3RvcnkuX2ZhY3RvcnkpIHtcbiAgICAgICAgICAgICAgICBDQ0ZhY3RvcnkuX2ZhY3RvcnkgPSBuZXcgQ0NGYWN0b3J5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gQ0NGYWN0b3J5Ll9mYWN0b3J5O1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGN0b3I6IGZ1bmN0aW9uIGN0b3IoKSB7XG4gICAgICAgIHZhciBldmVudE1hbmFnZXIgPSBuZXcgZHJhZ29uQm9uZXMuQ0NBcm1hdHVyZURpc3BsYXkoKTtcbiAgICAgICAgdGhpcy5fZHJhZ29uQm9uZXMgPSBuZXcgZHJhZ29uQm9uZXMuRHJhZ29uQm9uZXMoZXZlbnRNYW5hZ2VyKTtcblxuICAgICAgICBpZiAoIUNDX05BVElWRVJFTkRFUkVSICYmICFDQ19FRElUT1IgJiYgY2MuZGlyZWN0b3IuX3NjaGVkdWxlcikge1xuICAgICAgICAgICAgY2MuZ2FtZS5vbihjYy5nYW1lLkVWRU5UX1JFU1RBUlQsIHRoaXMuaW5pdFVwZGF0ZSwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLmluaXRVcGRhdGUoKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgaW5pdFVwZGF0ZTogZnVuY3Rpb24gaW5pdFVwZGF0ZShkdCkge1xuICAgICAgICBjYy5kaXJlY3Rvci5fc2NoZWR1bGVyLmVuYWJsZUZvclRhcmdldCh0aGlzKTtcbiAgICAgICAgY2MuZGlyZWN0b3IuX3NjaGVkdWxlci5zY2hlZHVsZVVwZGF0ZSh0aGlzLCBjYy5TY2hlZHVsZXIuUFJJT1JJVFlfU1lTVEVNLCBmYWxzZSk7XG4gICAgfSxcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShkdCkge1xuICAgICAgICB0aGlzLl9kcmFnb25Cb25lcy5hZHZhbmNlVGltZShkdCk7XG4gICAgfSxcbiAgICBnZXREcmFnb25Cb25lc0RhdGFCeVJhd0RhdGE6IGZ1bmN0aW9uIGdldERyYWdvbkJvbmVzRGF0YUJ5UmF3RGF0YShyYXdEYXRhKSB7XG4gICAgICAgIHZhciBkYXRhUGFyc2VyID0gcmF3RGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyID8gQmFzZUZhY3RvcnkuX2JpbmFyeVBhcnNlciA6IHRoaXMuX2RhdGFQYXJzZXI7XG4gICAgICAgIHJldHVybiBkYXRhUGFyc2VyLnBhcnNlRHJhZ29uQm9uZXNEYXRhKHJhd0RhdGEsIDEuMCk7XG4gICAgfSxcblxuXG4gICAgLy8gQnVpbGQgbmV3IGFyYW10dXJlIHdpdGggYSBuZXcgZGlzcGxheS5cbiAgICBidWlsZEFybWF0dXJlRGlzcGxheTogZnVuY3Rpb24gYnVpbGRBcm1hdHVyZURpc3BsYXkoYXJtYXR1cmVOYW1lLCBkcmFnb25Cb25lc05hbWUsIHNraW5OYW1lLCB0ZXh0dXJlQXRsYXNOYW1lKSB7XG4gICAgICAgIHZhciBhcm1hdHVyZSA9IHRoaXMuYnVpbGRBcm1hdHVyZShhcm1hdHVyZU5hbWUsIGRyYWdvbkJvbmVzTmFtZSwgc2tpbk5hbWUsIHRleHR1cmVBdGxhc05hbWUpO1xuICAgICAgICByZXR1cm4gYXJtYXR1cmUgJiYgYXJtYXR1cmUuX2Rpc3BsYXk7XG4gICAgfSxcblxuXG4gICAgLy8gQnVpbGQgc3ViIGFybWF0dXJlIGZyb20gYW4gZXhpc3QgYXJtYXR1cmUgY29tcG9uZW50LlxuICAgIC8vIEl0IHdpbGwgc2hhcmUgZHJhZ29uQXNzZXQgYW5kIGRyYWdvbkF0bGFzQXNzZXQuXG4gICAgLy8gQnV0IG5vZGUgY2FuIG5vdCBzaGFyZSxvciB3aWxsIGNhdXNlIHJlbmRlciBlcnJvci5cbiAgICBjcmVhdGVBcm1hdHVyZU5vZGU6IGZ1bmN0aW9uIGNyZWF0ZUFybWF0dXJlTm9kZShjb21wLCBhcm1hdHVyZU5hbWUsIG5vZGUpIHtcbiAgICAgICAgbm9kZSA9IG5vZGUgfHwgbmV3IGNjLk5vZGUoKTtcbiAgICAgICAgdmFyIGRpc3BsYXkgPSBub2RlLmdldENvbXBvbmVudChkcmFnb25Cb25lcy5Bcm1hdHVyZURpc3BsYXkpO1xuICAgICAgICBpZiAoIWRpc3BsYXkpIHtcbiAgICAgICAgICAgIGRpc3BsYXkgPSBub2RlLmFkZENvbXBvbmVudChkcmFnb25Cb25lcy5Bcm1hdHVyZURpc3BsYXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgbm9kZS5uYW1lID0gYXJtYXR1cmVOYW1lO1xuXG4gICAgICAgIGRpc3BsYXkuX2FybWF0dXJlTmFtZSA9IGFybWF0dXJlTmFtZTtcbiAgICAgICAgZGlzcGxheS5fTiRkcmFnb25Bc3NldCA9IGNvbXAuZHJhZ29uQXNzZXQ7XG4gICAgICAgIGRpc3BsYXkuX04kZHJhZ29uQXRsYXNBc3NldCA9IGNvbXAuZHJhZ29uQXRsYXNBc3NldDtcbiAgICAgICAgZGlzcGxheS5faW5pdCgpO1xuXG4gICAgICAgIHJldHVybiBkaXNwbGF5O1xuICAgIH0sXG4gICAgX2J1aWxkVGV4dHVyZUF0bGFzRGF0YTogZnVuY3Rpb24gX2J1aWxkVGV4dHVyZUF0bGFzRGF0YSh0ZXh0dXJlQXRsYXNEYXRhLCB0ZXh0dXJlQXRsYXMpIHtcbiAgICAgICAgaWYgKHRleHR1cmVBdGxhc0RhdGEpIHtcbiAgICAgICAgICAgIHRleHR1cmVBdGxhc0RhdGEucmVuZGVyVGV4dHVyZSA9IHRleHR1cmVBdGxhcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRleHR1cmVBdGxhc0RhdGEgPSBCYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lcy5DQ1RleHR1cmVBdGxhc0RhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0ZXh0dXJlQXRsYXNEYXRhO1xuICAgIH0sXG4gICAgX3NvcnRTbG90czogZnVuY3Rpb24gX3NvcnRTbG90cygpIHtcbiAgICAgICAgdmFyIHNsb3RzID0gdGhpcy5fc2xvdHM7XG4gICAgICAgIHZhciBzb3J0ZWRTbG90cyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHNsb3RzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdmFyIHNsb3QgPSBzbG90c1tpXTtcbiAgICAgICAgICAgIHZhciB6T3JkZXIgPSBzbG90Ll96T3JkZXI7XG4gICAgICAgICAgICB2YXIgaW5zZXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSBzb3J0ZWRTbG90cy5sZW5ndGggLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgICAgICAgICAgIGlmICh6T3JkZXIgPj0gc29ydGVkU2xvdHNbal0uX3pPcmRlcikge1xuICAgICAgICAgICAgICAgICAgICBzb3J0ZWRTbG90cy5zcGxpY2UoaiArIDEsIDAsIHNsb3QpO1xuICAgICAgICAgICAgICAgICAgICBpbnNlcnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaW5zZXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICBzb3J0ZWRTbG90cy5zcGxpY2UoMCwgMCwgc2xvdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc2xvdHMgPSBzb3J0ZWRTbG90cztcbiAgICB9LFxuICAgIF9idWlsZEFybWF0dXJlOiBmdW5jdGlvbiBfYnVpbGRBcm1hdHVyZShkYXRhUGFja2FnZSkge1xuICAgICAgICB2YXIgYXJtYXR1cmUgPSBCYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lcy5Bcm1hdHVyZSk7XG5cbiAgICAgICAgYXJtYXR1cmUuX3NraW5EYXRhID0gZGF0YVBhY2thZ2Uuc2tpbjtcbiAgICAgICAgYXJtYXR1cmUuX2FuaW1hdGlvbiA9IEJhc2VPYmplY3QuYm9ycm93T2JqZWN0KGRyYWdvbkJvbmVzLkFuaW1hdGlvbik7XG4gICAgICAgIGFybWF0dXJlLl9hbmltYXRpb24uX2FybWF0dXJlID0gYXJtYXR1cmU7XG4gICAgICAgIGFybWF0dXJlLl9hbmltYXRpb24uYW5pbWF0aW9ucyA9IGRhdGFQYWNrYWdlLmFybWF0dXJlLmFuaW1hdGlvbnM7XG5cbiAgICAgICAgYXJtYXR1cmUuX2lzQ2hpbGRBcm1hdHVyZSA9IGZhbHNlO1xuXG4gICAgICAgIC8vIGZpeGVkIGRyYWdvbmJvbmVzIHNvcnQgaXNzdWVcbiAgICAgICAgLy8gYXJtYXR1cmUuX3NvcnRTbG90cyA9IHRoaXMuX3NvcnRTbG90cztcblxuICAgICAgICB2YXIgZGlzcGxheSA9IG5ldyBkcmFnb25Cb25lcy5DQ0FybWF0dXJlRGlzcGxheSgpO1xuXG4gICAgICAgIGFybWF0dXJlLmluaXQoZGF0YVBhY2thZ2UuYXJtYXR1cmUsIGRpc3BsYXksIGRpc3BsYXksIHRoaXMuX2RyYWdvbkJvbmVzKTtcblxuICAgICAgICByZXR1cm4gYXJtYXR1cmU7XG4gICAgfSxcbiAgICBfYnVpbGRTbG90OiBmdW5jdGlvbiBfYnVpbGRTbG90KGRhdGFQYWNrYWdlLCBzbG90RGF0YSwgZGlzcGxheXMpIHtcbiAgICAgICAgdmFyIHNsb3QgPSBCYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lcy5DQ1Nsb3QpO1xuICAgICAgICB2YXIgZGlzcGxheSA9IHNsb3Q7XG4gICAgICAgIHNsb3QuaW5pdChzbG90RGF0YSwgZGlzcGxheXMsIGRpc3BsYXksIGRpc3BsYXkpO1xuICAgICAgICByZXR1cm4gc2xvdDtcbiAgICB9LFxuICAgIGdldERyYWdvbkJvbmVzRGF0YUJ5VVVJRDogZnVuY3Rpb24gZ2V0RHJhZ29uQm9uZXNEYXRhQnlVVUlEKHV1aWQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLl9kcmFnb25Cb25lc0RhdGFNYXApIHtcbiAgICAgICAgICAgIGlmIChuYW1lLmluZGV4T2YodXVpZCkgIT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZHJhZ29uQm9uZXNEYXRhTWFwW25hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgcmVtb3ZlRHJhZ29uQm9uZXNEYXRhQnlVVUlEOiBmdW5jdGlvbiByZW1vdmVEcmFnb25Cb25lc0RhdGFCeVVVSUQodXVpZCwgZGlzcG9zZURhdGEpIHtcbiAgICAgICAgaWYgKGRpc3Bvc2VEYXRhID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGRpc3Bvc2VEYXRhID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMuX2RyYWdvbkJvbmVzRGF0YU1hcCkge1xuICAgICAgICAgICAgaWYgKG5hbWUuaW5kZXhPZih1dWlkKSA9PT0gLTEpIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKGRpc3Bvc2VEYXRhKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZHJhZ29uQm9uZXMuYnVmZmVyT2JqZWN0KHRoaXMuX2RyYWdvbkJvbmVzRGF0YU1hcFtuYW1lXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fZHJhZ29uQm9uZXNEYXRhTWFwW25hbWVdO1xuICAgICAgICB9XG4gICAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa05EUm1GamRHOXllUzVxY3lKZExDSnVZVzFsY3lJNld5SkNZWE5sVDJKcVpXTjBJaXdpWkhKaFoyOXVRbTl1WlhNaUxDSkNZWE5sUm1GamRHOXllU0lzSWtORFJtRmpkRzl5ZVNJc0ltTmpJaXdpUTJ4aGMzTWlMQ0p1WVcxbElpd2laWGgwWlc1a2N5SXNJbk4wWVhScFkzTWlMQ0pmWm1GamRHOXllU0lzSW1kbGRFbHVjM1JoYm1ObElpd2lZM1J2Y2lJc0ltVjJaVzUwVFdGdVlXZGxjaUlzSWtORFFYSnRZWFIxY21WRWFYTndiR0Y1SWl3aVgyUnlZV2R2YmtKdmJtVnpJaXdpUkhKaFoyOXVRbTl1WlhNaUxDSkRRMTlPUVZSSlZrVlNSVTVFUlZKRlVpSXNJa05EWDBWRVNWUlBVaUlzSW1ScGNtVmpkRzl5SWl3aVgzTmphR1ZrZFd4bGNpSXNJbWRoYldVaUxDSnZiaUlzSWtWV1JVNVVYMUpGVTFSQlVsUWlMQ0pwYm1sMFZYQmtZWFJsSWl3aVpIUWlMQ0psYm1GaWJHVkdiM0pVWVhKblpYUWlMQ0p6WTJobFpIVnNaVlZ3WkdGMFpTSXNJbE5qYUdWa2RXeGxjaUlzSWxCU1NVOVNTVlJaWDFOWlUxUkZUU0lzSW5Wd1pHRjBaU0lzSW1Ga2RtRnVZMlZVYVcxbElpd2laMlYwUkhKaFoyOXVRbTl1WlhORVlYUmhRbmxTWVhkRVlYUmhJaXdpY21GM1JHRjBZU0lzSW1SaGRHRlFZWEp6WlhJaUxDSkJjbkpoZVVKMVptWmxjaUlzSWw5aWFXNWhjbmxRWVhKelpYSWlMQ0pmWkdGMFlWQmhjbk5sY2lJc0luQmhjbk5sUkhKaFoyOXVRbTl1WlhORVlYUmhJaXdpWW5WcGJHUkJjbTFoZEhWeVpVUnBjM0JzWVhraUxDSmhjbTFoZEhWeVpVNWhiV1VpTENKa2NtRm5iMjVDYjI1bGMwNWhiV1VpTENKemEybHVUbUZ0WlNJc0luUmxlSFIxY21WQmRHeGhjMDVoYldVaUxDSmhjbTFoZEhWeVpTSXNJbUoxYVd4a1FYSnRZWFIxY21VaUxDSmZaR2x6Y0d4aGVTSXNJbU55WldGMFpVRnliV0YwZFhKbFRtOWtaU0lzSW1OdmJYQWlMQ0p1YjJSbElpd2lUbTlrWlNJc0ltUnBjM0JzWVhraUxDSm5aWFJEYjIxd2IyNWxiblFpTENKQmNtMWhkSFZ5WlVScGMzQnNZWGtpTENKaFpHUkRiMjF3YjI1bGJuUWlMQ0pmWVhKdFlYUjFjbVZPWVcxbElpd2lYMDRrWkhKaFoyOXVRWE56WlhRaUxDSmtjbUZuYjI1QmMzTmxkQ0lzSWw5T0pHUnlZV2R2YmtGMGJHRnpRWE56WlhRaUxDSmtjbUZuYjI1QmRHeGhjMEZ6YzJWMElpd2lYMmx1YVhRaUxDSmZZblZwYkdSVVpYaDBkWEpsUVhSc1lYTkVZWFJoSWl3aWRHVjRkSFZ5WlVGMGJHRnpSR0YwWVNJc0luUmxlSFIxY21WQmRHeGhjeUlzSW5KbGJtUmxjbFJsZUhSMWNtVWlMQ0ppYjNKeWIzZFBZbXBsWTNRaUxDSkRRMVJsZUhSMWNtVkJkR3hoYzBSaGRHRWlMQ0pmYzI5eWRGTnNiM1J6SWl3aWMyeHZkSE1pTENKZmMyeHZkSE1pTENKemIzSjBaV1JUYkc5MGN5SXNJbWtpTENKc0lpd2liR1Z1WjNSb0lpd2ljMnh2ZENJc0lucFBjbVJsY2lJc0lsOTZUM0prWlhJaUxDSnBibk5sY25SbFpDSXNJbW9pTENKemNHeHBZMlVpTENKZlluVnBiR1JCY20xaGRIVnlaU0lzSW1SaGRHRlFZV05yWVdkbElpd2lRWEp0WVhSMWNtVWlMQ0pmYzJ0cGJrUmhkR0VpTENKemEybHVJaXdpWDJGdWFXMWhkR2x2YmlJc0lrRnVhVzFoZEdsdmJpSXNJbDloY20xaGRIVnlaU0lzSW1GdWFXMWhkR2x2Ym5NaUxDSmZhWE5EYUdsc1pFRnliV0YwZFhKbElpd2lhVzVwZENJc0lsOWlkV2xzWkZOc2IzUWlMQ0p6Ykc5MFJHRjBZU0lzSW1ScGMzQnNZWGx6SWl3aVEwTlRiRzkwSWl3aVoyVjBSSEpoWjI5dVFtOXVaWE5FWVhSaFFubFZWVWxFSWl3aWRYVnBaQ0lzSWw5a2NtRm5iMjVDYjI1bGMwUmhkR0ZOWVhBaUxDSnBibVJsZUU5bUlpd2ljbVZ0YjNabFJISmhaMjl1UW05dVpYTkVZWFJoUW5sVlZVbEVJaXdpWkdsemNHOXpaVVJoZEdFaUxDSmlkV1ptWlhKUFltcGxZM1FpWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVGNVFrRXNTVUZCU1VFc1lVRkJZVU1zV1VGQldVUXNWVUZCTjBJN1FVRkJRU3hKUVVOSlJTeGpRVUZqUkN4WlFVRlpReXhYUVVRNVFqczdRVUZIUVRzN096dEJRVWxCT3pzN08wRkJTVUVzU1VGQlNVTXNXVUZCV1VZc1dVRkJXVVVzVTBGQldpeEhRVUYzUWtNc1IwRkJSME1zUzBGQlNDeERRVUZUTzBGQlF6ZERReXhWUVVGTkxIVkNRVVIxUXp0QlFVVTNRME1zWVVGQlUwd3NWMEZHYjBNN1FVRkhOME03T3pzN096czdRVUZQUVUwc1lVRkJVenRCUVVOTVF5eHJRa0ZCVlN4SlFVUk1PMEZCUlV4RExHMUNRVVpMTEhsQ1FVVlZPMEZCUTFnc1owSkJRVWtzUTBGQlExQXNWVUZCVlUwc1VVRkJaaXhGUVVGNVFqdEJRVU55UWs0c01FSkJRVlZOTEZGQlFWWXNSMEZCY1VJc1NVRkJTVTRzVTBGQlNpeEZRVUZ5UWp0QlFVTklPMEZCUTBRc2JVSkJRVTlCTEZWQlFWVk5MRkZCUVdwQ08wRkJRMGc3UVVGUVNTeExRVlp2UXpzN1FVRnZRamREUlN4UlFYQkNOa01zYTBKQmIwSnlRenRCUVVOS0xGbEJRVWxETEdWQlFXVXNTVUZCU1Znc1dVRkJXVmtzYVVKQlFXaENMRVZCUVc1Q08wRkJRMEVzWVVGQlMwTXNXVUZCVEN4SFFVRnZRaXhKUVVGSllpeFpRVUZaWXl4WFFVRm9RaXhEUVVFMFFrZ3NXVUZCTlVJc1EwRkJjRUk3TzBGQlJVRXNXVUZCU1N4RFFVRkRTU3hwUWtGQlJDeEpRVUZ6UWl4RFFVRkRReXhUUVVGMlFpeEpRVUZ2UTJJc1IwRkJSMk1zVVVGQlNDeERRVUZaUXl4VlFVRndSQ3hGUVVGblJUdEJRVU0xUkdZc1pVRkJSMmRDTEVsQlFVZ3NRMEZCVVVNc1JVRkJVaXhEUVVGWGFrSXNSMEZCUjJkQ0xFbEJRVWdzUTBGQlVVVXNZVUZCYmtJc1JVRkJhME1zUzBGQlMwTXNWVUZCZGtNc1JVRkJiVVFzU1VGQmJrUTdRVUZEUVN4cFFrRkJTMEVzVlVGQlREdEJRVU5JTzBGQlEwb3NTMEUxUWpSRE8wRkJPRUkzUTBFc1kwRTVRalpETEhOQ1FUaENha05ETEVWQk9VSnBReXhGUVRoQ04wSTdRVUZEV25CQ0xGZEJRVWRqTEZGQlFVZ3NRMEZCV1VNc1ZVRkJXaXhEUVVGMVFrMHNaVUZCZGtJc1EwRkJkVU1zU1VGQmRrTTdRVUZEUVhKQ0xGZEJRVWRqTEZGQlFVZ3NRMEZCV1VNc1ZVRkJXaXhEUVVGMVFrOHNZMEZCZGtJc1EwRkJjME1zU1VGQmRFTXNSVUZCTkVOMFFpeEhRVUZIZFVJc1UwRkJTQ3hEUVVGaFF5eGxRVUY2UkN4RlFVRXdSU3hMUVVFeFJUdEJRVU5JTEV0QmFrTTBRenRCUVcxRE4wTkRMRlZCYmtNMlF5eHJRa0Z0UTNKRFRDeEZRVzVEY1VNc1JVRnRRMnBETzBGQlExSXNZVUZCUzFZc1dVRkJUQ3hEUVVGclFtZENMRmRCUVd4Q0xFTkJRVGhDVGl4RlFVRTVRanRCUVVOSUxFdEJja00wUXp0QlFYVkROME5QTEN0Q1FYWkROa01zZFVOQmRVTm9Ra01zVDBGMlEyZENMRVZCZFVOUU8wRkJRMnhETEZsQlFVbERMR0ZCUVdGRUxHMUNRVUZ0UWtVc1YwRkJia0lzUjBGQmFVTm9ReXhaUVVGWmFVTXNZVUZCTjBNc1IwRkJOa1FzUzBGQlMwTXNWMEZCYmtZN1FVRkRRU3hsUVVGUFNDeFhRVUZYU1N4dlFrRkJXQ3hEUVVGblEwd3NUMEZCYUVNc1JVRkJlVU1zUjBGQmVrTXNRMEZCVUR0QlFVTklMRXRCTVVNMFF6czdPMEZCTkVNM1F6dEJRVU5CVFN4M1FrRTNRelpETEdkRFFUWkRka0pETEZsQk4wTjFRaXhGUVRaRFZFTXNaVUUzUTFNc1JVRTJRMUZETEZGQk4wTlNMRVZCTmtOclFrTXNaMEpCTjBOc1FpeEZRVFpEYjBNN1FVRkROMFVzV1VGQlNVTXNWMEZCVnl4TFFVRkxReXhoUVVGTUxFTkJRVzFDVEN4WlFVRnVRaXhGUVVGcFEwTXNaVUZCYWtNc1JVRkJhMFJETEZGQlFXeEVMRVZCUVRSRVF5eG5Ra0ZCTlVRc1EwRkJaanRCUVVOQkxHVkJRVTlETEZsQlFWbEJMRk5CUVZORkxGRkJRVFZDTzBGQlEwZ3NTMEZvUkRSRE96czdRVUZyUkRkRE8wRkJRMEU3UVVGRFFUdEJRVU5CUXl4elFrRnlSRFpETERoQ1FYRkVla0pETEVsQmNrUjVRaXhGUVhGRWJrSlNMRmxCY2tSdFFpeEZRWEZFVEZNc1NVRnlSRXNzUlVGeFJFTTdRVUZETVVOQkxHVkJRVTlCTEZGQlFWRXNTVUZCU1RWRExFZEJRVWMyUXl4SlFVRlFMRVZCUVdZN1FVRkRRU3haUVVGSlF5eFZRVUZWUml4TFFVRkxSeXhaUVVGTUxFTkJRV3RDYkVRc1dVRkJXVzFFTEdWQlFUbENMRU5CUVdRN1FVRkRRU3haUVVGSkxFTkJRVU5HTEU5QlFVd3NSVUZCWXp0QlFVTldRU3h6UWtGQlZVWXNTMEZCUzBzc1dVRkJUQ3hEUVVGclFuQkVMRmxCUVZsdFJDeGxRVUU1UWl4RFFVRldPMEZCUTBnN08wRkJSVVJLTEdGQlFVc3hReXhKUVVGTUxFZEJRVmxwUXl4WlFVRmFPenRCUVVWQlZ5eG5Ra0ZCVVVrc1lVRkJVaXhIUVVGM1FtWXNXVUZCZUVJN1FVRkRRVmNzWjBKQlFWRkxMR05CUVZJc1IwRkJlVUpTTEV0QlFVdFRMRmRCUVRsQ08wRkJRMEZPTEdkQ1FVRlJUeXh0UWtGQlVpeEhRVUU0UWxZc1MwRkJTMWNzWjBKQlFXNURPMEZCUTBGU0xHZENRVUZSVXl4TFFVRlNPenRCUVVWQkxHVkJRVTlVTEU5QlFWQTdRVUZEU0N4TFFYQkZORU03UVVGelJUZERWU3d3UWtGMFJUWkRMR3REUVhORmNrSkRMR2RDUVhSRmNVSXNSVUZ6UlVoRExGbEJkRVZITEVWQmMwVlhPMEZCUTNCRUxGbEJRVWxFTEdkQ1FVRktMRVZCUVhOQ08wRkJRMnhDUVN3MlFrRkJhVUpGTEdGQlFXcENMRWRCUVdsRFJDeFpRVUZxUXp0QlFVTklMRk5CUmtRc1RVRkhTenRCUVVORVJDd3JRa0ZCYlVJM1JDeFhRVUZYWjBVc1dVRkJXQ3hEUVVGM1FpOUVMRmxCUVZsblJTeHJRa0ZCY0VNc1EwRkJia0k3UVVGRFNEdEJRVU5FTEdWQlFVOUtMR2RDUVVGUU8wRkJRMGdzUzBFNVJUUkRPMEZCWjBZM1Ewc3NZMEZvUmpaRExIZENRV2RHTDBJN1FVRkRWaXhaUVVGSlF5eFJRVUZSTEV0QlFVdERMRTFCUVdwQ08wRkJRMEVzV1VGQlNVTXNZMEZCWXl4RlFVRnNRanRCUVVOQkxHRkJRVXNzU1VGQlNVTXNTVUZCU1N4RFFVRlNMRVZCUVZkRExFbEJRVWxLTEUxQlFVMUxMRTFCUVRGQ0xFVkJRV3REUml4SlFVRkpReXhEUVVGMFF5eEZRVUY1UTBRc1IwRkJla01zUlVGQk9FTTdRVUZETVVNc1owSkJRVWxITEU5QlFVOU9MRTFCUVUxSExFTkJRVTRzUTBGQldEdEJRVU5CTEdkQ1FVRkpTU3hUUVVGVFJDeExRVUZMUlN4UFFVRnNRanRCUVVOQkxHZENRVUZKUXl4WFFVRlhMRXRCUVdZN1FVRkRRU3hwUWtGQlN5eEpRVUZKUXl4SlFVRkpVaXhaUVVGWlJ5eE5RVUZhTEVkQlFYRkNMRU5CUVd4RExFVkJRWEZEU3l4TFFVRkxMRU5CUVRGRExFVkJRVFpEUVN4SFFVRTNReXhGUVVGclJEdEJRVU01UXl4dlFrRkJTVWdzVlVGQlZVd3NXVUZCV1ZFc1EwRkJXaXhGUVVGbFJpeFBRVUUzUWl4RlFVRnpRenRCUVVOc1EwNHNaME5CUVZsVExFMUJRVm9zUTBGQmJVSkVMRWxCUVVVc1EwRkJja0lzUlVGQmQwSXNRMEZCZUVJc1JVRkJNa0pLTEVsQlFUTkNPMEZCUTBGSExDdENRVUZYTEVsQlFWZzdRVUZEUVR0QlFVTklPMEZCUTBvN1FVRkRSQ3huUWtGQlNTeERRVUZEUVN4UlFVRk1MRVZCUVdVN1FVRkRXRkFzTkVKQlFWbFRMRTFCUVZvc1EwRkJiVUlzUTBGQmJrSXNSVUZCYzBJc1EwRkJkRUlzUlVGQmVVSk1MRWxCUVhwQ08wRkJRMGc3UVVGRFNqdEJRVU5FTEdGQlFVdE1MRTFCUVV3c1IwRkJZME1zVjBGQlpEdEJRVU5JTEV0QmJrYzBRenRCUVhGSE4wTlZMR3RDUVhKSE5rTXNNRUpCY1VjM1FrTXNWMEZ5UnpaQ0xFVkJjVWRvUWp0QlFVTjZRaXhaUVVGSmNrTXNWMEZCVnpORExGZEJRVmRuUlN4WlFVRllMRU5CUVhkQ0wwUXNXVUZCV1dkR0xGRkJRWEJETEVOQlFXWTdPMEZCUlVGMFF5eHBRa0ZCVTNWRExGTkJRVlFzUjBGQmNVSkdMRmxCUVZsSExFbEJRV3BETzBGQlEwRjRReXhwUWtGQlUzbERMRlZCUVZRc1IwRkJjMEp3Uml4WFFVRlhaMFVzV1VGQldDeERRVUYzUWk5RUxGbEJRVmx2Uml4VFFVRndReXhEUVVGMFFqdEJRVU5CTVVNc2FVSkJRVk41UXl4VlFVRlVMRU5CUVc5Q1JTeFRRVUZ3UWl4SFFVRm5Rek5ETEZGQlFXaERPMEZCUTBGQkxHbENRVUZUZVVNc1ZVRkJWQ3hEUVVGdlFrY3NWVUZCY0VJc1IwRkJhVU5RTEZsQlFWbHlReXhSUVVGYUxFTkJRWEZDTkVNc1ZVRkJkRVE3TzBGQlJVRTFReXhwUWtGQlV6WkRMR2RDUVVGVUxFZEJRVFJDTEV0QlFUVkNPenRCUVVWQk8wRkJRMEU3TzBGQlJVRXNXVUZCU1hSRExGVkJRVlVzU1VGQlNXcEVMRmxCUVZsWkxHbENRVUZvUWl4RlFVRmtPenRCUVVWQk9FSXNhVUpCUVZNNFF5eEpRVUZVTEVOQlFXTlVMRmxCUVZseVF5eFJRVUV4UWl4RlFVTkpUeXhQUVVSS0xFVkJRMkZCTEU5QlJHSXNSVUZEYzBJc1MwRkJTM0JETEZsQlJETkNPenRCUVVsQkxHVkJRVTgyUWl4UlFVRlFPMEZCUTBnc1MwRjZTRFJETzBGQk1rZzNReXRETEdOQk0wZzJReXh6UWtFeVNHcERWaXhYUVROSWFVTXNSVUV5U0hCQ1Z5eFJRVE5JYjBJc1JVRXlTRlpETEZGQk0waFZMRVZCTWtoQk8wRkJRM3BETEZsQlFVbHVRaXhQUVVGUGVrVXNWMEZCVjJkRkxGbEJRVmdzUTBGQmQwSXZSQ3haUVVGWk5FWXNUVUZCY0VNc1EwRkJXRHRCUVVOQkxGbEJRVWt6UXl4VlFVRlZkVUlzU1VGQlpEdEJRVU5CUVN4aFFVRkxaMElzU1VGQlRDeERRVUZWUlN4UlFVRldMRVZCUVc5Q1F5eFJRVUZ3UWl4RlFVRTRRakZETEU5QlFUbENMRVZCUVhWRFFTeFBRVUYyUXp0QlFVTkJMR1ZCUVU5MVFpeEpRVUZRTzBGQlEwZ3NTMEZvU1RSRE8wRkJhMGszUTNGQ0xEUkNRV3hKTmtNc2IwTkJhMGx1UWtNc1NVRnNTVzFDTEVWQmEwbGlPMEZCUXpWQ0xHRkJRVXNzU1VGQlNYcEdMRWxCUVZRc1NVRkJhVUlzUzBGQlN6QkdMRzFDUVVGMFFpeEZRVUV5UXp0QlFVTjJReXhuUWtGQlNURkdMRXRCUVVzeVJpeFBRVUZNTEVOQlFXRkdMRWxCUVdJc1MwRkJjMElzUTBGQlF5eERRVUV6UWl4RlFVRTRRanRCUVVNeFFpeDFRa0ZCVHl4TFFVRkxReXh0UWtGQlRDeERRVUY1UWpGR0xFbEJRWHBDTEVOQlFWQTdRVUZEU0R0QlFVTktPMEZCUTBRc1pVRkJUeXhKUVVGUU8wRkJRMGdzUzBGNlNUUkRPMEZCTWtrM1F6UkdMQ3RDUVROSk5rTXNkVU5CTWtsb1FrZ3NTVUV6U1dkQ0xFVkJNa2xXU1N4WFFUTkpWU3hGUVRKSlJ6dEJRVU0xUXl4WlFVRkpRU3huUWtGQlowSXNTMEZCU3l4RFFVRjZRaXhGUVVFMFFqdEJRVUZGUVN3d1FrRkJZeXhKUVVGa08wRkJRWEZDTzBGQlEyNUVMR0ZCUVVzc1NVRkJTVGRHTEVsQlFWUXNTVUZCYVVJc1MwRkJTekJHTEcxQ1FVRjBRaXhGUVVFeVF6dEJRVU4yUXl4blFrRkJTVEZHTEV0QlFVc3lSaXhQUVVGTUxFTkJRV0ZHTEVsQlFXSXNUVUZCZFVJc1EwRkJReXhEUVVFMVFpeEZRVUVyUWp0QlFVTXZRaXhuUWtGQlNVa3NWMEZCU2l4RlFVRnBRanRCUVVOaUxIRkNRVUZMY2tZc1dVRkJUQ3hEUVVGclFuTkdMRmxCUVd4Q0xFTkJRU3RDTEV0QlFVdEtMRzFDUVVGTUxFTkJRWGxDTVVZc1NVRkJla0lzUTBGQkwwSTdRVUZEU0R0QlFVTkVMRzFDUVVGUExFdEJRVXN3Uml4dFFrRkJUQ3hEUVVGNVFqRkdMRWxCUVhwQ0xFTkJRVkE3UVVGRFNEdEJRVU5LTzBGQmNFbzBReXhEUVVGVUxFTkJRWGhESWl3aVptbHNaU0k2SWtORFJtRmpkRzl5ZVM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdRMjl3ZVhKcFoyaDBJQ2hqS1NBeU1ERTJJRU5vZFd0dmJtY2dWR1ZqYUc1dmJHOW5hV1Z6SUVsdVl5NWNiaUJEYjNCNWNtbG5hSFFnS0dNcElESXdNVGN0TWpBeE9DQllhV0Z0Wlc0Z1dXRnFhU0JUYjJaMGQyRnlaU0JEYnk0c0lFeDBaQzVjYmx4dUlHaDBkSEE2THk5M2QzY3VZMjlqYjNNeVpDMTRMbTl5WjF4dVhHNGdVR1Z5YldsemMybHZiaUJwY3lCb1pYSmxZbmtnWjNKaGJuUmxaQ3dnWm5KbFpTQnZaaUJqYUdGeVoyVXNJSFJ2SUdGdWVTQndaWEp6YjI0Z2IySjBZV2x1YVc1bklHRWdZMjl3ZVZ4dUlHOW1JSFJvYVhNZ2MyOW1kSGRoY21VZ1lXNWtJR0Z6YzI5amFXRjBaV1FnWkc5amRXMWxiblJoZEdsdmJpQm1hV3hsY3lBb2RHaGxJRndpVTI5bWRIZGhjbVZjSWlrc0lIUnZJR1JsWVd4Y2JpQnBiaUIwYUdVZ1UyOW1kSGRoY21VZ2QybDBhRzkxZENCeVpYTjBjbWxqZEdsdmJpd2dhVzVqYkhWa2FXNW5JSGRwZEdodmRYUWdiR2x0YVhSaGRHbHZiaUIwYUdVZ2NtbG5hSFJ6WEc0Z2RHOGdkWE5sTENCamIzQjVMQ0J0YjJScFpua3NJRzFsY21kbExDQndkV0pzYVhOb0xDQmthWE4wY21saWRYUmxMQ0J6ZFdKc2FXTmxibk5sTENCaGJtUXZiM0lnYzJWc2JGeHVJR052Y0dsbGN5QnZaaUIwYUdVZ1UyOW1kSGRoY21Vc0lHRnVaQ0IwYnlCd1pYSnRhWFFnY0dWeWMyOXVjeUIwYnlCM2FHOXRJSFJvWlNCVGIyWjBkMkZ5WlNCcGMxeHVJR1oxY201cGMyaGxaQ0IwYnlCa2J5QnpieXdnYzNWaWFtVmpkQ0IwYnlCMGFHVWdabTlzYkc5M2FXNW5JR052Ym1ScGRHbHZibk02WEc1Y2JpQlVhR1VnWVdKdmRtVWdZMjl3ZVhKcFoyaDBJRzV2ZEdsalpTQmhibVFnZEdocGN5QndaWEp0YVhOemFXOXVJRzV2ZEdsalpTQnphR0ZzYkNCaVpTQnBibU5zZFdSbFpDQnBibHh1SUdGc2JDQmpiM0JwWlhNZ2IzSWdjM1ZpYzNSaGJuUnBZV3dnY0c5eWRHbHZibk1nYjJZZ2RHaGxJRk52Wm5SM1lYSmxMbHh1WEc0Z1ZFaEZJRk5QUmxSWFFWSkZJRWxUSUZCU1QxWkpSRVZFSUZ3aVFWTWdTVk5jSWl3Z1YwbFVTRTlWVkNCWFFWSlNRVTVVV1NCUFJpQkJUbGtnUzBsT1JDd2dSVmhRVWtWVFV5QlBVbHh1SUVsTlVFeEpSVVFzSUVsT1EweFZSRWxPUnlCQ1ZWUWdUazlVSUV4SlRVbFVSVVFnVkU4Z1ZFaEZJRmRCVWxKQlRsUkpSVk1nVDBZZ1RVVlNRMGhCVGxSQlFrbE1TVlJaTEZ4dUlFWkpWRTVGVTFNZ1JrOVNJRUVnVUVGU1ZFbERWVXhCVWlCUVZWSlFUMU5GSUVGT1JDQk9UMDVKVGtaU1NVNUhSVTFGVGxRdUlFbE9JRTVQSUVWV1JVNVVJRk5JUVV4TUlGUklSVnh1SUVGVlZFaFBVbE1nVDFJZ1EwOVFXVkpKUjBoVUlFaFBURVJGVWxNZ1FrVWdURWxCUWt4RklFWlBVaUJCVGxrZ1EweEJTVTBzSUVSQlRVRkhSVk1nVDFJZ1QxUklSVkpjYmlCTVNVRkNTVXhKVkZrc0lGZElSVlJJUlZJZ1NVNGdRVTRnUVVOVVNVOU9JRTlHSUVOUFRsUlNRVU5VTENCVVQxSlVJRTlTSUU5VVNFVlNWMGxUUlN3Z1FWSkpVMGxPUnlCR1VrOU5MRnh1SUU5VlZDQlBSaUJQVWlCSlRpQkRUMDVPUlVOVVNVOU9JRmRKVkVnZ1ZFaEZJRk5QUmxSWFFWSkZJRTlTSUZSSVJTQlZVMFVnVDFJZ1QxUklSVklnUkVWQlRFbE9SMU1nU1U1Y2JpQlVTRVVnVTA5R1ZGZEJVa1V1WEc0Z0tpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaTljYmx4dWJHVjBJRUpoYzJWUFltcGxZM1FnUFNCa2NtRm5iMjVDYjI1bGN5NUNZWE5sVDJKcVpXTjBMRnh1SUNBZ0lFSmhjMlZHWVdOMGIzSjVJRDBnWkhKaFoyOXVRbTl1WlhNdVFtRnpaVVpoWTNSdmNuazdYRzVjYmk4cUtseHVJQ29nUUcxdlpIVnNaU0JrY21GbmIyNUNiMjVsYzF4dUtpOWNibHh1THlvcVhHNGdLaUJBWTJ4aGMzTWdRME5HWVdOMGIzSjVYRzRnS2lCQVpYaDBaVzVrY3lCQ1lYTmxSbUZqZEc5eWVWeHVLaTljYm5aaGNpQkRRMFpoWTNSdmNua2dQU0JrY21GbmIyNUNiMjVsY3k1RFEwWmhZM1J2Y25rZ1BTQmpZeTVEYkdGemN5aDdYRzRnSUNBZ2JtRnRaVG9nSjJSeVlXZHZia0p2Ym1WekxrTkRSbUZqZEc5eWVTY3NYRzRnSUNBZ1pYaDBaVzVrY3pvZ1FtRnpaVVpoWTNSdmNua3NYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQm5aWFJKYm5OMFlXNWpaVnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlME5EUm1GamRHOXllWDFjYmlBZ0lDQWdLaUJBYzNSaGRHbGpYRzRnSUNBZ0lDb2dRR1Y0WVcxd2JHVmNiaUFnSUNBZ0tpQnNaWFFnWm1GamRHOXllU0E5SUdSeVlXZHZia0p2Ym1WekxrTkRSbUZqZEc5eWVTNW5aWFJKYm5OMFlXNWpaU2dwTzF4dUlDQWdJQ292WEc0Z0lDQWdjM1JoZEdsamN6b2dlMXh1SUNBZ0lDQWdJQ0JmWm1GamRHOXllVG9nYm5Wc2JDeGNiaUFnSUNBZ0lDQWdaMlYwU1c1emRHRnVZMlVnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRkRRMFpoWTNSdmNua3VYMlpoWTNSdmNua3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JEUTBaaFkzUnZjbmt1WDJaaFkzUnZjbmtnUFNCdVpYY2dRME5HWVdOMGIzSjVLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnUTBOR1lXTjBiM0o1TGw5bVlXTjBiM0o1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUdOMGIzSWdLQ2tnZTF4dUlDQWdJQ0FnSUNCc1pYUWdaWFpsYm5STllXNWhaMlZ5SUQwZ2JtVjNJR1J5WVdkdmJrSnZibVZ6TGtORFFYSnRZWFIxY21WRWFYTndiR0Y1S0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJSeVlXZHZia0p2Ym1WeklEMGdibVYzSUdSeVlXZHZia0p2Ym1WekxrUnlZV2R2YmtKdmJtVnpLR1YyWlc1MFRXRnVZV2RsY2lrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0NGRFExOU9RVlJKVmtWU1JVNUVSVkpGVWlBbUppQWhRME5mUlVSSlZFOVNJQ1ltSUdOakxtUnBjbVZqZEc5eUxsOXpZMmhsWkhWc1pYSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmpMbWRoYldVdWIyNG9ZMk11WjJGdFpTNUZWa1ZPVkY5U1JWTlVRVkpVTENCMGFHbHpMbWx1YVhSVmNHUmhkR1VzSUhSb2FYTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVwYm1sMFZYQmtZWFJsS0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzRnSUNBZ2FXNXBkRlZ3WkdGMFpTQW9aSFFwSUh0Y2JpQWdJQ0FnSUNBZ1kyTXVaR2x5WldOMGIzSXVYM05qYUdWa2RXeGxjaTVsYm1GaWJHVkdiM0pVWVhKblpYUW9kR2hwY3lrN1hHNGdJQ0FnSUNBZ0lHTmpMbVJwY21WamRHOXlMbDl6WTJobFpIVnNaWEl1YzJOb1pXUjFiR1ZWY0dSaGRHVW9kR2hwY3l3Z1kyTXVVMk5vWldSMWJHVnlMbEJTU1U5U1NWUlpYMU5aVTFSRlRTd2dabUZzYzJVcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCMWNHUmhkR1VnS0dSMEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyUnlZV2R2YmtKdmJtVnpMbUZrZG1GdVkyVlVhVzFsS0dSMEtUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ1oyVjBSSEpoWjI5dVFtOXVaWE5FWVhSaFFubFNZWGRFWVhSaElDaHlZWGRFWVhSaEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCa1lYUmhVR0Z5YzJWeUlEMGdjbUYzUkdGMFlTQnBibk4wWVc1alpXOW1JRUZ5Y21GNVFuVm1abVZ5SUQ4Z1FtRnpaVVpoWTNSdmNua3VYMkpwYm1GeWVWQmhjbk5sY2lBNklIUm9hWE11WDJSaGRHRlFZWEp6WlhJN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCa1lYUmhVR0Z5YzJWeUxuQmhjbk5sUkhKaFoyOXVRbTl1WlhORVlYUmhLSEpoZDBSaGRHRXNJREV1TUNrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4dklFSjFhV3hrSUc1bGR5QmhjbUZ0ZEhWeVpTQjNhWFJvSUdFZ2JtVjNJR1JwYzNCc1lYa3VYRzRnSUNBZ1luVnBiR1JCY20xaGRIVnlaVVJwYzNCc1lYa2dLR0Z5YldGMGRYSmxUbUZ0WlN3Z1pISmhaMjl1UW05dVpYTk9ZVzFsTENCemEybHVUbUZ0WlN3Z2RHVjRkSFZ5WlVGMGJHRnpUbUZ0WlNrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnWVhKdFlYUjFjbVVnUFNCMGFHbHpMbUoxYVd4a1FYSnRZWFIxY21Vb1lYSnRZWFIxY21WT1lXMWxMQ0JrY21GbmIyNUNiMjVsYzA1aGJXVXNJSE5yYVc1T1lXMWxMQ0IwWlhoMGRYSmxRWFJzWVhOT1lXMWxLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR0Z5YldGMGRYSmxJQ1ltSUdGeWJXRjBkWEpsTGw5a2FYTndiR0Y1TzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2THlCQ2RXbHNaQ0J6ZFdJZ1lYSnRZWFIxY21VZ1puSnZiU0JoYmlCbGVHbHpkQ0JoY20xaGRIVnlaU0JqYjIxd2IyNWxiblF1WEc0Z0lDQWdMeThnU1hRZ2QybHNiQ0J6YUdGeVpTQmtjbUZuYjI1QmMzTmxkQ0JoYm1RZ1pISmhaMjl1UVhSc1lYTkJjM05sZEM1Y2JpQWdJQ0F2THlCQ2RYUWdibTlrWlNCallXNGdibTkwSUhOb1lYSmxMRzl5SUhkcGJHd2dZMkYxYzJVZ2NtVnVaR1Z5SUdWeWNtOXlMbHh1SUNBZ0lHTnlaV0YwWlVGeWJXRjBkWEpsVG05a1pTQW9ZMjl0Y0N3Z1lYSnRZWFIxY21WT1lXMWxMQ0J1YjJSbEtTQjdYRzRnSUNBZ0lDQWdJRzV2WkdVZ1BTQnViMlJsSUh4OElHNWxkeUJqWXk1T2IyUmxLQ2s3WEc0Z0lDQWdJQ0FnSUd4bGRDQmthWE53YkdGNUlEMGdibTlrWlM1blpYUkRiMjF3YjI1bGJuUW9aSEpoWjI5dVFtOXVaWE11UVhKdFlYUjFjbVZFYVhOd2JHRjVLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRmthWE53YkdGNUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCa2FYTndiR0Y1SUQwZ2JtOWtaUzVoWkdSRGIyMXdiMjVsYm5Rb1pISmhaMjl1UW05dVpYTXVRWEp0WVhSMWNtVkVhWE53YkdGNUtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUc1dlpHVXVibUZ0WlNBOUlHRnliV0YwZFhKbFRtRnRaVHRjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUdScGMzQnNZWGt1WDJGeWJXRjBkWEpsVG1GdFpTQTlJR0Z5YldGMGRYSmxUbUZ0WlR0Y2JpQWdJQ0FnSUNBZ1pHbHpjR3hoZVM1ZlRpUmtjbUZuYjI1QmMzTmxkQ0E5SUdOdmJYQXVaSEpoWjI5dVFYTnpaWFE3WEc0Z0lDQWdJQ0FnSUdScGMzQnNZWGt1WDA0a1pISmhaMjl1UVhSc1lYTkJjM05sZENBOUlHTnZiWEF1WkhKaFoyOXVRWFJzWVhOQmMzTmxkRHRjYmlBZ0lDQWdJQ0FnWkdsemNHeGhlUzVmYVc1cGRDZ3BPMXh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJrYVhOd2JHRjVPMXh1SUNBZ0lIMHNYRzRnSUNBZ1hHNGdJQ0FnWDJKMWFXeGtWR1Y0ZEhWeVpVRjBiR0Z6UkdGMFlTQW9kR1Y0ZEhWeVpVRjBiR0Z6UkdGMFlTd2dkR1Y0ZEhWeVpVRjBiR0Z6S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwWlhoMGRYSmxRWFJzWVhORVlYUmhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBaWGgwZFhKbFFYUnNZWE5FWVhSaExuSmxibVJsY2xSbGVIUjFjbVVnUFNCMFpYaDBkWEpsUVhSc1lYTTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBkWEpsUVhSc1lYTkVZWFJoSUQwZ1FtRnpaVTlpYW1WamRDNWliM0p5YjNkUFltcGxZM1FvWkhKaFoyOXVRbTl1WlhNdVEwTlVaWGgwZFhKbFFYUnNZWE5FWVhSaEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR1Y0ZEhWeVpVRjBiR0Z6UkdGMFlUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ1gzTnZjblJUYkc5MGN5QW9LU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQnpiRzkwY3lBOUlIUm9hWE11WDNOc2IzUnpPMXh1SUNBZ0lDQWdJQ0JzWlhRZ2MyOXlkR1ZrVTJ4dmRITWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREFzSUd3Z1BTQnpiRzkwY3k1c1pXNW5kR2c3SUdrZ1BDQnNPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnpiRzkwSUQwZ2MyeHZkSE5iYVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2VrOXlaR1Z5SUQwZ2MyeHZkQzVmZWs5eVpHVnlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2x1YzJWeWRHVmtJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcUlEMGdjMjl5ZEdWa1UyeHZkSE11YkdWdVozUm9JQzBnTVRzZ2FpQStQU0F3T3lCcUxTMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2VrOXlaR1Z5SUQ0OUlITnZjblJsWkZOc2IzUnpXMnBkTGw5NlQzSmtaWElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMjl5ZEdWa1UyeHZkSE11YzNCc2FXTmxLR29yTVN3Z01Dd2djMnh2ZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1YzJWeWRHVmtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnBibk5sY25SbFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE52Y25SbFpGTnNiM1J6TG5Od2JHbGpaU2d3TENBd0xDQnpiRzkwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGFHbHpMbDl6Ykc5MGN5QTlJSE52Y25SbFpGTnNiM1J6TzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JmWW5WcGJHUkJjbTFoZEhWeVpTQW9aR0YwWVZCaFkydGhaMlVwSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJR0Z5YldGMGRYSmxJRDBnUW1GelpVOWlhbVZqZEM1aWIzSnliM2RQWW1wbFkzUW9aSEpoWjI5dVFtOXVaWE11UVhKdFlYUjFjbVVwTzF4dVhHNGdJQ0FnSUNBZ0lHRnliV0YwZFhKbExsOXphMmx1UkdGMFlTQTlJR1JoZEdGUVlXTnJZV2RsTG5OcmFXNDdYRzRnSUNBZ0lDQWdJR0Z5YldGMGRYSmxMbDloYm1sdFlYUnBiMjRnUFNCQ1lYTmxUMkpxWldOMExtSnZjbkp2ZDA5aWFtVmpkQ2hrY21GbmIyNUNiMjVsY3k1QmJtbHRZWFJwYjI0cE8xeHVJQ0FnSUNBZ0lDQmhjbTFoZEhWeVpTNWZZVzVwYldGMGFXOXVMbDloY20xaGRIVnlaU0E5SUdGeWJXRjBkWEpsTzF4dUlDQWdJQ0FnSUNCaGNtMWhkSFZ5WlM1ZllXNXBiV0YwYVc5dUxtRnVhVzFoZEdsdmJuTWdQU0JrWVhSaFVHRmphMkZuWlM1aGNtMWhkSFZ5WlM1aGJtbHRZWFJwYjI1ek8xeHVYRzRnSUNBZ0lDQWdJR0Z5YldGMGRYSmxMbDlwYzBOb2FXeGtRWEp0WVhSMWNtVWdQU0JtWVd4elpUdGNibHh1SUNBZ0lDQWdJQ0F2THlCbWFYaGxaQ0JrY21GbmIyNWliMjVsY3lCemIzSjBJR2x6YzNWbFhHNGdJQ0FnSUNBZ0lDOHZJR0Z5YldGMGRYSmxMbDl6YjNKMFUyeHZkSE1nUFNCMGFHbHpMbDl6YjNKMFUyeHZkSE03WEc1Y2JpQWdJQ0FnSUNBZ2RtRnlJR1JwYzNCc1lYa2dQU0J1WlhjZ1pISmhaMjl1UW05dVpYTXVRME5CY20xaGRIVnlaVVJwYzNCc1lYa29LVHRjYmx4dUlDQWdJQ0FnSUNCaGNtMWhkSFZ5WlM1cGJtbDBLR1JoZEdGUVlXTnJZV2RsTG1GeWJXRjBkWEpsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaR2x6Y0d4aGVTd2daR2x6Y0d4aGVTd2dkR2hwY3k1ZlpISmhaMjl1UW05dVpYTmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJoY20xaGRIVnlaVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdYMkoxYVd4a1UyeHZkQ0FvWkdGMFlWQmhZMnRoWjJVc0lITnNiM1JFWVhSaExDQmthWE53YkdGNWN5a2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2MyeHZkQ0E5SUVKaGMyVlBZbXBsWTNRdVltOXljbTkzVDJKcVpXTjBLR1J5WVdkdmJrSnZibVZ6TGtORFUyeHZkQ2s3WEc0Z0lDQWdJQ0FnSUd4bGRDQmthWE53YkdGNUlEMGdjMnh2ZER0Y2JpQWdJQ0FnSUNBZ2MyeHZkQzVwYm1sMEtITnNiM1JFWVhSaExDQmthWE53YkdGNWN5d2daR2x6Y0d4aGVTd2daR2x6Y0d4aGVTazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnpiRzkwTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JuWlhSRWNtRm5iMjVDYjI1bGMwUmhkR0ZDZVZWVlNVUWdLSFYxYVdRcElIdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdibUZ0WlNCcGJpQjBhR2x6TGw5a2NtRm5iMjVDYjI1bGMwUmhkR0ZOWVhBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHVZVzFsTG1sdVpHVjRUMllvZFhWcFpDa2dJVDBnTFRFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWkhKaFoyOXVRbTl1WlhORVlYUmhUV0Z3VzI1aGJXVmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0J5WlcxdmRtVkVjbUZuYjI1Q2IyNWxjMFJoZEdGQ2VWVlZTVVFnS0hWMWFXUXNJR1JwYzNCdmMyVkVZWFJoS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hrYVhOd2IzTmxSR0YwWVNBOVBUMGdkbTlwWkNBd0tTQjdJR1JwYzNCdmMyVkVZWFJoSUQwZ2RISjFaVHNnZlZ4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCdVlXMWxJR2x1SUhSb2FYTXVYMlJ5WVdkdmJrSnZibVZ6UkdGMFlVMWhjQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c1aGJXVXVhVzVrWlhoUFppaDFkV2xrS1NBOVBUMGdMVEVwSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dScGMzQnZjMlZFWVhSaEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlpISmhaMjl1UW05dVpYTXVZblZtWm1WeVQySnFaV04wS0hSb2FYTXVYMlJ5WVdkdmJrSnZibVZ6UkdGMFlVMWhjRnR1WVcxbFhTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JrWld4bGRHVWdkR2hwY3k1ZlpISmhaMjl1UW05dVpYTkVZWFJoVFdGd1cyNWhiV1ZkTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dWZTazdYRzRpWFgwPSJdfQ==