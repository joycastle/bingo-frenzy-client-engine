(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/extensions/dragonbones/CCArmatureDisplay.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var EventTarget = require('../../cocos2d/core/event/event-target');
        dragonBones.CCArmatureDisplay = cc.Class({
            name: 'dragonBones.CCArmatureDisplay',
            properties: {
                node: {
                    get: function get() {
                        return this;
                    }
                }
            },
            ctor: function ctor() {
                this._eventTarget = new EventTarget();
            },
            setEventTarget: function setEventTarget(eventTarget) {
                this._eventTarget = eventTarget;
            },
            getRootDisplay: function getRootDisplay() {
                var parentSlot = this._armature._parent;
                if (!parentSlot) {
                    return this;
                }
                var slot;
                while (parentSlot) {
                    slot = parentSlot;
                    parentSlot = parentSlot._armature._parent;
                }
                return slot._armature.getDisplay();
            },
            convertToRootSpace: function convertToRootSpace(pos) {
                var slot = this._armature._parent;
                if (!slot) {
                    return pos;
                }
                slot.updateWorldMatrix();
                var worldMatrix = slot._worldMatrix;
                var worldMatrixm = worldMatrix.m;
                var newPos = cc.v2(0, 0);
                newPos.x = pos.x * worldMatrixm[0] + pos.y * worldMatrixm[4] + worldMatrixm[12];
                newPos.y = pos.x * worldMatrixm[1] + pos.y * worldMatrixm[5] + worldMatrixm[13];
                return newPos;
            },
            convertToWorldSpace: function convertToWorldSpace(point) {
                var newPos = this.convertToRootSpace(point);
                var ccNode = this.getRootNode();
                var finalPos = ccNode.convertToWorldSpace(newPos);
                return finalPos;
            },
            getRootNode: function getRootNode() {
                var rootDisplay = this.getRootDisplay();
                return rootDisplay && rootDisplay._ccNode;
            },
            dbInit: function dbInit(armature) {
                this._armature = armature;
            },
            dbClear: function dbClear() {
                this._armature = null;
            },
            dbUpdate: function dbUpdate() {
            },
            advanceTimeBySelf: function advanceTimeBySelf(on) {
                this.shouldAdvanced = !!on;
            },
            hasDBEventListener: function hasDBEventListener(type) {
                return this._eventTarget.hasEventListener(type);
            },
            addDBEventListener: function addDBEventListener(type, listener, target) {
                this._eventTarget.on(type, listener, target);
            },
            removeDBEventListener: function removeDBEventListener(type, listener, target) {
                this._eventTarget.off(type, listener, target);
            },
            dispatchDBEvent: function dispatchDBEvent(type, eventObject) {
                this._eventTarget.emit(type, eventObject);
            }
        });
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,