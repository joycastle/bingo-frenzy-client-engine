(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/extensions/dragonbones/CCSlot.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _vmath = require('../../cocos2d/core/vmath');
        var BinaryOffset = dragonBones.BinaryOffset;
        var BoneType = dragonBones.BoneType;
        dragonBones.CCSlot = cc.Class({
            name: 'dragonBones.CCSlot',
            extends: dragonBones.Slot,
            ctor: function ctor() {
                this._localVertices = [];
                this._indices = [];
                this._matrix = _vmath.mat4.create();
                this._worldMatrix = _vmath.mat4.create();
                this._worldMatrixDirty = true;
                this._visible = false;
                this._color = cc.color();
            },
            _onClear: function _onClear() {
                this._super();
                this._localVertices.length = 0;
                this._indices.length = 0;
                _vmath.mat4.identity(this._matrix);
                _vmath.mat4.identity(this._worldMatrix);
                this._worldMatrixDirty = true;
                this._color = cc.color();
                this._visible = false;
            },
            statics: {
                toString: function toString() {
                    return '[class dragonBones.CCSlot]';
                }
            },
            _onUpdateDisplay: function _onUpdateDisplay() {
            },
            _initDisplay: function _initDisplay(value) {
            },
            _addDisplay: function _addDisplay() {
                this._visible = true;
            },
            _replaceDisplay: function _replaceDisplay(value) {
            },
            _removeDisplay: function _removeDisplay() {
                this._visible = false;
            },
            _disposeDisplay: function _disposeDisplay(object) {
            },
            _updateVisible: function _updateVisible() {
                this._visible = this.parent._visible;
            },
            _updateZOrder: function _updateZOrder() {
            },
            _updateBlendMode: function _updateBlendMode() {
                if (this._childArmature) {
                    var childSlots = this._childArmature.getSlots();
                    for (var i = 0, l = childSlots.length; i < l; i++) {
                        var slot = childSlots[i];
                        slot._blendMode = this._blendMode;
                        slot._updateBlendMode();
                    }
                }
            },
            _updateColor: function _updateColor() {
                var c = this._color;
                c.r = this._colorTransform.redMultiplier * 255;
                c.g = this._colorTransform.greenMultiplier * 255;
                c.b = this._colorTransform.blueMultiplier * 255;
                c.a = this._colorTransform.alphaMultiplier * 255;
            },
            getTexture: function getTexture() {
                return this._textureData && this._textureData.spriteFrame && this._textureData.spriteFrame.getTexture();
            },
            _updateFrame: function _updateFrame() {
                this._indices.length = 0;
                var indices = this._indices, localVertices = this._localVertices;
                var indexOffset = 0, vfOffset = 0;
                var currentTextureData = this._textureData;
                if (!this._display || this._displayIndex < 0 || !currentTextureData || !currentTextureData.spriteFrame)
                    return;
                var texture = currentTextureData.spriteFrame.getTexture();
                var textureAtlasWidth = texture.width;
                var textureAtlasHeight = texture.height;
                var region = currentTextureData.region;
                var currentVerticesData = this._deformVertices !== null && this._display === this._meshDisplay ? this._deformVertices.verticesData : null;
                if (currentVerticesData) {
                    var data = currentVerticesData.data;
                    var intArray = data.intArray;
                    var floatArray = data.floatArray;
                    var vertexCount = intArray[currentVerticesData.offset + BinaryOffset.MeshVertexCount];
                    var triangleCount = intArray[currentVerticesData.offset + BinaryOffset.MeshTriangleCount];
                    var vertexOffset = intArray[currentVerticesData.offset + BinaryOffset.MeshFloatOffset];
                    if (vertexOffset < 0) {
                        vertexOffset += 65536;
                    }
                    var uvOffset = vertexOffset + vertexCount * 2;
                    var scale = this._armature._armatureData.scale;
                    for (var i = 0, l = vertexCount * 2; i < l; i += 2) {
                        localVertices[vfOffset++] = floatArray[vertexOffset + i] * scale;
                        localVertices[vfOffset++] = -floatArray[vertexOffset + i + 1] * scale;
                        if (currentVerticesData.rotated) {
                            localVertices[vfOffset++] = (region.x + (1 - floatArray[uvOffset + i]) * region.width) / textureAtlasWidth;
                            localVertices[vfOffset++] = (region.y + floatArray[uvOffset + i + 1] * region.height) / textureAtlasHeight;
                        } else {
                            localVertices[vfOffset++] = (region.x + floatArray[uvOffset + i] * region.width) / textureAtlasWidth;
                            localVertices[vfOffset++] = (region.y + floatArray[uvOffset + i + 1] * region.height) / textureAtlasHeight;
                        }
                    }
                    for (var _i = 0; _i < triangleCount * 3; ++_i) {
                        indices[indexOffset++] = intArray[currentVerticesData.offset + BinaryOffset.MeshVertexIndices + _i];
                    }
                    localVertices.length = vfOffset;
                    indices.length = indexOffset;
                    var isSkinned = !!currentVerticesData.weight;
                    if (isSkinned) {
                        this._identityTransform();
                    }
                } else {
                    var _l = region.x / textureAtlasWidth;
                    var b = (region.y + region.height) / textureAtlasHeight;
                    var r = (region.x + region.width) / textureAtlasWidth;
                    var t = region.y / textureAtlasHeight;
                    localVertices[vfOffset++] = 0;
                    localVertices[vfOffset++] = 0;
                    localVertices[vfOffset++] = _l;
                    localVertices[vfOffset++] = b;
                    localVertices[vfOffset++] = region.width;
                    localVertices[vfOffset++] = 0;
                    localVertices[vfOffset++] = r;
                    localVertices[vfOffset++] = b;
                    localVertices[vfOffset++] = 0;
                    localVertices[vfOffset++] = region.height;
                    ;
                    localVertices[vfOffset++] = _l;
                    localVertices[vfOffset++] = t;
                    localVertices[vfOffset++] = region.width;
                    localVertices[vfOffset++] = region.height;
                    ;
                    localVertices[vfOffset++] = r;
                    localVertices[vfOffset++] = t;
                    indices[0] = 0;
                    indices[1] = 1;
                    indices[2] = 2;
                    indices[3] = 1;
                    indices[4] = 3;
                    indices[5] = 2;
                    localVertices.length = vfOffset;
                    indices.length = 6;
                }
                this._visibleDirty = true;
                this._blendModeDirty = true;
                this._colorDirty = true;
            },
            _updateMesh: function _updateMesh() {
                var scale = this._armature._armatureData.scale;
                var deformVertices = this._deformVertices.vertices;
                var bones = this._deformVertices.bones;
                var verticesData = this._deformVertices.verticesData;
                var weightData = verticesData.weight;
                var hasDeform = deformVertices.length > 0 && verticesData.inheritDeform;
                var localVertices = this._localVertices;
                if (weightData) {
                    var data = verticesData.data;
                    var intArray = data.intArray;
                    var floatArray = data.floatArray;
                    var vertexCount = intArray[verticesData.offset + BinaryOffset.MeshVertexCount];
                    var weightFloatOffset = intArray[weightData.offset + BinaryOffset.WeigthFloatOffset];
                    if (weightFloatOffset < 0) {
                        weightFloatOffset += 65536;
                    }
                    for (var i = 0, iB = weightData.offset + BinaryOffset.WeigthBoneIndices + bones.length, iV = weightFloatOffset, iF = 0, lvi = 0; i < vertexCount; i++, lvi += 4) {
                        var boneCount = intArray[iB++];
                        var xG = 0, yG = 0;
                        for (var j = 0; j < boneCount; ++j) {
                            var boneIndex = intArray[iB++];
                            var bone = bones[boneIndex];
                            if (bone !== null) {
                                var matrix = bone.globalTransformMatrix;
                                var weight = floatArray[iV++];
                                var xL = floatArray[iV++] * scale;
                                var yL = floatArray[iV++] * scale;
                                if (hasDeform) {
                                    xL += deformVertices[iF++];
                                    yL += deformVertices[iF++];
                                }
                                xG += (matrix.a * xL + matrix.c * yL + matrix.tx) * weight;
                                yG += (matrix.b * xL + matrix.d * yL + matrix.ty) * weight;
                            }
                        }
                        localVertices[lvi] = xG;
                        localVertices[lvi + 1] = -yG;
                    }
                } else if (hasDeform) {
                    var isSurface = this._parent._boneData.type !== BoneType.Bone;
                    var _data = verticesData.data;
                    var _intArray = _data.intArray;
                    var _floatArray = _data.floatArray;
                    var _vertexCount = _intArray[verticesData.offset + BinaryOffset.MeshVertexCount];
                    var vertexOffset = _intArray[verticesData.offset + BinaryOffset.MeshFloatOffset];
                    if (vertexOffset < 0) {
                        vertexOffset += 65536;
                    }
                    for (var _i2 = 0, l = _vertexCount, _lvi = 0; _i2 < l; _i2++, _lvi += 4) {
                        var x = _floatArray[vertexOffset + _i2 * 2] * scale + deformVertices[_i2 * 2];
                        var y = _floatArray[vertexOffset + _i2 * 2 + 1] * scale + deformVertices[_i2 * 2 + 1];
                        if (isSurface) {
                            var _matrix = this._parent._getGlobalTransformMatrix(x, y);
                            localVertices[_lvi] = _matrix.a * x + _matrix.c * y + _matrix.tx;
                            localVertices[_lvi + 1] = -_matrix.b * x + _matrix.d * y + _matrix.ty;
                        } else {
                            localVertices[_lvi] = x;
                            localVertices[_lvi + 1] = -y;
                        }
                    }
                }
                if (weightData) {
                    this._identityTransform();
                }
            },
            _identityTransform: function _identityTransform() {
                var m = this._matrix.m;
                m[0] = 1;
                m[1] = 0;
                m[4] = -0;
                m[5] = -1;
                m[12] = 0;
                m[13] = 0;
                this._worldMatrixDirty = true;
            },
            _updateTransform: function _updateTransform() {
                var t = this._matrix;
                var tm = t.m;
                tm[0] = this.globalTransformMatrix.a;
                tm[1] = this.globalTransformMatrix.b;
                tm[4] = -this.globalTransformMatrix.c;
                tm[5] = -this.globalTransformMatrix.d;
                if (this._childArmature) {
                    tm[12] = this.globalTransformMatrix.tx;
                    tm[13] = this.globalTransformMatrix.ty;
                } else {
                    tm[12] = this.globalTransformMatrix.tx - (this.globalTransformMatrix.a * this._pivotX - this.globalTransformMatrix.c * this._pivotY);
                    tm[13] = this.globalTransformMatrix.ty - (this.globalTransformMatrix.b * this._pivotX - this.globalTransformMatrix.d * this._pivotY);
                }
                this._worldMatrixDirty = true;
            },
            updateWorldMatrix: function updateWorldMatrix() {
                if (!this._armature)
                    return;
                var parentSlot = this._armature._parent;
                if (parentSlot) {
                    parentSlot.updateWorldMatrix();
                }
                if (this._worldMatrixDirty) {
                    this.calculWorldMatrix();
                    var childArmature = this.childArmature;
                    if (!childArmature)
                        return;
                    var slots = childArmature.getSlots();
                    for (var i = 0, n = slots.length; i < n; i++) {
                        var slot = slots[i];
                        if (slot) {
                            slot._worldMatrixDirty = true;
                        }
                    }
                }
            },
            _mulMat: function _mulMat(out, a, b) {
                var am = a.m, bm = b.m, outm = out.m;
                var aa = am[0], ab = am[1], ac = am[4], ad = am[5], atx = am[12], aty = am[13];
                var ba = bm[0], bb = bm[1], bc = bm[4], bd = bm[5], btx = bm[12], bty = bm[13];
                if (ab !== 0 || ac !== 0) {
                    outm[0] = ba * aa + bb * ac;
                    outm[1] = ba * ab + bb * ad;
                    outm[4] = bc * aa + bd * ac;
                    outm[5] = bc * ab + bd * ad;
                    outm[12] = aa * btx + ac * bty + atx;
                    outm[13] = ab * btx + ad * bty + aty;
                } else {
                    outm[0] = ba * aa;
                    outm[1] = bb * ad;
                    outm[4] = bc * aa;
                    outm[5] = bd * ad;
                    outm[12] = aa * btx + atx;
                    outm[13] = ad * bty + aty;
                }
            },
            calculWorldMatrix: function calculWorldMatrix() {
                var parent = this._armature._parent;
                if (parent) {
                    this._mulMat(this._worldMatrix, parent._worldMatrix, this._matrix);
                } else {
                    _vmath.mat4.copy(this._worldMatrix, this._matrix);
                }
                this._worldMatrixDirty = false;
            }
        });
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,