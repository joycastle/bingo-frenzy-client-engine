(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/__node_modules/url/util.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        module.exports = {
            isString: function isString(arg) {
                return typeof arg === 'string';
            },
            isObject: function isObject(arg) {
                return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && arg !== null;
            },
            isNull: function isNull(arg) {
                return arg === null;
            },
            isNullOrUndefined: function isNullOrUndefined(arg) {
                return arg == null;
            }
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwuanMiLCIvQXBwbGljYXRpb25zL0NvY29zQ3JlYXRvci9DcmVhdG9yLzIuMi4yL0NvY29zQ3JlYXRvci5hcHAvQ29udGVudHMvUmVzb3VyY2VzL2FwcC5hc2FyL25vZGVfbW9kdWxlcy91cmwvdXRpbC5qcyJdLCJuYW1lcyI6WyJhcmciLCJtb2R1bGUiLCJleHBvcnRzIiwiaXNTdHJpbmciLCJpc09iamVjdCIsImlzTnVsbCIsImlzTnVsbE9yVW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiOzs7SUFFaUIsSUFBQSxVQUFBLEdBQUEsdUNBQUE7SUFDTCxJQUFBLFNBQUEsR0FBYyxPQUFBLEdBQUEsVUFBQSxPQUFBLEVBQUE7QUFBQSxRQUNmLE9BQWdCLE9BQUEsQ0FBdkIsT0FBdUIsQ0FBaEIsQ0FEZTtBQUFBLEtBQUEsR0FEVCxVQUFBLE9BQUEsRUFBQTtBQUFBLFFBSUwsT0FBU0EsaUJBQUFBLENBQUssT0FBTEEsQ0FBSyxPQUFMQSxFQUFLLFVBQUxBLENBQVQsQ0FKSztBQUFBLEtBQ0w7SUFESyxTQUFBLFFBQUEsQ0FBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQTtBQUFBLFFBT1AsSUFBU0EsQ0FBVCxPQUFBLEVBQWM7QUFBQSxZQUFBLGlCQUFBLENBQUEsY0FBQSxDQUFBLFVBQUEsRUFBQSxNQUFBLEVBQUE7QUFBQSxTQVBQO0FBQUEsUUFGakI7QUFBQTs7OztVQUFBO0FBQUEsUUFFQUMsTUFBQUEsQ0FBT0MsT0FBUEQsR0FBaUI7QUFBQSxZQUNmRSxRQUFBQSxFQUFVLFNBQUEsUUFBQSxDQUFTSCxHQUFULEVBQWM7QUFBQSxnQkFDdEIsT0FBTyxPQUFPQSxHQUFQLEtBQWdCLFFBQXZCLENBRHNCO0FBQUEsYUFEVDtBQUFBLFlBSWZJLFFBQUFBLEVBQVUsU0FBQSxRQUFBLENBQVNKLEdBQVQsRUFBYztBQUFBLGdCQUN0QixPQUFPLFFBQU9BLEdBQVAsS0FBQSxXQUFBLEdBQUEsV0FBQSxHQUFBLE9BQUEsQ0FBT0EsR0FBUCxDQUFBLENBQUEsS0FBZ0IsUUFBaEIsSUFBNEJBLEdBQUFBLEtBQVEsSUFBM0MsQ0FEc0I7QUFBQSxhQUpUO0FBQUEsWUFPZkssTUFBQUEsRUFBUSxTQUFBLE1BQUEsQ0FBU0wsR0FBVCxFQUFjO0FBQUEsZ0JBQ3BCLE9BQU9BLEdBQUFBLEtBQVEsSUFBZixDQURvQjtBQUFBLGFBUFA7QUFBQSxZQVVmTSxpQkFBQUEsRUFBbUIsU0FBQSxpQkFBQSxDQUFTTixHQUFULEVBQWM7QUFBQSxnQkFDL0IsT0FBT0EsR0FBQUEsSUFBTyxJQUFkLENBRCtCO0FBQUEsYUFWbEI7QUFBQSxTQUFqQkMsQ0FBaUI7QUFBQTtJQUFBLElBQUEsT0FBQSxFQUFBO0FBQUEsUUFVSSxRQUFBLENBQUEsUUFBQSxDQUFBLE9BQUEsRUFBQSxTQUFBLEVBQWMsUUFBZCxFQVZKO0FBQUEsS0FBQSxNQVlkO0FBQUEsUUFaSCxpQkFBQSxDQUFBLGtCQUFBLENBQUEsVUFBQSxFQUFBLFlBQUE7QUFBQSw0REFBQTtBQUFBLFNBQUEsRUFZRztBQUFBIiwiZmlsZSI6InV0aWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc1N0cmluZzogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHR5cGVvZihhcmcpID09PSAnc3RyaW5nJztcbiAgfSxcbiAgaXNPYmplY3Q6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB0eXBlb2YoYXJnKSA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xuICB9LFxuICBpc051bGw6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBhcmcgPT09IG51bGw7XG4gIH0sXG4gIGlzTnVsbE9yVW5kZWZpbmVkOiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gYXJnID09IG51bGw7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzU3RyaW5nOiBmdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG4gIH0sXG4gIGlzT2JqZWN0OiBmdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgICByZXR1cm4gKHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGFyZykpID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG4gIH0sXG4gIGlzTnVsbDogZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICAgIHJldHVybiBhcmcgPT09IG51bGw7XG4gIH0sXG4gIGlzTnVsbE9yVW5kZWZpbmVkOiBmdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcbiAgICByZXR1cm4gYXJnID09IG51bGw7XG4gIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJblYwYVd3dWFuTWlYU3dpYm1GdFpYTWlPbHNpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSW1selUzUnlhVzVuSWl3aVlYSm5JaXdpYVhOUFltcGxZM1FpTENKcGMwNTFiR3dpTENKcGMwNTFiR3hQY2xWdVpHVm1hVzVsWkNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN096czdRVUZGUVVFc1QwRkJUME1zVDBGQlVDeEhRVUZwUWp0QlFVTm1ReXhaUVVGVkxHdENRVUZUUXl4SFFVRlVMRVZCUVdNN1FVRkRkRUlzVjBGQlR5eFBRVUZQUVN4SFFVRlFMRXRCUVdkQ0xGRkJRWFpDTzBGQlEwUXNSMEZJWXp0QlFVbG1ReXhaUVVGVkxHdENRVUZUUkN4SFFVRlVMRVZCUVdNN1FVRkRkRUlzVjBGQlR5eFJRVUZQUVN4SFFVRlFMSGxEUVVGUFFTeEhRVUZRTEU5QlFXZENMRkZCUVdoQ0xFbEJRVFJDUVN4UlFVRlJMRWxCUVRORE8wRkJRMFFzUjBGT1l6dEJRVTltUlN4VlFVRlJMR2RDUVVGVFJpeEhRVUZVTEVWQlFXTTdRVUZEY0VJc1YwRkJUMEVzVVVGQlVTeEpRVUZtTzBGQlEwUXNSMEZVWXp0QlFWVm1SeXh4UWtGQmJVSXNNa0pCUVZOSUxFZEJRVlFzUlVGQll6dEJRVU12UWl4WFFVRlBRU3hQUVVGUExFbEJRV1E3UVVGRFJEdEJRVnBqTEVOQlFXcENJaXdpWm1sc1pTSTZJblYwYVd3dWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUluZFhObElITjBjbWxqZENjN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdlMXh1SUNCcGMxTjBjbWx1WnpvZ1puVnVZM1JwYjI0b1lYSm5LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUjVjR1Z2WmloaGNtY3BJRDA5UFNBbmMzUnlhVzVuSnp0Y2JpQWdmU3hjYmlBZ2FYTlBZbXBsWTNRNklHWjFibU4wYVc5dUtHRnlaeWtnZTF4dUlDQWdJSEpsZEhWeWJpQjBlWEJsYjJZb1lYSm5LU0E5UFQwZ0oyOWlhbVZqZENjZ0ppWWdZWEpuSUNFOVBTQnVkV3hzTzF4dUlDQjlMRnh1SUNCcGMwNTFiR3c2SUdaMWJtTjBhVzl1S0dGeVp5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCaGNtY2dQVDA5SUc1MWJHdzdYRzRnSUgwc1hHNGdJR2x6VG5Wc2JFOXlWVzVrWldacGJtVmtPaUJtZFc1amRHbHZiaWhoY21jcElIdGNiaUFnSUNCeVpYUjFjbTRnWVhKbklEMDlJRzUxYkd3N1hHNGdJSDFjYm4wN1hHNGlYWDA9Il19