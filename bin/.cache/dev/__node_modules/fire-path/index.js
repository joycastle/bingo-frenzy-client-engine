(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/__node_modules/fire-path/index.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Path = require('path');
        var FirePath = {};
        FirePath.basenameNoExt = function (path) {
            return Path.basename(path, Path.extname(path));
        };
        FirePath.slash = function (path) {
            return path.replace(/\\/g, '/');
        };
        FirePath.stripSep = function (path) {
            path = Path.normalize(path);
            for (var i = path.length - 1; i >= 0; --i) {
                if (path[i] !== Path.sep) {
                    break;
                }
            }
            return path.substring(0, i + 1);
        };
        FirePath.stripExt = function (path) {
            var extname = Path.extname(path);
            return path.substring(0, path.length - extname.length);
        };
        FirePath.contains = function (pathA, pathB) {
            pathA = FirePath.stripSep(pathA);
            pathB = FirePath.stripSep(pathB);
            if (process.platform === 'win32') {
                pathA = pathA.toLowerCase();
                pathB = pathB.toLowerCase();
            }
            if (pathA === pathB) {
                return true;
            }
            if (Path.dirname(pathA) === Path.dirname(pathB)) {
                return false;
            }
            if (pathA.length < pathB.length && pathB.indexOf(pathA + Path.sep) === 0) {
                return true;
            }
            return false;
        };
        var _ = {};
        var prop;
        for (prop in Path) {
            _[prop] = Path[prop];
        }
        for (prop in FirePath) {
            _[prop] = FirePath[prop];
        }
        module.exports = _;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,