(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/predefine.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var _global = typeof window === 'undefined' ? global : window;
        function defineMacro(name, defaultValue) {
            if (typeof _global[name] === 'undefined') {
                _global[name] = defaultValue;
            }
        }
        function defineDeprecatedMacroGetter(name, defaultValue) {
            if (typeof _global[name] === 'undefined') {
                Object.defineProperty(_global, name, {
                    get: function get() {
                        var recommandedUsage = void 0;
                        if (name === 'CC_WECHATGAMESUB') {
                            recommandedUsage = 'cc.sys.platform === cc.sys.WECHAT_GAME_SUB';
                        } else if (name === 'CC_WECHATGAME') {
                            recommandedUsage = 'cc.sys.platform === cc.sys.WECHAT_GAME';
                        } else if (name === 'CC_QQPLAY') {
                            recommandedUsage = 'cc.sys.platform === cc.sys.QQ_PLAY';
                        }
                        cc.warnID(1400, name, recommandedUsage);
                        return defaultValue;
                    }
                });
            }
        }
        function defined(name) {
            return _typeof(_global[name]) === 'object';
        }
        defineMacro('CC_BUILD', false);
        if (CC_BUILD) {
            _global.CC_BUILD = CC_BUILD;
            _global.CC_DEV = CC_DEV;
            _global.CC_DEBUG = CC_DEBUG;
            _global.CC_JSB = CC_JSB;
            _global.CC_NATIVERENDERER = CC_NATIVERENDERER;
            _global.CC_SUPPORT_JIT = CC_SUPPORT_JIT;
        } else {
            defineMacro('CC_DEV', true);
            defineMacro('CC_DEBUG', true);
            defineMacro('CC_JSB', defined('jsb'));
            defineMacro('CC_NATIVERENDERER', defined('jsb'));
            defineMacro('CC_SUPPORT_JIT', true);
        }
        defineMacro('CC_TEST', defined('tap') || defined('QUnit'));
        defineMacro('CC_EDITOR', defined('Editor') && defined('process') && 'electron' in process.versions);
        defineMacro('CC_PREVIEW', !CC_EDITOR);
        defineMacro('CC_RUNTIME', 'function' === typeof loadRuntime);
        defineMacro('CC_JSB', defined('jsb') && !CC_RUNTIME);
        var WECHATGAMESUB = !!(defined('wx') && wx.getSharedCanvas);
        var WECHATGAME = !!(defined('wx') && (wx.getSystemInfoSync || wx.getSharedCanvas));
        var QQPLAY = defined('bk');
        defineDeprecatedMacroGetter('CC_WECHATGAMESUB', WECHATGAMESUB);
        defineDeprecatedMacroGetter('CC_WECHATGAME', WECHATGAME);
        defineDeprecatedMacroGetter('CC_QQPLAY', QQPLAY);
        if (CC_DEV) {
            cc._Test = {};
        }
        var engineVersion = '2.2.2';
        _global['CocosEngine'] = cc.ENGINE_VERSION = engineVersion;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByZWRlZmluZS5qcyIsIi9Vc2Vycy9TaGFyZWQvYmluZ29fZnJlbnp5L2VuZ2luZS9wcmVkZWZpbmUuanMiXSwibmFtZXMiOlsiX2dsb2JhbCIsIndpbmRvdyIsImdsb2JhbCIsImRlZmluZU1hY3JvIiwibmFtZSIsImRlZmF1bHRWYWx1ZSIsImRlZmluZURlcHJlY2F0ZWRNYWNyb0dldHRlciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwicmVjb21tYW5kZWRVc2FnZSIsImNjIiwid2FybklEIiwiZGVmaW5lZCIsIkNDX0JVSUxEIiwiQ0NfREVWIiwiQ0NfREVCVUciLCJDQ19KU0IiLCJDQ19OQVRJVkVSRU5ERVJFUiIsIkNDX1NVUFBPUlRfSklUIiwicHJvY2VzcyIsInZlcnNpb25zIiwiQ0NfRURJVE9SIiwibG9hZFJ1bnRpbWUiLCJDQ19SVU5USU1FIiwiV0VDSEFUR0FNRVNVQiIsInd4IiwiZ2V0U2hhcmVkQ2FudmFzIiwiV0VDSEFUR0FNRSIsImdldFN5c3RlbUluZm9TeW5jIiwiUVFQTEFZIiwiX1Rlc3QiLCJlbmdpbmVWZXJzaW9uIiwiRU5HSU5FX1ZFUlNJT04iXSwibWFwcGluZ3MiOiI7OztJQUFBLElBQUEsVUFBQSxHQUFBLHlCQUFBOzs7Ozs7Ozs7Ozs7Ozs7O1FBZ0hBLElBQUlBLE9BQUFBLEdBQVUsT0FBT0MsTUFBUCxLQUFrQixXQUFsQixHQUFnQ0MsTUFBaEMsR0FBeUNELE1BQXZEO1FBS0EsU0FBU0UsV0FBVCxDQUFzQkMsSUFBdEIsRUFBNEJDLFlBQTVCLEVBQTBDO0FBQUEsWUFHdEMsSUFBSSxPQUFPTCxPQUFBQSxDQUFRSSxJQUFSSixDQUFQLEtBQXlCLFdBQTdCLEVBQTBDO0FBQUEsZ0JBQ3RDQSxPQUFBQSxDQUFRSSxJQUFSSixJQUFnQkssWUFBaEJMLENBRHNDO0FBQUEsYUFISjtBQUFBO1FBUTFDLFNBQVNNLDJCQUFULENBQXNDRixJQUF0QyxFQUE0Q0MsWUFBNUMsRUFBMEQ7QUFBQSxZQUN0RCxJQUFJLE9B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QUF6QjtRQUNBLElBQU1lLFVBQUFBLEdBQWEsQ0FBQyxDQUFFZixDQUFBQSxPQUFBQSxDQUFRLElBQVJBLEtBQWtCYSxDQUFBQSxFQUFBQSxDQUFHRyxpQkFBSEgsSUFBd0JBLEVBQUFBLENBQUdDLGVBQTNCRCxDQUFsQmIsQ0FBdEI7UUFDQSxJQUFNaUIsTUFBQUEsR0FBU2pCLE9BQUFBLENBQVEsSUFBUkEsQ0FBZjtRQUNBUCwyQkFBQUEsQ0FBNEIsa0JBQTVCQSxFQUFnRG1CLGFBQWhEbkI7UUFDQUEsMkJBQUFBLENBQTRCLGVBQTVCQSxFQUE2Q3NCLFVBQTdDdEI7UUFDQUEsMkJBQUFBLENBQTRCLFdBQTVCQSxFQUF5Q3dCLE1BQXpDeEI7UUFFQSxJQUFJUyxNQUFKLEVBQVk7QUFBQSxZQUtSSixFQUFBQSxDQUFHb0IsS0FBSHBCLEdBQVcsRUFBWEEsQ0FMUTtBQUFBO1FBa0JaLElBQU1xQixhQUFBQSxHQUFnQixPQUF0QjtRQUNBaEMsT0FBQUEsQ0FBUSxhQUFSQSxJQUF5QlcsRUFBQUEsQ0FBR3NCLGNBQUh0QixHQUFvQnFCLGFBQTdDaEMiLCJmaWxlIjoicHJlZGVmaW5lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcbiBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxuXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuLy8gTUFDUk9TXG5cbi8qKlxuICogISN6aFxuICog6L+Z6YeM5piv5LiA5Lqb55So5p2l5Yik5pat5omn6KGM546v5aKD55qE5a6P77yM6L+Z5Lqb5a6P6YO95piv5YWo5bGA5Y+Y6YeP77yM55u05o6l6K6/6Zeu5Y2z5Y+v44CCPGJyPlxuICog5Zyo6aG555uu5p6E5bu65pe277yM6L+Z5Lqb5a6P5bCG5Lya6KKr6aKE5aSE55CG5bm25qC55o2u5p6E5bu655qE5bmz5Y+w5YmU6Zmk5LiN6ZyA6KaB55qE5Luj56CB77yM5L6L5aaCXG4gKlxuICogICAgIGlmIChDQ19ERUJVRykge1xuICogICAgICAgICBjYy5sb2coJ2RlYnVnJyk7XG4gKiAgICAgfVxuICogICAgIGVsc2Uge1xuICogICAgICAgICBjYy5sb2coJ3JlbGVhc2UnKTtcbiAqICAgICB9XG4gKlxuICog5Zyo5p6E5bu65ZCO5Lya5Y+q5Ymp5LiLXG4gKlxuICogICAgIGNjLmxvZygncmVsZWFzZScpO1xuICpcbiAqIDxicj5cbiAqIOWmgumcgOWIpOaWreiEmuacrOaYr+WQpui/kOihjOS6juaMh+WumuW5s+WPsO+8jOWPr+S7peeUqOWmguS4i+ihqOi+vuW8j++8mlxuICpcbiAqICAgICB7XG4gKiAgICAgICAgIFwi57yW6L6R5ZmoXCI6ICBDQ19FRElUT1IsXG4gKiAgICAgICAgIFwi57yW6L6R5ZmoIOaIliDpooTop4hcIjogIENDX0RFVixcbiAqICAgICAgICAgXCLnvJbovpHlmagg5oiWIOmihOiniCDmiJYg5p6E5bu66LCD6K+VXCI6ICBDQ19ERUJVRyxcbiAqICAgICAgICAgXCLnvZHpobXpooTop4hcIjogIENDX1BSRVZJRVcgJiYgIUNDX0pTQixcbiAqICAgICAgICAgXCLmqKHmi5/lmajpooTop4hcIjogIENDX1BSRVZJRVcgJiYgQ0NfSlNCLFxuICogICAgICAgICBcIuaehOW7uuiwg+ivlVwiOiAgQ0NfQlVJTEQgJiYgQ0NfREVCVUcsXG4gKiAgICAgICAgIFwi5p6E5bu65Y+R6KGMXCI6ICBDQ19CVUlMRCAmJiAhQ0NfREVCVUcsXG4gKiAgICAgfVxuICpcbiAqICEjZW5cbiAqIEhlcmUgYXJlIHNvbWUgb2YgdGhlIG1hY3JvIHVzZWQgdG8gZGV0ZXJtaW5lIHRoZSBleGVjdXRpb24gZW52aXJvbm1lbnQsIHRoZXNlIG1hY3JvcyBhcmUgZ2xvYmFsIHZhcmlhYmxlcywgY2FuIGJlIGFjY2Vzc2VkIGRpcmVjdGx5Ljxicj5cbiAqIFdoZW4gdGhlIHByb2plY3QgaXMgYnVpbHQsIHRoZXNlIG1hY3JvcyB3aWxsIGJlIHByZXByb2Nlc3NlZCBhbmQgZGlzY2FyZCB1bnJlYWNoYWJsZSBjb2RlIGJhc2VkIG9uIHRoZSBidWlsdCBwbGF0Zm9ybSwgZm9yIGV4YW1wbGU6XG4gKlxuICogICAgIGlmIChDQ19ERUJVRykge1xuICogICAgICAgICBjYy5sb2coJ2RlYnVnJyk7XG4gKiAgICAgfVxuICogICAgIGVsc2Uge1xuICogICAgICAgICBjYy5sb2coJ3JlbGVhc2UnKTtcbiAqICAgICB9XG4gKlxuICogQWZ0ZXIgYnVpbGQgd2lsbCBiZWNvbWU6XG4gKlxuICogICAgIGNjLmxvZygncmVsZWFzZScpO1xuICpcbiAqIDxicj5cbiAqIFRvIGRldGVybWluZSB3aGV0aGVyIHRoZSBzY3JpcHQgaXMgcnVubmluZyBvbiB0aGUgc3BlY2lmaWVkIHBsYXRmb3JtLCB5b3UgY2FuIHVzZSB0aGUgZm9sbG93aW5nIGV4cHJlc3Npb246XG4gKlxuICogICAgIHtcbiAqICAgICAgICAgXCJlZGl0b3JcIjogIENDX0VESVRPUixcbiAqICAgICAgICAgXCJlZGl0b3Igb3IgcHJldmlld1wiOiAgQ0NfREVWLFxuICogICAgICAgICBcImVkaXRvciBvciBwcmV2aWV3IG9yIGJ1aWxkIGluIGRlYnVnIG1vZGVcIjogIENDX0RFQlVHLFxuICogICAgICAgICBcIndlYiBwcmV2aWV3XCI6ICBDQ19QUkVWSUVXICYmICFDQ19KU0IsXG4gKiAgICAgICAgIFwic2ltdWxhdG9yIHByZXZpZXdcIjogIENDX1BSRVZJRVcgJiYgQ0NfSlNCLFxuICogICAgICAgICBcImJ1aWxkIGluIGRlYnVnIG1vZGVcIjogIENDX0JVSUxEICYmIENDX0RFQlVHLFxuICogICAgICAgICBcImJ1aWxkIGluIHJlbGVhc2UgbW9kZVwiOiAgQ0NfQlVJTEQgJiYgIUNDX0RFQlVHLFxuICogICAgIH1cbiAqXG4gKiBAbW9kdWxlIEdMT0JBTC1NQUNST1NcbiAqL1xuLyoqXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IENDX0VESVRPUiAtIFJ1bm5pbmcgaW4gdGhlIGVkaXRvci5cbiAqL1xuLyoqXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IENDX1BSRVZJRVcgLSBQcmV2aWV3IGluIGJyb3dzZXIgb3Igc2ltdWxhdG9yLlxuICovXG4vKipcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gQ0NfREVWIC0gUnVubmluZyBpbiB0aGUgZWRpdG9yIG9yIHByZXZpZXcuXG4gKi9cbi8qKlxuICogQHByb3BlcnR5IHtCb29sZWFufSBDQ19ERUJVRyAtIFJ1bm5pbmcgaW4gdGhlIGVkaXRvciBvciBwcmV2aWV3LCBvciBidWlsZCBpbiBkZWJ1ZyBtb2RlLlxuICovXG4vKipcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gQ0NfQlVJTEQgLSBSdW5uaW5nIGluIHB1Ymxpc2hlZCBwcm9qZWN0LlxuICovXG4vKipcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gQ0NfSlNCIC0gUnVubmluZyBpbiBuYXRpdmUgcGxhdGZvcm0gKG1vYmlsZSBhcHAsIGRlc2t0b3AgYXBwLCBvciBzaW11bGF0b3IpLlxuICovXG4vKipcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gQ0NfVEVTVCAtIFJ1bm5pbmcgaW4gdGhlIGVuZ2luZSdzIHVuaXQgdGVzdC5cbiAqL1xuLyoqXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IENDX1JVTlRJTUUgLSBSdW5uaW5nIGluIHJ1bnRpbWUgZW52aXJvbm1lbnRzLlxuICovXG5cbi8vIHdpbmRvdyBtYXkgYmUgdW5kZWZpbmVkIHdoZW4gZmlyc3QgbG9hZCBlbmdpbmUgZnJvbSBlZGl0b3JcbnZhciBfZ2xvYmFsID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB3aW5kb3c7XG5cbi8qXG4gKiBAcGFyYW0gZGVmYXVsdFZhbHVlIC0gVGhlIGRlZmF1bHQgdmFsdWUgaXMgb25seSB1c2VkIGluIHRoZSBlZGl0b3Igb3IgcHJldmlldy5cbiAqL1xuZnVuY3Rpb24gZGVmaW5lTWFjcm8gKG5hbWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgIC8vIGlmIFwiZ2xvYmFsX2RlZnNcIiBub3QgcHJlcHJvY2Vzc2VkIGJ5IHVnbGlmeSwganVzdCBkZWNsYXJlIHRoZW0gZ2xvYmFsbHksXG4gICAgLy8gdGhpcyBtYXkgaGFwcGVuZWQgaW4gcmVsZWFzZSB2ZXJzaW9uJ3MgcHJldmlldyBwYWdlLlxuICAgIGlmICh0eXBlb2YgX2dsb2JhbFtuYW1lXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgX2dsb2JhbFtuYW1lXSA9IGRlZmF1bHRWYWx1ZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRlZmluZURlcHJlY2F0ZWRNYWNyb0dldHRlciAobmFtZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiBfZ2xvYmFsW25hbWVdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2dsb2JhbCwgbmFtZSwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlY29tbWFuZGVkVXNhZ2U7XG4gICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdDQ19XRUNIQVRHQU1FU1VCJykge1xuICAgICAgICAgICAgICAgICAgICByZWNvbW1hbmRlZFVzYWdlID0gJ2NjLnN5cy5wbGF0Zm9ybSA9PT0gY2Muc3lzLldFQ0hBVF9HQU1FX1NVQic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5hbWUgPT09ICdDQ19XRUNIQVRHQU1FJykge1xuICAgICAgICAgICAgICAgICAgICByZWNvbW1hbmRlZFVzYWdlID0gJ2NjLnN5cy5wbGF0Zm9ybSA9PT0gY2Muc3lzLldFQ0hBVF9HQU1FJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobmFtZSA9PT0gJ0NDX1FRUExBWScpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVjb21tYW5kZWRVc2FnZSA9ICdjYy5zeXMucGxhdGZvcm0gPT09IGNjLnN5cy5RUV9QTEFZJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2Mud2FybklEKDE0MDAsIG5hbWUsIHJlY29tbWFuZGVkVXNhZ2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lZCAobmFtZSkge1xuICAgIHJldHVybiB0eXBlb2YgX2dsb2JhbFtuYW1lXSA9PT0gJ29iamVjdCc7XG59XG5cbi8vIGVuc3VyZSBDQ19CVUlMRCBpcyBkZWZpbmVkXG4vLyBzaG91bGQgbm90IHVzZSB3aW5kb3cuQ0NfQlVJTEQgYmVjYXVzZSB3ZSBuZWVkIGdldCBnbG9iYWxfZGVmcyBkZWZpbmVkIGluIHVnbGlmeVxuZGVmaW5lTWFjcm8oJ0NDX0JVSUxEJywgZmFsc2UpO1xuXG4vLyBUaGVzZSBkZWZhdWx0IHZhbHVlcyBjYW4gb25seSBiZSBkZWZpbmVkIGFmdGVyIGJ1aWxkaW5nXG4vLyBJZiB5b3UgbmVlZCB0byBtb2RpZnkgdGhlbVxuLy8gcGxlYXNlIG1vZGlmeSB0aGUgYGdsb2JhbF9kZWZzYCBpbiB0aGUgb3B0aW9uIHJldHVybmVkIGJ5IGBndWxwL3V0aWwvdXRpbHMuanM6IGdldFVnbGlmeU9wdGlvbnNgLlxuaWYgKENDX0JVSUxEKSB7XG4gICAgX2dsb2JhbC5DQ19CVUlMRCA9IENDX0JVSUxEO1xuICAgIF9nbG9iYWwuQ0NfREVWID0gQ0NfREVWO1xuICAgIF9nbG9iYWwuQ0NfREVCVUcgPSBDQ19ERUJVRztcbiAgICBfZ2xvYmFsLkNDX0pTQiA9IENDX0pTQjtcbiAgICBfZ2xvYmFsLkNDX05BVElWRVJFTkRFUkVSID0gQ0NfTkFUSVZFUkVOREVSRVI7XG4gICAgX2dsb2JhbC5DQ19TVVBQT1JUX0pJVCA9IENDX1NVUFBPUlRfSklUO1xufVxuZWxzZSB7XG4gICAgZGVmaW5lTWFjcm8oJ0NDX0RFVicsIHRydWUpOyAgICAvLyAoQ0NfRURJVE9SICYmICFDQ19CVUlMRCkgfHwgQ0NfUFJFVklFVyB8fCBDQ19URVNUXG4gICAgZGVmaW5lTWFjcm8oJ0NDX0RFQlVHJywgdHJ1ZSk7ICAvLyBDQ19ERVYgfHwgRGVidWcgQnVpbGRcbiAgICBkZWZpbmVNYWNybygnQ0NfSlNCJywgZGVmaW5lZCgnanNiJykpO1xuICAgIGRlZmluZU1hY3JvKCdDQ19OQVRJVkVSRU5ERVJFUicsIGRlZmluZWQoJ2pzYicpKTtcbiAgICBkZWZpbmVNYWNybygnQ0NfU1VQUE9SVF9KSVQnLCB0cnVlKTtcbn1cbi8vIGRlZmluZWQgaW4gdGhlIHJ1bnRpbWVcbmRlZmluZU1hY3JvKCdDQ19URVNUJywgZGVmaW5lZCgndGFwJykgfHwgZGVmaW5lZCgnUVVuaXQnKSk7XG5kZWZpbmVNYWNybygnQ0NfRURJVE9SJywgZGVmaW5lZCgnRWRpdG9yJykgJiYgZGVmaW5lZCgncHJvY2VzcycpICYmICgnZWxlY3Ryb24nIGluIHByb2Nlc3MudmVyc2lvbnMpKTtcbmRlZmluZU1hY3JvKCdDQ19QUkVWSUVXJywgIUNDX0VESVRPUik7XG5kZWZpbmVNYWNybygnQ0NfUlVOVElNRScsICdmdW5jdGlvbicgPT09IHR5cGVvZiBsb2FkUnVudGltZSk7XG5kZWZpbmVNYWNybygnQ0NfSlNCJywgZGVmaW5lZCgnanNiJykgJiYgIUNDX1JVTlRJTUUpO1xuLy8gZGVwcmVjYXRlZFxuY29uc3QgV0VDSEFUR0FNRVNVQiA9ICEhKGRlZmluZWQoJ3d4JykgJiYgd3guZ2V0U2hhcmVkQ2FudmFzKTtcbmNvbnN0IFdFQ0hBVEdBTUUgPSAhIShkZWZpbmVkKCd3eCcpICYmICh3eC5nZXRTeXN0ZW1JbmZvU3luYyB8fCB3eC5nZXRTaGFyZWRDYW52YXMpKTtcbmNvbnN0IFFRUExBWSA9IGRlZmluZWQoJ2JrJyk7XG5kZWZpbmVEZXByZWNhdGVkTWFjcm9HZXR0ZXIoJ0NDX1dFQ0hBVEdBTUVTVUInLCBXRUNIQVRHQU1FU1VCKTtcbmRlZmluZURlcHJlY2F0ZWRNYWNyb0dldHRlcignQ0NfV0VDSEFUR0FNRScsIFdFQ0hBVEdBTUUpO1xuZGVmaW5lRGVwcmVjYXRlZE1hY3JvR2V0dGVyKCdDQ19RUVBMQVknLCBRUVBMQVkpO1xuXG5pZiAoQ0NfREVWKSB7XG4gICAgLyoqXG4gICAgICogY29udGFpbnMgaW50ZXJuYWwgYXBpcyBmb3IgdW5pdCB0ZXN0c1xuICAgICAqIEBleHBvc2VcbiAgICAgKi9cbiAgICBjYy5fVGVzdCA9IHt9O1xufVxuXG4vKipcbiAqIEBtb2R1bGUgY2NcbiAqL1xuXG4vKipcbiAqIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgQ29jb3MyZCBiZWluZyB1c2VkLjxici8+XG4gKiBQbGVhc2UgRE8gTk9UIHJlbW92ZSB0aGlzIFN0cmluZywgaXQgaXMgYW4gaW1wb3J0YW50IGZsYWcgZm9yIGJ1ZyB0cmFja2luZy48YnIvPlxuICogSWYgeW91IHBvc3QgYSBidWcgdG8gZm9ydW0sIHBsZWFzZSBhdHRhY2ggdGhpcyBmbGFnLlxuICogQHByb3BlcnR5IHtTdHJpbmd9IEVOR0lORV9WRVJTSU9OXG4gKi9cbmNvbnN0IGVuZ2luZVZlcnNpb24gPSAnMi4yLjInXG5fZ2xvYmFsWydDb2Nvc0VuZ2luZSddID0gY2MuRU5HSU5FX1ZFUlNJT04gPSBlbmdpbmVWZXJzaW9uO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXG4gd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xuIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcbiBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbi8vIE1BQ1JPU1xuXG4vKipcbiAqICEjemhcbiAqIOi/memHjOaYr+S4gOS6m+eUqOadpeWIpOaWreaJp+ihjOeOr+Wig+eahOWuj++8jOi/meS6m+Wuj+mDveaYr+WFqOWxgOWPmOmHj++8jOebtOaOpeiuv+mXruWNs+WPr+OAgjxicj5cbiAqIOWcqOmhueebruaehOW7uuaXtu+8jOi/meS6m+Wuj+WwhuS8muiiq+mihOWkhOeQhuW5tuagueaNruaehOW7uueahOW5s+WPsOWJlOmZpOS4jemcgOimgeeahOS7o+egge+8jOS+i+WmglxuICpcbiAqICAgICBpZiAoQ0NfREVCVUcpIHtcbiAqICAgICAgICAgY2MubG9nKCdkZWJ1ZycpO1xuICogICAgIH1cbiAqICAgICBlbHNlIHtcbiAqICAgICAgICAgY2MubG9nKCdyZWxlYXNlJyk7XG4gKiAgICAgfVxuICpcbiAqIOWcqOaehOW7uuWQjuS8muWPquWJqeS4i1xuICpcbiAqICAgICBjYy5sb2coJ3JlbGVhc2UnKTtcbiAqXG4gKiA8YnI+XG4gKiDlpoLpnIDliKTmlq3ohJrmnKzmmK/lkKbov5DooYzkuo7mjIflrprlubPlj7DvvIzlj6/ku6XnlKjlpoLkuIvooajovr7lvI/vvJpcbiAqXG4gKiAgICAge1xuICogICAgICAgICBcIue8lui+keWZqFwiOiAgQ0NfRURJVE9SLFxuICogICAgICAgICBcIue8lui+keWZqCDmiJYg6aKE6KeIXCI6ICBDQ19ERVYsXG4gKiAgICAgICAgIFwi57yW6L6R5ZmoIOaIliDpooTop4gg5oiWIOaehOW7uuiwg+ivlVwiOiAgQ0NfREVCVUcsXG4gKiAgICAgICAgIFwi572R6aG16aKE6KeIXCI6ICBDQ19QUkVWSUVXICYmICFDQ19KU0IsXG4gKiAgICAgICAgIFwi5qih5ouf5Zmo6aKE6KeIXCI6ICBDQ19QUkVWSUVXICYmIENDX0pTQixcbiAqICAgICAgICAgXCLmnoTlu7rosIPor5VcIjogIENDX0JVSUxEICYmIENDX0RFQlVHLFxuICogICAgICAgICBcIuaehOW7uuWPkeihjFwiOiAgQ0NfQlVJTEQgJiYgIUNDX0RFQlVHLFxuICogICAgIH1cbiAqXG4gKiAhI2VuXG4gKiBIZXJlIGFyZSBzb21lIG9mIHRoZSBtYWNybyB1c2VkIHRvIGRldGVybWluZSB0aGUgZXhlY3V0aW9uIGVudmlyb25tZW50LCB0aGVzZSBtYWNyb3MgYXJlIGdsb2JhbCB2YXJpYWJsZXMsIGNhbiBiZSBhY2Nlc3NlZCBkaXJlY3RseS48YnI+XG4gKiBXaGVuIHRoZSBwcm9qZWN0IGlzIGJ1aWx0LCB0aGVzZSBtYWNyb3Mgd2lsbCBiZSBwcmVwcm9jZXNzZWQgYW5kIGRpc2NhcmQgdW5yZWFjaGFibGUgY29kZSBiYXNlZCBvbiB0aGUgYnVpbHQgcGxhdGZvcm0sIGZvciBleGFtcGxlOlxuICpcbiAqICAgICBpZiAoQ0NfREVCVUcpIHtcbiAqICAgICAgICAgY2MubG9nKCdkZWJ1ZycpO1xuICogICAgIH1cbiAqICAgICBlbHNlIHtcbiAqICAgICAgICAgY2MubG9nKCdyZWxlYXNlJyk7XG4gKiAgICAgfVxuICpcbiAqIEFmdGVyIGJ1aWxkIHdpbGwgYmVjb21lOlxuICpcbiAqICAgICBjYy5sb2coJ3JlbGVhc2UnKTtcbiAqXG4gKiA8YnI+XG4gKiBUbyBkZXRlcm1pbmUgd2hldGhlciB0aGUgc2NyaXB0IGlzIHJ1bm5pbmcgb24gdGhlIHNwZWNpZmllZCBwbGF0Zm9ybSwgeW91IGNhbiB1c2UgdGhlIGZvbGxvd2luZyBleHByZXNzaW9uOlxuICpcbiAqICAgICB7XG4gKiAgICAgICAgIFwiZWRpdG9yXCI6ICBDQ19FRElUT1IsXG4gKiAgICAgICAgIFwiZWRpdG9yIG9yIHByZXZpZXdcIjogIENDX0RFVixcbiAqICAgICAgICAgXCJlZGl0b3Igb3IgcHJldmlldyBvciBidWlsZCBpbiBkZWJ1ZyBtb2RlXCI6ICBDQ19ERUJVRyxcbiAqICAgICAgICAgXCJ3ZWIgcHJldmlld1wiOiAgQ0NfUFJFVklFVyAmJiAhQ0NfSlNCLFxuICogICAgICAgICBcInNpbXVsYXRvciBwcmV2aWV3XCI6ICBDQ19QUkVWSUVXICYmIENDX0pTQixcbiAqICAgICAgICAgXCJidWlsZCBpbiBkZWJ1ZyBtb2RlXCI6ICBDQ19CVUlMRCAmJiBDQ19ERUJVRyxcbiAqICAgICAgICAgXCJidWlsZCBpbiByZWxlYXNlIG1vZGVcIjogIENDX0JVSUxEICYmICFDQ19ERUJVRyxcbiAqICAgICB9XG4gKlxuICogQG1vZHVsZSBHTE9CQUwtTUFDUk9TXG4gKi9cbi8qKlxuICogQHByb3BlcnR5IHtCb29sZWFufSBDQ19FRElUT1IgLSBSdW5uaW5nIGluIHRoZSBlZGl0b3IuXG4gKi9cbi8qKlxuICogQHByb3BlcnR5IHtCb29sZWFufSBDQ19QUkVWSUVXIC0gUHJldmlldyBpbiBicm93c2VyIG9yIHNpbXVsYXRvci5cbiAqL1xuLyoqXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IENDX0RFViAtIFJ1bm5pbmcgaW4gdGhlIGVkaXRvciBvciBwcmV2aWV3LlxuICovXG4vKipcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gQ0NfREVCVUcgLSBSdW5uaW5nIGluIHRoZSBlZGl0b3Igb3IgcHJldmlldywgb3IgYnVpbGQgaW4gZGVidWcgbW9kZS5cbiAqL1xuLyoqXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IENDX0JVSUxEIC0gUnVubmluZyBpbiBwdWJsaXNoZWQgcHJvamVjdC5cbiAqL1xuLyoqXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IENDX0pTQiAtIFJ1bm5pbmcgaW4gbmF0aXZlIHBsYXRmb3JtIChtb2JpbGUgYXBwLCBkZXNrdG9wIGFwcCwgb3Igc2ltdWxhdG9yKS5cbiAqL1xuLyoqXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IENDX1RFU1QgLSBSdW5uaW5nIGluIHRoZSBlbmdpbmUncyB1bml0IHRlc3QuXG4gKi9cbi8qKlxuICogQHByb3BlcnR5IHtCb29sZWFufSBDQ19SVU5USU1FIC0gUnVubmluZyBpbiBydW50aW1lIGVudmlyb25tZW50cy5cbiAqL1xuXG4vLyB3aW5kb3cgbWF5IGJlIHVuZGVmaW5lZCB3aGVuIGZpcnN0IGxvYWQgZW5naW5lIGZyb20gZWRpdG9yXG52YXIgX2dsb2JhbCA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogd2luZG93O1xuXG4vKlxuICogQHBhcmFtIGRlZmF1bHRWYWx1ZSAtIFRoZSBkZWZhdWx0IHZhbHVlIGlzIG9ubHkgdXNlZCBpbiB0aGUgZWRpdG9yIG9yIHByZXZpZXcuXG4gKi9cbmZ1bmN0aW9uIGRlZmluZU1hY3JvKG5hbWUsIGRlZmF1bHRWYWx1ZSkge1xuICAvLyBpZiBcImdsb2JhbF9kZWZzXCIgbm90IHByZXByb2Nlc3NlZCBieSB1Z2xpZnksIGp1c3QgZGVjbGFyZSB0aGVtIGdsb2JhbGx5LFxuICAvLyB0aGlzIG1heSBoYXBwZW5lZCBpbiByZWxlYXNlIHZlcnNpb24ncyBwcmV2aWV3IHBhZ2UuXG4gIGlmICh0eXBlb2YgX2dsb2JhbFtuYW1lXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBfZ2xvYmFsW25hbWVdID0gZGVmYXVsdFZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmluZURlcHJlY2F0ZWRNYWNyb0dldHRlcihuYW1lLCBkZWZhdWx0VmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBfZ2xvYmFsW25hbWVdID09PSAndW5kZWZpbmVkJykge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfZ2xvYmFsLCBuYW1lLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIHJlY29tbWFuZGVkVXNhZ2UgPSB2b2lkIDA7XG4gICAgICAgIGlmIChuYW1lID09PSAnQ0NfV0VDSEFUR0FNRVNVQicpIHtcbiAgICAgICAgICByZWNvbW1hbmRlZFVzYWdlID0gJ2NjLnN5cy5wbGF0Zm9ybSA9PT0gY2Muc3lzLldFQ0hBVF9HQU1FX1NVQic7XG4gICAgICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ0NDX1dFQ0hBVEdBTUUnKSB7XG4gICAgICAgICAgcmVjb21tYW5kZWRVc2FnZSA9ICdjYy5zeXMucGxhdGZvcm0gPT09IGNjLnN5cy5XRUNIQVRfR0FNRSc7XG4gICAgICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ0NDX1FRUExBWScpIHtcbiAgICAgICAgICByZWNvbW1hbmRlZFVzYWdlID0gJ2NjLnN5cy5wbGF0Zm9ybSA9PT0gY2Muc3lzLlFRX1BMQVknO1xuICAgICAgICB9XG4gICAgICAgIGNjLndhcm5JRCgxNDAwLCBuYW1lLCByZWNvbW1hbmRlZFVzYWdlKTtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWZpbmVkKG5hbWUpIHtcbiAgcmV0dXJuIF90eXBlb2YoX2dsb2JhbFtuYW1lXSkgPT09ICdvYmplY3QnO1xufVxuXG4vLyBlbnN1cmUgQ0NfQlVJTEQgaXMgZGVmaW5lZFxuLy8gc2hvdWxkIG5vdCB1c2Ugd2luZG93LkNDX0JVSUxEIGJlY2F1c2Ugd2UgbmVlZCBnZXQgZ2xvYmFsX2RlZnMgZGVmaW5lZCBpbiB1Z2xpZnlcbmRlZmluZU1hY3JvKCdDQ19CVUlMRCcsIGZhbHNlKTtcblxuLy8gVGhlc2UgZGVmYXVsdCB2YWx1ZXMgY2FuIG9ubHkgYmUgZGVmaW5lZCBhZnRlciBidWlsZGluZ1xuLy8gSWYgeW91IG5lZWQgdG8gbW9kaWZ5IHRoZW1cbi8vIHBsZWFzZSBtb2RpZnkgdGhlIGBnbG9iYWxfZGVmc2AgaW4gdGhlIG9wdGlvbiByZXR1cm5lZCBieSBgZ3VscC91dGlsL3V0aWxzLmpzOiBnZXRVZ2xpZnlPcHRpb25zYC5cbmlmIChDQ19CVUlMRCkge1xuICBfZ2xvYmFsLkNDX0JVSUxEID0gQ0NfQlVJTEQ7XG4gIF9nbG9iYWwuQ0NfREVWID0gQ0NfREVWO1xuICBfZ2xvYmFsLkNDX0RFQlVHID0gQ0NfREVCVUc7XG4gIF9nbG9iYWwuQ0NfSlNCID0gQ0NfSlNCO1xuICBfZ2xvYmFsLkNDX05BVElWRVJFTkRFUkVSID0gQ0NfTkFUSVZFUkVOREVSRVI7XG4gIF9nbG9iYWwuQ0NfU1VQUE9SVF9KSVQgPSBDQ19TVVBQT1JUX0pJVDtcbn0gZWxzZSB7XG4gIGRlZmluZU1hY3JvKCdDQ19ERVYnLCB0cnVlKTsgLy8gKENDX0VESVRPUiAmJiAhQ0NfQlVJTEQpIHx8IENDX1BSRVZJRVcgfHwgQ0NfVEVTVFxuICBkZWZpbmVNYWNybygnQ0NfREVCVUcnLCB0cnVlKTsgLy8gQ0NfREVWIHx8IERlYnVnIEJ1aWxkXG4gIGRlZmluZU1hY3JvKCdDQ19KU0InLCBkZWZpbmVkKCdqc2InKSk7XG4gIGRlZmluZU1hY3JvKCdDQ19OQVRJVkVSRU5ERVJFUicsIGRlZmluZWQoJ2pzYicpKTtcbiAgZGVmaW5lTWFjcm8oJ0NDX1NVUFBPUlRfSklUJywgdHJ1ZSk7XG59XG4vLyBkZWZpbmVkIGluIHRoZSBydW50aW1lXG5kZWZpbmVNYWNybygnQ0NfVEVTVCcsIGRlZmluZWQoJ3RhcCcpIHx8IGRlZmluZWQoJ1FVbml0JykpO1xuZGVmaW5lTWFjcm8oJ0NDX0VESVRPUicsIGRlZmluZWQoJ0VkaXRvcicpICYmIGRlZmluZWQoJ3Byb2Nlc3MnKSAmJiAnZWxlY3Ryb24nIGluIHByb2Nlc3MudmVyc2lvbnMpO1xuZGVmaW5lTWFjcm8oJ0NDX1BSRVZJRVcnLCAhQ0NfRURJVE9SKTtcbmRlZmluZU1hY3JvKCdDQ19SVU5USU1FJywgJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGxvYWRSdW50aW1lKTtcbmRlZmluZU1hY3JvKCdDQ19KU0InLCBkZWZpbmVkKCdqc2InKSAmJiAhQ0NfUlVOVElNRSk7XG4vLyBkZXByZWNhdGVkXG52YXIgV0VDSEFUR0FNRVNVQiA9ICEhKGRlZmluZWQoJ3d4JykgJiYgd3guZ2V0U2hhcmVkQ2FudmFzKTtcbnZhciBXRUNIQVRHQU1FID0gISEoZGVmaW5lZCgnd3gnKSAmJiAod3guZ2V0U3lzdGVtSW5mb1N5bmMgfHwgd3guZ2V0U2hhcmVkQ2FudmFzKSk7XG52YXIgUVFQTEFZID0gZGVmaW5lZCgnYmsnKTtcbmRlZmluZURlcHJlY2F0ZWRNYWNyb0dldHRlcignQ0NfV0VDSEFUR0FNRVNVQicsIFdFQ0hBVEdBTUVTVUIpO1xuZGVmaW5lRGVwcmVjYXRlZE1hY3JvR2V0dGVyKCdDQ19XRUNIQVRHQU1FJywgV0VDSEFUR0FNRSk7XG5kZWZpbmVEZXByZWNhdGVkTWFjcm9HZXR0ZXIoJ0NDX1FRUExBWScsIFFRUExBWSk7XG5cbmlmIChDQ19ERVYpIHtcbiAgLyoqXG4gICAqIGNvbnRhaW5zIGludGVybmFsIGFwaXMgZm9yIHVuaXQgdGVzdHNcbiAgICogQGV4cG9zZVxuICAgKi9cbiAgY2MuX1Rlc3QgPSB7fTtcbn1cblxuLyoqXG4gKiBAbW9kdWxlIGNjXG4gKi9cblxuLyoqXG4gKiBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIENvY29zMmQgYmVpbmcgdXNlZC48YnIvPlxuICogUGxlYXNlIERPIE5PVCByZW1vdmUgdGhpcyBTdHJpbmcsIGl0IGlzIGFuIGltcG9ydGFudCBmbGFnIGZvciBidWcgdHJhY2tpbmcuPGJyLz5cbiAqIElmIHlvdSBwb3N0IGEgYnVnIHRvIGZvcnVtLCBwbGVhc2UgYXR0YWNoIHRoaXMgZmxhZy5cbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBFTkdJTkVfVkVSU0lPTlxuICovXG52YXIgZW5naW5lVmVyc2lvbiA9ICcyLjIuMic7XG5fZ2xvYmFsWydDb2Nvc0VuZ2luZSddID0gY2MuRU5HSU5FX1ZFUlNJT04gPSBlbmdpbmVWZXJzaW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5CeVpXUmxabWx1WlM1cWN5SmRMQ0p1WVcxbGN5STZXeUpmWjJ4dlltRnNJaXdpZDJsdVpHOTNJaXdpWjJ4dlltRnNJaXdpWkdWbWFXNWxUV0ZqY204aUxDSnVZVzFsSWl3aVpHVm1ZWFZzZEZaaGJIVmxJaXdpWkdWbWFXNWxSR1Z3Y21WallYUmxaRTFoWTNKdlIyVjBkR1Z5SWl3aVQySnFaV04wSWl3aVpHVm1hVzVsVUhKdmNHVnlkSGtpTENKblpYUWlMQ0p5WldOdmJXMWhibVJsWkZWellXZGxJaXdpWTJNaUxDSjNZWEp1U1VRaUxDSmtaV1pwYm1Wa0lpd2lRME5mUWxWSlRFUWlMQ0pEUTE5RVJWWWlMQ0pEUTE5RVJVSlZSeUlzSWtORFgwcFRRaUlzSWtORFgwNUJWRWxXUlZKRlRrUkZVa1ZTSWl3aVEwTmZVMVZRVUU5U1ZGOUtTVlFpTENKd2NtOWpaWE56SWl3aWRtVnljMmx2Ym5NaUxDSkRRMTlGUkVsVVQxSWlMQ0pzYjJGa1VuVnVkR2x0WlNJc0lrTkRYMUpWVGxSSlRVVWlMQ0pYUlVOSVFWUkhRVTFGVTFWQ0lpd2lkM2dpTENKblpYUlRhR0Z5WldSRFlXNTJZWE1pTENKWFJVTklRVlJIUVUxRklpd2laMlYwVTNsemRHVnRTVzVtYjFONWJtTWlMQ0pSVVZCTVFWa2lMQ0pmVkdWemRDSXNJbVZ1WjJsdVpWWmxjbk5wYjI0aUxDSkZUa2RKVGtWZlZrVlNVMGxQVGlKZExDSnRZWEJ3YVc1bmN5STZJanM3T3p0QlFVRkJPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJlVUpCT3p0QlFVVkJPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFUSkVRVHM3TzBGQlIwRTdPenRCUVVkQk96czdRVUZIUVRzN08wRkJSMEU3T3p0QlFVZEJPenM3UVVGSFFUczdPMEZCUjBFN096czdRVUZKUVR0QlFVTkJMRWxCUVVsQkxGVkJRVlVzVDBGQlQwTXNUVUZCVUN4TFFVRnJRaXhYUVVGc1FpeEhRVUZuUTBNc1RVRkJhRU1zUjBGQmVVTkVMRTFCUVhaRU96dEJRVVZCT3pzN1FVRkhRU3hUUVVGVFJTeFhRVUZVTEVOQlFYTkNReXhKUVVGMFFpeEZRVUUwUWtNc1dVRkJOVUlzUlVGQk1FTTdRVUZEZEVNN1FVRkRRVHRCUVVOQkxFMUJRVWtzVDBGQlQwd3NVVUZCVVVrc1NVRkJVaXhEUVVGUUxFdEJRWGxDTEZkQlFUZENMRVZCUVRCRE8wRkJRM1JEU2l4WlFVRlJTU3hKUVVGU0xFbEJRV2RDUXl4WlFVRm9RanRCUVVOSU8wRkJRMG83TzBGQlJVUXNVMEZCVTBNc01rSkJRVlFzUTBGQmMwTkdMRWxCUVhSRExFVkJRVFJEUXl4WlFVRTFReXhGUVVFd1JEdEJRVU4wUkN4TlFVRkpMRTlCUVU5TUxGRkJRVkZKTEVsQlFWSXNRMEZCVUN4TFFVRjVRaXhYUVVFM1FpeEZRVUV3UXp0QlFVTjBRMGNzVjBGQlQwTXNZMEZCVUN4RFFVRnpRbElzVDBGQmRFSXNSVUZCSzBKSkxFbEJRUzlDTEVWQlFYRkRPMEZCUTJwRFN5eFhRVUZMTEdWQlFWazdRVUZEWWl4WlFVRkpReXg1UWtGQlNqdEJRVU5CTEZsQlFVbE9MRk5CUVZNc2EwSkJRV0lzUlVGQmFVTTdRVUZETjBKTkxEWkNRVUZ0UWl3MFEwRkJia0k3UVVGRFNDeFRRVVpFTEUxQlIwc3NTVUZCU1U0c1UwRkJVeXhsUVVGaUxFVkJRVGhDTzBGQlF5OUNUU3cyUWtGQmJVSXNkME5CUVc1Q08wRkJRMGdzVTBGR1NTeE5RVWRCTEVsQlFVbE9MRk5CUVZNc1YwRkJZaXhGUVVFd1FqdEJRVU16UWswc05rSkJRVzFDTEc5RFFVRnVRanRCUVVOSU8wRkJRMFJETEZkQlFVZERMRTFCUVVnc1EwRkJWU3hKUVVGV0xFVkJRV2RDVWl4SlFVRm9RaXhGUVVGelFrMHNaMEpCUVhSQ08wRkJRMEVzWlVGQlQwd3NXVUZCVUR0QlFVTklPMEZCWkdkRExFdEJRWEpETzBGQlowSklPMEZCUTBvN08wRkJSVVFzVTBGQlUxRXNUMEZCVkN4RFFVRnJRbFFzU1VGQmJFSXNSVUZCZDBJN1FVRkRjRUlzVTBGQlR5eFJRVUZQU2l4UlFVRlJTU3hKUVVGU0xFTkJRVkFzVFVGQmVVSXNVVUZCYUVNN1FVRkRTRHM3UVVGRlJEdEJRVU5CTzBGQlEwRkVMRmxCUVZrc1ZVRkJXaXhGUVVGM1FpeExRVUY0UWpzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEpRVUZKVnl4UlFVRktMRVZCUVdNN1FVRkRWbVFzVlVGQlVXTXNVVUZCVWl4SFFVRnRRa0VzVVVGQmJrSTdRVUZEUVdRc1ZVRkJVV1VzVFVGQlVpeEhRVUZwUWtFc1RVRkJha0k3UVVGRFFXWXNWVUZCVVdkQ0xGRkJRVklzUjBGQmJVSkJMRkZCUVc1Q08wRkJRMEZvUWl4VlFVRlJhVUlzVFVGQlVpeEhRVUZwUWtFc1RVRkJha0k3UVVGRFFXcENMRlZCUVZGclFpeHBRa0ZCVWl4SFFVRTBRa0VzYVVKQlFUVkNPMEZCUTBGc1FpeFZRVUZSYlVJc1kwRkJVaXhIUVVGNVFrRXNZMEZCZWtJN1FVRkRTQ3hEUVZCRUxFMUJVVXM3UVVGRFJHaENMR05CUVZrc1VVRkJXaXhGUVVGelFpeEpRVUYwUWl4RlFVUkRMRU5CUXl0Q08wRkJRMmhEUVN4alFVRlpMRlZCUVZvc1JVRkJkMElzU1VGQmVFSXNSVUZHUXl4RFFVVXJRanRCUVVOb1EwRXNZMEZCV1N4UlFVRmFMRVZCUVhOQ1ZTeFJRVUZSTEV0QlFWSXNRMEZCZEVJN1FVRkRRVllzWTBGQldTeHRRa0ZCV2l4RlFVRnBRMVVzVVVGQlVTeExRVUZTTEVOQlFXcERPMEZCUTBGV0xHTkJRVmtzWjBKQlFWb3NSVUZCT0VJc1NVRkJPVUk3UVVGRFNEdEJRVU5FTzBGQlEwRkJMRmxCUVZrc1UwRkJXaXhGUVVGMVFsVXNVVUZCVVN4TFFVRlNMRXRCUVd0Q1FTeFJRVUZSTEU5QlFWSXNRMEZCZWtNN1FVRkRRVllzV1VGQldTeFhRVUZhTEVWQlFYbENWU3hSUVVGUkxGRkJRVklzUzBGQmNVSkJMRkZCUVZFc1UwRkJVaXhEUVVGeVFpeEpRVUUwUXl4alFVRmpUeXhSUVVGUlF5eFJRVUV6Ump0QlFVTkJiRUlzV1VGQldTeFpRVUZhTEVWQlFUQkNMRU5CUVVOdFFpeFRRVUV6UWp0QlFVTkJia0lzV1VGQldTeFpRVUZhTEVWQlFUQkNMR1ZCUVdVc1QwRkJUMjlDTEZkQlFXaEVPMEZCUTBGd1FpeFpRVUZaTEZGQlFWb3NSVUZCYzBKVkxGRkJRVkVzUzBGQlVpeExRVUZyUWl4RFFVRkRWeXhWUVVGNlF6dEJRVU5CTzBGQlEwRXNTVUZCVFVNc1owSkJRV2RDTEVOQlFVTXNSVUZCUlZvc1VVRkJVU3hKUVVGU0xFdEJRV2xDWVN4SFFVRkhReXhsUVVGMFFpeERRVUYyUWp0QlFVTkJMRWxCUVUxRExHRkJRV0VzUTBGQlF5eEZRVUZGWml4UlFVRlJMRWxCUVZJc1RVRkJhMEpoTEVkQlFVZEhMR2xDUVVGSUxFbEJRWGRDU0N4SFFVRkhReXhsUVVFM1F5eERRVUZHTEVOQlFYQkNPMEZCUTBFc1NVRkJUVWNzVTBGQlUycENMRkZCUVZFc1NVRkJVaXhEUVVGbU8wRkJRMEZRTERSQ1FVRTBRaXhyUWtGQk5VSXNSVUZCWjBSdFFpeGhRVUZvUkR0QlFVTkJia0lzTkVKQlFUUkNMR1ZCUVRWQ0xFVkJRVFpEYzBJc1ZVRkJOME03UVVGRFFYUkNMRFJDUVVFMFFpeFhRVUUxUWl4RlFVRjVRM2RDTEUxQlFYcERPenRCUVVWQkxFbEJRVWxtTEUxQlFVb3NSVUZCV1R0QlFVTlNPenM3TzBGQlNVRktMRXRCUVVkdlFpeExRVUZJTEVkQlFWY3NSVUZCV0R0QlFVTklPenRCUVVWRU96czdPMEZCU1VFN096czdPenRCUVUxQkxFbEJRVTFETEdkQ1FVRm5RaXhQUVVGMFFqdEJRVU5CYUVNc1VVRkJVU3hoUVVGU0xFbEJRWGxDVnl4SFFVRkhjMElzWTBGQlNDeEhRVUZ2UWtRc1lVRkJOME1pTENKbWFXeGxJam9pY0hKbFpHVm1hVzVsTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQkRiM0I1Y21sbmFIUWdLR01wSURJd01UY3RNakF4T0NCWWFXRnRaVzRnV1dGcWFTQlRiMlowZDJGeVpTQkRieTRzSUV4MFpDNWNibHh1SUdoMGRIQnpPaTh2ZDNkM0xtTnZZMjl6TG1OdmJTOWNibHh1SUZCbGNtMXBjM05wYjI0Z2FYTWdhR1Z5WldKNUlHZHlZVzUwWldRc0lHWnlaV1VnYjJZZ1kyaGhjbWRsTENCMGJ5QmhibmtnY0dWeWMyOXVJRzlpZEdGcGJtbHVaeUJoSUdOdmNIbGNiaUJ2WmlCMGFHbHpJSE52Wm5SM1lYSmxJR0Z1WkNCaGMzTnZZMmxoZEdWa0lHVnVaMmx1WlNCemIzVnlZMlVnWTI5a1pTQW9kR2hsSUZ3aVUyOW1kSGRoY21WY0lpa3NJR0VnYkdsdGFYUmxaQ3hjYmlCM2IzSnNaSGRwWkdVc0lISnZlV0ZzZEhrdFpuSmxaU3dnYm05dUxXRnpjMmxuYm1GaWJHVXNJSEpsZG05allXSnNaU0JoYm1RZ2JtOXVMV1Y0WTJ4MWMybDJaU0JzYVdObGJuTmxYRzRnZEc4Z2RYTmxJRU52WTI5eklFTnlaV0YwYjNJZ2MyOXNaV3g1SUhSdklHUmxkbVZzYjNBZ1oyRnRaWE1nYjI0Z2VXOTFjaUIwWVhKblpYUWdjR3hoZEdadmNtMXpMaUJaYjNVZ2MyaGhiR3hjYmlCdWIzUWdkWE5sSUVOdlkyOXpJRU55WldGMGIzSWdjMjltZEhkaGNtVWdabTl5SUdSbGRtVnNiM0JwYm1jZ2IzUm9aWElnYzI5bWRIZGhjbVVnYjNJZ2RHOXZiSE1nZEdoaGRDZHpYRzRnZFhObFpDQm1iM0lnWkdWMlpXeHZjR2x1WnlCbllXMWxjeTRnV1c5MUlHRnlaU0J1YjNRZ1ozSmhiblJsWkNCMGJ5QndkV0pzYVhOb0xDQmthWE4wY21saWRYUmxMRnh1SUhOMVlteHBZMlZ1YzJVc0lHRnVaQzl2Y2lCelpXeHNJR052Y0dsbGN5QnZaaUJEYjJOdmN5QkRjbVZoZEc5eUxseHVYRzRnVkdobElITnZablIzWVhKbElHOXlJSFJ2YjJ4eklHbHVJSFJvYVhNZ1RHbGpaVzV6WlNCQlozSmxaVzFsYm5RZ1lYSmxJR3hwWTJWdWMyVmtMQ0J1YjNRZ2MyOXNaQzVjYmlCWWFXRnRaVzRnV1dGcWFTQlRiMlowZDJGeVpTQkRieTRzSUV4MFpDNGdjbVZ6WlhKMlpYTWdZV3hzSUhKcFoyaDBjeUJ1YjNRZ1pYaHdjbVZ6YzJ4NUlHZHlZVzUwWldRZ2RHOGdlVzkxTGx4dVhHNGdWRWhGSUZOUFJsUlhRVkpGSUVsVElGQlNUMVpKUkVWRUlGd2lRVk1nU1ZOY0lpd2dWMGxVU0U5VlZDQlhRVkpTUVU1VVdTQlBSaUJCVGxrZ1MwbE9SQ3dnUlZoUVVrVlRVeUJQVWx4dUlFbE5VRXhKUlVRc0lFbE9RMHhWUkVsT1J5QkNWVlFnVGs5VUlFeEpUVWxVUlVRZ1ZFOGdWRWhGSUZkQlVsSkJUbFJKUlZNZ1QwWWdUVVZTUTBoQlRsUkJRa2xNU1ZSWkxGeHVJRVpKVkU1RlUxTWdSazlTSUVFZ1VFRlNWRWxEVlV4QlVpQlFWVkpRVDFORklFRk9SQ0JPVDA1SlRrWlNTVTVIUlUxRlRsUXVJRWxPSUU1UElFVldSVTVVSUZOSVFVeE1JRlJJUlZ4dUlFRlZWRWhQVWxNZ1QxSWdRMDlRV1ZKSlIwaFVJRWhQVEVSRlVsTWdRa1VnVEVsQlFreEZJRVpQVWlCQlRsa2dRMHhCU1Uwc0lFUkJUVUZIUlZNZ1QxSWdUMVJJUlZKY2JpQk1TVUZDU1V4SlZGa3NJRmRJUlZSSVJWSWdTVTRnUVU0Z1FVTlVTVTlPSUU5R0lFTlBUbFJTUVVOVUxDQlVUMUpVSUU5U0lFOVVTRVZTVjBsVFJTd2dRVkpKVTBsT1J5QkdVazlOTEZ4dUlFOVZWQ0JQUmlCUFVpQkpUaUJEVDA1T1JVTlVTVTlPSUZkSlZFZ2dWRWhGSUZOUFJsUlhRVkpGSUU5U0lGUklSU0JWVTBVZ1QxSWdUMVJJUlZJZ1JFVkJURWxPUjFNZ1NVNWNiaUJVU0VVZ1UwOUdWRmRCVWtVdVhHNGdLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2k5Y2JseHVMeThnVFVGRFVrOVRYRzVjYmk4cUtseHVJQ29nSVNONmFGeHVJQ29nNkwrWjZZZU01cGl2NUxpQTVMcWI1NVNvNXAybDVZaWs1cGF0NW9tbjZLR001NDZ2NWFLRDU1cUU1YTZQNzd5TTZMK1o1THFiNWE2UDZZTzk1cGl2NVlXbzViR0E1WStZNlllUDc3eU01NXUwNW82bDZLNi82WmV1NVkyejVZK3Y0NENDUEdKeVBseHVJQ29nNVp5bzZhRzU1NXV1NXA2RTVidTY1cGUyNzd5TTZMK1o1THFiNWE2UDViQ0c1THlhNktLcjZhS0U1YVNFNTVDRzVibTI1cUM1NW8ydTVwNkU1YnU2NTVxRTVibXo1WSt3NVltVTZabWs1TGlONlp5QTZLYUI1NXFFNUx1ajU2Q0I3N3lNNUw2TDVhYUNYRzRnS2x4dUlDb2dJQ0FnSUdsbUlDaERRMTlFUlVKVlJ5a2dlMXh1SUNvZ0lDQWdJQ0FnSUNCall5NXNiMmNvSjJSbFluVm5KeWs3WEc0Z0tpQWdJQ0FnZlZ4dUlDb2dJQ0FnSUdWc2MyVWdlMXh1SUNvZ0lDQWdJQ0FnSUNCall5NXNiMmNvSjNKbGJHVmhjMlVuS1R0Y2JpQXFJQ0FnSUNCOVhHNGdLbHh1SUNvZzVaeW81cDZFNWJ1NjVaQ081THlhNVkrcTVZbXA1TGlMWEc0Z0tseHVJQ29nSUNBZ0lHTmpMbXh2WnlnbmNtVnNaV0Z6WlNjcE8xeHVJQ3BjYmlBcUlEeGljajVjYmlBcUlPV21ndW1jZ09XSXBPYVdyZWlFbXVhY3JPYVlyK1dRcHVpL2tPaWhqT1M2anVhTWgrV3VtdVc1cytXUHNPKzhqT1dQcitTN3BlZVVxT1dtZ3VTNGkraWhxT2krdnVXOGorKzhtbHh1SUNwY2JpQXFJQ0FnSUNCN1hHNGdLaUFnSUNBZ0lDQWdJRndpNTd5VzZMNlI1Wm1vWENJNklDQkRRMTlGUkVsVVQxSXNYRzRnS2lBZ0lDQWdJQ0FnSUZ3aTU3eVc2TDZSNVptb0lPYUlsaURwb29Ub3A0aGNJam9nSUVORFgwUkZWaXhjYmlBcUlDQWdJQ0FnSUNBZ1hDTG52SmJvdnBIbG1hZ2c1b2lXSU9taWhPaW5pQ0RtaUpZZzVwNkU1YnU2NkxDRDZLK1ZYQ0k2SUNCRFExOUVSVUpWUnl4Y2JpQXFJQ0FnSUNBZ0lDQWdYQ0xudlpIcG9iWHBvb1RvcDRoY0lqb2dJRU5EWDFCU1JWWkpSVmNnSmlZZ0lVTkRYMHBUUWl4Y2JpQXFJQ0FnSUNBZ0lDQWdYQ0xtcUtIbWk1L2xtYWpwb29Ub3A0aGNJam9nSUVORFgxQlNSVlpKUlZjZ0ppWWdRME5mU2xOQ0xGeHVJQ29nSUNBZ0lDQWdJQ0JjSXVhZWhPVzd1dWl3ZytpdmxWd2lPaUFnUTBOZlFsVkpURVFnSmlZZ1EwTmZSRVZDVlVjc1hHNGdLaUFnSUNBZ0lDQWdJRndpNXA2RTVidTY1WStSNktHTVhDSTZJQ0JEUTE5Q1ZVbE1SQ0FtSmlBaFEwTmZSRVZDVlVjc1hHNGdLaUFnSUNBZ2ZWeHVJQ3BjYmlBcUlDRWpaVzVjYmlBcUlFaGxjbVVnWVhKbElITnZiV1VnYjJZZ2RHaGxJRzFoWTNKdklIVnpaV1FnZEc4Z1pHVjBaWEp0YVc1bElIUm9aU0JsZUdWamRYUnBiMjRnWlc1MmFYSnZibTFsYm5Rc0lIUm9aWE5sSUcxaFkzSnZjeUJoY21VZ1oyeHZZbUZzSUhaaGNtbGhZbXhsY3l3Z1kyRnVJR0psSUdGalkyVnpjMlZrSUdScGNtVmpkR3g1TGp4aWNqNWNiaUFxSUZkb1pXNGdkR2hsSUhCeWIycGxZM1FnYVhNZ1luVnBiSFFzSUhSb1pYTmxJRzFoWTNKdmN5QjNhV3hzSUdKbElIQnlaWEJ5YjJObGMzTmxaQ0JoYm1RZ1pHbHpZMkZ5WkNCMWJuSmxZV05vWVdKc1pTQmpiMlJsSUdKaGMyVmtJRzl1SUhSb1pTQmlkV2xzZENCd2JHRjBabTl5YlN3Z1ptOXlJR1Y0WVcxd2JHVTZYRzRnS2x4dUlDb2dJQ0FnSUdsbUlDaERRMTlFUlVKVlJ5a2dlMXh1SUNvZ0lDQWdJQ0FnSUNCall5NXNiMmNvSjJSbFluVm5KeWs3WEc0Z0tpQWdJQ0FnZlZ4dUlDb2dJQ0FnSUdWc2MyVWdlMXh1SUNvZ0lDQWdJQ0FnSUNCall5NXNiMmNvSjNKbGJHVmhjMlVuS1R0Y2JpQXFJQ0FnSUNCOVhHNGdLbHh1SUNvZ1FXWjBaWElnWW5WcGJHUWdkMmxzYkNCaVpXTnZiV1U2WEc0Z0tseHVJQ29nSUNBZ0lHTmpMbXh2WnlnbmNtVnNaV0Z6WlNjcE8xeHVJQ3BjYmlBcUlEeGljajVjYmlBcUlGUnZJR1JsZEdWeWJXbHVaU0IzYUdWMGFHVnlJSFJvWlNCelkzSnBjSFFnYVhNZ2NuVnVibWx1WnlCdmJpQjBhR1VnYzNCbFkybG1hV1ZrSUhCc1lYUm1iM0p0TENCNWIzVWdZMkZ1SUhWelpTQjBhR1VnWm05c2JHOTNhVzVuSUdWNGNISmxjM05wYjI0NlhHNGdLbHh1SUNvZ0lDQWdJSHRjYmlBcUlDQWdJQ0FnSUNBZ1hDSmxaR2wwYjNKY0lqb2dJRU5EWDBWRVNWUlBVaXhjYmlBcUlDQWdJQ0FnSUNBZ1hDSmxaR2wwYjNJZ2IzSWdjSEpsZG1sbGQxd2lPaUFnUTBOZlJFVldMRnh1SUNvZ0lDQWdJQ0FnSUNCY0ltVmthWFJ2Y2lCdmNpQndjbVYyYVdWM0lHOXlJR0oxYVd4a0lHbHVJR1JsWW5WbklHMXZaR1ZjSWpvZ0lFTkRYMFJGUWxWSExGeHVJQ29nSUNBZ0lDQWdJQ0JjSW5kbFlpQndjbVYyYVdWM1hDSTZJQ0JEUTE5UVVrVldTVVZYSUNZbUlDRkRRMTlLVTBJc1hHNGdLaUFnSUNBZ0lDQWdJRndpYzJsdGRXeGhkRzl5SUhCeVpYWnBaWGRjSWpvZ0lFTkRYMUJTUlZaSlJWY2dKaVlnUTBOZlNsTkNMRnh1SUNvZ0lDQWdJQ0FnSUNCY0ltSjFhV3hrSUdsdUlHUmxZblZuSUcxdlpHVmNJam9nSUVORFgwSlZTVXhFSUNZbUlFTkRYMFJGUWxWSExGeHVJQ29nSUNBZ0lDQWdJQ0JjSW1KMWFXeGtJR2x1SUhKbGJHVmhjMlVnYlc5a1pWd2lPaUFnUTBOZlFsVkpURVFnSmlZZ0lVTkRYMFJGUWxWSExGeHVJQ29nSUNBZ0lIMWNiaUFxWEc0Z0tpQkFiVzlrZFd4bElFZE1UMEpCVEMxTlFVTlNUMU5jYmlBcUwxeHVMeW9xWEc0Z0tpQkFjSEp2Y0dWeWRIa2dlMEp2YjJ4bFlXNTlJRU5EWDBWRVNWUlBVaUF0SUZKMWJtNXBibWNnYVc0Z2RHaGxJR1ZrYVhSdmNpNWNiaUFxTDF4dUx5b3FYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UwSnZiMnhsWVc1OUlFTkRYMUJTUlZaSlJWY2dMU0JRY21WMmFXVjNJR2x1SUdKeWIzZHpaWElnYjNJZ2MybHRkV3hoZEc5eUxseHVJQ292WEc0dktpcGNiaUFxSUVCd2NtOXdaWEowZVNCN1FtOXZiR1ZoYm4wZ1EwTmZSRVZXSUMwZ1VuVnVibWx1WnlCcGJpQjBhR1VnWldScGRHOXlJRzl5SUhCeVpYWnBaWGN1WEc0Z0tpOWNiaThxS2x4dUlDb2dRSEJ5YjNCbGNuUjVJSHRDYjI5c1pXRnVmU0JEUTE5RVJVSlZSeUF0SUZKMWJtNXBibWNnYVc0Z2RHaGxJR1ZrYVhSdmNpQnZjaUJ3Y21WMmFXVjNMQ0J2Y2lCaWRXbHNaQ0JwYmlCa1pXSjFaeUJ0YjJSbExseHVJQ292WEc0dktpcGNiaUFxSUVCd2NtOXdaWEowZVNCN1FtOXZiR1ZoYm4wZ1EwTmZRbFZKVEVRZ0xTQlNkVzV1YVc1bklHbHVJSEIxWW14cGMyaGxaQ0J3Y205cVpXTjBMbHh1SUNvdlhHNHZLaXBjYmlBcUlFQndjbTl3WlhKMGVTQjdRbTl2YkdWaGJuMGdRME5mU2xOQ0lDMGdVblZ1Ym1sdVp5QnBiaUJ1WVhScGRtVWdjR3hoZEdadmNtMGdLRzF2WW1sc1pTQmhjSEFzSUdSbGMydDBiM0FnWVhCd0xDQnZjaUJ6YVcxMWJHRjBiM0lwTGx4dUlDb3ZYRzR2S2lwY2JpQXFJRUJ3Y205d1pYSjBlU0I3UW05dmJHVmhibjBnUTBOZlZFVlRWQ0F0SUZKMWJtNXBibWNnYVc0Z2RHaGxJR1Z1WjJsdVpTZHpJSFZ1YVhRZ2RHVnpkQzVjYmlBcUwxeHVMeW9xWEc0Z0tpQkFjSEp2Y0dWeWRIa2dlMEp2YjJ4bFlXNTlJRU5EWDFKVlRsUkpUVVVnTFNCU2RXNXVhVzVuSUdsdUlISjFiblJwYldVZ1pXNTJhWEp2Ym0xbGJuUnpMbHh1SUNvdlhHNWNiaTh2SUhkcGJtUnZkeUJ0WVhrZ1ltVWdkVzVrWldacGJtVmtJSGRvWlc0Z1ptbHljM1FnYkc5aFpDQmxibWRwYm1VZ1puSnZiU0JsWkdsMGIzSmNiblpoY2lCZloyeHZZbUZzSUQwZ2RIbHdaVzltSUhkcGJtUnZkeUE5UFQwZ0ozVnVaR1ZtYVc1bFpDY2dQeUJuYkc5aVlXd2dPaUIzYVc1a2IzYzdYRzVjYmk4cVhHNGdLaUJBY0dGeVlXMGdaR1ZtWVhWc2RGWmhiSFZsSUMwZ1ZHaGxJR1JsWm1GMWJIUWdkbUZzZFdVZ2FYTWdiMjVzZVNCMWMyVmtJR2x1SUhSb1pTQmxaR2wwYjNJZ2IzSWdjSEpsZG1sbGR5NWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1pHVm1hVzVsVFdGamNtOGdLRzVoYldVc0lHUmxabUYxYkhSV1lXeDFaU2tnZTF4dUlDQWdJQzh2SUdsbUlGd2laMnh2WW1Gc1gyUmxabk5jSWlCdWIzUWdjSEpsY0hKdlkyVnpjMlZrSUdKNUlIVm5iR2xtZVN3Z2FuVnpkQ0JrWldOc1lYSmxJSFJvWlcwZ1oyeHZZbUZzYkhrc1hHNGdJQ0FnTHk4Z2RHaHBjeUJ0WVhrZ2FHRndjR1Z1WldRZ2FXNGdjbVZzWldGelpTQjJaWEp6YVc5dUozTWdjSEpsZG1sbGR5QndZV2RsTGx4dUlDQWdJR2xtSUNoMGVYQmxiMllnWDJkc2IySmhiRnR1WVcxbFhTQTlQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lDQWdYMmRzYjJKaGJGdHVZVzFsWFNBOUlHUmxabUYxYkhSV1lXeDFaVHRjYmlBZ0lDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHUmxabWx1WlVSbGNISmxZMkYwWldSTllXTnliMGRsZEhSbGNpQW9ibUZ0WlN3Z1pHVm1ZWFZzZEZaaGJIVmxLU0I3WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJmWjJ4dlltRnNXMjVoYldWZElEMDlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ0lDQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWDJkc2IySmhiQ3dnYm1GdFpTd2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1oyVjBPaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSEpsWTI5dGJXRnVaR1ZrVlhOaFoyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c1aGJXVWdQVDA5SUNkRFExOVhSVU5JUVZSSFFVMUZVMVZDSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WldOdmJXMWhibVJsWkZWellXZGxJRDBnSjJOakxuTjVjeTV3YkdGMFptOXliU0E5UFQwZ1kyTXVjM2x6TGxkRlEwaEJWRjlIUVUxRlgxTlZRaWM3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0c1aGJXVWdQVDA5SUNkRFExOVhSVU5JUVZSSFFVMUZKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaV052YlcxaGJtUmxaRlZ6WVdkbElEMGdKMk5qTG5ONWN5NXdiR0YwWm05eWJTQTlQVDBnWTJNdWMzbHpMbGRGUTBoQlZGOUhRVTFGSnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb2JtRnRaU0E5UFQwZ0owTkRYMUZSVUV4QldTY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVmpiMjF0WVc1a1pXUlZjMkZuWlNBOUlDZGpZeTV6ZVhNdWNHeGhkR1p2Y20wZ1BUMDlJR05qTG5ONWN5NVJVVjlRVEVGWkp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMk11ZDJGeWJrbEVLREUwTURBc0lHNWhiV1VzSUhKbFkyOXRiV0Z1WkdWa1ZYTmhaMlVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJrWldaaGRXeDBWbUZzZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnWkdWbWFXNWxaQ0FvYm1GdFpTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGVYQmxiMllnWDJkc2IySmhiRnR1WVcxbFhTQTlQVDBnSjI5aWFtVmpkQ2M3WEc1OVhHNWNiaTh2SUdWdWMzVnlaU0JEUTE5Q1ZVbE1SQ0JwY3lCa1pXWnBibVZrWEc0dkx5QnphRzkxYkdRZ2JtOTBJSFZ6WlNCM2FXNWtiM2N1UTBOZlFsVkpURVFnWW1WallYVnpaU0IzWlNCdVpXVmtJR2RsZENCbmJHOWlZV3hmWkdWbWN5QmtaV1pwYm1Wa0lHbHVJSFZuYkdsbWVWeHVaR1ZtYVc1bFRXRmpjbThvSjBORFgwSlZTVXhFSnl3Z1ptRnNjMlVwTzF4dVhHNHZMeUJVYUdWelpTQmtaV1poZFd4MElIWmhiSFZsY3lCallXNGdiMjVzZVNCaVpTQmtaV1pwYm1Wa0lHRm1kR1Z5SUdKMWFXeGthVzVuWEc0dkx5QkpaaUI1YjNVZ2JtVmxaQ0IwYnlCdGIyUnBabmtnZEdobGJWeHVMeThnY0d4bFlYTmxJRzF2WkdsbWVTQjBhR1VnWUdkc2IySmhiRjlrWldaellDQnBiaUIwYUdVZ2IzQjBhVzl1SUhKbGRIVnlibVZrSUdKNUlHQm5kV3h3TDNWMGFXd3ZkWFJwYkhNdWFuTTZJR2RsZEZWbmJHbG1lVTl3ZEdsdmJuTmdMbHh1YVdZZ0tFTkRYMEpWU1V4RUtTQjdYRzRnSUNBZ1gyZHNiMkpoYkM1RFExOUNWVWxNUkNBOUlFTkRYMEpWU1V4RU8xeHVJQ0FnSUY5bmJHOWlZV3d1UTBOZlJFVldJRDBnUTBOZlJFVldPMXh1SUNBZ0lGOW5iRzlpWVd3dVEwTmZSRVZDVlVjZ1BTQkRRMTlFUlVKVlJ6dGNiaUFnSUNCZloyeHZZbUZzTGtORFgwcFRRaUE5SUVORFgwcFRRanRjYmlBZ0lDQmZaMnh2WW1Gc0xrTkRYMDVCVkVsV1JWSkZUa1JGVWtWU0lEMGdRME5mVGtGVVNWWkZVa1ZPUkVWU1JWSTdYRzRnSUNBZ1gyZHNiMkpoYkM1RFExOVRWVkJRVDFKVVgwcEpWQ0E5SUVORFgxTlZVRkJQVWxSZlNrbFVPMXh1ZlZ4dVpXeHpaU0I3WEc0Z0lDQWdaR1ZtYVc1bFRXRmpjbThvSjBORFgwUkZWaWNzSUhSeWRXVXBPeUFnSUNBdkx5QW9RME5mUlVSSlZFOVNJQ1ltSUNGRFExOUNWVWxNUkNrZ2ZId2dRME5mVUZKRlZrbEZWeUI4ZkNCRFExOVVSVk5VWEc0Z0lDQWdaR1ZtYVc1bFRXRmpjbThvSjBORFgwUkZRbFZISnl3Z2RISjFaU2s3SUNBdkx5QkRRMTlFUlZZZ2ZId2dSR1ZpZFdjZ1FuVnBiR1JjYmlBZ0lDQmtaV1pwYm1WTllXTnlieWduUTBOZlNsTkNKeXdnWkdWbWFXNWxaQ2duYW5OaUp5a3BPMXh1SUNBZ0lHUmxabWx1WlUxaFkzSnZLQ2REUTE5T1FWUkpWa1ZTUlU1RVJWSkZVaWNzSUdSbFptbHVaV1FvSjJwellpY3BLVHRjYmlBZ0lDQmtaV1pwYm1WTllXTnlieWduUTBOZlUxVlFVRTlTVkY5S1NWUW5MQ0IwY25WbEtUdGNibjFjYmk4dklHUmxabWx1WldRZ2FXNGdkR2hsSUhKMWJuUnBiV1ZjYm1SbFptbHVaVTFoWTNKdktDZERRMTlVUlZOVUp5d2daR1ZtYVc1bFpDZ25kR0Z3SnlrZ2ZId2daR1ZtYVc1bFpDZ25VVlZ1YVhRbktTazdYRzVrWldacGJtVk5ZV055YnlnblEwTmZSVVJKVkU5U0p5d2daR1ZtYVc1bFpDZ25SV1JwZEc5eUp5a2dKaVlnWkdWbWFXNWxaQ2duY0hKdlkyVnpjeWNwSUNZbUlDZ25aV3hsWTNSeWIyNG5JR2x1SUhCeWIyTmxjM011ZG1WeWMybHZibk1wS1R0Y2JtUmxabWx1WlUxaFkzSnZLQ2REUTE5UVVrVldTVVZYSnl3Z0lVTkRYMFZFU1ZSUFVpazdYRzVrWldacGJtVk5ZV055YnlnblEwTmZVbFZPVkVsTlJTY3NJQ2RtZFc1amRHbHZiaWNnUFQwOUlIUjVjR1Z2WmlCc2IyRmtVblZ1ZEdsdFpTazdYRzVrWldacGJtVk5ZV055YnlnblEwTmZTbE5DSnl3Z1pHVm1hVzVsWkNnbmFuTmlKeWtnSmlZZ0lVTkRYMUpWVGxSSlRVVXBPMXh1THk4Z1pHVndjbVZqWVhSbFpGeHVZMjl1YzNRZ1YwVkRTRUZVUjBGTlJWTlZRaUE5SUNFaEtHUmxabWx1WldRb0ozZDRKeWtnSmlZZ2QzZ3VaMlYwVTJoaGNtVmtRMkZ1ZG1GektUdGNibU52Ym5OMElGZEZRMGhCVkVkQlRVVWdQU0FoSVNoa1pXWnBibVZrS0NkM2VDY3BJQ1ltSUNoM2VDNW5aWFJUZVhOMFpXMUpibVp2VTNsdVl5QjhmQ0IzZUM1blpYUlRhR0Z5WldSRFlXNTJZWE1wS1R0Y2JtTnZibk4wSUZGUlVFeEJXU0E5SUdSbFptbHVaV1FvSjJKckp5azdYRzVrWldacGJtVkVaWEJ5WldOaGRHVmtUV0ZqY205SFpYUjBaWElvSjBORFgxZEZRMGhCVkVkQlRVVlRWVUluTENCWFJVTklRVlJIUVUxRlUxVkNLVHRjYm1SbFptbHVaVVJsY0hKbFkyRjBaV1JOWVdOeWIwZGxkSFJsY2lnblEwTmZWMFZEU0VGVVIwRk5SU2NzSUZkRlEwaEJWRWRCVFVVcE8xeHVaR1ZtYVc1bFJHVndjbVZqWVhSbFpFMWhZM0p2UjJWMGRHVnlLQ2REUTE5UlVWQk1RVmtuTENCUlVWQk1RVmtwTzF4dVhHNXBaaUFvUTBOZlJFVldLU0I3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nWTI5dWRHRnBibk1nYVc1MFpYSnVZV3dnWVhCcGN5Qm1iM0lnZFc1cGRDQjBaWE4wYzF4dUlDQWdJQ0FxSUVCbGVIQnZjMlZjYmlBZ0lDQWdLaTljYmlBZ0lDQmpZeTVmVkdWemRDQTlJSHQ5TzF4dWZWeHVYRzR2S2lwY2JpQXFJRUJ0YjJSMWJHVWdZMk5jYmlBcUwxeHVYRzR2S2lwY2JpQXFJRlJvWlNCamRYSnlaVzUwSUhabGNuTnBiMjRnYjJZZ1EyOWpiM015WkNCaVpXbHVaeUIxYzJWa0xqeGljaTgrWEc0Z0tpQlFiR1ZoYzJVZ1JFOGdUazlVSUhKbGJXOTJaU0IwYUdseklGTjBjbWx1Wnl3Z2FYUWdhWE1nWVc0Z2FXMXdiM0owWVc1MElHWnNZV2NnWm05eUlHSjFaeUIwY21GamEybHVaeTQ4WW5JdlBseHVJQ29nU1dZZ2VXOTFJSEJ2YzNRZ1lTQmlkV2NnZEc4Z1ptOXlkVzBzSUhCc1pXRnpaU0JoZEhSaFkyZ2dkR2hwY3lCbWJHRm5MbHh1SUNvZ1FIQnliM0JsY25SNUlIdFRkSEpwYm1kOUlFVk9SMGxPUlY5V1JWSlRTVTlPWEc0Z0tpOWNibU52Ym5OMElHVnVaMmx1WlZabGNuTnBiMjRnUFNBbk1pNHlMakluWEc1ZloyeHZZbUZzV3lkRGIyTnZjMFZ1WjJsdVpTZGRJRDBnWTJNdVJVNUhTVTVGWDFaRlVsTkpUMDRnUFNCbGJtZHBibVZXWlhKemFXOXVPMXh1SWwxOSJdfQ==