(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/animation/animation-clip.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var WrapMode = require('./types').WrapMode;
        var _require = require('./animation-curves'), DynamicAnimCurve = _require.DynamicAnimCurve, quickFindIndex = _require.quickFindIndex;
        var sampleMotionPaths = require('./motion-path-helper').sampleMotionPaths;
        var binarySearch = require('../core/utils/binary-search').binarySearchEpsilon;
        var AnimationClip = cc.Class({
            name: 'cc.AnimationClip',
            extends: cc.Asset,
            properties: {
                _duration: {
                    default: 0,
                    type: cc.Float
                },
                duration: {
                    get: function get() {
                        return this._duration;
                    }
                },
                sample: { default: 60 },
                speed: { default: 1 },
                wrapMode: { default: WrapMode.Normal },
                curveData: {
                    default: {},
                    visible: false
                },
                events: {
                    default: [],
                    visible: false
                }
            },
            statics: {
                createWithSpriteFrames: function createWithSpriteFrames(spriteFrames, sample) {
                    if (!Array.isArray(spriteFrames)) {
                        cc.errorID(3905);
                        return null;
                    }
                    var clip = new AnimationClip();
                    clip.sample = sample || clip.sample;
                    clip._duration = spriteFrames.length / clip.sample;
                    var frames = [];
                    var step = 1 / clip.sample;
                    for (var i = 0, l = spriteFrames.length; i < l; i++) {
                        frames[i] = {
                            frame: i * step,
                            value: spriteFrames[i]
                        };
                    }
                    clip.curveData = { comps: { 'cc.Sprite': { 'spriteFrame': frames } } };
                    return clip;
                }
            },
            onLoad: function onLoad() {
                this._duration = Number.parseFloat(this.duration);
                this.speed = Number.parseFloat(this.speed);
                this.wrapMode = Number.parseInt(this.wrapMode);
                this.frameRate = Number.parseFloat(this.sample);
            },
            createPropCurve: function createPropCurve(target, propPath, keyframes) {
                var motionPaths = [];
                var isMotionPathProp = target instanceof cc.Node && propPath === 'position';
                var curve = new DynamicAnimCurve();
                curve.target = target;
                curve.prop = propPath;
                for (var i = 0, l = keyframes.length; i < l; i++) {
                    var keyframe = keyframes[i];
                    var ratio = keyframe.frame / this.duration;
                    curve.ratios.push(ratio);
                    if (isMotionPathProp) {
                        motionPaths.push(keyframe.motionPath);
                    }
                    var curveValue = keyframe.value;
                    curve.values.push(curveValue);
                    var curveTypes = keyframe.curve;
                    if (curveTypes) {
                        if (typeof curveTypes === 'string') {
                            curve.types.push(curveTypes);
                            continue;
                        } else if (Array.isArray(curveTypes)) {
                            if (curveTypes[0] === curveTypes[1] && curveTypes[2] === curveTypes[3]) {
                                curve.types.push(DynamicAnimCurve.Linear);
                            } else {
                                curve.types.push(DynamicAnimCurve.Bezier(curveTypes));
                            }
                            continue;
                        }
                    }
                    curve.types.push(DynamicAnimCurve.Linear);
                }
                if (isMotionPathProp) {
                    sampleMotionPaths(motionPaths, curve, this.duration, this.sample, target);
                }
                var ratios = curve.ratios;
                var currRatioDif = void 0, lastRatioDif = void 0;
                var canOptimize = true;
                var EPSILON = 0.000001;
                for (var _i = 1, _l = ratios.length; _i < _l; _i++) {
                    currRatioDif = ratios[_i] - ratios[_i - 1];
                    if (_i === 1) {
                        lastRatioDif = currRatioDif;
                    } else if (Math.abs(currRatioDif - lastRatioDif) > EPSILON) {
                        canOptimize = false;
                        break;
                    }
                }
                curve._findFrameIndex = canOptimize ? quickFindIndex : binarySearch;
                var firstValue = curve.values[0];
                if (firstValue !== undefined && firstValue !== null && !curve._lerp) {
                    if (typeof firstValue === 'number') {
                        curve._lerp = DynamicAnimCurve.prototype._lerpNumber;
                    } else if (firstValue instanceof cc.Quat) {
                        curve._lerp = DynamicAnimCurve.prototype._lerpQuat;
                    } else if (firstValue instanceof cc.Vec2 || firstValue instanceof cc.Vec3) {
                        curve._lerp = DynamicAnimCurve.prototype._lerpVector;
                    } else if (firstValue.lerp) {
                        curve._lerp = DynamicAnimCurve.prototype._lerpObject;
                    }
                }
                return curve;
            },
            createTargetCurves: function createTargetCurves(target, curveData, curves) {
                var propsData = curveData.props;
                var compsData = curveData.comps;
                if (propsData) {
                    for (var propPath in propsData) {
                        var data = propsData[propPath];
                        var curve = this.createPropCurve(target, propPath, data);
                        curves.push(curve);
                    }
                }
                if (compsData) {
                    for (var compName in compsData) {
                        var comp = target.getComponent(compName);
                        if (!comp) {
                            continue;
                        }
                        var compData = compsData[compName];
                        for (var _propPath in compData) {
                            var _data = compData[_propPath];
                            var _curve = this.createPropCurve(comp, _propPath, _data);
                            curves.push(_curve);
                        }
                    }
                }
            },
            createCurves: function createCurves(state, root) {
                var curveData = this.curveData;
                var childrenCurveDatas = curveData.paths;
                var curves = [];
                this.createTargetCurves(root, curveData, curves);
                for (var namePath in childrenCurveDatas) {
                    var target = cc.find(namePath, root);
                    if (!target) {
                        continue;
                    }
                    var childCurveDatas = childrenCurveDatas[namePath];
                    this.createTargetCurves(target, childCurveDatas, curves);
                }
                return curves;
            }
        });
        cc.AnimationClip = module.exports = AnimationClip;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuaW1hdGlvbi1jbGlwLmpzIiwiL1VzZXJzL1NoYXJlZC9iaW5nb19mcmVuenkvZW5naW5lL2NvY29zMmQvYW5pbWF0aW9uL2FuaW1hdGlvbi1jbGlwLmpzIl0sIm5hbWVzIjpbIldyYXBNb2RlIiwicmVxdWlyZSIsIkR5bmFtaWNBbmltQ3VydmUiLCJxdWlja0ZpbmRJbmRleCIsInNhbXBsZU1vdGlvblBhdGhzIiwiYmluYXJ5U2VhcmNoIiwiYmluYXJ5U2VhcmNoRXBzaWxvbiIsIkFuaW1hdGlvbkNsaXAiLCJjYyIsIkNsYXNzIiwibmFtZSIsImV4dGVuZHMiLCJBc3NldCIsInByb3BlcnRpZXMiLCJfZHVyYXRpb24iLCJkZWZhdWx0IiwidHlwZSIsIkZsb2F0IiwiZHVyYXRpb24iLCJnZXQiLCJzYW1wbGUiLCJzcGVlZCIsIndyYXBNb2RlIiwiTm9ybWFsIiwiY3VydmVEYXRhIiwidmlzaWJsZSIsImV2ZW50cyIsInN0YXRpY3MiLCJjcmVhdGVXaXRoU3ByaXRlRnJhbWVzIiwic3ByaXRlRnJhbWVzIiwiQXJyYXkiLCJpc0FycmF5IiwiZXJyb3JJRCIsImNsaXAiLCJsZW5ndGgiLCJmcmFtZXMiLCJzdGVwIiwiaSIsImwiLCJmcmFtZSIsInZhbHVlIiwiY29tcHMiLCJvbkxvYWQiLCJOdW1iZXIiLCJwYXJzZUZsb2F0IiwicGFyc2VJbnQiLCJmcmFtZVJhdGUiLCJjcmVhdGVQcm9wQ3VydmUiLCJ0YXJnZXQiLCJwcm9wUGF0aCIsImtleWZyYW1lcyIsIm1vdGlvblBhdGhzIiwiaXNNb3Rpb25QYXRoUHJvcCIsIk5vZGUiLCJjdXJ2ZSIsInByb3AiLCJrZXlmcmFtZSIsInJhdGlvIiwicmF0aW9zIiwicHVzaCIsIm1vdGlvblBhdGgiLCJjdXJ2ZVZhbHVlIiwidmFsdWVzIiwiY3VydmVUeXBlcyIsInR5cGVzIiwiTGluZWFyIiwiQmV6aWVyIiwiY3VyclJhdGlvRGlmIiwibGFzdFJhdGlvRGlmIiwiY2FuT3B0aW1pemUiLCJFUFNJTE9OIiwiTWF0aCIsImFicyIsIl9maW5kRnJhbWVJbmRleCIsImZpcnN0VmFsdWUiLCJ1bmRlZmluZWQiLCJfbGVycCIsInByb3RvdHlwZSIsIl9sZXJwTnVtYmVyIiwiUXVhdCIsIl9sZXJwUXVhdCIsIlZlYzIiLCJWZWMzIiwiX2xlcnBWZWN0b3IiLCJsZXJwIiwiX2xlcnBPYmplY3QiLCJjcmVhdGVUYXJnZXRDdXJ2ZXMiLCJjdXJ2ZXMiLCJwcm9wc0RhdGEiLCJwcm9wcyIsImNvbXBzRGF0YSIsImRhdGEiLCJjb21wTmFtZSIsImNvbXAiLCJnZXRDb21wb25lbnQiLCJjb21wRGF0YSIsImNyZWF0ZUN1cnZlcyIsInN0YXRlIiwicm9vdCIsImNoaWxkcmVuQ3VydmVEYXRhcyIsInBhdGhzIiwibmFtZVBhdGgiLCJmaW5kIiwiY2hpbGRDdXJ2ZURhdGFzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjtJQUFBLElBQUEsT0FBQSxHQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUEsSUFBQSxPQUFBLE9BQUEsS0FBQSxXQUFBOzs7Ozs7Ozs7Ozs7O1FBeUJBLElBQU1BLFFBQUFBLEdBQVdDLE9BQUFBLENBQVEsU0FBUkEsRUFBbUJELFFBQXBDO3VCQUM2Q0MsT0FBQUEsQ0FBUSxvQkFBUkEsR0FBckNDLGdCQUFBQSxZQUFBQSxrQkFBa0JDLGNBQUFBLFlBQUFBO1FBQzFCLElBQU1DLGlCQUFBQSxHQUFvQkgsT0FBQUEsQ0FBUSxzQkFBUkEsRUFBZ0NHLGlCQUExRDtRQUNBLElBQU1DLFlBQUFBLEdBQWVKLE9BQUFBLENBQVEsNkJBQVJBLEVBQXVDSyxtQkFBNUQ7UUFRQSxJQUFJQyxhQUFBQSxHQUFnQkMsRUFBQUEsQ0FBR0MsS0FBSEQsQ0FBUztBQUFBLFlBQ3pCRSxJQUFBQSxFQUFNLGtCQURtQjtBQUFBLFlBRXpCQyxPQUFBQSxFQUFTSCxFQUFBQSxDQUFHSSxLQUZhO0FBQUEsWUFJekJDLFVBQUFBLEVBQVk7QUFBQSxnQkFDUkMsU0FBQUEsRUFBVztBQUFBLG9CQUNQQyxPQUFBQSxFQUFTLENBREY7QUFBQSxvQkFFUEMsSUFBQUEsRUFBTVIsRUFBQUEsQ0FBR1MsS0FGRjtBQUFBLGlCQURIO0FBQUEsZ0JBWVJDLFFBQUFBLEVBQVU7QUFBQSxvQkFDTkMsR0FBQUEsRUFBSyxTQUFBLEdBQUEsR0FBWTtBQUFBLHdCQUFFLE9BQU8sS0FBS0wsU0FBWixDQUFGO0FBQUEscUJBRFg7QUFBQSxpQkFaRjtBQUFBLGdCQXNCUk0sTUFBQUEsRUFBUSxFQUNKTCxPQUFBQSxFQUFTLEVBREwsRUF0QkE7QUFBQSxnQkFnQ1JNLEtBQUFBLEVBQU8sRUFDSE4sT0FBQUEsRUFBUyxDQUROLEVBaENDO0FBQUEsZ0JBMENSTyxRQUFBQSxFQUFVLEVBQ05QLE9BQUFBLEVBQVNmLFFBQUFBLENBQVN1QixNQURaLEVBMUNGO0FBQUEsZ0JBcURSQyxTQUFBQSxFQUFXO0FBQUEsb0JBQ1BULE9BQUFBLEVBQVMsRUFERjtBQUFBLG9CQUVQVSxPQUFBQSxFQUFTLEtBRkY7QUFBQSxpQkFyREg7QUFBQSxnQkFrRVJDLE1BQUFBLEVBQVE7QUFBQSxvQkFDSlgsT0FBQUEsRUFBUyxFQURMO0FBQUEsb0JBRUpVLE9BQUFBLEVBQVMsS0FGTDtBQUFBLGlCQWxFQTtBQUFBLGFBSmE7QUFBQSxZQTRFekJFLE9BQUFBLEVBQVM7QUFBQSxnQkFjTEMsc0JBQUFBLEVBQXdCLFNBQUEsc0JBQUEsQ0FBVUMsWUFBVixFQUF3QlQsTUFBeEIsRUFBZ0M7QUFBQSxvQkFDcEQsSUFBSSxDQUFDVSxLQUFBQSxDQUFNQyxPQUFORCxDQUFjRCxZQUFkQyxDQUFMLEVBQWtDO0FBQUEsd0JBQzlCdEIsRUFBQUEsQ0FBR3dCLE9BQUh4QixDQUFXLElBQVhBLEVBRDhCO0FBQUEsd0JBRTlCLE9BQU8sSUFBUCxDQUY4QjtBQUFBLHFCQURrQjtBQUFBLG9CQU1wRCxJQUFJeUIsSUFBQUEsR0FBTyxJQUFJMUIsYUFBSixFQUFYLENBTm9EO0FBQUEsb0JBT3BEMEIsSUFBQUEsQ0FBS2IsTUFBTGEsR0FBY2IsTUFBQUEsSUFBVWEsSUFBQUEsQ0FBS2IsTUFBN0JhLENBUG9EO0FBQUEsb0JBU3BEQSxJQUFBQSxDQUFLbkIsU0FBTG1CLEdBQWlCSixZQUFBQSxDQUFhSyxNQUFiTCxHQUFzQkksSUFBQUEsQ0FBS2IsTUFBNUNhLENBVG9EO0FBQUEsb0JBV3BELElBQUlFLE1BQUFBLEdBQVMsRUFBYixDQVhvRDtBQUFBLG9CQVlwRCxJQUFJQyxJQUFBQSxHQUFPLElBQUlILElBQUFBLENBQUtiLE1BQXBCLENBWm9EO0FBQUEsb0JBY3BELEtBQUssSUFBSWlCLENBQUFBLEdBQUksQ0FBUixFQUFXQyxDQUFBQSxHQUFJVCxZQUFBQSxDQUFhSyxNQUE1QixDQUFMLENBQXlDRyxDQUFBQSxHQUFJQyxDQUE3QyxFQUFnREQsQ0FBQUEsRUFBaEQsRUFBcUQ7QUFBQSx3QkFDakRGLE1BQUFBLENBQU9FLENBQVBGLElBQVk7QUFBQSw0QkFBRUksS0FBQUEsRUFBUUYsQ0FBQUEsR0FBSUQsSUFBZDtBQUFBLDRCQUFxQkksS0FBQUEsRUFBT1gsWUFBQUEsQ0FBYVEsQ0FBYlIsQ0FBNUI7QUFBQSx5QkFBWk0sQ0FEaUQ7QUFBQSxxQkFkRDtBQUFBLG9CQWtCcERGLElBQUFBLENBQUtULFNBQUxTLEdBQWlCLEVBQ2JRLEtBQUFBLEVBQU8sRUFFSCxhQUFhLEVBRVQsZUFBZU4sTUFGTixFQUZWLEVBRE0sRUFBakJGLENBbEJvRDtBQUFBLG9CQTRCcEQsT0FBT0EsSUFBUCxDQTVCb0Q7QUFBQSxpQkFkbkQ7QUFBQSxhQTVFZ0I7QUFBQSxZQTBIekJTLE1BQUFBLEVBMUh5QixTQUFBLE1BQUEsR0EwSGY7QUFBQSxnQkFDTixLQUFLNUIsU0FBTCxHQUFpQjZCLE1BQUFBLENBQU9DLFVBQVBELENBQWtCLEtBQUt6QixRQUF2QnlCLENBQWpCLENBRE07QUFBQSxnQkFFTixLQUFLdEIsS0FBTCxHQUFhc0IsTUFBQUEsQ0FBT0MsVUFBUEQsQ0FBa0IsS0FBS3RCLEtBQXZCc0IsQ0FBYixDQUZNO0FBQUEsZ0JBR04sS0FBS3JCLFFBQUwsR0FBZ0JxQixNQUFBQSxDQUFPRSxRQUFQRixDQUFnQixLQUFLckIsUUFBckJxQixDQUFoQixDQUhNO0FBQUEsZ0JBSU4sS0FBS0csU0FBTCxHQUFpQkgsTUFBQUEsQ0FBT0MsVUFBUEQsQ0FBa0IsS0FBS3ZCLE1BQXZCdUIsQ0FBakIsQ0FKTTtBQUFBLGFBMUhlO0FBQUEsWUFpSXpCSSxlQUFBQSxFQWpJeUIsU0FBQSxlQUFBLENBaUlSQyxNQWpJUSxFQWlJQUMsUUFqSUEsRUFpSVVDLFNBaklWLEVBaUlxQjtBQUFBLGdCQUMxQyxJQUFJQyxXQUFBQSxHQUFjLEVBQWxCLENBRDBDO0FBQUEsZ0JBRTFDLElBQUlDLGdCQUFBQSxHQUFtQkosTUFBQUEsWUFBa0J4QyxFQUFBQSxDQUFHNkMsSUFBckJMLElBQTZCQyxRQUFBQSxLQUFhLFVBQWpFLENBRjBDO0FBQUEsZ0JBSTFDLElBQUlLLEtBQUFBLEdBQVEsSUFBSXBELGdCQUFKLEVBQVosQ0FKMEM7QUFBQSxnQkFPMUNvRCxLQUFBQSxDQUFNTixNQUFOTSxHQUFlTixNQUFmTSxDQVAwQztBQUFBLGdCQVExQ0EsS0FBQUEsQ0FBTUMsSUFBTkQsR0FBYUwsUUFBYkssQ0FSMEM7QUFBQSxnQkFXMUMsS0FBSyxJQUFJakIsQ0FBQUEsR0FBSSxDQUFSLEVBQVdDLENBQUFBLEdBQUlZLFNBQUFBLENBQVVoQixNQUF6QixDQUFMLENBQXNDRyxDQUFBQSxHQUFJQyxDQUExQyxFQUE2Q0QsQ0FBQUEsRUFBN0MsRUFBa0Q7QUFBQSxvQkFDOUMsSUFBSW1CLFFBQUFBLEdBQVdOLFNBQUFBLENBQVViLENBQVZhLENBQWYsQ0FEOEM7QUFBQSxvQkFFOUMsSUFBSU8sS0FBQUEsR0FBUUQsUUFBQUEsQ0FBU2pCLEtBQVRpQixHQUFpQixLQUFLdEMsUUFBbEMsQ0FGOEM7QUFBQSxvQkFHOUNvQyxLQUFBQSxDQUFNSSxNQUFOSixDQUFhSyxJQUFiTCxDQUFrQkcsS0FBbEJILEVBSDhDO0FBQUEsb0JBSzlDLElBQUlGLGdCQUFKLEVBQXNCO0FBQUEsd0JBQ2xCRCxXQUFBQSxDQUFZUSxJQUFaUixDQUFpQkssUUFBQUEsQ0FBU0ksVUFBMUJULEVBRGtCO0FBQUEscUJBTHdCO0FBQUEsb0JBUzlDLElBQUlVLFVBQUFBLEdBQWFMLFFBQUFBLENBQVNoQixLQUExQixDQVQ4QztBQUFBLG9CQVU5Q2MsS0FBQUEsQ0FBTVEsTUFBTlIsQ0FBYUssSUFBYkwsQ0FBa0JPLFVBQWxCUCxFQVY4QztBQUFBLG9CQVk5QyxJQUFJUyxVQUFBQSxHQUFhUCxRQUFBQSxDQUFTRixLQUExQixDQVo4QztBQUFBLG9CQWE5QyxJQUFJUyxVQUFKLEVBQWdCO0FBQUEsd0JBQ1osSUFBSSxPQUFPQSxVQUFQLEtBQXNCLFFBQTFCLEVBQW9DO0FBQUEsNEJBQ2hDVCxLQUFBQSxDQUFNVSxLQUFOVixDQUFZSyxJQUFaTCxDQUFpQlMsVUFBakJULEVBRGdDO0FBQUEsNEJBRWhDLFNBRmdDO0FBQUEseUJBQXBDLE1BSUssSUFBSXhCLEtBQUFBLENBQU1DLE9BQU5ELENBQWNpQyxVQUFkakMsQ0FBSixFQUErQjtBQUFBLDRCQUNoQyxJQUFJaUMsVUFBQUEsQ0FBVyxDQUFYQSxNQUFrQkEsVUFBQUEsQ0FBVyxDQUFYQSxDQUFsQkEsSUFDQUEsVUFBQUEsQ0FBVyxDQUFYQSxNQUFrQkEsVUFBQUEsQ0FBVyxDQUFYQSxDQUR0QixFQUNxQztBQUFBLGdDQUNqQ1QsS0FBQUEsQ0FBTVUsS0FBTlYsQ0FBWUssSUFBWkwsQ0FBaUJwRCxnQkFBQUEsQ0FBaUIrRCxNQUFsQ1gsRUFEaUM7QUFBQSw2QkFEckMsTUFJSztBQUFBLGdDQUNEQSxLQUFBQSxDQUFNVSxLQUFOVixDQUFZSyxJQUFaTCxDQUFpQnBELGdCQUFBQSxDQUFpQmdFLE1BQWpCaEUsQ0FBd0I2RCxVQUF4QjdELENBQWpCb0QsRUFEQztBQUFBLDZCQUwyQjtBQUFBLDRCQVFoQyxTQVJnQztBQUFBLHlCQUx4QjtBQUFBLHFCQWI4QjtBQUFBLG9CQTZCOUNBLEtBQUFBLENBQU1VLEtBQU5WLENBQVlLLElBQVpMLENBQWlCcEQsZ0JBQUFBLENBQWlCK0QsTUFBbENYLEVBN0I4QztBQUFBLGlCQVhSO0FBQUEsZ0JBMkMxQyxJQUFJRixnQkFBSixFQUFzQjtBQUFBLG9CQUNsQmhELGlCQUFBQSxDQUFrQitDLFdBQWxCL0MsRUFBK0JrRCxLQUEvQmxELEVBQXNDLEtBQUtjLFFBQTNDZCxFQUFxRCxLQUFLZ0IsTUFBMURoQixFQUFrRTRDLE1BQWxFNUMsRUFEa0I7QUFBQSxpQkEzQ29CO0FBQUEsZ0JBZ0QxQyxJQUFJc0QsTUFBQUEsR0FBU0osS0FBQUEsQ0FBTUksTUFBbkIsQ0FoRDBDO0FBQUEsZ0JBaUQxQyxJQUFJUyxZQUFBQSxHQUFBQSxLQUFBQSxDQUFKLEVBQWtCQyxZQUFBQSxHQUFBQSxLQUFBQSxDQUFsQixDQWpEMEM7QUFBQSxnQkFrRDFDLElBQUlDLFdBQUFBLEdBQWMsSUFBbEIsQ0FsRDBDO0FBQUEsZ0JBbUQxQyxJQUFJQyxPQUFBQSxHQUFVLFFBQWQsQ0FuRDBDO0FBQUEsZ0JBb0QxQyxLQUFLLElBQUlqQyxFQUFBQSxHQUFJLENBQVIsRUFBV0MsRUFBQUEsR0FBSW9CLE1BQUFBLENBQU94QixNQUF0QixDQUFMLENBQW1DRyxFQUFBQSxHQUFJQyxFQUF2QyxFQUEwQ0QsRUFBQUEsRUFBMUMsRUFBK0M7QUFBQSxvQkFDM0M4QixZQUFBQSxHQUFlVCxNQUFBQSxDQUFPckIsRUFBUHFCLElBQVlBLE1BQUFBLENBQU9yQixFQUFBQSxHQUFFLENBQVRxQixDQUEzQlMsQ0FEMkM7QUFBQSxvQkFFM0MsSUFBSTlCLEVBQUFBLEtBQU0sQ0FBVixFQUFhO0FBQUEsd0JBQ1QrQixZQUFBQSxHQUFlRCxZQUFmQyxDQURTO0FBQUEscUJBQWIsTUFHSyxJQUFJRyxJQUFBQSxDQUFLQyxHQUFMRCxDQUFTSixZQUFBQSxHQUFlQyxZQUF4QkcsSUFBd0NELE9BQTVDLEVBQXFEO0FBQUEsd0JBQ3RERCxXQUFBQSxHQUFjLEtBQWRBLENBRHNEO0FBQUEsd0JBRXRELE1BRnNEO0FBQUEscUJBTGY7QUFBQSxpQkFwREw7QUFBQSxnQkErRDFDZixLQUFBQSxDQUFNbUIsZUFBTm5CLEdBQXdCZSxXQUFBQSxHQUFjbEUsY0FBZGtFLEdBQStCaEUsWUFBdkRpRCxDQS9EMEM7QUFBQSxnQkFrRTFDLElBQUlvQixVQUFBQSxHQUFhcEIsS0FBQUEsQ0FBTVEsTUFBTlIsQ0FBYSxDQUFiQSxDQUFqQixDQWxFMEM7QUFBQSxnQkFtRTFDLElBQUlvQixVQUFBQSxLQUFlQyxTQUFmRCxJQUE0QkEsVUFBQUEsS0FBZSxJQUEzQ0EsSUFBbUQsQ0FBQ3BCLEtBQUFBLENBQU1zQixLQUE5RCxFQUFxRTtBQUFBLG9CQUNqRSxJQUFJLE9BQU9GLFVBQVAsS0FBc0IsUUFBMUIsRUFBb0M7QUFBQSx3QkFDaENwQixLQUFBQSxDQUFNc0IsS0FBTnRCLEdBQWNwRCxnQkFBQUEsQ0FBaUIyRSxTQUFqQjNFLENBQTJCNEUsV0FBekN4QixDQURnQztBQUFBLHFCQUFwQyxNQUdLLElBQUlvQixVQUFBQSxZQUFzQmxFLEVBQUFBLENBQUd1RSxJQUE3QixFQUFtQztBQUFBLHdCQUNwQ3pCLEtBQUFBLENBQU1zQixLQUFOdEIsR0FBY3BELGdCQUFBQSxDQUFpQjJFLFNBQWpCM0UsQ0FBMkI4RSxTQUF6QzFCLENBRG9DO0FBQUEscUJBQW5DLE1BR0EsSUFBSW9CLFVBQUFBLFlBQXNCbEUsRUFBQUEsQ0FBR3lFLElBQXpCUCxJQUFpQ0EsVUFBQUEsWUFBc0JsRSxFQUFBQSxDQUFHMEUsSUFBOUQsRUFBb0U7QUFBQSx3QkFDckU1QixLQUFBQSxDQUFNc0IsS0FBTnRCLEdBQWNwRCxnQkFBQUEsQ0FBaUIyRSxTQUFqQjNFLENBQTJCaUYsV0FBekM3QixDQURxRTtBQUFBLHFCQUFwRSxNQUdBLElBQUlvQixVQUFBQSxDQUFXVSxJQUFmLEVBQXFCO0FBQUEsd0JBQ3RCOUIsS0FBQUEsQ0FBTXNCLEtBQU50QixHQUFjcEQsZ0JBQUFBLENBQWlCMkUsU0FBakIzRSxDQUEyQm1GLFdBQXpDL0IsQ0FEc0I7QUFBQSxxQkFWdUM7QUFBQSxpQkFuRTNCO0FBQUEsZ0JBa0YxQyxPQUFPQSxLQUFQLENBbEYwQztBQUFBLGFBaklyQjtBQUFBLFlBc056QmdDLGtCQUFBQSxFQXROeUIsU0FBQSxrQkFBQSxDQXNOTHRDLE1BdE5LLEVBc05HeEIsU0F0TkgsRUFzTmMrRCxNQXROZCxFQXNOc0I7QUFBQSxnQkFDM0MsSUFBSUMsU0FBQUEsR0FBWWhFLFNBQUFBLENBQVVpRSxLQUExQixDQUQyQztBQUFBLGdCQUUzQyxJQUFJQyxTQUFBQSxHQUFZbEUsU0FBQUEsQ0FBVWlCLEtBQTFCLENBRjJDO0FBQUEsZ0JBSTNDLElBQUkrQyxTQUFKLEVBQWU7QUFBQSxvQkFDWCxTQUFTdkMsUUFBVCxJQUFxQnVDLFNBQXJCLEVBQWdDO0FBQUEsd0JBQzVCLElBQUlHLElBQUFBLEdBQU9ILFNBQUFBLENBQVV2QyxRQUFWdUMsQ0FBWCxDQUQ0QjtBQUFBLHdCQUU1QixJQUFJbEMsS0FBQUEsR0FBUSxLQUFLUCxlQUFMLENBQXFCQyxNQUFyQixFQUE2QkMsUUFBN0IsRUFBdUMwQyxJQUF2QyxDQUFaLENBRjRCO0FBQUEsd0JBSTVCSixNQUFBQSxDQUFPNUIsSUFBUDRCLENBQVlqQyxLQUFaaUMsRUFKNEI7QUFBQSxxQkFEckI7QUFBQSxpQkFKNEI7QUFBQSxnQkFhM0MsSUFBSUcsU0FBSixFQUFlO0FBQUEsb0JBQ1gsU0FBU0UsUUFBVCxJQUFxQkYsU0FBckIsRUFBZ0M7QUFBQSx3QkFDNUIsSUFBSUcsSUFBQUEsR0FBTzdDLE1BQUFBLENBQU84QyxZQUFQOUMsQ0FBb0I0QyxRQUFwQjVDLENBQVgsQ0FENEI7QUFBQSx3QkFHNUIsSUFBSSxDQUFDNkMsSUFBTCxFQUFXO0FBQUEsNEJBQ1AsU0FETztBQUFBLHlCQUhpQjtBQUFBLHdCQU81QixJQUFJRSxRQUFBQSxHQUFXTCxTQUFBQSxDQUFVRSxRQUFWRixDQUFmLENBUDRCO0FBQUEsd0JBUTVCLFNBQVN6QyxTQUFULElBQXFCOEMsUUFBckIsRUFBK0I7QUFBQSw0QkFDM0IsSUFBSUosS0FBQUEsR0FBT0ksUUFBQUEsQ0FBUzlDLFNBQVQ4QyxDQUFYLENBRDJCO0FBQUEsNEJBRTNCLElBQUl6QyxNQUFBQSxHQUFRLEtBQUtQLGVBQUwsQ0FBcUI4QyxJQUFyQixFQUEyQjVDLFNBQTNCLEVBQXFDMEMsS0FBckMsQ0FBWixDQUYyQjtBQUFBLDRCQUkzQkosTUFBQUEsQ0FBTzVCLElBQVA0QixDQUFZakMsTUFBWmlDLEVBSjJCO0FBQUEseUJBUkg7QUFBQSxxQkFEckI7QUFBQSxpQkFiNEI7QUFBQSxhQXROdEI7QUFBQSxZQXNQekJTLFlBQUFBLEVBdFB5QixTQUFBLFlBQUEsQ0FzUFhDLEtBdFBXLEVBc1BKQyxJQXRQSSxFQXNQRTtBQUFBLGdCQUN2QixJQUFJMUUsU0FBQUEsR0FBWSxLQUFLQSxTQUFyQixDQUR1QjtBQUFBLGdCQUV2QixJQUFJMkUsa0JBQUFBLEdBQXFCM0UsU0FBQUEsQ0FBVTRFLEtBQW5DLENBRnVCO0FBQUEsZ0JBR3ZCLElBQUliLE1BQUFBLEdBQVMsRUFBYixDQUh1QjtBQUFBLGdCQUt2QixLQUFLRCxrQkFBTCxDQUF3QlksSUFBeEIsRUFBOEIxRSxTQUE5QixFQUF5QytELE1BQXpDLEVBTHVCO0FBQUEsZ0JBT3ZCLFNBQVNjLFFBQVQsSUFBcUJGLGtCQUFyQixFQUF5QztBQUFBLG9CQUNyQyxJQUFJbkQsTUFBQUEsR0FBU3hDLEVBQUFBLENBQUc4RixJQUFIOUYsQ0FBUTZGLFFBQVI3RixFQUFrQjBGLElBQWxCMUYsQ0FBYixDQURxQztBQUFBLG9CQUdyQyxJQUFJLENBQUN3QyxNQUFMLEVBQWE7QUFBQSx3QkFDVCxTQURTO0FBQUEscUJBSHdCO0FBQUEsb0JBT3JDLElBQUl1RCxlQUFBQSxHQUFrQkosa0JBQUFBLENBQW1CRSxRQUFuQkYsQ0FBdEIsQ0FQcUM7QUFBQSxvQkFRckMsS0FBS2Isa0JBQUwsQ0FBd0J0QyxNQUF4QixFQUFnQ3VELGVBQWhDLEVBQWlEaEIsTUFBakQsRUFScUM7QUFBQSxpQkFQbEI7QUFBQSxnQkFrQnZCLE9BQU9BLE1BQVAsQ0FsQnVCO0FBQUEsYUF0UEY7QUFBQSxTQUFUL0UsQ0FBcEI7UUE0UUFBLEVBQUFBLENBQUdELGFBQUhDLEdBQW1CZ0csTUFBQUEsQ0FBT0MsT0FBUEQsR0FBaUJqRyxhQUFwQ0MiLCJmaWxlIjoiYW5pbWF0aW9uLWNsaXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxuXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xuXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxuIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxuIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXG4gc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXG5cbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5jb25zdCBXcmFwTW9kZSA9IHJlcXVpcmUoJy4vdHlwZXMnKS5XcmFwTW9kZTtcbmNvbnN0IHsgRHluYW1pY0FuaW1DdXJ2ZSwgcXVpY2tGaW5kSW5kZXggfSA9IHJlcXVpcmUoJy4vYW5pbWF0aW9uLWN1cnZlcycpO1xuY29uc3Qgc2FtcGxlTW90aW9uUGF0aHMgPSByZXF1aXJlKCcuL21vdGlvbi1wYXRoLWhlbHBlcicpLnNhbXBsZU1vdGlvblBhdGhzO1xuY29uc3QgYmluYXJ5U2VhcmNoID0gcmVxdWlyZSgnLi4vY29yZS91dGlscy9iaW5hcnktc2VhcmNoJykuYmluYXJ5U2VhcmNoRXBzaWxvbjtcblxuLyoqXG4gKiAhI2VuIENsYXNzIGZvciBhbmltYXRpb24gZGF0YSBoYW5kbGluZy5cbiAqICEjemgg5Yqo55S75Ymq6L6R77yM55So5LqO5a2Y5YKo5Yqo55S75pWw5o2u44CCXG4gKiBAY2xhc3MgQW5pbWF0aW9uQ2xpcFxuICogQGV4dGVuZHMgQXNzZXRcbiAqL1xudmFyIEFuaW1hdGlvbkNsaXAgPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLkFuaW1hdGlvbkNsaXAnLFxuICAgIGV4dGVuZHM6IGNjLkFzc2V0LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICBfZHVyYXRpb246IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IDAsXG4gICAgICAgICAgICB0eXBlOiBjYy5GbG9hdCxcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBEdXJhdGlvbiBvZiB0aGlzIGFuaW1hdGlvbi5cbiAgICAgICAgICogISN6aCDliqjnlLvnmoTmjIHnu63ml7bpl7TjgIJcbiAgICAgICAgICogQHByb3BlcnR5IGR1cmF0aW9uXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICBkdXJhdGlvbjoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kdXJhdGlvbjsgfSxcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBGcmFtZVJhdGUgb2YgdGhpcyBhbmltYXRpb24uXG4gICAgICAgICAqICEjemgg5Yqo55S755qE5bin6YCf546H44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSBzYW1wbGVcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHNhbXBsZToge1xuICAgICAgICAgICAgZGVmYXVsdDogNjAsXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gU3BlZWQgb2YgdGhpcyBhbmltYXRpb24uXG4gICAgICAgICAqICEjemgg5Yqo55S755qE5pKt5pS+6YCf5bqm44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSBzcGVlZFxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgc3BlZWQ6IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IDFcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBXcmFwTW9kZSBvZiB0aGlzIGFuaW1hdGlvbi5cbiAgICAgICAgICogISN6aCDliqjnlLvnmoTlvqrnjq/mqKHlvI/jgIJcbiAgICAgICAgICogQHByb3BlcnR5IHdyYXBNb2RlXG4gICAgICAgICAqIEB0eXBlIHtXcmFwTW9kZX1cbiAgICAgICAgICovXG4gICAgICAgIHdyYXBNb2RlOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBXcmFwTW9kZS5Ob3JtYWxcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBDdXJ2ZSBkYXRhLlxuICAgICAgICAgKiAhI3poIOabsue6v+aVsOaNruOAglxuICAgICAgICAgKiBAcHJvcGVydHkgY3VydmVEYXRhXG4gICAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgICAqIEBleGFtcGxlIHtAbGluayBjb2NvczJkL2NvcmUvYW5pbWF0aW9uLWNsaXAvY3VydmUtZGF0YS5qc31cbiAgICAgICAgICovXG4gICAgICAgIGN1cnZlRGF0YToge1xuICAgICAgICAgICAgZGVmYXVsdDoge30sXG4gICAgICAgICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBFdmVudCBkYXRhLlxuICAgICAgICAgKiAhI3poIOS6i+S7tuaVsOaNruOAglxuICAgICAgICAgKiBAcHJvcGVydHkgZXZlbnRzXG4gICAgICAgICAqIEB0eXBlIHtPYmplY3RbXX1cbiAgICAgICAgICogQGV4YW1wbGUge0BsaW5rIGNvY29zMmQvY29yZS9hbmltYXRpb24tY2xpcC9ldmVudC1kYXRhLmpzfVxuICAgICAgICAgKiBAdHlwZXNjcmlwdCBldmVudHM6IHtmcmFtZTogbnVtYmVyLCBmdW5jOiBzdHJpbmcsIHBhcmFtczogc3RyaW5nW119W11cbiAgICAgICAgICovXG4gICAgICAgIGV2ZW50czoge1xuICAgICAgICAgICAgZGVmYXVsdDogW10sXG4gICAgICAgICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBzdGF0aWNzOiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIENyYXRlIGNsaXAgd2l0aCBhIHNldCBvZiBzcHJpdGUgZnJhbWVzXG4gICAgICAgICAqICEjemgg5L2/55So5LiA57uE5bqP5YiX5bin5Zu+54mH5p2l5Yib5bu65Yqo55S75Ymq6L6RXG4gICAgICAgICAqIEBtZXRob2QgY3JlYXRlV2l0aFNwcml0ZUZyYW1lc1xuICAgICAgICAgKiBAcGFyYW0ge1tTcHJpdGVGcmFtZV19IHNwcml0ZUZyYW1lc1xuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gc2FtcGxlXG4gICAgICAgICAqIEByZXR1cm4ge0FuaW1hdGlvbkNsaXB9XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogdmFyIGNsaXAgPSBjYy5BbmltYXRpb25DbGlwLmNyZWF0ZVdpdGhTcHJpdGVGcmFtZXMoc3ByaXRlRnJhbWVzLCAxMCk7XG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVXaXRoU3ByaXRlRnJhbWVzOiBmdW5jdGlvbiAoc3ByaXRlRnJhbWVzLCBzYW1wbGUpIHtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShzcHJpdGVGcmFtZXMpKSB7XG4gICAgICAgICAgICAgICAgY2MuZXJyb3JJRCgzOTA1KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGNsaXAgPSBuZXcgQW5pbWF0aW9uQ2xpcCgpO1xuICAgICAgICAgICAgY2xpcC5zYW1wbGUgPSBzYW1wbGUgfHwgY2xpcC5zYW1wbGU7XG5cbiAgICAgICAgICAgIGNsaXAuX2R1cmF0aW9uID0gc3ByaXRlRnJhbWVzLmxlbmd0aCAvIGNsaXAuc2FtcGxlO1xuXG4gICAgICAgICAgICB2YXIgZnJhbWVzID0gW107XG4gICAgICAgICAgICB2YXIgc3RlcCA9IDEgLyBjbGlwLnNhbXBsZTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBzcHJpdGVGcmFtZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZnJhbWVzW2ldID0geyBmcmFtZTogKGkgKiBzdGVwKSwgdmFsdWU6IHNwcml0ZUZyYW1lc1tpXSB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjbGlwLmN1cnZlRGF0YSA9IHtcbiAgICAgICAgICAgICAgICBjb21wczoge1xuICAgICAgICAgICAgICAgICAgICAvLyBjb21wb25lbnRcbiAgICAgICAgICAgICAgICAgICAgJ2NjLlNwcml0ZSc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbXBvbmVudCBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAnc3ByaXRlRnJhbWUnOiBmcmFtZXNcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiBjbGlwO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG9uTG9hZCAoKSB7XG4gICAgICAgIHRoaXMuX2R1cmF0aW9uID0gTnVtYmVyLnBhcnNlRmxvYXQodGhpcy5kdXJhdGlvbik7XG4gICAgICAgIHRoaXMuc3BlZWQgPSBOdW1iZXIucGFyc2VGbG9hdCh0aGlzLnNwZWVkKTtcbiAgICAgICAgdGhpcy53cmFwTW9kZSA9IE51bWJlci5wYXJzZUludCh0aGlzLndyYXBNb2RlKTtcbiAgICAgICAgdGhpcy5mcmFtZVJhdGUgPSBOdW1iZXIucGFyc2VGbG9hdCh0aGlzLnNhbXBsZSk7XG4gICAgfSxcblxuICAgIGNyZWF0ZVByb3BDdXJ2ZSAodGFyZ2V0LCBwcm9wUGF0aCwga2V5ZnJhbWVzKSB7XG4gICAgICAgIGxldCBtb3Rpb25QYXRocyA9IFtdO1xuICAgICAgICBsZXQgaXNNb3Rpb25QYXRoUHJvcCA9IHRhcmdldCBpbnN0YW5jZW9mIGNjLk5vZGUgJiYgcHJvcFBhdGggPT09ICdwb3NpdGlvbic7XG5cbiAgICAgICAgbGV0IGN1cnZlID0gbmV3IER5bmFtaWNBbmltQ3VydmUoKTtcblxuICAgICAgICAvLyDnvJPlrZjnm67moIflr7nosaHvvIzmiYDku6UgQ29tcG9uZW50IOW/hemhu+S4gOW8gOWni+mDveWIm+W7uuWlveW5tuS4lOS4jeiDvei/kOihjOaXtuWKqOaAgeabv+aNouKApuKAplxuICAgICAgICBjdXJ2ZS50YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIGN1cnZlLnByb3AgPSBwcm9wUGF0aDtcblxuICAgICAgICAvLyBmb3IgZWFjaCBrZXlmcmFtZXNcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBrZXlmcmFtZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQga2V5ZnJhbWUgPSBrZXlmcmFtZXNbaV07XG4gICAgICAgICAgICBsZXQgcmF0aW8gPSBrZXlmcmFtZS5mcmFtZSAvIHRoaXMuZHVyYXRpb247XG4gICAgICAgICAgICBjdXJ2ZS5yYXRpb3MucHVzaChyYXRpbyk7XG5cbiAgICAgICAgICAgIGlmIChpc01vdGlvblBhdGhQcm9wKSB7XG4gICAgICAgICAgICAgICAgbW90aW9uUGF0aHMucHVzaChrZXlmcmFtZS5tb3Rpb25QYXRoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGN1cnZlVmFsdWUgPSBrZXlmcmFtZS52YWx1ZTtcbiAgICAgICAgICAgIGN1cnZlLnZhbHVlcy5wdXNoKGN1cnZlVmFsdWUpO1xuXG4gICAgICAgICAgICBsZXQgY3VydmVUeXBlcyA9IGtleWZyYW1lLmN1cnZlO1xuICAgICAgICAgICAgaWYgKGN1cnZlVHlwZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGN1cnZlVHlwZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnZlLnR5cGVzLnB1c2goY3VydmVUeXBlcyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGN1cnZlVHlwZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJ2ZVR5cGVzWzBdID09PSBjdXJ2ZVR5cGVzWzFdICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJ2ZVR5cGVzWzJdID09PSBjdXJ2ZVR5cGVzWzNdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJ2ZS50eXBlcy5wdXNoKER5bmFtaWNBbmltQ3VydmUuTGluZWFyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnZlLnR5cGVzLnB1c2goRHluYW1pY0FuaW1DdXJ2ZS5CZXppZXIoY3VydmVUeXBlcykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnZlLnR5cGVzLnB1c2goRHluYW1pY0FuaW1DdXJ2ZS5MaW5lYXIpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoaXNNb3Rpb25QYXRoUHJvcCkge1xuICAgICAgICAgICAgc2FtcGxlTW90aW9uUGF0aHMobW90aW9uUGF0aHMsIGN1cnZlLCB0aGlzLmR1cmF0aW9uLCB0aGlzLnNhbXBsZSwgdGFyZ2V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIGV2ZXJ5IHBpZWNlIG9mIHJhdGlvcyBhcmUgdGhlIHNhbWUsIHdlIGNhbiB1c2UgdGhlIHF1aWNrIGZ1bmN0aW9uIHRvIGZpbmQgZnJhbWUgaW5kZXguXG4gICAgICAgIGxldCByYXRpb3MgPSBjdXJ2ZS5yYXRpb3M7XG4gICAgICAgIGxldCBjdXJyUmF0aW9EaWYsIGxhc3RSYXRpb0RpZjtcbiAgICAgICAgbGV0IGNhbk9wdGltaXplID0gdHJ1ZTtcbiAgICAgICAgbGV0IEVQU0lMT04gPSAxZS02O1xuICAgICAgICBmb3IgKGxldCBpID0gMSwgbCA9IHJhdGlvcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGN1cnJSYXRpb0RpZiA9IHJhdGlvc1tpXSAtIHJhdGlvc1tpLTFdO1xuICAgICAgICAgICAgaWYgKGkgPT09IDEpIHtcbiAgICAgICAgICAgICAgICBsYXN0UmF0aW9EaWYgPSBjdXJyUmF0aW9EaWY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChNYXRoLmFicyhjdXJyUmF0aW9EaWYgLSBsYXN0UmF0aW9EaWYpID4gRVBTSUxPTikge1xuICAgICAgICAgICAgICAgIGNhbk9wdGltaXplID0gZmFsc2U7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY3VydmUuX2ZpbmRGcmFtZUluZGV4ID0gY2FuT3B0aW1pemUgPyBxdWlja0ZpbmRJbmRleCA6IGJpbmFyeVNlYXJjaDtcblxuICAgICAgICAvLyBmaW5kIHRoZSBsZXJwIGZ1bmN0aW9uXG4gICAgICAgIGxldCBmaXJzdFZhbHVlID0gY3VydmUudmFsdWVzWzBdO1xuICAgICAgICBpZiAoZmlyc3RWYWx1ZSAhPT0gdW5kZWZpbmVkICYmIGZpcnN0VmFsdWUgIT09IG51bGwgJiYgIWN1cnZlLl9sZXJwKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGZpcnN0VmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgY3VydmUuX2xlcnAgPSBEeW5hbWljQW5pbUN1cnZlLnByb3RvdHlwZS5fbGVycE51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGZpcnN0VmFsdWUgaW5zdGFuY2VvZiBjYy5RdWF0KSB7XG4gICAgICAgICAgICAgICAgY3VydmUuX2xlcnAgPSBEeW5hbWljQW5pbUN1cnZlLnByb3RvdHlwZS5fbGVycFF1YXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChmaXJzdFZhbHVlIGluc3RhbmNlb2YgY2MuVmVjMiB8fCBmaXJzdFZhbHVlIGluc3RhbmNlb2YgY2MuVmVjMykge1xuICAgICAgICAgICAgICAgIGN1cnZlLl9sZXJwID0gRHluYW1pY0FuaW1DdXJ2ZS5wcm90b3R5cGUuX2xlcnBWZWN0b3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChmaXJzdFZhbHVlLmxlcnApIHtcbiAgICAgICAgICAgICAgICBjdXJ2ZS5fbGVycCA9IER5bmFtaWNBbmltQ3VydmUucHJvdG90eXBlLl9sZXJwT2JqZWN0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGN1cnZlO1xuICAgIH0sXG5cbiAgICBjcmVhdGVUYXJnZXRDdXJ2ZXMgKHRhcmdldCwgY3VydmVEYXRhLCBjdXJ2ZXMpIHtcbiAgICAgICAgbGV0IHByb3BzRGF0YSA9IGN1cnZlRGF0YS5wcm9wcztcbiAgICAgICAgbGV0IGNvbXBzRGF0YSA9IGN1cnZlRGF0YS5jb21wcztcblxuICAgICAgICBpZiAocHJvcHNEYXRhKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBwcm9wUGF0aCBpbiBwcm9wc0RhdGEpIHtcbiAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IHByb3BzRGF0YVtwcm9wUGF0aF07XG4gICAgICAgICAgICAgICAgbGV0IGN1cnZlID0gdGhpcy5jcmVhdGVQcm9wQ3VydmUodGFyZ2V0LCBwcm9wUGF0aCwgZGF0YSk7XG5cbiAgICAgICAgICAgICAgICBjdXJ2ZXMucHVzaChjdXJ2ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29tcHNEYXRhKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBjb21wTmFtZSBpbiBjb21wc0RhdGEpIHtcbiAgICAgICAgICAgICAgICBsZXQgY29tcCA9IHRhcmdldC5nZXRDb21wb25lbnQoY29tcE5hbWUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFjb21wKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBjb21wRGF0YSA9IGNvbXBzRGF0YVtjb21wTmFtZV07XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcHJvcFBhdGggaW4gY29tcERhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGEgPSBjb21wRGF0YVtwcm9wUGF0aF07XG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJ2ZSA9IHRoaXMuY3JlYXRlUHJvcEN1cnZlKGNvbXAsIHByb3BQYXRoLCBkYXRhKTtcblxuICAgICAgICAgICAgICAgICAgICBjdXJ2ZXMucHVzaChjdXJ2ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGNyZWF0ZUN1cnZlcyAoc3RhdGUsIHJvb3QpIHtcbiAgICAgICAgbGV0IGN1cnZlRGF0YSA9IHRoaXMuY3VydmVEYXRhO1xuICAgICAgICBsZXQgY2hpbGRyZW5DdXJ2ZURhdGFzID0gY3VydmVEYXRhLnBhdGhzO1xuICAgICAgICBsZXQgY3VydmVzID0gW107XG5cbiAgICAgICAgdGhpcy5jcmVhdGVUYXJnZXRDdXJ2ZXMocm9vdCwgY3VydmVEYXRhLCBjdXJ2ZXMpO1xuXG4gICAgICAgIGZvciAobGV0IG5hbWVQYXRoIGluIGNoaWxkcmVuQ3VydmVEYXRhcykge1xuICAgICAgICAgICAgbGV0IHRhcmdldCA9IGNjLmZpbmQobmFtZVBhdGgsIHJvb3QpO1xuXG4gICAgICAgICAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgY2hpbGRDdXJ2ZURhdGFzID0gY2hpbGRyZW5DdXJ2ZURhdGFzW25hbWVQYXRoXTtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlVGFyZ2V0Q3VydmVzKHRhcmdldCwgY2hpbGRDdXJ2ZURhdGFzLCBjdXJ2ZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGN1cnZlcztcbiAgICB9XG59KTtcblxuY2MuQW5pbWF0aW9uQ2xpcCA9IG1vZHVsZS5leHBvcnRzID0gQW5pbWF0aW9uQ2xpcDtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcbiBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxuXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxudmFyIFdyYXBNb2RlID0gcmVxdWlyZSgnLi90eXBlcycpLldyYXBNb2RlO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL2FuaW1hdGlvbi1jdXJ2ZXMnKSxcbiAgICBEeW5hbWljQW5pbUN1cnZlID0gX3JlcXVpcmUuRHluYW1pY0FuaW1DdXJ2ZSxcbiAgICBxdWlja0ZpbmRJbmRleCA9IF9yZXF1aXJlLnF1aWNrRmluZEluZGV4O1xuXG52YXIgc2FtcGxlTW90aW9uUGF0aHMgPSByZXF1aXJlKCcuL21vdGlvbi1wYXRoLWhlbHBlcicpLnNhbXBsZU1vdGlvblBhdGhzO1xudmFyIGJpbmFyeVNlYXJjaCA9IHJlcXVpcmUoJy4uL2NvcmUvdXRpbHMvYmluYXJ5LXNlYXJjaCcpLmJpbmFyeVNlYXJjaEVwc2lsb247XG5cbi8qKlxuICogISNlbiBDbGFzcyBmb3IgYW5pbWF0aW9uIGRhdGEgaGFuZGxpbmcuXG4gKiAhI3poIOWKqOeUu+WJqui+ke+8jOeUqOS6juWtmOWCqOWKqOeUu+aVsOaNruOAglxuICogQGNsYXNzIEFuaW1hdGlvbkNsaXBcbiAqIEBleHRlbmRzIEFzc2V0XG4gKi9cbnZhciBBbmltYXRpb25DbGlwID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5BbmltYXRpb25DbGlwJyxcbiAgICBleHRlbmRzOiBjYy5Bc3NldCxcblxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgX2R1cmF0aW9uOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiAwLFxuICAgICAgICAgICAgdHlwZTogY2MuRmxvYXRcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBEdXJhdGlvbiBvZiB0aGlzIGFuaW1hdGlvbi5cbiAgICAgICAgICogISN6aCDliqjnlLvnmoTmjIHnu63ml7bpl7TjgIJcbiAgICAgICAgICogQHByb3BlcnR5IGR1cmF0aW9uXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICBkdXJhdGlvbjoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2R1cmF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIEZyYW1lUmF0ZSBvZiB0aGlzIGFuaW1hdGlvbi5cbiAgICAgICAgICogISN6aCDliqjnlLvnmoTluKfpgJ/njofjgIJcbiAgICAgICAgICogQHByb3BlcnR5IHNhbXBsZVxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgc2FtcGxlOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiA2MFxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIFNwZWVkIG9mIHRoaXMgYW5pbWF0aW9uLlxuICAgICAgICAgKiAhI3poIOWKqOeUu+eahOaSreaUvumAn+W6puOAglxuICAgICAgICAgKiBAcHJvcGVydHkgc3BlZWRcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHNwZWVkOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiAxXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gV3JhcE1vZGUgb2YgdGhpcyBhbmltYXRpb24uXG4gICAgICAgICAqICEjemgg5Yqo55S755qE5b6q546v5qih5byP44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSB3cmFwTW9kZVxuICAgICAgICAgKiBAdHlwZSB7V3JhcE1vZGV9XG4gICAgICAgICAqL1xuICAgICAgICB3cmFwTW9kZToge1xuICAgICAgICAgICAgZGVmYXVsdDogV3JhcE1vZGUuTm9ybWFsXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gQ3VydmUgZGF0YS5cbiAgICAgICAgICogISN6aCDmm7Lnur/mlbDmja7jgIJcbiAgICAgICAgICogQHByb3BlcnR5IGN1cnZlRGF0YVxuICAgICAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAgICAgKiBAZXhhbXBsZSB7QGxpbmsgY29jb3MyZC9jb3JlL2FuaW1hdGlvbi1jbGlwL2N1cnZlLWRhdGEuanN9XG4gICAgICAgICAqL1xuICAgICAgICBjdXJ2ZURhdGE6IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IHt9LFxuICAgICAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBFdmVudCBkYXRhLlxuICAgICAgICAgKiAhI3poIOS6i+S7tuaVsOaNruOAglxuICAgICAgICAgKiBAcHJvcGVydHkgZXZlbnRzXG4gICAgICAgICAqIEB0eXBlIHtPYmplY3RbXX1cbiAgICAgICAgICogQGV4YW1wbGUge0BsaW5rIGNvY29zMmQvY29yZS9hbmltYXRpb24tY2xpcC9ldmVudC1kYXRhLmpzfVxuICAgICAgICAgKiBAdHlwZXNjcmlwdCBldmVudHM6IHtmcmFtZTogbnVtYmVyLCBmdW5jOiBzdHJpbmcsIHBhcmFtczogc3RyaW5nW119W11cbiAgICAgICAgICovXG4gICAgICAgIGV2ZW50czoge1xuICAgICAgICAgICAgZGVmYXVsdDogW10sXG4gICAgICAgICAgICB2aXNpYmxlOiBmYWxzZVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHN0YXRpY3M6IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gQ3JhdGUgY2xpcCB3aXRoIGEgc2V0IG9mIHNwcml0ZSBmcmFtZXNcbiAgICAgICAgICogISN6aCDkvb/nlKjkuIDnu4Tluo/liJfluKflm77niYfmnaXliJvlu7rliqjnlLvliarovpFcbiAgICAgICAgICogQG1ldGhvZCBjcmVhdGVXaXRoU3ByaXRlRnJhbWVzXG4gICAgICAgICAqIEBwYXJhbSB7W1Nwcml0ZUZyYW1lXX0gc3ByaXRlRnJhbWVzXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzYW1wbGVcbiAgICAgICAgICogQHJldHVybiB7QW5pbWF0aW9uQ2xpcH1cbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiB2YXIgY2xpcCA9IGNjLkFuaW1hdGlvbkNsaXAuY3JlYXRlV2l0aFNwcml0ZUZyYW1lcyhzcHJpdGVGcmFtZXMsIDEwKTtcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZVdpdGhTcHJpdGVGcmFtZXM6IGZ1bmN0aW9uIGNyZWF0ZVdpdGhTcHJpdGVGcmFtZXMoc3ByaXRlRnJhbWVzLCBzYW1wbGUpIHtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShzcHJpdGVGcmFtZXMpKSB7XG4gICAgICAgICAgICAgICAgY2MuZXJyb3JJRCgzOTA1KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGNsaXAgPSBuZXcgQW5pbWF0aW9uQ2xpcCgpO1xuICAgICAgICAgICAgY2xpcC5zYW1wbGUgPSBzYW1wbGUgfHwgY2xpcC5zYW1wbGU7XG5cbiAgICAgICAgICAgIGNsaXAuX2R1cmF0aW9uID0gc3ByaXRlRnJhbWVzLmxlbmd0aCAvIGNsaXAuc2FtcGxlO1xuXG4gICAgICAgICAgICB2YXIgZnJhbWVzID0gW107XG4gICAgICAgICAgICB2YXIgc3RlcCA9IDEgLyBjbGlwLnNhbXBsZTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBzcHJpdGVGcmFtZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZnJhbWVzW2ldID0geyBmcmFtZTogaSAqIHN0ZXAsIHZhbHVlOiBzcHJpdGVGcmFtZXNbaV0gfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2xpcC5jdXJ2ZURhdGEgPSB7XG4gICAgICAgICAgICAgICAgY29tcHM6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29tcG9uZW50XG4gICAgICAgICAgICAgICAgICAgICdjYy5TcHJpdGUnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb21wb25lbnQgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3Nwcml0ZUZyYW1lJzogZnJhbWVzXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gY2xpcDtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBvbkxvYWQ6IGZ1bmN0aW9uIG9uTG9hZCgpIHtcbiAgICAgICAgdGhpcy5fZHVyYXRpb24gPSBOdW1iZXIucGFyc2VGbG9hdCh0aGlzLmR1cmF0aW9uKTtcbiAgICAgICAgdGhpcy5zcGVlZCA9IE51bWJlci5wYXJzZUZsb2F0KHRoaXMuc3BlZWQpO1xuICAgICAgICB0aGlzLndyYXBNb2RlID0gTnVtYmVyLnBhcnNlSW50KHRoaXMud3JhcE1vZGUpO1xuICAgICAgICB0aGlzLmZyYW1lUmF0ZSA9IE51bWJlci5wYXJzZUZsb2F0KHRoaXMuc2FtcGxlKTtcbiAgICB9LFxuICAgIGNyZWF0ZVByb3BDdXJ2ZTogZnVuY3Rpb24gY3JlYXRlUHJvcEN1cnZlKHRhcmdldCwgcHJvcFBhdGgsIGtleWZyYW1lcykge1xuICAgICAgICB2YXIgbW90aW9uUGF0aHMgPSBbXTtcbiAgICAgICAgdmFyIGlzTW90aW9uUGF0aFByb3AgPSB0YXJnZXQgaW5zdGFuY2VvZiBjYy5Ob2RlICYmIHByb3BQYXRoID09PSAncG9zaXRpb24nO1xuXG4gICAgICAgIHZhciBjdXJ2ZSA9IG5ldyBEeW5hbWljQW5pbUN1cnZlKCk7XG5cbiAgICAgICAgLy8g57yT5a2Y55uu5qCH5a+56LGh77yM5omA5LulIENvbXBvbmVudCDlv4XpobvkuIDlvIDlp4vpg73liJvlu7rlpb3lubbkuJTkuI3og73ov5DooYzml7bliqjmgIHmm7/mjaLigKbigKZcbiAgICAgICAgY3VydmUudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICBjdXJ2ZS5wcm9wID0gcHJvcFBhdGg7XG5cbiAgICAgICAgLy8gZm9yIGVhY2gga2V5ZnJhbWVzXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0ga2V5ZnJhbWVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdmFyIGtleWZyYW1lID0ga2V5ZnJhbWVzW2ldO1xuICAgICAgICAgICAgdmFyIHJhdGlvID0ga2V5ZnJhbWUuZnJhbWUgLyB0aGlzLmR1cmF0aW9uO1xuICAgICAgICAgICAgY3VydmUucmF0aW9zLnB1c2gocmF0aW8pO1xuXG4gICAgICAgICAgICBpZiAoaXNNb3Rpb25QYXRoUHJvcCkge1xuICAgICAgICAgICAgICAgIG1vdGlvblBhdGhzLnB1c2goa2V5ZnJhbWUubW90aW9uUGF0aCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBjdXJ2ZVZhbHVlID0ga2V5ZnJhbWUudmFsdWU7XG4gICAgICAgICAgICBjdXJ2ZS52YWx1ZXMucHVzaChjdXJ2ZVZhbHVlKTtcblxuICAgICAgICAgICAgdmFyIGN1cnZlVHlwZXMgPSBrZXlmcmFtZS5jdXJ2ZTtcbiAgICAgICAgICAgIGlmIChjdXJ2ZVR5cGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXJ2ZVR5cGVzID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBjdXJ2ZS50eXBlcy5wdXNoKGN1cnZlVHlwZXMpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoY3VydmVUeXBlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnZlVHlwZXNbMF0gPT09IGN1cnZlVHlwZXNbMV0gJiYgY3VydmVUeXBlc1syXSA9PT0gY3VydmVUeXBlc1szXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VydmUudHlwZXMucHVzaChEeW5hbWljQW5pbUN1cnZlLkxpbmVhcik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJ2ZS50eXBlcy5wdXNoKER5bmFtaWNBbmltQ3VydmUuQmV6aWVyKGN1cnZlVHlwZXMpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJ2ZS50eXBlcy5wdXNoKER5bmFtaWNBbmltQ3VydmUuTGluZWFyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc01vdGlvblBhdGhQcm9wKSB7XG4gICAgICAgICAgICBzYW1wbGVNb3Rpb25QYXRocyhtb3Rpb25QYXRocywgY3VydmUsIHRoaXMuZHVyYXRpb24sIHRoaXMuc2FtcGxlLCB0YXJnZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgZXZlcnkgcGllY2Ugb2YgcmF0aW9zIGFyZSB0aGUgc2FtZSwgd2UgY2FuIHVzZSB0aGUgcXVpY2sgZnVuY3Rpb24gdG8gZmluZCBmcmFtZSBpbmRleC5cbiAgICAgICAgdmFyIHJhdGlvcyA9IGN1cnZlLnJhdGlvcztcbiAgICAgICAgdmFyIGN1cnJSYXRpb0RpZiA9IHZvaWQgMCxcbiAgICAgICAgICAgIGxhc3RSYXRpb0RpZiA9IHZvaWQgMDtcbiAgICAgICAgdmFyIGNhbk9wdGltaXplID0gdHJ1ZTtcbiAgICAgICAgdmFyIEVQU0lMT04gPSAxZS02O1xuICAgICAgICBmb3IgKHZhciBfaSA9IDEsIF9sID0gcmF0aW9zLmxlbmd0aDsgX2kgPCBfbDsgX2krKykge1xuICAgICAgICAgICAgY3VyclJhdGlvRGlmID0gcmF0aW9zW19pXSAtIHJhdGlvc1tfaSAtIDFdO1xuICAgICAgICAgICAgaWYgKF9pID09PSAxKSB7XG4gICAgICAgICAgICAgICAgbGFzdFJhdGlvRGlmID0gY3VyclJhdGlvRGlmO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChNYXRoLmFicyhjdXJyUmF0aW9EaWYgLSBsYXN0UmF0aW9EaWYpID4gRVBTSUxPTikge1xuICAgICAgICAgICAgICAgIGNhbk9wdGltaXplID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjdXJ2ZS5fZmluZEZyYW1lSW5kZXggPSBjYW5PcHRpbWl6ZSA/IHF1aWNrRmluZEluZGV4IDogYmluYXJ5U2VhcmNoO1xuXG4gICAgICAgIC8vIGZpbmQgdGhlIGxlcnAgZnVuY3Rpb25cbiAgICAgICAgdmFyIGZpcnN0VmFsdWUgPSBjdXJ2ZS52YWx1ZXNbMF07XG4gICAgICAgIGlmIChmaXJzdFZhbHVlICE9PSB1bmRlZmluZWQgJiYgZmlyc3RWYWx1ZSAhPT0gbnVsbCAmJiAhY3VydmUuX2xlcnApIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZmlyc3RWYWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICBjdXJ2ZS5fbGVycCA9IER5bmFtaWNBbmltQ3VydmUucHJvdG90eXBlLl9sZXJwTnVtYmVyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmaXJzdFZhbHVlIGluc3RhbmNlb2YgY2MuUXVhdCkge1xuICAgICAgICAgICAgICAgIGN1cnZlLl9sZXJwID0gRHluYW1pY0FuaW1DdXJ2ZS5wcm90b3R5cGUuX2xlcnBRdWF0O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmaXJzdFZhbHVlIGluc3RhbmNlb2YgY2MuVmVjMiB8fCBmaXJzdFZhbHVlIGluc3RhbmNlb2YgY2MuVmVjMykge1xuICAgICAgICAgICAgICAgIGN1cnZlLl9sZXJwID0gRHluYW1pY0FuaW1DdXJ2ZS5wcm90b3R5cGUuX2xlcnBWZWN0b3I7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZpcnN0VmFsdWUubGVycCkge1xuICAgICAgICAgICAgICAgIGN1cnZlLl9sZXJwID0gRHluYW1pY0FuaW1DdXJ2ZS5wcm90b3R5cGUuX2xlcnBPYmplY3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY3VydmU7XG4gICAgfSxcbiAgICBjcmVhdGVUYXJnZXRDdXJ2ZXM6IGZ1bmN0aW9uIGNyZWF0ZVRhcmdldEN1cnZlcyh0YXJnZXQsIGN1cnZlRGF0YSwgY3VydmVzKSB7XG4gICAgICAgIHZhciBwcm9wc0RhdGEgPSBjdXJ2ZURhdGEucHJvcHM7XG4gICAgICAgIHZhciBjb21wc0RhdGEgPSBjdXJ2ZURhdGEuY29tcHM7XG5cbiAgICAgICAgaWYgKHByb3BzRGF0YSkge1xuICAgICAgICAgICAgZm9yICh2YXIgcHJvcFBhdGggaW4gcHJvcHNEYXRhKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBwcm9wc0RhdGFbcHJvcFBhdGhdO1xuICAgICAgICAgICAgICAgIHZhciBjdXJ2ZSA9IHRoaXMuY3JlYXRlUHJvcEN1cnZlKHRhcmdldCwgcHJvcFBhdGgsIGRhdGEpO1xuXG4gICAgICAgICAgICAgICAgY3VydmVzLnB1c2goY3VydmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbXBzRGF0YSkge1xuICAgICAgICAgICAgZm9yICh2YXIgY29tcE5hbWUgaW4gY29tcHNEYXRhKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbXAgPSB0YXJnZXQuZ2V0Q29tcG9uZW50KGNvbXBOYW1lKTtcblxuICAgICAgICAgICAgICAgIGlmICghY29tcCkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgY29tcERhdGEgPSBjb21wc0RhdGFbY29tcE5hbWVdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9wcm9wUGF0aCBpbiBjb21wRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2RhdGEgPSBjb21wRGF0YVtfcHJvcFBhdGhdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2N1cnZlID0gdGhpcy5jcmVhdGVQcm9wQ3VydmUoY29tcCwgX3Byb3BQYXRoLCBfZGF0YSk7XG5cbiAgICAgICAgICAgICAgICAgICAgY3VydmVzLnB1c2goX2N1cnZlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGNyZWF0ZUN1cnZlczogZnVuY3Rpb24gY3JlYXRlQ3VydmVzKHN0YXRlLCByb290KSB7XG4gICAgICAgIHZhciBjdXJ2ZURhdGEgPSB0aGlzLmN1cnZlRGF0YTtcbiAgICAgICAgdmFyIGNoaWxkcmVuQ3VydmVEYXRhcyA9IGN1cnZlRGF0YS5wYXRocztcbiAgICAgICAgdmFyIGN1cnZlcyA9IFtdO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlVGFyZ2V0Q3VydmVzKHJvb3QsIGN1cnZlRGF0YSwgY3VydmVzKTtcblxuICAgICAgICBmb3IgKHZhciBuYW1lUGF0aCBpbiBjaGlsZHJlbkN1cnZlRGF0YXMpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSBjYy5maW5kKG5hbWVQYXRoLCByb290KTtcblxuICAgICAgICAgICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGNoaWxkQ3VydmVEYXRhcyA9IGNoaWxkcmVuQ3VydmVEYXRhc1tuYW1lUGF0aF07XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVRhcmdldEN1cnZlcyh0YXJnZXQsIGNoaWxkQ3VydmVEYXRhcywgY3VydmVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjdXJ2ZXM7XG4gICAgfVxufSk7XG5cbmNjLkFuaW1hdGlvbkNsaXAgPSBtb2R1bGUuZXhwb3J0cyA9IEFuaW1hdGlvbkNsaXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUZ1YVcxaGRHbHZiaTFqYkdsd0xtcHpJbDBzSW01aGJXVnpJanBiSWxkeVlYQk5iMlJsSWl3aWNtVnhkV2x5WlNJc0lrUjVibUZ0YVdOQmJtbHRRM1Z5ZG1VaUxDSnhkV2xqYTBacGJtUkpibVJsZUNJc0luTmhiWEJzWlUxdmRHbHZibEJoZEdoeklpd2lZbWx1WVhKNVUyVmhjbU5vSWl3aVltbHVZWEo1VTJWaGNtTm9SWEJ6YVd4dmJpSXNJa0Z1YVcxaGRHbHZia05zYVhBaUxDSmpZeUlzSWtOc1lYTnpJaXdpYm1GdFpTSXNJbVY0ZEdWdVpITWlMQ0pCYzNObGRDSXNJbkJ5YjNCbGNuUnBaWE1pTENKZlpIVnlZWFJwYjI0aUxDSmtaV1poZFd4MElpd2lkSGx3WlNJc0lrWnNiMkYwSWl3aVpIVnlZWFJwYjI0aUxDSm5aWFFpTENKellXMXdiR1VpTENKemNHVmxaQ0lzSW5keVlYQk5iMlJsSWl3aVRtOXliV0ZzSWl3aVkzVnlkbVZFWVhSaElpd2lkbWx6YVdKc1pTSXNJbVYyWlc1MGN5SXNJbk4wWVhScFkzTWlMQ0pqY21WaGRHVlhhWFJvVTNCeWFYUmxSbkpoYldWeklpd2ljM0J5YVhSbFJuSmhiV1Z6SWl3aVFYSnlZWGtpTENKcGMwRnljbUY1SWl3aVpYSnliM0pKUkNJc0ltTnNhWEFpTENKc1pXNW5kR2dpTENKbWNtRnRaWE1pTENKemRHVndJaXdpYVNJc0ltd2lMQ0ptY21GdFpTSXNJblpoYkhWbElpd2lZMjl0Y0hNaUxDSnZia3h2WVdRaUxDSk9kVzFpWlhJaUxDSndZWEp6WlVac2IyRjBJaXdpY0dGeWMyVkpiblFpTENKbWNtRnRaVkpoZEdVaUxDSmpjbVZoZEdWUWNtOXdRM1Z5ZG1VaUxDSjBZWEpuWlhRaUxDSndjbTl3VUdGMGFDSXNJbXRsZVdaeVlXMWxjeUlzSW0xdmRHbHZibEJoZEdoeklpd2lhWE5OYjNScGIyNVFZWFJvVUhKdmNDSXNJazV2WkdVaUxDSmpkWEoyWlNJc0luQnliM0FpTENKclpYbG1jbUZ0WlNJc0luSmhkR2x2SWl3aWNtRjBhVzl6SWl3aWNIVnphQ0lzSW0xdmRHbHZibEJoZEdnaUxDSmpkWEoyWlZaaGJIVmxJaXdpZG1Gc2RXVnpJaXdpWTNWeWRtVlVlWEJsY3lJc0luUjVjR1Z6SWl3aVRHbHVaV0Z5SWl3aVFtVjZhV1Z5SWl3aVkzVnljbEpoZEdsdlJHbG1JaXdpYkdGemRGSmhkR2x2UkdsbUlpd2lZMkZ1VDNCMGFXMXBlbVVpTENKRlVGTkpURTlPSWl3aVRXRjBhQ0lzSW1GaWN5SXNJbDltYVc1a1JuSmhiV1ZKYm1SbGVDSXNJbVpwY25OMFZtRnNkV1VpTENKMWJtUmxabWx1WldRaUxDSmZiR1Z5Y0NJc0luQnliM1J2ZEhsd1pTSXNJbDlzWlhKd1RuVnRZbVZ5SWl3aVVYVmhkQ0lzSWw5c1pYSndVWFZoZENJc0lsWmxZeklpTENKV1pXTXpJaXdpWDJ4bGNuQldaV04wYjNJaUxDSnNaWEp3SWl3aVgyeGxjbkJQWW1wbFkzUWlMQ0pqY21WaGRHVlVZWEpuWlhSRGRYSjJaWE1pTENKamRYSjJaWE1pTENKd2NtOXdjMFJoZEdFaUxDSndjbTl3Y3lJc0ltTnZiWEJ6UkdGMFlTSXNJbVJoZEdFaUxDSmpiMjF3VG1GdFpTSXNJbU52YlhBaUxDSm5aWFJEYjIxd2IyNWxiblFpTENKamIyMXdSR0YwWVNJc0ltTnlaV0YwWlVOMWNuWmxjeUlzSW5OMFlYUmxJaXdpY205dmRDSXNJbU5vYVd4a2NtVnVRM1Z5ZG1WRVlYUmhjeUlzSW5CaGRHaHpJaXdpYm1GdFpWQmhkR2dpTENKbWFXNWtJaXdpWTJocGJHUkRkWEoyWlVSaGRHRnpJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUVhsQ1FTeEpRVUZOUVN4WFFVRlhReXhSUVVGUkxGTkJRVklzUlVGQmJVSkVMRkZCUVhCRE96dGxRVU0yUTBNc1VVRkJVU3h2UWtGQlVpeERPMGxCUVhKRFF5eG5RaXhaUVVGQlFTeG5RanRKUVVGclFrTXNZeXhaUVVGQlFTeGpPenRCUVVNeFFpeEpRVUZOUXl4dlFrRkJiMEpJTEZGQlFWRXNjMEpCUVZJc1JVRkJaME5ITEdsQ1FVRXhSRHRCUVVOQkxFbEJRVTFETEdWQlFXVktMRkZCUVZFc05rSkJRVklzUlVGQmRVTkxMRzFDUVVFMVJEczdRVUZGUVRzN096czdPMEZCVFVFc1NVRkJTVU1zWjBKQlFXZENReXhIUVVGSFF5eExRVUZJTEVOQlFWTTdRVUZEZWtKRExGVkJRVTBzYTBKQlJHMUNPMEZCUlhwQ1F5eGhRVUZUU0N4SFFVRkhTU3hMUVVaaE96dEJRVWw2UWtNc1owSkJRVms3UVVGRFVrTXNiVUpCUVZjN1FVRkRVRU1zY1VKQlFWTXNRMEZFUmp0QlFVVlFReXhyUWtGQlRWSXNSMEZCUjFNN1FVRkdSaXhUUVVSSU96dEJRVTFTT3pzN096czdRVUZOUVVNc2EwSkJRVlU3UVVGRFRrTXNhVUpCUVVzc1pVRkJXVHRCUVVGRkxIVkNRVUZQTEV0QlFVdE1MRk5CUVZvN1FVRkJkMEk3UVVGRWNrTXNVMEZhUmpzN1FVRm5RbEk3T3pzN096dEJRVTFCVFN4blFrRkJVVHRCUVVOS1RDeHhRa0ZCVXp0QlFVUk1MRk5CZEVKQk96dEJRVEJDVWpzN096czdPMEZCVFVGTkxHVkJRVTg3UVVGRFNFNHNjVUpCUVZNN1FVRkVUaXhUUVdoRFF6czdRVUZ2UTFJN096czdPenRCUVUxQlR5eHJRa0ZCVlR0QlFVTk9VQ3h4UWtGQlUyWXNVMEZCVTNWQ08wRkJSRm9zVTBFeFEwWTdPMEZCT0VOU096czdPenM3TzBGQlQwRkRMRzFDUVVGWE8wRkJRMUJVTEhGQ1FVRlRMRVZCUkVZN1FVRkZVRlVzY1VKQlFWTTdRVUZHUml4VFFYSkVTRHM3UVVFd1JGSTdPenM3T3pzN08wRkJVVUZETEdkQ1FVRlJPMEZCUTBwWUxIRkNRVUZUTEVWQlJFdzdRVUZGU2xVc2NVSkJRVk03UVVGR1REdEJRV3hGUVN4TFFVcGhPenRCUVRSRmVrSkZMR0ZCUVZNN1FVRkRURHM3T3pzN096czdPenM3T3p0QlFXRkJReXhuUTBGQmQwSXNaME5CUVZWRExGbEJRVllzUlVGQmQwSlVMRTFCUVhoQ0xFVkJRV2RETzBGQlEzQkVMR2RDUVVGSkxFTkJRVU5WTEUxQlFVMURMRTlCUVU0c1EwRkJZMFlzV1VGQlpDeERRVUZNTEVWQlFXdERPMEZCUXpsQ2NrSXNiVUpCUVVkM1FpeFBRVUZJTEVOQlFWY3NTVUZCV0R0QlFVTkJMSFZDUVVGUExFbEJRVkE3UVVGRFNEczdRVUZGUkN4blFrRkJTVU1zVDBGQlR5eEpRVUZKTVVJc1lVRkJTaXhGUVVGWU8wRkJRMEV3UWl4cFFrRkJTMklzVFVGQlRDeEhRVUZqUVN4VlFVRlZZU3hMUVVGTFlpeE5RVUUzUWpzN1FVRkZRV0VzYVVKQlFVdHVRaXhUUVVGTUxFZEJRV2xDWlN4aFFVRmhTeXhOUVVGaUxFZEJRWE5DUkN4TFFVRkxZaXhOUVVFMVF6czdRVUZGUVN4blFrRkJTV1VzVTBGQlV5eEZRVUZpTzBGQlEwRXNaMEpCUVVsRExFOUJRVThzU1VGQlNVZ3NTMEZCUzJJc1RVRkJjRUk3TzBGQlJVRXNhVUpCUVVzc1NVRkJTV2xDTEVsQlFVa3NRMEZCVWl4RlFVRlhReXhKUVVGSlZDeGhRVUZoU3l4TlFVRnFReXhGUVVGNVEwY3NTVUZCU1VNc1EwRkJOME1zUlVGQlowUkVMRWRCUVdoRUxFVkJRWEZFTzBGQlEycEVSaXgxUWtGQlQwVXNRMEZCVUN4SlFVRlpMRVZCUVVWRkxFOUJRVkZHTEVsQlFVbEVMRWxCUVdRc1JVRkJjVUpKTEU5QlFVOVlMR0ZCUVdGUkxFTkJRV0lzUTBGQk5VSXNSVUZCV2p0QlFVTklPenRCUVVWRVNpeHBRa0ZCUzFRc1UwRkJUQ3hIUVVGcFFqdEJRVU5pYVVJc2RVSkJRVTg3UVVGRFNEdEJRVU5CTEdsRFFVRmhPMEZCUTFRN1FVRkRRU3gxUTBGQlpVNDdRVUZHVGp0QlFVWldPMEZCUkUwc1lVRkJha0k3TzBGQlZVRXNiVUpCUVU5R0xFbEJRVkE3UVVGRFNEdEJRVE5EU1N4TFFUVkZaMEk3TzBGQk1FaDZRbE1zVlVFeFNIbENMRzlDUVRCSVpqdEJRVU5PTEdGQlFVczFRaXhUUVVGTUxFZEJRV2xDTmtJc1QwRkJUME1zVlVGQlVDeERRVUZyUWl4TFFVRkxNVUlzVVVGQmRrSXNRMEZCYWtJN1FVRkRRU3hoUVVGTFJ5eExRVUZNTEVkQlFXRnpRaXhQUVVGUFF5eFZRVUZRTEVOQlFXdENMRXRCUVV0MlFpeExRVUYyUWl4RFFVRmlPMEZCUTBFc1lVRkJTME1zVVVGQlRDeEhRVUZuUW5GQ0xFOUJRVTlGTEZGQlFWQXNRMEZCWjBJc1MwRkJTM1pDTEZGQlFYSkNMRU5CUVdoQ08wRkJRMEVzWVVGQlMzZENMRk5CUVV3c1IwRkJhVUpJTEU5QlFVOURMRlZCUVZBc1EwRkJhMElzUzBGQlMzaENMRTFCUVhaQ0xFTkJRV3BDTzBGQlEwZ3NTMEV2U0hkQ08wRkJhVWw2UWpKQ0xHMUNRV3BKZVVJc01rSkJhVWxTUXl4TlFXcEpVU3hGUVdsSlFVTXNVVUZxU1VFc1JVRnBTVlZETEZOQmFrbFdMRVZCYVVseFFqdEJRVU14UXl4WlFVRkpReXhqUVVGakxFVkJRV3hDTzBGQlEwRXNXVUZCU1VNc2JVSkJRVzFDU2l4clFrRkJhMEo0UXl4SFFVRkhOa01zU1VGQmNrSXNTVUZCTmtKS0xHRkJRV0VzVlVGQmFrVTdPMEZCUlVFc1dVRkJTVXNzVVVGQlVTeEpRVUZKY0VRc1owSkJRVW9zUlVGQldqczdRVUZGUVR0QlFVTkJiMFFzWTBGQlRVNHNUVUZCVGl4SFFVRmxRU3hOUVVGbU8wRkJRMEZOTEdOQlFVMURMRWxCUVU0c1IwRkJZVTRzVVVGQllqczdRVUZGUVR0QlFVTkJMR0ZCUVVzc1NVRkJTVm9zU1VGQlNTeERRVUZTTEVWQlFWZERMRWxCUVVsWkxGVkJRVlZvUWl4TlFVRTVRaXhGUVVGelEwY3NTVUZCU1VNc1EwRkJNVU1zUlVGQk5rTkVMRWRCUVRkRExFVkJRV3RFTzBGQlF6bERMR2RDUVVGSmJVSXNWMEZCVjA0c1ZVRkJWV0lzUTBGQlZpeERRVUZtTzBGQlEwRXNaMEpCUVVsdlFpeFJRVUZSUkN4VFFVRlRha0lzUzBGQlZDeEhRVUZwUWl4TFFVRkxja0lzVVVGQmJFTTdRVUZEUVc5RExHdENRVUZOU1N4TlFVRk9MRU5CUVdGRExFbEJRV0lzUTBGQmEwSkdMRXRCUVd4Q096dEJRVVZCTEdkQ1FVRkpUQ3huUWtGQlNpeEZRVUZ6UWp0QlFVTnNRa1FzTkVKQlFWbFJMRWxCUVZvc1EwRkJhVUpJTEZOQlFWTkpMRlZCUVRGQ08wRkJRMGc3TzBGQlJVUXNaMEpCUVVsRExHRkJRV0ZNTEZOQlFWTm9RaXhMUVVFeFFqdEJRVU5CWXl4clFrRkJUVkVzVFVGQlRpeERRVUZoU0N4SlFVRmlMRU5CUVd0Q1JTeFZRVUZzUWpzN1FVRkZRU3huUWtGQlNVVXNZVUZCWVZBc1UwRkJVMFlzUzBGQk1VSTdRVUZEUVN4blFrRkJTVk1zVlVGQlNpeEZRVUZuUWp0QlFVTmFMRzlDUVVGSkxFOUJRVTlCTEZWQlFWQXNTMEZCYzBJc1VVRkJNVUlzUlVGQmIwTTdRVUZEYUVOVUxEQkNRVUZOVlN4TFFVRk9MRU5CUVZsTUxFbEJRVm9zUTBGQmFVSkpMRlZCUVdwQ08wRkJRMEU3UVVGRFNDeHBRa0ZJUkN4TlFVbExMRWxCUVVscVF5eE5RVUZOUXl4UFFVRk9MRU5CUVdOblF5eFZRVUZrTEVOQlFVb3NSVUZCSzBJN1FVRkRhRU1zZDBKQlFVbEJMRmRCUVZjc1EwRkJXQ3hOUVVGclFrRXNWMEZCVnl4RFFVRllMRU5CUVd4Q0xFbEJRMEZCTEZkQlFWY3NRMEZCV0N4TlFVRnJRa0VzVjBGQlZ5eERRVUZZTEVOQlJIUkNMRVZCUTNGRE8wRkJRMnBEVkN3NFFrRkJUVlVzUzBGQlRpeERRVUZaVEN4SlFVRmFMRU5CUVdsQ2VrUXNhVUpCUVdsQ0swUXNUVUZCYkVNN1FVRkRTQ3h4UWtGSVJDeE5RVWxMTzBGQlEwUllMRGhDUVVGTlZTeExRVUZPTEVOQlFWbE1MRWxCUVZvc1EwRkJhVUo2UkN4cFFrRkJhVUpuUlN4TlFVRnFRaXhEUVVGM1FrZ3NWVUZCZUVJc1EwRkJha0k3UVVGRFNEdEJRVU5FTzBGQlEwZzdRVUZEU2p0QlFVTkVWQ3hyUWtGQlRWVXNTMEZCVGl4RFFVRlpUQ3hKUVVGYUxFTkJRV2xDZWtRc2FVSkJRV2xDSzBRc1RVRkJiRU03UVVGRFNEczdRVUZGUkN4WlFVRkpZaXhuUWtGQlNpeEZRVUZ6UWp0QlFVTnNRbWhFTERoQ1FVRnJRaXRETEZkQlFXeENMRVZCUVN0Q1J5eExRVUV2UWl4RlFVRnpReXhMUVVGTGNFTXNVVUZCTTBNc1JVRkJjVVFzUzBGQlMwVXNUVUZCTVVRc1JVRkJhMFUwUWl4TlFVRnNSVHRCUVVOSU96dEJRVVZFTzBGQlEwRXNXVUZCU1ZVc1UwRkJVMG9zVFVGQlRVa3NUVUZCYmtJN1FVRkRRU3haUVVGSlV5eHhRa0ZCU2p0QlFVRkJMRmxCUVd0Q1F5eHhRa0ZCYkVJN1FVRkRRU3haUVVGSlF5eGpRVUZqTEVsQlFXeENPMEZCUTBFc1dVRkJTVU1zVlVGQlZTeEpRVUZrTzBGQlEwRXNZVUZCU3l4SlFVRkpha01zUzBGQlNTeERRVUZTTEVWQlFWZERMRXRCUVVsdlFpeFBRVUZQZUVJc1RVRkJNMElzUlVGQmJVTkhMRXRCUVVsRExFVkJRWFpETEVWQlFUQkRSQ3hKUVVFeFF5eEZRVUVyUXp0QlFVTXpRemhDTERKQ1FVRmxWQ3hQUVVGUGNrSXNSVUZCVUN4SlFVRlpjVUlzVDBGQlQzSkNMRXRCUVVVc1EwRkJWQ3hEUVVFelFqdEJRVU5CTEdkQ1FVRkpRU3hQUVVGTkxFTkJRVllzUlVGQllUdEJRVU5VSzBJc0swSkJRV1ZFTEZsQlFXWTdRVUZEU0N4aFFVWkVMRTFCUjBzc1NVRkJTVWtzUzBGQlMwTXNSMEZCVEN4RFFVRlRUQ3hsUVVGbFF5eFpRVUY0UWl4SlFVRjNRMFVzVDBGQk5VTXNSVUZCY1VRN1FVRkRkRVJFTERoQ1FVRmpMRXRCUVdRN1FVRkRRVHRCUVVOSU8wRkJRMG83TzBGQlJVUm1MR05CUVUxdFFpeGxRVUZPTEVkQlFYZENTaXhqUVVGamJFVXNZMEZCWkN4SFFVRXJRa1VzV1VGQmRrUTdPMEZCUlVFN1FVRkRRU3haUVVGSmNVVXNZVUZCWVhCQ0xFMUJRVTFSTEUxQlFVNHNRMEZCWVN4RFFVRmlMRU5CUVdwQ08wRkJRMEVzV1VGQlNWa3NaVUZCWlVNc1UwRkJaaXhKUVVFMFFrUXNaVUZCWlN4SlFVRXpReXhKUVVGdFJDeERRVUZEY0VJc1RVRkJUWE5DTEV0QlFUbEVMRVZCUVhGRk8wRkJRMnBGTEdkQ1FVRkpMRTlCUVU5R0xGVkJRVkFzUzBGQmMwSXNVVUZCTVVJc1JVRkJiME03UVVGRGFFTndRaXh6UWtGQlRYTkNMRXRCUVU0c1IwRkJZekZGTEdsQ1FVRnBRakpGTEZOQlFXcENMRU5CUVRKQ1F5eFhRVUY2UXp0QlFVTklMR0ZCUmtRc1RVRkhTeXhKUVVGSlNpeHpRa0ZCYzBKc1JTeEhRVUZIZFVVc1NVRkJOMElzUlVGQmJVTTdRVUZEY0VONlFpeHpRa0ZCVFhOQ0xFdEJRVTRzUjBGQll6RkZMR2xDUVVGcFFqSkZMRk5CUVdwQ0xFTkJRVEpDUnl4VFFVRjZRenRCUVVOSUxHRkJSa2tzVFVGSFFTeEpRVUZKVGl4elFrRkJjMEpzUlN4SFFVRkhlVVVzU1VGQmVrSXNTVUZCYVVOUUxITkNRVUZ6UW14RkxFZEJRVWN3UlN4SlFVRTVSQ3hGUVVGdlJUdEJRVU55UlRWQ0xITkNRVUZOYzBJc1MwRkJUaXhIUVVGak1VVXNhVUpCUVdsQ01rVXNVMEZCYWtJc1EwRkJNa0pOTEZkQlFYcERPMEZCUTBnc1lVRkdTU3hOUVVkQkxFbEJRVWxVTEZkQlFWZFZMRWxCUVdZc1JVRkJjVUk3UVVGRGRFSTVRaXh6UWtGQlRYTkNMRXRCUVU0c1IwRkJZekZGTEdsQ1FVRnBRakpGTEZOQlFXcENMRU5CUVRKQ1VTeFhRVUY2UXp0QlFVTklPMEZCUTBvN08wRkJSVVFzWlVGQlR5OUNMRXRCUVZBN1FVRkRTQ3hMUVhCT2QwSTdRVUZ6VG5wQ1owTXNjMEpCZEU1NVFpdzRRa0Z6VGt4MFF5eE5RWFJPU3l4RlFYTk9SM2hDTEZOQmRFNUlMRVZCYzA1akswUXNUVUYwVG1Rc1JVRnpUbk5DTzBGQlF6TkRMRmxCUVVsRExGbEJRVmxvUlN4VlFVRlZhVVVzUzBGQk1VSTdRVUZEUVN4WlFVRkpReXhaUVVGWmJFVXNWVUZCVldsQ0xFdEJRVEZDT3p0QlFVVkJMRmxCUVVrclF5eFRRVUZLTEVWQlFXVTdRVUZEV0N4cFFrRkJTeXhKUVVGSmRrTXNVVUZCVkN4SlFVRnhRblZETEZOQlFYSkNMRVZCUVdkRE8wRkJRelZDTEc5Q1FVRkpSeXhQUVVGUFNDeFZRVUZWZGtNc1VVRkJWaXhEUVVGWU8wRkJRMEVzYjBKQlFVbExMRkZCUVZFc1MwRkJTMUFzWlVGQlRDeERRVUZ4UWtNc1RVRkJja0lzUlVGQk5rSkRMRkZCUVRkQ0xFVkJRWFZETUVNc1NVRkJka01zUTBGQldqczdRVUZGUVVvc2RVSkJRVTgxUWl4SlFVRlFMRU5CUVZsTUxFdEJRVm83UVVGRFNEdEJRVU5LT3p0QlFVVkVMRmxCUVVsdlF5eFRRVUZLTEVWQlFXVTdRVUZEV0N4cFFrRkJTeXhKUVVGSlJTeFJRVUZVTEVsQlFYRkNSaXhUUVVGeVFpeEZRVUZuUXp0QlFVTTFRaXh2UWtGQlNVY3NUMEZCVHpkRExFOUJRVTg0UXl4WlFVRlFMRU5CUVc5Q1JpeFJRVUZ3UWl4RFFVRllPenRCUVVWQkxHOUNRVUZKTEVOQlFVTkRMRWxCUVV3c1JVRkJWenRCUVVOUU8wRkJRMGc3TzBGQlJVUXNiMEpCUVVsRkxGZEJRVmRNTEZWQlFWVkZMRkZCUVZZc1EwRkJaanRCUVVOQkxIRkNRVUZMTEVsQlFVa3pReXhUUVVGVUxFbEJRWEZDT0VNc1VVRkJja0lzUlVGQkswSTdRVUZETTBJc2QwSkJRVWxLTEZGQlFVOUpMRk5CUVZNNVF5eFRRVUZVTEVOQlFWZzdRVUZEUVN4M1FrRkJTVXNzVTBGQlVTeExRVUZMVUN4bFFVRk1MRU5CUVhGQ09FTXNTVUZCY2tJc1JVRkJNa0kxUXl4VFFVRXpRaXhGUVVGeFF6QkRMRXRCUVhKRExFTkJRVm83TzBGQlJVRktMREpDUVVGUE5VSXNTVUZCVUN4RFFVRlpUQ3hOUVVGYU8wRkJRMGc3UVVGRFNqdEJRVU5LTzBGQlEwb3NTMEZ3VUhkQ08wRkJjMUI2UWpCRExHZENRWFJRZVVJc2QwSkJjMUJZUXl4TFFYUlFWeXhGUVhOUVNrTXNTVUYwVUVrc1JVRnpVRVU3UVVGRGRrSXNXVUZCU1RGRkxGbEJRVmtzUzBGQlMwRXNVMEZCY2tJN1FVRkRRU3haUVVGSk1rVXNjVUpCUVhGQ00wVXNWVUZCVlRSRkxFdEJRVzVETzBGQlEwRXNXVUZCU1dJc1UwRkJVeXhGUVVGaU96dEJRVVZCTEdGQlFVdEVMR3RDUVVGTUxFTkJRWGRDV1N4SlFVRjRRaXhGUVVFNFFqRkZMRk5CUVRsQ0xFVkJRWGxESzBRc1RVRkJla003TzBGQlJVRXNZVUZCU3l4SlFVRkpZeXhSUVVGVUxFbEJRWEZDUml4clFrRkJja0lzUlVGQmVVTTdRVUZEY2tNc1owSkJRVWx1UkN4VFFVRlRlRU1zUjBGQlJ6aEdMRWxCUVVnc1EwRkJVVVFzVVVGQlVpeEZRVUZyUWtnc1NVRkJiRUlzUTBGQllqczdRVUZGUVN4blFrRkJTU3hEUVVGRGJFUXNUVUZCVEN4RlFVRmhPMEZCUTFRN1FVRkRTRHM3UVVGRlJDeG5Ra0ZCU1hWRUxHdENRVUZyUWtvc2JVSkJRVzFDUlN4UlFVRnVRaXhEUVVGMFFqdEJRVU5CTEdsQ1FVRkxaaXhyUWtGQlRDeERRVUYzUW5SRExFMUJRWGhDTEVWQlFXZERkVVFzWlVGQmFFTXNSVUZCYVVSb1FpeE5RVUZxUkR0QlFVTklPenRCUVVWRUxHVkJRVTlCTEUxQlFWQTdRVUZEU0R0QlFYcFJkMElzUTBGQlZDeERRVUZ3UWpzN1FVRTBVVUV2UlN4SFFVRkhSQ3hoUVVGSUxFZEJRVzFDYVVjc1QwRkJUME1zVDBGQlVDeEhRVUZwUW14SExHRkJRWEJESWl3aVptbHNaU0k2SW1GdWFXMWhkR2x2YmkxamJHbHdMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjYmlCRGIzQjVjbWxuYUhRZ0tHTXBJREl3TVRjdE1qQXhPQ0JZYVdGdFpXNGdXV0ZxYVNCVGIyWjBkMkZ5WlNCRGJ5NHNJRXgwWkM1Y2JseHVJR2gwZEhCek9pOHZkM2QzTG1OdlkyOXpMbU52YlM5Y2JseHVJRkJsY20xcGMzTnBiMjRnYVhNZ2FHVnlaV0o1SUdkeVlXNTBaV1FzSUdaeVpXVWdiMllnWTJoaGNtZGxMQ0IwYnlCaGJua2djR1Z5YzI5dUlHOWlkR0ZwYm1sdVp5QmhJR052Y0hsY2JpQnZaaUIwYUdseklITnZablIzWVhKbElHRnVaQ0JoYzNOdlkybGhkR1ZrSUdWdVoybHVaU0J6YjNWeVkyVWdZMjlrWlNBb2RHaGxJRndpVTI5bWRIZGhjbVZjSWlrc0lHRWdiR2x0YVhSbFpDeGNiaUIzYjNKc1pIZHBaR1VzSUhKdmVXRnNkSGt0Wm5KbFpTd2dibTl1TFdGemMybG5ibUZpYkdVc0lISmxkbTlqWVdKc1pTQmhibVFnYm05dUxXVjRZMngxYzJsMlpTQnNhV05sYm5ObFhHNGdkRzhnZFhObElFTnZZMjl6SUVOeVpXRjBiM0lnYzI5c1pXeDVJSFJ2SUdSbGRtVnNiM0FnWjJGdFpYTWdiMjRnZVc5MWNpQjBZWEpuWlhRZ2NHeGhkR1p2Y20xekxpQlpiM1VnYzJoaGJHeGNiaUJ1YjNRZ2RYTmxJRU52WTI5eklFTnlaV0YwYjNJZ2MyOW1kSGRoY21VZ1ptOXlJR1JsZG1Wc2IzQnBibWNnYjNSb1pYSWdjMjltZEhkaGNtVWdiM0lnZEc5dmJITWdkR2hoZENkelhHNGdkWE5sWkNCbWIzSWdaR1YyWld4dmNHbHVaeUJuWVcxbGN5NGdXVzkxSUdGeVpTQnViM1FnWjNKaGJuUmxaQ0IwYnlCd2RXSnNhWE5vTENCa2FYTjBjbWxpZFhSbExGeHVJSE4xWW14cFkyVnVjMlVzSUdGdVpDOXZjaUJ6Wld4c0lHTnZjR2xsY3lCdlppQkRiMk52Y3lCRGNtVmhkRzl5TGx4dVhHNGdWR2hsSUhOdlpuUjNZWEpsSUc5eUlIUnZiMnh6SUdsdUlIUm9hWE1nVEdsalpXNXpaU0JCWjNKbFpXMWxiblFnWVhKbElHeHBZMlZ1YzJWa0xDQnViM1FnYzI5c1pDNWNiaUJZYVdGdFpXNGdXV0ZxYVNCVGIyWjBkMkZ5WlNCRGJ5NHNJRXgwWkM0Z2NtVnpaWEoyWlhNZ1lXeHNJSEpwWjJoMGN5QnViM1FnWlhod2NtVnpjMng1SUdkeVlXNTBaV1FnZEc4Z2VXOTFMbHh1WEc0Z1ZFaEZJRk5QUmxSWFFWSkZJRWxUSUZCU1QxWkpSRVZFSUZ3aVFWTWdTVk5jSWl3Z1YwbFVTRTlWVkNCWFFWSlNRVTVVV1NCUFJpQkJUbGtnUzBsT1JDd2dSVmhRVWtWVFV5QlBVbHh1SUVsTlVFeEpSVVFzSUVsT1EweFZSRWxPUnlCQ1ZWUWdUazlVSUV4SlRVbFVSVVFnVkU4Z1ZFaEZJRmRCVWxKQlRsUkpSVk1nVDBZZ1RVVlNRMGhCVGxSQlFrbE1TVlJaTEZ4dUlFWkpWRTVGVTFNZ1JrOVNJRUVnVUVGU1ZFbERWVXhCVWlCUVZWSlFUMU5GSUVGT1JDQk9UMDVKVGtaU1NVNUhSVTFGVGxRdUlFbE9JRTVQSUVWV1JVNVVJRk5JUVV4TUlGUklSVnh1SUVGVlZFaFBVbE1nVDFJZ1EwOVFXVkpKUjBoVUlFaFBURVJGVWxNZ1FrVWdURWxCUWt4RklFWlBVaUJCVGxrZ1EweEJTVTBzSUVSQlRVRkhSVk1nVDFJZ1QxUklSVkpjYmlCTVNVRkNTVXhKVkZrc0lGZElSVlJJUlZJZ1NVNGdRVTRnUVVOVVNVOU9JRTlHSUVOUFRsUlNRVU5VTENCVVQxSlVJRTlTSUU5VVNFVlNWMGxUUlN3Z1FWSkpVMGxPUnlCR1VrOU5MRnh1SUU5VlZDQlBSaUJQVWlCSlRpQkRUMDVPUlVOVVNVOU9JRmRKVkVnZ1ZFaEZJRk5QUmxSWFFWSkZJRTlTSUZSSVJTQlZVMFVnVDFJZ1QxUklSVklnUkVWQlRFbE9SMU1nU1U1Y2JpQlVTRVVnVTA5R1ZGZEJVa1V1WEc0Z0tpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaTljYmx4dVkyOXVjM1FnVjNKaGNFMXZaR1VnUFNCeVpYRjFhWEpsS0NjdUwzUjVjR1Z6SnlrdVYzSmhjRTF2WkdVN1hHNWpiMjV6ZENCN0lFUjVibUZ0YVdOQmJtbHRRM1Z5ZG1Vc0lIRjFhV05yUm1sdVpFbHVaR1Y0SUgwZ1BTQnlaWEYxYVhKbEtDY3VMMkZ1YVcxaGRHbHZiaTFqZFhKMlpYTW5LVHRjYm1OdmJuTjBJSE5oYlhCc1pVMXZkR2x2YmxCaGRHaHpJRDBnY21WeGRXbHlaU2duTGk5dGIzUnBiMjR0Y0dGMGFDMW9aV3h3WlhJbktTNXpZVzF3YkdWTmIzUnBiMjVRWVhSb2N6dGNibU52Ym5OMElHSnBibUZ5ZVZObFlYSmphQ0E5SUhKbGNYVnBjbVVvSnk0dUwyTnZjbVV2ZFhScGJITXZZbWx1WVhKNUxYTmxZWEpqYUNjcExtSnBibUZ5ZVZObFlYSmphRVZ3YzJsc2IyNDdYRzVjYmk4cUtseHVJQ29nSVNObGJpQkRiR0Z6Y3lCbWIzSWdZVzVwYldGMGFXOXVJR1JoZEdFZ2FHRnVaR3hwYm1jdVhHNGdLaUFoSTNwb0lPV0txT2VVdStXSnF1aStrZSs4ak9lVXFPUzZqdVd0bU9XQ3FPV0txT2VVdSthVnNPYU5ydU9BZ2x4dUlDb2dRR05zWVhOeklFRnVhVzFoZEdsdmJrTnNhWEJjYmlBcUlFQmxlSFJsYm1SeklFRnpjMlYwWEc0Z0tpOWNiblpoY2lCQmJtbHRZWFJwYjI1RGJHbHdJRDBnWTJNdVEyeGhjM01vZTF4dUlDQWdJRzVoYldVNklDZGpZeTVCYm1sdFlYUnBiMjVEYkdsd0p5eGNiaUFnSUNCbGVIUmxibVJ6T2lCall5NUJjM05sZEN4Y2JseHVJQ0FnSUhCeWIzQmxjblJwWlhNNklIdGNiaUFnSUNBZ0lDQWdYMlIxY21GMGFXOXVPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaV1poZFd4ME9pQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nWTJNdVJteHZZWFFzWEc0Z0lDQWdJQ0FnSUgwc1hHNWNiaUFnSUNBZ0lDQWdMeW9xWEc0Z0lDQWdJQ0FnSUNBcUlDRWpaVzRnUkhWeVlYUnBiMjRnYjJZZ2RHaHBjeUJoYm1sdFlYUnBiMjR1WEc0Z0lDQWdJQ0FnSUNBcUlDRWplbWdnNVlxbzU1Uzc1NXFFNW95QjU3dXQ1cGUyNlplMDQ0Q0NYRzRnSUNBZ0lDQWdJQ0FxSUVCd2NtOXdaWEowZVNCa2RYSmhkR2x2Ymx4dUlDQWdJQ0FnSUNBZ0tpQkFkSGx3WlNCN1RuVnRZbVZ5ZlZ4dUlDQWdJQ0FnSUNBZ0tpOWNiaUFnSUNBZ0lDQWdaSFZ5WVhScGIyNDZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRnS0NrZ2V5QnlaWFIxY200Z2RHaHBjeTVmWkhWeVlYUnBiMjQ3SUgwc1hHNGdJQ0FnSUNBZ0lIMHNYRzVjYmlBZ0lDQWdJQ0FnTHlvcVhHNGdJQ0FnSUNBZ0lDQXFJQ0VqWlc0Z1JuSmhiV1ZTWVhSbElHOW1JSFJvYVhNZ1lXNXBiV0YwYVc5dUxseHVJQ0FnSUNBZ0lDQWdLaUFoSTNwb0lPV0txT2VVdStlYWhPVzRwK21BbitlT2grT0FnbHh1SUNBZ0lDQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2MyRnRjR3hsWEc0Z0lDQWdJQ0FnSUNBcUlFQjBlWEJsSUh0T2RXMWlaWEo5WEc0Z0lDQWdJQ0FnSUNBcUwxeHVJQ0FnSUNBZ0lDQnpZVzF3YkdVNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2SURZd0xGeHVJQ0FnSUNBZ0lDQjlMRnh1WEc0Z0lDQWdJQ0FnSUM4cUtseHVJQ0FnSUNBZ0lDQWdLaUFoSTJWdUlGTndaV1ZrSUc5bUlIUm9hWE1nWVc1cGJXRjBhVzl1TGx4dUlDQWdJQ0FnSUNBZ0tpQWhJM3BvSU9XS3FPZVV1K2VhaE9hU3JlYVV2dW1BbitXNnB1T0FnbHh1SUNBZ0lDQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2MzQmxaV1JjYmlBZ0lDQWdJQ0FnSUNvZ1FIUjVjR1VnZTA1MWJXSmxjbjFjYmlBZ0lDQWdJQ0FnSUNvdlhHNGdJQ0FnSUNBZ0lITndaV1ZrT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWldaaGRXeDBPaUF4WEc0Z0lDQWdJQ0FnSUgwc1hHNWNiaUFnSUNBZ0lDQWdMeW9xWEc0Z0lDQWdJQ0FnSUNBcUlDRWpaVzRnVjNKaGNFMXZaR1VnYjJZZ2RHaHBjeUJoYm1sdFlYUnBiMjR1WEc0Z0lDQWdJQ0FnSUNBcUlDRWplbWdnNVlxbzU1Uzc1NXFFNWI2cTU0NnY1cWloNWJ5UDQ0Q0NYRzRnSUNBZ0lDQWdJQ0FxSUVCd2NtOXdaWEowZVNCM2NtRndUVzlrWlZ4dUlDQWdJQ0FnSUNBZ0tpQkFkSGx3WlNCN1YzSmhjRTF2WkdWOVhHNGdJQ0FnSUNBZ0lDQXFMMXh1SUNBZ0lDQWdJQ0IzY21Gd1RXOWtaVG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REb2dWM0poY0UxdlpHVXVUbTl5YldGc1hHNGdJQ0FnSUNBZ0lIMHNYRzVjYmlBZ0lDQWdJQ0FnTHlvcVhHNGdJQ0FnSUNBZ0lDQXFJQ0VqWlc0Z1EzVnlkbVVnWkdGMFlTNWNiaUFnSUNBZ0lDQWdJQ29nSVNONmFDRG1tN0xudXIvbWxiRG1qYTdqZ0lKY2JpQWdJQ0FnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJR04xY25abFJHRjBZVnh1SUNBZ0lDQWdJQ0FnS2lCQWRIbHdaU0I3VDJKcVpXTjBmVnh1SUNBZ0lDQWdJQ0FnS2lCQVpYaGhiWEJzWlNCN1FHeHBibXNnWTI5amIzTXlaQzlqYjNKbEwyRnVhVzFoZEdsdmJpMWpiR2x3TDJOMWNuWmxMV1JoZEdFdWFuTjlYRzRnSUNBZ0lDQWdJQ0FxTDF4dUlDQWdJQ0FnSUNCamRYSjJaVVJoZEdFNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2SUh0OUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1semFXSnNaVG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJSDBzWEc1Y2JpQWdJQ0FnSUNBZ0x5b3FYRzRnSUNBZ0lDQWdJQ0FxSUNFalpXNGdSWFpsYm5RZ1pHRjBZUzVjYmlBZ0lDQWdJQ0FnSUNvZ0lTTjZhQ0RrdW92a3U3Ym1sYkRtamE3amdJSmNiaUFnSUNBZ0lDQWdJQ29nUUhCeWIzQmxjblI1SUdWMlpXNTBjMXh1SUNBZ0lDQWdJQ0FnS2lCQWRIbHdaU0I3VDJKcVpXTjBXMTE5WEc0Z0lDQWdJQ0FnSUNBcUlFQmxlR0Z0Y0d4bElIdEFiR2x1YXlCamIyTnZjekprTDJOdmNtVXZZVzVwYldGMGFXOXVMV05zYVhBdlpYWmxiblF0WkdGMFlTNXFjMzFjYmlBZ0lDQWdJQ0FnSUNvZ1FIUjVjR1Z6WTNKcGNIUWdaWFpsYm5Sek9pQjdabkpoYldVNklHNTFiV0psY2l3Z1puVnVZem9nYzNSeWFXNW5MQ0J3WVhKaGJYTTZJSE4wY21sdVoxdGRmVnRkWEc0Z0lDQWdJQ0FnSUNBcUwxeHVJQ0FnSUNBZ0lDQmxkbVZ1ZEhNNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2SUZ0ZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1semFXSnNaVG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdjM1JoZEdsamN6b2dlMXh1SUNBZ0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBZ0lDb2dJU05sYmlCRGNtRjBaU0JqYkdsd0lIZHBkR2dnWVNCelpYUWdiMllnYzNCeWFYUmxJR1p5WVcxbGMxeHVJQ0FnSUNBZ0lDQWdLaUFoSTNwb0lPUzl2K2VVcU9TNGdPZTdoT1c2aitXSWwrVzRwK1didnVlSmgrYWRwZVdJbStXN3V1V0txT2VVdStXSnF1aStrVnh1SUNBZ0lDQWdJQ0FnS2lCQWJXVjBhRzlrSUdOeVpXRjBaVmRwZEdoVGNISnBkR1ZHY21GdFpYTmNiaUFnSUNBZ0lDQWdJQ29nUUhCaGNtRnRJSHRiVTNCeWFYUmxSbkpoYldWZGZTQnpjSEpwZEdWR2NtRnRaWE5jYmlBZ0lDQWdJQ0FnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUhOaGJYQnNaVnh1SUNBZ0lDQWdJQ0FnS2lCQWNtVjBkWEp1SUh0QmJtbHRZWFJwYjI1RGJHbHdmVnh1SUNBZ0lDQWdJQ0FnS2lCQWMzUmhkR2xqWEc0Z0lDQWdJQ0FnSUNBcUlFQmxlR0Z0Y0d4bFhHNGdJQ0FnSUNBZ0lDQXFYRzRnSUNBZ0lDQWdJQ0FxSUhaaGNpQmpiR2x3SUQwZ1kyTXVRVzVwYldGMGFXOXVRMnhwY0M1amNtVmhkR1ZYYVhSb1UzQnlhWFJsUm5KaGJXVnpLSE53Y21sMFpVWnlZVzFsY3l3Z01UQXBPMXh1SUNBZ0lDQWdJQ0FnS2x4dUlDQWdJQ0FnSUNBZ0tpOWNiaUFnSUNBZ0lDQWdZM0psWVhSbFYybDBhRk53Y21sMFpVWnlZVzFsY3pvZ1puVnVZM1JwYjI0Z0tITndjbWwwWlVaeVlXMWxjeXdnYzJGdGNHeGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVVGeWNtRjVMbWx6UVhKeVlYa29jM0J5YVhSbFJuSmhiV1Z6S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmpMbVZ5Y205eVNVUW9Nemt3TlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmpiR2x3SUQwZ2JtVjNJRUZ1YVcxaGRHbHZia05zYVhBb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOc2FYQXVjMkZ0Y0d4bElEMGdjMkZ0Y0d4bElIeDhJR05zYVhBdWMyRnRjR3hsTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYkdsd0xsOWtkWEpoZEdsdmJpQTlJSE53Y21sMFpVWnlZVzFsY3k1c1pXNW5kR2dnTHlCamJHbHdMbk5oYlhCc1pUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1p5WVcxbGN5QTlJRnRkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhOMFpYQWdQU0F4SUM4Z1kyeHBjQzV6WVcxd2JHVTdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3TENCc0lEMGdjM0J5YVhSbFJuSmhiV1Z6TG14bGJtZDBhRHNnYVNBOElHdzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnlZVzFsYzF0cFhTQTlJSHNnWm5KaGJXVTZJQ2hwSUNvZ2MzUmxjQ2tzSUhaaGJIVmxPaUJ6Y0hKcGRHVkdjbUZ0WlhOYmFWMGdmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyeHBjQzVqZFhKMlpVUmhkR0VnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXRjSE02SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnWTI5dGNHOXVaVzUwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZGpZeTVUY0hKcGRHVW5PaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCamIyMXdiMjVsYm5RZ2NISnZjR1Z5ZEdsbGMxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0ozTndjbWwwWlVaeVlXMWxKem9nWm5KaGJXVnpYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMnhwY0R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNWNiaUFnSUNCdmJreHZZV1FnS0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5a2RYSmhkR2x2YmlBOUlFNTFiV0psY2k1d1lYSnpaVVpzYjJGMEtIUm9hWE11WkhWeVlYUnBiMjRwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk53WldWa0lEMGdUblZ0WW1WeUxuQmhjbk5sUm14dllYUW9kR2hwY3k1emNHVmxaQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkM0poY0UxdlpHVWdQU0JPZFcxaVpYSXVjR0Z5YzJWSmJuUW9kR2hwY3k1M2NtRndUVzlrWlNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Wm5KaGJXVlNZWFJsSUQwZ1RuVnRZbVZ5TG5CaGNuTmxSbXh2WVhRb2RHaHBjeTV6WVcxd2JHVXBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQmpjbVZoZEdWUWNtOXdRM1Z5ZG1VZ0tIUmhjbWRsZEN3Z2NISnZjRkJoZEdnc0lHdGxlV1p5WVcxbGN5a2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2JXOTBhVzl1VUdGMGFITWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ2JHVjBJR2x6VFc5MGFXOXVVR0YwYUZCeWIzQWdQU0IwWVhKblpYUWdhVzV6ZEdGdVkyVnZaaUJqWXk1T2IyUmxJQ1ltSUhCeWIzQlFZWFJvSUQwOVBTQW5jRzl6YVhScGIyNG5PMXh1WEc0Z0lDQWdJQ0FnSUd4bGRDQmpkWEoyWlNBOUlHNWxkeUJFZVc1aGJXbGpRVzVwYlVOMWNuWmxLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGc1N3lUNWEyWTU1dXU1cUNINWErNTZMR2g3N3lNNW9tQTVMdWxJRU52YlhCdmJtVnVkQ0RsdjRYcG9idmt1SURsdklEbHA0dnBnNzNsaUp2bHU3cmxwYjNsdWJia3VKVGt1STNvZzczb3Y1RG9vWXptbDdibGlxam1nSUhtbTcvbWphTGlnS2JpZ0taY2JpQWdJQ0FnSUNBZ1kzVnlkbVV1ZEdGeVoyVjBJRDBnZEdGeVoyVjBPMXh1SUNBZ0lDQWdJQ0JqZFhKMlpTNXdjbTl3SUQwZ2NISnZjRkJoZEdnN1hHNWNiaUFnSUNBZ0lDQWdMeThnWm05eUlHVmhZMmdnYTJWNVpuSmhiV1Z6WEc0Z0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdMQ0JzSUQwZ2EyVjVabkpoYldWekxteGxibWQwYURzZ2FTQThJR3c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR3RsZVdaeVlXMWxJRDBnYTJWNVpuSmhiV1Z6VzJsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElISmhkR2x2SUQwZ2EyVjVabkpoYldVdVpuSmhiV1VnTHlCMGFHbHpMbVIxY21GMGFXOXVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kzVnlkbVV1Y21GMGFXOXpMbkIxYzJnb2NtRjBhVzhwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FYTk5iM1JwYjI1UVlYUm9VSEp2Y0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMXZkR2x2YmxCaGRHaHpMbkIxYzJnb2EyVjVabkpoYldVdWJXOTBhVzl1VUdGMGFDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmpkWEoyWlZaaGJIVmxJRDBnYTJWNVpuSmhiV1V1ZG1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCamRYSjJaUzUyWVd4MVpYTXVjSFZ6YUNoamRYSjJaVlpoYkhWbEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR04xY25abFZIbHdaWE1nUFNCclpYbG1jbUZ0WlM1amRYSjJaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqZFhKMlpWUjVjR1Z6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQmpkWEoyWlZSNWNHVnpJRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqZFhKMlpTNTBlWEJsY3k1d2RYTm9LR04xY25abFZIbHdaWE1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoamRYSjJaVlI1Y0dWektTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZM1Z5ZG1WVWVYQmxjMXN3WFNBOVBUMGdZM1Z5ZG1WVWVYQmxjMXN4WFNBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kzVnlkbVZVZVhCbGMxc3lYU0E5UFQwZ1kzVnlkbVZVZVhCbGMxc3pYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTNWeWRtVXVkSGx3WlhNdWNIVnphQ2hFZVc1aGJXbGpRVzVwYlVOMWNuWmxMa3hwYm1WaGNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamRYSjJaUzUwZVhCbGN5NXdkWE5vS0VSNWJtRnRhV05CYm1sdFEzVnlkbVV1UW1WNmFXVnlLR04xY25abFZIbHdaWE1wS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpkWEoyWlM1MGVYQmxjeTV3ZFhOb0tFUjVibUZ0YVdOQmJtbHRRM1Z5ZG1VdVRHbHVaV0Z5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdhV1lnS0dselRXOTBhVzl1VUdGMGFGQnliM0FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5oYlhCc1pVMXZkR2x2YmxCaGRHaHpLRzF2ZEdsdmJsQmhkR2h6TENCamRYSjJaU3dnZEdocGN5NWtkWEpoZEdsdmJpd2dkR2hwY3k1ellXMXdiR1VzSUhSaGNtZGxkQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQXZMeUJwWmlCbGRtVnllU0J3YVdWalpTQnZaaUJ5WVhScGIzTWdZWEpsSUhSb1pTQnpZVzFsTENCM1pTQmpZVzRnZFhObElIUm9aU0J4ZFdsamF5Qm1kVzVqZEdsdmJpQjBieUJtYVc1a0lHWnlZVzFsSUdsdVpHVjRMbHh1SUNBZ0lDQWdJQ0JzWlhRZ2NtRjBhVzl6SUQwZ1kzVnlkbVV1Y21GMGFXOXpPMXh1SUNBZ0lDQWdJQ0JzWlhRZ1kzVnljbEpoZEdsdlJHbG1MQ0JzWVhOMFVtRjBhVzlFYVdZN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JqWVc1UGNIUnBiV2w2WlNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUd4bGRDQkZVRk5KVEU5T0lEMGdNV1V0Tmp0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREVzSUd3Z1BTQnlZWFJwYjNNdWJHVnVaM1JvT3lCcElEd2diRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamRYSnlVbUYwYVc5RWFXWWdQU0J5WVhScGIzTmJhVjBnTFNCeVlYUnBiM05iYVMweFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBJRDA5UFNBeEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR0Z6ZEZKaGRHbHZSR2xtSUQwZ1kzVnljbEpoZEdsdlJHbG1PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQnBaaUFvVFdGMGFDNWhZbk1vWTNWeWNsSmhkR2x2UkdsbUlDMGdiR0Z6ZEZKaGRHbHZSR2xtS1NBK0lFVlFVMGxNVDA0cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZVzVQY0hScGJXbDZaU0E5SUdaaGJITmxPeUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHTjFjblpsTGw5bWFXNWtSbkpoYldWSmJtUmxlQ0E5SUdOaGJrOXdkR2x0YVhwbElEOGdjWFZwWTJ0R2FXNWtTVzVrWlhnZ09pQmlhVzVoY25sVFpXRnlZMmc3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdabWx1WkNCMGFHVWdiR1Z5Y0NCbWRXNWpkR2x2Ymx4dUlDQWdJQ0FnSUNCc1pYUWdabWx5YzNSV1lXeDFaU0E5SUdOMWNuWmxMblpoYkhWbGMxc3dYVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHWnBjbk4wVm1Gc2RXVWdJVDA5SUhWdVpHVm1hVzVsWkNBbUppQm1hWEp6ZEZaaGJIVmxJQ0U5UFNCdWRXeHNJQ1ltSUNGamRYSjJaUzVmYkdWeWNDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQm1hWEp6ZEZaaGJIVmxJRDA5UFNBbmJuVnRZbVZ5SnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTjFjblpsTGw5c1pYSndJRDBnUkhsdVlXMXBZMEZ1YVcxRGRYSjJaUzV3Y205MGIzUjVjR1V1WDJ4bGNuQk9kVzFpWlhJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaG1hWEp6ZEZaaGJIVmxJR2x1YzNSaGJtTmxiMllnWTJNdVVYVmhkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOMWNuWmxMbDlzWlhKd0lEMGdSSGx1WVcxcFkwRnVhVzFEZFhKMlpTNXdjbTkwYjNSNWNHVXVYMnhsY25CUmRXRjBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQnBaaUFvWm1seWMzUldZV3gxWlNCcGJuTjBZVzVqWlc5bUlHTmpMbFpsWXpJZ2ZId2dabWx5YzNSV1lXeDFaU0JwYm5OMFlXNWpaVzltSUdOakxsWmxZek1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamRYSjJaUzVmYkdWeWNDQTlJRVI1Ym1GdGFXTkJibWx0UTNWeWRtVXVjSEp2ZEc5MGVYQmxMbDlzWlhKd1ZtVmpkRzl5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb1ptbHljM1JXWVd4MVpTNXNaWEp3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kzVnlkbVV1WDJ4bGNuQWdQU0JFZVc1aGJXbGpRVzVwYlVOMWNuWmxMbkJ5YjNSdmRIbHdaUzVmYkdWeWNFOWlhbVZqZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCamRYSjJaVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdZM0psWVhSbFZHRnlaMlYwUTNWeWRtVnpJQ2gwWVhKblpYUXNJR04xY25abFJHRjBZU3dnWTNWeWRtVnpLU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQndjbTl3YzBSaGRHRWdQU0JqZFhKMlpVUmhkR0V1Y0hKdmNITTdYRzRnSUNBZ0lDQWdJR3hsZENCamIyMXdjMFJoZEdFZ1BTQmpkWEoyWlVSaGRHRXVZMjl0Y0hNN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0hCeWIzQnpSR0YwWVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnY0hKdmNGQmhkR2dnYVc0Z2NISnZjSE5FWVhSaEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdSaGRHRWdQU0J3Y205d2MwUmhkR0ZiY0hKdmNGQmhkR2hkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmpkWEoyWlNBOUlIUm9hWE11WTNKbFlYUmxVSEp2Y0VOMWNuWmxLSFJoY21kbGRDd2djSEp2Y0ZCaGRHZ3NJR1JoZEdFcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZM1Z5ZG1WekxuQjFjMmdvWTNWeWRtVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHTnZiWEJ6UkdGMFlTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ1kyOXRjRTVoYldVZ2FXNGdZMjl0Y0hORVlYUmhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHTnZiWEFnUFNCMFlYSm5aWFF1WjJWMFEyOXRjRzl1Wlc1MEtHTnZiWEJPWVcxbEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFkyOXRjQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1kyOXRjRVJoZEdFZ1BTQmpiMjF3YzBSaGRHRmJZMjl0Y0U1aGJXVmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJSEJ5YjNCUVlYUm9JR2x1SUdOdmJYQkVZWFJoS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCa1lYUmhJRDBnWTI5dGNFUmhkR0ZiY0hKdmNGQmhkR2hkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWTNWeWRtVWdQU0IwYUdsekxtTnlaV0YwWlZCeWIzQkRkWEoyWlNoamIyMXdMQ0J3Y205d1VHRjBhQ3dnWkdGMFlTazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kzVnlkbVZ6TG5CMWMyZ29ZM1Z5ZG1VcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNWNiaUFnSUNCamNtVmhkR1ZEZFhKMlpYTWdLSE4wWVhSbExDQnliMjkwS1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JqZFhKMlpVUmhkR0VnUFNCMGFHbHpMbU4xY25abFJHRjBZVHRjYmlBZ0lDQWdJQ0FnYkdWMElHTm9hV3hrY21WdVEzVnlkbVZFWVhSaGN5QTlJR04xY25abFJHRjBZUzV3WVhSb2N6dGNiaUFnSUNBZ0lDQWdiR1YwSUdOMWNuWmxjeUE5SUZ0ZE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVkzSmxZWFJsVkdGeVoyVjBRM1Z5ZG1WektISnZiM1FzSUdOMWNuWmxSR0YwWVN3Z1kzVnlkbVZ6S1R0Y2JseHVJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnVZVzFsVUdGMGFDQnBiaUJqYUdsc1pISmxia04xY25abFJHRjBZWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMFlYSm5aWFFnUFNCall5NW1hVzVrS0c1aGJXVlFZWFJvTENCeWIyOTBLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGMFlYSm5aWFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdOb2FXeGtRM1Z5ZG1WRVlYUmhjeUE5SUdOb2FXeGtjbVZ1UTNWeWRtVkVZWFJoYzF0dVlXMWxVR0YwYUYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnlaV0YwWlZSaGNtZGxkRU4xY25abGN5aDBZWEpuWlhRc0lHTm9hV3hrUTNWeWRtVkVZWFJoY3l3Z1kzVnlkbVZ6S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmpkWEoyWlhNN1hHNGdJQ0FnZlZ4dWZTazdYRzVjYm1OakxrRnVhVzFoZEdsdmJrTnNhWEFnUFNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUVGdWFXMWhkR2x2YmtOc2FYQTdYRzRpWFgwPSJdfQ==