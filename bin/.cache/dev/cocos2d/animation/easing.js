(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/animation/easing.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var easing = {
            constant: function constant() {
                return 0;
            },
            linear: function linear(k) {
                return k;
            },
            quadIn: function quadIn(k) {
                return k * k;
            },
            quadOut: function quadOut(k) {
                return k * (2 - k);
            },
            quadInOut: function quadInOut(k) {
                if ((k *= 2) < 1) {
                    return 0.5 * k * k;
                }
                return -0.5 * (--k * (k - 2) - 1);
            },
            cubicIn: function cubicIn(k) {
                return k * k * k;
            },
            cubicOut: function cubicOut(k) {
                return --k * k * k + 1;
            },
            cubicInOut: function cubicInOut(k) {
                if ((k *= 2) < 1) {
                    return 0.5 * k * k * k;
                }
                return 0.5 * ((k -= 2) * k * k + 2);
            },
            quartIn: function quartIn(k) {
                return k * k * k * k;
            },
            quartOut: function quartOut(k) {
                return 1 - --k * k * k * k;
            },
            quartInOut: function quartInOut(k) {
                if ((k *= 2) < 1) {
                    return 0.5 * k * k * k * k;
                }
                return -0.5 * ((k -= 2) * k * k * k - 2);
            },
            quintIn: function quintIn(k) {
                return k * k * k * k * k;
            },
            quintOut: function quintOut(k) {
                return --k * k * k * k * k + 1;
            },
            quintInOut: function quintInOut(k) {
                if ((k *= 2) < 1) {
                    return 0.5 * k * k * k * k * k;
                }
                return 0.5 * ((k -= 2) * k * k * k * k + 2);
            },
            sineIn: function sineIn(k) {
                return 1 - Math.cos(k * Math.PI / 2);
            },
            sineOut: function sineOut(k) {
                return Math.sin(k * Math.PI / 2);
            },
            sineInOut: function sineInOut(k) {
                return 0.5 * (1 - Math.cos(Math.PI * k));
            },
            expoIn: function expoIn(k) {
                return k === 0 ? 0 : Math.pow(1024, k - 1);
            },
            expoOut: function expoOut(k) {
                return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
            },
            expoInOut: function expoInOut(k) {
                if (k === 0) {
                    return 0;
                }
                if (k === 1) {
                    return 1;
                }
                if ((k *= 2) < 1) {
                    return 0.5 * Math.pow(1024, k - 1);
                }
                return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
            },
            circIn: function circIn(k) {
                return 1 - Math.sqrt(1 - k * k);
            },
            circOut: function circOut(k) {
                return Math.sqrt(1 - --k * k);
            },
            circInOut: function circInOut(k) {
                if ((k *= 2) < 1) {
                    return -0.5 * (Math.sqrt(1 - k * k) - 1);
                }
                return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
            },
            elasticIn: function elasticIn(k) {
                var s, a = 0.1, p = 0.4;
                if (k === 0) {
                    return 0;
                }
                if (k === 1) {
                    return 1;
                }
                if (!a || a < 1) {
                    a = 1;
                    s = p / 4;
                } else {
                    s = p * Math.asin(1 / a) / (2 * Math.PI);
                }
                return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
            },
            elasticOut: function elasticOut(k) {
                var s, a = 0.1, p = 0.4;
                if (k === 0) {
                    return 0;
                }
                if (k === 1) {
                    return 1;
                }
                if (!a || a < 1) {
                    a = 1;
                    s = p / 4;
                } else {
                    s = p * Math.asin(1 / a) / (2 * Math.PI);
                }
                return a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1;
            },
            elasticInOut: function elasticInOut(k) {
                var s, a = 0.1, p = 0.4;
                if (k === 0) {
                    return 0;
                }
                if (k === 1) {
                    return 1;
                }
                if (!a || a < 1) {
                    a = 1;
                    s = p / 4;
                } else {
                    s = p * Math.asin(1 / a) / (2 * Math.PI);
                }
                if ((k *= 2) < 1) {
                    return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
                }
                return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;
            },
            backIn: function backIn(k) {
                var s = 1.70158;
                return k * k * ((s + 1) * k - s);
            },
            backOut: function backOut(k) {
                var s = 1.70158;
                return --k * k * ((s + 1) * k + s) + 1;
            },
            backInOut: function backInOut(k) {
                var s = 1.70158 * 1.525;
                if ((k *= 2) < 1) {
                    return 0.5 * (k * k * ((s + 1) * k - s));
                }
                return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
            },
            bounceIn: function bounceIn(k) {
                return 1 - easing.bounceOut(1 - k);
            },
            bounceOut: function bounceOut(k) {
                if (k < 1 / 2.75) {
                    return 7.5625 * k * k;
                } else if (k < 2 / 2.75) {
                    return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;
                } else if (k < 2.5 / 2.75) {
                    return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;
                } else {
                    return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;
                }
            },
            bounceInOut: function bounceInOut(k) {
                if (k < 0.5) {
                    return easing.bounceIn(k * 2) * 0.5;
                }
                return easing.bounceOut(k * 2 - 1) * 0.5 + 0.5;
            },
            smooth: function smooth(t) {
                if (t <= 0) {
                    return 0;
                }
                if (t >= 1) {
                    return 1;
                }
                return t * t * (3 - 2 * t);
            },
            fade: function fade(t) {
                if (t <= 0) {
                    return 0;
                }
                if (t >= 1) {
                    return 1;
                }
                return t * t * t * (t * (t * 6 - 15) + 10);
            }
        };
        function _makeOutIn(fnIn, fnOut) {
            return function (k) {
                if (k < 0.5) {
                    return fnOut(k * 2) / 2;
                }
                return fnIn(2 * k - 1) / 2 + 0.5;
            };
        }
        easing.quadOutIn = _makeOutIn(easing.quadIn, easing.quadOut);
        easing.cubicOutIn = _makeOutIn(easing.cubicIn, easing.cubicOut);
        easing.quartOutIn = _makeOutIn(easing.quartIn, easing.quartOut);
        easing.quintOutIn = _makeOutIn(easing.quintIn, easing.quintOut);
        easing.sineOutIn = _makeOutIn(easing.sineIn, easing.sineOut);
        easing.expoOutIn = _makeOutIn(easing.expoIn, easing.expoOut);
        easing.circOutIn = _makeOutIn(easing.circIn, easing.circOut);
        easing.backOutIn = _makeOutIn(easing.backIn, easing.backOut);
        easing.bounceIn = function (k) {
            return 1 - easing.bounceOut(1 - k);
        };
        easing.bounceInOut = function (k) {
            if (k < 0.5) {
                return easing.bounceIn(k * 2) * 0.5;
            }
            return easing.bounceOut(k * 2 - 1) * 0.5 + 0.5;
        };
        easing.bounceOutIn = _makeOutIn(easing.bounceIn, easing.bounceOut);
        cc.easing = module.exports = easing;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,