(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/animation/animation-state.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = cc.js;
        var Playable = require('./playable');
        var Types = require('./types');
        var WrappedInfo = Types.WrappedInfo;
        var WrapMode = Types.WrapMode;
        var WrapModeMask = Types.WrapModeMask;
        function AnimationState(clip, name) {
            Playable.call(this);
            this._currentFramePlayed = false;
            this._delay = 0;
            this._delayTime = 0;
            this._wrappedInfo = new WrappedInfo();
            this._lastWrappedInfo = null;
            this._process = process;
            this._clip = clip;
            this._name = name || clip && clip.name;
            this.animator = null;
            this.curves = [];
            this.delay = 0;
            this.repeatCount = 1;
            this.duration = 1;
            this.speed = 1;
            this.wrapMode = WrapMode.Normal;
            this.time = 0;
            this._target = null;
            this._lastframeEventOn = false;
            this.emit = function () {
                var args = new Array(arguments.length);
                for (var i = 0, l = args.length; i < l; i++) {
                    args[i] = arguments[i];
                }
                cc.director.getAnimationManager().pushDelayEvent(this, '_emit', args);
            };
        }
        js.extend(AnimationState, Playable);
        var proto = AnimationState.prototype;
        proto._emit = function (type, state) {
            if (this._target && this._target.isValid) {
                this._target.emit(type, type, state);
            }
        };
        proto.on = function (type, callback, target) {
            if (this._target && this._target.isValid) {
                if (type === 'lastframe') {
                    this._lastframeEventOn = true;
                }
                return this._target.on(type, callback, target);
            } else {
                return null;
            }
        };
        proto.once = function (type, callback, target) {
            if (this._target && this._target.isValid) {
                if (type === 'lastframe') {
                    this._lastframeEventOn = true;
                }
                var self = this;
                return this._target.once(type, function (event) {
                    callback.call(target, event);
                    self._lastframeEventOn = false;
                });
            } else {
                return null;
            }
        };
        proto.off = function (type, callback, target) {
            if (this._target && this._target.isValid) {
                if (type === 'lastframe') {
                    if (!this._target.hasEventListener(type)) {
                        this._lastframeEventOn = false;
                    }
                }
                this._target.off(type, callback, target);
            }
        };
        proto._setEventTarget = function (target) {
            this._target = target;
        };
        proto.onPlay = function () {
            this.setTime(0);
            this._delayTime = this._delay;
            cc.director.getAnimationManager().addAnimation(this);
            if (this.animator) {
                this.animator.addAnimation(this);
            }
            this.emit('play', this);
        };
        proto.onStop = function () {
            if (!this.isPaused) {
                cc.director.getAnimationManager().removeAnimation(this);
            }
            if (this.animator) {
                this.animator.removeAnimation(this);
            }
            this.emit('stop', this);
        };
        proto.onResume = function () {
            cc.director.getAnimationManager().addAnimation(this);
            this.emit('resume', this);
        };
        proto.onPause = function () {
            cc.director.getAnimationManager().removeAnimation(this);
            this.emit('pause', this);
        };
        proto.setTime = function (time) {
            this._currentFramePlayed = false;
            this.time = time || 0;
            var curves = this.curves;
            for (var i = 0, l = curves.length; i < l; i++) {
                var curve = curves[i];
                if (curve.onTimeChangedManually) {
                    curve.onTimeChangedManually(time, this);
                }
            }
        };
        function process() {
            var info = this.sample();
            if (this._lastframeEventOn) {
                var lastInfo;
                if (!this._lastWrappedInfo) {
                    lastInfo = this._lastWrappedInfo = new WrappedInfo(info);
                } else {
                    lastInfo = this._lastWrappedInfo;
                }
                if (this.repeatCount > 1 && (info.iterations | 0) > (lastInfo.iterations | 0)) {
                    this.emit('lastframe', this);
                }
                lastInfo.set(info);
            }
            if (info.stopped) {
                this.stop();
                this.emit('finished', this);
            }
        }
        function simpleProcess() {
            var time = this.time;
            var duration = this.duration;
            if (time > duration) {
                time = time % duration;
                if (time === 0)
                    time = duration;
            } else if (time < 0) {
                time = time % duration;
                if (time !== 0)
                    time += duration;
            }
            var ratio = time / duration;
            var curves = this.curves;
            for (var i = 0, len = curves.length; i < len; i++) {
                var curve = curves[i];
                curve.sample(time, ratio, this);
            }
            if (this._lastframeEventOn) {
                if (this._lastIterations === undefined) {
                    this._lastIterations = ratio;
                }
                if (this.time > 0 && this._lastIterations > ratio || this.time < 0 && this._lastIterations < ratio) {
                    this.emit('lastframe', this);
                }
                this._lastIterations = ratio;
            }
        }
        proto.update = function (delta) {
            if (this._delayTime > 0) {
                this._delayTime -= delta;
                if (this._delayTime > 0) {
                    return;
                }
            }
            if (this._currentFramePlayed) {
                this.time += delta * this.speed;
            } else {
                this._currentFramePlayed = true;
            }
            this._process();
        };
        proto._needRevers = function (currentIterations) {
            var wrapMode = this.wrapMode;
            var needRevers = false;
            if ((wrapMode & WrapModeMask.PingPong) === WrapModeMask.PingPong) {
                var isEnd = currentIterations - (currentIterations | 0) === 0;
                if (isEnd && currentIterations > 0) {
                    currentIterations -= 1;
                }
                var isOddIteration = currentIterations & 1;
                if (isOddIteration) {
                    needRevers = !needRevers;
                }
            }
            if ((wrapMode & WrapModeMask.Reverse) === WrapModeMask.Reverse) {
                needRevers = !needRevers;
            }
            return needRevers;
        };
        proto.getWrappedInfo = function (time, info) {
            info = info || new WrappedInfo();
            var stopped = false;
            var duration = this.duration;
            var repeatCount = this.repeatCount;
            var currentIterations = time > 0 ? time / duration : -(time / duration);
            if (currentIterations >= repeatCount) {
                currentIterations = repeatCount;
                stopped = true;
                var tempRatio = repeatCount - (repeatCount | 0);
                if (tempRatio === 0) {
                    tempRatio = 1;
                }
                time = tempRatio * duration * (time > 0 ? 1 : -1);
            }
            if (time > duration) {
                var tempTime = time % duration;
                time = tempTime === 0 ? duration : tempTime;
            } else if (time < 0) {
                time = time % duration;
                if (time !== 0)
                    time += duration;
            }
            var needRevers = false;
            var shouldWrap = this._wrapMode & WrapModeMask.ShouldWrap;
            if (shouldWrap) {
                needRevers = this._needRevers(currentIterations);
            }
            var direction = needRevers ? -1 : 1;
            if (this.speed < 0) {
                direction *= -1;
            }
            if (shouldWrap && needRevers) {
                time = duration - time;
            }
            info.ratio = time / duration;
            info.time = time;
            info.direction = direction;
            info.stopped = stopped;
            info.iterations = currentIterations;
            return info;
        };
        proto.sample = function () {
            var info = this.getWrappedInfo(this.time, this._wrappedInfo);
            var curves = this.curves;
            for (var i = 0, len = curves.length; i < len; i++) {
                var curve = curves[i];
                curve.sample(info.time, info.ratio, this);
            }
            return info;
        };
        js.get(proto, 'clip', function () {
            return this._clip;
        });
        js.get(proto, 'name', function () {
            return this._name;
        });
        js.obsolete(proto, 'AnimationState.length', 'duration');
        js.getset(proto, 'curveLoaded', function () {
            return this.curves.length > 0;
        }, function () {
            this.curves.length = 0;
        });
        js.getset(proto, 'wrapMode', function () {
            return this._wrapMode;
        }, function (value) {
            this._wrapMode = value;
            if (CC_EDITOR)
                return;
            this.time = 0;
            if (value & WrapModeMask.Loop) {
                this.repeatCount = Infinity;
            } else {
                this.repeatCount = 1;
            }
        });
        js.getset(proto, 'repeatCount', function () {
            return this._repeatCount;
        }, function (value) {
            this._repeatCount = value;
            var shouldWrap = this._wrapMode & WrapModeMask.ShouldWrap;
            var reverse = (this.wrapMode & WrapModeMask.Reverse) === WrapModeMask.Reverse;
            if (value === Infinity && !shouldWrap && !reverse) {
                this._process = simpleProcess;
            } else {
                this._process = process;
            }
        });
        js.getset(proto, 'delay', function () {
            return this._delay;
        }, function (value) {
            this._delayTime = this._delay = value;
        });
        cc.AnimationState = module.exports = AnimationState;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuaW1hdGlvbi1zdGF0ZS5qcyIsIi9Vc2Vycy9nYW95YW5nL1dvcmtTcGFjZS9qb3ljYXN0bGUvYmluZ28vY2xpZW50L2JpbmdvL2VuZ2luZS9jb2NvczJkL2FuaW1hdGlvbi9hbmltYXRpb24tc3RhdGUuanMiXSwibmFtZXMiOlsianMiLCJjYyIsIlBsYXlhYmxlIiwicmVxdWlyZSIsIlR5cGVzIiwiV3JhcHBlZEluZm8iLCJXcmFwTW9kZSIsIldyYXBNb2RlTWFzayIsIkFuaW1hdGlvblN0YXRlIiwiY2xpcCIsIm5hbWUiLCJjYWxsIiwiX2N1cnJlbnRGcmFtZVBsYXllZCIsIl9kZWxheSIsIl9kZWxheVRpbWUiLCJfd3JhcHBlZEluZm8iLCJfbGFzdFdyYXBwZWRJbmZvIiwiX3Byb2Nlc3MiLCJwcm9jZXNzIiwiX2NsaXAiLCJfbmFtZSIsImFuaW1hdG9yIiwiY3VydmVzIiwiZGVsYXkiLCJyZXBlYXRDb3VudCIsImR1cmF0aW9uIiwic3BlZWQiLCJ3cmFwTW9kZSIsIk5vcm1hbCIsInRpbWUiLCJfdGFyZ2V0IiwiX2xhc3RmcmFtZUV2ZW50T24iLCJlbWl0IiwiYXJncyIsIkFycmF5IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiaSIsImwiLCJkaXJlY3RvciIsImdldEFuaW1hdGlvbk1hbmFnZXIiLCJwdXNoRGVsYXlFdmVudCIsImV4dGVuZCIsInByb3RvIiwicHJvdG90eXBlIiwiX2VtaXQiLCJ0eXBlIiwic3RhdGUiLCJpc1ZhbGlkIiwib24iLCJjYWxsYmFjayIsInRhcmdldCIsIm9uY2UiLCJzZWxmIiwiZXZlbnQiLCJvZmYiLCJoYXNFdmVudExpc3RlbmVyIiwiX3NldEV2ZW50VGFyZ2V0Iiwib25QbGF5Iiwic2V0VGltZSIsImFkZEFuaW1hdGlvbiIsIm9uU3RvcCIsImlzUGF1c2VkIiwicmVtb3ZlQW5pbWF0aW9uIiwib25SZXN1bWUiLCJvblBhdXNlIiwiY3VydmUiLCJvblRpbWVDaGFuZ2VkTWFudWFsbHkiLCJpbmZvIiwic2FtcGxlIiwibGFzdEluZm8iLCJpdGVyYXRpb25zIiwic2V0Iiwic3RvcHBlZCIsInN0b3AiLCJzaW1wbGVQcm9jZXNzIiwicmF0aW8iLCJsZW4iLCJfbGFzdEl0ZXJhdGlvbnMiLCJ1bmRlZmluZWQiLCJ1cGRhdGUiLCJkZWx0YSIsIl9uZWVkUmV2ZXJzIiwiY3VycmVudEl0ZXJhdGlvbnMiLCJuZWVkUmV2ZXJzIiwiUGluZ1BvbmciLCJpc0VuZCIsImlzT2RkSXRlcmF0aW9uIiwiUmV2ZXJzZSIsImdldFdyYXBwZWRJbmZvIiwidGVtcFJhdGlvIiwidGVtcFRpbWUiLCJzaG91bGRXcmFwIiwiX3dyYXBNb2RlIiwiU2hvdWxkV3JhcCIsImRpcmVjdGlvbiIsImdldCIsIm9ic29sZXRlIiwiZ2V0c2V0IiwidmFsdWUiLCJDQ19FRElUT1IiLCJMb29wIiwiSW5maW5pdHkiLCJfcmVwZWF0Q291bnQiLCJyZXZlcnNlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjtJQUFBLElBQUEsT0FBQSxHQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUEsSUFBQSxPQUFBLE9BQUEsS0FBQSxXQUFBOzs7Ozs7Ozs7Ozs7O1FBMEJBLElBQUlBLEVBQUFBLEdBQUtDLEVBQUFBLENBQUdELEVBQVo7UUFDQSxJQUFJRSxRQUFBQSxHQUFXQyxPQUFBQSxDQUFRLFlBQVJBLENBQWY7UUFFQSxJQUFJQyxLQUFBQSxHQUFRRCxPQUFBQSxDQUFRLFNBQVJBLENBQVo7UUFDQSxJQUFJRSxXQUFBQSxHQUFjRCxLQUFBQSxDQUFNQyxXQUF4QjtRQUNBLElBQUlDLFFBQUFBLEdBQVdGLEtBQUFBLENBQU1FLFFBQXJCO1FBQ0EsSUFBSUMsWUFBQUEsR0FBZUgsS0FBQUEsQ0FBTUcsWUFBekI7UUFtQkEsU0FBU0MsY0FBVCxDQUF5QkMsSUFBekIsRUFBK0JDLElBQS9CLEVBQXFDO0FBQUEsWUFDakNSLFFBQUFBLENBQVNTLElBQVRULENBQWMsSUFBZEEsRUFEaUM7QUFBQSxZQUtqQyxLQUFLVSxtQkFBTCxHQUEyQixLQUEzQixDQUxpQztBQUFB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QUFIbEcsQ0FBVTJDLEtBQVYzQyxFQUFpQixPQUFqQkEsRUFDSSxZQUFZO0FBQUEsWUFDUixPQUFPLEtBQUthLE1BQVosQ0FEUTtBQUFBLFNBRGhCYixFQUlJLFVBQVVtRyxLQUFWLEVBQWlCO0FBQUEsWUFDYixLQUFLckYsVUFBTCxHQUFrQixLQUFLRCxNQUFMLEdBQWNzRixLQUFoQyxDQURhO0FBQUEsU0FKckJuRztRQVVBQyxFQUFBQSxDQUFHTyxjQUFIUCxHQUFvQndHLE1BQUFBLENBQU9DLE9BQVBELEdBQWlCakcsY0FBckNQIiwiZmlsZSI6ImFuaW1hdGlvbi1zdGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXG4gd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xuIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcbiBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblxudmFyIGpzID0gY2MuanM7XG52YXIgUGxheWFibGUgPSByZXF1aXJlKCcuL3BsYXlhYmxlJyk7XG5cbnZhciBUeXBlcyA9IHJlcXVpcmUoJy4vdHlwZXMnKTtcbnZhciBXcmFwcGVkSW5mbyA9IFR5cGVzLldyYXBwZWRJbmZvO1xudmFyIFdyYXBNb2RlID0gVHlwZXMuV3JhcE1vZGU7XG52YXIgV3JhcE1vZGVNYXNrID0gVHlwZXMuV3JhcE1vZGVNYXNrO1xuXG4vKipcbiAqICEjZW5cbiAqIFRoZSBBbmltYXRpb25TdGF0ZSBnaXZlcyBmdWxsIGNvbnRyb2wgb3ZlciBhbmltYXRpb24gcGxheWJhY2sgcHJvY2Vzcy5cbiAqIEluIG1vc3QgY2FzZXMgdGhlIEFuaW1hdGlvbiBDb21wb25lbnQgaXMgc3VmZmljaWVudCBhbmQgZWFzaWVyIHRvIHVzZS4gVXNlIHRoZSBBbmltYXRpb25TdGF0ZSBpZiB5b3UgbmVlZCBmdWxsIGNvbnRyb2wuXG4gKiAhI3poXG4gKiBBbmltYXRpb25TdGF0ZSDlrozlhajmjqfliLbliqjnlLvmkq3mlL7ov4fnqIvjgII8YnIvPlxuICog5aSn5aSa5pWw5oOF5Ya15LiLIOWKqOeUu+e7hOS7tiDmmK/otrPlpJ/lkozmmJPkuo7kvb/nlKjnmoTjgILlpoLmnpzmgqjpnIDopoHmm7TlpJrnmoTliqjnlLvmjqfliLbmjqXlj6PvvIzor7fkvb/nlKggQW5pbWF0aW9uU3RhdGXjgIJcbiAqIEBjbGFzcyBBbmltYXRpb25TdGF0ZVxuICogQGV4dGVuZHMgUGxheWFibGVcbiAqXG4gKi9cblxuLyoqXG4gKiBAbWV0aG9kIGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FuaW1hdGlvbkNsaXB9IGNsaXBcbiAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZV1cbiAqL1xuZnVuY3Rpb24gQW5pbWF0aW9uU3RhdGUgKGNsaXAsIG5hbWUpIHtcbiAgICBQbGF5YWJsZS5jYWxsKHRoaXMpO1xuICAgIFxuICAgIC8vIE1hcmsgd2hldGhlciB0aGUgY3VycmVudCBmcmFtZSBpcyBwbGF5ZWQuXG4gICAgLy8gV2hlbiBzZXQgbmV3IHRpbWUgdG8gYW5pbWF0aW9uIHN0YXRlLCB3ZSBzaG91bGQgZW5zdXJlIHRoZSBmcmFtZSBhdCB0aGUgc3BlY2lmaWVkIHRpbWUgYmVpbmcgcGxheWVkIGF0IG5leHQgdXBkYXRlLlxuICAgIHRoaXMuX2N1cnJlbnRGcmFtZVBsYXllZCA9IGZhbHNlO1xuICAgIFxuICAgIHRoaXMuX2RlbGF5ID0gMDtcbiAgICB0aGlzLl9kZWxheVRpbWUgPSAwO1xuXG4gICAgdGhpcy5fd3JhcHBlZEluZm8gPSBuZXcgV3JhcHBlZEluZm8oKTtcbiAgICB0aGlzLl9sYXN0V3JhcHBlZEluZm8gPSBudWxsO1xuXG4gICAgdGhpcy5fcHJvY2VzcyA9IHByb2Nlc3M7XG5cbiAgICB0aGlzLl9jbGlwID0gY2xpcDtcbiAgICB0aGlzLl9uYW1lID0gbmFtZSB8fCAoY2xpcCAmJiBjbGlwLm5hbWUpO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IGFuaW1hdG9yXG4gICAgICogQHR5cGUge0FuaW1hdGlvbkFuaW1hdG9yfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5hbmltYXRvciA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBjdXJ2ZXMgbGlzdC5cbiAgICAgKiAhI3poIOabsue6v+WIl+ihqOOAglxuICAgICAqIEBwcm9wZXJ0eSBjdXJ2ZXNcbiAgICAgKiBAdHlwZSB7T2JqZWN0W119XG4gICAgICovXG4gICAgdGhpcy5jdXJ2ZXMgPSBbXTtcblxuICAgIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3dlYi1hbmltYXRpb25zLyNpZGwtZGVmLUFuaW1hdGlvblRpbWluZ1xuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgc3RhcnQgZGVsYXkgd2hpY2ggcmVwcmVzZW50cyB0aGUgbnVtYmVyIG9mIHNlY29uZHMgZnJvbSBhbiBhbmltYXRpb24ncyBzdGFydCB0aW1lIHRvIHRoZSBzdGFydCBvZlxuICAgICAqIHRoZSBhY3RpdmUgaW50ZXJ2YWwuXG4gICAgICogISN6aCDlu7bov5/lpJrlsJHnp5Lmkq3mlL7jgIJcbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBkZWxheVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIHRoaXMuZGVsYXkgPSAwO1xuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgYW5pbWF0aW9uJ3MgaXRlcmF0aW9uIGNvdW50IHByb3BlcnR5LlxuICAgICAqXG4gICAgICogQSByZWFsIG51bWJlciBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gemVybyAoaW5jbHVkaW5nIHBvc2l0aXZlIGluZmluaXR5KSByZXByZXNlbnRpbmcgdGhlIG51bWJlciBvZiB0aW1lc1xuICAgICAqIHRvIHJlcGVhdCB0aGUgYW5pbWF0aW9uIG5vZGUuXG4gICAgICpcbiAgICAgKiBWYWx1ZXMgbGVzcyB0aGFuIHplcm8gYW5kIE5hTiB2YWx1ZXMgYXJlIHRyZWF0ZWQgYXMgdGhlIHZhbHVlIDEuMCBmb3IgdGhlIHB1cnBvc2Ugb2YgdGltaW5nIG1vZGVsXG4gICAgICogY2FsY3VsYXRpb25zLlxuICAgICAqXG4gICAgICogISN6aCDov63ku6PmrKHmlbDvvIzmjIfliqjnlLvmkq3mlL7lpJrlsJHmrKHlkI7nu5PmnZ8sIG5vcm1hbGl6ZSB0aW1l44CCIOWmgiAyLjXvvIgy5qyh5Y2K77yJXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcmVwZWF0Q291bnRcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKi9cbiAgICB0aGlzLnJlcGVhdENvdW50ID0gMTtcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIGl0ZXJhdGlvbiBkdXJhdGlvbiBvZiB0aGlzIGFuaW1hdGlvbiBpbiBzZWNvbmRzLiAobGVuZ3RoKVxuICAgICAqICEjemgg5Y2V5qyh5Yqo55S755qE5oyB57ut5pe26Ze077yM56eS44CCXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgZHVyYXRpb25cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIHRoaXMuZHVyYXRpb24gPSAxO1xuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgYW5pbWF0aW9uJ3MgcGxheWJhY2sgc3BlZWQuIDEgaXMgbm9ybWFsIHBsYXliYWNrIHNwZWVkLlxuICAgICAqICEjemgg5pKt5pS+6YCf546H44CCXG4gICAgICogQHByb3BlcnR5IHNwZWVkXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAZGVmYXVsdDogMS4wXG4gICAgICovXG4gICAgdGhpcy5zcGVlZCA9IDE7XG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogV3JhcHBpbmcgbW9kZSBvZiB0aGUgcGxheWluZyBhbmltYXRpb24uXG4gICAgICogTm90aWNlIDogZHluYW1pYyBjaGFuZ2Ugd3JhcE1vZGUgd2lsbCByZXNldCB0aW1lIGFuZCByZXBlYXRDb3VudCBwcm9wZXJ0eVxuICAgICAqICEjemhcbiAgICAgKiDliqjnlLvlvqrnjq/mlrnlvI/jgIJcbiAgICAgKiDpnIDopoHms6jmhI/nmoTmmK/vvIzliqjmgIHkv67mlLkgd3JhcE1vZGUg5pe277yM5Lya6YeN572uIHRpbWUg5Lul5Y+KIHJlcGVhdENvdW50XG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgd3JhcE1vZGVcbiAgICAgKiBAdHlwZSB7V3JhcE1vZGV9XG4gICAgICogQGRlZmF1bHQ6IFdyYXBNb2RlLk5vcm1hbFxuICAgICAqL1xuICAgIHRoaXMud3JhcE1vZGUgPSBXcmFwTW9kZS5Ob3JtYWw7XG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBjdXJyZW50IHRpbWUgb2YgdGhpcyBhbmltYXRpb24gaW4gc2Vjb25kcy5cbiAgICAgKiAhI3poIOWKqOeUu+W9k+WJjeeahOaXtumXtO+8jOenkuOAglxuICAgICAqIEBwcm9wZXJ0eSB0aW1lXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgdGhpcy50aW1lID0gMDtcblxuICAgIC8vIEFuaW1hdGlvbiBhcyBldmVudCB0YXJnZXRcbiAgICB0aGlzLl90YXJnZXQgPSBudWxsO1xuICAgIHRoaXMuX2xhc3RmcmFtZUV2ZW50T24gPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgICAgIGNjLmRpcmVjdG9yLmdldEFuaW1hdGlvbk1hbmFnZXIoKS5wdXNoRGVsYXlFdmVudCh0aGlzLCAnX2VtaXQnLCBhcmdzKTtcbiAgICB9O1xufVxuanMuZXh0ZW5kKEFuaW1hdGlvblN0YXRlLCBQbGF5YWJsZSk7XG5cbnZhciBwcm90byA9IEFuaW1hdGlvblN0YXRlLnByb3RvdHlwZTtcblxucHJvdG8uX2VtaXQgPSBmdW5jdGlvbiAodHlwZSwgc3RhdGUpIHtcbiAgICBpZiAodGhpcy5fdGFyZ2V0ICYmIHRoaXMuX3RhcmdldC5pc1ZhbGlkKSB7XG4gICAgICAgIHRoaXMuX3RhcmdldC5lbWl0KHR5cGUsIHR5cGUsIHN0YXRlKTtcbiAgICB9XG59O1xuXG5wcm90by5vbiA9IGZ1bmN0aW9uICh0eXBlLCBjYWxsYmFjaywgdGFyZ2V0KSB7XG4gICAgaWYgKHRoaXMuX3RhcmdldCAmJiB0aGlzLl90YXJnZXQuaXNWYWxpZCkge1xuICAgICAgICBpZiAodHlwZSA9PT0gJ2xhc3RmcmFtZScpIHtcbiAgICAgICAgICAgIHRoaXMuX2xhc3RmcmFtZUV2ZW50T24gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl90YXJnZXQub24odHlwZSwgY2FsbGJhY2ssIHRhcmdldCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59O1xuXG5wcm90by5vbmNlID0gZnVuY3Rpb24gKHR5cGUsIGNhbGxiYWNrLCB0YXJnZXQpIHtcbiAgICBpZiAodGhpcy5fdGFyZ2V0ICYmIHRoaXMuX3RhcmdldC5pc1ZhbGlkKSB7XG4gICAgICAgIGlmICh0eXBlID09PSAnbGFzdGZyYW1lJykge1xuICAgICAgICAgICAgdGhpcy5fbGFzdGZyYW1lRXZlbnRPbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5fdGFyZ2V0Lm9uY2UodHlwZSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBjYWxsYmFjay5jYWxsKHRhcmdldCwgZXZlbnQpO1xuICAgICAgICAgICAgc2VsZi5fbGFzdGZyYW1lRXZlbnRPbiA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn07XG5cbnByb3RvLm9mZiA9IGZ1bmN0aW9uICh0eXBlLCBjYWxsYmFjaywgdGFyZ2V0KSB7XG4gICAgaWYgKHRoaXMuX3RhcmdldCAmJiB0aGlzLl90YXJnZXQuaXNWYWxpZCkge1xuICAgICAgICBpZiAodHlwZSA9PT0gJ2xhc3RmcmFtZScpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fdGFyZ2V0Lmhhc0V2ZW50TGlzdGVuZXIodHlwZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sYXN0ZnJhbWVFdmVudE9uID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGFyZ2V0Lm9mZih0eXBlLCBjYWxsYmFjaywgdGFyZ2V0KTtcbiAgICB9XG59O1xuXG5wcm90by5fc2V0RXZlbnRUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgdGhpcy5fdGFyZ2V0ID0gdGFyZ2V0O1xufTtcblxucHJvdG8ub25QbGF5ID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIHJlcGxheVxuICAgIHRoaXMuc2V0VGltZSgwKTtcbiAgICB0aGlzLl9kZWxheVRpbWUgPSB0aGlzLl9kZWxheTtcbiAgICBcbiAgICBjYy5kaXJlY3Rvci5nZXRBbmltYXRpb25NYW5hZ2VyKCkuYWRkQW5pbWF0aW9uKHRoaXMpO1xuXG4gICAgaWYgKHRoaXMuYW5pbWF0b3IpIHtcbiAgICAgICAgdGhpcy5hbmltYXRvci5hZGRBbmltYXRpb24odGhpcyk7XG4gICAgfVxuICAgIFxuICAgIHRoaXMuZW1pdCgncGxheScsIHRoaXMpO1xufTtcblxucHJvdG8ub25TdG9wID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5pc1BhdXNlZCkge1xuICAgICAgICBjYy5kaXJlY3Rvci5nZXRBbmltYXRpb25NYW5hZ2VyKCkucmVtb3ZlQW5pbWF0aW9uKHRoaXMpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmFuaW1hdG9yKSB7XG4gICAgICAgIHRoaXMuYW5pbWF0b3IucmVtb3ZlQW5pbWF0aW9uKHRoaXMpO1xuICAgIH1cblxuICAgIHRoaXMuZW1pdCgnc3RvcCcsIHRoaXMpO1xufTtcblxucHJvdG8ub25SZXN1bWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgY2MuZGlyZWN0b3IuZ2V0QW5pbWF0aW9uTWFuYWdlcigpLmFkZEFuaW1hdGlvbih0aGlzKTtcbiAgICB0aGlzLmVtaXQoJ3Jlc3VtZScsIHRoaXMpO1xufTtcblxucHJvdG8ub25QYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBjYy5kaXJlY3Rvci5nZXRBbmltYXRpb25NYW5hZ2VyKCkucmVtb3ZlQW5pbWF0aW9uKHRoaXMpO1xuICAgIHRoaXMuZW1pdCgncGF1c2UnLCB0aGlzKTtcbn07XG5cbnByb3RvLnNldFRpbWUgPSBmdW5jdGlvbiAodGltZSkge1xuICAgIHRoaXMuX2N1cnJlbnRGcmFtZVBsYXllZCA9IGZhbHNlO1xuICAgIHRoaXMudGltZSA9IHRpbWUgfHwgMDtcblxuICAgIHZhciBjdXJ2ZXMgPSB0aGlzLmN1cnZlcztcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGN1cnZlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdmFyIGN1cnZlID0gY3VydmVzW2ldO1xuICAgICAgICBpZiAoY3VydmUub25UaW1lQ2hhbmdlZE1hbnVhbGx5KSB7XG4gICAgICAgICAgICBjdXJ2ZS5vblRpbWVDaGFuZ2VkTWFudWFsbHkodGltZSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5mdW5jdGlvbiBwcm9jZXNzICgpIHtcbiAgICAvLyBzYW1wbGVcbiAgICB2YXIgaW5mbyA9IHRoaXMuc2FtcGxlKCk7XG5cbiAgICBpZiAodGhpcy5fbGFzdGZyYW1lRXZlbnRPbikge1xuICAgICAgICB2YXIgbGFzdEluZm87XG4gICAgICAgIGlmICghdGhpcy5fbGFzdFdyYXBwZWRJbmZvKSB7XG4gICAgICAgICAgICBsYXN0SW5mbyA9IHRoaXMuX2xhc3RXcmFwcGVkSW5mbyA9IG5ldyBXcmFwcGVkSW5mbyhpbmZvKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxhc3RJbmZvID0gdGhpcy5fbGFzdFdyYXBwZWRJbmZvO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucmVwZWF0Q291bnQgPiAxICYmICgoaW5mby5pdGVyYXRpb25zIHwgMCkgPiAobGFzdEluZm8uaXRlcmF0aW9ucyB8IDApKSkge1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdsYXN0ZnJhbWUnLCB0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhc3RJbmZvLnNldChpbmZvKTtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5zdG9wcGVkKSB7XG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICB0aGlzLmVtaXQoJ2ZpbmlzaGVkJywgdGhpcyk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzaW1wbGVQcm9jZXNzICgpIHtcbiAgICB2YXIgdGltZSA9IHRoaXMudGltZTtcbiAgICB2YXIgZHVyYXRpb24gPSB0aGlzLmR1cmF0aW9uO1xuXG4gICAgaWYgKHRpbWUgPiBkdXJhdGlvbikge1xuICAgICAgICB0aW1lID0gdGltZSAlIGR1cmF0aW9uO1xuICAgICAgICBpZiAodGltZSA9PT0gMCkgdGltZSA9IGR1cmF0aW9uO1xuICAgIH1cbiAgICBlbHNlIGlmICh0aW1lIDwgMCkge1xuICAgICAgICB0aW1lID0gdGltZSAlIGR1cmF0aW9uO1xuICAgICAgICBpZiAodGltZSAhPT0gMCkgdGltZSArPSBkdXJhdGlvbjtcbiAgICB9XG5cbiAgICB2YXIgcmF0aW8gPSB0aW1lIC8gZHVyYXRpb247XG5cbiAgICB2YXIgY3VydmVzID0gdGhpcy5jdXJ2ZXM7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGN1cnZlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB2YXIgY3VydmUgPSBjdXJ2ZXNbaV07XG4gICAgICAgIGN1cnZlLnNhbXBsZSh0aW1lLCByYXRpbywgdGhpcyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xhc3RmcmFtZUV2ZW50T24pIHtcbiAgICAgICAgaWYgKHRoaXMuX2xhc3RJdGVyYXRpb25zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2xhc3RJdGVyYXRpb25zID0gcmF0aW87XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKHRoaXMudGltZSA+IDAgJiYgdGhpcy5fbGFzdEl0ZXJhdGlvbnMgPiByYXRpbykgfHwgKHRoaXMudGltZSA8IDAgJiYgdGhpcy5fbGFzdEl0ZXJhdGlvbnMgPCByYXRpbykpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnbGFzdGZyYW1lJywgdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9sYXN0SXRlcmF0aW9ucyA9IHJhdGlvO1xuICAgIH1cbn1cblxucHJvdG8udXBkYXRlID0gZnVuY3Rpb24gKGRlbHRhKSB7XG4gICAgLy8gY2FsY3VsYXRlIGRlbGF5IHRpbWVcblxuICAgIGlmICh0aGlzLl9kZWxheVRpbWUgPiAwKSB7XG4gICAgICAgIHRoaXMuX2RlbGF5VGltZSAtPSBkZWx0YTtcbiAgICAgICAgaWYgKHRoaXMuX2RlbGF5VGltZSA+IDApIHtcbiAgICAgICAgICAgIC8vIHN0aWxsIHdhaXRpbmdcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIG1ha2UgZmlyc3QgZnJhbWUgcGVyZmVjdFxuXG4gICAgLy92YXIgcGxheVBlcmZlY3RGaXJzdEZyYW1lID0gKHRoaXMudGltZSA9PT0gMCk7XG4gICAgaWYgKHRoaXMuX2N1cnJlbnRGcmFtZVBsYXllZCkge1xuICAgICAgICB0aGlzLnRpbWUgKz0gKGRlbHRhICogdGhpcy5zcGVlZCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aGlzLl9jdXJyZW50RnJhbWVQbGF5ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuX3Byb2Nlc3MoKTtcbn07XG5cbnByb3RvLl9uZWVkUmV2ZXJzID0gZnVuY3Rpb24gKGN1cnJlbnRJdGVyYXRpb25zKSB7XG4gICAgdmFyIHdyYXBNb2RlID0gdGhpcy53cmFwTW9kZTtcbiAgICB2YXIgbmVlZFJldmVycyA9IGZhbHNlO1xuXG4gICAgaWYgKCh3cmFwTW9kZSAmIFdyYXBNb2RlTWFzay5QaW5nUG9uZykgPT09IFdyYXBNb2RlTWFzay5QaW5nUG9uZykge1xuICAgICAgICB2YXIgaXNFbmQgPSBjdXJyZW50SXRlcmF0aW9ucyAtIChjdXJyZW50SXRlcmF0aW9ucyB8IDApID09PSAwO1xuICAgICAgICBpZiAoaXNFbmQgJiYgKGN1cnJlbnRJdGVyYXRpb25zID4gMCkpIHtcbiAgICAgICAgICAgIGN1cnJlbnRJdGVyYXRpb25zIC09IDE7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaXNPZGRJdGVyYXRpb24gPSBjdXJyZW50SXRlcmF0aW9ucyAmIDE7XG4gICAgICAgIGlmIChpc09kZEl0ZXJhdGlvbikge1xuICAgICAgICAgICAgbmVlZFJldmVycyA9ICFuZWVkUmV2ZXJzO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICgod3JhcE1vZGUgJiBXcmFwTW9kZU1hc2suUmV2ZXJzZSkgPT09IFdyYXBNb2RlTWFzay5SZXZlcnNlKSB7XG4gICAgICAgIG5lZWRSZXZlcnMgPSAhbmVlZFJldmVycztcbiAgICB9XG4gICAgcmV0dXJuIG5lZWRSZXZlcnM7XG59O1xuXG5wcm90by5nZXRXcmFwcGVkSW5mbyA9IGZ1bmN0aW9uICh0aW1lLCBpbmZvKSB7XG4gICAgaW5mbyA9IGluZm8gfHwgbmV3IFdyYXBwZWRJbmZvKCk7XG4gICAgXG4gICAgdmFyIHN0b3BwZWQgPSBmYWxzZTtcbiAgICB2YXIgZHVyYXRpb24gPSB0aGlzLmR1cmF0aW9uO1xuICAgIHZhciByZXBlYXRDb3VudCA9IHRoaXMucmVwZWF0Q291bnQ7XG5cbiAgICB2YXIgY3VycmVudEl0ZXJhdGlvbnMgPSB0aW1lID4gMCA/ICh0aW1lIC8gZHVyYXRpb24pIDogLSh0aW1lIC8gZHVyYXRpb24pO1xuICAgIGlmIChjdXJyZW50SXRlcmF0aW9ucyA+PSByZXBlYXRDb3VudCkge1xuICAgICAgICBjdXJyZW50SXRlcmF0aW9ucyA9IHJlcGVhdENvdW50O1xuXG4gICAgICAgIHN0b3BwZWQgPSB0cnVlO1xuICAgICAgICB2YXIgdGVtcFJhdGlvID0gcmVwZWF0Q291bnQgLSAocmVwZWF0Q291bnQgfCAwKTtcbiAgICAgICAgaWYgKHRlbXBSYXRpbyA9PT0gMCkge1xuICAgICAgICAgICAgdGVtcFJhdGlvID0gMTsgIC8vIOWmguaenOaSreaUvui/h++8jOWKqOeUu+S4jeWkjeS9jVxuICAgICAgICB9XG4gICAgICAgIHRpbWUgPSB0ZW1wUmF0aW8gKiBkdXJhdGlvbiAqICh0aW1lID4gMCA/IDEgOiAtMSk7XG4gICAgfVxuXG4gICAgaWYgKHRpbWUgPiBkdXJhdGlvbikge1xuICAgICAgICB2YXIgdGVtcFRpbWUgPSB0aW1lICUgZHVyYXRpb247XG4gICAgICAgIHRpbWUgPSB0ZW1wVGltZSA9PT0gMCA/IGR1cmF0aW9uIDogdGVtcFRpbWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRpbWUgPCAwKSB7XG4gICAgICAgIHRpbWUgPSB0aW1lICUgZHVyYXRpb247XG4gICAgICAgIGlmICh0aW1lICE9PSAwICkgdGltZSArPSBkdXJhdGlvbjtcbiAgICB9XG5cbiAgICB2YXIgbmVlZFJldmVycyA9IGZhbHNlO1xuICAgIHZhciBzaG91bGRXcmFwID0gdGhpcy5fd3JhcE1vZGUgJiBXcmFwTW9kZU1hc2suU2hvdWxkV3JhcDtcbiAgICBpZiAoc2hvdWxkV3JhcCkge1xuICAgICAgICBuZWVkUmV2ZXJzID0gdGhpcy5fbmVlZFJldmVycyhjdXJyZW50SXRlcmF0aW9ucyk7XG4gICAgfVxuXG4gICAgdmFyIGRpcmVjdGlvbiA9IG5lZWRSZXZlcnMgPyAtMSA6IDE7XG4gICAgaWYgKHRoaXMuc3BlZWQgPCAwKSB7XG4gICAgICAgIGRpcmVjdGlvbiAqPSAtMTtcbiAgICB9XG5cbiAgICAvLyBjYWxjdWxhdGUgd3JhcHBlZCB0aW1lXG4gICAgaWYgKHNob3VsZFdyYXAgJiYgbmVlZFJldmVycykge1xuICAgICAgICB0aW1lID0gZHVyYXRpb24gLSB0aW1lO1xuICAgIH1cblxuICAgIGluZm8ucmF0aW8gPSB0aW1lIC8gZHVyYXRpb247XG4gICAgaW5mby50aW1lID0gdGltZTtcbiAgICBpbmZvLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbiAgICBpbmZvLnN0b3BwZWQgPSBzdG9wcGVkO1xuICAgIGluZm8uaXRlcmF0aW9ucyA9IGN1cnJlbnRJdGVyYXRpb25zO1xuXG4gICAgcmV0dXJuIGluZm87XG59O1xuXG5wcm90by5zYW1wbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGluZm8gPSB0aGlzLmdldFdyYXBwZWRJbmZvKHRoaXMudGltZSwgdGhpcy5fd3JhcHBlZEluZm8pO1xuICAgIHZhciBjdXJ2ZXMgPSB0aGlzLmN1cnZlcztcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY3VydmVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHZhciBjdXJ2ZSA9IGN1cnZlc1tpXTtcbiAgICAgICAgY3VydmUuc2FtcGxlKGluZm8udGltZSwgaW5mby5yYXRpbywgdGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluZm87XG59O1xuXG5cbi8qKlxuICogISNlbiBUaGUgY2xpcCB0aGF0IGlzIGJlaW5nIHBsYXllZCBieSB0aGlzIGFuaW1hdGlvbiBzdGF0ZS5cbiAqICEjemgg5q2k5Yqo55S754q25oCB5q2j5Zyo5pKt5pS+55qE5Ymq6L6R44CCXG4gKiBAcHJvcGVydHkgY2xpcFxuICogQHR5cGUge0FuaW1hdGlvbkNsaXB9XG4gKiBAZmluYWxcbiAqL1xuanMuZ2V0KHByb3RvLCAnY2xpcCcsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY2xpcDtcbn0pO1xuXG4vKipcbiAqICEjZW4gVGhlIG5hbWUgb2YgdGhlIHBsYXlpbmcgYW5pbWF0aW9uLlxuICogISN6aCDliqjnlLvnmoTlkI3lrZdcbiAqIEBwcm9wZXJ0eSBuYW1lXG4gKiBAdHlwZSB7U3RyaW5nfVxuICogQHJlYWRPbmx5XG4gKi9cbmpzLmdldChwcm90bywgJ25hbWUnLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWU7XG59KTtcblxuanMub2Jzb2xldGUocHJvdG8sICdBbmltYXRpb25TdGF0ZS5sZW5ndGgnLCAnZHVyYXRpb24nKTtcblxuanMuZ2V0c2V0KHByb3RvLCAnY3VydmVMb2FkZWQnLFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VydmVzLmxlbmd0aCA+IDA7XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY3VydmVzLmxlbmd0aCA9IDA7XG4gICAgfVxuKTtcblxuXG5qcy5nZXRzZXQocHJvdG8sICd3cmFwTW9kZScsXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd3JhcE1vZGU7XG4gICAgfSxcbiAgICBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fd3JhcE1vZGUgPSB2YWx1ZTtcblxuICAgICAgICBpZiAoQ0NfRURJVE9SKSByZXR1cm47XG5cbiAgICAgICAgLy8gZHluYW1pYyBjaGFuZ2Ugd3JhcE1vZGUgd2lsbCBuZWVkIHJlc2V0IHRpbWUgdG8gMFxuICAgICAgICB0aGlzLnRpbWUgPSAwO1xuXG4gICAgICAgIGlmICh2YWx1ZSAmIFdyYXBNb2RlTWFzay5Mb29wKSB7XG4gICAgICAgICAgICB0aGlzLnJlcGVhdENvdW50ID0gSW5maW5pdHk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlcGVhdENvdW50ID0gMTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4pO1xuXG5qcy5nZXRzZXQocHJvdG8sICdyZXBlYXRDb3VudCcsXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVwZWF0Q291bnQ7XG4gICAgfSxcbiAgICBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fcmVwZWF0Q291bnQgPSB2YWx1ZTtcbiAgICAgICAgXG4gICAgICAgIHZhciBzaG91bGRXcmFwID0gdGhpcy5fd3JhcE1vZGUgJiBXcmFwTW9kZU1hc2suU2hvdWxkV3JhcDtcbiAgICAgICAgdmFyIHJldmVyc2UgPSAodGhpcy53cmFwTW9kZSAmIFdyYXBNb2RlTWFzay5SZXZlcnNlKSA9PT0gV3JhcE1vZGVNYXNrLlJldmVyc2U7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gSW5maW5pdHkgJiYgIXNob3VsZFdyYXAgJiYgIXJldmVyc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3MgPSBzaW1wbGVQcm9jZXNzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcHJvY2VzcyA9IHByb2Nlc3M7XG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG5qcy5nZXRzZXQocHJvdG8sICdkZWxheScsIFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlbGF5O1xuICAgIH0sXG4gICAgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2RlbGF5VGltZSA9IHRoaXMuX2RlbGF5ID0gdmFsdWU7XG4gICAgfVxuKTtcblxuXG5jYy5BbmltYXRpb25TdGF0ZSA9IG1vZHVsZS5leHBvcnRzID0gQW5pbWF0aW9uU3RhdGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXG4gd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xuIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcbiBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbnZhciBqcyA9IGNjLmpzO1xudmFyIFBsYXlhYmxlID0gcmVxdWlyZSgnLi9wbGF5YWJsZScpO1xuXG52YXIgVHlwZXMgPSByZXF1aXJlKCcuL3R5cGVzJyk7XG52YXIgV3JhcHBlZEluZm8gPSBUeXBlcy5XcmFwcGVkSW5mbztcbnZhciBXcmFwTW9kZSA9IFR5cGVzLldyYXBNb2RlO1xudmFyIFdyYXBNb2RlTWFzayA9IFR5cGVzLldyYXBNb2RlTWFzaztcblxuLyoqXG4gKiAhI2VuXG4gKiBUaGUgQW5pbWF0aW9uU3RhdGUgZ2l2ZXMgZnVsbCBjb250cm9sIG92ZXIgYW5pbWF0aW9uIHBsYXliYWNrIHByb2Nlc3MuXG4gKiBJbiBtb3N0IGNhc2VzIHRoZSBBbmltYXRpb24gQ29tcG9uZW50IGlzIHN1ZmZpY2llbnQgYW5kIGVhc2llciB0byB1c2UuIFVzZSB0aGUgQW5pbWF0aW9uU3RhdGUgaWYgeW91IG5lZWQgZnVsbCBjb250cm9sLlxuICogISN6aFxuICogQW5pbWF0aW9uU3RhdGUg5a6M5YWo5o6n5Yi25Yqo55S75pKt5pS+6L+H56iL44CCPGJyLz5cbiAqIOWkp+WkmuaVsOaDheWGteS4iyDliqjnlLvnu4Tku7Yg5piv6Laz5aSf5ZKM5piT5LqO5L2/55So55qE44CC5aaC5p6c5oKo6ZyA6KaB5pu05aSa55qE5Yqo55S75o6n5Yi25o6l5Y+j77yM6K+35L2/55SoIEFuaW1hdGlvblN0YXRl44CCXG4gKiBAY2xhc3MgQW5pbWF0aW9uU3RhdGVcbiAqIEBleHRlbmRzIFBsYXlhYmxlXG4gKlxuICovXG5cbi8qKlxuICogQG1ldGhvZCBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBbmltYXRpb25DbGlwfSBjbGlwXG4gKiBAcGFyYW0ge1N0cmluZ30gW25hbWVdXG4gKi9cbmZ1bmN0aW9uIEFuaW1hdGlvblN0YXRlKGNsaXAsIG5hbWUpIHtcbiAgICBQbGF5YWJsZS5jYWxsKHRoaXMpO1xuXG4gICAgLy8gTWFyayB3aGV0aGVyIHRoZSBjdXJyZW50IGZyYW1lIGlzIHBsYXllZC5cbiAgICAvLyBXaGVuIHNldCBuZXcgdGltZSB0byBhbmltYXRpb24gc3RhdGUsIHdlIHNob3VsZCBlbnN1cmUgdGhlIGZyYW1lIGF0IHRoZSBzcGVjaWZpZWQgdGltZSBiZWluZyBwbGF5ZWQgYXQgbmV4dCB1cGRhdGUuXG4gICAgdGhpcy5fY3VycmVudEZyYW1lUGxheWVkID0gZmFsc2U7XG5cbiAgICB0aGlzLl9kZWxheSA9IDA7XG4gICAgdGhpcy5fZGVsYXlUaW1lID0gMDtcblxuICAgIHRoaXMuX3dyYXBwZWRJbmZvID0gbmV3IFdyYXBwZWRJbmZvKCk7XG4gICAgdGhpcy5fbGFzdFdyYXBwZWRJbmZvID0gbnVsbDtcblxuICAgIHRoaXMuX3Byb2Nlc3MgPSBwcm9jZXNzO1xuXG4gICAgdGhpcy5fY2xpcCA9IGNsaXA7XG4gICAgdGhpcy5fbmFtZSA9IG5hbWUgfHwgY2xpcCAmJiBjbGlwLm5hbWU7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgYW5pbWF0b3JcbiAgICAgKiBAdHlwZSB7QW5pbWF0aW9uQW5pbWF0b3J9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLmFuaW1hdG9yID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIGN1cnZlcyBsaXN0LlxuICAgICAqICEjemgg5puy57q/5YiX6KGo44CCXG4gICAgICogQHByb3BlcnR5IGN1cnZlc1xuICAgICAqIEB0eXBlIHtPYmplY3RbXX1cbiAgICAgKi9cbiAgICB0aGlzLmN1cnZlcyA9IFtdO1xuXG4gICAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvd2ViLWFuaW1hdGlvbnMvI2lkbC1kZWYtQW5pbWF0aW9uVGltaW5nXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBzdGFydCBkZWxheSB3aGljaCByZXByZXNlbnRzIHRoZSBudW1iZXIgb2Ygc2Vjb25kcyBmcm9tIGFuIGFuaW1hdGlvbidzIHN0YXJ0IHRpbWUgdG8gdGhlIHN0YXJ0IG9mXG4gICAgICogdGhlIGFjdGl2ZSBpbnRlcnZhbC5cbiAgICAgKiAhI3poIOW7tui/n+WkmuWwkeenkuaSreaUvuOAglxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGRlbGF5XG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgdGhpcy5kZWxheSA9IDA7XG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBhbmltYXRpb24ncyBpdGVyYXRpb24gY291bnQgcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBBIHJlYWwgbnVtYmVyIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB6ZXJvIChpbmNsdWRpbmcgcG9zaXRpdmUgaW5maW5pdHkpIHJlcHJlc2VudGluZyB0aGUgbnVtYmVyIG9mIHRpbWVzXG4gICAgICogdG8gcmVwZWF0IHRoZSBhbmltYXRpb24gbm9kZS5cbiAgICAgKlxuICAgICAqIFZhbHVlcyBsZXNzIHRoYW4gemVybyBhbmQgTmFOIHZhbHVlcyBhcmUgdHJlYXRlZCBhcyB0aGUgdmFsdWUgMS4wIGZvciB0aGUgcHVycG9zZSBvZiB0aW1pbmcgbW9kZWxcbiAgICAgKiBjYWxjdWxhdGlvbnMuXG4gICAgICpcbiAgICAgKiAhI3poIOi/reS7o+asoeaVsO+8jOaMh+WKqOeUu+aSreaUvuWkmuWwkeasoeWQjue7k+adnywgbm9ybWFsaXplIHRpbWXjgIIg5aaCIDIuNe+8iDLmrKHljYrvvIlcbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZXBlYXRDb3VudFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMVxuICAgICAqL1xuICAgIHRoaXMucmVwZWF0Q291bnQgPSAxO1xuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgaXRlcmF0aW9uIGR1cmF0aW9uIG9mIHRoaXMgYW5pbWF0aW9uIGluIHNlY29uZHMuIChsZW5ndGgpXG4gICAgICogISN6aCDljZXmrKHliqjnlLvnmoTmjIHnu63ml7bpl7TvvIznp5LjgIJcbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBkdXJhdGlvblxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgdGhpcy5kdXJhdGlvbiA9IDE7XG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBhbmltYXRpb24ncyBwbGF5YmFjayBzcGVlZC4gMSBpcyBub3JtYWwgcGxheWJhY2sgc3BlZWQuXG4gICAgICogISN6aCDmkq3mlL7pgJ/njofjgIJcbiAgICAgKiBAcHJvcGVydHkgc3BlZWRcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBkZWZhdWx0OiAxLjBcbiAgICAgKi9cbiAgICB0aGlzLnNwZWVkID0gMTtcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBXcmFwcGluZyBtb2RlIG9mIHRoZSBwbGF5aW5nIGFuaW1hdGlvbi5cbiAgICAgKiBOb3RpY2UgOiBkeW5hbWljIGNoYW5nZSB3cmFwTW9kZSB3aWxsIHJlc2V0IHRpbWUgYW5kIHJlcGVhdENvdW50IHByb3BlcnR5XG4gICAgICogISN6aFxuICAgICAqIOWKqOeUu+W+queOr+aWueW8j+OAglxuICAgICAqIOmcgOimgeazqOaEj+eahOaYr++8jOWKqOaAgeS/ruaUuSB3cmFwTW9kZSDml7bvvIzkvJrph43nva4gdGltZSDku6Xlj4ogcmVwZWF0Q291bnRcbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB3cmFwTW9kZVxuICAgICAqIEB0eXBlIHtXcmFwTW9kZX1cbiAgICAgKiBAZGVmYXVsdDogV3JhcE1vZGUuTm9ybWFsXG4gICAgICovXG4gICAgdGhpcy53cmFwTW9kZSA9IFdyYXBNb2RlLk5vcm1hbDtcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIGN1cnJlbnQgdGltZSBvZiB0aGlzIGFuaW1hdGlvbiBpbiBzZWNvbmRzLlxuICAgICAqICEjemgg5Yqo55S75b2T5YmN55qE5pe26Ze077yM56eS44CCXG4gICAgICogQHByb3BlcnR5IHRpbWVcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICB0aGlzLnRpbWUgPSAwO1xuXG4gICAgLy8gQW5pbWF0aW9uIGFzIGV2ZW50IHRhcmdldFxuICAgIHRoaXMuX3RhcmdldCA9IG51bGw7XG4gICAgdGhpcy5fbGFzdGZyYW1lRXZlbnRPbiA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJncy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICAgICAgY2MuZGlyZWN0b3IuZ2V0QW5pbWF0aW9uTWFuYWdlcigpLnB1c2hEZWxheUV2ZW50KHRoaXMsICdfZW1pdCcsIGFyZ3MpO1xuICAgIH07XG59XG5qcy5leHRlbmQoQW5pbWF0aW9uU3RhdGUsIFBsYXlhYmxlKTtcblxudmFyIHByb3RvID0gQW5pbWF0aW9uU3RhdGUucHJvdG90eXBlO1xuXG5wcm90by5fZW1pdCA9IGZ1bmN0aW9uICh0eXBlLCBzdGF0ZSkge1xuICAgIGlmICh0aGlzLl90YXJnZXQgJiYgdGhpcy5fdGFyZ2V0LmlzVmFsaWQpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0LmVtaXQodHlwZSwgdHlwZSwgc3RhdGUpO1xuICAgIH1cbn07XG5cbnByb3RvLm9uID0gZnVuY3Rpb24gKHR5cGUsIGNhbGxiYWNrLCB0YXJnZXQpIHtcbiAgICBpZiAodGhpcy5fdGFyZ2V0ICYmIHRoaXMuX3RhcmdldC5pc1ZhbGlkKSB7XG4gICAgICAgIGlmICh0eXBlID09PSAnbGFzdGZyYW1lJykge1xuICAgICAgICAgICAgdGhpcy5fbGFzdGZyYW1lRXZlbnRPbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3RhcmdldC5vbih0eXBlLCBjYWxsYmFjaywgdGFyZ2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59O1xuXG5wcm90by5vbmNlID0gZnVuY3Rpb24gKHR5cGUsIGNhbGxiYWNrLCB0YXJnZXQpIHtcbiAgICBpZiAodGhpcy5fdGFyZ2V0ICYmIHRoaXMuX3RhcmdldC5pc1ZhbGlkKSB7XG4gICAgICAgIGlmICh0eXBlID09PSAnbGFzdGZyYW1lJykge1xuICAgICAgICAgICAgdGhpcy5fbGFzdGZyYW1lRXZlbnRPbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5fdGFyZ2V0Lm9uY2UodHlwZSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBjYWxsYmFjay5jYWxsKHRhcmdldCwgZXZlbnQpO1xuICAgICAgICAgICAgc2VsZi5fbGFzdGZyYW1lRXZlbnRPbiA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59O1xuXG5wcm90by5vZmYgPSBmdW5jdGlvbiAodHlwZSwgY2FsbGJhY2ssIHRhcmdldCkge1xuICAgIGlmICh0aGlzLl90YXJnZXQgJiYgdGhpcy5fdGFyZ2V0LmlzVmFsaWQpIHtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdsYXN0ZnJhbWUnKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3RhcmdldC5oYXNFdmVudExpc3RlbmVyKHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGFzdGZyYW1lRXZlbnRPbiA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3RhcmdldC5vZmYodHlwZSwgY2FsbGJhY2ssIHRhcmdldCk7XG4gICAgfVxufTtcblxucHJvdG8uX3NldEV2ZW50VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHRoaXMuX3RhcmdldCA9IHRhcmdldDtcbn07XG5cbnByb3RvLm9uUGxheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyByZXBsYXlcbiAgICB0aGlzLnNldFRpbWUoMCk7XG4gICAgdGhpcy5fZGVsYXlUaW1lID0gdGhpcy5fZGVsYXk7XG5cbiAgICBjYy5kaXJlY3Rvci5nZXRBbmltYXRpb25NYW5hZ2VyKCkuYWRkQW5pbWF0aW9uKHRoaXMpO1xuXG4gICAgaWYgKHRoaXMuYW5pbWF0b3IpIHtcbiAgICAgICAgdGhpcy5hbmltYXRvci5hZGRBbmltYXRpb24odGhpcyk7XG4gICAgfVxuXG4gICAgdGhpcy5lbWl0KCdwbGF5JywgdGhpcyk7XG59O1xuXG5wcm90by5vblN0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLmlzUGF1c2VkKSB7XG4gICAgICAgIGNjLmRpcmVjdG9yLmdldEFuaW1hdGlvbk1hbmFnZXIoKS5yZW1vdmVBbmltYXRpb24odGhpcyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYW5pbWF0b3IpIHtcbiAgICAgICAgdGhpcy5hbmltYXRvci5yZW1vdmVBbmltYXRpb24odGhpcyk7XG4gICAgfVxuXG4gICAgdGhpcy5lbWl0KCdzdG9wJywgdGhpcyk7XG59O1xuXG5wcm90by5vblJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBjYy5kaXJlY3Rvci5nZXRBbmltYXRpb25NYW5hZ2VyKCkuYWRkQW5pbWF0aW9uKHRoaXMpO1xuICAgIHRoaXMuZW1pdCgncmVzdW1lJywgdGhpcyk7XG59O1xuXG5wcm90by5vblBhdXNlID0gZnVuY3Rpb24gKCkge1xuICAgIGNjLmRpcmVjdG9yLmdldEFuaW1hdGlvbk1hbmFnZXIoKS5yZW1vdmVBbmltYXRpb24odGhpcyk7XG4gICAgdGhpcy5lbWl0KCdwYXVzZScsIHRoaXMpO1xufTtcblxucHJvdG8uc2V0VGltZSA9IGZ1bmN0aW9uICh0aW1lKSB7XG4gICAgdGhpcy5fY3VycmVudEZyYW1lUGxheWVkID0gZmFsc2U7XG4gICAgdGhpcy50aW1lID0gdGltZSB8fCAwO1xuXG4gICAgdmFyIGN1cnZlcyA9IHRoaXMuY3VydmVzO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gY3VydmVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIgY3VydmUgPSBjdXJ2ZXNbaV07XG4gICAgICAgIGlmIChjdXJ2ZS5vblRpbWVDaGFuZ2VkTWFudWFsbHkpIHtcbiAgICAgICAgICAgIGN1cnZlLm9uVGltZUNoYW5nZWRNYW51YWxseSh0aW1lLCB0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmZ1bmN0aW9uIHByb2Nlc3MoKSB7XG4gICAgLy8gc2FtcGxlXG4gICAgdmFyIGluZm8gPSB0aGlzLnNhbXBsZSgpO1xuXG4gICAgaWYgKHRoaXMuX2xhc3RmcmFtZUV2ZW50T24pIHtcbiAgICAgICAgdmFyIGxhc3RJbmZvO1xuICAgICAgICBpZiAoIXRoaXMuX2xhc3RXcmFwcGVkSW5mbykge1xuICAgICAgICAgICAgbGFzdEluZm8gPSB0aGlzLl9sYXN0V3JhcHBlZEluZm8gPSBuZXcgV3JhcHBlZEluZm8oaW5mbyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsYXN0SW5mbyA9IHRoaXMuX2xhc3RXcmFwcGVkSW5mbztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnJlcGVhdENvdW50ID4gMSAmJiAoaW5mby5pdGVyYXRpb25zIHwgMCkgPiAobGFzdEluZm8uaXRlcmF0aW9ucyB8IDApKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2xhc3RmcmFtZScsIHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGFzdEluZm8uc2V0KGluZm8pO1xuICAgIH1cblxuICAgIGlmIChpbmZvLnN0b3BwZWQpIHtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIHRoaXMuZW1pdCgnZmluaXNoZWQnLCB0aGlzKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNpbXBsZVByb2Nlc3MoKSB7XG4gICAgdmFyIHRpbWUgPSB0aGlzLnRpbWU7XG4gICAgdmFyIGR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbjtcblxuICAgIGlmICh0aW1lID4gZHVyYXRpb24pIHtcbiAgICAgICAgdGltZSA9IHRpbWUgJSBkdXJhdGlvbjtcbiAgICAgICAgaWYgKHRpbWUgPT09IDApIHRpbWUgPSBkdXJhdGlvbjtcbiAgICB9IGVsc2UgaWYgKHRpbWUgPCAwKSB7XG4gICAgICAgIHRpbWUgPSB0aW1lICUgZHVyYXRpb247XG4gICAgICAgIGlmICh0aW1lICE9PSAwKSB0aW1lICs9IGR1cmF0aW9uO1xuICAgIH1cblxuICAgIHZhciByYXRpbyA9IHRpbWUgLyBkdXJhdGlvbjtcblxuICAgIHZhciBjdXJ2ZXMgPSB0aGlzLmN1cnZlcztcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY3VydmVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHZhciBjdXJ2ZSA9IGN1cnZlc1tpXTtcbiAgICAgICAgY3VydmUuc2FtcGxlKHRpbWUsIHJhdGlvLCB0aGlzKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGFzdGZyYW1lRXZlbnRPbikge1xuICAgICAgICBpZiAodGhpcy5fbGFzdEl0ZXJhdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fbGFzdEl0ZXJhdGlvbnMgPSByYXRpbztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnRpbWUgPiAwICYmIHRoaXMuX2xhc3RJdGVyYXRpb25zID4gcmF0aW8gfHwgdGhpcy50aW1lIDwgMCAmJiB0aGlzLl9sYXN0SXRlcmF0aW9ucyA8IHJhdGlvKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2xhc3RmcmFtZScsIHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbGFzdEl0ZXJhdGlvbnMgPSByYXRpbztcbiAgICB9XG59XG5cbnByb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIChkZWx0YSkge1xuICAgIC8vIGNhbGN1bGF0ZSBkZWxheSB0aW1lXG5cbiAgICBpZiAodGhpcy5fZGVsYXlUaW1lID4gMCkge1xuICAgICAgICB0aGlzLl9kZWxheVRpbWUgLT0gZGVsdGE7XG4gICAgICAgIGlmICh0aGlzLl9kZWxheVRpbWUgPiAwKSB7XG4gICAgICAgICAgICAvLyBzdGlsbCB3YWl0aW5nXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBtYWtlIGZpcnN0IGZyYW1lIHBlcmZlY3RcblxuICAgIC8vdmFyIHBsYXlQZXJmZWN0Rmlyc3RGcmFtZSA9ICh0aGlzLnRpbWUgPT09IDApO1xuICAgIGlmICh0aGlzLl9jdXJyZW50RnJhbWVQbGF5ZWQpIHtcbiAgICAgICAgdGhpcy50aW1lICs9IGRlbHRhICogdGhpcy5zcGVlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9jdXJyZW50RnJhbWVQbGF5ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuX3Byb2Nlc3MoKTtcbn07XG5cbnByb3RvLl9uZWVkUmV2ZXJzID0gZnVuY3Rpb24gKGN1cnJlbnRJdGVyYXRpb25zKSB7XG4gICAgdmFyIHdyYXBNb2RlID0gdGhpcy53cmFwTW9kZTtcbiAgICB2YXIgbmVlZFJldmVycyA9IGZhbHNlO1xuXG4gICAgaWYgKCh3cmFwTW9kZSAmIFdyYXBNb2RlTWFzay5QaW5nUG9uZykgPT09IFdyYXBNb2RlTWFzay5QaW5nUG9uZykge1xuICAgICAgICB2YXIgaXNFbmQgPSBjdXJyZW50SXRlcmF0aW9ucyAtIChjdXJyZW50SXRlcmF0aW9ucyB8IDApID09PSAwO1xuICAgICAgICBpZiAoaXNFbmQgJiYgY3VycmVudEl0ZXJhdGlvbnMgPiAwKSB7XG4gICAgICAgICAgICBjdXJyZW50SXRlcmF0aW9ucyAtPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlzT2RkSXRlcmF0aW9uID0gY3VycmVudEl0ZXJhdGlvbnMgJiAxO1xuICAgICAgICBpZiAoaXNPZGRJdGVyYXRpb24pIHtcbiAgICAgICAgICAgIG5lZWRSZXZlcnMgPSAhbmVlZFJldmVycztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoKHdyYXBNb2RlICYgV3JhcE1vZGVNYXNrLlJldmVyc2UpID09PSBXcmFwTW9kZU1hc2suUmV2ZXJzZSkge1xuICAgICAgICBuZWVkUmV2ZXJzID0gIW5lZWRSZXZlcnM7XG4gICAgfVxuICAgIHJldHVybiBuZWVkUmV2ZXJzO1xufTtcblxucHJvdG8uZ2V0V3JhcHBlZEluZm8gPSBmdW5jdGlvbiAodGltZSwgaW5mbykge1xuICAgIGluZm8gPSBpbmZvIHx8IG5ldyBXcmFwcGVkSW5mbygpO1xuXG4gICAgdmFyIHN0b3BwZWQgPSBmYWxzZTtcbiAgICB2YXIgZHVyYXRpb24gPSB0aGlzLmR1cmF0aW9uO1xuICAgIHZhciByZXBlYXRDb3VudCA9IHRoaXMucmVwZWF0Q291bnQ7XG5cbiAgICB2YXIgY3VycmVudEl0ZXJhdGlvbnMgPSB0aW1lID4gMCA/IHRpbWUgLyBkdXJhdGlvbiA6IC0odGltZSAvIGR1cmF0aW9uKTtcbiAgICBpZiAoY3VycmVudEl0ZXJhdGlvbnMgPj0gcmVwZWF0Q291bnQpIHtcbiAgICAgICAgY3VycmVudEl0ZXJhdGlvbnMgPSByZXBlYXRDb3VudDtcblxuICAgICAgICBzdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgdmFyIHRlbXBSYXRpbyA9IHJlcGVhdENvdW50IC0gKHJlcGVhdENvdW50IHwgMCk7XG4gICAgICAgIGlmICh0ZW1wUmF0aW8gPT09IDApIHtcbiAgICAgICAgICAgIHRlbXBSYXRpbyA9IDE7IC8vIOWmguaenOaSreaUvui/h++8jOWKqOeUu+S4jeWkjeS9jVxuICAgICAgICB9XG4gICAgICAgIHRpbWUgPSB0ZW1wUmF0aW8gKiBkdXJhdGlvbiAqICh0aW1lID4gMCA/IDEgOiAtMSk7XG4gICAgfVxuXG4gICAgaWYgKHRpbWUgPiBkdXJhdGlvbikge1xuICAgICAgICB2YXIgdGVtcFRpbWUgPSB0aW1lICUgZHVyYXRpb247XG4gICAgICAgIHRpbWUgPSB0ZW1wVGltZSA9PT0gMCA/IGR1cmF0aW9uIDogdGVtcFRpbWU7XG4gICAgfSBlbHNlIGlmICh0aW1lIDwgMCkge1xuICAgICAgICB0aW1lID0gdGltZSAlIGR1cmF0aW9uO1xuICAgICAgICBpZiAodGltZSAhPT0gMCkgdGltZSArPSBkdXJhdGlvbjtcbiAgICB9XG5cbiAgICB2YXIgbmVlZFJldmVycyA9IGZhbHNlO1xuICAgIHZhciBzaG91bGRXcmFwID0gdGhpcy5fd3JhcE1vZGUgJiBXcmFwTW9kZU1hc2suU2hvdWxkV3JhcDtcbiAgICBpZiAoc2hvdWxkV3JhcCkge1xuICAgICAgICBuZWVkUmV2ZXJzID0gdGhpcy5fbmVlZFJldmVycyhjdXJyZW50SXRlcmF0aW9ucyk7XG4gICAgfVxuXG4gICAgdmFyIGRpcmVjdGlvbiA9IG5lZWRSZXZlcnMgPyAtMSA6IDE7XG4gICAgaWYgKHRoaXMuc3BlZWQgPCAwKSB7XG4gICAgICAgIGRpcmVjdGlvbiAqPSAtMTtcbiAgICB9XG5cbiAgICAvLyBjYWxjdWxhdGUgd3JhcHBlZCB0aW1lXG4gICAgaWYgKHNob3VsZFdyYXAgJiYgbmVlZFJldmVycykge1xuICAgICAgICB0aW1lID0gZHVyYXRpb24gLSB0aW1lO1xuICAgIH1cblxuICAgIGluZm8ucmF0aW8gPSB0aW1lIC8gZHVyYXRpb247XG4gICAgaW5mby50aW1lID0gdGltZTtcbiAgICBpbmZvLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbiAgICBpbmZvLnN0b3BwZWQgPSBzdG9wcGVkO1xuICAgIGluZm8uaXRlcmF0aW9ucyA9IGN1cnJlbnRJdGVyYXRpb25zO1xuXG4gICAgcmV0dXJuIGluZm87XG59O1xuXG5wcm90by5zYW1wbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGluZm8gPSB0aGlzLmdldFdyYXBwZWRJbmZvKHRoaXMudGltZSwgdGhpcy5fd3JhcHBlZEluZm8pO1xuICAgIHZhciBjdXJ2ZXMgPSB0aGlzLmN1cnZlcztcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY3VydmVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHZhciBjdXJ2ZSA9IGN1cnZlc1tpXTtcbiAgICAgICAgY3VydmUuc2FtcGxlKGluZm8udGltZSwgaW5mby5yYXRpbywgdGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluZm87XG59O1xuXG4vKipcbiAqICEjZW4gVGhlIGNsaXAgdGhhdCBpcyBiZWluZyBwbGF5ZWQgYnkgdGhpcyBhbmltYXRpb24gc3RhdGUuXG4gKiAhI3poIOatpOWKqOeUu+eKtuaAgeato+WcqOaSreaUvueahOWJqui+keOAglxuICogQHByb3BlcnR5IGNsaXBcbiAqIEB0eXBlIHtBbmltYXRpb25DbGlwfVxuICogQGZpbmFsXG4gKi9cbmpzLmdldChwcm90bywgJ2NsaXAnLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaXA7XG59KTtcblxuLyoqXG4gKiAhI2VuIFRoZSBuYW1lIG9mIHRoZSBwbGF5aW5nIGFuaW1hdGlvbi5cbiAqICEjemgg5Yqo55S755qE5ZCN5a2XXG4gKiBAcHJvcGVydHkgbmFtZVxuICogQHR5cGUge1N0cmluZ31cbiAqIEByZWFkT25seVxuICovXG5qcy5nZXQocHJvdG8sICduYW1lJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9uYW1lO1xufSk7XG5cbmpzLm9ic29sZXRlKHByb3RvLCAnQW5pbWF0aW9uU3RhdGUubGVuZ3RoJywgJ2R1cmF0aW9uJyk7XG5cbmpzLmdldHNldChwcm90bywgJ2N1cnZlTG9hZGVkJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnZlcy5sZW5ndGggPiAwO1xufSwgZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY3VydmVzLmxlbmd0aCA9IDA7XG59KTtcblxuanMuZ2V0c2V0KHByb3RvLCAnd3JhcE1vZGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyYXBNb2RlO1xufSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5fd3JhcE1vZGUgPSB2YWx1ZTtcblxuICAgIGlmIChDQ19FRElUT1IpIHJldHVybjtcblxuICAgIC8vIGR5bmFtaWMgY2hhbmdlIHdyYXBNb2RlIHdpbGwgbmVlZCByZXNldCB0aW1lIHRvIDBcbiAgICB0aGlzLnRpbWUgPSAwO1xuXG4gICAgaWYgKHZhbHVlICYgV3JhcE1vZGVNYXNrLkxvb3ApIHtcbiAgICAgICAgdGhpcy5yZXBlYXRDb3VudCA9IEluZmluaXR5O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVwZWF0Q291bnQgPSAxO1xuICAgIH1cbn0pO1xuXG5qcy5nZXRzZXQocHJvdG8sICdyZXBlYXRDb3VudCcsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVwZWF0Q291bnQ7XG59LCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLl9yZXBlYXRDb3VudCA9IHZhbHVlO1xuXG4gICAgdmFyIHNob3VsZFdyYXAgPSB0aGlzLl93cmFwTW9kZSAmIFdyYXBNb2RlTWFzay5TaG91bGRXcmFwO1xuICAgIHZhciByZXZlcnNlID0gKHRoaXMud3JhcE1vZGUgJiBXcmFwTW9kZU1hc2suUmV2ZXJzZSkgPT09IFdyYXBNb2RlTWFzay5SZXZlcnNlO1xuICAgIGlmICh2YWx1ZSA9PT0gSW5maW5pdHkgJiYgIXNob3VsZFdyYXAgJiYgIXJldmVyc2UpIHtcbiAgICAgICAgdGhpcy5fcHJvY2VzcyA9IHNpbXBsZVByb2Nlc3M7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcHJvY2VzcyA9IHByb2Nlc3M7XG4gICAgfVxufSk7XG5cbmpzLmdldHNldChwcm90bywgJ2RlbGF5JywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWxheTtcbn0sIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuX2RlbGF5VGltZSA9IHRoaXMuX2RlbGF5ID0gdmFsdWU7XG59KTtcblxuY2MuQW5pbWF0aW9uU3RhdGUgPSBtb2R1bGUuZXhwb3J0cyA9IEFuaW1hdGlvblN0YXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1GdWFXMWhkR2x2YmkxemRHRjBaUzVxY3lKZExDSnVZVzFsY3lJNld5SnFjeUlzSW1Oaklpd2lVR3hoZVdGaWJHVWlMQ0p5WlhGMWFYSmxJaXdpVkhsd1pYTWlMQ0pYY21Gd2NHVmtTVzVtYnlJc0lsZHlZWEJOYjJSbElpd2lWM0poY0UxdlpHVk5ZWE5ySWl3aVFXNXBiV0YwYVc5dVUzUmhkR1VpTENKamJHbHdJaXdpYm1GdFpTSXNJbU5oYkd3aUxDSmZZM1Z5Y21WdWRFWnlZVzFsVUd4aGVXVmtJaXdpWDJSbGJHRjVJaXdpWDJSbGJHRjVWR2x0WlNJc0lsOTNjbUZ3Y0dWa1NXNW1ieUlzSWw5c1lYTjBWM0poY0hCbFpFbHVabThpTENKZmNISnZZMlZ6Y3lJc0luQnliMk5sYzNNaUxDSmZZMnhwY0NJc0lsOXVZVzFsSWl3aVlXNXBiV0YwYjNJaUxDSmpkWEoyWlhNaUxDSmtaV3hoZVNJc0luSmxjR1ZoZEVOdmRXNTBJaXdpWkhWeVlYUnBiMjRpTENKemNHVmxaQ0lzSW5keVlYQk5iMlJsSWl3aVRtOXliV0ZzSWl3aWRHbHRaU0lzSWw5MFlYSm5aWFFpTENKZmJHRnpkR1p5WVcxbFJYWmxiblJQYmlJc0ltVnRhWFFpTENKaGNtZHpJaXdpUVhKeVlYa2lMQ0poY21kMWJXVnVkSE1pTENKc1pXNW5kR2dpTENKcElpd2liQ0lzSW1ScGNtVmpkRzl5SWl3aVoyVjBRVzVwYldGMGFXOXVUV0Z1WVdkbGNpSXNJbkIxYzJoRVpXeGhlVVYyWlc1MElpd2laWGgwWlc1a0lpd2ljSEp2ZEc4aUxDSndjbTkwYjNSNWNHVWlMQ0pmWlcxcGRDSXNJblI1Y0dVaUxDSnpkR0YwWlNJc0ltbHpWbUZzYVdRaUxDSnZiaUlzSW1OaGJHeGlZV05ySWl3aWRHRnlaMlYwSWl3aWIyNWpaU0lzSW5ObGJHWWlMQ0psZG1WdWRDSXNJbTltWmlJc0ltaGhjMFYyWlc1MFRHbHpkR1Z1WlhJaUxDSmZjMlYwUlhabGJuUlVZWEpuWlhRaUxDSnZibEJzWVhraUxDSnpaWFJVYVcxbElpd2lZV1JrUVc1cGJXRjBhVzl1SWl3aWIyNVRkRzl3SWl3aWFYTlFZWFZ6WldRaUxDSnlaVzF2ZG1WQmJtbHRZWFJwYjI0aUxDSnZibEpsYzNWdFpTSXNJbTl1VUdGMWMyVWlMQ0pqZFhKMlpTSXNJbTl1VkdsdFpVTm9ZVzVuWldSTllXNTFZV3hzZVNJc0ltbHVabThpTENKellXMXdiR1VpTENKc1lYTjBTVzVtYnlJc0ltbDBaWEpoZEdsdmJuTWlMQ0p6WlhRaUxDSnpkRzl3Y0dWa0lpd2ljM1J2Y0NJc0luTnBiWEJzWlZCeWIyTmxjM01pTENKeVlYUnBieUlzSW14bGJpSXNJbDlzWVhOMFNYUmxjbUYwYVc5dWN5SXNJblZ1WkdWbWFXNWxaQ0lzSW5Wd1pHRjBaU0lzSW1SbGJIUmhJaXdpWDI1bFpXUlNaWFpsY25NaUxDSmpkWEp5Wlc1MFNYUmxjbUYwYVc5dWN5SXNJbTVsWldSU1pYWmxjbk1pTENKUWFXNW5VRzl1WnlJc0ltbHpSVzVrSWl3aWFYTlBaR1JKZEdWeVlYUnBiMjRpTENKU1pYWmxjbk5sSWl3aVoyVjBWM0poY0hCbFpFbHVabThpTENKMFpXMXdVbUYwYVc4aUxDSjBaVzF3VkdsdFpTSXNJbk5vYjNWc1pGZHlZWEFpTENKZmQzSmhjRTF2WkdVaUxDSlRhRzkxYkdSWGNtRndJaXdpWkdseVpXTjBhVzl1SWl3aVoyVjBJaXdpYjJKemIyeGxkR1VpTENKblpYUnpaWFFpTENKMllXeDFaU0lzSWtORFgwVkVTVlJQVWlJc0lreHZiM0FpTENKSmJtWnBibWwwZVNJc0lsOXlaWEJsWVhSRGIzVnVkQ0lzSW5KbGRtVnljMlVpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQk1FSkJMRWxCUVVsQkxFdEJRVXRETEVkQlFVZEVMRVZCUVZvN1FVRkRRU3hKUVVGSlJTeFhRVUZYUXl4UlFVRlJMRmxCUVZJc1EwRkJaanM3UVVGRlFTeEpRVUZKUXl4UlFVRlJSQ3hSUVVGUkxGTkJRVklzUTBGQldqdEJRVU5CTEVsQlFVbEZMR05CUVdORUxFMUJRVTFETEZkQlFYaENPMEZCUTBFc1NVRkJTVU1zVjBGQlYwWXNUVUZCVFVVc1VVRkJja0k3UVVGRFFTeEpRVUZKUXl4bFFVRmxTQ3hOUVVGTlJ5eFpRVUY2UWpzN1FVRkZRVHM3T3pzN096czdPenM3TzBGQldVRTdPenM3TzBGQlMwRXNVMEZCVTBNc1kwRkJWQ3hEUVVGNVFrTXNTVUZCZWtJc1JVRkJLMEpETEVsQlFTOUNMRVZCUVhGRE8wRkJRMnBEVWl4aFFVRlRVeXhKUVVGVUxFTkJRV01zU1VGQlpEczdRVUZGUVR0QlFVTkJPMEZCUTBFc1UwRkJTME1zYlVKQlFVd3NSMEZCTWtJc1MwRkJNMEk3TzBGQlJVRXNVMEZCUzBNc1RVRkJUQ3hIUVVGakxFTkJRV1E3UVVGRFFTeFRRVUZMUXl4VlFVRk1MRWRCUVd0Q0xFTkJRV3hDT3p0QlFVVkJMRk5CUVV0RExGbEJRVXdzUjBGQmIwSXNTVUZCU1ZZc1YwRkJTaXhGUVVGd1FqdEJRVU5CTEZOQlFVdFhMR2RDUVVGTUxFZEJRWGRDTEVsQlFYaENPenRCUVVWQkxGTkJRVXRETEZGQlFVd3NSMEZCWjBKRExFOUJRV2hDT3p0QlFVVkJMRk5CUVV0RExFdEJRVXdzUjBGQllWWXNTVUZCWWp0QlFVTkJMRk5CUVV0WExFdEJRVXdzUjBGQllWWXNVVUZCVTBRc1VVRkJVVUVzUzBGQlMwTXNTVUZCYmtNN08wRkJSVUU3T3pzN08wRkJTMEVzVTBGQlMxY3NVVUZCVEN4SFFVRm5RaXhKUVVGb1FqczdRVUZGUVRzN096czdPMEZCVFVFc1UwRkJTME1zVFVGQlRDeEhRVUZqTEVWQlFXUTdPMEZCUlVFN08wRkJSVUU3T3pzN096czdPenRCUVZOQkxGTkJRVXRETEV0QlFVd3NSMEZCWVN4RFFVRmlPenRCUVVWQk96czdPenM3T3pzN096czdPenM3UVVGbFFTeFRRVUZMUXl4WFFVRk1MRWRCUVcxQ0xFTkJRVzVDT3p0QlFVVkJPenM3T3pzN096dEJRVkZCTEZOQlFVdERMRkZCUVV3c1IwRkJaMElzUTBGQmFFSTdPMEZCUlVFN096czdPenM3UVVGUFFTeFRRVUZMUXl4TFFVRk1MRWRCUVdFc1EwRkJZanM3UVVGRlFUczdPenM3T3pzN096czdPMEZCV1VFc1UwRkJTME1zVVVGQlRDeEhRVUZuUW5KQ0xGTkJRVk56UWl4TlFVRjZRanM3UVVGRlFUczdPenM3T3p0QlFVOUJMRk5CUVV0RExFbEJRVXdzUjBGQldTeERRVUZhT3p0QlFVVkJPMEZCUTBFc1UwRkJTME1zVDBGQlRDeEhRVUZsTEVsQlFXWTdRVUZEUVN4VFFVRkxReXhwUWtGQlRDeEhRVUY1UWl4TFFVRjZRanRCUVVOQkxGTkJRVXRETEVsQlFVd3NSMEZCV1N4WlFVRlpPMEZCUTNCQ0xGbEJRVWxETEU5QlFVOHNTVUZCU1VNc1MwRkJTaXhEUVVGVlF5eFZRVUZWUXl4TlFVRndRaXhEUVVGWU8wRkJRMEVzWVVGQlN5eEpRVUZKUXl4SlFVRkpMRU5CUVZJc1JVRkJWME1zU1VGQlNVd3NTMEZCUzBjc1RVRkJla0lzUlVGQmFVTkRMRWxCUVVsRExFTkJRWEpETEVWQlFYZERSQ3hIUVVGNFF5eEZRVUUyUXp0QlFVTjZRMG9zYVVKQlFVdEpMRU5CUVV3c1NVRkJWVVlzVlVGQlZVVXNRMEZCVml4RFFVRldPMEZCUTBnN1FVRkRSSEJETEZkQlFVZHpReXhSUVVGSUxFTkJRVmxETEcxQ1FVRmFMRWRCUVd0RFF5eGpRVUZzUXl4RFFVRnBSQ3hKUVVGcVJDeEZRVUYxUkN4UFFVRjJSQ3hGUVVGblJWSXNTVUZCYUVVN1FVRkRTQ3hMUVU1RU8wRkJUMGc3UVVGRFJHcERMRWRCUVVjd1F5eE5RVUZJTEVOQlFWVnNReXhqUVVGV0xFVkJRVEJDVGl4UlFVRXhRanM3UVVGRlFTeEpRVUZKZVVNc1VVRkJVVzVETEdWQlFXVnZReXhUUVVFelFqczdRVUZGUVVRc1RVRkJUVVVzUzBGQlRpeEhRVUZqTEZWQlFWVkRMRWxCUVZZc1JVRkJaMEpETEV0QlFXaENMRVZCUVhWQ08wRkJRMnBETEZGQlFVa3NTMEZCUzJwQ0xFOUJRVXdzU1VGQlowSXNTMEZCUzBFc1QwRkJUQ3hEUVVGaGEwSXNUMEZCYWtNc1JVRkJNRU03UVVGRGRFTXNZVUZCUzJ4Q0xFOUJRVXdzUTBGQllVVXNTVUZCWWl4RFFVRnJRbU1zU1VGQmJFSXNSVUZCZDBKQkxFbEJRWGhDTEVWQlFUaENReXhMUVVFNVFqdEJRVU5JTzBGQlEwb3NRMEZLUkRzN1FVRk5RVW9zVFVGQlRVMHNSVUZCVGl4SFFVRlhMRlZCUVZWSUxFbEJRVllzUlVGQlowSkpMRkZCUVdoQ0xFVkJRVEJDUXl4TlFVRXhRaXhGUVVGclF6dEJRVU42UXl4UlFVRkpMRXRCUVV0eVFpeFBRVUZNTEVsQlFXZENMRXRCUVV0QkxFOUJRVXdzUTBGQllXdENMRTlCUVdwRExFVkJRVEJETzBGQlEzUkRMRmxCUVVsR0xGTkJRVk1zVjBGQllpeEZRVUV3UWp0QlFVTjBRaXhwUWtGQlMyWXNhVUpCUVV3c1IwRkJlVUlzU1VGQmVrSTdRVUZEU0R0QlFVTkVMR1ZCUVU4c1MwRkJTMFFzVDBGQlRDeERRVUZoYlVJc1JVRkJZaXhEUVVGblFrZ3NTVUZCYUVJc1JVRkJjMEpKTEZGQlFYUkNMRVZCUVdkRFF5eE5RVUZvUXl4RFFVRlFPMEZCUTBnc1MwRk1SQ3hOUVUxTE8wRkJRMFFzWlVGQlR5eEpRVUZRTzBGQlEwZzdRVUZEU2l4RFFWWkVPenRCUVZsQlVpeE5RVUZOVXl4SlFVRk9MRWRCUVdFc1ZVRkJWVTRzU1VGQlZpeEZRVUZuUWtrc1VVRkJhRUlzUlVGQk1FSkRMRTFCUVRGQ0xFVkJRV3RETzBGQlF6TkRMRkZCUVVrc1MwRkJTM0pDTEU5QlFVd3NTVUZCWjBJc1MwRkJTMEVzVDBGQlRDeERRVUZoYTBJc1QwRkJha01zUlVGQk1FTTdRVUZEZEVNc1dVRkJTVVlzVTBGQlV5eFhRVUZpTEVWQlFUQkNPMEZCUTNSQ0xHbENRVUZMWml4cFFrRkJUQ3hIUVVGNVFpeEpRVUY2UWp0QlFVTklPMEZCUTBRc1dVRkJTWE5DTEU5QlFVOHNTVUZCV0R0QlFVTkJMR1ZCUVU4c1MwRkJTM1pDTEU5QlFVd3NRMEZCWVhOQ0xFbEJRV0lzUTBGQmEwSk9MRWxCUVd4Q0xFVkJRWGRDTEZWQlFWVlJMRXRCUVZZc1JVRkJhVUk3UVVGRE5VTktMSEZDUVVGVGRrTXNTVUZCVkN4RFFVRmpkME1zVFVGQlpDeEZRVUZ6UWtjc1MwRkJkRUk3UVVGRFFVUXNhVUpCUVV0MFFpeHBRa0ZCVEN4SFFVRjVRaXhMUVVGNlFqdEJRVU5JTEZOQlNFMHNRMEZCVUR0QlFVbElMRXRCVkVRc1RVRlZTenRCUVVORUxHVkJRVThzU1VGQlVEdEJRVU5JTzBGQlEwb3NRMEZrUkRzN1FVRm5Ra0ZaTEUxQlFVMVpMRWRCUVU0c1IwRkJXU3hWUVVGVlZDeEpRVUZXTEVWQlFXZENTU3hSUVVGb1FpeEZRVUV3UWtNc1RVRkJNVUlzUlVGQmEwTTdRVUZETVVNc1VVRkJTU3hMUVVGTGNrSXNUMEZCVEN4SlFVRm5RaXhMUVVGTFFTeFBRVUZNTEVOQlFXRnJRaXhQUVVGcVF5eEZRVUV3UXp0QlFVTjBReXhaUVVGSlJpeFRRVUZUTEZkQlFXSXNSVUZCTUVJN1FVRkRkRUlzWjBKQlFVa3NRMEZCUXl4TFFVRkxhRUlzVDBGQlRDeERRVUZoTUVJc1owSkJRV0lzUTBGQk9FSldMRWxCUVRsQ0xFTkJRVXdzUlVGQk1FTTdRVUZEZEVNc2NVSkJRVXRtTEdsQ1FVRk1MRWRCUVhsQ0xFdEJRWHBDTzBGQlEwZzdRVUZEU2p0QlFVTkVMR0ZCUVV0RUxFOUJRVXdzUTBGQllYbENMRWRCUVdJc1EwRkJhVUpVTEVsQlFXcENMRVZCUVhWQ1NTeFJRVUYyUWl4RlFVRnBRME1zVFVGQmFrTTdRVUZEU0R0QlFVTktMRU5CVkVRN08wRkJWMEZTTEUxQlFVMWpMR1ZCUVU0c1IwRkJkMElzVlVGQlZVNHNUVUZCVml4RlFVRnJRanRCUVVOMFF5eFRRVUZMY2tJc1QwRkJUQ3hIUVVGbGNVSXNUVUZCWmp0QlFVTklMRU5CUmtRN08wRkJTVUZTTEUxQlFVMWxMRTFCUVU0c1IwRkJaU3haUVVGWk8wRkJRM1pDTzBGQlEwRXNVMEZCUzBNc1QwRkJUQ3hEUVVGaExFTkJRV0k3UVVGRFFTeFRRVUZMTjBNc1ZVRkJUQ3hIUVVGclFpeExRVUZMUkN4TlFVRjJRanM3UVVGRlFWb3NUMEZCUjNORExGRkJRVWdzUTBGQldVTXNiVUpCUVZvc1IwRkJhME52UWl4WlFVRnNReXhEUVVFclF5eEpRVUV2UXpzN1FVRkZRU3hSUVVGSkxFdEJRVXQyUXl4UlFVRlVMRVZCUVcxQ08wRkJRMllzWVVGQlMwRXNVVUZCVEN4RFFVRmpkVU1zV1VGQlpDeERRVUV5UWl4SlFVRXpRanRCUVVOSU96dEJRVVZFTEZOQlFVczFRaXhKUVVGTUxFTkJRVlVzVFVGQlZpeEZRVUZyUWl4SlFVRnNRanRCUVVOSUxFTkJXa1E3TzBGQlkwRlhMRTFCUVUxclFpeE5RVUZPTEVkQlFXVXNXVUZCV1R0QlFVTjJRaXhSUVVGSkxFTkJRVU1zUzBGQlMwTXNVVUZCVml4RlFVRnZRanRCUVVOb1FqZEVMRmRCUVVkelF5eFJRVUZJTEVOQlFWbERMRzFDUVVGYUxFZEJRV3REZFVJc1pVRkJiRU1zUTBGQmEwUXNTVUZCYkVRN1FVRkRTRHM3UVVGRlJDeFJRVUZKTEV0QlFVc3hReXhSUVVGVUxFVkJRVzFDTzBGQlEyWXNZVUZCUzBFc1VVRkJUQ3hEUVVGak1FTXNaVUZCWkN4RFFVRTRRaXhKUVVFNVFqdEJRVU5JT3p0QlFVVkVMRk5CUVVzdlFpeEpRVUZNTEVOQlFWVXNUVUZCVml4RlFVRnJRaXhKUVVGc1FqdEJRVU5JTEVOQlZrUTdPMEZCV1VGWExFMUJRVTF4UWl4UlFVRk9MRWRCUVdsQ0xGbEJRVms3UVVGRGVrSXZSQ3hQUVVGSGMwTXNVVUZCU0N4RFFVRlpReXh0UWtGQldpeEhRVUZyUTI5Q0xGbEJRV3hETEVOQlFTdERMRWxCUVM5RE8wRkJRMEVzVTBGQlN6VkNMRWxCUVV3c1EwRkJWU3hSUVVGV0xFVkJRVzlDTEVsQlFYQkNPMEZCUTBnc1EwRklSRHM3UVVGTFFWY3NUVUZCVFhOQ0xFOUJRVTRzUjBGQlowSXNXVUZCV1R0QlFVTjRRbWhGTEU5QlFVZHpReXhSUVVGSUxFTkJRVmxETEcxQ1FVRmFMRWRCUVd0RGRVSXNaVUZCYkVNc1EwRkJhMFFzU1VGQmJFUTdRVUZEUVN4VFFVRkxMMElzU1VGQlRDeERRVUZWTEU5QlFWWXNSVUZCYlVJc1NVRkJia0k3UVVGRFNDeERRVWhFT3p0QlFVdEJWeXhOUVVGTlowSXNUMEZCVGl4SFFVRm5RaXhWUVVGVk9VSXNTVUZCVml4RlFVRm5RanRCUVVNMVFpeFRRVUZMYWtJc2JVSkJRVXdzUjBGQk1rSXNTMEZCTTBJN1FVRkRRU3hUUVVGTGFVSXNTVUZCVEN4SFFVRlpRU3hSUVVGUkxFTkJRWEJDT3p0QlFVVkJMRkZCUVVsUUxGTkJRVk1zUzBGQlMwRXNUVUZCYkVJN1FVRkRRU3hUUVVGTExFbEJRVWxsTEVsQlFVa3NRMEZCVWl4RlFVRlhReXhKUVVGSmFFSXNUMEZCVDJNc1RVRkJNMElzUlVGQmJVTkRMRWxCUVVsRExFTkJRWFpETEVWQlFUQkRSQ3hIUVVFeFF5eEZRVUVyUXp0QlFVTXpReXhaUVVGSk5rSXNVVUZCVVRWRExFOUJRVTlsTEVOQlFWQXNRMEZCV2p0QlFVTkJMRmxCUVVrMlFpeE5RVUZOUXl4eFFrRkJWaXhGUVVGcFF6dEJRVU0zUWtRc2EwSkJRVTFETEhGQ1FVRk9MRU5CUVRSQ2RFTXNTVUZCTlVJc1JVRkJhME1zU1VGQmJFTTdRVUZEU0R0QlFVTktPMEZCUTBvc1EwRllSRHM3UVVGaFFTeFRRVUZUV0N4UFFVRlVMRWRCUVc5Q08wRkJRMmhDTzBGQlEwRXNVVUZCU1d0RUxFOUJRVThzUzBGQlMwTXNUVUZCVEN4RlFVRllPenRCUVVWQkxGRkJRVWtzUzBGQlMzUkRMR2xDUVVGVUxFVkJRVFJDTzBGQlEzaENMRmxCUVVsMVF5eFJRVUZLTzBGQlEwRXNXVUZCU1N4RFFVRkRMRXRCUVV0MFJDeG5Ra0ZCVml4RlFVRTBRanRCUVVONFFuTkVMSFZDUVVGWExFdEJRVXQwUkN4blFrRkJUQ3hIUVVGM1FpeEpRVUZKV0N4WFFVRktMRU5CUVdkQ0swUXNTVUZCYUVJc1EwRkJia003UVVGRFNDeFRRVVpFTEUxQlJVODdRVUZEU0VVc2RVSkJRVmNzUzBGQlMzUkVMR2RDUVVGb1FqdEJRVU5JT3p0QlFVVkVMRmxCUVVrc1MwRkJTMUVzVjBGQlRDeEhRVUZ0UWl4RFFVRnVRaXhKUVVGNVFpeERRVUZETkVNc1MwRkJTMGNzVlVGQlRDeEhRVUZyUWl4RFFVRnVRaXhMUVVGNVFrUXNVMEZCVTBNc1ZVRkJWQ3hIUVVGelFpeERRVUV2UXl4RFFVRTNRaXhGUVVGcFJqdEJRVU0zUlN4cFFrRkJTM1pETEVsQlFVd3NRMEZCVlN4WFFVRldMRVZCUVhWQ0xFbEJRWFpDTzBGQlEwZzdPMEZCUlVSelF5eHBRa0ZCVTBVc1IwRkJWQ3hEUVVGaFNpeEpRVUZpTzBGQlEwZzdPMEZCUlVRc1VVRkJTVUVzUzBGQlMwc3NUMEZCVkN4RlFVRnJRanRCUVVOa0xHRkJRVXRETEVsQlFVdzdRVUZEUVN4aFFVRkxNVU1zU1VGQlRDeERRVUZWTEZWQlFWWXNSVUZCYzBJc1NVRkJkRUk3UVVGRFNEdEJRVU5LT3p0QlFVVkVMRk5CUVZNeVF5eGhRVUZVTEVkQlFUQkNPMEZCUTNSQ0xGRkJRVWs1UXl4UFFVRlBMRXRCUVV0QkxFbEJRV2hDTzBGQlEwRXNVVUZCU1Vvc1YwRkJWeXhMUVVGTFFTeFJRVUZ3UWpzN1FVRkZRU3hSUVVGSlNTeFBRVUZQU2l4UlFVRllMRVZCUVhGQ08wRkJRMnBDU1N4bFFVRlBRU3hQUVVGUFNpeFJRVUZrTzBGQlEwRXNXVUZCU1Vrc1UwRkJVeXhEUVVGaUxFVkJRV2RDUVN4UFFVRlBTaXhSUVVGUU8wRkJRMjVDTEV0QlNFUXNUVUZKU3l4SlFVRkpTU3hQUVVGUExFTkJRVmdzUlVGQll6dEJRVU5tUVN4bFFVRlBRU3hQUVVGUFNpeFJRVUZrTzBGQlEwRXNXVUZCU1Vrc1UwRkJVeXhEUVVGaUxFVkJRV2RDUVN4UlFVRlJTaXhSUVVGU08wRkJRMjVDT3p0QlFVVkVMRkZCUVVsdFJDeFJRVUZSTDBNc1QwRkJUMG9zVVVGQmJrSTdPMEZCUlVFc1VVRkJTVWdzVTBGQlV5eExRVUZMUVN4TlFVRnNRanRCUVVOQkxGTkJRVXNzU1VGQlNXVXNTVUZCU1N4RFFVRlNMRVZCUVZkM1F5eE5RVUZOZGtRc1QwRkJUMk1zVFVGQk4wSXNSVUZCY1VORExFbEJRVWwzUXl4SFFVRjZReXhGUVVFNFEzaERMRWRCUVRsRExFVkJRVzFFTzBGQlF5OURMRmxCUVVrMlFpeFJRVUZSTlVNc1QwRkJUMlVzUTBGQlVDeERRVUZhTzBGQlEwRTJRaXhqUVVGTlJ5eE5RVUZPTEVOQlFXRjRReXhKUVVGaUxFVkJRVzFDSzBNc1MwRkJia0lzUlVGQk1FSXNTVUZCTVVJN1FVRkRTRHM3UVVGRlJDeFJRVUZKTEV0QlFVczNReXhwUWtGQlZDeEZRVUUwUWp0QlFVTjRRaXhaUVVGSkxFdEJRVXNyUXl4bFFVRk1MRXRCUVhsQ1F5eFRRVUUzUWl4RlFVRjNRenRCUVVOd1F5eHBRa0ZCUzBRc1pVRkJUQ3hIUVVGMVFrWXNTMEZCZGtJN1FVRkRTRHM3UVVGRlJDeFpRVUZMTEV0QlFVc3ZReXhKUVVGTUxFZEJRVmtzUTBGQldpeEpRVUZwUWl4TFFVRkxhVVFzWlVGQlRDeEhRVUYxUWtZc1MwRkJla01zU1VGQmIwUXNTMEZCU3k5RExFbEJRVXdzUjBGQldTeERRVUZhTEVsQlFXbENMRXRCUVV0cFJDeGxRVUZNTEVkQlFYVkNSaXhMUVVGb1J5eEZRVUYzUnp0QlFVTndSeXhwUWtGQlN6VkRMRWxCUVV3c1EwRkJWU3hYUVVGV0xFVkJRWFZDTEVsQlFYWkNPMEZCUTBnN08wRkJSVVFzWVVGQlN6aERMR1ZCUVV3c1IwRkJkVUpHTEV0QlFYWkNPMEZCUTBnN1FVRkRTanM3UVVGRlJHcERMRTFCUVUxeFF5eE5RVUZPTEVkQlFXVXNWVUZCVlVNc1MwRkJWaXhGUVVGcFFqdEJRVU0xUWpzN1FVRkZRU3hSUVVGSkxFdEJRVXR1UlN4VlFVRk1MRWRCUVd0Q0xFTkJRWFJDTEVWQlFYbENPMEZCUTNKQ0xHRkJRVXRCTEZWQlFVd3NTVUZCYlVKdFJTeExRVUZ1UWp0QlFVTkJMRmxCUVVrc1MwRkJTMjVGTEZWQlFVd3NSMEZCYTBJc1EwRkJkRUlzUlVGQmVVSTdRVUZEY2tJN1FVRkRRVHRCUVVOSU8wRkJRMG83TzBGQlJVUTdPMEZCUlVFN1FVRkRRU3hSUVVGSkxFdEJRVXRHTEcxQ1FVRlVMRVZCUVRoQ08wRkJRekZDTEdGQlFVdHBRaXhKUVVGTUxFbEJRV052UkN4UlFVRlJMRXRCUVV0MlJDeExRVUV6UWp0QlFVTklMRXRCUmtRc1RVRkhTenRCUVVORUxHRkJRVXRrTEcxQ1FVRk1MRWRCUVRKQ0xFbEJRVE5DTzBGQlEwZzdPMEZCUlVRc1UwRkJTMHNzVVVGQlREdEJRVU5JTEVOQmRFSkVPenRCUVhkQ1FUQkNMRTFCUVUxMVF5eFhRVUZPTEVkQlFXOUNMRlZCUVZWRExHbENRVUZXTEVWQlFUWkNPMEZCUXpkRExGRkJRVWw0UkN4WFFVRlhMRXRCUVV0QkxGRkJRWEJDTzBGQlEwRXNVVUZCU1hsRUxHRkJRV0VzUzBGQmFrSTdPMEZCUlVFc1VVRkJTU3hEUVVGRGVrUXNWMEZCVjNCQ0xHRkJRV0U0UlN4UlFVRjZRaXhOUVVGMVF6bEZMR0ZCUVdFNFJTeFJRVUY0UkN4RlFVRnJSVHRCUVVNNVJDeFpRVUZKUXl4UlFVRlJTQ3h4UWtGQmNVSkJMRzlDUVVGdlFpeERRVUY2UXl4TlFVRm5SQ3hEUVVFMVJEdEJRVU5CTEZsQlFVbEhMRk5CUVZWSUxHOUNRVUZ2UWl4RFFVRnNReXhGUVVGelF6dEJRVU5zUTBFc2FVTkJRWEZDTEVOQlFYSkNPMEZCUTBnN08wRkJSVVFzV1VGQlNVa3NhVUpCUVdsQ1NpeHZRa0ZCYjBJc1EwRkJla003UVVGRFFTeFpRVUZKU1N4alFVRktMRVZCUVc5Q08wRkJRMmhDU0N4NVFrRkJZU3hEUVVGRFFTeFZRVUZrTzBGQlEwZzdRVUZEU2p0QlFVTkVMRkZCUVVrc1EwRkJRM3BFTEZkQlFWZHdRaXhoUVVGaGFVWXNUMEZCZWtJc1RVRkJjME5xUml4aFFVRmhhVVlzVDBGQmRrUXNSVUZCWjBVN1FVRkROVVJLTEhGQ1FVRmhMRU5CUVVOQkxGVkJRV1E3UVVGRFNEdEJRVU5FTEZkQlFVOUJMRlZCUVZBN1FVRkRTQ3hEUVc1Q1JEczdRVUZ4UWtGNlF5eE5RVUZOT0VNc1kwRkJUaXhIUVVGMVFpeFZRVUZWTlVRc1NVRkJWaXhGUVVGblFuVkRMRWxCUVdoQ0xFVkJRWE5DTzBGQlEzcERRU3hYUVVGUFFTeFJRVUZSTEVsQlFVa3ZSQ3hYUVVGS0xFVkJRV1k3TzBGQlJVRXNVVUZCU1c5RkxGVkJRVlVzUzBGQlpEdEJRVU5CTEZGQlFVbG9SQ3hYUVVGWExFdEJRVXRCTEZGQlFYQkNPMEZCUTBFc1VVRkJTVVFzWTBGQll5eExRVUZMUVN4WFFVRjJRanM3UVVGRlFTeFJRVUZKTWtRc2IwSkJRVzlDZEVRc1QwRkJUeXhEUVVGUUxFZEJRVmxCTEU5QlFVOUtMRkZCUVc1Q0xFZEJRU3RDTEVWQlFVVkpMRTlCUVU5S0xGRkJRVlFzUTBGQmRrUTdRVUZEUVN4UlFVRkpNRVFzY1VKQlFYRkNNMFFzVjBGQmVrSXNSVUZCYzBNN1FVRkRiRU15UkN3MFFrRkJiMEl6UkN4WFFVRndRanM3UVVGRlFXbEVMR3RDUVVGVkxFbEJRVlk3UVVGRFFTeFpRVUZKYVVJc1dVRkJXV3hGTEdWQlFXVkJMR05CUVdNc1EwRkJOMElzUTBGQmFFSTdRVUZEUVN4WlFVRkphMFVzWTBGQll5eERRVUZzUWl4RlFVRnhRanRCUVVOcVFrRXNkMEpCUVZrc1EwRkJXaXhEUVVScFFpeERRVU5FTzBGQlEyNUNPMEZCUTBRM1JDeGxRVUZQTmtRc1dVRkJXV3BGTEZGQlFWb3NTVUZCZDBKSkxFOUJRVThzUTBGQlVDeEhRVUZYTEVOQlFWZ3NSMEZCWlN4RFFVRkRMRU5CUVhoRExFTkJRVkE3UVVGRFNEczdRVUZGUkN4UlFVRkpRU3hQUVVGUFNpeFJRVUZZTEVWQlFYRkNPMEZCUTJwQ0xGbEJRVWxyUlN4WFFVRlhPVVFzVDBGQlQwb3NVVUZCZEVJN1FVRkRRVWtzWlVGQlR6aEVMR0ZCUVdFc1EwRkJZaXhIUVVGcFFteEZMRkZCUVdwQ0xFZEJRVFJDYTBVc1VVRkJia003UVVGRFNDeExRVWhFTEUxQlNVc3NTVUZCU1RsRUxFOUJRVThzUTBGQldDeEZRVUZqTzBGQlEyWkJMR1ZCUVU5QkxFOUJRVTlLTEZGQlFXUTdRVUZEUVN4WlFVRkpTU3hUUVVGVExFTkJRV0lzUlVGQmFVSkJMRkZCUVZGS0xGRkJRVkk3UVVGRGNFSTdPMEZCUlVRc1VVRkJTVEpFTEdGQlFXRXNTMEZCYWtJN1FVRkRRU3hSUVVGSlVTeGhRVUZoTEV0QlFVdERMRk5CUVV3c1IwRkJhVUowUml4aFFVRmhkVVlzVlVGQkwwTTdRVUZEUVN4UlFVRkpSaXhWUVVGS0xFVkJRV2RDTzBGQlExcFNMSEZDUVVGaExFdEJRVXRHTEZkQlFVd3NRMEZCYVVKRExHbENRVUZxUWl4RFFVRmlPMEZCUTBnN08wRkJSVVFzVVVGQlNWa3NXVUZCV1Znc1lVRkJZU3hEUVVGRExFTkJRV1FzUjBGQmEwSXNRMEZCYkVNN1FVRkRRU3hSUVVGSkxFdEJRVXN4UkN4TFFVRk1MRWRCUVdFc1EwRkJha0lzUlVGQmIwSTdRVUZEYUVKeFJTeHhRa0ZCWVN4RFFVRkRMRU5CUVdRN1FVRkRTRHM3UVVGRlJEdEJRVU5CTEZGQlFVbElMR05CUVdOU0xGVkJRV3hDTEVWQlFUaENPMEZCUXpGQ2RrUXNaVUZCVDBvc1YwRkJWMGtzU1VGQmJFSTdRVUZEU0RzN1FVRkZSSFZETEZOQlFVdFJMRXRCUVV3c1IwRkJZUzlETEU5QlFVOUtMRkZCUVhCQ08wRkJRMEV5UXl4VFFVRkxka01zU1VGQlRDeEhRVUZaUVN4SlFVRmFPMEZCUTBGMVF5eFRRVUZMTWtJc1UwRkJUQ3hIUVVGcFFrRXNVMEZCYWtJN1FVRkRRVE5DTEZOQlFVdExMRTlCUVV3c1IwRkJaVUVzVDBGQlpqdEJRVU5CVEN4VFFVRkxSeXhWUVVGTUxFZEJRV3RDV1N4cFFrRkJiRUk3TzBGQlJVRXNWMEZCVDJZc1NVRkJVRHRCUVVOSUxFTkJia1JFT3p0QlFYRkVRWHBDTEUxQlFVMHdRaXhOUVVGT0xFZEJRV1VzV1VGQldUdEJRVU4yUWl4UlFVRkpSQ3hQUVVGUExFdEJRVXR4UWl4alFVRk1MRU5CUVc5Q0xFdEJRVXMxUkN4SlFVRjZRaXhGUVVFclFpeExRVUZMWkN4WlFVRndReXhEUVVGWU8wRkJRMEVzVVVGQlNVOHNVMEZCVXl4TFFVRkxRU3hOUVVGc1FqdEJRVU5CTEZOQlFVc3NTVUZCU1dVc1NVRkJTU3hEUVVGU0xFVkJRVmQzUXl4TlFVRk5ka1FzVDBGQlQyTXNUVUZCTjBJc1JVRkJjVU5ETEVsQlFVbDNReXhIUVVGNlF5eEZRVUU0UTNoRExFZEJRVGxETEVWQlFXMUVPMEZCUXk5RExGbEJRVWsyUWl4UlFVRlJOVU1zVDBGQlQyVXNRMEZCVUN4RFFVRmFPMEZCUTBFMlFpeGpRVUZOUnl4TlFVRk9MRU5CUVdGRUxFdEJRVXQyUXl4SlFVRnNRaXhGUVVGM1FuVkRMRXRCUVV0UkxFdEJRVGRDTEVWQlFXOURMRWxCUVhCRE8wRkJRMGc3TzBGQlJVUXNWMEZCVDFJc1NVRkJVRHRCUVVOSUxFTkJWRVE3TzBGQldVRTdPenM3T3pzN1FVRlBRWEJGTEVkQlFVZG5SeXhIUVVGSUxFTkJRVTl5UkN4TFFVRlFMRVZCUVdNc1RVRkJaQ3hGUVVGelFpeFpRVUZaTzBGQlF6bENMRmRCUVU4c1MwRkJTM2hDTEV0QlFWbzdRVUZEU0N4RFFVWkVPenRCUVVsQk96czdPenM3TzBGQlQwRnVRaXhIUVVGSFowY3NSMEZCU0N4RFFVRlBja1FzUzBGQlVDeEZRVUZqTEUxQlFXUXNSVUZCYzBJc1dVRkJXVHRCUVVNNVFpeFhRVUZQTEV0QlFVdDJRaXhMUVVGYU8wRkJRMGdzUTBGR1JEczdRVUZKUVhCQ0xFZEJRVWRwUnl4UlFVRklMRU5CUVZsMFJDeExRVUZhTEVWQlFXMUNMSFZDUVVGdVFpeEZRVUUwUXl4VlFVRTFRenM3UVVGRlFUTkRMRWRCUVVkclJ5eE5RVUZJTEVOQlFWVjJSQ3hMUVVGV0xFVkJRV2xDTEdGQlFXcENMRVZCUTBrc1dVRkJXVHRCUVVOU0xGZEJRVThzUzBGQlMzSkNMRTFCUVV3c1EwRkJXV01zVFVGQldpeEhRVUZ4UWl4RFFVRTFRanRCUVVOSUxFTkJTRXdzUlVGSlNTeFpRVUZaTzBGQlExSXNVMEZCUzJRc1RVRkJUQ3hEUVVGWll5eE5RVUZhTEVkQlFYRkNMRU5CUVhKQ08wRkJRMGdzUTBGT1REczdRVUZWUVhCRExFZEJRVWRyUnl4TlFVRklMRU5CUVZWMlJDeExRVUZXTEVWQlFXbENMRlZCUVdwQ0xFVkJRMGtzV1VGQldUdEJRVU5TTEZkQlFVOHNTMEZCUzJ0RUxGTkJRVm83UVVGRFNDeERRVWhNTEVWQlNVa3NWVUZCVlUwc1MwRkJWaXhGUVVGcFFqdEJRVU5pTEZOQlFVdE9MRk5CUVV3c1IwRkJhVUpOTEV0QlFXcENPenRCUVVWQkxGRkJRVWxETEZOQlFVb3NSVUZCWlRzN1FVRkZaanRCUVVOQkxGTkJRVXQyUlN4SlFVRk1MRWRCUVZrc1EwRkJXanM3UVVGRlFTeFJRVUZKYzBVc1VVRkJVVFZHTEdGQlFXRTRSaXhKUVVGNlFpeEZRVUVyUWp0QlFVTXpRaXhoUVVGTE4wVXNWMEZCVEN4SFFVRnRRamhGTEZGQlFXNUNPMEZCUTBnc1MwRkdSQ3hOUVVkTE8wRkJRMFFzWVVGQlN6bEZMRmRCUVV3c1IwRkJiVUlzUTBGQmJrSTdRVUZEU0R0QlFVVktMRU5CYmtKTU96dEJRWE5DUVhoQ0xFZEJRVWRyUnl4TlFVRklMRU5CUVZWMlJDeExRVUZXTEVWQlFXbENMR0ZCUVdwQ0xFVkJRMGtzV1VGQldUdEJRVU5TTEZkQlFVOHNTMEZCU3pSRUxGbEJRVm83UVVGRFNDeERRVWhNTEVWQlNVa3NWVUZCVlVvc1MwRkJWaXhGUVVGcFFqdEJRVU5pTEZOQlFVdEpMRmxCUVV3c1IwRkJiMEpLTEV0QlFYQkNPenRCUVVWQkxGRkJRVWxRTEdGQlFXRXNTMEZCUzBNc1UwRkJUQ3hIUVVGcFFuUkdMR0ZCUVdGMVJpeFZRVUV2UXp0QlFVTkJMRkZCUVVsVkxGVkJRVlVzUTBGQlF5eExRVUZMTjBVc1VVRkJUQ3hIUVVGblFuQkNMR0ZCUVdGcFJpeFBRVUU1UWl4TlFVRXlRMnBHTEdGQlFXRnBSaXhQUVVGMFJUdEJRVU5CTEZGQlFVbFhMRlZCUVZWSExGRkJRVllzU1VGQmMwSXNRMEZCUTFZc1ZVRkJka0lzU1VGQmNVTXNRMEZCUTFrc1QwRkJNVU1zUlVGQmJVUTdRVUZETDBNc1lVRkJTM1pHTEZGQlFVd3NSMEZCWjBJd1JDeGhRVUZvUWp0QlFVTklMRXRCUmtRc1RVRkhTenRCUVVORUxHRkJRVXN4UkN4UlFVRk1MRWRCUVdkQ1F5eFBRVUZvUWp0QlFVTklPMEZCUTBvc1EwRm1URHM3UVVGclFrRnNRaXhIUVVGSGEwY3NUVUZCU0N4RFFVRlZka1FzUzBGQlZpeEZRVUZwUWl4UFFVRnFRaXhGUVVOSkxGbEJRVms3UVVGRFVpeFhRVUZQTEV0QlFVczVRaXhOUVVGYU8wRkJRMGdzUTBGSVRDeEZRVWxKTEZWQlFWVnpSaXhMUVVGV0xFVkJRV2xDTzBGQlEySXNVMEZCUzNKR0xGVkJRVXdzUjBGQmEwSXNTMEZCUzBRc1RVRkJUQ3hIUVVGamMwWXNTMEZCYUVNN1FVRkRTQ3hEUVU1TU96dEJRVlZCYkVjc1IwRkJSMDhzWTBGQlNDeEhRVUZ2UW1sSExFOUJRVTlETEU5QlFWQXNSMEZCYVVKc1J5eGpRVUZ5UXlJc0ltWnBiR1VpT2lKaGJtbHRZWFJwYjI0dGMzUmhkR1V1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4dUlFTnZjSGx5YVdkb2RDQW9ZeWtnTWpBeE55MHlNREU0SUZocFlXMWxiaUJaWVdwcElGTnZablIzWVhKbElFTnZMaXdnVEhSa0xseHVYRzRnYUhSMGNITTZMeTkzZDNjdVkyOWpiM011WTI5dEwxeHVYRzRnVUdWeWJXbHpjMmx2YmlCcGN5Qm9aWEpsWW5rZ1ozSmhiblJsWkN3Z1puSmxaU0J2WmlCamFHRnlaMlVzSUhSdklHRnVlU0J3WlhKemIyNGdiMkowWVdsdWFXNW5JR0VnWTI5d2VWeHVJRzltSUhSb2FYTWdjMjltZEhkaGNtVWdZVzVrSUdGemMyOWphV0YwWldRZ1pXNW5hVzVsSUhOdmRYSmpaU0JqYjJSbElDaDBhR1VnWENKVGIyWjBkMkZ5WlZ3aUtTd2dZU0JzYVcxcGRHVmtMRnh1SUhkdmNteGtkMmxrWlN3Z2NtOTVZV3gwZVMxbWNtVmxMQ0J1YjI0dFlYTnphV2R1WVdKc1pTd2djbVYyYjJOaFlteGxJR0Z1WkNCdWIyNHRaWGhqYkhWemFYWmxJR3hwWTJWdWMyVmNiaUIwYnlCMWMyVWdRMjlqYjNNZ1EzSmxZWFJ2Y2lCemIyeGxiSGtnZEc4Z1pHVjJaV3h2Y0NCbllXMWxjeUJ2YmlCNWIzVnlJSFJoY21kbGRDQndiR0YwWm05eWJYTXVJRmx2ZFNCemFHRnNiRnh1SUc1dmRDQjFjMlVnUTI5amIzTWdRM0psWVhSdmNpQnpiMlowZDJGeVpTQm1iM0lnWkdWMlpXeHZjR2x1WnlCdmRHaGxjaUJ6YjJaMGQyRnlaU0J2Y2lCMGIyOXNjeUIwYUdGMEozTmNiaUIxYzJWa0lHWnZjaUJrWlhabGJHOXdhVzVuSUdkaGJXVnpMaUJaYjNVZ1lYSmxJRzV2ZENCbmNtRnVkR1ZrSUhSdklIQjFZbXhwYzJnc0lHUnBjM1J5YVdKMWRHVXNYRzRnYzNWaWJHbGpaVzV6WlN3Z1lXNWtMMjl5SUhObGJHd2dZMjl3YVdWeklHOW1JRU52WTI5eklFTnlaV0YwYjNJdVhHNWNiaUJVYUdVZ2MyOW1kSGRoY21VZ2IzSWdkRzl2YkhNZ2FXNGdkR2hwY3lCTWFXTmxibk5sSUVGbmNtVmxiV1Z1ZENCaGNtVWdiR2xqWlc1elpXUXNJRzV2ZENCemIyeGtMbHh1SUZocFlXMWxiaUJaWVdwcElGTnZablIzWVhKbElFTnZMaXdnVEhSa0xpQnlaWE5sY25abGN5QmhiR3dnY21sbmFIUnpJRzV2ZENCbGVIQnlaWE56YkhrZ1ozSmhiblJsWkNCMGJ5QjViM1V1WEc1Y2JpQlVTRVVnVTA5R1ZGZEJVa1VnU1ZNZ1VGSlBWa2xFUlVRZ1hDSkJVeUJKVTF3aUxDQlhTVlJJVDFWVUlGZEJVbEpCVGxSWklFOUdJRUZPV1NCTFNVNUVMQ0JGV0ZCU1JWTlRJRTlTWEc0Z1NVMVFURWxGUkN3Z1NVNURURlZFU1U1SElFSlZWQ0JPVDFRZ1RFbE5TVlJGUkNCVVR5QlVTRVVnVjBGU1VrRk9WRWxGVXlCUFJpQk5SVkpEU0VGT1ZFRkNTVXhKVkZrc1hHNGdSa2xVVGtWVFV5QkdUMUlnUVNCUVFWSlVTVU5WVEVGU0lGQlZVbEJQVTBVZ1FVNUVJRTVQVGtsT1JsSkpUa2RGVFVWT1ZDNGdTVTRnVGs4Z1JWWkZUbFFnVTBoQlRFd2dWRWhGWEc0Z1FWVlVTRTlTVXlCUFVpQkRUMUJaVWtsSFNGUWdTRTlNUkVWU1V5QkNSU0JNU1VGQ1RFVWdSazlTSUVGT1dTQkRURUZKVFN3Z1JFRk5RVWRGVXlCUFVpQlBWRWhGVWx4dUlFeEpRVUpKVEVsVVdTd2dWMGhGVkVoRlVpQkpUaUJCVGlCQlExUkpUMDRnVDBZZ1EwOU9WRkpCUTFRc0lGUlBVbFFnVDFJZ1QxUklSVkpYU1ZORkxDQkJVa2xUU1U1SElFWlNUMDBzWEc0Z1QxVlVJRTlHSUU5U0lFbE9JRU5QVGs1RlExUkpUMDRnVjBsVVNDQlVTRVVnVTA5R1ZGZEJVa1VnVDFJZ1ZFaEZJRlZUUlNCUFVpQlBWRWhGVWlCRVJVRk1TVTVIVXlCSlRseHVJRlJJUlNCVFQwWlVWMEZTUlM1Y2JpQXFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xTDF4dVhHNWNiblpoY2lCcWN5QTlJR05qTG1wek8xeHVkbUZ5SUZCc1lYbGhZbXhsSUQwZ2NtVnhkV2x5WlNnbkxpOXdiR0Y1WVdKc1pTY3BPMXh1WEc1MllYSWdWSGx3WlhNZ1BTQnlaWEYxYVhKbEtDY3VMM1I1Y0dWekp5azdYRzUyWVhJZ1YzSmhjSEJsWkVsdVptOGdQU0JVZVhCbGN5NVhjbUZ3Y0dWa1NXNW1ienRjYm5aaGNpQlhjbUZ3VFc5a1pTQTlJRlI1Y0dWekxsZHlZWEJOYjJSbE8xeHVkbUZ5SUZkeVlYQk5iMlJsVFdGemF5QTlJRlI1Y0dWekxsZHlZWEJOYjJSbFRXRnphenRjYmx4dUx5b3FYRzRnS2lBaEkyVnVYRzRnS2lCVWFHVWdRVzVwYldGMGFXOXVVM1JoZEdVZ1oybDJaWE1nWm5Wc2JDQmpiMjUwY205c0lHOTJaWElnWVc1cGJXRjBhVzl1SUhCc1lYbGlZV05ySUhCeWIyTmxjM011WEc0Z0tpQkpiaUJ0YjNOMElHTmhjMlZ6SUhSb1pTQkJibWx0WVhScGIyNGdRMjl0Y0c5dVpXNTBJR2x6SUhOMVptWnBZMmxsYm5RZ1lXNWtJR1ZoYzJsbGNpQjBieUIxYzJVdUlGVnpaU0IwYUdVZ1FXNXBiV0YwYVc5dVUzUmhkR1VnYVdZZ2VXOTFJRzVsWldRZ1puVnNiQ0JqYjI1MGNtOXNMbHh1SUNvZ0lTTjZhRnh1SUNvZ1FXNXBiV0YwYVc5dVUzUmhkR1VnNWE2TTVZV281bzZuNVlpMjVZcW81NVM3NXBLdDVwUys2TCtINTZpTDQ0Q0NQR0p5THo1Y2JpQXFJT1drcCtXa211YVZzT2FEaGVXR3RlUzRpeURsaXFqbmxMdm51NFRrdTdZZzVwaXY2TGF6NWFTZjVaS001cGlUNUxxTzVMMi81NVNvNTVxRTQ0Q0M1YWFDNXA2YzVvS282WnlBNkthQjVwdTA1YVNhNTVxRTVZcW81NVM3NW82bjVZaTI1bzZsNVkrajc3eU02SyszNUwyLzU1U29JRUZ1YVcxaGRHbHZibE4wWVhSbDQ0Q0NYRzRnS2lCQVkyeGhjM01nUVc1cGJXRjBhVzl1VTNSaGRHVmNiaUFxSUVCbGVIUmxibVJ6SUZCc1lYbGhZbXhsWEc0Z0tseHVJQ292WEc1Y2JpOHFLbHh1SUNvZ1FHMWxkR2h2WkNCamIyNXpkSEoxWTNSdmNseHVJQ29nUUhCaGNtRnRJSHRCYm1sdFlYUnBiMjVEYkdsd2ZTQmpiR2x3WEc0Z0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ1cyNWhiV1ZkWEc0Z0tpOWNibVoxYm1OMGFXOXVJRUZ1YVcxaGRHbHZibE4wWVhSbElDaGpiR2x3TENCdVlXMWxLU0I3WEc0Z0lDQWdVR3hoZVdGaWJHVXVZMkZzYkNoMGFHbHpLVHRjYmlBZ0lDQmNiaUFnSUNBdkx5Qk5ZWEpySUhkb1pYUm9aWElnZEdobElHTjFjbkpsYm5RZ1puSmhiV1VnYVhNZ2NHeGhlV1ZrTGx4dUlDQWdJQzh2SUZkb1pXNGdjMlYwSUc1bGR5QjBhVzFsSUhSdklHRnVhVzFoZEdsdmJpQnpkR0YwWlN3Z2QyVWdjMmh2ZFd4a0lHVnVjM1Z5WlNCMGFHVWdabkpoYldVZ1lYUWdkR2hsSUhOd1pXTnBabWxsWkNCMGFXMWxJR0psYVc1bklIQnNZWGxsWkNCaGRDQnVaWGgwSUhWd1pHRjBaUzVjYmlBZ0lDQjBhR2x6TGw5amRYSnlaVzUwUm5KaGJXVlFiR0Y1WldRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0JjYmlBZ0lDQjBhR2x6TGw5a1pXeGhlU0E5SURBN1hHNGdJQ0FnZEdocGN5NWZaR1ZzWVhsVWFXMWxJRDBnTUR0Y2JseHVJQ0FnSUhSb2FYTXVYM2R5WVhCd1pXUkpibVp2SUQwZ2JtVjNJRmR5WVhCd1pXUkpibVp2S0NrN1hHNGdJQ0FnZEdocGN5NWZiR0Z6ZEZkeVlYQndaV1JKYm1adklEMGdiblZzYkR0Y2JseHVJQ0FnSUhSb2FYTXVYM0J5YjJObGMzTWdQU0J3Y205alpYTnpPMXh1WEc0Z0lDQWdkR2hwY3k1ZlkyeHBjQ0E5SUdOc2FYQTdYRzRnSUNBZ2RHaHBjeTVmYm1GdFpTQTlJRzVoYldVZ2ZId2dLR05zYVhBZ0ppWWdZMnhwY0M1dVlXMWxLVHRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCaGJtbHRZWFJ2Y2x4dUlDQWdJQ0FxSUVCMGVYQmxJSHRCYm1sdFlYUnBiMjVCYm1sdFlYUnZjbjFjYmlBZ0lDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lIUm9hWE11WVc1cGJXRjBiM0lnUFNCdWRXeHNPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQlVhR1VnWTNWeWRtVnpJR3hwYzNRdVhHNGdJQ0FnSUNvZ0lTTjZhQ0RtbTdMbnVyL2xpSmZvb2FqamdJSmNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dZM1Z5ZG1WelhHNGdJQ0FnSUNvZ1FIUjVjR1VnZTA5aWFtVmpkRnRkZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSFJvYVhNdVkzVnlkbVZ6SUQwZ1cxMDdYRzVjYmlBZ0lDQXZMeUJvZEhSd09pOHZkM2QzTG5jekxtOXlaeTlVVWk5M1pXSXRZVzVwYldGMGFXOXVjeThqYVdSc0xXUmxaaTFCYm1sdFlYUnBiMjVVYVcxcGJtZGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1ZHaGxJSE4wWVhKMElHUmxiR0Y1SUhkb2FXTm9JSEpsY0hKbGMyVnVkSE1nZEdobElHNTFiV0psY2lCdlppQnpaV052Ym1SeklHWnliMjBnWVc0Z1lXNXBiV0YwYVc5dUozTWdjM1JoY25RZ2RHbHRaU0IwYnlCMGFHVWdjM1JoY25RZ2IyWmNiaUFnSUNBZ0tpQjBhR1VnWVdOMGFYWmxJR2x1ZEdWeWRtRnNMbHh1SUNBZ0lDQXFJQ0VqZW1nZzVidTI2TCtmNWFTYTViQ1I1NmVTNXBLdDVwUys0NENDWEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnWkdWc1lYbGNiaUFnSUNBZ0tpQkFkSGx3WlNCN1RuVnRZbVZ5ZlZ4dUlDQWdJQ0FxSUVCa1pXWmhkV3gwSURCY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IwYUdsekxtUmxiR0Y1SUQwZ01EdGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1ZHaGxJR0Z1YVcxaGRHbHZiaWR6SUdsMFpYSmhkR2x2YmlCamIzVnVkQ0J3Y205d1pYSjBlUzVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUVnY21WaGJDQnVkVzFpWlhJZ1ozSmxZWFJsY2lCMGFHRnVJRzl5SUdWeGRXRnNJSFJ2SUhwbGNtOGdLR2x1WTJ4MVpHbHVaeUJ3YjNOcGRHbDJaU0JwYm1acGJtbDBlU2tnY21Wd2NtVnpaVzUwYVc1bklIUm9aU0J1ZFcxaVpYSWdiMllnZEdsdFpYTmNiaUFnSUNBZ0tpQjBieUJ5WlhCbFlYUWdkR2hsSUdGdWFXMWhkR2x2YmlCdWIyUmxMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dWbUZzZFdWeklHeGxjM01nZEdoaGJpQjZaWEp2SUdGdVpDQk9ZVTRnZG1Gc2RXVnpJR0Z5WlNCMGNtVmhkR1ZrSUdGeklIUm9aU0IyWVd4MVpTQXhMakFnWm05eUlIUm9aU0J3ZFhKd2IzTmxJRzltSUhScGJXbHVaeUJ0YjJSbGJGeHVJQ0FnSUNBcUlHTmhiR04xYkdGMGFXOXVjeTVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJQ0VqZW1nZzZMK3Q1THVqNXF5aDVwV3c3N3lNNW95SDVZcW81NVM3NXBLdDVwUys1YVNhNWJDUjVxeWg1WkNPNTd1VDVwMmZMQ0J1YjNKdFlXeHBlbVVnZEdsdFplT0FnaURscG9JZ01pNDE3N3lJTXVhc29lV05pdSs4aVZ4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUhKbGNHVmhkRU52ZFc1MFhHNGdJQ0FnSUNvZ1FIUjVjR1VnZTA1MWJXSmxjbjFjYmlBZ0lDQWdLaUJBWkdWbVlYVnNkQ0F4WEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1eVpYQmxZWFJEYjNWdWRDQTlJREU3WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRlJvWlNCcGRHVnlZWFJwYjI0Z1pIVnlZWFJwYjI0Z2IyWWdkR2hwY3lCaGJtbHRZWFJwYjI0Z2FXNGdjMlZqYjI1a2N5NGdLR3hsYm1kMGFDbGNiaUFnSUNBZ0tpQWhJM3BvSU9XTmxlYXNvZVdLcU9lVXUrZWFoT2FNZ2VlN3JlYVh0dW1YdE8rOGpPZW5rdU9BZ2x4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUdSMWNtRjBhVzl1WEc0Z0lDQWdJQ29nUUhSNWNHVWdlMDUxYldKbGNuMWNiaUFnSUNBZ0tpQkFjbVZoWkU5dWJIbGNiaUFnSUNBZ0tpOWNiaUFnSUNCMGFHbHpMbVIxY21GMGFXOXVJRDBnTVR0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnVkdobElHRnVhVzFoZEdsdmJpZHpJSEJzWVhsaVlXTnJJSE53WldWa0xpQXhJR2x6SUc1dmNtMWhiQ0J3YkdGNVltRmpheUJ6Y0dWbFpDNWNiaUFnSUNBZ0tpQWhJM3BvSU9hU3JlYVV2dW1BbitlT2grT0FnbHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0J6Y0dWbFpGeHVJQ0FnSUNBcUlFQjBlWEJsSUh0T2RXMWlaWEo5WEc0Z0lDQWdJQ29nUUdSbFptRjFiSFE2SURFdU1GeHVJQ0FnSUNBcUwxeHVJQ0FnSUhSb2FYTXVjM0JsWldRZ1BTQXhPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJseHVJQ0FnSUNBcUlGZHlZWEJ3YVc1bklHMXZaR1VnYjJZZ2RHaGxJSEJzWVhscGJtY2dZVzVwYldGMGFXOXVMbHh1SUNBZ0lDQXFJRTV2ZEdsalpTQTZJR1I1Ym1GdGFXTWdZMmhoYm1kbElIZHlZWEJOYjJSbElIZHBiR3dnY21WelpYUWdkR2x0WlNCaGJtUWdjbVZ3WldGMFEyOTFiblFnY0hKdmNHVnlkSGxjYmlBZ0lDQWdLaUFoSTNwb1hHNGdJQ0FnSUNvZzVZcW81NVM3NWI2cTU0NnY1cGE1NWJ5UDQ0Q0NYRzRnSUNBZ0lDb2c2WnlBNkthQjVyT281b1NQNTVxRTVwaXY3N3lNNVlxbzVvQ0I1TCt1NXBTNUlIZHlZWEJOYjJSbElPYVh0dSs4ak9TOG11bUhqZWU5cmlCMGFXMWxJT1M3cGVXUGlpQnlaWEJsWVhSRGIzVnVkRnh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSGR5WVhCTmIyUmxYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UxZHlZWEJOYjJSbGZWeHVJQ0FnSUNBcUlFQmtaV1poZFd4ME9pQlhjbUZ3VFc5a1pTNU9iM0p0WVd4Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0IwYUdsekxuZHlZWEJOYjJSbElEMGdWM0poY0UxdlpHVXVUbTl5YldGc08xeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCVWFHVWdZM1Z5Y21WdWRDQjBhVzFsSUc5bUlIUm9hWE1nWVc1cGJXRjBhVzl1SUdsdUlITmxZMjl1WkhNdVhHNGdJQ0FnSUNvZ0lTTjZhQ0RsaXFqbmxMdmx2WlBsaVkzbm1vVG1sN2JwbDdUdnZJem5wNUxqZ0lKY2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2RHbHRaVnh1SUNBZ0lDQXFJRUIwZVhCbElIdE9kVzFpWlhKOVhHNGdJQ0FnSUNvZ1FHUmxabUYxYkhRZ01GeHVJQ0FnSUNBcUwxeHVJQ0FnSUhSb2FYTXVkR2x0WlNBOUlEQTdYRzVjYmlBZ0lDQXZMeUJCYm1sdFlYUnBiMjRnWVhNZ1pYWmxiblFnZEdGeVoyVjBYRzRnSUNBZ2RHaHBjeTVmZEdGeVoyVjBJRDBnYm5Wc2JEdGNiaUFnSUNCMGFHbHpMbDlzWVhOMFpuSmhiV1ZGZG1WdWRFOXVJRDBnWm1Gc2MyVTdYRzRnSUNBZ2RHaHBjeTVsYldsMElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdZWEpuY3lBOUlHNWxkeUJCY25KaGVTaGhjbWQxYldWdWRITXViR1Z1WjNSb0tUdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBc0lHd2dQU0JoY21kekxteGxibWQwYURzZ2FTQThJR3c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lYSm5jMXRwWFNBOUlHRnlaM1Z0Wlc1MGMxdHBYVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCall5NWthWEpsWTNSdmNpNW5aWFJCYm1sdFlYUnBiMjVOWVc1aFoyVnlLQ2t1Y0hWemFFUmxiR0Y1UlhabGJuUW9kR2hwY3l3Z0oxOWxiV2wwSnl3Z1lYSm5jeWs3WEc0Z0lDQWdmVHRjYm4xY2JtcHpMbVY0ZEdWdVpDaEJibWx0WVhScGIyNVRkR0YwWlN3Z1VHeGhlV0ZpYkdVcE8xeHVYRzUyWVhJZ2NISnZkRzhnUFNCQmJtbHRZWFJwYjI1VGRHRjBaUzV3Y205MGIzUjVjR1U3WEc1Y2JuQnliM1J2TGw5bGJXbDBJRDBnWm5WdVkzUnBiMjRnS0hSNWNHVXNJSE4wWVhSbEtTQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdVgzUmhjbWRsZENBbUppQjBhR2x6TGw5MFlYSm5aWFF1YVhOV1lXeHBaQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDkwWVhKblpYUXVaVzFwZENoMGVYQmxMQ0IwZVhCbExDQnpkR0YwWlNrN1hHNGdJQ0FnZlZ4dWZUdGNibHh1Y0hKdmRHOHViMjRnUFNCbWRXNWpkR2x2YmlBb2RIbHdaU3dnWTJGc2JHSmhZMnNzSUhSaGNtZGxkQ2tnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbDkwWVhKblpYUWdKaVlnZEdocGN5NWZkR0Z5WjJWMExtbHpWbUZzYVdRcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVWdQVDA5SUNkc1lYTjBabkpoYldVbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlzWVhOMFpuSmhiV1ZGZG1WdWRFOXVJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmRHRnlaMlYwTG05dUtIUjVjR1VzSUdOaGJHeGlZV05yTENCMFlYSm5aWFFwTzF4dUlDQWdJSDFjYmlBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ2ZWeHVmVHRjYmx4dWNISnZkRzh1YjI1alpTQTlJR1oxYm1OMGFXOXVJQ2gwZVhCbExDQmpZV3hzWW1GamF5d2dkR0Z5WjJWMEtTQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdVgzUmhjbWRsZENBbUppQjBhR2x6TGw5MFlYSm5aWFF1YVhOV1lXeHBaQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9kSGx3WlNBOVBUMGdKMnhoYzNSbWNtRnRaU2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyeGhjM1JtY21GdFpVVjJaVzUwVDI0Z1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHeGxkQ0J6Wld4bUlEMGdkR2hwY3p0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM1JoY21kbGRDNXZibU5sS0hSNWNHVXNJR1oxYm1OMGFXOXVJQ2hsZG1WdWRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnNiR0poWTJzdVkyRnNiQ2gwWVhKblpYUXNJR1YyWlc1MEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhObGJHWXVYMnhoYzNSbWNtRnRaVVYyWlc1MFQyNGdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1SUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNCOVhHNTlPMXh1WEc1d2NtOTBieTV2Wm1ZZ1BTQm1kVzVqZEdsdmJpQW9kSGx3WlN3Z1kyRnNiR0poWTJzc0lIUmhjbWRsZENrZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6TGw5MFlYSm5aWFFnSmlZZ2RHaHBjeTVmZEdGeVoyVjBMbWx6Vm1Gc2FXUXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1VnUFQwOUlDZHNZWE4wWm5KaGJXVW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVYM1JoY21kbGRDNW9ZWE5GZG1WdWRFeHBjM1JsYm1WeUtIUjVjR1VwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYkdGemRHWnlZVzFsUlhabGJuUlBiaUE5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzUmhjbWRsZEM1dlptWW9kSGx3WlN3Z1kyRnNiR0poWTJzc0lIUmhjbWRsZENrN1hHNGdJQ0FnZlZ4dWZUdGNibHh1Y0hKdmRHOHVYM05sZEVWMlpXNTBWR0Z5WjJWMElEMGdablZ1WTNScGIyNGdLSFJoY21kbGRDa2dlMXh1SUNBZ0lIUm9hWE11WDNSaGNtZGxkQ0E5SUhSaGNtZGxkRHRjYm4wN1hHNWNibkJ5YjNSdkxtOXVVR3hoZVNBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQXZMeUJ5WlhCc1lYbGNiaUFnSUNCMGFHbHpMbk5sZEZScGJXVW9NQ2s3WEc0Z0lDQWdkR2hwY3k1ZlpHVnNZWGxVYVcxbElEMGdkR2hwY3k1ZlpHVnNZWGs3WEc0Z0lDQWdYRzRnSUNBZ1kyTXVaR2x5WldOMGIzSXVaMlYwUVc1cGJXRjBhVzl1VFdGdVlXZGxjaWdwTG1Ga1pFRnVhVzFoZEdsdmJpaDBhR2x6S1R0Y2JseHVJQ0FnSUdsbUlDaDBhR2x6TG1GdWFXMWhkRzl5S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WVc1cGJXRjBiM0l1WVdSa1FXNXBiV0YwYVc5dUtIUm9hWE1wTzF4dUlDQWdJSDFjYmlBZ0lDQmNiaUFnSUNCMGFHbHpMbVZ0YVhRb0ozQnNZWGtuTENCMGFHbHpLVHRjYm4wN1hHNWNibkJ5YjNSdkxtOXVVM1J2Y0NBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQnBaaUFvSVhSb2FYTXVhWE5RWVhWelpXUXBJSHRjYmlBZ0lDQWdJQ0FnWTJNdVpHbHlaV04wYjNJdVoyVjBRVzVwYldGMGFXOXVUV0Z1WVdkbGNpZ3BMbkpsYlc5MlpVRnVhVzFoZEdsdmJpaDBhR2x6S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2RHaHBjeTVoYm1sdFlYUnZjaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbUZ1YVcxaGRHOXlMbkpsYlc5MlpVRnVhVzFoZEdsdmJpaDBhR2x6S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxtVnRhWFFvSjNOMGIzQW5MQ0IwYUdsektUdGNibjA3WEc1Y2JuQnliM1J2TG05dVVtVnpkVzFsSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lHTmpMbVJwY21WamRHOXlMbWRsZEVGdWFXMWhkR2x2YmsxaGJtRm5aWElvS1M1aFpHUkJibWx0WVhScGIyNG9kR2hwY3lrN1hHNGdJQ0FnZEdocGN5NWxiV2wwS0NkeVpYTjFiV1VuTENCMGFHbHpLVHRjYm4wN1hHNWNibkJ5YjNSdkxtOXVVR0YxYzJVZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdZMk11WkdseVpXTjBiM0l1WjJWMFFXNXBiV0YwYVc5dVRXRnVZV2RsY2lncExuSmxiVzkyWlVGdWFXMWhkR2x2YmloMGFHbHpLVHRjYmlBZ0lDQjBhR2x6TG1WdGFYUW9KM0JoZFhObEp5d2dkR2hwY3lrN1hHNTlPMXh1WEc1d2NtOTBieTV6WlhSVWFXMWxJRDBnWm5WdVkzUnBiMjRnS0hScGJXVXBJSHRjYmlBZ0lDQjBhR2x6TGw5amRYSnlaVzUwUm5KaGJXVlFiR0Y1WldRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0IwYUdsekxuUnBiV1VnUFNCMGFXMWxJSHg4SURBN1hHNWNiaUFnSUNCMllYSWdZM1Z5ZG1WeklEMGdkR2hwY3k1amRYSjJaWE03WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SURBc0lHd2dQU0JqZFhKMlpYTXViR1Z1WjNSb095QnBJRHdnYkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmpkWEoyWlNBOUlHTjFjblpsYzF0cFhUdGNiaUFnSUNBZ0lDQWdhV1lnS0dOMWNuWmxMbTl1VkdsdFpVTm9ZVzVuWldSTllXNTFZV3hzZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTNWeWRtVXViMjVVYVcxbFEyaGhibWRsWkUxaGJuVmhiR3g1S0hScGJXVXNJSFJvYVhNcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVmVHRjYmx4dVpuVnVZM1JwYjI0Z2NISnZZMlZ6Y3lBb0tTQjdYRzRnSUNBZ0x5OGdjMkZ0Y0d4bFhHNGdJQ0FnZG1GeUlHbHVabThnUFNCMGFHbHpMbk5oYlhCc1pTZ3BPMXh1WEc0Z0lDQWdhV1lnS0hSb2FYTXVYMnhoYzNSbWNtRnRaVVYyWlc1MFQyNHBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHeGhjM1JKYm1adk8xeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVYMnhoYzNSWGNtRndjR1ZrU1c1bWJ5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHRnpkRWx1Wm04Z1BTQjBhR2x6TGw5c1lYTjBWM0poY0hCbFpFbHVabThnUFNCdVpYY2dWM0poY0hCbFpFbHVabThvYVc1bWJ5azdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1lYTjBTVzVtYnlBOUlIUm9hWE11WDJ4aGMzUlhjbUZ3Y0dWa1NXNW1ienRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuSmxjR1ZoZEVOdmRXNTBJRDRnTVNBbUppQW9LR2x1Wm04dWFYUmxjbUYwYVc5dWN5QjhJREFwSUQ0Z0tHeGhjM1JKYm1adkxtbDBaWEpoZEdsdmJuTWdmQ0F3S1NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaVzFwZENnbmJHRnpkR1p5WVcxbEp5d2dkR2hwY3lrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JzWVhOMFNXNW1ieTV6WlhRb2FXNW1ieWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0dsdVptOHVjM1J2Y0hCbFpDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBiM0FvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsYldsMEtDZG1hVzVwYzJobFpDY3NJSFJvYVhNcE8xeHVJQ0FnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnYzJsdGNHeGxVSEp2WTJWemN5QW9LU0I3WEc0Z0lDQWdkbUZ5SUhScGJXVWdQU0IwYUdsekxuUnBiV1U3WEc0Z0lDQWdkbUZ5SUdSMWNtRjBhVzl1SUQwZ2RHaHBjeTVrZFhKaGRHbHZianRjYmx4dUlDQWdJR2xtSUNoMGFXMWxJRDRnWkhWeVlYUnBiMjRwSUh0Y2JpQWdJQ0FnSUNBZ2RHbHRaU0E5SUhScGJXVWdKU0JrZFhKaGRHbHZianRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUnBiV1VnUFQwOUlEQXBJSFJwYldVZ1BTQmtkWEpoZEdsdmJqdGNiaUFnSUNCOVhHNGdJQ0FnWld4elpTQnBaaUFvZEdsdFpTQThJREFwSUh0Y2JpQWdJQ0FnSUNBZ2RHbHRaU0E5SUhScGJXVWdKU0JrZFhKaGRHbHZianRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUnBiV1VnSVQwOUlEQXBJSFJwYldVZ0t6MGdaSFZ5WVhScGIyNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJSEpoZEdsdklEMGdkR2x0WlNBdklHUjFjbUYwYVc5dU8xeHVYRzRnSUNBZ2RtRnlJR04xY25abGN5QTlJSFJvYVhNdVkzVnlkbVZ6TzF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd0xDQnNaVzRnUFNCamRYSjJaWE11YkdWdVozUm9PeUJwSUR3Z2JHVnVPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdOMWNuWmxJRDBnWTNWeWRtVnpXMmxkTzF4dUlDQWdJQ0FnSUNCamRYSjJaUzV6WVcxd2JHVW9kR2x0WlN3Z2NtRjBhVzhzSUhSb2FYTXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2gwYUdsekxsOXNZWE4wWm5KaGJXVkZkbVZ1ZEU5dUtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDlzWVhOMFNYUmxjbUYwYVc5dWN5QTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXNZWE4wU1hSbGNtRjBhVzl1Y3lBOUlISmhkR2x2TzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdhV1lnS0NoMGFHbHpMblJwYldVZ1BpQXdJQ1ltSUhSb2FYTXVYMnhoYzNSSmRHVnlZWFJwYjI1eklENGdjbUYwYVc4cElIeDhJQ2gwYUdsekxuUnBiV1VnUENBd0lDWW1JSFJvYVhNdVgyeGhjM1JKZEdWeVlYUnBiMjV6SUR3Z2NtRjBhVzhwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtVnRhWFFvSjJ4aGMzUm1jbUZ0WlNjc0lIUm9hWE1wTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmJHRnpkRWwwWlhKaGRHbHZibk1nUFNCeVlYUnBienRjYmlBZ0lDQjlYRzU5WEc1Y2JuQnliM1J2TG5Wd1pHRjBaU0E5SUdaMWJtTjBhVzl1SUNoa1pXeDBZU2tnZTF4dUlDQWdJQzh2SUdOaGJHTjFiR0YwWlNCa1pXeGhlU0IwYVcxbFhHNWNiaUFnSUNCcFppQW9kR2hwY3k1ZlpHVnNZWGxVYVcxbElENGdNQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlrWld4aGVWUnBiV1VnTFQwZ1pHVnNkR0U3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5a1pXeGhlVlJwYldVZ1BpQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJ6ZEdsc2JDQjNZV2wwYVc1blhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJ0WVd0bElHWnBjbk4wSUdaeVlXMWxJSEJsY21abFkzUmNibHh1SUNBZ0lDOHZkbUZ5SUhCc1lYbFFaWEptWldOMFJtbHljM1JHY21GdFpTQTlJQ2gwYUdsekxuUnBiV1VnUFQwOUlEQXBPMXh1SUNBZ0lHbG1JQ2gwYUdsekxsOWpkWEp5Wlc1MFJuSmhiV1ZRYkdGNVpXUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTBhVzFsSUNzOUlDaGtaV3gwWVNBcUlIUm9hWE11YzNCbFpXUXBPMXh1SUNBZ0lIMWNiaUFnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZM1Z5Y21WdWRFWnlZVzFsVUd4aGVXVmtJRDBnZEhKMVpUdGNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMbDl3Y205alpYTnpLQ2s3WEc1OU8xeHVYRzV3Y205MGJ5NWZibVZsWkZKbGRtVnljeUE5SUdaMWJtTjBhVzl1SUNoamRYSnlaVzUwU1hSbGNtRjBhVzl1Y3lrZ2UxeHVJQ0FnSUhaaGNpQjNjbUZ3VFc5a1pTQTlJSFJvYVhNdWQzSmhjRTF2WkdVN1hHNGdJQ0FnZG1GeUlHNWxaV1JTWlhabGNuTWdQU0JtWVd4elpUdGNibHh1SUNBZ0lHbG1JQ2dvZDNKaGNFMXZaR1VnSmlCWGNtRndUVzlrWlUxaGMyc3VVR2x1WjFCdmJtY3BJRDA5UFNCWGNtRndUVzlrWlUxaGMyc3VVR2x1WjFCdmJtY3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHbHpSVzVrSUQwZ1kzVnljbVZ1ZEVsMFpYSmhkR2x2Ym5NZ0xTQW9ZM1Z5Y21WdWRFbDBaWEpoZEdsdmJuTWdmQ0F3S1NBOVBUMGdNRHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHbHpSVzVrSUNZbUlDaGpkWEp5Wlc1MFNYUmxjbUYwYVc5dWN5QStJREFwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqZFhKeVpXNTBTWFJsY21GMGFXOXVjeUF0UFNBeE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZG1GeUlHbHpUMlJrU1hSbGNtRjBhVzl1SUQwZ1kzVnljbVZ1ZEVsMFpYSmhkR2x2Ym5NZ0ppQXhPMXh1SUNBZ0lDQWdJQ0JwWmlBb2FYTlBaR1JKZEdWeVlYUnBiMjRwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzVsWldSU1pYWmxjbk1nUFNBaGJtVmxaRkpsZG1WeWN6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCcFppQW9LSGR5WVhCTmIyUmxJQ1lnVjNKaGNFMXZaR1ZOWVhOckxsSmxkbVZ5YzJVcElEMDlQU0JYY21Gd1RXOWtaVTFoYzJzdVVtVjJaWEp6WlNrZ2UxeHVJQ0FnSUNBZ0lDQnVaV1ZrVW1WMlpYSnpJRDBnSVc1bFpXUlNaWFpsY25NN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnVaV1ZrVW1WMlpYSnpPMXh1ZlR0Y2JseHVjSEp2ZEc4dVoyVjBWM0poY0hCbFpFbHVabThnUFNCbWRXNWpkR2x2YmlBb2RHbHRaU3dnYVc1bWJ5a2dlMXh1SUNBZ0lHbHVabThnUFNCcGJtWnZJSHg4SUc1bGR5QlhjbUZ3Y0dWa1NXNW1ieWdwTzF4dUlDQWdJRnh1SUNBZ0lIWmhjaUJ6ZEc5d2NHVmtJRDBnWm1Gc2MyVTdYRzRnSUNBZ2RtRnlJR1IxY21GMGFXOXVJRDBnZEdocGN5NWtkWEpoZEdsdmJqdGNiaUFnSUNCMllYSWdjbVZ3WldGMFEyOTFiblFnUFNCMGFHbHpMbkpsY0dWaGRFTnZkVzUwTzF4dVhHNGdJQ0FnZG1GeUlHTjFjbkpsYm5SSmRHVnlZWFJwYjI1eklEMGdkR2x0WlNBK0lEQWdQeUFvZEdsdFpTQXZJR1IxY21GMGFXOXVLU0E2SUMwb2RHbHRaU0F2SUdSMWNtRjBhVzl1S1R0Y2JpQWdJQ0JwWmlBb1kzVnljbVZ1ZEVsMFpYSmhkR2x2Ym5NZ1BqMGdjbVZ3WldGMFEyOTFiblFwSUh0Y2JpQWdJQ0FnSUNBZ1kzVnljbVZ1ZEVsMFpYSmhkR2x2Ym5NZ1BTQnlaWEJsWVhSRGIzVnVkRHRjYmx4dUlDQWdJQ0FnSUNCemRHOXdjR1ZrSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnZG1GeUlIUmxiWEJTWVhScGJ5QTlJSEpsY0dWaGRFTnZkVzUwSUMwZ0tISmxjR1ZoZEVOdmRXNTBJSHdnTUNrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwWlcxd1VtRjBhVzhnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUmxiWEJTWVhScGJ5QTlJREU3SUNBdkx5RGxwb0xtbnB6bWtxM21sTDdvdjRmdnZJemxpcWpubEx2a3VJM2xwSTNrdlkxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjBhVzFsSUQwZ2RHVnRjRkpoZEdsdklDb2daSFZ5WVhScGIyNGdLaUFvZEdsdFpTQStJREFnUHlBeElEb2dMVEVwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoMGFXMWxJRDRnWkhWeVlYUnBiMjRwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSFJsYlhCVWFXMWxJRDBnZEdsdFpTQWxJR1IxY21GMGFXOXVPMXh1SUNBZ0lDQWdJQ0IwYVcxbElEMGdkR1Z0Y0ZScGJXVWdQVDA5SURBZ1B5QmtkWEpoZEdsdmJpQTZJSFJsYlhCVWFXMWxPMXh1SUNBZ0lIMWNiaUFnSUNCbGJITmxJR2xtSUNoMGFXMWxJRHdnTUNrZ2UxeHVJQ0FnSUNBZ0lDQjBhVzFsSUQwZ2RHbHRaU0FsSUdSMWNtRjBhVzl1TzF4dUlDQWdJQ0FnSUNCcFppQW9kR2x0WlNBaFBUMGdNQ0FwSUhScGJXVWdLejBnWkhWeVlYUnBiMjQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkbUZ5SUc1bFpXUlNaWFpsY25NZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0IyWVhJZ2MyaHZkV3hrVjNKaGNDQTlJSFJvYVhNdVgzZHlZWEJOYjJSbElDWWdWM0poY0UxdlpHVk5ZWE5yTGxOb2IzVnNaRmR5WVhBN1hHNGdJQ0FnYVdZZ0tITm9iM1ZzWkZkeVlYQXBJSHRjYmlBZ0lDQWdJQ0FnYm1WbFpGSmxkbVZ5Y3lBOUlIUm9hWE11WDI1bFpXUlNaWFpsY25Nb1kzVnljbVZ1ZEVsMFpYSmhkR2x2Ym5NcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhaaGNpQmthWEpsWTNScGIyNGdQU0J1WldWa1VtVjJaWEp6SUQ4Z0xURWdPaUF4TzF4dUlDQWdJR2xtSUNoMGFHbHpMbk53WldWa0lEd2dNQ2tnZTF4dUlDQWdJQ0FnSUNCa2FYSmxZM1JwYjI0Z0tqMGdMVEU3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnWTJGc1kzVnNZWFJsSUhkeVlYQndaV1FnZEdsdFpWeHVJQ0FnSUdsbUlDaHphRzkxYkdSWGNtRndJQ1ltSUc1bFpXUlNaWFpsY25NcElIdGNiaUFnSUNBZ0lDQWdkR2x0WlNBOUlHUjFjbUYwYVc5dUlDMGdkR2x0WlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwYm1adkxuSmhkR2x2SUQwZ2RHbHRaU0F2SUdSMWNtRjBhVzl1TzF4dUlDQWdJR2x1Wm04dWRHbHRaU0E5SUhScGJXVTdYRzRnSUNBZ2FXNW1ieTVrYVhKbFkzUnBiMjRnUFNCa2FYSmxZM1JwYjI0N1hHNGdJQ0FnYVc1bWJ5NXpkRzl3Y0dWa0lEMGdjM1J2Y0hCbFpEdGNiaUFnSUNCcGJtWnZMbWwwWlhKaGRHbHZibk1nUFNCamRYSnlaVzUwU1hSbGNtRjBhVzl1Y3p0Y2JseHVJQ0FnSUhKbGRIVnliaUJwYm1adk8xeHVmVHRjYmx4dWNISnZkRzh1YzJGdGNHeGxJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUhaaGNpQnBibVp2SUQwZ2RHaHBjeTVuWlhSWGNtRndjR1ZrU1c1bWJ5aDBhR2x6TG5ScGJXVXNJSFJvYVhNdVgzZHlZWEJ3WldSSmJtWnZLVHRjYmlBZ0lDQjJZWElnWTNWeWRtVnpJRDBnZEdocGN5NWpkWEoyWlhNN1hHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQXNJR3hsYmlBOUlHTjFjblpsY3k1c1pXNW5kR2c3SUdrZ1BDQnNaVzQ3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1kzVnlkbVVnUFNCamRYSjJaWE5iYVYwN1hHNGdJQ0FnSUNBZ0lHTjFjblpsTG5OaGJYQnNaU2hwYm1adkxuUnBiV1VzSUdsdVptOHVjbUYwYVc4c0lIUm9hWE1wTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQnBibVp2TzF4dWZUdGNibHh1WEc0dktpcGNiaUFxSUNFalpXNGdWR2hsSUdOc2FYQWdkR2hoZENCcGN5QmlaV2x1WnlCd2JHRjVaV1FnWW5rZ2RHaHBjeUJoYm1sdFlYUnBiMjRnYzNSaGRHVXVYRzRnS2lBaEkzcG9JT2F0cE9XS3FPZVV1K2VLdHVhQWdlYXRvK1djcU9hU3JlYVV2dWVhaE9XSnF1aStrZU9BZ2x4dUlDb2dRSEJ5YjNCbGNuUjVJR05zYVhCY2JpQXFJRUIwZVhCbElIdEJibWx0WVhScGIyNURiR2x3ZlZ4dUlDb2dRR1pwYm1Gc1hHNGdLaTljYm1wekxtZGxkQ2h3Y205MGJ5d2dKMk5zYVhBbkxDQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDJOc2FYQTdYRzU5S1R0Y2JseHVMeW9xWEc0Z0tpQWhJMlZ1SUZSb1pTQnVZVzFsSUc5bUlIUm9aU0J3YkdGNWFXNW5JR0Z1YVcxaGRHbHZiaTVjYmlBcUlDRWplbWdnNVlxbzU1Uzc1NXFFNVpDTjVhMlhYRzRnS2lCQWNISnZjR1Z5ZEhrZ2JtRnRaVnh1SUNvZ1FIUjVjR1VnZTFOMGNtbHVaMzFjYmlBcUlFQnlaV0ZrVDI1c2VWeHVJQ292WEc1cWN5NW5aWFFvY0hKdmRHOHNJQ2R1WVcxbEp5d2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dVlXMWxPMXh1ZlNrN1hHNWNibXB6TG05aWMyOXNaWFJsS0hCeWIzUnZMQ0FuUVc1cGJXRjBhVzl1VTNSaGRHVXViR1Z1WjNSb0p5d2dKMlIxY21GMGFXOXVKeWs3WEc1Y2JtcHpMbWRsZEhObGRDaHdjbTkwYnl3Z0oyTjFjblpsVEc5aFpHVmtKeXhjYmlBZ0lDQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtTjFjblpsY3k1c1pXNW5kR2dnUGlBd08xeHVJQ0FnSUgwc1hHNGdJQ0FnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1OMWNuWmxjeTVzWlc1bmRHZ2dQU0F3TzF4dUlDQWdJSDFjYmlrN1hHNWNibHh1YW5NdVoyVjBjMlYwS0hCeWIzUnZMQ0FuZDNKaGNFMXZaR1VuTEZ4dUlDQWdJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM2R5WVhCTmIyUmxPMXh1SUNBZ0lIMHNYRzRnSUNBZ1puVnVZM1JwYjI0Z0tIWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNkeVlYQk5iMlJsSUQwZ2RtRnNkV1U3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLRU5EWDBWRVNWUlBVaWtnY21WMGRYSnVPMXh1WEc0Z0lDQWdJQ0FnSUM4dklHUjVibUZ0YVdNZ1kyaGhibWRsSUhkeVlYQk5iMlJsSUhkcGJHd2dibVZsWkNCeVpYTmxkQ0IwYVcxbElIUnZJREJjYmlBZ0lDQWdJQ0FnZEdocGN5NTBhVzFsSUQwZ01EdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2RtRnNkV1VnSmlCWGNtRndUVzlrWlUxaGMyc3VURzl2Y0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXlaWEJsWVhSRGIzVnVkQ0E5SUVsdVptbHVhWFI1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1eVpYQmxZWFJEYjNWdWRDQTlJREU3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1hHNGdJQ0FnZlZ4dUtUdGNibHh1YW5NdVoyVjBjMlYwS0hCeWIzUnZMQ0FuY21Wd1pXRjBRMjkxYm5RbkxGeHVJQ0FnSUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNHVmhkRU52ZFc1ME8xeHVJQ0FnSUgwc1hHNGdJQ0FnWm5WdVkzUnBiMjRnS0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM0psY0dWaGRFTnZkVzUwSUQwZ2RtRnNkV1U3WEc0Z0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNCMllYSWdjMmh2ZFd4a1YzSmhjQ0E5SUhSb2FYTXVYM2R5WVhCTmIyUmxJQ1lnVjNKaGNFMXZaR1ZOWVhOckxsTm9iM1ZzWkZkeVlYQTdYRzRnSUNBZ0lDQWdJSFpoY2lCeVpYWmxjbk5sSUQwZ0tIUm9hWE11ZDNKaGNFMXZaR1VnSmlCWGNtRndUVzlrWlUxaGMyc3VVbVYyWlhKelpTa2dQVDA5SUZkeVlYQk5iMlJsVFdGemF5NVNaWFpsY25ObE8xeHVJQ0FnSUNBZ0lDQnBaaUFvZG1Gc2RXVWdQVDA5SUVsdVptbHVhWFI1SUNZbUlDRnphRzkxYkdSWGNtRndJQ1ltSUNGeVpYWmxjbk5sS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXdjbTlqWlhOeklEMGdjMmx0Y0d4bFVISnZZMlZ6Y3p0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzQnliMk5sYzNNZ1BTQndjbTlqWlhOek8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVLVHRjYmx4dWFuTXVaMlYwYzJWMEtIQnliM1J2TENBblpHVnNZWGtuTENCY2JpQWdJQ0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlrWld4aGVUdGNiaUFnSUNCOUxGeHVJQ0FnSUdaMWJtTjBhVzl1SUNoMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlrWld4aGVWUnBiV1VnUFNCMGFHbHpMbDlrWld4aGVTQTlJSFpoYkhWbE8xeHVJQ0FnSUgxY2JpazdYRzVjYmx4dVkyTXVRVzVwYldGMGFXOXVVM1JoZEdVZ1BTQnRiMlIxYkdVdVpYaHdiM0owY3lBOUlFRnVhVzFoZEdsdmJsTjBZWFJsTzF4dUlsMTkiXX0=