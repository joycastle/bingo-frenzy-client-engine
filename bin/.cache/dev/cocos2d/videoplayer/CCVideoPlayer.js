(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/videoplayer/CCVideoPlayer.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var VideoPlayerImpl = require('./video-player-impl');
        var EventType = VideoPlayerImpl.EventType;
        var ResourceType = cc.Enum({
            REMOTE: 0,
            LOCAL: 1
        });
        var VideoPlayer = cc.Class({
            name: 'cc.VideoPlayer',
            extends: cc.Component,
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.ui/VideoPlayer',
                inspector: 'packages://inspector/inspectors/comps/videoplayer.js',
                help: 'i18n:COMPONENT.help_url.videoplayer',
                executeInEditMode: true
            },
            properties: {
                _resourceType: ResourceType.REMOTE,
                resourceType: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.videoplayer.resourceType',
                    type: ResourceType,
                    set: function set(value) {
                        this._resourceType = value;
                        this._updateVideoSource();
                    },
                    get: function get() {
                        return this._resourceType;
                    }
                },
                _remoteURL: '',
                remoteURL: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.videoplayer.url',
                    type: cc.String,
                    set: function set(url) {
                        this._remoteURL = url;
                        this._updateVideoSource();
                    },
                    get: function get() {
                        return this._remoteURL;
                    }
                },
                _clip: {
                    default: null,
                    type: cc.Asset
                },
                clip: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.videoplayer.video',
                    get: function get() {
                        return this._clip;
                    },
                    set: function set(value) {
                        this._clip = value;
                        this._updateVideoSource();
                    },
                    type: cc.Asset
                },
                currentTime: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.videoplayer.currentTime',
                    type: cc.Float,
                    set: function set(time) {
                        if (this._impl) {
                            this._impl.seekTo(time);
                        }
                    },
                    get: function get() {
                        if (this._impl) {
                            return this._impl.currentTime();
                        }
                        return -1;
                    }
                },
                _volume: 1,
                volume: {
                    get: function get() {
                        return this._volume;
                    },
                    set: function set(value) {
                        this._volume = value;
                        if (this.isPlaying() && !this._mute) {
                            this._syncVolume();
                        }
                    },
                    range: [
                        0,
                        1
                    ],
                    type: cc.Float,
                    tooltip: CC_DEV && 'i18n:COMPONENT.videoplayer.volume'
                },
                _mute: false,
                mute: {
                    get: function get() {
                        return this._mute;
                    },
                    set: function set(value) {
                        this._mute = value;
                        this._syncVolume();
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.videoplayer.mute'
                },
                keepAspectRatio: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.videoplayer.keepAspectRatio',
                    default: true,
                    type: cc.Boolean,
                    notify: function notify() {
                        this._impl && this._impl.setKeepAspectRatioEnabled(this.keepAspectRatio);
                    }
                },
                _isFullscreen: {
                    default: false,
                    formerlySerializedAs: '_N$isFullscreen'
                },
                isFullscreen: {
                    get: function get() {
                        if (!CC_EDITOR) {
                            this._isFullscreen = this._impl && this._impl.isFullScreenEnabled();
                        }
                        return this._isFullscreen;
                    },
                    set: function set(enable) {
                        this._isFullscreen = enable;
                        if (!CC_EDITOR) {
                            this._impl && this._impl.setFullScreenEnabled(enable);
                        }
                    },
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.videoplayer.isFullscreen'
                },
                videoPlayerEvent: {
                    default: [],
                    type: cc.Component.EventHandler
                }
            },
            statics: {
                EventType: EventType,
                ResourceType: ResourceType,
                Impl: VideoPlayerImpl
            },
            ctor: function ctor() {
                this._impl = new VideoPlayerImpl();
            },
            _syncVolume: function _syncVolume() {
                var impl = this._impl;
                if (impl) {
                    var volume = this._mute ? 0 : this._volume;
                    impl.setVolume(volume);
                }
            },
            _updateVideoSource: function _updateVideoSource() {
                var url = '';
                if (this.resourceType === ResourceType.REMOTE) {
                    url = this.remoteURL;
                } else if (this._clip) {
                    url = this._clip.nativeUrl || '';
                }
                if (url && cc.loader.md5Pipe) {
                    url = cc.loader.md5Pipe.transformURL(url);
                }
                this._impl.setURL(url, this._mute || this._volume === 0);
            },
            onLoad: function onLoad() {
                var impl = this._impl;
                if (impl) {
                    impl.createDomElementIfNeeded(this._mute || this._volume === 0);
                    this._updateVideoSource();
                    if (!CC_EDITOR) {
                        impl.seekTo(this.currentTime);
                        impl.setKeepAspectRatioEnabled(this.keepAspectRatio);
                        impl.setFullScreenEnabled(this._isFullscreen);
                        this.pause();
                        impl.setEventListener(EventType.PLAYING, this.onPlaying.bind(this));
                        impl.setEventListener(EventType.PAUSED, this.onPasued.bind(this));
                        impl.setEventListener(EventType.STOPPED, this.onStopped.bind(this));
                        impl.setEventListener(EventType.COMPLETED, this.onCompleted.bind(this));
                        impl.setEventListener(EventType.META_LOADED, this.onMetaLoaded.bind(this));
                        impl.setEventListener(EventType.CLICKED, this.onClicked.bind(this));
                        impl.setEventListener(EventType.READY_TO_PLAY, this.onReadyToPlay.bind(this));
                    }
                }
            },
            onRestore: function onRestore() {
                if (!this._impl) {
                    this._impl = new VideoPlayerImpl();
                }
            },
            onEnable: function onEnable() {
                if (this._impl) {
                    this._impl.enable();
                }
            },
            onDisable: function onDisable() {
                if (this._impl) {
                    this._impl.disable();
                }
            },
            onDestroy: function onDestroy() {
                if (this._impl) {
                    this._impl.destroy();
                    this._impl = null;
                }
            },
            update: function update(dt) {
                if (this._impl) {
                    this._impl.updateMatrix(this.node);
                }
            },
            onReadyToPlay: function onReadyToPlay() {
                cc.Component.EventHandler.emitEvents(this.videoPlayerEvent, this, EventType.READY_TO_PLAY);
                this.node.emit('ready-to-play', this);
            },
            onMetaLoaded: function onMetaLoaded() {
                cc.Component.EventHandler.emitEvents(this.videoPlayerEvent, this, EventType.META_LOADED);
                this.node.emit('meta-loaded', this);
            },
            onClicked: function onClicked() {
                cc.Component.EventHandler.emitEvents(this.videoPlayerEvent, this, EventType.CLICKED);
                this.node.emit('clicked', this);
            },
            onPlaying: function onPlaying() {
                cc.Component.EventHandler.emitEvents(this.videoPlayerEvent, this, EventType.PLAYING);
                this.node.emit('playing', this);
            },
            onPasued: function onPasued() {
                cc.Component.EventHandler.emitEvents(this.videoPlayerEvent, this, EventType.PAUSED);
                this.node.emit('paused', this);
            },
            onStopped: function onStopped() {
                cc.Component.EventHandler.emitEvents(this.videoPlayerEvent, this, EventType.STOPPED);
                this.node.emit('stopped', this);
            },
            onCompleted: function onCompleted() {
                cc.Component.EventHandler.emitEvents(this.videoPlayerEvent, this, EventType.COMPLETED);
                this.node.emit('completed', this);
            },
            play: function play() {
                if (this._impl) {
                    this._syncVolume();
                    this._impl.play();
                }
            },
            resume: function resume() {
                if (this._impl) {
                    this._syncVolume();
                    this._impl.resume();
                }
            },
            pause: function pause() {
                if (this._impl) {
                    this._impl.pause();
                }
            },
            stop: function stop() {
                if (this._impl) {
                    this._impl.stop();
                }
            },
            getDuration: function getDuration() {
                if (this._impl) {
                    return this._impl.duration();
                }
                return -1;
            },
            isPlaying: function isPlaying() {
                if (this._impl) {
                    return this._impl.isPlaying();
                }
                return false;
            }
        });
        cc.VideoPlayer = module.exports = VideoPlayer;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,