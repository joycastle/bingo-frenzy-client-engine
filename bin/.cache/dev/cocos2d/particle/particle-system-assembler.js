(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/particle/particle-system-assembler.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _assembler = require('../core/renderer/assembler');
        var _assembler2 = _interopRequireDefault(_assembler);
        var _inputAssembler = require('../renderer/core/input-assembler');
        var _inputAssembler2 = _interopRequireDefault(_inputAssembler);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var ParticleSystem = require('./CCParticleSystem');
        var renderer = require('../core/renderer/');
        var QuadBuffer = require('../core/renderer/webgl/quad-buffer');
        var vfmtPosUvColor = require('../core/renderer/webgl/vertex-format').vfmtPosUvColor;
        var ParticleAssembler = function (_Assembler) {
            _inherits(ParticleAssembler, _Assembler);
            function ParticleAssembler(comp) {
                _classCallCheck(this, ParticleAssembler);
                var _this = _possibleConstructorReturn(this, (ParticleAssembler.__proto__ || Object.getPrototypeOf(ParticleAssembler)).call(this, comp));
                _this._buffer = null;
                _this._ia = null;
                _this._vfmt = vfmtPosUvColor;
                return _this;
            }
            _createClass(ParticleAssembler, [
                {
                    key: 'getBuffer',
                    value: function getBuffer() {
                        if (!this._buffer) {
                            this._buffer = new QuadBuffer(renderer._handle, vfmtPosUvColor);
                            this._ia = new _inputAssembler2.default();
                            this._ia._vertexBuffer = this._buffer._vb;
                            this._ia._indexBuffer = this._buffer._ib;
                            this._ia._start = 0;
                            this._ia._count = 0;
                        }
                        return this._buffer;
                    }
                },
                {
                    key: 'fillBuffers',
                    value: function fillBuffers(comp, renderer) {
                        if (!this._ia)
                            return;
                        renderer.node = comp.node;
                        renderer.material = comp.sharedMaterials[0];
                        renderer._flushIA(this._ia);
                    }
                }
            ]);
            return ParticleAssembler;
        }(_assembler2.default);
        _assembler2.default.register(ParticleSystem, ParticleAssembler);
        module.exports = ParticleAssembler;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,