(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/compression/gzip.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var GZip = function Jacob__GZip(data) {
            this.data = data;
            this.debug = false;
            this.gpflags = undefined;
            this.files = 0;
            this.unzipped = [];
            this.buf32k = new Array(32768);
            this.bIdx = 0;
            this.modeZIP = false;
            this.bytepos = 0;
            this.bb = 1;
            this.bits = 0;
            this.nameBuf = [];
            this.fileout = undefined;
            this.literalTree = new Array(GZip.LITERALS);
            this.distanceTree = new Array(32);
            this.treepos = 0;
            this.Places = null;
            this.len = 0;
            this.fpos = new Array(17);
            this.fpos[0] = 0;
            this.flens = undefined;
            this.fmax = undefined;
        };
        GZip.gunzip = function (string) {
            if (string.constructor === Array) {
            } else if (string.constructor === String) {
            }
            var gzip = new GZip(string);
            return gzip.gunzip()[0][0];
        };
        GZip.HufNode = function () {
            this.b0 = 0;
            this.b1 = 0;
            this.jump = null;
            this.jumppos = -1;
        };
        GZip.LITERALS = 288;
        GZip.NAMEMAX = 256;
        GZip.bitReverse = [
            0,
            128,
            64,
            192,
            32,
            160,
            96,
            224,
            16,
            144,
            80,
            208,
            48,
            176,
            112,
            240,
            8,
            136,
            72,
            200,
            40,
            168,
            104,
            232,
            24,
            152,
            88,
            216,
            56,
            184,
            120,
            248,
            4,
            132,
            68,
            196,
            36,
            164,
            100,
            228,
            20,
            148,
            84,
            212,
            52,
            180,
            116,
            244,
            12,
            140,
            76,
            204,
            44,
            172,
            108,
            236,
            28,
            156,
            92,
            220,
            60,
            188,
            124,
            252,
            2,
            130,
            66,
            194,
            34,
            162,
            98,
            226,
            18,
            146,
            82,
            210,
            50,
            178,
            114,
            242,
            10,
            138,
            74,
            202,
            42,
            170,
            106,
            234,
            26,
            154,
            90,
            218,
            58,
            186,
            122,
            250,
            6,
            134,
            70,
            198,
            38,
            166,
            102,
            230,
            22,
            150,
            86,
            214,
            54,
            182,
            118,
            246,
            14,
            142,
            78,
            206,
            46,
            174,
            110,
            238,
            30,
            158,
            94,
            222,
            62,
            190,
            126,
            254,
            1,
            129,
            65,
            193,
            33,
            161,
            97,
            225,
            17,
            145,
            81,
            209,
            49,
            177,
            113,
            241,
            9,
            137,
            73,
            201,
            41,
            169,
            105,
            233,
            25,
            153,
            89,
            217,
            57,
            185,
            121,
            249,
            5,
            133,
            69,
            197,
            37,
            165,
            101,
            229,
            21,
            149,
            85,
            213,
            53,
            181,
            117,
            245,
            13,
            141,
            77,
            205,
            45,
            173,
            109,
            237,
            29,
            157,
            93,
            221,
            61,
            189,
            125,
            253,
            3,
            131,
            67,
            195,
            35,
            163,
            99,
            227,
            19,
            147,
            83,
            211,
            51,
            179,
            115,
            243,
            11,
            139,
            75,
            203,
            43,
            171,
            107,
            235,
            27,
            155,
            91,
            219,
            59,
            187,
            123,
            251,
            7,
            135,
            71,
            199,
            39,
            167,
            103,
            231,
            23,
            151,
            87,
            215,
            55,
            183,
            119,
            247,
            15,
            143,
            79,
            207,
            47,
            175,
            111,
            239,
            31,
            159,
            95,
            223,
            63,
            191,
            127,
            255
        ];
        GZip.cplens = [
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            13,
            15,
            17,
            19,
            23,
            27,
            31,
            35,
            43,
            51,
            59,
            67,
            83,
            99,
            115,
            131,
            163,
            195,
            227,
            258,
            0,
            0
        ];
        GZip.cplext = [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            2,
            2,
            2,
            2,
            3,
            3,
            3,
            3,
            4,
            4,
            4,
            4,
            5,
            5,
            5,
            5,
            0,
            99,
            99
        ];
        GZip.cpdist = [
            1,
            2,
            3,
            4,
            5,
            7,
            9,
            13,
            17,
            25,
            33,
            49,
            65,
            97,
            129,
            193,
            257,
            385,
            513,
            769,
            1025,
            1537,
            2049,
            3073,
            4097,
            6145,
            8193,
            12289,
            16385,
            24577
        ];
        GZip.cpdext = [
            0,
            0,
            0,
            0,
            1,
            1,
            2,
            2,
            3,
            3,
            4,
            4,
            5,
            5,
            6,
            6,
            7,
            7,
            8,
            8,
            9,
            9,
            10,
            10,
            11,
            11,
            12,
            12,
            13,
            13
        ];
        GZip.border = [
            16,
            17,
            18,
            0,
            8,
            7,
            9,
            6,
            10,
            5,
            11,
            4,
            12,
            3,
            13,
            2,
            14,
            1,
            15
        ];
        GZip.prototype.gunzip = function () {
            this.outputArr = [];
            this.nextFile();
            return this.unzipped;
        };
        GZip.prototype.readByte = function () {
            this.bits += 8;
            if (this.bytepos < this.data.length) {
                return this.data.charCodeAt(this.bytepos++);
            } else {
                return -1;
            }
        };
        GZip.prototype.byteAlign = function () {
            this.bb = 1;
        };
        GZip.prototype.readBit = function () {
            var carry;
            this.bits++;
            carry = this.bb & 1;
            this.bb >>= 1;
            if (this.bb === 0) {
                this.bb = this.readByte();
                carry = this.bb & 1;
                this.bb = this.bb >> 1 | 128;
            }
            return carry;
        };
        GZip.prototype.readBits = function (a) {
            var res = 0, i = a;
            while (i--) {
                res = res << 1 | this.readBit();
            }
            if (a)
                res = GZip.bitReverse[res] >> 8 - a;
            return res;
        };
        GZip.prototype.flushBuffer = function () {
            this.bIdx = 0;
        };
        GZip.prototype.addBuffer = function (a) {
            this.buf32k[this.bIdx++] = a;
            this.outputArr.push(String.fromCharCode(a));
            if (this.bIdx === 32768)
                this.bIdx = 0;
        };
        GZip.prototype.IsPat = function () {
            while (1) {
                if (this.fpos[this.len] >= this.fmax)
                    return -1;
                if (this.flens[this.fpos[this.len]] === this.len)
                    return this.fpos[this.len]++;
                this.fpos[this.len]++;
            }
        };
        GZip.prototype.Rec = function () {
            var curplace = this.Places[this.treepos];
            var tmp;
            if (this.len === 17) {
                return -1;
            }
            this.treepos++;
            this.len++;
            tmp = this.IsPat();
            if (tmp >= 0) {
                curplace.b0 = tmp;
            } else {
                curplace.b0 = 32768;
                if (this.Rec())
                    return -1;
            }
            tmp = this.IsPat();
            if (tmp >= 0) {
                curplace.b1 = tmp;
                curplace.jump = null;
            } else {
                curplace.b1 = 32768;
                curplace.jump = this.Places[this.treepos];
                curplace.jumppos = this.treepos;
                if (this.Rec())
                    return -1;
            }
            this.len--;
            return 0;
        };
        GZip.prototype.CreateTree = function (currentTree, numval, lengths, show) {
            var i;
            this.Places = currentTree;
            this.treepos = 0;
            this.flens = lengths;
            this.fmax = numval;
            for (i = 0; i < 17; i++) {
                this.fpos[i] = 0;
            }
            this.len = 0;
            if (this.Rec()) {
                return -1;
            }
            return 0;
        };
        GZip.prototype.DecodeValue = function (currentTree) {
            var len, i, xtreepos = 0, X = currentTree[xtreepos], b;
            while (1) {
                b = this.readBit();
                if (b) {
                    if (!(X.b1 & 32768)) {
                        return X.b1;
                    }
                    X = X.jump;
                    len = currentTree.length;
                    for (i = 0; i < len; i++) {
                        if (currentTree[i] === X) {
                            xtreepos = i;
                            break;
                        }
                    }
                } else {
                    if (!(X.b0 & 32768)) {
                        return X.b0;
                    }
                    xtreepos++;
                    X = currentTree[xtreepos];
                }
            }
            return -1;
        };
        GZip.prototype.DeflateLoop = function () {
            var last, c, type, i, len;
            do {
                last = this.readBit();
                type = this.readBits(2);
                if (type === 0) {
                    var blockLen, cSum;
                    this.byteAlign();
                    blockLen = this.readByte();
                    blockLen |= this.readByte() << 8;
                    cSum = this.readByte();
                    cSum |= this.readByte() << 8;
                    if ((blockLen ^ ~cSum) & 65535) {
                        document.write('BlockLen checksum mismatch\n');
                    }
                    while (blockLen--) {
                        c = this.readByte();
                        this.addBuffer(c);
                    }
                } else if (type === 1) {
                    var j;
                    while (1) {
                        j = GZip.bitReverse[this.readBits(7)] >> 1;
                        if (j > 23) {
                            j = j << 1 | this.readBit();
                            if (j > 199) {
                                j -= 128;
                                j = j << 1 | this.readBit();
                            } else {
                                j -= 48;
                                if (j > 143) {
                                    j = j + 136;
                                }
                            }
                        } else {
                            j += 256;
                        }
                        if (j < 256) {
                            this.addBuffer(j);
                        } else if (j === 256) {
                            break;
                        } else {
                            var len, dist;
                            j -= 256 + 1;
                            len = this.readBits(GZip.cplext[j]) + GZip.cplens[j];
                            j = GZip.bitReverse[this.readBits(5)] >> 3;
                            if (GZip.cpdext[j] > 8) {
                                dist = this.readBits(8);
                                dist |= this.readBits(GZip.cpdext[j] - 8) << 8;
                            } else {
                                dist = this.readBits(GZip.cpdext[j]);
                            }
                            dist += GZip.cpdist[j];
                            for (j = 0; j < len; j++) {
                                var c = this.buf32k[this.bIdx - dist & 32767];
                                this.addBuffer(c);
                            }
                        }
                    }
                } else if (type === 2) {
                    var j, n, literalCodes, distCodes, lenCodes;
                    var ll = new Array(288 + 32);
                    literalCodes = 257 + this.readBits(5);
                    distCodes = 1 + this.readBits(5);
                    lenCodes = 4 + this.readBits(4);
                    for (j = 0; j < 19; j++) {
                        ll[j] = 0;
                    }
                    for (j = 0; j < lenCodes; j++) {
                        ll[GZip.border[j]] = this.readBits(3);
                    }
                    len = this.distanceTree.length;
                    for (i = 0; i < len; i++) {
                        this.distanceTree[i] = new GZip.HufNode();
                    }
                    if (this.CreateTree(this.distanceTree, 19, ll, 0)) {
                        this.flushBuffer();
                        return 1;
                    }
                    n = literalCodes + distCodes;
                    i = 0;
                    var z = -1;
                    while (i < n) {
                        z++;
                        j = this.DecodeValue(this.distanceTree);
                        if (j < 16) {
                            ll[i++] = j;
                        } else if (j === 16) {
                            var l;
                            j = 3 + this.readBits(2);
                            if (i + j > n) {
                                this.flushBuffer();
                                return 1;
                            }
                            l = i ? ll[i - 1] : 0;
                            while (j--) {
                                ll[i++] = l;
                            }
                        } else {
                            if (j === 17) {
                                j = 3 + this.readBits(3);
                            } else {
                                j = 11 + this.readBits(7);
                            }
                            if (i + j > n) {
                                this.flushBuffer();
                                return 1;
                            }
                            while (j--) {
                                ll[i++] = 0;
                            }
                        }
                    }
                    len = this.literalTree.length;
                    for (i = 0; i < len; i++) {
                        this.literalTree[i] = new GZip.HufNode();
                    }
                    if (this.CreateTree(this.literalTree, literalCodes, ll, 0)) {
                        this.flushBuffer();
                        return 1;
                    }
                    len = this.literalTree.length;
                    for (i = 0; i < len; i++) {
                        this.distanceTree[i] = new GZip.HufNode();
                    }
                    var ll2 = new Array();
                    for (i = literalCodes; i < ll.length; i++) {
                        ll2[i - literalCodes] = ll[i];
                    }
                    if (this.CreateTree(this.distanceTree, distCodes, ll2, 0)) {
                        this.flushBuffer();
                        return 1;
                    }
                    while (1) {
                        j = this.DecodeValue(this.literalTree);
                        if (j >= 256) {
                            var len, dist;
                            j -= 256;
                            if (j === 0) {
                                break;
                            }
                            j--;
                            len = this.readBits(GZip.cplext[j]) + GZip.cplens[j];
                            j = this.DecodeValue(this.distanceTree);
                            if (GZip.cpdext[j] > 8) {
                                dist = this.readBits(8);
                                dist |= this.readBits(GZip.cpdext[j] - 8) << 8;
                            } else {
                                dist = this.readBits(GZip.cpdext[j]);
                            }
                            dist += GZip.cpdist[j];
                            while (len--) {
                                var c = this.buf32k[this.bIdx - dist & 32767];
                                this.addBuffer(c);
                            }
                        } else {
                            this.addBuffer(j);
                        }
                    }
                }
            } while (!last);
            this.flushBuffer();
            this.byteAlign();
            return 0;
        };
        GZip.prototype.unzipFile = function (name) {
            var i;
            this.gunzip();
            for (i = 0; i < this.unzipped.length; i++) {
                if (this.unzipped[i][1] === name) {
                    return this.unzipped[i][0];
                }
            }
        };
        GZip.prototype.nextFile = function () {
            this.outputArr = [];
            this.modeZIP = false;
            var tmp = [];
            tmp[0] = this.readByte();
            tmp[1] = this.readByte();
            if (tmp[0] === 120 && tmp[1] === 218) {
                this.DeflateLoop();
                this.unzipped[this.files] = [
                    this.outputArr.join(''),
                    'geonext.gxt'
                ];
                this.files++;
            }
            if (tmp[0] === 31 && tmp[1] === 139) {
                this.skipdir();
                this.unzipped[this.files] = [
                    this.outputArr.join(''),
                    'file'
                ];
                this.files++;
            }
            if (tmp[0] === 80 && tmp[1] === 75) {
                this.modeZIP = true;
                tmp[2] = this.readByte();
                tmp[3] = this.readByte();
                if (tmp[2] === 3 && tmp[3] === 4) {
                    tmp[0] = this.readByte();
                    tmp[1] = this.readByte();
                    this.gpflags = this.readByte();
                    this.gpflags |= this.readByte() << 8;
                    var method = this.readByte();
                    method |= this.readByte() << 8;
                    this.readByte();
                    this.readByte();
                    this.readByte();
                    this.readByte();
                    var compSize = this.readByte();
                    compSize |= this.readByte() << 8;
                    compSize |= this.readByte() << 16;
                    compSize |= this.readByte() << 24;
                    var size = this.readByte();
                    size |= this.readByte() << 8;
                    size |= this.readByte() << 16;
                    size |= this.readByte() << 24;
                    var filelen = this.readByte();
                    filelen |= this.readByte() << 8;
                    var extralen = this.readByte();
                    extralen |= this.readByte() << 8;
                    i = 0;
                    this.nameBuf = [];
                    while (filelen--) {
                        var c = this.readByte();
                        if (c === '/' | c === ':') {
                            i = 0;
                        } else if (i < GZip.NAMEMAX - 1) {
                            this.nameBuf[i++] = String.fromCharCode(c);
                        }
                    }
                    if (!this.fileout)
                        this.fileout = this.nameBuf;
                    var i = 0;
                    while (i < extralen) {
                        c = this.readByte();
                        i++;
                    }
                    if (method === 8) {
                        this.DeflateLoop();
                        this.unzipped[this.files] = [
                            this.outputArr.join(''),
                            this.nameBuf.join('')
                        ];
                        this.files++;
                    }
                    this.skipdir();
                }
            }
        };
        GZip.prototype.skipdir = function () {
            var tmp = [];
            var compSize, size, os, i, c;
            if (this.gpflags & 8) {
                tmp[0] = this.readByte();
                tmp[1] = this.readByte();
                tmp[2] = this.readByte();
                tmp[3] = this.readByte();
                compSize = this.readByte();
                compSize |= this.readByte() << 8;
                compSize |= this.readByte() << 16;
                compSize |= this.readByte() << 24;
                size = this.readByte();
                size |= this.readByte() << 8;
                size |= this.readByte() << 16;
                size |= this.readByte() << 24;
            }
            if (this.modeZIP)
                this.nextFile();
            tmp[0] = this.readByte();
            if (tmp[0] !== 8) {
                return 0;
            }
            this.gpflags = this.readByte();
            this.readByte();
            this.readByte();
            this.readByte();
            this.readByte();
            this.readByte();
            os = this.readByte();
            if (this.gpflags & 4) {
                tmp[0] = this.readByte();
                tmp[2] = this.readByte();
                this.len = tmp[0] + 256 * tmp[1];
                for (i = 0; i < this.len; i++) {
                    this.readByte();
                }
            }
            if (this.gpflags & 8) {
                i = 0;
                this.nameBuf = [];
                while (c = this.readByte()) {
                    if (c === '7' || c === ':')
                        i = 0;
                    if (i < GZip.NAMEMAX - 1)
                        this.nameBuf[i++] = c;
                }
            }
            if (this.gpflags & 16) {
                while (c = this.readByte()) {
                }
            }
            if (this.gpflags & 2) {
                this.readByte();
                this.readByte();
            }
            this.DeflateLoop();
            size = this.readByte();
            size |= this.readByte() << 8;
            size |= this.readByte() << 16;
            size |= this.readByte() << 24;
            if (this.modeZIP)
                this.nextFile();
        };
        module.exports = GZip;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,