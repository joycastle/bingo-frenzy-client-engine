(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/actions/CCActionInstant.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        cc.ActionInstant = cc.Class({
            name: 'cc.ActionInstant',
            extends: cc.FiniteTimeAction,
            isDone: function isDone() {
                return true;
            },
            step: function step(dt) {
                this.update(1);
            },
            update: function update(dt) {
            },
            reverse: function reverse() {
                return this.clone();
            },
            clone: function clone() {
                return new cc.ActionInstant();
            }
        });
        cc.Show = cc.Class({
            name: 'cc.Show',
            extends: cc.ActionInstant,
            update: function update(dt) {
                var _renderComps = this.target.getComponentsInChildren(cc.RenderComponent);
                for (var i = 0; i < _renderComps.length; ++i) {
                    var render = _renderComps[i];
                    render.enabled = true;
                }
            },
            reverse: function reverse() {
                return new cc.Hide();
            },
            clone: function clone() {
                return new cc.Show();
            }
        });
        cc.show = function () {
            return new cc.Show();
        };
        cc.Hide = cc.Class({
            name: 'cc.Hide',
            extends: cc.ActionInstant,
            update: function update(dt) {
                var _renderComps = this.target.getComponentsInChildren(cc.RenderComponent);
                for (var i = 0; i < _renderComps.length; ++i) {
                    var render = _renderComps[i];
                    render.enabled = false;
                }
            },
            reverse: function reverse() {
                return new cc.Show();
            },
            clone: function clone() {
                return new cc.Hide();
            }
        });
        cc.hide = function () {
            return new cc.Hide();
        };
        cc.ToggleVisibility = cc.Class({
            name: 'cc.ToggleVisibility',
            extends: cc.ActionInstant,
            update: function update(dt) {
                var _renderComps = this.target.getComponentsInChildren(cc.RenderComponent);
                for (var i = 0; i < _renderComps.length; ++i) {
                    var render = _renderComps[i];
                    render.enabled = !render.enabled;
                }
            },
            reverse: function reverse() {
                return new cc.ToggleVisibility();
            },
            clone: function clone() {
                return new cc.ToggleVisibility();
            }
        });
        cc.toggleVisibility = function () {
            return new cc.ToggleVisibility();
        };
        cc.RemoveSelf = cc.Class({
            name: 'cc.RemoveSelf',
            extends: cc.ActionInstant,
            ctor: function ctor(isNeedCleanUp) {
                this._isNeedCleanUp = true;
                isNeedCleanUp !== undefined && this.init(isNeedCleanUp);
            },
            update: function update(dt) {
                this.target.removeFromParent(this._isNeedCleanUp);
            },
            init: function init(isNeedCleanUp) {
                this._isNeedCleanUp = isNeedCleanUp;
                return true;
            },
            reverse: function reverse() {
                return new cc.RemoveSelf(this._isNeedCleanUp);
            },
            clone: function clone() {
                return new cc.RemoveSelf(this._isNeedCleanUp);
            }
        });
        cc.removeSelf = function (isNeedCleanUp) {
            return new cc.RemoveSelf(isNeedCleanUp);
        };
        cc.FlipX = cc.Class({
            name: 'cc.FlipX',
            extends: cc.ActionInstant,
            ctor: function ctor(flip) {
                this._flippedX = false;
                flip !== undefined && this.initWithFlipX(flip);
            },
            initWithFlipX: function initWithFlipX(flip) {
                this._flippedX = flip;
                return true;
            },
            update: function update(dt) {
                this.target.scaleX = Math.abs(this.target.scaleX) * (this._flippedX ? -1 : 1);
            },
            reverse: function reverse() {
                return new cc.FlipX(!this._flippedX);
            },
            clone: function clone() {
                var action = new cc.FlipX();
                action.initWithFlipX(this._flippedX);
                return action;
            }
        });
        cc.flipX = function (flip) {
            return new cc.FlipX(flip);
        };
        cc.FlipY = cc.Class({
            name: 'cc.FlipY',
            extends: cc.ActionInstant,
            ctor: function ctor(flip) {
                this._flippedY = false;
                flip !== undefined && this.initWithFlipY(flip);
            },
            initWithFlipY: function initWithFlipY(flip) {
                this._flippedY = flip;
                return true;
            },
            update: function update(dt) {
                this.target.scaleY = Math.abs(this.target.scaleY) * (this._flippedY ? -1 : 1);
            },
            reverse: function reverse() {
                return new cc.FlipY(!this._flippedY);
            },
            clone: function clone() {
                var action = new cc.FlipY();
                action.initWithFlipY(this._flippedY);
                return action;
            }
        });
        cc.flipY = function (flip) {
            return new cc.FlipY(flip);
        };
        cc.Place = cc.Class({
            name: 'cc.Place',
            extends: cc.ActionInstant,
            ctor: function ctor(pos, y) {
                this._x = 0;
                this._y = 0;
                if (pos !== undefined) {
                    if (pos.x !== undefined) {
                        y = pos.y;
                        pos = pos.x;
                    }
                    this.initWithPosition(pos, y);
                }
            },
            initWithPosition: function initWithPosition(x, y) {
                this._x = x;
                this._y = y;
                return true;
            },
            update: function update(dt) {
                this.target.setPosition(this._x, this._y);
            },
            clone: function clone() {
                var action = new cc.Place();
                action.initWithPosition(this._x, this._y);
                return action;
            }
        });
        cc.place = function (pos, y) {
            return new cc.Place(pos, y);
        };
        cc.CallFunc = cc.Class({
            name: 'cc.CallFunc',
            extends: cc.ActionInstant,
            ctor: function ctor(selector, selectorTarget, data) {
                this._selectorTarget = null;
                this._function = null;
                this._data = null;
                this.initWithFunction(selector, selectorTarget, data);
            },
            initWithFunction: function initWithFunction(selector, selectorTarget, data) {
                if (selector) {
                    this._function = selector;
                }
                if (selectorTarget) {
                    this._selectorTarget = selectorTarget;
                }
                if (data !== undefined) {
                    this._data = data;
                }
                return true;
            },
            execute: function execute() {
                if (this._function) {
                    this._function.call(this._selectorTarget, this.target, this._data);
                }
            },
            update: function update(dt) {
                this.execute();
            },
            getTargetCallback: function getTargetCallback() {
                return this._selectorTarget;
            },
            setTargetCallback: function setTargetCallback(sel) {
                if (sel !== this._selectorTarget) {
                    if (this._selectorTarget)
                        this._selectorTarget = null;
                    this._selectorTarget = sel;
                }
            },
            clone: function clone() {
                var action = new cc.CallFunc();
                action.initWithFunction(this._function, this._selectorTarget, this._data);
                return action;
            }
        });
        cc.callFunc = function (selector, selectorTarget, data) {
            return new cc.CallFunc(selector, selectorTarget, data);
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,