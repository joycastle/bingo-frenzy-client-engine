(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/actions/CCActionManager.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        require('../core/platform/CCClass');
        var js = require('../core/platform/js');
        var HashElement = function HashElement() {
            this.actions = [];
            this.target = null;
            this.actionIndex = 0;
            this.currentAction = null;
            this.paused = false;
            this.lock = false;
        };
        cc.ActionManager = function () {
            this._hashTargets = js.createMap(true);
            this._arrayTargets = [];
            this._currentTarget = null;
            cc.director._scheduler && cc.director._scheduler.enableForTarget(this);
        };
        cc.ActionManager.prototype = {
            constructor: cc.ActionManager,
            _elementPool: [],
            _searchElementByTarget: function _searchElementByTarget(arr, target) {
                for (var k = 0; k < arr.length; k++) {
                    if (target === arr[k].target)
                        return arr[k];
                }
                return null;
            },
            _getElement: function _getElement(target, paused) {
                var element = this._elementPool.pop();
                if (!element) {
                    element = new HashElement();
                }
                element.target = target;
                element.paused = !!paused;
                return element;
            },
            _putElement: function _putElement(element) {
                element.actions.length = 0;
                element.actionIndex = 0;
                element.currentAction = null;
                element.paused = false;
                element.target = null;
                element.lock = false;
                this._elementPool.push(element);
            },
            addAction: function addAction(action, target, paused) {
                if (!action || !target) {
                    cc.errorID(1000);
                    return;
                }
                var element = this._hashTargets[target._id];
                if (!element) {
                    element = this._getElement(target, paused);
                    this._hashTargets[target._id] = element;
                    this._arrayTargets.push(element);
                } else if (!element.actions) {
                    element.actions = [];
                }
                element.actions.push(action);
                action.startWithTarget(target);
            },
            removeAllActions: function removeAllActions() {
                var locTargets = this._arrayTargets;
                for (var i = 0; i < locTargets.length; i++) {
                    var element = locTargets[i];
                    if (element)
                        this._putElement(element);
                }
                this._arrayTargets.length = 0;
                this._hashTargets = js.createMap(true);
            },
            removeAllActionsFromTarget: function removeAllActionsFromTarget(target, forceDelete) {
                if (target == null)
                    return;
                var element = this._hashTargets[target._id];
                if (element) {
                    element.actions.length = 0;
                    this._deleteHashElement(element);
                }
            },
            removeAction: function removeAction(action) {
                if (action == null)
                    return;
                var target = action.getOriginalTarget();
                var element = this._hashTargets[target._id];
                if (element) {
                    for (var i = 0; i < element.actions.length; i++) {
                        if (element.actions[i] === action) {
                            element.actions.splice(i, 1);
                            if (element.actionIndex >= i)
                                element.actionIndex--;
                            break;
                        }
                    }
                } else {
                    cc.logID(1001);
                }
            },
            removeActionByTag: function removeActionByTag(tag, target) {
                if (tag === cc.Action.TAG_INVALID)
                    cc.logID(1002);
                cc.assertID(target, 1003);
                var element = this._hashTargets[target._id];
                if (element) {
                    var limit = element.actions.length;
                    for (var i = 0; i < limit; ++i) {
                        var action = element.actions[i];
                        if (action && action.getTag() === tag && action.getOriginalTarget() === target) {
                            this._removeActionAtIndex(i, element);
                            break;
                        }
                    }
                }
            },
            getActionByTag: function getActionByTag(tag, target) {
                if (tag === cc.Action.TAG_INVALID)
                    cc.logID(1004);
                var element = this._hashTargets[target._id];
                if (element) {
                    if (element.actions != null) {
                        for (var i = 0; i < element.actions.length; ++i) {
                            var action = element.actions[i];
                            if (action && action.getTag() === tag)
                                return action;
                        }
                    }
                    cc.logID(1005, tag);
                }
                return null;
            },
            getNumberOfRunningActionsInTarget: function getNumberOfRunningActionsInTarget(target) {
                var element = this._hashTargets[target._id];
                if (element)
                    return element.actions ? element.actions.length : 0;
                return 0;
            },
            pauseTarget: function pauseTarget(target) {
                var element = this._hashTargets[target._id];
                if (element)
                    element.paused = true;
            },
            resumeTarget: function resumeTarget(target) {
                var element = this._hashTargets[target._id];
                if (element)
                    element.paused = false;
            },
            pauseAllRunningActions: function pauseAllRunningActions() {
                var idsWithActions = [];
                var locTargets = this._arrayTargets;
                for (var i = 0; i < locTargets.length; i++) {
                    var element = locTargets[i];
                    if (element && !element.paused) {
                        element.paused = true;
                        idsWithActions.push(element.target);
                    }
                }
                return idsWithActions;
            },
            resumeTargets: function resumeTargets(targetsToResume) {
                if (!targetsToResume)
                    return;
                for (var i = 0; i < targetsToResume.length; i++) {
                    if (targetsToResume[i])
                        this.resumeTarget(targetsToResume[i]);
                }
            },
            pauseTargets: function pauseTargets(targetsToPause) {
                if (!targetsToPause)
                    return;
                for (var i = 0; i < targetsToPause.length; i++) {
                    if (targetsToPause[i])
                        this.pauseTarget(targetsToPause[i]);
                }
            },
            purgeSharedManager: function purgeSharedManager() {
                cc.director.getScheduler().unscheduleUpdate(this);
            },
            _removeActionAtIndex: function _removeActionAtIndex(index, element) {
                var action = element.actions[index];
                element.actions.splice(index, 1);
                if (element.actionIndex >= index)
                    element.actionIndex--;
                if (element.actions.length === 0) {
                    this._deleteHashElement(element);
                }
            },
            _deleteHashElement: function _deleteHashElement(element) {
                var ret = false;
                if (element && !element.lock) {
                    if (this._hashTargets[element.target._id]) {
                        delete this._hashTargets[element.target._id];
                        var targets = this._arrayTargets;
                        for (var i = 0, l = targets.length; i < l; i++) {
                            if (targets[i] === element) {
                                targets.splice(i, 1);
                                break;
                            }
                        }
                        this._putElement(element);
                        ret = true;
                    }
                }
                return ret;
            },
            update: function update(dt) {
                var locTargets = this._arrayTargets, locCurrTarget;
                for (var elt = 0; elt < locTargets.length; elt++) {
                    this._currentTarget = locTargets[elt];
                    locCurrTarget = this._currentTarget;
                    if (!locCurrTarget.paused && locCurrTarget.actions) {
                        locCurrTarget.lock = true;
                        for (locCurrTarget.actionIndex = 0; locCurrTarget.actionIndex < locCurrTarget.actions.length; locCurrTarget.actionIndex++) {
                            locCurrTarget.currentAction = locCurrTarget.actions[locCurrTarget.actionIndex];
                            if (!locCurrTarget.currentAction)
                                continue;
                            locCurrTarget.currentAction.step(dt * (locCurrTarget.currentAction._speedMethod ? locCurrTarget.currentAction._speed : 1));
                            if (locCurrTarget.currentAction && locCurrTarget.currentAction.isDone()) {
                                locCurrTarget.currentAction.stop();
                                var action = locCurrTarget.currentAction;
                                locCurrTarget.currentAction = null;
                                this.removeAction(action);
                            }
                            locCurrTarget.currentAction = null;
                        }
                        locCurrTarget.lock = false;
                    }
                    if (locCurrTarget.actions.length === 0) {
                        this._deleteHashElement(locCurrTarget) && elt--;
                    }
                }
            }
        };
        if (CC_TEST) {
            cc.ActionManager.prototype.isTargetPaused_TEST = function (target) {
                var element = this._hashTargets[target._id];
                return element.paused;
            };
        }
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,