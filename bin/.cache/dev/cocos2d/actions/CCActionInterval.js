(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/actions/CCActionInterval.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        cc.ActionInterval = cc.Class({
            name: 'cc.ActionInterval',
            extends: cc.FiniteTimeAction,
            ctor: function ctor(d) {
                this.MAX_VALUE = 2;
                this._elapsed = 0;
                this._firstTick = false;
                this._easeList = null;
                this._speed = 1;
                this._timesForRepeat = 1;
                this._repeatForever = false;
                this._repeatMethod = false;
                this._speedMethod = false;
                d !== undefined && cc.ActionInterval.prototype.initWithDuration.call(this, d);
            },
            getElapsed: function getElapsed() {
                return this._elapsed;
            },
            initWithDuration: function initWithDuration(d) {
                this._duration = d === 0 ? cc.macro.FLT_EPSILON : d;
                this._elapsed = 0;
                this._firstTick = true;
                return true;
            },
            isDone: function isDone() {
                return this._elapsed >= this._duration;
            },
            _cloneDecoration: function _cloneDecoration(action) {
                action._repeatForever = this._repeatForever;
                action._speed = this._speed;
                action._timesForRepeat = this._timesForRepeat;
                action._easeList = this._easeList;
                action._speedMethod = this._speedMethod;
                action._repeatMethod = this._repeatMethod;
            },
            _reverseEaseList: function _reverseEaseList(action) {
                if (this._easeList) {
                    action._easeList = [];
                    for (var i = 0; i < this._easeList.length; i++) {
                        action._easeList.push(this._easeList[i].reverse());
                    }
                }
            },
            clone: function clone() {
                var action = new cc.ActionInterval(this._duration);
                this._cloneDecoration(action);
                return action;
            },
            easing: function easing(easeObj) {
                if (this._easeList)
                    this._easeList.length = 0;
                else
                    this._easeList = [];
                for (var i = 0; i < arguments.length; i++) {
                    this._easeList.push(arguments[i]);
                }
                return this;
            },
            _computeEaseTime: function _computeEaseTime(dt) {
                var locList = this._easeList;
                if (!locList || locList.length === 0)
                    return dt;
                for (var i = 0, n = locList.length; i < n; i++) {
                    dt = locList[i].easing(dt);
                }
                return dt;
            },
            step: function step(dt) {
                if (this._firstTick) {
                    this._firstTick = false;
                    this._elapsed = 0;
                } else
                    this._elapsed += dt;
                var t = this._elapsed / (this._duration > 1.192092896e-7 ? this._duration : 1.192092896e-7);
                t = 1 > t ? t : 1;
                this.update(t > 0 ? t : 0);
                if (this._repeatMethod && this._timesForRepeat > 1 && this.isDone()) {
                    if (!this._repeatForever) {
                        this._timesForRepeat--;
                    }
                    this.startWithTarget(this.target);
                    this.step(this._elapsed - this._duration);
                }
            },
            startWithTarget: function startWithTarget(target) {
                cc.Action.prototype.startWithTarget.call(this, target);
                this._elapsed = 0;
                this._firstTick = true;
            },
            reverse: function reverse() {
                cc.logID(1010);
                return null;
            },
            setAmplitudeRate: function setAmplitudeRate(amp) {
                cc.logID(1011);
            },
            getAmplitudeRate: function getAmplitudeRate() {
                cc.logID(1012);
                return 0;
            },
            speed: function speed(_speed) {
                if (_speed <= 0) {
                    cc.logID(1013);
                    return this;
                }
                this._speedMethod = true;
                this._speed *= _speed;
                return this;
            },
            getSpeed: function getSpeed() {
                return this._speed;
            },
            setSpeed: function setSpeed(speed) {
                this._speed = speed;
                return this;
            },
            repeat: function repeat(times) {
                times = Math.round(times);
                if (isNaN(times) || times < 1) {
                    cc.logID(1014);
                    return this;
                }
                this._repeatMethod = true;
                this._timesForRepeat *= times;
                return this;
            },
            repeatForever: function repeatForever() {
                this._repeatMethod = true;
                this._timesForRepeat = this.MAX_VALUE;
                this._repeatForever = true;
                return this;
            }
        });
        cc.actionInterval = function (d) {
            return new cc.ActionInterval(d);
        };
        cc.Sequence = cc.Class({
            name: 'cc.Sequence',
            extends: cc.ActionInterval,
            ctor: function ctor(tempArray) {
                this._actions = [];
                this._split = null;
                this._last = 0;
                this._reversed = false;
                var paramArray = tempArray instanceof Array ? tempArray : arguments;
                if (paramArray.length === 1) {
                    cc.errorID(1019);
                    return;
                }
                var last = paramArray.length - 1;
                if (last >= 0 && paramArray[last] == null)
                    cc.logID(1015);
                if (last >= 0) {
                    var prev = paramArray[0], action1;
                    for (var i = 1; i < last; i++) {
                        if (paramArray[i]) {
                            action1 = prev;
                            prev = cc.Sequence._actionOneTwo(action1, paramArray[i]);
                        }
                    }
                    this.initWithTwoActions(prev, paramArray[last]);
                }
            },
            initWithTwoActions: function initWithTwoActions(actionOne, actionTwo) {
                if (!actionOne || !actionTwo) {
                    cc.errorID(1025);
                    return false;
                }
                var durationOne = actionOne._duration, durationTwo = actionTwo._duration;
                durationOne *= actionOne._repeatMethod ? actionOne._timesForRepeat : 1;
                durationTwo *= actionTwo._repeatMethod ? actionTwo._timesForRepeat : 1;
                var d = durationOne + durationTwo;
                this.initWithDuration(d);
                this._actions[0] = actionOne;
                this._actions[1] = actionTwo;
                return true;
            },
            clone: function clone() {
                var action = new cc.Sequence();
                this._cloneDecoration(action);
                action.initWithTwoActions(this._actions[0].clone(), this._actions[1].clone());
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._split = this._actions[0]._duration / this._duration;
                this._split *= this._actions[0]._repeatMethod ? this._actions[0]._timesForRepeat : 1;
                this._last = -1;
            },
            stop: function stop() {
                if (this._last !== -1)
                    this._actions[this._last].stop();
                cc.Action.prototype.stop.call(this);
            },
            update: function update(dt) {
                var new_t, found = 0;
                var locSplit = this._split, locActions = this._actions, locLast = this._last, actionFound;
                dt = this._computeEaseTime(dt);
                if (dt < locSplit) {
                    new_t = locSplit !== 0 ? dt / locSplit : 1;
                    if (found === 0 && locLast === 1 && this._reversed) {
                        locActions[1].update(0);
                        locActions[1].stop();
                    }
                } else {
                    found = 1;
                    new_t = locSplit === 1 ? 1 : (dt - locSplit) / (1 - locSplit);
                    if (locLast === -1) {
                        locActions[0].startWithTarget(this.target);
                        locActions[0].update(1);
                        locActions[0].stop();
                    }
                    if (locLast === 0) {
                        locActions[0].update(1);
                        locActions[0].stop();
                    }
                }
                actionFound = locActions[found];
                if (locLast === found && actionFound.isDone())
                    return;
                if (locLast !== found)
                    actionFound.startWithTarget(this.target);
                new_t = new_t * actionFound._timesForRepeat;
                actionFound.update(new_t > 1 ? new_t % 1 : new_t);
                this._last = found;
            },
            reverse: function reverse() {
                var action = cc.Sequence._actionOneTwo(this._actions[1].reverse(), this._actions[0].reverse());
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                action._reversed = true;
                return action;
            }
        });
        cc.sequence = function (tempArray) {
            var paramArray = tempArray instanceof Array ? tempArray : arguments;
            if (paramArray.length === 1) {
                cc.errorID(1019);
                return null;
            }
            var last = paramArray.length - 1;
            if (last >= 0 && paramArray[last] == null)
                cc.logID(1015);
            var result = null;
            if (last >= 0) {
                result = paramArray[0];
                for (var i = 1; i <= last; i++) {
                    if (paramArray[i]) {
                        result = cc.Sequence._actionOneTwo(result, paramArray[i]);
                    }
                }
            }
            return result;
        };
        cc.Sequence._actionOneTwo = function (actionOne, actionTwo) {
            var sequence = new cc.Sequence();
            sequence.initWithTwoActions(actionOne, actionTwo);
            return sequence;
        };
        cc.Repeat = cc.Class({
            name: 'cc.Repeat',
            extends: cc.ActionInterval,
            ctor: function ctor(action, times) {
                this._times = 0;
                this._total = 0;
                this._nextDt = 0;
                this._actionInstant = false;
                this._innerAction = null;
                times !== undefined && this.initWithAction(action, times);
            },
            initWithAction: function initWithAction(action, times) {
                var duration = action._duration * times;
                if (this.initWithDuration(duration)) {
                    this._times = times;
                    this._innerAction = action;
                    if (action instanceof cc.ActionInstant) {
                        this._actionInstant = true;
                        this._times -= 1;
                    }
                    this._total = 0;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.Repeat();
                this._cloneDecoration(action);
                action.initWithAction(this._innerAction.clone(), this._times);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                this._total = 0;
                this._nextDt = this._innerAction._duration / this._duration;
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._innerAction.startWithTarget(target);
            },
            stop: function stop() {
                this._innerAction.stop();
                cc.Action.prototype.stop.call(this);
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                var locInnerAction = this._innerAction;
                var locDuration = this._duration;
                var locTimes = this._times;
                var locNextDt = this._nextDt;
                if (dt >= locNextDt) {
                    while (dt > locNextDt && this._total < locTimes) {
                        locInnerAction.update(1);
                        this._total++;
                        locInnerAction.stop();
                        locInnerAction.startWithTarget(this.target);
                        locNextDt += locInnerAction._duration / locDuration;
                        this._nextDt = locNextDt > 1 ? 1 : locNextDt;
                    }
                    if (dt >= 1 && this._total < locTimes) {
                        locInnerAction.update(1);
                        this._total++;
                    }
                    if (!this._actionInstant) {
                        if (this._total === locTimes) {
                            locInnerAction.stop();
                        } else {
                            locInnerAction.update(dt - (locNextDt - locInnerAction._duration / locDuration));
                        }
                    }
                } else {
                    locInnerAction.update(dt * locTimes % 1);
                }
            },
            isDone: function isDone() {
                return this._total === this._times;
            },
            reverse: function reverse() {
                var action = new cc.Repeat(this._innerAction.reverse(), this._times);
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            },
            setInnerAction: function setInnerAction(action) {
                if (this._innerAction !== action) {
                    this._innerAction = action;
                }
            },
            getInnerAction: function getInnerAction() {
                return this._innerAction;
            }
        });
        cc.repeat = function (action, times) {
            return new cc.Repeat(action, times);
        };
        cc.RepeatForever = cc.Class({
            name: 'cc.RepeatForever',
            extends: cc.ActionInterval,
            ctor: function ctor(action) {
                this._innerAction = null;
                action && this.initWithAction(action);
            },
            initWithAction: function initWithAction(action) {
                if (!action) {
                    cc.errorID(1026);
                    return false;
                }
                this._innerAction = action;
                return true;
            },
            clone: function clone() {
                var action = new cc.RepeatForever();
                this._cloneDecoration(action);
                action.initWithAction(this._innerAction.clone());
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._innerAction.startWithTarget(target);
            },
            step: function step(dt) {
                var locInnerAction = this._innerAction;
                locInnerAction.step(dt);
                if (locInnerAction.isDone()) {
                    locInnerAction.startWithTarget(this.target);
                    locInnerAction.step(locInnerAction.getElapsed() - locInnerAction._duration);
                }
            },
            isDone: function isDone() {
                return false;
            },
            reverse: function reverse() {
                var action = new cc.RepeatForever(this._innerAction.reverse());
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            },
            setInnerAction: function setInnerAction(action) {
                if (this._innerAction !== action) {
                    this._innerAction = action;
                }
            },
            getInnerAction: function getInnerAction() {
                return this._innerAction;
            }
        });
        cc.repeatForever = function (action) {
            return new cc.RepeatForever(action);
        };
        cc.Spawn = cc.Class({
            name: 'cc.Spawn',
            extends: cc.ActionInterval,
            ctor: function ctor(tempArray) {
                this._one = null;
                this._two = null;
                var paramArray = tempArray instanceof Array ? tempArray : arguments;
                if (paramArray.length === 1) {
                    cc.errorID(1020);
                    return;
                }
                var last = paramArray.length - 1;
                if (last >= 0 && paramArray[last] == null)
                    cc.logID(1015);
                if (last >= 0) {
                    var prev = paramArray[0], action1;
                    for (var i = 1; i < last; i++) {
                        if (paramArray[i]) {
                            action1 = prev;
                            prev = cc.Spawn._actionOneTwo(action1, paramArray[i]);
                        }
                    }
                    this.initWithTwoActions(prev, paramArray[last]);
                }
            },
            initWithTwoActions: function initWithTwoActions(action1, action2) {
                if (!action1 || !action2) {
                    cc.errorID(1027);
                    return false;
                }
                var ret = false;
                var d1 = action1._duration;
                var d2 = action2._duration;
                if (this.initWithDuration(Math.max(d1, d2))) {
                    this._one = action1;
                    this._two = action2;
                    if (d1 > d2) {
                        this._two = cc.Sequence._actionOneTwo(action2, cc.delayTime(d1 - d2));
                    } else if (d1 < d2) {
                        this._one = cc.Sequence._actionOneTwo(action1, cc.delayTime(d2 - d1));
                    }
                    ret = true;
                }
                return ret;
            },
            clone: function clone() {
                var action = new cc.Spawn();
                this._cloneDecoration(action);
                action.initWithTwoActions(this._one.clone(), this._two.clone());
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._one.startWithTarget(target);
                this._two.startWithTarget(target);
            },
            stop: function stop() {
                this._one.stop();
                this._two.stop();
                cc.Action.prototype.stop.call(this);
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                if (this._one)
                    this._one.update(dt);
                if (this._two)
                    this._two.update(dt);
            },
            reverse: function reverse() {
                var action = cc.Spawn._actionOneTwo(this._one.reverse(), this._two.reverse());
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            }
        });
        cc.spawn = function (tempArray) {
            var paramArray = tempArray instanceof Array ? tempArray : arguments;
            if (paramArray.length === 1) {
                cc.errorID(1020);
                return null;
            }
            if (paramArray.length > 0 && paramArray[paramArray.length - 1] == null)
                cc.logID(1015);
            var prev = paramArray[0];
            for (var i = 1; i < paramArray.length; i++) {
                if (paramArray[i] != null)
                    prev = cc.Spawn._actionOneTwo(prev, paramArray[i]);
            }
            return prev;
        };
        cc.Spawn._actionOneTwo = function (action1, action2) {
            var pSpawn = new cc.Spawn();
            pSpawn.initWithTwoActions(action1, action2);
            return pSpawn;
        };
        cc.RotateTo = cc.Class({
            name: 'cc.RotateTo',
            extends: cc.ActionInterval,
            ctor: function ctor(duration, dstAngle) {
                this._startAngle = 0;
                this._dstAngle = 0;
                this._angle = 0;
                dstAngle !== undefined && this.initWithDuration(duration, dstAngle);
            },
            initWithDuration: function initWithDuration(duration, dstAngle) {
                if (cc.ActionInterval.prototype.initWithDuration.call(this, duration)) {
                    this._dstAngle = dstAngle;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.RotateTo();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._dstAngle);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                var startAngle = target.angle % 360;
                var angle = cc.macro.ROTATE_ACTION_CCW ? this._dstAngle - startAngle : startAngle - this._dstAngle;
                if (angle > 180)
                    angle -= 360;
                if (angle < -180)
                    angle += 360;
                this._startAngle = startAngle;
                this._angle = cc.macro.ROTATE_ACTION_CCW ? angle : -angle;
            },
            reverse: function reverse() {
                cc.logID(1016);
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                if (this.target) {
                    this.target.angle = this._startAngle + this._angle * dt;
                }
            }
        });
        cc.rotateTo = function (duration, dstAngle) {
            return new cc.RotateTo(duration, dstAngle);
        };
        cc.RotateBy = cc.Class({
            name: 'cc.RotateBy',
            extends: cc.ActionInterval,
            ctor: function ctor(duration, deltaAngle) {
                deltaAngle *= cc.macro.ROTATE_ACTION_CCW ? 1 : -1;
                this._deltaAngle = 0;
                this._startAngle = 0;
                deltaAngle !== undefined && this.initWithDuration(duration, deltaAngle);
            },
            initWithDuration: function initWithDuration(duration, deltaAngle) {
                if (cc.ActionInterval.prototype.initWithDuration.call(this, duration)) {
                    this._deltaAngle = deltaAngle;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.RotateBy();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._deltaAngle);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._startAngle = target.angle;
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                if (this.target) {
                    this.target.angle = this._startAngle + this._deltaAngle * dt;
                }
            },
            reverse: function reverse() {
                var action = new cc.RotateBy();
                action.initWithDuration(this._duration, -this._deltaAngle);
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            }
        });
        cc.rotateBy = function (duration, deltaAngle) {
            return new cc.RotateBy(duration, deltaAngle);
        };
        cc.MoveBy = cc.Class({
            name: 'cc.MoveBy',
            extends: cc.ActionInterval,
            ctor: function ctor(duration, deltaPos, deltaY) {
                this._positionDelta = cc.v2(0, 0);
                this._startPosition = cc.v2(0, 0);
                this._previousPosition = cc.v2(0, 0);
                deltaPos !== undefined && cc.MoveBy.prototype.initWithDuration.call(this, duration, deltaPos, deltaY);
            },
            initWithDuration: function initWithDuration(duration, position, y) {
                if (cc.ActionInterval.prototype.initWithDuration.call(this, duration)) {
                    if (position.x !== undefined) {
                        y = position.y;
                        position = position.x;
                    }
                    this._positionDelta.x = position;
                    this._positionDelta.y = y;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.MoveBy();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._positionDelta);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                var locPosX = target.x;
                var locPosY = target.y;
                this._previousPosition.x = locPosX;
                this._previousPosition.y = locPosY;
                this._startPosition.x = locPosX;
                this._startPosition.y = locPosY;
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                if (this.target) {
                    var x = this._positionDelta.x * dt;
                    var y = this._positionDelta.y * dt;
                    var locStartPosition = this._startPosition;
                    if (cc.macro.ENABLE_STACKABLE_ACTIONS) {
                        var targetX = this.target.x;
                        var targetY = this.target.y;
                        var locPreviousPosition = this._previousPosition;
                        locStartPosition.x = locStartPosition.x + targetX - locPreviousPosition.x;
                        locStartPosition.y = locStartPosition.y + targetY - locPreviousPosition.y;
                        x = x + locStartPosition.x;
                        y = y + locStartPosition.y;
                        locPreviousPosition.x = x;
                        locPreviousPosition.y = y;
                        this.target.setPosition(x, y);
                    } else {
                        this.target.setPosition(locStartPosition.x + x, locStartPosition.y + y);
                    }
                }
            },
            reverse: function reverse() {
                var action = new cc.MoveBy(this._duration, cc.v2(-this._positionDelta.x, -this._positionDelta.y));
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            }
        });
        cc.moveBy = function (duration, deltaPos, deltaY) {
            return new cc.MoveBy(duration, deltaPos, deltaY);
        };
        cc.MoveTo = cc.Class({
            name: 'cc.MoveTo',
            extends: cc.MoveBy,
            ctor: function ctor(duration, position, y) {
                this._endPosition = cc.v2(0, 0);
                position !== undefined && this.initWithDuration(duration, position, y);
            },
            initWithDuration: function initWithDuration(duration, position, y) {
                if (cc.MoveBy.prototype.initWithDuration.call(this, duration, position, y)) {
                    if (position.x !== undefined) {
                        y = position.y;
                        position = position.x;
                    }
                    this._endPosition.x = position;
                    this._endPosition.y = y;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.MoveTo();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._endPosition);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.MoveBy.prototype.startWithTarget.call(this, target);
                this._positionDelta.x = this._endPosition.x - target.x;
                this._positionDelta.y = this._endPosition.y - target.y;
            }
        });
        cc.moveTo = function (duration, position, y) {
            return new cc.MoveTo(duration, position, y);
        };
        cc.SkewTo = cc.Class({
            name: 'cc.SkewTo',
            extends: cc.ActionInterval,
            ctor: function ctor(t, sx, sy) {
                this._skewX = 0;
                this._skewY = 0;
                this._startSkewX = 0;
                this._startSkewY = 0;
                this._endSkewX = 0;
                this._endSkewY = 0;
                this._deltaX = 0;
                this._deltaY = 0;
                sy !== undefined && cc.SkewTo.prototype.initWithDuration.call(this, t, sx, sy);
            },
            initWithDuration: function initWithDuration(t, sx, sy) {
                var ret = false;
                if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
                    this._endSkewX = sx;
                    this._endSkewY = sy;
                    ret = true;
                }
                return ret;
            },
            clone: function clone() {
                var action = new cc.SkewTo();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._endSkewX, this._endSkewY);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._startSkewX = target.skewX % 180;
                this._deltaX = this._endSkewX - this._startSkewX;
                if (this._deltaX > 180)
                    this._deltaX -= 360;
                if (this._deltaX < -180)
                    this._deltaX += 360;
                this._startSkewY = target.skewY % 360;
                this._deltaY = this._endSkewY - this._startSkewY;
                if (this._deltaY > 180)
                    this._deltaY -= 360;
                if (this._deltaY < -180)
                    this._deltaY += 360;
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                this.target.skewX = this._startSkewX + this._deltaX * dt;
                this.target.skewY = this._startSkewY + this._deltaY * dt;
            }
        });
        cc.skewTo = function (t, sx, sy) {
            return new cc.SkewTo(t, sx, sy);
        };
        cc.SkewBy = cc.Class({
            name: 'cc.SkewBy',
            extends: cc.SkewTo,
            ctor: function ctor(t, sx, sy) {
                sy !== undefined && this.initWithDuration(t, sx, sy);
            },
            initWithDuration: function initWithDuration(t, deltaSkewX, deltaSkewY) {
                var ret = false;
                if (cc.SkewTo.prototype.initWithDuration.call(this, t, deltaSkewX, deltaSkewY)) {
                    this._skewX = deltaSkewX;
                    this._skewY = deltaSkewY;
                    ret = true;
                }
                return ret;
            },
            clone: function clone() {
                var action = new cc.SkewBy();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._skewX, this._skewY);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.SkewTo.prototype.startWithTarget.call(this, target);
                this._deltaX = this._skewX;
                this._deltaY = this._skewY;
                this._endSkewX = this._startSkewX + this._deltaX;
                this._endSkewY = this._startSkewY + this._deltaY;
            },
            reverse: function reverse() {
                var action = new cc.SkewBy(this._duration, -this._skewX, -this._skewY);
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            }
        });
        cc.skewBy = function (t, sx, sy) {
            return new cc.SkewBy(t, sx, sy);
        };
        cc.JumpBy = cc.Class({
            name: 'cc.JumpBy',
            extends: cc.ActionInterval,
            ctor: function ctor(duration, position, y, height, jumps) {
                this._startPosition = cc.v2(0, 0);
                this._previousPosition = cc.v2(0, 0);
                this._delta = cc.v2(0, 0);
                this._height = 0;
                this._jumps = 0;
                height !== undefined && cc.JumpBy.prototype.initWithDuration.call(this, duration, position, y, height, jumps);
            },
            initWithDuration: function initWithDuration(duration, position, y, height, jumps) {
                if (cc.ActionInterval.prototype.initWithDuration.call(this, duration)) {
                    if (jumps === undefined) {
                        jumps = height;
                        height = y;
                        y = position.y;
                        position = position.x;
                    }
                    this._delta.x = position;
                    this._delta.y = y;
                    this._height = height;
                    this._jumps = jumps;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.JumpBy();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._delta, this._height, this._jumps);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                var locPosX = target.x;
                var locPosY = target.y;
                this._previousPosition.x = locPosX;
                this._previousPosition.y = locPosY;
                this._startPosition.x = locPosX;
                this._startPosition.y = locPosY;
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                if (this.target) {
                    var frac = dt * this._jumps % 1;
                    var y = this._height * 4 * frac * (1 - frac);
                    y += this._delta.y * dt;
                    var x = this._delta.x * dt;
                    var locStartPosition = this._startPosition;
                    if (cc.macro.ENABLE_STACKABLE_ACTIONS) {
                        var targetX = this.target.x;
                        var targetY = this.target.y;
                        var locPreviousPosition = this._previousPosition;
                        locStartPosition.x = locStartPosition.x + targetX - locPreviousPosition.x;
                        locStartPosition.y = locStartPosition.y + targetY - locPreviousPosition.y;
                        x = x + locStartPosition.x;
                        y = y + locStartPosition.y;
                        locPreviousPosition.x = x;
                        locPreviousPosition.y = y;
                        this.target.setPosition(x, y);
                    } else {
                        this.target.setPosition(locStartPosition.x + x, locStartPosition.y + y);
                    }
                }
            },
            reverse: function reverse() {
                var action = new cc.JumpBy(this._duration, cc.v2(-this._delta.x, -this._delta.y), this._height, this._jumps);
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            }
        });
        cc.jumpBy = function (duration, position, y, height, jumps) {
            return new cc.JumpBy(duration, position, y, height, jumps);
        };
        cc.JumpTo = cc.Class({
            name: 'cc.JumpTo',
            extends: cc.JumpBy,
            ctor: function ctor(duration, position, y, height, jumps) {
                this._endPosition = cc.v2(0, 0);
                height !== undefined && this.initWithDuration(duration, position, y, height, jumps);
            },
            initWithDuration: function initWithDuration(duration, position, y, height, jumps) {
                if (cc.JumpBy.prototype.initWithDuration.call(this, duration, position, y, height, jumps)) {
                    if (jumps === undefined) {
                        y = position.y;
                        position = position.x;
                    }
                    this._endPosition.x = position;
                    this._endPosition.y = y;
                    return true;
                }
                return false;
            },
            startWithTarget: function startWithTarget(target) {
                cc.JumpBy.prototype.startWithTarget.call(this, target);
                this._delta.x = this._endPosition.x - this._startPosition.x;
                this._delta.y = this._endPosition.y - this._startPosition.y;
            },
            clone: function clone() {
                var action = new cc.JumpTo();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._endPosition, this._height, this._jumps);
                return action;
            }
        });
        cc.jumpTo = function (duration, position, y, height, jumps) {
            return new cc.JumpTo(duration, position, y, height, jumps);
        };
        function bezierAt(a, b, c, d, t) {
            return Math.pow(1 - t, 3) * a + 3 * t * Math.pow(1 - t, 2) * b + 3 * Math.pow(t, 2) * (1 - t) * c + Math.pow(t, 3) * d;
        }
        ;
        cc.BezierBy = cc.Class({
            name: 'cc.BezierBy',
            extends: cc.ActionInterval,
            ctor: function ctor(t, c) {
                this._config = [];
                this._startPosition = cc.v2(0, 0);
                this._previousPosition = cc.v2(0, 0);
                c && cc.BezierBy.prototype.initWithDuration.call(this, t, c);
            },
            initWithDuration: function initWithDuration(t, c) {
                if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
                    this._config = c;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.BezierBy();
                this._cloneDecoration(action);
                var newConfigs = [];
                for (var i = 0; i < this._config.length; i++) {
                    var selConf = this._config[i];
                    newConfigs.push(cc.v2(selConf.x, selConf.y));
                }
                action.initWithDuration(this._duration, newConfigs);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                var locPosX = target.x;
                var locPosY = target.y;
                this._previousPosition.x = locPosX;
                this._previousPosition.y = locPosY;
                this._startPosition.x = locPosX;
                this._startPosition.y = locPosY;
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                if (this.target) {
                    var locConfig = this._config;
                    var xa = 0;
                    var xb = locConfig[0].x;
                    var xc = locConfig[1].x;
                    var xd = locConfig[2].x;
                    var ya = 0;
                    var yb = locConfig[0].y;
                    var yc = locConfig[1].y;
                    var yd = locConfig[2].y;
                    var x = bezierAt(xa, xb, xc, xd, dt);
                    var y = bezierAt(ya, yb, yc, yd, dt);
                    var locStartPosition = this._startPosition;
                    if (cc.macro.ENABLE_STACKABLE_ACTIONS) {
                        var targetX = this.target.x;
                        var targetY = this.target.y;
                        var locPreviousPosition = this._previousPosition;
                        locStartPosition.x = locStartPosition.x + targetX - locPreviousPosition.x;
                        locStartPosition.y = locStartPosition.y + targetY - locPreviousPosition.y;
                        x = x + locStartPosition.x;
                        y = y + locStartPosition.y;
                        locPreviousPosition.x = x;
                        locPreviousPosition.y = y;
                        this.target.setPosition(x, y);
                    } else {
                        this.target.setPosition(locStartPosition.x + x, locStartPosition.y + y);
                    }
                }
            },
            reverse: function reverse() {
                var locConfig = this._config;
                var x0 = locConfig[0].x, y0 = locConfig[0].y;
                var x1 = locConfig[1].x, y1 = locConfig[1].y;
                var x2 = locConfig[2].x, y2 = locConfig[2].y;
                var r = [
                    cc.v2(x1 - x2, y1 - y2),
                    cc.v2(x0 - x2, y0 - y2),
                    cc.v2(-x2, -y2)
                ];
                var action = new cc.BezierBy(this._duration, r);
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            }
        });
        cc.bezierBy = function (t, c) {
            return new cc.BezierBy(t, c);
        };
        cc.BezierTo = cc.Class({
            name: 'cc.BezierTo',
            extends: cc.BezierBy,
            ctor: function ctor(t, c) {
                this._toConfig = [];
                c && this.initWithDuration(t, c);
            },
            initWithDuration: function initWithDuration(t, c) {
                if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
                    this._toConfig = c;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.BezierTo();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._toConfig);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.BezierBy.prototype.startWithTarget.call(this, target);
                var locStartPos = this._startPosition;
                var locToConfig = this._toConfig;
                var locConfig = this._config;
                locConfig[0] = locToConfig[0].sub(locStartPos);
                locConfig[1] = locToConfig[1].sub(locStartPos);
                locConfig[2] = locToConfig[2].sub(locStartPos);
            }
        });
        cc.bezierTo = function (t, c) {
            return new cc.BezierTo(t, c);
        };
        cc.ScaleTo = cc.Class({
            name: 'cc.ScaleTo',
            extends: cc.ActionInterval,
            ctor: function ctor(duration, sx, sy) {
                this._scaleX = 1;
                this._scaleY = 1;
                this._startScaleX = 1;
                this._startScaleY = 1;
                this._endScaleX = 0;
                this._endScaleY = 0;
                this._deltaX = 0;
                this._deltaY = 0;
                sx !== undefined && cc.ScaleTo.prototype.initWithDuration.call(this, duration, sx, sy);
            },
            initWithDuration: function initWithDuration(duration, sx, sy) {
                if (cc.ActionInterval.prototype.initWithDuration.call(this, duration)) {
                    this._endScaleX = sx;
                    this._endScaleY = sy != null ? sy : sx;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.ScaleTo();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._endScaleX, this._endScaleY);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._startScaleX = target.scaleX;
                this._startScaleY = target.scaleY;
                this._deltaX = this._endScaleX - this._startScaleX;
                this._deltaY = this._endScaleY - this._startScaleY;
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                if (this.target) {
                    this.target.scaleX = this._startScaleX + this._deltaX * dt;
                    this.target.scaleY = this._startScaleY + this._deltaY * dt;
                }
            }
        });
        cc.scaleTo = function (duration, sx, sy) {
            return new cc.ScaleTo(duration, sx, sy);
        };
        cc.ScaleBy = cc.Class({
            name: 'cc.ScaleBy',
            extends: cc.ScaleTo,
            startWithTarget: function startWithTarget(target) {
                cc.ScaleTo.prototype.startWithTarget.call(this, target);
                this._deltaX = this._startScaleX * this._endScaleX - this._startScaleX;
                this._deltaY = this._startScaleY * this._endScaleY - this._startScaleY;
            },
            reverse: function reverse() {
                var action = new cc.ScaleBy(this._duration, 1 / this._endScaleX, 1 / this._endScaleY);
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            },
            clone: function clone() {
                var action = new cc.ScaleBy();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._endScaleX, this._endScaleY);
                return action;
            }
        });
        cc.scaleBy = function (duration, sx, sy) {
            return new cc.ScaleBy(duration, sx, sy);
        };
        cc.Blink = cc.Class({
            name: 'cc.Blink',
            extends: cc.ActionInterval,
            ctor: function ctor(duration, blinks) {
                this._times = 0;
                this._originalState = false;
                blinks !== undefined && this.initWithDuration(duration, blinks);
            },
            initWithDuration: function initWithDuration(duration, blinks) {
                if (cc.ActionInterval.prototype.initWithDuration.call(this, duration)) {
                    this._times = blinks;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.Blink();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._times);
                return action;
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                if (this.target && !this.isDone()) {
                    var slice = 1 / this._times;
                    var m = dt % slice;
                    this.target.opacity = m > slice / 2 ? 255 : 0;
                }
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._originalState = target.opacity;
            },
            stop: function stop() {
                this.target.opacity = this._originalState;
                cc.ActionInterval.prototype.stop.call(this);
            },
            reverse: function reverse() {
                var action = new cc.Blink(this._duration, this._times);
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            }
        });
        cc.blink = function (duration, blinks) {
            return new cc.Blink(duration, blinks);
        };
        cc.FadeTo = cc.Class({
            name: 'cc.FadeTo',
            extends: cc.ActionInterval,
            ctor: function ctor(duration, opacity) {
                this._toOpacity = 0;
                this._fromOpacity = 0;
                opacity !== undefined && cc.FadeTo.prototype.initWithDuration.call(this, duration, opacity);
            },
            initWithDuration: function initWithDuration(duration, opacity) {
                if (cc.ActionInterval.prototype.initWithDuration.call(this, duration)) {
                    this._toOpacity = opacity;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.FadeTo();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._toOpacity);
                return action;
            },
            update: function update(time) {
                time = this._computeEaseTime(time);
                var fromOpacity = this._fromOpacity !== undefined ? this._fromOpacity : 255;
                this.target.opacity = fromOpacity + (this._toOpacity - fromOpacity) * time;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._fromOpacity = target.opacity;
            }
        });
        cc.fadeTo = function (duration, opacity) {
            return new cc.FadeTo(duration, opacity);
        };
        cc.FadeIn = cc.Class({
            name: 'cc.FadeIn',
            extends: cc.FadeTo,
            ctor: function ctor(duration) {
                if (duration == null)
                    duration = 0;
                this._reverseAction = null;
                this.initWithDuration(duration, 255);
            },
            reverse: function reverse() {
                var action = new cc.FadeOut();
                action.initWithDuration(this._duration, 0);
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            },
            clone: function clone() {
                var action = new cc.FadeIn();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._toOpacity);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                if (this._reverseAction)
                    this._toOpacity = this._reverseAction._fromOpacity;
                cc.FadeTo.prototype.startWithTarget.call(this, target);
            }
        });
        cc.fadeIn = function (duration) {
            return new cc.FadeIn(duration);
        };
        cc.FadeOut = cc.Class({
            name: 'cc.FadeOut',
            extends: cc.FadeTo,
            ctor: function ctor(duration) {
                if (duration == null)
                    duration = 0;
                this._reverseAction = null;
                this.initWithDuration(duration, 0);
            },
            reverse: function reverse() {
                var action = new cc.FadeIn();
                action._reverseAction = this;
                action.initWithDuration(this._duration, 255);
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            },
            clone: function clone() {
                var action = new cc.FadeOut();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._toOpacity);
                return action;
            }
        });
        cc.fadeOut = function (d) {
            return new cc.FadeOut(d);
        };
        cc.TintTo = cc.Class({
            name: 'cc.TintTo',
            extends: cc.ActionInterval,
            ctor: function ctor(duration, red, green, blue) {
                this._to = cc.color(0, 0, 0);
                this._from = cc.color(0, 0, 0);
                if (red instanceof cc.Color) {
                    blue = red.b;
                    green = red.g;
                    red = red.r;
                }
                blue !== undefined && this.initWithDuration(duration, red, green, blue);
            },
            initWithDuration: function initWithDuration(duration, red, green, blue) {
                if (cc.ActionInterval.prototype.initWithDuration.call(this, duration)) {
                    this._to = cc.color(red, green, blue);
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.TintTo();
                this._cloneDecoration(action);
                var locTo = this._to;
                action.initWithDuration(this._duration, locTo.r, locTo.g, locTo.b);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._from = this.target.color;
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                var locFrom = this._from, locTo = this._to;
                if (locFrom) {
                    this.target.color = cc.color(locFrom.r + (locTo.r - locFrom.r) * dt, locFrom.g + (locTo.g - locFrom.g) * dt, locFrom.b + (locTo.b - locFrom.b) * dt);
                }
            }
        });
        cc.tintTo = function (duration, red, green, blue) {
            return new cc.TintTo(duration, red, green, blue);
        };
        cc.TintBy = cc.Class({
            name: 'cc.TintBy',
            extends: cc.ActionInterval,
            ctor: function ctor(duration, deltaRed, deltaGreen, deltaBlue) {
                this._deltaR = 0;
                this._deltaG = 0;
                this._deltaB = 0;
                this._fromR = 0;
                this._fromG = 0;
                this._fromB = 0;
                deltaBlue !== undefined && this.initWithDuration(duration, deltaRed, deltaGreen, deltaBlue);
            },
            initWithDuration: function initWithDuration(duration, deltaRed, deltaGreen, deltaBlue) {
                if (cc.ActionInterval.prototype.initWithDuration.call(this, duration)) {
                    this._deltaR = deltaRed;
                    this._deltaG = deltaGreen;
                    this._deltaB = deltaBlue;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.TintBy();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._deltaR, this._deltaG, this._deltaB);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                var color = target.color;
                this._fromR = color.r;
                this._fromG = color.g;
                this._fromB = color.b;
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                this.target.color = cc.color(this._fromR + this._deltaR * dt, this._fromG + this._deltaG * dt, this._fromB + this._deltaB * dt);
            },
            reverse: function reverse() {
                var action = new cc.TintBy(this._duration, -this._deltaR, -this._deltaG, -this._deltaB);
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            }
        });
        cc.tintBy = function (duration, deltaRed, deltaGreen, deltaBlue) {
            return new cc.TintBy(duration, deltaRed, deltaGreen, deltaBlue);
        };
        cc.DelayTime = cc.Class({
            name: 'cc.DelayTime',
            extends: cc.ActionInterval,
            update: function update(dt) {
            },
            reverse: function reverse() {
                var action = new cc.DelayTime(this._duration);
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            },
            clone: function clone() {
                var action = new cc.DelayTime();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration);
                return action;
            }
        });
        cc.delayTime = function (d) {
            return new cc.DelayTime(d);
        };
        cc.ReverseTime = cc.Class({
            name: 'cc.ReverseTime',
            extends: cc.ActionInterval,
            ctor: function ctor(action) {
                this._other = null;
                action && this.initWithAction(action);
            },
            initWithAction: function initWithAction(action) {
                if (!action) {
                    cc.errorID(1028);
                    return false;
                }
                if (action === this._other) {
                    cc.errorID(1029);
                    return false;
                }
                if (cc.ActionInterval.prototype.initWithDuration.call(this, action._duration)) {
                    this._other = action;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.ReverseTime();
                this._cloneDecoration(action);
                action.initWithAction(this._other.clone());
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._other.startWithTarget(target);
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                if (this._other)
                    this._other.update(1 - dt);
            },
            reverse: function reverse() {
                return this._other.clone();
            },
            stop: function stop() {
                this._other.stop();
                cc.Action.prototype.stop.call(this);
            }
        });
        cc.reverseTime = function (action) {
            return new cc.ReverseTime(action);
        };
        cc.TargetedAction = cc.Class({
            name: 'cc.TargetedAction',
            extends: cc.ActionInterval,
            ctor: function ctor(target, action) {
                this._action = null;
                this._forcedTarget = null;
                action && this.initWithTarget(target, action);
            },
            initWithTarget: function initWithTarget(target, action) {
                if (this.initWithDuration(action._duration)) {
                    this._forcedTarget = target;
                    this._action = action;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.TargetedAction();
                this._cloneDecoration(action);
                action.initWithTarget(this._forcedTarget, this._action.clone());
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._action.startWithTarget(this._forcedTarget);
            },
            stop: function stop() {
                this._action.stop();
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                this._action.update(dt);
            },
            getForcedTarget: function getForcedTarget() {
                return this._forcedTarget;
            },
            setForcedTarget: function setForcedTarget(forcedTarget) {
                if (this._forcedTarget !== forcedTarget)
                    this._forcedTarget = forcedTarget;
            }
        });
        cc.targetedAction = function (target, action) {
            return new cc.TargetedAction(target, action);
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDQWN0aW9uSW50ZXJ2YWwuanMiLCIvVXNlcnMvU2hhcmVkL2JpbmdvX2ZyZW56eS9lbmdpbmUvY29jb3MyZC9hY3Rpb25zL0NDQWN0aW9uSW50ZXJ2YWwuanMiXSwibmFtZXMiOlsiY2MiLCJBY3Rpb25JbnRlcnZhbCIsIkNsYXNzIiwibmFtZSIsImV4dGVuZHMiLCJGaW5pdGVUaW1lQWN0aW9uIiwiY3RvciIsImQiLCJNQVhfVkFMVUUiLCJfZWxhcHNlZCIsIl9maXJzdFRpY2siLCJfZWFzZUxpc3QiLCJfc3BlZWQiLCJfdGltZXNGb3JSZXBlYXQiLCJfcmVwZWF0Rm9yZXZlciIsIl9yZXBlYXRNZXRob2QiLCJfc3BlZWRNZXRob2QiLCJ1bmRlZmluZWQiLCJwcm90b3R5cGUiLCJpbml0V2l0aER1cmF0aW9uIiwiY2FsbCIsImdldEVsYXBzZWQiLCJfZHVyYXRpb24iLCJtYWNybyIsIkZMVF9FUFNJTE9OIiwiaXNEb25lIiwiX2Nsb25lRGVjb3JhdGlvbiIsImFjdGlvbiIsIl9yZXZlcnNlRWFzZUxpc3QiLCJpIiwibGVuZ3RoIiwicHVzaCIsInJldmVyc2UiLCJjbG9uZSIsImVhc2luZyIsImVhc2VPYmoiLCJhcmd1bWVudHMiLCJfY29tcHV0ZUVhc2VUaW1lIiwiZHQiLCJsb2NMaXN0IiwibiIsInN0ZXAiLCJ0IiwidXBkYXRlIiwic3RhcnRXaXRoVGFyZ2V0IiwidGFyZ2V0IiwiQWN0aW9uIiwibG9nSUQiLCJzZXRBbXBsaXR1ZGVSYXRlIiwiYW1wIiwiZ2V0QW1wbGl0dWRlUmF0ZSIsInNwZWVkIiwiZ2V0U3BlZWQiLCJzZXRTcGVlZCIsInJlcGVhdCIsInRpbWVzIiwiTWF0aCIsInJvdW5kIiwiaXNOYU4iLCJyZXBlYXRGb3JldmVyIiwiYWN0aW9uSW50ZXJ2YWwiLCJTZXF1ZW5jZSIsInRlbXBBcnJheSIsIl9hY3Rpb25zIiwiX3NwbGl0IiwiX2xhc3QiLCJfcmV2ZXJzZWQiLCJwYXJhbUFycmF5IiwiQXJyYXkiLCJlcnJvcklEIiwibGFzdCIsInByZXYiLCJhY3Rpb24xIiwiX2FjdGlvbk9uZVR3byIsImluaXRXaXRoVHdvQWN0aW9ucyIsImFjdGlvbk9uZSIsImFjdGlvblR3byIsImR1cmF0aW9uT25lIiwiZHVyYXRpb25Ud28iLCJzdG9wIiwibmV3X3QiLCJmb3VuZCIsImxvY1NwbGl0IiwibG9jQWN0aW9ucyIsImxvY0xhc3QiLCJhY3Rpb25Gb3VuZCIsInNlcXVlbmNlIiwicmVzdWx0IiwiUmVwZWF0IiwiX3RpbWVzIiwiX3RvdGFsIiwiX25leHREdCIsIl9hY3Rpb25JbnN0YW50IiwiX2lubmVyQWN0aW9uIiwiaW5pdFdpdGhBY3Rpb24iLCJkdXJhdGlvbiIsIkFjdGlvbkluc3RhbnQiLCJsb2NJbm5lckFjdGlvbiIsImxvY0R1cmF0aW9uIiwibG9jVGltZXMiLCJsb2NOZXh0RHQiLCJzZXRJbm5lckFjdGlvbiIsImdldElubmVyQWN0aW9uIiwiUmVwZWF0Rm9yZXZlciIsIlNwYXduIiwiX29uZSIsIl90d28iLCJhY3Rpb24yIiwicmV0IiwiZDEiLCJkMiIsIm1heCIsImRlbGF5VGltZSIsInNwYXduIiwicFNwYXduIiwiUm90YXRlVG8iLCJkc3RBbmdsZSIsIl9zdGFydEFuZ2xlIiwiX2RzdEFuZ2xlIiwiX2FuZ2xlIiwic3RhcnRBbmdsZSIsImFuZ2xlIiwiUk9UQVRFX0FDVElPTl9DQ1ciLCJyb3RhdGVUbyIsIlJvdGF0ZUJ5IiwiZGVsdGFBbmdsZSIsIl9kZWx0YUFuZ2xlIiwicm90YXRlQnkiLCJNb3ZlQnkiLCJkZWx0YVBvcyIsImRlbHRhWSIsIl9wb3NpdGlvbkRlbHRhIiwidjIiLCJfc3RhcnRQb3NpdGlvbiIsIl9wcmV2aW91c1Bvc2l0aW9uIiwicG9zaXRpb24iLCJ5IiwieCIsImxvY1Bvc1giLCJsb2NQb3NZIiwibG9jU3RhcnRQb3NpdGlvbiIsIkVOQUJMRV9TVEFDS0FCTEVfQUNUSU9OUyIsInRhcmdldFgiLCJ0YXJnZXRZIiwibG9jUHJldmlvdXNQb3NpdGlvbiIsInNldFBvc2l0aW9uIiwibW92ZUJ5IiwiTW92ZVRvIiwiX2VuZFBvc2l0aW9uIiwibW92ZVRvIiwiU2tld1RvIiwic3giLCJzeSIsIl9za2V3WCIsIl9za2V3WSIsIl9zdGFydFNrZXdYIiwiX3N0YXJ0U2tld1kiLCJfZW5kU2tld1giLCJfZW5kU2tld1kiLCJfZGVsdGFYIiwiX2RlbHRhWSIsInNrZXdYIiwic2tld1kiLCJza2V3VG8iLCJTa2V3QnkiLCJkZWx0YVNrZXdYIiwiZGVsdGFTa2V3WSIsInNrZXdCeSIsIkp1bXBCeSIsImhlaWdodCIsImp1bXBzIiwiX2RlbHRhIiwiX2hlaWdodCIsIl9qdW1wcyIsImZyYWMiLCJqdW1wQnkiLCJKdW1wVG8iLCJqdW1wVG8iLCJiZXppZXJBdCIsImEiLCJiIiwiYyIsInBvdyIsIkJlemllckJ5IiwiX2NvbmZpZyIsIm5ld0NvbmZpZ3MiLCJzZWxDb25mIiwibG9jQ29uZmlnIiwieGEiLCJ4YiIsInhjIiwieGQiLCJ5YSIsInliIiwieWMiLCJ5ZCIsIngwIiwieTAiLCJ4MSIsInkxIiwieDIiLCJ5MiIsInIiLCJiZXppZXJCeSIsIkJlemllclRvIiwiX3RvQ29uZmlnIiwibG9jU3RhcnRQb3MiLCJsb2NUb0NvbmZpZyIsInN1YiIsImJlemllclRvIiwiU2NhbGVUbyIsIl9zY2FsZVgiLCJfc2NhbGVZIiwiX3N0YXJ0U2NhbGVYIiwiX3N0YXJ0U2NhbGVZIiwiX2VuZFNjYWxlWCIsIl9lbmRTY2FsZVkiLCJzY2FsZVgiLCJzY2FsZVkiLCJzY2FsZVRvIiwiU2NhbGVCeSIsInNjYWxlQnkiLCJCbGluayIsImJsaW5rcyIsIl9vcmlnaW5hbFN0YXRlIiwic2xpY2UiLCJtIiwib3BhY2l0eSIsImJsaW5rIiwiRmFkZVRvIiwiX3RvT3BhY2l0eSIsIl9mcm9tT3BhY2l0eSIsInRpbWUiLCJmcm9tT3BhY2l0eSIsImZhZGVUbyIsIkZhZGVJbiIsIl9yZXZlcnNlQWN0aW9uIiwiRmFkZU91dCIsImZhZGVJbiIsImZhZGVPdXQiLCJUaW50VG8iLCJyZWQiLCJncmVlbiIsImJsdWUiLCJfdG8iLCJjb2xvciIsIl9mcm9tIiwiQ29sb3IiLCJnIiwibG9jVG8iLCJsb2NGcm9tIiwidGludFRvIiwiVGludEJ5IiwiZGVsdGFSZWQiLCJkZWx0YUdyZWVuIiwiZGVsdGFCbHVlIiwiX2RlbHRhUiIsIl9kZWx0YUciLCJfZGVsdGFCIiwiX2Zyb21SIiwiX2Zyb21HIiwiX2Zyb21CIiwidGludEJ5IiwiRGVsYXlUaW1lIiwiUmV2ZXJzZVRpbWUiLCJfb3RoZXIiLCJyZXZlcnNlVGltZSIsIlRhcmdldGVkQWN0aW9uIiwiX2FjdGlvbiIsIl9mb3JjZWRUYXJnZXQiLCJpbml0V2l0aFRhcmdldCIsImdldEZvcmNlZFRhcmdldCIsInNldEZvcmNlZFRhcmdldCIsImZvcmNlZFRhcmdldCIsInRhcmdldGVkQWN0aW9uIl0sIm1hcHBpbmdzIjoiO0lBQUEsSUFBQSxPQUFBLEdBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQSxJQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUE7Ozs7Ozs7Ozs7Ozs7UUFrREFBLEVBQUFBLENBQUdDLGNBQUhELEdBQW9CQSxFQUFBQSxDQUFHRSxLQUFIRixDQUFTO0FBQUEsWUFDekJHLElBQUFBLEVBQU0sbUJBRG1CO0FBQUEsWUFFekJDLE9BQUFBLEVBQVNKLEVBQUFBLENBQUdLLGdCQUZhO0FBQUEsWUFJekJDLElBQUFBLEVBQUssU0FBQSxJQUFBLENBQVVDLENBQVYsRUFBYTtBQUFBLGdCQUNkLEtBQUtDLFNBQUwsR0FBaUIsQ0FBakIsQ0FEYztBQUFBLGdCQUVkLEtBQUtDLFFBQUwsR0FBZ0IsQ0FBaEIsQ0FGYztBQUFBLGdCQUdkLEtBQUtDLFVBQUwsR0FBa0IsS0FBbEIsQ0FIYztBQUFBLGdCQUlkLEtBQUtDLFNBQUwsR0FBaUIsSUFBakIsQ0FKYztBQUFBLGdCQUtkLEtBQUtDLE1BQUwsR0FBYyxDQUFkLENBTGM7QUFBQSxnQkFNZCxLQUFLQyxlQUFMLEdBQXVCLENBQXZCLENBTmM7QUFBQSxnQkFPZCxLQUFLQyxjQUFMLEdBQXNCLEtBQXRCLENBUGM7QUFBQSxnQkFRZCxLQUFLQyxhQUFMLEdBQXFCLEtBQXJC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QSxvQkFDSSxLQUFLSixhQUFMLEdBQXFCSSxZQUFyQixDQUZnQztBQUFBLGFBMURmO0FBQUEsU0FBVGpSLENBQXBCQTtRQXdFQUEsRUFBQUEsQ0FBR2tSLGNBQUhsUixHQUFvQixVQUFVNkMsTUFBVixFQUFrQmxCLE1BQWxCLEVBQTBCO0FBQUEsWUFDMUMsT0FBTyxJQUFJM0IsRUFBQUEsQ0FBRzJRLGNBQVAsQ0FBc0I5TixNQUF0QixFQUE4QmxCLE1BQTlCLENBQVAsQ0FEMEM7QUFBQSxTQUE5QzNCIiwiZmlsZSI6IkNDQWN0aW9uSW50ZXJ2YWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAwOC0yMDEwIFJpY2FyZG8gUXVlc2FkYVxuIENvcHlyaWdodCAoYykgMjAxMS0yMDEyIGNvY29zMmQteC5vcmdcbiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxNiBDaHVrb25nIFRlY2hub2xvZ2llcyBJbmMuXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwOi8vd3d3LmNvY29zMmQteC5vcmdcblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG4gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblxuLyoqXG4gKiBAbW9kdWxlIGNjXG4gKi9cblxuLyoqXG4gKiAhI2VuXG4gKiA8cD4gQW4gaW50ZXJ2YWwgYWN0aW9uIGlzIGFuIGFjdGlvbiB0aGF0IHRha2VzIHBsYWNlIHdpdGhpbiBhIGNlcnRhaW4gcGVyaW9kIG9mIHRpbWUuIDxici8+XG4gKiBJdCBoYXMgYW4gc3RhcnQgdGltZSwgYW5kIGEgZmluaXNoIHRpbWUuIFRoZSBmaW5pc2ggdGltZSBpcyB0aGUgcGFyYW1ldGVyPGJyLz5cbiAqIGR1cmF0aW9uIHBsdXMgdGhlIHN0YXJ0IHRpbWUuPC9wPlxuICpcbiAqIDxwPlRoZXNlIENDQWN0aW9uSW50ZXJ2YWwgYWN0aW9ucyBoYXZlIHNvbWUgaW50ZXJlc3RpbmcgcHJvcGVydGllcywgbGlrZTo8YnIvPlxuICogLSBUaGV5IGNhbiBydW4gbm9ybWFsbHkgKGRlZmF1bHQpICA8YnIvPlxuICogLSBUaGV5IGNhbiBydW4gcmV2ZXJzZWQgd2l0aCB0aGUgcmV2ZXJzZSBtZXRob2QgICA8YnIvPlxuICogLSBUaGV5IGNhbiBydW4gd2l0aCB0aGUgdGltZSBhbHRlcmVkIHdpdGggdGhlIEFjY2VsZXJhdGUsIEFjY2VsRGVjY2VsIGFuZCBTcGVlZCBhY3Rpb25zLiA8L3A+XG4gKlxuICogPHA+Rm9yIGV4YW1wbGUsIHlvdSBjYW4gc2ltdWxhdGUgYSBQaW5nIFBvbmcgZWZmZWN0IHJ1bm5pbmcgdGhlIGFjdGlvbiBub3JtYWxseSBhbmQ8YnIvPlxuICogdGhlbiBydW5uaW5nIGl0IGFnYWluIGluIFJldmVyc2UgbW9kZS4gPC9wPlxuICogISN6aCDml7bpl7Tpl7TpmpTliqjkvZzvvIzov5nnp43liqjkvZzlnKjlt7Llrprml7bpl7TlhoXlrozmiJDvvIznu6fmib8gRmluaXRlVGltZUFjdGlvbuOAglxuICogQGNsYXNzIEFjdGlvbkludGVydmFsXG4gKiBAZXh0ZW5kcyBGaW5pdGVUaW1lQWN0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gZCBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gKi9cbmNjLkFjdGlvbkludGVydmFsID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5BY3Rpb25JbnRlcnZhbCcsXG4gICAgZXh0ZW5kczogY2MuRmluaXRlVGltZUFjdGlvbixcblxuICAgIGN0b3I6ZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgdGhpcy5NQVhfVkFMVUUgPSAyO1xuICAgICAgICB0aGlzLl9lbGFwc2VkID0gMDtcbiAgICAgICAgdGhpcy5fZmlyc3RUaWNrID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2Vhc2VMaXN0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc3BlZWQgPSAxO1xuICAgICAgICB0aGlzLl90aW1lc0ZvclJlcGVhdCA9IDE7XG4gICAgICAgIHRoaXMuX3JlcGVhdEZvcmV2ZXIgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcmVwZWF0TWV0aG9kID0gZmFsc2U7Ly9Db21wYXRpYmxlIHdpdGggcmVwZWF0IGNsYXNzLCBEaXNjYXJkIGFmdGVyIGNhbiBiZSBkZWxldGVkXG4gICAgICAgIHRoaXMuX3NwZWVkTWV0aG9kID0gZmFsc2U7Ly9Db21wYXRpYmxlIHdpdGggcmVwZWF0IGNsYXNzLCBEaXNjYXJkIGFmdGVyIGNhbiBiZSBkZWxldGVkXG4gICAgICAgIGQgIT09IHVuZGVmaW5lZCAmJiBjYy5BY3Rpb25JbnRlcnZhbC5wcm90b3R5cGUuaW5pdFdpdGhEdXJhdGlvbi5jYWxsKHRoaXMsIGQpO1xuICAgIH0sXG5cbiAgICAvKlxuICAgICAqIEhvdyBtYW55IHNlY29uZHMgaGFkIGVsYXBzZWQgc2luY2UgdGhlIGFjdGlvbnMgc3RhcnRlZCB0byBydW4uXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldEVsYXBzZWQ6ZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZWxhcHNlZDtcbiAgICB9LFxuXG4gICAgLypcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkIGR1cmF0aW9uIGluIHNlY29uZHNcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGluaXRXaXRoRHVyYXRpb246ZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgdGhpcy5fZHVyYXRpb24gPSAoZCA9PT0gMCkgPyBjYy5tYWNyby5GTFRfRVBTSUxPTiA6IGQ7XG4gICAgICAgIC8vIHByZXZlbnQgZGl2aXNpb24gYnkgMFxuICAgICAgICAvLyBUaGlzIGNvbXBhcmlzb24gY291bGQgYmUgaW4gc3RlcDosIGJ1dCBpdCBtaWdodCBkZWNyZWFzZSB0aGUgcGVyZm9ybWFuY2VcbiAgICAgICAgLy8gYnkgMyUgaW4gaGVhdnkgYmFzZWQgYWN0aW9uIGdhbWVzLlxuICAgICAgICB0aGlzLl9lbGFwc2VkID0gMDtcbiAgICAgICAgdGhpcy5fZmlyc3RUaWNrID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIGlzRG9uZTpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5fZWxhcHNlZCA+PSB0aGlzLl9kdXJhdGlvbik7XG4gICAgfSxcblxuICAgIF9jbG9uZURlY29yYXRpb246IGZ1bmN0aW9uKGFjdGlvbil7XG4gICAgICAgIGFjdGlvbi5fcmVwZWF0Rm9yZXZlciA9IHRoaXMuX3JlcGVhdEZvcmV2ZXI7XG4gICAgICAgIGFjdGlvbi5fc3BlZWQgPSB0aGlzLl9zcGVlZDtcbiAgICAgICAgYWN0aW9uLl90aW1lc0ZvclJlcGVhdCA9IHRoaXMuX3RpbWVzRm9yUmVwZWF0O1xuICAgICAgICBhY3Rpb24uX2Vhc2VMaXN0ID0gdGhpcy5fZWFzZUxpc3Q7XG4gICAgICAgIGFjdGlvbi5fc3BlZWRNZXRob2QgPSB0aGlzLl9zcGVlZE1ldGhvZDtcbiAgICAgICAgYWN0aW9uLl9yZXBlYXRNZXRob2QgPSB0aGlzLl9yZXBlYXRNZXRob2Q7XG4gICAgfSxcblxuICAgIF9yZXZlcnNlRWFzZUxpc3Q6IGZ1bmN0aW9uKGFjdGlvbil7XG4gICAgICAgIGlmKHRoaXMuX2Vhc2VMaXN0KXtcbiAgICAgICAgICAgIGFjdGlvbi5fZWFzZUxpc3QgPSBbXTtcbiAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpPHRoaXMuX2Vhc2VMaXN0Lmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICBhY3Rpb24uX2Vhc2VMaXN0LnB1c2godGhpcy5fZWFzZUxpc3RbaV0ucmV2ZXJzZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjbG9uZTpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuQWN0aW9uSW50ZXJ2YWwodGhpcy5fZHVyYXRpb24pO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBJbXBsZW1lbnRhdGlvbiBvZiBlYXNlIG1vdGlvbi5cbiAgICAgKiAhI3poIOe8k+WKqOi/kOWKqOOAglxuICAgICAqIEBtZXRob2QgZWFzaW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGVhc2VPYmpcbiAgICAgKiBAcmV0dXJucyB7QWN0aW9uSW50ZXJ2YWx9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBhY3Rpb24uZWFzaW5nKGNjLmVhc2VJbigzLjApKTtcbiAgICAgKi9cbiAgICBlYXNpbmc6IGZ1bmN0aW9uIChlYXNlT2JqKSB7XG4gICAgICAgIGlmICh0aGlzLl9lYXNlTGlzdClcbiAgICAgICAgICAgIHRoaXMuX2Vhc2VMaXN0Lmxlbmd0aCA9IDA7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRoaXMuX2Vhc2VMaXN0ID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgdGhpcy5fZWFzZUxpc3QucHVzaChhcmd1bWVudHNbaV0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgX2NvbXB1dGVFYXNlVGltZTogZnVuY3Rpb24gKGR0KSB7XG4gICAgICAgIHZhciBsb2NMaXN0ID0gdGhpcy5fZWFzZUxpc3Q7XG4gICAgICAgIGlmICgoIWxvY0xpc3QpIHx8IChsb2NMaXN0Lmxlbmd0aCA9PT0gMCkpXG4gICAgICAgICAgICByZXR1cm4gZHQ7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gbG9jTGlzdC5sZW5ndGg7IGkgPCBuOyBpKyspXG4gICAgICAgICAgICBkdCA9IGxvY0xpc3RbaV0uZWFzaW5nKGR0KTtcbiAgICAgICAgcmV0dXJuIGR0O1xuICAgIH0sXG5cbiAgICBzdGVwOmZ1bmN0aW9uIChkdCkge1xuICAgICAgICBpZiAodGhpcy5fZmlyc3RUaWNrKSB7XG4gICAgICAgICAgICB0aGlzLl9maXJzdFRpY2sgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX2VsYXBzZWQgPSAwO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIHRoaXMuX2VsYXBzZWQgKz0gZHQ7XG5cbiAgICAgICAgLy90aGlzLnVwZGF0ZSgoMSA+ICh0aGlzLl9lbGFwc2VkIC8gdGhpcy5fZHVyYXRpb24pKSA/IHRoaXMuX2VsYXBzZWQgLyB0aGlzLl9kdXJhdGlvbiA6IDEpO1xuICAgICAgICAvL3RoaXMudXBkYXRlKE1hdGgubWF4KDAsIE1hdGgubWluKDEsIHRoaXMuX2VsYXBzZWQgLyBNYXRoLm1heCh0aGlzLl9kdXJhdGlvbiwgY2MubWFjcm8uRkxUX0VQU0lMT04pKSkpO1xuICAgICAgICB2YXIgdCA9IHRoaXMuX2VsYXBzZWQgLyAodGhpcy5fZHVyYXRpb24gPiAwLjAwMDAwMDExOTIwOTI4OTYgPyB0aGlzLl9kdXJhdGlvbiA6IDAuMDAwMDAwMTE5MjA5Mjg5Nik7XG4gICAgICAgIHQgPSAoMSA+IHQgPyB0IDogMSk7XG4gICAgICAgIHRoaXMudXBkYXRlKHQgPiAwID8gdCA6IDApO1xuXG4gICAgICAgIC8vQ29tcGF0aWJsZSB3aXRoIHJlcGVhdCBjbGFzcywgRGlzY2FyZCBhZnRlciBjYW4gYmUgZGVsZXRlZCAodGhpcy5fcmVwZWF0TWV0aG9kKVxuICAgICAgICBpZih0aGlzLl9yZXBlYXRNZXRob2QgJiYgdGhpcy5fdGltZXNGb3JSZXBlYXQgPiAxICYmIHRoaXMuaXNEb25lKCkpe1xuICAgICAgICAgICAgaWYoIXRoaXMuX3JlcGVhdEZvcmV2ZXIpe1xuICAgICAgICAgICAgICAgIHRoaXMuX3RpbWVzRm9yUmVwZWF0LS07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL3ZhciBkaWZmID0gbG9jSW5uZXJBY3Rpb24uZ2V0RWxhcHNlZCgpIC0gbG9jSW5uZXJBY3Rpb24uX2R1cmF0aW9uO1xuICAgICAgICAgICAgdGhpcy5zdGFydFdpdGhUYXJnZXQodGhpcy50YXJnZXQpO1xuICAgICAgICAgICAgLy8gdG8gcHJldmVudCBqZXJrLiBpc3N1ZSAjMzkwICwxMjQ3XG4gICAgICAgICAgICAvL3RoaXMuX2lubmVyQWN0aW9uLnN0ZXAoMCk7XG4gICAgICAgICAgICAvL3RoaXMuX2lubmVyQWN0aW9uLnN0ZXAoZGlmZik7XG4gICAgICAgICAgICB0aGlzLnN0ZXAodGhpcy5fZWxhcHNlZCAtIHRoaXMuX2R1cmF0aW9uKTtcblxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHN0YXJ0V2l0aFRhcmdldDpmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIGNjLkFjdGlvbi5wcm90b3R5cGUuc3RhcnRXaXRoVGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcbiAgICAgICAgdGhpcy5fZWxhcHNlZCA9IDA7XG4gICAgICAgIHRoaXMuX2ZpcnN0VGljayA9IHRydWU7XG4gICAgfSxcblxuICAgIHJldmVyc2U6ZnVuY3Rpb24gKCkge1xuICAgICAgICBjYy5sb2dJRCgxMDEwKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogU2V0IGFtcGxpdHVkZSByYXRlLlxuICAgICAqIEB3YXJuaW5nIEl0IHNob3VsZCBiZSBvdmVycmlkZGVuIGluIHN1YmNsYXNzLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhbXBcbiAgICAgKi9cbiAgICBzZXRBbXBsaXR1ZGVSYXRlOmZ1bmN0aW9uIChhbXApIHtcbiAgICAgICAgLy8gQWJzdHJhY3QgY2xhc3MgbmVlZHMgaW1wbGVtZW50YXRpb25cbiAgICAgICAgY2MubG9nSUQoMTAxMSk7XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogR2V0IGFtcGxpdHVkZSByYXRlLlxuICAgICAqIEB3YXJuaW5nIEl0IHNob3VsZCBiZSBvdmVycmlkZGVuIGluIHN1YmNsYXNzLlxuICAgICAqIEByZXR1cm4ge051bWJlcn0gMFxuICAgICAqL1xuICAgIGdldEFtcGxpdHVkZVJhdGU6ZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBBYnN0cmFjdCBjbGFzcyBuZWVkcyBpbXBsZW1lbnRhdGlvblxuICAgICAgICBjYy5sb2dJRCgxMDEyKTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBDaGFuZ2VzIHRoZSBzcGVlZCBvZiBhbiBhY3Rpb24sIG1ha2luZyBpdCB0YWtlIGxvbmdlciAoc3BlZWQ+MSlcbiAgICAgKiBvciBsZXNzIChzcGVlZDwxKSB0aW1lLiA8YnIvPlxuICAgICAqIFVzZWZ1bCB0byBzaW11bGF0ZSAnc2xvdyBtb3Rpb24nIG9yICdmYXN0IGZvcndhcmQnIGVmZmVjdC5cbiAgICAgKiAhI3poXG4gICAgICog5pS55Y+Y5LiA5Liq5Yqo5L2c55qE6YCf5bqm77yM5L2/5a6D55qE5omn6KGM5L2/55So5pu06ZW/55qE5pe26Ze077yIc3BlZWQgPiAx77yJPGJyLz5cbiAgICAgKiDmiJbmm7TlsJHvvIhzcGVlZCA8IDHvvInlj6/ku6XmnInmlYjlvpfmqKHmi5/igJzmhaLliqjkvZzigJ3miJbigJzlv6vov5vigJ3nmoTmlYjmnpzjgIJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc3BlZWRcbiAgICAgKiBAcmV0dXJucyB7QWN0aW9ufVxuICAgICAqL1xuICAgIHNwZWVkOiBmdW5jdGlvbihzcGVlZCl7XG4gICAgICAgIGlmKHNwZWVkIDw9IDApe1xuICAgICAgICAgICAgY2MubG9nSUQoMTAxMyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3NwZWVkTWV0aG9kID0gdHJ1ZTsvL0NvbXBhdGlibGUgd2l0aCByZXBlYXQgY2xhc3MsIERpc2NhcmQgYWZ0ZXIgY2FuIGJlIGRlbGV0ZWRcbiAgICAgICAgdGhpcy5fc3BlZWQgKj0gc3BlZWQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhpcyBhY3Rpb24gc3BlZWQuXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldFNwZWVkOiBmdW5jdGlvbigpe1xuICAgICAgICByZXR1cm4gdGhpcy5fc3BlZWQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldCB0aGlzIGFjdGlvbiBzcGVlZC5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc3BlZWRcbiAgICAgKiBAcmV0dXJucyB7QWN0aW9uSW50ZXJ2YWx9XG4gICAgICovXG4gICAgc2V0U3BlZWQ6IGZ1bmN0aW9uKHNwZWVkKXtcbiAgICAgICAgdGhpcy5fc3BlZWQgPSBzcGVlZDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBSZXBlYXRzIGFuIGFjdGlvbiBhIG51bWJlciBvZiB0aW1lcy5cbiAgICAgKiBUbyByZXBlYXQgYW4gYWN0aW9uIGZvcmV2ZXIgdXNlIHRoZSBDQ1JlcGVhdEZvcmV2ZXIgYWN0aW9uLlxuICAgICAqICEjemgg6YeN5aSN5Yqo5L2c5Y+v5Lul5oyJ5LiA5a6a5qyh5pWw6YeN5aSN5LiA5Liq5Yqo5L2c77yM5L2/55SoIFJlcGVhdEZvcmV2ZXIg5Yqo5L2c5p2l5rC46L+c6YeN5aSN5LiA5Liq5Yqo5L2c44CCXG4gICAgICogQG1ldGhvZCByZXBlYXRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdGltZXNcbiAgICAgKiBAcmV0dXJucyB7QWN0aW9uSW50ZXJ2YWx9XG4gICAgICovXG4gICAgcmVwZWF0OiBmdW5jdGlvbih0aW1lcyl7XG4gICAgICAgIHRpbWVzID0gTWF0aC5yb3VuZCh0aW1lcyk7XG4gICAgICAgIGlmKGlzTmFOKHRpbWVzKSB8fCB0aW1lcyA8IDEpe1xuICAgICAgICAgICAgY2MubG9nSUQoMTAxNCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZXBlYXRNZXRob2QgPSB0cnVlOy8vQ29tcGF0aWJsZSB3aXRoIHJlcGVhdCBjbGFzcywgRGlzY2FyZCBhZnRlciBjYW4gYmUgZGVsZXRlZFxuICAgICAgICB0aGlzLl90aW1lc0ZvclJlcGVhdCAqPSB0aW1lcztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBSZXBlYXRzIGFuIGFjdGlvbiBmb3IgZXZlci4gIDxici8+XG4gICAgICogVG8gcmVwZWF0IHRoZSBhbiBhY3Rpb24gZm9yIGEgbGltaXRlZCBudW1iZXIgb2YgdGltZXMgdXNlIHRoZSBSZXBlYXQgYWN0aW9uLiA8YnIvPlxuICAgICAqICEjemgg5rC46L+c5Zyw6YeN5aSN5LiA5Liq5Yqo5L2c77yM5pyJ6ZmQ5qyh5pWw5YaF6YeN5aSN5LiA5Liq5Yqo5L2c6K+35L2/55SoIFJlcGVhdCDliqjkvZzjgIJcbiAgICAgKiBAbWV0aG9kIHJlcGVhdEZvcmV2ZXJcbiAgICAgKiBAcmV0dXJucyB7QWN0aW9uSW50ZXJ2YWx9XG4gICAgICovXG4gICAgcmVwZWF0Rm9yZXZlcjogZnVuY3Rpb24oKXtcbiAgICAgICAgdGhpcy5fcmVwZWF0TWV0aG9kID0gdHJ1ZTsvL0NvbXBhdGlibGUgd2l0aCByZXBlYXQgY2xhc3MsIERpc2NhcmQgYWZ0ZXIgY2FuIGJlIGRlbGV0ZWRcbiAgICAgICAgdGhpcy5fdGltZXNGb3JSZXBlYXQgPSB0aGlzLk1BWF9WQUxVRTtcbiAgICAgICAgdGhpcy5fcmVwZWF0Rm9yZXZlciA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn0pO1xuXG5jYy5hY3Rpb25JbnRlcnZhbCA9IGZ1bmN0aW9uIChkKSB7XG4gICAgcmV0dXJuIG5ldyBjYy5BY3Rpb25JbnRlcnZhbChkKTtcbn07XG5cbi8qKlxuICogQG1vZHVsZSBjY1xuICovXG5cbi8qXG4gKiBSdW5zIGFjdGlvbnMgc2VxdWVudGlhbGx5LCBvbmUgYWZ0ZXIgYW5vdGhlci5cbiAqIEBjbGFzcyBTZXF1ZW5jZVxuICogQGV4dGVuZHMgQWN0aW9uSW50ZXJ2YWxcbiAqIEBwYXJhbSB7QXJyYXl8RmluaXRlVGltZUFjdGlvbn0gdGVtcEFycmF5XG4gKiBAZXhhbXBsZVxuICogLy8gY3JlYXRlIHNlcXVlbmNlIHdpdGggYWN0aW9uc1xuICogdmFyIHNlcSA9IG5ldyBjYy5TZXF1ZW5jZShhY3QxLCBhY3QyKTtcbiAqXG4gKiAvLyBjcmVhdGUgc2VxdWVuY2Ugd2l0aCBhcnJheVxuICogdmFyIHNlcSA9IG5ldyBjYy5TZXF1ZW5jZShhY3RBcnJheSk7XG4gKi9cbmNjLlNlcXVlbmNlID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5TZXF1ZW5jZScsXG4gICAgZXh0ZW5kczogY2MuQWN0aW9uSW50ZXJ2YWwsXG5cbiAgICBjdG9yOmZ1bmN0aW9uICh0ZW1wQXJyYXkpIHtcbiAgICAgICAgdGhpcy5fYWN0aW9ucyA9IFtdO1xuICAgICAgICB0aGlzLl9zcGxpdCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2xhc3QgPSAwO1xuICAgICAgICB0aGlzLl9yZXZlcnNlZCA9IGZhbHNlO1xuXG4gICAgICAgIHZhciBwYXJhbUFycmF5ID0gKHRlbXBBcnJheSBpbnN0YW5jZW9mIEFycmF5KSA/IHRlbXBBcnJheSA6IGFyZ3VtZW50cztcbiAgICAgICAgaWYgKHBhcmFtQXJyYXkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBjYy5lcnJvcklEKDEwMTkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsYXN0ID0gcGFyYW1BcnJheS5sZW5ndGggLSAxO1xuICAgICAgICBpZiAoKGxhc3QgPj0gMCkgJiYgKHBhcmFtQXJyYXlbbGFzdF0gPT0gbnVsbCkpXG4gICAgICAgICAgICBjYy5sb2dJRCgxMDE1KTtcblxuICAgICAgICBpZiAobGFzdCA+PSAwKSB7XG4gICAgICAgICAgICB2YXIgcHJldiA9IHBhcmFtQXJyYXlbMF0sIGFjdGlvbjE7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGxhc3Q7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChwYXJhbUFycmF5W2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjEgPSBwcmV2O1xuICAgICAgICAgICAgICAgICAgICBwcmV2ID0gY2MuU2VxdWVuY2UuX2FjdGlvbk9uZVR3byhhY3Rpb24xLCBwYXJhbUFycmF5W2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmluaXRXaXRoVHdvQWN0aW9ucyhwcmV2LCBwYXJhbUFycmF5W2xhc3RdKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBhY3Rpb24gPGJyLz5cbiAgICAgKiBAcGFyYW0ge0Zpbml0ZVRpbWVBY3Rpb259IGFjdGlvbk9uZVxuICAgICAqIEBwYXJhbSB7RmluaXRlVGltZUFjdGlvbn0gYWN0aW9uVHdvXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpbml0V2l0aFR3b0FjdGlvbnM6ZnVuY3Rpb24gKGFjdGlvbk9uZSwgYWN0aW9uVHdvKSB7XG4gICAgICAgIGlmICghYWN0aW9uT25lIHx8ICFhY3Rpb25Ud28pIHtcbiAgICAgICAgICAgIGNjLmVycm9ySUQoMTAyNSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZHVyYXRpb25PbmUgPSBhY3Rpb25PbmUuX2R1cmF0aW9uLCBkdXJhdGlvblR3byA9IGFjdGlvblR3by5fZHVyYXRpb247XG4gICAgICAgIGR1cmF0aW9uT25lICo9IGFjdGlvbk9uZS5fcmVwZWF0TWV0aG9kID8gYWN0aW9uT25lLl90aW1lc0ZvclJlcGVhdCA6IDE7XG4gICAgICAgIGR1cmF0aW9uVHdvICo9IGFjdGlvblR3by5fcmVwZWF0TWV0aG9kID8gYWN0aW9uVHdvLl90aW1lc0ZvclJlcGVhdCA6IDE7XG4gICAgICAgIHZhciBkID0gZHVyYXRpb25PbmUgKyBkdXJhdGlvblR3bztcbiAgICAgICAgdGhpcy5pbml0V2l0aER1cmF0aW9uKGQpO1xuXG4gICAgICAgIHRoaXMuX2FjdGlvbnNbMF0gPSBhY3Rpb25PbmU7XG4gICAgICAgIHRoaXMuX2FjdGlvbnNbMV0gPSBhY3Rpb25Ud287XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICBjbG9uZTpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuU2VxdWVuY2UoKTtcbiAgICAgICAgdGhpcy5fY2xvbmVEZWNvcmF0aW9uKGFjdGlvbik7XG4gICAgICAgIGFjdGlvbi5pbml0V2l0aFR3b0FjdGlvbnModGhpcy5fYWN0aW9uc1swXS5jbG9uZSgpLCB0aGlzLl9hY3Rpb25zWzFdLmNsb25lKCkpO1xuICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG5cbiAgICBzdGFydFdpdGhUYXJnZXQ6ZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICBjYy5BY3Rpb25JbnRlcnZhbC5wcm90b3R5cGUuc3RhcnRXaXRoVGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcbiAgICAgICAgdGhpcy5fc3BsaXQgPSB0aGlzLl9hY3Rpb25zWzBdLl9kdXJhdGlvbiAvIHRoaXMuX2R1cmF0aW9uO1xuICAgICAgICB0aGlzLl9zcGxpdCAqPSB0aGlzLl9hY3Rpb25zWzBdLl9yZXBlYXRNZXRob2QgPyB0aGlzLl9hY3Rpb25zWzBdLl90aW1lc0ZvclJlcGVhdCA6IDE7XG4gICAgICAgIHRoaXMuX2xhc3QgPSAtMTtcbiAgICB9LFxuXG4gICAgc3RvcDpmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIElzc3VlICMxMzA1XG4gICAgICAgIGlmICh0aGlzLl9sYXN0ICE9PSAtMSlcbiAgICAgICAgICAgIHRoaXMuX2FjdGlvbnNbdGhpcy5fbGFzdF0uc3RvcCgpO1xuICAgICAgICBjYy5BY3Rpb24ucHJvdG90eXBlLnN0b3AuY2FsbCh0aGlzKTtcbiAgICB9LFxuXG4gICAgdXBkYXRlOmZ1bmN0aW9uIChkdCkge1xuICAgICAgICB2YXIgbmV3X3QsIGZvdW5kID0gMDtcbiAgICAgICAgdmFyIGxvY1NwbGl0ID0gdGhpcy5fc3BsaXQsIGxvY0FjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLCBsb2NMYXN0ID0gdGhpcy5fbGFzdCwgYWN0aW9uRm91bmQ7XG5cbiAgICAgICAgZHQgPSB0aGlzLl9jb21wdXRlRWFzZVRpbWUoZHQpO1xuICAgICAgICBpZiAoZHQgPCBsb2NTcGxpdCkge1xuICAgICAgICAgICAgLy8gYWN0aW9uWzBdXG4gICAgICAgICAgICBuZXdfdCA9IChsb2NTcGxpdCAhPT0gMCkgPyBkdCAvIGxvY1NwbGl0IDogMTtcblxuICAgICAgICAgICAgaWYgKGZvdW5kID09PSAwICYmIGxvY0xhc3QgPT09IDEgJiYgdGhpcy5fcmV2ZXJzZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBSZXZlcnNlIG1vZGUgP1xuICAgICAgICAgICAgICAgIC8vIFhYWDogQnVnLiB0aGlzIGNhc2UgZG9lc24ndCBjb250ZW1wbGF0ZSB3aGVuIF9sYXN0PT0tMSwgZm91bmQ9MCBhbmQgaW4gXCJyZXZlcnNlIG1vZGVcIlxuICAgICAgICAgICAgICAgIC8vIHNpbmNlIGl0IHdpbGwgcmVxdWlyZSBhIGhhY2sgdG8ga25vdyBpZiBhbiBhY3Rpb24gaXMgb24gcmV2ZXJzZSBtb2RlIG9yIG5vdC5cbiAgICAgICAgICAgICAgICAvLyBcInN0ZXBcIiBzaG91bGQgYmUgb3ZlcnJpZGVuLCBhbmQgdGhlIFwicmV2ZXJzZU1vZGVcIiB2YWx1ZSBwcm9wYWdhdGVkIHRvIGlubmVyIFNlcXVlbmNlcy5cbiAgICAgICAgICAgICAgICBsb2NBY3Rpb25zWzFdLnVwZGF0ZSgwKTtcbiAgICAgICAgICAgICAgICBsb2NBY3Rpb25zWzFdLnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGFjdGlvblsxXVxuICAgICAgICAgICAgZm91bmQgPSAxO1xuICAgICAgICAgICAgbmV3X3QgPSAobG9jU3BsaXQgPT09IDEpID8gMSA6IChkdCAtIGxvY1NwbGl0KSAvICgxIC0gbG9jU3BsaXQpO1xuXG4gICAgICAgICAgICBpZiAobG9jTGFzdCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyBhY3Rpb25bMF0gd2FzIHNraXBwZWQsIGV4ZWN1dGUgaXQuXG4gICAgICAgICAgICAgICAgbG9jQWN0aW9uc1swXS5zdGFydFdpdGhUYXJnZXQodGhpcy50YXJnZXQpO1xuICAgICAgICAgICAgICAgIGxvY0FjdGlvbnNbMF0udXBkYXRlKDEpO1xuICAgICAgICAgICAgICAgIGxvY0FjdGlvbnNbMF0uc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxvY0xhc3QgPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBzd2l0Y2hpbmcgdG8gYWN0aW9uIDEuIHN0b3AgYWN0aW9uIDAuXG4gICAgICAgICAgICAgICAgbG9jQWN0aW9uc1swXS51cGRhdGUoMSk7XG4gICAgICAgICAgICAgICAgbG9jQWN0aW9uc1swXS5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBhY3Rpb25Gb3VuZCA9IGxvY0FjdGlvbnNbZm91bmRdO1xuICAgICAgICAvLyBMYXN0IGFjdGlvbiBmb3VuZCBhbmQgaXQgaXMgZG9uZS5cbiAgICAgICAgaWYgKGxvY0xhc3QgPT09IGZvdW5kICYmIGFjdGlvbkZvdW5kLmlzRG9uZSgpKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIC8vIExhc3QgYWN0aW9uIG5vdCBmb3VuZFxuICAgICAgICBpZiAobG9jTGFzdCAhPT0gZm91bmQpXG4gICAgICAgICAgICBhY3Rpb25Gb3VuZC5zdGFydFdpdGhUYXJnZXQodGhpcy50YXJnZXQpO1xuXG4gICAgICAgIG5ld190ID0gbmV3X3QgKiBhY3Rpb25Gb3VuZC5fdGltZXNGb3JSZXBlYXQ7XG4gICAgICAgIGFjdGlvbkZvdW5kLnVwZGF0ZShuZXdfdCA+IDEgPyBuZXdfdCAlIDEgOiBuZXdfdCk7XG4gICAgICAgIHRoaXMuX2xhc3QgPSBmb3VuZDtcbiAgICB9LFxuXG4gICAgcmV2ZXJzZTpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBjYy5TZXF1ZW5jZS5fYWN0aW9uT25lVHdvKHRoaXMuX2FjdGlvbnNbMV0ucmV2ZXJzZSgpLCB0aGlzLl9hY3Rpb25zWzBdLnJldmVyc2UoKSk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICB0aGlzLl9yZXZlcnNlRWFzZUxpc3QoYWN0aW9uKTtcbiAgICAgICAgYWN0aW9uLl9yZXZlcnNlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfVxufSk7XG5cbi8qKlxuICogISNlblxuICogSGVscGVyIGNvbnN0cnVjdG9yIHRvIGNyZWF0ZSBhbiBhcnJheSBvZiBzZXF1ZW5jZWFibGUgYWN0aW9uc1xuICogVGhlIGNyZWF0ZWQgYWN0aW9uIHdpbGwgcnVuIGFjdGlvbnMgc2VxdWVudGlhbGx5LCBvbmUgYWZ0ZXIgYW5vdGhlci5cbiAqICEjemgg6aG65bqP5omn6KGM5Yqo5L2c77yM5Yib5bu655qE5Yqo5L2c5bCG5oyJ6aG65bqP5L6d5qyh6L+Q6KGM44CCXG4gKiBAbWV0aG9kIHNlcXVlbmNlXG4gKiBAcGFyYW0ge0Zpbml0ZVRpbWVBY3Rpb258RmluaXRlVGltZUFjdGlvbltdfSBhY3Rpb25PckFjdGlvbkFycmF5XG4gKiBAcGFyYW0ge0Zpbml0ZVRpbWVBY3Rpb259IC4uLnRlbXBBcnJheVxuICogQHJldHVybiB7QWN0aW9uSW50ZXJ2YWx9XG4gKiBAZXhhbXBsZVxuICogLy8gZXhhbXBsZVxuICogLy8gY3JlYXRlIHNlcXVlbmNlIHdpdGggYWN0aW9uc1xuICogdmFyIHNlcSA9IGNjLnNlcXVlbmNlKGFjdDEsIGFjdDIpO1xuICpcbiAqIC8vIGNyZWF0ZSBzZXF1ZW5jZSB3aXRoIGFycmF5XG4gKiB2YXIgc2VxID0gY2Muc2VxdWVuY2UoYWN0QXJyYXkpO1xuICovXG4vLyB0b2RvOiBJdCBzaG91bGQgYmUgdXNlIG5ld1xuY2Muc2VxdWVuY2UgPSBmdW5jdGlvbiAoLypNdWx0aXBsZSBBcmd1bWVudHMqL3RlbXBBcnJheSkge1xuICAgIHZhciBwYXJhbUFycmF5ID0gKHRlbXBBcnJheSBpbnN0YW5jZW9mIEFycmF5KSA/IHRlbXBBcnJheSA6IGFyZ3VtZW50cztcbiAgICBpZiAocGFyYW1BcnJheS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgY2MuZXJyb3JJRCgxMDE5KTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBsYXN0ID0gcGFyYW1BcnJheS5sZW5ndGggLSAxO1xuICAgIGlmICgobGFzdCA+PSAwKSAmJiAocGFyYW1BcnJheVtsYXN0XSA9PSBudWxsKSlcbiAgICAgICAgY2MubG9nSUQoMTAxNSk7XG5cbiAgICB2YXIgcmVzdWx0ID0gbnVsbDtcbiAgICBpZiAobGFzdCA+PSAwKSB7XG4gICAgICAgIHJlc3VsdCA9IHBhcmFtQXJyYXlbMF07XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IGxhc3Q7IGkrKykge1xuICAgICAgICAgICAgaWYgKHBhcmFtQXJyYXlbaV0pIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBjYy5TZXF1ZW5jZS5fYWN0aW9uT25lVHdvKHJlc3VsdCwgcGFyYW1BcnJheVtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuY2MuU2VxdWVuY2UuX2FjdGlvbk9uZVR3byA9IGZ1bmN0aW9uIChhY3Rpb25PbmUsIGFjdGlvblR3bykge1xuICAgIHZhciBzZXF1ZW5jZSA9IG5ldyBjYy5TZXF1ZW5jZSgpO1xuICAgIHNlcXVlbmNlLmluaXRXaXRoVHdvQWN0aW9ucyhhY3Rpb25PbmUsIGFjdGlvblR3byk7XG4gICAgcmV0dXJuIHNlcXVlbmNlO1xufTtcblxuLypcbiAqIFJlcGVhdHMgYW4gYWN0aW9uIGEgbnVtYmVyIG9mIHRpbWVzLlxuICogVG8gcmVwZWF0IGFuIGFjdGlvbiBmb3JldmVyIHVzZSB0aGUgQ0NSZXBlYXRGb3JldmVyIGFjdGlvbi5cbiAqIEBjbGFzcyBSZXBlYXRcbiAqIEBleHRlbmRzIEFjdGlvbkludGVydmFsXG4gKiBAcGFyYW0ge0Zpbml0ZVRpbWVBY3Rpb259IGFjdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IHRpbWVzXG4gKiBAZXhhbXBsZVxuICogdmFyIHJlcCA9IG5ldyBjYy5SZXBlYXQoY2Muc2VxdWVuY2UoanVtcDIsIGp1bXAxKSwgNSk7XG4gKi9cbmNjLlJlcGVhdCA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuUmVwZWF0JyxcbiAgICBleHRlbmRzOiBjYy5BY3Rpb25JbnRlcnZhbCxcblxuICAgIGN0b3I6IGZ1bmN0aW9uIChhY3Rpb24sIHRpbWVzKSB7XG4gICAgICAgIHRoaXMuX3RpbWVzID0gMDtcbiAgICAgICAgdGhpcy5fdG90YWwgPSAwO1xuICAgICAgICB0aGlzLl9uZXh0RHQgPSAwO1xuICAgICAgICB0aGlzLl9hY3Rpb25JbnN0YW50ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2lubmVyQWN0aW9uID0gbnVsbDtcblx0XHR0aW1lcyAhPT0gdW5kZWZpbmVkICYmIHRoaXMuaW5pdFdpdGhBY3Rpb24oYWN0aW9uLCB0aW1lcyk7XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogQHBhcmFtIHtGaW5pdGVUaW1lQWN0aW9ufSBhY3Rpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdGltZXNcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGluaXRXaXRoQWN0aW9uOmZ1bmN0aW9uIChhY3Rpb24sIHRpbWVzKSB7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IGFjdGlvbi5fZHVyYXRpb24gKiB0aW1lcztcblxuICAgICAgICBpZiAodGhpcy5pbml0V2l0aER1cmF0aW9uKGR1cmF0aW9uKSkge1xuICAgICAgICAgICAgdGhpcy5fdGltZXMgPSB0aW1lcztcbiAgICAgICAgICAgIHRoaXMuX2lubmVyQWN0aW9uID0gYWN0aW9uO1xuICAgICAgICAgICAgaWYgKGFjdGlvbiBpbnN0YW5jZW9mIGNjLkFjdGlvbkluc3RhbnQpe1xuICAgICAgICAgICAgICAgIHRoaXMuX2FjdGlvbkluc3RhbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuX3RpbWVzIC09IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl90b3RhbCA9IDA7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIGNsb25lOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5SZXBlYXQoKTtcbiAgICAgICAgdGhpcy5fY2xvbmVEZWNvcmF0aW9uKGFjdGlvbik7XG4gICAgICAgIGFjdGlvbi5pbml0V2l0aEFjdGlvbih0aGlzLl9pbm5lckFjdGlvbi5jbG9uZSgpLCB0aGlzLl90aW1lcyk7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIHN0YXJ0V2l0aFRhcmdldDpmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIHRoaXMuX3RvdGFsID0gMDtcbiAgICAgICAgdGhpcy5fbmV4dER0ID0gdGhpcy5faW5uZXJBY3Rpb24uX2R1cmF0aW9uIC8gdGhpcy5fZHVyYXRpb247XG4gICAgICAgIGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5zdGFydFdpdGhUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpO1xuICAgICAgICB0aGlzLl9pbm5lckFjdGlvbi5zdGFydFdpdGhUYXJnZXQodGFyZ2V0KTtcbiAgICB9LFxuXG4gICAgc3RvcDpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2lubmVyQWN0aW9uLnN0b3AoKTtcbiAgICAgICAgY2MuQWN0aW9uLnByb3RvdHlwZS5zdG9wLmNhbGwodGhpcyk7XG4gICAgfSxcblxuICAgIHVwZGF0ZTpmdW5jdGlvbiAoZHQpIHtcbiAgICAgICAgZHQgPSB0aGlzLl9jb21wdXRlRWFzZVRpbWUoZHQpO1xuICAgICAgICB2YXIgbG9jSW5uZXJBY3Rpb24gPSB0aGlzLl9pbm5lckFjdGlvbjtcbiAgICAgICAgdmFyIGxvY0R1cmF0aW9uID0gdGhpcy5fZHVyYXRpb247XG4gICAgICAgIHZhciBsb2NUaW1lcyA9IHRoaXMuX3RpbWVzO1xuICAgICAgICB2YXIgbG9jTmV4dER0ID0gdGhpcy5fbmV4dER0O1xuXG4gICAgICAgIGlmIChkdCA+PSBsb2NOZXh0RHQpIHtcbiAgICAgICAgICAgIHdoaWxlIChkdCA+IGxvY05leHREdCAmJiB0aGlzLl90b3RhbCA8IGxvY1RpbWVzKSB7XG4gICAgICAgICAgICAgICAgbG9jSW5uZXJBY3Rpb24udXBkYXRlKDEpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3RvdGFsKys7XG4gICAgICAgICAgICAgICAgbG9jSW5uZXJBY3Rpb24uc3RvcCgpO1xuICAgICAgICAgICAgICAgIGxvY0lubmVyQWN0aW9uLnN0YXJ0V2l0aFRhcmdldCh0aGlzLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgbG9jTmV4dER0ICs9IGxvY0lubmVyQWN0aW9uLl9kdXJhdGlvbiAvIGxvY0R1cmF0aW9uO1xuICAgICAgICAgICAgICAgIHRoaXMuX25leHREdCA9IGxvY05leHREdCA+IDEgPyAxIDogbG9jTmV4dER0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBmaXggZm9yIGlzc3VlICMxMjg4LCBpbmNvcnJlY3QgZW5kIHZhbHVlIG9mIHJlcGVhdFxuICAgICAgICAgICAgaWYgKGR0ID49IDEuMCAmJiB0aGlzLl90b3RhbCA8IGxvY1RpbWVzKSB7XG4gICAgICAgICAgICAgICAgLy8gZml4IGZvciBjb2Nvcy1jcmVhdG9yL2ZpcmViYWxsL2lzc3Vlcy80MzEwXG4gICAgICAgICAgICAgICAgbG9jSW5uZXJBY3Rpb24udXBkYXRlKDEpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3RvdGFsKys7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGRvbid0IHNldCBhIGluc3RhbnQgYWN0aW9uIGJhY2sgb3IgdXBkYXRlIGl0LCBpdCBoYXMgbm8gdXNlIGJlY2F1c2UgaXQgaGFzIG5vIGR1cmF0aW9uXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2FjdGlvbkluc3RhbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdG90YWwgPT09IGxvY1RpbWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY0lubmVyQWN0aW9uLnN0b3AoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBpc3N1ZSAjMzkwIHByZXZlbnQgamVyaywgdXNlIHJpZ2h0IHVwZGF0ZVxuICAgICAgICAgICAgICAgICAgICBsb2NJbm5lckFjdGlvbi51cGRhdGUoZHQgLSAobG9jTmV4dER0IC0gbG9jSW5uZXJBY3Rpb24uX2R1cmF0aW9uIC8gbG9jRHVyYXRpb24pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsb2NJbm5lckFjdGlvbi51cGRhdGUoKGR0ICogbG9jVGltZXMpICUgMS4wKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBpc0RvbmU6ZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdG90YWwgPT09IHRoaXMuX3RpbWVzO1xuICAgIH0sXG5cbiAgICByZXZlcnNlOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5SZXBlYXQodGhpcy5faW5uZXJBY3Rpb24ucmV2ZXJzZSgpLCB0aGlzLl90aW1lcyk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICB0aGlzLl9yZXZlcnNlRWFzZUxpc3QoYWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgLypcbiAgICAgKiBTZXQgaW5uZXIgQWN0aW9uLlxuICAgICAqIEBwYXJhbSB7RmluaXRlVGltZUFjdGlvbn0gYWN0aW9uXG4gICAgICovXG4gICAgc2V0SW5uZXJBY3Rpb246ZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICBpZiAodGhpcy5faW5uZXJBY3Rpb24gIT09IGFjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5faW5uZXJBY3Rpb24gPSBhY3Rpb247XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLypcbiAgICAgKiBHZXQgaW5uZXIgQWN0aW9uLlxuICAgICAqIEByZXR1cm4ge0Zpbml0ZVRpbWVBY3Rpb259XG4gICAgICovXG4gICAgZ2V0SW5uZXJBY3Rpb246ZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW5uZXJBY3Rpb247XG4gICAgfVxufSk7XG5cbi8qKlxuICogISNlbiBDcmVhdGVzIGEgUmVwZWF0IGFjdGlvbi4gVGltZXMgaXMgYW4gdW5zaWduZWQgaW50ZWdlciBiZXR3ZWVuIDEgYW5kIHBvdygyLDMwKVxuICogISN6aCDph43lpI3liqjkvZzvvIzlj6/ku6XmjInkuIDlrprmrKHmlbDph43lpI3kuIDkuKrliqjvvIzlpoLmnpzmg7PmsLjov5zph43lpI3kuIDkuKrliqjkvZzor7fkvb/nlKggcmVwZWF0Rm9yZXZlciDliqjkvZzmnaXlrozmiJDjgIJcbiAqIEBtZXRob2QgcmVwZWF0XG4gKiBAcGFyYW0ge0Zpbml0ZVRpbWVBY3Rpb259IGFjdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IHRpbWVzXG4gKiBAcmV0dXJuIHtBY3Rpb25JbnRlcnZhbH1cbiAqIEBleGFtcGxlXG4gKiAvLyBleGFtcGxlXG4gKiB2YXIgcmVwID0gY2MucmVwZWF0KGNjLnNlcXVlbmNlKGp1bXAyLCBqdW1wMSksIDUpO1xuICovXG5jYy5yZXBlYXQgPSBmdW5jdGlvbiAoYWN0aW9uLCB0aW1lcykge1xuICAgIHJldHVybiBuZXcgY2MuUmVwZWF0KGFjdGlvbiwgdGltZXMpO1xufTtcblxuXG4vKlxuICogUmVwZWF0cyBhbiBhY3Rpb24gZm9yIGV2ZXIuICA8YnIvPlxuICogVG8gcmVwZWF0IHRoZSBhbiBhY3Rpb24gZm9yIGEgbGltaXRlZCBudW1iZXIgb2YgdGltZXMgdXNlIHRoZSBSZXBlYXQgYWN0aW9uLiA8YnIvPlxuICogQHdhcm5pbmcgVGhpcyBhY3Rpb24gY2FuJ3QgYmUgU2VxdWVuY2VhYmxlIGJlY2F1c2UgaXQgaXMgbm90IGFuIEludGVydmFsQWN0aW9uXG4gKiBAY2xhc3MgUmVwZWF0Rm9yZXZlclxuICogQGV4dGVuZHMgQWN0aW9uSW50ZXJ2YWxcbiAqIEBwYXJhbSB7RmluaXRlVGltZUFjdGlvbn0gYWN0aW9uXG4gKiBAZXhhbXBsZVxuICogdmFyIHJlcCA9IG5ldyBjYy5SZXBlYXRGb3JldmVyKGNjLnNlcXVlbmNlKGp1bXAyLCBqdW1wMSksIDUpO1xuICovXG5jYy5SZXBlYXRGb3JldmVyID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5SZXBlYXRGb3JldmVyJyxcbiAgICBleHRlbmRzOiBjYy5BY3Rpb25JbnRlcnZhbCxcblxuICAgIGN0b3I6ZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICB0aGlzLl9pbm5lckFjdGlvbiA9IG51bGw7XG5cdFx0YWN0aW9uICYmIHRoaXMuaW5pdFdpdGhBY3Rpb24oYWN0aW9uKTtcbiAgICB9LFxuXG4gICAgLypcbiAgICAgKiBAcGFyYW0ge0FjdGlvbkludGVydmFsfSBhY3Rpb25cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGluaXRXaXRoQWN0aW9uOmZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKCFhY3Rpb24pIHtcbiAgICAgICAgICAgIGNjLmVycm9ySUQoMTAyNik7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9pbm5lckFjdGlvbiA9IGFjdGlvbjtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIGNsb25lOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5SZXBlYXRGb3JldmVyKCk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICBhY3Rpb24uaW5pdFdpdGhBY3Rpb24odGhpcy5faW5uZXJBY3Rpb24uY2xvbmUoKSk7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIHN0YXJ0V2l0aFRhcmdldDpmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5zdGFydFdpdGhUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpO1xuICAgICAgICB0aGlzLl9pbm5lckFjdGlvbi5zdGFydFdpdGhUYXJnZXQodGFyZ2V0KTtcbiAgICB9LFxuXG4gICAgc3RlcDpmdW5jdGlvbiAoZHQpIHtcbiAgICAgICAgdmFyIGxvY0lubmVyQWN0aW9uID0gdGhpcy5faW5uZXJBY3Rpb247XG4gICAgICAgIGxvY0lubmVyQWN0aW9uLnN0ZXAoZHQpO1xuICAgICAgICBpZiAobG9jSW5uZXJBY3Rpb24uaXNEb25lKCkpIHtcbiAgICAgICAgICAgIC8vdmFyIGRpZmYgPSBsb2NJbm5lckFjdGlvbi5nZXRFbGFwc2VkKCkgLSBsb2NJbm5lckFjdGlvbi5fZHVyYXRpb247XG4gICAgICAgICAgICBsb2NJbm5lckFjdGlvbi5zdGFydFdpdGhUYXJnZXQodGhpcy50YXJnZXQpO1xuICAgICAgICAgICAgLy8gdG8gcHJldmVudCBqZXJrLiBpc3N1ZSAjMzkwICwxMjQ3XG4gICAgICAgICAgICAvL3RoaXMuX2lubmVyQWN0aW9uLnN0ZXAoMCk7XG4gICAgICAgICAgICAvL3RoaXMuX2lubmVyQWN0aW9uLnN0ZXAoZGlmZik7XG4gICAgICAgICAgICBsb2NJbm5lckFjdGlvbi5zdGVwKGxvY0lubmVyQWN0aW9uLmdldEVsYXBzZWQoKSAtIGxvY0lubmVyQWN0aW9uLl9kdXJhdGlvbik7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgaXNEb25lOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICByZXZlcnNlOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5SZXBlYXRGb3JldmVyKHRoaXMuX2lubmVyQWN0aW9uLnJldmVyc2UoKSk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICB0aGlzLl9yZXZlcnNlRWFzZUxpc3QoYWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgLypcbiAgICAgKiBTZXQgaW5uZXIgYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7QWN0aW9uSW50ZXJ2YWx9IGFjdGlvblxuICAgICAqL1xuICAgIHNldElubmVyQWN0aW9uOmZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKHRoaXMuX2lubmVyQWN0aW9uICE9PSBhY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMuX2lubmVyQWN0aW9uID0gYWN0aW9uO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogR2V0IGlubmVyIGFjdGlvbi5cbiAgICAgKiBAcmV0dXJuIHtBY3Rpb25JbnRlcnZhbH1cbiAgICAgKi9cbiAgICBnZXRJbm5lckFjdGlvbjpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbm5lckFjdGlvbjtcbiAgICB9XG59KTtcblxuLyoqXG4gKiAhI2VuIENyZWF0ZSBhIGFjdG9uIHdoaWNoIHJlcGVhdCBmb3JldmVyLCBhcyBpdCBydW5zIGZvcmV2ZXIsIGl0IGNhbid0IGJlIGFkZGVkIGludG8gY2Muc2VxdWVuY2UgYW5kIGNjLnNwYXduLlxuICogISN6aCDmsLjov5zlnLDph43lpI3kuIDkuKrliqjkvZzvvIzmnInpmZDmrKHmlbDlhoXph43lpI3kuIDkuKrliqjkvZzor7fkvb/nlKggcmVwZWF0IOWKqOS9nO+8jOeUseS6jui/meS4quWKqOS9nOS4jeS8muWBnOatou+8jOaJgOS7peS4jeiDveiiq+a3u+WKoOWIsCBjYy5zZXF1ZW5jZSDmiJYgY2Muc3Bhd24g5Lit44CCXG4gKiBAbWV0aG9kIHJlcGVhdEZvcmV2ZXJcbiAqIEBwYXJhbSB7RmluaXRlVGltZUFjdGlvbn0gYWN0aW9uXG4gKiBAcmV0dXJuIHtBY3Rpb25JbnRlcnZhbH1cbiAqIEBleGFtcGxlXG4gKiAvLyBleGFtcGxlXG4gKiB2YXIgcmVwZWF0ID0gY2MucmVwZWF0Rm9yZXZlcihjYy5yb3RhdGVCeSgxLjAsIDM2MCkpO1xuICovXG5jYy5yZXBlYXRGb3JldmVyID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgIHJldHVybiBuZXcgY2MuUmVwZWF0Rm9yZXZlcihhY3Rpb24pO1xufTtcblxuXG4vKiBcbiAqIFNwYXduIGEgbmV3IGFjdGlvbiBpbW1lZGlhdGVseVxuICogQGNsYXNzIFNwYXduXG4gKiBAZXh0ZW5kcyBBY3Rpb25JbnRlcnZhbFxuICovXG5jYy5TcGF3biA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuU3Bhd24nLFxuICAgIGV4dGVuZHM6IGNjLkFjdGlvbkludGVydmFsLFxuXG4gICAgY3RvcjpmdW5jdGlvbiAodGVtcEFycmF5KSB7XG4gICAgICAgIHRoaXMuX29uZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3R3byA9IG51bGw7XG5cblx0XHR2YXIgcGFyYW1BcnJheSA9ICh0ZW1wQXJyYXkgaW5zdGFuY2VvZiBBcnJheSkgPyB0ZW1wQXJyYXkgOiBhcmd1bWVudHM7XG4gICAgICAgIGlmIChwYXJhbUFycmF5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgY2MuZXJyb3JJRCgxMDIwKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXHRcdHZhciBsYXN0ID0gcGFyYW1BcnJheS5sZW5ndGggLSAxO1xuXHRcdGlmICgobGFzdCA+PSAwKSAmJiAocGFyYW1BcnJheVtsYXN0XSA9PSBudWxsKSlcblx0XHRcdGNjLmxvZ0lEKDEwMTUpO1xuXG4gICAgICAgIGlmIChsYXN0ID49IDApIHtcbiAgICAgICAgICAgIHZhciBwcmV2ID0gcGFyYW1BcnJheVswXSwgYWN0aW9uMTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgbGFzdDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtQXJyYXlbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uMSA9IHByZXY7XG4gICAgICAgICAgICAgICAgICAgIHByZXYgPSBjYy5TcGF3bi5fYWN0aW9uT25lVHdvKGFjdGlvbjEsIHBhcmFtQXJyYXlbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaW5pdFdpdGhUd29BY3Rpb25zKHByZXYsIHBhcmFtQXJyYXlbbGFzdF0pO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qIGluaXRpYWxpemVzIHRoZSBTcGF3biBhY3Rpb24gd2l0aCB0aGUgMiBhY3Rpb25zIHRvIHNwYXduXG4gICAgICogQHBhcmFtIHtGaW5pdGVUaW1lQWN0aW9ufSBhY3Rpb24xXG4gICAgICogQHBhcmFtIHtGaW5pdGVUaW1lQWN0aW9ufSBhY3Rpb24yXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpbml0V2l0aFR3b0FjdGlvbnM6ZnVuY3Rpb24gKGFjdGlvbjEsIGFjdGlvbjIpIHtcbiAgICAgICAgaWYgKCFhY3Rpb24xIHx8ICFhY3Rpb24yKSB7XG4gICAgICAgICAgICBjYy5lcnJvcklEKDEwMjcpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJldCA9IGZhbHNlO1xuXG4gICAgICAgIHZhciBkMSA9IGFjdGlvbjEuX2R1cmF0aW9uO1xuICAgICAgICB2YXIgZDIgPSBhY3Rpb24yLl9kdXJhdGlvbjtcblxuICAgICAgICBpZiAodGhpcy5pbml0V2l0aER1cmF0aW9uKE1hdGgubWF4KGQxLCBkMikpKSB7XG4gICAgICAgICAgICB0aGlzLl9vbmUgPSBhY3Rpb24xO1xuICAgICAgICAgICAgdGhpcy5fdHdvID0gYWN0aW9uMjtcblxuICAgICAgICAgICAgaWYgKGQxID4gZDIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90d28gPSBjYy5TZXF1ZW5jZS5fYWN0aW9uT25lVHdvKGFjdGlvbjIsIGNjLmRlbGF5VGltZShkMSAtIGQyKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGQxIDwgZDIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbmUgPSBjYy5TZXF1ZW5jZS5fYWN0aW9uT25lVHdvKGFjdGlvbjEsIGNjLmRlbGF5VGltZShkMiAtIGQxKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9LFxuXG4gICAgY2xvbmU6ZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYWN0aW9uID0gbmV3IGNjLlNwYXduKCk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICBhY3Rpb24uaW5pdFdpdGhUd29BY3Rpb25zKHRoaXMuX29uZS5jbG9uZSgpLCB0aGlzLl90d28uY2xvbmUoKSk7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIHN0YXJ0V2l0aFRhcmdldDpmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5zdGFydFdpdGhUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpO1xuICAgICAgICB0aGlzLl9vbmUuc3RhcnRXaXRoVGFyZ2V0KHRhcmdldCk7XG4gICAgICAgIHRoaXMuX3R3by5zdGFydFdpdGhUYXJnZXQodGFyZ2V0KTtcbiAgICB9LFxuXG4gICAgc3RvcDpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX29uZS5zdG9wKCk7XG4gICAgICAgIHRoaXMuX3R3by5zdG9wKCk7XG4gICAgICAgIGNjLkFjdGlvbi5wcm90b3R5cGUuc3RvcC5jYWxsKHRoaXMpO1xuICAgIH0sXG5cbiAgICB1cGRhdGU6ZnVuY3Rpb24gKGR0KSB7XG4gICAgICAgIGR0ID0gdGhpcy5fY29tcHV0ZUVhc2VUaW1lKGR0KTtcbiAgICAgICAgaWYgKHRoaXMuX29uZSlcbiAgICAgICAgICAgIHRoaXMuX29uZS51cGRhdGUoZHQpO1xuICAgICAgICBpZiAodGhpcy5fdHdvKVxuICAgICAgICAgICAgdGhpcy5fdHdvLnVwZGF0ZShkdCk7XG4gICAgfSxcblxuICAgIHJldmVyc2U6ZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYWN0aW9uID0gY2MuU3Bhd24uX2FjdGlvbk9uZVR3byh0aGlzLl9vbmUucmV2ZXJzZSgpLCB0aGlzLl90d28ucmV2ZXJzZSgpKTtcbiAgICAgICAgdGhpcy5fY2xvbmVEZWNvcmF0aW9uKGFjdGlvbik7XG4gICAgICAgIHRoaXMuX3JldmVyc2VFYXNlTGlzdChhY3Rpb24pO1xuICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqICEjZW4gQ3JlYXRlIGEgc3Bhd24gYWN0aW9uIHdoaWNoIHJ1bnMgc2V2ZXJhbCBhY3Rpb25zIGluIHBhcmFsbGVsLlxuICogISN6aCDlkIzmraXmiafooYzliqjkvZzvvIzlkIzmraXmiafooYzkuIDnu4TliqjkvZzjgIJcbiAqIEBtZXRob2Qgc3Bhd25cbiAqIEBwYXJhbSB7RmluaXRlVGltZUFjdGlvbnxGaW5pdGVUaW1lQWN0aW9uW119IGFjdGlvbk9yQWN0aW9uQXJyYXlcbiAqIEBwYXJhbSB7RmluaXRlVGltZUFjdGlvbn0gLi4udGVtcEFycmF5XG4gKiBAcmV0dXJuIHtGaW5pdGVUaW1lQWN0aW9ufVxuICogQGV4YW1wbGVcbiAqIC8vIGV4YW1wbGVcbiAqIHZhciBhY3Rpb24gPSBjYy5zcGF3bihjYy5qdW1wQnkoMiwgY2MudjIoMzAwLCAwKSwgNTAsIDQpLCBjYy5yb3RhdGVCeSgyLCA3MjApKTtcbiAqIHRvZG86SXQgc2hvdWxkIGJlIHRoZSBkaXJlY3QgdXNlIG5ld1xuICovXG5jYy5zcGF3biA9IGZ1bmN0aW9uICgvKk11bHRpcGxlIEFyZ3VtZW50cyovdGVtcEFycmF5KSB7XG4gICAgdmFyIHBhcmFtQXJyYXkgPSAodGVtcEFycmF5IGluc3RhbmNlb2YgQXJyYXkpID8gdGVtcEFycmF5IDogYXJndW1lbnRzO1xuICAgIGlmIChwYXJhbUFycmF5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBjYy5lcnJvcklEKDEwMjApO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKChwYXJhbUFycmF5Lmxlbmd0aCA+IDApICYmIChwYXJhbUFycmF5W3BhcmFtQXJyYXkubGVuZ3RoIC0gMV0gPT0gbnVsbCkpXG4gICAgICAgIGNjLmxvZ0lEKDEwMTUpO1xuXG4gICAgdmFyIHByZXYgPSBwYXJhbUFycmF5WzBdO1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgcGFyYW1BcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAocGFyYW1BcnJheVtpXSAhPSBudWxsKVxuICAgICAgICAgICAgcHJldiA9IGNjLlNwYXduLl9hY3Rpb25PbmVUd28ocHJldiwgcGFyYW1BcnJheVtpXSk7XG4gICAgfVxuICAgIHJldHVybiBwcmV2O1xufTtcblxuY2MuU3Bhd24uX2FjdGlvbk9uZVR3byA9IGZ1bmN0aW9uIChhY3Rpb24xLCBhY3Rpb24yKSB7XG4gICAgdmFyIHBTcGF3biA9IG5ldyBjYy5TcGF3bigpO1xuICAgIHBTcGF3bi5pbml0V2l0aFR3b0FjdGlvbnMoYWN0aW9uMSwgYWN0aW9uMik7XG4gICAgcmV0dXJuIHBTcGF3bjtcbn07XG5cblxuLypcbiAqIFJvdGF0ZXMgYSBOb2RlIG9iamVjdCB0byBhIGNlcnRhaW4gYW5nbGUgYnkgbW9kaWZ5aW5nIGl0cyBhbmdsZSBwcm9wZXJ0eS4gPGJyLz5cbiAqIFRoZSBkaXJlY3Rpb24gd2lsbCBiZSBkZWNpZGVkIGJ5IHRoZSBzaG9ydGVzdCBhbmdsZS5cbiAqIEBjbGFzcyBSb3RhdGVUb1xuICogQGV4dGVuZHMgQWN0aW9uSW50ZXJ2YWxcbiAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvbiBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gKiBAcGFyYW0ge051bWJlcn0gZHN0QW5nbGUgZHN0QW5nbGUgaW4gZGVncmVlcy5cbiAqIEBleGFtcGxlXG4gKiB2YXIgcm90YXRlVG8gPSBuZXcgY2MuUm90YXRlVG8oMiwgNjEuMCk7XG4gKi9cbmNjLlJvdGF0ZVRvID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5Sb3RhdGVUbycsXG4gICAgZXh0ZW5kczogY2MuQWN0aW9uSW50ZXJ2YWwsXG5cbiAgICBjdG9yOmZ1bmN0aW9uIChkdXJhdGlvbiwgZHN0QW5nbGUpIHtcbiAgICAgICAgdGhpcy5fc3RhcnRBbmdsZSA9IDA7XG4gICAgICAgIHRoaXMuX2RzdEFuZ2xlID0gMDtcbiAgICAgICAgdGhpcy5fYW5nbGUgPSAwO1xuICAgICAgICBkc3RBbmdsZSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuaW5pdFdpdGhEdXJhdGlvbihkdXJhdGlvbiwgZHN0QW5nbGUpO1xuICAgIH0sXG5cbiAgICAvKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBhY3Rpb24uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGRzdEFuZ2xlXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpbml0V2l0aER1cmF0aW9uOmZ1bmN0aW9uIChkdXJhdGlvbiwgZHN0QW5nbGUpIHtcbiAgICAgICAgaWYgKGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5pbml0V2l0aER1cmF0aW9uLmNhbGwodGhpcywgZHVyYXRpb24pKSB7XG4gICAgICAgICAgICB0aGlzLl9kc3RBbmdsZSA9IGRzdEFuZ2xlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBjbG9uZTpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuUm90YXRlVG8oKTtcbiAgICAgICAgdGhpcy5fY2xvbmVEZWNvcmF0aW9uKGFjdGlvbik7XG4gICAgICAgIGFjdGlvbi5pbml0V2l0aER1cmF0aW9uKHRoaXMuX2R1cmF0aW9uLCB0aGlzLl9kc3RBbmdsZSk7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIHN0YXJ0V2l0aFRhcmdldDpmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5zdGFydFdpdGhUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpO1xuXG4gICAgICAgIGxldCBzdGFydEFuZ2xlID0gdGFyZ2V0LmFuZ2xlICUgMzYwO1xuXG4gICAgICAgIGxldCBhbmdsZSA9IGNjLm1hY3JvLlJPVEFURV9BQ1RJT05fQ0NXID8gKHRoaXMuX2RzdEFuZ2xlIC0gc3RhcnRBbmdsZSkgOiAoc3RhcnRBbmdsZSAtIHRoaXMuX2RzdEFuZ2xlKTtcbiAgICAgICAgaWYgKGFuZ2xlID4gMTgwKSBhbmdsZSAtPSAzNjA7XG4gICAgICAgIGlmIChhbmdsZSA8IC0xODApIGFuZ2xlICs9IDM2MDtcblxuICAgICAgICB0aGlzLl9zdGFydEFuZ2xlID0gc3RhcnRBbmdsZTtcbiAgICAgICAgdGhpcy5fYW5nbGUgPSBjYy5tYWNyby5ST1RBVEVfQUNUSU9OX0NDVyA/IGFuZ2xlIDogLWFuZ2xlO1xuICAgIH0sXG5cbiAgICByZXZlcnNlOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2MubG9nSUQoMTAxNik7XG4gICAgfSxcblxuICAgIHVwZGF0ZTpmdW5jdGlvbiAoZHQpIHtcbiAgICAgICAgZHQgPSB0aGlzLl9jb21wdXRlRWFzZVRpbWUoZHQpO1xuICAgICAgICBpZiAodGhpcy50YXJnZXQpIHtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0LmFuZ2xlID0gdGhpcy5fc3RhcnRBbmdsZSArIHRoaXMuX2FuZ2xlICogZHQ7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuLyoqXG4gKiAhI2VuXG4gKiBSb3RhdGVzIGEgTm9kZSBvYmplY3QgdG8gYSBjZXJ0YWluIGFuZ2xlIGJ5IG1vZGlmeWluZyBpdHMgYW5nbGUgcHJvcGVydHkuIDxici8+XG4gKiBUaGUgZGlyZWN0aW9uIHdpbGwgYmUgZGVjaWRlZCBieSB0aGUgc2hvcnRlc3QgYW5nbGUuXG4gKiAhI3poIOaXi+i9rOWIsOebruagh+inkuW6pu+8jOmAmui/h+mAkOW4p+S/ruaUueWug+eahCBhbmdsZSDlsZ7mgKfvvIzml4vovazmlrnlkJHlsIbnlLHmnIDnn63nmoTop5LluqblhrPlrprjgIJcbiAqIEBtZXRob2Qgcm90YXRlVG9cbiAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvbiBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gKiBAcGFyYW0ge051bWJlcn0gZHN0QW5nbGUgZHN0QW5nbGUgaW4gZGVncmVlcy5cbiAqIEByZXR1cm4ge0FjdGlvbkludGVydmFsfVxuICogQGV4YW1wbGVcbiAqIC8vIGV4YW1wbGVcbiAqIHZhciByb3RhdGVUbyA9IGNjLnJvdGF0ZVRvKDIsIDYxLjApO1xuICovXG5jYy5yb3RhdGVUbyA9IGZ1bmN0aW9uIChkdXJhdGlvbiwgZHN0QW5nbGUpIHtcbiAgICByZXR1cm4gbmV3IGNjLlJvdGF0ZVRvKGR1cmF0aW9uLCBkc3RBbmdsZSk7XG59O1xuXG5cbi8qXG4gKiBSb3RhdGVzIGEgTm9kZSBvYmplY3QgY2xvY2t3aXNlIGEgbnVtYmVyIG9mIGRlZ3JlZXMgYnkgbW9kaWZ5aW5nIGl0cyBhbmdsZSBwcm9wZXJ0eS5cbiAqIFJlbGF0aXZlIHRvIGl0cyBwcm9wZXJ0aWVzIHRvIG1vZGlmeS5cbiAqIEBjbGFzcyBSb3RhdGVCeVxuICogQGV4dGVuZHMgQWN0aW9uSW50ZXJ2YWxcbiAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvbiBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gKiBAcGFyYW0ge051bWJlcn0gZGVsdGFBbmdsZSBkZWx0YUFuZ2xlIGluIGRlZ3JlZXNcbiAqIEBleGFtcGxlXG4gKiB2YXIgYWN0aW9uQnkgPSBuZXcgY2MuUm90YXRlQnkoMiwgMzYwKTtcbiAqL1xuY2MuUm90YXRlQnkgPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLlJvdGF0ZUJ5JyxcbiAgICBleHRlbmRzOiBjYy5BY3Rpb25JbnRlcnZhbCxcblxuICAgIGN0b3I6IGZ1bmN0aW9uIChkdXJhdGlvbiwgZGVsdGFBbmdsZSkge1xuICAgICAgICBkZWx0YUFuZ2xlICo9IGNjLm1hY3JvLlJPVEFURV9BQ1RJT05fQ0NXID8gMSA6IC0xO1xuXG4gICAgICAgIHRoaXMuX2RlbHRhQW5nbGUgPSAwO1xuICAgICAgICB0aGlzLl9zdGFydEFuZ2xlID0gMDtcbiAgICAgICAgZGVsdGFBbmdsZSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuaW5pdFdpdGhEdXJhdGlvbihkdXJhdGlvbiwgZGVsdGFBbmdsZSk7XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIGFjdGlvbi5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb24gZHVyYXRpb24gaW4gc2Vjb25kc1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkZWx0YUFuZ2xlIGRlbHRhQW5nbGUgaW4gZGVncmVlc1xuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaW5pdFdpdGhEdXJhdGlvbjpmdW5jdGlvbiAoZHVyYXRpb24sIGRlbHRhQW5nbGUpIHtcbiAgICAgICAgaWYgKGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5pbml0V2l0aER1cmF0aW9uLmNhbGwodGhpcywgZHVyYXRpb24pKSB7XG4gICAgICAgICAgICB0aGlzLl9kZWx0YUFuZ2xlID0gZGVsdGFBbmdsZTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgY2xvbmU6ZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYWN0aW9uID0gbmV3IGNjLlJvdGF0ZUJ5KCk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICBhY3Rpb24uaW5pdFdpdGhEdXJhdGlvbih0aGlzLl9kdXJhdGlvbiwgdGhpcy5fZGVsdGFBbmdsZSk7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIHN0YXJ0V2l0aFRhcmdldDpmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5zdGFydFdpdGhUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpO1xuICAgICAgICB0aGlzLl9zdGFydEFuZ2xlID0gdGFyZ2V0LmFuZ2xlO1xuICAgIH0sXG5cbiAgICB1cGRhdGU6ZnVuY3Rpb24gKGR0KSB7XG4gICAgICAgIGR0ID0gdGhpcy5fY29tcHV0ZUVhc2VUaW1lKGR0KTtcbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0KSB7XG4gICAgICAgICAgICB0aGlzLnRhcmdldC5hbmdsZSA9IHRoaXMuX3N0YXJ0QW5nbGUgKyB0aGlzLl9kZWx0YUFuZ2xlICogZHQ7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmV2ZXJzZTpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuUm90YXRlQnkoKTtcbiAgICAgICAgYWN0aW9uLmluaXRXaXRoRHVyYXRpb24odGhpcy5fZHVyYXRpb24sIC10aGlzLl9kZWx0YUFuZ2xlKTtcbiAgICAgICAgdGhpcy5fY2xvbmVEZWNvcmF0aW9uKGFjdGlvbik7XG4gICAgICAgIHRoaXMuX3JldmVyc2VFYXNlTGlzdChhY3Rpb24pO1xuICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqICEjZW5cbiAqIFJvdGF0ZXMgYSBOb2RlIG9iamVjdCBjbG9ja3dpc2UgYSBudW1iZXIgb2YgZGVncmVlcyBieSBtb2RpZnlpbmcgaXRzIGFuZ2xlIHByb3BlcnR5LlxuICogUmVsYXRpdmUgdG8gaXRzIHByb3BlcnRpZXMgdG8gbW9kaWZ5LlxuICogISN6aCDml4vovazmjIflrprnmoTop5LluqbjgIJcbiAqIEBtZXRob2Qgcm90YXRlQnlcbiAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvbiBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gKiBAcGFyYW0ge051bWJlcn0gZGVsdGFBbmdsZSBkZWx0YUFuZ2xlIGluIGRlZ3JlZXNcbiAqIEByZXR1cm4ge0FjdGlvbkludGVydmFsfVxuICogQGV4YW1wbGVcbiAqIC8vIGV4YW1wbGVcbiAqIHZhciBhY3Rpb25CeSA9IGNjLnJvdGF0ZUJ5KDIsIDM2MCk7XG4gKi9cbmNjLnJvdGF0ZUJ5ID0gZnVuY3Rpb24gKGR1cmF0aW9uLCBkZWx0YUFuZ2xlKSB7XG4gICAgcmV0dXJuIG5ldyBjYy5Sb3RhdGVCeShkdXJhdGlvbiwgZGVsdGFBbmdsZSk7XG59O1xuXG5cbi8qXG4gKiA8cD5cbiAqIE1vdmVzIGEgTm9kZSBvYmplY3QgeCx5IHBpeGVscyBieSBtb2RpZnlpbmcgaXRzIHBvc2l0aW9uIHByb3BlcnR5LiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIvPlxuICogeCBhbmQgeSBhcmUgcmVsYXRpdmUgdG8gdGhlIHBvc2l0aW9uIG9mIHRoZSBvYmplY3QuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIvPlxuICogU2V2ZXJhbCBNb3ZlQnkgYWN0aW9ucyBjYW4gYmUgY29uY3VycmVudGx5IGNhbGxlZCwgYW5kIHRoZSByZXN1bHRpbmcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyLz5cbiAqIG1vdmVtZW50IHdpbGwgYmUgdGhlIHN1bSBvZiBpbmRpdmlkdWFsIG1vdmVtZW50cy5cbiAqIDwvcD5cbiAqIEBjbGFzcyBNb3ZlQnlcbiAqIEBleHRlbmRzIEFjdGlvbkludGVydmFsXG4gKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb24gZHVyYXRpb24gaW4gc2Vjb25kc1xuICogQHBhcmFtIHtWZWMyfE51bWJlcn0gZGVsdGFQb3NcbiAqIEBwYXJhbSB7TnVtYmVyfSBbZGVsdGFZXVxuICogQGV4YW1wbGVcbiAqIHZhciBhY3Rpb25UbyA9IGNjLm1vdmVCeSgyLCBjYy52Mih3aW5kb3dTaXplLndpZHRoIC0gNDAsIHdpbmRvd1NpemUuaGVpZ2h0IC0gNDApKTtcbiAqL1xuY2MuTW92ZUJ5ID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5Nb3ZlQnknLFxuICAgIGV4dGVuZHM6IGNjLkFjdGlvbkludGVydmFsLFxuXG4gICAgY3RvcjpmdW5jdGlvbiAoZHVyYXRpb24sIGRlbHRhUG9zLCBkZWx0YVkpIHtcbiAgICAgICAgdGhpcy5fcG9zaXRpb25EZWx0YSA9IGNjLnYyKDAsIDApO1xuICAgICAgICB0aGlzLl9zdGFydFBvc2l0aW9uID0gY2MudjIoMCwgMCk7XG4gICAgICAgIHRoaXMuX3ByZXZpb3VzUG9zaXRpb24gPSBjYy52MigwLCAwKTtcblxuICAgICAgICBkZWx0YVBvcyAhPT0gdW5kZWZpbmVkICYmIGNjLk1vdmVCeS5wcm90b3R5cGUuaW5pdFdpdGhEdXJhdGlvbi5jYWxsKHRoaXMsIGR1cmF0aW9uLCBkZWx0YVBvcywgZGVsdGFZKTtcdFxuICAgIH0sXG5cbiAgICAvKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBhY3Rpb24uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uIGR1cmF0aW9uIGluIHNlY29uZHNcbiAgICAgKiBAcGFyYW0ge1ZlYzJ9IHBvc2l0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFt5XVxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaW5pdFdpdGhEdXJhdGlvbjpmdW5jdGlvbiAoZHVyYXRpb24sIHBvc2l0aW9uLCB5KSB7XG4gICAgICAgIGlmIChjYy5BY3Rpb25JbnRlcnZhbC5wcm90b3R5cGUuaW5pdFdpdGhEdXJhdGlvbi5jYWxsKHRoaXMsIGR1cmF0aW9uKSkge1xuXHQgICAgICAgIGlmKHBvc2l0aW9uLnggIT09IHVuZGVmaW5lZCkge1xuXHRcdCAgICAgICAgeSA9IHBvc2l0aW9uLnk7XG5cdFx0ICAgICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uLng7XG5cdCAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9wb3NpdGlvbkRlbHRhLnggPSBwb3NpdGlvbjtcbiAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uRGVsdGEueSA9IHk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIGNsb25lOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5Nb3ZlQnkoKTtcbiAgICAgICAgdGhpcy5fY2xvbmVEZWNvcmF0aW9uKGFjdGlvbik7XG4gICAgICAgIGFjdGlvbi5pbml0V2l0aER1cmF0aW9uKHRoaXMuX2R1cmF0aW9uLCB0aGlzLl9wb3NpdGlvbkRlbHRhKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgc3RhcnRXaXRoVGFyZ2V0OmZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgY2MuQWN0aW9uSW50ZXJ2YWwucHJvdG90eXBlLnN0YXJ0V2l0aFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCk7XG4gICAgICAgIHZhciBsb2NQb3NYID0gdGFyZ2V0Lng7XG4gICAgICAgIHZhciBsb2NQb3NZID0gdGFyZ2V0Lnk7XG4gICAgICAgIHRoaXMuX3ByZXZpb3VzUG9zaXRpb24ueCA9IGxvY1Bvc1g7XG4gICAgICAgIHRoaXMuX3ByZXZpb3VzUG9zaXRpb24ueSA9IGxvY1Bvc1k7XG4gICAgICAgIHRoaXMuX3N0YXJ0UG9zaXRpb24ueCA9IGxvY1Bvc1g7XG4gICAgICAgIHRoaXMuX3N0YXJ0UG9zaXRpb24ueSA9IGxvY1Bvc1k7XG4gICAgfSxcblxuICAgIHVwZGF0ZTpmdW5jdGlvbiAoZHQpIHtcbiAgICAgICAgZHQgPSB0aGlzLl9jb21wdXRlRWFzZVRpbWUoZHQpO1xuICAgICAgICBpZiAodGhpcy50YXJnZXQpIHtcbiAgICAgICAgICAgIHZhciB4ID0gdGhpcy5fcG9zaXRpb25EZWx0YS54ICogZHQ7XG4gICAgICAgICAgICB2YXIgeSA9IHRoaXMuX3Bvc2l0aW9uRGVsdGEueSAqIGR0O1xuICAgICAgICAgICAgdmFyIGxvY1N0YXJ0UG9zaXRpb24gPSB0aGlzLl9zdGFydFBvc2l0aW9uO1xuICAgICAgICAgICAgaWYgKGNjLm1hY3JvLkVOQUJMRV9TVEFDS0FCTEVfQUNUSU9OUykge1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXRYID0gdGhpcy50YXJnZXQueDtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0WSA9IHRoaXMudGFyZ2V0Lnk7XG4gICAgICAgICAgICAgICAgdmFyIGxvY1ByZXZpb3VzUG9zaXRpb24gPSB0aGlzLl9wcmV2aW91c1Bvc2l0aW9uO1xuXG4gICAgICAgICAgICAgICAgbG9jU3RhcnRQb3NpdGlvbi54ID0gbG9jU3RhcnRQb3NpdGlvbi54ICsgdGFyZ2V0WCAtIGxvY1ByZXZpb3VzUG9zaXRpb24ueDtcbiAgICAgICAgICAgICAgICBsb2NTdGFydFBvc2l0aW9uLnkgPSBsb2NTdGFydFBvc2l0aW9uLnkgKyB0YXJnZXRZIC0gbG9jUHJldmlvdXNQb3NpdGlvbi55O1xuICAgICAgICAgICAgICAgIHggPSB4ICsgbG9jU3RhcnRQb3NpdGlvbi54O1xuICAgICAgICAgICAgICAgIHkgPSB5ICsgbG9jU3RhcnRQb3NpdGlvbi55O1xuXHQgICAgICAgICAgICBsb2NQcmV2aW91c1Bvc2l0aW9uLnggPSB4O1xuXHQgICAgICAgICAgICBsb2NQcmV2aW91c1Bvc2l0aW9uLnkgPSB5O1xuXHQgICAgICAgICAgICB0aGlzLnRhcmdldC5zZXRQb3NpdGlvbih4LCB5KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXQuc2V0UG9zaXRpb24obG9jU3RhcnRQb3NpdGlvbi54ICsgeCwgbG9jU3RhcnRQb3NpdGlvbi55ICsgeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmV2ZXJzZTpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuTW92ZUJ5KHRoaXMuX2R1cmF0aW9uLCBjYy52MigtdGhpcy5fcG9zaXRpb25EZWx0YS54LCAtdGhpcy5fcG9zaXRpb25EZWx0YS55KSk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICB0aGlzLl9yZXZlcnNlRWFzZUxpc3QoYWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9XG59KTtcblxuLyoqXG4gKiAhI2VuXG4gKiBNb3ZlcyBhIE5vZGUgb2JqZWN0IHgseSBwaXhlbHMgYnkgbW9kaWZ5aW5nIGl0cyBwb3NpdGlvbiBwcm9wZXJ0eS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyLz5cbiAqIHggYW5kIHkgYXJlIHJlbGF0aXZlIHRvIHRoZSBwb3NpdGlvbiBvZiB0aGUgb2JqZWN0LiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyLz5cbiAqIFNldmVyYWwgTW92ZUJ5IGFjdGlvbnMgY2FuIGJlIGNvbmN1cnJlbnRseSBjYWxsZWQsIGFuZCB0aGUgcmVzdWx0aW5nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxici8+XG4gKiBtb3ZlbWVudCB3aWxsIGJlIHRoZSBzdW0gb2YgaW5kaXZpZHVhbCBtb3ZlbWVudHMuXG4gKiAhI3poIOenu+WKqOaMh+WumueahOi3neemu+OAglxuICogQG1ldGhvZCBtb3ZlQnlcbiAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvbiBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gKiBAcGFyYW0ge1ZlYzJ8TnVtYmVyfSBkZWx0YVBvc1xuICogQHBhcmFtIHtOdW1iZXJ9IFtkZWx0YVldXG4gKiBAcmV0dXJuIHtBY3Rpb25JbnRlcnZhbH1cbiAqIEBleGFtcGxlXG4gKiAvLyBleGFtcGxlXG4gKiB2YXIgYWN0aW9uVG8gPSBjYy5tb3ZlQnkoMiwgY2MudjIod2luZG93U2l6ZS53aWR0aCAtIDQwLCB3aW5kb3dTaXplLmhlaWdodCAtIDQwKSk7XG4gKi9cbmNjLm1vdmVCeSA9IGZ1bmN0aW9uIChkdXJhdGlvbiwgZGVsdGFQb3MsIGRlbHRhWSkge1xuICAgIHJldHVybiBuZXcgY2MuTW92ZUJ5KGR1cmF0aW9uLCBkZWx0YVBvcywgZGVsdGFZKTtcbn07XG5cblxuLypcbiAqIE1vdmVzIGEgTm9kZSBvYmplY3QgdG8gdGhlIHBvc2l0aW9uIHgseS4geCBhbmQgeSBhcmUgYWJzb2x1dGUgY29vcmRpbmF0ZXMgYnkgbW9kaWZ5aW5nIGl0cyBwb3NpdGlvbiBwcm9wZXJ0eS4gPGJyLz5cbiAqIFNldmVyYWwgTW92ZVRvIGFjdGlvbnMgY2FuIGJlIGNvbmN1cnJlbnRseSBjYWxsZWQsIGFuZCB0aGUgcmVzdWx0aW5nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIvPlxuICogbW92ZW1lbnQgd2lsbCBiZSB0aGUgc3VtIG9mIGluZGl2aWR1YWwgbW92ZW1lbnRzLlxuICogQGNsYXNzIE1vdmVUb1xuICogQGV4dGVuZHMgTW92ZUJ5XG4gKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb24gZHVyYXRpb24gaW4gc2Vjb25kc1xuICogQHBhcmFtIHtWZWMyfE51bWJlcn0gcG9zaXRpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSBbeV1cbiAqIEBleGFtcGxlXG4gKiB2YXIgYWN0aW9uQnkgPSBuZXcgY2MuTW92ZVRvKDIsIGNjLnYyKDgwLCA4MCkpO1xuICovXG5jYy5Nb3ZlVG8gPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLk1vdmVUbycsXG4gICAgZXh0ZW5kczogY2MuTW92ZUJ5LFxuXG4gICAgY3RvcjpmdW5jdGlvbiAoZHVyYXRpb24sIHBvc2l0aW9uLCB5KSB7XG4gICAgICAgIHRoaXMuX2VuZFBvc2l0aW9uID0gY2MudjIoMCwgMCk7XG5cdFx0cG9zaXRpb24gIT09IHVuZGVmaW5lZCAmJiB0aGlzLmluaXRXaXRoRHVyYXRpb24oZHVyYXRpb24sIHBvc2l0aW9uLCB5KTtcbiAgICB9LFxuXG4gICAgLypcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvbiAgZHVyYXRpb24gaW4gc2Vjb25kc1xuICAgICAqIEBwYXJhbSB7VmVjMn0gcG9zaXRpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3ldXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpbml0V2l0aER1cmF0aW9uOmZ1bmN0aW9uIChkdXJhdGlvbiwgcG9zaXRpb24sIHkpIHtcbiAgICAgICAgaWYgKGNjLk1vdmVCeS5wcm90b3R5cGUuaW5pdFdpdGhEdXJhdGlvbi5jYWxsKHRoaXMsIGR1cmF0aW9uLCBwb3NpdGlvbiwgeSkpIHtcblx0ICAgICAgICBpZihwb3NpdGlvbi54ICE9PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgIHkgPSBwb3NpdGlvbi55O1xuXHRcdCAgICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbi54O1xuXHQgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fZW5kUG9zaXRpb24ueCA9IHBvc2l0aW9uO1xuICAgICAgICAgICAgdGhpcy5fZW5kUG9zaXRpb24ueSA9IHk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIGNsb25lOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5Nb3ZlVG8oKTtcbiAgICAgICAgdGhpcy5fY2xvbmVEZWNvcmF0aW9uKGFjdGlvbik7XG4gICAgICAgIGFjdGlvbi5pbml0V2l0aER1cmF0aW9uKHRoaXMuX2R1cmF0aW9uLCB0aGlzLl9lbmRQb3NpdGlvbik7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIHN0YXJ0V2l0aFRhcmdldDpmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIGNjLk1vdmVCeS5wcm90b3R5cGUuc3RhcnRXaXRoVGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcbiAgICAgICAgdGhpcy5fcG9zaXRpb25EZWx0YS54ID0gdGhpcy5fZW5kUG9zaXRpb24ueCAtIHRhcmdldC54O1xuICAgICAgICB0aGlzLl9wb3NpdGlvbkRlbHRhLnkgPSB0aGlzLl9lbmRQb3NpdGlvbi55IC0gdGFyZ2V0Lnk7XG4gICAgfVxufSk7XG5cbi8qKlxuICogISNlblxuICogTW92ZXMgYSBOb2RlIG9iamVjdCB0byB0aGUgcG9zaXRpb24geCx5LiB4IGFuZCB5IGFyZSBhYnNvbHV0ZSBjb29yZGluYXRlcyBieSBtb2RpZnlpbmcgaXRzIHBvc2l0aW9uIHByb3BlcnR5LiA8YnIvPlxuICogU2V2ZXJhbCBNb3ZlVG8gYWN0aW9ucyBjYW4gYmUgY29uY3VycmVudGx5IGNhbGxlZCwgYW5kIHRoZSByZXN1bHRpbmcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxici8+XG4gKiBtb3ZlbWVudCB3aWxsIGJlIHRoZSBzdW0gb2YgaW5kaXZpZHVhbCBtb3ZlbWVudHMuXG4gKiAhI3poIOenu+WKqOWIsOebruagh+S9jee9ruOAglxuICogQG1ldGhvZCBtb3ZlVG9cbiAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvbiBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gKiBAcGFyYW0ge1ZlYzJ8TnVtYmVyfSBwb3NpdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IFt5XVxuICogQHJldHVybiB7QWN0aW9uSW50ZXJ2YWx9XG4gKiBAZXhhbXBsZVxuICogLy8gZXhhbXBsZVxuICogdmFyIGFjdGlvbkJ5ID0gY2MubW92ZVRvKDIsIGNjLnYyKDgwLCA4MCkpO1xuICovXG5jYy5tb3ZlVG8gPSBmdW5jdGlvbiAoZHVyYXRpb24sIHBvc2l0aW9uLCB5KSB7XG4gICAgcmV0dXJuIG5ldyBjYy5Nb3ZlVG8oZHVyYXRpb24sIHBvc2l0aW9uLCB5KTtcbn07XG5cbi8qXG4gKiBTa2V3cyBhIE5vZGUgb2JqZWN0IHRvIGdpdmVuIGFuZ2xlcyBieSBtb2RpZnlpbmcgaXRzIHNrZXdYIGFuZCBza2V3WSBwcm9wZXJ0aWVzXG4gKiBAY2xhc3MgU2tld1RvXG4gKiBAZXh0ZW5kcyBBY3Rpb25JbnRlcnZhbFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgdGltZSBpbiBzZWNvbmRzXG4gKiBAcGFyYW0ge051bWJlcn0gc3hcbiAqIEBwYXJhbSB7TnVtYmVyfSBzeVxuICogQGV4YW1wbGVcbiAqIHZhciBhY3Rpb25UbyA9IG5ldyBjYy5Ta2V3VG8oMiwgMzcuMiwgLTM3LjIpO1xuICovXG5jYy5Ta2V3VG8gPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLlNrZXdUbycsXG4gICAgZXh0ZW5kczogY2MuQWN0aW9uSW50ZXJ2YWwsXG5cbiAgICBjdG9yOiBmdW5jdGlvbiAodCwgc3gsIHN5KSB7XG4gICAgICAgIHRoaXMuX3NrZXdYID0gMDtcbiAgICAgICAgdGhpcy5fc2tld1kgPSAwO1xuICAgICAgICB0aGlzLl9zdGFydFNrZXdYID0gMDtcbiAgICAgICAgdGhpcy5fc3RhcnRTa2V3WSA9IDA7XG4gICAgICAgIHRoaXMuX2VuZFNrZXdYID0gMDtcbiAgICAgICAgdGhpcy5fZW5kU2tld1kgPSAwO1xuICAgICAgICB0aGlzLl9kZWx0YVggPSAwO1xuICAgICAgICB0aGlzLl9kZWx0YVkgPSAwO1xuICAgICAgICBzeSAhPT0gdW5kZWZpbmVkICYmIGNjLlNrZXdUby5wcm90b3R5cGUuaW5pdFdpdGhEdXJhdGlvbi5jYWxsKHRoaXMsIHQsIHN4LCBzeSk7XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIGFjdGlvbi5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdCB0aW1lIGluIHNlY29uZHNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc3hcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc3lcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGluaXRXaXRoRHVyYXRpb246ZnVuY3Rpb24gKHQsIHN4LCBzeSkge1xuICAgICAgICB2YXIgcmV0ID0gZmFsc2U7XG4gICAgICAgIGlmIChjYy5BY3Rpb25JbnRlcnZhbC5wcm90b3R5cGUuaW5pdFdpdGhEdXJhdGlvbi5jYWxsKHRoaXMsIHQpKSB7XG4gICAgICAgICAgICB0aGlzLl9lbmRTa2V3WCA9IHN4O1xuICAgICAgICAgICAgdGhpcy5fZW5kU2tld1kgPSBzeTtcbiAgICAgICAgICAgIHJldCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9LFxuXG4gICAgY2xvbmU6ZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYWN0aW9uID0gbmV3IGNjLlNrZXdUbygpO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgYWN0aW9uLmluaXRXaXRoRHVyYXRpb24odGhpcy5fZHVyYXRpb24sIHRoaXMuX2VuZFNrZXdYLCB0aGlzLl9lbmRTa2V3WSk7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIHN0YXJ0V2l0aFRhcmdldDpmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5zdGFydFdpdGhUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpO1xuXG4gICAgICAgIHRoaXMuX3N0YXJ0U2tld1ggPSB0YXJnZXQuc2tld1ggJSAxODA7XG4gICAgICAgIHRoaXMuX2RlbHRhWCA9IHRoaXMuX2VuZFNrZXdYIC0gdGhpcy5fc3RhcnRTa2V3WDtcbiAgICAgICAgaWYgKHRoaXMuX2RlbHRhWCA+IDE4MClcbiAgICAgICAgICAgIHRoaXMuX2RlbHRhWCAtPSAzNjA7XG4gICAgICAgIGlmICh0aGlzLl9kZWx0YVggPCAtMTgwKVxuICAgICAgICAgICAgdGhpcy5fZGVsdGFYICs9IDM2MDtcblxuICAgICAgICB0aGlzLl9zdGFydFNrZXdZID0gdGFyZ2V0LnNrZXdZICUgMzYwO1xuICAgICAgICB0aGlzLl9kZWx0YVkgPSB0aGlzLl9lbmRTa2V3WSAtIHRoaXMuX3N0YXJ0U2tld1k7XG4gICAgICAgIGlmICh0aGlzLl9kZWx0YVkgPiAxODApXG4gICAgICAgICAgICB0aGlzLl9kZWx0YVkgLT0gMzYwO1xuICAgICAgICBpZiAodGhpcy5fZGVsdGFZIDwgLTE4MClcbiAgICAgICAgICAgIHRoaXMuX2RlbHRhWSArPSAzNjA7XG4gICAgfSxcblxuICAgIHVwZGF0ZTpmdW5jdGlvbiAoZHQpIHtcbiAgICAgICAgZHQgPSB0aGlzLl9jb21wdXRlRWFzZVRpbWUoZHQpO1xuICAgICAgICB0aGlzLnRhcmdldC5za2V3WCA9IHRoaXMuX3N0YXJ0U2tld1ggKyB0aGlzLl9kZWx0YVggKiBkdDtcbiAgICAgICAgdGhpcy50YXJnZXQuc2tld1kgPSB0aGlzLl9zdGFydFNrZXdZICsgdGhpcy5fZGVsdGFZICogZHQ7XG4gICAgfVxufSk7XG5cbi8qKlxuICogISNlblxuICogQ3JlYXRlIGEgYWN0aW9uIHdoaWNoIHNrZXdzIGEgTm9kZSBvYmplY3QgdG8gZ2l2ZW4gYW5nbGVzIGJ5IG1vZGlmeWluZyBpdHMgc2tld1ggYW5kIHNrZXdZIHByb3BlcnRpZXMuXG4gKiBDaGFuZ2VzIHRvIHRoZSBzcGVjaWZpZWQgdmFsdWUuXG4gKiAhI3poIOWBj+aWnOWIsOebruagh+inkuW6puOAglxuICogQG1ldGhvZCBza2V3VG9cbiAqIEBwYXJhbSB7TnVtYmVyfSB0IHRpbWUgaW4gc2Vjb25kc1xuICogQHBhcmFtIHtOdW1iZXJ9IHN4XG4gKiBAcGFyYW0ge051bWJlcn0gc3lcbiAqIEByZXR1cm4ge0FjdGlvbkludGVydmFsfVxuICogQGV4YW1wbGVcbiAqIC8vIGV4YW1wbGVcbiAqIHZhciBhY3Rpb25UbyA9IGNjLnNrZXdUbygyLCAzNy4yLCAtMzcuMik7XG4gKi9cbmNjLnNrZXdUbyA9IGZ1bmN0aW9uICh0LCBzeCwgc3kpIHtcbiAgICByZXR1cm4gbmV3IGNjLlNrZXdUbyh0LCBzeCwgc3kpO1xufTtcblxuLypcbiAqIFNrZXdzIGEgTm9kZSBvYmplY3QgYnkgc2tld1ggYW5kIHNrZXdZIGRlZ3JlZXMuXG4gKiBSZWxhdGl2ZSB0byBpdHMgcHJvcGVydHkgbW9kaWZpY2F0aW9uLlxuICogQGNsYXNzIFNrZXdCeVxuICogQGV4dGVuZHMgU2tld1RvXG4gKiBAcGFyYW0ge051bWJlcn0gdCB0aW1lIGluIHNlY29uZHNcbiAqIEBwYXJhbSB7TnVtYmVyfSBzeCAgc2tldyBpbiBkZWdyZWVzIGZvciBYIGF4aXNcbiAqIEBwYXJhbSB7TnVtYmVyfSBzeSAgc2tldyBpbiBkZWdyZWVzIGZvciBZIGF4aXNcbiAqL1xuY2MuU2tld0J5ID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5Ta2V3QnknLFxuICAgIGV4dGVuZHM6IGNjLlNrZXdUbyxcblxuXHRjdG9yOiBmdW5jdGlvbih0LCBzeCwgc3kpIHtcblx0XHRzeSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuaW5pdFdpdGhEdXJhdGlvbih0LCBzeCwgc3kpO1xuXHR9LFxuXG4gICAgLypcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0IHRpbWUgaW4gc2Vjb25kc1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkZWx0YVNrZXdYICBza2V3IGluIGRlZ3JlZXMgZm9yIFggYXhpc1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkZWx0YVNrZXdZICBza2V3IGluIGRlZ3JlZXMgZm9yIFkgYXhpc1xuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaW5pdFdpdGhEdXJhdGlvbjpmdW5jdGlvbiAodCwgZGVsdGFTa2V3WCwgZGVsdGFTa2V3WSkge1xuICAgICAgICB2YXIgcmV0ID0gZmFsc2U7XG4gICAgICAgIGlmIChjYy5Ta2V3VG8ucHJvdG90eXBlLmluaXRXaXRoRHVyYXRpb24uY2FsbCh0aGlzLCB0LCBkZWx0YVNrZXdYLCBkZWx0YVNrZXdZKSkge1xuICAgICAgICAgICAgdGhpcy5fc2tld1ggPSBkZWx0YVNrZXdYO1xuICAgICAgICAgICAgdGhpcy5fc2tld1kgPSBkZWx0YVNrZXdZO1xuICAgICAgICAgICAgcmV0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH0sXG5cbiAgICBjbG9uZTpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuU2tld0J5KCk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICBhY3Rpb24uaW5pdFdpdGhEdXJhdGlvbih0aGlzLl9kdXJhdGlvbiwgdGhpcy5fc2tld1gsIHRoaXMuX3NrZXdZKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgc3RhcnRXaXRoVGFyZ2V0OmZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgY2MuU2tld1RvLnByb3RvdHlwZS5zdGFydFdpdGhUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpO1xuICAgICAgICB0aGlzLl9kZWx0YVggPSB0aGlzLl9za2V3WDtcbiAgICAgICAgdGhpcy5fZGVsdGFZID0gdGhpcy5fc2tld1k7XG4gICAgICAgIHRoaXMuX2VuZFNrZXdYID0gdGhpcy5fc3RhcnRTa2V3WCArIHRoaXMuX2RlbHRhWDtcbiAgICAgICAgdGhpcy5fZW5kU2tld1kgPSB0aGlzLl9zdGFydFNrZXdZICsgdGhpcy5fZGVsdGFZO1xuICAgIH0sXG5cbiAgICByZXZlcnNlOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5Ta2V3QnkodGhpcy5fZHVyYXRpb24sIC10aGlzLl9za2V3WCwgLXRoaXMuX3NrZXdZKTtcbiAgICAgICAgdGhpcy5fY2xvbmVEZWNvcmF0aW9uKGFjdGlvbik7XG4gICAgICAgIHRoaXMuX3JldmVyc2VFYXNlTGlzdChhY3Rpb24pO1xuICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqICEjZW5cbiAqIFNrZXdzIGEgTm9kZSBvYmplY3QgYnkgc2tld1ggYW5kIHNrZXdZIGRlZ3JlZXMuIDxiciAvPlxuICogUmVsYXRpdmUgdG8gaXRzIHByb3BlcnR5IG1vZGlmaWNhdGlvbi5cbiAqICEjemgg5YGP5pac5oyH5a6a55qE6KeS5bqm44CCXG4gKiBAbWV0aG9kIHNrZXdCeVxuICogQHBhcmFtIHtOdW1iZXJ9IHQgdGltZSBpbiBzZWNvbmRzXG4gKiBAcGFyYW0ge051bWJlcn0gc3ggc3ggc2tldyBpbiBkZWdyZWVzIGZvciBYIGF4aXNcbiAqIEBwYXJhbSB7TnVtYmVyfSBzeSBzeSBza2V3IGluIGRlZ3JlZXMgZm9yIFkgYXhpc1xuICogQHJldHVybiB7QWN0aW9uSW50ZXJ2YWx9XG4gKiBAZXhhbXBsZVxuICogLy8gZXhhbXBsZVxuICogdmFyIGFjdGlvbkJ5ID0gY2Muc2tld0J5KDIsIDAsIC05MCk7XG4gKi9cbmNjLnNrZXdCeSA9IGZ1bmN0aW9uICh0LCBzeCwgc3kpIHtcbiAgICByZXR1cm4gbmV3IGNjLlNrZXdCeSh0LCBzeCwgc3kpO1xufTtcblxuXG4vKlxuICogTW92ZXMgYSBOb2RlIG9iamVjdCBzaW11bGF0aW5nIGEgcGFyYWJvbGljIGp1bXAgbW92ZW1lbnQgYnkgbW9kaWZ5aW5nIGl0cyBwb3NpdGlvbiBwcm9wZXJ0eS5cbiAqIFJlbGF0aXZlIHRvIGl0cyBtb3ZlbWVudC5cbiAqIEBjbGFzcyBKdW1wQnlcbiAqIEBleHRlbmRzIEFjdGlvbkludGVydmFsXG4gKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb25cbiAqIEBwYXJhbSB7VmVjMnxOdW1iZXJ9IHBvc2l0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gW3ldXG4gKiBAcGFyYW0ge051bWJlcn0gaGVpZ2h0XG4gKiBAcGFyYW0ge051bWJlcn0ganVtcHNcbiAqIEBleGFtcGxlXG4gKiB2YXIgYWN0aW9uQnkgPSBuZXcgY2MuSnVtcEJ5KDIsIGNjLnYyKDMwMCwgMCksIDUwLCA0KTtcbiAqIHZhciBhY3Rpb25CeSA9IG5ldyBjYy5KdW1wQnkoMiwgMzAwLCAwLCA1MCwgNCk7XG4gKi9cbmNjLkp1bXBCeSA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuSnVtcEJ5JyxcbiAgICBleHRlbmRzOiBjYy5BY3Rpb25JbnRlcnZhbCxcblxuICAgIGN0b3I6ZnVuY3Rpb24gKGR1cmF0aW9uLCBwb3NpdGlvbiwgeSwgaGVpZ2h0LCBqdW1wcykge1xuICAgICAgICB0aGlzLl9zdGFydFBvc2l0aW9uID0gY2MudjIoMCwgMCk7XG4gICAgICAgIHRoaXMuX3ByZXZpb3VzUG9zaXRpb24gPSBjYy52MigwLCAwKTtcbiAgICAgICAgdGhpcy5fZGVsdGEgPSBjYy52MigwLCAwKTtcbiAgICAgICAgdGhpcy5faGVpZ2h0ID0gMDtcbiAgICAgICAgdGhpcy5fanVtcHMgPSAwO1xuXG4gICAgICAgIGhlaWdodCAhPT0gdW5kZWZpbmVkICYmIGNjLkp1bXBCeS5wcm90b3R5cGUuaW5pdFdpdGhEdXJhdGlvbi5jYWxsKHRoaXMsIGR1cmF0aW9uLCBwb3NpdGlvbiwgeSwgaGVpZ2h0LCBqdW1wcyk7XG4gICAgfSxcbiAgICAvKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBhY3Rpb24uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uXG4gICAgICogQHBhcmFtIHtWZWMyfE51bWJlcn0gcG9zaXRpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3ldXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGhlaWdodFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBqdW1wc1xuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBhY3Rpb25CeS5pbml0V2l0aER1cmF0aW9uKDIsIGNjLnYyKDMwMCwgMCksIDUwLCA0KTtcbiAgICAgKiBhY3Rpb25CeS5pbml0V2l0aER1cmF0aW9uKDIsIDMwMCwgMCwgNTAsIDQpO1xuICAgICAqL1xuICAgIGluaXRXaXRoRHVyYXRpb246ZnVuY3Rpb24gKGR1cmF0aW9uLCBwb3NpdGlvbiwgeSwgaGVpZ2h0LCBqdW1wcykge1xuICAgICAgICBpZiAoY2MuQWN0aW9uSW50ZXJ2YWwucHJvdG90eXBlLmluaXRXaXRoRHVyYXRpb24uY2FsbCh0aGlzLCBkdXJhdGlvbikpIHtcblx0ICAgICAgICBpZiAoanVtcHMgPT09IHVuZGVmaW5lZCkge1xuXHRcdCAgICAgICAganVtcHMgPSBoZWlnaHQ7XG5cdFx0ICAgICAgICBoZWlnaHQgPSB5O1xuXHRcdCAgICAgICAgeSA9IHBvc2l0aW9uLnk7XG5cdFx0ICAgICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uLng7XG5cdCAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fZGVsdGEueCA9IHBvc2l0aW9uO1xuICAgICAgICAgICAgdGhpcy5fZGVsdGEueSA9IHk7XG4gICAgICAgICAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgICAgICB0aGlzLl9qdW1wcyA9IGp1bXBzO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBjbG9uZTpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuSnVtcEJ5KCk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICBhY3Rpb24uaW5pdFdpdGhEdXJhdGlvbih0aGlzLl9kdXJhdGlvbiwgdGhpcy5fZGVsdGEsIHRoaXMuX2hlaWdodCwgdGhpcy5fanVtcHMpO1xuICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG5cbiAgICBzdGFydFdpdGhUYXJnZXQ6ZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICBjYy5BY3Rpb25JbnRlcnZhbC5wcm90b3R5cGUuc3RhcnRXaXRoVGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcbiAgICAgICAgdmFyIGxvY1Bvc1ggPSB0YXJnZXQueDtcbiAgICAgICAgdmFyIGxvY1Bvc1kgPSB0YXJnZXQueTtcbiAgICAgICAgdGhpcy5fcHJldmlvdXNQb3NpdGlvbi54ID0gbG9jUG9zWDtcbiAgICAgICAgdGhpcy5fcHJldmlvdXNQb3NpdGlvbi55ID0gbG9jUG9zWTtcbiAgICAgICAgdGhpcy5fc3RhcnRQb3NpdGlvbi54ID0gbG9jUG9zWDtcbiAgICAgICAgdGhpcy5fc3RhcnRQb3NpdGlvbi55ID0gbG9jUG9zWTtcbiAgICB9LFxuXG4gICAgdXBkYXRlOmZ1bmN0aW9uIChkdCkge1xuICAgICAgICBkdCA9IHRoaXMuX2NvbXB1dGVFYXNlVGltZShkdCk7XG4gICAgICAgIGlmICh0aGlzLnRhcmdldCkge1xuICAgICAgICAgICAgdmFyIGZyYWMgPSBkdCAqIHRoaXMuX2p1bXBzICUgMS4wO1xuICAgICAgICAgICAgdmFyIHkgPSB0aGlzLl9oZWlnaHQgKiA0ICogZnJhYyAqICgxIC0gZnJhYyk7XG4gICAgICAgICAgICB5ICs9IHRoaXMuX2RlbHRhLnkgKiBkdDtcblxuICAgICAgICAgICAgdmFyIHggPSB0aGlzLl9kZWx0YS54ICogZHQ7XG4gICAgICAgICAgICB2YXIgbG9jU3RhcnRQb3NpdGlvbiA9IHRoaXMuX3N0YXJ0UG9zaXRpb247XG4gICAgICAgICAgICBpZiAoY2MubWFjcm8uRU5BQkxFX1NUQUNLQUJMRV9BQ1RJT05TKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldFggPSB0aGlzLnRhcmdldC54O1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXRZID0gdGhpcy50YXJnZXQueTtcbiAgICAgICAgICAgICAgICB2YXIgbG9jUHJldmlvdXNQb3NpdGlvbiA9IHRoaXMuX3ByZXZpb3VzUG9zaXRpb247XG5cbiAgICAgICAgICAgICAgICBsb2NTdGFydFBvc2l0aW9uLnggPSBsb2NTdGFydFBvc2l0aW9uLnggKyB0YXJnZXRYIC0gbG9jUHJldmlvdXNQb3NpdGlvbi54O1xuICAgICAgICAgICAgICAgIGxvY1N0YXJ0UG9zaXRpb24ueSA9IGxvY1N0YXJ0UG9zaXRpb24ueSArIHRhcmdldFkgLSBsb2NQcmV2aW91c1Bvc2l0aW9uLnk7XG4gICAgICAgICAgICAgICAgeCA9IHggKyBsb2NTdGFydFBvc2l0aW9uLng7XG4gICAgICAgICAgICAgICAgeSA9IHkgKyBsb2NTdGFydFBvc2l0aW9uLnk7XG5cdCAgICAgICAgICAgIGxvY1ByZXZpb3VzUG9zaXRpb24ueCA9IHg7XG5cdCAgICAgICAgICAgIGxvY1ByZXZpb3VzUG9zaXRpb24ueSA9IHk7XG5cdCAgICAgICAgICAgIHRoaXMudGFyZ2V0LnNldFBvc2l0aW9uKHgsIHkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldC5zZXRQb3NpdGlvbihsb2NTdGFydFBvc2l0aW9uLnggKyB4LCBsb2NTdGFydFBvc2l0aW9uLnkgKyB5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZXZlcnNlOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5KdW1wQnkodGhpcy5fZHVyYXRpb24sIGNjLnYyKC10aGlzLl9kZWx0YS54LCAtdGhpcy5fZGVsdGEueSksIHRoaXMuX2hlaWdodCwgdGhpcy5fanVtcHMpO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgdGhpcy5fcmV2ZXJzZUVhc2VMaXN0KGFjdGlvbik7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfVxufSk7XG5cbi8qKlxuICogISNlblxuICogTW92ZXMgYSBOb2RlIG9iamVjdCBzaW11bGF0aW5nIGEgcGFyYWJvbGljIGp1bXAgbW92ZW1lbnQgYnkgbW9kaWZ5aW5nIGl0J3MgcG9zaXRpb24gcHJvcGVydHkuXG4gKiBSZWxhdGl2ZSB0byBpdHMgbW92ZW1lbnQuXG4gKiAhI3poIOeUqOi3s+i3g+eahOaWueW8j+enu+WKqOaMh+WumueahOi3neemu+OAglxuICogQG1ldGhvZCBqdW1wQnlcbiAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvblxuICogQHBhcmFtIHtWZWMyfE51bWJlcn0gcG9zaXRpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSBbeV1cbiAqIEBwYXJhbSB7TnVtYmVyfSBbaGVpZ2h0XVxuICogQHBhcmFtIHtOdW1iZXJ9IFtqdW1wc11cbiAqIEByZXR1cm4ge0FjdGlvbkludGVydmFsfVxuICogQGV4YW1wbGVcbiAqIC8vIGV4YW1wbGVcbiAqIHZhciBhY3Rpb25CeSA9IGNjLmp1bXBCeSgyLCBjYy52MigzMDAsIDApLCA1MCwgNCk7XG4gKiB2YXIgYWN0aW9uQnkgPSBjYy5qdW1wQnkoMiwgMzAwLCAwLCA1MCwgNCk7XG4gKi9cbmNjLmp1bXBCeSA9IGZ1bmN0aW9uIChkdXJhdGlvbiwgcG9zaXRpb24sIHksIGhlaWdodCwganVtcHMpIHtcbiAgICByZXR1cm4gbmV3IGNjLkp1bXBCeShkdXJhdGlvbiwgcG9zaXRpb24sIHksIGhlaWdodCwganVtcHMpO1xufTtcblxuLypcbiAqIE1vdmVzIGEgTm9kZSBvYmplY3QgdG8gYSBwYXJhYm9saWMgcG9zaXRpb24gc2ltdWxhdGluZyBhIGp1bXAgbW92ZW1lbnQgYnkgbW9kaWZ5aW5nIGl0J3MgcG9zaXRpb24gcHJvcGVydHkuIDxiciAvPlxuICogSnVtcCB0byB0aGUgc3BlY2lmaWVkIGxvY2F0aW9uLlxuICogQGNsYXNzIEp1bXBUb1xuICogQGV4dGVuZHMgSnVtcEJ5XG4gKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb25cbiAqIEBwYXJhbSB7VmVjMnxOdW1iZXJ9IHBvc2l0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gW3ldXG4gKiBAcGFyYW0ge051bWJlcn0gW2hlaWdodF1cbiAqIEBwYXJhbSB7TnVtYmVyfSBbanVtcHNdXG4gKiBAZXhhbXBsZVxuICogdmFyIGFjdGlvblRvID0gbmV3IGNjLkp1bXBUbygyLCBjYy52MigzMDAsIDApLCA1MCwgNCk7XG4gKiB2YXIgYWN0aW9uVG8gPSBuZXcgY2MuSnVtcFRvKDIsIDMwMCwgMCwgNTAsIDQpO1xuICovXG5jYy5KdW1wVG8gPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLkp1bXBUbycsXG4gICAgZXh0ZW5kczogY2MuSnVtcEJ5LFxuXG4gICAgY3RvcjpmdW5jdGlvbiAoZHVyYXRpb24sIHBvc2l0aW9uLCB5LCBoZWlnaHQsIGp1bXBzKSB7XG4gICAgICAgIHRoaXMuX2VuZFBvc2l0aW9uID0gY2MudjIoMCwgMCk7XG4gICAgICAgIGhlaWdodCAhPT0gdW5kZWZpbmVkICYmIHRoaXMuaW5pdFdpdGhEdXJhdGlvbihkdXJhdGlvbiwgcG9zaXRpb24sIHksIGhlaWdodCwganVtcHMpO1xuICAgIH0sXG4gICAgLypcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvblxuICAgICAqIEBwYXJhbSB7VmVjMnxOdW1iZXJ9IHBvc2l0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFt5XVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBoZWlnaHRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0ganVtcHNcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqIEBleGFtcGxlXG4gICAgICogYWN0aW9uVG8uaW5pdFdpdGhEdXJhdGlvbigyLCBjYy52MigzMDAsIDApLCA1MCwgNCk7XG4gICAgICogYWN0aW9uVG8uaW5pdFdpdGhEdXJhdGlvbigyLCAzMDAsIDAsIDUwLCA0KTtcbiAgICAgKi9cbiAgICBpbml0V2l0aER1cmF0aW9uOmZ1bmN0aW9uIChkdXJhdGlvbiwgcG9zaXRpb24sIHksIGhlaWdodCwganVtcHMpIHtcbiAgICAgICAgaWYgKGNjLkp1bXBCeS5wcm90b3R5cGUuaW5pdFdpdGhEdXJhdGlvbi5jYWxsKHRoaXMsIGR1cmF0aW9uLCBwb3NpdGlvbiwgeSwgaGVpZ2h0LCBqdW1wcykpIHtcbiAgICAgICAgICAgIGlmIChqdW1wcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgeSA9IHBvc2l0aW9uLnk7XG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbi54O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fZW5kUG9zaXRpb24ueCA9IHBvc2l0aW9uO1xuICAgICAgICAgICAgdGhpcy5fZW5kUG9zaXRpb24ueSA9IHk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIHN0YXJ0V2l0aFRhcmdldDpmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIGNjLkp1bXBCeS5wcm90b3R5cGUuc3RhcnRXaXRoVGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcbiAgICAgICAgdGhpcy5fZGVsdGEueCA9IHRoaXMuX2VuZFBvc2l0aW9uLnggLSB0aGlzLl9zdGFydFBvc2l0aW9uLng7XG4gICAgICAgIHRoaXMuX2RlbHRhLnkgPSB0aGlzLl9lbmRQb3NpdGlvbi55IC0gdGhpcy5fc3RhcnRQb3NpdGlvbi55O1xuICAgIH0sXG5cbiAgICBjbG9uZTpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuSnVtcFRvKCk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICBhY3Rpb24uaW5pdFdpdGhEdXJhdGlvbih0aGlzLl9kdXJhdGlvbiwgdGhpcy5fZW5kUG9zaXRpb24sIHRoaXMuX2hlaWdodCwgdGhpcy5fanVtcHMpO1xuICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqICEjZW5cbiAqIE1vdmVzIGEgTm9kZSBvYmplY3QgdG8gYSBwYXJhYm9saWMgcG9zaXRpb24gc2ltdWxhdGluZyBhIGp1bXAgbW92ZW1lbnQgYnkgbW9kaWZ5aW5nIGl0cyBwb3NpdGlvbiBwcm9wZXJ0eS4gPGJyIC8+XG4gKiBKdW1wIHRvIHRoZSBzcGVjaWZpZWQgbG9jYXRpb24uXG4gKiAhI3poIOeUqOi3s+i3g+eahOaWueW8j+enu+WKqOWIsOebruagh+S9jee9ruOAglxuICogQG1ldGhvZCBqdW1wVG9cbiAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvblxuICogQHBhcmFtIHtWZWMyfE51bWJlcn0gcG9zaXRpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSBbeV1cbiAqIEBwYXJhbSB7TnVtYmVyfSBbaGVpZ2h0XVxuICogQHBhcmFtIHtOdW1iZXJ9IFtqdW1wc11cbiAqIEByZXR1cm4ge0FjdGlvbkludGVydmFsfVxuICogQGV4YW1wbGVcbiAqIC8vIGV4YW1wbGVcbiAqIHZhciBhY3Rpb25UbyA9IGNjLmp1bXBUbygyLCBjYy52MigzMDAsIDMwMCksIDUwLCA0KTtcbiAqIHZhciBhY3Rpb25UbyA9IGNjLmp1bXBUbygyLCAzMDAsIDMwMCwgNTAsIDQpO1xuICovXG5jYy5qdW1wVG8gPSBmdW5jdGlvbiAoZHVyYXRpb24sIHBvc2l0aW9uLCB5LCBoZWlnaHQsIGp1bXBzKSB7XG4gICAgcmV0dXJuIG5ldyBjYy5KdW1wVG8oZHVyYXRpb24sIHBvc2l0aW9uLCB5LCBoZWlnaHQsIGp1bXBzKTtcbn07XG5cbi8qIEFuIGFjdGlvbiB0aGF0IG1vdmVzIHRoZSB0YXJnZXQgd2l0aCBhIGN1YmljIEJlemllciBjdXJ2ZSBieSBhIGNlcnRhaW4gZGlzdGFuY2UuXG4gKiBSZWxhdGl2ZSB0byBpdHMgbW92ZW1lbnQuXG4gKiBAY2xhc3MgQmV6aWVyQnlcbiAqIEBleHRlbmRzIEFjdGlvbkludGVydmFsXG4gKiBAcGFyYW0ge051bWJlcn0gdCAtIHRpbWUgaW4gc2Vjb25kc1xuICogQHBhcmFtIHtWZWMyW119IGMgLSBBcnJheSBvZiBwb2ludHNcbiAqIEBleGFtcGxlXG4gKiB2YXIgYmV6aWVyID0gW2NjLnYyKDAsIHdpbmRvd1NpemUuaGVpZ2h0IC8gMiksIGNjLnYyKDMwMCwgLXdpbmRvd1NpemUuaGVpZ2h0IC8gMiksIGNjLnYyKDMwMCwgMTAwKV07XG4gKiB2YXIgYmV6aWVyRm9yd2FyZCA9IG5ldyBjYy5CZXppZXJCeSgzLCBiZXppZXIpO1xuICovXG5mdW5jdGlvbiBiZXppZXJBdCAoYSwgYiwgYywgZCwgdCkge1xuICAgIHJldHVybiAoTWF0aC5wb3coMSAtIHQsIDMpICogYSArXG4gICAgICAgIDMgKiB0ICogKE1hdGgucG93KDEgLSB0LCAyKSkgKiBiICtcbiAgICAgICAgMyAqIE1hdGgucG93KHQsIDIpICogKDEgLSB0KSAqIGMgK1xuICAgICAgICBNYXRoLnBvdyh0LCAzKSAqIGQgKTtcbn07XG5jYy5CZXppZXJCeSA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuQmV6aWVyQnknLFxuICAgIGV4dGVuZHM6IGNjLkFjdGlvbkludGVydmFsLFxuXG4gICAgY3RvcjpmdW5jdGlvbiAodCwgYykge1xuICAgICAgICB0aGlzLl9jb25maWcgPSBbXTtcbiAgICAgICAgdGhpcy5fc3RhcnRQb3NpdGlvbiA9IGNjLnYyKDAsIDApO1xuICAgICAgICB0aGlzLl9wcmV2aW91c1Bvc2l0aW9uID0gY2MudjIoMCwgMCk7XG4gICAgICAgIGMgJiYgY2MuQmV6aWVyQnkucHJvdG90eXBlLmluaXRXaXRoRHVyYXRpb24uY2FsbCh0aGlzLCB0LCBjKTtcbiAgICB9LFxuXG4gICAgLypcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0IC0gdGltZSBpbiBzZWNvbmRzXG4gICAgICogQHBhcmFtIHtWZWMyW119IGMgLSBBcnJheSBvZiBwb2ludHNcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGluaXRXaXRoRHVyYXRpb246ZnVuY3Rpb24gKHQsIGMpIHtcbiAgICAgICAgaWYgKGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5pbml0V2l0aER1cmF0aW9uLmNhbGwodGhpcywgdCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbmZpZyA9IGM7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIGNsb25lOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5CZXppZXJCeSgpO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgdmFyIG5ld0NvbmZpZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9jb25maWcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBzZWxDb25mID0gdGhpcy5fY29uZmlnW2ldO1xuICAgICAgICAgICAgbmV3Q29uZmlncy5wdXNoKGNjLnYyKHNlbENvbmYueCwgc2VsQ29uZi55KSk7XG4gICAgICAgIH1cbiAgICAgICAgYWN0aW9uLmluaXRXaXRoRHVyYXRpb24odGhpcy5fZHVyYXRpb24sIG5ld0NvbmZpZ3MpO1xuICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG5cbiAgICBzdGFydFdpdGhUYXJnZXQ6ZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICBjYy5BY3Rpb25JbnRlcnZhbC5wcm90b3R5cGUuc3RhcnRXaXRoVGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcbiAgICAgICAgdmFyIGxvY1Bvc1ggPSB0YXJnZXQueDtcbiAgICAgICAgdmFyIGxvY1Bvc1kgPSB0YXJnZXQueTtcbiAgICAgICAgdGhpcy5fcHJldmlvdXNQb3NpdGlvbi54ID0gbG9jUG9zWDtcbiAgICAgICAgdGhpcy5fcHJldmlvdXNQb3NpdGlvbi55ID0gbG9jUG9zWTtcbiAgICAgICAgdGhpcy5fc3RhcnRQb3NpdGlvbi54ID0gbG9jUG9zWDtcbiAgICAgICAgdGhpcy5fc3RhcnRQb3NpdGlvbi55ID0gbG9jUG9zWTtcbiAgICB9LFxuXG4gICAgdXBkYXRlOmZ1bmN0aW9uIChkdCkge1xuICAgICAgICBkdCA9IHRoaXMuX2NvbXB1dGVFYXNlVGltZShkdCk7XG4gICAgICAgIGlmICh0aGlzLnRhcmdldCkge1xuICAgICAgICAgICAgdmFyIGxvY0NvbmZpZyA9IHRoaXMuX2NvbmZpZztcbiAgICAgICAgICAgIHZhciB4YSA9IDA7XG4gICAgICAgICAgICB2YXIgeGIgPSBsb2NDb25maWdbMF0ueDtcbiAgICAgICAgICAgIHZhciB4YyA9IGxvY0NvbmZpZ1sxXS54O1xuICAgICAgICAgICAgdmFyIHhkID0gbG9jQ29uZmlnWzJdLng7XG5cbiAgICAgICAgICAgIHZhciB5YSA9IDA7XG4gICAgICAgICAgICB2YXIgeWIgPSBsb2NDb25maWdbMF0ueTtcbiAgICAgICAgICAgIHZhciB5YyA9IGxvY0NvbmZpZ1sxXS55O1xuICAgICAgICAgICAgdmFyIHlkID0gbG9jQ29uZmlnWzJdLnk7XG5cbiAgICAgICAgICAgIHZhciB4ID0gYmV6aWVyQXQoeGEsIHhiLCB4YywgeGQsIGR0KTtcbiAgICAgICAgICAgIHZhciB5ID0gYmV6aWVyQXQoeWEsIHliLCB5YywgeWQsIGR0KTtcblxuICAgICAgICAgICAgdmFyIGxvY1N0YXJ0UG9zaXRpb24gPSB0aGlzLl9zdGFydFBvc2l0aW9uO1xuICAgICAgICAgICAgaWYgKGNjLm1hY3JvLkVOQUJMRV9TVEFDS0FCTEVfQUNUSU9OUykge1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXRYID0gdGhpcy50YXJnZXQueDtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0WSA9IHRoaXMudGFyZ2V0Lnk7XG4gICAgICAgICAgICAgICAgdmFyIGxvY1ByZXZpb3VzUG9zaXRpb24gPSB0aGlzLl9wcmV2aW91c1Bvc2l0aW9uO1xuXG4gICAgICAgICAgICAgICAgbG9jU3RhcnRQb3NpdGlvbi54ID0gbG9jU3RhcnRQb3NpdGlvbi54ICsgdGFyZ2V0WCAtIGxvY1ByZXZpb3VzUG9zaXRpb24ueDtcbiAgICAgICAgICAgICAgICBsb2NTdGFydFBvc2l0aW9uLnkgPSBsb2NTdGFydFBvc2l0aW9uLnkgKyB0YXJnZXRZIC0gbG9jUHJldmlvdXNQb3NpdGlvbi55O1xuICAgICAgICAgICAgICAgIHggPSB4ICsgbG9jU3RhcnRQb3NpdGlvbi54O1xuICAgICAgICAgICAgICAgIHkgPSB5ICsgbG9jU3RhcnRQb3NpdGlvbi55O1xuXHQgICAgICAgICAgICBsb2NQcmV2aW91c1Bvc2l0aW9uLnggPSB4O1xuXHQgICAgICAgICAgICBsb2NQcmV2aW91c1Bvc2l0aW9uLnkgPSB5O1xuXHQgICAgICAgICAgICB0aGlzLnRhcmdldC5zZXRQb3NpdGlvbih4LCB5KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXQuc2V0UG9zaXRpb24obG9jU3RhcnRQb3NpdGlvbi54ICsgeCwgbG9jU3RhcnRQb3NpdGlvbi55ICsgeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmV2ZXJzZTpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBsb2NDb25maWcgPSB0aGlzLl9jb25maWc7XG4gICAgICAgIHZhciB4MCA9IGxvY0NvbmZpZ1swXS54LCB5MCA9IGxvY0NvbmZpZ1swXS55O1xuICAgICAgICB2YXIgeDEgPSBsb2NDb25maWdbMV0ueCwgeTEgPSBsb2NDb25maWdbMV0ueTtcbiAgICAgICAgdmFyIHgyID0gbG9jQ29uZmlnWzJdLngsIHkyID0gbG9jQ29uZmlnWzJdLnk7XG4gICAgICAgIHZhciByID0gW1xuICAgICAgICAgICAgY2MudjIoeDEgLSB4MiwgeTEgLSB5MiksXG4gICAgICAgICAgICBjYy52Mih4MCAtIHgyLCB5MCAtIHkyKSxcbiAgICAgICAgICAgIGNjLnYyKC14MiwgLXkyKSBdO1xuICAgICAgICB2YXIgYWN0aW9uID0gbmV3IGNjLkJlemllckJ5KHRoaXMuX2R1cmF0aW9uLCByKTtcbiAgICAgICAgdGhpcy5fY2xvbmVEZWNvcmF0aW9uKGFjdGlvbik7XG4gICAgICAgIHRoaXMuX3JldmVyc2VFYXNlTGlzdChhY3Rpb24pO1xuICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqICEjZW5cbiAqIEFuIGFjdGlvbiB0aGF0IG1vdmVzIHRoZSB0YXJnZXQgd2l0aCBhIGN1YmljIEJlemllciBjdXJ2ZSBieSBhIGNlcnRhaW4gZGlzdGFuY2UuXG4gKiBSZWxhdGl2ZSB0byBpdHMgbW92ZW1lbnQuXG4gKiAhI3poIOaMiei0nei1m+WwlOabsue6v+i9qOi/ueenu+WKqOaMh+WumueahOi3neemu+OAglxuICogQG1ldGhvZCBiZXppZXJCeVxuICogQHBhcmFtIHtOdW1iZXJ9IHQgLSB0aW1lIGluIHNlY29uZHNcbiAqIEBwYXJhbSB7VmVjMltdfSBjIC0gQXJyYXkgb2YgcG9pbnRzXG4gKiBAcmV0dXJuIHtBY3Rpb25JbnRlcnZhbH1cbiAqIEBleGFtcGxlXG4gKiAvLyBleGFtcGxlXG4gKiB2YXIgYmV6aWVyID0gW2NjLnYyKDAsIHdpbmRvd1NpemUuaGVpZ2h0IC8gMiksIGNjLnYyKDMwMCwgLXdpbmRvd1NpemUuaGVpZ2h0IC8gMiksIGNjLnYyKDMwMCwgMTAwKV07XG4gKiB2YXIgYmV6aWVyRm9yd2FyZCA9IGNjLmJlemllckJ5KDMsIGJlemllcik7XG4gKi9cbmNjLmJlemllckJ5ID0gZnVuY3Rpb24gKHQsIGMpIHtcbiAgICByZXR1cm4gbmV3IGNjLkJlemllckJ5KHQsIGMpO1xufTtcblxuXG4vKiBBbiBhY3Rpb24gdGhhdCBtb3ZlcyB0aGUgdGFyZ2V0IHdpdGggYSBjdWJpYyBCZXppZXIgY3VydmUgdG8gYSBkZXN0aW5hdGlvbiBwb2ludC5cbiAqIEBjbGFzcyBCZXppZXJUb1xuICogQGV4dGVuZHMgQmV6aWVyQnlcbiAqIEBwYXJhbSB7TnVtYmVyfSB0XG4gKiBAcGFyYW0ge1ZlYzJbXX0gYyAtIEFycmF5IG9mIHBvaW50c1xuICogQGV4YW1wbGVcbiAqIHZhciBiZXppZXIgPSBbY2MudjIoMCwgd2luZG93U2l6ZS5oZWlnaHQgLyAyKSwgY2MudjIoMzAwLCAtd2luZG93U2l6ZS5oZWlnaHQgLyAyKSwgY2MudjIoMzAwLCAxMDApXTtcbiAqIHZhciBiZXppZXJUbyA9IG5ldyBjYy5CZXppZXJUbygyLCBiZXppZXIpO1xuICovXG5jYy5CZXppZXJUbyA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuQmV6aWVyVG8nLFxuICAgIGV4dGVuZHM6IGNjLkJlemllckJ5LFxuXG4gICAgY3RvcjpmdW5jdGlvbiAodCwgYykge1xuICAgICAgICB0aGlzLl90b0NvbmZpZyA9IFtdO1xuXHRcdGMgJiYgdGhpcy5pbml0V2l0aER1cmF0aW9uKHQsIGMpO1xuICAgIH0sXG5cbiAgICAvKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBhY3Rpb24uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHQgdGltZSBpbiBzZWNvbmRzXG4gICAgICogQHBhcmFtIHtWZWMyW119IGMgLSBBcnJheSBvZiBwb2ludHNcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGluaXRXaXRoRHVyYXRpb246ZnVuY3Rpb24gKHQsIGMpIHtcbiAgICAgICAgaWYgKGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5pbml0V2l0aER1cmF0aW9uLmNhbGwodGhpcywgdCkpIHtcbiAgICAgICAgICAgIHRoaXMuX3RvQ29uZmlnID0gYztcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgY2xvbmU6ZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYWN0aW9uID0gbmV3IGNjLkJlemllclRvKCk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICBhY3Rpb24uaW5pdFdpdGhEdXJhdGlvbih0aGlzLl9kdXJhdGlvbiwgdGhpcy5fdG9Db25maWcpO1xuICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG5cbiAgICBzdGFydFdpdGhUYXJnZXQ6ZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICBjYy5CZXppZXJCeS5wcm90b3R5cGUuc3RhcnRXaXRoVGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcbiAgICAgICAgdmFyIGxvY1N0YXJ0UG9zID0gdGhpcy5fc3RhcnRQb3NpdGlvbjtcbiAgICAgICAgdmFyIGxvY1RvQ29uZmlnID0gdGhpcy5fdG9Db25maWc7XG4gICAgICAgIHZhciBsb2NDb25maWcgPSB0aGlzLl9jb25maWc7XG5cbiAgICAgICAgbG9jQ29uZmlnWzBdID0gbG9jVG9Db25maWdbMF0uc3ViKGxvY1N0YXJ0UG9zKTtcbiAgICAgICAgbG9jQ29uZmlnWzFdID0gbG9jVG9Db25maWdbMV0uc3ViKGxvY1N0YXJ0UG9zKTtcbiAgICAgICAgbG9jQ29uZmlnWzJdID0gbG9jVG9Db25maWdbMl0uc3ViKGxvY1N0YXJ0UG9zKTtcbiAgICB9XG59KTtcbi8qKlxuICogISNlbiBBbiBhY3Rpb24gdGhhdCBtb3ZlcyB0aGUgdGFyZ2V0IHdpdGggYSBjdWJpYyBCZXppZXIgY3VydmUgdG8gYSBkZXN0aW5hdGlvbiBwb2ludC5cbiAqICEjemgg5oyJ6LSd6LWb5bCU5puy57q/6L2o6L+556e75Yqo5Yiw55uu5qCH5L2N572u44CCXG4gKiBAbWV0aG9kIGJlemllclRvXG4gKiBAcGFyYW0ge051bWJlcn0gdFxuICogQHBhcmFtIHtWZWMyW119IGMgLSBBcnJheSBvZiBwb2ludHNcbiAqIEByZXR1cm4ge0FjdGlvbkludGVydmFsfVxuICogQGV4YW1wbGVcbiAqIC8vIGV4YW1wbGVcbiAqIHZhciBiZXppZXIgPSBbY2MudjIoMCwgd2luZG93U2l6ZS5oZWlnaHQgLyAyKSwgY2MudjIoMzAwLCAtd2luZG93U2l6ZS5oZWlnaHQgLyAyKSwgY2MudjIoMzAwLCAxMDApXTtcbiAqIHZhciBiZXppZXJUbyA9IGNjLmJlemllclRvKDIsIGJlemllcik7XG4gKi9cbmNjLmJlemllclRvID0gZnVuY3Rpb24gKHQsIGMpIHtcbiAgICByZXR1cm4gbmV3IGNjLkJlemllclRvKHQsIGMpO1xufTtcblxuXG4vKiBTY2FsZXMgYSBOb2RlIG9iamVjdCB0byBhIHpvb20gZmFjdG9yIGJ5IG1vZGlmeWluZyBpdCdzIHNjYWxlIHByb3BlcnR5LlxuICogQHdhcm5pbmcgVGhpcyBhY3Rpb24gZG9lc24ndCBzdXBwb3J0IFwicmV2ZXJzZVwiXG4gKiBAY2xhc3MgU2NhbGVUb1xuICogQGV4dGVuZHMgQWN0aW9uSW50ZXJ2YWxcbiAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IHN4ICBzY2FsZSBwYXJhbWV0ZXIgaW4gWFxuICogQHBhcmFtIHtOdW1iZXJ9IFtzeV0gc2NhbGUgcGFyYW1ldGVyIGluIFksIGlmIE51bGwgZXF1YWwgdG8gc3hcbiAqIEBleGFtcGxlXG4gKiAvLyBJdCBzY2FsZXMgdG8gMC41IGluIGJvdGggWCBhbmQgWS5cbiAqIHZhciBhY3Rpb25UbyA9IG5ldyBjYy5TY2FsZVRvKDIsIDAuNSk7XG4gKlxuICogLy8gSXQgc2NhbGVzIHRvIDAuNSBpbiB4IGFuZCAyIGluIFlcbiAqIHZhciBhY3Rpb25UbyA9IG5ldyBjYy5TY2FsZVRvKDIsIDAuNSwgMik7XG4gKi9cbmNjLlNjYWxlVG8gPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLlNjYWxlVG8nLFxuICAgIGV4dGVuZHM6IGNjLkFjdGlvbkludGVydmFsLFxuXG4gICAgY3RvcjpmdW5jdGlvbiAoZHVyYXRpb24sIHN4LCBzeSkge1xuICAgICAgICB0aGlzLl9zY2FsZVggPSAxO1xuICAgICAgICB0aGlzLl9zY2FsZVkgPSAxO1xuICAgICAgICB0aGlzLl9zdGFydFNjYWxlWCA9IDE7XG4gICAgICAgIHRoaXMuX3N0YXJ0U2NhbGVZID0gMTtcbiAgICAgICAgdGhpcy5fZW5kU2NhbGVYID0gMDtcbiAgICAgICAgdGhpcy5fZW5kU2NhbGVZID0gMDtcbiAgICAgICAgdGhpcy5fZGVsdGFYID0gMDtcbiAgICAgICAgdGhpcy5fZGVsdGFZID0gMDtcbiAgICAgICAgc3ggIT09IHVuZGVmaW5lZCAmJiBjYy5TY2FsZVRvLnByb3RvdHlwZS5pbml0V2l0aER1cmF0aW9uLmNhbGwodGhpcywgZHVyYXRpb24sIHN4LCBzeSk7XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIGFjdGlvbi5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc3hcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3N5PV1cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGluaXRXaXRoRHVyYXRpb246ZnVuY3Rpb24gKGR1cmF0aW9uLCBzeCwgc3kpIHsgLy9mdW5jdGlvbiBvdmVybG9hZCBoZXJlXG4gICAgICAgIGlmIChjYy5BY3Rpb25JbnRlcnZhbC5wcm90b3R5cGUuaW5pdFdpdGhEdXJhdGlvbi5jYWxsKHRoaXMsIGR1cmF0aW9uKSkge1xuICAgICAgICAgICAgdGhpcy5fZW5kU2NhbGVYID0gc3g7XG4gICAgICAgICAgICB0aGlzLl9lbmRTY2FsZVkgPSAoc3kgIT0gbnVsbCkgPyBzeSA6IHN4O1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBjbG9uZTpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuU2NhbGVUbygpO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgYWN0aW9uLmluaXRXaXRoRHVyYXRpb24odGhpcy5fZHVyYXRpb24sIHRoaXMuX2VuZFNjYWxlWCwgdGhpcy5fZW5kU2NhbGVZKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgc3RhcnRXaXRoVGFyZ2V0OmZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgY2MuQWN0aW9uSW50ZXJ2YWwucHJvdG90eXBlLnN0YXJ0V2l0aFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCk7XG4gICAgICAgIHRoaXMuX3N0YXJ0U2NhbGVYID0gdGFyZ2V0LnNjYWxlWDtcbiAgICAgICAgdGhpcy5fc3RhcnRTY2FsZVkgPSB0YXJnZXQuc2NhbGVZO1xuICAgICAgICB0aGlzLl9kZWx0YVggPSB0aGlzLl9lbmRTY2FsZVggLSB0aGlzLl9zdGFydFNjYWxlWDtcbiAgICAgICAgdGhpcy5fZGVsdGFZID0gdGhpcy5fZW5kU2NhbGVZIC0gdGhpcy5fc3RhcnRTY2FsZVk7XG4gICAgfSxcblxuICAgIHVwZGF0ZTpmdW5jdGlvbiAoZHQpIHtcbiAgICAgICAgZHQgPSB0aGlzLl9jb21wdXRlRWFzZVRpbWUoZHQpO1xuICAgICAgICBpZiAodGhpcy50YXJnZXQpIHtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0LnNjYWxlWCA9IHRoaXMuX3N0YXJ0U2NhbGVYICsgdGhpcy5fZGVsdGFYICogZHQ7XG5cdCAgICAgICAgdGhpcy50YXJnZXQuc2NhbGVZID0gdGhpcy5fc3RhcnRTY2FsZVkgKyB0aGlzLl9kZWx0YVkgKiBkdDtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuLyoqXG4gKiAhI2VuIFNjYWxlcyBhIE5vZGUgb2JqZWN0IHRvIGEgem9vbSBmYWN0b3IgYnkgbW9kaWZ5aW5nIGl0J3Mgc2NhbGUgcHJvcGVydHkuXG4gKiAhI3poIOWwhuiKgueCueWkp+Wwj+e8qeaUvuWIsOaMh+WumueahOWAjeaVsOOAglxuICogQG1ldGhvZCBzY2FsZVRvXG4gKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSBzeCAgc2NhbGUgcGFyYW1ldGVyIGluIFhcbiAqIEBwYXJhbSB7TnVtYmVyfSBbc3ldIHNjYWxlIHBhcmFtZXRlciBpbiBZLCBpZiBOdWxsIGVxdWFsIHRvIHN4XG4gKiBAcmV0dXJuIHtBY3Rpb25JbnRlcnZhbH1cbiAqIEBleGFtcGxlXG4gKiAvLyBleGFtcGxlXG4gKiAvLyBJdCBzY2FsZXMgdG8gMC41IGluIGJvdGggWCBhbmQgWS5cbiAqIHZhciBhY3Rpb25UbyA9IGNjLnNjYWxlVG8oMiwgMC41KTtcbiAqXG4gKiAvLyBJdCBzY2FsZXMgdG8gMC41IGluIHggYW5kIDIgaW4gWVxuICogdmFyIGFjdGlvblRvID0gY2Muc2NhbGVUbygyLCAwLjUsIDIpO1xuICovXG5jYy5zY2FsZVRvID0gZnVuY3Rpb24gKGR1cmF0aW9uLCBzeCwgc3kpIHsgLy9mdW5jdGlvbiBvdmVybG9hZFxuICAgIHJldHVybiBuZXcgY2MuU2NhbGVUbyhkdXJhdGlvbiwgc3gsIHN5KTtcbn07XG5cblxuLyogU2NhbGVzIGEgTm9kZSBvYmplY3QgYSB6b29tIGZhY3RvciBieSBtb2RpZnlpbmcgaXQncyBzY2FsZSBwcm9wZXJ0eS5cbiAqIFJlbGF0aXZlIHRvIGl0cyBjaGFuZ2VzLlxuICogQGNsYXNzIFNjYWxlQnlcbiAqIEBleHRlbmRzIFNjYWxlVG9cbiAqL1xuY2MuU2NhbGVCeSA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuU2NhbGVCeScsXG4gICAgZXh0ZW5kczogY2MuU2NhbGVUbyxcblxuICAgIHN0YXJ0V2l0aFRhcmdldDpmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIGNjLlNjYWxlVG8ucHJvdG90eXBlLnN0YXJ0V2l0aFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCk7XG4gICAgICAgIHRoaXMuX2RlbHRhWCA9IHRoaXMuX3N0YXJ0U2NhbGVYICogdGhpcy5fZW5kU2NhbGVYIC0gdGhpcy5fc3RhcnRTY2FsZVg7XG4gICAgICAgIHRoaXMuX2RlbHRhWSA9IHRoaXMuX3N0YXJ0U2NhbGVZICogdGhpcy5fZW5kU2NhbGVZIC0gdGhpcy5fc3RhcnRTY2FsZVk7XG4gICAgfSxcblxuICAgIHJldmVyc2U6ZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYWN0aW9uID0gbmV3IGNjLlNjYWxlQnkodGhpcy5fZHVyYXRpb24sIDEgLyB0aGlzLl9lbmRTY2FsZVgsIDEgLyB0aGlzLl9lbmRTY2FsZVkpO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgdGhpcy5fcmV2ZXJzZUVhc2VMaXN0KGFjdGlvbik7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIGNsb25lOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5TY2FsZUJ5KCk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICBhY3Rpb24uaW5pdFdpdGhEdXJhdGlvbih0aGlzLl9kdXJhdGlvbiwgdGhpcy5fZW5kU2NhbGVYLCB0aGlzLl9lbmRTY2FsZVkpO1xuICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH1cbn0pO1xuLyoqXG4gKiAhI2VuXG4gKiBTY2FsZXMgYSBOb2RlIG9iamVjdCBhIHpvb20gZmFjdG9yIGJ5IG1vZGlmeWluZyBpdCdzIHNjYWxlIHByb3BlcnR5LlxuICogUmVsYXRpdmUgdG8gaXRzIGNoYW5nZXMuXG4gKiAhI3poIOaMieaMh+WumueahOWAjeaVsOe8qeaUvuiKgueCueWkp+Wwj+OAglxuICogQG1ldGhvZCBzY2FsZUJ5XG4gKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb24gZHVyYXRpb24gaW4gc2Vjb25kc1xuICogQHBhcmFtIHtOdW1iZXJ9IHN4IHN4ICBzY2FsZSBwYXJhbWV0ZXIgaW4gWFxuICogQHBhcmFtIHtOdW1iZXJ8TnVsbH0gW3N5PV0gc3kgc2NhbGUgcGFyYW1ldGVyIGluIFksIGlmIE51bGwgZXF1YWwgdG8gc3hcbiAqIEByZXR1cm4ge0FjdGlvbkludGVydmFsfVxuICogQGV4YW1wbGVcbiAqIC8vIGV4YW1wbGUgd2l0aG91dCBzeSwgaXQgc2NhbGVzIGJ5IDIgYm90aCBpbiBYIGFuZCBZXG4gKiB2YXIgYWN0aW9uQnkgPSBjYy5zY2FsZUJ5KDIsIDIpO1xuICpcbiAqIC8vZXhhbXBsZSB3aXRoIHN5LCBpdCBzY2FsZXMgYnkgMC4yNSBpbiBYIGFuZCA0LjUgaW4gWVxuICogdmFyIGFjdGlvbkJ5MiA9IGNjLnNjYWxlQnkoMiwgMC4yNSwgNC41KTtcbiAqL1xuY2Muc2NhbGVCeSA9IGZ1bmN0aW9uIChkdXJhdGlvbiwgc3gsIHN5KSB7XG4gICAgcmV0dXJuIG5ldyBjYy5TY2FsZUJ5KGR1cmF0aW9uLCBzeCwgc3kpO1xufTtcblxuLyogQmxpbmtzIGEgTm9kZSBvYmplY3QgYnkgbW9kaWZ5aW5nIGl0J3MgdmlzaWJsZSBwcm9wZXJ0eVxuICogQGNsYXNzIEJsaW5rXG4gKiBAZXh0ZW5kcyBBY3Rpb25JbnRlcnZhbFxuICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uICBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gKiBAcGFyYW0ge051bWJlcn0gYmxpbmtzICBibGlua3MgaW4gdGltZXNcbiAqIEBleGFtcGxlXG4gKiB2YXIgYWN0aW9uID0gbmV3IGNjLkJsaW5rKDIsIDEwKTtcbiAqL1xuY2MuQmxpbmsgPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLkJsaW5rJyxcbiAgICBleHRlbmRzOiBjYy5BY3Rpb25JbnRlcnZhbCxcblxuICAgIGN0b3I6ZnVuY3Rpb24gKGR1cmF0aW9uLCBibGlua3MpIHtcbiAgICAgICAgdGhpcy5fdGltZXMgPSAwO1xuICAgICAgICB0aGlzLl9vcmlnaW5hbFN0YXRlID0gZmFsc2U7XG5cdFx0YmxpbmtzICE9PSB1bmRlZmluZWQgJiYgdGhpcy5pbml0V2l0aER1cmF0aW9uKGR1cmF0aW9uLCBibGlua3MpO1xuICAgIH0sXG5cbiAgICAvKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBhY3Rpb24uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uIGR1cmF0aW9uIGluIHNlY29uZHNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYmxpbmtzIGJsaW5rcyBpbiB0aW1lc1xuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaW5pdFdpdGhEdXJhdGlvbjpmdW5jdGlvbiAoZHVyYXRpb24sIGJsaW5rcykge1xuICAgICAgICBpZiAoY2MuQWN0aW9uSW50ZXJ2YWwucHJvdG90eXBlLmluaXRXaXRoRHVyYXRpb24uY2FsbCh0aGlzLCBkdXJhdGlvbikpIHtcbiAgICAgICAgICAgIHRoaXMuX3RpbWVzID0gYmxpbmtzO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBjbG9uZTpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuQmxpbmsoKTtcbiAgICAgICAgdGhpcy5fY2xvbmVEZWNvcmF0aW9uKGFjdGlvbik7XG4gICAgICAgIGFjdGlvbi5pbml0V2l0aER1cmF0aW9uKHRoaXMuX2R1cmF0aW9uLCB0aGlzLl90aW1lcyk7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIHVwZGF0ZTpmdW5jdGlvbiAoZHQpIHtcbiAgICAgICAgZHQgPSB0aGlzLl9jb21wdXRlRWFzZVRpbWUoZHQpO1xuICAgICAgICBpZiAodGhpcy50YXJnZXQgJiYgIXRoaXMuaXNEb25lKCkpIHtcbiAgICAgICAgICAgIHZhciBzbGljZSA9IDEuMCAvIHRoaXMuX3RpbWVzO1xuICAgICAgICAgICAgdmFyIG0gPSBkdCAlIHNsaWNlO1xuICAgICAgICAgICAgdGhpcy50YXJnZXQub3BhY2l0eSA9IChtID4gKHNsaWNlIC8gMikpID8gMjU1IDogMDtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBzdGFydFdpdGhUYXJnZXQ6ZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICBjYy5BY3Rpb25JbnRlcnZhbC5wcm90b3R5cGUuc3RhcnRXaXRoVGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcbiAgICAgICAgdGhpcy5fb3JpZ2luYWxTdGF0ZSA9IHRhcmdldC5vcGFjaXR5O1xuICAgIH0sXG5cbiAgICBzdG9wOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy50YXJnZXQub3BhY2l0eSA9IHRoaXMuX29yaWdpbmFsU3RhdGU7XG4gICAgICAgIGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5zdG9wLmNhbGwodGhpcyk7XG4gICAgfSxcblxuICAgIHJldmVyc2U6ZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYWN0aW9uID0gbmV3IGNjLkJsaW5rKHRoaXMuX2R1cmF0aW9uLCB0aGlzLl90aW1lcyk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICB0aGlzLl9yZXZlcnNlRWFzZUxpc3QoYWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9XG59KTtcbi8qKlxuICogISNlbiBCbGlua3MgYSBOb2RlIG9iamVjdCBieSBtb2RpZnlpbmcgaXQncyB2aXNpYmxlIHByb3BlcnR5LlxuICogISN6aCDpl6rng4HvvIjln7rkuo7pgI/mmI7luqbvvInjgIJcbiAqIEBtZXRob2QgYmxpbmtcbiAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvbiAgZHVyYXRpb24gaW4gc2Vjb25kc1xuICogQHBhcmFtIHtOdW1iZXJ9IGJsaW5rcyBibGlua3MgaW4gdGltZXNcbiAqIEByZXR1cm4ge0FjdGlvbkludGVydmFsfVxuICogQGV4YW1wbGVcbiAqIC8vIGV4YW1wbGVcbiAqIHZhciBhY3Rpb24gPSBjYy5ibGluaygyLCAxMCk7XG4gKi9cbmNjLmJsaW5rID0gZnVuY3Rpb24gKGR1cmF0aW9uLCBibGlua3MpIHtcbiAgICByZXR1cm4gbmV3IGNjLkJsaW5rKGR1cmF0aW9uLCBibGlua3MpO1xufTtcblxuLyogRmFkZXMgYW4gb2JqZWN0IHRoYXQgaW1wbGVtZW50cyB0aGUgY2MuUkdCQVByb3RvY29sIHByb3RvY29sLiBJdCBtb2RpZmllcyB0aGUgb3BhY2l0eSBmcm9tIHRoZSBjdXJyZW50IHZhbHVlIHRvIGEgY3VzdG9tIG9uZS5cbiAqIEB3YXJuaW5nIFRoaXMgYWN0aW9uIGRvZXNuJ3Qgc3VwcG9ydCBcInJldmVyc2VcIlxuICogQGNsYXNzIEZhZGVUb1xuICogQGV4dGVuZHMgQWN0aW9uSW50ZXJ2YWxcbiAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IG9wYWNpdHkgMC0yNTUsIDAgaXMgdHJhbnNwYXJlbnRcbiAqIEBleGFtcGxlXG4gKiB2YXIgYWN0aW9uID0gbmV3IGNjLkZhZGVUbygxLjAsIDApO1xuICovXG5jYy5GYWRlVG8gPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLkZhZGVUbycsXG4gICAgZXh0ZW5kczogY2MuQWN0aW9uSW50ZXJ2YWwsXG5cbiAgICBjdG9yOmZ1bmN0aW9uIChkdXJhdGlvbiwgb3BhY2l0eSkge1xuICAgICAgICB0aGlzLl90b09wYWNpdHkgPSAwO1xuICAgICAgICB0aGlzLl9mcm9tT3BhY2l0eSA9IDA7XG4gICAgICAgIG9wYWNpdHkgIT09IHVuZGVmaW5lZCAmJiBjYy5GYWRlVG8ucHJvdG90eXBlLmluaXRXaXRoRHVyYXRpb24uY2FsbCh0aGlzLCBkdXJhdGlvbiwgb3BhY2l0eSk7XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIGFjdGlvbi5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb24gIGR1cmF0aW9uIGluIHNlY29uZHNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb3BhY2l0eVxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaW5pdFdpdGhEdXJhdGlvbjpmdW5jdGlvbiAoZHVyYXRpb24sIG9wYWNpdHkpIHtcbiAgICAgICAgaWYgKGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5pbml0V2l0aER1cmF0aW9uLmNhbGwodGhpcywgZHVyYXRpb24pKSB7XG4gICAgICAgICAgICB0aGlzLl90b09wYWNpdHkgPSBvcGFjaXR5O1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBjbG9uZTpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuRmFkZVRvKCk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICBhY3Rpb24uaW5pdFdpdGhEdXJhdGlvbih0aGlzLl9kdXJhdGlvbiwgdGhpcy5fdG9PcGFjaXR5KTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgdXBkYXRlOmZ1bmN0aW9uICh0aW1lKSB7XG4gICAgICAgIHRpbWUgPSB0aGlzLl9jb21wdXRlRWFzZVRpbWUodGltZSk7XG4gICAgICAgIHZhciBmcm9tT3BhY2l0eSA9IHRoaXMuX2Zyb21PcGFjaXR5ICE9PSB1bmRlZmluZWQgPyB0aGlzLl9mcm9tT3BhY2l0eSA6IDI1NTtcbiAgICAgICAgdGhpcy50YXJnZXQub3BhY2l0eSA9IGZyb21PcGFjaXR5ICsgKHRoaXMuX3RvT3BhY2l0eSAtIGZyb21PcGFjaXR5KSAqIHRpbWU7XG4gICAgfSxcblxuICAgIHN0YXJ0V2l0aFRhcmdldDpmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5zdGFydFdpdGhUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpO1xuICAgICAgICB0aGlzLl9mcm9tT3BhY2l0eSA9IHRhcmdldC5vcGFjaXR5O1xuICAgIH1cbn0pO1xuXG4vKipcbiAqICEjZW5cbiAqIEZhZGVzIGFuIG9iamVjdCB0aGF0IGltcGxlbWVudHMgdGhlIGNjLlJHQkFQcm90b2NvbCBwcm90b2NvbC5cbiAqIEl0IG1vZGlmaWVzIHRoZSBvcGFjaXR5IGZyb20gdGhlIGN1cnJlbnQgdmFsdWUgdG8gYSBjdXN0b20gb25lLlxuICogISN6aCDkv67mlLnpgI/mmI7luqbliLDmjIflrprlgLzjgIJcbiAqIEBtZXRob2QgZmFkZVRvXG4gKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSBvcGFjaXR5IDAtMjU1LCAwIGlzIHRyYW5zcGFyZW50XG4gKiBAcmV0dXJuIHtBY3Rpb25JbnRlcnZhbH1cbiAqIEBleGFtcGxlXG4gKiAvLyBleGFtcGxlXG4gKiB2YXIgYWN0aW9uID0gY2MuZmFkZVRvKDEuMCwgMCk7XG4gKi9cbmNjLmZhZGVUbyA9IGZ1bmN0aW9uIChkdXJhdGlvbiwgb3BhY2l0eSkge1xuICAgIHJldHVybiBuZXcgY2MuRmFkZVRvKGR1cmF0aW9uLCBvcGFjaXR5KTtcbn07XG5cbi8qIEZhZGVzIEluIGFuIG9iamVjdCB0aGF0IGltcGxlbWVudHMgdGhlIGNjLlJHQkFQcm90b2NvbCBwcm90b2NvbC4gSXQgbW9kaWZpZXMgdGhlIG9wYWNpdHkgZnJvbSAwIHRvIDI1NS48YnIvPlxuICogVGhlIFwicmV2ZXJzZVwiIG9mIHRoaXMgYWN0aW9uIGlzIEZhZGVPdXRcbiAqIEBjbGFzcyBGYWRlSW5cbiAqIEBleHRlbmRzIEZhZGVUb1xuICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uIGR1cmF0aW9uIGluIHNlY29uZHNcbiAqL1xuY2MuRmFkZUluID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5GYWRlSW4nLFxuICAgIGV4dGVuZHM6IGNjLkZhZGVUbyxcblxuICAgIGN0b3I6ZnVuY3Rpb24gKGR1cmF0aW9uKSB7XG4gICAgICAgIGlmIChkdXJhdGlvbiA9PSBudWxsKVxuICAgICAgICAgICAgZHVyYXRpb24gPSAwO1xuICAgICAgICB0aGlzLl9yZXZlcnNlQWN0aW9uID0gbnVsbDtcbiAgICAgICAgdGhpcy5pbml0V2l0aER1cmF0aW9uKGR1cmF0aW9uLCAyNTUpO1xuICAgIH0sXG5cbiAgICByZXZlcnNlOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5GYWRlT3V0KCk7XG4gICAgICAgIGFjdGlvbi5pbml0V2l0aER1cmF0aW9uKHRoaXMuX2R1cmF0aW9uLCAwKTtcbiAgICAgICAgdGhpcy5fY2xvbmVEZWNvcmF0aW9uKGFjdGlvbik7XG4gICAgICAgIHRoaXMuX3JldmVyc2VFYXNlTGlzdChhY3Rpb24pO1xuICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG5cbiAgICBjbG9uZTpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuRmFkZUluKCk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICBhY3Rpb24uaW5pdFdpdGhEdXJhdGlvbih0aGlzLl9kdXJhdGlvbiwgdGhpcy5fdG9PcGFjaXR5KTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgc3RhcnRXaXRoVGFyZ2V0OmZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgaWYodGhpcy5fcmV2ZXJzZUFjdGlvbilcbiAgICAgICAgICAgIHRoaXMuX3RvT3BhY2l0eSA9IHRoaXMuX3JldmVyc2VBY3Rpb24uX2Zyb21PcGFjaXR5O1xuICAgICAgICBjYy5GYWRlVG8ucHJvdG90eXBlLnN0YXJ0V2l0aFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCk7XG4gICAgfVxufSk7XG5cbi8qKlxuICogISNlbiBGYWRlcyBJbiBhbiBvYmplY3QgdGhhdCBpbXBsZW1lbnRzIHRoZSBjYy5SR0JBUHJvdG9jb2wgcHJvdG9jb2wuIEl0IG1vZGlmaWVzIHRoZSBvcGFjaXR5IGZyb20gMCB0byAyNTUuXG4gKiAhI3poIOa4kOaYvuaViOaenOOAglxuICogQG1ldGhvZCBmYWRlSW5cbiAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvbiBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gKiBAcmV0dXJuIHtBY3Rpb25JbnRlcnZhbH1cbiAqIEBleGFtcGxlXG4gKiAvL2V4YW1wbGVcbiAqIHZhciBhY3Rpb24gPSBjYy5mYWRlSW4oMS4wKTtcbiAqL1xuY2MuZmFkZUluID0gZnVuY3Rpb24gKGR1cmF0aW9uKSB7XG4gICAgcmV0dXJuIG5ldyBjYy5GYWRlSW4oZHVyYXRpb24pO1xufTtcblxuXG4vKiBGYWRlcyBPdXQgYW4gb2JqZWN0IHRoYXQgaW1wbGVtZW50cyB0aGUgY2MuUkdCQVByb3RvY29sIHByb3RvY29sLiBJdCBtb2RpZmllcyB0aGUgb3BhY2l0eSBmcm9tIDI1NSB0byAwLlxuICogVGhlIFwicmV2ZXJzZVwiIG9mIHRoaXMgYWN0aW9uIGlzIEZhZGVJblxuICogQGNsYXNzIEZhZGVPdXRcbiAqIEBleHRlbmRzIEZhZGVUb1xuICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uIGR1cmF0aW9uIGluIHNlY29uZHNcbiAqL1xuY2MuRmFkZU91dCA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuRmFkZU91dCcsXG4gICAgZXh0ZW5kczogY2MuRmFkZVRvLFxuXG4gICAgY3RvcjpmdW5jdGlvbiAoZHVyYXRpb24pIHtcbiAgICAgICAgaWYgKGR1cmF0aW9uID09IG51bGwpXG4gICAgICAgICAgICBkdXJhdGlvbiA9IDA7XG4gICAgICAgIHRoaXMuX3JldmVyc2VBY3Rpb24gPSBudWxsO1xuICAgICAgICB0aGlzLmluaXRXaXRoRHVyYXRpb24oZHVyYXRpb24sIDApO1xuICAgIH0sXG5cbiAgICByZXZlcnNlOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5GYWRlSW4oKTtcbiAgICAgICAgYWN0aW9uLl9yZXZlcnNlQWN0aW9uID0gdGhpcztcbiAgICAgICAgYWN0aW9uLmluaXRXaXRoRHVyYXRpb24odGhpcy5fZHVyYXRpb24sIDI1NSk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICB0aGlzLl9yZXZlcnNlRWFzZUxpc3QoYWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgY2xvbmU6ZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYWN0aW9uID0gbmV3IGNjLkZhZGVPdXQoKTtcbiAgICAgICAgdGhpcy5fY2xvbmVEZWNvcmF0aW9uKGFjdGlvbik7XG4gICAgICAgIGFjdGlvbi5pbml0V2l0aER1cmF0aW9uKHRoaXMuX2R1cmF0aW9uLCB0aGlzLl90b09wYWNpdHkpO1xuICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqICEjZW4gRmFkZXMgT3V0IGFuIG9iamVjdCB0aGF0IGltcGxlbWVudHMgdGhlIGNjLlJHQkFQcm90b2NvbCBwcm90b2NvbC4gSXQgbW9kaWZpZXMgdGhlIG9wYWNpdHkgZnJvbSAyNTUgdG8gMC5cbiAqICEjemgg5riQ6ZqQ5pWI5p6c44CCXG4gKiBAbWV0aG9kIGZhZGVPdXRcbiAqIEBwYXJhbSB7TnVtYmVyfSBkICBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gKiBAcmV0dXJuIHtBY3Rpb25JbnRlcnZhbH1cbiAqIEBleGFtcGxlXG4gKiAvLyBleGFtcGxlXG4gKiB2YXIgYWN0aW9uID0gY2MuZmFkZU91dCgxLjApO1xuICovXG5jYy5mYWRlT3V0ID0gZnVuY3Rpb24gKGQpIHtcbiAgICByZXR1cm4gbmV3IGNjLkZhZGVPdXQoZCk7XG59O1xuXG4vKiBUaW50cyBhIE5vZGUgdGhhdCBpbXBsZW1lbnRzIHRoZSBjYy5Ob2RlUkdCIHByb3RvY29sIGZyb20gY3VycmVudCB0aW50IHRvIGEgY3VzdG9tIG9uZS5cbiAqIEB3YXJuaW5nIFRoaXMgYWN0aW9uIGRvZXNuJ3Qgc3VwcG9ydCBcInJldmVyc2VcIlxuICogQGNsYXNzIFRpbnRUb1xuICogQGV4dGVuZHMgQWN0aW9uSW50ZXJ2YWxcbiAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IHJlZCAwLTI1NVxuICogQHBhcmFtIHtOdW1iZXJ9IGdyZWVuICAwLTI1NVxuICogQHBhcmFtIHtOdW1iZXJ9IGJsdWUgMC0yNTVcbiAqIEBleGFtcGxlXG4gKiB2YXIgYWN0aW9uID0gbmV3IGNjLlRpbnRUbygyLCAyNTUsIDAsIDI1NSk7XG4gKi9cbmNjLlRpbnRUbyA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuVGludFRvJyxcbiAgICBleHRlbmRzOiBjYy5BY3Rpb25JbnRlcnZhbCxcblxuICAgIGN0b3I6ZnVuY3Rpb24gKGR1cmF0aW9uLCByZWQsIGdyZWVuLCBibHVlKSB7XG4gICAgICAgIHRoaXMuX3RvID0gY2MuY29sb3IoMCwgMCwgMCk7XG4gICAgICAgIHRoaXMuX2Zyb20gPSBjYy5jb2xvcigwLCAwLCAwKTtcblxuICAgICAgICBpZiAocmVkIGluc3RhbmNlb2YgY2MuQ29sb3IpIHtcbiAgICAgICAgICAgIGJsdWUgPSByZWQuYjtcbiAgICAgICAgICAgIGdyZWVuID0gcmVkLmc7XG4gICAgICAgICAgICByZWQgPSByZWQucjtcbiAgICAgICAgfVxuXG4gICAgICAgIGJsdWUgIT09IHVuZGVmaW5lZCAmJiB0aGlzLmluaXRXaXRoRHVyYXRpb24oZHVyYXRpb24sIHJlZCwgZ3JlZW4sIGJsdWUpO1xuICAgIH0sXG5cbiAgICAvKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBhY3Rpb24uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJlZCAwLTI1NVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBncmVlbiAwLTI1NVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBibHVlIDAtMjU1XG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpbml0V2l0aER1cmF0aW9uOmZ1bmN0aW9uIChkdXJhdGlvbiwgcmVkLCBncmVlbiwgYmx1ZSkge1xuICAgICAgICBpZiAoY2MuQWN0aW9uSW50ZXJ2YWwucHJvdG90eXBlLmluaXRXaXRoRHVyYXRpb24uY2FsbCh0aGlzLCBkdXJhdGlvbikpIHtcbiAgICAgICAgICAgIHRoaXMuX3RvID0gY2MuY29sb3IocmVkLCBncmVlbiwgYmx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIGNsb25lOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5UaW50VG8oKTtcbiAgICAgICAgdGhpcy5fY2xvbmVEZWNvcmF0aW9uKGFjdGlvbik7XG4gICAgICAgIHZhciBsb2NUbyA9IHRoaXMuX3RvO1xuICAgICAgICBhY3Rpb24uaW5pdFdpdGhEdXJhdGlvbih0aGlzLl9kdXJhdGlvbiwgbG9jVG8uciwgbG9jVG8uZywgbG9jVG8uYik7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIHN0YXJ0V2l0aFRhcmdldDpmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5zdGFydFdpdGhUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpO1xuXG4gICAgICAgIHRoaXMuX2Zyb20gPSB0aGlzLnRhcmdldC5jb2xvcjtcbiAgICB9LFxuXG4gICAgdXBkYXRlOmZ1bmN0aW9uIChkdCkge1xuICAgICAgICBkdCA9IHRoaXMuX2NvbXB1dGVFYXNlVGltZShkdCk7XG4gICAgICAgIHZhciBsb2NGcm9tID0gdGhpcy5fZnJvbSwgbG9jVG8gPSB0aGlzLl90bztcbiAgICAgICAgaWYgKGxvY0Zyb20pIHtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0LmNvbG9yID0gY2MuY29sb3IoXG4gICAgICAgICAgICAgICAgICAgIGxvY0Zyb20uciArIChsb2NUby5yIC0gbG9jRnJvbS5yKSAqIGR0LFxuICAgICAgICAgICAgICAgICAgICBsb2NGcm9tLmcgKyAobG9jVG8uZyAtIGxvY0Zyb20uZykgKiBkdCxcbiAgICAgICAgICAgICAgICAgICAgbG9jRnJvbS5iICsgKGxvY1RvLmIgLSBsb2NGcm9tLmIpICogZHQpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbi8qKlxuICogISNlbiBUaW50cyBhIE5vZGUgdGhhdCBpbXBsZW1lbnRzIHRoZSBjYy5Ob2RlUkdCIHByb3RvY29sIGZyb20gY3VycmVudCB0aW50IHRvIGEgY3VzdG9tIG9uZS5cbiAqICEjemgg5L+u5pS56aKc6Imy5Yiw5oyH5a6a5YC844CCXG4gKiBAbWV0aG9kIHRpbnRUb1xuICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gcmVkIDAtMjU1XG4gKiBAcGFyYW0ge051bWJlcn0gZ3JlZW4gIDAtMjU1XG4gKiBAcGFyYW0ge051bWJlcn0gYmx1ZSAwLTI1NVxuICogQHJldHVybiB7QWN0aW9uSW50ZXJ2YWx9XG4gKiBAZXhhbXBsZVxuICogLy8gZXhhbXBsZVxuICogdmFyIGFjdGlvbiA9IGNjLnRpbnRUbygyLCAyNTUsIDAsIDI1NSk7XG4gKi9cbmNjLnRpbnRUbyA9IGZ1bmN0aW9uIChkdXJhdGlvbiwgcmVkLCBncmVlbiwgYmx1ZSkge1xuICAgIHJldHVybiBuZXcgY2MuVGludFRvKGR1cmF0aW9uLCByZWQsIGdyZWVuLCBibHVlKTtcbn07XG5cblxuLyogVGludHMgYSBOb2RlIHRoYXQgaW1wbGVtZW50cyB0aGUgY2MuTm9kZVJHQiBwcm90b2NvbCBmcm9tIGN1cnJlbnQgdGludCB0byBhIGN1c3RvbSBvbmUuXG4gKiBSZWxhdGl2ZSB0byB0aGVpciBvd24gY29sb3IgY2hhbmdlLlxuICogQGNsYXNzIFRpbnRCeVxuICogQGV4dGVuZHMgQWN0aW9uSW50ZXJ2YWxcbiAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvbiAgZHVyYXRpb24gaW4gc2Vjb25kc1xuICogQHBhcmFtIHtOdW1iZXJ9IGRlbHRhUmVkXG4gKiBAcGFyYW0ge051bWJlcn0gZGVsdGFHcmVlblxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbHRhQmx1ZVxuICogQGV4YW1wbGVcbiAqIHZhciBhY3Rpb24gPSBuZXcgY2MuVGludEJ5KDIsIC0xMjcsIC0yNTUsIC0xMjcpO1xuICovXG5jYy5UaW50QnkgPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLlRpbnRCeScsXG4gICAgZXh0ZW5kczogY2MuQWN0aW9uSW50ZXJ2YWwsXG5cbiAgICBjdG9yOmZ1bmN0aW9uIChkdXJhdGlvbiwgZGVsdGFSZWQsIGRlbHRhR3JlZW4sIGRlbHRhQmx1ZSkge1xuICAgICAgICB0aGlzLl9kZWx0YVIgPSAwO1xuICAgICAgICB0aGlzLl9kZWx0YUcgPSAwO1xuICAgICAgICB0aGlzLl9kZWx0YUIgPSAwO1xuICAgICAgICB0aGlzLl9mcm9tUiA9IDA7XG4gICAgICAgIHRoaXMuX2Zyb21HID0gMDtcbiAgICAgICAgdGhpcy5fZnJvbUIgPSAwO1xuXHRcdGRlbHRhQmx1ZSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuaW5pdFdpdGhEdXJhdGlvbihkdXJhdGlvbiwgZGVsdGFSZWQsIGRlbHRhR3JlZW4sIGRlbHRhQmx1ZSk7XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIGFjdGlvbi5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZGVsdGFSZWQgMC0yNTVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZGVsdGFHcmVlbiAwLTI1NVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkZWx0YUJsdWUgMC0yNTVcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGluaXRXaXRoRHVyYXRpb246ZnVuY3Rpb24gKGR1cmF0aW9uLCBkZWx0YVJlZCwgZGVsdGFHcmVlbiwgZGVsdGFCbHVlKSB7XG4gICAgICAgIGlmIChjYy5BY3Rpb25JbnRlcnZhbC5wcm90b3R5cGUuaW5pdFdpdGhEdXJhdGlvbi5jYWxsKHRoaXMsIGR1cmF0aW9uKSkge1xuICAgICAgICAgICAgdGhpcy5fZGVsdGFSID0gZGVsdGFSZWQ7XG4gICAgICAgICAgICB0aGlzLl9kZWx0YUcgPSBkZWx0YUdyZWVuO1xuICAgICAgICAgICAgdGhpcy5fZGVsdGFCID0gZGVsdGFCbHVlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBjbG9uZTpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuVGludEJ5KCk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICBhY3Rpb24uaW5pdFdpdGhEdXJhdGlvbih0aGlzLl9kdXJhdGlvbiwgdGhpcy5fZGVsdGFSLCB0aGlzLl9kZWx0YUcsIHRoaXMuX2RlbHRhQik7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIHN0YXJ0V2l0aFRhcmdldDpmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5zdGFydFdpdGhUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpO1xuXG4gICAgICAgIHZhciBjb2xvciA9IHRhcmdldC5jb2xvcjtcbiAgICAgICAgdGhpcy5fZnJvbVIgPSBjb2xvci5yO1xuICAgICAgICB0aGlzLl9mcm9tRyA9IGNvbG9yLmc7XG4gICAgICAgIHRoaXMuX2Zyb21CID0gY29sb3IuYjtcbiAgICB9LFxuXG4gICAgdXBkYXRlOmZ1bmN0aW9uIChkdCkge1xuICAgICAgICBkdCA9IHRoaXMuX2NvbXB1dGVFYXNlVGltZShkdCk7XG5cbiAgICAgICAgdGhpcy50YXJnZXQuY29sb3IgPSBjYy5jb2xvcih0aGlzLl9mcm9tUiArIHRoaXMuX2RlbHRhUiAqIGR0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZnJvbUcgKyB0aGlzLl9kZWx0YUcgKiBkdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zyb21CICsgdGhpcy5fZGVsdGFCICogZHQpO1xuICAgIH0sXG5cbiAgICByZXZlcnNlOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5UaW50QnkodGhpcy5fZHVyYXRpb24sIC10aGlzLl9kZWx0YVIsIC10aGlzLl9kZWx0YUcsIC10aGlzLl9kZWx0YUIpO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgdGhpcy5fcmV2ZXJzZUVhc2VMaXN0KGFjdGlvbik7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfVxufSk7XG5cbi8qKlxuICogISNlblxuICogVGludHMgYSBOb2RlIHRoYXQgaW1wbGVtZW50cyB0aGUgY2MuTm9kZVJHQiBwcm90b2NvbCBmcm9tIGN1cnJlbnQgdGludCB0byBhIGN1c3RvbSBvbmUuXG4gKiBSZWxhdGl2ZSB0byB0aGVpciBvd24gY29sb3IgY2hhbmdlLlxuICogISN6aCDmjInnhafmjIflrprnmoTlop7ph4/kv67mlLnpopzoibLjgIJcbiAqIEBtZXRob2QgdGludEJ5XG4gKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb24gIGR1cmF0aW9uIGluIHNlY29uZHNcbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWx0YVJlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbHRhR3JlZW5cbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWx0YUJsdWVcbiAqIEByZXR1cm4ge0FjdGlvbkludGVydmFsfVxuICogQGV4YW1wbGVcbiAqIC8vIGV4YW1wbGVcbiAqIHZhciBhY3Rpb24gPSBjYy50aW50QnkoMiwgLTEyNywgLTI1NSwgLTEyNyk7XG4gKi9cbmNjLnRpbnRCeSA9IGZ1bmN0aW9uIChkdXJhdGlvbiwgZGVsdGFSZWQsIGRlbHRhR3JlZW4sIGRlbHRhQmx1ZSkge1xuICAgIHJldHVybiBuZXcgY2MuVGludEJ5KGR1cmF0aW9uLCBkZWx0YVJlZCwgZGVsdGFHcmVlbiwgZGVsdGFCbHVlKTtcbn07XG5cbi8qIERlbGF5cyB0aGUgYWN0aW9uIGEgY2VydGFpbiBhbW91bnQgb2Ygc2Vjb25kc1xuICogQGNsYXNzIERlbGF5VGltZVxuICogQGV4dGVuZHMgQWN0aW9uSW50ZXJ2YWxcbiAqL1xuY2MuRGVsYXlUaW1lID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5EZWxheVRpbWUnLFxuICAgIGV4dGVuZHM6IGNjLkFjdGlvbkludGVydmFsLFxuXG4gICAgdXBkYXRlOmZ1bmN0aW9uIChkdCkge30sXG5cbiAgICByZXZlcnNlOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5EZWxheVRpbWUodGhpcy5fZHVyYXRpb24pO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgdGhpcy5fcmV2ZXJzZUVhc2VMaXN0KGFjdGlvbik7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIGNsb25lOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5EZWxheVRpbWUoKTtcbiAgICAgICAgdGhpcy5fY2xvbmVEZWNvcmF0aW9uKGFjdGlvbik7XG4gICAgICAgIGFjdGlvbi5pbml0V2l0aER1cmF0aW9uKHRoaXMuX2R1cmF0aW9uKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9XG59KTtcblxuLyoqXG4gKiAhI2VuIERlbGF5cyB0aGUgYWN0aW9uIGEgY2VydGFpbiBhbW91bnQgb2Ygc2Vjb25kcy5cbiAqICEjemgg5bu26L+f5oyH5a6a55qE5pe26Ze06YeP44CCXG4gKiBAbWV0aG9kIGRlbGF5VGltZVxuICogQHBhcmFtIHtOdW1iZXJ9IGQgZHVyYXRpb24gaW4gc2Vjb25kc1xuICogQHJldHVybiB7QWN0aW9uSW50ZXJ2YWx9XG4gKiBAZXhhbXBsZVxuICogLy8gZXhhbXBsZVxuICogdmFyIGRlbGF5ID0gY2MuZGVsYXlUaW1lKDEpO1xuICovXG5jYy5kZWxheVRpbWUgPSBmdW5jdGlvbiAoZCkge1xuICAgIHJldHVybiBuZXcgY2MuRGVsYXlUaW1lKGQpO1xufTtcblxuLypcbiAqIDxwPlxuICogRXhlY3V0ZXMgYW4gYWN0aW9uIGluIHJldmVyc2Ugb3JkZXIsIGZyb20gdGltZT1kdXJhdGlvbiB0byB0aW1lPTAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyLz5cbiAqIEB3YXJuaW5nIFVzZSB0aGlzIGFjdGlvbiBjYXJlZnVsbHkuIFRoaXMgYWN0aW9uIGlzIG5vdCBzZXF1ZW5jZWFibGUuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyLz5cbiAqIFVzZSBpdCBhcyB0aGUgZGVmYXVsdCBcInJldmVyc2VkXCIgbWV0aG9kIG9mIHlvdXIgb3duIGFjdGlvbnMsIGJ1dCB1c2luZyBpdCBvdXRzaWRlIHRoZSBcInJldmVyc2VkXCIgICAgICA8YnIvPlxuICogc2NvcGUgaXMgbm90IHJlY29tbWVuZGVkLlxuICogPC9wPlxuICogQGNsYXNzIFJldmVyc2VUaW1lXG4gKiBAZXh0ZW5kcyBBY3Rpb25JbnRlcnZhbFxuICogQHBhcmFtIHtGaW5pdGVUaW1lQWN0aW9ufSBhY3Rpb25cbiAqIEBleGFtcGxlXG4gKiAgdmFyIHJldmVyc2UgPSBuZXcgY2MuUmV2ZXJzZVRpbWUodGhpcyk7XG4gKi9cbmNjLlJldmVyc2VUaW1lID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5SZXZlcnNlVGltZScsXG4gICAgZXh0ZW5kczogY2MuQWN0aW9uSW50ZXJ2YWwsXG5cbiAgICBjdG9yOmZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgdGhpcy5fb3RoZXIgPSBudWxsO1xuXHRcdGFjdGlvbiAmJiB0aGlzLmluaXRXaXRoQWN0aW9uKGFjdGlvbik7XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogQHBhcmFtIHtGaW5pdGVUaW1lQWN0aW9ufSBhY3Rpb25cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGluaXRXaXRoQWN0aW9uOmZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKCFhY3Rpb24pIHtcbiAgICAgICAgICAgIGNjLmVycm9ySUQoMTAyOCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFjdGlvbiA9PT0gdGhpcy5fb3RoZXIpIHtcbiAgICAgICAgICAgIGNjLmVycm9ySUQoMTAyOSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2MuQWN0aW9uSW50ZXJ2YWwucHJvdG90eXBlLmluaXRXaXRoRHVyYXRpb24uY2FsbCh0aGlzLCBhY3Rpb24uX2R1cmF0aW9uKSkge1xuICAgICAgICAgICAgLy8gRG9uJ3QgbGVhayBpZiBhY3Rpb24gaXMgcmV1c2VkXG4gICAgICAgICAgICB0aGlzLl9vdGhlciA9IGFjdGlvbjtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgY2xvbmU6ZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYWN0aW9uID0gbmV3IGNjLlJldmVyc2VUaW1lKCk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICBhY3Rpb24uaW5pdFdpdGhBY3Rpb24odGhpcy5fb3RoZXIuY2xvbmUoKSk7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIHN0YXJ0V2l0aFRhcmdldDpmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5zdGFydFdpdGhUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpO1xuICAgICAgICB0aGlzLl9vdGhlci5zdGFydFdpdGhUYXJnZXQodGFyZ2V0KTtcbiAgICB9LFxuXG4gICAgdXBkYXRlOmZ1bmN0aW9uIChkdCkge1xuICAgICAgICBkdCA9IHRoaXMuX2NvbXB1dGVFYXNlVGltZShkdCk7XG4gICAgICAgIGlmICh0aGlzLl9vdGhlcilcbiAgICAgICAgICAgIHRoaXMuX290aGVyLnVwZGF0ZSgxIC0gZHQpO1xuICAgIH0sXG5cbiAgICByZXZlcnNlOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX290aGVyLmNsb25lKCk7XG4gICAgfSxcblxuICAgIHN0b3A6ZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9vdGhlci5zdG9wKCk7XG4gICAgICAgIGNjLkFjdGlvbi5wcm90b3R5cGUuc3RvcC5jYWxsKHRoaXMpO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqICEjZW4gRXhlY3V0ZXMgYW4gYWN0aW9uIGluIHJldmVyc2Ugb3JkZXIsIGZyb20gdGltZT1kdXJhdGlvbiB0byB0aW1lPTAuXG4gKiAhI3poIOWPjei9rOebruagh+WKqOS9nOeahOaXtumXtOi9tOOAglxuICogQG1ldGhvZCByZXZlcnNlVGltZVxuICogQHBhcmFtIHtGaW5pdGVUaW1lQWN0aW9ufSBhY3Rpb25cbiAqIEByZXR1cm4ge0FjdGlvbkludGVydmFsfVxuICogQGV4YW1wbGVcbiAqIC8vIGV4YW1wbGVcbiAqICB2YXIgcmV2ZXJzZSA9IGNjLnJldmVyc2VUaW1lKHRoaXMpO1xuICovXG5jYy5yZXZlcnNlVGltZSA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICByZXR1cm4gbmV3IGNjLlJldmVyc2VUaW1lKGFjdGlvbik7XG59O1xuXG4vKlxuICogPHA+XG4gKiBPdmVycmlkZXMgdGhlIHRhcmdldCBvZiBhbiBhY3Rpb24gc28gdGhhdCBpdCBhbHdheXMgcnVucyBvbiB0aGUgdGFyZ2V0PGJyLz5cbiAqIHNwZWNpZmllZCBhdCBhY3Rpb24gY3JlYXRpb24gcmF0aGVyIHRoYW4gdGhlIG9uZSBzcGVjaWZpZWQgYnkgcnVuQWN0aW9uLlxuICogPC9wPlxuICogQGNsYXNzIFRhcmdldGVkQWN0aW9uXG4gKiBAZXh0ZW5kcyBBY3Rpb25JbnRlcnZhbFxuICogQHBhcmFtIHtOb2RlfSB0YXJnZXRcbiAqIEBwYXJhbSB7RmluaXRlVGltZUFjdGlvbn0gYWN0aW9uXG4gKi9cbmNjLlRhcmdldGVkQWN0aW9uID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5UYXJnZXRlZEFjdGlvbicsXG4gICAgZXh0ZW5kczogY2MuQWN0aW9uSW50ZXJ2YWwsXG5cbiAgICBjdG9yOiBmdW5jdGlvbiAodGFyZ2V0LCBhY3Rpb24pIHtcbiAgICAgICAgdGhpcy5fYWN0aW9uID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZm9yY2VkVGFyZ2V0ID0gbnVsbDtcblx0XHRhY3Rpb24gJiYgdGhpcy5pbml0V2l0aFRhcmdldCh0YXJnZXQsIGFjdGlvbik7XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogSW5pdCBhbiBhY3Rpb24gd2l0aCB0aGUgc3BlY2lmaWVkIGFjdGlvbiBhbmQgZm9yY2VkIHRhcmdldFxuICAgICAqIEBwYXJhbSB7Tm9kZX0gdGFyZ2V0XG4gICAgICogQHBhcmFtIHtGaW5pdGVUaW1lQWN0aW9ufSBhY3Rpb25cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGluaXRXaXRoVGFyZ2V0OmZ1bmN0aW9uICh0YXJnZXQsIGFjdGlvbikge1xuICAgICAgICBpZiAodGhpcy5pbml0V2l0aER1cmF0aW9uKGFjdGlvbi5fZHVyYXRpb24pKSB7XG4gICAgICAgICAgICB0aGlzLl9mb3JjZWRUYXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgICAgICB0aGlzLl9hY3Rpb24gPSBhY3Rpb247XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIGNsb25lOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5UYXJnZXRlZEFjdGlvbigpO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgYWN0aW9uLmluaXRXaXRoVGFyZ2V0KHRoaXMuX2ZvcmNlZFRhcmdldCwgdGhpcy5fYWN0aW9uLmNsb25lKCkpO1xuICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG5cbiAgICBzdGFydFdpdGhUYXJnZXQ6ZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICBjYy5BY3Rpb25JbnRlcnZhbC5wcm90b3R5cGUuc3RhcnRXaXRoVGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcbiAgICAgICAgdGhpcy5fYWN0aW9uLnN0YXJ0V2l0aFRhcmdldCh0aGlzLl9mb3JjZWRUYXJnZXQpO1xuICAgIH0sXG5cbiAgICBzdG9wOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fYWN0aW9uLnN0b3AoKTtcbiAgICB9LFxuXG4gICAgdXBkYXRlOmZ1bmN0aW9uIChkdCkge1xuICAgICAgICBkdCA9IHRoaXMuX2NvbXB1dGVFYXNlVGltZShkdCk7XG4gICAgICAgIHRoaXMuX2FjdGlvbi51cGRhdGUoZHQpO1xuICAgIH0sXG5cbiAgICAvKlxuICAgICAqIHJldHVybiB0aGUgdGFyZ2V0IHRoYXQgdGhlIGFjdGlvbiB3aWxsIGJlIGZvcmNlZCB0byBydW4gd2l0aFxuICAgICAqIEByZXR1cm4ge05vZGV9XG4gICAgICovXG4gICAgZ2V0Rm9yY2VkVGFyZ2V0OmZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZvcmNlZFRhcmdldDtcbiAgICB9LFxuXG4gICAgLypcbiAgICAgKiBzZXQgdGhlIHRhcmdldCB0aGF0IHRoZSBhY3Rpb24gd2lsbCBiZSBmb3JjZWQgdG8gcnVuIHdpdGhcbiAgICAgKiBAcGFyYW0ge05vZGV9IGZvcmNlZFRhcmdldFxuICAgICAqL1xuICAgIHNldEZvcmNlZFRhcmdldDpmdW5jdGlvbiAoZm9yY2VkVGFyZ2V0KSB7XG4gICAgICAgIGlmICh0aGlzLl9mb3JjZWRUYXJnZXQgIT09IGZvcmNlZFRhcmdldClcbiAgICAgICAgICAgIHRoaXMuX2ZvcmNlZFRhcmdldCA9IGZvcmNlZFRhcmdldDtcbiAgICB9XG59KTtcblxuLyoqXG4gKiAhI2VuIENyZWF0ZSBhbiBhY3Rpb24gd2l0aCB0aGUgc3BlY2lmaWVkIGFjdGlvbiBhbmQgZm9yY2VkIHRhcmdldC5cbiAqICEjemgg55So5bey5pyJ5Yqo5L2c5ZKM5LiA5Liq5paw55qE55uu5qCH6IqC54K55Yib5bu65Yqo5L2c44CCXG4gKiBAbWV0aG9kIHRhcmdldGVkQWN0aW9uXG4gKiBAcGFyYW0ge05vZGV9IHRhcmdldFxuICogQHBhcmFtIHtGaW5pdGVUaW1lQWN0aW9ufSBhY3Rpb25cbiAqIEByZXR1cm4ge0FjdGlvbkludGVydmFsfVxuICovXG5jYy50YXJnZXRlZEFjdGlvbiA9IGZ1bmN0aW9uICh0YXJnZXQsIGFjdGlvbikge1xuICAgIHJldHVybiBuZXcgY2MuVGFyZ2V0ZWRBY3Rpb24odGFyZ2V0LCBhY3Rpb24pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMDgtMjAxMCBSaWNhcmRvIFF1ZXNhZGFcbiBDb3B5cmlnaHQgKGMpIDIwMTEtMjAxMiBjb2NvczJkLXgub3JnXG4gQ29weXJpZ2h0IChjKSAyMDEzLTIwMTYgQ2h1a29uZyBUZWNobm9sb2dpZXMgSW5jLlxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxuXG4gaHR0cDovL3d3dy5jb2NvczJkLXgub3JnXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4vKipcbiAqIEBtb2R1bGUgY2NcbiAqL1xuXG4vKipcbiAqICEjZW5cbiAqIDxwPiBBbiBpbnRlcnZhbCBhY3Rpb24gaXMgYW4gYWN0aW9uIHRoYXQgdGFrZXMgcGxhY2Ugd2l0aGluIGEgY2VydGFpbiBwZXJpb2Qgb2YgdGltZS4gPGJyLz5cbiAqIEl0IGhhcyBhbiBzdGFydCB0aW1lLCBhbmQgYSBmaW5pc2ggdGltZS4gVGhlIGZpbmlzaCB0aW1lIGlzIHRoZSBwYXJhbWV0ZXI8YnIvPlxuICogZHVyYXRpb24gcGx1cyB0aGUgc3RhcnQgdGltZS48L3A+XG4gKlxuICogPHA+VGhlc2UgQ0NBY3Rpb25JbnRlcnZhbCBhY3Rpb25zIGhhdmUgc29tZSBpbnRlcmVzdGluZyBwcm9wZXJ0aWVzLCBsaWtlOjxici8+XG4gKiAtIFRoZXkgY2FuIHJ1biBub3JtYWxseSAoZGVmYXVsdCkgIDxici8+XG4gKiAtIFRoZXkgY2FuIHJ1biByZXZlcnNlZCB3aXRoIHRoZSByZXZlcnNlIG1ldGhvZCAgIDxici8+XG4gKiAtIFRoZXkgY2FuIHJ1biB3aXRoIHRoZSB0aW1lIGFsdGVyZWQgd2l0aCB0aGUgQWNjZWxlcmF0ZSwgQWNjZWxEZWNjZWwgYW5kIFNwZWVkIGFjdGlvbnMuIDwvcD5cbiAqXG4gKiA8cD5Gb3IgZXhhbXBsZSwgeW91IGNhbiBzaW11bGF0ZSBhIFBpbmcgUG9uZyBlZmZlY3QgcnVubmluZyB0aGUgYWN0aW9uIG5vcm1hbGx5IGFuZDxici8+XG4gKiB0aGVuIHJ1bm5pbmcgaXQgYWdhaW4gaW4gUmV2ZXJzZSBtb2RlLiA8L3A+XG4gKiAhI3poIOaXtumXtOmXtOmalOWKqOS9nO+8jOi/meenjeWKqOS9nOWcqOW3suWumuaXtumXtOWGheWujOaIkO+8jOe7p+aJvyBGaW5pdGVUaW1lQWN0aW9u44CCXG4gKiBAY2xhc3MgQWN0aW9uSW50ZXJ2YWxcbiAqIEBleHRlbmRzIEZpbml0ZVRpbWVBY3Rpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSBkIGR1cmF0aW9uIGluIHNlY29uZHNcbiAqL1xuY2MuQWN0aW9uSW50ZXJ2YWwgPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLkFjdGlvbkludGVydmFsJyxcbiAgICBleHRlbmRzOiBjYy5GaW5pdGVUaW1lQWN0aW9uLFxuXG4gICAgY3RvcjogZnVuY3Rpb24gY3RvcihkKSB7XG4gICAgICAgIHRoaXMuTUFYX1ZBTFVFID0gMjtcbiAgICAgICAgdGhpcy5fZWxhcHNlZCA9IDA7XG4gICAgICAgIHRoaXMuX2ZpcnN0VGljayA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9lYXNlTGlzdCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3NwZWVkID0gMTtcbiAgICAgICAgdGhpcy5fdGltZXNGb3JSZXBlYXQgPSAxO1xuICAgICAgICB0aGlzLl9yZXBlYXRGb3JldmVyID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3JlcGVhdE1ldGhvZCA9IGZhbHNlOyAvL0NvbXBhdGlibGUgd2l0aCByZXBlYXQgY2xhc3MsIERpc2NhcmQgYWZ0ZXIgY2FuIGJlIGRlbGV0ZWRcbiAgICAgICAgdGhpcy5fc3BlZWRNZXRob2QgPSBmYWxzZTsgLy9Db21wYXRpYmxlIHdpdGggcmVwZWF0IGNsYXNzLCBEaXNjYXJkIGFmdGVyIGNhbiBiZSBkZWxldGVkXG4gICAgICAgIGQgIT09IHVuZGVmaW5lZCAmJiBjYy5BY3Rpb25JbnRlcnZhbC5wcm90b3R5cGUuaW5pdFdpdGhEdXJhdGlvbi5jYWxsKHRoaXMsIGQpO1xuICAgIH0sXG5cbiAgICAvKlxuICAgICAqIEhvdyBtYW55IHNlY29uZHMgaGFkIGVsYXBzZWQgc2luY2UgdGhlIGFjdGlvbnMgc3RhcnRlZCB0byBydW4uXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldEVsYXBzZWQ6IGZ1bmN0aW9uIGdldEVsYXBzZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbGFwc2VkO1xuICAgIH0sXG5cbiAgICAvKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBhY3Rpb24uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGQgZHVyYXRpb24gaW4gc2Vjb25kc1xuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaW5pdFdpdGhEdXJhdGlvbjogZnVuY3Rpb24gaW5pdFdpdGhEdXJhdGlvbihkKSB7XG4gICAgICAgIHRoaXMuX2R1cmF0aW9uID0gZCA9PT0gMCA/IGNjLm1hY3JvLkZMVF9FUFNJTE9OIDogZDtcbiAgICAgICAgLy8gcHJldmVudCBkaXZpc2lvbiBieSAwXG4gICAgICAgIC8vIFRoaXMgY29tcGFyaXNvbiBjb3VsZCBiZSBpbiBzdGVwOiwgYnV0IGl0IG1pZ2h0IGRlY3JlYXNlIHRoZSBwZXJmb3JtYW5jZVxuICAgICAgICAvLyBieSAzJSBpbiBoZWF2eSBiYXNlZCBhY3Rpb24gZ2FtZXMuXG4gICAgICAgIHRoaXMuX2VsYXBzZWQgPSAwO1xuICAgICAgICB0aGlzLl9maXJzdFRpY2sgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgaXNEb25lOiBmdW5jdGlvbiBpc0RvbmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbGFwc2VkID49IHRoaXMuX2R1cmF0aW9uO1xuICAgIH0sXG5cbiAgICBfY2xvbmVEZWNvcmF0aW9uOiBmdW5jdGlvbiBfY2xvbmVEZWNvcmF0aW9uKGFjdGlvbikge1xuICAgICAgICBhY3Rpb24uX3JlcGVhdEZvcmV2ZXIgPSB0aGlzLl9yZXBlYXRGb3JldmVyO1xuICAgICAgICBhY3Rpb24uX3NwZWVkID0gdGhpcy5fc3BlZWQ7XG4gICAgICAgIGFjdGlvbi5fdGltZXNGb3JSZXBlYXQgPSB0aGlzLl90aW1lc0ZvclJlcGVhdDtcbiAgICAgICAgYWN0aW9uLl9lYXNlTGlzdCA9IHRoaXMuX2Vhc2VMaXN0O1xuICAgICAgICBhY3Rpb24uX3NwZWVkTWV0aG9kID0gdGhpcy5fc3BlZWRNZXRob2Q7XG4gICAgICAgIGFjdGlvbi5fcmVwZWF0TWV0aG9kID0gdGhpcy5fcmVwZWF0TWV0aG9kO1xuICAgIH0sXG5cbiAgICBfcmV2ZXJzZUVhc2VMaXN0OiBmdW5jdGlvbiBfcmV2ZXJzZUVhc2VMaXN0KGFjdGlvbikge1xuICAgICAgICBpZiAodGhpcy5fZWFzZUxpc3QpIHtcbiAgICAgICAgICAgIGFjdGlvbi5fZWFzZUxpc3QgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fZWFzZUxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBhY3Rpb24uX2Vhc2VMaXN0LnB1c2godGhpcy5fZWFzZUxpc3RbaV0ucmV2ZXJzZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuQWN0aW9uSW50ZXJ2YWwodGhpcy5fZHVyYXRpb24pO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBJbXBsZW1lbnRhdGlvbiBvZiBlYXNlIG1vdGlvbi5cbiAgICAgKiAhI3poIOe8k+WKqOi/kOWKqOOAglxuICAgICAqIEBtZXRob2QgZWFzaW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGVhc2VPYmpcbiAgICAgKiBAcmV0dXJucyB7QWN0aW9uSW50ZXJ2YWx9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBhY3Rpb24uZWFzaW5nKGNjLmVhc2VJbigzLjApKTtcbiAgICAgKi9cbiAgICBlYXNpbmc6IGZ1bmN0aW9uIGVhc2luZyhlYXNlT2JqKSB7XG4gICAgICAgIGlmICh0aGlzLl9lYXNlTGlzdCkgdGhpcy5fZWFzZUxpc3QubGVuZ3RoID0gMDtlbHNlIHRoaXMuX2Vhc2VMaXN0ID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLl9lYXNlTGlzdC5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gICAgICAgIH1yZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgX2NvbXB1dGVFYXNlVGltZTogZnVuY3Rpb24gX2NvbXB1dGVFYXNlVGltZShkdCkge1xuICAgICAgICB2YXIgbG9jTGlzdCA9IHRoaXMuX2Vhc2VMaXN0O1xuICAgICAgICBpZiAoIWxvY0xpc3QgfHwgbG9jTGlzdC5sZW5ndGggPT09IDApIHJldHVybiBkdDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBsb2NMaXN0Lmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgZHQgPSBsb2NMaXN0W2ldLmVhc2luZyhkdCk7XG4gICAgICAgIH1yZXR1cm4gZHQ7XG4gICAgfSxcblxuICAgIHN0ZXA6IGZ1bmN0aW9uIHN0ZXAoZHQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2ZpcnN0VGljaykge1xuICAgICAgICAgICAgdGhpcy5fZmlyc3RUaWNrID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9lbGFwc2VkID0gMDtcbiAgICAgICAgfSBlbHNlIHRoaXMuX2VsYXBzZWQgKz0gZHQ7XG5cbiAgICAgICAgLy90aGlzLnVwZGF0ZSgoMSA+ICh0aGlzLl9lbGFwc2VkIC8gdGhpcy5fZHVyYXRpb24pKSA/IHRoaXMuX2VsYXBzZWQgLyB0aGlzLl9kdXJhdGlvbiA6IDEpO1xuICAgICAgICAvL3RoaXMudXBkYXRlKE1hdGgubWF4KDAsIE1hdGgubWluKDEsIHRoaXMuX2VsYXBzZWQgLyBNYXRoLm1heCh0aGlzLl9kdXJhdGlvbiwgY2MubWFjcm8uRkxUX0VQU0lMT04pKSkpO1xuICAgICAgICB2YXIgdCA9IHRoaXMuX2VsYXBzZWQgLyAodGhpcy5fZHVyYXRpb24gPiAwLjAwMDAwMDExOTIwOTI4OTYgPyB0aGlzLl9kdXJhdGlvbiA6IDAuMDAwMDAwMTE5MjA5Mjg5Nik7XG4gICAgICAgIHQgPSAxID4gdCA/IHQgOiAxO1xuICAgICAgICB0aGlzLnVwZGF0ZSh0ID4gMCA/IHQgOiAwKTtcblxuICAgICAgICAvL0NvbXBhdGlibGUgd2l0aCByZXBlYXQgY2xhc3MsIERpc2NhcmQgYWZ0ZXIgY2FuIGJlIGRlbGV0ZWQgKHRoaXMuX3JlcGVhdE1ldGhvZClcbiAgICAgICAgaWYgKHRoaXMuX3JlcGVhdE1ldGhvZCAmJiB0aGlzLl90aW1lc0ZvclJlcGVhdCA+IDEgJiYgdGhpcy5pc0RvbmUoKSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9yZXBlYXRGb3JldmVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGltZXNGb3JSZXBlYXQtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vdmFyIGRpZmYgPSBsb2NJbm5lckFjdGlvbi5nZXRFbGFwc2VkKCkgLSBsb2NJbm5lckFjdGlvbi5fZHVyYXRpb247XG4gICAgICAgICAgICB0aGlzLnN0YXJ0V2l0aFRhcmdldCh0aGlzLnRhcmdldCk7XG4gICAgICAgICAgICAvLyB0byBwcmV2ZW50IGplcmsuIGlzc3VlICMzOTAgLDEyNDdcbiAgICAgICAgICAgIC8vdGhpcy5faW5uZXJBY3Rpb24uc3RlcCgwKTtcbiAgICAgICAgICAgIC8vdGhpcy5faW5uZXJBY3Rpb24uc3RlcChkaWZmKTtcbiAgICAgICAgICAgIHRoaXMuc3RlcCh0aGlzLl9lbGFwc2VkIC0gdGhpcy5fZHVyYXRpb24pO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHN0YXJ0V2l0aFRhcmdldDogZnVuY3Rpb24gc3RhcnRXaXRoVGFyZ2V0KHRhcmdldCkge1xuICAgICAgICBjYy5BY3Rpb24ucHJvdG90eXBlLnN0YXJ0V2l0aFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCk7XG4gICAgICAgIHRoaXMuX2VsYXBzZWQgPSAwO1xuICAgICAgICB0aGlzLl9maXJzdFRpY2sgPSB0cnVlO1xuICAgIH0sXG5cbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgICBjYy5sb2dJRCgxMDEwKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogU2V0IGFtcGxpdHVkZSByYXRlLlxuICAgICAqIEB3YXJuaW5nIEl0IHNob3VsZCBiZSBvdmVycmlkZGVuIGluIHN1YmNsYXNzLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhbXBcbiAgICAgKi9cbiAgICBzZXRBbXBsaXR1ZGVSYXRlOiBmdW5jdGlvbiBzZXRBbXBsaXR1ZGVSYXRlKGFtcCkge1xuICAgICAgICAvLyBBYnN0cmFjdCBjbGFzcyBuZWVkcyBpbXBsZW1lbnRhdGlvblxuICAgICAgICBjYy5sb2dJRCgxMDExKTtcbiAgICB9LFxuXG4gICAgLypcbiAgICAgKiBHZXQgYW1wbGl0dWRlIHJhdGUuXG4gICAgICogQHdhcm5pbmcgSXQgc2hvdWxkIGJlIG92ZXJyaWRkZW4gaW4gc3ViY2xhc3MuXG4gICAgICogQHJldHVybiB7TnVtYmVyfSAwXG4gICAgICovXG4gICAgZ2V0QW1wbGl0dWRlUmF0ZTogZnVuY3Rpb24gZ2V0QW1wbGl0dWRlUmF0ZSgpIHtcbiAgICAgICAgLy8gQWJzdHJhY3QgY2xhc3MgbmVlZHMgaW1wbGVtZW50YXRpb25cbiAgICAgICAgY2MubG9nSUQoMTAxMik7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogQ2hhbmdlcyB0aGUgc3BlZWQgb2YgYW4gYWN0aW9uLCBtYWtpbmcgaXQgdGFrZSBsb25nZXIgKHNwZWVkPjEpXG4gICAgICogb3IgbGVzcyAoc3BlZWQ8MSkgdGltZS4gPGJyLz5cbiAgICAgKiBVc2VmdWwgdG8gc2ltdWxhdGUgJ3Nsb3cgbW90aW9uJyBvciAnZmFzdCBmb3J3YXJkJyBlZmZlY3QuXG4gICAgICogISN6aFxuICAgICAqIOaUueWPmOS4gOS4quWKqOS9nOeahOmAn+W6pu+8jOS9v+Wug+eahOaJp+ihjOS9v+eUqOabtOmVv+eahOaXtumXtO+8iHNwZWVkID4gMe+8iTxici8+XG4gICAgICog5oiW5pu05bCR77yIc3BlZWQgPCAx77yJ5Y+v5Lul5pyJ5pWI5b6X5qih5ouf4oCc5oWi5Yqo5L2c4oCd5oiW4oCc5b+r6L+b4oCd55qE5pWI5p6c44CCXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNwZWVkXG4gICAgICogQHJldHVybnMge0FjdGlvbn1cbiAgICAgKi9cbiAgICBzcGVlZDogZnVuY3Rpb24gc3BlZWQoX3NwZWVkKSB7XG4gICAgICAgIGlmIChfc3BlZWQgPD0gMCkge1xuICAgICAgICAgICAgY2MubG9nSUQoMTAxMyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3NwZWVkTWV0aG9kID0gdHJ1ZTsgLy9Db21wYXRpYmxlIHdpdGggcmVwZWF0IGNsYXNzLCBEaXNjYXJkIGFmdGVyIGNhbiBiZSBkZWxldGVkXG4gICAgICAgIHRoaXMuX3NwZWVkICo9IF9zcGVlZDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGlzIGFjdGlvbiBzcGVlZC5cbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICovXG4gICAgZ2V0U3BlZWQ6IGZ1bmN0aW9uIGdldFNwZWVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3BlZWQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldCB0aGlzIGFjdGlvbiBzcGVlZC5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc3BlZWRcbiAgICAgKiBAcmV0dXJucyB7QWN0aW9uSW50ZXJ2YWx9XG4gICAgICovXG4gICAgc2V0U3BlZWQ6IGZ1bmN0aW9uIHNldFNwZWVkKHNwZWVkKSB7XG4gICAgICAgIHRoaXMuX3NwZWVkID0gc3BlZWQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogUmVwZWF0cyBhbiBhY3Rpb24gYSBudW1iZXIgb2YgdGltZXMuXG4gICAgICogVG8gcmVwZWF0IGFuIGFjdGlvbiBmb3JldmVyIHVzZSB0aGUgQ0NSZXBlYXRGb3JldmVyIGFjdGlvbi5cbiAgICAgKiAhI3poIOmHjeWkjeWKqOS9nOWPr+S7peaMieS4gOWumuasoeaVsOmHjeWkjeS4gOS4quWKqOS9nO+8jOS9v+eUqCBSZXBlYXRGb3JldmVyIOWKqOS9nOadpeawuOi/nOmHjeWkjeS4gOS4quWKqOS9nOOAglxuICAgICAqIEBtZXRob2QgcmVwZWF0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHRpbWVzXG4gICAgICogQHJldHVybnMge0FjdGlvbkludGVydmFsfVxuICAgICAqL1xuICAgIHJlcGVhdDogZnVuY3Rpb24gcmVwZWF0KHRpbWVzKSB7XG4gICAgICAgIHRpbWVzID0gTWF0aC5yb3VuZCh0aW1lcyk7XG4gICAgICAgIGlmIChpc05hTih0aW1lcykgfHwgdGltZXMgPCAxKSB7XG4gICAgICAgICAgICBjYy5sb2dJRCgxMDE0KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3JlcGVhdE1ldGhvZCA9IHRydWU7IC8vQ29tcGF0aWJsZSB3aXRoIHJlcGVhdCBjbGFzcywgRGlzY2FyZCBhZnRlciBjYW4gYmUgZGVsZXRlZFxuICAgICAgICB0aGlzLl90aW1lc0ZvclJlcGVhdCAqPSB0aW1lcztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBSZXBlYXRzIGFuIGFjdGlvbiBmb3IgZXZlci4gIDxici8+XG4gICAgICogVG8gcmVwZWF0IHRoZSBhbiBhY3Rpb24gZm9yIGEgbGltaXRlZCBudW1iZXIgb2YgdGltZXMgdXNlIHRoZSBSZXBlYXQgYWN0aW9uLiA8YnIvPlxuICAgICAqICEjemgg5rC46L+c5Zyw6YeN5aSN5LiA5Liq5Yqo5L2c77yM5pyJ6ZmQ5qyh5pWw5YaF6YeN5aSN5LiA5Liq5Yqo5L2c6K+35L2/55SoIFJlcGVhdCDliqjkvZzjgIJcbiAgICAgKiBAbWV0aG9kIHJlcGVhdEZvcmV2ZXJcbiAgICAgKiBAcmV0dXJucyB7QWN0aW9uSW50ZXJ2YWx9XG4gICAgICovXG4gICAgcmVwZWF0Rm9yZXZlcjogZnVuY3Rpb24gcmVwZWF0Rm9yZXZlcigpIHtcbiAgICAgICAgdGhpcy5fcmVwZWF0TWV0aG9kID0gdHJ1ZTsgLy9Db21wYXRpYmxlIHdpdGggcmVwZWF0IGNsYXNzLCBEaXNjYXJkIGFmdGVyIGNhbiBiZSBkZWxldGVkXG4gICAgICAgIHRoaXMuX3RpbWVzRm9yUmVwZWF0ID0gdGhpcy5NQVhfVkFMVUU7XG4gICAgICAgIHRoaXMuX3JlcGVhdEZvcmV2ZXIgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59KTtcblxuY2MuYWN0aW9uSW50ZXJ2YWwgPSBmdW5jdGlvbiAoZCkge1xuICAgIHJldHVybiBuZXcgY2MuQWN0aW9uSW50ZXJ2YWwoZCk7XG59O1xuXG4vKipcbiAqIEBtb2R1bGUgY2NcbiAqL1xuXG4vKlxuICogUnVucyBhY3Rpb25zIHNlcXVlbnRpYWxseSwgb25lIGFmdGVyIGFub3RoZXIuXG4gKiBAY2xhc3MgU2VxdWVuY2VcbiAqIEBleHRlbmRzIEFjdGlvbkludGVydmFsXG4gKiBAcGFyYW0ge0FycmF5fEZpbml0ZVRpbWVBY3Rpb259IHRlbXBBcnJheVxuICogQGV4YW1wbGVcbiAqIC8vIGNyZWF0ZSBzZXF1ZW5jZSB3aXRoIGFjdGlvbnNcbiAqIHZhciBzZXEgPSBuZXcgY2MuU2VxdWVuY2UoYWN0MSwgYWN0Mik7XG4gKlxuICogLy8gY3JlYXRlIHNlcXVlbmNlIHdpdGggYXJyYXlcbiAqIHZhciBzZXEgPSBuZXcgY2MuU2VxdWVuY2UoYWN0QXJyYXkpO1xuICovXG5jYy5TZXF1ZW5jZSA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuU2VxdWVuY2UnLFxuICAgIGV4dGVuZHM6IGNjLkFjdGlvbkludGVydmFsLFxuXG4gICAgY3RvcjogZnVuY3Rpb24gY3Rvcih0ZW1wQXJyYXkpIHtcbiAgICAgICAgdGhpcy5fYWN0aW9ucyA9IFtdO1xuICAgICAgICB0aGlzLl9zcGxpdCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2xhc3QgPSAwO1xuICAgICAgICB0aGlzLl9yZXZlcnNlZCA9IGZhbHNlO1xuXG4gICAgICAgIHZhciBwYXJhbUFycmF5ID0gdGVtcEFycmF5IGluc3RhbmNlb2YgQXJyYXkgPyB0ZW1wQXJyYXkgOiBhcmd1bWVudHM7XG4gICAgICAgIGlmIChwYXJhbUFycmF5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgY2MuZXJyb3JJRCgxMDE5KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGFzdCA9IHBhcmFtQXJyYXkubGVuZ3RoIC0gMTtcbiAgICAgICAgaWYgKGxhc3QgPj0gMCAmJiBwYXJhbUFycmF5W2xhc3RdID09IG51bGwpIGNjLmxvZ0lEKDEwMTUpO1xuXG4gICAgICAgIGlmIChsYXN0ID49IDApIHtcbiAgICAgICAgICAgIHZhciBwcmV2ID0gcGFyYW1BcnJheVswXSxcbiAgICAgICAgICAgICAgICBhY3Rpb24xO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBsYXN0OyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAocGFyYW1BcnJheVtpXSkge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb24xID0gcHJldjtcbiAgICAgICAgICAgICAgICAgICAgcHJldiA9IGNjLlNlcXVlbmNlLl9hY3Rpb25PbmVUd28oYWN0aW9uMSwgcGFyYW1BcnJheVtpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5pbml0V2l0aFR3b0FjdGlvbnMocHJldiwgcGFyYW1BcnJheVtsYXN0XSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLypcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgYWN0aW9uIDxici8+XG4gICAgICogQHBhcmFtIHtGaW5pdGVUaW1lQWN0aW9ufSBhY3Rpb25PbmVcbiAgICAgKiBAcGFyYW0ge0Zpbml0ZVRpbWVBY3Rpb259IGFjdGlvblR3b1xuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaW5pdFdpdGhUd29BY3Rpb25zOiBmdW5jdGlvbiBpbml0V2l0aFR3b0FjdGlvbnMoYWN0aW9uT25lLCBhY3Rpb25Ud28pIHtcbiAgICAgICAgaWYgKCFhY3Rpb25PbmUgfHwgIWFjdGlvblR3bykge1xuICAgICAgICAgICAgY2MuZXJyb3JJRCgxMDI1KTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkdXJhdGlvbk9uZSA9IGFjdGlvbk9uZS5fZHVyYXRpb24sXG4gICAgICAgICAgICBkdXJhdGlvblR3byA9IGFjdGlvblR3by5fZHVyYXRpb247XG4gICAgICAgIGR1cmF0aW9uT25lICo9IGFjdGlvbk9uZS5fcmVwZWF0TWV0aG9kID8gYWN0aW9uT25lLl90aW1lc0ZvclJlcGVhdCA6IDE7XG4gICAgICAgIGR1cmF0aW9uVHdvICo9IGFjdGlvblR3by5fcmVwZWF0TWV0aG9kID8gYWN0aW9uVHdvLl90aW1lc0ZvclJlcGVhdCA6IDE7XG4gICAgICAgIHZhciBkID0gZHVyYXRpb25PbmUgKyBkdXJhdGlvblR3bztcbiAgICAgICAgdGhpcy5pbml0V2l0aER1cmF0aW9uKGQpO1xuXG4gICAgICAgIHRoaXMuX2FjdGlvbnNbMF0gPSBhY3Rpb25PbmU7XG4gICAgICAgIHRoaXMuX2FjdGlvbnNbMV0gPSBhY3Rpb25Ud287XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuU2VxdWVuY2UoKTtcbiAgICAgICAgdGhpcy5fY2xvbmVEZWNvcmF0aW9uKGFjdGlvbik7XG4gICAgICAgIGFjdGlvbi5pbml0V2l0aFR3b0FjdGlvbnModGhpcy5fYWN0aW9uc1swXS5jbG9uZSgpLCB0aGlzLl9hY3Rpb25zWzFdLmNsb25lKCkpO1xuICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG5cbiAgICBzdGFydFdpdGhUYXJnZXQ6IGZ1bmN0aW9uIHN0YXJ0V2l0aFRhcmdldCh0YXJnZXQpIHtcbiAgICAgICAgY2MuQWN0aW9uSW50ZXJ2YWwucHJvdG90eXBlLnN0YXJ0V2l0aFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCk7XG4gICAgICAgIHRoaXMuX3NwbGl0ID0gdGhpcy5fYWN0aW9uc1swXS5fZHVyYXRpb24gLyB0aGlzLl9kdXJhdGlvbjtcbiAgICAgICAgdGhpcy5fc3BsaXQgKj0gdGhpcy5fYWN0aW9uc1swXS5fcmVwZWF0TWV0aG9kID8gdGhpcy5fYWN0aW9uc1swXS5fdGltZXNGb3JSZXBlYXQgOiAxO1xuICAgICAgICB0aGlzLl9sYXN0ID0gLTE7XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAgIC8vIElzc3VlICMxMzA1XG4gICAgICAgIGlmICh0aGlzLl9sYXN0ICE9PSAtMSkgdGhpcy5fYWN0aW9uc1t0aGlzLl9sYXN0XS5zdG9wKCk7XG4gICAgICAgIGNjLkFjdGlvbi5wcm90b3R5cGUuc3RvcC5jYWxsKHRoaXMpO1xuICAgIH0sXG5cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShkdCkge1xuICAgICAgICB2YXIgbmV3X3QsXG4gICAgICAgICAgICBmb3VuZCA9IDA7XG4gICAgICAgIHZhciBsb2NTcGxpdCA9IHRoaXMuX3NwbGl0LFxuICAgICAgICAgICAgbG9jQWN0aW9ucyA9IHRoaXMuX2FjdGlvbnMsXG4gICAgICAgICAgICBsb2NMYXN0ID0gdGhpcy5fbGFzdCxcbiAgICAgICAgICAgIGFjdGlvbkZvdW5kO1xuXG4gICAgICAgIGR0ID0gdGhpcy5fY29tcHV0ZUVhc2VUaW1lKGR0KTtcbiAgICAgICAgaWYgKGR0IDwgbG9jU3BsaXQpIHtcbiAgICAgICAgICAgIC8vIGFjdGlvblswXVxuICAgICAgICAgICAgbmV3X3QgPSBsb2NTcGxpdCAhPT0gMCA/IGR0IC8gbG9jU3BsaXQgOiAxO1xuXG4gICAgICAgICAgICBpZiAoZm91bmQgPT09IDAgJiYgbG9jTGFzdCA9PT0gMSAmJiB0aGlzLl9yZXZlcnNlZCkge1xuICAgICAgICAgICAgICAgIC8vIFJldmVyc2UgbW9kZSA/XG4gICAgICAgICAgICAgICAgLy8gWFhYOiBCdWcuIHRoaXMgY2FzZSBkb2Vzbid0IGNvbnRlbXBsYXRlIHdoZW4gX2xhc3Q9PS0xLCBmb3VuZD0wIGFuZCBpbiBcInJldmVyc2UgbW9kZVwiXG4gICAgICAgICAgICAgICAgLy8gc2luY2UgaXQgd2lsbCByZXF1aXJlIGEgaGFjayB0byBrbm93IGlmIGFuIGFjdGlvbiBpcyBvbiByZXZlcnNlIG1vZGUgb3Igbm90LlxuICAgICAgICAgICAgICAgIC8vIFwic3RlcFwiIHNob3VsZCBiZSBvdmVycmlkZW4sIGFuZCB0aGUgXCJyZXZlcnNlTW9kZVwiIHZhbHVlIHByb3BhZ2F0ZWQgdG8gaW5uZXIgU2VxdWVuY2VzLlxuICAgICAgICAgICAgICAgIGxvY0FjdGlvbnNbMV0udXBkYXRlKDApO1xuICAgICAgICAgICAgICAgIGxvY0FjdGlvbnNbMV0uc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gYWN0aW9uWzFdXG4gICAgICAgICAgICBmb3VuZCA9IDE7XG4gICAgICAgICAgICBuZXdfdCA9IGxvY1NwbGl0ID09PSAxID8gMSA6IChkdCAtIGxvY1NwbGl0KSAvICgxIC0gbG9jU3BsaXQpO1xuXG4gICAgICAgICAgICBpZiAobG9jTGFzdCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyBhY3Rpb25bMF0gd2FzIHNraXBwZWQsIGV4ZWN1dGUgaXQuXG4gICAgICAgICAgICAgICAgbG9jQWN0aW9uc1swXS5zdGFydFdpdGhUYXJnZXQodGhpcy50YXJnZXQpO1xuICAgICAgICAgICAgICAgIGxvY0FjdGlvbnNbMF0udXBkYXRlKDEpO1xuICAgICAgICAgICAgICAgIGxvY0FjdGlvbnNbMF0uc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxvY0xhc3QgPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBzd2l0Y2hpbmcgdG8gYWN0aW9uIDEuIHN0b3AgYWN0aW9uIDAuXG4gICAgICAgICAgICAgICAgbG9jQWN0aW9uc1swXS51cGRhdGUoMSk7XG4gICAgICAgICAgICAgICAgbG9jQWN0aW9uc1swXS5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBhY3Rpb25Gb3VuZCA9IGxvY0FjdGlvbnNbZm91bmRdO1xuICAgICAgICAvLyBMYXN0IGFjdGlvbiBmb3VuZCBhbmQgaXQgaXMgZG9uZS5cbiAgICAgICAgaWYgKGxvY0xhc3QgPT09IGZvdW5kICYmIGFjdGlvbkZvdW5kLmlzRG9uZSgpKSByZXR1cm47XG5cbiAgICAgICAgLy8gTGFzdCBhY3Rpb24gbm90IGZvdW5kXG4gICAgICAgIGlmIChsb2NMYXN0ICE9PSBmb3VuZCkgYWN0aW9uRm91bmQuc3RhcnRXaXRoVGFyZ2V0KHRoaXMudGFyZ2V0KTtcblxuICAgICAgICBuZXdfdCA9IG5ld190ICogYWN0aW9uRm91bmQuX3RpbWVzRm9yUmVwZWF0O1xuICAgICAgICBhY3Rpb25Gb3VuZC51cGRhdGUobmV3X3QgPiAxID8gbmV3X3QgJSAxIDogbmV3X3QpO1xuICAgICAgICB0aGlzLl9sYXN0ID0gZm91bmQ7XG4gICAgfSxcblxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBjYy5TZXF1ZW5jZS5fYWN0aW9uT25lVHdvKHRoaXMuX2FjdGlvbnNbMV0ucmV2ZXJzZSgpLCB0aGlzLl9hY3Rpb25zWzBdLnJldmVyc2UoKSk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICB0aGlzLl9yZXZlcnNlRWFzZUxpc3QoYWN0aW9uKTtcbiAgICAgICAgYWN0aW9uLl9yZXZlcnNlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfVxufSk7XG5cbi8qKlxuICogISNlblxuICogSGVscGVyIGNvbnN0cnVjdG9yIHRvIGNyZWF0ZSBhbiBhcnJheSBvZiBzZXF1ZW5jZWFibGUgYWN0aW9uc1xuICogVGhlIGNyZWF0ZWQgYWN0aW9uIHdpbGwgcnVuIGFjdGlvbnMgc2VxdWVudGlhbGx5LCBvbmUgYWZ0ZXIgYW5vdGhlci5cbiAqICEjemgg6aG65bqP5omn6KGM5Yqo5L2c77yM5Yib5bu655qE5Yqo5L2c5bCG5oyJ6aG65bqP5L6d5qyh6L+Q6KGM44CCXG4gKiBAbWV0aG9kIHNlcXVlbmNlXG4gKiBAcGFyYW0ge0Zpbml0ZVRpbWVBY3Rpb258RmluaXRlVGltZUFjdGlvbltdfSBhY3Rpb25PckFjdGlvbkFycmF5XG4gKiBAcGFyYW0ge0Zpbml0ZVRpbWVBY3Rpb259IC4uLnRlbXBBcnJheVxuICogQHJldHVybiB7QWN0aW9uSW50ZXJ2YWx9XG4gKiBAZXhhbXBsZVxuICogLy8gZXhhbXBsZVxuICogLy8gY3JlYXRlIHNlcXVlbmNlIHdpdGggYWN0aW9uc1xuICogdmFyIHNlcSA9IGNjLnNlcXVlbmNlKGFjdDEsIGFjdDIpO1xuICpcbiAqIC8vIGNyZWF0ZSBzZXF1ZW5jZSB3aXRoIGFycmF5XG4gKiB2YXIgc2VxID0gY2Muc2VxdWVuY2UoYWN0QXJyYXkpO1xuICovXG4vLyB0b2RvOiBJdCBzaG91bGQgYmUgdXNlIG5ld1xuY2Muc2VxdWVuY2UgPSBmdW5jdGlvbiAoIC8qTXVsdGlwbGUgQXJndW1lbnRzKi90ZW1wQXJyYXkpIHtcbiAgICB2YXIgcGFyYW1BcnJheSA9IHRlbXBBcnJheSBpbnN0YW5jZW9mIEFycmF5ID8gdGVtcEFycmF5IDogYXJndW1lbnRzO1xuICAgIGlmIChwYXJhbUFycmF5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBjYy5lcnJvcklEKDEwMTkpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGxhc3QgPSBwYXJhbUFycmF5Lmxlbmd0aCAtIDE7XG4gICAgaWYgKGxhc3QgPj0gMCAmJiBwYXJhbUFycmF5W2xhc3RdID09IG51bGwpIGNjLmxvZ0lEKDEwMTUpO1xuXG4gICAgdmFyIHJlc3VsdCA9IG51bGw7XG4gICAgaWYgKGxhc3QgPj0gMCkge1xuICAgICAgICByZXN1bHQgPSBwYXJhbUFycmF5WzBdO1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSBsYXN0OyBpKyspIHtcbiAgICAgICAgICAgIGlmIChwYXJhbUFycmF5W2ldKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gY2MuU2VxdWVuY2UuX2FjdGlvbk9uZVR3byhyZXN1bHQsIHBhcmFtQXJyYXlbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmNjLlNlcXVlbmNlLl9hY3Rpb25PbmVUd28gPSBmdW5jdGlvbiAoYWN0aW9uT25lLCBhY3Rpb25Ud28pIHtcbiAgICB2YXIgc2VxdWVuY2UgPSBuZXcgY2MuU2VxdWVuY2UoKTtcbiAgICBzZXF1ZW5jZS5pbml0V2l0aFR3b0FjdGlvbnMoYWN0aW9uT25lLCBhY3Rpb25Ud28pO1xuICAgIHJldHVybiBzZXF1ZW5jZTtcbn07XG5cbi8qXG4gKiBSZXBlYXRzIGFuIGFjdGlvbiBhIG51bWJlciBvZiB0aW1lcy5cbiAqIFRvIHJlcGVhdCBhbiBhY3Rpb24gZm9yZXZlciB1c2UgdGhlIENDUmVwZWF0Rm9yZXZlciBhY3Rpb24uXG4gKiBAY2xhc3MgUmVwZWF0XG4gKiBAZXh0ZW5kcyBBY3Rpb25JbnRlcnZhbFxuICogQHBhcmFtIHtGaW5pdGVUaW1lQWN0aW9ufSBhY3Rpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lc1xuICogQGV4YW1wbGVcbiAqIHZhciByZXAgPSBuZXcgY2MuUmVwZWF0KGNjLnNlcXVlbmNlKGp1bXAyLCBqdW1wMSksIDUpO1xuICovXG5jYy5SZXBlYXQgPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLlJlcGVhdCcsXG4gICAgZXh0ZW5kczogY2MuQWN0aW9uSW50ZXJ2YWwsXG5cbiAgICBjdG9yOiBmdW5jdGlvbiBjdG9yKGFjdGlvbiwgdGltZXMpIHtcbiAgICAgICAgdGhpcy5fdGltZXMgPSAwO1xuICAgICAgICB0aGlzLl90b3RhbCA9IDA7XG4gICAgICAgIHRoaXMuX25leHREdCA9IDA7XG4gICAgICAgIHRoaXMuX2FjdGlvbkluc3RhbnQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5faW5uZXJBY3Rpb24gPSBudWxsO1xuICAgICAgICB0aW1lcyAhPT0gdW5kZWZpbmVkICYmIHRoaXMuaW5pdFdpdGhBY3Rpb24oYWN0aW9uLCB0aW1lcyk7XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogQHBhcmFtIHtGaW5pdGVUaW1lQWN0aW9ufSBhY3Rpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdGltZXNcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGluaXRXaXRoQWN0aW9uOiBmdW5jdGlvbiBpbml0V2l0aEFjdGlvbihhY3Rpb24sIHRpbWVzKSB7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IGFjdGlvbi5fZHVyYXRpb24gKiB0aW1lcztcblxuICAgICAgICBpZiAodGhpcy5pbml0V2l0aER1cmF0aW9uKGR1cmF0aW9uKSkge1xuICAgICAgICAgICAgdGhpcy5fdGltZXMgPSB0aW1lcztcbiAgICAgICAgICAgIHRoaXMuX2lubmVyQWN0aW9uID0gYWN0aW9uO1xuICAgICAgICAgICAgaWYgKGFjdGlvbiBpbnN0YW5jZW9mIGNjLkFjdGlvbkluc3RhbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3Rpb25JbnN0YW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLl90aW1lcyAtPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fdG90YWwgPSAwO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuUmVwZWF0KCk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICBhY3Rpb24uaW5pdFdpdGhBY3Rpb24odGhpcy5faW5uZXJBY3Rpb24uY2xvbmUoKSwgdGhpcy5fdGltZXMpO1xuICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG5cbiAgICBzdGFydFdpdGhUYXJnZXQ6IGZ1bmN0aW9uIHN0YXJ0V2l0aFRhcmdldCh0YXJnZXQpIHtcbiAgICAgICAgdGhpcy5fdG90YWwgPSAwO1xuICAgICAgICB0aGlzLl9uZXh0RHQgPSB0aGlzLl9pbm5lckFjdGlvbi5fZHVyYXRpb24gLyB0aGlzLl9kdXJhdGlvbjtcbiAgICAgICAgY2MuQWN0aW9uSW50ZXJ2YWwucHJvdG90eXBlLnN0YXJ0V2l0aFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCk7XG4gICAgICAgIHRoaXMuX2lubmVyQWN0aW9uLnN0YXJ0V2l0aFRhcmdldCh0YXJnZXQpO1xuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgICB0aGlzLl9pbm5lckFjdGlvbi5zdG9wKCk7XG4gICAgICAgIGNjLkFjdGlvbi5wcm90b3R5cGUuc3RvcC5jYWxsKHRoaXMpO1xuICAgIH0sXG5cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShkdCkge1xuICAgICAgICBkdCA9IHRoaXMuX2NvbXB1dGVFYXNlVGltZShkdCk7XG4gICAgICAgIHZhciBsb2NJbm5lckFjdGlvbiA9IHRoaXMuX2lubmVyQWN0aW9uO1xuICAgICAgICB2YXIgbG9jRHVyYXRpb24gPSB0aGlzLl9kdXJhdGlvbjtcbiAgICAgICAgdmFyIGxvY1RpbWVzID0gdGhpcy5fdGltZXM7XG4gICAgICAgIHZhciBsb2NOZXh0RHQgPSB0aGlzLl9uZXh0RHQ7XG5cbiAgICAgICAgaWYgKGR0ID49IGxvY05leHREdCkge1xuICAgICAgICAgICAgd2hpbGUgKGR0ID4gbG9jTmV4dER0ICYmIHRoaXMuX3RvdGFsIDwgbG9jVGltZXMpIHtcbiAgICAgICAgICAgICAgICBsb2NJbm5lckFjdGlvbi51cGRhdGUoMSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdG90YWwrKztcbiAgICAgICAgICAgICAgICBsb2NJbm5lckFjdGlvbi5zdG9wKCk7XG4gICAgICAgICAgICAgICAgbG9jSW5uZXJBY3Rpb24uc3RhcnRXaXRoVGFyZ2V0KHRoaXMudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICBsb2NOZXh0RHQgKz0gbG9jSW5uZXJBY3Rpb24uX2R1cmF0aW9uIC8gbG9jRHVyYXRpb247XG4gICAgICAgICAgICAgICAgdGhpcy5fbmV4dER0ID0gbG9jTmV4dER0ID4gMSA/IDEgOiBsb2NOZXh0RHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGZpeCBmb3IgaXNzdWUgIzEyODgsIGluY29ycmVjdCBlbmQgdmFsdWUgb2YgcmVwZWF0XG4gICAgICAgICAgICBpZiAoZHQgPj0gMS4wICYmIHRoaXMuX3RvdGFsIDwgbG9jVGltZXMpIHtcbiAgICAgICAgICAgICAgICAvLyBmaXggZm9yIGNvY29zLWNyZWF0b3IvZmlyZWJhbGwvaXNzdWVzLzQzMTBcbiAgICAgICAgICAgICAgICBsb2NJbm5lckFjdGlvbi51cGRhdGUoMSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdG90YWwrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZG9uJ3Qgc2V0IGEgaW5zdGFudCBhY3Rpb24gYmFjayBvciB1cGRhdGUgaXQsIGl0IGhhcyBubyB1c2UgYmVjYXVzZSBpdCBoYXMgbm8gZHVyYXRpb25cbiAgICAgICAgICAgIGlmICghdGhpcy5fYWN0aW9uSW5zdGFudCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl90b3RhbCA9PT0gbG9jVGltZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jSW5uZXJBY3Rpb24uc3RvcCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlzc3VlICMzOTAgcHJldmVudCBqZXJrLCB1c2UgcmlnaHQgdXBkYXRlXG4gICAgICAgICAgICAgICAgICAgIGxvY0lubmVyQWN0aW9uLnVwZGF0ZShkdCAtIChsb2NOZXh0RHQgLSBsb2NJbm5lckFjdGlvbi5fZHVyYXRpb24gLyBsb2NEdXJhdGlvbikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxvY0lubmVyQWN0aW9uLnVwZGF0ZShkdCAqIGxvY1RpbWVzICUgMS4wKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBpc0RvbmU6IGZ1bmN0aW9uIGlzRG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RvdGFsID09PSB0aGlzLl90aW1lcztcbiAgICB9LFxuXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5SZXBlYXQodGhpcy5faW5uZXJBY3Rpb24ucmV2ZXJzZSgpLCB0aGlzLl90aW1lcyk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICB0aGlzLl9yZXZlcnNlRWFzZUxpc3QoYWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgLypcbiAgICAgKiBTZXQgaW5uZXIgQWN0aW9uLlxuICAgICAqIEBwYXJhbSB7RmluaXRlVGltZUFjdGlvbn0gYWN0aW9uXG4gICAgICovXG4gICAgc2V0SW5uZXJBY3Rpb246IGZ1bmN0aW9uIHNldElubmVyQWN0aW9uKGFjdGlvbikge1xuICAgICAgICBpZiAodGhpcy5faW5uZXJBY3Rpb24gIT09IGFjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5faW5uZXJBY3Rpb24gPSBhY3Rpb247XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLypcbiAgICAgKiBHZXQgaW5uZXIgQWN0aW9uLlxuICAgICAqIEByZXR1cm4ge0Zpbml0ZVRpbWVBY3Rpb259XG4gICAgICovXG4gICAgZ2V0SW5uZXJBY3Rpb246IGZ1bmN0aW9uIGdldElubmVyQWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW5uZXJBY3Rpb247XG4gICAgfVxufSk7XG5cbi8qKlxuICogISNlbiBDcmVhdGVzIGEgUmVwZWF0IGFjdGlvbi4gVGltZXMgaXMgYW4gdW5zaWduZWQgaW50ZWdlciBiZXR3ZWVuIDEgYW5kIHBvdygyLDMwKVxuICogISN6aCDph43lpI3liqjkvZzvvIzlj6/ku6XmjInkuIDlrprmrKHmlbDph43lpI3kuIDkuKrliqjvvIzlpoLmnpzmg7PmsLjov5zph43lpI3kuIDkuKrliqjkvZzor7fkvb/nlKggcmVwZWF0Rm9yZXZlciDliqjkvZzmnaXlrozmiJDjgIJcbiAqIEBtZXRob2QgcmVwZWF0XG4gKiBAcGFyYW0ge0Zpbml0ZVRpbWVBY3Rpb259IGFjdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IHRpbWVzXG4gKiBAcmV0dXJuIHtBY3Rpb25JbnRlcnZhbH1cbiAqIEBleGFtcGxlXG4gKiAvLyBleGFtcGxlXG4gKiB2YXIgcmVwID0gY2MucmVwZWF0KGNjLnNlcXVlbmNlKGp1bXAyLCBqdW1wMSksIDUpO1xuICovXG5jYy5yZXBlYXQgPSBmdW5jdGlvbiAoYWN0aW9uLCB0aW1lcykge1xuICAgIHJldHVybiBuZXcgY2MuUmVwZWF0KGFjdGlvbiwgdGltZXMpO1xufTtcblxuLypcbiAqIFJlcGVhdHMgYW4gYWN0aW9uIGZvciBldmVyLiAgPGJyLz5cbiAqIFRvIHJlcGVhdCB0aGUgYW4gYWN0aW9uIGZvciBhIGxpbWl0ZWQgbnVtYmVyIG9mIHRpbWVzIHVzZSB0aGUgUmVwZWF0IGFjdGlvbi4gPGJyLz5cbiAqIEB3YXJuaW5nIFRoaXMgYWN0aW9uIGNhbid0IGJlIFNlcXVlbmNlYWJsZSBiZWNhdXNlIGl0IGlzIG5vdCBhbiBJbnRlcnZhbEFjdGlvblxuICogQGNsYXNzIFJlcGVhdEZvcmV2ZXJcbiAqIEBleHRlbmRzIEFjdGlvbkludGVydmFsXG4gKiBAcGFyYW0ge0Zpbml0ZVRpbWVBY3Rpb259IGFjdGlvblxuICogQGV4YW1wbGVcbiAqIHZhciByZXAgPSBuZXcgY2MuUmVwZWF0Rm9yZXZlcihjYy5zZXF1ZW5jZShqdW1wMiwganVtcDEpLCA1KTtcbiAqL1xuY2MuUmVwZWF0Rm9yZXZlciA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuUmVwZWF0Rm9yZXZlcicsXG4gICAgZXh0ZW5kczogY2MuQWN0aW9uSW50ZXJ2YWwsXG5cbiAgICBjdG9yOiBmdW5jdGlvbiBjdG9yKGFjdGlvbikge1xuICAgICAgICB0aGlzLl9pbm5lckFjdGlvbiA9IG51bGw7XG4gICAgICAgIGFjdGlvbiAmJiB0aGlzLmluaXRXaXRoQWN0aW9uKGFjdGlvbik7XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogQHBhcmFtIHtBY3Rpb25JbnRlcnZhbH0gYWN0aW9uXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpbml0V2l0aEFjdGlvbjogZnVuY3Rpb24gaW5pdFdpdGhBY3Rpb24oYWN0aW9uKSB7XG4gICAgICAgIGlmICghYWN0aW9uKSB7XG4gICAgICAgICAgICBjYy5lcnJvcklEKDEwMjYpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5faW5uZXJBY3Rpb24gPSBhY3Rpb247XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuUmVwZWF0Rm9yZXZlcigpO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgYWN0aW9uLmluaXRXaXRoQWN0aW9uKHRoaXMuX2lubmVyQWN0aW9uLmNsb25lKCkpO1xuICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG5cbiAgICBzdGFydFdpdGhUYXJnZXQ6IGZ1bmN0aW9uIHN0YXJ0V2l0aFRhcmdldCh0YXJnZXQpIHtcbiAgICAgICAgY2MuQWN0aW9uSW50ZXJ2YWwucHJvdG90eXBlLnN0YXJ0V2l0aFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCk7XG4gICAgICAgIHRoaXMuX2lubmVyQWN0aW9uLnN0YXJ0V2l0aFRhcmdldCh0YXJnZXQpO1xuICAgIH0sXG5cbiAgICBzdGVwOiBmdW5jdGlvbiBzdGVwKGR0KSB7XG4gICAgICAgIHZhciBsb2NJbm5lckFjdGlvbiA9IHRoaXMuX2lubmVyQWN0aW9uO1xuICAgICAgICBsb2NJbm5lckFjdGlvbi5zdGVwKGR0KTtcbiAgICAgICAgaWYgKGxvY0lubmVyQWN0aW9uLmlzRG9uZSgpKSB7XG4gICAgICAgICAgICAvL3ZhciBkaWZmID0gbG9jSW5uZXJBY3Rpb24uZ2V0RWxhcHNlZCgpIC0gbG9jSW5uZXJBY3Rpb24uX2R1cmF0aW9uO1xuICAgICAgICAgICAgbG9jSW5uZXJBY3Rpb24uc3RhcnRXaXRoVGFyZ2V0KHRoaXMudGFyZ2V0KTtcbiAgICAgICAgICAgIC8vIHRvIHByZXZlbnQgamVyay4gaXNzdWUgIzM5MCAsMTI0N1xuICAgICAgICAgICAgLy90aGlzLl9pbm5lckFjdGlvbi5zdGVwKDApO1xuICAgICAgICAgICAgLy90aGlzLl9pbm5lckFjdGlvbi5zdGVwKGRpZmYpO1xuICAgICAgICAgICAgbG9jSW5uZXJBY3Rpb24uc3RlcChsb2NJbm5lckFjdGlvbi5nZXRFbGFwc2VkKCkgLSBsb2NJbm5lckFjdGlvbi5fZHVyYXRpb24pO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGlzRG9uZTogZnVuY3Rpb24gaXNEb25lKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuUmVwZWF0Rm9yZXZlcih0aGlzLl9pbm5lckFjdGlvbi5yZXZlcnNlKCkpO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgdGhpcy5fcmV2ZXJzZUVhc2VMaXN0KGFjdGlvbik7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogU2V0IGlubmVyIGFjdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FjdGlvbkludGVydmFsfSBhY3Rpb25cbiAgICAgKi9cbiAgICBzZXRJbm5lckFjdGlvbjogZnVuY3Rpb24gc2V0SW5uZXJBY3Rpb24oYWN0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbm5lckFjdGlvbiAhPT0gYWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9pbm5lckFjdGlvbiA9IGFjdGlvbjtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKlxuICAgICAqIEdldCBpbm5lciBhY3Rpb24uXG4gICAgICogQHJldHVybiB7QWN0aW9uSW50ZXJ2YWx9XG4gICAgICovXG4gICAgZ2V0SW5uZXJBY3Rpb246IGZ1bmN0aW9uIGdldElubmVyQWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW5uZXJBY3Rpb247XG4gICAgfVxufSk7XG5cbi8qKlxuICogISNlbiBDcmVhdGUgYSBhY3RvbiB3aGljaCByZXBlYXQgZm9yZXZlciwgYXMgaXQgcnVucyBmb3JldmVyLCBpdCBjYW4ndCBiZSBhZGRlZCBpbnRvIGNjLnNlcXVlbmNlIGFuZCBjYy5zcGF3bi5cbiAqICEjemgg5rC46L+c5Zyw6YeN5aSN5LiA5Liq5Yqo5L2c77yM5pyJ6ZmQ5qyh5pWw5YaF6YeN5aSN5LiA5Liq5Yqo5L2c6K+35L2/55SoIHJlcGVhdCDliqjkvZzvvIznlLHkuo7ov5nkuKrliqjkvZzkuI3kvJrlgZzmraLvvIzmiYDku6XkuI3og73ooqvmt7vliqDliLAgY2Muc2VxdWVuY2Ug5oiWIGNjLnNwYXduIOS4reOAglxuICogQG1ldGhvZCByZXBlYXRGb3JldmVyXG4gKiBAcGFyYW0ge0Zpbml0ZVRpbWVBY3Rpb259IGFjdGlvblxuICogQHJldHVybiB7QWN0aW9uSW50ZXJ2YWx9XG4gKiBAZXhhbXBsZVxuICogLy8gZXhhbXBsZVxuICogdmFyIHJlcGVhdCA9IGNjLnJlcGVhdEZvcmV2ZXIoY2Mucm90YXRlQnkoMS4wLCAzNjApKTtcbiAqL1xuY2MucmVwZWF0Rm9yZXZlciA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICByZXR1cm4gbmV3IGNjLlJlcGVhdEZvcmV2ZXIoYWN0aW9uKTtcbn07XG5cbi8qIFxuICogU3Bhd24gYSBuZXcgYWN0aW9uIGltbWVkaWF0ZWx5XG4gKiBAY2xhc3MgU3Bhd25cbiAqIEBleHRlbmRzIEFjdGlvbkludGVydmFsXG4gKi9cbmNjLlNwYXduID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5TcGF3bicsXG4gICAgZXh0ZW5kczogY2MuQWN0aW9uSW50ZXJ2YWwsXG5cbiAgICBjdG9yOiBmdW5jdGlvbiBjdG9yKHRlbXBBcnJheSkge1xuICAgICAgICB0aGlzLl9vbmUgPSBudWxsO1xuICAgICAgICB0aGlzLl90d28gPSBudWxsO1xuXG4gICAgICAgIHZhciBwYXJhbUFycmF5ID0gdGVtcEFycmF5IGluc3RhbmNlb2YgQXJyYXkgPyB0ZW1wQXJyYXkgOiBhcmd1bWVudHM7XG4gICAgICAgIGlmIChwYXJhbUFycmF5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgY2MuZXJyb3JJRCgxMDIwKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGFzdCA9IHBhcmFtQXJyYXkubGVuZ3RoIC0gMTtcbiAgICAgICAgaWYgKGxhc3QgPj0gMCAmJiBwYXJhbUFycmF5W2xhc3RdID09IG51bGwpIGNjLmxvZ0lEKDEwMTUpO1xuXG4gICAgICAgIGlmIChsYXN0ID49IDApIHtcbiAgICAgICAgICAgIHZhciBwcmV2ID0gcGFyYW1BcnJheVswXSxcbiAgICAgICAgICAgICAgICBhY3Rpb24xO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBsYXN0OyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAocGFyYW1BcnJheVtpXSkge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb24xID0gcHJldjtcbiAgICAgICAgICAgICAgICAgICAgcHJldiA9IGNjLlNwYXduLl9hY3Rpb25PbmVUd28oYWN0aW9uMSwgcGFyYW1BcnJheVtpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5pbml0V2l0aFR3b0FjdGlvbnMocHJldiwgcGFyYW1BcnJheVtsYXN0XSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogaW5pdGlhbGl6ZXMgdGhlIFNwYXduIGFjdGlvbiB3aXRoIHRoZSAyIGFjdGlvbnMgdG8gc3Bhd25cbiAgICAgKiBAcGFyYW0ge0Zpbml0ZVRpbWVBY3Rpb259IGFjdGlvbjFcbiAgICAgKiBAcGFyYW0ge0Zpbml0ZVRpbWVBY3Rpb259IGFjdGlvbjJcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGluaXRXaXRoVHdvQWN0aW9uczogZnVuY3Rpb24gaW5pdFdpdGhUd29BY3Rpb25zKGFjdGlvbjEsIGFjdGlvbjIpIHtcbiAgICAgICAgaWYgKCFhY3Rpb24xIHx8ICFhY3Rpb24yKSB7XG4gICAgICAgICAgICBjYy5lcnJvcklEKDEwMjcpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJldCA9IGZhbHNlO1xuXG4gICAgICAgIHZhciBkMSA9IGFjdGlvbjEuX2R1cmF0aW9uO1xuICAgICAgICB2YXIgZDIgPSBhY3Rpb24yLl9kdXJhdGlvbjtcblxuICAgICAgICBpZiAodGhpcy5pbml0V2l0aER1cmF0aW9uKE1hdGgubWF4KGQxLCBkMikpKSB7XG4gICAgICAgICAgICB0aGlzLl9vbmUgPSBhY3Rpb24xO1xuICAgICAgICAgICAgdGhpcy5fdHdvID0gYWN0aW9uMjtcblxuICAgICAgICAgICAgaWYgKGQxID4gZDIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90d28gPSBjYy5TZXF1ZW5jZS5fYWN0aW9uT25lVHdvKGFjdGlvbjIsIGNjLmRlbGF5VGltZShkMSAtIGQyKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGQxIDwgZDIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbmUgPSBjYy5TZXF1ZW5jZS5fYWN0aW9uT25lVHdvKGFjdGlvbjEsIGNjLmRlbGF5VGltZShkMiAtIGQxKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9LFxuXG4gICAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgICB2YXIgYWN0aW9uID0gbmV3IGNjLlNwYXduKCk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICBhY3Rpb24uaW5pdFdpdGhUd29BY3Rpb25zKHRoaXMuX29uZS5jbG9uZSgpLCB0aGlzLl90d28uY2xvbmUoKSk7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIHN0YXJ0V2l0aFRhcmdldDogZnVuY3Rpb24gc3RhcnRXaXRoVGFyZ2V0KHRhcmdldCkge1xuICAgICAgICBjYy5BY3Rpb25JbnRlcnZhbC5wcm90b3R5cGUuc3RhcnRXaXRoVGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcbiAgICAgICAgdGhpcy5fb25lLnN0YXJ0V2l0aFRhcmdldCh0YXJnZXQpO1xuICAgICAgICB0aGlzLl90d28uc3RhcnRXaXRoVGFyZ2V0KHRhcmdldCk7XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAgIHRoaXMuX29uZS5zdG9wKCk7XG4gICAgICAgIHRoaXMuX3R3by5zdG9wKCk7XG4gICAgICAgIGNjLkFjdGlvbi5wcm90b3R5cGUuc3RvcC5jYWxsKHRoaXMpO1xuICAgIH0sXG5cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShkdCkge1xuICAgICAgICBkdCA9IHRoaXMuX2NvbXB1dGVFYXNlVGltZShkdCk7XG4gICAgICAgIGlmICh0aGlzLl9vbmUpIHRoaXMuX29uZS51cGRhdGUoZHQpO1xuICAgICAgICBpZiAodGhpcy5fdHdvKSB0aGlzLl90d28udXBkYXRlKGR0KTtcbiAgICB9LFxuXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IGNjLlNwYXduLl9hY3Rpb25PbmVUd28odGhpcy5fb25lLnJldmVyc2UoKSwgdGhpcy5fdHdvLnJldmVyc2UoKSk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICB0aGlzLl9yZXZlcnNlRWFzZUxpc3QoYWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9XG59KTtcblxuLyoqXG4gKiAhI2VuIENyZWF0ZSBhIHNwYXduIGFjdGlvbiB3aGljaCBydW5zIHNldmVyYWwgYWN0aW9ucyBpbiBwYXJhbGxlbC5cbiAqICEjemgg5ZCM5q2l5omn6KGM5Yqo5L2c77yM5ZCM5q2l5omn6KGM5LiA57uE5Yqo5L2c44CCXG4gKiBAbWV0aG9kIHNwYXduXG4gKiBAcGFyYW0ge0Zpbml0ZVRpbWVBY3Rpb258RmluaXRlVGltZUFjdGlvbltdfSBhY3Rpb25PckFjdGlvbkFycmF5XG4gKiBAcGFyYW0ge0Zpbml0ZVRpbWVBY3Rpb259IC4uLnRlbXBBcnJheVxuICogQHJldHVybiB7RmluaXRlVGltZUFjdGlvbn1cbiAqIEBleGFtcGxlXG4gKiAvLyBleGFtcGxlXG4gKiB2YXIgYWN0aW9uID0gY2Muc3Bhd24oY2MuanVtcEJ5KDIsIGNjLnYyKDMwMCwgMCksIDUwLCA0KSwgY2Mucm90YXRlQnkoMiwgNzIwKSk7XG4gKiB0b2RvOkl0IHNob3VsZCBiZSB0aGUgZGlyZWN0IHVzZSBuZXdcbiAqL1xuY2Muc3Bhd24gPSBmdW5jdGlvbiAoIC8qTXVsdGlwbGUgQXJndW1lbnRzKi90ZW1wQXJyYXkpIHtcbiAgICB2YXIgcGFyYW1BcnJheSA9IHRlbXBBcnJheSBpbnN0YW5jZW9mIEFycmF5ID8gdGVtcEFycmF5IDogYXJndW1lbnRzO1xuICAgIGlmIChwYXJhbUFycmF5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBjYy5lcnJvcklEKDEwMjApO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKHBhcmFtQXJyYXkubGVuZ3RoID4gMCAmJiBwYXJhbUFycmF5W3BhcmFtQXJyYXkubGVuZ3RoIC0gMV0gPT0gbnVsbCkgY2MubG9nSUQoMTAxNSk7XG5cbiAgICB2YXIgcHJldiA9IHBhcmFtQXJyYXlbMF07XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBwYXJhbUFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChwYXJhbUFycmF5W2ldICE9IG51bGwpIHByZXYgPSBjYy5TcGF3bi5fYWN0aW9uT25lVHdvKHByZXYsIHBhcmFtQXJyYXlbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gcHJldjtcbn07XG5cbmNjLlNwYXduLl9hY3Rpb25PbmVUd28gPSBmdW5jdGlvbiAoYWN0aW9uMSwgYWN0aW9uMikge1xuICAgIHZhciBwU3Bhd24gPSBuZXcgY2MuU3Bhd24oKTtcbiAgICBwU3Bhd24uaW5pdFdpdGhUd29BY3Rpb25zKGFjdGlvbjEsIGFjdGlvbjIpO1xuICAgIHJldHVybiBwU3Bhd247XG59O1xuXG4vKlxuICogUm90YXRlcyBhIE5vZGUgb2JqZWN0IHRvIGEgY2VydGFpbiBhbmdsZSBieSBtb2RpZnlpbmcgaXRzIGFuZ2xlIHByb3BlcnR5LiA8YnIvPlxuICogVGhlIGRpcmVjdGlvbiB3aWxsIGJlIGRlY2lkZWQgYnkgdGhlIHNob3J0ZXN0IGFuZ2xlLlxuICogQGNsYXNzIFJvdGF0ZVRvXG4gKiBAZXh0ZW5kcyBBY3Rpb25JbnRlcnZhbFxuICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uIGR1cmF0aW9uIGluIHNlY29uZHNcbiAqIEBwYXJhbSB7TnVtYmVyfSBkc3RBbmdsZSBkc3RBbmdsZSBpbiBkZWdyZWVzLlxuICogQGV4YW1wbGVcbiAqIHZhciByb3RhdGVUbyA9IG5ldyBjYy5Sb3RhdGVUbygyLCA2MS4wKTtcbiAqL1xuY2MuUm90YXRlVG8gPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLlJvdGF0ZVRvJyxcbiAgICBleHRlbmRzOiBjYy5BY3Rpb25JbnRlcnZhbCxcblxuICAgIGN0b3I6IGZ1bmN0aW9uIGN0b3IoZHVyYXRpb24sIGRzdEFuZ2xlKSB7XG4gICAgICAgIHRoaXMuX3N0YXJ0QW5nbGUgPSAwO1xuICAgICAgICB0aGlzLl9kc3RBbmdsZSA9IDA7XG4gICAgICAgIHRoaXMuX2FuZ2xlID0gMDtcbiAgICAgICAgZHN0QW5nbGUgIT09IHVuZGVmaW5lZCAmJiB0aGlzLmluaXRXaXRoRHVyYXRpb24oZHVyYXRpb24sIGRzdEFuZ2xlKTtcbiAgICB9LFxuXG4gICAgLypcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkc3RBbmdsZVxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaW5pdFdpdGhEdXJhdGlvbjogZnVuY3Rpb24gaW5pdFdpdGhEdXJhdGlvbihkdXJhdGlvbiwgZHN0QW5nbGUpIHtcbiAgICAgICAgaWYgKGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5pbml0V2l0aER1cmF0aW9uLmNhbGwodGhpcywgZHVyYXRpb24pKSB7XG4gICAgICAgICAgICB0aGlzLl9kc3RBbmdsZSA9IGRzdEFuZ2xlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuUm90YXRlVG8oKTtcbiAgICAgICAgdGhpcy5fY2xvbmVEZWNvcmF0aW9uKGFjdGlvbik7XG4gICAgICAgIGFjdGlvbi5pbml0V2l0aER1cmF0aW9uKHRoaXMuX2R1cmF0aW9uLCB0aGlzLl9kc3RBbmdsZSk7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIHN0YXJ0V2l0aFRhcmdldDogZnVuY3Rpb24gc3RhcnRXaXRoVGFyZ2V0KHRhcmdldCkge1xuICAgICAgICBjYy5BY3Rpb25JbnRlcnZhbC5wcm90b3R5cGUuc3RhcnRXaXRoVGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcblxuICAgICAgICB2YXIgc3RhcnRBbmdsZSA9IHRhcmdldC5hbmdsZSAlIDM2MDtcblxuICAgICAgICB2YXIgYW5nbGUgPSBjYy5tYWNyby5ST1RBVEVfQUNUSU9OX0NDVyA/IHRoaXMuX2RzdEFuZ2xlIC0gc3RhcnRBbmdsZSA6IHN0YXJ0QW5nbGUgLSB0aGlzLl9kc3RBbmdsZTtcbiAgICAgICAgaWYgKGFuZ2xlID4gMTgwKSBhbmdsZSAtPSAzNjA7XG4gICAgICAgIGlmIChhbmdsZSA8IC0xODApIGFuZ2xlICs9IDM2MDtcblxuICAgICAgICB0aGlzLl9zdGFydEFuZ2xlID0gc3RhcnRBbmdsZTtcbiAgICAgICAgdGhpcy5fYW5nbGUgPSBjYy5tYWNyby5ST1RBVEVfQUNUSU9OX0NDVyA/IGFuZ2xlIDogLWFuZ2xlO1xuICAgIH0sXG5cbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgICBjYy5sb2dJRCgxMDE2KTtcbiAgICB9LFxuXG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoZHQpIHtcbiAgICAgICAgZHQgPSB0aGlzLl9jb21wdXRlRWFzZVRpbWUoZHQpO1xuICAgICAgICBpZiAodGhpcy50YXJnZXQpIHtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0LmFuZ2xlID0gdGhpcy5fc3RhcnRBbmdsZSArIHRoaXMuX2FuZ2xlICogZHQ7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuLyoqXG4gKiAhI2VuXG4gKiBSb3RhdGVzIGEgTm9kZSBvYmplY3QgdG8gYSBjZXJ0YWluIGFuZ2xlIGJ5IG1vZGlmeWluZyBpdHMgYW5nbGUgcHJvcGVydHkuIDxici8+XG4gKiBUaGUgZGlyZWN0aW9uIHdpbGwgYmUgZGVjaWRlZCBieSB0aGUgc2hvcnRlc3QgYW5nbGUuXG4gKiAhI3poIOaXi+i9rOWIsOebruagh+inkuW6pu+8jOmAmui/h+mAkOW4p+S/ruaUueWug+eahCBhbmdsZSDlsZ7mgKfvvIzml4vovazmlrnlkJHlsIbnlLHmnIDnn63nmoTop5LluqblhrPlrprjgIJcbiAqIEBtZXRob2Qgcm90YXRlVG9cbiAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvbiBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gKiBAcGFyYW0ge051bWJlcn0gZHN0QW5nbGUgZHN0QW5nbGUgaW4gZGVncmVlcy5cbiAqIEByZXR1cm4ge0FjdGlvbkludGVydmFsfVxuICogQGV4YW1wbGVcbiAqIC8vIGV4YW1wbGVcbiAqIHZhciByb3RhdGVUbyA9IGNjLnJvdGF0ZVRvKDIsIDYxLjApO1xuICovXG5jYy5yb3RhdGVUbyA9IGZ1bmN0aW9uIChkdXJhdGlvbiwgZHN0QW5nbGUpIHtcbiAgICByZXR1cm4gbmV3IGNjLlJvdGF0ZVRvKGR1cmF0aW9uLCBkc3RBbmdsZSk7XG59O1xuXG4vKlxuICogUm90YXRlcyBhIE5vZGUgb2JqZWN0IGNsb2Nrd2lzZSBhIG51bWJlciBvZiBkZWdyZWVzIGJ5IG1vZGlmeWluZyBpdHMgYW5nbGUgcHJvcGVydHkuXG4gKiBSZWxhdGl2ZSB0byBpdHMgcHJvcGVydGllcyB0byBtb2RpZnkuXG4gKiBAY2xhc3MgUm90YXRlQnlcbiAqIEBleHRlbmRzIEFjdGlvbkludGVydmFsXG4gKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb24gZHVyYXRpb24gaW4gc2Vjb25kc1xuICogQHBhcmFtIHtOdW1iZXJ9IGRlbHRhQW5nbGUgZGVsdGFBbmdsZSBpbiBkZWdyZWVzXG4gKiBAZXhhbXBsZVxuICogdmFyIGFjdGlvbkJ5ID0gbmV3IGNjLlJvdGF0ZUJ5KDIsIDM2MCk7XG4gKi9cbmNjLlJvdGF0ZUJ5ID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5Sb3RhdGVCeScsXG4gICAgZXh0ZW5kczogY2MuQWN0aW9uSW50ZXJ2YWwsXG5cbiAgICBjdG9yOiBmdW5jdGlvbiBjdG9yKGR1cmF0aW9uLCBkZWx0YUFuZ2xlKSB7XG4gICAgICAgIGRlbHRhQW5nbGUgKj0gY2MubWFjcm8uUk9UQVRFX0FDVElPTl9DQ1cgPyAxIDogLTE7XG5cbiAgICAgICAgdGhpcy5fZGVsdGFBbmdsZSA9IDA7XG4gICAgICAgIHRoaXMuX3N0YXJ0QW5nbGUgPSAwO1xuICAgICAgICBkZWx0YUFuZ2xlICE9PSB1bmRlZmluZWQgJiYgdGhpcy5pbml0V2l0aER1cmF0aW9uKGR1cmF0aW9uLCBkZWx0YUFuZ2xlKTtcbiAgICB9LFxuXG4gICAgLypcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvbiBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGRlbHRhQW5nbGUgZGVsdGFBbmdsZSBpbiBkZWdyZWVzXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpbml0V2l0aER1cmF0aW9uOiBmdW5jdGlvbiBpbml0V2l0aER1cmF0aW9uKGR1cmF0aW9uLCBkZWx0YUFuZ2xlKSB7XG4gICAgICAgIGlmIChjYy5BY3Rpb25JbnRlcnZhbC5wcm90b3R5cGUuaW5pdFdpdGhEdXJhdGlvbi5jYWxsKHRoaXMsIGR1cmF0aW9uKSkge1xuICAgICAgICAgICAgdGhpcy5fZGVsdGFBbmdsZSA9IGRlbHRhQW5nbGU7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIGNsb25lOiBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5Sb3RhdGVCeSgpO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgYWN0aW9uLmluaXRXaXRoRHVyYXRpb24odGhpcy5fZHVyYXRpb24sIHRoaXMuX2RlbHRhQW5nbGUpO1xuICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG5cbiAgICBzdGFydFdpdGhUYXJnZXQ6IGZ1bmN0aW9uIHN0YXJ0V2l0aFRhcmdldCh0YXJnZXQpIHtcbiAgICAgICAgY2MuQWN0aW9uSW50ZXJ2YWwucHJvdG90eXBlLnN0YXJ0V2l0aFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCk7XG4gICAgICAgIHRoaXMuX3N0YXJ0QW5nbGUgPSB0YXJnZXQuYW5nbGU7XG4gICAgfSxcblxuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKGR0KSB7XG4gICAgICAgIGR0ID0gdGhpcy5fY29tcHV0ZUVhc2VUaW1lKGR0KTtcbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0KSB7XG4gICAgICAgICAgICB0aGlzLnRhcmdldC5hbmdsZSA9IHRoaXMuX3N0YXJ0QW5nbGUgKyB0aGlzLl9kZWx0YUFuZ2xlICogZHQ7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5Sb3RhdGVCeSgpO1xuICAgICAgICBhY3Rpb24uaW5pdFdpdGhEdXJhdGlvbih0aGlzLl9kdXJhdGlvbiwgLXRoaXMuX2RlbHRhQW5nbGUpO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgdGhpcy5fcmV2ZXJzZUVhc2VMaXN0KGFjdGlvbik7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfVxufSk7XG5cbi8qKlxuICogISNlblxuICogUm90YXRlcyBhIE5vZGUgb2JqZWN0IGNsb2Nrd2lzZSBhIG51bWJlciBvZiBkZWdyZWVzIGJ5IG1vZGlmeWluZyBpdHMgYW5nbGUgcHJvcGVydHkuXG4gKiBSZWxhdGl2ZSB0byBpdHMgcHJvcGVydGllcyB0byBtb2RpZnkuXG4gKiAhI3poIOaXi+i9rOaMh+WumueahOinkuW6puOAglxuICogQG1ldGhvZCByb3RhdGVCeVxuICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uIGR1cmF0aW9uIGluIHNlY29uZHNcbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWx0YUFuZ2xlIGRlbHRhQW5nbGUgaW4gZGVncmVlc1xuICogQHJldHVybiB7QWN0aW9uSW50ZXJ2YWx9XG4gKiBAZXhhbXBsZVxuICogLy8gZXhhbXBsZVxuICogdmFyIGFjdGlvbkJ5ID0gY2Mucm90YXRlQnkoMiwgMzYwKTtcbiAqL1xuY2Mucm90YXRlQnkgPSBmdW5jdGlvbiAoZHVyYXRpb24sIGRlbHRhQW5nbGUpIHtcbiAgICByZXR1cm4gbmV3IGNjLlJvdGF0ZUJ5KGR1cmF0aW9uLCBkZWx0YUFuZ2xlKTtcbn07XG5cbi8qXG4gKiA8cD5cbiAqIE1vdmVzIGEgTm9kZSBvYmplY3QgeCx5IHBpeGVscyBieSBtb2RpZnlpbmcgaXRzIHBvc2l0aW9uIHByb3BlcnR5LiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIvPlxuICogeCBhbmQgeSBhcmUgcmVsYXRpdmUgdG8gdGhlIHBvc2l0aW9uIG9mIHRoZSBvYmplY3QuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIvPlxuICogU2V2ZXJhbCBNb3ZlQnkgYWN0aW9ucyBjYW4gYmUgY29uY3VycmVudGx5IGNhbGxlZCwgYW5kIHRoZSByZXN1bHRpbmcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyLz5cbiAqIG1vdmVtZW50IHdpbGwgYmUgdGhlIHN1bSBvZiBpbmRpdmlkdWFsIG1vdmVtZW50cy5cbiAqIDwvcD5cbiAqIEBjbGFzcyBNb3ZlQnlcbiAqIEBleHRlbmRzIEFjdGlvbkludGVydmFsXG4gKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb24gZHVyYXRpb24gaW4gc2Vjb25kc1xuICogQHBhcmFtIHtWZWMyfE51bWJlcn0gZGVsdGFQb3NcbiAqIEBwYXJhbSB7TnVtYmVyfSBbZGVsdGFZXVxuICogQGV4YW1wbGVcbiAqIHZhciBhY3Rpb25UbyA9IGNjLm1vdmVCeSgyLCBjYy52Mih3aW5kb3dTaXplLndpZHRoIC0gNDAsIHdpbmRvd1NpemUuaGVpZ2h0IC0gNDApKTtcbiAqL1xuY2MuTW92ZUJ5ID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5Nb3ZlQnknLFxuICAgIGV4dGVuZHM6IGNjLkFjdGlvbkludGVydmFsLFxuXG4gICAgY3RvcjogZnVuY3Rpb24gY3RvcihkdXJhdGlvbiwgZGVsdGFQb3MsIGRlbHRhWSkge1xuICAgICAgICB0aGlzLl9wb3NpdGlvbkRlbHRhID0gY2MudjIoMCwgMCk7XG4gICAgICAgIHRoaXMuX3N0YXJ0UG9zaXRpb24gPSBjYy52MigwLCAwKTtcbiAgICAgICAgdGhpcy5fcHJldmlvdXNQb3NpdGlvbiA9IGNjLnYyKDAsIDApO1xuXG4gICAgICAgIGRlbHRhUG9zICE9PSB1bmRlZmluZWQgJiYgY2MuTW92ZUJ5LnByb3RvdHlwZS5pbml0V2l0aER1cmF0aW9uLmNhbGwodGhpcywgZHVyYXRpb24sIGRlbHRhUG9zLCBkZWx0YVkpO1xuICAgIH0sXG5cbiAgICAvKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBhY3Rpb24uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uIGR1cmF0aW9uIGluIHNlY29uZHNcbiAgICAgKiBAcGFyYW0ge1ZlYzJ9IHBvc2l0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFt5XVxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaW5pdFdpdGhEdXJhdGlvbjogZnVuY3Rpb24gaW5pdFdpdGhEdXJhdGlvbihkdXJhdGlvbiwgcG9zaXRpb24sIHkpIHtcbiAgICAgICAgaWYgKGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5pbml0V2l0aER1cmF0aW9uLmNhbGwodGhpcywgZHVyYXRpb24pKSB7XG4gICAgICAgICAgICBpZiAocG9zaXRpb24ueCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgeSA9IHBvc2l0aW9uLnk7XG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbi54O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9wb3NpdGlvbkRlbHRhLnggPSBwb3NpdGlvbjtcbiAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uRGVsdGEueSA9IHk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIGNsb25lOiBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5Nb3ZlQnkoKTtcbiAgICAgICAgdGhpcy5fY2xvbmVEZWNvcmF0aW9uKGFjdGlvbik7XG4gICAgICAgIGFjdGlvbi5pbml0V2l0aER1cmF0aW9uKHRoaXMuX2R1cmF0aW9uLCB0aGlzLl9wb3NpdGlvbkRlbHRhKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgc3RhcnRXaXRoVGFyZ2V0OiBmdW5jdGlvbiBzdGFydFdpdGhUYXJnZXQodGFyZ2V0KSB7XG4gICAgICAgIGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5zdGFydFdpdGhUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpO1xuICAgICAgICB2YXIgbG9jUG9zWCA9IHRhcmdldC54O1xuICAgICAgICB2YXIgbG9jUG9zWSA9IHRhcmdldC55O1xuICAgICAgICB0aGlzLl9wcmV2aW91c1Bvc2l0aW9uLnggPSBsb2NQb3NYO1xuICAgICAgICB0aGlzLl9wcmV2aW91c1Bvc2l0aW9uLnkgPSBsb2NQb3NZO1xuICAgICAgICB0aGlzLl9zdGFydFBvc2l0aW9uLnggPSBsb2NQb3NYO1xuICAgICAgICB0aGlzLl9zdGFydFBvc2l0aW9uLnkgPSBsb2NQb3NZO1xuICAgIH0sXG5cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShkdCkge1xuICAgICAgICBkdCA9IHRoaXMuX2NvbXB1dGVFYXNlVGltZShkdCk7XG4gICAgICAgIGlmICh0aGlzLnRhcmdldCkge1xuICAgICAgICAgICAgdmFyIHggPSB0aGlzLl9wb3NpdGlvbkRlbHRhLnggKiBkdDtcbiAgICAgICAgICAgIHZhciB5ID0gdGhpcy5fcG9zaXRpb25EZWx0YS55ICogZHQ7XG4gICAgICAgICAgICB2YXIgbG9jU3RhcnRQb3NpdGlvbiA9IHRoaXMuX3N0YXJ0UG9zaXRpb247XG4gICAgICAgICAgICBpZiAoY2MubWFjcm8uRU5BQkxFX1NUQUNLQUJMRV9BQ1RJT05TKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldFggPSB0aGlzLnRhcmdldC54O1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXRZID0gdGhpcy50YXJnZXQueTtcbiAgICAgICAgICAgICAgICB2YXIgbG9jUHJldmlvdXNQb3NpdGlvbiA9IHRoaXMuX3ByZXZpb3VzUG9zaXRpb247XG5cbiAgICAgICAgICAgICAgICBsb2NTdGFydFBvc2l0aW9uLnggPSBsb2NTdGFydFBvc2l0aW9uLnggKyB0YXJnZXRYIC0gbG9jUHJldmlvdXNQb3NpdGlvbi54O1xuICAgICAgICAgICAgICAgIGxvY1N0YXJ0UG9zaXRpb24ueSA9IGxvY1N0YXJ0UG9zaXRpb24ueSArIHRhcmdldFkgLSBsb2NQcmV2aW91c1Bvc2l0aW9uLnk7XG4gICAgICAgICAgICAgICAgeCA9IHggKyBsb2NTdGFydFBvc2l0aW9uLng7XG4gICAgICAgICAgICAgICAgeSA9IHkgKyBsb2NTdGFydFBvc2l0aW9uLnk7XG4gICAgICAgICAgICAgICAgbG9jUHJldmlvdXNQb3NpdGlvbi54ID0geDtcbiAgICAgICAgICAgICAgICBsb2NQcmV2aW91c1Bvc2l0aW9uLnkgPSB5O1xuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0LnNldFBvc2l0aW9uKHgsIHkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldC5zZXRQb3NpdGlvbihsb2NTdGFydFBvc2l0aW9uLnggKyB4LCBsb2NTdGFydFBvc2l0aW9uLnkgKyB5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgICB2YXIgYWN0aW9uID0gbmV3IGNjLk1vdmVCeSh0aGlzLl9kdXJhdGlvbiwgY2MudjIoLXRoaXMuX3Bvc2l0aW9uRGVsdGEueCwgLXRoaXMuX3Bvc2l0aW9uRGVsdGEueSkpO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgdGhpcy5fcmV2ZXJzZUVhc2VMaXN0KGFjdGlvbik7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfVxufSk7XG5cbi8qKlxuICogISNlblxuICogTW92ZXMgYSBOb2RlIG9iamVjdCB4LHkgcGl4ZWxzIGJ5IG1vZGlmeWluZyBpdHMgcG9zaXRpb24gcHJvcGVydHkuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxici8+XG4gKiB4IGFuZCB5IGFyZSByZWxhdGl2ZSB0byB0aGUgcG9zaXRpb24gb2YgdGhlIG9iamVjdC4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxici8+XG4gKiBTZXZlcmFsIE1vdmVCeSBhY3Rpb25zIGNhbiBiZSBjb25jdXJyZW50bHkgY2FsbGVkLCBhbmQgdGhlIHJlc3VsdGluZyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIvPlxuICogbW92ZW1lbnQgd2lsbCBiZSB0aGUgc3VtIG9mIGluZGl2aWR1YWwgbW92ZW1lbnRzLlxuICogISN6aCDnp7vliqjmjIflrprnmoTot53nprvjgIJcbiAqIEBtZXRob2QgbW92ZUJ5XG4gKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb24gZHVyYXRpb24gaW4gc2Vjb25kc1xuICogQHBhcmFtIHtWZWMyfE51bWJlcn0gZGVsdGFQb3NcbiAqIEBwYXJhbSB7TnVtYmVyfSBbZGVsdGFZXVxuICogQHJldHVybiB7QWN0aW9uSW50ZXJ2YWx9XG4gKiBAZXhhbXBsZVxuICogLy8gZXhhbXBsZVxuICogdmFyIGFjdGlvblRvID0gY2MubW92ZUJ5KDIsIGNjLnYyKHdpbmRvd1NpemUud2lkdGggLSA0MCwgd2luZG93U2l6ZS5oZWlnaHQgLSA0MCkpO1xuICovXG5jYy5tb3ZlQnkgPSBmdW5jdGlvbiAoZHVyYXRpb24sIGRlbHRhUG9zLCBkZWx0YVkpIHtcbiAgICByZXR1cm4gbmV3IGNjLk1vdmVCeShkdXJhdGlvbiwgZGVsdGFQb3MsIGRlbHRhWSk7XG59O1xuXG4vKlxuICogTW92ZXMgYSBOb2RlIG9iamVjdCB0byB0aGUgcG9zaXRpb24geCx5LiB4IGFuZCB5IGFyZSBhYnNvbHV0ZSBjb29yZGluYXRlcyBieSBtb2RpZnlpbmcgaXRzIHBvc2l0aW9uIHByb3BlcnR5LiA8YnIvPlxuICogU2V2ZXJhbCBNb3ZlVG8gYWN0aW9ucyBjYW4gYmUgY29uY3VycmVudGx5IGNhbGxlZCwgYW5kIHRoZSByZXN1bHRpbmcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxici8+XG4gKiBtb3ZlbWVudCB3aWxsIGJlIHRoZSBzdW0gb2YgaW5kaXZpZHVhbCBtb3ZlbWVudHMuXG4gKiBAY2xhc3MgTW92ZVRvXG4gKiBAZXh0ZW5kcyBNb3ZlQnlcbiAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvbiBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gKiBAcGFyYW0ge1ZlYzJ8TnVtYmVyfSBwb3NpdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IFt5XVxuICogQGV4YW1wbGVcbiAqIHZhciBhY3Rpb25CeSA9IG5ldyBjYy5Nb3ZlVG8oMiwgY2MudjIoODAsIDgwKSk7XG4gKi9cbmNjLk1vdmVUbyA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuTW92ZVRvJyxcbiAgICBleHRlbmRzOiBjYy5Nb3ZlQnksXG5cbiAgICBjdG9yOiBmdW5jdGlvbiBjdG9yKGR1cmF0aW9uLCBwb3NpdGlvbiwgeSkge1xuICAgICAgICB0aGlzLl9lbmRQb3NpdGlvbiA9IGNjLnYyKDAsIDApO1xuICAgICAgICBwb3NpdGlvbiAhPT0gdW5kZWZpbmVkICYmIHRoaXMuaW5pdFdpdGhEdXJhdGlvbihkdXJhdGlvbiwgcG9zaXRpb24sIHkpO1xuICAgIH0sXG5cbiAgICAvKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBhY3Rpb24uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uICBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gICAgICogQHBhcmFtIHtWZWMyfSBwb3NpdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbeV1cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGluaXRXaXRoRHVyYXRpb246IGZ1bmN0aW9uIGluaXRXaXRoRHVyYXRpb24oZHVyYXRpb24sIHBvc2l0aW9uLCB5KSB7XG4gICAgICAgIGlmIChjYy5Nb3ZlQnkucHJvdG90eXBlLmluaXRXaXRoRHVyYXRpb24uY2FsbCh0aGlzLCBkdXJhdGlvbiwgcG9zaXRpb24sIHkpKSB7XG4gICAgICAgICAgICBpZiAocG9zaXRpb24ueCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgeSA9IHBvc2l0aW9uLnk7XG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbi54O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9lbmRQb3NpdGlvbi54ID0gcG9zaXRpb247XG4gICAgICAgICAgICB0aGlzLl9lbmRQb3NpdGlvbi55ID0geTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgICB2YXIgYWN0aW9uID0gbmV3IGNjLk1vdmVUbygpO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgYWN0aW9uLmluaXRXaXRoRHVyYXRpb24odGhpcy5fZHVyYXRpb24sIHRoaXMuX2VuZFBvc2l0aW9uKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgc3RhcnRXaXRoVGFyZ2V0OiBmdW5jdGlvbiBzdGFydFdpdGhUYXJnZXQodGFyZ2V0KSB7XG4gICAgICAgIGNjLk1vdmVCeS5wcm90b3R5cGUuc3RhcnRXaXRoVGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcbiAgICAgICAgdGhpcy5fcG9zaXRpb25EZWx0YS54ID0gdGhpcy5fZW5kUG9zaXRpb24ueCAtIHRhcmdldC54O1xuICAgICAgICB0aGlzLl9wb3NpdGlvbkRlbHRhLnkgPSB0aGlzLl9lbmRQb3NpdGlvbi55IC0gdGFyZ2V0Lnk7XG4gICAgfVxufSk7XG5cbi8qKlxuICogISNlblxuICogTW92ZXMgYSBOb2RlIG9iamVjdCB0byB0aGUgcG9zaXRpb24geCx5LiB4IGFuZCB5IGFyZSBhYnNvbHV0ZSBjb29yZGluYXRlcyBieSBtb2RpZnlpbmcgaXRzIHBvc2l0aW9uIHByb3BlcnR5LiA8YnIvPlxuICogU2V2ZXJhbCBNb3ZlVG8gYWN0aW9ucyBjYW4gYmUgY29uY3VycmVudGx5IGNhbGxlZCwgYW5kIHRoZSByZXN1bHRpbmcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxici8+XG4gKiBtb3ZlbWVudCB3aWxsIGJlIHRoZSBzdW0gb2YgaW5kaXZpZHVhbCBtb3ZlbWVudHMuXG4gKiAhI3poIOenu+WKqOWIsOebruagh+S9jee9ruOAglxuICogQG1ldGhvZCBtb3ZlVG9cbiAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvbiBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gKiBAcGFyYW0ge1ZlYzJ8TnVtYmVyfSBwb3NpdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IFt5XVxuICogQHJldHVybiB7QWN0aW9uSW50ZXJ2YWx9XG4gKiBAZXhhbXBsZVxuICogLy8gZXhhbXBsZVxuICogdmFyIGFjdGlvbkJ5ID0gY2MubW92ZVRvKDIsIGNjLnYyKDgwLCA4MCkpO1xuICovXG5jYy5tb3ZlVG8gPSBmdW5jdGlvbiAoZHVyYXRpb24sIHBvc2l0aW9uLCB5KSB7XG4gICAgcmV0dXJuIG5ldyBjYy5Nb3ZlVG8oZHVyYXRpb24sIHBvc2l0aW9uLCB5KTtcbn07XG5cbi8qXG4gKiBTa2V3cyBhIE5vZGUgb2JqZWN0IHRvIGdpdmVuIGFuZ2xlcyBieSBtb2RpZnlpbmcgaXRzIHNrZXdYIGFuZCBza2V3WSBwcm9wZXJ0aWVzXG4gKiBAY2xhc3MgU2tld1RvXG4gKiBAZXh0ZW5kcyBBY3Rpb25JbnRlcnZhbFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgdGltZSBpbiBzZWNvbmRzXG4gKiBAcGFyYW0ge051bWJlcn0gc3hcbiAqIEBwYXJhbSB7TnVtYmVyfSBzeVxuICogQGV4YW1wbGVcbiAqIHZhciBhY3Rpb25UbyA9IG5ldyBjYy5Ta2V3VG8oMiwgMzcuMiwgLTM3LjIpO1xuICovXG5jYy5Ta2V3VG8gPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLlNrZXdUbycsXG4gICAgZXh0ZW5kczogY2MuQWN0aW9uSW50ZXJ2YWwsXG5cbiAgICBjdG9yOiBmdW5jdGlvbiBjdG9yKHQsIHN4LCBzeSkge1xuICAgICAgICB0aGlzLl9za2V3WCA9IDA7XG4gICAgICAgIHRoaXMuX3NrZXdZID0gMDtcbiAgICAgICAgdGhpcy5fc3RhcnRTa2V3WCA9IDA7XG4gICAgICAgIHRoaXMuX3N0YXJ0U2tld1kgPSAwO1xuICAgICAgICB0aGlzLl9lbmRTa2V3WCA9IDA7XG4gICAgICAgIHRoaXMuX2VuZFNrZXdZID0gMDtcbiAgICAgICAgdGhpcy5fZGVsdGFYID0gMDtcbiAgICAgICAgdGhpcy5fZGVsdGFZID0gMDtcbiAgICAgICAgc3kgIT09IHVuZGVmaW5lZCAmJiBjYy5Ta2V3VG8ucHJvdG90eXBlLmluaXRXaXRoRHVyYXRpb24uY2FsbCh0aGlzLCB0LCBzeCwgc3kpO1xuICAgIH0sXG5cbiAgICAvKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBhY3Rpb24uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHQgdGltZSBpbiBzZWNvbmRzXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHN4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHN5XG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpbml0V2l0aER1cmF0aW9uOiBmdW5jdGlvbiBpbml0V2l0aER1cmF0aW9uKHQsIHN4LCBzeSkge1xuICAgICAgICB2YXIgcmV0ID0gZmFsc2U7XG4gICAgICAgIGlmIChjYy5BY3Rpb25JbnRlcnZhbC5wcm90b3R5cGUuaW5pdFdpdGhEdXJhdGlvbi5jYWxsKHRoaXMsIHQpKSB7XG4gICAgICAgICAgICB0aGlzLl9lbmRTa2V3WCA9IHN4O1xuICAgICAgICAgICAgdGhpcy5fZW5kU2tld1kgPSBzeTtcbiAgICAgICAgICAgIHJldCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9LFxuXG4gICAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgICB2YXIgYWN0aW9uID0gbmV3IGNjLlNrZXdUbygpO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgYWN0aW9uLmluaXRXaXRoRHVyYXRpb24odGhpcy5fZHVyYXRpb24sIHRoaXMuX2VuZFNrZXdYLCB0aGlzLl9lbmRTa2V3WSk7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIHN0YXJ0V2l0aFRhcmdldDogZnVuY3Rpb24gc3RhcnRXaXRoVGFyZ2V0KHRhcmdldCkge1xuICAgICAgICBjYy5BY3Rpb25JbnRlcnZhbC5wcm90b3R5cGUuc3RhcnRXaXRoVGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcblxuICAgICAgICB0aGlzLl9zdGFydFNrZXdYID0gdGFyZ2V0LnNrZXdYICUgMTgwO1xuICAgICAgICB0aGlzLl9kZWx0YVggPSB0aGlzLl9lbmRTa2V3WCAtIHRoaXMuX3N0YXJ0U2tld1g7XG4gICAgICAgIGlmICh0aGlzLl9kZWx0YVggPiAxODApIHRoaXMuX2RlbHRhWCAtPSAzNjA7XG4gICAgICAgIGlmICh0aGlzLl9kZWx0YVggPCAtMTgwKSB0aGlzLl9kZWx0YVggKz0gMzYwO1xuXG4gICAgICAgIHRoaXMuX3N0YXJ0U2tld1kgPSB0YXJnZXQuc2tld1kgJSAzNjA7XG4gICAgICAgIHRoaXMuX2RlbHRhWSA9IHRoaXMuX2VuZFNrZXdZIC0gdGhpcy5fc3RhcnRTa2V3WTtcbiAgICAgICAgaWYgKHRoaXMuX2RlbHRhWSA+IDE4MCkgdGhpcy5fZGVsdGFZIC09IDM2MDtcbiAgICAgICAgaWYgKHRoaXMuX2RlbHRhWSA8IC0xODApIHRoaXMuX2RlbHRhWSArPSAzNjA7XG4gICAgfSxcblxuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKGR0KSB7XG4gICAgICAgIGR0ID0gdGhpcy5fY29tcHV0ZUVhc2VUaW1lKGR0KTtcbiAgICAgICAgdGhpcy50YXJnZXQuc2tld1ggPSB0aGlzLl9zdGFydFNrZXdYICsgdGhpcy5fZGVsdGFYICogZHQ7XG4gICAgICAgIHRoaXMudGFyZ2V0LnNrZXdZID0gdGhpcy5fc3RhcnRTa2V3WSArIHRoaXMuX2RlbHRhWSAqIGR0O1xuICAgIH1cbn0pO1xuXG4vKipcbiAqICEjZW5cbiAqIENyZWF0ZSBhIGFjdGlvbiB3aGljaCBza2V3cyBhIE5vZGUgb2JqZWN0IHRvIGdpdmVuIGFuZ2xlcyBieSBtb2RpZnlpbmcgaXRzIHNrZXdYIGFuZCBza2V3WSBwcm9wZXJ0aWVzLlxuICogQ2hhbmdlcyB0byB0aGUgc3BlY2lmaWVkIHZhbHVlLlxuICogISN6aCDlgY/mlpzliLDnm67moIfop5LluqbjgIJcbiAqIEBtZXRob2Qgc2tld1RvXG4gKiBAcGFyYW0ge051bWJlcn0gdCB0aW1lIGluIHNlY29uZHNcbiAqIEBwYXJhbSB7TnVtYmVyfSBzeFxuICogQHBhcmFtIHtOdW1iZXJ9IHN5XG4gKiBAcmV0dXJuIHtBY3Rpb25JbnRlcnZhbH1cbiAqIEBleGFtcGxlXG4gKiAvLyBleGFtcGxlXG4gKiB2YXIgYWN0aW9uVG8gPSBjYy5za2V3VG8oMiwgMzcuMiwgLTM3LjIpO1xuICovXG5jYy5za2V3VG8gPSBmdW5jdGlvbiAodCwgc3gsIHN5KSB7XG4gICAgcmV0dXJuIG5ldyBjYy5Ta2V3VG8odCwgc3gsIHN5KTtcbn07XG5cbi8qXG4gKiBTa2V3cyBhIE5vZGUgb2JqZWN0IGJ5IHNrZXdYIGFuZCBza2V3WSBkZWdyZWVzLlxuICogUmVsYXRpdmUgdG8gaXRzIHByb3BlcnR5IG1vZGlmaWNhdGlvbi5cbiAqIEBjbGFzcyBTa2V3QnlcbiAqIEBleHRlbmRzIFNrZXdUb1xuICogQHBhcmFtIHtOdW1iZXJ9IHQgdGltZSBpbiBzZWNvbmRzXG4gKiBAcGFyYW0ge051bWJlcn0gc3ggIHNrZXcgaW4gZGVncmVlcyBmb3IgWCBheGlzXG4gKiBAcGFyYW0ge051bWJlcn0gc3kgIHNrZXcgaW4gZGVncmVlcyBmb3IgWSBheGlzXG4gKi9cbmNjLlNrZXdCeSA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuU2tld0J5JyxcbiAgICBleHRlbmRzOiBjYy5Ta2V3VG8sXG5cbiAgICBjdG9yOiBmdW5jdGlvbiBjdG9yKHQsIHN4LCBzeSkge1xuICAgICAgICBzeSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuaW5pdFdpdGhEdXJhdGlvbih0LCBzeCwgc3kpO1xuICAgIH0sXG5cbiAgICAvKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBhY3Rpb24uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHQgdGltZSBpbiBzZWNvbmRzXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGRlbHRhU2tld1ggIHNrZXcgaW4gZGVncmVlcyBmb3IgWCBheGlzXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGRlbHRhU2tld1kgIHNrZXcgaW4gZGVncmVlcyBmb3IgWSBheGlzXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpbml0V2l0aER1cmF0aW9uOiBmdW5jdGlvbiBpbml0V2l0aER1cmF0aW9uKHQsIGRlbHRhU2tld1gsIGRlbHRhU2tld1kpIHtcbiAgICAgICAgdmFyIHJldCA9IGZhbHNlO1xuICAgICAgICBpZiAoY2MuU2tld1RvLnByb3RvdHlwZS5pbml0V2l0aER1cmF0aW9uLmNhbGwodGhpcywgdCwgZGVsdGFTa2V3WCwgZGVsdGFTa2V3WSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3NrZXdYID0gZGVsdGFTa2V3WDtcbiAgICAgICAgICAgIHRoaXMuX3NrZXdZID0gZGVsdGFTa2V3WTtcbiAgICAgICAgICAgIHJldCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9LFxuXG4gICAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgICB2YXIgYWN0aW9uID0gbmV3IGNjLlNrZXdCeSgpO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgYWN0aW9uLmluaXRXaXRoRHVyYXRpb24odGhpcy5fZHVyYXRpb24sIHRoaXMuX3NrZXdYLCB0aGlzLl9za2V3WSk7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIHN0YXJ0V2l0aFRhcmdldDogZnVuY3Rpb24gc3RhcnRXaXRoVGFyZ2V0KHRhcmdldCkge1xuICAgICAgICBjYy5Ta2V3VG8ucHJvdG90eXBlLnN0YXJ0V2l0aFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCk7XG4gICAgICAgIHRoaXMuX2RlbHRhWCA9IHRoaXMuX3NrZXdYO1xuICAgICAgICB0aGlzLl9kZWx0YVkgPSB0aGlzLl9za2V3WTtcbiAgICAgICAgdGhpcy5fZW5kU2tld1ggPSB0aGlzLl9zdGFydFNrZXdYICsgdGhpcy5fZGVsdGFYO1xuICAgICAgICB0aGlzLl9lbmRTa2V3WSA9IHRoaXMuX3N0YXJ0U2tld1kgKyB0aGlzLl9kZWx0YVk7XG4gICAgfSxcblxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuU2tld0J5KHRoaXMuX2R1cmF0aW9uLCAtdGhpcy5fc2tld1gsIC10aGlzLl9za2V3WSk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICB0aGlzLl9yZXZlcnNlRWFzZUxpc3QoYWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9XG59KTtcblxuLyoqXG4gKiAhI2VuXG4gKiBTa2V3cyBhIE5vZGUgb2JqZWN0IGJ5IHNrZXdYIGFuZCBza2V3WSBkZWdyZWVzLiA8YnIgLz5cbiAqIFJlbGF0aXZlIHRvIGl0cyBwcm9wZXJ0eSBtb2RpZmljYXRpb24uXG4gKiAhI3poIOWBj+aWnOaMh+WumueahOinkuW6puOAglxuICogQG1ldGhvZCBza2V3QnlcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IHRpbWUgaW4gc2Vjb25kc1xuICogQHBhcmFtIHtOdW1iZXJ9IHN4IHN4IHNrZXcgaW4gZGVncmVlcyBmb3IgWCBheGlzXG4gKiBAcGFyYW0ge051bWJlcn0gc3kgc3kgc2tldyBpbiBkZWdyZWVzIGZvciBZIGF4aXNcbiAqIEByZXR1cm4ge0FjdGlvbkludGVydmFsfVxuICogQGV4YW1wbGVcbiAqIC8vIGV4YW1wbGVcbiAqIHZhciBhY3Rpb25CeSA9IGNjLnNrZXdCeSgyLCAwLCAtOTApO1xuICovXG5jYy5za2V3QnkgPSBmdW5jdGlvbiAodCwgc3gsIHN5KSB7XG4gICAgcmV0dXJuIG5ldyBjYy5Ta2V3QnkodCwgc3gsIHN5KTtcbn07XG5cbi8qXG4gKiBNb3ZlcyBhIE5vZGUgb2JqZWN0IHNpbXVsYXRpbmcgYSBwYXJhYm9saWMganVtcCBtb3ZlbWVudCBieSBtb2RpZnlpbmcgaXRzIHBvc2l0aW9uIHByb3BlcnR5LlxuICogUmVsYXRpdmUgdG8gaXRzIG1vdmVtZW50LlxuICogQGNsYXNzIEp1bXBCeVxuICogQGV4dGVuZHMgQWN0aW9uSW50ZXJ2YWxcbiAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvblxuICogQHBhcmFtIHtWZWMyfE51bWJlcn0gcG9zaXRpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSBbeV1cbiAqIEBwYXJhbSB7TnVtYmVyfSBoZWlnaHRcbiAqIEBwYXJhbSB7TnVtYmVyfSBqdW1wc1xuICogQGV4YW1wbGVcbiAqIHZhciBhY3Rpb25CeSA9IG5ldyBjYy5KdW1wQnkoMiwgY2MudjIoMzAwLCAwKSwgNTAsIDQpO1xuICogdmFyIGFjdGlvbkJ5ID0gbmV3IGNjLkp1bXBCeSgyLCAzMDAsIDAsIDUwLCA0KTtcbiAqL1xuY2MuSnVtcEJ5ID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5KdW1wQnknLFxuICAgIGV4dGVuZHM6IGNjLkFjdGlvbkludGVydmFsLFxuXG4gICAgY3RvcjogZnVuY3Rpb24gY3RvcihkdXJhdGlvbiwgcG9zaXRpb24sIHksIGhlaWdodCwganVtcHMpIHtcbiAgICAgICAgdGhpcy5fc3RhcnRQb3NpdGlvbiA9IGNjLnYyKDAsIDApO1xuICAgICAgICB0aGlzLl9wcmV2aW91c1Bvc2l0aW9uID0gY2MudjIoMCwgMCk7XG4gICAgICAgIHRoaXMuX2RlbHRhID0gY2MudjIoMCwgMCk7XG4gICAgICAgIHRoaXMuX2hlaWdodCA9IDA7XG4gICAgICAgIHRoaXMuX2p1bXBzID0gMDtcblxuICAgICAgICBoZWlnaHQgIT09IHVuZGVmaW5lZCAmJiBjYy5KdW1wQnkucHJvdG90eXBlLmluaXRXaXRoRHVyYXRpb24uY2FsbCh0aGlzLCBkdXJhdGlvbiwgcG9zaXRpb24sIHksIGhlaWdodCwganVtcHMpO1xuICAgIH0sXG4gICAgLypcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvblxuICAgICAqIEBwYXJhbSB7VmVjMnxOdW1iZXJ9IHBvc2l0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFt5XVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBoZWlnaHRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0ganVtcHNcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqIEBleGFtcGxlXG4gICAgICogYWN0aW9uQnkuaW5pdFdpdGhEdXJhdGlvbigyLCBjYy52MigzMDAsIDApLCA1MCwgNCk7XG4gICAgICogYWN0aW9uQnkuaW5pdFdpdGhEdXJhdGlvbigyLCAzMDAsIDAsIDUwLCA0KTtcbiAgICAgKi9cbiAgICBpbml0V2l0aER1cmF0aW9uOiBmdW5jdGlvbiBpbml0V2l0aER1cmF0aW9uKGR1cmF0aW9uLCBwb3NpdGlvbiwgeSwgaGVpZ2h0LCBqdW1wcykge1xuICAgICAgICBpZiAoY2MuQWN0aW9uSW50ZXJ2YWwucHJvdG90eXBlLmluaXRXaXRoRHVyYXRpb24uY2FsbCh0aGlzLCBkdXJhdGlvbikpIHtcbiAgICAgICAgICAgIGlmIChqdW1wcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAganVtcHMgPSBoZWlnaHQ7XG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0geTtcbiAgICAgICAgICAgICAgICB5ID0gcG9zaXRpb24ueTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uLng7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9kZWx0YS54ID0gcG9zaXRpb247XG4gICAgICAgICAgICB0aGlzLl9kZWx0YS55ID0geTtcbiAgICAgICAgICAgIHRoaXMuX2hlaWdodCA9IGhlaWdodDtcbiAgICAgICAgICAgIHRoaXMuX2p1bXBzID0ganVtcHM7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIGNsb25lOiBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5KdW1wQnkoKTtcbiAgICAgICAgdGhpcy5fY2xvbmVEZWNvcmF0aW9uKGFjdGlvbik7XG4gICAgICAgIGFjdGlvbi5pbml0V2l0aER1cmF0aW9uKHRoaXMuX2R1cmF0aW9uLCB0aGlzLl9kZWx0YSwgdGhpcy5faGVpZ2h0LCB0aGlzLl9qdW1wcyk7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIHN0YXJ0V2l0aFRhcmdldDogZnVuY3Rpb24gc3RhcnRXaXRoVGFyZ2V0KHRhcmdldCkge1xuICAgICAgICBjYy5BY3Rpb25JbnRlcnZhbC5wcm90b3R5cGUuc3RhcnRXaXRoVGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcbiAgICAgICAgdmFyIGxvY1Bvc1ggPSB0YXJnZXQueDtcbiAgICAgICAgdmFyIGxvY1Bvc1kgPSB0YXJnZXQueTtcbiAgICAgICAgdGhpcy5fcHJldmlvdXNQb3NpdGlvbi54ID0gbG9jUG9zWDtcbiAgICAgICAgdGhpcy5fcHJldmlvdXNQb3NpdGlvbi55ID0gbG9jUG9zWTtcbiAgICAgICAgdGhpcy5fc3RhcnRQb3NpdGlvbi54ID0gbG9jUG9zWDtcbiAgICAgICAgdGhpcy5fc3RhcnRQb3NpdGlvbi55ID0gbG9jUG9zWTtcbiAgICB9LFxuXG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoZHQpIHtcbiAgICAgICAgZHQgPSB0aGlzLl9jb21wdXRlRWFzZVRpbWUoZHQpO1xuICAgICAgICBpZiAodGhpcy50YXJnZXQpIHtcbiAgICAgICAgICAgIHZhciBmcmFjID0gZHQgKiB0aGlzLl9qdW1wcyAlIDEuMDtcbiAgICAgICAgICAgIHZhciB5ID0gdGhpcy5faGVpZ2h0ICogNCAqIGZyYWMgKiAoMSAtIGZyYWMpO1xuICAgICAgICAgICAgeSArPSB0aGlzLl9kZWx0YS55ICogZHQ7XG5cbiAgICAgICAgICAgIHZhciB4ID0gdGhpcy5fZGVsdGEueCAqIGR0O1xuICAgICAgICAgICAgdmFyIGxvY1N0YXJ0UG9zaXRpb24gPSB0aGlzLl9zdGFydFBvc2l0aW9uO1xuICAgICAgICAgICAgaWYgKGNjLm1hY3JvLkVOQUJMRV9TVEFDS0FCTEVfQUNUSU9OUykge1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXRYID0gdGhpcy50YXJnZXQueDtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0WSA9IHRoaXMudGFyZ2V0Lnk7XG4gICAgICAgICAgICAgICAgdmFyIGxvY1ByZXZpb3VzUG9zaXRpb24gPSB0aGlzLl9wcmV2aW91c1Bvc2l0aW9uO1xuXG4gICAgICAgICAgICAgICAgbG9jU3RhcnRQb3NpdGlvbi54ID0gbG9jU3RhcnRQb3NpdGlvbi54ICsgdGFyZ2V0WCAtIGxvY1ByZXZpb3VzUG9zaXRpb24ueDtcbiAgICAgICAgICAgICAgICBsb2NTdGFydFBvc2l0aW9uLnkgPSBsb2NTdGFydFBvc2l0aW9uLnkgKyB0YXJnZXRZIC0gbG9jUHJldmlvdXNQb3NpdGlvbi55O1xuICAgICAgICAgICAgICAgIHggPSB4ICsgbG9jU3RhcnRQb3NpdGlvbi54O1xuICAgICAgICAgICAgICAgIHkgPSB5ICsgbG9jU3RhcnRQb3NpdGlvbi55O1xuICAgICAgICAgICAgICAgIGxvY1ByZXZpb3VzUG9zaXRpb24ueCA9IHg7XG4gICAgICAgICAgICAgICAgbG9jUHJldmlvdXNQb3NpdGlvbi55ID0geTtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldC5zZXRQb3NpdGlvbih4LCB5KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXQuc2V0UG9zaXRpb24obG9jU3RhcnRQb3NpdGlvbi54ICsgeCwgbG9jU3RhcnRQb3NpdGlvbi55ICsgeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5KdW1wQnkodGhpcy5fZHVyYXRpb24sIGNjLnYyKC10aGlzLl9kZWx0YS54LCAtdGhpcy5fZGVsdGEueSksIHRoaXMuX2hlaWdodCwgdGhpcy5fanVtcHMpO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgdGhpcy5fcmV2ZXJzZUVhc2VMaXN0KGFjdGlvbik7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfVxufSk7XG5cbi8qKlxuICogISNlblxuICogTW92ZXMgYSBOb2RlIG9iamVjdCBzaW11bGF0aW5nIGEgcGFyYWJvbGljIGp1bXAgbW92ZW1lbnQgYnkgbW9kaWZ5aW5nIGl0J3MgcG9zaXRpb24gcHJvcGVydHkuXG4gKiBSZWxhdGl2ZSB0byBpdHMgbW92ZW1lbnQuXG4gKiAhI3poIOeUqOi3s+i3g+eahOaWueW8j+enu+WKqOaMh+WumueahOi3neemu+OAglxuICogQG1ldGhvZCBqdW1wQnlcbiAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvblxuICogQHBhcmFtIHtWZWMyfE51bWJlcn0gcG9zaXRpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSBbeV1cbiAqIEBwYXJhbSB7TnVtYmVyfSBbaGVpZ2h0XVxuICogQHBhcmFtIHtOdW1iZXJ9IFtqdW1wc11cbiAqIEByZXR1cm4ge0FjdGlvbkludGVydmFsfVxuICogQGV4YW1wbGVcbiAqIC8vIGV4YW1wbGVcbiAqIHZhciBhY3Rpb25CeSA9IGNjLmp1bXBCeSgyLCBjYy52MigzMDAsIDApLCA1MCwgNCk7XG4gKiB2YXIgYWN0aW9uQnkgPSBjYy5qdW1wQnkoMiwgMzAwLCAwLCA1MCwgNCk7XG4gKi9cbmNjLmp1bXBCeSA9IGZ1bmN0aW9uIChkdXJhdGlvbiwgcG9zaXRpb24sIHksIGhlaWdodCwganVtcHMpIHtcbiAgICByZXR1cm4gbmV3IGNjLkp1bXBCeShkdXJhdGlvbiwgcG9zaXRpb24sIHksIGhlaWdodCwganVtcHMpO1xufTtcblxuLypcbiAqIE1vdmVzIGEgTm9kZSBvYmplY3QgdG8gYSBwYXJhYm9saWMgcG9zaXRpb24gc2ltdWxhdGluZyBhIGp1bXAgbW92ZW1lbnQgYnkgbW9kaWZ5aW5nIGl0J3MgcG9zaXRpb24gcHJvcGVydHkuIDxiciAvPlxuICogSnVtcCB0byB0aGUgc3BlY2lmaWVkIGxvY2F0aW9uLlxuICogQGNsYXNzIEp1bXBUb1xuICogQGV4dGVuZHMgSnVtcEJ5XG4gKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb25cbiAqIEBwYXJhbSB7VmVjMnxOdW1iZXJ9IHBvc2l0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gW3ldXG4gKiBAcGFyYW0ge051bWJlcn0gW2hlaWdodF1cbiAqIEBwYXJhbSB7TnVtYmVyfSBbanVtcHNdXG4gKiBAZXhhbXBsZVxuICogdmFyIGFjdGlvblRvID0gbmV3IGNjLkp1bXBUbygyLCBjYy52MigzMDAsIDApLCA1MCwgNCk7XG4gKiB2YXIgYWN0aW9uVG8gPSBuZXcgY2MuSnVtcFRvKDIsIDMwMCwgMCwgNTAsIDQpO1xuICovXG5jYy5KdW1wVG8gPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLkp1bXBUbycsXG4gICAgZXh0ZW5kczogY2MuSnVtcEJ5LFxuXG4gICAgY3RvcjogZnVuY3Rpb24gY3RvcihkdXJhdGlvbiwgcG9zaXRpb24sIHksIGhlaWdodCwganVtcHMpIHtcbiAgICAgICAgdGhpcy5fZW5kUG9zaXRpb24gPSBjYy52MigwLCAwKTtcbiAgICAgICAgaGVpZ2h0ICE9PSB1bmRlZmluZWQgJiYgdGhpcy5pbml0V2l0aER1cmF0aW9uKGR1cmF0aW9uLCBwb3NpdGlvbiwgeSwgaGVpZ2h0LCBqdW1wcyk7XG4gICAgfSxcbiAgICAvKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBhY3Rpb24uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uXG4gICAgICogQHBhcmFtIHtWZWMyfE51bWJlcn0gcG9zaXRpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3ldXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGhlaWdodFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBqdW1wc1xuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBhY3Rpb25Uby5pbml0V2l0aER1cmF0aW9uKDIsIGNjLnYyKDMwMCwgMCksIDUwLCA0KTtcbiAgICAgKiBhY3Rpb25Uby5pbml0V2l0aER1cmF0aW9uKDIsIDMwMCwgMCwgNTAsIDQpO1xuICAgICAqL1xuICAgIGluaXRXaXRoRHVyYXRpb246IGZ1bmN0aW9uIGluaXRXaXRoRHVyYXRpb24oZHVyYXRpb24sIHBvc2l0aW9uLCB5LCBoZWlnaHQsIGp1bXBzKSB7XG4gICAgICAgIGlmIChjYy5KdW1wQnkucHJvdG90eXBlLmluaXRXaXRoRHVyYXRpb24uY2FsbCh0aGlzLCBkdXJhdGlvbiwgcG9zaXRpb24sIHksIGhlaWdodCwganVtcHMpKSB7XG4gICAgICAgICAgICBpZiAoanVtcHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHkgPSBwb3NpdGlvbi55O1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24ueDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2VuZFBvc2l0aW9uLnggPSBwb3NpdGlvbjtcbiAgICAgICAgICAgIHRoaXMuX2VuZFBvc2l0aW9uLnkgPSB5O1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBzdGFydFdpdGhUYXJnZXQ6IGZ1bmN0aW9uIHN0YXJ0V2l0aFRhcmdldCh0YXJnZXQpIHtcbiAgICAgICAgY2MuSnVtcEJ5LnByb3RvdHlwZS5zdGFydFdpdGhUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpO1xuICAgICAgICB0aGlzLl9kZWx0YS54ID0gdGhpcy5fZW5kUG9zaXRpb24ueCAtIHRoaXMuX3N0YXJ0UG9zaXRpb24ueDtcbiAgICAgICAgdGhpcy5fZGVsdGEueSA9IHRoaXMuX2VuZFBvc2l0aW9uLnkgLSB0aGlzLl9zdGFydFBvc2l0aW9uLnk7XG4gICAgfSxcblxuICAgIGNsb25lOiBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5KdW1wVG8oKTtcbiAgICAgICAgdGhpcy5fY2xvbmVEZWNvcmF0aW9uKGFjdGlvbik7XG4gICAgICAgIGFjdGlvbi5pbml0V2l0aER1cmF0aW9uKHRoaXMuX2R1cmF0aW9uLCB0aGlzLl9lbmRQb3NpdGlvbiwgdGhpcy5faGVpZ2h0LCB0aGlzLl9qdW1wcyk7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfVxufSk7XG5cbi8qKlxuICogISNlblxuICogTW92ZXMgYSBOb2RlIG9iamVjdCB0byBhIHBhcmFib2xpYyBwb3NpdGlvbiBzaW11bGF0aW5nIGEganVtcCBtb3ZlbWVudCBieSBtb2RpZnlpbmcgaXRzIHBvc2l0aW9uIHByb3BlcnR5LiA8YnIgLz5cbiAqIEp1bXAgdG8gdGhlIHNwZWNpZmllZCBsb2NhdGlvbi5cbiAqICEjemgg55So6Lez6LeD55qE5pa55byP56e75Yqo5Yiw55uu5qCH5L2N572u44CCXG4gKiBAbWV0aG9kIGp1bXBUb1xuICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uXG4gKiBAcGFyYW0ge1ZlYzJ8TnVtYmVyfSBwb3NpdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IFt5XVxuICogQHBhcmFtIHtOdW1iZXJ9IFtoZWlnaHRdXG4gKiBAcGFyYW0ge051bWJlcn0gW2p1bXBzXVxuICogQHJldHVybiB7QWN0aW9uSW50ZXJ2YWx9XG4gKiBAZXhhbXBsZVxuICogLy8gZXhhbXBsZVxuICogdmFyIGFjdGlvblRvID0gY2MuanVtcFRvKDIsIGNjLnYyKDMwMCwgMzAwKSwgNTAsIDQpO1xuICogdmFyIGFjdGlvblRvID0gY2MuanVtcFRvKDIsIDMwMCwgMzAwLCA1MCwgNCk7XG4gKi9cbmNjLmp1bXBUbyA9IGZ1bmN0aW9uIChkdXJhdGlvbiwgcG9zaXRpb24sIHksIGhlaWdodCwganVtcHMpIHtcbiAgICByZXR1cm4gbmV3IGNjLkp1bXBUbyhkdXJhdGlvbiwgcG9zaXRpb24sIHksIGhlaWdodCwganVtcHMpO1xufTtcblxuLyogQW4gYWN0aW9uIHRoYXQgbW92ZXMgdGhlIHRhcmdldCB3aXRoIGEgY3ViaWMgQmV6aWVyIGN1cnZlIGJ5IGEgY2VydGFpbiBkaXN0YW5jZS5cbiAqIFJlbGF0aXZlIHRvIGl0cyBtb3ZlbWVudC5cbiAqIEBjbGFzcyBCZXppZXJCeVxuICogQGV4dGVuZHMgQWN0aW9uSW50ZXJ2YWxcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IC0gdGltZSBpbiBzZWNvbmRzXG4gKiBAcGFyYW0ge1ZlYzJbXX0gYyAtIEFycmF5IG9mIHBvaW50c1xuICogQGV4YW1wbGVcbiAqIHZhciBiZXppZXIgPSBbY2MudjIoMCwgd2luZG93U2l6ZS5oZWlnaHQgLyAyKSwgY2MudjIoMzAwLCAtd2luZG93U2l6ZS5oZWlnaHQgLyAyKSwgY2MudjIoMzAwLCAxMDApXTtcbiAqIHZhciBiZXppZXJGb3J3YXJkID0gbmV3IGNjLkJlemllckJ5KDMsIGJlemllcik7XG4gKi9cbmZ1bmN0aW9uIGJlemllckF0KGEsIGIsIGMsIGQsIHQpIHtcbiAgICByZXR1cm4gTWF0aC5wb3coMSAtIHQsIDMpICogYSArIDMgKiB0ICogTWF0aC5wb3coMSAtIHQsIDIpICogYiArIDMgKiBNYXRoLnBvdyh0LCAyKSAqICgxIC0gdCkgKiBjICsgTWF0aC5wb3codCwgMykgKiBkO1xufTtcbmNjLkJlemllckJ5ID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5CZXppZXJCeScsXG4gICAgZXh0ZW5kczogY2MuQWN0aW9uSW50ZXJ2YWwsXG5cbiAgICBjdG9yOiBmdW5jdGlvbiBjdG9yKHQsIGMpIHtcbiAgICAgICAgdGhpcy5fY29uZmlnID0gW107XG4gICAgICAgIHRoaXMuX3N0YXJ0UG9zaXRpb24gPSBjYy52MigwLCAwKTtcbiAgICAgICAgdGhpcy5fcHJldmlvdXNQb3NpdGlvbiA9IGNjLnYyKDAsIDApO1xuICAgICAgICBjICYmIGNjLkJlemllckJ5LnByb3RvdHlwZS5pbml0V2l0aER1cmF0aW9uLmNhbGwodGhpcywgdCwgYyk7XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIGFjdGlvbi5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdCAtIHRpbWUgaW4gc2Vjb25kc1xuICAgICAqIEBwYXJhbSB7VmVjMltdfSBjIC0gQXJyYXkgb2YgcG9pbnRzXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpbml0V2l0aER1cmF0aW9uOiBmdW5jdGlvbiBpbml0V2l0aER1cmF0aW9uKHQsIGMpIHtcbiAgICAgICAgaWYgKGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5pbml0V2l0aER1cmF0aW9uLmNhbGwodGhpcywgdCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbmZpZyA9IGM7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIGNsb25lOiBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5CZXppZXJCeSgpO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgdmFyIG5ld0NvbmZpZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9jb25maWcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBzZWxDb25mID0gdGhpcy5fY29uZmlnW2ldO1xuICAgICAgICAgICAgbmV3Q29uZmlncy5wdXNoKGNjLnYyKHNlbENvbmYueCwgc2VsQ29uZi55KSk7XG4gICAgICAgIH1cbiAgICAgICAgYWN0aW9uLmluaXRXaXRoRHVyYXRpb24odGhpcy5fZHVyYXRpb24sIG5ld0NvbmZpZ3MpO1xuICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG5cbiAgICBzdGFydFdpdGhUYXJnZXQ6IGZ1bmN0aW9uIHN0YXJ0V2l0aFRhcmdldCh0YXJnZXQpIHtcbiAgICAgICAgY2MuQWN0aW9uSW50ZXJ2YWwucHJvdG90eXBlLnN0YXJ0V2l0aFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCk7XG4gICAgICAgIHZhciBsb2NQb3NYID0gdGFyZ2V0Lng7XG4gICAgICAgIHZhciBsb2NQb3NZID0gdGFyZ2V0Lnk7XG4gICAgICAgIHRoaXMuX3ByZXZpb3VzUG9zaXRpb24ueCA9IGxvY1Bvc1g7XG4gICAgICAgIHRoaXMuX3ByZXZpb3VzUG9zaXRpb24ueSA9IGxvY1Bvc1k7XG4gICAgICAgIHRoaXMuX3N0YXJ0UG9zaXRpb24ueCA9IGxvY1Bvc1g7XG4gICAgICAgIHRoaXMuX3N0YXJ0UG9zaXRpb24ueSA9IGxvY1Bvc1k7XG4gICAgfSxcblxuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKGR0KSB7XG4gICAgICAgIGR0ID0gdGhpcy5fY29tcHV0ZUVhc2VUaW1lKGR0KTtcbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0KSB7XG4gICAgICAgICAgICB2YXIgbG9jQ29uZmlnID0gdGhpcy5fY29uZmlnO1xuICAgICAgICAgICAgdmFyIHhhID0gMDtcbiAgICAgICAgICAgIHZhciB4YiA9IGxvY0NvbmZpZ1swXS54O1xuICAgICAgICAgICAgdmFyIHhjID0gbG9jQ29uZmlnWzFdLng7XG4gICAgICAgICAgICB2YXIgeGQgPSBsb2NDb25maWdbMl0ueDtcblxuICAgICAgICAgICAgdmFyIHlhID0gMDtcbiAgICAgICAgICAgIHZhciB5YiA9IGxvY0NvbmZpZ1swXS55O1xuICAgICAgICAgICAgdmFyIHljID0gbG9jQ29uZmlnWzFdLnk7XG4gICAgICAgICAgICB2YXIgeWQgPSBsb2NDb25maWdbMl0ueTtcblxuICAgICAgICAgICAgdmFyIHggPSBiZXppZXJBdCh4YSwgeGIsIHhjLCB4ZCwgZHQpO1xuICAgICAgICAgICAgdmFyIHkgPSBiZXppZXJBdCh5YSwgeWIsIHljLCB5ZCwgZHQpO1xuXG4gICAgICAgICAgICB2YXIgbG9jU3RhcnRQb3NpdGlvbiA9IHRoaXMuX3N0YXJ0UG9zaXRpb247XG4gICAgICAgICAgICBpZiAoY2MubWFjcm8uRU5BQkxFX1NUQUNLQUJMRV9BQ1RJT05TKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldFggPSB0aGlzLnRhcmdldC54O1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXRZID0gdGhpcy50YXJnZXQueTtcbiAgICAgICAgICAgICAgICB2YXIgbG9jUHJldmlvdXNQb3NpdGlvbiA9IHRoaXMuX3ByZXZpb3VzUG9zaXRpb247XG5cbiAgICAgICAgICAgICAgICBsb2NTdGFydFBvc2l0aW9uLnggPSBsb2NTdGFydFBvc2l0aW9uLnggKyB0YXJnZXRYIC0gbG9jUHJldmlvdXNQb3NpdGlvbi54O1xuICAgICAgICAgICAgICAgIGxvY1N0YXJ0UG9zaXRpb24ueSA9IGxvY1N0YXJ0UG9zaXRpb24ueSArIHRhcmdldFkgLSBsb2NQcmV2aW91c1Bvc2l0aW9uLnk7XG4gICAgICAgICAgICAgICAgeCA9IHggKyBsb2NTdGFydFBvc2l0aW9uLng7XG4gICAgICAgICAgICAgICAgeSA9IHkgKyBsb2NTdGFydFBvc2l0aW9uLnk7XG4gICAgICAgICAgICAgICAgbG9jUHJldmlvdXNQb3NpdGlvbi54ID0geDtcbiAgICAgICAgICAgICAgICBsb2NQcmV2aW91c1Bvc2l0aW9uLnkgPSB5O1xuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0LnNldFBvc2l0aW9uKHgsIHkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldC5zZXRQb3NpdGlvbihsb2NTdGFydFBvc2l0aW9uLnggKyB4LCBsb2NTdGFydFBvc2l0aW9uLnkgKyB5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgICB2YXIgbG9jQ29uZmlnID0gdGhpcy5fY29uZmlnO1xuICAgICAgICB2YXIgeDAgPSBsb2NDb25maWdbMF0ueCxcbiAgICAgICAgICAgIHkwID0gbG9jQ29uZmlnWzBdLnk7XG4gICAgICAgIHZhciB4MSA9IGxvY0NvbmZpZ1sxXS54LFxuICAgICAgICAgICAgeTEgPSBsb2NDb25maWdbMV0ueTtcbiAgICAgICAgdmFyIHgyID0gbG9jQ29uZmlnWzJdLngsXG4gICAgICAgICAgICB5MiA9IGxvY0NvbmZpZ1syXS55O1xuICAgICAgICB2YXIgciA9IFtjYy52Mih4MSAtIHgyLCB5MSAtIHkyKSwgY2MudjIoeDAgLSB4MiwgeTAgLSB5MiksIGNjLnYyKC14MiwgLXkyKV07XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuQmV6aWVyQnkodGhpcy5fZHVyYXRpb24sIHIpO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgdGhpcy5fcmV2ZXJzZUVhc2VMaXN0KGFjdGlvbik7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfVxufSk7XG5cbi8qKlxuICogISNlblxuICogQW4gYWN0aW9uIHRoYXQgbW92ZXMgdGhlIHRhcmdldCB3aXRoIGEgY3ViaWMgQmV6aWVyIGN1cnZlIGJ5IGEgY2VydGFpbiBkaXN0YW5jZS5cbiAqIFJlbGF0aXZlIHRvIGl0cyBtb3ZlbWVudC5cbiAqICEjemgg5oyJ6LSd6LWb5bCU5puy57q/6L2o6L+556e75Yqo5oyH5a6a55qE6Led56a744CCXG4gKiBAbWV0aG9kIGJlemllckJ5XG4gKiBAcGFyYW0ge051bWJlcn0gdCAtIHRpbWUgaW4gc2Vjb25kc1xuICogQHBhcmFtIHtWZWMyW119IGMgLSBBcnJheSBvZiBwb2ludHNcbiAqIEByZXR1cm4ge0FjdGlvbkludGVydmFsfVxuICogQGV4YW1wbGVcbiAqIC8vIGV4YW1wbGVcbiAqIHZhciBiZXppZXIgPSBbY2MudjIoMCwgd2luZG93U2l6ZS5oZWlnaHQgLyAyKSwgY2MudjIoMzAwLCAtd2luZG93U2l6ZS5oZWlnaHQgLyAyKSwgY2MudjIoMzAwLCAxMDApXTtcbiAqIHZhciBiZXppZXJGb3J3YXJkID0gY2MuYmV6aWVyQnkoMywgYmV6aWVyKTtcbiAqL1xuY2MuYmV6aWVyQnkgPSBmdW5jdGlvbiAodCwgYykge1xuICAgIHJldHVybiBuZXcgY2MuQmV6aWVyQnkodCwgYyk7XG59O1xuXG4vKiBBbiBhY3Rpb24gdGhhdCBtb3ZlcyB0aGUgdGFyZ2V0IHdpdGggYSBjdWJpYyBCZXppZXIgY3VydmUgdG8gYSBkZXN0aW5hdGlvbiBwb2ludC5cbiAqIEBjbGFzcyBCZXppZXJUb1xuICogQGV4dGVuZHMgQmV6aWVyQnlcbiAqIEBwYXJhbSB7TnVtYmVyfSB0XG4gKiBAcGFyYW0ge1ZlYzJbXX0gYyAtIEFycmF5IG9mIHBvaW50c1xuICogQGV4YW1wbGVcbiAqIHZhciBiZXppZXIgPSBbY2MudjIoMCwgd2luZG93U2l6ZS5oZWlnaHQgLyAyKSwgY2MudjIoMzAwLCAtd2luZG93U2l6ZS5oZWlnaHQgLyAyKSwgY2MudjIoMzAwLCAxMDApXTtcbiAqIHZhciBiZXppZXJUbyA9IG5ldyBjYy5CZXppZXJUbygyLCBiZXppZXIpO1xuICovXG5jYy5CZXppZXJUbyA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuQmV6aWVyVG8nLFxuICAgIGV4dGVuZHM6IGNjLkJlemllckJ5LFxuXG4gICAgY3RvcjogZnVuY3Rpb24gY3Rvcih0LCBjKSB7XG4gICAgICAgIHRoaXMuX3RvQ29uZmlnID0gW107XG4gICAgICAgIGMgJiYgdGhpcy5pbml0V2l0aER1cmF0aW9uKHQsIGMpO1xuICAgIH0sXG5cbiAgICAvKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBhY3Rpb24uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHQgdGltZSBpbiBzZWNvbmRzXG4gICAgICogQHBhcmFtIHtWZWMyW119IGMgLSBBcnJheSBvZiBwb2ludHNcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGluaXRXaXRoRHVyYXRpb246IGZ1bmN0aW9uIGluaXRXaXRoRHVyYXRpb24odCwgYykge1xuICAgICAgICBpZiAoY2MuQWN0aW9uSW50ZXJ2YWwucHJvdG90eXBlLmluaXRXaXRoRHVyYXRpb24uY2FsbCh0aGlzLCB0KSkge1xuICAgICAgICAgICAgdGhpcy5fdG9Db25maWcgPSBjO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuQmV6aWVyVG8oKTtcbiAgICAgICAgdGhpcy5fY2xvbmVEZWNvcmF0aW9uKGFjdGlvbik7XG4gICAgICAgIGFjdGlvbi5pbml0V2l0aER1cmF0aW9uKHRoaXMuX2R1cmF0aW9uLCB0aGlzLl90b0NvbmZpZyk7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIHN0YXJ0V2l0aFRhcmdldDogZnVuY3Rpb24gc3RhcnRXaXRoVGFyZ2V0KHRhcmdldCkge1xuICAgICAgICBjYy5CZXppZXJCeS5wcm90b3R5cGUuc3RhcnRXaXRoVGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcbiAgICAgICAgdmFyIGxvY1N0YXJ0UG9zID0gdGhpcy5fc3RhcnRQb3NpdGlvbjtcbiAgICAgICAgdmFyIGxvY1RvQ29uZmlnID0gdGhpcy5fdG9Db25maWc7XG4gICAgICAgIHZhciBsb2NDb25maWcgPSB0aGlzLl9jb25maWc7XG5cbiAgICAgICAgbG9jQ29uZmlnWzBdID0gbG9jVG9Db25maWdbMF0uc3ViKGxvY1N0YXJ0UG9zKTtcbiAgICAgICAgbG9jQ29uZmlnWzFdID0gbG9jVG9Db25maWdbMV0uc3ViKGxvY1N0YXJ0UG9zKTtcbiAgICAgICAgbG9jQ29uZmlnWzJdID0gbG9jVG9Db25maWdbMl0uc3ViKGxvY1N0YXJ0UG9zKTtcbiAgICB9XG59KTtcbi8qKlxuICogISNlbiBBbiBhY3Rpb24gdGhhdCBtb3ZlcyB0aGUgdGFyZ2V0IHdpdGggYSBjdWJpYyBCZXppZXIgY3VydmUgdG8gYSBkZXN0aW5hdGlvbiBwb2ludC5cbiAqICEjemgg5oyJ6LSd6LWb5bCU5puy57q/6L2o6L+556e75Yqo5Yiw55uu5qCH5L2N572u44CCXG4gKiBAbWV0aG9kIGJlemllclRvXG4gKiBAcGFyYW0ge051bWJlcn0gdFxuICogQHBhcmFtIHtWZWMyW119IGMgLSBBcnJheSBvZiBwb2ludHNcbiAqIEByZXR1cm4ge0FjdGlvbkludGVydmFsfVxuICogQGV4YW1wbGVcbiAqIC8vIGV4YW1wbGVcbiAqIHZhciBiZXppZXIgPSBbY2MudjIoMCwgd2luZG93U2l6ZS5oZWlnaHQgLyAyKSwgY2MudjIoMzAwLCAtd2luZG93U2l6ZS5oZWlnaHQgLyAyKSwgY2MudjIoMzAwLCAxMDApXTtcbiAqIHZhciBiZXppZXJUbyA9IGNjLmJlemllclRvKDIsIGJlemllcik7XG4gKi9cbmNjLmJlemllclRvID0gZnVuY3Rpb24gKHQsIGMpIHtcbiAgICByZXR1cm4gbmV3IGNjLkJlemllclRvKHQsIGMpO1xufTtcblxuLyogU2NhbGVzIGEgTm9kZSBvYmplY3QgdG8gYSB6b29tIGZhY3RvciBieSBtb2RpZnlpbmcgaXQncyBzY2FsZSBwcm9wZXJ0eS5cbiAqIEB3YXJuaW5nIFRoaXMgYWN0aW9uIGRvZXNuJ3Qgc3VwcG9ydCBcInJldmVyc2VcIlxuICogQGNsYXNzIFNjYWxlVG9cbiAqIEBleHRlbmRzIEFjdGlvbkludGVydmFsXG4gKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSBzeCAgc2NhbGUgcGFyYW1ldGVyIGluIFhcbiAqIEBwYXJhbSB7TnVtYmVyfSBbc3ldIHNjYWxlIHBhcmFtZXRlciBpbiBZLCBpZiBOdWxsIGVxdWFsIHRvIHN4XG4gKiBAZXhhbXBsZVxuICogLy8gSXQgc2NhbGVzIHRvIDAuNSBpbiBib3RoIFggYW5kIFkuXG4gKiB2YXIgYWN0aW9uVG8gPSBuZXcgY2MuU2NhbGVUbygyLCAwLjUpO1xuICpcbiAqIC8vIEl0IHNjYWxlcyB0byAwLjUgaW4geCBhbmQgMiBpbiBZXG4gKiB2YXIgYWN0aW9uVG8gPSBuZXcgY2MuU2NhbGVUbygyLCAwLjUsIDIpO1xuICovXG5jYy5TY2FsZVRvID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5TY2FsZVRvJyxcbiAgICBleHRlbmRzOiBjYy5BY3Rpb25JbnRlcnZhbCxcblxuICAgIGN0b3I6IGZ1bmN0aW9uIGN0b3IoZHVyYXRpb24sIHN4LCBzeSkge1xuICAgICAgICB0aGlzLl9zY2FsZVggPSAxO1xuICAgICAgICB0aGlzLl9zY2FsZVkgPSAxO1xuICAgICAgICB0aGlzLl9zdGFydFNjYWxlWCA9IDE7XG4gICAgICAgIHRoaXMuX3N0YXJ0U2NhbGVZID0gMTtcbiAgICAgICAgdGhpcy5fZW5kU2NhbGVYID0gMDtcbiAgICAgICAgdGhpcy5fZW5kU2NhbGVZID0gMDtcbiAgICAgICAgdGhpcy5fZGVsdGFYID0gMDtcbiAgICAgICAgdGhpcy5fZGVsdGFZID0gMDtcbiAgICAgICAgc3ggIT09IHVuZGVmaW5lZCAmJiBjYy5TY2FsZVRvLnByb3RvdHlwZS5pbml0V2l0aER1cmF0aW9uLmNhbGwodGhpcywgZHVyYXRpb24sIHN4LCBzeSk7XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIGFjdGlvbi5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc3hcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3N5PV1cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGluaXRXaXRoRHVyYXRpb246IGZ1bmN0aW9uIGluaXRXaXRoRHVyYXRpb24oZHVyYXRpb24sIHN4LCBzeSkge1xuICAgICAgICAvL2Z1bmN0aW9uIG92ZXJsb2FkIGhlcmVcbiAgICAgICAgaWYgKGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5pbml0V2l0aER1cmF0aW9uLmNhbGwodGhpcywgZHVyYXRpb24pKSB7XG4gICAgICAgICAgICB0aGlzLl9lbmRTY2FsZVggPSBzeDtcbiAgICAgICAgICAgIHRoaXMuX2VuZFNjYWxlWSA9IHN5ICE9IG51bGwgPyBzeSA6IHN4O1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuU2NhbGVUbygpO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgYWN0aW9uLmluaXRXaXRoRHVyYXRpb24odGhpcy5fZHVyYXRpb24sIHRoaXMuX2VuZFNjYWxlWCwgdGhpcy5fZW5kU2NhbGVZKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgc3RhcnRXaXRoVGFyZ2V0OiBmdW5jdGlvbiBzdGFydFdpdGhUYXJnZXQodGFyZ2V0KSB7XG4gICAgICAgIGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5zdGFydFdpdGhUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpO1xuICAgICAgICB0aGlzLl9zdGFydFNjYWxlWCA9IHRhcmdldC5zY2FsZVg7XG4gICAgICAgIHRoaXMuX3N0YXJ0U2NhbGVZID0gdGFyZ2V0LnNjYWxlWTtcbiAgICAgICAgdGhpcy5fZGVsdGFYID0gdGhpcy5fZW5kU2NhbGVYIC0gdGhpcy5fc3RhcnRTY2FsZVg7XG4gICAgICAgIHRoaXMuX2RlbHRhWSA9IHRoaXMuX2VuZFNjYWxlWSAtIHRoaXMuX3N0YXJ0U2NhbGVZO1xuICAgIH0sXG5cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShkdCkge1xuICAgICAgICBkdCA9IHRoaXMuX2NvbXB1dGVFYXNlVGltZShkdCk7XG4gICAgICAgIGlmICh0aGlzLnRhcmdldCkge1xuICAgICAgICAgICAgdGhpcy50YXJnZXQuc2NhbGVYID0gdGhpcy5fc3RhcnRTY2FsZVggKyB0aGlzLl9kZWx0YVggKiBkdDtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0LnNjYWxlWSA9IHRoaXMuX3N0YXJ0U2NhbGVZICsgdGhpcy5fZGVsdGFZICogZHQ7XG4gICAgICAgIH1cbiAgICB9XG59KTtcbi8qKlxuICogISNlbiBTY2FsZXMgYSBOb2RlIG9iamVjdCB0byBhIHpvb20gZmFjdG9yIGJ5IG1vZGlmeWluZyBpdCdzIHNjYWxlIHByb3BlcnR5LlxuICogISN6aCDlsIboioLngrnlpKflsI/nvKnmlL7liLDmjIflrprnmoTlgI3mlbDjgIJcbiAqIEBtZXRob2Qgc2NhbGVUb1xuICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gc3ggIHNjYWxlIHBhcmFtZXRlciBpbiBYXG4gKiBAcGFyYW0ge051bWJlcn0gW3N5XSBzY2FsZSBwYXJhbWV0ZXIgaW4gWSwgaWYgTnVsbCBlcXVhbCB0byBzeFxuICogQHJldHVybiB7QWN0aW9uSW50ZXJ2YWx9XG4gKiBAZXhhbXBsZVxuICogLy8gZXhhbXBsZVxuICogLy8gSXQgc2NhbGVzIHRvIDAuNSBpbiBib3RoIFggYW5kIFkuXG4gKiB2YXIgYWN0aW9uVG8gPSBjYy5zY2FsZVRvKDIsIDAuNSk7XG4gKlxuICogLy8gSXQgc2NhbGVzIHRvIDAuNSBpbiB4IGFuZCAyIGluIFlcbiAqIHZhciBhY3Rpb25UbyA9IGNjLnNjYWxlVG8oMiwgMC41LCAyKTtcbiAqL1xuY2Muc2NhbGVUbyA9IGZ1bmN0aW9uIChkdXJhdGlvbiwgc3gsIHN5KSB7XG4gICAgLy9mdW5jdGlvbiBvdmVybG9hZFxuICAgIHJldHVybiBuZXcgY2MuU2NhbGVUbyhkdXJhdGlvbiwgc3gsIHN5KTtcbn07XG5cbi8qIFNjYWxlcyBhIE5vZGUgb2JqZWN0IGEgem9vbSBmYWN0b3IgYnkgbW9kaWZ5aW5nIGl0J3Mgc2NhbGUgcHJvcGVydHkuXG4gKiBSZWxhdGl2ZSB0byBpdHMgY2hhbmdlcy5cbiAqIEBjbGFzcyBTY2FsZUJ5XG4gKiBAZXh0ZW5kcyBTY2FsZVRvXG4gKi9cbmNjLlNjYWxlQnkgPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLlNjYWxlQnknLFxuICAgIGV4dGVuZHM6IGNjLlNjYWxlVG8sXG5cbiAgICBzdGFydFdpdGhUYXJnZXQ6IGZ1bmN0aW9uIHN0YXJ0V2l0aFRhcmdldCh0YXJnZXQpIHtcbiAgICAgICAgY2MuU2NhbGVUby5wcm90b3R5cGUuc3RhcnRXaXRoVGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcbiAgICAgICAgdGhpcy5fZGVsdGFYID0gdGhpcy5fc3RhcnRTY2FsZVggKiB0aGlzLl9lbmRTY2FsZVggLSB0aGlzLl9zdGFydFNjYWxlWDtcbiAgICAgICAgdGhpcy5fZGVsdGFZID0gdGhpcy5fc3RhcnRTY2FsZVkgKiB0aGlzLl9lbmRTY2FsZVkgLSB0aGlzLl9zdGFydFNjYWxlWTtcbiAgICB9LFxuXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5TY2FsZUJ5KHRoaXMuX2R1cmF0aW9uLCAxIC8gdGhpcy5fZW5kU2NhbGVYLCAxIC8gdGhpcy5fZW5kU2NhbGVZKTtcbiAgICAgICAgdGhpcy5fY2xvbmVEZWNvcmF0aW9uKGFjdGlvbik7XG4gICAgICAgIHRoaXMuX3JldmVyc2VFYXNlTGlzdChhY3Rpb24pO1xuICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG5cbiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuU2NhbGVCeSgpO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgYWN0aW9uLmluaXRXaXRoRHVyYXRpb24odGhpcy5fZHVyYXRpb24sIHRoaXMuX2VuZFNjYWxlWCwgdGhpcy5fZW5kU2NhbGVZKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9XG59KTtcbi8qKlxuICogISNlblxuICogU2NhbGVzIGEgTm9kZSBvYmplY3QgYSB6b29tIGZhY3RvciBieSBtb2RpZnlpbmcgaXQncyBzY2FsZSBwcm9wZXJ0eS5cbiAqIFJlbGF0aXZlIHRvIGl0cyBjaGFuZ2VzLlxuICogISN6aCDmjInmjIflrprnmoTlgI3mlbDnvKnmlL7oioLngrnlpKflsI/jgIJcbiAqIEBtZXRob2Qgc2NhbGVCeVxuICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uIGR1cmF0aW9uIGluIHNlY29uZHNcbiAqIEBwYXJhbSB7TnVtYmVyfSBzeCBzeCAgc2NhbGUgcGFyYW1ldGVyIGluIFhcbiAqIEBwYXJhbSB7TnVtYmVyfE51bGx9IFtzeT1dIHN5IHNjYWxlIHBhcmFtZXRlciBpbiBZLCBpZiBOdWxsIGVxdWFsIHRvIHN4XG4gKiBAcmV0dXJuIHtBY3Rpb25JbnRlcnZhbH1cbiAqIEBleGFtcGxlXG4gKiAvLyBleGFtcGxlIHdpdGhvdXQgc3ksIGl0IHNjYWxlcyBieSAyIGJvdGggaW4gWCBhbmQgWVxuICogdmFyIGFjdGlvbkJ5ID0gY2Muc2NhbGVCeSgyLCAyKTtcbiAqXG4gKiAvL2V4YW1wbGUgd2l0aCBzeSwgaXQgc2NhbGVzIGJ5IDAuMjUgaW4gWCBhbmQgNC41IGluIFlcbiAqIHZhciBhY3Rpb25CeTIgPSBjYy5zY2FsZUJ5KDIsIDAuMjUsIDQuNSk7XG4gKi9cbmNjLnNjYWxlQnkgPSBmdW5jdGlvbiAoZHVyYXRpb24sIHN4LCBzeSkge1xuICAgIHJldHVybiBuZXcgY2MuU2NhbGVCeShkdXJhdGlvbiwgc3gsIHN5KTtcbn07XG5cbi8qIEJsaW5rcyBhIE5vZGUgb2JqZWN0IGJ5IG1vZGlmeWluZyBpdCdzIHZpc2libGUgcHJvcGVydHlcbiAqIEBjbGFzcyBCbGlua1xuICogQGV4dGVuZHMgQWN0aW9uSW50ZXJ2YWxcbiAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvbiAgZHVyYXRpb24gaW4gc2Vjb25kc1xuICogQHBhcmFtIHtOdW1iZXJ9IGJsaW5rcyAgYmxpbmtzIGluIHRpbWVzXG4gKiBAZXhhbXBsZVxuICogdmFyIGFjdGlvbiA9IG5ldyBjYy5CbGluaygyLCAxMCk7XG4gKi9cbmNjLkJsaW5rID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5CbGluaycsXG4gICAgZXh0ZW5kczogY2MuQWN0aW9uSW50ZXJ2YWwsXG5cbiAgICBjdG9yOiBmdW5jdGlvbiBjdG9yKGR1cmF0aW9uLCBibGlua3MpIHtcbiAgICAgICAgdGhpcy5fdGltZXMgPSAwO1xuICAgICAgICB0aGlzLl9vcmlnaW5hbFN0YXRlID0gZmFsc2U7XG4gICAgICAgIGJsaW5rcyAhPT0gdW5kZWZpbmVkICYmIHRoaXMuaW5pdFdpdGhEdXJhdGlvbihkdXJhdGlvbiwgYmxpbmtzKTtcbiAgICB9LFxuXG4gICAgLypcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvbiBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGJsaW5rcyBibGlua3MgaW4gdGltZXNcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGluaXRXaXRoRHVyYXRpb246IGZ1bmN0aW9uIGluaXRXaXRoRHVyYXRpb24oZHVyYXRpb24sIGJsaW5rcykge1xuICAgICAgICBpZiAoY2MuQWN0aW9uSW50ZXJ2YWwucHJvdG90eXBlLmluaXRXaXRoRHVyYXRpb24uY2FsbCh0aGlzLCBkdXJhdGlvbikpIHtcbiAgICAgICAgICAgIHRoaXMuX3RpbWVzID0gYmxpbmtzO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuQmxpbmsoKTtcbiAgICAgICAgdGhpcy5fY2xvbmVEZWNvcmF0aW9uKGFjdGlvbik7XG4gICAgICAgIGFjdGlvbi5pbml0V2l0aER1cmF0aW9uKHRoaXMuX2R1cmF0aW9uLCB0aGlzLl90aW1lcyk7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKGR0KSB7XG4gICAgICAgIGR0ID0gdGhpcy5fY29tcHV0ZUVhc2VUaW1lKGR0KTtcbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0ICYmICF0aGlzLmlzRG9uZSgpKSB7XG4gICAgICAgICAgICB2YXIgc2xpY2UgPSAxLjAgLyB0aGlzLl90aW1lcztcbiAgICAgICAgICAgIHZhciBtID0gZHQgJSBzbGljZTtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0Lm9wYWNpdHkgPSBtID4gc2xpY2UgLyAyID8gMjU1IDogMDtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBzdGFydFdpdGhUYXJnZXQ6IGZ1bmN0aW9uIHN0YXJ0V2l0aFRhcmdldCh0YXJnZXQpIHtcbiAgICAgICAgY2MuQWN0aW9uSW50ZXJ2YWwucHJvdG90eXBlLnN0YXJ0V2l0aFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCk7XG4gICAgICAgIHRoaXMuX29yaWdpbmFsU3RhdGUgPSB0YXJnZXQub3BhY2l0eTtcbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgICAgdGhpcy50YXJnZXQub3BhY2l0eSA9IHRoaXMuX29yaWdpbmFsU3RhdGU7XG4gICAgICAgIGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5zdG9wLmNhbGwodGhpcyk7XG4gICAgfSxcblxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuQmxpbmsodGhpcy5fZHVyYXRpb24sIHRoaXMuX3RpbWVzKTtcbiAgICAgICAgdGhpcy5fY2xvbmVEZWNvcmF0aW9uKGFjdGlvbik7XG4gICAgICAgIHRoaXMuX3JldmVyc2VFYXNlTGlzdChhY3Rpb24pO1xuICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH1cbn0pO1xuLyoqXG4gKiAhI2VuIEJsaW5rcyBhIE5vZGUgb2JqZWN0IGJ5IG1vZGlmeWluZyBpdCdzIHZpc2libGUgcHJvcGVydHkuXG4gKiAhI3poIOmXqueDge+8iOWfuuS6jumAj+aYjuW6pu+8ieOAglxuICogQG1ldGhvZCBibGlua1xuICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uICBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gKiBAcGFyYW0ge051bWJlcn0gYmxpbmtzIGJsaW5rcyBpbiB0aW1lc1xuICogQHJldHVybiB7QWN0aW9uSW50ZXJ2YWx9XG4gKiBAZXhhbXBsZVxuICogLy8gZXhhbXBsZVxuICogdmFyIGFjdGlvbiA9IGNjLmJsaW5rKDIsIDEwKTtcbiAqL1xuY2MuYmxpbmsgPSBmdW5jdGlvbiAoZHVyYXRpb24sIGJsaW5rcykge1xuICAgIHJldHVybiBuZXcgY2MuQmxpbmsoZHVyYXRpb24sIGJsaW5rcyk7XG59O1xuXG4vKiBGYWRlcyBhbiBvYmplY3QgdGhhdCBpbXBsZW1lbnRzIHRoZSBjYy5SR0JBUHJvdG9jb2wgcHJvdG9jb2wuIEl0IG1vZGlmaWVzIHRoZSBvcGFjaXR5IGZyb20gdGhlIGN1cnJlbnQgdmFsdWUgdG8gYSBjdXN0b20gb25lLlxuICogQHdhcm5pbmcgVGhpcyBhY3Rpb24gZG9lc24ndCBzdXBwb3J0IFwicmV2ZXJzZVwiXG4gKiBAY2xhc3MgRmFkZVRvXG4gKiBAZXh0ZW5kcyBBY3Rpb25JbnRlcnZhbFxuICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gb3BhY2l0eSAwLTI1NSwgMCBpcyB0cmFuc3BhcmVudFxuICogQGV4YW1wbGVcbiAqIHZhciBhY3Rpb24gPSBuZXcgY2MuRmFkZVRvKDEuMCwgMCk7XG4gKi9cbmNjLkZhZGVUbyA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuRmFkZVRvJyxcbiAgICBleHRlbmRzOiBjYy5BY3Rpb25JbnRlcnZhbCxcblxuICAgIGN0b3I6IGZ1bmN0aW9uIGN0b3IoZHVyYXRpb24sIG9wYWNpdHkpIHtcbiAgICAgICAgdGhpcy5fdG9PcGFjaXR5ID0gMDtcbiAgICAgICAgdGhpcy5fZnJvbU9wYWNpdHkgPSAwO1xuICAgICAgICBvcGFjaXR5ICE9PSB1bmRlZmluZWQgJiYgY2MuRmFkZVRvLnByb3RvdHlwZS5pbml0V2l0aER1cmF0aW9uLmNhbGwodGhpcywgZHVyYXRpb24sIG9wYWNpdHkpO1xuICAgIH0sXG5cbiAgICAvKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBhY3Rpb24uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uICBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9wYWNpdHlcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGluaXRXaXRoRHVyYXRpb246IGZ1bmN0aW9uIGluaXRXaXRoRHVyYXRpb24oZHVyYXRpb24sIG9wYWNpdHkpIHtcbiAgICAgICAgaWYgKGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5pbml0V2l0aER1cmF0aW9uLmNhbGwodGhpcywgZHVyYXRpb24pKSB7XG4gICAgICAgICAgICB0aGlzLl90b09wYWNpdHkgPSBvcGFjaXR5O1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuRmFkZVRvKCk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICBhY3Rpb24uaW5pdFdpdGhEdXJhdGlvbih0aGlzLl9kdXJhdGlvbiwgdGhpcy5fdG9PcGFjaXR5KTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUodGltZSkge1xuICAgICAgICB0aW1lID0gdGhpcy5fY29tcHV0ZUVhc2VUaW1lKHRpbWUpO1xuICAgICAgICB2YXIgZnJvbU9wYWNpdHkgPSB0aGlzLl9mcm9tT3BhY2l0eSAhPT0gdW5kZWZpbmVkID8gdGhpcy5fZnJvbU9wYWNpdHkgOiAyNTU7XG4gICAgICAgIHRoaXMudGFyZ2V0Lm9wYWNpdHkgPSBmcm9tT3BhY2l0eSArICh0aGlzLl90b09wYWNpdHkgLSBmcm9tT3BhY2l0eSkgKiB0aW1lO1xuICAgIH0sXG5cbiAgICBzdGFydFdpdGhUYXJnZXQ6IGZ1bmN0aW9uIHN0YXJ0V2l0aFRhcmdldCh0YXJnZXQpIHtcbiAgICAgICAgY2MuQWN0aW9uSW50ZXJ2YWwucHJvdG90eXBlLnN0YXJ0V2l0aFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCk7XG4gICAgICAgIHRoaXMuX2Zyb21PcGFjaXR5ID0gdGFyZ2V0Lm9wYWNpdHk7XG4gICAgfVxufSk7XG5cbi8qKlxuICogISNlblxuICogRmFkZXMgYW4gb2JqZWN0IHRoYXQgaW1wbGVtZW50cyB0aGUgY2MuUkdCQVByb3RvY29sIHByb3RvY29sLlxuICogSXQgbW9kaWZpZXMgdGhlIG9wYWNpdHkgZnJvbSB0aGUgY3VycmVudCB2YWx1ZSB0byBhIGN1c3RvbSBvbmUuXG4gKiAhI3poIOS/ruaUuemAj+aYjuW6puWIsOaMh+WumuWAvOOAglxuICogQG1ldGhvZCBmYWRlVG9cbiAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IG9wYWNpdHkgMC0yNTUsIDAgaXMgdHJhbnNwYXJlbnRcbiAqIEByZXR1cm4ge0FjdGlvbkludGVydmFsfVxuICogQGV4YW1wbGVcbiAqIC8vIGV4YW1wbGVcbiAqIHZhciBhY3Rpb24gPSBjYy5mYWRlVG8oMS4wLCAwKTtcbiAqL1xuY2MuZmFkZVRvID0gZnVuY3Rpb24gKGR1cmF0aW9uLCBvcGFjaXR5KSB7XG4gICAgcmV0dXJuIG5ldyBjYy5GYWRlVG8oZHVyYXRpb24sIG9wYWNpdHkpO1xufTtcblxuLyogRmFkZXMgSW4gYW4gb2JqZWN0IHRoYXQgaW1wbGVtZW50cyB0aGUgY2MuUkdCQVByb3RvY29sIHByb3RvY29sLiBJdCBtb2RpZmllcyB0aGUgb3BhY2l0eSBmcm9tIDAgdG8gMjU1Ljxici8+XG4gKiBUaGUgXCJyZXZlcnNlXCIgb2YgdGhpcyBhY3Rpb24gaXMgRmFkZU91dFxuICogQGNsYXNzIEZhZGVJblxuICogQGV4dGVuZHMgRmFkZVRvXG4gKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb24gZHVyYXRpb24gaW4gc2Vjb25kc1xuICovXG5jYy5GYWRlSW4gPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLkZhZGVJbicsXG4gICAgZXh0ZW5kczogY2MuRmFkZVRvLFxuXG4gICAgY3RvcjogZnVuY3Rpb24gY3RvcihkdXJhdGlvbikge1xuICAgICAgICBpZiAoZHVyYXRpb24gPT0gbnVsbCkgZHVyYXRpb24gPSAwO1xuICAgICAgICB0aGlzLl9yZXZlcnNlQWN0aW9uID0gbnVsbDtcbiAgICAgICAgdGhpcy5pbml0V2l0aER1cmF0aW9uKGR1cmF0aW9uLCAyNTUpO1xuICAgIH0sXG5cbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgICB2YXIgYWN0aW9uID0gbmV3IGNjLkZhZGVPdXQoKTtcbiAgICAgICAgYWN0aW9uLmluaXRXaXRoRHVyYXRpb24odGhpcy5fZHVyYXRpb24sIDApO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgdGhpcy5fcmV2ZXJzZUVhc2VMaXN0KGFjdGlvbik7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIGNsb25lOiBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5GYWRlSW4oKTtcbiAgICAgICAgdGhpcy5fY2xvbmVEZWNvcmF0aW9uKGFjdGlvbik7XG4gICAgICAgIGFjdGlvbi5pbml0V2l0aER1cmF0aW9uKHRoaXMuX2R1cmF0aW9uLCB0aGlzLl90b09wYWNpdHkpO1xuICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG5cbiAgICBzdGFydFdpdGhUYXJnZXQ6IGZ1bmN0aW9uIHN0YXJ0V2l0aFRhcmdldCh0YXJnZXQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3JldmVyc2VBY3Rpb24pIHRoaXMuX3RvT3BhY2l0eSA9IHRoaXMuX3JldmVyc2VBY3Rpb24uX2Zyb21PcGFjaXR5O1xuICAgICAgICBjYy5GYWRlVG8ucHJvdG90eXBlLnN0YXJ0V2l0aFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCk7XG4gICAgfVxufSk7XG5cbi8qKlxuICogISNlbiBGYWRlcyBJbiBhbiBvYmplY3QgdGhhdCBpbXBsZW1lbnRzIHRoZSBjYy5SR0JBUHJvdG9jb2wgcHJvdG9jb2wuIEl0IG1vZGlmaWVzIHRoZSBvcGFjaXR5IGZyb20gMCB0byAyNTUuXG4gKiAhI3poIOa4kOaYvuaViOaenOOAglxuICogQG1ldGhvZCBmYWRlSW5cbiAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvbiBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gKiBAcmV0dXJuIHtBY3Rpb25JbnRlcnZhbH1cbiAqIEBleGFtcGxlXG4gKiAvL2V4YW1wbGVcbiAqIHZhciBhY3Rpb24gPSBjYy5mYWRlSW4oMS4wKTtcbiAqL1xuY2MuZmFkZUluID0gZnVuY3Rpb24gKGR1cmF0aW9uKSB7XG4gICAgcmV0dXJuIG5ldyBjYy5GYWRlSW4oZHVyYXRpb24pO1xufTtcblxuLyogRmFkZXMgT3V0IGFuIG9iamVjdCB0aGF0IGltcGxlbWVudHMgdGhlIGNjLlJHQkFQcm90b2NvbCBwcm90b2NvbC4gSXQgbW9kaWZpZXMgdGhlIG9wYWNpdHkgZnJvbSAyNTUgdG8gMC5cbiAqIFRoZSBcInJldmVyc2VcIiBvZiB0aGlzIGFjdGlvbiBpcyBGYWRlSW5cbiAqIEBjbGFzcyBGYWRlT3V0XG4gKiBAZXh0ZW5kcyBGYWRlVG9cbiAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvbiBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gKi9cbmNjLkZhZGVPdXQgPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLkZhZGVPdXQnLFxuICAgIGV4dGVuZHM6IGNjLkZhZGVUbyxcblxuICAgIGN0b3I6IGZ1bmN0aW9uIGN0b3IoZHVyYXRpb24pIHtcbiAgICAgICAgaWYgKGR1cmF0aW9uID09IG51bGwpIGR1cmF0aW9uID0gMDtcbiAgICAgICAgdGhpcy5fcmV2ZXJzZUFjdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMuaW5pdFdpdGhEdXJhdGlvbihkdXJhdGlvbiwgMCk7XG4gICAgfSxcblxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuRmFkZUluKCk7XG4gICAgICAgIGFjdGlvbi5fcmV2ZXJzZUFjdGlvbiA9IHRoaXM7XG4gICAgICAgIGFjdGlvbi5pbml0V2l0aER1cmF0aW9uKHRoaXMuX2R1cmF0aW9uLCAyNTUpO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgdGhpcy5fcmV2ZXJzZUVhc2VMaXN0KGFjdGlvbik7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIGNsb25lOiBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5GYWRlT3V0KCk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICBhY3Rpb24uaW5pdFdpdGhEdXJhdGlvbih0aGlzLl9kdXJhdGlvbiwgdGhpcy5fdG9PcGFjaXR5KTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9XG59KTtcblxuLyoqXG4gKiAhI2VuIEZhZGVzIE91dCBhbiBvYmplY3QgdGhhdCBpbXBsZW1lbnRzIHRoZSBjYy5SR0JBUHJvdG9jb2wgcHJvdG9jb2wuIEl0IG1vZGlmaWVzIHRoZSBvcGFjaXR5IGZyb20gMjU1IHRvIDAuXG4gKiAhI3poIOa4kOmakOaViOaenOOAglxuICogQG1ldGhvZCBmYWRlT3V0XG4gKiBAcGFyYW0ge051bWJlcn0gZCAgZHVyYXRpb24gaW4gc2Vjb25kc1xuICogQHJldHVybiB7QWN0aW9uSW50ZXJ2YWx9XG4gKiBAZXhhbXBsZVxuICogLy8gZXhhbXBsZVxuICogdmFyIGFjdGlvbiA9IGNjLmZhZGVPdXQoMS4wKTtcbiAqL1xuY2MuZmFkZU91dCA9IGZ1bmN0aW9uIChkKSB7XG4gICAgcmV0dXJuIG5ldyBjYy5GYWRlT3V0KGQpO1xufTtcblxuLyogVGludHMgYSBOb2RlIHRoYXQgaW1wbGVtZW50cyB0aGUgY2MuTm9kZVJHQiBwcm90b2NvbCBmcm9tIGN1cnJlbnQgdGludCB0byBhIGN1c3RvbSBvbmUuXG4gKiBAd2FybmluZyBUaGlzIGFjdGlvbiBkb2Vzbid0IHN1cHBvcnQgXCJyZXZlcnNlXCJcbiAqIEBjbGFzcyBUaW50VG9cbiAqIEBleHRlbmRzIEFjdGlvbkludGVydmFsXG4gKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSByZWQgMC0yNTVcbiAqIEBwYXJhbSB7TnVtYmVyfSBncmVlbiAgMC0yNTVcbiAqIEBwYXJhbSB7TnVtYmVyfSBibHVlIDAtMjU1XG4gKiBAZXhhbXBsZVxuICogdmFyIGFjdGlvbiA9IG5ldyBjYy5UaW50VG8oMiwgMjU1LCAwLCAyNTUpO1xuICovXG5jYy5UaW50VG8gPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLlRpbnRUbycsXG4gICAgZXh0ZW5kczogY2MuQWN0aW9uSW50ZXJ2YWwsXG5cbiAgICBjdG9yOiBmdW5jdGlvbiBjdG9yKGR1cmF0aW9uLCByZWQsIGdyZWVuLCBibHVlKSB7XG4gICAgICAgIHRoaXMuX3RvID0gY2MuY29sb3IoMCwgMCwgMCk7XG4gICAgICAgIHRoaXMuX2Zyb20gPSBjYy5jb2xvcigwLCAwLCAwKTtcblxuICAgICAgICBpZiAocmVkIGluc3RhbmNlb2YgY2MuQ29sb3IpIHtcbiAgICAgICAgICAgIGJsdWUgPSByZWQuYjtcbiAgICAgICAgICAgIGdyZWVuID0gcmVkLmc7XG4gICAgICAgICAgICByZWQgPSByZWQucjtcbiAgICAgICAgfVxuXG4gICAgICAgIGJsdWUgIT09IHVuZGVmaW5lZCAmJiB0aGlzLmluaXRXaXRoRHVyYXRpb24oZHVyYXRpb24sIHJlZCwgZ3JlZW4sIGJsdWUpO1xuICAgIH0sXG5cbiAgICAvKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBhY3Rpb24uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJlZCAwLTI1NVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBncmVlbiAwLTI1NVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBibHVlIDAtMjU1XG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpbml0V2l0aER1cmF0aW9uOiBmdW5jdGlvbiBpbml0V2l0aER1cmF0aW9uKGR1cmF0aW9uLCByZWQsIGdyZWVuLCBibHVlKSB7XG4gICAgICAgIGlmIChjYy5BY3Rpb25JbnRlcnZhbC5wcm90b3R5cGUuaW5pdFdpdGhEdXJhdGlvbi5jYWxsKHRoaXMsIGR1cmF0aW9uKSkge1xuICAgICAgICAgICAgdGhpcy5fdG8gPSBjYy5jb2xvcihyZWQsIGdyZWVuLCBibHVlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgICB2YXIgYWN0aW9uID0gbmV3IGNjLlRpbnRUbygpO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgdmFyIGxvY1RvID0gdGhpcy5fdG87XG4gICAgICAgIGFjdGlvbi5pbml0V2l0aER1cmF0aW9uKHRoaXMuX2R1cmF0aW9uLCBsb2NUby5yLCBsb2NUby5nLCBsb2NUby5iKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgc3RhcnRXaXRoVGFyZ2V0OiBmdW5jdGlvbiBzdGFydFdpdGhUYXJnZXQodGFyZ2V0KSB7XG4gICAgICAgIGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5zdGFydFdpdGhUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpO1xuXG4gICAgICAgIHRoaXMuX2Zyb20gPSB0aGlzLnRhcmdldC5jb2xvcjtcbiAgICB9LFxuXG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoZHQpIHtcbiAgICAgICAgZHQgPSB0aGlzLl9jb21wdXRlRWFzZVRpbWUoZHQpO1xuICAgICAgICB2YXIgbG9jRnJvbSA9IHRoaXMuX2Zyb20sXG4gICAgICAgICAgICBsb2NUbyA9IHRoaXMuX3RvO1xuICAgICAgICBpZiAobG9jRnJvbSkge1xuICAgICAgICAgICAgdGhpcy50YXJnZXQuY29sb3IgPSBjYy5jb2xvcihsb2NGcm9tLnIgKyAobG9jVG8uciAtIGxvY0Zyb20ucikgKiBkdCwgbG9jRnJvbS5nICsgKGxvY1RvLmcgLSBsb2NGcm9tLmcpICogZHQsIGxvY0Zyb20uYiArIChsb2NUby5iIC0gbG9jRnJvbS5iKSAqIGR0KTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG4vKipcbiAqICEjZW4gVGludHMgYSBOb2RlIHRoYXQgaW1wbGVtZW50cyB0aGUgY2MuTm9kZVJHQiBwcm90b2NvbCBmcm9tIGN1cnJlbnQgdGludCB0byBhIGN1c3RvbSBvbmUuXG4gKiAhI3poIOS/ruaUueminOiJsuWIsOaMh+WumuWAvOOAglxuICogQG1ldGhvZCB0aW50VG9cbiAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IHJlZCAwLTI1NVxuICogQHBhcmFtIHtOdW1iZXJ9IGdyZWVuICAwLTI1NVxuICogQHBhcmFtIHtOdW1iZXJ9IGJsdWUgMC0yNTVcbiAqIEByZXR1cm4ge0FjdGlvbkludGVydmFsfVxuICogQGV4YW1wbGVcbiAqIC8vIGV4YW1wbGVcbiAqIHZhciBhY3Rpb24gPSBjYy50aW50VG8oMiwgMjU1LCAwLCAyNTUpO1xuICovXG5jYy50aW50VG8gPSBmdW5jdGlvbiAoZHVyYXRpb24sIHJlZCwgZ3JlZW4sIGJsdWUpIHtcbiAgICByZXR1cm4gbmV3IGNjLlRpbnRUbyhkdXJhdGlvbiwgcmVkLCBncmVlbiwgYmx1ZSk7XG59O1xuXG4vKiBUaW50cyBhIE5vZGUgdGhhdCBpbXBsZW1lbnRzIHRoZSBjYy5Ob2RlUkdCIHByb3RvY29sIGZyb20gY3VycmVudCB0aW50IHRvIGEgY3VzdG9tIG9uZS5cbiAqIFJlbGF0aXZlIHRvIHRoZWlyIG93biBjb2xvciBjaGFuZ2UuXG4gKiBAY2xhc3MgVGludEJ5XG4gKiBAZXh0ZW5kcyBBY3Rpb25JbnRlcnZhbFxuICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uICBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gKiBAcGFyYW0ge051bWJlcn0gZGVsdGFSZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWx0YUdyZWVuXG4gKiBAcGFyYW0ge051bWJlcn0gZGVsdGFCbHVlXG4gKiBAZXhhbXBsZVxuICogdmFyIGFjdGlvbiA9IG5ldyBjYy5UaW50QnkoMiwgLTEyNywgLTI1NSwgLTEyNyk7XG4gKi9cbmNjLlRpbnRCeSA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuVGludEJ5JyxcbiAgICBleHRlbmRzOiBjYy5BY3Rpb25JbnRlcnZhbCxcblxuICAgIGN0b3I6IGZ1bmN0aW9uIGN0b3IoZHVyYXRpb24sIGRlbHRhUmVkLCBkZWx0YUdyZWVuLCBkZWx0YUJsdWUpIHtcbiAgICAgICAgdGhpcy5fZGVsdGFSID0gMDtcbiAgICAgICAgdGhpcy5fZGVsdGFHID0gMDtcbiAgICAgICAgdGhpcy5fZGVsdGFCID0gMDtcbiAgICAgICAgdGhpcy5fZnJvbVIgPSAwO1xuICAgICAgICB0aGlzLl9mcm9tRyA9IDA7XG4gICAgICAgIHRoaXMuX2Zyb21CID0gMDtcbiAgICAgICAgZGVsdGFCbHVlICE9PSB1bmRlZmluZWQgJiYgdGhpcy5pbml0V2l0aER1cmF0aW9uKGR1cmF0aW9uLCBkZWx0YVJlZCwgZGVsdGFHcmVlbiwgZGVsdGFCbHVlKTtcbiAgICB9LFxuXG4gICAgLypcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkZWx0YVJlZCAwLTI1NVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkZWx0YUdyZWVuIDAtMjU1XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGRlbHRhQmx1ZSAwLTI1NVxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaW5pdFdpdGhEdXJhdGlvbjogZnVuY3Rpb24gaW5pdFdpdGhEdXJhdGlvbihkdXJhdGlvbiwgZGVsdGFSZWQsIGRlbHRhR3JlZW4sIGRlbHRhQmx1ZSkge1xuICAgICAgICBpZiAoY2MuQWN0aW9uSW50ZXJ2YWwucHJvdG90eXBlLmluaXRXaXRoRHVyYXRpb24uY2FsbCh0aGlzLCBkdXJhdGlvbikpIHtcbiAgICAgICAgICAgIHRoaXMuX2RlbHRhUiA9IGRlbHRhUmVkO1xuICAgICAgICAgICAgdGhpcy5fZGVsdGFHID0gZGVsdGFHcmVlbjtcbiAgICAgICAgICAgIHRoaXMuX2RlbHRhQiA9IGRlbHRhQmx1ZTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgICB2YXIgYWN0aW9uID0gbmV3IGNjLlRpbnRCeSgpO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgYWN0aW9uLmluaXRXaXRoRHVyYXRpb24odGhpcy5fZHVyYXRpb24sIHRoaXMuX2RlbHRhUiwgdGhpcy5fZGVsdGFHLCB0aGlzLl9kZWx0YUIpO1xuICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG5cbiAgICBzdGFydFdpdGhUYXJnZXQ6IGZ1bmN0aW9uIHN0YXJ0V2l0aFRhcmdldCh0YXJnZXQpIHtcbiAgICAgICAgY2MuQWN0aW9uSW50ZXJ2YWwucHJvdG90eXBlLnN0YXJ0V2l0aFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCk7XG5cbiAgICAgICAgdmFyIGNvbG9yID0gdGFyZ2V0LmNvbG9yO1xuICAgICAgICB0aGlzLl9mcm9tUiA9IGNvbG9yLnI7XG4gICAgICAgIHRoaXMuX2Zyb21HID0gY29sb3IuZztcbiAgICAgICAgdGhpcy5fZnJvbUIgPSBjb2xvci5iO1xuICAgIH0sXG5cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShkdCkge1xuICAgICAgICBkdCA9IHRoaXMuX2NvbXB1dGVFYXNlVGltZShkdCk7XG5cbiAgICAgICAgdGhpcy50YXJnZXQuY29sb3IgPSBjYy5jb2xvcih0aGlzLl9mcm9tUiArIHRoaXMuX2RlbHRhUiAqIGR0LCB0aGlzLl9mcm9tRyArIHRoaXMuX2RlbHRhRyAqIGR0LCB0aGlzLl9mcm9tQiArIHRoaXMuX2RlbHRhQiAqIGR0KTtcbiAgICB9LFxuXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5UaW50QnkodGhpcy5fZHVyYXRpb24sIC10aGlzLl9kZWx0YVIsIC10aGlzLl9kZWx0YUcsIC10aGlzLl9kZWx0YUIpO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgdGhpcy5fcmV2ZXJzZUVhc2VMaXN0KGFjdGlvbik7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfVxufSk7XG5cbi8qKlxuICogISNlblxuICogVGludHMgYSBOb2RlIHRoYXQgaW1wbGVtZW50cyB0aGUgY2MuTm9kZVJHQiBwcm90b2NvbCBmcm9tIGN1cnJlbnQgdGludCB0byBhIGN1c3RvbSBvbmUuXG4gKiBSZWxhdGl2ZSB0byB0aGVpciBvd24gY29sb3IgY2hhbmdlLlxuICogISN6aCDmjInnhafmjIflrprnmoTlop7ph4/kv67mlLnpopzoibLjgIJcbiAqIEBtZXRob2QgdGludEJ5XG4gKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb24gIGR1cmF0aW9uIGluIHNlY29uZHNcbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWx0YVJlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbHRhR3JlZW5cbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWx0YUJsdWVcbiAqIEByZXR1cm4ge0FjdGlvbkludGVydmFsfVxuICogQGV4YW1wbGVcbiAqIC8vIGV4YW1wbGVcbiAqIHZhciBhY3Rpb24gPSBjYy50aW50QnkoMiwgLTEyNywgLTI1NSwgLTEyNyk7XG4gKi9cbmNjLnRpbnRCeSA9IGZ1bmN0aW9uIChkdXJhdGlvbiwgZGVsdGFSZWQsIGRlbHRhR3JlZW4sIGRlbHRhQmx1ZSkge1xuICAgIHJldHVybiBuZXcgY2MuVGludEJ5KGR1cmF0aW9uLCBkZWx0YVJlZCwgZGVsdGFHcmVlbiwgZGVsdGFCbHVlKTtcbn07XG5cbi8qIERlbGF5cyB0aGUgYWN0aW9uIGEgY2VydGFpbiBhbW91bnQgb2Ygc2Vjb25kc1xuICogQGNsYXNzIERlbGF5VGltZVxuICogQGV4dGVuZHMgQWN0aW9uSW50ZXJ2YWxcbiAqL1xuY2MuRGVsYXlUaW1lID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5EZWxheVRpbWUnLFxuICAgIGV4dGVuZHM6IGNjLkFjdGlvbkludGVydmFsLFxuXG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoZHQpIHt9LFxuXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5EZWxheVRpbWUodGhpcy5fZHVyYXRpb24pO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgdGhpcy5fcmV2ZXJzZUVhc2VMaXN0KGFjdGlvbik7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIGNsb25lOiBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5EZWxheVRpbWUoKTtcbiAgICAgICAgdGhpcy5fY2xvbmVEZWNvcmF0aW9uKGFjdGlvbik7XG4gICAgICAgIGFjdGlvbi5pbml0V2l0aER1cmF0aW9uKHRoaXMuX2R1cmF0aW9uKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9XG59KTtcblxuLyoqXG4gKiAhI2VuIERlbGF5cyB0aGUgYWN0aW9uIGEgY2VydGFpbiBhbW91bnQgb2Ygc2Vjb25kcy5cbiAqICEjemgg5bu26L+f5oyH5a6a55qE5pe26Ze06YeP44CCXG4gKiBAbWV0aG9kIGRlbGF5VGltZVxuICogQHBhcmFtIHtOdW1iZXJ9IGQgZHVyYXRpb24gaW4gc2Vjb25kc1xuICogQHJldHVybiB7QWN0aW9uSW50ZXJ2YWx9XG4gKiBAZXhhbXBsZVxuICogLy8gZXhhbXBsZVxuICogdmFyIGRlbGF5ID0gY2MuZGVsYXlUaW1lKDEpO1xuICovXG5jYy5kZWxheVRpbWUgPSBmdW5jdGlvbiAoZCkge1xuICAgIHJldHVybiBuZXcgY2MuRGVsYXlUaW1lKGQpO1xufTtcblxuLypcbiAqIDxwPlxuICogRXhlY3V0ZXMgYW4gYWN0aW9uIGluIHJldmVyc2Ugb3JkZXIsIGZyb20gdGltZT1kdXJhdGlvbiB0byB0aW1lPTAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyLz5cbiAqIEB3YXJuaW5nIFVzZSB0aGlzIGFjdGlvbiBjYXJlZnVsbHkuIFRoaXMgYWN0aW9uIGlzIG5vdCBzZXF1ZW5jZWFibGUuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyLz5cbiAqIFVzZSBpdCBhcyB0aGUgZGVmYXVsdCBcInJldmVyc2VkXCIgbWV0aG9kIG9mIHlvdXIgb3duIGFjdGlvbnMsIGJ1dCB1c2luZyBpdCBvdXRzaWRlIHRoZSBcInJldmVyc2VkXCIgICAgICA8YnIvPlxuICogc2NvcGUgaXMgbm90IHJlY29tbWVuZGVkLlxuICogPC9wPlxuICogQGNsYXNzIFJldmVyc2VUaW1lXG4gKiBAZXh0ZW5kcyBBY3Rpb25JbnRlcnZhbFxuICogQHBhcmFtIHtGaW5pdGVUaW1lQWN0aW9ufSBhY3Rpb25cbiAqIEBleGFtcGxlXG4gKiAgdmFyIHJldmVyc2UgPSBuZXcgY2MuUmV2ZXJzZVRpbWUodGhpcyk7XG4gKi9cbmNjLlJldmVyc2VUaW1lID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5SZXZlcnNlVGltZScsXG4gICAgZXh0ZW5kczogY2MuQWN0aW9uSW50ZXJ2YWwsXG5cbiAgICBjdG9yOiBmdW5jdGlvbiBjdG9yKGFjdGlvbikge1xuICAgICAgICB0aGlzLl9vdGhlciA9IG51bGw7XG4gICAgICAgIGFjdGlvbiAmJiB0aGlzLmluaXRXaXRoQWN0aW9uKGFjdGlvbik7XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogQHBhcmFtIHtGaW5pdGVUaW1lQWN0aW9ufSBhY3Rpb25cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGluaXRXaXRoQWN0aW9uOiBmdW5jdGlvbiBpbml0V2l0aEFjdGlvbihhY3Rpb24pIHtcbiAgICAgICAgaWYgKCFhY3Rpb24pIHtcbiAgICAgICAgICAgIGNjLmVycm9ySUQoMTAyOCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFjdGlvbiA9PT0gdGhpcy5fb3RoZXIpIHtcbiAgICAgICAgICAgIGNjLmVycm9ySUQoMTAyOSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2MuQWN0aW9uSW50ZXJ2YWwucHJvdG90eXBlLmluaXRXaXRoRHVyYXRpb24uY2FsbCh0aGlzLCBhY3Rpb24uX2R1cmF0aW9uKSkge1xuICAgICAgICAgICAgLy8gRG9uJ3QgbGVhayBpZiBhY3Rpb24gaXMgcmV1c2VkXG4gICAgICAgICAgICB0aGlzLl9vdGhlciA9IGFjdGlvbjtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgICB2YXIgYWN0aW9uID0gbmV3IGNjLlJldmVyc2VUaW1lKCk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICBhY3Rpb24uaW5pdFdpdGhBY3Rpb24odGhpcy5fb3RoZXIuY2xvbmUoKSk7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIHN0YXJ0V2l0aFRhcmdldDogZnVuY3Rpb24gc3RhcnRXaXRoVGFyZ2V0KHRhcmdldCkge1xuICAgICAgICBjYy5BY3Rpb25JbnRlcnZhbC5wcm90b3R5cGUuc3RhcnRXaXRoVGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcbiAgICAgICAgdGhpcy5fb3RoZXIuc3RhcnRXaXRoVGFyZ2V0KHRhcmdldCk7XG4gICAgfSxcblxuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKGR0KSB7XG4gICAgICAgIGR0ID0gdGhpcy5fY29tcHV0ZUVhc2VUaW1lKGR0KTtcbiAgICAgICAgaWYgKHRoaXMuX290aGVyKSB0aGlzLl9vdGhlci51cGRhdGUoMSAtIGR0KTtcbiAgICB9LFxuXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX290aGVyLmNsb25lKCk7XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAgIHRoaXMuX290aGVyLnN0b3AoKTtcbiAgICAgICAgY2MuQWN0aW9uLnByb3RvdHlwZS5zdG9wLmNhbGwodGhpcyk7XG4gICAgfVxufSk7XG5cbi8qKlxuICogISNlbiBFeGVjdXRlcyBhbiBhY3Rpb24gaW4gcmV2ZXJzZSBvcmRlciwgZnJvbSB0aW1lPWR1cmF0aW9uIHRvIHRpbWU9MC5cbiAqICEjemgg5Y+N6L2s55uu5qCH5Yqo5L2c55qE5pe26Ze06L2044CCXG4gKiBAbWV0aG9kIHJldmVyc2VUaW1lXG4gKiBAcGFyYW0ge0Zpbml0ZVRpbWVBY3Rpb259IGFjdGlvblxuICogQHJldHVybiB7QWN0aW9uSW50ZXJ2YWx9XG4gKiBAZXhhbXBsZVxuICogLy8gZXhhbXBsZVxuICogIHZhciByZXZlcnNlID0gY2MucmV2ZXJzZVRpbWUodGhpcyk7XG4gKi9cbmNjLnJldmVyc2VUaW1lID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgIHJldHVybiBuZXcgY2MuUmV2ZXJzZVRpbWUoYWN0aW9uKTtcbn07XG5cbi8qXG4gKiA8cD5cbiAqIE92ZXJyaWRlcyB0aGUgdGFyZ2V0IG9mIGFuIGFjdGlvbiBzbyB0aGF0IGl0IGFsd2F5cyBydW5zIG9uIHRoZSB0YXJnZXQ8YnIvPlxuICogc3BlY2lmaWVkIGF0IGFjdGlvbiBjcmVhdGlvbiByYXRoZXIgdGhhbiB0aGUgb25lIHNwZWNpZmllZCBieSBydW5BY3Rpb24uXG4gKiA8L3A+XG4gKiBAY2xhc3MgVGFyZ2V0ZWRBY3Rpb25cbiAqIEBleHRlbmRzIEFjdGlvbkludGVydmFsXG4gKiBAcGFyYW0ge05vZGV9IHRhcmdldFxuICogQHBhcmFtIHtGaW5pdGVUaW1lQWN0aW9ufSBhY3Rpb25cbiAqL1xuY2MuVGFyZ2V0ZWRBY3Rpb24gPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLlRhcmdldGVkQWN0aW9uJyxcbiAgICBleHRlbmRzOiBjYy5BY3Rpb25JbnRlcnZhbCxcblxuICAgIGN0b3I6IGZ1bmN0aW9uIGN0b3IodGFyZ2V0LCBhY3Rpb24pIHtcbiAgICAgICAgdGhpcy5fYWN0aW9uID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZm9yY2VkVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgYWN0aW9uICYmIHRoaXMuaW5pdFdpdGhUYXJnZXQodGFyZ2V0LCBhY3Rpb24pO1xuICAgIH0sXG5cbiAgICAvKlxuICAgICAqIEluaXQgYW4gYWN0aW9uIHdpdGggdGhlIHNwZWNpZmllZCBhY3Rpb24gYW5kIGZvcmNlZCB0YXJnZXRcbiAgICAgKiBAcGFyYW0ge05vZGV9IHRhcmdldFxuICAgICAqIEBwYXJhbSB7RmluaXRlVGltZUFjdGlvbn0gYWN0aW9uXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpbml0V2l0aFRhcmdldDogZnVuY3Rpb24gaW5pdFdpdGhUYXJnZXQodGFyZ2V0LCBhY3Rpb24pIHtcbiAgICAgICAgaWYgKHRoaXMuaW5pdFdpdGhEdXJhdGlvbihhY3Rpb24uX2R1cmF0aW9uKSkge1xuICAgICAgICAgICAgdGhpcy5fZm9yY2VkVGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICAgICAgdGhpcy5fYWN0aW9uID0gYWN0aW9uO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuVGFyZ2V0ZWRBY3Rpb24oKTtcbiAgICAgICAgdGhpcy5fY2xvbmVEZWNvcmF0aW9uKGFjdGlvbik7XG4gICAgICAgIGFjdGlvbi5pbml0V2l0aFRhcmdldCh0aGlzLl9mb3JjZWRUYXJnZXQsIHRoaXMuX2FjdGlvbi5jbG9uZSgpKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgc3RhcnRXaXRoVGFyZ2V0OiBmdW5jdGlvbiBzdGFydFdpdGhUYXJnZXQodGFyZ2V0KSB7XG4gICAgICAgIGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5zdGFydFdpdGhUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpO1xuICAgICAgICB0aGlzLl9hY3Rpb24uc3RhcnRXaXRoVGFyZ2V0KHRoaXMuX2ZvcmNlZFRhcmdldCk7XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAgIHRoaXMuX2FjdGlvbi5zdG9wKCk7XG4gICAgfSxcblxuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKGR0KSB7XG4gICAgICAgIGR0ID0gdGhpcy5fY29tcHV0ZUVhc2VUaW1lKGR0KTtcbiAgICAgICAgdGhpcy5fYWN0aW9uLnVwZGF0ZShkdCk7XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogcmV0dXJuIHRoZSB0YXJnZXQgdGhhdCB0aGUgYWN0aW9uIHdpbGwgYmUgZm9yY2VkIHRvIHJ1biB3aXRoXG4gICAgICogQHJldHVybiB7Tm9kZX1cbiAgICAgKi9cbiAgICBnZXRGb3JjZWRUYXJnZXQ6IGZ1bmN0aW9uIGdldEZvcmNlZFRhcmdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZvcmNlZFRhcmdldDtcbiAgICB9LFxuXG4gICAgLypcbiAgICAgKiBzZXQgdGhlIHRhcmdldCB0aGF0IHRoZSBhY3Rpb24gd2lsbCBiZSBmb3JjZWQgdG8gcnVuIHdpdGhcbiAgICAgKiBAcGFyYW0ge05vZGV9IGZvcmNlZFRhcmdldFxuICAgICAqL1xuICAgIHNldEZvcmNlZFRhcmdldDogZnVuY3Rpb24gc2V0Rm9yY2VkVGFyZ2V0KGZvcmNlZFRhcmdldCkge1xuICAgICAgICBpZiAodGhpcy5fZm9yY2VkVGFyZ2V0ICE9PSBmb3JjZWRUYXJnZXQpIHRoaXMuX2ZvcmNlZFRhcmdldCA9IGZvcmNlZFRhcmdldDtcbiAgICB9XG59KTtcblxuLyoqXG4gKiAhI2VuIENyZWF0ZSBhbiBhY3Rpb24gd2l0aCB0aGUgc3BlY2lmaWVkIGFjdGlvbiBhbmQgZm9yY2VkIHRhcmdldC5cbiAqICEjemgg55So5bey5pyJ5Yqo5L2c5ZKM5LiA5Liq5paw55qE55uu5qCH6IqC54K55Yib5bu65Yqo5L2c44CCXG4gKiBAbWV0aG9kIHRhcmdldGVkQWN0aW9uXG4gKiBAcGFyYW0ge05vZGV9IHRhcmdldFxuICogQHBhcmFtIHtGaW5pdGVUaW1lQWN0aW9ufSBhY3Rpb25cbiAqIEByZXR1cm4ge0FjdGlvbkludGVydmFsfVxuICovXG5jYy50YXJnZXRlZEFjdGlvbiA9IGZ1bmN0aW9uICh0YXJnZXQsIGFjdGlvbikge1xuICAgIHJldHVybiBuZXcgY2MuVGFyZ2V0ZWRBY3Rpb24odGFyZ2V0LCBhY3Rpb24pO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrTkRRV04wYVc5dVNXNTBaWEoyWVd3dWFuTWlYU3dpYm1GdFpYTWlPbHNpWTJNaUxDSkJZM1JwYjI1SmJuUmxjblpoYkNJc0lrTnNZWE56SWl3aWJtRnRaU0lzSW1WNGRHVnVaSE1pTENKR2FXNXBkR1ZVYVcxbFFXTjBhVzl1SWl3aVkzUnZjaUlzSW1RaUxDSk5RVmhmVmtGTVZVVWlMQ0pmWld4aGNITmxaQ0lzSWw5bWFYSnpkRlJwWTJzaUxDSmZaV0Z6WlV4cGMzUWlMQ0pmYzNCbFpXUWlMQ0pmZEdsdFpYTkdiM0pTWlhCbFlYUWlMQ0pmY21Wd1pXRjBSbTl5WlhabGNpSXNJbDl5WlhCbFlYUk5aWFJvYjJRaUxDSmZjM0JsWldSTlpYUm9iMlFpTENKMWJtUmxabWx1WldRaUxDSndjbTkwYjNSNWNHVWlMQ0pwYm1sMFYybDBhRVIxY21GMGFXOXVJaXdpWTJGc2JDSXNJbWRsZEVWc1lYQnpaV1FpTENKZlpIVnlZWFJwYjI0aUxDSnRZV055YnlJc0lrWk1WRjlGVUZOSlRFOU9JaXdpYVhORWIyNWxJaXdpWDJOc2IyNWxSR1ZqYjNKaGRHbHZiaUlzSW1GamRHbHZiaUlzSWw5eVpYWmxjbk5sUldGelpVeHBjM1FpTENKcElpd2liR1Z1WjNSb0lpd2ljSFZ6YUNJc0luSmxkbVZ5YzJVaUxDSmpiRzl1WlNJc0ltVmhjMmx1WnlJc0ltVmhjMlZQWW1vaUxDSmhjbWQxYldWdWRITWlMQ0pmWTI5dGNIVjBaVVZoYzJWVWFXMWxJaXdpWkhRaUxDSnNiMk5NYVhOMElpd2liaUlzSW5OMFpYQWlMQ0owSWl3aWRYQmtZWFJsSWl3aWMzUmhjblJYYVhSb1ZHRnlaMlYwSWl3aWRHRnlaMlYwSWl3aVFXTjBhVzl1SWl3aWJHOW5TVVFpTENKelpYUkJiWEJzYVhSMVpHVlNZWFJsSWl3aVlXMXdJaXdpWjJWMFFXMXdiR2wwZFdSbFVtRjBaU0lzSW5Od1pXVmtJaXdpWjJWMFUzQmxaV1FpTENKelpYUlRjR1ZsWkNJc0luSmxjR1ZoZENJc0luUnBiV1Z6SWl3aVRXRjBhQ0lzSW5KdmRXNWtJaXdpYVhOT1lVNGlMQ0p5WlhCbFlYUkdiM0psZG1WeUlpd2lZV04wYVc5dVNXNTBaWEoyWVd3aUxDSlRaWEYxWlc1alpTSXNJblJsYlhCQmNuSmhlU0lzSWw5aFkzUnBiMjV6SWl3aVgzTndiR2wwSWl3aVgyeGhjM1FpTENKZmNtVjJaWEp6WldRaUxDSndZWEpoYlVGeWNtRjVJaXdpUVhKeVlYa2lMQ0psY25KdmNrbEVJaXdpYkdGemRDSXNJbkJ5WlhZaUxDSmhZM1JwYjI0eElpd2lYMkZqZEdsdmJrOXVaVlIzYnlJc0ltbHVhWFJYYVhSb1ZIZHZRV04wYVc5dWN5SXNJbUZqZEdsdmJrOXVaU0lzSW1GamRHbHZibFIzYnlJc0ltUjFjbUYwYVc5dVQyNWxJaXdpWkhWeVlYUnBiMjVVZDI4aUxDSnpkRzl3SWl3aWJtVjNYM1FpTENKbWIzVnVaQ0lzSW14dlkxTndiR2wwSWl3aWJHOWpRV04wYVc5dWN5SXNJbXh2WTB4aGMzUWlMQ0poWTNScGIyNUdiM1Z1WkNJc0luTmxjWFZsYm1ObElpd2ljbVZ6ZFd4MElpd2lVbVZ3WldGMElpd2lYM1JwYldWeklpd2lYM1J2ZEdGc0lpd2lYMjVsZUhSRWRDSXNJbDloWTNScGIyNUpibk4wWVc1MElpd2lYMmx1Ym1WeVFXTjBhVzl1SWl3aWFXNXBkRmRwZEdoQlkzUnBiMjRpTENKa2RYSmhkR2x2YmlJc0lrRmpkR2x2YmtsdWMzUmhiblFpTENKc2IyTkpibTVsY2tGamRHbHZiaUlzSW14dlkwUjFjbUYwYVc5dUlpd2liRzlqVkdsdFpYTWlMQ0pzYjJOT1pYaDBSSFFpTENKelpYUkpibTVsY2tGamRHbHZiaUlzSW1kbGRFbHVibVZ5UVdOMGFXOXVJaXdpVW1Wd1pXRjBSbTl5WlhabGNpSXNJbE53WVhkdUlpd2lYMjl1WlNJc0lsOTBkMjhpTENKaFkzUnBiMjR5SWl3aWNtVjBJaXdpWkRFaUxDSmtNaUlzSW0xaGVDSXNJbVJsYkdGNVZHbHRaU0lzSW5Od1lYZHVJaXdpY0ZOd1lYZHVJaXdpVW05MFlYUmxWRzhpTENKa2MzUkJibWRzWlNJc0lsOXpkR0Z5ZEVGdVoyeGxJaXdpWDJSemRFRnVaMnhsSWl3aVgyRnVaMnhsSWl3aWMzUmhjblJCYm1kc1pTSXNJbUZ1WjJ4bElpd2lVazlVUVZSRlgwRkRWRWxQVGw5RFExY2lMQ0p5YjNSaGRHVlVieUlzSWxKdmRHRjBaVUo1SWl3aVpHVnNkR0ZCYm1kc1pTSXNJbDlrWld4MFlVRnVaMnhsSWl3aWNtOTBZWFJsUW5raUxDSk5iM1psUW5raUxDSmtaV3gwWVZCdmN5SXNJbVJsYkhSaFdTSXNJbDl3YjNOcGRHbHZia1JsYkhSaElpd2lkaklpTENKZmMzUmhjblJRYjNOcGRHbHZiaUlzSWw5d2NtVjJhVzkxYzFCdmMybDBhVzl1SWl3aWNHOXphWFJwYjI0aUxDSjVJaXdpZUNJc0lteHZZMUJ2YzFnaUxDSnNiMk5RYjNOWklpd2liRzlqVTNSaGNuUlFiM05wZEdsdmJpSXNJa1ZPUVVKTVJWOVRWRUZEUzBGQ1RFVmZRVU5VU1U5T1V5SXNJblJoY21kbGRGZ2lMQ0owWVhKblpYUlpJaXdpYkc5alVISmxkbWx2ZFhOUWIzTnBkR2x2YmlJc0luTmxkRkJ2YzJsMGFXOXVJaXdpYlc5MlpVSjVJaXdpVFc5MlpWUnZJaXdpWDJWdVpGQnZjMmwwYVc5dUlpd2liVzkyWlZSdklpd2lVMnRsZDFSdklpd2ljM2dpTENKemVTSXNJbDl6YTJWM1dDSXNJbDl6YTJWM1dTSXNJbDl6ZEdGeWRGTnJaWGRZSWl3aVgzTjBZWEowVTJ0bGQxa2lMQ0pmWlc1a1UydGxkMWdpTENKZlpXNWtVMnRsZDFraUxDSmZaR1ZzZEdGWUlpd2lYMlJsYkhSaFdTSXNJbk5yWlhkWUlpd2ljMnRsZDFraUxDSnphMlYzVkc4aUxDSlRhMlYzUW5raUxDSmtaV3gwWVZOclpYZFlJaXdpWkdWc2RHRlRhMlYzV1NJc0luTnJaWGRDZVNJc0lrcDFiWEJDZVNJc0ltaGxhV2RvZENJc0ltcDFiWEJ6SWl3aVgyUmxiSFJoSWl3aVgyaGxhV2RvZENJc0lsOXFkVzF3Y3lJc0ltWnlZV01pTENKcWRXMXdRbmtpTENKS2RXMXdWRzhpTENKcWRXMXdWRzhpTENKaVpYcHBaWEpCZENJc0ltRWlMQ0ppSWl3aVl5SXNJbkJ2ZHlJc0lrSmxlbWxsY2tKNUlpd2lYMk52Ym1acFp5SXNJbTVsZDBOdmJtWnBaM01pTENKelpXeERiMjVtSWl3aWJHOWpRMjl1Wm1sbklpd2llR0VpTENKNFlpSXNJbmhqSWl3aWVHUWlMQ0o1WVNJc0lubGlJaXdpZVdNaUxDSjVaQ0lzSW5nd0lpd2llVEFpTENKNE1TSXNJbmt4SWl3aWVESWlMQ0o1TWlJc0luSWlMQ0ppWlhwcFpYSkNlU0lzSWtKbGVtbGxjbFJ2SWl3aVgzUnZRMjl1Wm1sbklpd2liRzlqVTNSaGNuUlFiM01pTENKc2IyTlViME52Ym1acFp5SXNJbk4xWWlJc0ltSmxlbWxsY2xSdklpd2lVMk5oYkdWVWJ5SXNJbDl6WTJGc1pWZ2lMQ0pmYzJOaGJHVlpJaXdpWDNOMFlYSjBVMk5oYkdWWUlpd2lYM04wWVhKMFUyTmhiR1ZaSWl3aVgyVnVaRk5qWVd4bFdDSXNJbDlsYm1SVFkyRnNaVmtpTENKelkyRnNaVmdpTENKelkyRnNaVmtpTENKelkyRnNaVlJ2SWl3aVUyTmhiR1ZDZVNJc0luTmpZV3hsUW5raUxDSkNiR2x1YXlJc0ltSnNhVzVyY3lJc0lsOXZjbWxuYVc1aGJGTjBZWFJsSWl3aWMyeHBZMlVpTENKdElpd2liM0JoWTJsMGVTSXNJbUpzYVc1cklpd2lSbUZrWlZSdklpd2lYM1J2VDNCaFkybDBlU0lzSWw5bWNtOXRUM0JoWTJsMGVTSXNJblJwYldVaUxDSm1jbTl0VDNCaFkybDBlU0lzSW1aaFpHVlVieUlzSWtaaFpHVkpiaUlzSWw5eVpYWmxjbk5sUVdOMGFXOXVJaXdpUm1Ga1pVOTFkQ0lzSW1aaFpHVkpiaUlzSW1aaFpHVlBkWFFpTENKVWFXNTBWRzhpTENKeVpXUWlMQ0puY21WbGJpSXNJbUpzZFdVaUxDSmZkRzhpTENKamIyeHZjaUlzSWw5bWNtOXRJaXdpUTI5c2IzSWlMQ0puSWl3aWJHOWpWRzhpTENKc2IyTkdjbTl0SWl3aWRHbHVkRlJ2SWl3aVZHbHVkRUo1SWl3aVpHVnNkR0ZTWldRaUxDSmtaV3gwWVVkeVpXVnVJaXdpWkdWc2RHRkNiSFZsSWl3aVgyUmxiSFJoVWlJc0lsOWtaV3gwWVVjaUxDSmZaR1ZzZEdGQ0lpd2lYMlp5YjIxU0lpd2lYMlp5YjIxSElpd2lYMlp5YjIxQ0lpd2lkR2x1ZEVKNUlpd2lSR1ZzWVhsVWFXMWxJaXdpVW1WMlpYSnpaVlJwYldVaUxDSmZiM1JvWlhJaUxDSnlaWFpsY25ObFZHbHRaU0lzSWxSaGNtZGxkR1ZrUVdOMGFXOXVJaXdpWDJGamRHbHZiaUlzSWw5bWIzSmpaV1JVWVhKblpYUWlMQ0pwYm1sMFYybDBhRlJoY21kbGRDSXNJbWRsZEVadmNtTmxaRlJoY21kbGRDSXNJbk5sZEVadmNtTmxaRlJoY21kbGRDSXNJbVp2Y21ObFpGUmhjbWRsZENJc0luUmhjbWRsZEdWa1FXTjBhVzl1SWwwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRTBRa0U3T3pzN1FVRkpRVHM3T3pzN096czdPenM3T3pzN096czdPMEZCYTBKQlFTeEhRVUZIUXl4alFVRklMRWRCUVc5Q1JDeEhRVUZIUlN4TFFVRklMRU5CUVZNN1FVRkRla0pETEZWQlFVMHNiVUpCUkcxQ08wRkJSWHBDUXl4aFFVRlRTaXhIUVVGSFN5eG5Ra0ZHWVRzN1FVRkpla0pETEZWQlFVc3NZMEZCVlVNc1EwRkJWaXhGUVVGaE8wRkJRMlFzWVVGQlMwTXNVMEZCVEN4SFFVRnBRaXhEUVVGcVFqdEJRVU5CTEdGQlFVdERMRkZCUVV3c1IwRkJaMElzUTBGQmFFSTdRVUZEUVN4aFFVRkxReXhWUVVGTUxFZEJRV3RDTEV0QlFXeENPMEZCUTBFc1lVRkJTME1zVTBGQlRDeEhRVUZwUWl4SlFVRnFRanRCUVVOQkxHRkJRVXRETEUxQlFVd3NSMEZCWXl4RFFVRmtPMEZCUTBFc1lVRkJTME1zWlVGQlRDeEhRVUYxUWl4RFFVRjJRanRCUVVOQkxHRkJRVXRETEdOQlFVd3NSMEZCYzBJc1MwRkJkRUk3UVVGRFFTeGhRVUZMUXl4aFFVRk1MRWRCUVhGQ0xFdEJRWEpDTEVOQlVtTXNRMEZSWVR0QlFVTXpRaXhoUVVGTFF5eFpRVUZNTEVkQlFXOUNMRXRCUVhCQ0xFTkJWR01zUTBGVFdUdEJRVU14UWxRc1kwRkJUVlVzVTBGQlRpeEpRVUZ0UW1wQ0xFZEJRVWRETEdOQlFVZ3NRMEZCYTBKcFFpeFRRVUZzUWl4RFFVRTBRa01zWjBKQlFUVkNMRU5CUVRaRFF5eEpRVUUzUXl4RFFVRnJSQ3hKUVVGc1JDeEZRVUYzUkdJc1EwRkJlRVFzUTBGQmJrSTdRVUZEU0N4TFFXWjNRanM3UVVGcFFucENPenM3TzBGQlNVRmpMR2RDUVVGWExITkNRVUZaTzBGQlEyNUNMR1ZCUVU4c1MwRkJTMW9zVVVGQldqdEJRVU5JTEV0QmRrSjNRanM3UVVGNVFucENPenM3T3p0QlFVdEJWU3h6UWtGQmFVSXNNRUpCUVZWYUxFTkJRVllzUlVGQllUdEJRVU14UWl4aFFVRkxaU3hUUVVGTUxFZEJRV3RDWml4TlFVRk5MRU5CUVZBc1IwRkJXVkFzUjBGQlIzVkNMRXRCUVVnc1EwRkJVME1zVjBGQmNrSXNSMEZCYlVOcVFpeERRVUZ3UkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHRkJRVXRGTEZGQlFVd3NSMEZCWjBJc1EwRkJhRUk3UVVGRFFTeGhRVUZMUXl4VlFVRk1MRWRCUVd0Q0xFbEJRV3hDTzBGQlEwRXNaVUZCVHl4SlFVRlFPMEZCUTBnc1MwRjBRM2RDT3p0QlFYZERla0psTEZsQlFVOHNhMEpCUVZrN1FVRkRaaXhsUVVGUkxFdEJRVXRvUWl4UlFVRk1MRWxCUVdsQ0xFdEJRVXRoTEZOQlFUbENPMEZCUTBnc1MwRXhRM2RDT3p0QlFUUkRla0pKTEhOQ1FVRnJRaXd3UWtGQlUwTXNUVUZCVkN4RlFVRm5RanRCUVVNNVFrRXNaVUZCVDJJc1kwRkJVQ3hIUVVGM1FpeExRVUZMUVN4alFVRTNRanRCUVVOQllTeGxRVUZQWml4TlFVRlFMRWRCUVdkQ0xFdEJRVXRCTEUxQlFYSkNPMEZCUTBGbExHVkJRVTlrTEdWQlFWQXNSMEZCZVVJc1MwRkJTMEVzWlVGQk9VSTdRVUZEUVdNc1pVRkJUMmhDTEZOQlFWQXNSMEZCYlVJc1MwRkJTMEVzVTBGQmVFSTdRVUZEUVdkQ0xHVkJRVTlZTEZsQlFWQXNSMEZCYzBJc1MwRkJTMEVzV1VGQk0wSTdRVUZEUVZjc1pVRkJUMW9zWVVGQlVDeEhRVUYxUWl4TFFVRkxRU3hoUVVFMVFqdEJRVU5JTEV0QmJrUjNRanM3UVVGeFJIcENZU3h6UWtGQmEwSXNNRUpCUVZORUxFMUJRVlFzUlVGQlowSTdRVUZET1VJc1dVRkJSeXhMUVVGTGFFSXNVMEZCVWl4RlFVRnJRanRCUVVOa1owSXNiVUpCUVU5b1FpeFRRVUZRTEVkQlFXMUNMRVZCUVc1Q08wRkJRMEVzYVVKQlFVa3NTVUZCU1d0Q0xFbEJRVVVzUTBGQlZpeEZRVUZoUVN4SlFVRkZMRXRCUVV0c1FpeFRRVUZNTEVOQlFXVnRRaXhOUVVFNVFpeEZRVUZ6UTBRc1IwRkJkRU1zUlVGQk1FTTdRVUZEZEVOR0xIVkNRVUZQYUVJc1UwRkJVQ3hEUVVGcFFtOUNMRWxCUVdwQ0xFTkJRWE5DTEV0QlFVdHdRaXhUUVVGTUxFTkJRV1ZyUWl4RFFVRm1MRVZCUVd0Q1J5eFBRVUZzUWl4RlFVRjBRanRCUVVOSU8wRkJRMG83UVVGRFNpeExRVFZFZDBJN08wRkJPRVI2UWtNc1YwRkJUU3hwUWtGQldUdEJRVU5rTEZsQlFVbE9MRk5CUVZNc1NVRkJTVE5DTEVkQlFVZERMR05CUVZBc1EwRkJjMElzUzBGQlMzRkNMRk5CUVROQ0xFTkJRV0k3UVVGRFFTeGhRVUZMU1N4blFrRkJUQ3hEUVVGelFrTXNUVUZCZEVJN1FVRkRRU3hsUVVGUFFTeE5RVUZRTzBGQlEwZ3NTMEZzUlhkQ096dEJRVzlGZWtJN096czdPenM3T3p0QlFWTkJUeXhaUVVGUkxHZENRVUZWUXl4UFFVRldMRVZCUVcxQ08wRkJRM1pDTEZsQlFVa3NTMEZCUzNoQ0xGTkJRVlFzUlVGRFNTeExRVUZMUVN4VFFVRk1MRU5CUVdWdFFpeE5RVUZtTEVkQlFYZENMRU5CUVhoQ0xFTkJSRW9zUzBGSFNTeExRVUZMYmtJc1UwRkJUQ3hIUVVGcFFpeEZRVUZxUWp0QlFVTktMR0ZCUVVzc1NVRkJTV3RDTEVsQlFVa3NRMEZCWWl4RlFVRm5Ra0VzU1VGQlNVOHNWVUZCVlU0c1RVRkJPVUlzUlVGQmMwTkVMRWRCUVhSRE8wRkJRMGtzYVVKQlFVdHNRaXhUUVVGTUxFTkJRV1Z2UWl4SlFVRm1MRU5CUVc5Q1N5eFZRVUZWVUN4RFFVRldMRU5CUVhCQ08wRkJSRW9zVTBGRlFTeFBRVUZQTEVsQlFWQTdRVUZEU0N4TFFYSkdkMEk3TzBGQmRVWjZRbEVzYzBKQlFXdENMREJDUVVGVlF5eEZRVUZXTEVWQlFXTTdRVUZETlVJc1dVRkJTVU1zVlVGQlZTeExRVUZMTlVJc1UwRkJia0k3UVVGRFFTeFpRVUZMTEVOQlFVTTBRaXhQUVVGR0xFbEJRV1ZCTEZGQlFWRlVMRTFCUVZJc1MwRkJiVUlzUTBGQmRFTXNSVUZEU1N4UFFVRlBVU3hGUVVGUU8wRkJRMG9zWVVGQlN5eEpRVUZKVkN4SlFVRkpMRU5CUVZJc1JVRkJWMWNzU1VGQlNVUXNVVUZCVVZRc1RVRkJOVUlzUlVGQmIwTkVMRWxCUVVsWExFTkJRWGhETEVWQlFUSkRXQ3hIUVVFelF6dEJRVU5KVXl4cFFrRkJTME1zVVVGQlVWWXNRMEZCVWl4RlFVRlhTeXhOUVVGWUxFTkJRV3RDU1N4RlFVRnNRaXhEUVVGTU8wRkJSRW9zVTBGRlFTeFBRVUZQUVN4RlFVRlFPMEZCUTBnc1MwRTVSbmRDT3p0QlFXZEhla0pITEZWQlFVc3NZMEZCVlVnc1JVRkJWaXhGUVVGak8wRkJRMllzV1VGQlNTeExRVUZMTlVJc1ZVRkJWQ3hGUVVGeFFqdEJRVU5xUWl4cFFrRkJTMEVzVlVGQlRDeEhRVUZyUWl4TFFVRnNRanRCUVVOQkxHbENRVUZMUkN4UlFVRk1MRWRCUVdkQ0xFTkJRV2hDTzBGQlEwZ3NVMEZJUkN4TlFVbEpMRXRCUVV0QkxGRkJRVXdzU1VGQmFVSTJRaXhGUVVGcVFqczdRVUZGU2p0QlFVTkJPMEZCUTBFc1dVRkJTVWtzU1VGQlNTeExRVUZMYWtNc1VVRkJUQ3hKUVVGcFFpeExRVUZMWVN4VFFVRk1MRWRCUVdsQ0xHdENRVUZxUWl4SFFVRnpReXhMUVVGTFFTeFRRVUV6UXl4SFFVRjFSQ3hyUWtGQmVFVXNRMEZCVWp0QlFVTkJiMElzV1VGQlN5eEpRVUZKUVN4RFFVRktMRWRCUVZGQkxFTkJRVklzUjBGQldTeERRVUZxUWp0QlFVTkJMR0ZCUVV0RExFMUJRVXdzUTBGQldVUXNTVUZCU1N4RFFVRktMRWRCUVZGQkxFTkJRVklzUjBGQldTeERRVUY0UWpzN1FVRkZRVHRCUVVOQkxGbEJRVWNzUzBGQlN6TkNMR0ZCUVV3c1NVRkJjMElzUzBGQlMwWXNaVUZCVEN4SFFVRjFRaXhEUVVFM1F5eEpRVUZyUkN4TFFVRkxXU3hOUVVGTUxFVkJRWEpFTEVWQlFXMUZPMEZCUXk5RUxHZENRVUZITEVOQlFVTXNTMEZCUzFnc1kwRkJWQ3hGUVVGM1FqdEJRVU53UWl4eFFrRkJTMFFzWlVGQlREdEJRVU5JTzBGQlEwUTdRVUZEUVN4cFFrRkJTeXRDTEdWQlFVd3NRMEZCY1VJc1MwRkJTME1zVFVGQk1VSTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hwUWtGQlMwb3NTVUZCVEN4RFFVRlZMRXRCUVV0b1F5eFJRVUZNTEVkQlFXZENMRXRCUVV0aExGTkJRUzlDTzBGQlJVZzdRVUZEU2l4TFFURklkMEk3TzBGQk5FaDZRbk5DTEhGQ1FVRm5RaXg1UWtGQlZVTXNUVUZCVml4RlFVRnJRanRCUVVNNVFqZERMRmRCUVVjNFF5eE5RVUZJTEVOQlFWVTFRaXhUUVVGV0xFTkJRVzlDTUVJc1pVRkJjRUlzUTBGQmIwTjRRaXhKUVVGd1F5eERRVUY1UXl4SlFVRjZReXhGUVVFclEzbENMRTFCUVM5RE8wRkJRMEVzWVVGQlMzQkRMRkZCUVV3c1IwRkJaMElzUTBGQmFFSTdRVUZEUVN4aFFVRkxReXhWUVVGTUxFZEJRV3RDTEVsQlFXeENPMEZCUTBnc1MwRm9TWGRDT3p0QlFXdEpla0p6UWl4aFFVRlJMRzFDUVVGWk8wRkJRMmhDYUVNc1YwRkJSeXRETEV0QlFVZ3NRMEZCVXl4SlFVRlVPMEZCUTBFc1pVRkJUeXhKUVVGUU8wRkJRMGdzUzBGeVNYZENPenRCUVhWSmVrSTdPenM3TzBGQlMwRkRMSE5DUVVGcFFpd3dRa0ZCVlVNc1IwRkJWaXhGUVVGbE8wRkJRelZDTzBGQlEwRnFSQ3hYUVVGSEswTXNTMEZCU0N4RFFVRlRMRWxCUVZRN1FVRkRTQ3hMUVM5SmQwSTdPMEZCYVVwNlFqczdPenM3UVVGTFFVY3NjMEpCUVdsQ0xEUkNRVUZaTzBGQlEzcENPMEZCUTBGc1JDeFhRVUZISzBNc1MwRkJTQ3hEUVVGVExFbEJRVlE3UVVGRFFTeGxRVUZQTEVOQlFWQTdRVUZEU0N4TFFURktkMEk3TzBGQk5FcDZRanM3T3pzN096czdPenM3UVVGWFFVa3NWMEZCVHl4bFFVRlRRU3hOUVVGVUxFVkJRV1U3UVVGRGJFSXNXVUZCUjBFc1ZVRkJVeXhEUVVGYUxFVkJRV003UVVGRFZtNUVMR1ZCUVVjclF5eExRVUZJTEVOQlFWTXNTVUZCVkR0QlFVTkJMRzFDUVVGUExFbEJRVkE3UVVGRFNEczdRVUZGUkN4aFFVRkxMMElzV1VGQlRDeEhRVUZ2UWl4SlFVRndRaXhEUVU1clFpeERRVTFQTzBGQlEzcENMR0ZCUVV0S0xFMUJRVXdzU1VGQlpYVkRMRTFCUVdZN1FVRkRRU3hsUVVGUExFbEJRVkE3UVVGRFNDeExRV2hNZDBJN08wRkJhMHg2UWpzN096dEJRVWxCUXl4alFVRlZMRzlDUVVGVk8wRkJRMmhDTEdWQlFVOHNTMEZCUzNoRExFMUJRVm83UVVGRFNDeExRWGhNZDBJN08wRkJNRXg2UWpzN096czdRVUZMUVhsRExHTkJRVlVzYTBKQlFWTkdMRXRCUVZRc1JVRkJaVHRCUVVOeVFpeGhRVUZMZGtNc1RVRkJUQ3hIUVVGamRVTXNTMEZCWkR0QlFVTkJMR1ZCUVU4c1NVRkJVRHRCUVVOSUxFdEJiRTEzUWpzN1FVRnZUWHBDT3pzN096czdPenM3UVVGVFFVY3NXVUZCVVN4blFrRkJVME1zUzBGQlZDeEZRVUZsTzBGQlEyNUNRU3huUWtGQlVVTXNTMEZCUzBNc1MwRkJUQ3hEUVVGWFJpeExRVUZZTEVOQlFWSTdRVUZEUVN4WlFVRkhSeXhOUVVGTlNDeExRVUZPTEV0QlFXZENRU3hSUVVGUkxFTkJRVE5DTEVWQlFUWkNPMEZCUTNwQ2RrUXNaVUZCUnl0RExFdEJRVWdzUTBGQlV5eEpRVUZVTzBGQlEwRXNiVUpCUVU4c1NVRkJVRHRCUVVOSU8wRkJRMFFzWVVGQlMyaERMR0ZCUVV3c1IwRkJjVUlzU1VGQmNrSXNRMEZPYlVJc1EwRk5UenRCUVVNeFFpeGhRVUZMUml4bFFVRk1MRWxCUVhkQ01FTXNTMEZCZUVJN1FVRkRRU3hsUVVGUExFbEJRVkE3UVVGRFNDeExRWFJPZDBJN08wRkJkMDU2UWpzN096czdPenM3UVVGUlFVa3NiVUpCUVdVc2VVSkJRVlU3UVVGRGNrSXNZVUZCU3pWRExHRkJRVXdzUjBGQmNVSXNTVUZCY2tJc1EwRkVjVUlzUTBGRFN6dEJRVU14UWl4aFFVRkxSaXhsUVVGTUxFZEJRWFZDTEV0QlFVdE1MRk5CUVRWQ08wRkJRMEVzWVVGQlMwMHNZMEZCVEN4SFFVRnpRaXhKUVVGMFFqdEJRVU5CTEdWQlFVOHNTVUZCVUR0QlFVTklPMEZCY2s5M1FpeERRVUZVTEVOQlFYQkNPenRCUVhkUFFXUXNSMEZCUnpSRUxHTkJRVWdzUjBGQmIwSXNWVUZCVlhKRUxFTkJRVllzUlVGQllUdEJRVU0zUWl4WFFVRlBMRWxCUVVsUUxFZEJRVWRETEdOQlFWQXNRMEZCYzBKTkxFTkJRWFJDTEVOQlFWQTdRVUZEU0N4RFFVWkVPenRCUVVsQk96czdPMEZCU1VFN096czdPenM3T3pzN096dEJRVmxCVUN4SFFVRkhOa1FzVVVGQlNDeEhRVUZqTjBRc1IwRkJSMFVzUzBGQlNDeERRVUZUTzBGQlEyNUNReXhWUVVGTkxHRkJSR0U3UVVGRmJrSkRMR0ZCUVZOS0xFZEJRVWRETEdOQlJrODdPMEZCU1c1Q1N5eFZRVUZMTEdOQlFWVjNSQ3hUUVVGV0xFVkJRWEZDTzBGQlEzUkNMR0ZCUVV0RExGRkJRVXdzUjBGQlowSXNSVUZCYUVJN1FVRkRRU3hoUVVGTFF5eE5RVUZNTEVkQlFXTXNTVUZCWkR0QlFVTkJMR0ZCUVV0RExFdEJRVXdzUjBGQllTeERRVUZpTzBGQlEwRXNZVUZCUzBNc1UwRkJUQ3hIUVVGcFFpeExRVUZxUWpzN1FVRkZRU3haUVVGSlF5eGhRVUZqVEN4eFFrRkJjVUpOTEV0QlFYUkNMRWRCUVN0Q1RpeFRRVUV2UWl4SFFVRXlRekZDTEZOQlFUVkVPMEZCUTBFc1dVRkJTU3RDTEZkQlFWZHlReXhOUVVGWUxFdEJRWE5DTEVOQlFURkNMRVZCUVRaQ08wRkJRM3BDT1VJc1pVRkJSM0ZGTEU5QlFVZ3NRMEZCVnl4SlFVRllPMEZCUTBFN1FVRkRTRHRCUVVORUxGbEJRVWxETEU5QlFVOUlMRmRCUVZkeVF5eE5RVUZZTEVkQlFXOUNMRU5CUVM5Q08wRkJRMEVzV1VGQlMzZERMRkZCUVZFc1EwRkJWQ3hKUVVGblFrZ3NWMEZCVjBjc1NVRkJXQ3hMUVVGdlFpeEpRVUY0UXl4RlFVTkpkRVVzUjBGQlJ5dERMRXRCUVVnc1EwRkJVeXhKUVVGVU96dEJRVVZLTEZsQlFVbDFRaXhSUVVGUkxFTkJRVm9zUlVGQlpUdEJRVU5ZTEdkQ1FVRkpReXhQUVVGUFNpeFhRVUZYTEVOQlFWZ3NRMEZCV0R0QlFVRkJMR2RDUVVFd1Frc3NUMEZCTVVJN1FVRkRRU3hwUWtGQlN5eEpRVUZKTTBNc1NVRkJTU3hEUVVGaUxFVkJRV2RDUVN4SlFVRkplVU1zU1VGQmNFSXNSVUZCTUVKNlF5eEhRVUV4UWl4RlFVRXJRanRCUVVNelFpeHZRa0ZCU1hORExGZEJRVmQwUXl4RFFVRllMRU5CUVVvc1JVRkJiVUk3UVVGRFpqSkRMRGhDUVVGVlJDeEpRVUZXTzBGQlEwRkJMREpDUVVGUGRrVXNSMEZCUnpaRUxGRkJRVWdzUTBGQldWa3NZVUZCV2l4RFFVRXdRa1FzVDBGQk1VSXNSVUZCYlVOTUxGZEJRVmQwUXl4RFFVRllMRU5CUVc1RExFTkJRVkE3UVVGRFNEdEJRVU5LTzBGQlEwUXNhVUpCUVVzMlF5eHJRa0ZCVEN4RFFVRjNRa2dzU1VGQmVFSXNSVUZCT0VKS0xGZEJRVmRITEVsQlFWZ3NRMEZCT1VJN1FVRkRTRHRCUVVOS0xFdEJOMEpyUWpzN1FVRXJRbTVDT3pzN096czdRVUZOUVVrc2QwSkJRVzFDTERSQ1FVRlZReXhUUVVGV0xFVkJRWEZDUXl4VFFVRnlRaXhGUVVGblF6dEJRVU12UXl4WlFVRkpMRU5CUVVORUxGTkJRVVFzU1VGQll5eERRVUZEUXl4VFFVRnVRaXhGUVVFNFFqdEJRVU14UWpWRkxHVkJRVWR4UlN4UFFVRklMRU5CUVZjc1NVRkJXRHRCUVVOQkxHMUNRVUZQTEV0QlFWQTdRVUZEU0RzN1FVRkZSQ3haUVVGSlVTeGpRVUZqUml4VlFVRlZja1FzVTBGQk5VSTdRVUZCUVN4WlFVRjFRM2RFTEdOQlFXTkdMRlZCUVZWMFJDeFRRVUV2UkR0QlFVTkJkVVFzZFVKQlFXVkdMRlZCUVZVMVJDeGhRVUZXTEVkQlFUQkNORVFzVlVGQlZUbEVMR1ZCUVhCRExFZEJRWE5FTEVOQlFYSkZPMEZCUTBGcFJTeDFRa0ZCWlVZc1ZVRkJWVGRFTEdGQlFWWXNSMEZCTUVJMlJDeFZRVUZWTDBRc1pVRkJjRU1zUjBGQmMwUXNRMEZCY2tVN1FVRkRRU3haUVVGSlRpeEpRVUZKYzBVc1kwRkJZME1zVjBGQmRFSTdRVUZEUVN4aFFVRkxNMFFzWjBKQlFVd3NRMEZCYzBKYUxFTkJRWFJDT3p0QlFVVkJMR0ZCUVV0M1JDeFJRVUZNTEVOQlFXTXNRMEZCWkN4SlFVRnRRbGtzVTBGQmJrSTdRVUZEUVN4aFFVRkxXaXhSUVVGTUxFTkJRV01zUTBGQlpDeEpRVUZ0UW1Fc1UwRkJia0k3UVVGRFFTeGxRVUZQTEVsQlFWQTdRVUZEU0N4TFFYQkVhMEk3TzBGQmMwUnVRak5ETEZkQlFVMHNhVUpCUVZrN1FVRkRaQ3haUVVGSlRpeFRRVUZUTEVsQlFVa3pRaXhIUVVGSE5rUXNVVUZCVUN4RlFVRmlPMEZCUTBFc1lVRkJTMjVETEdkQ1FVRk1MRU5CUVhOQ1F5eE5RVUYwUWp0QlFVTkJRU3hsUVVGUEswTXNhMEpCUVZBc1EwRkJNRUlzUzBGQlMxZ3NVVUZCVEN4RFFVRmpMRU5CUVdRc1JVRkJhVUk1UWl4TFFVRnFRaXhGUVVFeFFpeEZRVUZ2UkN4TFFVRkxPRUlzVVVGQlRDeERRVUZqTEVOQlFXUXNSVUZCYVVJNVFpeExRVUZxUWl4RlFVRndSRHRCUVVOQkxHVkJRVTlPTEUxQlFWQTdRVUZEU0N4TFFUTkVhMEk3TzBGQk5rUnVRbWxDTEhGQ1FVRm5RaXg1UWtGQlZVTXNUVUZCVml4RlFVRnJRanRCUVVNNVFqZERMRmRCUVVkRExHTkJRVWdzUTBGQmEwSnBRaXhUUVVGc1FpeERRVUUwUWpCQ0xHVkJRVFZDTEVOQlFUUkRlRUlzU1VGQk5VTXNRMEZCYVVRc1NVRkJha1FzUlVGQmRVUjVRaXhOUVVGMlJEdEJRVU5CTEdGQlFVdHRRaXhOUVVGTUxFZEJRV01zUzBGQlMwUXNVVUZCVEN4RFFVRmpMRU5CUVdRc1JVRkJhVUo2UXl4VFFVRnFRaXhIUVVFMlFpeExRVUZMUVN4VFFVRm9SRHRCUVVOQkxHRkJRVXN3UXl4TlFVRk1MRWxCUVdVc1MwRkJTMFFzVVVGQlRDeERRVUZqTEVOQlFXUXNSVUZCYVVKb1JDeGhRVUZxUWl4SFFVRnBReXhMUVVGTFowUXNVVUZCVEN4RFFVRmpMRU5CUVdRc1JVRkJhVUpzUkN4bFFVRnNSQ3hIUVVGdlJTeERRVUZ1Ump0QlFVTkJMR0ZCUVV0dlJDeExRVUZNTEVkQlFXRXNRMEZCUXl4RFFVRmtPMEZCUTBnc1MwRnNSV3RDT3p0QlFXOUZia0pqTEZWQlFVc3NaMEpCUVZrN1FVRkRZanRCUVVOQkxGbEJRVWtzUzBGQlMyUXNTMEZCVEN4TFFVRmxMRU5CUVVNc1EwRkJjRUlzUlVGRFNTeExRVUZMUml4UlFVRk1MRU5CUVdNc1MwRkJTMFVzUzBGQmJrSXNSVUZCTUVKakxFbEJRVEZDTzBGQlEwb3ZSU3hYUVVGSE9FTXNUVUZCU0N4RFFVRlZOVUlzVTBGQlZpeERRVUZ2UWpaRUxFbEJRWEJDTEVOQlFYbENNMFFzU1VGQmVrSXNRMEZCT0VJc1NVRkJPVUk3UVVGRFNDeExRWHBGYTBJN08wRkJNa1Z1UW5WQ0xGbEJRVThzWjBKQlFWVk1MRVZCUVZZc1JVRkJZenRCUVVOcVFpeFpRVUZKTUVNc1MwRkJTanRCUVVGQkxGbEJRVmRETEZGQlFWRXNRMEZCYmtJN1FVRkRRU3haUVVGSlF5eFhRVUZYTEV0QlFVdHNRaXhOUVVGd1FqdEJRVUZCTEZsQlFUUkNiVUlzWVVGQllTeExRVUZMY0VJc1VVRkJPVU03UVVGQlFTeFpRVUYzUkhGQ0xGVkJRVlVzUzBGQlMyNUNMRXRCUVhaRk8wRkJRVUVzV1VGQk9FVnZRaXhYUVVFNVJUczdRVUZGUVM5RExHRkJRVXNzUzBGQlMwUXNaMEpCUVV3c1EwRkJjMEpETEVWQlFYUkNMRU5CUVV3N1FVRkRRU3haUVVGSlFTeExRVUZMTkVNc1VVRkJWQ3hGUVVGdFFqdEJRVU5tTzBGQlEwRkdMRzlDUVVGVFJTeGhRVUZoTEVOQlFXUXNSMEZCYlVJMVF5eExRVUZMTkVNc1VVRkJlRUlzUjBGQmJVTXNRMEZCTTBNN08wRkJSVUVzWjBKQlFVbEVMRlZCUVZVc1EwRkJWaXhKUVVGbFJ5eFpRVUZaTEVOQlFUTkNMRWxCUVdkRExFdEJRVXRzUWl4VFFVRjZReXhGUVVGdlJEdEJRVU5vUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQmFVSXNNa0pCUVZjc1EwRkJXQ3hGUVVGamVFTXNUVUZCWkN4RFFVRnhRaXhEUVVGeVFqdEJRVU5CZDBNc01rSkJRVmNzUTBGQldDeEZRVUZqU2l4SlFVRmtPMEZCUTBnN1FVRkRTaXhUUVZwRUxFMUJXVTg3UVVGRFNEdEJRVU5CUlN4dlFrRkJVU3hEUVVGU08wRkJRMEZFTEc5Q1FVRlRSU3hoUVVGaExFTkJRV1FzUjBGQmJVSXNRMEZCYmtJc1IwRkJkVUlzUTBGQlF6VkRMRXRCUVVzMFF5eFJRVUZPTEV0QlFXMUNMRWxCUVVsQkxGRkJRWFpDTEVOQlFTOUNPenRCUVVWQkxHZENRVUZKUlN4WlFVRlpMRU5CUVVNc1EwRkJha0lzUlVGQmIwSTdRVUZEYUVJN1FVRkRRVVFzTWtKQlFWY3NRMEZCV0N4RlFVRmpka01zWlVGQlpDeERRVUU0UWl4TFFVRkxReXhOUVVGdVF6dEJRVU5CYzBNc01rSkJRVmNzUTBGQldDeEZRVUZqZUVNc1RVRkJaQ3hEUVVGeFFpeERRVUZ5UWp0QlFVTkJkME1zTWtKQlFWY3NRMEZCV0N4RlFVRmpTaXhKUVVGa08wRkJRMGc3UVVGRFJDeG5Ra0ZCU1Vzc1dVRkJXU3hEUVVGb1FpeEZRVUZ0UWp0QlFVTm1PMEZCUTBGRUxESkNRVUZYTEVOQlFWZ3NSVUZCWTNoRExFMUJRV1FzUTBGQmNVSXNRMEZCY2tJN1FVRkRRWGRETERKQ1FVRlhMRU5CUVZnc1JVRkJZMG9zU1VGQlpEdEJRVU5JTzBGQlEwbzdPMEZCUlVSTkxITkNRVUZqUml4WFFVRlhSaXhMUVVGWUxFTkJRV1E3UVVGRFFUdEJRVU5CTEZsQlFVbEhMRmxCUVZsSUxFdEJRVm9zU1VGQmNVSkpMRmxCUVZrMVJDeE5RVUZhTEVWQlFYcENMRVZCUTBrN08wRkJSVW83UVVGRFFTeFpRVUZKTWtRc1dVRkJXVWdzUzBGQmFFSXNSVUZEU1Vrc1dVRkJXWHBETEdWQlFWb3NRMEZCTkVJc1MwRkJTME1zVFVGQmFrTTdPMEZCUlVwdFF5eG5Ra0ZCVVVFc1VVRkJVVXNzV1VGQldYaEZMR1ZCUVRWQ08wRkJRMEYzUlN4dlFrRkJXVEZETEUxQlFWb3NRMEZCYlVKeFF5eFJRVUZSTEVOQlFWSXNSMEZCV1VFc1VVRkJVU3hEUVVGd1FpeEhRVUYzUWtFc1MwRkJNME03UVVGRFFTeGhRVUZMWml4TFFVRk1MRWRCUVdGblFpeExRVUZpTzBGQlEwZ3NTMEV4U0d0Q096dEJRVFJJYmtKcVJDeGhRVUZSTEcxQ1FVRlpPMEZCUTJoQ0xGbEJRVWxNTEZOQlFWTXpRaXhIUVVGSE5rUXNVVUZCU0N4RFFVRlpXU3hoUVVGYUxFTkJRVEJDTEV0QlFVdFdMRkZCUVV3c1EwRkJZeXhEUVVGa0xFVkJRV2xDTDBJc1QwRkJha0lzUlVGQk1VSXNSVUZCYzBRc1MwRkJTeXRDTEZGQlFVd3NRMEZCWXl4RFFVRmtMRVZCUVdsQ0wwSXNUMEZCYWtJc1JVRkJkRVFzUTBGQllqdEJRVU5CTEdGQlFVdE9MR2RDUVVGTUxFTkJRWE5DUXl4TlFVRjBRanRCUVVOQkxHRkJRVXRETEdkQ1FVRk1MRU5CUVhOQ1JDeE5RVUYwUWp0QlFVTkJRU3hsUVVGUGRVTXNVMEZCVUN4SFFVRnRRaXhKUVVGdVFqdEJRVU5CTEdWQlFVOTJReXhOUVVGUU8wRkJRMGc3UVVGc1NXdENMRU5CUVZRc1EwRkJaRHM3UVVGeFNVRTdPenM3T3pzN096czdPenM3T3pzN08wRkJhVUpCTzBGQlEwRXpRaXhIUVVGSGMwWXNVVUZCU0N4SFFVRmpMRmRCUVZVc2MwSkJRWE5DZUVJc1UwRkJhRU1zUlVGQk1rTTdRVUZEY2tRc1VVRkJTVXNzWVVGQlkwd3NjVUpCUVhGQ1RTeExRVUYwUWl4SFFVRXJRazRzVTBGQkwwSXNSMEZCTWtNeFFpeFRRVUUxUkR0QlFVTkJMRkZCUVVrclFpeFhRVUZYY2tNc1RVRkJXQ3hMUVVGelFpeERRVUV4UWl4RlFVRTJRanRCUVVONlFqbENMRmRCUVVkeFJTeFBRVUZJTEVOQlFWY3NTVUZCV0R0QlFVTkJMR1ZCUVU4c1NVRkJVRHRCUVVOSU8wRkJRMFFzVVVGQlNVTXNUMEZCVDBnc1YwRkJWM0pETEUxQlFWZ3NSMEZCYjBJc1EwRkJMMEk3UVVGRFFTeFJRVUZMZDBNc1VVRkJVU3hEUVVGVUxFbEJRV2RDU0N4WFFVRlhSeXhKUVVGWUxFdEJRVzlDTEVsQlFYaERMRVZCUTBsMFJTeEhRVUZISzBNc1MwRkJTQ3hEUVVGVExFbEJRVlE3TzBGQlJVb3NVVUZCU1hkRExGTkJRVk1zU1VGQllqdEJRVU5CTEZGQlFVbHFRaXhSUVVGUkxFTkJRVm9zUlVGQlpUdEJRVU5ZYVVJc2FVSkJRVk53UWl4WFFVRlhMRU5CUVZnc1EwRkJWRHRCUVVOQkxHRkJRVXNzU1VGQlNYUkRMRWxCUVVrc1EwRkJZaXhGUVVGblFrRXNTMEZCUzNsRExFbEJRWEpDTEVWQlFUSkNla01zUjBGQk0wSXNSVUZCWjBNN1FVRkROVUlzWjBKQlFVbHpReXhYUVVGWGRFTXNRMEZCV0N4RFFVRktMRVZCUVcxQ08wRkJRMll3UkN4NVFrRkJVM1pHTEVkQlFVYzJSQ3hSUVVGSUxFTkJRVmxaTEdGQlFWb3NRMEZCTUVKakxFMUJRVEZDTEVWQlFXdERjRUlzVjBGQlYzUkRMRU5CUVZnc1EwRkJiRU1zUTBGQlZEdEJRVU5JTzBGQlEwbzdRVUZEU2pzN1FVRkZSQ3hYUVVGUE1FUXNUVUZCVUR0QlFVTklMRU5CY2tKRU96dEJRWFZDUVhaR0xFZEJRVWMyUkN4UlFVRklMRU5CUVZsWkxHRkJRVm9zUjBGQk5FSXNWVUZCVlVVc1UwRkJWaXhGUVVGeFFrTXNVMEZCY2tJc1JVRkJaME03UVVGRGVFUXNVVUZCU1ZVc1YwRkJWeXhKUVVGSmRFWXNSMEZCUnpaRUxGRkJRVkFzUlVGQlpqdEJRVU5CZVVJc1lVRkJVMW9zYTBKQlFWUXNRMEZCTkVKRExGTkJRVFZDTEVWQlFYVkRReXhUUVVGMlF6dEJRVU5CTEZkQlFVOVZMRkZCUVZBN1FVRkRTQ3hEUVVwRU96dEJRVTFCT3pzN096czdPenM3TzBGQlZVRjBSaXhIUVVGSGQwWXNUVUZCU0N4SFFVRlplRVlzUjBGQlIwVXNTMEZCU0N4RFFVRlRPMEZCUTJwQ1F5eFZRVUZOTEZkQlJGYzdRVUZGYWtKRExHRkJRVk5LTEVkQlFVZERMR05CUmtzN08wRkJTV3BDU3l4VlFVRk5MR05CUVZWeFFpeE5RVUZXTEVWQlFXdENORUlzUzBGQmJFSXNSVUZCZVVJN1FVRkRNMElzWVVGQlMydERMRTFCUVV3c1IwRkJZeXhEUVVGa08wRkJRMEVzWVVGQlMwTXNUVUZCVEN4SFFVRmpMRU5CUVdRN1FVRkRRU3hoUVVGTFF5eFBRVUZNTEVkQlFXVXNRMEZCWmp0QlFVTkJMR0ZCUVV0RExHTkJRVXdzUjBGQmMwSXNTMEZCZEVJN1FVRkRRU3hoUVVGTFF5eFpRVUZNTEVkQlFXOUNMRWxCUVhCQ08wRkJRMDUwUXl4clFrRkJWWFJETEZOQlFWWXNTVUZCZFVJc1MwRkJTelpGTEdOQlFVd3NRMEZCYjBKdVJTeE5RVUZ3UWl4RlFVRTBRalJDTEV0QlFUVkNMRU5CUVhaQ08wRkJRMGNzUzBGWVowSTdPMEZCWVdwQ096czdPenRCUVV0QmRVTXNiMEpCUVdVc2QwSkJRVlZ1UlN4TlFVRldMRVZCUVd0Q05FSXNTMEZCYkVJc1JVRkJlVUk3UVVGRGNFTXNXVUZCU1hkRExGZEJRVmR3UlN4UFFVRlBUQ3hUUVVGUUxFZEJRVzFDYVVNc1MwRkJiRU03TzBGQlJVRXNXVUZCU1N4TFFVRkxjRU1zWjBKQlFVd3NRMEZCYzBJMFJTeFJRVUYwUWl4RFFVRktMRVZCUVhGRE8wRkJRMnBETEdsQ1FVRkxUaXhOUVVGTUxFZEJRV05zUXl4TFFVRmtPMEZCUTBFc2FVSkJRVXR6UXl4WlFVRk1MRWRCUVc5Q2JFVXNUVUZCY0VJN1FVRkRRU3huUWtGQlNVRXNhMEpCUVd0Q00wSXNSMEZCUjJkSExHRkJRWHBDTEVWQlFYVkRPMEZCUTI1RExIRkNRVUZMU2l4alFVRk1MRWRCUVhOQ0xFbEJRWFJDTzBGQlEwRXNjVUpCUVV0SUxFMUJRVXdzU1VGQlpTeERRVUZtTzBGQlEwZzdRVUZEUkN4cFFrRkJTME1zVFVGQlRDeEhRVUZqTEVOQlFXUTdRVUZEUVN4dFFrRkJUeXhKUVVGUU8wRkJRMGc3UVVGRFJDeGxRVUZQTEV0QlFWQTdRVUZEU0N4TFFXaERaMEk3TzBGQmEwTnFRbnBFTEZkQlFVMHNhVUpCUVZrN1FVRkRaQ3haUVVGSlRpeFRRVUZUTEVsQlFVa3pRaXhIUVVGSGQwWXNUVUZCVUN4RlFVRmlPMEZCUTBFc1lVRkJTemxFTEdkQ1FVRk1MRU5CUVhOQ1F5eE5RVUYwUWp0QlFVTkJRU3hsUVVGUGJVVXNZMEZCVUN4RFFVRnpRaXhMUVVGTFJDeFpRVUZNTEVOQlFXdENOVVFzUzBGQmJFSXNSVUZCZEVJc1JVRkJhVVFzUzBGQlMzZEVMRTFCUVhSRU8wRkJRMEVzWlVGQlR6bEVMRTFCUVZBN1FVRkRTQ3hMUVhaRFowSTdPMEZCZVVOcVFtbENMSEZDUVVGblFpeDVRa0ZCVlVNc1RVRkJWaXhGUVVGclFqdEJRVU01UWl4aFFVRkxOa01zVFVGQlRDeEhRVUZqTEVOQlFXUTdRVUZEUVN4aFFVRkxReXhQUVVGTUxFZEJRV1VzUzBGQlMwVXNXVUZCVEN4RFFVRnJRblpGTEZOQlFXeENMRWRCUVRoQ0xFdEJRVXRCTEZOQlFXeEVPMEZCUTBGMFFpeFhRVUZIUXl4alFVRklMRU5CUVd0Q2FVSXNVMEZCYkVJc1EwRkJORUl3UWl4bFFVRTFRaXhEUVVFMFEzaENMRWxCUVRWRExFTkJRV2xFTEVsQlFXcEVMRVZCUVhWRWVVSXNUVUZCZGtRN1FVRkRRU3hoUVVGTFowUXNXVUZCVEN4RFFVRnJRbXBFTEdWQlFXeENMRU5CUVd0RFF5eE5RVUZzUXp0QlFVTklMRXRCT1VOblFqczdRVUZuUkdwQ2EwTXNWVUZCU3l4blFrRkJXVHRCUVVOaUxHRkJRVXRqTEZsQlFVd3NRMEZCYTBKa0xFbEJRV3hDTzBGQlEwRXZSU3hYUVVGSE9FTXNUVUZCU0N4RFFVRlZOVUlzVTBGQlZpeERRVUZ2UWpaRUxFbEJRWEJDTEVOQlFYbENNMFFzU1VGQmVrSXNRMEZCT0VJc1NVRkJPVUk3UVVGRFNDeExRVzVFWjBJN08wRkJjVVJxUW5WQ0xGbEJRVThzWjBKQlFWVk1MRVZCUVZZc1JVRkJZenRCUVVOcVFrRXNZVUZCU3l4TFFVRkxSQ3huUWtGQlRDeERRVUZ6UWtNc1JVRkJkRUlzUTBGQlREdEJRVU5CTEZsQlFVa3lSQ3hwUWtGQmFVSXNTMEZCUzBvc1dVRkJNVUk3UVVGRFFTeFpRVUZKU3l4alFVRmpMRXRCUVVzMVJTeFRRVUYyUWp0QlFVTkJMRmxCUVVrMlJTeFhRVUZYTEV0QlFVdFdMRTFCUVhCQ08wRkJRMEVzV1VGQlNWY3NXVUZCV1N4TFFVRkxWQ3hQUVVGeVFqczdRVUZGUVN4WlFVRkpja1FzVFVGQlRUaEVMRk5CUVZZc1JVRkJjVUk3UVVGRGFrSXNiVUpCUVU4NVJDeExRVUZMT0VRc1UwRkJUQ3hKUVVGclFpeExRVUZMVml4TlFVRk1MRWRCUVdOVExGRkJRWFpETEVWQlFXbEVPMEZCUXpkRFJpd3JRa0ZCWlhSRUxFMUJRV1lzUTBGQmMwSXNRMEZCZEVJN1FVRkRRU3h4UWtGQlN5dERMRTFCUVV3N1FVRkRRVThzSzBKQlFXVnNRaXhKUVVGbU8wRkJRMEZyUWl3clFrRkJaWEpFTEdWQlFXWXNRMEZCSzBJc1MwRkJTME1zVFVGQmNFTTdRVUZEUVhWRUxEWkNRVUZoU0N4bFFVRmxNMFVzVTBGQlppeEhRVUV5UWpSRkxGZEJRWGhETzBGQlEwRXNjVUpCUVV0UUxFOUJRVXdzUjBGQlpWTXNXVUZCV1N4RFFVRmFMRWRCUVdkQ0xFTkJRV2hDTEVkQlFXOUNRU3hUUVVGdVF6dEJRVU5JT3p0QlFVVkVPMEZCUTBFc1owSkJRVWs1UkN4TlFVRk5MRWRCUVU0c1NVRkJZU3hMUVVGTGIwUXNUVUZCVEN4SFFVRmpVeXhSUVVFdlFpeEZRVUY1UXp0QlFVTnlRenRCUVVOQlJpd3JRa0ZCWlhSRUxFMUJRV1lzUTBGQmMwSXNRMEZCZEVJN1FVRkRRU3h4UWtGQlN5dERMRTFCUVV3N1FVRkRTRHM3UVVGRlJEdEJRVU5CTEdkQ1FVRkpMRU5CUVVNc1MwRkJTMFVzWTBGQlZpeEZRVUV3UWp0QlFVTjBRaXh2UWtGQlNTeExRVUZMUml4TlFVRk1MRXRCUVdkQ1V5eFJRVUZ3UWl4RlFVRTRRanRCUVVNeFFrWXNiVU5CUVdWc1FpeEpRVUZtTzBGQlEwZ3NhVUpCUmtRc1RVRkZUenRCUVVOSU8wRkJRMEZyUWl4dFEwRkJaWFJFTEUxQlFXWXNRMEZCYzBKTUxFMUJRVTA0UkN4WlFVRlpTQ3hsUVVGbE0wVXNVMEZCWml4SFFVRXlRalJGTEZkQlFUZERMRU5CUVhSQ08wRkJRMGc3UVVGRFNqdEJRVU5LTEZOQk1VSkVMRTFCTUVKUE8wRkJRMGhFTERKQ1FVRmxkRVFzVFVGQlppeERRVUYxUWt3c1MwRkJTelpFTEZGQlFVNHNSMEZCYTBJc1IwRkJlRU03UVVGRFNEdEJRVU5LTEV0QmVrWm5RanM3UVVFeVJtcENNVVVzV1VGQlR5eHJRa0ZCV1R0QlFVTm1MR1ZCUVU4c1MwRkJTMmxGTEUxQlFVd3NTMEZCWjBJc1MwRkJTMFFzVFVGQk5VSTdRVUZEU0N4TFFUZEdaMEk3TzBGQkswWnFRbnBFTEdGQlFWRXNiVUpCUVZrN1FVRkRhRUlzV1VGQlNVd3NVMEZCVXl4SlFVRkpNMElzUjBGQlIzZEdMRTFCUVZBc1EwRkJZeXhMUVVGTFN5eFpRVUZNTEVOQlFXdENOMFFzVDBGQmJFSXNSVUZCWkN4RlFVRXlReXhMUVVGTGVVUXNUVUZCYUVRc1EwRkJZanRCUVVOQkxHRkJRVXN2UkN4blFrRkJUQ3hEUVVGelFrTXNUVUZCZEVJN1FVRkRRU3hoUVVGTFF5eG5Ra0ZCVEN4RFFVRnpRa1FzVFVGQmRFSTdRVUZEUVN4bFFVRlBRU3hOUVVGUU8wRkJRMGdzUzBGd1IyZENPenRCUVhOSGFrSTdPenM3UVVGSlFUQkZMRzlDUVVGbExIZENRVUZWTVVVc1RVRkJWaXhGUVVGclFqdEJRVU0zUWl4WlFVRkpMRXRCUVV0clJTeFpRVUZNTEV0QlFYTkNiRVVzVFVGQk1VSXNSVUZCYTBNN1FVRkRPVUlzYVVKQlFVdHJSU3haUVVGTUxFZEJRVzlDYkVVc1RVRkJjRUk3UVVGRFNEdEJRVU5LTEV0Qk9VZG5RanM3UVVGblNHcENPenM3TzBGQlNVRXlSU3h2UWtGQlpTd3dRa0ZCV1R0QlFVTjJRaXhsUVVGUExFdEJRVXRVTEZsQlFWbzdRVUZEU0R0QlFYUklaMElzUTBGQlZDeERRVUZhT3p0QlFYbElRVHM3T3pzN096czdPenM3UVVGWFFUZEdMRWRCUVVkelJDeE5RVUZJTEVkQlFWa3NWVUZCVlROQ0xFMUJRVllzUlVGQmEwSTBRaXhMUVVGc1FpeEZRVUY1UWp0QlFVTnFReXhYUVVGUExFbEJRVWwyUkN4SFFVRkhkMFlzVFVGQlVDeERRVUZqTjBRc1RVRkJaQ3hGUVVGelFqUkNMRXRCUVhSQ0xFTkJRVkE3UVVGRFNDeERRVVpFT3p0QlFVdEJPenM3T3pzN096czdPMEZCVlVGMlJDeEhRVUZIZFVjc1lVRkJTQ3hIUVVGdFFuWkhMRWRCUVVkRkxFdEJRVWdzUTBGQlV6dEJRVU40UWtNc1ZVRkJUU3hyUWtGRWEwSTdRVUZGZUVKRExHRkJRVk5LTEVkQlFVZERMR05CUmxrN08wRkJTWGhDU3l4VlFVRkxMR05CUVZWeFFpeE5RVUZXTEVWQlFXdENPMEZCUTI1Q0xHRkJRVXRyUlN4WlFVRk1MRWRCUVc5Q0xFbEJRWEJDTzBGQlEwNXNSU3hyUWtGQlZTeExRVUZMYlVVc1kwRkJUQ3hEUVVGdlFtNUZMRTFCUVhCQ0xFTkJRVlk3UVVGRFJ5eExRVkIxUWpzN1FVRlRlRUk3T3pzN1FVRkpRVzFGTEc5Q1FVRmxMSGRDUVVGVmJrVXNUVUZCVml4RlFVRnJRanRCUVVNM1FpeFpRVUZKTEVOQlFVTkJMRTFCUVV3c1JVRkJZVHRCUVVOVU0wSXNaVUZCUjNGRkxFOUJRVWdzUTBGQlZ5eEpRVUZZTzBGQlEwRXNiVUpCUVU4c1MwRkJVRHRCUVVOSU96dEJRVVZFTEdGQlFVdDNRaXhaUVVGTUxFZEJRVzlDYkVVc1RVRkJjRUk3UVVGRFFTeGxRVUZQTEVsQlFWQTdRVUZEU0N4TFFYSkNkVUk3TzBGQmRVSjRRazBzVjBGQlRTeHBRa0ZCV1R0QlFVTmtMRmxCUVVsT0xGTkJRVk1zU1VGQlNUTkNMRWRCUVVkMVJ5eGhRVUZRTEVWQlFXSTdRVUZEUVN4aFFVRkxOMFVzWjBKQlFVd3NRMEZCYzBKRExFMUJRWFJDTzBGQlEwRkJMR1ZCUVU5dFJTeGpRVUZRTEVOQlFYTkNMRXRCUVV0RUxGbEJRVXdzUTBGQmEwSTFSQ3hMUVVGc1FpeEZRVUYwUWp0QlFVTkJMR1ZCUVU5T0xFMUJRVkE3UVVGRFNDeExRVFZDZFVJN08wRkJPRUo0UW1sQ0xIRkNRVUZuUWl4NVFrRkJWVU1zVFVGQlZpeEZRVUZyUWp0QlFVTTVRamRETEZkQlFVZERMR05CUVVnc1EwRkJhMEpwUWl4VFFVRnNRaXhEUVVFMFFqQkNMR1ZCUVRWQ0xFTkJRVFJEZUVJc1NVRkJOVU1zUTBGQmFVUXNTVUZCYWtRc1JVRkJkVVI1UWl4TlFVRjJSRHRCUVVOQkxHRkJRVXRuUkN4WlFVRk1MRU5CUVd0Q2FrUXNaVUZCYkVJc1EwRkJhME5ETEUxQlFXeERPMEZCUTBnc1MwRnFRM1ZDT3p0QlFXMURlRUpLTEZWQlFVc3NZMEZCVlVnc1JVRkJWaXhGUVVGak8wRkJRMllzV1VGQlNUSkVMR2xDUVVGcFFpeExRVUZMU2l4WlFVRXhRanRCUVVOQlNTeDFRa0ZCWlhoRUxFbEJRV1lzUTBGQmIwSklMRVZCUVhCQ08wRkJRMEVzV1VGQlNUSkVMR1ZCUVdWNFJTeE5RVUZtTEVWQlFVb3NSVUZCTmtJN1FVRkRla0k3UVVGRFFYZEZMREpDUVVGbGNrUXNaVUZCWml4RFFVRXJRaXhMUVVGTFF5eE5RVUZ3UXp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQmIwUXNNa0pCUVdWNFJDeEpRVUZtTEVOQlFXOUNkMFFzWlVGQlpUVkZMRlZCUVdZc1MwRkJPRUkwUlN4bFFVRmxNMFVzVTBGQmFrVTdRVUZEU0R0QlFVTktMRXRCT1VOMVFqczdRVUZuUkhoQ1J5eFpRVUZQTEd0Q1FVRlpPMEZCUTJZc1pVRkJUeXhMUVVGUU8wRkJRMGdzUzBGc1JIVkNPenRCUVc5RWVFSlBMR0ZCUVZFc2JVSkJRVms3UVVGRGFFSXNXVUZCU1V3c1UwRkJVeXhKUVVGSk0wSXNSMEZCUjNWSExHRkJRVkFzUTBGQmNVSXNTMEZCUzFZc1dVRkJUQ3hEUVVGclFqZEVMRTlCUVd4Q0xFVkJRWEpDTEVOQlFXSTdRVUZEUVN4aFFVRkxUaXhuUWtGQlRDeERRVUZ6UWtNc1RVRkJkRUk3UVVGRFFTeGhRVUZMUXl4blFrRkJUQ3hEUVVGelFrUXNUVUZCZEVJN1FVRkRRU3hsUVVGUFFTeE5RVUZRTzBGQlEwZ3NTMEY2UkhWQ096dEJRVEpFZUVJN096czdRVUZKUVRCRkxHOUNRVUZsTEhkQ1FVRlZNVVVzVFVGQlZpeEZRVUZyUWp0QlFVTTNRaXhaUVVGSkxFdEJRVXRyUlN4WlFVRk1MRXRCUVhOQ2JFVXNUVUZCTVVJc1JVRkJhME03UVVGRE9VSXNhVUpCUVV0clJTeFpRVUZNTEVkQlFXOUNiRVVzVFVGQmNFSTdRVUZEU0R0QlFVTktMRXRCYmtWMVFqczdRVUZ4UlhoQ096czdPMEZCU1VFeVJTeHZRa0ZCWlN3d1FrRkJXVHRCUVVOMlFpeGxRVUZQTEV0QlFVdFVMRmxCUVZvN1FVRkRTRHRCUVRORmRVSXNRMEZCVkN4RFFVRnVRanM3UVVFNFJVRTdPenM3T3pzN096czdRVUZWUVRkR0xFZEJRVWN5UkN4aFFVRklMRWRCUVcxQ0xGVkJRVlZvUXl4TlFVRldMRVZCUVd0Q08wRkJRMnBETEZkQlFVOHNTVUZCU1ROQ0xFZEJRVWQxUnl4aFFVRlFMRU5CUVhGQ05VVXNUVUZCY2tJc1EwRkJVRHRCUVVOSUxFTkJSa1E3TzBGQlMwRTdPenM3TzBGQlMwRXpRaXhIUVVGSGQwY3NTMEZCU0N4SFFVRlhlRWNzUjBGQlIwVXNTMEZCU0N4RFFVRlRPMEZCUTJoQ1F5eFZRVUZOTEZWQlJGVTdRVUZGYUVKRExHRkJRVk5LTEVkQlFVZERMR05CUmtrN08wRkJTV2hDU3l4VlFVRkxMR05CUVZWM1JDeFRRVUZXTEVWQlFYRkNPMEZCUTNSQ0xHRkJRVXN5UXl4SlFVRk1MRWRCUVZrc1NVRkJXanRCUVVOQkxHRkJRVXRETEVsQlFVd3NSMEZCV1N4SlFVRmFPenRCUVVWT0xGbEJRVWwyUXl4aFFVRmpUQ3h4UWtGQmNVSk5MRXRCUVhSQ0xFZEJRU3RDVGl4VFFVRXZRaXhIUVVFeVF6RkNMRk5CUVRWRU8wRkJRMDBzV1VGQlNTdENMRmRCUVZkeVF5eE5RVUZZTEV0QlFYTkNMRU5CUVRGQ0xFVkJRVFpDTzBGQlEzcENPVUlzWlVGQlIzRkZMRTlCUVVnc1EwRkJWeXhKUVVGWU8wRkJRMEU3UVVGRFNEdEJRVU5RTEZsQlFVbERMRTlCUVU5SUxGZEJRVmR5UXl4TlFVRllMRWRCUVc5Q0xFTkJRUzlDTzBGQlEwRXNXVUZCUzNkRExGRkJRVkVzUTBGQlZDeEpRVUZuUWtnc1YwRkJWMGNzU1VGQldDeExRVUZ2UWl4SlFVRjRReXhGUVVORGRFVXNSMEZCUnl0RExFdEJRVWdzUTBGQlV5eEpRVUZVT3p0QlFVVkxMRmxCUVVsMVFpeFJRVUZSTEVOQlFWb3NSVUZCWlR0QlFVTllMR2RDUVVGSlF5eFBRVUZQU2l4WFFVRlhMRU5CUVZnc1EwRkJXRHRCUVVGQkxHZENRVUV3UWtzc1QwRkJNVUk3UVVGRFFTeHBRa0ZCU3l4SlFVRkpNME1zU1VGQlNTeERRVUZpTEVWQlFXZENRU3hKUVVGSmVVTXNTVUZCY0VJc1JVRkJNRUo2UXl4SFFVRXhRaXhGUVVFclFqdEJRVU16UWl4dlFrRkJTWE5ETEZkQlFWZDBReXhEUVVGWUxFTkJRVW9zUlVGQmJVSTdRVUZEWmpKRExEaENRVUZWUkN4SlFVRldPMEZCUTBGQkxESkNRVUZQZGtVc1IwRkJSM2RITEV0QlFVZ3NRMEZCVXk5Q0xHRkJRVlFzUTBGQmRVSkVMRTlCUVhaQ0xFVkJRV2REVEN4WFFVRlhkRU1zUTBGQldDeERRVUZvUXl4RFFVRlFPMEZCUTBnN1FVRkRTanRCUVVORUxHbENRVUZMTmtNc2EwSkJRVXdzUTBGQmQwSklMRWxCUVhoQ0xFVkJRVGhDU2l4WFFVRlhSeXhKUVVGWUxFTkJRVGxDTzBGQlEwZzdRVUZEU2l4TFFUTkNaVHM3UVVFMlFtaENPenM3T3p0QlFVdEJTU3gzUWtGQmJVSXNORUpCUVZWR0xFOUJRVllzUlVGQmJVSnRReXhQUVVGdVFpeEZRVUUwUWp0QlFVTXpReXhaUVVGSkxFTkJRVU51UXl4UFFVRkVMRWxCUVZrc1EwRkJRMjFETEU5QlFXcENMRVZCUVRCQ08wRkJRM1JDTTBjc1pVRkJSM0ZGTEU5QlFVZ3NRMEZCVnl4SlFVRllPMEZCUTBFc2JVSkJRVThzUzBGQlVEdEJRVU5JT3p0QlFVVkVMRmxCUVVsMVF5eE5RVUZOTEV0QlFWWTdPMEZCUlVFc1dVRkJTVU1zUzBGQlMzSkRMRkZCUVZGc1JDeFRRVUZxUWp0QlFVTkJMRmxCUVVsM1JpeExRVUZMU0N4UlFVRlJja1lzVTBGQmFrSTdPMEZCUlVFc1dVRkJTU3hMUVVGTFNDeG5Ra0ZCVEN4RFFVRnpRbkZETEV0QlFVdDFSQ3hIUVVGTUxFTkJRVk5HTEVWQlFWUXNSVUZCWVVNc1JVRkJZaXhEUVVGMFFpeERRVUZLTEVWQlFUWkRPMEZCUTNwRExHbENRVUZMVEN4SlFVRk1MRWRCUVZscVF5eFBRVUZhTzBGQlEwRXNhVUpCUVV0clF5eEpRVUZNTEVkQlFWbERMRTlCUVZvN08wRkJSVUVzWjBKQlFVbEZMRXRCUVV0RExFVkJRVlFzUlVGQllUdEJRVU5VTEhGQ1FVRkxTaXhKUVVGTUxFZEJRVmt4Unl4SFFVRkhOa1FzVVVGQlNDeERRVUZaV1N4aFFVRmFMRU5CUVRCQ2EwTXNUMEZCTVVJc1JVRkJiVU16Unl4SFFVRkhaMGdzVTBGQlNDeERRVUZoU0N4TFFVRkxReXhGUVVGc1FpeERRVUZ1UXl4RFFVRmFPMEZCUTBnc1lVRkdSQ3hOUVVWUExFbEJRVWxFTEV0QlFVdERMRVZCUVZRc1JVRkJZVHRCUVVOb1FpeHhRa0ZCUzB3c1NVRkJUQ3hIUVVGWmVrY3NSMEZCUnpaRUxGRkJRVWdzUTBGQldWa3NZVUZCV2l4RFFVRXdRa1FzVDBGQk1VSXNSVUZCYlVONFJTeEhRVUZIWjBnc1UwRkJTQ3hEUVVGaFJpeExRVUZMUkN4RlFVRnNRaXhEUVVGdVF5eERRVUZhTzBGQlEwZzdPMEZCUlVSRUxHdENRVUZOTEVsQlFVNDdRVUZEU0R0QlFVTkVMR1ZCUVU5QkxFZEJRVkE3UVVGRFNDeExRVEZFWlRzN1FVRTBSR2hDTTBVc1YwRkJUU3hwUWtGQldUdEJRVU5rTEZsQlFVbE9MRk5CUVZNc1NVRkJTVE5DTEVkQlFVZDNSeXhMUVVGUUxFVkJRV0k3UVVGRFFTeGhRVUZMT1VVc1owSkJRVXdzUTBGQmMwSkRMRTFCUVhSQ08wRkJRMEZCTEdWQlFVOHJReXhyUWtGQlVDeERRVUV3UWl4TFFVRkxLMElzU1VGQlRDeERRVUZWZUVVc1MwRkJWaXhGUVVFeFFpeEZRVUUyUXl4TFFVRkxlVVVzU1VGQlRDeERRVUZWZWtVc1MwRkJWaXhGUVVFM1F6dEJRVU5CTEdWQlFVOU9MRTFCUVZBN1FVRkRTQ3hMUVdwRlpUczdRVUZ0UldoQ2FVSXNjVUpCUVdkQ0xIbENRVUZWUXl4TlFVRldMRVZCUVd0Q08wRkJRemxDTjBNc1YwRkJSME1zWTBGQlNDeERRVUZyUW1sQ0xGTkJRV3hDTEVOQlFUUkNNRUlzWlVGQk5VSXNRMEZCTkVONFFpeEpRVUUxUXl4RFFVRnBSQ3hKUVVGcVJDeEZRVUYxUkhsQ0xFMUJRWFpFTzBGQlEwRXNZVUZCU3pSRUxFbEJRVXdzUTBGQlZUZEVMR1ZCUVZZc1EwRkJNRUpETEUxQlFURkNPMEZCUTBFc1lVRkJTelpFTEVsQlFVd3NRMEZCVlRsRUxHVkJRVllzUTBGQk1FSkRMRTFCUVRGQ08wRkJRMGdzUzBGMlJXVTdPMEZCZVVWb1FtdERMRlZCUVVzc1owSkJRVms3UVVGRFlpeGhRVUZMTUVJc1NVRkJUQ3hEUVVGVk1VSXNTVUZCVmp0QlFVTkJMR0ZCUVVzeVFpeEpRVUZNTEVOQlFWVXpRaXhKUVVGV08wRkJRMEV2UlN4WFFVRkhPRU1zVFVGQlNDeERRVUZWTlVJc1UwRkJWaXhEUVVGdlFqWkVMRWxCUVhCQ0xFTkJRWGxDTTBRc1NVRkJla0lzUTBGQk9FSXNTVUZCT1VJN1FVRkRTQ3hMUVRkRlpUczdRVUVyUldoQ2RVSXNXVUZCVHl4blFrRkJWVXdzUlVGQlZpeEZRVUZqTzBGQlEycENRU3hoUVVGTExFdEJRVXRFTEdkQ1FVRk1MRU5CUVhOQ1F5eEZRVUYwUWl4RFFVRk1PMEZCUTBFc1dVRkJTU3hMUVVGTGJVVXNTVUZCVkN4RlFVTkpMRXRCUVV0QkxFbEJRVXdzUTBGQlZUbEVMRTFCUVZZc1EwRkJhVUpNTEVWQlFXcENPMEZCUTBvc1dVRkJTU3hMUVVGTGIwVXNTVUZCVkN4RlFVTkpMRXRCUVV0QkxFbEJRVXdzUTBGQlZTOUVMRTFCUVZZc1EwRkJhVUpNTEVWQlFXcENPMEZCUTFBc1MwRnlSbVU3TzBGQmRVWm9RazRzWVVGQlVTeHRRa0ZCV1R0QlFVTm9RaXhaUVVGSlRDeFRRVUZUTTBJc1IwRkJSM2RITEV0QlFVZ3NRMEZCVXk5Q0xHRkJRVlFzUTBGQmRVSXNTMEZCUzJkRExFbEJRVXdzUTBGQlZYcEZMRTlCUVZZc1JVRkJka0lzUlVGQk5FTXNTMEZCU3pCRkxFbEJRVXdzUTBGQlZURkZMRTlCUVZZc1JVRkJOVU1zUTBGQllqdEJRVU5CTEdGQlFVdE9MR2RDUVVGTUxFTkJRWE5DUXl4TlFVRjBRanRCUVVOQkxHRkJRVXRETEdkQ1FVRk1MRU5CUVhOQ1JDeE5RVUYwUWp0QlFVTkJMR1ZCUVU5QkxFMUJRVkE3UVVGRFNEdEJRVFZHWlN4RFFVRlVMRU5CUVZnN08wRkJLMFpCT3pzN096czdPenM3T3pzN1FVRlpRVE5DTEVkQlFVZHBTQ3hMUVVGSUxFZEJRVmNzVjBGQlZTeHpRa0ZCYzBKdVJDeFRRVUZvUXl4RlFVRXlRenRCUVVOc1JDeFJRVUZKU3l4aFFVRmpUQ3h4UWtGQmNVSk5MRXRCUVhSQ0xFZEJRU3RDVGl4VFFVRXZRaXhIUVVFeVF6RkNMRk5CUVRWRU8wRkJRMEVzVVVGQlNTdENMRmRCUVZkeVF5eE5RVUZZTEV0QlFYTkNMRU5CUVRGQ0xFVkJRVFpDTzBGQlEzcENPVUlzVjBGQlIzRkZMRTlCUVVnc1EwRkJWeXhKUVVGWU8wRkJRMEVzWlVGQlR5eEpRVUZRTzBGQlEwZzdRVUZEUkN4UlFVRkxSaXhYUVVGWGNrTXNUVUZCV0N4SFFVRnZRaXhEUVVGeVFpeEpRVUUwUW5GRExGZEJRVmRCTEZkQlFWZHlReXhOUVVGWUxFZEJRVzlDTEVOQlFTOUNMRXRCUVhGRExFbEJRWEpGTEVWQlEwazVRaXhIUVVGSEswTXNTMEZCU0N4RFFVRlRMRWxCUVZRN08wRkJSVW9zVVVGQlNYZENMRTlCUVU5S0xGZEJRVmNzUTBGQldDeERRVUZZTzBGQlEwRXNVMEZCU3l4SlFVRkpkRU1zU1VGQlNTeERRVUZpTEVWQlFXZENRU3hKUVVGSmMwTXNWMEZCVjNKRExFMUJRUzlDTEVWQlFYVkRSQ3hIUVVGMlF5eEZRVUUwUXp0QlFVTjRReXhaUVVGSmMwTXNWMEZCVjNSRExFTkJRVmdzUzBGQmFVSXNTVUZCY2tJc1JVRkRTVEJETEU5QlFVOTJSU3hIUVVGSGQwY3NTMEZCU0N4RFFVRlRMMElzWVVGQlZDeERRVUYxUWtZc1NVRkJka0lzUlVGQk5rSktMRmRCUVZkMFF5eERRVUZZTEVOQlFUZENMRU5CUVZBN1FVRkRVRHRCUVVORUxGZEJRVTh3UXl4SlFVRlFPMEZCUTBnc1EwRm1SRHM3UVVGcFFrRjJSU3hIUVVGSGQwY3NTMEZCU0N4RFFVRlRMMElzWVVGQlZDeEhRVUY1UWl4VlFVRlZSQ3hQUVVGV0xFVkJRVzFDYlVNc1QwRkJia0lzUlVGQk5FSTdRVUZEYWtRc1VVRkJTVThzVTBGQlV5eEpRVUZKYkVnc1IwRkJSM2RITEV0QlFWQXNSVUZCWWp0QlFVTkJWU3hYUVVGUGVFTXNhMEpCUVZBc1EwRkJNRUpHTEU5QlFURkNMRVZCUVcxRGJVTXNUMEZCYmtNN1FVRkRRU3hYUVVGUFR5eE5RVUZRTzBGQlEwZ3NRMEZLUkRzN1FVRlBRVHM3T3pzN096czdPenRCUVZWQmJFZ3NSMEZCUjIxSUxGRkJRVWdzUjBGQlkyNUlMRWRCUVVkRkxFdEJRVWdzUTBGQlV6dEJRVU51UWtNc1ZVRkJUU3hoUVVSaE8wRkJSVzVDUXl4aFFVRlRTaXhIUVVGSFF5eGpRVVpQT3p0QlFVbHVRa3NzVlVGQlN5eGpRVUZWZVVZc1VVRkJWaXhGUVVGdlFuRkNMRkZCUVhCQ0xFVkJRVGhDTzBGQlF5OUNMR0ZCUVV0RExGZEJRVXdzUjBGQmJVSXNRMEZCYmtJN1FVRkRRU3hoUVVGTFF5eFRRVUZNTEVkQlFXbENMRU5CUVdwQ08wRkJRMEVzWVVGQlMwTXNUVUZCVEN4SFFVRmpMRU5CUVdRN1FVRkRRVWdzY1VKQlFXRnVSeXhUUVVGaUxFbEJRVEJDTEV0QlFVdEZMR2RDUVVGTUxFTkJRWE5DTkVVc1VVRkJkRUlzUlVGQlowTnhRaXhSUVVGb1F5eERRVUV4UWp0QlFVTklMRXRCVkd0Q096dEJRVmR1UWpzN096czdPMEZCVFVGcVJ5eHpRa0ZCYVVJc01FSkJRVlUwUlN4UlFVRldMRVZCUVc5Q2NVSXNVVUZCY0VJc1JVRkJPRUk3UVVGRE0wTXNXVUZCU1hCSUxFZEJRVWRETEdOQlFVZ3NRMEZCYTBKcFFpeFRRVUZzUWl4RFFVRTBRa01zWjBKQlFUVkNMRU5CUVRaRFF5eEpRVUUzUXl4RFFVRnJSQ3hKUVVGc1JDeEZRVUYzUkRKRkxGRkJRWGhFTEVOQlFVb3NSVUZCZFVVN1FVRkRia1VzYVVKQlFVdDFRaXhUUVVGTUxFZEJRV2xDUml4UlFVRnFRanRCUVVOQkxHMUNRVUZQTEVsQlFWQTdRVUZEU0R0QlFVTkVMR1ZCUVU4c1MwRkJVRHRCUVVOSUxFdEJka0pyUWpzN1FVRjVRbTVDYmtZc1YwRkJUU3hwUWtGQldUdEJRVU5rTEZsQlFVbE9MRk5CUVZNc1NVRkJTVE5DTEVkQlFVZHRTQ3hSUVVGUUxFVkJRV0k3UVVGRFFTeGhRVUZMZWtZc1owSkJRVXdzUTBGQmMwSkRMRTFCUVhSQ08wRkJRMEZCTEdWQlFVOVNMR2RDUVVGUUxFTkJRWGRDTEV0QlFVdEhMRk5CUVRkQ0xFVkJRWGRETEV0QlFVdG5SeXhUUVVFM1F6dEJRVU5CTEdWQlFVOHpSaXhOUVVGUU8wRkJRMGdzUzBFNVFtdENPenRCUVdkRGJrSnBRaXh4UWtGQlowSXNlVUpCUVZWRExFMUJRVllzUlVGQmEwSTdRVUZET1VJM1F5eFhRVUZIUXl4alFVRklMRU5CUVd0Q2FVSXNVMEZCYkVJc1EwRkJORUl3UWl4bFFVRTFRaXhEUVVFMFEzaENMRWxCUVRWRExFTkJRV2xFTEVsQlFXcEVMRVZCUVhWRWVVSXNUVUZCZGtRN08wRkJSVUVzV1VGQlNUSkZMR0ZCUVdFelJTeFBRVUZQTkVVc1MwRkJVQ3hIUVVGbExFZEJRV2hET3p0QlFVVkJMRmxCUVVsQkxGRkJRVkY2U0N4SFFVRkhkVUlzUzBGQlNDeERRVUZUYlVjc2FVSkJRVlFzUjBGQk9FSXNTMEZCUzBvc1UwRkJUQ3hIUVVGcFFrVXNWVUZCTDBNc1IwRkJPRVJCTEdGQlFXRXNTMEZCUzBZc1UwRkJOVVk3UVVGRFFTeFpRVUZKUnl4UlFVRlJMRWRCUVZvc1JVRkJhVUpCTEZOQlFWTXNSMEZCVkR0QlFVTnFRaXhaUVVGSlFTeFJRVUZSTEVOQlFVTXNSMEZCWWl4RlFVRnJRa0VzVTBGQlV5eEhRVUZVT3p0QlFVVnNRaXhoUVVGTFNpeFhRVUZNTEVkQlFXMUNSeXhWUVVGdVFqdEJRVU5CTEdGQlFVdEVMRTFCUVV3c1IwRkJZM1pJTEVkQlFVZDFRaXhMUVVGSUxFTkJRVk50Unl4cFFrRkJWQ3hIUVVFMlFrUXNTMEZCTjBJc1IwRkJjVU1zUTBGQlEwRXNTMEZCY0VRN1FVRkRTQ3hMUVRORGEwSTdPMEZCTmtOdVFucEdMR0ZCUVZFc2JVSkJRVms3UVVGRGFFSm9ReXhYUVVGSEswTXNTMEZCU0N4RFFVRlRMRWxCUVZRN1FVRkRTQ3hMUVM5RGEwSTdPMEZCYVVSdVFrb3NXVUZCVHl4blFrRkJWVXdzUlVGQlZpeEZRVUZqTzBGQlEycENRU3hoUVVGTExFdEJRVXRFTEdkQ1FVRk1MRU5CUVhOQ1F5eEZRVUYwUWl4RFFVRk1PMEZCUTBFc1dVRkJTU3hMUVVGTFR5eE5RVUZVTEVWQlFXbENPMEZCUTJJc2FVSkJRVXRCTEUxQlFVd3NRMEZCV1RSRkxFdEJRVm9zUjBGQmIwSXNTMEZCUzBvc1YwRkJUQ3hIUVVGdFFpeExRVUZMUlN4TlFVRk1MRWRCUVdOcVJpeEZRVUZ5UkR0QlFVTklPMEZCUTBvN1FVRjBSR3RDTEVOQlFWUXNRMEZCWkRzN1FVRjVSRUU3T3pzN096czdPenM3T3pzN1FVRmhRWFJETEVkQlFVY3lTQ3hSUVVGSUxFZEJRV01zVlVGQlZUVkNMRkZCUVZZc1JVRkJiMEp4UWl4UlFVRndRaXhGUVVFNFFqdEJRVU40UXl4WFFVRlBMRWxCUVVsd1NDeEhRVUZIYlVnc1VVRkJVQ3hEUVVGblFuQkNMRkZCUVdoQ0xFVkJRVEJDY1VJc1VVRkJNVUlzUTBGQlVEdEJRVU5JTEVOQlJrUTdPMEZCUzBFN096czdPenM3T3pzN1FVRlZRWEJJTEVkQlFVYzBTQ3hSUVVGSUxFZEJRV00xU0N4SFFVRkhSU3hMUVVGSUxFTkJRVk03UVVGRGJrSkRMRlZCUVUwc1lVRkVZVHRCUVVWdVFrTXNZVUZCVTBvc1IwRkJSME1zWTBGR1R6czdRVUZKYmtKTExGVkJRVTBzWTBGQlZYbEdMRkZCUVZZc1JVRkJiMEk0UWl4VlFVRndRaXhGUVVGblF6dEJRVU5zUTBFc2MwSkJRV00zU0N4SFFVRkhkVUlzUzBGQlNDeERRVUZUYlVjc2FVSkJRVlFzUjBGQk5rSXNRMEZCTjBJc1IwRkJhVU1zUTBGQlF5eERRVUZvUkRzN1FVRkZRU3hoUVVGTFNTeFhRVUZNTEVkQlFXMUNMRU5CUVc1Q08wRkJRMEVzWVVGQlMxUXNWMEZCVEN4SFFVRnRRaXhEUVVGdVFqdEJRVU5CVVN4MVFrRkJaVFZITEZOQlFXWXNTVUZCTkVJc1MwRkJTMFVzWjBKQlFVd3NRMEZCYzBJMFJTeFJRVUYwUWl4RlFVRm5RemhDTEZWQlFXaERMRU5CUVRWQ08wRkJRMGdzUzBGV2EwSTdPMEZCV1c1Q096czdPenM3UVVGTlFURkhMSE5DUVVGcFFpd3dRa0ZCVlRSRkxGRkJRVllzUlVGQmIwSTRRaXhWUVVGd1FpeEZRVUZuUXp0QlFVTTNReXhaUVVGSk4wZ3NSMEZCUjBNc1kwRkJTQ3hEUVVGclFtbENMRk5CUVd4Q0xFTkJRVFJDUXl4blFrRkJOVUlzUTBGQk5rTkRMRWxCUVRkRExFTkJRV3RFTEVsQlFXeEVMRVZCUVhkRU1rVXNVVUZCZUVRc1EwRkJTaXhGUVVGMVJUdEJRVU51UlN4cFFrRkJTeXRDTEZkQlFVd3NSMEZCYlVKRUxGVkJRVzVDTzBGQlEwRXNiVUpCUVU4c1NVRkJVRHRCUVVOSU8wRkJRMFFzWlVGQlR5eExRVUZRTzBGQlEwZ3NTMEY0UW10Q096dEJRVEJDYmtJMVJpeFhRVUZOTEdsQ1FVRlpPMEZCUTJRc1dVRkJTVTRzVTBGQlV5eEpRVUZKTTBJc1IwRkJSelJJTEZGQlFWQXNSVUZCWWp0QlFVTkJMR0ZCUVV0c1J5eG5Ra0ZCVEN4RFFVRnpRa01zVFVGQmRFSTdRVUZEUVVFc1pVRkJUMUlzWjBKQlFWQXNRMEZCZDBJc1MwRkJTMGNzVTBGQk4wSXNSVUZCZDBNc1MwRkJTM2RITEZkQlFUZERPMEZCUTBFc1pVRkJUMjVITEUxQlFWQTdRVUZEU0N4TFFTOUNhMEk3TzBGQmFVTnVRbWxDTEhGQ1FVRm5RaXg1UWtGQlZVTXNUVUZCVml4RlFVRnJRanRCUVVNNVFqZERMRmRCUVVkRExHTkJRVWdzUTBGQmEwSnBRaXhUUVVGc1FpeERRVUUwUWpCQ0xHVkJRVFZDTEVOQlFUUkRlRUlzU1VGQk5VTXNRMEZCYVVRc1NVRkJha1FzUlVGQmRVUjVRaXhOUVVGMlJEdEJRVU5CTEdGQlFVdDNSU3hYUVVGTUxFZEJRVzFDZUVVc1QwRkJUelJGTEV0QlFURkNPMEZCUTBnc1MwRndRMnRDT3p0QlFYTkRia0k1UlN4WlFVRlBMR2RDUVVGVlRDeEZRVUZXTEVWQlFXTTdRVUZEYWtKQkxHRkJRVXNzUzBGQlMwUXNaMEpCUVV3c1EwRkJjMEpETEVWQlFYUkNMRU5CUVV3N1FVRkRRU3haUVVGSkxFdEJRVXRQTEUxQlFWUXNSVUZCYVVJN1FVRkRZaXhwUWtGQlMwRXNUVUZCVEN4RFFVRlpORVVzUzBGQldpeEhRVUZ2UWl4TFFVRkxTaXhYUVVGTUxFZEJRVzFDTEV0QlFVdFRMRmRCUVV3c1IwRkJiVUo0Uml4RlFVRXhSRHRCUVVOSU8wRkJRMG9zUzBFelEydENPenRCUVRaRGJrSk9MR0ZCUVZFc2JVSkJRVms3UVVGRGFFSXNXVUZCU1V3c1UwRkJVeXhKUVVGSk0wSXNSMEZCUnpSSUxGRkJRVkFzUlVGQllqdEJRVU5CYWtjc1pVRkJUMUlzWjBKQlFWQXNRMEZCZDBJc1MwRkJTMGNzVTBGQk4wSXNSVUZCZDBNc1EwRkJReXhMUVVGTGQwY3NWMEZCT1VNN1FVRkRRU3hoUVVGTGNFY3NaMEpCUVV3c1EwRkJjMEpETEUxQlFYUkNPMEZCUTBFc1lVRkJTME1zWjBKQlFVd3NRMEZCYzBKRUxFMUJRWFJDTzBGQlEwRXNaVUZCVDBFc1RVRkJVRHRCUVVOSU8wRkJia1JyUWl4RFFVRlVMRU5CUVdRN08wRkJjMFJCT3pzN096czdPenM3T3pzN08wRkJZVUV6UWl4SFFVRkhLMGdzVVVGQlNDeEhRVUZqTEZWQlFWVm9ReXhSUVVGV0xFVkJRVzlDT0VJc1ZVRkJjRUlzUlVGQlowTTdRVUZETVVNc1YwRkJUeXhKUVVGSk4wZ3NSMEZCUnpSSUxGRkJRVkFzUTBGQlowSTNRaXhSUVVGb1FpeEZRVUV3UWpoQ0xGVkJRVEZDTEVOQlFWQTdRVUZEU0N4RFFVWkVPenRCUVV0Qk96czdPenM3T3pzN096czdPenM3UVVGbFFUZElMRWRCUVVkblNTeE5RVUZJTEVkQlFWbG9TU3hIUVVGSFJTeExRVUZJTEVOQlFWTTdRVUZEYWtKRExGVkJRVTBzVjBGRVZ6dEJRVVZxUWtNc1lVRkJVMG9zUjBGQlIwTXNZMEZHU3pzN1FVRkpha0pMTEZWQlFVc3NZMEZCVlhsR0xGRkJRVllzUlVGQmIwSnJReXhSUVVGd1FpeEZRVUU0UWtNc1RVRkJPVUlzUlVGQmMwTTdRVUZEZGtNc1lVRkJTME1zWTBGQlRDeEhRVUZ6UW01SkxFZEJRVWR2U1N4RlFVRklMRU5CUVUwc1EwRkJUaXhGUVVGVExFTkJRVlFzUTBGQmRFSTdRVUZEUVN4aFFVRkxReXhqUVVGTUxFZEJRWE5DY2trc1IwRkJSMjlKTEVWQlFVZ3NRMEZCVFN4RFFVRk9MRVZCUVZNc1EwRkJWQ3hEUVVGMFFqdEJRVU5CTEdGQlFVdEZMR2xDUVVGTUxFZEJRWGxDZEVrc1IwRkJSMjlKTEVWQlFVZ3NRMEZCVFN4RFFVRk9MRVZCUVZNc1EwRkJWQ3hEUVVGNlFqczdRVUZGUVVnc2NVSkJRV0ZvU0N4VFFVRmlMRWxCUVRCQ2FrSXNSMEZCUjJkSkxFMUJRVWdzUTBGQlZUbEhMRk5CUVZZc1EwRkJiMEpETEdkQ1FVRndRaXhEUVVGeFEwTXNTVUZCY2tNc1EwRkJNRU1zU1VGQk1VTXNSVUZCWjBReVJTeFJRVUZvUkN4RlFVRXdSR3RETEZGQlFURkVMRVZCUVc5RlF5eE5RVUZ3UlN4RFFVRXhRanRCUVVOSUxFdEJWbWRDT3p0QlFWbHFRanM3T3pzN096dEJRVTlCTDBjc2MwSkJRV2xDTERCQ1FVRlZORVVzVVVGQlZpeEZRVUZ2UW5kRExGRkJRWEJDTEVWQlFUaENReXhEUVVFNVFpeEZRVUZwUXp0QlFVTTVReXhaUVVGSmVFa3NSMEZCUjBNc1kwRkJTQ3hEUVVGclFtbENMRk5CUVd4Q0xFTkJRVFJDUXl4blFrRkJOVUlzUTBGQk5rTkRMRWxCUVRkRExFTkJRV3RFTEVsQlFXeEVMRVZCUVhkRU1rVXNVVUZCZUVRc1EwRkJTaXhGUVVGMVJUdEJRVU4wUlN4blFrRkJSM2RETEZOQlFWTkZMRU5CUVZRc1MwRkJaWGhJTEZOQlFXeENMRVZCUVRaQ08wRkJRelZDZFVnc2IwSkJRVWxFTEZOQlFWTkRMRU5CUVdJN1FVRkRRVVFzTWtKQlFWZEJMRk5CUVZORkxFTkJRWEJDTzBGQlEwRTdPMEZCUlVVc2FVSkJRVXRPTEdOQlFVd3NRMEZCYjBKTkxFTkJRWEJDTEVkQlFYZENSaXhSUVVGNFFqdEJRVU5CTEdsQ1FVRkxTaXhqUVVGTUxFTkJRVzlDU3l4RFFVRndRaXhIUVVGM1FrRXNRMEZCZUVJN1FVRkRRU3h0UWtGQlR5eEpRVUZRTzBGQlEwZzdRVUZEUkN4bFFVRlBMRXRCUVZBN1FVRkRTQ3hMUVM5Q1owSTdPMEZCYVVOcVFuWkhMRmRCUVUwc2FVSkJRVms3UVVGRFpDeFpRVUZKVGl4VFFVRlRMRWxCUVVrelFpeEhRVUZIWjBrc1RVRkJVQ3hGUVVGaU8wRkJRMEVzWVVGQlMzUkhMR2RDUVVGTUxFTkJRWE5DUXl4TlFVRjBRanRCUVVOQlFTeGxRVUZQVWl4blFrRkJVQ3hEUVVGM1FpeExRVUZMUnl4VFFVRTNRaXhGUVVGM1F5eExRVUZMTmtjc1kwRkJOME03UVVGRFFTeGxRVUZQZUVjc1RVRkJVRHRCUVVOSUxFdEJkRU5uUWpzN1FVRjNRMnBDYVVJc2NVSkJRV2RDTEhsQ1FVRlZReXhOUVVGV0xFVkJRV3RDTzBGQlF6bENOME1zVjBGQlIwTXNZMEZCU0N4RFFVRnJRbWxDTEZOQlFXeENMRU5CUVRSQ01FSXNaVUZCTlVJc1EwRkJORU40UWl4SlFVRTFReXhEUVVGcFJDeEpRVUZxUkN4RlFVRjFSSGxDTEUxQlFYWkVPMEZCUTBFc1dVRkJTVFpHTEZWQlFWVTNSaXhQUVVGUE5FWXNRMEZCY2tJN1FVRkRRU3haUVVGSlJTeFZRVUZWT1VZc1QwRkJUekpHTEVOQlFYSkNPMEZCUTBFc1lVRkJTMFlzYVVKQlFVd3NRMEZCZFVKSExFTkJRWFpDTEVkQlFUSkNReXhQUVVFelFqdEJRVU5CTEdGQlFVdEtMR2xDUVVGTUxFTkJRWFZDUlN4RFFVRjJRaXhIUVVFeVFrY3NUMEZCTTBJN1FVRkRRU3hoUVVGTFRpeGpRVUZNTEVOQlFXOUNTU3hEUVVGd1FpeEhRVUYzUWtNc1QwRkJlRUk3UVVGRFFTeGhRVUZMVEN4alFVRk1MRU5CUVc5Q1J5eERRVUZ3UWl4SFFVRjNRa2NzVDBGQmVFSTdRVUZEU0N4TFFXaEVaMEk3TzBGQmEwUnFRbWhITEZsQlFVOHNaMEpCUVZWTUxFVkJRVllzUlVGQll6dEJRVU5xUWtFc1lVRkJTeXhMUVVGTFJDeG5Ra0ZCVEN4RFFVRnpRa01zUlVGQmRFSXNRMEZCVER0QlFVTkJMRmxCUVVrc1MwRkJTMDhzVFVGQlZDeEZRVUZwUWp0QlFVTmlMR2RDUVVGSk5FWXNTVUZCU1N4TFFVRkxUaXhqUVVGTUxFTkJRVzlDVFN4RFFVRndRaXhIUVVGM1FtNUhMRVZCUVdoRE8wRkJRMEVzWjBKQlFVbHJSeXhKUVVGSkxFdEJRVXRNTEdOQlFVd3NRMEZCYjBKTExFTkJRWEJDTEVkQlFYZENiRWNzUlVGQmFFTTdRVUZEUVN4blFrRkJTWE5ITEcxQ1FVRnRRaXhMUVVGTFVDeGpRVUUxUWp0QlFVTkJMR2RDUVVGSmNra3NSMEZCUjNWQ0xFdEJRVWdzUTBGQlUzTklMSGRDUVVGaUxFVkJRWFZETzBGQlEyNURMRzlDUVVGSlF5eFZRVUZWTEV0QlFVdHFSeXhOUVVGTUxFTkJRVmswUml4RFFVRXhRanRCUVVOQkxHOUNRVUZKVFN4VlFVRlZMRXRCUVV0c1J5eE5RVUZNTEVOQlFWa3lSaXhEUVVFeFFqdEJRVU5CTEc5Q1FVRkpVU3h6UWtGQmMwSXNTMEZCUzFZc2FVSkJRUzlDT3p0QlFVVkJUU3hwUTBGQmFVSklMRU5CUVdwQ0xFZEJRWEZDUnl4cFFrRkJhVUpJTEVOQlFXcENMRWRCUVhGQ1N5eFBRVUZ5UWl4SFFVRXJRa1VzYjBKQlFXOUNVQ3hEUVVGNFJUdEJRVU5CUnl4cFEwRkJhVUpLTEVOQlFXcENMRWRCUVhGQ1NTeHBRa0ZCYVVKS0xFTkJRV3BDTEVkQlFYRkNUeXhQUVVGeVFpeEhRVUVyUWtNc2IwSkJRVzlDVWl4RFFVRjRSVHRCUVVOQlF5eHZRa0ZCU1VFc1NVRkJTVWNzYVVKQlFXbENTQ3hEUVVGNlFqdEJRVU5CUkN4dlFrRkJTVUVzU1VGQlNVa3NhVUpCUVdsQ1NpeERRVUY2UWp0QlFVTklVU3h2UTBGQmIwSlFMRU5CUVhCQ0xFZEJRWGRDUVN4RFFVRjRRanRCUVVOQlR5eHZRMEZCYjBKU0xFTkJRWEJDTEVkQlFYZENRU3hEUVVGNFFqdEJRVU5CTEhGQ1FVRkxNMFlzVFVGQlRDeERRVUZaYjBjc1YwRkJXaXhEUVVGM1FsSXNRMEZCZUVJc1JVRkJNa0pFTEVOQlFUTkNPMEZCUTBFc1lVRmFSQ3hOUVZsUE8wRkJRMGdzY1VKQlFVc3pSaXhOUVVGTUxFTkJRVmx2Unl4WFFVRmFMRU5CUVhkQ1RDeHBRa0ZCYVVKSUxFTkJRV3BDTEVkQlFYRkNRU3hEUVVFM1F5eEZRVUZuUkVjc2FVSkJRV2xDU2l4RFFVRnFRaXhIUVVGeFFrRXNRMEZCY2tVN1FVRkRTRHRCUVVOS08wRkJRMG9zUzBGNFJXZENPenRCUVRCRmFrSjRSeXhoUVVGUkxHMUNRVUZaTzBGQlEyaENMRmxCUVVsTUxGTkJRVk1zU1VGQlNUTkNMRWRCUVVkblNTeE5RVUZRTEVOQlFXTXNTMEZCU3pGSExGTkJRVzVDTEVWQlFUaENkRUlzUjBGQlIyOUpMRVZCUVVnc1EwRkJUU3hEUVVGRExFdEJRVXRFTEdOQlFVd3NRMEZCYjBKTkxFTkJRVE5DTEVWQlFUaENMRU5CUVVNc1MwRkJTMDRzWTBGQlRDeERRVUZ2UWtzc1EwRkJia1FzUTBGQk9VSXNRMEZCWWp0QlFVTkJMR0ZCUVVzNVJ5eG5Ra0ZCVEN4RFFVRnpRa01zVFVGQmRFSTdRVUZEUVN4aFFVRkxReXhuUWtGQlRDeERRVUZ6UWtRc1RVRkJkRUk3UVVGRFFTeGxRVUZQUVN4TlFVRlFPMEZCUTBnN1FVRXZSV2RDTEVOQlFWUXNRMEZCV2pzN1FVRnJSa0U3T3pzN096czdPenM3T3pzN096czdRVUZuUWtFelFpeEhRVUZIYTBvc1RVRkJTQ3hIUVVGWkxGVkJRVlZ1UkN4UlFVRldMRVZCUVc5Q2EwTXNVVUZCY0VJc1JVRkJPRUpETEUxQlFUbENMRVZCUVhORE8wRkJRemxETEZkQlFVOHNTVUZCU1d4SkxFZEJRVWRuU1N4TlFVRlFMRU5CUVdOcVF5eFJRVUZrTEVWQlFYZENhME1zVVVGQmVFSXNSVUZCYTBORExFMUJRV3hETEVOQlFWQTdRVUZEU0N4RFFVWkVPenRCUVV0Qk96czdPenM3T3pzN096czdRVUZaUVd4SkxFZEJRVWR0U2l4TlFVRklMRWRCUVZsdVNpeEhRVUZIUlN4TFFVRklMRU5CUVZNN1FVRkRha0pETEZWQlFVMHNWMEZFVnp0QlFVVnFRa01zWVVGQlUwb3NSMEZCUjJkSkxFMUJSa3M3TzBGQlNXcENNVWdzVlVGQlN5eGpRVUZWZVVZc1VVRkJWaXhGUVVGdlFuZERMRkZCUVhCQ0xFVkJRVGhDUXl4RFFVRTVRaXhGUVVGcFF6dEJRVU5zUXl4aFFVRkxXU3haUVVGTUxFZEJRVzlDY0Vvc1IwRkJSMjlKTEVWQlFVZ3NRMEZCVFN4RFFVRk9MRVZCUVZNc1EwRkJWQ3hEUVVGd1FqdEJRVU5PUnl4eFFrRkJZWFJJTEZOQlFXSXNTVUZCTUVJc1MwRkJTMFVzWjBKQlFVd3NRMEZCYzBJMFJTeFJRVUYwUWl4RlFVRm5RM2RETEZGQlFXaERMRVZCUVRCRFF5eERRVUV4UXl4RFFVRXhRanRCUVVOSExFdEJVR2RDT3p0QlFWTnFRanM3T3pzN096dEJRVTlCY2tnc2MwSkJRV2xDTERCQ1FVRlZORVVzVVVGQlZpeEZRVUZ2UW5kRExGRkJRWEJDTEVWQlFUaENReXhEUVVFNVFpeEZRVUZwUXp0QlFVTTVReXhaUVVGSmVFa3NSMEZCUjJkSkxFMUJRVWdzUTBGQlZUbEhMRk5CUVZZc1EwRkJiMEpETEdkQ1FVRndRaXhEUVVGeFEwTXNTVUZCY2tNc1EwRkJNRU1zU1VGQk1VTXNSVUZCWjBReVJTeFJRVUZvUkN4RlFVRXdSSGRETEZGQlFURkVMRVZCUVc5RlF5eERRVUZ3UlN4RFFVRktMRVZCUVRSRk8wRkJRek5GTEdkQ1FVRkhSQ3hUUVVGVFJTeERRVUZVTEV0QlFXVjRTQ3hUUVVGc1FpeEZRVUUyUWp0QlFVTTFRblZJTEc5Q1FVRkpSQ3hUUVVGVFF5eERRVUZpTzBGQlEwRkVMREpDUVVGWFFTeFRRVUZUUlN4RFFVRndRanRCUVVOQk96dEJRVVZGTEdsQ1FVRkxWeXhaUVVGTUxFTkJRV3RDV0N4RFFVRnNRaXhIUVVGelFrWXNVVUZCZEVJN1FVRkRRU3hwUWtGQlMyRXNXVUZCVEN4RFFVRnJRbG9zUTBGQmJFSXNSMEZCYzBKQkxFTkJRWFJDTzBGQlEwRXNiVUpCUVU4c1NVRkJVRHRCUVVOSU8wRkJRMFFzWlVGQlR5eExRVUZRTzBGQlEwZ3NTMEUxUW1kQ096dEJRVGhDYWtKMlJ5eFhRVUZOTEdsQ1FVRlpPMEZCUTJRc1dVRkJTVTRzVTBGQlV5eEpRVUZKTTBJc1IwRkJSMjFLTEUxQlFWQXNSVUZCWWp0QlFVTkJMR0ZCUVV0NlNDeG5Ra0ZCVEN4RFFVRnpRa01zVFVGQmRFSTdRVUZEUVVFc1pVRkJUMUlzWjBKQlFWQXNRMEZCZDBJc1MwRkJTMGNzVTBGQk4wSXNSVUZCZDBNc1MwRkJTemhJTEZsQlFUZERPMEZCUTBFc1pVRkJUM3BJTEUxQlFWQTdRVUZEU0N4TFFXNURaMEk3TzBGQmNVTnFRbWxDTEhGQ1FVRm5RaXg1UWtGQlZVTXNUVUZCVml4RlFVRnJRanRCUVVNNVFqZERMRmRCUVVkblNTeE5RVUZJTEVOQlFWVTVSeXhUUVVGV0xFTkJRVzlDTUVJc1pVRkJjRUlzUTBGQmIwTjRRaXhKUVVGd1F5eERRVUY1UXl4SlFVRjZReXhGUVVFclEzbENMRTFCUVM5RE8wRkJRMEVzWVVGQlMzTkdMR05CUVV3c1EwRkJiMEpOTEVOQlFYQkNMRWRCUVhkQ0xFdEJRVXRYTEZsQlFVd3NRMEZCYTBKWUxFTkJRV3hDTEVkQlFYTkNOVVlzVDBGQlR6UkdMRU5CUVhKRU8wRkJRMEVzWVVGQlMwNHNZMEZCVEN4RFFVRnZRa3NzUTBGQmNFSXNSMEZCZDBJc1MwRkJTMWtzV1VGQlRDeERRVUZyUWxvc1EwRkJiRUlzUjBGQmMwSXpSaXhQUVVGUE1rWXNRMEZCY2tRN1FVRkRTRHRCUVhwRFowSXNRMEZCVkN4RFFVRmFPenRCUVRSRFFUczdPenM3T3pzN096czdPenM3TzBGQlpVRjRTU3hIUVVGSGNVb3NUVUZCU0N4SFFVRlpMRlZCUVZWMFJDeFJRVUZXTEVWQlFXOUNkME1zVVVGQmNFSXNSVUZCT0VKRExFTkJRVGxDTEVWQlFXbERPMEZCUTNwRExGZEJRVThzU1VGQlNYaEpMRWRCUVVkdFNpeE5RVUZRTEVOQlFXTndSQ3hSUVVGa0xFVkJRWGRDZDBNc1VVRkJlRUlzUlVGQmEwTkRMRU5CUVd4RExFTkJRVkE3UVVGRFNDeERRVVpFT3p0QlFVbEJPenM3T3pzN096czdPMEZCVlVGNFNTeEhRVUZIYzBvc1RVRkJTQ3hIUVVGWmRFb3NSMEZCUjBVc1MwRkJTQ3hEUVVGVE8wRkJRMnBDUXl4VlFVRk5MRmRCUkZjN1FVRkZha0pETEdGQlFWTktMRWRCUVVkRExHTkJSa3M3TzBGQlNXcENTeXhWUVVGTkxHTkJRVlZ2UXl4RFFVRldMRVZCUVdFMlJ5eEZRVUZpTEVWQlFXbENReXhGUVVGcVFpeEZRVUZ4UWp0QlFVTjJRaXhoUVVGTFF5eE5RVUZNTEVkQlFXTXNRMEZCWkR0QlFVTkJMR0ZCUVV0RExFMUJRVXdzUjBGQll5eERRVUZrTzBGQlEwRXNZVUZCUzBNc1YwRkJUQ3hIUVVGdFFpeERRVUZ1UWp0QlFVTkJMR0ZCUVV0RExGZEJRVXdzUjBGQmJVSXNRMEZCYmtJN1FVRkRRU3hoUVVGTFF5eFRRVUZNTEVkQlFXbENMRU5CUVdwQ08wRkJRMEVzWVVGQlMwTXNVMEZCVEN4SFFVRnBRaXhEUVVGcVFqdEJRVU5CTEdGQlFVdERMRTlCUVV3c1IwRkJaU3hEUVVGbU8wRkJRMEVzWVVGQlMwTXNUMEZCVEN4SFFVRmxMRU5CUVdZN1FVRkRRVklzWlVGQlQzWkpMRk5CUVZBc1NVRkJiMEpxUWl4SFFVRkhjMG9zVFVGQlNDeERRVUZWY0Vrc1UwRkJWaXhEUVVGdlFrTXNaMEpCUVhCQ0xFTkJRWEZEUXl4SlFVRnlReXhEUVVFd1F5eEpRVUV4UXl4RlFVRm5SSE5DTEVOQlFXaEVMRVZCUVcxRU5rY3NSVUZCYmtRc1JVRkJkVVJETEVWQlFYWkVMRU5CUVhCQ08wRkJRMGdzUzBGa1owSTdPMEZCWjBKcVFqczdPenM3T3p0QlFVOUJja2tzYzBKQlFXbENMREJDUVVGVmRVSXNRMEZCVml4RlFVRmhOa2NzUlVGQllpeEZRVUZwUWtNc1JVRkJha0lzUlVGQmNVSTdRVUZEYkVNc1dVRkJTVFZETEUxQlFVMHNTMEZCVmp0QlFVTkJMRmxCUVVrMVJ5eEhRVUZIUXl4alFVRklMRU5CUVd0Q2FVSXNVMEZCYkVJc1EwRkJORUpETEdkQ1FVRTFRaXhEUVVFMlEwTXNTVUZCTjBNc1EwRkJhMFFzU1VGQmJFUXNSVUZCZDBSelFpeERRVUY0UkN4RFFVRktMRVZCUVdkRk8wRkJRelZFTEdsQ1FVRkxiVWdzVTBGQlRDeEhRVUZwUWs0c1JVRkJha0k3UVVGRFFTeHBRa0ZCUzA4c1UwRkJUQ3hIUVVGcFFrNHNSVUZCYWtJN1FVRkRRVFZETEd0Q1FVRk5MRWxCUVU0N1FVRkRTRHRCUVVORUxHVkJRVTlCTEVkQlFWQTdRVUZEU0N4TFFTOUNaMEk3TzBGQmFVTnFRak5GTEZkQlFVMHNhVUpCUVZrN1FVRkRaQ3haUVVGSlRpeFRRVUZUTEVsQlFVa3pRaXhIUVVGSGMwb3NUVUZCVUN4RlFVRmlPMEZCUTBFc1lVRkJTelZJTEdkQ1FVRk1MRU5CUVhOQ1F5eE5RVUYwUWp0QlFVTkJRU3hsUVVGUFVpeG5Ra0ZCVUN4RFFVRjNRaXhMUVVGTFJ5eFRRVUUzUWl4RlFVRjNReXhMUVVGTGRVa3NVMEZCTjBNc1JVRkJkMFFzUzBGQlMwTXNVMEZCTjBRN1FVRkRRU3hsUVVGUGJra3NUVUZCVUR0QlFVTklMRXRCZEVOblFqczdRVUYzUTJwQ2FVSXNjVUpCUVdkQ0xIbENRVUZWUXl4TlFVRldMRVZCUVd0Q08wRkJRemxDTjBNc1YwRkJSME1zWTBGQlNDeERRVUZyUW1sQ0xGTkJRV3hDTEVOQlFUUkNNRUlzWlVGQk5VSXNRMEZCTkVONFFpeEpRVUUxUXl4RFFVRnBSQ3hKUVVGcVJDeEZRVUYxUkhsQ0xFMUJRWFpFT3p0QlFVVkJMR0ZCUVVzNFJ5eFhRVUZNTEVkQlFXMUNPVWNzVDBGQlQyOUlMRXRCUVZBc1IwRkJaU3hIUVVGc1F6dEJRVU5CTEdGQlFVdEdMRTlCUVV3c1IwRkJaU3hMUVVGTFJpeFRRVUZNTEVkQlFXbENMRXRCUVV0R0xGZEJRWEpETzBGQlEwRXNXVUZCU1N4TFFVRkxTU3hQUVVGTUxFZEJRV1VzUjBGQmJrSXNSVUZEU1N4TFFVRkxRU3hQUVVGTUxFbEJRV2RDTEVkQlFXaENPMEZCUTBvc1dVRkJTU3hMUVVGTFFTeFBRVUZNTEVkQlFXVXNRMEZCUXl4SFFVRndRaXhGUVVOSkxFdEJRVXRCTEU5QlFVd3NTVUZCWjBJc1IwRkJhRUk3TzBGQlJVb3NZVUZCUzBnc1YwRkJUQ3hIUVVGdFFpOUhMRTlCUVU5eFNDeExRVUZRTEVkQlFXVXNSMEZCYkVNN1FVRkRRU3hoUVVGTFJpeFBRVUZNTEVkQlFXVXNTMEZCUzBZc1UwRkJUQ3hIUVVGcFFpeExRVUZMUml4WFFVRnlRenRCUVVOQkxGbEJRVWtzUzBGQlMwa3NUMEZCVEN4SFFVRmxMRWRCUVc1Q0xFVkJRMGtzUzBGQlMwRXNUMEZCVEN4SlFVRm5RaXhIUVVGb1FqdEJRVU5LTEZsQlFVa3NTMEZCUzBFc1QwRkJUQ3hIUVVGbExFTkJRVU1zUjBGQmNFSXNSVUZEU1N4TFFVRkxRU3hQUVVGTUxFbEJRV2RDTEVkQlFXaENPMEZCUTFBc1MwRjRSR2RDT3p0QlFUQkVha0p5U0N4WlFVRlBMR2RDUVVGVlRDeEZRVUZXTEVWQlFXTTdRVUZEYWtKQkxHRkJRVXNzUzBGQlMwUXNaMEpCUVV3c1EwRkJjMEpETEVWQlFYUkNMRU5CUVV3N1FVRkRRU3hoUVVGTFR5eE5RVUZNTEVOQlFWbHZTQ3hMUVVGYUxFZEJRVzlDTEV0QlFVdE9MRmRCUVV3c1IwRkJiVUlzUzBGQlMwa3NUMEZCVEN4SFFVRmxla2dzUlVGQmRFUTdRVUZEUVN4aFFVRkxUeXhOUVVGTUxFTkJRVmx4U0N4TFFVRmFMRWRCUVc5Q0xFdEJRVXRPTEZkQlFVd3NSMEZCYlVJc1MwRkJTMGtzVDBGQlRDeEhRVUZsTVVnc1JVRkJkRVE3UVVGRFNEdEJRVGxFWjBJc1EwRkJWQ3hEUVVGYU96dEJRV2xGUVRzN096czdPenM3T3pzN096czdRVUZqUVhSRExFZEJRVWR0U3l4TlFVRklMRWRCUVZrc1ZVRkJWWHBJTEVOQlFWWXNSVUZCWVRaSExFVkJRV0lzUlVGQmFVSkRMRVZCUVdwQ0xFVkJRWEZDTzBGQlF6ZENMRmRCUVU4c1NVRkJTWGhLTEVkQlFVZHpTaXhOUVVGUUxFTkJRV00xUnl4RFFVRmtMRVZCUVdsQ05rY3NSVUZCYWtJc1JVRkJjVUpETEVWQlFYSkNMRU5CUVZBN1FVRkRTQ3hEUVVaRU96dEJRVWxCT3pzN096czdPenM3UVVGVFFYaEtMRWRCUVVkdlN5eE5RVUZJTEVkQlFWbHdTeXhIUVVGSFJTeExRVUZJTEVOQlFWTTdRVUZEYWtKRExGVkJRVTBzVjBGRVZ6dEJRVVZxUWtNc1lVRkJVMG9zUjBGQlIzTktMRTFCUmtzN08wRkJTWEJDYUVvc1ZVRkJUU3hqUVVGVGIwTXNRMEZCVkN4RlFVRlpOa2NzUlVGQldpeEZRVUZuUWtNc1JVRkJhRUlzUlVGQmIwSTdRVUZEZWtKQkxHVkJRVTkyU1N4VFFVRlFMRWxCUVc5Q0xFdEJRVXRGTEdkQ1FVRk1MRU5CUVhOQ2RVSXNRMEZCZEVJc1JVRkJlVUkyUnl4RlFVRjZRaXhGUVVFMlFrTXNSVUZCTjBJc1EwRkJjRUk3UVVGRFFTeExRVTV0UWpzN1FVRlJha0k3T3pzN096czdRVUZQUVhKSkxITkNRVUZwUWl3d1FrRkJWWFZDTEVOQlFWWXNSVUZCWVRKSUxGVkJRV0lzUlVGQmVVSkRMRlZCUVhwQ0xFVkJRWEZETzBGQlEyeEVMRmxCUVVreFJDeE5RVUZOTEV0QlFWWTdRVUZEUVN4WlFVRkpOVWNzUjBGQlIzTktMRTFCUVVnc1EwRkJWWEJKTEZOQlFWWXNRMEZCYjBKRExHZENRVUZ3UWl4RFFVRnhRME1zU1VGQmNrTXNRMEZCTUVNc1NVRkJNVU1zUlVGQlowUnpRaXhEUVVGb1JDeEZRVUZ0UkRKSUxGVkJRVzVFTEVWQlFTdEVReXhWUVVFdlJDeERRVUZLTEVWQlFXZEdPMEZCUXpWRkxHbENRVUZMWWl4TlFVRk1MRWRCUVdOWkxGVkJRV1E3UVVGRFFTeHBRa0ZCUzFnc1RVRkJUQ3hIUVVGaldTeFZRVUZrTzBGQlEwRXhSQ3hyUWtGQlRTeEpRVUZPTzBGQlEwZzdRVUZEUkN4bFFVRlBRU3hIUVVGUU8wRkJRMGdzUzBGMlFtZENPenRCUVhsQ2FrSXpSU3hYUVVGTkxHbENRVUZaTzBGQlEyUXNXVUZCU1U0c1UwRkJVeXhKUVVGSk0wSXNSMEZCUjI5TExFMUJRVkFzUlVGQllqdEJRVU5CTEdGQlFVc3hTU3huUWtGQlRDeERRVUZ6UWtNc1RVRkJkRUk3UVVGRFFVRXNaVUZCVDFJc1owSkJRVkFzUTBGQmQwSXNTMEZCUzBjc1UwRkJOMElzUlVGQmQwTXNTMEZCUzIxSkxFMUJRVGRETEVWQlFYRkVMRXRCUVV0RExFMUJRVEZFTzBGQlEwRXNaVUZCVHk5SUxFMUJRVkE3UVVGRFNDeExRVGxDWjBJN08wRkJaME5xUW1sQ0xIRkNRVUZuUWl4NVFrRkJWVU1zVFVGQlZpeEZRVUZyUWp0QlFVTTVRamRETEZkQlFVZHpTaXhOUVVGSUxFTkJRVlZ3U1N4VFFVRldMRU5CUVc5Q01FSXNaVUZCY0VJc1EwRkJiME40UWl4SlFVRndReXhEUVVGNVF5eEpRVUY2UXl4RlFVRXJRM2xDTEUxQlFTOURPMEZCUTBFc1lVRkJTMnRJTEU5QlFVd3NSMEZCWlN4TFFVRkxUaXhOUVVGd1FqdEJRVU5CTEdGQlFVdFBMRTlCUVV3c1IwRkJaU3hMUVVGTFRpeE5RVUZ3UWp0QlFVTkJMR0ZCUVV0SExGTkJRVXdzUjBGQmFVSXNTMEZCUzBZc1YwRkJUQ3hIUVVGdFFpeExRVUZMU1N4UFFVRjZRenRCUVVOQkxHRkJRVXRFTEZOQlFVd3NSMEZCYVVJc1MwRkJTMFlzVjBGQlRDeEhRVUZ0UWl4TFFVRkxTU3hQUVVGNlF6dEJRVU5JTEV0QmRFTm5RanM3UVVGM1EycENhRWtzWVVGQlVTeHRRa0ZCV1R0QlFVTm9RaXhaUVVGSlRDeFRRVUZUTEVsQlFVa3pRaXhIUVVGSGIwc3NUVUZCVUN4RFFVRmpMRXRCUVVzNVNTeFRRVUZ1UWl4RlFVRTRRaXhEUVVGRExFdEJRVXR0U1N4TlFVRndReXhGUVVFMFF5eERRVUZETEV0QlFVdERMRTFCUVd4RUxFTkJRV0k3UVVGRFFTeGhRVUZMYUVrc1owSkJRVXdzUTBGQmMwSkRMRTFCUVhSQ08wRkJRMEVzWVVGQlMwTXNaMEpCUVV3c1EwRkJjMEpFTEUxQlFYUkNPMEZCUTBFc1pVRkJUMEVzVFVGQlVEdEJRVU5JTzBGQk4wTm5RaXhEUVVGVUxFTkJRVm83TzBGQlowUkJPenM3T3pzN096czdPenM3T3p0QlFXTkJNMElzUjBGQlIzVkxMRTFCUVVnc1IwRkJXU3hWUVVGVk4wZ3NRMEZCVml4RlFVRmhOa2NzUlVGQllpeEZRVUZwUWtNc1JVRkJha0lzUlVGQmNVSTdRVUZETjBJc1YwRkJUeXhKUVVGSmVFb3NSMEZCUjI5TExFMUJRVkFzUTBGQll6RklMRU5CUVdRc1JVRkJhVUkyUnl4RlFVRnFRaXhGUVVGeFFrTXNSVUZCY2tJc1EwRkJVRHRCUVVOSUxFTkJSa1E3TzBGQlMwRTdPenM3T3pzN096czdPenM3TzBGQlkwRjRTaXhIUVVGSGQwc3NUVUZCU0N4SFFVRlplRXNzUjBGQlIwVXNTMEZCU0N4RFFVRlRPMEZCUTJwQ1F5eFZRVUZOTEZkQlJGYzdRVUZGYWtKRExHRkJRVk5LTEVkQlFVZERMR05CUmtzN08wRkJTV3BDU3l4VlFVRkxMR05CUVZWNVJpeFJRVUZXTEVWQlFXOUNkME1zVVVGQmNFSXNSVUZCT0VKRExFTkJRVGxDTEVWQlFXbERhVU1zVFVGQmFrTXNSVUZCZVVORExFdEJRWHBETEVWQlFXZEVPMEZCUTJwRUxHRkJRVXR5UXl4alFVRk1MRWRCUVhOQ2Nra3NSMEZCUjI5SkxFVkJRVWdzUTBGQlRTeERRVUZPTEVWQlFWTXNRMEZCVkN4RFFVRjBRanRCUVVOQkxHRkJRVXRGTEdsQ1FVRk1MRWRCUVhsQ2RFa3NSMEZCUjI5SkxFVkJRVWdzUTBGQlRTeERRVUZPTEVWQlFWTXNRMEZCVkN4RFFVRjZRanRCUVVOQkxHRkJRVXQxUXl4TlFVRk1MRWRCUVdNelN5eEhRVUZIYjBrc1JVRkJTQ3hEUVVGTkxFTkJRVTRzUlVGQlV5eERRVUZVTEVOQlFXUTdRVUZEUVN4aFFVRkxkME1zVDBGQlRDeEhRVUZsTEVOQlFXWTdRVUZEUVN4aFFVRkxReXhOUVVGTUxFZEJRV01zUTBGQlpEczdRVUZGUVVvc2JVSkJRVmQ0U2l4VFFVRllMRWxCUVhkQ2FrSXNSMEZCUjNkTExFMUJRVWdzUTBGQlZYUktMRk5CUVZZc1EwRkJiMEpETEdkQ1FVRndRaXhEUVVGeFEwTXNTVUZCY2tNc1EwRkJNRU1zU1VGQk1VTXNSVUZCWjBReVJTeFJRVUZvUkN4RlFVRXdSSGRETEZGQlFURkVMRVZCUVc5RlF5eERRVUZ3UlN4RlFVRjFSV2xETEUxQlFYWkZMRVZCUVN0RlF5eExRVUV2UlN4RFFVRjRRanRCUVVOSUxFdEJXbWRDTzBGQllXcENPenM3T3pzN096czdPenM3UVVGWlFYWktMSE5DUVVGcFFpd3dRa0ZCVlRSRkxGRkJRVllzUlVGQmIwSjNReXhSUVVGd1FpeEZRVUU0UWtNc1EwRkJPVUlzUlVGQmFVTnBReXhOUVVGcVF5eEZRVUY1UTBNc1MwRkJla01zUlVGQlowUTdRVUZETjBRc1dVRkJTVEZMTEVkQlFVZERMR05CUVVnc1EwRkJhMEpwUWl4VFFVRnNRaXhEUVVFMFFrTXNaMEpCUVRWQ0xFTkJRVFpEUXl4SlFVRTNReXhEUVVGclJDeEpRVUZzUkN4RlFVRjNSREpGTEZGQlFYaEVMRU5CUVVvc1JVRkJkVVU3UVVGRGRFVXNaMEpCUVVreVJTeFZRVUZWZWtvc1UwRkJaQ3hGUVVGNVFqdEJRVU40UW5sS0xIZENRVUZSUkN4TlFVRlNPMEZCUTBGQkxIbENRVUZUYWtNc1EwRkJWRHRCUVVOQlFTeHZRa0ZCU1VRc1UwRkJVME1zUTBGQllqdEJRVU5CUkN3eVFrRkJWMEVzVTBGQlUwVXNRMEZCY0VJN1FVRkRRVHRCUVVORkxHbENRVUZMYTBNc1RVRkJUQ3hEUVVGWmJFTXNRMEZCV2l4SFFVRm5Ra1lzVVVGQmFFSTdRVUZEUVN4cFFrRkJTMjlETEUxQlFVd3NRMEZCV1c1RExFTkJRVm9zUjBGQlowSkJMRU5CUVdoQ08wRkJRMEVzYVVKQlFVdHZReXhQUVVGTUxFZEJRV1ZJTEUxQlFXWTdRVUZEUVN4cFFrRkJTMGtzVFVGQlRDeEhRVUZqU0N4TFFVRmtPMEZCUTBFc2JVSkJRVThzU1VGQlVEdEJRVU5JTzBGQlEwUXNaVUZCVHl4TFFVRlFPMEZCUTBnc1MwRjRRMmRDT3p0QlFUQkRha0o2U1N4WFFVRk5MR2xDUVVGWk8wRkJRMlFzV1VGQlNVNHNVMEZCVXl4SlFVRkpNMElzUjBGQlIzZExMRTFCUVZBc1JVRkJZanRCUVVOQkxHRkJRVXM1U1N4blFrRkJUQ3hEUVVGelFrTXNUVUZCZEVJN1FVRkRRVUVzWlVGQlQxSXNaMEpCUVZBc1EwRkJkMElzUzBGQlMwY3NVMEZCTjBJc1JVRkJkME1zUzBGQlMzRktMRTFCUVRkRExFVkJRWEZFTEV0QlFVdERMRTlCUVRGRUxFVkJRVzFGTEV0QlFVdERMRTFCUVhoRk8wRkJRMEVzWlVGQlQyeEtMRTFCUVZBN1FVRkRTQ3hMUVM5RFowSTdPMEZCYVVScVFtbENMSEZDUVVGblFpeDVRa0ZCVlVNc1RVRkJWaXhGUVVGclFqdEJRVU01UWpkRExGZEJRVWRETEdOQlFVZ3NRMEZCYTBKcFFpeFRRVUZzUWl4RFFVRTBRakJDTEdWQlFUVkNMRU5CUVRSRGVFSXNTVUZCTlVNc1EwRkJhVVFzU1VGQmFrUXNSVUZCZFVSNVFpeE5RVUYyUkR0QlFVTkJMRmxCUVVrMlJpeFZRVUZWTjBZc1QwRkJUelJHTEVOQlFYSkNPMEZCUTBFc1dVRkJTVVVzVlVGQlZUbEdMRTlCUVU4eVJpeERRVUZ5UWp0QlFVTkJMR0ZCUVV0R0xHbENRVUZNTEVOQlFYVkNSeXhEUVVGMlFpeEhRVUV5UWtNc1QwRkJNMEk3UVVGRFFTeGhRVUZMU2l4cFFrRkJUQ3hEUVVGMVFrVXNRMEZCZGtJc1IwRkJNa0pITEU5QlFUTkNPMEZCUTBFc1lVRkJTMDRzWTBGQlRDeERRVUZ2UWtrc1EwRkJjRUlzUjBGQmQwSkRMRTlCUVhoQ08wRkJRMEVzWVVGQlMwd3NZMEZCVEN4RFFVRnZRa2NzUTBGQmNFSXNSMEZCZDBKSExFOUJRWGhDTzBGQlEwZ3NTMEY2UkdkQ096dEJRVEpFYWtKb1J5eFpRVUZQTEdkQ1FVRlZUQ3hGUVVGV0xFVkJRV003UVVGRGFrSkJMR0ZCUVVzc1MwRkJTMFFzWjBKQlFVd3NRMEZCYzBKRExFVkJRWFJDTEVOQlFVdzdRVUZEUVN4WlFVRkpMRXRCUVV0UExFMUJRVlFzUlVGQmFVSTdRVUZEWWl4blFrRkJTV2xKTEU5QlFVOTRTU3hMUVVGTExFdEJRVXQxU1N4TlFVRldMRWRCUVcxQ0xFZEJRVGxDTzBGQlEwRXNaMEpCUVVseVF5eEpRVUZKTEV0QlFVdHZReXhQUVVGTUxFZEJRV1VzUTBGQlppeEhRVUZ0UWtVc1NVRkJia0lzU1VGQk1rSXNTVUZCU1VFc1NVRkJMMElzUTBGQlVqdEJRVU5CZEVNc2FVSkJRVXNzUzBGQlMyMURMRTFCUVV3c1EwRkJXVzVETEVOQlFWb3NSMEZCWjBKc1J5eEZRVUZ5UWpzN1FVRkZRU3huUWtGQlNXMUhMRWxCUVVrc1MwRkJTMnRETEUxQlFVd3NRMEZCV1d4RExFTkJRVm9zUjBGQlowSnVSeXhGUVVGNFFqdEJRVU5CTEdkQ1FVRkpjMGNzYlVKQlFXMUNMRXRCUVV0UUxHTkJRVFZDTzBGQlEwRXNaMEpCUVVseVNTeEhRVUZIZFVJc1MwRkJTQ3hEUVVGVGMwZ3NkMEpCUVdJc1JVRkJkVU03UVVGRGJrTXNiMEpCUVVsRExGVkJRVlVzUzBGQlMycEhMRTFCUVV3c1EwRkJXVFJHTEVOQlFURkNPMEZCUTBFc2IwSkJRVWxOTEZWQlFWVXNTMEZCUzJ4SExFMUJRVXdzUTBGQldUSkdMRU5CUVRGQ08wRkJRMEVzYjBKQlFVbFJMSE5DUVVGelFpeExRVUZMVml4cFFrRkJMMEk3TzBGQlJVRk5MR2xEUVVGcFFrZ3NRMEZCYWtJc1IwRkJjVUpITEdsQ1FVRnBRa2dzUTBGQmFrSXNSMEZCY1VKTExFOUJRWEpDTEVkQlFTdENSU3h2UWtGQmIwSlFMRU5CUVhoRk8wRkJRMEZITEdsRFFVRnBRa29zUTBGQmFrSXNSMEZCY1VKSkxHbENRVUZwUWtvc1EwRkJha0lzUjBGQmNVSlBMRTlCUVhKQ0xFZEJRU3RDUXl4dlFrRkJiMEpTTEVOQlFYaEZPMEZCUTBGRExHOUNRVUZKUVN4SlFVRkpSeXhwUWtGQmFVSklMRU5CUVhwQ08wRkJRMEZFTEc5Q1FVRkpRU3hKUVVGSlNTeHBRa0ZCYVVKS0xFTkJRWHBDTzBGQlEwaFJMRzlEUVVGdlFsQXNRMEZCY0VJc1IwRkJkMEpCTEVOQlFYaENPMEZCUTBGUExHOURRVUZ2UWxJc1EwRkJjRUlzUjBGQmQwSkJMRU5CUVhoQ08wRkJRMEVzY1VKQlFVc3pSaXhOUVVGTUxFTkJRVmx2Unl4WFFVRmFMRU5CUVhkQ1VpeERRVUY0UWl4RlFVRXlRa1FzUTBGQk0wSTdRVUZEUVN4aFFWcEVMRTFCV1U4N1FVRkRTQ3h4UWtGQlN6TkdMRTFCUVV3c1EwRkJXVzlITEZkQlFWb3NRMEZCZDBKTUxHbENRVUZwUWtnc1EwRkJha0lzUjBGQmNVSkJMRU5CUVRkRExFVkJRV2RFUnl4cFFrRkJhVUpLTEVOQlFXcENMRWRCUVhGQ1FTeERRVUZ5UlR0QlFVTklPMEZCUTBvN1FVRkRTaXhMUVhCR1owSTdPMEZCYzBacVFuaEhMR0ZCUVZFc2JVSkJRVms3UVVGRGFFSXNXVUZCU1V3c1UwRkJVeXhKUVVGSk0wSXNSMEZCUjNkTExFMUJRVkFzUTBGQll5eExRVUZMYkVvc1UwRkJia0lzUlVGQk9FSjBRaXhIUVVGSGIwa3NSVUZCU0N4RFFVRk5MRU5CUVVNc1MwRkJTM1ZETEUxQlFVd3NRMEZCV1d4RExFTkJRVzVDTEVWQlFYTkNMRU5CUVVNc1MwRkJTMnRETEUxQlFVd3NRMEZCV1c1RExFTkJRVzVETEVOQlFUbENMRVZCUVhGRkxFdEJRVXR2UXl4UFFVRXhSU3hGUVVGdFJpeExRVUZMUXl4TlFVRjRSaXhEUVVGaU8wRkJRMEVzWVVGQlMyNUtMR2RDUVVGTUxFTkJRWE5DUXl4TlFVRjBRanRCUVVOQkxHRkJRVXRETEdkQ1FVRk1MRU5CUVhOQ1JDeE5RVUYwUWp0QlFVTkJMR1ZCUVU5QkxFMUJRVkE3UVVGRFNEdEJRVE5HWjBJc1EwRkJWQ3hEUVVGYU96dEJRVGhHUVRzN096czdPenM3T3pzN096czdPenM3UVVGcFFrRXpRaXhIUVVGSEswc3NUVUZCU0N4SFFVRlpMRlZCUVZWb1JpeFJRVUZXTEVWQlFXOUNkME1zVVVGQmNFSXNSVUZCT0VKRExFTkJRVGxDTEVWQlFXbERhVU1zVFVGQmFrTXNSVUZCZVVORExFdEJRWHBETEVWQlFXZEVPMEZCUTNoRUxGZEJRVThzU1VGQlNURkxMRWRCUVVkM1N5eE5RVUZRTEVOQlFXTjZSU3hSUVVGa0xFVkJRWGRDZDBNc1VVRkJlRUlzUlVGQmEwTkRMRU5CUVd4RExFVkJRWEZEYVVNc1RVRkJja01zUlVGQk5rTkRMRXRCUVRkRExFTkJRVkE3UVVGRFNDeERRVVpFT3p0QlFVbEJPenM3T3pzN096czdPenM3T3p0QlFXTkJNVXNzUjBGQlIyZE1MRTFCUVVnc1IwRkJXV2hNTEVkQlFVZEZMRXRCUVVnc1EwRkJVenRCUVVOcVFrTXNWVUZCVFN4WFFVUlhPMEZCUldwQ1F5eGhRVUZUU2l4SFFVRkhkMHNzVFVGR1N6czdRVUZKYWtKc1N5eFZRVUZMTEdOQlFWVjVSaXhSUVVGV0xFVkJRVzlDZDBNc1VVRkJjRUlzUlVGQk9FSkRMRU5CUVRsQ0xFVkJRV2xEYVVNc1RVRkJha01zUlVGQmVVTkRMRXRCUVhwRExFVkJRV2RFTzBGQlEycEVMR0ZCUVV0MFFpeFpRVUZNTEVkQlFXOUNjRW9zUjBGQlIyOUpMRVZCUVVnc1EwRkJUU3hEUVVGT0xFVkJRVk1zUTBGQlZDeERRVUZ3UWp0QlFVTkJjVU1zYlVKQlFWZDRTaXhUUVVGWUxFbEJRWGRDTEV0QlFVdEZMR2RDUVVGTUxFTkJRWE5DTkVVc1VVRkJkRUlzUlVGQlowTjNReXhSUVVGb1F5eEZRVUV3UTBNc1EwRkJNVU1zUlVGQk5rTnBReXhOUVVFM1F5eEZRVUZ4UkVNc1MwRkJja1FzUTBGQmVFSTdRVUZEU0N4TFFWQm5RanRCUVZGcVFqczdPenM3T3pzN096czdPMEZCV1VGMlNpeHpRa0ZCYVVJc01FSkJRVlUwUlN4UlFVRldMRVZCUVc5Q2QwTXNVVUZCY0VJc1JVRkJPRUpETEVOQlFUbENMRVZCUVdsRGFVTXNUVUZCYWtNc1JVRkJlVU5ETEV0QlFYcERMRVZCUVdkRU8wRkJRemRFTEZsQlFVa3hTeXhIUVVGSGQwc3NUVUZCU0N4RFFVRlZkRW9zVTBGQlZpeERRVUZ2UWtNc1owSkJRWEJDTEVOQlFYRkRReXhKUVVGeVF5eERRVUV3UXl4SlFVRXhReXhGUVVGblJESkZMRkZCUVdoRUxFVkJRVEJFZDBNc1VVRkJNVVFzUlVGQmIwVkRMRU5CUVhCRkxFVkJRWFZGYVVNc1RVRkJka1VzUlVGQkswVkRMRXRCUVM5RkxFTkJRVW9zUlVGQk1rWTdRVUZEZGtZc1owSkJRVWxCTEZWQlFWVjZTaXhUUVVGa0xFVkJRWGxDTzBGQlEzSkNkVWdzYjBKQlFVbEVMRk5CUVZORExFTkJRV0k3UVVGRFFVUXNNa0pCUVZkQkxGTkJRVk5GTEVOQlFYQkNPMEZCUTBnN1FVRkRSQ3hwUWtGQlMxY3NXVUZCVEN4RFFVRnJRbGdzUTBGQmJFSXNSMEZCYzBKR0xGRkJRWFJDTzBGQlEwRXNhVUpCUVV0aExGbEJRVXdzUTBGQmEwSmFMRU5CUVd4Q0xFZEJRWE5DUVN4RFFVRjBRanRCUVVOQkxHMUNRVUZQTEVsQlFWQTdRVUZEU0R0QlFVTkVMR1ZCUVU4c1MwRkJVRHRCUVVOSUxFdEJMMEpuUWpzN1FVRnBRMnBDTlVZc2NVSkJRV2RDTEhsQ1FVRlZReXhOUVVGV0xFVkJRV3RDTzBGQlF6bENOME1zVjBGQlIzZExMRTFCUVVnc1EwRkJWWFJLTEZOQlFWWXNRMEZCYjBJd1FpeGxRVUZ3UWl4RFFVRnZRM2hDTEVsQlFYQkRMRU5CUVhsRExFbEJRWHBETEVWQlFTdERlVUlzVFVGQkwwTTdRVUZEUVN4aFFVRkxPRWdzVFVGQlRDeERRVUZaYkVNc1EwRkJXaXhIUVVGblFpeExRVUZMVnl4WlFVRk1MRU5CUVd0Q1dDeERRVUZzUWl4SFFVRnpRaXhMUVVGTFNpeGpRVUZNTEVOQlFXOUNTU3hEUVVFeFJEdEJRVU5CTEdGQlFVdHJReXhOUVVGTUxFTkJRVmx1UXl4RFFVRmFMRWRCUVdkQ0xFdEJRVXRaTEZsQlFVd3NRMEZCYTBKYUxFTkJRV3hDTEVkQlFYTkNMRXRCUVV0SUxHTkJRVXdzUTBGQmIwSkhMRU5CUVRGRU8wRkJRMGdzUzBGeVEyZENPenRCUVhWRGFrSjJSeXhYUVVGTkxHbENRVUZaTzBGQlEyUXNXVUZCU1U0c1UwRkJVeXhKUVVGSk0wSXNSMEZCUjJkTUxFMUJRVkFzUlVGQllqdEJRVU5CTEdGQlFVdDBTaXhuUWtGQlRDeERRVUZ6UWtNc1RVRkJkRUk3UVVGRFFVRXNaVUZCVDFJc1owSkJRVkFzUTBGQmQwSXNTMEZCUzBjc1UwRkJOMElzUlVGQmQwTXNTMEZCU3poSUxGbEJRVGRETEVWQlFUSkVMRXRCUVV0M1FpeFBRVUZvUlN4RlFVRjVSU3hMUVVGTFF5eE5RVUU1UlR0QlFVTkJMR1ZCUVU5c1NpeE5RVUZRTzBGQlEwZzdRVUUxUTJkQ0xFTkJRVlFzUTBGQldqczdRVUVyUTBFN096czdPenM3T3pzN096czdPenM3TzBGQmFVSkJNMElzUjBGQlIybE1MRTFCUVVnc1IwRkJXU3hWUVVGVmJFWXNVVUZCVml4RlFVRnZRbmRETEZGQlFYQkNMRVZCUVRoQ1F5eERRVUU1UWl4RlFVRnBRMmxETEUxQlFXcERMRVZCUVhsRFF5eExRVUY2UXl4RlFVRm5SRHRCUVVONFJDeFhRVUZQTEVsQlFVa3hTeXhIUVVGSFowd3NUVUZCVUN4RFFVRmpha1lzVVVGQlpDeEZRVUYzUW5kRExGRkJRWGhDTEVWQlFXdERReXhEUVVGc1F5eEZRVUZ4UTJsRExFMUJRWEpETEVWQlFUWkRReXhMUVVFM1F5eERRVUZRTzBGQlEwZ3NRMEZHUkRzN1FVRkpRVHM3T3pzN096czdPenRCUVZWQkxGTkJRVk5STEZGQlFWUXNRMEZCYlVKRExFTkJRVzVDTEVWQlFYTkNReXhEUVVGMFFpeEZRVUY1UWtNc1EwRkJla0lzUlVGQk5FSTVTeXhEUVVFMVFpeEZRVUVyUW0xRExFTkJRUzlDTEVWQlFXdERPMEZCUXpsQ0xGZEJRVkZqTEV0QlFVczRTQ3hIUVVGTUxFTkJRVk1zU1VGQlNUVkpMRU5CUVdJc1JVRkJaMElzUTBGQmFFSXNTVUZCY1VKNVNTeERRVUZ5UWl4SFFVTktMRWxCUVVsNlNTeERRVUZLTEVkQlFWTmpMRXRCUVVzNFNDeEhRVUZNTEVOQlFWTXNTVUZCU1RWSkxFTkJRV0lzUlVGQlowSXNRMEZCYUVJc1EwRkJWQ3hIUVVFclFqQkpMRU5CUkROQ0xFZEJSVW9zU1VGQlNUVklMRXRCUVVzNFNDeEhRVUZNTEVOQlFWTTFTU3hEUVVGVUxFVkJRVmtzUTBGQldpeERRVUZLTEVsQlFYTkNMRWxCUVVsQkxFTkJRVEZDTEVsQlFTdENNa2tzUTBGR00wSXNSMEZIU2pkSUxFdEJRVXM0U0N4SFFVRk1MRU5CUVZNMVNTeERRVUZVTEVWQlFWa3NRMEZCV2l4SlFVRnBRbTVETEVOQlNISkNPMEZCU1VnN1FVRkRSRkFzUjBGQlIzVk1MRkZCUVVnc1IwRkJZM1pNTEVkQlFVZEZMRXRCUVVnc1EwRkJVenRCUVVOdVFrTXNWVUZCVFN4aFFVUmhPMEZCUlc1Q1F5eGhRVUZUU2l4SFFVRkhReXhqUVVaUE96dEJRVWx1UWtzc1ZVRkJTeXhqUVVGVmIwTXNRMEZCVml4RlFVRmhNa2tzUTBGQllpeEZRVUZuUWp0QlFVTnFRaXhoUVVGTFJ5eFBRVUZNTEVkQlFXVXNSVUZCWmp0QlFVTkJMR0ZCUVV0dVJDeGpRVUZNTEVkQlFYTkNja2tzUjBGQlIyOUpMRVZCUVVnc1EwRkJUU3hEUVVGT0xFVkJRVk1zUTBGQlZDeERRVUYwUWp0QlFVTkJMR0ZCUVV0RkxHbENRVUZNTEVkQlFYbENkRWtzUjBGQlIyOUpMRVZCUVVnc1EwRkJUU3hEUVVGT0xFVkJRVk1zUTBGQlZDeERRVUY2UWp0QlFVTkJhVVFzWVVGQlMzSk1MRWRCUVVkMVRDeFJRVUZJTEVOQlFWbHlTeXhUUVVGYUxFTkJRWE5DUXl4blFrRkJkRUlzUTBGQmRVTkRMRWxCUVhaRExFTkJRVFJETEVsQlFUVkRMRVZCUVd0RWMwSXNRMEZCYkVRc1JVRkJjVVF5U1N4RFFVRnlSQ3hEUVVGTU8wRkJRMGdzUzBGVWEwSTdPMEZCVjI1Q096czdPenM3UVVGTlFXeExMSE5DUVVGcFFpd3dRa0ZCVlhWQ0xFTkJRVllzUlVGQllUSkpMRU5CUVdJc1JVRkJaMEk3UVVGRE4wSXNXVUZCU1hKTUxFZEJRVWRETEdOQlFVZ3NRMEZCYTBKcFFpeFRRVUZzUWl4RFFVRTBRa01zWjBKQlFUVkNMRU5CUVRaRFF5eEpRVUUzUXl4RFFVRnJSQ3hKUVVGc1JDeEZRVUYzUkhOQ0xFTkJRWGhFTEVOQlFVb3NSVUZCWjBVN1FVRkROVVFzYVVKQlFVczRTU3hQUVVGTUxFZEJRV1ZJTEVOQlFXWTdRVUZEUVN4dFFrRkJUeXhKUVVGUU8wRkJRMGc3UVVGRFJDeGxRVUZQTEV0QlFWQTdRVUZEU0N4TFFYWkNhMEk3TzBGQmVVSnVRbkJLTEZkQlFVMHNhVUpCUVZrN1FVRkRaQ3haUVVGSlRpeFRRVUZUTEVsQlFVa3pRaXhIUVVGSGRVd3NVVUZCVUN4RlFVRmlPMEZCUTBFc1lVRkJTemRLTEdkQ1FVRk1MRU5CUVhOQ1F5eE5RVUYwUWp0QlFVTkJMRmxCUVVrNFNpeGhRVUZoTEVWQlFXcENPMEZCUTBFc1lVRkJTeXhKUVVGSk5Vb3NTVUZCU1N4RFFVRmlMRVZCUVdkQ1FTeEpRVUZKTEV0QlFVc3lTaXhQUVVGTUxFTkJRV0V4U2l4TlFVRnFReXhGUVVGNVEwUXNSMEZCZWtNc1JVRkJPRU03UVVGRE1VTXNaMEpCUVVrMlNpeFZRVUZWTEV0QlFVdEdMRTlCUVV3c1EwRkJZVE5LTEVOQlFXSXNRMEZCWkR0QlFVTkJORW9zZFVKQlFWY3hTaXhKUVVGWUxFTkJRV2RDTDBJc1IwRkJSMjlKTEVWQlFVZ3NRMEZCVFhORUxGRkJRVkZxUkN4RFFVRmtMRVZCUVdsQ2FVUXNVVUZCVVd4RUxFTkJRWHBDTEVOQlFXaENPMEZCUTBnN1FVRkRSRGRITEdWQlFVOVNMR2RDUVVGUUxFTkJRWGRDTEV0QlFVdEhMRk5CUVRkQ0xFVkJRWGREYlVzc1ZVRkJlRU03UVVGRFFTeGxRVUZQT1Vvc1RVRkJVRHRCUVVOSUxFdEJia05yUWpzN1FVRnhRMjVDYVVJc2NVSkJRV2RDTEhsQ1FVRlZReXhOUVVGV0xFVkJRV3RDTzBGQlF6bENOME1zVjBGQlIwTXNZMEZCU0N4RFFVRnJRbWxDTEZOQlFXeENMRU5CUVRSQ01FSXNaVUZCTlVJc1EwRkJORU40UWl4SlFVRTFReXhEUVVGcFJDeEpRVUZxUkN4RlFVRjFSSGxDTEUxQlFYWkVPMEZCUTBFc1dVRkJTVFpHTEZWQlFWVTNSaXhQUVVGUE5FWXNRMEZCY2tJN1FVRkRRU3haUVVGSlJTeFZRVUZWT1VZc1QwRkJUekpHTEVOQlFYSkNPMEZCUTBFc1lVRkJTMFlzYVVKQlFVd3NRMEZCZFVKSExFTkJRWFpDTEVkQlFUSkNReXhQUVVFelFqdEJRVU5CTEdGQlFVdEtMR2xDUVVGTUxFTkJRWFZDUlN4RFFVRjJRaXhIUVVFeVFrY3NUMEZCTTBJN1FVRkRRU3hoUVVGTFRpeGpRVUZNTEVOQlFXOUNTU3hEUVVGd1FpeEhRVUYzUWtNc1QwRkJlRUk3UVVGRFFTeGhRVUZMVEN4alFVRk1MRU5CUVc5Q1J5eERRVUZ3UWl4SFFVRjNRa2NzVDBGQmVFSTdRVUZEU0N4TFFUZERhMEk3TzBGQkswTnVRbWhITEZsQlFVOHNaMEpCUVZWTUxFVkJRVllzUlVGQll6dEJRVU5xUWtFc1lVRkJTeXhMUVVGTFJDeG5Ra0ZCVEN4RFFVRnpRa01zUlVGQmRFSXNRMEZCVER0QlFVTkJMRmxCUVVrc1MwRkJTMDhzVFVGQlZDeEZRVUZwUWp0QlFVTmlMR2RDUVVGSk9Fa3NXVUZCV1N4TFFVRkxTQ3hQUVVGeVFqdEJRVU5CTEdkQ1FVRkpTU3hMUVVGTExFTkJRVlE3UVVGRFFTeG5Ra0ZCU1VNc1MwRkJTMFlzVlVGQlZTeERRVUZXTEVWQlFXRnNSQ3hEUVVGMFFqdEJRVU5CTEdkQ1FVRkpjVVFzUzBGQlMwZ3NWVUZCVlN4RFFVRldMRVZCUVdGc1JDeERRVUYwUWp0QlFVTkJMR2RDUVVGSmMwUXNTMEZCUzBvc1ZVRkJWU3hEUVVGV0xFVkJRV0ZzUkN4RFFVRjBRanM3UVVGRlFTeG5Ra0ZCU1hWRUxFdEJRVXNzUTBGQlZEdEJRVU5CTEdkQ1FVRkpReXhMUVVGTFRpeFZRVUZWTEVOQlFWWXNSVUZCWVc1RUxFTkJRWFJDTzBGQlEwRXNaMEpCUVVrd1JDeExRVUZMVUN4VlFVRlZMRU5CUVZZc1JVRkJZVzVFTEVOQlFYUkNPMEZCUTBFc1owSkJRVWt5UkN4TFFVRkxVaXhWUVVGVkxFTkJRVllzUlVGQllXNUVMRU5CUVhSQ096dEJRVVZCTEdkQ1FVRkpReXhKUVVGSmVVTXNVMEZCVTFVc1JVRkJWQ3hGUVVGaFF5eEZRVUZpTEVWQlFXbENReXhGUVVGcVFpeEZRVUZ4UWtNc1JVRkJja0lzUlVGQmVVSjZTaXhGUVVGNlFpeERRVUZTTzBGQlEwRXNaMEpCUVVsclJ5eEpRVUZKTUVNc1UwRkJVMk1zUlVGQlZDeEZRVUZoUXl4RlFVRmlMRVZCUVdsQ1F5eEZRVUZxUWl4RlFVRnhRa01zUlVGQmNrSXNSVUZCZVVJM1NpeEZRVUY2UWl4RFFVRlNPenRCUVVWQkxHZENRVUZKYzBjc2JVSkJRVzFDTEV0QlFVdFFMR05CUVRWQ08wRkJRMEVzWjBKQlFVbHlTU3hIUVVGSGRVSXNTMEZCU0N4RFFVRlRjMGdzZDBKQlFXSXNSVUZCZFVNN1FVRkRia01zYjBKQlFVbERMRlZCUVZVc1MwRkJTMnBITEUxQlFVd3NRMEZCV1RSR0xFTkJRVEZDTzBGQlEwRXNiMEpCUVVsTkxGVkJRVlVzUzBGQlMyeEhMRTFCUVV3c1EwRkJXVEpHTEVOQlFURkNPMEZCUTBFc2IwSkJRVWxSTEhOQ1FVRnpRaXhMUVVGTFZpeHBRa0ZCTDBJN08wRkJSVUZOTEdsRFFVRnBRa2dzUTBGQmFrSXNSMEZCY1VKSExHbENRVUZwUWtnc1EwRkJha0lzUjBGQmNVSkxMRTlCUVhKQ0xFZEJRU3RDUlN4dlFrRkJiMEpRTEVOQlFYaEZPMEZCUTBGSExHbERRVUZwUWtvc1EwRkJha0lzUjBGQmNVSkpMR2xDUVVGcFFrb3NRMEZCYWtJc1IwRkJjVUpQTEU5QlFYSkNMRWRCUVN0Q1F5eHZRa0ZCYjBKU0xFTkJRWGhGTzBGQlEwRkRMRzlDUVVGSlFTeEpRVUZKUnl4cFFrRkJhVUpJTEVOQlFYcENPMEZCUTBGRUxHOUNRVUZKUVN4SlFVRkpTU3hwUWtGQmFVSktMRU5CUVhwQ08wRkJRMGhSTEc5RFFVRnZRbEFzUTBGQmNFSXNSMEZCZDBKQkxFTkJRWGhDTzBGQlEwRlBMRzlEUVVGdlFsSXNRMEZCY0VJc1IwRkJkMEpCTEVOQlFYaENPMEZCUTBFc2NVSkJRVXN6Uml4TlFVRk1MRU5CUVZsdlJ5eFhRVUZhTEVOQlFYZENVaXhEUVVGNFFpeEZRVUV5UWtRc1EwRkJNMEk3UVVGRFFTeGhRVnBFTEUxQldVODdRVUZEU0N4eFFrRkJTek5HTEUxQlFVd3NRMEZCV1c5SExGZEJRVm9zUTBGQmQwSk1MR2xDUVVGcFFrZ3NRMEZCYWtJc1IwRkJjVUpCTEVOQlFUZERMRVZCUVdkRVJ5eHBRa0ZCYVVKS0xFTkJRV3BDTEVkQlFYRkNRU3hEUVVGeVJUdEJRVU5JTzBGQlEwbzdRVUZEU2l4TFFXcEdhMEk3TzBGQmJVWnVRbmhITEdGQlFWRXNiVUpCUVZrN1FVRkRhRUlzV1VGQlNUSktMRmxCUVZrc1MwRkJTMGdzVDBGQmNrSTdRVUZEUVN4WlFVRkpXU3hMUVVGTFZDeFZRVUZWTEVOQlFWWXNSVUZCWVd4RUxFTkJRWFJDTzBGQlFVRXNXVUZCZVVJMFJDeExRVUZMVml4VlFVRlZMRU5CUVZZc1JVRkJZVzVFTEVOQlFUTkRPMEZCUTBFc1dVRkJTVGhFTEV0QlFVdFlMRlZCUVZVc1EwRkJWaXhGUVVGaGJFUXNRMEZCZEVJN1FVRkJRU3haUVVGNVFqaEVMRXRCUVV0YUxGVkJRVlVzUTBGQlZpeEZRVUZoYmtRc1EwRkJNME03UVVGRFFTeFpRVUZKWjBVc1MwRkJTMklzVlVGQlZTeERRVUZXTEVWQlFXRnNSQ3hEUVVGMFFqdEJRVUZCTEZsQlFYbENaMFVzUzBGQlMyUXNWVUZCVlN4RFFVRldMRVZCUVdGdVJDeERRVUV6UXp0QlFVTkJMRmxCUVVsclJTeEpRVUZKTEVOQlEwb3hUU3hIUVVGSGIwa3NSVUZCU0N4RFFVRk5hMFVzUzBGQlMwVXNSVUZCV0N4RlFVRmxSQ3hMUVVGTFJTeEZRVUZ3UWl4RFFVUkpMRVZCUlVwNlRTeEhRVUZIYjBrc1JVRkJTQ3hEUVVGTlowVXNTMEZCUzBrc1JVRkJXQ3hGUVVGbFNDeExRVUZMU1N4RlFVRndRaXhEUVVaSkxFVkJSMHA2VFN4SFFVRkhiMGtzUlVGQlNDeERRVUZOTEVOQlFVTnZSU3hGUVVGUUxFVkJRVmNzUTBGQlEwTXNSVUZCV2l4RFFVaEpMRU5CUVZJN1FVRkpRU3haUVVGSk9Vc3NVMEZCVXl4SlFVRkpNMElzUjBGQlIzVk1MRkZCUVZBc1EwRkJaMElzUzBGQlMycExMRk5CUVhKQ0xFVkJRV2REYjB3c1EwRkJhRU1zUTBGQllqdEJRVU5CTEdGQlFVdG9UQ3huUWtGQlRDeERRVUZ6UWtNc1RVRkJkRUk3UVVGRFFTeGhRVUZMUXl4blFrRkJUQ3hEUVVGelFrUXNUVUZCZEVJN1FVRkRRU3hsUVVGUFFTeE5RVUZRTzBGQlEwZzdRVUZvUjJ0Q0xFTkJRVlFzUTBGQlpEczdRVUZ0UjBFN096czdPenM3T3pzN096czdPMEZCWTBFelFpeEhRVUZITWswc1VVRkJTQ3hIUVVGakxGVkJRVlZxU3l4RFFVRldMRVZCUVdFeVNTeERRVUZpTEVWQlFXZENPMEZCUXpGQ0xGZEJRVThzU1VGQlNYSk1MRWRCUVVkMVRDeFJRVUZRTEVOQlFXZENOMGtzUTBGQmFFSXNSVUZCYlVJeVNTeERRVUZ1UWl4RFFVRlFPMEZCUTBnc1EwRkdSRHM3UVVGTFFUczdPenM3T3pzN08wRkJVMEZ5VEN4SFFVRkhORTBzVVVGQlNDeEhRVUZqTlUwc1IwRkJSMFVzUzBGQlNDeERRVUZUTzBGQlEyNUNReXhWUVVGTkxHRkJSR0U3UVVGRmJrSkRMR0ZCUVZOS0xFZEJRVWQxVEN4UlFVWlBPenRCUVVsdVFtcE1MRlZCUVVzc1kwRkJWVzlETEVOQlFWWXNSVUZCWVRKSkxFTkJRV0lzUlVGQlowSTdRVUZEYWtJc1lVRkJTM2RDTEZOQlFVd3NSMEZCYVVJc1JVRkJha0k3UVVGRFRuaENMR0ZCUVVzc1MwRkJTMnhMTEdkQ1FVRk1MRU5CUVhOQ2RVSXNRMEZCZEVJc1JVRkJlVUl5U1N4RFFVRjZRaXhEUVVGTU8wRkJRMGNzUzBGUWEwSTdPMEZCVTI1Q096czdPenM3UVVGTlFXeExMSE5DUVVGcFFpd3dRa0ZCVlhWQ0xFTkJRVllzUlVGQllUSkpMRU5CUVdJc1JVRkJaMEk3UVVGRE4wSXNXVUZCU1hKTUxFZEJRVWRETEdOQlFVZ3NRMEZCYTBKcFFpeFRRVUZzUWl4RFFVRTBRa01zWjBKQlFUVkNMRU5CUVRaRFF5eEpRVUUzUXl4RFFVRnJSQ3hKUVVGc1JDeEZRVUYzUkhOQ0xFTkJRWGhFTEVOQlFVb3NSVUZCWjBVN1FVRkROVVFzYVVKQlFVdHRTeXhUUVVGTUxFZEJRV2xDZUVJc1EwRkJha0k3UVVGRFFTeHRRa0ZCVHl4SlFVRlFPMEZCUTBnN1FVRkRSQ3hsUVVGUExFdEJRVkE3UVVGRFNDeExRWEpDYTBJN08wRkJkVUp1UW5CS0xGZEJRVTBzYVVKQlFWazdRVUZEWkN4WlFVRkpUaXhUUVVGVExFbEJRVWt6UWl4SFFVRkhORTBzVVVGQlVDeEZRVUZpTzBGQlEwRXNZVUZCUzJ4TUxHZENRVUZNTEVOQlFYTkNReXhOUVVGMFFqdEJRVU5CUVN4bFFVRlBVaXhuUWtGQlVDeERRVUYzUWl4TFFVRkxSeXhUUVVFM1FpeEZRVUYzUXl4TFFVRkxkVXdzVTBGQk4wTTdRVUZEUVN4bFFVRlBiRXdzVFVGQlVEdEJRVU5JTEV0Qk5VSnJRanM3UVVFNFFtNUNhVUlzY1VKQlFXZENMSGxDUVVGVlF5eE5RVUZXTEVWQlFXdENPMEZCUXpsQ04wTXNWMEZCUjNWTUxGRkJRVWdzUTBGQldYSkxMRk5CUVZvc1EwRkJjMEl3UWl4bFFVRjBRaXhEUVVGelEzaENMRWxCUVhSRExFTkJRVEpETEVsQlFUTkRMRVZCUVdsRWVVSXNUVUZCYWtRN1FVRkRRU3haUVVGSmFVc3NZMEZCWXl4TFFVRkxla1VzWTBGQmRrSTdRVUZEUVN4WlFVRkpNRVVzWTBGQll5eExRVUZMUml4VFFVRjJRanRCUVVOQkxGbEJRVWxzUWl4WlFVRlpMRXRCUVV0SUxFOUJRWEpDT3p0QlFVVkJSeXhyUWtGQlZTeERRVUZXTEVsQlFXVnZRaXhaUVVGWkxFTkJRVm9zUlVGQlpVTXNSMEZCWml4RFFVRnRRa1lzVjBGQmJrSXNRMEZCWmp0QlFVTkJia0lzYTBKQlFWVXNRMEZCVml4SlFVRmxiMElzV1VGQldTeERRVUZhTEVWQlFXVkRMRWRCUVdZc1EwRkJiVUpHTEZkQlFXNUNMRU5CUVdZN1FVRkRRVzVDTEd0Q1FVRlZMRU5CUVZZc1NVRkJaVzlDTEZsQlFWa3NRMEZCV2l4RlFVRmxReXhIUVVGbUxFTkJRVzFDUml4WFFVRnVRaXhEUVVGbU8wRkJRMGc3UVVGMlEydENMRU5CUVZRc1EwRkJaRHRCUVhsRFFUczdPenM3T3pzN096czdPMEZCV1VFNVRTeEhRVUZIYVU0c1VVRkJTQ3hIUVVGakxGVkJRVlYyU3l4RFFVRldMRVZCUVdFeVNTeERRVUZpTEVWQlFXZENPMEZCUXpGQ0xGZEJRVThzU1VGQlNYSk1MRWRCUVVjMFRTeFJRVUZRTEVOQlFXZENiRXNzUTBGQmFFSXNSVUZCYlVJeVNTeERRVUZ1UWl4RFFVRlFPMEZCUTBnc1EwRkdSRHM3UVVGTFFUczdPenM3T3pzN096czdPenM3UVVGalFYSk1MRWRCUVVkclRpeFBRVUZJTEVkQlFXRnNUaXhIUVVGSFJTeExRVUZJTEVOQlFWTTdRVUZEYkVKRExGVkJRVTBzV1VGRVdUdEJRVVZzUWtNc1lVRkJVMG9zUjBGQlIwTXNZMEZHVFRzN1FVRkpiRUpMTEZWQlFVc3NZMEZCVlhsR0xGRkJRVllzUlVGQmIwSjNSQ3hGUVVGd1FpeEZRVUYzUWtNc1JVRkJlRUlzUlVGQk5FSTdRVUZETjBJc1lVRkJTekpFTEU5QlFVd3NSMEZCWlN4RFFVRm1PMEZCUTBFc1lVRkJTME1zVDBGQlRDeEhRVUZsTEVOQlFXWTdRVUZEUVN4aFFVRkxReXhaUVVGTUxFZEJRVzlDTEVOQlFYQkNPMEZCUTBFc1lVRkJTME1zV1VGQlRDeEhRVUZ2UWl4RFFVRndRanRCUVVOQkxHRkJRVXRETEZWQlFVd3NSMEZCYTBJc1EwRkJiRUk3UVVGRFFTeGhRVUZMUXl4VlFVRk1MRWRCUVd0Q0xFTkJRV3hDTzBGQlEwRXNZVUZCUzNwRUxFOUJRVXdzUjBGQlpTeERRVUZtTzBGQlEwRXNZVUZCUzBNc1QwRkJUQ3hIUVVGbExFTkJRV1k3UVVGRFFWUXNaVUZCVDNSSkxGTkJRVkFzU1VGQmIwSnFRaXhIUVVGSGEwNHNUMEZCU0N4RFFVRlhhRTBzVTBGQldDeERRVUZ4UWtNc1owSkJRWEpDTEVOQlFYTkRReXhKUVVGMFF5eERRVUV5UXl4SlFVRXpReXhGUVVGcFJESkZMRkZCUVdwRUxFVkJRVEpFZDBRc1JVRkJNMFFzUlVGQkswUkRMRVZCUVM5RUxFTkJRWEJDTzBGQlEwZ3NTMEZrYVVJN08wRkJaMEpzUWpzN096czdPenRCUVU5QmNra3NjMEpCUVdsQ0xEQkNRVUZWTkVVc1VVRkJWaXhGUVVGdlFuZEVMRVZCUVhCQ0xFVkJRWGRDUXl4RlFVRjRRaXhGUVVFMFFqdEJRVUZGTzBGQlF6TkRMRmxCUVVsNFNpeEhRVUZIUXl4alFVRklMRU5CUVd0Q2FVSXNVMEZCYkVJc1EwRkJORUpETEdkQ1FVRTFRaXhEUVVFMlEwTXNTVUZCTjBNc1EwRkJhMFFzU1VGQmJFUXNSVUZCZDBReVJTeFJRVUY0UkN4RFFVRktMRVZCUVhWRk8wRkJRMjVGTEdsQ1FVRkxkMGdzVlVGQlRDeEhRVUZyUW1oRkxFVkJRV3hDTzBGQlEwRXNhVUpCUVV0cFJTeFZRVUZNTEVkQlFXMUNhRVVzVFVGQlRTeEpRVUZRTEVkQlFXVkJMRVZCUVdZc1IwRkJiMEpFTEVWQlFYUkRPMEZCUTBFc2JVSkJRVThzU1VGQlVEdEJRVU5JTzBGQlEwUXNaVUZCVHl4TFFVRlFPMEZCUTBnc1MwRTVRbWxDT3p0QlFXZERiRUowU0N4WFFVRk5MR2xDUVVGWk8wRkJRMlFzV1VGQlNVNHNVMEZCVXl4SlFVRkpNMElzUjBGQlIydE9MRTlCUVZBc1JVRkJZanRCUVVOQkxHRkJRVXQ0VEN4blFrRkJUQ3hEUVVGelFrTXNUVUZCZEVJN1FVRkRRVUVzWlVGQlQxSXNaMEpCUVZBc1EwRkJkMElzUzBGQlMwY3NVMEZCTjBJc1JVRkJkME1zUzBGQlMybE5MRlZCUVRkRExFVkJRWGxFTEV0QlFVdERMRlZCUVRsRU8wRkJRMEVzWlVGQlR6ZE1MRTFCUVZBN1FVRkRTQ3hMUVhKRGFVSTdPMEZCZFVOc1FtbENMSEZDUVVGblFpeDVRa0ZCVlVNc1RVRkJWaXhGUVVGclFqdEJRVU01UWpkRExGZEJRVWRETEdOQlFVZ3NRMEZCYTBKcFFpeFRRVUZzUWl4RFFVRTBRakJDTEdWQlFUVkNMRU5CUVRSRGVFSXNTVUZCTlVNc1EwRkJhVVFzU1VGQmFrUXNSVUZCZFVSNVFpeE5RVUYyUkR0QlFVTkJMR0ZCUVV0M1N5eFpRVUZNTEVkQlFXOUNlRXNzVDBGQlR6UkxMRTFCUVROQ08wRkJRMEVzWVVGQlMwZ3NXVUZCVEN4SFFVRnZRbnBMTEU5QlFVODJTeXhOUVVFelFqdEJRVU5CTEdGQlFVc3pSQ3hQUVVGTUxFZEJRV1VzUzBGQlMzZEVMRlZCUVV3c1IwRkJhMElzUzBGQlMwWXNXVUZCZEVNN1FVRkRRU3hoUVVGTGNrUXNUMEZCVEN4SFFVRmxMRXRCUVV0M1JDeFZRVUZNTEVkQlFXdENMRXRCUVV0R0xGbEJRWFJETzBGQlEwZ3NTMEUzUTJsQ096dEJRU3REYkVJelN5eFpRVUZQTEdkQ1FVRlZUQ3hGUVVGV0xFVkJRV003UVVGRGFrSkJMR0ZCUVVzc1MwRkJTMFFzWjBKQlFVd3NRMEZCYzBKRExFVkJRWFJDTEVOQlFVdzdRVUZEUVN4WlFVRkpMRXRCUVV0UExFMUJRVlFzUlVGQmFVSTdRVUZEWWl4cFFrRkJTMEVzVFVGQlRDeERRVUZaTkVzc1RVRkJXaXhIUVVGeFFpeExRVUZMU2l4WlFVRk1MRWRCUVc5Q0xFdEJRVXQwUkN4UFFVRk1MRWRCUVdWNlNDeEZRVUY0UkR0QlFVTklMR2xDUVVGTFR5eE5RVUZNTEVOQlFWazJTeXhOUVVGYUxFZEJRWEZDTEV0QlFVdEtMRmxCUVV3c1IwRkJiMElzUzBGQlMzUkVMRTlCUVV3c1IwRkJaVEZJTEVWQlFYaEVPMEZCUTBFN1FVRkRTanRCUVhKRWFVSXNRMEZCVkN4RFFVRmlPMEZCZFVSQk96czdPenM3T3pzN096czdPenM3TzBGQlowSkJkRU1zUjBGQlJ6Sk9MRTlCUVVnc1IwRkJZU3hWUVVGVk5VZ3NVVUZCVml4RlFVRnZRbmRFTEVWQlFYQkNMRVZCUVhkQ1F5eEZRVUY0UWl4RlFVRTBRanRCUVVGRk8wRkJRM1pETEZkQlFVOHNTVUZCU1hoS0xFZEJRVWRyVGl4UFFVRlFMRU5CUVdWdVNDeFJRVUZtTEVWQlFYbENkMFFzUlVGQmVrSXNSVUZCTmtKRExFVkJRVGRDTEVOQlFWQTdRVUZEU0N4RFFVWkVPenRCUVV0Qk96czdPenRCUVV0QmVFb3NSMEZCUnpST0xFOUJRVWdzUjBGQllUVk9MRWRCUVVkRkxFdEJRVWdzUTBGQlV6dEJRVU5zUWtNc1ZVRkJUU3haUVVSWk8wRkJSV3hDUXl4aFFVRlRTaXhIUVVGSGEwNHNUMEZHVFRzN1FVRkpiRUowU3l4eFFrRkJaMElzZVVKQlFWVkRMRTFCUVZZc1JVRkJhMEk3UVVGRE9VSTNReXhYUVVGSGEwNHNUMEZCU0N4RFFVRlhhRTBzVTBGQldDeERRVUZ4UWpCQ0xHVkJRWEpDTEVOQlFYRkRlRUlzU1VGQmNrTXNRMEZCTUVNc1NVRkJNVU1zUlVGQlowUjVRaXhOUVVGb1JEdEJRVU5CTEdGQlFVdHJTQ3hQUVVGTUxFZEJRV1VzUzBGQlMzTkVMRmxCUVV3c1IwRkJiMElzUzBGQlMwVXNWVUZCZWtJc1IwRkJjME1zUzBGQlMwWXNXVUZCTVVRN1FVRkRRU3hoUVVGTGNrUXNUMEZCVEN4SFFVRmxMRXRCUVV0elJDeFpRVUZNTEVkQlFXOUNMRXRCUVV0RkxGVkJRWHBDTEVkQlFYTkRMRXRCUVV0R0xGbEJRVEZFTzBGQlEwZ3NTMEZTYVVJN08wRkJWV3hDZEV3c1lVRkJVU3h0UWtGQldUdEJRVU5vUWl4WlFVRkpUQ3hUUVVGVExFbEJRVWt6UWl4SFFVRkhORTRzVDBGQlVDeERRVUZsTEV0QlFVdDBUU3hUUVVGd1FpeEZRVUVyUWl4SlFVRkpMRXRCUVV0cFRTeFZRVUY0UXl4RlFVRnZSQ3hKUVVGSkxFdEJRVXRETEZWQlFUZEVMRU5CUVdJN1FVRkRRU3hoUVVGTE9Vd3NaMEpCUVV3c1EwRkJjMEpETEUxQlFYUkNPMEZCUTBFc1lVRkJTME1zWjBKQlFVd3NRMEZCYzBKRUxFMUJRWFJDTzBGQlEwRXNaVUZCVDBFc1RVRkJVRHRCUVVOSUxFdEJabWxDT3p0QlFXbENiRUpOTEZkQlFVMHNhVUpCUVZrN1FVRkRaQ3haUVVGSlRpeFRRVUZUTEVsQlFVa3pRaXhIUVVGSE5FNHNUMEZCVUN4RlFVRmlPMEZCUTBFc1lVRkJTMnhOTEdkQ1FVRk1MRU5CUVhOQ1F5eE5RVUYwUWp0QlFVTkJRU3hsUVVGUFVpeG5Ra0ZCVUN4RFFVRjNRaXhMUVVGTFJ5eFRRVUUzUWl4RlFVRjNReXhMUVVGTGFVMHNWVUZCTjBNc1JVRkJlVVFzUzBGQlMwTXNWVUZCT1VRN1FVRkRRU3hsUVVGUE4wd3NUVUZCVUR0QlFVTklPMEZCZEVKcFFpeERRVUZVTEVOQlFXSTdRVUYzUWtFN096czdPenM3T3pzN096czdPenM3TzBGQmFVSkJNMElzUjBGQlJ6Wk9MRTlCUVVnc1IwRkJZU3hWUVVGVk9VZ3NVVUZCVml4RlFVRnZRbmRFTEVWQlFYQkNMRVZCUVhkQ1F5eEZRVUY0UWl4RlFVRTBRanRCUVVOeVF5eFhRVUZQTEVsQlFVbDRTaXhIUVVGSE5FNHNUMEZCVUN4RFFVRmxOMGdzVVVGQlppeEZRVUY1UW5kRUxFVkJRWHBDTEVWQlFUWkNReXhGUVVFM1FpeERRVUZRTzBGQlEwZ3NRMEZHUkRzN1FVRkpRVHM3T3pzN096czdRVUZSUVhoS0xFZEJRVWM0VGl4TFFVRklMRWRCUVZjNVRpeEhRVUZIUlN4TFFVRklMRU5CUVZNN1FVRkRhRUpETEZWQlFVMHNWVUZFVlR0QlFVVm9Ra01zWVVGQlUwb3NSMEZCUjBNc1kwRkdTVHM3UVVGSmFFSkxMRlZCUVVzc1kwRkJWWGxHTEZGQlFWWXNSVUZCYjBKblNTeE5RVUZ3UWl4RlFVRTBRanRCUVVNM1FpeGhRVUZMZEVrc1RVRkJUQ3hIUVVGakxFTkJRV1E3UVVGRFFTeGhRVUZMZFVrc1kwRkJUQ3hIUVVGelFpeExRVUYwUWp0QlFVTk9SQ3h0UWtGQlZ6bE5MRk5CUVZnc1NVRkJkMElzUzBGQlMwVXNaMEpCUVV3c1EwRkJjMEkwUlN4UlFVRjBRaXhGUVVGblEyZEpMRTFCUVdoRExFTkJRWGhDTzBGQlEwY3NTMEZTWlRzN1FVRlZhRUk3T3pzN096dEJRVTFCTlUwc2MwSkJRV2xDTERCQ1FVRlZORVVzVVVGQlZpeEZRVUZ2UW1kSkxFMUJRWEJDTEVWQlFUUkNPMEZCUTNwRExGbEJRVWt2VGl4SFFVRkhReXhqUVVGSUxFTkJRV3RDYVVJc1UwRkJiRUlzUTBGQk5FSkRMR2RDUVVFMVFpeERRVUUyUTBNc1NVRkJOME1zUTBGQmEwUXNTVUZCYkVRc1JVRkJkMFF5UlN4UlFVRjRSQ3hEUVVGS0xFVkJRWFZGTzBGQlEyNUZMR2xDUVVGTFRpeE5RVUZNTEVkQlFXTnpTU3hOUVVGa08wRkJRMEVzYlVKQlFVOHNTVUZCVUR0QlFVTklPMEZCUTBRc1pVRkJUeXhMUVVGUU8wRkJRMGdzUzBGMFFtVTdPMEZCZDBKb1FqbE1MRmRCUVUwc2FVSkJRVms3UVVGRFpDeFpRVUZKVGl4VFFVRlRMRWxCUVVrelFpeEhRVUZIT0U0c1MwRkJVQ3hGUVVGaU8wRkJRMEVzWVVGQlMzQk5MR2RDUVVGTUxFTkJRWE5DUXl4TlFVRjBRanRCUVVOQlFTeGxRVUZQVWl4blFrRkJVQ3hEUVVGM1FpeExRVUZMUnl4VFFVRTNRaXhGUVVGM1F5eExRVUZMYlVVc1RVRkJOME03UVVGRFFTeGxRVUZQT1VRc1RVRkJVRHRCUVVOSUxFdEJOMEpsT3p0QlFTdENhRUpuUWl4WlFVRlBMR2RDUVVGVlRDeEZRVUZXTEVWQlFXTTdRVUZEYWtKQkxHRkJRVXNzUzBGQlMwUXNaMEpCUVV3c1EwRkJjMEpETEVWQlFYUkNMRU5CUVV3N1FVRkRRU3haUVVGSkxFdEJRVXRQTEUxQlFVd3NTVUZCWlN4RFFVRkRMRXRCUVV0d1FpeE5RVUZNTEVWQlFYQkNMRVZCUVcxRE8wRkJReTlDTEdkQ1FVRkpkMDBzVVVGQlVTeE5RVUZOTEV0QlFVdDRTU3hOUVVGMlFqdEJRVU5CTEdkQ1FVRkplVWtzU1VGQlNUVk1MRXRCUVVzeVRDeExRVUZpTzBGQlEwRXNhVUpCUVV0d1RDeE5RVUZNTEVOQlFWbHpUQ3hQUVVGYUxFZEJRWFZDUkN4SlFVRkxSQ3hSUVVGUkxFTkJRV1FzUjBGQmIwSXNSMEZCY0VJc1IwRkJNRUlzUTBGQmFFUTdRVUZEU0R0QlFVTktMRXRCZEVObE96dEJRWGREYUVKeVRDeHhRa0ZCWjBJc2VVSkJRVlZETEUxQlFWWXNSVUZCYTBJN1FVRkRPVUkzUXl4WFFVRkhReXhqUVVGSUxFTkJRV3RDYVVJc1UwRkJiRUlzUTBGQk5FSXdRaXhsUVVFMVFpeERRVUUwUTNoQ0xFbEJRVFZETEVOQlFXbEVMRWxCUVdwRUxFVkJRWFZFZVVJc1RVRkJka1E3UVVGRFFTeGhRVUZMYlV3c1kwRkJUQ3hIUVVGelFtNU1MRTlCUVU5elRDeFBRVUUzUWp0QlFVTklMRXRCTTBObE96dEJRVFpEYUVKd1NpeFZRVUZMTEdkQ1FVRlpPMEZCUTJJc1lVRkJTMnhETEUxQlFVd3NRMEZCV1hOTUxFOUJRVm9zUjBGQmMwSXNTMEZCUzBnc1kwRkJNMEk3UVVGRFFXaFBMRmRCUVVkRExHTkJRVWdzUTBGQmEwSnBRaXhUUVVGc1FpeERRVUUwUWpaRUxFbEJRVFZDTEVOQlFXbERNMFFzU1VGQmFrTXNRMEZCYzBNc1NVRkJkRU03UVVGRFNDeExRV2hFWlRzN1FVRnJSR2hDV1N4aFFVRlJMRzFDUVVGWk8wRkJRMmhDTEZsQlFVbE1MRk5CUVZNc1NVRkJTVE5DTEVkQlFVYzRUaXhMUVVGUUxFTkJRV0VzUzBGQlMzaE5MRk5CUVd4Q0xFVkJRVFpDTEV0QlFVdHRSU3hOUVVGc1F5eERRVUZpTzBGQlEwRXNZVUZCU3k5RUxHZENRVUZNTEVOQlFYTkNReXhOUVVGMFFqdEJRVU5CTEdGQlFVdERMR2RDUVVGTUxFTkJRWE5DUkN4TlFVRjBRanRCUVVOQkxHVkJRVTlCTEUxQlFWQTdRVUZEU0R0QlFYWkVaU3hEUVVGVUxFTkJRVmc3UVVGNVJFRTdPenM3T3pzN096czdPMEZCVjBFelFpeEhRVUZIYjA4c1MwRkJTQ3hIUVVGWExGVkJRVlZ5U1N4UlFVRldMRVZCUVc5Q1owa3NUVUZCY0VJc1JVRkJORUk3UVVGRGJrTXNWMEZCVHl4SlFVRkpMMDRzUjBGQlJ6aE9MRXRCUVZBc1EwRkJZUzlJTEZGQlFXSXNSVUZCZFVKblNTeE5RVUYyUWl4RFFVRlFPMEZCUTBnc1EwRkdSRHM3UVVGSlFUczdPenM3T3pzN08wRkJVMEV2VGl4SFFVRkhjVThzVFVGQlNDeEhRVUZaY2s4c1IwRkJSMFVzUzBGQlNDeERRVUZUTzBGQlEycENReXhWUVVGTkxGZEJSRmM3UVVGRmFrSkRMR0ZCUVZOS0xFZEJRVWRETEdOQlJrczdPMEZCU1dwQ1N5eFZRVUZMTEdOQlFWVjVSaXhSUVVGV0xFVkJRVzlDYjBrc1QwRkJjRUlzUlVGQk5rSTdRVUZET1VJc1lVRkJTMGNzVlVGQlRDeEhRVUZyUWl4RFFVRnNRanRCUVVOQkxHRkJRVXRETEZsQlFVd3NSMEZCYjBJc1EwRkJjRUk3UVVGRFFVb3NiMEpCUVZsc1RpeFRRVUZhTEVsQlFYbENha0lzUjBGQlIzRlBMRTFCUVVnc1EwRkJWVzVPTEZOQlFWWXNRMEZCYjBKRExHZENRVUZ3UWl4RFFVRnhRME1zU1VGQmNrTXNRMEZCTUVNc1NVRkJNVU1zUlVGQlowUXlSU3hSUVVGb1JDeEZRVUV3Ukc5SkxFOUJRVEZFTEVOQlFYcENPMEZCUTBnc1MwRlNaMEk3TzBGQlZXcENPenM3T3pzN1FVRk5RV2hPTEhOQ1FVRnBRaXd3UWtGQlZUUkZMRkZCUVZZc1JVRkJiMEp2U1N4UFFVRndRaXhGUVVFMlFqdEJRVU14UXl4WlFVRkpiazhzUjBGQlIwTXNZMEZCU0N4RFFVRnJRbWxDTEZOQlFXeENMRU5CUVRSQ1F5eG5Ra0ZCTlVJc1EwRkJOa05ETEVsQlFUZERMRU5CUVd0RUxFbEJRV3hFTEVWQlFYZEVNa1VzVVVGQmVFUXNRMEZCU2l4RlFVRjFSVHRCUVVOdVJTeHBRa0ZCUzNWSkxGVkJRVXdzUjBGQmEwSklMRTlCUVd4Q08wRkJRMEVzYlVKQlFVOHNTVUZCVUR0QlFVTklPMEZCUTBRc1pVRkJUeXhMUVVGUU8wRkJRMGdzUzBGMFFtZENPenRCUVhkQ2FrSnNUU3hYUVVGTkxHbENRVUZaTzBGQlEyUXNXVUZCU1U0c1UwRkJVeXhKUVVGSk0wSXNSMEZCUjNGUExFMUJRVkFzUlVGQllqdEJRVU5CTEdGQlFVc3pUU3huUWtGQlRDeERRVUZ6UWtNc1RVRkJkRUk3UVVGRFFVRXNaVUZCVDFJc1owSkJRVkFzUTBGQmQwSXNTMEZCUzBjc1UwRkJOMElzUlVGQmQwTXNTMEZCUzJkT0xGVkJRVGRETzBGQlEwRXNaVUZCVHpOTkxFMUJRVkE3UVVGRFNDeExRVGRDWjBJN08wRkJLMEpxUW1kQ0xGbEJRVThzWjBKQlFWVTJUQ3hKUVVGV0xFVkJRV2RDTzBGQlEyNUNRU3hsUVVGUExFdEJRVXR1VFN4blFrRkJUQ3hEUVVGelFtMU5MRWxCUVhSQ0xFTkJRVkE3UVVGRFFTeFpRVUZKUXl4alFVRmpMRXRCUVV0R0xGbEJRVXdzUzBGQmMwSjBUaXhUUVVGMFFpeEhRVUZyUXl4TFFVRkxjMDRzV1VGQmRrTXNSMEZCYzBRc1IwRkJlRVU3UVVGRFFTeGhRVUZMTVV3c1RVRkJUQ3hEUVVGWmMwd3NUMEZCV2l4SFFVRnpRazBzWTBGQll5eERRVUZETEV0QlFVdElMRlZCUVV3c1IwRkJhMEpITEZkQlFXNUNMRWxCUVd0RFJDeEpRVUYwUlR0QlFVTklMRXRCYmtOblFqczdRVUZ4UTJwQ05Vd3NjVUpCUVdkQ0xIbENRVUZWUXl4TlFVRldMRVZCUVd0Q08wRkJRemxDTjBNc1YwRkJSME1zWTBGQlNDeERRVUZyUW1sQ0xGTkJRV3hDTEVOQlFUUkNNRUlzWlVGQk5VSXNRMEZCTkVONFFpeEpRVUUxUXl4RFFVRnBSQ3hKUVVGcVJDeEZRVUYxUkhsQ0xFMUJRWFpFTzBGQlEwRXNZVUZCU3pCTUxGbEJRVXdzUjBGQmIwSXhUQ3hQUVVGUGMwd3NUMEZCTTBJN1FVRkRTRHRCUVhoRFowSXNRMEZCVkN4RFFVRmFPenRCUVRKRFFUczdPenM3T3pzN096czdPenRCUVdGQmJrOHNSMEZCUnpCUExFMUJRVWdzUjBGQldTeFZRVUZWTTBrc1VVRkJWaXhGUVVGdlFtOUpMRTlCUVhCQ0xFVkJRVFpDTzBGQlEzSkRMRmRCUVU4c1NVRkJTVzVQTEVkQlFVZHhUeXhOUVVGUUxFTkJRV04wU1N4UlFVRmtMRVZCUVhkQ2Iwa3NUMEZCZUVJc1EwRkJVRHRCUVVOSUxFTkJSa1E3TzBGQlNVRTdPenM3T3p0QlFVMUJiazhzUjBGQlJ6SlBMRTFCUVVnc1IwRkJXVE5QTEVkQlFVZEZMRXRCUVVnc1EwRkJVenRCUVVOcVFrTXNWVUZCVFN4WFFVUlhPMEZCUldwQ1F5eGhRVUZUU2l4SFFVRkhjVThzVFVGR1N6czdRVUZKYWtJdlRpeFZRVUZMTEdOQlFWVjVSaXhSUVVGV0xFVkJRVzlDTzBGQlEzSkNMRmxCUVVsQkxGbEJRVmtzU1VGQmFFSXNSVUZEU1VFc1YwRkJWeXhEUVVGWU8wRkJRMG9zWVVGQlN6WkpMR05CUVV3c1IwRkJjMElzU1VGQmRFSTdRVUZEUVN4aFFVRkxlazRzWjBKQlFVd3NRMEZCYzBJMFJTeFJRVUYwUWl4RlFVRm5ReXhIUVVGb1F6dEJRVU5JTEV0QlZHZENPenRCUVZkcVFpOUVMR0ZCUVZFc2JVSkJRVms3UVVGRGFFSXNXVUZCU1V3c1UwRkJVeXhKUVVGSk0wSXNSMEZCUnpaUExFOUJRVkFzUlVGQllqdEJRVU5CYkU0c1pVRkJUMUlzWjBKQlFWQXNRMEZCZDBJc1MwRkJTMGNzVTBGQk4wSXNSVUZCZDBNc1EwRkJlRU03UVVGRFFTeGhRVUZMU1N4blFrRkJUQ3hEUVVGelFrTXNUVUZCZEVJN1FVRkRRU3hoUVVGTFF5eG5Ra0ZCVEN4RFFVRnpRa1FzVFVGQmRFSTdRVUZEUVN4bFFVRlBRU3hOUVVGUU8wRkJRMGdzUzBGcVFtZENPenRCUVcxQ2FrSk5MRmRCUVUwc2FVSkJRVms3UVVGRFpDeFpRVUZKVGl4VFFVRlRMRWxCUVVrelFpeEhRVUZITWs4c1RVRkJVQ3hGUVVGaU8wRkJRMEVzWVVGQlMycE9MR2RDUVVGTUxFTkJRWE5DUXl4TlFVRjBRanRCUVVOQlFTeGxRVUZQVWl4blFrRkJVQ3hEUVVGM1FpeExRVUZMUnl4VFFVRTNRaXhGUVVGM1F5eExRVUZMWjA0c1ZVRkJOME03UVVGRFFTeGxRVUZQTTAwc1RVRkJVRHRCUVVOSUxFdEJlRUpuUWpzN1FVRXdRbXBDYVVJc2NVSkJRV2RDTEhsQ1FVRlZReXhOUVVGV0xFVkJRV3RDTzBGQlF6bENMRmxCUVVjc1MwRkJTeXRNTEdOQlFWSXNSVUZEU1N4TFFVRkxUaXhWUVVGTUxFZEJRV3RDTEV0QlFVdE5MR05CUVV3c1EwRkJiMEpNTEZsQlFYUkRPMEZCUTBwMlR5eFhRVUZIY1U4c1RVRkJTQ3hEUVVGVmJrNHNVMEZCVml4RFFVRnZRakJDTEdWQlFYQkNMRU5CUVc5RGVFSXNTVUZCY0VNc1EwRkJlVU1zU1VGQmVrTXNSVUZCSzBONVFpeE5RVUV2UXp0QlFVTklPMEZCT1VKblFpeERRVUZVTEVOQlFWbzdPMEZCYVVOQk96czdPenM3T3pzN08wRkJWVUUzUXl4SFFVRkhPRThzVFVGQlNDeEhRVUZaTEZWQlFWVXZTU3hSUVVGV0xFVkJRVzlDTzBGQlF6VkNMRmRCUVU4c1NVRkJTUzlHTEVkQlFVY3lUeXhOUVVGUUxFTkJRV00xU1N4UlFVRmtMRU5CUVZBN1FVRkRTQ3hEUVVaRU96dEJRVXRCT3pzN096czdRVUZOUVM5R0xFZEJRVWMyVHl4UFFVRklMRWRCUVdFM1R5eEhRVUZIUlN4TFFVRklMRU5CUVZNN1FVRkRiRUpETEZWQlFVMHNXVUZFV1R0QlFVVnNRa01zWVVGQlUwb3NSMEZCUjNGUExFMUJSazA3TzBGQlNXeENMMDRzVlVGQlN5eGpRVUZWZVVZc1VVRkJWaXhGUVVGdlFqdEJRVU55UWl4WlFVRkpRU3haUVVGWkxFbEJRV2hDTEVWQlEwbEJMRmRCUVZjc1EwRkJXRHRCUVVOS0xHRkJRVXMyU1N4alFVRk1MRWRCUVhOQ0xFbEJRWFJDTzBGQlEwRXNZVUZCUzNwT0xHZENRVUZNTEVOQlFYTkNORVVzVVVGQmRFSXNSVUZCWjBNc1EwRkJhRU03UVVGRFNDeExRVlJwUWpzN1FVRlhiRUl2UkN4aFFVRlJMRzFDUVVGWk8wRkJRMmhDTEZsQlFVbE1MRk5CUVZNc1NVRkJTVE5DTEVkQlFVY3lUeXhOUVVGUUxFVkJRV0k3UVVGRFFXaE9MR1ZCUVU5cFRpeGpRVUZRTEVkQlFYZENMRWxCUVhoQ08wRkJRMEZxVGl4bFFVRlBVaXhuUWtGQlVDeERRVUYzUWl4TFFVRkxSeXhUUVVFM1FpeEZRVUYzUXl4SFFVRjRRenRCUVVOQkxHRkJRVXRKTEdkQ1FVRk1MRU5CUVhOQ1F5eE5RVUYwUWp0QlFVTkJMR0ZCUVV0RExHZENRVUZNTEVOQlFYTkNSQ3hOUVVGMFFqdEJRVU5CTEdWQlFVOUJMRTFCUVZBN1FVRkRTQ3hMUVd4Q2FVSTdPMEZCYjBKc1FrMHNWMEZCVFN4cFFrRkJXVHRCUVVOa0xGbEJRVWxPTEZOQlFWTXNTVUZCU1ROQ0xFZEJRVWMyVHl4UFFVRlFMRVZCUVdJN1FVRkRRU3hoUVVGTGJrNHNaMEpCUVV3c1EwRkJjMEpETEUxQlFYUkNPMEZCUTBGQkxHVkJRVTlTTEdkQ1FVRlFMRU5CUVhkQ0xFdEJRVXRITEZOQlFUZENMRVZCUVhkRExFdEJRVXRuVGl4VlFVRTNRenRCUVVOQkxHVkJRVTh6VFN4TlFVRlFPMEZCUTBnN1FVRjZRbWxDTEVOQlFWUXNRMEZCWWpzN1FVRTBRa0U3T3pzN096czdPenM3UVVGVlFUTkNMRWRCUVVjclR5eFBRVUZJTEVkQlFXRXNWVUZCVlhoUExFTkJRVllzUlVGQllUdEJRVU4wUWl4WFFVRlBMRWxCUVVsUUxFZEJRVWMyVHl4UFFVRlFMRU5CUVdWMFR5eERRVUZtTEVOQlFWQTdRVUZEU0N4RFFVWkVPenRCUVVsQk96czdPenM3T3pzN096dEJRVmRCVUN4SFFVRkhaMUFzVFVGQlNDeEhRVUZaYUZBc1IwRkJSMFVzUzBGQlNDeERRVUZUTzBGQlEycENReXhWUVVGTkxGZEJSRmM3UVVGRmFrSkRMR0ZCUVZOS0xFZEJRVWRETEdOQlJrczdPMEZCU1dwQ1N5eFZRVUZMTEdOQlFWVjVSaXhSUVVGV0xFVkJRVzlDYTBvc1IwRkJjRUlzUlVGQmVVSkRMRXRCUVhwQ0xFVkJRV2REUXl4SlFVRm9ReXhGUVVGelF6dEJRVU4yUXl4aFFVRkxReXhIUVVGTUxFZEJRVmR3VUN4SFFVRkhjVkFzUzBGQlNDeERRVUZUTEVOQlFWUXNSVUZCV1N4RFFVRmFMRVZCUVdVc1EwRkJaaXhEUVVGWU8wRkJRMEVzWVVGQlMwTXNTMEZCVEN4SFFVRmhkRkFzUjBGQlIzRlFMRXRCUVVnc1EwRkJVeXhEUVVGVUxFVkJRVmtzUTBGQldpeEZRVUZsTEVOQlFXWXNRMEZCWWpzN1FVRkZRU3haUVVGSlNpeGxRVUZsYWxBc1IwRkJSM1ZRTEV0QlFYUkNMRVZCUVRaQ08wRkJRM3BDU2l4dFFrRkJUMFlzU1VGQlNUZEVMRU5CUVZnN1FVRkRRVGhFTEc5Q1FVRlJSQ3hKUVVGSlR5eERRVUZhTzBGQlEwRlFMR3RDUVVGTlFTeEpRVUZKZGtNc1EwRkJWanRCUVVOSU96dEJRVVZFZVVNc2FVSkJRVk5zVHl4VFFVRlVMRWxCUVhOQ0xFdEJRVXRGTEdkQ1FVRk1MRU5CUVhOQ05FVXNVVUZCZEVJc1JVRkJaME5yU2l4SFFVRm9ReXhGUVVGeFEwTXNTMEZCY2tNc1JVRkJORU5ETEVsQlFUVkRMRU5CUVhSQ08wRkJRMGdzUzBGbVowSTdPMEZCYVVKcVFqczdPenM3T3pzN1FVRlJRV2hQTEhOQ1FVRnBRaXd3UWtGQlZUUkZMRkZCUVZZc1JVRkJiMEpyU2l4SFFVRndRaXhGUVVGNVFrTXNTMEZCZWtJc1JVRkJaME5ETEVsQlFXaERMRVZCUVhORE8wRkJRMjVFTEZsQlFVbHVVQ3hIUVVGSFF5eGpRVUZJTEVOQlFXdENhVUlzVTBGQmJFSXNRMEZCTkVKRExHZENRVUUxUWl4RFFVRTJRME1zU1VGQk4wTXNRMEZCYTBRc1NVRkJiRVFzUlVGQmQwUXlSU3hSUVVGNFJDeERRVUZLTEVWQlFYVkZPMEZCUTI1RkxHbENRVUZMY1Vvc1IwRkJUQ3hIUVVGWGNGQXNSMEZCUjNGUUxFdEJRVWdzUTBGQlUwb3NSMEZCVkN4RlFVRmpReXhMUVVGa0xFVkJRWEZDUXl4SlFVRnlRaXhEUVVGWU8wRkJRMEVzYlVKQlFVOHNTVUZCVUR0QlFVTklPMEZCUTBRc1pVRkJUeXhMUVVGUU8wRkJRMGdzUzBFdlFtZENPenRCUVdsRGFrSnNUaXhYUVVGTkxHbENRVUZaTzBGQlEyUXNXVUZCU1U0c1UwRkJVeXhKUVVGSk0wSXNSMEZCUjJkUUxFMUJRVkFzUlVGQllqdEJRVU5CTEdGQlFVdDBUaXhuUWtGQlRDeERRVUZ6UWtNc1RVRkJkRUk3UVVGRFFTeFpRVUZKT0U0c1VVRkJVU3hMUVVGTFRDeEhRVUZxUWp0QlFVTkJlazRzWlVGQlQxSXNaMEpCUVZBc1EwRkJkMElzUzBGQlMwY3NVMEZCTjBJc1JVRkJkME50VHl4TlFVRk5MME1zUTBGQk9VTXNSVUZCYVVRclF5eE5RVUZOUkN4RFFVRjJSQ3hGUVVFd1JFTXNUVUZCVFhKRkxFTkJRV2hGTzBGQlEwRXNaVUZCVDNwS0xFMUJRVkE3UVVGRFNDeExRWFpEWjBJN08wRkJlVU5xUW1sQ0xIRkNRVUZuUWl4NVFrRkJWVU1zVFVGQlZpeEZRVUZyUWp0QlFVTTVRamRETEZkQlFVZERMR05CUVVnc1EwRkJhMEpwUWl4VFFVRnNRaXhEUVVFMFFqQkNMR1ZCUVRWQ0xFTkJRVFJEZUVJc1NVRkJOVU1zUTBGQmFVUXNTVUZCYWtRc1JVRkJkVVI1UWl4TlFVRjJSRHM3UVVGRlFTeGhRVUZMZVUwc1MwRkJUQ3hIUVVGaExFdEJRVXQ2VFN4TlFVRk1MRU5CUVZsM1RTeExRVUY2UWp0QlFVTklMRXRCTjBOblFqczdRVUVyUTJwQ01VMHNXVUZCVHl4blFrRkJWVXdzUlVGQlZpeEZRVUZqTzBGQlEycENRU3hoUVVGTExFdEJRVXRFTEdkQ1FVRk1MRU5CUVhOQ1F5eEZRVUYwUWl4RFFVRk1PMEZCUTBFc1dVRkJTVzlPTEZWQlFWVXNTMEZCUzBvc1MwRkJia0k3UVVGQlFTeFpRVUV3UWtjc1VVRkJVU3hMUVVGTFRDeEhRVUYyUXp0QlFVTkJMRmxCUVVsTkxFOUJRVW9zUlVGQllUdEJRVU5VTEdsQ1FVRkxOMDBzVFVGQlRDeERRVUZaZDAwc1MwRkJXaXhIUVVGdlFuSlFMRWRCUVVkeFVDeExRVUZJTEVOQlExcExMRkZCUVZGb1JDeERRVUZTTEVkQlFWa3NRMEZCUXl0RExFMUJRVTB2UXl4RFFVRk9MRWRCUVZWblJDeFJRVUZSYUVRc1EwRkJia0lzU1VGQmQwSndTeXhGUVVSNFFpeEZRVVZhYjA0c1VVRkJVVVlzUTBGQlVpeEhRVUZaTEVOQlFVTkRMRTFCUVUxRUxFTkJRVTRzUjBGQlZVVXNVVUZCVVVZc1EwRkJia0lzU1VGQmQwSnNUaXhGUVVaNFFpeEZRVWRhYjA0c1VVRkJVWFJGTEVOQlFWSXNSMEZCV1N4RFFVRkRjVVVzVFVGQlRYSkZMRU5CUVU0c1IwRkJWWE5GTEZGQlFWRjBSU3hEUVVGdVFpeEpRVUYzUWpsSkxFVkJTSGhDTEVOQlFYQkNPMEZCU1VnN1FVRkRTanRCUVhoRVowSXNRMEZCVkN4RFFVRmFPenRCUVRKRVFUczdPenM3T3pzN096czdPenRCUVdGQmRFTXNSMEZCUnpKUUxFMUJRVWdzUjBGQldTeFZRVUZWTlVvc1VVRkJWaXhGUVVGdlFtdEtMRWRCUVhCQ0xFVkJRWGxDUXl4TFFVRjZRaXhGUVVGblEwTXNTVUZCYUVNc1JVRkJjME03UVVGRE9VTXNWMEZCVHl4SlFVRkpibEFzUjBGQlIyZFFMRTFCUVZBc1EwRkJZMnBLTEZGQlFXUXNSVUZCZDBKclNpeEhRVUY0UWl4RlFVRTJRa01zUzBGQk4wSXNSVUZCYjBORExFbEJRWEJETEVOQlFWQTdRVUZEU0N4RFFVWkVPenRCUVV0Qk96czdPenM3T3pzN096dEJRVmRCYmxBc1IwRkJSelJRTEUxQlFVZ3NSMEZCV1RWUUxFZEJRVWRGTEV0QlFVZ3NRMEZCVXp0QlFVTnFRa01zVlVGQlRTeFhRVVJYTzBGQlJXcENReXhoUVVGVFNpeEhRVUZIUXl4alFVWkxPenRCUVVscVFrc3NWVUZCU3l4alFVRlZlVVlzVVVGQlZpeEZRVUZ2UWpoS0xGRkJRWEJDTEVWQlFUaENReXhWUVVFNVFpeEZRVUV3UTBNc1UwRkJNVU1zUlVGQmNVUTdRVUZEZEVRc1lVRkJTME1zVDBGQlRDeEhRVUZsTEVOQlFXWTdRVUZEUVN4aFFVRkxReXhQUVVGTUxFZEJRV1VzUTBGQlpqdEJRVU5CTEdGQlFVdERMRTlCUVV3c1IwRkJaU3hEUVVGbU8wRkJRMEVzWVVGQlMwTXNUVUZCVEN4SFFVRmpMRU5CUVdRN1FVRkRRU3hoUVVGTFF5eE5RVUZNTEVkQlFXTXNRMEZCWkR0QlFVTkJMR0ZCUVV0RExFMUJRVXdzUjBGQll5eERRVUZrTzBGQlEwNU9MSE5DUVVGak9VOHNVMEZCWkN4SlFVRXlRaXhMUVVGTFJTeG5Ra0ZCVEN4RFFVRnpRalJGTEZGQlFYUkNMRVZCUVdkRE9Fb3NVVUZCYUVNc1JVRkJNRU5ETEZWQlFURkRMRVZCUVhORVF5eFRRVUYwUkN4RFFVRXpRanRCUVVOSExFdEJXbWRDT3p0QlFXTnFRanM3T3pzN096czdRVUZSUVRWUExITkNRVUZwUWl3d1FrRkJWVFJGTEZGQlFWWXNSVUZCYjBJNFNpeFJRVUZ3UWl4RlFVRTRRa01zVlVGQk9VSXNSVUZCTUVORExGTkJRVEZETEVWQlFYRkVPMEZCUTJ4RkxGbEJRVWt2VUN4SFFVRkhReXhqUVVGSUxFTkJRV3RDYVVJc1UwRkJiRUlzUTBGQk5FSkRMR2RDUVVFMVFpeERRVUUyUTBNc1NVRkJOME1zUTBGQmEwUXNTVUZCYkVRc1JVRkJkMFF5UlN4UlFVRjRSQ3hEUVVGS0xFVkJRWFZGTzBGQlEyNUZMR2xDUVVGTGFVc3NUMEZCVEN4SFFVRmxTQ3hSUVVGbU8wRkJRMEVzYVVKQlFVdEpMRTlCUVV3c1IwRkJaVWdzVlVGQlpqdEJRVU5CTEdsQ1FVRkxTU3hQUVVGTUxFZEJRV1ZJTEZOQlFXWTdRVUZEUVN4dFFrRkJUeXhKUVVGUU8wRkJRMGc3UVVGRFJDeGxRVUZQTEV0QlFWQTdRVUZEU0N4TFFUbENaMEk3TzBGQlowTnFRamxPTEZkQlFVMHNhVUpCUVZrN1FVRkRaQ3haUVVGSlRpeFRRVUZUTEVsQlFVa3pRaXhIUVVGSE5GQXNUVUZCVUN4RlFVRmlPMEZCUTBFc1lVRkJTMnhQTEdkQ1FVRk1MRU5CUVhOQ1F5eE5RVUYwUWp0QlFVTkJRU3hsUVVGUFVpeG5Ra0ZCVUN4RFFVRjNRaXhMUVVGTFJ5eFRRVUUzUWl4RlFVRjNReXhMUVVGTE1FOHNUMEZCTjBNc1JVRkJjMFFzUzBGQlMwTXNUMEZCTTBRc1JVRkJiMFVzUzBGQlMwTXNUMEZCZWtVN1FVRkRRU3hsUVVGUGRrOHNUVUZCVUR0QlFVTklMRXRCY2tOblFqczdRVUYxUTJwQ2FVSXNjVUpCUVdkQ0xIbENRVUZWUXl4TlFVRldMRVZCUVd0Q08wRkJRemxDTjBNc1YwRkJSME1zWTBGQlNDeERRVUZyUW1sQ0xGTkJRV3hDTEVOQlFUUkNNRUlzWlVGQk5VSXNRMEZCTkVONFFpeEpRVUUxUXl4RFFVRnBSQ3hKUVVGcVJDeEZRVUYxUkhsQ0xFMUJRWFpFT3p0QlFVVkJMRmxCUVVsM1RTeFJRVUZSZUUwc1QwRkJUM2ROTEV0QlFXNUNPMEZCUTBFc1lVRkJTMk1zVFVGQlRDeEhRVUZqWkN4TlFVRk5NME1zUTBGQmNFSTdRVUZEUVN4aFFVRkxNRVFzVFVGQlRDeEhRVUZqWml4TlFVRk5SeXhEUVVGd1FqdEJRVU5CTEdGQlFVdGhMRTFCUVV3c1IwRkJZMmhDTEUxQlFVMXFSU3hEUVVGd1FqdEJRVU5JTEV0Qk9VTm5RanM3UVVGblJHcENla2tzV1VGQlR5eG5Ra0ZCVlV3c1JVRkJWaXhGUVVGak8wRkJRMnBDUVN4aFFVRkxMRXRCUVV0RUxHZENRVUZNTEVOQlFYTkNReXhGUVVGMFFpeERRVUZNT3p0QlFVVkJMR0ZCUVV0UExFMUJRVXdzUTBGQldYZE5MRXRCUVZvc1IwRkJiMEp5VUN4SFFVRkhjVkFzUzBGQlNDeERRVUZUTEV0QlFVdGpMRTFCUVV3c1IwRkJZeXhMUVVGTFNDeFBRVUZNTEVkQlFXVXhUaXhGUVVGMFF5eEZRVU5STEV0QlFVczRUaXhOUVVGTUxFZEJRV01zUzBGQlMwZ3NUMEZCVEN4SFFVRmxNMDRzUlVGRWNrTXNSVUZGVVN4TFFVRkxLMDRzVFVGQlRDeEhRVUZqTEV0QlFVdElMRTlCUVV3c1IwRkJaVFZPTEVWQlJuSkRMRU5CUVhCQ08wRkJSMGdzUzBGMFJHZENPenRCUVhkRWFrSk9MR0ZCUVZFc2JVSkJRVms3UVVGRGFFSXNXVUZCU1V3c1UwRkJVeXhKUVVGSk0wSXNSMEZCUnpSUUxFMUJRVkFzUTBGQll5eExRVUZMZEU4c1UwRkJia0lzUlVGQk9FSXNRMEZCUXl4TFFVRkxNRThzVDBGQmNFTXNSVUZCTmtNc1EwRkJReXhMUVVGTFF5eFBRVUZ1UkN4RlFVRTBSQ3hEUVVGRExFdEJRVXRETEU5QlFXeEZMRU5CUVdJN1FVRkRRU3hoUVVGTGVFOHNaMEpCUVV3c1EwRkJjMEpETEUxQlFYUkNPMEZCUTBFc1lVRkJTME1zWjBKQlFVd3NRMEZCYzBKRUxFMUJRWFJDTzBGQlEwRXNaVUZCVDBFc1RVRkJVRHRCUVVOSU8wRkJOMFJuUWl4RFFVRlVMRU5CUVZvN08wRkJaMFZCT3pzN096czdPenM3T3pzN096czdRVUZsUVROQ0xFZEJRVWR6VVN4TlFVRklMRWRCUVZrc1ZVRkJWWFpMTEZGQlFWWXNSVUZCYjBJNFNpeFJRVUZ3UWl4RlFVRTRRa01zVlVGQk9VSXNSVUZCTUVORExGTkJRVEZETEVWQlFYRkVPMEZCUXpkRUxGZEJRVThzU1VGQlNTOVFMRWRCUVVjMFVDeE5RVUZRTEVOQlFXTTNTaXhSUVVGa0xFVkJRWGRDT0Vvc1VVRkJlRUlzUlVGQmEwTkRMRlZCUVd4RExFVkJRVGhEUXl4VFFVRTVReXhEUVVGUU8wRkJRMGdzUTBGR1JEczdRVUZKUVRzN096dEJRVWxCTDFBc1IwRkJSM1ZSTEZOQlFVZ3NSMEZCWlhaUkxFZEJRVWRGTEV0QlFVZ3NRMEZCVXp0QlFVTndRa01zVlVGQlRTeGpRVVJqTzBGQlJYQkNReXhoUVVGVFNpeEhRVUZIUXl4alFVWlJPenRCUVVsd1FqQkRMRmxCUVU4c1owSkJRVlZNTEVWQlFWWXNSVUZCWXl4RFFVRkZMRU5CU2tnN08wRkJUWEJDVGl4aFFVRlJMRzFDUVVGWk8wRkJRMmhDTEZsQlFVbE1MRk5CUVZNc1NVRkJTVE5DTEVkQlFVZDFVU3hUUVVGUUxFTkJRV2xDTEV0QlFVdHFVQ3hUUVVGMFFpeERRVUZpTzBGQlEwRXNZVUZCUzBrc1owSkJRVXdzUTBGQmMwSkRMRTFCUVhSQ08wRkJRMEVzWVVGQlMwTXNaMEpCUVV3c1EwRkJjMEpFTEUxQlFYUkNPMEZCUTBFc1pVRkJUMEVzVFVGQlVEdEJRVU5JTEV0QldHMUNPenRCUVdGd1FrMHNWMEZCVFN4cFFrRkJXVHRCUVVOa0xGbEJRVWxPTEZOQlFWTXNTVUZCU1ROQ0xFZEJRVWQxVVN4VFFVRlFMRVZCUVdJN1FVRkRRU3hoUVVGTE4wOHNaMEpCUVV3c1EwRkJjMEpETEUxQlFYUkNPMEZCUTBGQkxHVkJRVTlTTEdkQ1FVRlFMRU5CUVhkQ0xFdEJRVXRITEZOQlFUZENPMEZCUTBFc1pVRkJUMHNzVFVGQlVEdEJRVU5JTzBGQmJFSnRRaXhEUVVGVUxFTkJRV1k3TzBGQmNVSkJPenM3T3pzN096czdPMEZCVlVFelFpeEhRVUZIWjBnc1UwRkJTQ3hIUVVGbExGVkJRVlY2Unl4RFFVRldMRVZCUVdFN1FVRkRlRUlzVjBGQlR5eEpRVUZKVUN4SFFVRkhkVkVzVTBGQlVDeERRVUZwUW1oUkxFTkJRV3BDTEVOQlFWQTdRVUZEU0N4RFFVWkVPenRCUVVsQk96czdPenM3T3pzN096czdPMEZCWVVGUUxFZEJRVWQzVVN4WFFVRklMRWRCUVdsQ2VGRXNSMEZCUjBVc1MwRkJTQ3hEUVVGVE8wRkJRM1JDUXl4VlFVRk5MR2RDUVVSblFqdEJRVVYwUWtNc1lVRkJVMG9zUjBGQlIwTXNZMEZHVlRzN1FVRkpkRUpMTEZWQlFVc3NZMEZCVlhGQ0xFMUJRVllzUlVGQmEwSTdRVUZEYmtJc1lVRkJTemhQTEUxQlFVd3NSMEZCWXl4SlFVRmtPMEZCUTA0NVR5eHJRa0ZCVlN4TFFVRkxiVVVzWTBGQlRDeERRVUZ2UW01RkxFMUJRWEJDTEVOQlFWWTdRVUZEUnl4TFFWQnhRanM3UVVGVGRFSTdPenM3UVVGSlFXMUZMRzlDUVVGbExIZENRVUZWYmtVc1RVRkJWaXhGUVVGclFqdEJRVU0zUWl4WlFVRkpMRU5CUVVOQkxFMUJRVXdzUlVGQllUdEJRVU5VTTBJc1pVRkJSM0ZGTEU5QlFVZ3NRMEZCVnl4SlFVRllPMEZCUTBFc2JVSkJRVThzUzBGQlVEdEJRVU5JTzBGQlEwUXNXVUZCU1RGRExGZEJRVmNzUzBGQlN6aFBMRTFCUVhCQ0xFVkJRVFJDTzBGQlEzaENlbEVzWlVGQlIzRkZMRTlCUVVnc1EwRkJWeXhKUVVGWU8wRkJRMEVzYlVKQlFVOHNTMEZCVUR0QlFVTklPenRCUVVWRUxGbEJRVWx5UlN4SFFVRkhReXhqUVVGSUxFTkJRV3RDYVVJc1UwRkJiRUlzUTBGQk5FSkRMR2RDUVVFMVFpeERRVUUyUTBNc1NVRkJOME1zUTBGQmEwUXNTVUZCYkVRc1JVRkJkMFJQTEU5QlFVOU1MRk5CUVM5RUxFTkJRVW9zUlVGQkswVTdRVUZETTBVN1FVRkRRU3hwUWtGQlMyMVFMRTFCUVV3c1IwRkJZemxQTEUxQlFXUTdRVUZEUVN4dFFrRkJUeXhKUVVGUU8wRkJRMGc3UVVGRFJDeGxRVUZQTEV0QlFWQTdRVUZEU0N4TFFUZENjVUk3TzBGQkswSjBRazBzVjBGQlRTeHBRa0ZCV1R0QlFVTmtMRmxCUVVsT0xGTkJRVk1zU1VGQlNUTkNMRWRCUVVkM1VTeFhRVUZRTEVWQlFXSTdRVUZEUVN4aFFVRkxPVThzWjBKQlFVd3NRMEZCYzBKRExFMUJRWFJDTzBGQlEwRkJMR1ZCUVU5dFJTeGpRVUZRTEVOQlFYTkNMRXRCUVVzeVN5eE5RVUZNTEVOQlFWbDRUeXhMUVVGYUxFVkJRWFJDTzBGQlEwRXNaVUZCVDA0c1RVRkJVRHRCUVVOSUxFdEJjRU54UWpzN1FVRnpRM1JDYVVJc2NVSkJRV2RDTEhsQ1FVRlZReXhOUVVGV0xFVkJRV3RDTzBGQlF6bENOME1zVjBGQlIwTXNZMEZCU0N4RFFVRnJRbWxDTEZOQlFXeENMRU5CUVRSQ01FSXNaVUZCTlVJc1EwRkJORU40UWl4SlFVRTFReXhEUVVGcFJDeEpRVUZxUkN4RlFVRjFSSGxDTEUxQlFYWkVPMEZCUTBFc1lVRkJTelJPTEUxQlFVd3NRMEZCV1RkT0xHVkJRVm9zUTBGQk5FSkRMRTFCUVRWQ08wRkJRMGdzUzBGNlEzRkNPenRCUVRKRGRFSkdMRmxCUVU4c1owSkJRVlZNTEVWQlFWWXNSVUZCWXp0QlFVTnFRa0VzWVVGQlN5eExRVUZMUkN4blFrRkJUQ3hEUVVGelFrTXNSVUZCZEVJc1EwRkJURHRCUVVOQkxGbEJRVWtzUzBGQlMyMVBMRTFCUVZRc1JVRkRTU3hMUVVGTFFTeE5RVUZNTEVOQlFWazVUaXhOUVVGYUxFTkJRVzFDTEVsQlFVbE1MRVZCUVhaQ08wRkJRMUFzUzBFdlEzRkNPenRCUVdsRWRFSk9MR0ZCUVZFc2JVSkJRVms3UVVGRGFFSXNaVUZCVHl4TFFVRkxlVThzVFVGQlRDeERRVUZaZUU4c1MwRkJXaXhGUVVGUU8wRkJRMGdzUzBGdVJIRkNPenRCUVhGRWRFSTRReXhWUVVGTExHZENRVUZaTzBGQlEySXNZVUZCU3pCTUxFMUJRVXdzUTBGQldURk1MRWxCUVZvN1FVRkRRUzlGTEZkQlFVYzRReXhOUVVGSUxFTkJRVlUxUWl4VFFVRldMRU5CUVc5Q05rUXNTVUZCY0VJc1EwRkJlVUl6UkN4SlFVRjZRaXhEUVVFNFFpeEpRVUU1UWp0QlFVTklPMEZCZUVSeFFpeERRVUZVTEVOQlFXcENPenRCUVRKRVFUczdPenM3T3pzN096dEJRVlZCY0VJc1IwRkJSekJSTEZkQlFVZ3NSMEZCYVVJc1ZVRkJWUzlQTEUxQlFWWXNSVUZCYTBJN1FVRkRMMElzVjBGQlR5eEpRVUZKTTBJc1IwRkJSM2RSTEZkQlFWQXNRMEZCYlVJM1R5eE5RVUZ1UWl4RFFVRlFPMEZCUTBnc1EwRkdSRHM3UVVGSlFUczdPenM3T3pzN096dEJRVlZCTTBJc1IwRkJSekpSTEdOQlFVZ3NSMEZCYjBJelVTeEhRVUZIUlN4TFFVRklMRU5CUVZNN1FVRkRla0pETEZWQlFVMHNiVUpCUkcxQ08wRkJSWHBDUXl4aFFVRlRTaXhIUVVGSFF5eGpRVVpoT3p0QlFVbDZRa3NzVlVGQlRTeGpRVUZWZFVNc1RVRkJWaXhGUVVGclFteENMRTFCUVd4Q0xFVkJRVEJDTzBGQlF6VkNMR0ZCUVV0cFVDeFBRVUZNTEVkQlFXVXNTVUZCWmp0QlFVTkJMR0ZCUVV0RExHRkJRVXdzUjBGQmNVSXNTVUZCY2tJN1FVRkRUbXhRTEd0Q1FVRlZMRXRCUVV0dFVDeGpRVUZNTEVOQlFXOUNhazhzVFVGQmNFSXNSVUZCTkVKc1FpeE5RVUUxUWl4RFFVRldPMEZCUTBjc1MwRlNkMEk3TzBGQlZYcENPenM3T3pzN1FVRk5RVzFRTEc5Q1FVRmxMSGRDUVVGVmFrOHNUVUZCVml4RlFVRnJRbXhDTEUxQlFXeENMRVZCUVRCQ08wRkJRM0pETEZsQlFVa3NTMEZCUzFJc1owSkJRVXdzUTBGQmMwSlJMRTlCUVU5TUxGTkJRVGRDTEVOQlFVb3NSVUZCTmtNN1FVRkRla01zYVVKQlFVdDFVQ3hoUVVGTUxFZEJRWEZDYUU4c1RVRkJja0k3UVVGRFFTeHBRa0ZCU3l0T0xFOUJRVXdzUjBGQlpXcFFMRTFCUVdZN1FVRkRRU3h0UWtGQlR5eEpRVUZRTzBGQlEwZzdRVUZEUkN4bFFVRlBMRXRCUVZBN1FVRkRTQ3hMUVhaQ2QwSTdPMEZCZVVKNlFrMHNWMEZCVFN4cFFrRkJXVHRCUVVOa0xGbEJRVWxPTEZOQlFWTXNTVUZCU1ROQ0xFZEJRVWN5VVN4alFVRlFMRVZCUVdJN1FVRkRRU3hoUVVGTGFsQXNaMEpCUVV3c1EwRkJjMEpETEUxQlFYUkNPMEZCUTBGQkxHVkJRVTl0VUN4alFVRlFMRU5CUVhOQ0xFdEJRVXRFTEdGQlFUTkNMRVZCUVRCRExFdEJRVXRFTEU5QlFVd3NRMEZCWVROUExFdEJRV0lzUlVGQk1VTTdRVUZEUVN4bFFVRlBUaXhOUVVGUU8wRkJRMGdzUzBFNVFuZENPenRCUVdkRGVrSnBRaXh4UWtGQlowSXNlVUpCUVZWRExFMUJRVllzUlVGQmEwSTdRVUZET1VJM1F5eFhRVUZIUXl4alFVRklMRU5CUVd0Q2FVSXNVMEZCYkVJc1EwRkJORUl3UWl4bFFVRTFRaXhEUVVFMFEzaENMRWxCUVRWRExFTkJRV2xFTEVsQlFXcEVMRVZCUVhWRWVVSXNUVUZCZGtRN1FVRkRRU3hoUVVGTEswNHNUMEZCVEN4RFFVRmhhRThzWlVGQllpeERRVUUyUWl4TFFVRkxhVThzWVVGQmJFTTdRVUZEU0N4TFFXNURkMEk3TzBGQmNVTjZRamxNTEZWQlFVc3NaMEpCUVZrN1FVRkRZaXhoUVVGTE5rd3NUMEZCVEN4RFFVRmhOMHdzU1VGQllqdEJRVU5JTEV0QmRrTjNRanM3UVVGNVEzcENjRU1zV1VGQlR5eG5Ra0ZCVlV3c1JVRkJWaXhGUVVGak8wRkJRMnBDUVN4aFFVRkxMRXRCUVV0RUxHZENRVUZNTEVOQlFYTkNReXhGUVVGMFFpeERRVUZNTzBGQlEwRXNZVUZCUzNOUExFOUJRVXdzUTBGQllXcFBMRTFCUVdJc1EwRkJiMEpNTEVWQlFYQkNPMEZCUTBnc1MwRTFRM2RDT3p0QlFUaERla0k3T3pzN1FVRkpRWGxQTEhGQ1FVRm5RaXd5UWtGQldUdEJRVU40UWl4bFFVRlBMRXRCUVV0R0xHRkJRVm83UVVGRFNDeExRWEJFZDBJN08wRkJjMFI2UWpzN096dEJRVWxCUnl4eFFrRkJaMElzZVVKQlFWVkRMRmxCUVZZc1JVRkJkMEk3UVVGRGNFTXNXVUZCU1N4TFFVRkxTaXhoUVVGTUxFdEJRWFZDU1N4WlFVRXpRaXhGUVVOSkxFdEJRVXRLTEdGQlFVd3NSMEZCY1VKSkxGbEJRWEpDTzBGQlExQTdRVUUzUkhkQ0xFTkJRVlFzUTBGQmNFSTdPMEZCWjBWQk96czdPenM3T3p0QlFWRkJhbElzUjBGQlIydFNMR05CUVVnc1IwRkJiMElzVlVGQlZYSlBMRTFCUVZZc1JVRkJhMEpzUWl4TlFVRnNRaXhGUVVFd1FqdEJRVU14UXl4WFFVRlBMRWxCUVVrelFpeEhRVUZITWxFc1kwRkJVQ3hEUVVGelFqbE9MRTFCUVhSQ0xFVkJRVGhDYkVJc1RVRkJPVUlzUTBGQlVEdEJRVU5JTEVOQlJrUWlMQ0ptYVd4bElqb2lRME5CWTNScGIyNUpiblJsY25aaGJDNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzRnUTI5d2VYSnBaMmgwSUNoaktTQXlNREE0TFRJd01UQWdVbWxqWVhKa2J5QlJkV1Z6WVdSaFhHNGdRMjl3ZVhKcFoyaDBJQ2hqS1NBeU1ERXhMVEl3TVRJZ1kyOWpiM015WkMxNExtOXlaMXh1SUVOdmNIbHlhV2RvZENBb1l5a2dNakF4TXkweU1ERTJJRU5vZFd0dmJtY2dWR1ZqYUc1dmJHOW5hV1Z6SUVsdVl5NWNiaUJEYjNCNWNtbG5hSFFnS0dNcElESXdNVGN0TWpBeE9DQllhV0Z0Wlc0Z1dXRnFhU0JUYjJaMGQyRnlaU0JEYnk0c0lFeDBaQzVjYmx4dUlHaDBkSEE2THk5M2QzY3VZMjlqYjNNeVpDMTRMbTl5WjF4dVhHNGdVR1Z5YldsemMybHZiaUJwY3lCb1pYSmxZbmtnWjNKaGJuUmxaQ3dnWm5KbFpTQnZaaUJqYUdGeVoyVXNJSFJ2SUdGdWVTQndaWEp6YjI0Z2IySjBZV2x1YVc1bklHRWdZMjl3ZVZ4dUlHOW1JSFJvYVhNZ2MyOW1kSGRoY21VZ1lXNWtJR0Z6YzI5amFXRjBaV1FnWkc5amRXMWxiblJoZEdsdmJpQm1hV3hsY3lBb2RHaGxJRndpVTI5bWRIZGhjbVZjSWlrc0lIUnZJR1JsWVd4Y2JpQnBiaUIwYUdVZ1UyOW1kSGRoY21VZ2QybDBhRzkxZENCeVpYTjBjbWxqZEdsdmJpd2dhVzVqYkhWa2FXNW5JSGRwZEdodmRYUWdiR2x0YVhSaGRHbHZiaUIwYUdVZ2NtbG5hSFJ6WEc0Z2RHOGdkWE5sTENCamIzQjVMQ0J0YjJScFpua3NJRzFsY21kbExDQndkV0pzYVhOb0xDQmthWE4wY21saWRYUmxMQ0J6ZFdKc2FXTmxibk5sTENCaGJtUXZiM0lnYzJWc2JGeHVJR052Y0dsbGN5QnZaaUIwYUdVZ1UyOW1kSGRoY21Vc0lHRnVaQ0IwYnlCd1pYSnRhWFFnY0dWeWMyOXVjeUIwYnlCM2FHOXRJSFJvWlNCVGIyWjBkMkZ5WlNCcGMxeHVJR1oxY201cGMyaGxaQ0IwYnlCa2J5QnpieXdnYzNWaWFtVmpkQ0IwYnlCMGFHVWdabTlzYkc5M2FXNW5JR052Ym1ScGRHbHZibk02WEc1Y2JpQlVhR1VnWVdKdmRtVWdZMjl3ZVhKcFoyaDBJRzV2ZEdsalpTQmhibVFnZEdocGN5QndaWEp0YVhOemFXOXVJRzV2ZEdsalpTQnphR0ZzYkNCaVpTQnBibU5zZFdSbFpDQnBibHh1SUdGc2JDQmpiM0JwWlhNZ2IzSWdjM1ZpYzNSaGJuUnBZV3dnY0c5eWRHbHZibk1nYjJZZ2RHaGxJRk52Wm5SM1lYSmxMbHh1WEc0Z1ZFaEZJRk5QUmxSWFFWSkZJRWxUSUZCU1QxWkpSRVZFSUZ3aVFWTWdTVk5jSWl3Z1YwbFVTRTlWVkNCWFFWSlNRVTVVV1NCUFJpQkJUbGtnUzBsT1JDd2dSVmhRVWtWVFV5QlBVbHh1SUVsTlVFeEpSVVFzSUVsT1EweFZSRWxPUnlCQ1ZWUWdUazlVSUV4SlRVbFVSVVFnVkU4Z1ZFaEZJRmRCVWxKQlRsUkpSVk1nVDBZZ1RVVlNRMGhCVGxSQlFrbE1TVlJaTEZ4dUlFWkpWRTVGVTFNZ1JrOVNJRUVnVUVGU1ZFbERWVXhCVWlCUVZWSlFUMU5GSUVGT1JDQk9UMDVKVGtaU1NVNUhSVTFGVGxRdUlFbE9JRTVQSUVWV1JVNVVJRk5JUVV4TUlGUklSVnh1SUVGVlZFaFBVbE1nVDFJZ1EwOVFXVkpKUjBoVUlFaFBURVJGVWxNZ1FrVWdURWxCUWt4RklFWlBVaUJCVGxrZ1EweEJTVTBzSUVSQlRVRkhSVk1nVDFJZ1QxUklSVkpjYmlCTVNVRkNTVXhKVkZrc0lGZElSVlJJUlZJZ1NVNGdRVTRnUVVOVVNVOU9JRTlHSUVOUFRsUlNRVU5VTENCVVQxSlVJRTlTSUU5VVNFVlNWMGxUUlN3Z1FWSkpVMGxPUnlCR1VrOU5MRnh1SUU5VlZDQlBSaUJQVWlCSlRpQkRUMDVPUlVOVVNVOU9JRmRKVkVnZ1ZFaEZJRk5QUmxSWFFWSkZJRTlTSUZSSVJTQlZVMFVnVDFJZ1QxUklSVklnUkVWQlRFbE9SMU1nU1U1Y2JpQlVTRVVnVTA5R1ZGZEJVa1V1WEc0Z0tpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaTljYmx4dVhHNHZLaXBjYmlBcUlFQnRiMlIxYkdVZ1kyTmNiaUFxTDF4dVhHNHZLaXBjYmlBcUlDRWpaVzVjYmlBcUlEeHdQaUJCYmlCcGJuUmxjblpoYkNCaFkzUnBiMjRnYVhNZ1lXNGdZV04wYVc5dUlIUm9ZWFFnZEdGclpYTWdjR3hoWTJVZ2QybDBhR2x1SUdFZ1kyVnlkR0ZwYmlCd1pYSnBiMlFnYjJZZ2RHbHRaUzRnUEdKeUx6NWNiaUFxSUVsMElHaGhjeUJoYmlCemRHRnlkQ0IwYVcxbExDQmhibVFnWVNCbWFXNXBjMmdnZEdsdFpTNGdWR2hsSUdacGJtbHphQ0IwYVcxbElHbHpJSFJvWlNCd1lYSmhiV1YwWlhJOFluSXZQbHh1SUNvZ1pIVnlZWFJwYjI0Z2NHeDFjeUIwYUdVZ2MzUmhjblFnZEdsdFpTNDhMM0ErWEc0Z0tseHVJQ29nUEhBK1ZHaGxjMlVnUTBOQlkzUnBiMjVKYm5SbGNuWmhiQ0JoWTNScGIyNXpJR2hoZG1VZ2MyOXRaU0JwYm5SbGNtVnpkR2x1WnlCd2NtOXdaWEowYVdWekxDQnNhV3RsT2p4aWNpOCtYRzRnS2lBdElGUm9aWGtnWTJGdUlISjFiaUJ1YjNKdFlXeHNlU0FvWkdWbVlYVnNkQ2tnSUR4aWNpOCtYRzRnS2lBdElGUm9aWGtnWTJGdUlISjFiaUJ5WlhabGNuTmxaQ0IzYVhSb0lIUm9aU0J5WlhabGNuTmxJRzFsZEdodlpDQWdJRHhpY2k4K1hHNGdLaUF0SUZSb1pYa2dZMkZ1SUhKMWJpQjNhWFJvSUhSb1pTQjBhVzFsSUdGc2RHVnlaV1FnZDJsMGFDQjBhR1VnUVdOalpXeGxjbUYwWlN3Z1FXTmpaV3hFWldOalpXd2dZVzVrSUZOd1pXVmtJR0ZqZEdsdmJuTXVJRHd2Y0Q1Y2JpQXFYRzRnS2lBOGNENUdiM0lnWlhoaGJYQnNaU3dnZVc5MUlHTmhiaUJ6YVcxMWJHRjBaU0JoSUZCcGJtY2dVRzl1WnlCbFptWmxZM1FnY25WdWJtbHVaeUIwYUdVZ1lXTjBhVzl1SUc1dmNtMWhiR3g1SUdGdVpEeGljaTgrWEc0Z0tpQjBhR1Z1SUhKMWJtNXBibWNnYVhRZ1lXZGhhVzRnYVc0Z1VtVjJaWEp6WlNCdGIyUmxMaUE4TDNBK1hHNGdLaUFoSTNwb0lPYVh0dW1YdE9tWHRPbWFsT1dLcU9TOW5PKzhqT2kvbWVlbmplV0txT1M5bk9XY3FPVzNzdVd1bXVhWHR1bVh0T1dHaGVXdWpPYUlrTys4ak9lN3ArYUp2eUJHYVc1cGRHVlVhVzFsUVdOMGFXOXU0NENDWEc0Z0tpQkFZMnhoYzNNZ1FXTjBhVzl1U1c1MFpYSjJZV3hjYmlBcUlFQmxlSFJsYm1SeklFWnBibWwwWlZScGJXVkJZM1JwYjI1Y2JpQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQmtJR1IxY21GMGFXOXVJR2x1SUhObFkyOXVaSE5jYmlBcUwxeHVZMk11UVdOMGFXOXVTVzUwWlhKMllXd2dQU0JqWXk1RGJHRnpjeWg3WEc0Z0lDQWdibUZ0WlRvZ0oyTmpMa0ZqZEdsdmJrbHVkR1Z5ZG1Gc0p5eGNiaUFnSUNCbGVIUmxibVJ6T2lCall5NUdhVzVwZEdWVWFXMWxRV04wYVc5dUxGeHVYRzRnSUNBZ1kzUnZjanBtZFc1amRHbHZiaUFvWkNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGsxQldGOVdRVXhWUlNBOUlESTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyVnNZWEJ6WldRZ1BTQXdPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOW1hWEp6ZEZScFkyc2dQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlpXRnpaVXhwYzNRZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl6Y0dWbFpDQTlJREU3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM1JwYldWelJtOXlVbVZ3WldGMElEMGdNVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjbVZ3WldGMFJtOXlaWFpsY2lBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl5WlhCbFlYUk5aWFJvYjJRZ1BTQm1ZV3h6WlRzdkwwTnZiWEJoZEdsaWJHVWdkMmwwYUNCeVpYQmxZWFFnWTJ4aGMzTXNJRVJwYzJOaGNtUWdZV1owWlhJZ1kyRnVJR0psSUdSbGJHVjBaV1JjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjM0JsWldSTlpYUm9iMlFnUFNCbVlXeHpaVHN2TDBOdmJYQmhkR2xpYkdVZ2QybDBhQ0J5WlhCbFlYUWdZMnhoYzNNc0lFUnBjMk5oY21RZ1lXWjBaWElnWTJGdUlHSmxJR1JsYkdWMFpXUmNiaUFnSUNBZ0lDQWdaQ0FoUFQwZ2RXNWtaV1pwYm1Wa0lDWW1JR05qTGtGamRHbHZia2x1ZEdWeWRtRnNMbkJ5YjNSdmRIbHdaUzVwYm1sMFYybDBhRVIxY21GMGFXOXVMbU5oYkd3b2RHaHBjeXdnWkNrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cVhHNGdJQ0FnSUNvZ1NHOTNJRzFoYm5rZ2MyVmpiMjVrY3lCb1lXUWdaV3hoY0hObFpDQnphVzVqWlNCMGFHVWdZV04wYVc5dWN5QnpkR0Z5ZEdWa0lIUnZJSEoxYmk1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0T2RXMWlaWEo5WEc0Z0lDQWdJQ292WEc0Z0lDQWdaMlYwUld4aGNITmxaRHBtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlsYkdGd2MyVmtPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLbHh1SUNBZ0lDQXFJRWx1YVhScFlXeHBlbVZ6SUhSb1pTQmhZM1JwYjI0dVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUdRZ1pIVnlZWFJwYjI0Z2FXNGdjMlZqYjI1a2MxeHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UwSnZiMnhsWVc1OVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYVc1cGRGZHBkR2hFZFhKaGRHbHZianBtZFc1amRHbHZiaUFvWkNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5a2RYSmhkR2x2YmlBOUlDaGtJRDA5UFNBd0tTQS9JR05qTG0xaFkzSnZMa1pNVkY5RlVGTkpURTlPSURvZ1pEdGNiaUFnSUNBZ0lDQWdMeThnY0hKbGRtVnVkQ0JrYVhacGMybHZiaUJpZVNBd1hHNGdJQ0FnSUNBZ0lDOHZJRlJvYVhNZ1kyOXRjR0Z5YVhOdmJpQmpiM1ZzWkNCaVpTQnBiaUJ6ZEdWd09pd2dZblYwSUdsMElHMXBaMmgwSUdSbFkzSmxZWE5sSUhSb1pTQndaWEptYjNKdFlXNWpaVnh1SUNBZ0lDQWdJQ0F2THlCaWVTQXpKU0JwYmlCb1pXRjJlU0JpWVhObFpDQmhZM1JwYjI0Z1oyRnRaWE11WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMlZzWVhCelpXUWdQU0F3TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDltYVhKemRGUnBZMnNnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnYVhORWIyNWxPbVoxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNoMGFHbHpMbDlsYkdGd2MyVmtJRDQ5SUhSb2FYTXVYMlIxY21GMGFXOXVLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdYMk5zYjI1bFJHVmpiM0poZEdsdmJqb2dablZ1WTNScGIyNG9ZV04wYVc5dUtYdGNiaUFnSUNBZ0lDQWdZV04wYVc5dUxsOXlaWEJsWVhSR2IzSmxkbVZ5SUQwZ2RHaHBjeTVmY21Wd1pXRjBSbTl5WlhabGNqdGNiaUFnSUNBZ0lDQWdZV04wYVc5dUxsOXpjR1ZsWkNBOUlIUm9hWE11WDNOd1pXVmtPMXh1SUNBZ0lDQWdJQ0JoWTNScGIyNHVYM1JwYldWelJtOXlVbVZ3WldGMElEMGdkR2hwY3k1ZmRHbHRaWE5HYjNKU1pYQmxZWFE3WEc0Z0lDQWdJQ0FnSUdGamRHbHZiaTVmWldGelpVeHBjM1FnUFNCMGFHbHpMbDlsWVhObFRHbHpkRHRjYmlBZ0lDQWdJQ0FnWVdOMGFXOXVMbDl6Y0dWbFpFMWxkR2h2WkNBOUlIUm9hWE11WDNOd1pXVmtUV1YwYUc5a08xeHVJQ0FnSUNBZ0lDQmhZM1JwYjI0dVgzSmxjR1ZoZEUxbGRHaHZaQ0E5SUhSb2FYTXVYM0psY0dWaGRFMWxkR2h2WkR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWDNKbGRtVnljMlZGWVhObFRHbHpkRG9nWm5WdVkzUnBiMjRvWVdOMGFXOXVLWHRjYmlBZ0lDQWdJQ0FnYVdZb2RHaHBjeTVmWldGelpVeHBjM1FwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZV04wYVc5dUxsOWxZWE5sVEdsemRDQTlJRnRkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5S0haaGNpQnBQVEE3SUdrOGRHaHBjeTVmWldGelpVeHBjM1F1YkdWdVozUm9PeUJwS3lzcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRmpkR2x2Ymk1ZlpXRnpaVXhwYzNRdWNIVnphQ2gwYUdsekxsOWxZWE5sVEdsemRGdHBYUzV5WlhabGNuTmxLQ2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYmx4dUlDQWdJR05zYjI1bE9tWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHRmpkR2x2YmlBOUlHNWxkeUJqWXk1QlkzUnBiMjVKYm5SbGNuWmhiQ2gwYUdsekxsOWtkWEpoZEdsdmJpazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyTnNiMjVsUkdWamIzSmhkR2x2YmloaFkzUnBiMjRwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWVdOMGFXOXVPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdUlFbHRjR3hsYldWdWRHRjBhVzl1SUc5bUlHVmhjMlVnYlc5MGFXOXVMbHh1SUNBZ0lDQXFJQ0VqZW1nZzU3eVQ1WXFvNkwrUTVZcW80NENDWEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0JsWVhOcGJtZGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1pXRnpaVTlpYWx4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUh0QlkzUnBiMjVKYm5SbGNuWmhiSDFjYmlBZ0lDQWdLaUJBWlhoaGJYQnNaVnh1SUNBZ0lDQXFJR0ZqZEdsdmJpNWxZWE5wYm1jb1kyTXVaV0Z6WlVsdUtETXVNQ2twTzF4dUlDQWdJQ0FxTDF4dUlDQWdJR1ZoYzJsdVp6b2dablZ1WTNScGIyNGdLR1ZoYzJWUFltb3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDJWaGMyVk1hWE4wS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlpXRnpaVXhwYzNRdWJHVnVaM1JvSUQwZ01EdGNiaUFnSUNBZ0lDQWdaV3h6WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlpXRnpaVXhwYzNRZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvT3lCcEt5c3BYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlsWVhObFRHbHpkQzV3ZFhOb0tHRnlaM1Z0Wlc1MGMxdHBYU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCZlkyOXRjSFYwWlVWaGMyVlVhVzFsT2lCbWRXNWpkR2x2YmlBb1pIUXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHeHZZMHhwYzNRZ1BTQjBhR2x6TGw5bFlYTmxUR2x6ZER0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ2doYkc5alRHbHpkQ2tnZkh3Z0tHeHZZMHhwYzNRdWJHVnVaM1JvSUQwOVBTQXdLU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCa2REdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBc0lHNGdQU0JzYjJOTWFYTjBMbXhsYm1kMGFEc2dhU0E4SUc0N0lHa3JLeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lHUjBJRDBnYkc5alRHbHpkRnRwWFM1bFlYTnBibWNvWkhRcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1pIUTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lITjBaWEE2Wm5WdVkzUnBiMjRnS0dSMEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDltYVhKemRGUnBZMnNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyWnBjbk4wVkdsamF5QTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZaV3hoY0hObFpDQTlJREE3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWld4aGNITmxaQ0FyUFNCa2REdGNibHh1SUNBZ0lDQWdJQ0F2TDNSb2FYTXVkWEJrWVhSbEtDZ3hJRDRnS0hSb2FYTXVYMlZzWVhCelpXUWdMeUIwYUdsekxsOWtkWEpoZEdsdmJpa3BJRDhnZEdocGN5NWZaV3hoY0hObFpDQXZJSFJvYVhNdVgyUjFjbUYwYVc5dUlEb2dNU2s3WEc0Z0lDQWdJQ0FnSUM4dmRHaHBjeTUxY0dSaGRHVW9UV0YwYUM1dFlYZ29NQ3dnVFdGMGFDNXRhVzRvTVN3Z2RHaHBjeTVmWld4aGNITmxaQ0F2SUUxaGRHZ3ViV0Y0S0hSb2FYTXVYMlIxY21GMGFXOXVMQ0JqWXk1dFlXTnlieTVHVEZSZlJWQlRTVXhQVGlrcEtTazdYRzRnSUNBZ0lDQWdJSFpoY2lCMElEMGdkR2hwY3k1ZlpXeGhjSE5sWkNBdklDaDBhR2x6TGw5a2RYSmhkR2x2YmlBK0lEQXVNREF3TURBd01URTVNakE1TWpnNU5pQS9JSFJvYVhNdVgyUjFjbUYwYVc5dUlEb2dNQzR3TURBd01EQXhNVGt5TURreU9EazJLVHRjYmlBZ0lDQWdJQ0FnZENBOUlDZ3hJRDRnZENBL0lIUWdPaUF4S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUxY0dSaGRHVW9kQ0ErSURBZ1B5QjBJRG9nTUNrN1hHNWNiaUFnSUNBZ0lDQWdMeTlEYjIxd1lYUnBZbXhsSUhkcGRHZ2djbVZ3WldGMElHTnNZWE56TENCRWFYTmpZWEprSUdGbWRHVnlJR05oYmlCaVpTQmtaV3hsZEdWa0lDaDBhR2x6TGw5eVpYQmxZWFJOWlhSb2IyUXBYRzRnSUNBZ0lDQWdJR2xtS0hSb2FYTXVYM0psY0dWaGRFMWxkR2h2WkNBbUppQjBhR2x6TGw5MGFXMWxjMFp2Y2xKbGNHVmhkQ0ErSURFZ0ppWWdkR2hwY3k1cGMwUnZibVVvS1NsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlnaGRHaHBjeTVmY21Wd1pXRjBSbTl5WlhabGNpbDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmRHbHRaWE5HYjNKU1pYQmxZWFF0TFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZkbUZ5SUdScFptWWdQU0JzYjJOSmJtNWxja0ZqZEdsdmJpNW5aWFJGYkdGd2MyVmtLQ2tnTFNCc2IyTkpibTVsY2tGamRHbHZiaTVmWkhWeVlYUnBiMjQ3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5OMFlYSjBWMmwwYUZSaGNtZGxkQ2gwYUdsekxuUmhjbWRsZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCMGJ5QndjbVYyWlc1MElHcGxjbXN1SUdsemMzVmxJQ016T1RBZ0xERXlORGRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZkR2hwY3k1ZmFXNXVaWEpCWTNScGIyNHVjM1JsY0Nnd0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dmRHaHBjeTVmYVc1dVpYSkJZM1JwYjI0dWMzUmxjQ2hrYVdabUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjM1JsY0NoMGFHbHpMbDlsYkdGd2MyVmtJQzBnZEdocGN5NWZaSFZ5WVhScGIyNHBPMXh1WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnYzNSaGNuUlhhWFJvVkdGeVoyVjBPbVoxYm1OMGFXOXVJQ2gwWVhKblpYUXBJSHRjYmlBZ0lDQWdJQ0FnWTJNdVFXTjBhVzl1TG5CeWIzUnZkSGx3WlM1emRHRnlkRmRwZEdoVVlYSm5aWFF1WTJGc2JDaDBhR2x6TENCMFlYSm5aWFFwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlsYkdGd2MyVmtJRDBnTUR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWm1seWMzUlVhV05ySUQwZ2RISjFaVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdjbVYyWlhKelpUcG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUdOakxteHZaMGxFS0RFd01UQXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlwY2JpQWdJQ0FnS2lCVFpYUWdZVzF3YkdsMGRXUmxJSEpoZEdVdVhHNGdJQ0FnSUNvZ1FIZGhjbTVwYm1jZ1NYUWdjMmh2ZFd4a0lHSmxJRzkyWlhKeWFXUmtaVzRnYVc0Z2MzVmlZMnhoYzNNdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUdGdGNGeHVJQ0FnSUNBcUwxeHVJQ0FnSUhObGRFRnRjR3hwZEhWa1pWSmhkR1U2Wm5WdVkzUnBiMjRnS0dGdGNDa2dlMXh1SUNBZ0lDQWdJQ0F2THlCQlluTjBjbUZqZENCamJHRnpjeUJ1WldWa2N5QnBiWEJzWlcxbGJuUmhkR2x2Ymx4dUlDQWdJQ0FnSUNCall5NXNiMmRKUkNneE1ERXhLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeXBjYmlBZ0lDQWdLaUJIWlhRZ1lXMXdiR2wwZFdSbElISmhkR1V1WEc0Z0lDQWdJQ29nUUhkaGNtNXBibWNnU1hRZ2MyaHZkV3hrSUdKbElHOTJaWEp5YVdSa1pXNGdhVzRnYzNWaVkyeGhjM011WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3VG5WdFltVnlmU0F3WEc0Z0lDQWdJQ292WEc0Z0lDQWdaMlYwUVcxd2JHbDBkV1JsVW1GMFpUcG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUM4dklFRmljM1J5WVdOMElHTnNZWE56SUc1bFpXUnpJR2x0Y0d4bGJXVnVkR0YwYVc5dVhHNGdJQ0FnSUNBZ0lHTmpMbXh2WjBsRUtERXdNVElwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnTUR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxibHh1SUNBZ0lDQXFJRU5vWVc1blpYTWdkR2hsSUhOd1pXVmtJRzltSUdGdUlHRmpkR2x2Yml3Z2JXRnJhVzVuSUdsMElIUmhhMlVnYkc5dVoyVnlJQ2h6Y0dWbFpENHhLVnh1SUNBZ0lDQXFJRzl5SUd4bGMzTWdLSE53WldWa1BERXBJSFJwYldVdUlEeGljaTgrWEc0Z0lDQWdJQ29nVlhObFpuVnNJSFJ2SUhOcGJYVnNZWFJsSUNkemJHOTNJRzF2ZEdsdmJpY2diM0lnSjJaaGMzUWdabTl5ZDJGeVpDY2daV1ptWldOMExseHVJQ0FnSUNBcUlDRWplbWhjYmlBZ0lDQWdLaURtbExubGo1amt1SURrdUtybGlxamt2WnpubW9UcGdKL2x1cWJ2dkl6a3ZiL2xyb1BubW9UbWlhZm9vWXprdmIvbmxLam1tN1RwbGIvbm1vVG1sN2JwbDdUdnZJaHpjR1ZsWkNBK0lESHZ2SWs4WW5JdlBseHVJQ0FnSUNBcUlPYUlsdWFidE9Xd2tlKzhpSE53WldWa0lEd2dNZSs4aWVXUHIrUzdwZWFjaWVhVmlPVytsK2Fvb2VhTG4rS0FuT2FGb3VXS3FPUzluT0tBbmVhSWx1S0FuT1cvcStpL20rS0FuZWVhaE9hVmlPYWVuT09BZ2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0J6Y0dWbFpGeHVJQ0FnSUNBcUlFQnlaWFIxY201eklIdEJZM1JwYjI1OVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzNCbFpXUTZJR1oxYm1OMGFXOXVLSE53WldWa0tYdGNiaUFnSUNBZ0lDQWdhV1lvYzNCbFpXUWdQRDBnTUNsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWXk1c2IyZEpSQ2d4TURFektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjM0JsWldSTlpYUm9iMlFnUFNCMGNuVmxPeTh2UTI5dGNHRjBhV0pzWlNCM2FYUm9JSEpsY0dWaGRDQmpiR0Z6Y3l3Z1JHbHpZMkZ5WkNCaFpuUmxjaUJqWVc0Z1ltVWdaR1ZzWlhSbFpGeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5emNHVmxaQ0FxUFNCemNHVmxaRHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFZGxkQ0IwYUdseklHRmpkR2x2YmlCemNHVmxaQzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1oyVjBVM0JsWldRNklHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5emNHVmxaRHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVTJWMElIUm9hWE1nWVdOMGFXOXVJSE53WldWa0xseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCemNHVmxaRnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJSHRCWTNScGIyNUpiblJsY25aaGJIMWNiaUFnSUNBZ0tpOWNiaUFnSUNCelpYUlRjR1ZsWkRvZ1puVnVZM1JwYjI0b2MzQmxaV1FwZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl6Y0dWbFpDQTlJSE53WldWa08xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJseHVJQ0FnSUNBcUlGSmxjR1ZoZEhNZ1lXNGdZV04wYVc5dUlHRWdiblZ0WW1WeUlHOW1JSFJwYldWekxseHVJQ0FnSUNBcUlGUnZJSEpsY0dWaGRDQmhiaUJoWTNScGIyNGdabTl5WlhabGNpQjFjMlVnZEdobElFTkRVbVZ3WldGMFJtOXlaWFpsY2lCaFkzUnBiMjR1WEc0Z0lDQWdJQ29nSVNONmFDRHBoNDNscEkzbGlxamt2WnpsajYva3U2WG1qSW5rdUlEbHJwcm1yS0htbGJEcGg0M2xwSTNrdUlEa3VLcmxpcWprdlp6dnZJemt2Yi9ubEtnZ1VtVndaV0YwUm05eVpYWmxjaURsaXFqa3Zaem1uYVhtc0xqb3Y1enBoNDNscEkza3VJRGt1S3JsaXFqa3ZaempnSUpjYmlBZ0lDQWdLaUJBYldWMGFHOWtJSEpsY0dWaGRGeHVJQ0FnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCMGFXMWxjMXh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJSHRCWTNScGIyNUpiblJsY25aaGJIMWNiaUFnSUNBZ0tpOWNiaUFnSUNCeVpYQmxZWFE2SUdaMWJtTjBhVzl1S0hScGJXVnpLWHRjYmlBZ0lDQWdJQ0FnZEdsdFpYTWdQU0JOWVhSb0xuSnZkVzVrS0hScGJXVnpLVHRjYmlBZ0lDQWdJQ0FnYVdZb2FYTk9ZVTRvZEdsdFpYTXBJSHg4SUhScGJXVnpJRHdnTVNsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWXk1c2IyZEpSQ2d4TURFMEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzSmxjR1ZoZEUxbGRHaHZaQ0E5SUhSeWRXVTdMeTlEYjIxd1lYUnBZbXhsSUhkcGRHZ2djbVZ3WldGMElHTnNZWE56TENCRWFYTmpZWEprSUdGbWRHVnlJR05oYmlCaVpTQmtaV3hsZEdWa1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNScGJXVnpSbTl5VW1Wd1pXRjBJQ285SUhScGJXVnpPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxibHh1SUNBZ0lDQXFJRkpsY0dWaGRITWdZVzRnWVdOMGFXOXVJR1p2Y2lCbGRtVnlMaUFnUEdKeUx6NWNiaUFnSUNBZ0tpQlVieUJ5WlhCbFlYUWdkR2hsSUdGdUlHRmpkR2x2YmlCbWIzSWdZU0JzYVcxcGRHVmtJRzUxYldKbGNpQnZaaUIwYVcxbGN5QjFjMlVnZEdobElGSmxjR1ZoZENCaFkzUnBiMjR1SUR4aWNpOCtYRzRnSUNBZ0lDb2dJU042YUNEbXNMam92NXpsbkxEcGg0M2xwSTNrdUlEa3VLcmxpcWprdlp6dnZJem1uSW5wbVpEbXJLSG1sYkRsaG9YcGg0M2xwSTNrdUlEa3VLcmxpcWprdlp6b3I3Zmt2Yi9ubEtnZ1VtVndaV0YwSU9XS3FPUzluT09BZ2x4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnY21Wd1pXRjBSbTl5WlhabGNseHVJQ0FnSUNBcUlFQnlaWFIxY201eklIdEJZM1JwYjI1SmJuUmxjblpoYkgxY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J5WlhCbFlYUkdiM0psZG1WeU9pQm1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXlaWEJsWVhSTlpYUm9iMlFnUFNCMGNuVmxPeTh2UTI5dGNHRjBhV0pzWlNCM2FYUm9JSEpsY0dWaGRDQmpiR0Z6Y3l3Z1JHbHpZMkZ5WkNCaFpuUmxjaUJqWVc0Z1ltVWdaR1ZzWlhSbFpGeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5MGFXMWxjMFp2Y2xKbGNHVmhkQ0E5SUhSb2FYTXVUVUZZWDFaQlRGVkZPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXlaWEJsWVhSR2IzSmxkbVZ5SUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlZ4dWZTazdYRzVjYm1OakxtRmpkR2x2YmtsdWRHVnlkbUZzSUQwZ1puVnVZM1JwYjI0Z0tHUXBJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJR05qTGtGamRHbHZia2x1ZEdWeWRtRnNLR1FwTzF4dWZUdGNibHh1THlvcVhHNGdLaUJBYlc5a2RXeGxJR05qWEc0Z0tpOWNibHh1THlwY2JpQXFJRkoxYm5NZ1lXTjBhVzl1Y3lCelpYRjFaVzUwYVdGc2JIa3NJRzl1WlNCaFpuUmxjaUJoYm05MGFHVnlMbHh1SUNvZ1FHTnNZWE56SUZObGNYVmxibU5sWEc0Z0tpQkFaWGgwWlc1a2N5QkJZM1JwYjI1SmJuUmxjblpoYkZ4dUlDb2dRSEJoY21GdElIdEJjbkpoZVh4R2FXNXBkR1ZVYVcxbFFXTjBhVzl1ZlNCMFpXMXdRWEp5WVhsY2JpQXFJRUJsZUdGdGNHeGxYRzRnS2lBdkx5QmpjbVZoZEdVZ2MyVnhkV1Z1WTJVZ2QybDBhQ0JoWTNScGIyNXpYRzRnS2lCMllYSWdjMlZ4SUQwZ2JtVjNJR05qTGxObGNYVmxibU5sS0dGamRERXNJR0ZqZERJcE8xeHVJQ3BjYmlBcUlDOHZJR055WldGMFpTQnpaWEYxWlc1alpTQjNhWFJvSUdGeWNtRjVYRzRnS2lCMllYSWdjMlZ4SUQwZ2JtVjNJR05qTGxObGNYVmxibU5sS0dGamRFRnljbUY1S1R0Y2JpQXFMMXh1WTJNdVUyVnhkV1Z1WTJVZ1BTQmpZeTVEYkdGemN5aDdYRzRnSUNBZ2JtRnRaVG9nSjJOakxsTmxjWFZsYm1ObEp5eGNiaUFnSUNCbGVIUmxibVJ6T2lCall5NUJZM1JwYjI1SmJuUmxjblpoYkN4Y2JseHVJQ0FnSUdOMGIzSTZablZ1WTNScGIyNGdLSFJsYlhCQmNuSmhlU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDloWTNScGIyNXpJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNOd2JHbDBJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmJHRnpkQ0E5SURBN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNKbGRtVnljMlZrSUQwZ1ptRnNjMlU3WEc1Y2JpQWdJQ0FnSUNBZ2RtRnlJSEJoY21GdFFYSnlZWGtnUFNBb2RHVnRjRUZ5Y21GNUlHbHVjM1JoYm1ObGIyWWdRWEp5WVhrcElEOGdkR1Z0Y0VGeWNtRjVJRG9nWVhKbmRXMWxiblJ6TzF4dUlDQWdJQ0FnSUNCcFppQW9jR0Z5WVcxQmNuSmhlUzVzWlc1bmRHZ2dQVDA5SURFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOakxtVnljbTl5U1VRb01UQXhPU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkbUZ5SUd4aGMzUWdQU0J3WVhKaGJVRnljbUY1TG14bGJtZDBhQ0F0SURFN1hHNGdJQ0FnSUNBZ0lHbG1JQ2dvYkdGemRDQStQU0F3S1NBbUppQW9jR0Z5WVcxQmNuSmhlVnRzWVhOMFhTQTlQU0J1ZFd4c0tTbGNiaUFnSUNBZ0lDQWdJQ0FnSUdOakxteHZaMGxFS0RFd01UVXBPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaHNZWE4wSUQ0OUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ3Y21WMklEMGdjR0Z5WVcxQmNuSmhlVnN3WFN3Z1lXTjBhVzl1TVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBeE95QnBJRHdnYkdGemREc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEJoY21GdFFYSnlZWGxiYVYwcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVdOMGFXOXVNU0E5SUhCeVpYWTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCeVpYWWdQU0JqWXk1VFpYRjFaVzVqWlM1ZllXTjBhVzl1VDI1bFZIZHZLR0ZqZEdsdmJqRXNJSEJoY21GdFFYSnlZWGxiYVYwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFXNXBkRmRwZEdoVWQyOUJZM1JwYjI1ektIQnlaWFlzSUhCaGNtRnRRWEp5WVhsYmJHRnpkRjBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cVhHNGdJQ0FnSUNvZ1NXNXBkR2xoYkdsNlpYTWdkR2hsSUdGamRHbHZiaUE4WW5JdlBseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1JtbHVhWFJsVkdsdFpVRmpkR2x2Ym4wZ1lXTjBhVzl1VDI1bFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0R2FXNXBkR1ZVYVcxbFFXTjBhVzl1ZlNCaFkzUnBiMjVVZDI5Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0Q2IyOXNaV0Z1ZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJR2x1YVhSWGFYUm9WSGR2UVdOMGFXOXVjenBtZFc1amRHbHZiaUFvWVdOMGFXOXVUMjVsTENCaFkzUnBiMjVVZDI4cElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGaFkzUnBiMjVQYm1VZ2ZId2dJV0ZqZEdsdmJsUjNieWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMk11WlhKeWIzSkpSQ2d4TURJMUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhaaGNpQmtkWEpoZEdsdmJrOXVaU0E5SUdGamRHbHZiazl1WlM1ZlpIVnlZWFJwYjI0c0lHUjFjbUYwYVc5dVZIZHZJRDBnWVdOMGFXOXVWSGR2TGw5a2RYSmhkR2x2Ymp0Y2JpQWdJQ0FnSUNBZ1pIVnlZWFJwYjI1UGJtVWdLajBnWVdOMGFXOXVUMjVsTGw5eVpYQmxZWFJOWlhSb2IyUWdQeUJoWTNScGIyNVBibVV1WDNScGJXVnpSbTl5VW1Wd1pXRjBJRG9nTVR0Y2JpQWdJQ0FnSUNBZ1pIVnlZWFJwYjI1VWQyOGdLajBnWVdOMGFXOXVWSGR2TGw5eVpYQmxZWFJOWlhSb2IyUWdQeUJoWTNScGIyNVVkMjh1WDNScGJXVnpSbTl5VW1Wd1pXRjBJRG9nTVR0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1FnUFNCa2RYSmhkR2x2Yms5dVpTQXJJR1IxY21GMGFXOXVWSGR2TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbWx1YVhSWGFYUm9SSFZ5WVhScGIyNG9aQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWVdOMGFXOXVjMXN3WFNBOUlHRmpkR2x2Yms5dVpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZllXTjBhVzl1YzFzeFhTQTlJR0ZqZEdsdmJsUjNienRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUdOc2IyNWxPbVoxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR0ZqZEdsdmJpQTlJRzVsZHlCall5NVRaWEYxWlc1alpTZ3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWpiRzl1WlVSbFkyOXlZWFJwYjI0b1lXTjBhVzl1S1R0Y2JpQWdJQ0FnSUNBZ1lXTjBhVzl1TG1sdWFYUlhhWFJvVkhkdlFXTjBhVzl1Y3loMGFHbHpMbDloWTNScGIyNXpXekJkTG1Oc2IyNWxLQ2tzSUhSb2FYTXVYMkZqZEdsdmJuTmJNVjB1WTJ4dmJtVW9LU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJoWTNScGIyNDdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lITjBZWEowVjJsMGFGUmhjbWRsZERwbWRXNWpkR2x2YmlBb2RHRnlaMlYwS1NCN1hHNGdJQ0FnSUNBZ0lHTmpMa0ZqZEdsdmJrbHVkR1Z5ZG1Gc0xuQnliM1J2ZEhsd1pTNXpkR0Z5ZEZkcGRHaFVZWEpuWlhRdVkyRnNiQ2gwYUdsekxDQjBZWEpuWlhRcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5emNHeHBkQ0E5SUhSb2FYTXVYMkZqZEdsdmJuTmJNRjB1WDJSMWNtRjBhVzl1SUM4Z2RHaHBjeTVmWkhWeVlYUnBiMjQ3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM053YkdsMElDbzlJSFJvYVhNdVgyRmpkR2x2Ym5OYk1GMHVYM0psY0dWaGRFMWxkR2h2WkNBL0lIUm9hWE11WDJGamRHbHZibk5iTUYwdVgzUnBiV1Z6Um05eVVtVndaV0YwSURvZ01UdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmJHRnpkQ0E5SUMweE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCemRHOXdPbVoxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdTWE56ZFdVZ0l6RXpNRFZjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDJ4aGMzUWdJVDA5SUMweEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZZV04wYVc5dWMxdDBhR2x6TGw5c1lYTjBYUzV6ZEc5d0tDazdYRzRnSUNBZ0lDQWdJR05qTGtGamRHbHZiaTV3Y205MGIzUjVjR1V1YzNSdmNDNWpZV3hzS0hSb2FYTXBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQjFjR1JoZEdVNlpuVnVZM1JwYjI0Z0tHUjBLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnVaWGRmZEN3Z1ptOTFibVFnUFNBd08xeHVJQ0FnSUNBZ0lDQjJZWElnYkc5alUzQnNhWFFnUFNCMGFHbHpMbDl6Y0d4cGRDd2diRzlqUVdOMGFXOXVjeUE5SUhSb2FYTXVYMkZqZEdsdmJuTXNJR3h2WTB4aGMzUWdQU0IwYUdsekxsOXNZWE4wTENCaFkzUnBiMjVHYjNWdVpEdGNibHh1SUNBZ0lDQWdJQ0JrZENBOUlIUm9hWE11WDJOdmJYQjFkR1ZGWVhObFZHbHRaU2hrZENrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hrZENBOElHeHZZMU53YkdsMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QmhZM1JwYjI1Yk1GMWNiaUFnSUNBZ0lDQWdJQ0FnSUc1bGQxOTBJRDBnS0d4dlkxTndiR2wwSUNFOVBTQXdLU0EvSUdSMElDOGdiRzlqVTNCc2FYUWdPaUF4TzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1ptOTFibVFnUFQwOUlEQWdKaVlnYkc5alRHRnpkQ0E5UFQwZ01TQW1KaUIwYUdsekxsOXlaWFpsY25ObFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUZKbGRtVnljMlVnYlc5a1pTQS9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnV0ZoWU9pQkNkV2N1SUhSb2FYTWdZMkZ6WlNCa2IyVnpiaWQwSUdOdmJuUmxiWEJzWVhSbElIZG9aVzRnWDJ4aGMzUTlQUzB4TENCbWIzVnVaRDB3SUdGdVpDQnBiaUJjSW5KbGRtVnljMlVnYlc5a1pWd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnYzJsdVkyVWdhWFFnZDJsc2JDQnlaWEYxYVhKbElHRWdhR0ZqYXlCMGJ5QnJibTkzSUdsbUlHRnVJR0ZqZEdsdmJpQnBjeUJ2YmlCeVpYWmxjbk5sSUcxdlpHVWdiM0lnYm05MExseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRndpYzNSbGNGd2lJSE5vYjNWc1pDQmlaU0J2ZG1WeWNtbGtaVzRzSUdGdVpDQjBhR1VnWENKeVpYWmxjbk5sVFc5a1pWd2lJSFpoYkhWbElIQnliM0JoWjJGMFpXUWdkRzhnYVc1dVpYSWdVMlZ4ZFdWdVkyVnpMbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3h2WTBGamRHbHZibk5iTVYwdWRYQmtZWFJsS0RBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeHZZMEZqZEdsdmJuTmJNVjB1YzNSdmNDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1lXTjBhVzl1V3pGZFhHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNWdVpDQTlJREU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnVaWGRmZENBOUlDaHNiMk5UY0d4cGRDQTlQVDBnTVNrZ1B5QXhJRG9nS0dSMElDMGdiRzlqVTNCc2FYUXBJQzhnS0RFZ0xTQnNiMk5UY0d4cGRDazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hzYjJOTVlYTjBJRDA5UFNBdE1Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdGamRHbHZibHN3WFNCM1lYTWdjMnRwY0hCbFpDd2daWGhsWTNWMFpTQnBkQzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzYjJOQlkzUnBiMjV6V3pCZExuTjBZWEowVjJsMGFGUmhjbWRsZENoMGFHbHpMblJoY21kbGRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiRzlqUVdOMGFXOXVjMXN3WFM1MWNHUmhkR1VvTVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHOWpRV04wYVc5dWMxc3dYUzV6ZEc5d0tDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JHOWpUR0Z6ZENBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklITjNhWFJqYUdsdVp5QjBieUJoWTNScGIyNGdNUzRnYzNSdmNDQmhZM1JwYjI0Z01DNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNiMk5CWTNScGIyNXpXekJkTG5Wd1pHRjBaU2d4S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2IyTkJZM1JwYjI1eld6QmRMbk4wYjNBb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR0ZqZEdsdmJrWnZkVzVrSUQwZ2JHOWpRV04wYVc5dWMxdG1iM1Z1WkYwN1hHNGdJQ0FnSUNBZ0lDOHZJRXhoYzNRZ1lXTjBhVzl1SUdadmRXNWtJR0Z1WkNCcGRDQnBjeUJrYjI1bExseHVJQ0FnSUNBZ0lDQnBaaUFvYkc5alRHRnpkQ0E5UFQwZ1ptOTFibVFnSmlZZ1lXTjBhVzl1Um05MWJtUXVhWE5FYjI1bEtDa3BYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdUR0Z6ZENCaFkzUnBiMjRnYm05MElHWnZkVzVrWEc0Z0lDQWdJQ0FnSUdsbUlDaHNiMk5NWVhOMElDRTlQU0JtYjNWdVpDbGNiaUFnSUNBZ0lDQWdJQ0FnSUdGamRHbHZia1p2ZFc1a0xuTjBZWEowVjJsMGFGUmhjbWRsZENoMGFHbHpMblJoY21kbGRDazdYRzVjYmlBZ0lDQWdJQ0FnYm1WM1gzUWdQU0J1WlhkZmRDQXFJR0ZqZEdsdmJrWnZkVzVrTGw5MGFXMWxjMFp2Y2xKbGNHVmhkRHRjYmlBZ0lDQWdJQ0FnWVdOMGFXOXVSbTkxYm1RdWRYQmtZWFJsS0c1bGQxOTBJRDRnTVNBL0lHNWxkMTkwSUNVZ01TQTZJRzVsZDE5MEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmJHRnpkQ0E5SUdadmRXNWtPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQnlaWFpsY25ObE9tWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHRmpkR2x2YmlBOUlHTmpMbE5sY1hWbGJtTmxMbDloWTNScGIyNVBibVZVZDI4b2RHaHBjeTVmWVdOMGFXOXVjMXN4WFM1eVpYWmxjbk5sS0Nrc0lIUm9hWE11WDJGamRHbHZibk5iTUYwdWNtVjJaWEp6WlNncEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlkyeHZibVZFWldOdmNtRjBhVzl1S0dGamRHbHZiaWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM0psZG1WeWMyVkZZWE5sVEdsemRDaGhZM1JwYjI0cE8xeHVJQ0FnSUNBZ0lDQmhZM1JwYjI0dVgzSmxkbVZ5YzJWa0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdGamRHbHZianRjYmlBZ0lDQjlYRzU5S1R0Y2JseHVMeW9xWEc0Z0tpQWhJMlZ1WEc0Z0tpQklaV3h3WlhJZ1kyOXVjM1J5ZFdOMGIzSWdkRzhnWTNKbFlYUmxJR0Z1SUdGeWNtRjVJRzltSUhObGNYVmxibU5sWVdKc1pTQmhZM1JwYjI1elhHNGdLaUJVYUdVZ1kzSmxZWFJsWkNCaFkzUnBiMjRnZDJsc2JDQnlkVzRnWVdOMGFXOXVjeUJ6WlhGMVpXNTBhV0ZzYkhrc0lHOXVaU0JoWm5SbGNpQmhibTkwYUdWeUxseHVJQ29nSVNONmFDRHBvYnJsdW8vbWlhZm9vWXpsaXFqa3ZaenZ2SXpsaUp2bHU3cm5tb1RsaXFqa3ZaemxzSWJtaklucG9icmx1by9rdnAzbXJLSG92NURvb1l6amdJSmNiaUFxSUVCdFpYUm9iMlFnYzJWeGRXVnVZMlZjYmlBcUlFQndZWEpoYlNCN1JtbHVhWFJsVkdsdFpVRmpkR2x2Ym54R2FXNXBkR1ZVYVcxbFFXTjBhVzl1VzExOUlHRmpkR2x2Yms5eVFXTjBhVzl1UVhKeVlYbGNiaUFxSUVCd1lYSmhiU0I3Um1sdWFYUmxWR2x0WlVGamRHbHZibjBnTGk0dWRHVnRjRUZ5Y21GNVhHNGdLaUJBY21WMGRYSnVJSHRCWTNScGIyNUpiblJsY25aaGJIMWNiaUFxSUVCbGVHRnRjR3hsWEc0Z0tpQXZMeUJsZUdGdGNHeGxYRzRnS2lBdkx5QmpjbVZoZEdVZ2MyVnhkV1Z1WTJVZ2QybDBhQ0JoWTNScGIyNXpYRzRnS2lCMllYSWdjMlZ4SUQwZ1kyTXVjMlZ4ZFdWdVkyVW9ZV04wTVN3Z1lXTjBNaWs3WEc0Z0tseHVJQ29nTHk4Z1kzSmxZWFJsSUhObGNYVmxibU5sSUhkcGRHZ2dZWEp5WVhsY2JpQXFJSFpoY2lCelpYRWdQU0JqWXk1elpYRjFaVzVqWlNoaFkzUkJjbkpoZVNrN1hHNGdLaTljYmk4dklIUnZaRzg2SUVsMElITm9iM1ZzWkNCaVpTQjFjMlVnYm1WM1hHNWpZeTV6WlhGMVpXNWpaU0E5SUdaMWJtTjBhVzl1SUNndktrMTFiSFJwY0d4bElFRnlaM1Z0Wlc1MGN5b3ZkR1Z0Y0VGeWNtRjVLU0I3WEc0Z0lDQWdkbUZ5SUhCaGNtRnRRWEp5WVhrZ1BTQW9kR1Z0Y0VGeWNtRjVJR2x1YzNSaGJtTmxiMllnUVhKeVlYa3BJRDhnZEdWdGNFRnljbUY1SURvZ1lYSm5kVzFsYm5Sek8xeHVJQ0FnSUdsbUlDaHdZWEpoYlVGeWNtRjVMbXhsYm1kMGFDQTlQVDBnTVNrZ2UxeHVJQ0FnSUNBZ0lDQmpZeTVsY25KdmNrbEVLREV3TVRrcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQjlYRzRnSUNBZ2RtRnlJR3hoYzNRZ1BTQndZWEpoYlVGeWNtRjVMbXhsYm1kMGFDQXRJREU3WEc0Z0lDQWdhV1lnS0Noc1lYTjBJRDQ5SURBcElDWW1JQ2h3WVhKaGJVRnljbUY1VzJ4aGMzUmRJRDA5SUc1MWJHd3BLVnh1SUNBZ0lDQWdJQ0JqWXk1c2IyZEpSQ2d4TURFMUtUdGNibHh1SUNBZ0lIWmhjaUJ5WlhOMWJIUWdQU0J1ZFd4c08xeHVJQ0FnSUdsbUlDaHNZWE4wSUQ0OUlEQXBJSHRjYmlBZ0lDQWdJQ0FnY21WemRXeDBJRDBnY0dGeVlXMUJjbkpoZVZzd1hUdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURFN0lHa2dQRDBnYkdGemREc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NHRnlZVzFCY25KaGVWdHBYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQ0E5SUdOakxsTmxjWFZsYm1ObExsOWhZM1JwYjI1UGJtVlVkMjhvY21WemRXeDBMQ0J3WVhKaGJVRnljbUY1VzJsZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzU5TzF4dVhHNWpZeTVUWlhGMVpXNWpaUzVmWVdOMGFXOXVUMjVsVkhkdklEMGdablZ1WTNScGIyNGdLR0ZqZEdsdmJrOXVaU3dnWVdOMGFXOXVWSGR2S1NCN1hHNGdJQ0FnZG1GeUlITmxjWFZsYm1ObElEMGdibVYzSUdOakxsTmxjWFZsYm1ObEtDazdYRzRnSUNBZ2MyVnhkV1Z1WTJVdWFXNXBkRmRwZEdoVWQyOUJZM1JwYjI1ektHRmpkR2x2Yms5dVpTd2dZV04wYVc5dVZIZHZLVHRjYmlBZ0lDQnlaWFIxY200Z2MyVnhkV1Z1WTJVN1hHNTlPMXh1WEc0dktseHVJQ29nVW1Wd1pXRjBjeUJoYmlCaFkzUnBiMjRnWVNCdWRXMWlaWElnYjJZZ2RHbHRaWE11WEc0Z0tpQlVieUJ5WlhCbFlYUWdZVzRnWVdOMGFXOXVJR1p2Y21WMlpYSWdkWE5sSUhSb1pTQkRRMUpsY0dWaGRFWnZjbVYyWlhJZ1lXTjBhVzl1TGx4dUlDb2dRR05zWVhOeklGSmxjR1ZoZEZ4dUlDb2dRR1Y0ZEdWdVpITWdRV04wYVc5dVNXNTBaWEoyWVd4Y2JpQXFJRUJ3WVhKaGJTQjdSbWx1YVhSbFZHbHRaVUZqZEdsdmJuMGdZV04wYVc5dVhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdkR2x0WlhOY2JpQXFJRUJsZUdGdGNHeGxYRzRnS2lCMllYSWdjbVZ3SUQwZ2JtVjNJR05qTGxKbGNHVmhkQ2hqWXk1elpYRjFaVzVqWlNocWRXMXdNaXdnYW5WdGNERXBMQ0ExS1R0Y2JpQXFMMXh1WTJNdVVtVndaV0YwSUQwZ1kyTXVRMnhoYzNNb2UxeHVJQ0FnSUc1aGJXVTZJQ2RqWXk1U1pYQmxZWFFuTEZ4dUlDQWdJR1Y0ZEdWdVpITTZJR05qTGtGamRHbHZia2x1ZEdWeWRtRnNMRnh1WEc0Z0lDQWdZM1J2Y2pvZ1puVnVZM1JwYjI0Z0tHRmpkR2x2Yml3Z2RHbHRaWE1wSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZEdsdFpYTWdQU0F3TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDkwYjNSaGJDQTlJREE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjVsZUhSRWRDQTlJREE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMkZqZEdsdmJrbHVjM1JoYm5RZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYVc1dVpYSkJZM1JwYjI0Z1BTQnVkV3hzTzF4dVhIUmNkSFJwYldWeklDRTlQU0IxYm1SbFptbHVaV1FnSmlZZ2RHaHBjeTVwYm1sMFYybDBhRUZqZEdsdmJpaGhZM1JwYjI0c0lIUnBiV1Z6S1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlwY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTBacGJtbDBaVlJwYldWQlkzUnBiMjU5SUdGamRHbHZibHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQjBhVzFsYzF4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTBKdmIyeGxZVzU5WEc0Z0lDQWdJQ292WEc0Z0lDQWdhVzVwZEZkcGRHaEJZM1JwYjI0NlpuVnVZM1JwYjI0Z0tHRmpkR2x2Yml3Z2RHbHRaWE1wSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1IxY21GMGFXOXVJRDBnWVdOMGFXOXVMbDlrZFhKaGRHbHZiaUFxSUhScGJXVnpPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1sdWFYUlhhWFJvUkhWeVlYUnBiMjRvWkhWeVlYUnBiMjRwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTBhVzFsY3lBOUlIUnBiV1Z6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmFXNXVaWEpCWTNScGIyNGdQU0JoWTNScGIyNDdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZV04wYVc5dUlHbHVjM1JoYm1ObGIyWWdZMk11UVdOMGFXOXVTVzV6ZEdGdWRDbDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZllXTjBhVzl1U1c1emRHRnVkQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmRHbHRaWE1nTFQwZ01UdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzUnZkR0ZzSUQwZ01EdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWTJ4dmJtVTZablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdZV04wYVc5dUlEMGdibVYzSUdOakxsSmxjR1ZoZENncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5amJHOXVaVVJsWTI5eVlYUnBiMjRvWVdOMGFXOXVLVHRjYmlBZ0lDQWdJQ0FnWVdOMGFXOXVMbWx1YVhSWGFYUm9RV04wYVc5dUtIUm9hWE11WDJsdWJtVnlRV04wYVc5dUxtTnNiMjVsS0Nrc0lIUm9hWE11WDNScGJXVnpLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR0ZqZEdsdmJqdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2MzUmhjblJYYVhSb1ZHRnlaMlYwT21aMWJtTjBhVzl1SUNoMFlYSm5aWFFwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZEc5MFlXd2dQU0F3TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl1WlhoMFJIUWdQU0IwYUdsekxsOXBibTVsY2tGamRHbHZiaTVmWkhWeVlYUnBiMjRnTHlCMGFHbHpMbDlrZFhKaGRHbHZianRjYmlBZ0lDQWdJQ0FnWTJNdVFXTjBhVzl1U1c1MFpYSjJZV3d1Y0hKdmRHOTBlWEJsTG5OMFlYSjBWMmwwYUZSaGNtZGxkQzVqWVd4c0tIUm9hWE1zSUhSaGNtZGxkQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMmx1Ym1WeVFXTjBhVzl1TG5OMFlYSjBWMmwwYUZSaGNtZGxkQ2gwWVhKblpYUXBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQnpkRzl3T21aMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmFXNXVaWEpCWTNScGIyNHVjM1J2Y0NncE8xeHVJQ0FnSUNBZ0lDQmpZeTVCWTNScGIyNHVjSEp2ZEc5MGVYQmxMbk4wYjNBdVkyRnNiQ2gwYUdsektUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2RYQmtZWFJsT21aMWJtTjBhVzl1SUNoa2RDa2dlMXh1SUNBZ0lDQWdJQ0JrZENBOUlIUm9hWE11WDJOdmJYQjFkR1ZGWVhObFZHbHRaU2hrZENrN1hHNGdJQ0FnSUNBZ0lIWmhjaUJzYjJOSmJtNWxja0ZqZEdsdmJpQTlJSFJvYVhNdVgybHVibVZ5UVdOMGFXOXVPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2JHOWpSSFZ5WVhScGIyNGdQU0IwYUdsekxsOWtkWEpoZEdsdmJqdGNiaUFnSUNBZ0lDQWdkbUZ5SUd4dlkxUnBiV1Z6SUQwZ2RHaHBjeTVmZEdsdFpYTTdYRzRnSUNBZ0lDQWdJSFpoY2lCc2IyTk9aWGgwUkhRZ1BTQjBhR2x6TGw5dVpYaDBSSFE3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLR1IwSUQ0OUlHeHZZMDVsZUhSRWRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2QyaHBiR1VnS0dSMElENGdiRzlqVG1WNGRFUjBJQ1ltSUhSb2FYTXVYM1J2ZEdGc0lEd2diRzlqVkdsdFpYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzYjJOSmJtNWxja0ZqZEdsdmJpNTFjR1JoZEdVb01TazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmRHOTBZV3dyS3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2IyTkpibTVsY2tGamRHbHZiaTV6ZEc5d0tDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiRzlqU1c1dVpYSkJZM1JwYjI0dWMzUmhjblJYYVhSb1ZHRnlaMlYwS0hSb2FYTXVkR0Z5WjJWMEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNiMk5PWlhoMFJIUWdLejBnYkc5alNXNXVaWEpCWTNScGIyNHVYMlIxY21GMGFXOXVJQzhnYkc5alJIVnlZWFJwYjI0N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYm1WNGRFUjBJRDBnYkc5alRtVjRkRVIwSUQ0Z01TQS9JREVnT2lCc2IyTk9aWGgwUkhRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdacGVDQm1iM0lnYVhOemRXVWdJekV5T0Rnc0lHbHVZMjl5Y21WamRDQmxibVFnZG1Gc2RXVWdiMllnY21Wd1pXRjBYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aSFFnUGowZ01TNHdJQ1ltSUhSb2FYTXVYM1J2ZEdGc0lEd2diRzlqVkdsdFpYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCbWFYZ2dabTl5SUdOdlkyOXpMV055WldGMGIzSXZabWx5WldKaGJHd3ZhWE56ZFdWekx6UXpNVEJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzYjJOSmJtNWxja0ZqZEdsdmJpNTFjR1JoZEdVb01TazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmRHOTBZV3dyS3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnWkc5dUozUWdjMlYwSUdFZ2FXNXpkR0Z1ZENCaFkzUnBiMjRnWW1GamF5QnZjaUIxY0dSaGRHVWdhWFFzSUdsMElHaGhjeUJ1YnlCMWMyVWdZbVZqWVhWelpTQnBkQ0JvWVhNZ2JtOGdaSFZ5WVhScGIyNWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1ZllXTjBhVzl1U1c1emRHRnVkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5MGIzUmhiQ0E5UFQwZ2JHOWpWR2x0WlhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkc5alNXNXVaWEpCWTNScGIyNHVjM1J2Y0NncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdsemMzVmxJQ016T1RBZ2NISmxkbVZ1ZENCcVpYSnJMQ0IxYzJVZ2NtbG5hSFFnZFhCa1lYUmxYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4dlkwbHVibVZ5UVdOMGFXOXVMblZ3WkdGMFpTaGtkQ0F0SUNoc2IyTk9aWGgwUkhRZ0xTQnNiMk5KYm01bGNrRmpkR2x2Ymk1ZlpIVnlZWFJwYjI0Z0x5QnNiMk5FZFhKaGRHbHZiaWtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeHZZMGx1Ym1WeVFXTjBhVzl1TG5Wd1pHRjBaU2dvWkhRZ0tpQnNiMk5VYVcxbGN5a2dKU0F4TGpBcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHbHpSRzl1WlRwbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5MGIzUmhiQ0E5UFQwZ2RHaHBjeTVmZEdsdFpYTTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lISmxkbVZ5YzJVNlpuVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1lXTjBhVzl1SUQwZ2JtVjNJR05qTGxKbGNHVmhkQ2gwYUdsekxsOXBibTVsY2tGamRHbHZiaTV5WlhabGNuTmxLQ2tzSUhSb2FYTXVYM1JwYldWektUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlkyeHZibVZFWldOdmNtRjBhVzl1S0dGamRHbHZiaWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM0psZG1WeWMyVkZZWE5sVEdsemRDaGhZM1JwYjI0cE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1lXTjBhVzl1TzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2x4dUlDQWdJQ0FxSUZObGRDQnBibTVsY2lCQlkzUnBiMjR1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRHYVc1cGRHVlVhVzFsUVdOMGFXOXVmU0JoWTNScGIyNWNiaUFnSUNBZ0tpOWNiaUFnSUNCelpYUkpibTVsY2tGamRHbHZianBtZFc1amRHbHZiaUFvWVdOMGFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5cGJtNWxja0ZqZEdsdmJpQWhQVDBnWVdOMGFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5cGJtNWxja0ZqZEdsdmJpQTlJR0ZqZEdsdmJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLbHh1SUNBZ0lDQXFJRWRsZENCcGJtNWxjaUJCWTNScGIyNHVYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdSbWx1YVhSbFZHbHRaVUZqZEdsdmJuMWNiaUFnSUNBZ0tpOWNiaUFnSUNCblpYUkpibTVsY2tGamRHbHZianBtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlwYm01bGNrRmpkR2x2Ymp0Y2JpQWdJQ0I5WEc1OUtUdGNibHh1THlvcVhHNGdLaUFoSTJWdUlFTnlaV0YwWlhNZ1lTQlNaWEJsWVhRZ1lXTjBhVzl1TGlCVWFXMWxjeUJwY3lCaGJpQjFibk5wWjI1bFpDQnBiblJsWjJWeUlHSmxkSGRsWlc0Z01TQmhibVFnY0c5M0tESXNNekFwWEc0Z0tpQWhJM3BvSU9tSGplV2tqZVdLcU9TOW5PKzhqT1dQcitTN3BlYU1pZVM0Z09XdW11YXNvZWFWc09tSGplV2tqZVM0Z09TNHF1V0txTys4ak9XbWd1YWVuT2FEcythd3VPaS9uT21IamVXa2plUzRnT1M0cXVXS3FPUzluT2l2dCtTOXYrZVVxQ0J5WlhCbFlYUkdiM0psZG1WeUlPV0txT1M5bk9hZHBlV3VqT2FJa09PQWdseHVJQ29nUUcxbGRHaHZaQ0J5WlhCbFlYUmNiaUFxSUVCd1lYSmhiU0I3Um1sdWFYUmxWR2x0WlVGamRHbHZibjBnWVdOMGFXOXVYRzRnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnZEdsdFpYTmNiaUFxSUVCeVpYUjFjbTRnZTBGamRHbHZia2x1ZEdWeWRtRnNmVnh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFJQzh2SUdWNFlXMXdiR1ZjYmlBcUlIWmhjaUJ5WlhBZ1BTQmpZeTV5WlhCbFlYUW9ZMk11YzJWeGRXVnVZMlVvYW5WdGNESXNJR3AxYlhBeEtTd2dOU2s3WEc0Z0tpOWNibU5qTG5KbGNHVmhkQ0E5SUdaMWJtTjBhVzl1SUNoaFkzUnBiMjRzSUhScGJXVnpLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJqWXk1U1pYQmxZWFFvWVdOMGFXOXVMQ0IwYVcxbGN5azdYRzU5TzF4dVhHNWNiaThxWEc0Z0tpQlNaWEJsWVhSeklHRnVJR0ZqZEdsdmJpQm1iM0lnWlhabGNpNGdJRHhpY2k4K1hHNGdLaUJVYnlCeVpYQmxZWFFnZEdobElHRnVJR0ZqZEdsdmJpQm1iM0lnWVNCc2FXMXBkR1ZrSUc1MWJXSmxjaUJ2WmlCMGFXMWxjeUIxYzJVZ2RHaGxJRkpsY0dWaGRDQmhZM1JwYjI0dUlEeGljaTgrWEc0Z0tpQkFkMkZ5Ym1sdVp5QlVhR2x6SUdGamRHbHZiaUJqWVc0bmRDQmlaU0JUWlhGMVpXNWpaV0ZpYkdVZ1ltVmpZWFZ6WlNCcGRDQnBjeUJ1YjNRZ1lXNGdTVzUwWlhKMllXeEJZM1JwYjI1Y2JpQXFJRUJqYkdGemN5QlNaWEJsWVhSR2IzSmxkbVZ5WEc0Z0tpQkFaWGgwWlc1a2N5QkJZM1JwYjI1SmJuUmxjblpoYkZ4dUlDb2dRSEJoY21GdElIdEdhVzVwZEdWVWFXMWxRV04wYVc5dWZTQmhZM1JwYjI1Y2JpQXFJRUJsZUdGdGNHeGxYRzRnS2lCMllYSWdjbVZ3SUQwZ2JtVjNJR05qTGxKbGNHVmhkRVp2Y21WMlpYSW9ZMk11YzJWeGRXVnVZMlVvYW5WdGNESXNJR3AxYlhBeEtTd2dOU2s3WEc0Z0tpOWNibU5qTGxKbGNHVmhkRVp2Y21WMlpYSWdQU0JqWXk1RGJHRnpjeWg3WEc0Z0lDQWdibUZ0WlRvZ0oyTmpMbEpsY0dWaGRFWnZjbVYyWlhJbkxGeHVJQ0FnSUdWNGRHVnVaSE02SUdOakxrRmpkR2x2YmtsdWRHVnlkbUZzTEZ4dVhHNGdJQ0FnWTNSdmNqcG1kVzVqZEdsdmJpQW9ZV04wYVc5dUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgybHVibVZ5UVdOMGFXOXVJRDBnYm5Wc2JEdGNibHgwWEhSaFkzUnBiMjRnSmlZZ2RHaHBjeTVwYm1sMFYybDBhRUZqZEdsdmJpaGhZM1JwYjI0cE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1FXTjBhVzl1U1c1MFpYSjJZV3g5SUdGamRHbHZibHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMEp2YjJ4bFlXNTlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FXNXBkRmRwZEdoQlkzUnBiMjQ2Wm5WdVkzUnBiMjRnS0dGamRHbHZiaWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9JV0ZqZEdsdmJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyTXVaWEp5YjNKSlJDZ3hNREkyS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVgybHVibVZ5UVdOMGFXOXVJRDBnWVdOMGFXOXVPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWTJ4dmJtVTZablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdZV04wYVc5dUlEMGdibVYzSUdOakxsSmxjR1ZoZEVadmNtVjJaWElvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWTJ4dmJtVkVaV052Y21GMGFXOXVLR0ZqZEdsdmJpazdYRzRnSUNBZ0lDQWdJR0ZqZEdsdmJpNXBibWwwVjJsMGFFRmpkR2x2YmloMGFHbHpMbDlwYm01bGNrRmpkR2x2Ymk1amJHOXVaU2dwS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdGamRHbHZianRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdjM1JoY25SWGFYUm9WR0Z5WjJWME9tWjFibU4wYVc5dUlDaDBZWEpuWlhRcElIdGNiaUFnSUNBZ0lDQWdZMk11UVdOMGFXOXVTVzUwWlhKMllXd3VjSEp2ZEc5MGVYQmxMbk4wWVhKMFYybDBhRlJoY21kbGRDNWpZV3hzS0hSb2FYTXNJSFJoY21kbGRDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgybHVibVZ5UVdOMGFXOXVMbk4wWVhKMFYybDBhRlJoY21kbGRDaDBZWEpuWlhRcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCemRHVndPbVoxYm1OMGFXOXVJQ2hrZENrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYkc5alNXNXVaWEpCWTNScGIyNGdQU0IwYUdsekxsOXBibTVsY2tGamRHbHZianRjYmlBZ0lDQWdJQ0FnYkc5alNXNXVaWEpCWTNScGIyNHVjM1JsY0Noa2RDazdYRzRnSUNBZ0lDQWdJR2xtSUNoc2IyTkpibTVsY2tGamRHbHZiaTVwYzBSdmJtVW9LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeTkyWVhJZ1pHbG1aaUE5SUd4dlkwbHVibVZ5UVdOMGFXOXVMbWRsZEVWc1lYQnpaV1FvS1NBdElHeHZZMGx1Ym1WeVFXTjBhVzl1TGw5a2RYSmhkR2x2Ymp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3h2WTBsdWJtVnlRV04wYVc5dUxuTjBZWEowVjJsMGFGUmhjbWRsZENoMGFHbHpMblJoY21kbGRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QjBieUJ3Y21WMlpXNTBJR3BsY21zdUlHbHpjM1ZsSUNNek9UQWdMREV5TkRkY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2ZEdocGN5NWZhVzV1WlhKQlkzUnBiMjR1YzNSbGNDZ3dLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZkR2hwY3k1ZmFXNXVaWEpCWTNScGIyNHVjM1JsY0Noa2FXWm1LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeHZZMGx1Ym1WeVFXTjBhVzl1TG5OMFpYQW9iRzlqU1c1dVpYSkJZM1JwYjI0dVoyVjBSV3hoY0hObFpDZ3BJQzBnYkc5alNXNXVaWEpCWTNScGIyNHVYMlIxY21GMGFXOXVLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JwYzBSdmJtVTZablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lISmxkbVZ5YzJVNlpuVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1lXTjBhVzl1SUQwZ2JtVjNJR05qTGxKbGNHVmhkRVp2Y21WMlpYSW9kR2hwY3k1ZmFXNXVaWEpCWTNScGIyNHVjbVYyWlhKelpTZ3BLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZMnh2Ym1WRVpXTnZjbUYwYVc5dUtHRmpkR2x2YmlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNKbGRtVnljMlZGWVhObFRHbHpkQ2hoWTNScGIyNHBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZV04wYVc5dU8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktseHVJQ0FnSUNBcUlGTmxkQ0JwYm01bGNpQmhZM1JwYjI0dVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0QlkzUnBiMjVKYm5SbGNuWmhiSDBnWVdOMGFXOXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MyVjBTVzV1WlhKQlkzUnBiMjQ2Wm5WdVkzUnBiMjRnS0dGamRHbHZiaWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1ZmFXNXVaWEpCWTNScGIyNGdJVDA5SUdGamRHbHZiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmFXNXVaWEpCWTNScGIyNGdQU0JoWTNScGIyNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeXBjYmlBZ0lDQWdLaUJIWlhRZ2FXNXVaWElnWVdOMGFXOXVMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMEZqZEdsdmJrbHVkR1Z5ZG1Gc2ZWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdkbGRFbHVibVZ5UVdOMGFXOXVPbVoxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMmx1Ym1WeVFXTjBhVzl1TzF4dUlDQWdJSDFjYm4wcE8xeHVYRzR2S2lwY2JpQXFJQ0VqWlc0Z1EzSmxZWFJsSUdFZ1lXTjBiMjRnZDJocFkyZ2djbVZ3WldGMElHWnZjbVYyWlhJc0lHRnpJR2wwSUhKMWJuTWdabTl5WlhabGNpd2dhWFFnWTJGdUozUWdZbVVnWVdSa1pXUWdhVzUwYnlCall5NXpaWEYxWlc1alpTQmhibVFnWTJNdWMzQmhkMjR1WEc0Z0tpQWhJM3BvSU9hd3VPaS9uT1djc09tSGplV2tqZVM0Z09TNHF1V0txT1M5bk8rOGpPYWNpZW1aa09hc29lYVZzT1dHaGVtSGplV2tqZVM0Z09TNHF1V0txT1M5bk9pdnQrUzl2K2VVcUNCeVpYQmxZWFFnNVlxbzVMMmM3N3lNNTVTeDVMcU82TCtaNUxpcTVZcW81TDJjNUxpTjVMeWE1WUdjNXEyaTc3eU01b21BNUx1bDVMaU42SU85NktLcjVyZTc1WXFnNVlpd0lHTmpMbk5sY1hWbGJtTmxJT2FJbGlCall5NXpjR0YzYmlEa3VLM2pnSUpjYmlBcUlFQnRaWFJvYjJRZ2NtVndaV0YwUm05eVpYWmxjbHh1SUNvZ1FIQmhjbUZ0SUh0R2FXNXBkR1ZVYVcxbFFXTjBhVzl1ZlNCaFkzUnBiMjVjYmlBcUlFQnlaWFIxY200Z2UwRmpkR2x2YmtsdWRHVnlkbUZzZlZ4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxSUM4dklHVjRZVzF3YkdWY2JpQXFJSFpoY2lCeVpYQmxZWFFnUFNCall5NXlaWEJsWVhSR2IzSmxkbVZ5S0dOakxuSnZkR0YwWlVKNUtERXVNQ3dnTXpZd0tTazdYRzRnS2k5Y2JtTmpMbkpsY0dWaGRFWnZjbVYyWlhJZ1BTQm1kVzVqZEdsdmJpQW9ZV04wYVc5dUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QmpZeTVTWlhCbFlYUkdiM0psZG1WeUtHRmpkR2x2YmlrN1hHNTlPMXh1WEc1Y2JpOHFJRnh1SUNvZ1UzQmhkMjRnWVNCdVpYY2dZV04wYVc5dUlHbHRiV1ZrYVdGMFpXeDVYRzRnS2lCQVkyeGhjM01nVTNCaGQyNWNiaUFxSUVCbGVIUmxibVJ6SUVGamRHbHZia2x1ZEdWeWRtRnNYRzRnS2k5Y2JtTmpMbE53WVhkdUlEMGdZMk11UTJ4aGMzTW9lMXh1SUNBZ0lHNWhiV1U2SUNkall5NVRjR0YzYmljc1hHNGdJQ0FnWlhoMFpXNWtjem9nWTJNdVFXTjBhVzl1U1c1MFpYSjJZV3dzWEc1Y2JpQWdJQ0JqZEc5eU9tWjFibU4wYVc5dUlDaDBaVzF3UVhKeVlYa3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZiMjVsSUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkSGR2SUQwZ2JuVnNiRHRjYmx4dVhIUmNkSFpoY2lCd1lYSmhiVUZ5Y21GNUlEMGdLSFJsYlhCQmNuSmhlU0JwYm5OMFlXNWpaVzltSUVGeWNtRjVLU0EvSUhSbGJYQkJjbkpoZVNBNklHRnlaM1Z0Wlc1MGN6dGNiaUFnSUNBZ0lDQWdhV1lnS0hCaGNtRnRRWEp5WVhrdWJHVnVaM1JvSUQwOVBTQXhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZeTVsY25KdmNrbEVLREV3TWpBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2RGeDBkbUZ5SUd4aGMzUWdQU0J3WVhKaGJVRnljbUY1TG14bGJtZDBhQ0F0SURFN1hHNWNkRngwYVdZZ0tDaHNZWE4wSUQ0OUlEQXBJQ1ltSUNod1lYSmhiVUZ5Y21GNVcyeGhjM1JkSUQwOUlHNTFiR3dwS1Z4dVhIUmNkRngwWTJNdWJHOW5TVVFvTVRBeE5TazdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHeGhjM1FnUGowZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEJ5WlhZZ1BTQndZWEpoYlVGeWNtRjVXekJkTENCaFkzUnBiMjR4TzF4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURFN0lHa2dQQ0JzWVhOME95QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jR0Z5WVcxQmNuSmhlVnRwWFNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoWTNScGIyNHhJRDBnY0hKbGRqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0hKbGRpQTlJR05qTGxOd1lYZHVMbDloWTNScGIyNVBibVZVZDI4b1lXTjBhVzl1TVN3Z2NHRnlZVzFCY25KaGVWdHBYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVwYm1sMFYybDBhRlIzYjBGamRHbHZibk1vY0hKbGRpd2djR0Z5WVcxQmNuSmhlVnRzWVhOMFhTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9nYVc1cGRHbGhiR2w2WlhNZ2RHaGxJRk53WVhkdUlHRmpkR2x2YmlCM2FYUm9JSFJvWlNBeUlHRmpkR2x2Ym5NZ2RHOGdjM0JoZDI1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTBacGJtbDBaVlJwYldWQlkzUnBiMjU5SUdGamRHbHZiakZjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMFpwYm1sMFpWUnBiV1ZCWTNScGIyNTlJR0ZqZEdsdmJqSmNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdENiMjlzWldGdWZWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdsdWFYUlhhWFJvVkhkdlFXTjBhVzl1Y3pwbWRXNWpkR2x2YmlBb1lXTjBhVzl1TVN3Z1lXTjBhVzl1TWlrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVdGamRHbHZiakVnZkh3Z0lXRmpkR2x2YmpJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOakxtVnljbTl5U1VRb01UQXlOeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQjJZWElnY21WMElEMGdabUZzYzJVN1hHNWNiaUFnSUNBZ0lDQWdkbUZ5SUdReElEMGdZV04wYVc5dU1TNWZaSFZ5WVhScGIyNDdYRzRnSUNBZ0lDQWdJSFpoY2lCa01pQTlJR0ZqZEdsdmJqSXVYMlIxY21GMGFXOXVPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1sdWFYUlhhWFJvUkhWeVlYUnBiMjRvVFdGMGFDNXRZWGdvWkRFc0lHUXlLU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyOXVaU0E5SUdGamRHbHZiakU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5MGQyOGdQU0JoWTNScGIyNHlPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWkRFZ1BpQmtNaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM1IzYnlBOUlHTmpMbE5sY1hWbGJtTmxMbDloWTNScGIyNVBibVZVZDI4b1lXTjBhVzl1TWl3Z1kyTXVaR1ZzWVhsVWFXMWxLR1F4SUMwZ1pESXBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9aREVnUENCa01pa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyOXVaU0E5SUdOakxsTmxjWFZsYm1ObExsOWhZM1JwYjI1UGJtVlVkMjhvWVdOMGFXOXVNU3dnWTJNdVpHVnNZWGxVYVcxbEtHUXlJQzBnWkRFcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVjBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQmpiRzl1WlRwbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCaFkzUnBiMjRnUFNCdVpYY2dZMk11VTNCaGQyNG9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZMnh2Ym1WRVpXTnZjbUYwYVc5dUtHRmpkR2x2YmlrN1hHNGdJQ0FnSUNBZ0lHRmpkR2x2Ymk1cGJtbDBWMmwwYUZSM2IwRmpkR2x2Ym5Nb2RHaHBjeTVmYjI1bExtTnNiMjVsS0Nrc0lIUm9hWE11WDNSM2J5NWpiRzl1WlNncEtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHRmpkR2x2Ymp0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnYzNSaGNuUlhhWFJvVkdGeVoyVjBPbVoxYm1OMGFXOXVJQ2gwWVhKblpYUXBJSHRjYmlBZ0lDQWdJQ0FnWTJNdVFXTjBhVzl1U1c1MFpYSjJZV3d1Y0hKdmRHOTBlWEJsTG5OMFlYSjBWMmwwYUZSaGNtZGxkQzVqWVd4c0tIUm9hWE1zSUhSaGNtZGxkQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjl1WlM1emRHRnlkRmRwZEdoVVlYSm5aWFFvZEdGeVoyVjBLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkSGR2TG5OMFlYSjBWMmwwYUZSaGNtZGxkQ2gwWVhKblpYUXBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQnpkRzl3T21aMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmIyNWxMbk4wYjNBb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmRIZHZMbk4wYjNBb0tUdGNiaUFnSUNBZ0lDQWdZMk11UVdOMGFXOXVMbkJ5YjNSdmRIbHdaUzV6ZEc5d0xtTmhiR3dvZEdocGN5azdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lIVndaR0YwWlRwbWRXNWpkR2x2YmlBb1pIUXBJSHRjYmlBZ0lDQWdJQ0FnWkhRZ1BTQjBhR2x6TGw5amIyMXdkWFJsUldGelpWUnBiV1VvWkhRcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZiMjVsS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmIyNWxMblZ3WkdGMFpTaGtkQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5MGQyOHBYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDkwZDI4dWRYQmtZWFJsS0dSMEtUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2NtVjJaWEp6WlRwbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCaFkzUnBiMjRnUFNCall5NVRjR0YzYmk1ZllXTjBhVzl1VDI1bFZIZHZLSFJvYVhNdVgyOXVaUzV5WlhabGNuTmxLQ2tzSUhSb2FYTXVYM1IzYnk1eVpYWmxjbk5sS0NrcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5amJHOXVaVVJsWTI5eVlYUnBiMjRvWVdOMGFXOXVLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjbVYyWlhKelpVVmhjMlZNYVhOMEtHRmpkR2x2YmlrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCaFkzUnBiMjQ3WEc0Z0lDQWdmVnh1ZlNrN1hHNWNiaThxS2x4dUlDb2dJU05sYmlCRGNtVmhkR1VnWVNCemNHRjNiaUJoWTNScGIyNGdkMmhwWTJnZ2NuVnVjeUJ6WlhabGNtRnNJR0ZqZEdsdmJuTWdhVzRnY0dGeVlXeHNaV3d1WEc0Z0tpQWhJM3BvSU9XUWpPYXRwZWFKcCtpaGpPV0txT1M5bk8rOGpPV1FqT2F0cGVhSnAraWhqT1M0Z09lN2hPV0txT1M5bk9PQWdseHVJQ29nUUcxbGRHaHZaQ0J6Y0dGM2JseHVJQ29nUUhCaGNtRnRJSHRHYVc1cGRHVlVhVzFsUVdOMGFXOXVmRVpwYm1sMFpWUnBiV1ZCWTNScGIyNWJYWDBnWVdOMGFXOXVUM0pCWTNScGIyNUJjbkpoZVZ4dUlDb2dRSEJoY21GdElIdEdhVzVwZEdWVWFXMWxRV04wYVc5dWZTQXVMaTUwWlcxd1FYSnlZWGxjYmlBcUlFQnlaWFIxY200Z2UwWnBibWwwWlZScGJXVkJZM1JwYjI1OVhHNGdLaUJBWlhoaGJYQnNaVnh1SUNvZ0x5OGdaWGhoYlhCc1pWeHVJQ29nZG1GeUlHRmpkR2x2YmlBOUlHTmpMbk53WVhkdUtHTmpMbXAxYlhCQ2VTZ3lMQ0JqWXk1Mk1pZ3pNREFzSURBcExDQTFNQ3dnTkNrc0lHTmpMbkp2ZEdGMFpVSjVLRElzSURjeU1Da3BPMXh1SUNvZ2RHOWtienBKZENCemFHOTFiR1FnWW1VZ2RHaGxJR1JwY21WamRDQjFjMlVnYm1WM1hHNGdLaTljYm1OakxuTndZWGR1SUQwZ1puVnVZM1JwYjI0Z0tDOHFUWFZzZEdsd2JHVWdRWEpuZFcxbGJuUnpLaTkwWlcxd1FYSnlZWGtwSUh0Y2JpQWdJQ0IyWVhJZ2NHRnlZVzFCY25KaGVTQTlJQ2gwWlcxd1FYSnlZWGtnYVc1emRHRnVZMlZ2WmlCQmNuSmhlU2tnUHlCMFpXMXdRWEp5WVhrZ09pQmhjbWQxYldWdWRITTdYRzRnSUNBZ2FXWWdLSEJoY21GdFFYSnlZWGt1YkdWdVozUm9JRDA5UFNBeEtTQjdYRzRnSUNBZ0lDQWdJR05qTG1WeWNtOXlTVVFvTVRBeU1DazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvS0hCaGNtRnRRWEp5WVhrdWJHVnVaM1JvSUQ0Z01Da2dKaVlnS0hCaGNtRnRRWEp5WVhsYmNHRnlZVzFCY25KaGVTNXNaVzVuZEdnZ0xTQXhYU0E5UFNCdWRXeHNLU2xjYmlBZ0lDQWdJQ0FnWTJNdWJHOW5TVVFvTVRBeE5TazdYRzVjYmlBZ0lDQjJZWElnY0hKbGRpQTlJSEJoY21GdFFYSnlZWGxiTUYwN1hHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlERTdJR2tnUENCd1lYSmhiVUZ5Y21GNUxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHdZWEpoYlVGeWNtRjVXMmxkSUNFOUlHNTFiR3dwWEc0Z0lDQWdJQ0FnSUNBZ0lDQndjbVYySUQwZ1kyTXVVM0JoZDI0dVgyRmpkR2x2Yms5dVpWUjNieWh3Y21WMkxDQndZWEpoYlVGeWNtRjVXMmxkS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlIQnlaWFk3WEc1OU8xeHVYRzVqWXk1VGNHRjNiaTVmWVdOMGFXOXVUMjVsVkhkdklEMGdablZ1WTNScGIyNGdLR0ZqZEdsdmJqRXNJR0ZqZEdsdmJqSXBJSHRjYmlBZ0lDQjJZWElnY0ZOd1lYZHVJRDBnYm1WM0lHTmpMbE53WVhkdUtDazdYRzRnSUNBZ2NGTndZWGR1TG1sdWFYUlhhWFJvVkhkdlFXTjBhVzl1Y3loaFkzUnBiMjR4TENCaFkzUnBiMjR5S1R0Y2JpQWdJQ0J5WlhSMWNtNGdjRk53WVhkdU8xeHVmVHRjYmx4dVhHNHZLbHh1SUNvZ1VtOTBZWFJsY3lCaElFNXZaR1VnYjJKcVpXTjBJSFJ2SUdFZ1kyVnlkR0ZwYmlCaGJtZHNaU0JpZVNCdGIyUnBabmxwYm1jZ2FYUnpJR0Z1WjJ4bElIQnliM0JsY25SNUxpQThZbkl2UGx4dUlDb2dWR2hsSUdScGNtVmpkR2x2YmlCM2FXeHNJR0psSUdSbFkybGtaV1FnWW5rZ2RHaGxJSE5vYjNKMFpYTjBJR0Z1WjJ4bExseHVJQ29nUUdOc1lYTnpJRkp2ZEdGMFpWUnZYRzRnS2lCQVpYaDBaVzVrY3lCQlkzUnBiMjVKYm5SbGNuWmhiRnh1SUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUdSMWNtRjBhVzl1SUdSMWNtRjBhVzl1SUdsdUlITmxZMjl1WkhOY2JpQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQmtjM1JCYm1kc1pTQmtjM1JCYm1kc1pTQnBiaUJrWldkeVpXVnpMbHh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFJSFpoY2lCeWIzUmhkR1ZVYnlBOUlHNWxkeUJqWXk1U2IzUmhkR1ZVYnlneUxDQTJNUzR3S1R0Y2JpQXFMMXh1WTJNdVVtOTBZWFJsVkc4Z1BTQmpZeTVEYkdGemN5aDdYRzRnSUNBZ2JtRnRaVG9nSjJOakxsSnZkR0YwWlZSdkp5eGNiaUFnSUNCbGVIUmxibVJ6T2lCall5NUJZM1JwYjI1SmJuUmxjblpoYkN4Y2JseHVJQ0FnSUdOMGIzSTZablZ1WTNScGIyNGdLR1IxY21GMGFXOXVMQ0JrYzNSQmJtZHNaU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl6ZEdGeWRFRnVaMnhsSUQwZ01EdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlpITjBRVzVuYkdVZ1BTQXdPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWhibWRzWlNBOUlEQTdYRzRnSUNBZ0lDQWdJR1J6ZEVGdVoyeGxJQ0U5UFNCMWJtUmxabWx1WldRZ0ppWWdkR2hwY3k1cGJtbDBWMmwwYUVSMWNtRjBhVzl1S0dSMWNtRjBhVzl1TENCa2MzUkJibWRzWlNrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cVhHNGdJQ0FnSUNvZ1NXNXBkR2xoYkdsNlpYTWdkR2hsSUdGamRHbHZiaTVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdaSFZ5WVhScGIyNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ1pITjBRVzVuYkdWY2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0Q2IyOXNaV0Z1ZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJR2x1YVhSWGFYUm9SSFZ5WVhScGIyNDZablZ1WTNScGIyNGdLR1IxY21GMGFXOXVMQ0JrYzNSQmJtZHNaU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9ZMk11UVdOMGFXOXVTVzUwWlhKMllXd3VjSEp2ZEc5MGVYQmxMbWx1YVhSWGFYUm9SSFZ5WVhScGIyNHVZMkZzYkNoMGFHbHpMQ0JrZFhKaGRHbHZiaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyUnpkRUZ1WjJ4bElEMGdaSE4wUVc1bmJHVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUdOc2IyNWxPbVoxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR0ZqZEdsdmJpQTlJRzVsZHlCall5NVNiM1JoZEdWVWJ5Z3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWpiRzl1WlVSbFkyOXlZWFJwYjI0b1lXTjBhVzl1S1R0Y2JpQWdJQ0FnSUNBZ1lXTjBhVzl1TG1sdWFYUlhhWFJvUkhWeVlYUnBiMjRvZEdocGN5NWZaSFZ5WVhScGIyNHNJSFJvYVhNdVgyUnpkRUZ1WjJ4bEtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHRmpkR2x2Ymp0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnYzNSaGNuUlhhWFJvVkdGeVoyVjBPbVoxYm1OMGFXOXVJQ2gwWVhKblpYUXBJSHRjYmlBZ0lDQWdJQ0FnWTJNdVFXTjBhVzl1U1c1MFpYSjJZV3d1Y0hKdmRHOTBlWEJsTG5OMFlYSjBWMmwwYUZSaGNtZGxkQzVqWVd4c0tIUm9hWE1zSUhSaGNtZGxkQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2JHVjBJSE4wWVhKMFFXNW5iR1VnUFNCMFlYSm5aWFF1WVc1bmJHVWdKU0F6TmpBN1hHNWNiaUFnSUNBZ0lDQWdiR1YwSUdGdVoyeGxJRDBnWTJNdWJXRmpjbTh1VWs5VVFWUkZYMEZEVkVsUFRsOURRMWNnUHlBb2RHaHBjeTVmWkhOMFFXNW5iR1VnTFNCemRHRnlkRUZ1WjJ4bEtTQTZJQ2h6ZEdGeWRFRnVaMnhsSUMwZ2RHaHBjeTVmWkhOMFFXNW5iR1VwTzF4dUlDQWdJQ0FnSUNCcFppQW9ZVzVuYkdVZ1BpQXhPREFwSUdGdVoyeGxJQzA5SURNMk1EdGNiaUFnSUNBZ0lDQWdhV1lnS0dGdVoyeGxJRHdnTFRFNE1Da2dZVzVuYkdVZ0t6MGdNell3TzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNOMFlYSjBRVzVuYkdVZ1BTQnpkR0Z5ZEVGdVoyeGxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWhibWRzWlNBOUlHTmpMbTFoWTNKdkxsSlBWRUZVUlY5QlExUkpUMDVmUTBOWElEOGdZVzVuYkdVZ09pQXRZVzVuYkdVN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUhKbGRtVnljMlU2Wm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQmpZeTVzYjJkSlJDZ3hNREUyS1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnZFhCa1lYUmxPbVoxYm1OMGFXOXVJQ2hrZENrZ2UxeHVJQ0FnSUNBZ0lDQmtkQ0E5SUhSb2FYTXVYMk52YlhCMWRHVkZZWE5sVkdsdFpTaGtkQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5SaGNtZGxkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MFlYSm5aWFF1WVc1bmJHVWdQU0IwYUdsekxsOXpkR0Z5ZEVGdVoyeGxJQ3NnZEdocGN5NWZZVzVuYkdVZ0tpQmtkRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYm4wcE8xeHVYRzR2S2lwY2JpQXFJQ0VqWlc1Y2JpQXFJRkp2ZEdGMFpYTWdZU0JPYjJSbElHOWlhbVZqZENCMGJ5QmhJR05sY25SaGFXNGdZVzVuYkdVZ1lua2diVzlrYVdaNWFXNW5JR2wwY3lCaGJtZHNaU0J3Y205d1pYSjBlUzRnUEdKeUx6NWNiaUFxSUZSb1pTQmthWEpsWTNScGIyNGdkMmxzYkNCaVpTQmtaV05wWkdWa0lHSjVJSFJvWlNCemFHOXlkR1Z6ZENCaGJtZHNaUzVjYmlBcUlDRWplbWdnNXBlTDZMMnM1WWl3NTV1dTVxQ0g2S2VTNWJxbTc3eU02WUNhNkwrSDZZQ1E1YmluNUwrdTVwUzU1YTZENTVxRUlHRnVaMnhsSU9XeG51YUFwKys4ak9hWGkraTlyT2FXdWVXUWtlV3dodWVVc2VhY2dPZWZyZWVhaE9pbmt1VzZwdVdHcytXdW11T0FnbHh1SUNvZ1FHMWxkR2h2WkNCeWIzUmhkR1ZVYjF4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHUjFjbUYwYVc5dUlHUjFjbUYwYVc5dUlHbHVJSE5sWTI5dVpITmNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JrYzNSQmJtZHNaU0JrYzNSQmJtZHNaU0JwYmlCa1pXZHlaV1Z6TGx4dUlDb2dRSEpsZEhWeWJpQjdRV04wYVc5dVNXNTBaWEoyWVd4OVhHNGdLaUJBWlhoaGJYQnNaVnh1SUNvZ0x5OGdaWGhoYlhCc1pWeHVJQ29nZG1GeUlISnZkR0YwWlZSdklEMGdZMk11Y205MFlYUmxWRzhvTWl3Z05qRXVNQ2s3WEc0Z0tpOWNibU5qTG5KdmRHRjBaVlJ2SUQwZ1puVnVZM1JwYjI0Z0tHUjFjbUYwYVc5dUxDQmtjM1JCYm1kc1pTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dZMk11VW05MFlYUmxWRzhvWkhWeVlYUnBiMjRzSUdSemRFRnVaMnhsS1R0Y2JuMDdYRzVjYmx4dUx5cGNiaUFxSUZKdmRHRjBaWE1nWVNCT2IyUmxJRzlpYW1WamRDQmpiRzlqYTNkcGMyVWdZU0J1ZFcxaVpYSWdiMllnWkdWbmNtVmxjeUJpZVNCdGIyUnBabmxwYm1jZ2FYUnpJR0Z1WjJ4bElIQnliM0JsY25SNUxseHVJQ29nVW1Wc1lYUnBkbVVnZEc4Z2FYUnpJSEJ5YjNCbGNuUnBaWE1nZEc4Z2JXOWthV1o1TGx4dUlDb2dRR05zWVhOeklGSnZkR0YwWlVKNVhHNGdLaUJBWlhoMFpXNWtjeUJCWTNScGIyNUpiblJsY25aaGJGeHVJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJR1IxY21GMGFXOXVJR1IxY21GMGFXOXVJR2x1SUhObFkyOXVaSE5jYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCa1pXeDBZVUZ1WjJ4bElHUmxiSFJoUVc1bmJHVWdhVzRnWkdWbmNtVmxjMXh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFJSFpoY2lCaFkzUnBiMjVDZVNBOUlHNWxkeUJqWXk1U2IzUmhkR1ZDZVNneUxDQXpOakFwTzF4dUlDb3ZYRzVqWXk1U2IzUmhkR1ZDZVNBOUlHTmpMa05zWVhOektIdGNiaUFnSUNCdVlXMWxPaUFuWTJNdVVtOTBZWFJsUW5rbkxGeHVJQ0FnSUdWNGRHVnVaSE02SUdOakxrRmpkR2x2YmtsdWRHVnlkbUZzTEZ4dVhHNGdJQ0FnWTNSdmNqb2dablZ1WTNScGIyNGdLR1IxY21GMGFXOXVMQ0JrWld4MFlVRnVaMnhsS1NCN1hHNGdJQ0FnSUNBZ0lHUmxiSFJoUVc1bmJHVWdLajBnWTJNdWJXRmpjbTh1VWs5VVFWUkZYMEZEVkVsUFRsOURRMWNnUHlBeElEb2dMVEU3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWkdWc2RHRkJibWRzWlNBOUlEQTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzTjBZWEowUVc1bmJHVWdQU0F3TzF4dUlDQWdJQ0FnSUNCa1pXeDBZVUZ1WjJ4bElDRTlQU0IxYm1SbFptbHVaV1FnSmlZZ2RHaHBjeTVwYm1sMFYybDBhRVIxY21GMGFXOXVLR1IxY21GMGFXOXVMQ0JrWld4MFlVRnVaMnhsS1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlwY2JpQWdJQ0FnS2lCSmJtbDBhV0ZzYVhwbGN5QjBhR1VnWVdOMGFXOXVMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQmtkWEpoZEdsdmJpQmtkWEpoZEdsdmJpQnBiaUJ6WldOdmJtUnpYRzRnSUNBZ0lDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHUmxiSFJoUVc1bmJHVWdaR1ZzZEdGQmJtZHNaU0JwYmlCa1pXZHlaV1Z6WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3UW05dmJHVmhibjFjYmlBZ0lDQWdLaTljYmlBZ0lDQnBibWwwVjJsMGFFUjFjbUYwYVc5dU9tWjFibU4wYVc5dUlDaGtkWEpoZEdsdmJpd2daR1ZzZEdGQmJtZHNaU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9ZMk11UVdOMGFXOXVTVzUwWlhKMllXd3VjSEp2ZEc5MGVYQmxMbWx1YVhSWGFYUm9SSFZ5WVhScGIyNHVZMkZzYkNoMGFHbHpMQ0JrZFhKaGRHbHZiaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyUmxiSFJoUVc1bmJHVWdQU0JrWld4MFlVRnVaMnhsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQmpiRzl1WlRwbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCaFkzUnBiMjRnUFNCdVpYY2dZMk11VW05MFlYUmxRbmtvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWTJ4dmJtVkVaV052Y21GMGFXOXVLR0ZqZEdsdmJpazdYRzRnSUNBZ0lDQWdJR0ZqZEdsdmJpNXBibWwwVjJsMGFFUjFjbUYwYVc5dUtIUm9hWE11WDJSMWNtRjBhVzl1TENCMGFHbHpMbDlrWld4MFlVRnVaMnhsS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdGamRHbHZianRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdjM1JoY25SWGFYUm9WR0Z5WjJWME9tWjFibU4wYVc5dUlDaDBZWEpuWlhRcElIdGNiaUFnSUNBZ0lDQWdZMk11UVdOMGFXOXVTVzUwWlhKMllXd3VjSEp2ZEc5MGVYQmxMbk4wWVhKMFYybDBhRlJoY21kbGRDNWpZV3hzS0hSb2FYTXNJSFJoY21kbGRDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzTjBZWEowUVc1bmJHVWdQU0IwWVhKblpYUXVZVzVuYkdVN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUhWd1pHRjBaVHBtZFc1amRHbHZiaUFvWkhRcElIdGNiaUFnSUNBZ0lDQWdaSFFnUFNCMGFHbHpMbDlqYjIxd2RYUmxSV0Z6WlZScGJXVW9aSFFwTzF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1MFlYSm5aWFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRHRnlaMlYwTG1GdVoyeGxJRDBnZEdocGN5NWZjM1JoY25SQmJtZHNaU0FySUhSb2FYTXVYMlJsYkhSaFFXNW5iR1VnS2lCa2REdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQnlaWFpsY25ObE9tWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHRmpkR2x2YmlBOUlHNWxkeUJqWXk1U2IzUmhkR1ZDZVNncE8xeHVJQ0FnSUNBZ0lDQmhZM1JwYjI0dWFXNXBkRmRwZEdoRWRYSmhkR2x2YmloMGFHbHpMbDlrZFhKaGRHbHZiaXdnTFhSb2FYTXVYMlJsYkhSaFFXNW5iR1VwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlqYkc5dVpVUmxZMjl5WVhScGIyNG9ZV04wYVc5dUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmNtVjJaWEp6WlVWaGMyVk1hWE4wS0dGamRHbHZiaWs3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJoWTNScGIyNDdYRzRnSUNBZ2ZWeHVmU2s3WEc1Y2JpOHFLbHh1SUNvZ0lTTmxibHh1SUNvZ1VtOTBZWFJsY3lCaElFNXZaR1VnYjJKcVpXTjBJR05zYjJOcmQybHpaU0JoSUc1MWJXSmxjaUJ2WmlCa1pXZHlaV1Z6SUdKNUlHMXZaR2xtZVdsdVp5QnBkSE1nWVc1bmJHVWdjSEp2Y0dWeWRIa3VYRzRnS2lCU1pXeGhkR2wyWlNCMGJ5QnBkSE1nY0hKdmNHVnlkR2xsY3lCMGJ5QnRiMlJwWm5rdVhHNGdLaUFoSTNwb0lPYVhpK2k5ck9hTWgrV3VtdWVhaE9pbmt1VzZwdU9BZ2x4dUlDb2dRRzFsZEdodlpDQnliM1JoZEdWQ2VWeHVJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJR1IxY21GMGFXOXVJR1IxY21GMGFXOXVJR2x1SUhObFkyOXVaSE5jYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCa1pXeDBZVUZ1WjJ4bElHUmxiSFJoUVc1bmJHVWdhVzRnWkdWbmNtVmxjMXh1SUNvZ1FISmxkSFZ5YmlCN1FXTjBhVzl1U1c1MFpYSjJZV3g5WEc0Z0tpQkFaWGhoYlhCc1pWeHVJQ29nTHk4Z1pYaGhiWEJzWlZ4dUlDb2dkbUZ5SUdGamRHbHZia0o1SUQwZ1kyTXVjbTkwWVhSbFFua29NaXdnTXpZd0tUdGNiaUFxTDF4dVkyTXVjbTkwWVhSbFFua2dQU0JtZFc1amRHbHZiaUFvWkhWeVlYUnBiMjRzSUdSbGJIUmhRVzVuYkdVcElIdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lHTmpMbEp2ZEdGMFpVSjVLR1IxY21GMGFXOXVMQ0JrWld4MFlVRnVaMnhsS1R0Y2JuMDdYRzVjYmx4dUx5cGNiaUFxSUR4d1BseHVJQ29nVFc5MlpYTWdZU0JPYjJSbElHOWlhbVZqZENCNExIa2djR2w0Wld4eklHSjVJRzF2WkdsbWVXbHVaeUJwZEhNZ2NHOXphWFJwYjI0Z2NISnZjR1Z5ZEhrdUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4aWNpOCtYRzRnS2lCNElHRnVaQ0I1SUdGeVpTQnlaV3hoZEdsMlpTQjBieUIwYUdVZ2NHOXphWFJwYjI0Z2IyWWdkR2hsSUc5aWFtVmpkQzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhpY2k4K1hHNGdLaUJUWlhabGNtRnNJRTF2ZG1WQ2VTQmhZM1JwYjI1eklHTmhiaUJpWlNCamIyNWpkWEp5Wlc1MGJIa2dZMkZzYkdWa0xDQmhibVFnZEdobElISmxjM1ZzZEdsdVp5QWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFluSXZQbHh1SUNvZ2JXOTJaVzFsYm5RZ2QybHNiQ0JpWlNCMGFHVWdjM1Z0SUc5bUlHbHVaR2wyYVdSMVlXd2diVzkyWlcxbGJuUnpMbHh1SUNvZ1BDOXdQbHh1SUNvZ1FHTnNZWE56SUUxdmRtVkNlVnh1SUNvZ1FHVjRkR1Z1WkhNZ1FXTjBhVzl1U1c1MFpYSjJZV3hjYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCa2RYSmhkR2x2YmlCa2RYSmhkR2x2YmlCcGJpQnpaV052Ym1SelhHNGdLaUJBY0dGeVlXMGdlMVpsWXpKOFRuVnRZbVZ5ZlNCa1pXeDBZVkJ2YzF4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlGdGtaV3gwWVZsZFhHNGdLaUJBWlhoaGJYQnNaVnh1SUNvZ2RtRnlJR0ZqZEdsdmJsUnZJRDBnWTJNdWJXOTJaVUo1S0RJc0lHTmpMbll5S0hkcGJtUnZkMU5wZW1VdWQybGtkR2dnTFNBME1Dd2dkMmx1Wkc5M1UybDZaUzVvWldsbmFIUWdMU0EwTUNrcE8xeHVJQ292WEc1all5NU5iM1psUW5rZ1BTQmpZeTVEYkdGemN5aDdYRzRnSUNBZ2JtRnRaVG9nSjJOakxrMXZkbVZDZVNjc1hHNGdJQ0FnWlhoMFpXNWtjem9nWTJNdVFXTjBhVzl1U1c1MFpYSjJZV3dzWEc1Y2JpQWdJQ0JqZEc5eU9tWjFibU4wYVc5dUlDaGtkWEpoZEdsdmJpd2daR1ZzZEdGUWIzTXNJR1JsYkhSaFdTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXdiM05wZEdsdmJrUmxiSFJoSUQwZ1kyTXVkaklvTUN3Z01DazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzTjBZWEowVUc5emFYUnBiMjRnUFNCall5NTJNaWd3TENBd0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmNISmxkbWx2ZFhOUWIzTnBkR2x2YmlBOUlHTmpMbll5S0RBc0lEQXBPMXh1WEc0Z0lDQWdJQ0FnSUdSbGJIUmhVRzl6SUNFOVBTQjFibVJsWm1sdVpXUWdKaVlnWTJNdVRXOTJaVUo1TG5CeWIzUnZkSGx3WlM1cGJtbDBWMmwwYUVSMWNtRjBhVzl1TG1OaGJHd29kR2hwY3l3Z1pIVnlZWFJwYjI0c0lHUmxiSFJoVUc5ekxDQmtaV3gwWVZrcE8xeDBYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFYRzRnSUNBZ0lDb2dTVzVwZEdsaGJHbDZaWE1nZEdobElHRmpkR2x2Ymk1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnWkhWeVlYUnBiMjRnWkhWeVlYUnBiMjRnYVc0Z2MyVmpiMjVrYzF4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Vm1Wak1uMGdjRzl6YVhScGIyNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ1czbGRYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdRbTl2YkdWaGJuMWNiaUFnSUNBZ0tpOWNiaUFnSUNCcGJtbDBWMmwwYUVSMWNtRjBhVzl1T21aMWJtTjBhVzl1SUNoa2RYSmhkR2x2Yml3Z2NHOXphWFJwYjI0c0lIa3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHTmpMa0ZqZEdsdmJrbHVkR1Z5ZG1Gc0xuQnliM1J2ZEhsd1pTNXBibWwwVjJsMGFFUjFjbUYwYVc5dUxtTmhiR3dvZEdocGN5d2daSFZ5WVhScGIyNHBLU0I3WEc1Y2RDQWdJQ0FnSUNBZ2FXWW9jRzl6YVhScGIyNHVlQ0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzVjZEZ4MElDQWdJQ0FnSUNCNUlEMGdjRzl6YVhScGIyNHVlVHRjYmx4MFhIUWdJQ0FnSUNBZ0lIQnZjMmwwYVc5dUlEMGdjRzl6YVhScGIyNHVlRHRjYmx4MElDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM0J2YzJsMGFXOXVSR1ZzZEdFdWVDQTlJSEJ2YzJsMGFXOXVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmY0c5emFYUnBiMjVFWld4MFlTNTVJRDBnZVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdZMnh2Ym1VNlpuVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1lXTjBhVzl1SUQwZ2JtVjNJR05qTGsxdmRtVkNlU2dwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlqYkc5dVpVUmxZMjl5WVhScGIyNG9ZV04wYVc5dUtUdGNiaUFnSUNBZ0lDQWdZV04wYVc5dUxtbHVhWFJYYVhSb1JIVnlZWFJwYjI0b2RHaHBjeTVmWkhWeVlYUnBiMjRzSUhSb2FYTXVYM0J2YzJsMGFXOXVSR1ZzZEdFcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1lXTjBhVzl1TzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0J6ZEdGeWRGZHBkR2hVWVhKblpYUTZablZ1WTNScGIyNGdLSFJoY21kbGRDa2dlMXh1SUNBZ0lDQWdJQ0JqWXk1QlkzUnBiMjVKYm5SbGNuWmhiQzV3Y205MGIzUjVjR1V1YzNSaGNuUlhhWFJvVkdGeVoyVjBMbU5oYkd3b2RHaHBjeXdnZEdGeVoyVjBLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHeHZZMUJ2YzFnZ1BTQjBZWEpuWlhRdWVEdGNiaUFnSUNBZ0lDQWdkbUZ5SUd4dlkxQnZjMWtnUFNCMFlYSm5aWFF1ZVR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY0hKbGRtbHZkWE5RYjNOcGRHbHZiaTU0SUQwZ2JHOWpVRzl6V0R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY0hKbGRtbHZkWE5RYjNOcGRHbHZiaTU1SUQwZ2JHOWpVRzl6V1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYzNSaGNuUlFiM05wZEdsdmJpNTRJRDBnYkc5alVHOXpXRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjM1JoY25SUWIzTnBkR2x2Ymk1NUlEMGdiRzlqVUc5eldUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2RYQmtZWFJsT21aMWJtTjBhVzl1SUNoa2RDa2dlMXh1SUNBZ0lDQWdJQ0JrZENBOUlIUm9hWE11WDJOdmJYQjFkR1ZGWVhObFZHbHRaU2hrZENrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuUmhjbWRsZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIZ2dQU0IwYUdsekxsOXdiM05wZEdsdmJrUmxiSFJoTG5nZ0tpQmtkRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUI1SUQwZ2RHaHBjeTVmY0c5emFYUnBiMjVFWld4MFlTNTVJQ29nWkhRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2JHOWpVM1JoY25SUWIzTnBkR2x2YmlBOUlIUm9hWE11WDNOMFlYSjBVRzl6YVhScGIyNDdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZMk11YldGamNtOHVSVTVCUWt4RlgxTlVRVU5MUVVKTVJWOUJRMVJKVDA1VEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhSaGNtZGxkRmdnUFNCMGFHbHpMblJoY21kbGRDNTRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMFlYSm5aWFJaSUQwZ2RHaHBjeTUwWVhKblpYUXVlVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2JHOWpVSEpsZG1sdmRYTlFiM05wZEdsdmJpQTlJSFJvYVhNdVgzQnlaWFpwYjNWelVHOXphWFJwYjI0N1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNiMk5UZEdGeWRGQnZjMmwwYVc5dUxuZ2dQU0JzYjJOVGRHRnlkRkJ2YzJsMGFXOXVMbmdnS3lCMFlYSm5aWFJZSUMwZ2JHOWpVSEpsZG1sdmRYTlFiM05wZEdsdmJpNTRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3h2WTFOMFlYSjBVRzl6YVhScGIyNHVlU0E5SUd4dlkxTjBZWEowVUc5emFYUnBiMjR1ZVNBcklIUmhjbWRsZEZrZ0xTQnNiMk5RY21WMmFXOTFjMUJ2YzJsMGFXOXVMbms3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZUNBOUlIZ2dLeUJzYjJOVGRHRnlkRkJ2YzJsMGFXOXVMbmc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZVNBOUlIa2dLeUJzYjJOVGRHRnlkRkJ2YzJsMGFXOXVMbms3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR3h2WTFCeVpYWnBiM1Z6VUc5emFYUnBiMjR1ZUNBOUlIZzdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lHeHZZMUJ5WlhacGIzVnpVRzl6YVhScGIyNHVlU0E5SUhrN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkR0Z5WjJWMExuTmxkRkJ2YzJsMGFXOXVLSGdzSUhrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuUmhjbWRsZEM1elpYUlFiM05wZEdsdmJpaHNiMk5UZEdGeWRGQnZjMmwwYVc5dUxuZ2dLeUI0TENCc2IyTlRkR0Z5ZEZCdmMybDBhVzl1TG5rZ0t5QjVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQnlaWFpsY25ObE9tWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHRmpkR2x2YmlBOUlHNWxkeUJqWXk1TmIzWmxRbmtvZEdocGN5NWZaSFZ5WVhScGIyNHNJR05qTG5ZeUtDMTBhR2x6TGw5d2IzTnBkR2x2YmtSbGJIUmhMbmdzSUMxMGFHbHpMbDl3YjNOcGRHbHZia1JsYkhSaExua3BLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZMnh2Ym1WRVpXTnZjbUYwYVc5dUtHRmpkR2x2YmlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNKbGRtVnljMlZGWVhObFRHbHpkQ2hoWTNScGIyNHBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZV04wYVc5dU8xeHVJQ0FnSUgxY2JuMHBPMXh1WEc0dktpcGNiaUFxSUNFalpXNWNiaUFxSUUxdmRtVnpJR0VnVG05a1pTQnZZbXBsWTNRZ2VDeDVJSEJwZUdWc2N5QmllU0J0YjJScFpubHBibWNnYVhSeklIQnZjMmwwYVc5dUlIQnliM0JsY25SNUxpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFluSXZQbHh1SUNvZ2VDQmhibVFnZVNCaGNtVWdjbVZzWVhScGRtVWdkRzhnZEdobElIQnZjMmwwYVc5dUlHOW1JSFJvWlNCdlltcGxZM1F1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4WW5JdlBseHVJQ29nVTJWMlpYSmhiQ0JOYjNabFFua2dZV04wYVc5dWN5QmpZVzRnWW1VZ1kyOXVZM1Z5Y21WdWRHeDVJR05oYkd4bFpDd2dZVzVrSUhSb1pTQnlaWE4xYkhScGJtY2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHSnlMejVjYmlBcUlHMXZkbVZ0Wlc1MElIZHBiR3dnWW1VZ2RHaGxJSE4xYlNCdlppQnBibVJwZG1sa2RXRnNJRzF2ZG1WdFpXNTBjeTVjYmlBcUlDRWplbWdnNTZlNzVZcW81b3lINWE2YTU1cUU2TGVkNTZhNzQ0Q0NYRzRnS2lCQWJXVjBhRzlrSUcxdmRtVkNlVnh1SUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUdSMWNtRjBhVzl1SUdSMWNtRjBhVzl1SUdsdUlITmxZMjl1WkhOY2JpQXFJRUJ3WVhKaGJTQjdWbVZqTW54T2RXMWlaWEo5SUdSbGJIUmhVRzl6WEc0Z0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ1cyUmxiSFJoV1YxY2JpQXFJRUJ5WlhSMWNtNGdlMEZqZEdsdmJrbHVkR1Z5ZG1Gc2ZWeHVJQ29nUUdWNFlXMXdiR1ZjYmlBcUlDOHZJR1Y0WVcxd2JHVmNiaUFxSUhaaGNpQmhZM1JwYjI1VWJ5QTlJR05qTG0xdmRtVkNlU2d5TENCall5NTJNaWgzYVc1a2IzZFRhWHBsTG5kcFpIUm9JQzBnTkRBc0lIZHBibVJ2ZDFOcGVtVXVhR1ZwWjJoMElDMGdOREFwS1R0Y2JpQXFMMXh1WTJNdWJXOTJaVUo1SUQwZ1puVnVZM1JwYjI0Z0tHUjFjbUYwYVc5dUxDQmtaV3gwWVZCdmN5d2daR1ZzZEdGWktTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QmpZeTVOYjNabFFua29aSFZ5WVhScGIyNHNJR1JsYkhSaFVHOXpMQ0JrWld4MFlWa3BPMXh1ZlR0Y2JseHVYRzR2S2x4dUlDb2dUVzkyWlhNZ1lTQk9iMlJsSUc5aWFtVmpkQ0IwYnlCMGFHVWdjRzl6YVhScGIyNGdlQ3g1TGlCNElHRnVaQ0I1SUdGeVpTQmhZbk52YkhWMFpTQmpiMjl5WkdsdVlYUmxjeUJpZVNCdGIyUnBabmxwYm1jZ2FYUnpJSEJ2YzJsMGFXOXVJSEJ5YjNCbGNuUjVMaUE4WW5JdlBseHVJQ29nVTJWMlpYSmhiQ0JOYjNabFZHOGdZV04wYVc5dWN5QmpZVzRnWW1VZ1kyOXVZM1Z5Y21WdWRHeDVJR05oYkd4bFpDd2dZVzVrSUhSb1pTQnlaWE4xYkhScGJtY2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeGljaTgrWEc0Z0tpQnRiM1psYldWdWRDQjNhV3hzSUdKbElIUm9aU0J6ZFcwZ2IyWWdhVzVrYVhacFpIVmhiQ0J0YjNabGJXVnVkSE11WEc0Z0tpQkFZMnhoYzNNZ1RXOTJaVlJ2WEc0Z0tpQkFaWGgwWlc1a2N5Qk5iM1psUW5sY2JpQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQmtkWEpoZEdsdmJpQmtkWEpoZEdsdmJpQnBiaUJ6WldOdmJtUnpYRzRnS2lCQWNHRnlZVzBnZTFabFl6SjhUblZ0WW1WeWZTQndiM05wZEdsdmJseHVJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJRnQ1WFZ4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxSUhaaGNpQmhZM1JwYjI1Q2VTQTlJRzVsZHlCall5NU5iM1psVkc4b01pd2dZMk11ZGpJb09EQXNJRGd3S1NrN1hHNGdLaTljYm1OakxrMXZkbVZVYnlBOUlHTmpMa05zWVhOektIdGNiaUFnSUNCdVlXMWxPaUFuWTJNdVRXOTJaVlJ2Snl4Y2JpQWdJQ0JsZUhSbGJtUnpPaUJqWXk1TmIzWmxRbmtzWEc1Y2JpQWdJQ0JqZEc5eU9tWjFibU4wYVc5dUlDaGtkWEpoZEdsdmJpd2djRzl6YVhScGIyNHNJSGtwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWlc1a1VHOXphWFJwYjI0Z1BTQmpZeTUyTWlnd0xDQXdLVHRjYmx4MFhIUndiM05wZEdsdmJpQWhQVDBnZFc1a1pXWnBibVZrSUNZbUlIUm9hWE11YVc1cGRGZHBkR2hFZFhKaGRHbHZiaWhrZFhKaGRHbHZiaXdnY0c5emFYUnBiMjRzSUhrcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktseHVJQ0FnSUNBcUlFbHVhWFJwWVd4cGVtVnpJSFJvWlNCaFkzUnBiMjR1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJR1IxY21GMGFXOXVJQ0JrZFhKaGRHbHZiaUJwYmlCelpXTnZibVJ6WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRXWldNeWZTQndiM05wZEdsdmJseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCYmVWMWNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdENiMjlzWldGdWZWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdsdWFYUlhhWFJvUkhWeVlYUnBiMjQ2Wm5WdVkzUnBiMjRnS0dSMWNtRjBhVzl1TENCd2IzTnBkR2x2Yml3Z2VTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1kyTXVUVzkyWlVKNUxuQnliM1J2ZEhsd1pTNXBibWwwVjJsMGFFUjFjbUYwYVc5dUxtTmhiR3dvZEdocGN5d2daSFZ5WVhScGIyNHNJSEJ2YzJsMGFXOXVMQ0I1S1NrZ2UxeHVYSFFnSUNBZ0lDQWdJR2xtS0hCdmMybDBhVzl1TG5nZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dVhIUmNkQ0FnSUNBZ0lDQWdlU0E5SUhCdmMybDBhVzl1TG5rN1hHNWNkRngwSUNBZ0lDQWdJQ0J3YjNOcGRHbHZiaUE5SUhCdmMybDBhVzl1TG5nN1hHNWNkQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5bGJtUlFiM05wZEdsdmJpNTRJRDBnY0c5emFYUnBiMjQ3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5bGJtUlFiM05wZEdsdmJpNTVJRDBnZVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdZMnh2Ym1VNlpuVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1lXTjBhVzl1SUQwZ2JtVjNJR05qTGsxdmRtVlVieWdwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlqYkc5dVpVUmxZMjl5WVhScGIyNG9ZV04wYVc5dUtUdGNiaUFnSUNBZ0lDQWdZV04wYVc5dUxtbHVhWFJYYVhSb1JIVnlZWFJwYjI0b2RHaHBjeTVmWkhWeVlYUnBiMjRzSUhSb2FYTXVYMlZ1WkZCdmMybDBhVzl1S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdGamRHbHZianRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdjM1JoY25SWGFYUm9WR0Z5WjJWME9tWjFibU4wYVc5dUlDaDBZWEpuWlhRcElIdGNiaUFnSUNBZ0lDQWdZMk11VFc5MlpVSjVMbkJ5YjNSdmRIbHdaUzV6ZEdGeWRGZHBkR2hVWVhKblpYUXVZMkZzYkNoMGFHbHpMQ0IwWVhKblpYUXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXdiM05wZEdsdmJrUmxiSFJoTG5nZ1BTQjBhR2x6TGw5bGJtUlFiM05wZEdsdmJpNTRJQzBnZEdGeVoyVjBMbmc3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM0J2YzJsMGFXOXVSR1ZzZEdFdWVTQTlJSFJvYVhNdVgyVnVaRkJ2YzJsMGFXOXVMbmtnTFNCMFlYSm5aWFF1ZVR0Y2JpQWdJQ0I5WEc1OUtUdGNibHh1THlvcVhHNGdLaUFoSTJWdVhHNGdLaUJOYjNabGN5QmhJRTV2WkdVZ2IySnFaV04wSUhSdklIUm9aU0J3YjNOcGRHbHZiaUI0TEhrdUlIZ2dZVzVrSUhrZ1lYSmxJR0ZpYzI5c2RYUmxJR052YjNKa2FXNWhkR1Z6SUdKNUlHMXZaR2xtZVdsdVp5QnBkSE1nY0c5emFYUnBiMjRnY0hKdmNHVnlkSGt1SUR4aWNpOCtYRzRnS2lCVFpYWmxjbUZzSUUxdmRtVlVieUJoWTNScGIyNXpJR05oYmlCaVpTQmpiMjVqZFhKeVpXNTBiSGtnWTJGc2JHVmtMQ0JoYm1RZ2RHaGxJSEpsYzNWc2RHbHVaeUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR0p5THo1Y2JpQXFJRzF2ZG1WdFpXNTBJSGRwYkd3Z1ltVWdkR2hsSUhOMWJTQnZaaUJwYm1ScGRtbGtkV0ZzSUcxdmRtVnRaVzUwY3k1Y2JpQXFJQ0VqZW1nZzU2ZTc1WXFvNVlpdzU1dXU1cUNINUwyTjU3MnU0NENDWEc0Z0tpQkFiV1YwYUc5a0lHMXZkbVZVYjF4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHUjFjbUYwYVc5dUlHUjFjbUYwYVc5dUlHbHVJSE5sWTI5dVpITmNiaUFxSUVCd1lYSmhiU0I3Vm1Wak1ueE9kVzFpWlhKOUlIQnZjMmwwYVc5dVhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdXM2xkWEc0Z0tpQkFjbVYwZFhKdUlIdEJZM1JwYjI1SmJuUmxjblpoYkgxY2JpQXFJRUJsZUdGdGNHeGxYRzRnS2lBdkx5QmxlR0Z0Y0d4bFhHNGdLaUIyWVhJZ1lXTjBhVzl1UW5rZ1BTQmpZeTV0YjNabFZHOG9NaXdnWTJNdWRqSW9PREFzSURnd0tTazdYRzRnS2k5Y2JtTmpMbTF2ZG1WVWJ5QTlJR1oxYm1OMGFXOXVJQ2hrZFhKaGRHbHZiaXdnY0c5emFYUnBiMjRzSUhrcElIdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lHTmpMazF2ZG1WVWJ5aGtkWEpoZEdsdmJpd2djRzl6YVhScGIyNHNJSGtwTzF4dWZUdGNibHh1THlwY2JpQXFJRk5yWlhkeklHRWdUbTlrWlNCdlltcGxZM1FnZEc4Z1oybDJaVzRnWVc1bmJHVnpJR0o1SUcxdlpHbG1lV2x1WnlCcGRITWdjMnRsZDFnZ1lXNWtJSE5yWlhkWklIQnliM0JsY25ScFpYTmNiaUFxSUVCamJHRnpjeUJUYTJWM1ZHOWNiaUFxSUVCbGVIUmxibVJ6SUVGamRHbHZia2x1ZEdWeWRtRnNYRzRnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnZENCMGFXMWxJR2x1SUhObFkyOXVaSE5jYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCemVGeHVJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJSE41WEc0Z0tpQkFaWGhoYlhCc1pWeHVJQ29nZG1GeUlHRmpkR2x2YmxSdklEMGdibVYzSUdOakxsTnJaWGRVYnlneUxDQXpOeTR5TENBdE16Y3VNaWs3WEc0Z0tpOWNibU5qTGxOclpYZFVieUE5SUdOakxrTnNZWE56S0h0Y2JpQWdJQ0J1WVcxbE9pQW5ZMk11VTJ0bGQxUnZKeXhjYmlBZ0lDQmxlSFJsYm1Sek9pQmpZeTVCWTNScGIyNUpiblJsY25aaGJDeGNibHh1SUNBZ0lHTjBiM0k2SUdaMWJtTjBhVzl1SUNoMExDQnplQ3dnYzNrcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmMydGxkMWdnUFNBd08xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5emEyVjNXU0E5SURBN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNOMFlYSjBVMnRsZDFnZ1BTQXdPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXpkR0Z5ZEZOclpYZFpJRDBnTUR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWlc1a1UydGxkMWdnUFNBd08xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5bGJtUlRhMlYzV1NBOUlEQTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyUmxiSFJoV0NBOUlEQTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyUmxiSFJoV1NBOUlEQTdYRzRnSUNBZ0lDQWdJSE41SUNFOVBTQjFibVJsWm1sdVpXUWdKaVlnWTJNdVUydGxkMVJ2TG5CeWIzUnZkSGx3WlM1cGJtbDBWMmwwYUVSMWNtRjBhVzl1TG1OaGJHd29kR2hwY3l3Z2RDd2djM2dzSUhONUtUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5cGNiaUFnSUNBZ0tpQkpibWwwYVdGc2FYcGxjeUIwYUdVZ1lXTjBhVzl1TGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0IwSUhScGJXVWdhVzRnYzJWamIyNWtjMXh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQnplRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQnplVnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMEp2YjJ4bFlXNTlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FXNXBkRmRwZEdoRWRYSmhkR2x2YmpwbWRXNWpkR2x2YmlBb2RDd2djM2dzSUhONUtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCeVpYUWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdhV1lnS0dOakxrRmpkR2x2YmtsdWRHVnlkbUZzTG5CeWIzUnZkSGx3WlM1cGJtbDBWMmwwYUVSMWNtRjBhVzl1TG1OaGJHd29kR2hwY3l3Z2RDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJWdVpGTnJaWGRZSUQwZ2MzZzdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlsYm1SVGEyVjNXU0E5SUhONU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVjBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQmpiRzl1WlRwbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCaFkzUnBiMjRnUFNCdVpYY2dZMk11VTJ0bGQxUnZLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMk5zYjI1bFJHVmpiM0poZEdsdmJpaGhZM1JwYjI0cE8xeHVJQ0FnSUNBZ0lDQmhZM1JwYjI0dWFXNXBkRmRwZEdoRWRYSmhkR2x2YmloMGFHbHpMbDlrZFhKaGRHbHZiaXdnZEdocGN5NWZaVzVrVTJ0bGQxZ3NJSFJvYVhNdVgyVnVaRk5yWlhkWktUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHRmpkR2x2Ymp0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnYzNSaGNuUlhhWFJvVkdGeVoyVjBPbVoxYm1OMGFXOXVJQ2gwWVhKblpYUXBJSHRjYmlBZ0lDQWdJQ0FnWTJNdVFXTjBhVzl1U1c1MFpYSjJZV3d1Y0hKdmRHOTBlWEJsTG5OMFlYSjBWMmwwYUZSaGNtZGxkQzVqWVd4c0tIUm9hWE1zSUhSaGNtZGxkQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYzNSaGNuUlRhMlYzV0NBOUlIUmhjbWRsZEM1emEyVjNXQ0FsSURFNE1EdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlpHVnNkR0ZZSUQwZ2RHaHBjeTVmWlc1a1UydGxkMWdnTFNCMGFHbHpMbDl6ZEdGeWRGTnJaWGRZTzF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1ZlpHVnNkR0ZZSUQ0Z01UZ3dLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWkdWc2RHRllJQzA5SURNMk1EdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYMlJsYkhSaFdDQThJQzB4T0RBcFhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWtaV3gwWVZnZ0t6MGdNell3TzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNOMFlYSjBVMnRsZDFrZ1BTQjBZWEpuWlhRdWMydGxkMWtnSlNBek5qQTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyUmxiSFJoV1NBOUlIUm9hWE11WDJWdVpGTnJaWGRaSUMwZ2RHaHBjeTVmYzNSaGNuUlRhMlYzV1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgyUmxiSFJoV1NBK0lERTRNQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJSbGJIUmhXU0F0UFNBek5qQTdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDlrWld4MFlWa2dQQ0F0TVRnd0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZaR1ZzZEdGWklDczlJRE0yTUR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnZFhCa1lYUmxPbVoxYm1OMGFXOXVJQ2hrZENrZ2UxeHVJQ0FnSUNBZ0lDQmtkQ0E5SUhSb2FYTXVYMk52YlhCMWRHVkZZWE5sVkdsdFpTaGtkQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkR0Z5WjJWMExuTnJaWGRZSUQwZ2RHaHBjeTVmYzNSaGNuUlRhMlYzV0NBcklIUm9hWE11WDJSbGJIUmhXQ0FxSUdSME8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5SaGNtZGxkQzV6YTJWM1dTQTlJSFJvYVhNdVgzTjBZWEowVTJ0bGQxa2dLeUIwYUdsekxsOWtaV3gwWVZrZ0tpQmtkRHRjYmlBZ0lDQjlYRzU5S1R0Y2JseHVMeW9xWEc0Z0tpQWhJMlZ1WEc0Z0tpQkRjbVZoZEdVZ1lTQmhZM1JwYjI0Z2QyaHBZMmdnYzJ0bGQzTWdZU0JPYjJSbElHOWlhbVZqZENCMGJ5Qm5hWFpsYmlCaGJtZHNaWE1nWW5rZ2JXOWthV1o1YVc1bklHbDBjeUJ6YTJWM1dDQmhibVFnYzJ0bGQxa2djSEp2Y0dWeWRHbGxjeTVjYmlBcUlFTm9ZVzVuWlhNZ2RHOGdkR2hsSUhOd1pXTnBabWxsWkNCMllXeDFaUzVjYmlBcUlDRWplbWdnNVlHUDVwYWM1WWl3NTV1dTVxQ0g2S2VTNWJxbTQ0Q0NYRzRnS2lCQWJXVjBhRzlrSUhOclpYZFViMXh1SUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUhRZ2RHbHRaU0JwYmlCelpXTnZibVJ6WEc0Z0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ2MzaGNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0J6ZVZ4dUlDb2dRSEpsZEhWeWJpQjdRV04wYVc5dVNXNTBaWEoyWVd4OVhHNGdLaUJBWlhoaGJYQnNaVnh1SUNvZ0x5OGdaWGhoYlhCc1pWeHVJQ29nZG1GeUlHRmpkR2x2YmxSdklEMGdZMk11YzJ0bGQxUnZLRElzSURNM0xqSXNJQzB6Tnk0eUtUdGNiaUFxTDF4dVkyTXVjMnRsZDFSdklEMGdablZ1WTNScGIyNGdLSFFzSUhONExDQnplU2tnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnWTJNdVUydGxkMVJ2S0hRc0lITjRMQ0J6ZVNrN1hHNTlPMXh1WEc0dktseHVJQ29nVTJ0bGQzTWdZU0JPYjJSbElHOWlhbVZqZENCaWVTQnphMlYzV0NCaGJtUWdjMnRsZDFrZ1pHVm5jbVZsY3k1Y2JpQXFJRkpsYkdGMGFYWmxJSFJ2SUdsMGN5QndjbTl3WlhKMGVTQnRiMlJwWm1sallYUnBiMjR1WEc0Z0tpQkFZMnhoYzNNZ1UydGxkMEo1WEc0Z0tpQkFaWGgwWlc1a2N5QlRhMlYzVkc5Y2JpQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQjBJSFJwYldVZ2FXNGdjMlZqYjI1a2MxeHVJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJSE40SUNCemEyVjNJR2x1SUdSbFozSmxaWE1nWm05eUlGZ2dZWGhwYzF4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlITjVJQ0J6YTJWM0lHbHVJR1JsWjNKbFpYTWdabTl5SUZrZ1lYaHBjMXh1SUNvdlhHNWpZeTVUYTJWM1Fua2dQU0JqWXk1RGJHRnpjeWg3WEc0Z0lDQWdibUZ0WlRvZ0oyTmpMbE5yWlhkQ2VTY3NYRzRnSUNBZ1pYaDBaVzVrY3pvZ1kyTXVVMnRsZDFSdkxGeHVYRzVjZEdOMGIzSTZJR1oxYm1OMGFXOXVLSFFzSUhONExDQnplU2tnZTF4dVhIUmNkSE41SUNFOVBTQjFibVJsWm1sdVpXUWdKaVlnZEdocGN5NXBibWwwVjJsMGFFUjFjbUYwYVc5dUtIUXNJSE40TENCemVTazdYRzVjZEgwc1hHNWNiaUFnSUNBdktseHVJQ0FnSUNBcUlFbHVhWFJwWVd4cGVtVnpJSFJvWlNCaFkzUnBiMjR1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJSFFnZEdsdFpTQnBiaUJ6WldOdmJtUnpYRzRnSUNBZ0lDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHUmxiSFJoVTJ0bGQxZ2dJSE5yWlhjZ2FXNGdaR1ZuY21WbGN5Qm1iM0lnV0NCaGVHbHpYRzRnSUNBZ0lDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHUmxiSFJoVTJ0bGQxa2dJSE5yWlhjZ2FXNGdaR1ZuY21WbGN5Qm1iM0lnV1NCaGVHbHpYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdRbTl2YkdWaGJuMWNiaUFnSUNBZ0tpOWNiaUFnSUNCcGJtbDBWMmwwYUVSMWNtRjBhVzl1T21aMWJtTjBhVzl1SUNoMExDQmtaV3gwWVZOclpYZFlMQ0JrWld4MFlWTnJaWGRaS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ5WlhRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2FXWWdLR05qTGxOclpYZFVieTV3Y205MGIzUjVjR1V1YVc1cGRGZHBkR2hFZFhKaGRHbHZiaTVqWVd4c0tIUm9hWE1zSUhRc0lHUmxiSFJoVTJ0bGQxZ3NJR1JsYkhSaFUydGxkMWtwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXphMlYzV0NBOUlHUmxiSFJoVTJ0bGQxZzdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl6YTJWM1dTQTlJR1JsYkhSaFUydGxkMWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFFnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ5WlhRN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUdOc2IyNWxPbVoxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR0ZqZEdsdmJpQTlJRzVsZHlCall5NVRhMlYzUW5rb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlkyeHZibVZFWldOdmNtRjBhVzl1S0dGamRHbHZiaWs3WEc0Z0lDQWdJQ0FnSUdGamRHbHZiaTVwYm1sMFYybDBhRVIxY21GMGFXOXVLSFJvYVhNdVgyUjFjbUYwYVc5dUxDQjBhR2x6TGw5emEyVjNXQ3dnZEdocGN5NWZjMnRsZDFrcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1lXTjBhVzl1TzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0J6ZEdGeWRGZHBkR2hVWVhKblpYUTZablZ1WTNScGIyNGdLSFJoY21kbGRDa2dlMXh1SUNBZ0lDQWdJQ0JqWXk1VGEyVjNWRzh1Y0hKdmRHOTBlWEJsTG5OMFlYSjBWMmwwYUZSaGNtZGxkQzVqWVd4c0tIUm9hWE1zSUhSaGNtZGxkQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMlJsYkhSaFdDQTlJSFJvYVhNdVgzTnJaWGRZTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlrWld4MFlWa2dQU0IwYUdsekxsOXphMlYzV1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWlc1a1UydGxkMWdnUFNCMGFHbHpMbDl6ZEdGeWRGTnJaWGRZSUNzZ2RHaHBjeTVmWkdWc2RHRllPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWxibVJUYTJWM1dTQTlJSFJvYVhNdVgzTjBZWEowVTJ0bGQxa2dLeUIwYUdsekxsOWtaV3gwWVZrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUhKbGRtVnljMlU2Wm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWVdOMGFXOXVJRDBnYm1WM0lHTmpMbE5yWlhkQ2VTaDBhR2x6TGw5a2RYSmhkR2x2Yml3Z0xYUm9hWE11WDNOclpYZFlMQ0F0ZEdocGN5NWZjMnRsZDFrcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5amJHOXVaVVJsWTI5eVlYUnBiMjRvWVdOMGFXOXVLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjbVYyWlhKelpVVmhjMlZNYVhOMEtHRmpkR2x2YmlrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCaFkzUnBiMjQ3WEc0Z0lDQWdmVnh1ZlNrN1hHNWNiaThxS2x4dUlDb2dJU05sYmx4dUlDb2dVMnRsZDNNZ1lTQk9iMlJsSUc5aWFtVmpkQ0JpZVNCemEyVjNXQ0JoYm1RZ2MydGxkMWtnWkdWbmNtVmxjeTRnUEdKeUlDOCtYRzRnS2lCU1pXeGhkR2wyWlNCMGJ5QnBkSE1nY0hKdmNHVnlkSGtnYlc5a2FXWnBZMkYwYVc5dUxseHVJQ29nSVNONmFDRGxnWS9tbHB6bWpJZmxycHJubW9Ub3A1TGx1cWJqZ0lKY2JpQXFJRUJ0WlhSb2IyUWdjMnRsZDBKNVhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdkQ0IwYVcxbElHbHVJSE5sWTI5dVpITmNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0J6ZUNCemVDQnphMlYzSUdsdUlHUmxaM0psWlhNZ1ptOXlJRmdnWVhocGMxeHVJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJSE41SUhONUlITnJaWGNnYVc0Z1pHVm5jbVZsY3lCbWIzSWdXU0JoZUdselhHNGdLaUJBY21WMGRYSnVJSHRCWTNScGIyNUpiblJsY25aaGJIMWNiaUFxSUVCbGVHRnRjR3hsWEc0Z0tpQXZMeUJsZUdGdGNHeGxYRzRnS2lCMllYSWdZV04wYVc5dVFua2dQU0JqWXk1emEyVjNRbmtvTWl3Z01Dd2dMVGt3S1R0Y2JpQXFMMXh1WTJNdWMydGxkMEo1SUQwZ1puVnVZM1JwYjI0Z0tIUXNJSE40TENCemVTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dZMk11VTJ0bGQwSjVLSFFzSUhONExDQnplU2s3WEc1OU8xeHVYRzVjYmk4cVhHNGdLaUJOYjNabGN5QmhJRTV2WkdVZ2IySnFaV04wSUhOcGJYVnNZWFJwYm1jZ1lTQndZWEpoWW05c2FXTWdhblZ0Y0NCdGIzWmxiV1Z1ZENCaWVTQnRiMlJwWm5scGJtY2dhWFJ6SUhCdmMybDBhVzl1SUhCeWIzQmxjblI1TGx4dUlDb2dVbVZzWVhScGRtVWdkRzhnYVhSeklHMXZkbVZ0Wlc1MExseHVJQ29nUUdOc1lYTnpJRXAxYlhCQ2VWeHVJQ29nUUdWNGRHVnVaSE1nUVdOMGFXOXVTVzUwWlhKMllXeGNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JrZFhKaGRHbHZibHh1SUNvZ1FIQmhjbUZ0SUh0V1pXTXlmRTUxYldKbGNuMGdjRzl6YVhScGIyNWNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JiZVYxY2JpQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQm9aV2xuYUhSY2JpQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQnFkVzF3YzF4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxSUhaaGNpQmhZM1JwYjI1Q2VTQTlJRzVsZHlCall5NUtkVzF3UW5rb01pd2dZMk11ZGpJb016QXdMQ0F3S1N3Z05UQXNJRFFwTzF4dUlDb2dkbUZ5SUdGamRHbHZia0o1SUQwZ2JtVjNJR05qTGtwMWJYQkNlU2d5TENBek1EQXNJREFzSURVd0xDQTBLVHRjYmlBcUwxeHVZMk11U25WdGNFSjVJRDBnWTJNdVEyeGhjM01vZTF4dUlDQWdJRzVoYldVNklDZGpZeTVLZFcxd1Fua25MRnh1SUNBZ0lHVjRkR1Z1WkhNNklHTmpMa0ZqZEdsdmJrbHVkR1Z5ZG1Gc0xGeHVYRzRnSUNBZ1kzUnZjanBtZFc1amRHbHZiaUFvWkhWeVlYUnBiMjRzSUhCdmMybDBhVzl1TENCNUxDQm9aV2xuYUhRc0lHcDFiWEJ6S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNOMFlYSjBVRzl6YVhScGIyNGdQU0JqWXk1Mk1pZ3dMQ0F3S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY0hKbGRtbHZkWE5RYjNOcGRHbHZiaUE5SUdOakxuWXlLREFzSURBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5a1pXeDBZU0E5SUdOakxuWXlLREFzSURBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5b1pXbG5hSFFnUFNBd08xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5cWRXMXdjeUE5SURBN1hHNWNiaUFnSUNBZ0lDQWdhR1ZwWjJoMElDRTlQU0IxYm1SbFptbHVaV1FnSmlZZ1kyTXVTblZ0Y0VKNUxuQnliM1J2ZEhsd1pTNXBibWwwVjJsMGFFUjFjbUYwYVc5dUxtTmhiR3dvZEdocGN5d2daSFZ5WVhScGIyNHNJSEJ2YzJsMGFXOXVMQ0I1TENCb1pXbG5hSFFzSUdwMWJYQnpLVHRjYmlBZ0lDQjlMRnh1SUNBZ0lDOHFYRzRnSUNBZ0lDb2dTVzVwZEdsaGJHbDZaWE1nZEdobElHRmpkR2x2Ymk1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnWkhWeVlYUnBiMjVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMVpsWXpKOFRuVnRZbVZ5ZlNCd2IzTnBkR2x2Ymx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JiZVYxY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnYUdWcFoyaDBYRzRnSUNBZ0lDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHcDFiWEJ6WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3UW05dmJHVmhibjFjYmlBZ0lDQWdLaUJBWlhoaGJYQnNaVnh1SUNBZ0lDQXFJR0ZqZEdsdmJrSjVMbWx1YVhSWGFYUm9SSFZ5WVhScGIyNG9NaXdnWTJNdWRqSW9NekF3TENBd0tTd2dOVEFzSURRcE8xeHVJQ0FnSUNBcUlHRmpkR2x2YmtKNUxtbHVhWFJYYVhSb1JIVnlZWFJwYjI0b01pd2dNekF3TENBd0xDQTFNQ3dnTkNrN1hHNGdJQ0FnSUNvdlhHNGdJQ0FnYVc1cGRGZHBkR2hFZFhKaGRHbHZianBtZFc1amRHbHZiaUFvWkhWeVlYUnBiMjRzSUhCdmMybDBhVzl1TENCNUxDQm9aV2xuYUhRc0lHcDFiWEJ6S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hqWXk1QlkzUnBiMjVKYm5SbGNuWmhiQzV3Y205MGIzUjVjR1V1YVc1cGRGZHBkR2hFZFhKaGRHbHZiaTVqWVd4c0tIUm9hWE1zSUdSMWNtRjBhVzl1S1NrZ2UxeHVYSFFnSUNBZ0lDQWdJR2xtSUNocWRXMXdjeUE5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzVjZEZ4MElDQWdJQ0FnSUNCcWRXMXdjeUE5SUdobGFXZG9kRHRjYmx4MFhIUWdJQ0FnSUNBZ0lHaGxhV2RvZENBOUlIazdYRzVjZEZ4MElDQWdJQ0FnSUNCNUlEMGdjRzl6YVhScGIyNHVlVHRjYmx4MFhIUWdJQ0FnSUNBZ0lIQnZjMmwwYVc5dUlEMGdjRzl6YVhScGIyNHVlRHRjYmx4MElDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWtaV3gwWVM1NElEMGdjRzl6YVhScGIyNDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlrWld4MFlTNTVJRDBnZVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyaGxhV2RvZENBOUlHaGxhV2RvZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgycDFiWEJ6SUQwZ2FuVnRjSE03WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHTnNiMjVsT21aMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdGamRHbHZiaUE5SUc1bGR5QmpZeTVLZFcxd1Fua29LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZMnh2Ym1WRVpXTnZjbUYwYVc5dUtHRmpkR2x2YmlrN1hHNGdJQ0FnSUNBZ0lHRmpkR2x2Ymk1cGJtbDBWMmwwYUVSMWNtRjBhVzl1S0hSb2FYTXVYMlIxY21GMGFXOXVMQ0IwYUdsekxsOWtaV3gwWVN3Z2RHaHBjeTVmYUdWcFoyaDBMQ0IwYUdsekxsOXFkVzF3Y3lrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCaFkzUnBiMjQ3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJSE4wWVhKMFYybDBhRlJoY21kbGREcG1kVzVqZEdsdmJpQW9kR0Z5WjJWMEtTQjdYRzRnSUNBZ0lDQWdJR05qTGtGamRHbHZia2x1ZEdWeWRtRnNMbkJ5YjNSdmRIbHdaUzV6ZEdGeWRGZHBkR2hVWVhKblpYUXVZMkZzYkNoMGFHbHpMQ0IwWVhKblpYUXBPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2JHOWpVRzl6V0NBOUlIUmhjbWRsZEM1NE8xeHVJQ0FnSUNBZ0lDQjJZWElnYkc5alVHOXpXU0E5SUhSaGNtZGxkQzU1TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl3Y21WMmFXOTFjMUJ2YzJsMGFXOXVMbmdnUFNCc2IyTlFiM05ZTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl3Y21WMmFXOTFjMUJ2YzJsMGFXOXVMbmtnUFNCc2IyTlFiM05aTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl6ZEdGeWRGQnZjMmwwYVc5dUxuZ2dQU0JzYjJOUWIzTllPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXpkR0Z5ZEZCdmMybDBhVzl1TG5rZ1BTQnNiMk5RYjNOWk8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCMWNHUmhkR1U2Wm5WdVkzUnBiMjRnS0dSMEtTQjdYRzRnSUNBZ0lDQWdJR1IwSUQwZ2RHaHBjeTVmWTI5dGNIVjBaVVZoYzJWVWFXMWxLR1IwS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWRHRnlaMlYwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1puSmhZeUE5SUdSMElDb2dkR2hwY3k1ZmFuVnRjSE1nSlNBeExqQTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdlU0E5SUhSb2FYTXVYMmhsYVdkb2RDQXFJRFFnS2lCbWNtRmpJQ29nS0RFZ0xTQm1jbUZqS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSGtnS3owZ2RHaHBjeTVmWkdWc2RHRXVlU0FxSUdSME8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdlQ0E5SUhSb2FYTXVYMlJsYkhSaExuZ2dLaUJrZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCc2IyTlRkR0Z5ZEZCdmMybDBhVzl1SUQwZ2RHaHBjeTVmYzNSaGNuUlFiM05wZEdsdmJqdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGpZeTV0WVdOeWJ5NUZUa0ZDVEVWZlUxUkJRMHRCUWt4RlgwRkRWRWxQVGxNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnZEdGeVoyVjBXQ0E5SUhSb2FYTXVkR0Z5WjJWMExuZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhSaGNtZGxkRmtnUFNCMGFHbHpMblJoY21kbGRDNTVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCc2IyTlFjbVYyYVc5MWMxQnZjMmwwYVc5dUlEMGdkR2hwY3k1ZmNISmxkbWx2ZFhOUWIzTnBkR2x2Ymp0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeHZZMU4wWVhKMFVHOXphWFJwYjI0dWVDQTlJR3h2WTFOMFlYSjBVRzl6YVhScGIyNHVlQ0FySUhSaGNtZGxkRmdnTFNCc2IyTlFjbVYyYVc5MWMxQnZjMmwwYVc5dUxuZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiRzlqVTNSaGNuUlFiM05wZEdsdmJpNTVJRDBnYkc5alUzUmhjblJRYjNOcGRHbHZiaTU1SUNzZ2RHRnlaMlYwV1NBdElHeHZZMUJ5WlhacGIzVnpVRzl6YVhScGIyNHVlVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I0SUQwZ2VDQXJJR3h2WTFOMFlYSjBVRzl6YVhScGIyNHVlRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I1SUQwZ2VTQXJJR3h2WTFOMFlYSjBVRzl6YVhScGIyNHVlVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdiRzlqVUhKbGRtbHZkWE5RYjNOcGRHbHZiaTU0SUQwZ2VEdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2JHOWpVSEpsZG1sdmRYTlFiM05wZEdsdmJpNTVJRDBnZVR0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTBZWEpuWlhRdWMyVjBVRzl6YVhScGIyNG9lQ3dnZVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRHRnlaMlYwTG5ObGRGQnZjMmwwYVc5dUtHeHZZMU4wWVhKMFVHOXphWFJwYjI0dWVDQXJJSGdzSUd4dlkxTjBZWEowVUc5emFYUnBiMjR1ZVNBcklIa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lISmxkbVZ5YzJVNlpuVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1lXTjBhVzl1SUQwZ2JtVjNJR05qTGtwMWJYQkNlU2gwYUdsekxsOWtkWEpoZEdsdmJpd2dZMk11ZGpJb0xYUm9hWE11WDJSbGJIUmhMbmdzSUMxMGFHbHpMbDlrWld4MFlTNTVLU3dnZEdocGN5NWZhR1ZwWjJoMExDQjBhR2x6TGw5cWRXMXdjeWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMk5zYjI1bFJHVmpiM0poZEdsdmJpaGhZM1JwYjI0cE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5eVpYWmxjbk5sUldGelpVeHBjM1FvWVdOMGFXOXVLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR0ZqZEdsdmJqdGNiaUFnSUNCOVhHNTlLVHRjYmx4dUx5b3FYRzRnS2lBaEkyVnVYRzRnS2lCTmIzWmxjeUJoSUU1dlpHVWdiMkpxWldOMElITnBiWFZzWVhScGJtY2dZU0J3WVhKaFltOXNhV01nYW5WdGNDQnRiM1psYldWdWRDQmllU0J0YjJScFpubHBibWNnYVhRbmN5QndiM05wZEdsdmJpQndjbTl3WlhKMGVTNWNiaUFxSUZKbGJHRjBhWFpsSUhSdklHbDBjeUJ0YjNabGJXVnVkQzVjYmlBcUlDRWplbWdnNTVTbzZMZXo2TGVENTVxRTVwYTU1YnlQNTZlNzVZcW81b3lINWE2YTU1cUU2TGVkNTZhNzQ0Q0NYRzRnS2lCQWJXVjBhRzlrSUdwMWJYQkNlVnh1SUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUdSMWNtRjBhVzl1WEc0Z0tpQkFjR0Z5WVcwZ2UxWmxZeko4VG5WdFltVnlmU0J3YjNOcGRHbHZibHh1SUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUZ0NVhWeHVJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJRnRvWldsbmFIUmRYRzRnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnVzJwMWJYQnpYVnh1SUNvZ1FISmxkSFZ5YmlCN1FXTjBhVzl1U1c1MFpYSjJZV3g5WEc0Z0tpQkFaWGhoYlhCc1pWeHVJQ29nTHk4Z1pYaGhiWEJzWlZ4dUlDb2dkbUZ5SUdGamRHbHZia0o1SUQwZ1kyTXVhblZ0Y0VKNUtESXNJR05qTG5ZeUtETXdNQ3dnTUNrc0lEVXdMQ0EwS1R0Y2JpQXFJSFpoY2lCaFkzUnBiMjVDZVNBOUlHTmpMbXAxYlhCQ2VTZ3lMQ0F6TURBc0lEQXNJRFV3TENBMEtUdGNiaUFxTDF4dVkyTXVhblZ0Y0VKNUlEMGdablZ1WTNScGIyNGdLR1IxY21GMGFXOXVMQ0J3YjNOcGRHbHZiaXdnZVN3Z2FHVnBaMmgwTENCcWRXMXdjeWtnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnWTJNdVNuVnRjRUo1S0dSMWNtRjBhVzl1TENCd2IzTnBkR2x2Yml3Z2VTd2dhR1ZwWjJoMExDQnFkVzF3Y3lrN1hHNTlPMXh1WEc0dktseHVJQ29nVFc5MlpYTWdZU0JPYjJSbElHOWlhbVZqZENCMGJ5QmhJSEJoY21GaWIyeHBZeUJ3YjNOcGRHbHZiaUJ6YVcxMWJHRjBhVzVuSUdFZ2FuVnRjQ0J0YjNabGJXVnVkQ0JpZVNCdGIyUnBabmxwYm1jZ2FYUW5jeUJ3YjNOcGRHbHZiaUJ3Y205d1pYSjBlUzRnUEdKeUlDOCtYRzRnS2lCS2RXMXdJSFJ2SUhSb1pTQnpjR1ZqYVdacFpXUWdiRzlqWVhScGIyNHVYRzRnS2lCQVkyeGhjM01nU25WdGNGUnZYRzRnS2lCQVpYaDBaVzVrY3lCS2RXMXdRbmxjYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCa2RYSmhkR2x2Ymx4dUlDb2dRSEJoY21GdElIdFdaV015ZkU1MWJXSmxjbjBnY0c5emFYUnBiMjVjYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCYmVWMWNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JiYUdWcFoyaDBYVnh1SUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUZ0cWRXMXdjMTFjYmlBcUlFQmxlR0Z0Y0d4bFhHNGdLaUIyWVhJZ1lXTjBhVzl1Vkc4Z1BTQnVaWGNnWTJNdVNuVnRjRlJ2S0RJc0lHTmpMbll5S0RNd01Dd2dNQ2tzSURVd0xDQTBLVHRjYmlBcUlIWmhjaUJoWTNScGIyNVVieUE5SUc1bGR5QmpZeTVLZFcxd1ZHOG9NaXdnTXpBd0xDQXdMQ0ExTUN3Z05DazdYRzRnS2k5Y2JtTmpMa3AxYlhCVWJ5QTlJR05qTGtOc1lYTnpLSHRjYmlBZ0lDQnVZVzFsT2lBblkyTXVTblZ0Y0ZSdkp5eGNiaUFnSUNCbGVIUmxibVJ6T2lCall5NUtkVzF3UW5rc1hHNWNiaUFnSUNCamRHOXlPbVoxYm1OMGFXOXVJQ2hrZFhKaGRHbHZiaXdnY0c5emFYUnBiMjRzSUhrc0lHaGxhV2RvZEN3Z2FuVnRjSE1wSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWlc1a1VHOXphWFJwYjI0Z1BTQmpZeTUyTWlnd0xDQXdLVHRjYmlBZ0lDQWdJQ0FnYUdWcFoyaDBJQ0U5UFNCMWJtUmxabWx1WldRZ0ppWWdkR2hwY3k1cGJtbDBWMmwwYUVSMWNtRjBhVzl1S0dSMWNtRjBhVzl1TENCd2IzTnBkR2x2Yml3Z2VTd2dhR1ZwWjJoMExDQnFkVzF3Y3lrN1hHNGdJQ0FnZlN4Y2JpQWdJQ0F2S2x4dUlDQWdJQ0FxSUVsdWFYUnBZV3hwZW1WeklIUm9aU0JoWTNScGIyNHVYRzRnSUNBZ0lDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHUjFjbUYwYVc5dVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0V1pXTXlmRTUxYldKbGNuMGdjRzl6YVhScGIyNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ1czbGRYRzRnSUNBZ0lDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHaGxhV2RvZEZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JxZFcxd2MxeHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UwSnZiMnhsWVc1OVhHNGdJQ0FnSUNvZ1FHVjRZVzF3YkdWY2JpQWdJQ0FnS2lCaFkzUnBiMjVVYnk1cGJtbDBWMmwwYUVSMWNtRjBhVzl1S0RJc0lHTmpMbll5S0RNd01Dd2dNQ2tzSURVd0xDQTBLVHRjYmlBZ0lDQWdLaUJoWTNScGIyNVVieTVwYm1sMFYybDBhRVIxY21GMGFXOXVLRElzSURNd01Dd2dNQ3dnTlRBc0lEUXBPMXh1SUNBZ0lDQXFMMXh1SUNBZ0lHbHVhWFJYYVhSb1JIVnlZWFJwYjI0NlpuVnVZM1JwYjI0Z0tHUjFjbUYwYVc5dUxDQndiM05wZEdsdmJpd2dlU3dnYUdWcFoyaDBMQ0JxZFcxd2N5a2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1kyTXVTblZ0Y0VKNUxuQnliM1J2ZEhsd1pTNXBibWwwVjJsMGFFUjFjbUYwYVc5dUxtTmhiR3dvZEdocGN5d2daSFZ5WVhScGIyNHNJSEJ2YzJsMGFXOXVMQ0I1TENCb1pXbG5hSFFzSUdwMWJYQnpLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dwMWJYQnpJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjVJRDBnY0c5emFYUnBiMjR1ZVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2IzTnBkR2x2YmlBOUlIQnZjMmwwYVc5dUxuZzdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWxibVJRYjNOcGRHbHZiaTU0SUQwZ2NHOXphWFJwYjI0N1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWxibVJRYjNOcGRHbHZiaTU1SUQwZ2VUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnYzNSaGNuUlhhWFJvVkdGeVoyVjBPbVoxYm1OMGFXOXVJQ2gwWVhKblpYUXBJSHRjYmlBZ0lDQWdJQ0FnWTJNdVNuVnRjRUo1TG5CeWIzUnZkSGx3WlM1emRHRnlkRmRwZEdoVVlYSm5aWFF1WTJGc2JDaDBhR2x6TENCMFlYSm5aWFFwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlrWld4MFlTNTRJRDBnZEdocGN5NWZaVzVrVUc5emFYUnBiMjR1ZUNBdElIUm9hWE11WDNOMFlYSjBVRzl6YVhScGIyNHVlRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZaR1ZzZEdFdWVTQTlJSFJvYVhNdVgyVnVaRkJ2YzJsMGFXOXVMbmtnTFNCMGFHbHpMbDl6ZEdGeWRGQnZjMmwwYVc5dUxuazdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHTnNiMjVsT21aMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdGamRHbHZiaUE5SUc1bGR5QmpZeTVLZFcxd1ZHOG9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZMnh2Ym1WRVpXTnZjbUYwYVc5dUtHRmpkR2x2YmlrN1hHNGdJQ0FnSUNBZ0lHRmpkR2x2Ymk1cGJtbDBWMmwwYUVSMWNtRjBhVzl1S0hSb2FYTXVYMlIxY21GMGFXOXVMQ0IwYUdsekxsOWxibVJRYjNOcGRHbHZiaXdnZEdocGN5NWZhR1ZwWjJoMExDQjBhR2x6TGw5cWRXMXdjeWs3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJoWTNScGIyNDdYRzRnSUNBZ2ZWeHVmU2s3WEc1Y2JpOHFLbHh1SUNvZ0lTTmxibHh1SUNvZ1RXOTJaWE1nWVNCT2IyUmxJRzlpYW1WamRDQjBieUJoSUhCaGNtRmliMnhwWXlCd2IzTnBkR2x2YmlCemFXMTFiR0YwYVc1bklHRWdhblZ0Y0NCdGIzWmxiV1Z1ZENCaWVTQnRiMlJwWm5scGJtY2dhWFJ6SUhCdmMybDBhVzl1SUhCeWIzQmxjblI1TGlBOFluSWdMejVjYmlBcUlFcDFiWEFnZEc4Z2RHaGxJSE53WldOcFptbGxaQ0JzYjJOaGRHbHZiaTVjYmlBcUlDRWplbWdnNTVTbzZMZXo2TGVENTVxRTVwYTU1YnlQNTZlNzVZcW81WWl3NTV1dTVxQ0g1TDJONTcydTQ0Q0NYRzRnS2lCQWJXVjBhRzlrSUdwMWJYQlViMXh1SUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUdSMWNtRjBhVzl1WEc0Z0tpQkFjR0Z5WVcwZ2UxWmxZeko4VG5WdFltVnlmU0J3YjNOcGRHbHZibHh1SUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUZ0NVhWeHVJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJRnRvWldsbmFIUmRYRzRnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnVzJwMWJYQnpYVnh1SUNvZ1FISmxkSFZ5YmlCN1FXTjBhVzl1U1c1MFpYSjJZV3g5WEc0Z0tpQkFaWGhoYlhCc1pWeHVJQ29nTHk4Z1pYaGhiWEJzWlZ4dUlDb2dkbUZ5SUdGamRHbHZibFJ2SUQwZ1kyTXVhblZ0Y0ZSdktESXNJR05qTG5ZeUtETXdNQ3dnTXpBd0tTd2dOVEFzSURRcE8xeHVJQ29nZG1GeUlHRmpkR2x2YmxSdklEMGdZMk11YW5WdGNGUnZLRElzSURNd01Dd2dNekF3TENBMU1Dd2dOQ2s3WEc0Z0tpOWNibU5qTG1wMWJYQlVieUE5SUdaMWJtTjBhVzl1SUNoa2RYSmhkR2x2Yml3Z2NHOXphWFJwYjI0c0lIa3NJR2hsYVdkb2RDd2dhblZ0Y0hNcElIdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lHTmpMa3AxYlhCVWJ5aGtkWEpoZEdsdmJpd2djRzl6YVhScGIyNHNJSGtzSUdobGFXZG9kQ3dnYW5WdGNITXBPMXh1ZlR0Y2JseHVMeW9nUVc0Z1lXTjBhVzl1SUhSb1lYUWdiVzkyWlhNZ2RHaGxJSFJoY21kbGRDQjNhWFJvSUdFZ1kzVmlhV01nUW1WNmFXVnlJR04xY25abElHSjVJR0VnWTJWeWRHRnBiaUJrYVhOMFlXNWpaUzVjYmlBcUlGSmxiR0YwYVhabElIUnZJR2wwY3lCdGIzWmxiV1Z1ZEM1Y2JpQXFJRUJqYkdGemN5QkNaWHBwWlhKQ2VWeHVJQ29nUUdWNGRHVnVaSE1nUVdOMGFXOXVTVzUwWlhKMllXeGNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0IwSUMwZ2RHbHRaU0JwYmlCelpXTnZibVJ6WEc0Z0tpQkFjR0Z5WVcwZ2UxWmxZekpiWFgwZ1l5QXRJRUZ5Y21GNUlHOW1JSEJ2YVc1MGMxeHVJQ29nUUdWNFlXMXdiR1ZjYmlBcUlIWmhjaUJpWlhwcFpYSWdQU0JiWTJNdWRqSW9NQ3dnZDJsdVpHOTNVMmw2WlM1b1pXbG5hSFFnTHlBeUtTd2dZMk11ZGpJb016QXdMQ0F0ZDJsdVpHOTNVMmw2WlM1b1pXbG5hSFFnTHlBeUtTd2dZMk11ZGpJb016QXdMQ0F4TURBcFhUdGNiaUFxSUhaaGNpQmlaWHBwWlhKR2IzSjNZWEprSUQwZ2JtVjNJR05qTGtKbGVtbGxja0o1S0RNc0lHSmxlbWxsY2lrN1hHNGdLaTljYm1aMWJtTjBhVzl1SUdKbGVtbGxja0YwSUNoaExDQmlMQ0JqTENCa0xDQjBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlDaE5ZWFJvTG5CdmR5Z3hJQzBnZEN3Z015a2dLaUJoSUN0Y2JpQWdJQ0FnSUNBZ015QXFJSFFnS2lBb1RXRjBhQzV3YjNjb01TQXRJSFFzSURJcEtTQXFJR0lnSzF4dUlDQWdJQ0FnSUNBeklDb2dUV0YwYUM1d2IzY29kQ3dnTWlrZ0tpQW9NU0F0SUhRcElDb2dZeUFyWEc0Z0lDQWdJQ0FnSUUxaGRHZ3VjRzkzS0hRc0lETXBJQ29nWkNBcE8xeHVmVHRjYm1OakxrSmxlbWxsY2tKNUlEMGdZMk11UTJ4aGMzTW9lMXh1SUNBZ0lHNWhiV1U2SUNkall5NUNaWHBwWlhKQ2VTY3NYRzRnSUNBZ1pYaDBaVzVrY3pvZ1kyTXVRV04wYVc5dVNXNTBaWEoyWVd3c1hHNWNiaUFnSUNCamRHOXlPbVoxYm1OMGFXOXVJQ2gwTENCaktTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyTnZibVpwWnlBOUlGdGRPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXpkR0Z5ZEZCdmMybDBhVzl1SUQwZ1kyTXVkaklvTUN3Z01DazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzQnlaWFpwYjNWelVHOXphWFJwYjI0Z1BTQmpZeTUyTWlnd0xDQXdLVHRjYmlBZ0lDQWdJQ0FnWXlBbUppQmpZeTVDWlhwcFpYSkNlUzV3Y205MGIzUjVjR1V1YVc1cGRGZHBkR2hFZFhKaGRHbHZiaTVqWVd4c0tIUm9hWE1zSUhRc0lHTXBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLbHh1SUNBZ0lDQXFJRWx1YVhScFlXeHBlbVZ6SUhSb1pTQmhZM1JwYjI0dVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUhRZ0xTQjBhVzFsSUdsdUlITmxZMjl1WkhOY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFabFl6SmJYWDBnWXlBdElFRnljbUY1SUc5bUlIQnZhVzUwYzF4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTBKdmIyeGxZVzU5WEc0Z0lDQWdJQ292WEc0Z0lDQWdhVzVwZEZkcGRHaEVkWEpoZEdsdmJqcG1kVzVqZEdsdmJpQW9kQ3dnWXlrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvWTJNdVFXTjBhVzl1U1c1MFpYSjJZV3d1Y0hKdmRHOTBlWEJsTG1sdWFYUlhhWFJvUkhWeVlYUnBiMjR1WTJGc2JDaDBhR2x6TENCMEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWTI5dVptbG5JRDBnWXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdZMnh2Ym1VNlpuVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1lXTjBhVzl1SUQwZ2JtVjNJR05qTGtKbGVtbGxja0o1S0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJOc2IyNWxSR1ZqYjNKaGRHbHZiaWhoWTNScGIyNHBPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2JtVjNRMjl1Wm1sbmN5QTlJRnRkTzF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElIUm9hWE11WDJOdmJtWnBaeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlITmxiRU52Ym1ZZ1BTQjBhR2x6TGw5amIyNW1hV2RiYVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WlhkRGIyNW1hV2R6TG5CMWMyZ29ZMk11ZGpJb2MyVnNRMjl1Wmk1NExDQnpaV3hEYjI1bUxua3BLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCaFkzUnBiMjR1YVc1cGRGZHBkR2hFZFhKaGRHbHZiaWgwYUdsekxsOWtkWEpoZEdsdmJpd2dibVYzUTI5dVptbG5jeWs3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJoWTNScGIyNDdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lITjBZWEowVjJsMGFGUmhjbWRsZERwbWRXNWpkR2x2YmlBb2RHRnlaMlYwS1NCN1hHNGdJQ0FnSUNBZ0lHTmpMa0ZqZEdsdmJrbHVkR1Z5ZG1Gc0xuQnliM1J2ZEhsd1pTNXpkR0Z5ZEZkcGRHaFVZWEpuWlhRdVkyRnNiQ2gwYUdsekxDQjBZWEpuWlhRcE8xeHVJQ0FnSUNBZ0lDQjJZWElnYkc5alVHOXpXQ0E5SUhSaGNtZGxkQzU0TzF4dUlDQWdJQ0FnSUNCMllYSWdiRzlqVUc5eldTQTlJSFJoY21kbGRDNTVPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXdjbVYyYVc5MWMxQnZjMmwwYVc5dUxuZ2dQU0JzYjJOUWIzTllPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXdjbVYyYVc5MWMxQnZjMmwwYVc5dUxua2dQU0JzYjJOUWIzTlpPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXpkR0Z5ZEZCdmMybDBhVzl1TG5nZ1BTQnNiMk5RYjNOWU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5emRHRnlkRkJ2YzJsMGFXOXVMbmtnUFNCc2IyTlFiM05aTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0IxY0dSaGRHVTZablZ1WTNScGIyNGdLR1IwS1NCN1hHNGdJQ0FnSUNBZ0lHUjBJRDBnZEdocGN5NWZZMjl0Y0hWMFpVVmhjMlZVYVcxbEtHUjBLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11ZEdGeVoyVjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnYkc5alEyOXVabWxuSUQwZ2RHaHBjeTVmWTI5dVptbG5PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSGhoSUQwZ01EdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQjRZaUE5SUd4dlkwTnZibVpwWjFzd1hTNTRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSGhqSUQwZ2JHOWpRMjl1Wm1sbld6RmRMbmc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnZUdRZ1BTQnNiMk5EYjI1bWFXZGJNbDB1ZUR0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIbGhJRDBnTUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCNVlpQTlJR3h2WTBOdmJtWnBaMXN3WFM1NU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIbGpJRDBnYkc5alEyOXVabWxuV3pGZExuazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdlV1FnUFNCc2IyTkRiMjVtYVdkYk1sMHVlVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhnZ1BTQmlaWHBwWlhKQmRDaDRZU3dnZUdJc0lIaGpMQ0I0WkN3Z1pIUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSGtnUFNCaVpYcHBaWEpCZENoNVlTd2dlV0lzSUhsakxDQjVaQ3dnWkhRcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdiRzlqVTNSaGNuUlFiM05wZEdsdmJpQTlJSFJvYVhNdVgzTjBZWEowVUc5emFYUnBiMjQ3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWTJNdWJXRmpjbTh1UlU1QlFreEZYMU5VUVVOTFFVSk1SVjlCUTFSSlQwNVRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIUmhjbWRsZEZnZ1BTQjBhR2x6TG5SaGNtZGxkQzU0TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQjBZWEpuWlhSWklEMGdkR2hwY3k1MFlYSm5aWFF1ZVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdiRzlqVUhKbGRtbHZkWE5RYjNOcGRHbHZiaUE5SUhSb2FYTXVYM0J5WlhacGIzVnpVRzl6YVhScGIyNDdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzYjJOVGRHRnlkRkJ2YzJsMGFXOXVMbmdnUFNCc2IyTlRkR0Z5ZEZCdmMybDBhVzl1TG5nZ0t5QjBZWEpuWlhSWUlDMGdiRzlqVUhKbGRtbHZkWE5RYjNOcGRHbHZiaTU0TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4dlkxTjBZWEowVUc5emFYUnBiMjR1ZVNBOUlHeHZZMU4wWVhKMFVHOXphWFJwYjI0dWVTQXJJSFJoY21kbGRGa2dMU0JzYjJOUWNtVjJhVzkxYzFCdmMybDBhVzl1TG5rN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VDQTlJSGdnS3lCc2IyTlRkR0Z5ZEZCdmMybDBhVzl1TG5nN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VTQTlJSGtnS3lCc2IyTlRkR0Z5ZEZCdmMybDBhVzl1TG5rN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUd4dlkxQnlaWFpwYjNWelVHOXphWFJwYjI0dWVDQTlJSGc3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR3h2WTFCeVpYWnBiM1Z6VUc5emFYUnBiMjR1ZVNBOUlIazdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZEdGeVoyVjBMbk5sZEZCdmMybDBhVzl1S0hnc0lIa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblJoY21kbGRDNXpaWFJRYjNOcGRHbHZiaWhzYjJOVGRHRnlkRkJ2YzJsMGFXOXVMbmdnS3lCNExDQnNiMk5UZEdGeWRGQnZjMmwwYVc5dUxua2dLeUI1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0J5WlhabGNuTmxPbVoxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR3h2WTBOdmJtWnBaeUE5SUhSb2FYTXVYMk52Ym1acFp6dGNiaUFnSUNBZ0lDQWdkbUZ5SUhnd0lEMGdiRzlqUTI5dVptbG5XekJkTG5nc0lIa3dJRDBnYkc5alEyOXVabWxuV3pCZExuazdYRzRnSUNBZ0lDQWdJSFpoY2lCNE1TQTlJR3h2WTBOdmJtWnBaMXN4WFM1NExDQjVNU0E5SUd4dlkwTnZibVpwWjFzeFhTNTVPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2VESWdQU0JzYjJORGIyNW1hV2RiTWwwdWVDd2dlVElnUFNCc2IyTkRiMjVtYVdkYk1sMHVlVHRjYmlBZ0lDQWdJQ0FnZG1GeUlISWdQU0JiWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZeTUyTWloNE1TQXRJSGd5TENCNU1TQXRJSGt5S1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJR05qTG5ZeUtIZ3dJQzBnZURJc0lIa3dJQzBnZVRJcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJNdWRqSW9MWGd5TENBdGVUSXBJRjA3WEc0Z0lDQWdJQ0FnSUhaaGNpQmhZM1JwYjI0Z1BTQnVaWGNnWTJNdVFtVjZhV1Z5UW5rb2RHaHBjeTVmWkhWeVlYUnBiMjRzSUhJcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5amJHOXVaVVJsWTI5eVlYUnBiMjRvWVdOMGFXOXVLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjbVYyWlhKelpVVmhjMlZNYVhOMEtHRmpkR2x2YmlrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCaFkzUnBiMjQ3WEc0Z0lDQWdmVnh1ZlNrN1hHNWNiaThxS2x4dUlDb2dJU05sYmx4dUlDb2dRVzRnWVdOMGFXOXVJSFJvWVhRZ2JXOTJaWE1nZEdobElIUmhjbWRsZENCM2FYUm9JR0VnWTNWaWFXTWdRbVY2YVdWeUlHTjFjblpsSUdKNUlHRWdZMlZ5ZEdGcGJpQmthWE4wWVc1alpTNWNiaUFxSUZKbGJHRjBhWFpsSUhSdklHbDBjeUJ0YjNabGJXVnVkQzVjYmlBcUlDRWplbWdnNW95SjZMU2Q2TFdiNWJDVTVwdXk1N3EvNkwybzZMKzU1NmU3NVlxbzVveUg1YTZhNTVxRTZMZWQ1NmE3NDRDQ1hHNGdLaUJBYldWMGFHOWtJR0psZW1sbGNrSjVYRzRnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnZENBdElIUnBiV1VnYVc0Z2MyVmpiMjVrYzF4dUlDb2dRSEJoY21GdElIdFdaV015VzExOUlHTWdMU0JCY25KaGVTQnZaaUJ3YjJsdWRITmNiaUFxSUVCeVpYUjFjbTRnZTBGamRHbHZia2x1ZEdWeWRtRnNmVnh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFJQzh2SUdWNFlXMXdiR1ZjYmlBcUlIWmhjaUJpWlhwcFpYSWdQU0JiWTJNdWRqSW9NQ3dnZDJsdVpHOTNVMmw2WlM1b1pXbG5hSFFnTHlBeUtTd2dZMk11ZGpJb016QXdMQ0F0ZDJsdVpHOTNVMmw2WlM1b1pXbG5hSFFnTHlBeUtTd2dZMk11ZGpJb016QXdMQ0F4TURBcFhUdGNiaUFxSUhaaGNpQmlaWHBwWlhKR2IzSjNZWEprSUQwZ1kyTXVZbVY2YVdWeVFua29NeXdnWW1WNmFXVnlLVHRjYmlBcUwxeHVZMk11WW1WNmFXVnlRbmtnUFNCbWRXNWpkR2x2YmlBb2RDd2dZeWtnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnWTJNdVFtVjZhV1Z5UW5rb2RDd2dZeWs3WEc1OU8xeHVYRzVjYmk4cUlFRnVJR0ZqZEdsdmJpQjBhR0YwSUcxdmRtVnpJSFJvWlNCMFlYSm5aWFFnZDJsMGFDQmhJR04xWW1saklFSmxlbWxsY2lCamRYSjJaU0IwYnlCaElHUmxjM1JwYm1GMGFXOXVJSEJ2YVc1MExseHVJQ29nUUdOc1lYTnpJRUpsZW1sbGNsUnZYRzRnS2lCQVpYaDBaVzVrY3lCQ1pYcHBaWEpDZVZ4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlIUmNiaUFxSUVCd1lYSmhiU0I3Vm1Wak1sdGRmU0JqSUMwZ1FYSnlZWGtnYjJZZ2NHOXBiblJ6WEc0Z0tpQkFaWGhoYlhCc1pWeHVJQ29nZG1GeUlHSmxlbWxsY2lBOUlGdGpZeTUyTWlnd0xDQjNhVzVrYjNkVGFYcGxMbWhsYVdkb2RDQXZJRElwTENCall5NTJNaWd6TURBc0lDMTNhVzVrYjNkVGFYcGxMbWhsYVdkb2RDQXZJRElwTENCall5NTJNaWd6TURBc0lERXdNQ2xkTzF4dUlDb2dkbUZ5SUdKbGVtbGxjbFJ2SUQwZ2JtVjNJR05qTGtKbGVtbGxjbFJ2S0RJc0lHSmxlbWxsY2lrN1hHNGdLaTljYm1OakxrSmxlbWxsY2xSdklEMGdZMk11UTJ4aGMzTW9lMXh1SUNBZ0lHNWhiV1U2SUNkall5NUNaWHBwWlhKVWJ5Y3NYRzRnSUNBZ1pYaDBaVzVrY3pvZ1kyTXVRbVY2YVdWeVFua3NYRzVjYmlBZ0lDQmpkRzl5T21aMWJtTjBhVzl1SUNoMExDQmpLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM1J2UTI5dVptbG5JRDBnVzEwN1hHNWNkRngwWXlBbUppQjBhR2x6TG1sdWFYUlhhWFJvUkhWeVlYUnBiMjRvZEN3Z1l5azdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFYRzRnSUNBZ0lDb2dTVzVwZEdsaGJHbDZaWE1nZEdobElHRmpkR2x2Ymk1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnZENCMGFXMWxJR2x1SUhObFkyOXVaSE5jYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMVpsWXpKYlhYMGdZeUF0SUVGeWNtRjVJRzltSUhCdmFXNTBjMXh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMEp2YjJ4bFlXNTlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FXNXBkRmRwZEdoRWRYSmhkR2x2YmpwbWRXNWpkR2x2YmlBb2RDd2dZeWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9ZMk11UVdOMGFXOXVTVzUwWlhKMllXd3VjSEp2ZEc5MGVYQmxMbWx1YVhSWGFYUm9SSFZ5WVhScGIyNHVZMkZzYkNoMGFHbHpMQ0IwS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZkRzlEYjI1bWFXY2dQU0JqTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQmpiRzl1WlRwbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCaFkzUnBiMjRnUFNCdVpYY2dZMk11UW1WNmFXVnlWRzhvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWTJ4dmJtVkVaV052Y21GMGFXOXVLR0ZqZEdsdmJpazdYRzRnSUNBZ0lDQWdJR0ZqZEdsdmJpNXBibWwwVjJsMGFFUjFjbUYwYVc5dUtIUm9hWE11WDJSMWNtRjBhVzl1TENCMGFHbHpMbDkwYjBOdmJtWnBaeWs3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJoWTNScGIyNDdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lITjBZWEowVjJsMGFGUmhjbWRsZERwbWRXNWpkR2x2YmlBb2RHRnlaMlYwS1NCN1hHNGdJQ0FnSUNBZ0lHTmpMa0psZW1sbGNrSjVMbkJ5YjNSdmRIbHdaUzV6ZEdGeWRGZHBkR2hVWVhKblpYUXVZMkZzYkNoMGFHbHpMQ0IwWVhKblpYUXBPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2JHOWpVM1JoY25SUWIzTWdQU0IwYUdsekxsOXpkR0Z5ZEZCdmMybDBhVzl1TzF4dUlDQWdJQ0FnSUNCMllYSWdiRzlqVkc5RGIyNW1hV2NnUFNCMGFHbHpMbDkwYjBOdmJtWnBaenRjYmlBZ0lDQWdJQ0FnZG1GeUlHeHZZME52Ym1acFp5QTlJSFJvYVhNdVgyTnZibVpwWnp0Y2JseHVJQ0FnSUNBZ0lDQnNiMk5EYjI1bWFXZGJNRjBnUFNCc2IyTlViME52Ym1acFoxc3dYUzV6ZFdJb2JHOWpVM1JoY25SUWIzTXBPMXh1SUNBZ0lDQWdJQ0JzYjJORGIyNW1hV2RiTVYwZ1BTQnNiMk5VYjBOdmJtWnBaMXN4WFM1emRXSW9iRzlqVTNSaGNuUlFiM01wTzF4dUlDQWdJQ0FnSUNCc2IyTkRiMjVtYVdkYk1sMGdQU0JzYjJOVWIwTnZibVpwWjFzeVhTNXpkV0lvYkc5alUzUmhjblJRYjNNcE8xeHVJQ0FnSUgxY2JuMHBPMXh1THlvcVhHNGdLaUFoSTJWdUlFRnVJR0ZqZEdsdmJpQjBhR0YwSUcxdmRtVnpJSFJvWlNCMFlYSm5aWFFnZDJsMGFDQmhJR04xWW1saklFSmxlbWxsY2lCamRYSjJaU0IwYnlCaElHUmxjM1JwYm1GMGFXOXVJSEJ2YVc1MExseHVJQ29nSVNONmFDRG1qSW5vdEozb3RadmxzSlRtbTdMbnVyL292YWpvdjdubnA3dmxpcWpsaUxEbm02N21vSWZrdlkzbnZhN2pnSUpjYmlBcUlFQnRaWFJvYjJRZ1ltVjZhV1Z5Vkc5Y2JpQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQjBYRzRnS2lCQWNHRnlZVzBnZTFabFl6SmJYWDBnWXlBdElFRnljbUY1SUc5bUlIQnZhVzUwYzF4dUlDb2dRSEpsZEhWeWJpQjdRV04wYVc5dVNXNTBaWEoyWVd4OVhHNGdLaUJBWlhoaGJYQnNaVnh1SUNvZ0x5OGdaWGhoYlhCc1pWeHVJQ29nZG1GeUlHSmxlbWxsY2lBOUlGdGpZeTUyTWlnd0xDQjNhVzVrYjNkVGFYcGxMbWhsYVdkb2RDQXZJRElwTENCall5NTJNaWd6TURBc0lDMTNhVzVrYjNkVGFYcGxMbWhsYVdkb2RDQXZJRElwTENCall5NTJNaWd6TURBc0lERXdNQ2xkTzF4dUlDb2dkbUZ5SUdKbGVtbGxjbFJ2SUQwZ1kyTXVZbVY2YVdWeVZHOG9NaXdnWW1WNmFXVnlLVHRjYmlBcUwxeHVZMk11WW1WNmFXVnlWRzhnUFNCbWRXNWpkR2x2YmlBb2RDd2dZeWtnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnWTJNdVFtVjZhV1Z5Vkc4b2RDd2dZeWs3WEc1OU8xeHVYRzVjYmk4cUlGTmpZV3hsY3lCaElFNXZaR1VnYjJKcVpXTjBJSFJ2SUdFZ2VtOXZiU0JtWVdOMGIzSWdZbmtnYlc5a2FXWjVhVzVuSUdsMEozTWdjMk5oYkdVZ2NISnZjR1Z5ZEhrdVhHNGdLaUJBZDJGeWJtbHVaeUJVYUdseklHRmpkR2x2YmlCa2IyVnpiaWQwSUhOMWNIQnZjblFnWENKeVpYWmxjbk5sWENKY2JpQXFJRUJqYkdGemN5QlRZMkZzWlZSdlhHNGdLaUJBWlhoMFpXNWtjeUJCWTNScGIyNUpiblJsY25aaGJGeHVJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJR1IxY21GMGFXOXVYRzRnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnYzNnZ0lITmpZV3hsSUhCaGNtRnRaWFJsY2lCcGJpQllYRzRnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnVzNONVhTQnpZMkZzWlNCd1lYSmhiV1YwWlhJZ2FXNGdXU3dnYVdZZ1RuVnNiQ0JsY1hWaGJDQjBieUJ6ZUZ4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxSUM4dklFbDBJSE5qWVd4bGN5QjBieUF3TGpVZ2FXNGdZbTkwYUNCWUlHRnVaQ0JaTGx4dUlDb2dkbUZ5SUdGamRHbHZibFJ2SUQwZ2JtVjNJR05qTGxOallXeGxWRzhvTWl3Z01DNDFLVHRjYmlBcVhHNGdLaUF2THlCSmRDQnpZMkZzWlhNZ2RHOGdNQzQxSUdsdUlIZ2dZVzVrSURJZ2FXNGdXVnh1SUNvZ2RtRnlJR0ZqZEdsdmJsUnZJRDBnYm1WM0lHTmpMbE5qWVd4bFZHOG9NaXdnTUM0MUxDQXlLVHRjYmlBcUwxeHVZMk11VTJOaGJHVlVieUE5SUdOakxrTnNZWE56S0h0Y2JpQWdJQ0J1WVcxbE9pQW5ZMk11VTJOaGJHVlVieWNzWEc0Z0lDQWdaWGgwWlc1a2N6b2dZMk11UVdOMGFXOXVTVzUwWlhKMllXd3NYRzVjYmlBZ0lDQmpkRzl5T21aMWJtTjBhVzl1SUNoa2RYSmhkR2x2Yml3Z2MzZ3NJSE41S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNOallXeGxXQ0E5SURFN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNOallXeGxXU0E5SURFN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNOMFlYSjBVMk5oYkdWWUlEMGdNVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjM1JoY25SVFkyRnNaVmtnUFNBeE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5bGJtUlRZMkZzWlZnZ1BTQXdPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWxibVJUWTJGc1pWa2dQU0F3TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlrWld4MFlWZ2dQU0F3TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlrWld4MFlWa2dQU0F3TzF4dUlDQWdJQ0FnSUNCemVDQWhQVDBnZFc1a1pXWnBibVZrSUNZbUlHTmpMbE5qWVd4bFZHOHVjSEp2ZEc5MGVYQmxMbWx1YVhSWGFYUm9SSFZ5WVhScGIyNHVZMkZzYkNoMGFHbHpMQ0JrZFhKaGRHbHZiaXdnYzNnc0lITjVLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeXBjYmlBZ0lDQWdLaUJKYm1sMGFXRnNhWHBsY3lCMGFHVWdZV04wYVc5dUxseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCa2RYSmhkR2x2Ymx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0J6ZUZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JiYzNrOVhWeHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UwSnZiMnhsWVc1OVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYVc1cGRGZHBkR2hFZFhKaGRHbHZianBtZFc1amRHbHZiaUFvWkhWeVlYUnBiMjRzSUhONExDQnplU2tnZXlBdkwyWjFibU4wYVc5dUlHOTJaWEpzYjJGa0lHaGxjbVZjYmlBZ0lDQWdJQ0FnYVdZZ0tHTmpMa0ZqZEdsdmJrbHVkR1Z5ZG1Gc0xuQnliM1J2ZEhsd1pTNXBibWwwVjJsMGFFUjFjbUYwYVc5dUxtTmhiR3dvZEdocGN5d2daSFZ5WVhScGIyNHBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5bGJtUlRZMkZzWlZnZ1BTQnplRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJWdVpGTmpZV3hsV1NBOUlDaHplU0FoUFNCdWRXeHNLU0EvSUhONUlEb2djM2c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHTnNiMjVsT21aMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdGamRHbHZiaUE5SUc1bGR5QmpZeTVUWTJGc1pWUnZLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMk5zYjI1bFJHVmpiM0poZEdsdmJpaGhZM1JwYjI0cE8xeHVJQ0FnSUNBZ0lDQmhZM1JwYjI0dWFXNXBkRmRwZEdoRWRYSmhkR2x2YmloMGFHbHpMbDlrZFhKaGRHbHZiaXdnZEdocGN5NWZaVzVrVTJOaGJHVllMQ0IwYUdsekxsOWxibVJUWTJGc1pWa3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZV04wYVc5dU8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCemRHRnlkRmRwZEdoVVlYSm5aWFE2Wm5WdVkzUnBiMjRnS0hSaGNtZGxkQ2tnZTF4dUlDQWdJQ0FnSUNCall5NUJZM1JwYjI1SmJuUmxjblpoYkM1d2NtOTBiM1I1Y0dVdWMzUmhjblJYYVhSb1ZHRnlaMlYwTG1OaGJHd29kR2hwY3l3Z2RHRnlaMlYwS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYzNSaGNuUlRZMkZzWlZnZ1BTQjBZWEpuWlhRdWMyTmhiR1ZZTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl6ZEdGeWRGTmpZV3hsV1NBOUlIUmhjbWRsZEM1elkyRnNaVms3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMlJsYkhSaFdDQTlJSFJvYVhNdVgyVnVaRk5qWVd4bFdDQXRJSFJvYVhNdVgzTjBZWEowVTJOaGJHVllPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWtaV3gwWVZrZ1BTQjBhR2x6TGw5bGJtUlRZMkZzWlZrZ0xTQjBhR2x6TGw5emRHRnlkRk5qWVd4bFdUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2RYQmtZWFJsT21aMWJtTjBhVzl1SUNoa2RDa2dlMXh1SUNBZ0lDQWdJQ0JrZENBOUlIUm9hWE11WDJOdmJYQjFkR1ZGWVhObFZHbHRaU2hrZENrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuUmhjbWRsZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTBZWEpuWlhRdWMyTmhiR1ZZSUQwZ2RHaHBjeTVmYzNSaGNuUlRZMkZzWlZnZ0t5QjBhR2x6TGw5a1pXeDBZVmdnS2lCa2REdGNibHgwSUNBZ0lDQWdJQ0IwYUdsekxuUmhjbWRsZEM1elkyRnNaVmtnUFNCMGFHbHpMbDl6ZEdGeWRGTmpZV3hsV1NBcklIUm9hWE11WDJSbGJIUmhXU0FxSUdSME8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVmU2s3WEc0dktpcGNiaUFxSUNFalpXNGdVMk5oYkdWeklHRWdUbTlrWlNCdlltcGxZM1FnZEc4Z1lTQjZiMjl0SUdaaFkzUnZjaUJpZVNCdGIyUnBabmxwYm1jZ2FYUW5jeUJ6WTJGc1pTQndjbTl3WlhKMGVTNWNiaUFxSUNFamVtZ2c1YkNHNklxQzU0SzU1YVNuNWJDUDU3eXA1cFMrNVlpdzVveUg1YTZhNTVxRTVZQ041cFd3NDRDQ1hHNGdLaUJBYldWMGFHOWtJSE5qWVd4bFZHOWNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JrZFhKaGRHbHZibHh1SUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUhONElDQnpZMkZzWlNCd1lYSmhiV1YwWlhJZ2FXNGdXRnh1SUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUZ0emVWMGdjMk5oYkdVZ2NHRnlZVzFsZEdWeUlHbHVJRmtzSUdsbUlFNTFiR3dnWlhGMVlXd2dkRzhnYzNoY2JpQXFJRUJ5WlhSMWNtNGdlMEZqZEdsdmJrbHVkR1Z5ZG1Gc2ZWeHVJQ29nUUdWNFlXMXdiR1ZjYmlBcUlDOHZJR1Y0WVcxd2JHVmNiaUFxSUM4dklFbDBJSE5qWVd4bGN5QjBieUF3TGpVZ2FXNGdZbTkwYUNCWUlHRnVaQ0JaTGx4dUlDb2dkbUZ5SUdGamRHbHZibFJ2SUQwZ1kyTXVjMk5oYkdWVWJ5Z3lMQ0F3TGpVcE8xeHVJQ3BjYmlBcUlDOHZJRWwwSUhOallXeGxjeUIwYnlBd0xqVWdhVzRnZUNCaGJtUWdNaUJwYmlCWlhHNGdLaUIyWVhJZ1lXTjBhVzl1Vkc4Z1BTQmpZeTV6WTJGc1pWUnZLRElzSURBdU5Td2dNaWs3WEc0Z0tpOWNibU5qTG5OallXeGxWRzhnUFNCbWRXNWpkR2x2YmlBb1pIVnlZWFJwYjI0c0lITjRMQ0J6ZVNrZ2V5QXZMMloxYm1OMGFXOXVJRzkyWlhKc2IyRmtYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QmpZeTVUWTJGc1pWUnZLR1IxY21GMGFXOXVMQ0J6ZUN3Z2Mza3BPMXh1ZlR0Y2JseHVYRzR2S2lCVFkyRnNaWE1nWVNCT2IyUmxJRzlpYW1WamRDQmhJSHB2YjIwZ1ptRmpkRzl5SUdKNUlHMXZaR2xtZVdsdVp5QnBkQ2R6SUhOallXeGxJSEJ5YjNCbGNuUjVMbHh1SUNvZ1VtVnNZWFJwZG1VZ2RHOGdhWFJ6SUdOb1lXNW5aWE11WEc0Z0tpQkFZMnhoYzNNZ1UyTmhiR1ZDZVZ4dUlDb2dRR1Y0ZEdWdVpITWdVMk5oYkdWVWIxeHVJQ292WEc1all5NVRZMkZzWlVKNUlEMGdZMk11UTJ4aGMzTW9lMXh1SUNBZ0lHNWhiV1U2SUNkall5NVRZMkZzWlVKNUp5eGNiaUFnSUNCbGVIUmxibVJ6T2lCall5NVRZMkZzWlZSdkxGeHVYRzRnSUNBZ2MzUmhjblJYYVhSb1ZHRnlaMlYwT21aMWJtTjBhVzl1SUNoMFlYSm5aWFFwSUh0Y2JpQWdJQ0FnSUNBZ1kyTXVVMk5oYkdWVWJ5NXdjbTkwYjNSNWNHVXVjM1JoY25SWGFYUm9WR0Z5WjJWMExtTmhiR3dvZEdocGN5d2dkR0Z5WjJWMEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlpHVnNkR0ZZSUQwZ2RHaHBjeTVmYzNSaGNuUlRZMkZzWlZnZ0tpQjBhR2x6TGw5bGJtUlRZMkZzWlZnZ0xTQjBhR2x6TGw5emRHRnlkRk5qWVd4bFdEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlpHVnNkR0ZaSUQwZ2RHaHBjeTVmYzNSaGNuUlRZMkZzWlZrZ0tpQjBhR2x6TGw5bGJtUlRZMkZzWlZrZ0xTQjBhR2x6TGw5emRHRnlkRk5qWVd4bFdUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2NtVjJaWEp6WlRwbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCaFkzUnBiMjRnUFNCdVpYY2dZMk11VTJOaGJHVkNlU2gwYUdsekxsOWtkWEpoZEdsdmJpd2dNU0F2SUhSb2FYTXVYMlZ1WkZOallXeGxXQ3dnTVNBdklIUm9hWE11WDJWdVpGTmpZV3hsV1NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJOc2IyNWxSR1ZqYjNKaGRHbHZiaWhoWTNScGIyNHBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXlaWFpsY25ObFJXRnpaVXhwYzNRb1lXTjBhVzl1S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdGamRHbHZianRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdZMnh2Ym1VNlpuVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1lXTjBhVzl1SUQwZ2JtVjNJR05qTGxOallXeGxRbmtvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWTJ4dmJtVkVaV052Y21GMGFXOXVLR0ZqZEdsdmJpazdYRzRnSUNBZ0lDQWdJR0ZqZEdsdmJpNXBibWwwVjJsMGFFUjFjbUYwYVc5dUtIUm9hWE11WDJSMWNtRjBhVzl1TENCMGFHbHpMbDlsYm1SVFkyRnNaVmdzSUhSb2FYTXVYMlZ1WkZOallXeGxXU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJoWTNScGIyNDdYRzRnSUNBZ2ZWeHVmU2s3WEc0dktpcGNiaUFxSUNFalpXNWNiaUFxSUZOallXeGxjeUJoSUU1dlpHVWdiMkpxWldOMElHRWdlbTl2YlNCbVlXTjBiM0lnWW5rZ2JXOWthV1o1YVc1bklHbDBKM01nYzJOaGJHVWdjSEp2Y0dWeWRIa3VYRzRnS2lCU1pXeGhkR2wyWlNCMGJ5QnBkSE1nWTJoaGJtZGxjeTVjYmlBcUlDRWplbWdnNW95SjVveUg1YTZhNTVxRTVZQ041cFd3NTd5cDVwUys2SXFDNTRLNTVhU241YkNQNDRDQ1hHNGdLaUJBYldWMGFHOWtJSE5qWVd4bFFubGNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JrZFhKaGRHbHZiaUJrZFhKaGRHbHZiaUJwYmlCelpXTnZibVJ6WEc0Z0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ2MzZ2djM2dnSUhOallXeGxJSEJoY21GdFpYUmxjaUJwYmlCWVhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNueE9kV3hzZlNCYmMzazlYU0J6ZVNCelkyRnNaU0J3WVhKaGJXVjBaWElnYVc0Z1dTd2dhV1lnVG5Wc2JDQmxjWFZoYkNCMGJ5QnplRnh1SUNvZ1FISmxkSFZ5YmlCN1FXTjBhVzl1U1c1MFpYSjJZV3g5WEc0Z0tpQkFaWGhoYlhCc1pWeHVJQ29nTHk4Z1pYaGhiWEJzWlNCM2FYUm9iM1YwSUhONUxDQnBkQ0J6WTJGc1pYTWdZbmtnTWlCaWIzUm9JR2x1SUZnZ1lXNWtJRmxjYmlBcUlIWmhjaUJoWTNScGIyNUNlU0E5SUdOakxuTmpZV3hsUW5rb01pd2dNaWs3WEc0Z0tseHVJQ29nTHk5bGVHRnRjR3hsSUhkcGRHZ2djM2tzSUdsMElITmpZV3hsY3lCaWVTQXdMakkxSUdsdUlGZ2dZVzVrSURRdU5TQnBiaUJaWEc0Z0tpQjJZWElnWVdOMGFXOXVRbmt5SUQwZ1kyTXVjMk5oYkdWQ2VTZ3lMQ0F3TGpJMUxDQTBMalVwTzF4dUlDb3ZYRzVqWXk1elkyRnNaVUo1SUQwZ1puVnVZM1JwYjI0Z0tHUjFjbUYwYVc5dUxDQnplQ3dnYzNrcElIdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lHTmpMbE5qWVd4bFFua29aSFZ5WVhScGIyNHNJSE40TENCemVTazdYRzU5TzF4dVhHNHZLaUJDYkdsdWEzTWdZU0JPYjJSbElHOWlhbVZqZENCaWVTQnRiMlJwWm5scGJtY2dhWFFuY3lCMmFYTnBZbXhsSUhCeWIzQmxjblI1WEc0Z0tpQkFZMnhoYzNNZ1FteHBibXRjYmlBcUlFQmxlSFJsYm1SeklFRmpkR2x2YmtsdWRHVnlkbUZzWEc0Z0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ1pIVnlZWFJwYjI0Z0lHUjFjbUYwYVc5dUlHbHVJSE5sWTI5dVpITmNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JpYkdsdWEzTWdJR0pzYVc1cmN5QnBiaUIwYVcxbGMxeHVJQ29nUUdWNFlXMXdiR1ZjYmlBcUlIWmhjaUJoWTNScGIyNGdQU0J1WlhjZ1kyTXVRbXhwYm1zb01pd2dNVEFwTzF4dUlDb3ZYRzVqWXk1Q2JHbHVheUE5SUdOakxrTnNZWE56S0h0Y2JpQWdJQ0J1WVcxbE9pQW5ZMk11UW14cGJtc25MRnh1SUNBZ0lHVjRkR1Z1WkhNNklHTmpMa0ZqZEdsdmJrbHVkR1Z5ZG1Gc0xGeHVYRzRnSUNBZ1kzUnZjanBtZFc1amRHbHZiaUFvWkhWeVlYUnBiMjRzSUdKc2FXNXJjeWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDkwYVcxbGN5QTlJREE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjl5YVdkcGJtRnNVM1JoZEdVZ1BTQm1ZV3h6WlR0Y2JseDBYSFJpYkdsdWEzTWdJVDA5SUhWdVpHVm1hVzVsWkNBbUppQjBhR2x6TG1sdWFYUlhhWFJvUkhWeVlYUnBiMjRvWkhWeVlYUnBiMjRzSUdKc2FXNXJjeWs3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxWEc0Z0lDQWdJQ29nU1c1cGRHbGhiR2w2WlhNZ2RHaGxJR0ZqZEdsdmJpNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ1pIVnlZWFJwYjI0Z1pIVnlZWFJwYjI0Z2FXNGdjMlZqYjI1a2MxeHVJQ0FnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCaWJHbHVhM01nWW14cGJtdHpJR2x1SUhScGJXVnpYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdRbTl2YkdWaGJuMWNiaUFnSUNBZ0tpOWNiaUFnSUNCcGJtbDBWMmwwYUVSMWNtRjBhVzl1T21aMWJtTjBhVzl1SUNoa2RYSmhkR2x2Yml3Z1lteHBibXR6S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hqWXk1QlkzUnBiMjVKYm5SbGNuWmhiQzV3Y205MGIzUjVjR1V1YVc1cGRGZHBkR2hFZFhKaGRHbHZiaTVqWVd4c0tIUm9hWE1zSUdSMWNtRjBhVzl1S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZkR2x0WlhNZ1BTQmliR2x1YTNNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJR05zYjI1bE9tWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHRmpkR2x2YmlBOUlHNWxkeUJqWXk1Q2JHbHVheWdwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlqYkc5dVpVUmxZMjl5WVhScGIyNG9ZV04wYVc5dUtUdGNiaUFnSUNBZ0lDQWdZV04wYVc5dUxtbHVhWFJYYVhSb1JIVnlZWFJwYjI0b2RHaHBjeTVmWkhWeVlYUnBiMjRzSUhSb2FYTXVYM1JwYldWektUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHRmpkR2x2Ymp0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnZFhCa1lYUmxPbVoxYm1OMGFXOXVJQ2hrZENrZ2UxeHVJQ0FnSUNBZ0lDQmtkQ0E5SUhSb2FYTXVYMk52YlhCMWRHVkZZWE5sVkdsdFpTaGtkQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5SaGNtZGxkQ0FtSmlBaGRHaHBjeTVwYzBSdmJtVW9LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhOc2FXTmxJRDBnTVM0d0lDOGdkR2hwY3k1ZmRHbHRaWE03WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnYlNBOUlHUjBJQ1VnYzJ4cFkyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblJoY21kbGRDNXZjR0ZqYVhSNUlEMGdLRzBnUGlBb2MyeHBZMlVnTHlBeUtTa2dQeUF5TlRVZ09pQXdPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYmx4dUlDQWdJSE4wWVhKMFYybDBhRlJoY21kbGREcG1kVzVqZEdsdmJpQW9kR0Z5WjJWMEtTQjdYRzRnSUNBZ0lDQWdJR05qTGtGamRHbHZia2x1ZEdWeWRtRnNMbkJ5YjNSdmRIbHdaUzV6ZEdGeWRGZHBkR2hVWVhKblpYUXVZMkZzYkNoMGFHbHpMQ0IwWVhKblpYUXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXZjbWxuYVc1aGJGTjBZWFJsSUQwZ2RHRnlaMlYwTG05d1lXTnBkSGs3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJSE4wYjNBNlpuVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuUmhjbWRsZEM1dmNHRmphWFI1SUQwZ2RHaHBjeTVmYjNKcFoybHVZV3hUZEdGMFpUdGNiaUFnSUNBZ0lDQWdZMk11UVdOMGFXOXVTVzUwWlhKMllXd3VjSEp2ZEc5MGVYQmxMbk4wYjNBdVkyRnNiQ2gwYUdsektUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2NtVjJaWEp6WlRwbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCaFkzUnBiMjRnUFNCdVpYY2dZMk11UW14cGJtc29kR2hwY3k1ZlpIVnlZWFJwYjI0c0lIUm9hWE11WDNScGJXVnpLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZMnh2Ym1WRVpXTnZjbUYwYVc5dUtHRmpkR2x2YmlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNKbGRtVnljMlZGWVhObFRHbHpkQ2hoWTNScGIyNHBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZV04wYVc5dU8xeHVJQ0FnSUgxY2JuMHBPMXh1THlvcVhHNGdLaUFoSTJWdUlFSnNhVzVyY3lCaElFNXZaR1VnYjJKcVpXTjBJR0o1SUcxdlpHbG1lV2x1WnlCcGRDZHpJSFpwYzJsaWJHVWdjSEp2Y0dWeWRIa3VYRzRnS2lBaEkzcG9JT21YcXVlRGdlKzhpT1dmdXVTNmp1bUFqK2FZanVXNnB1KzhpZU9BZ2x4dUlDb2dRRzFsZEdodlpDQmliR2x1YTF4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHUjFjbUYwYVc5dUlDQmtkWEpoZEdsdmJpQnBiaUJ6WldOdmJtUnpYRzRnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnWW14cGJtdHpJR0pzYVc1cmN5QnBiaUIwYVcxbGMxeHVJQ29nUUhKbGRIVnliaUI3UVdOMGFXOXVTVzUwWlhKMllXeDlYRzRnS2lCQVpYaGhiWEJzWlZ4dUlDb2dMeThnWlhoaGJYQnNaVnh1SUNvZ2RtRnlJR0ZqZEdsdmJpQTlJR05qTG1Kc2FXNXJLRElzSURFd0tUdGNiaUFxTDF4dVkyTXVZbXhwYm1zZ1BTQm1kVzVqZEdsdmJpQW9aSFZ5WVhScGIyNHNJR0pzYVc1cmN5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dZMk11UW14cGJtc29aSFZ5WVhScGIyNHNJR0pzYVc1cmN5azdYRzU5TzF4dVhHNHZLaUJHWVdSbGN5QmhiaUJ2WW1wbFkzUWdkR2hoZENCcGJYQnNaVzFsYm5SeklIUm9aU0JqWXk1U1IwSkJVSEp2ZEc5amIyd2djSEp2ZEc5amIyd3VJRWwwSUcxdlpHbG1hV1Z6SUhSb1pTQnZjR0ZqYVhSNUlHWnliMjBnZEdobElHTjFjbkpsYm5RZ2RtRnNkV1VnZEc4Z1lTQmpkWE4wYjIwZ2IyNWxMbHh1SUNvZ1FIZGhjbTVwYm1jZ1ZHaHBjeUJoWTNScGIyNGdaRzlsYzI0bmRDQnpkWEJ3YjNKMElGd2ljbVYyWlhKelpWd2lYRzRnS2lCQVkyeGhjM01nUm1Ga1pWUnZYRzRnS2lCQVpYaDBaVzVrY3lCQlkzUnBiMjVKYm5SbGNuWmhiRnh1SUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUdSMWNtRjBhVzl1WEc0Z0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ2IzQmhZMmwwZVNBd0xUSTFOU3dnTUNCcGN5QjBjbUZ1YzNCaGNtVnVkRnh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFJSFpoY2lCaFkzUnBiMjRnUFNCdVpYY2dZMk11Um1Ga1pWUnZLREV1TUN3Z01DazdYRzRnS2k5Y2JtTmpMa1poWkdWVWJ5QTlJR05qTGtOc1lYTnpLSHRjYmlBZ0lDQnVZVzFsT2lBblkyTXVSbUZrWlZSdkp5eGNiaUFnSUNCbGVIUmxibVJ6T2lCall5NUJZM1JwYjI1SmJuUmxjblpoYkN4Y2JseHVJQ0FnSUdOMGIzSTZablZ1WTNScGIyNGdLR1IxY21GMGFXOXVMQ0J2Y0dGamFYUjVLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM1J2VDNCaFkybDBlU0E5SURBN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJaeWIyMVBjR0ZqYVhSNUlEMGdNRHRjYmlBZ0lDQWdJQ0FnYjNCaFkybDBlU0FoUFQwZ2RXNWtaV1pwYm1Wa0lDWW1JR05qTGtaaFpHVlVieTV3Y205MGIzUjVjR1V1YVc1cGRGZHBkR2hFZFhKaGRHbHZiaTVqWVd4c0tIUm9hWE1zSUdSMWNtRjBhVzl1TENCdmNHRmphWFI1S1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlwY2JpQWdJQ0FnS2lCSmJtbDBhV0ZzYVhwbGN5QjBhR1VnWVdOMGFXOXVMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQmtkWEpoZEdsdmJpQWdaSFZ5WVhScGIyNGdhVzRnYzJWamIyNWtjMXh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQnZjR0ZqYVhSNVhHNGdJQ0FnSUNvZ1FISmxkSFZ5YmlCN1FtOXZiR1ZoYm4xY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JwYm1sMFYybDBhRVIxY21GMGFXOXVPbVoxYm1OMGFXOXVJQ2hrZFhKaGRHbHZiaXdnYjNCaFkybDBlU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9ZMk11UVdOMGFXOXVTVzUwWlhKMllXd3VjSEp2ZEc5MGVYQmxMbWx1YVhSWGFYUm9SSFZ5WVhScGIyNHVZMkZzYkNoMGFHbHpMQ0JrZFhKaGRHbHZiaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzUnZUM0JoWTJsMGVTQTlJRzl3WVdOcGRIazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUdOc2IyNWxPbVoxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR0ZqZEdsdmJpQTlJRzVsZHlCall5NUdZV1JsVkc4b0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlkyeHZibVZFWldOdmNtRjBhVzl1S0dGamRHbHZiaWs3WEc0Z0lDQWdJQ0FnSUdGamRHbHZiaTVwYm1sMFYybDBhRVIxY21GMGFXOXVLSFJvYVhNdVgyUjFjbUYwYVc5dUxDQjBhR2x6TGw5MGIwOXdZV05wZEhrcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1lXTjBhVzl1TzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0IxY0dSaGRHVTZablZ1WTNScGIyNGdLSFJwYldVcElIdGNiaUFnSUNBZ0lDQWdkR2x0WlNBOUlIUm9hWE11WDJOdmJYQjFkR1ZGWVhObFZHbHRaU2gwYVcxbEtUdGNiaUFnSUNBZ0lDQWdkbUZ5SUdaeWIyMVBjR0ZqYVhSNUlEMGdkR2hwY3k1ZlpuSnZiVTl3WVdOcGRIa2dJVDA5SUhWdVpHVm1hVzVsWkNBL0lIUm9hWE11WDJaeWIyMVBjR0ZqYVhSNUlEb2dNalUxTzF4dUlDQWdJQ0FnSUNCMGFHbHpMblJoY21kbGRDNXZjR0ZqYVhSNUlEMGdabkp2YlU5d1lXTnBkSGtnS3lBb2RHaHBjeTVmZEc5UGNHRmphWFI1SUMwZ1puSnZiVTl3WVdOcGRIa3BJQ29nZEdsdFpUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2MzUmhjblJYYVhSb1ZHRnlaMlYwT21aMWJtTjBhVzl1SUNoMFlYSm5aWFFwSUh0Y2JpQWdJQ0FnSUNBZ1kyTXVRV04wYVc5dVNXNTBaWEoyWVd3dWNISnZkRzkwZVhCbExuTjBZWEowVjJsMGFGUmhjbWRsZEM1allXeHNLSFJvYVhNc0lIUmhjbWRsZENrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJaeWIyMVBjR0ZqYVhSNUlEMGdkR0Z5WjJWMExtOXdZV05wZEhrN1hHNGdJQ0FnZlZ4dWZTazdYRzVjYmk4cUtseHVJQ29nSVNObGJseHVJQ29nUm1Ga1pYTWdZVzRnYjJKcVpXTjBJSFJvWVhRZ2FXMXdiR1Z0Wlc1MGN5QjBhR1VnWTJNdVVrZENRVkJ5YjNSdlkyOXNJSEJ5YjNSdlkyOXNMbHh1SUNvZ1NYUWdiVzlrYVdacFpYTWdkR2hsSUc5d1lXTnBkSGtnWm5KdmJTQjBhR1VnWTNWeWNtVnVkQ0IyWVd4MVpTQjBieUJoSUdOMWMzUnZiU0J2Ym1VdVhHNGdLaUFoSTNwb0lPUy9ydWFVdWVtQWorYVlqdVc2cHVXSXNPYU1oK1d1bXVXQXZPT0FnbHh1SUNvZ1FHMWxkR2h2WkNCbVlXUmxWRzljYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCa2RYSmhkR2x2Ymx4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHOXdZV05wZEhrZ01DMHlOVFVzSURBZ2FYTWdkSEpoYm5Od1lYSmxiblJjYmlBcUlFQnlaWFIxY200Z2UwRmpkR2x2YmtsdWRHVnlkbUZzZlZ4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxSUM4dklHVjRZVzF3YkdWY2JpQXFJSFpoY2lCaFkzUnBiMjRnUFNCall5NW1ZV1JsVkc4b01TNHdMQ0F3S1R0Y2JpQXFMMXh1WTJNdVptRmtaVlJ2SUQwZ1puVnVZM1JwYjI0Z0tHUjFjbUYwYVc5dUxDQnZjR0ZqYVhSNUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QmpZeTVHWVdSbFZHOG9aSFZ5WVhScGIyNHNJRzl3WVdOcGRIa3BPMXh1ZlR0Y2JseHVMeW9nUm1Ga1pYTWdTVzRnWVc0Z2IySnFaV04wSUhSb1lYUWdhVzF3YkdWdFpXNTBjeUIwYUdVZ1kyTXVVa2RDUVZCeWIzUnZZMjlzSUhCeWIzUnZZMjlzTGlCSmRDQnRiMlJwWm1sbGN5QjBhR1VnYjNCaFkybDBlU0JtY205dElEQWdkRzhnTWpVMUxqeGljaTgrWEc0Z0tpQlVhR1VnWENKeVpYWmxjbk5sWENJZ2IyWWdkR2hwY3lCaFkzUnBiMjRnYVhNZ1JtRmtaVTkxZEZ4dUlDb2dRR05zWVhOeklFWmhaR1ZKYmx4dUlDb2dRR1Y0ZEdWdVpITWdSbUZrWlZSdlhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdaSFZ5WVhScGIyNGdaSFZ5WVhScGIyNGdhVzRnYzJWamIyNWtjMXh1SUNvdlhHNWpZeTVHWVdSbFNXNGdQU0JqWXk1RGJHRnpjeWg3WEc0Z0lDQWdibUZ0WlRvZ0oyTmpMa1poWkdWSmJpY3NYRzRnSUNBZ1pYaDBaVzVrY3pvZ1kyTXVSbUZrWlZSdkxGeHVYRzRnSUNBZ1kzUnZjanBtZFc1amRHbHZiaUFvWkhWeVlYUnBiMjRwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1IxY21GMGFXOXVJRDA5SUc1MWJHd3BYRzRnSUNBZ0lDQWdJQ0FnSUNCa2RYSmhkR2x2YmlBOUlEQTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzSmxkbVZ5YzJWQlkzUnBiMjRnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtbHVhWFJYYVhSb1JIVnlZWFJwYjI0b1pIVnlZWFJwYjI0c0lESTFOU2s3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJSEpsZG1WeWMyVTZablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdZV04wYVc5dUlEMGdibVYzSUdOakxrWmhaR1ZQZFhRb0tUdGNiaUFnSUNBZ0lDQWdZV04wYVc5dUxtbHVhWFJYYVhSb1JIVnlZWFJwYjI0b2RHaHBjeTVmWkhWeVlYUnBiMjRzSURBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5amJHOXVaVVJsWTI5eVlYUnBiMjRvWVdOMGFXOXVLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjbVYyWlhKelpVVmhjMlZNYVhOMEtHRmpkR2x2YmlrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCaFkzUnBiMjQ3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJR05zYjI1bE9tWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHRmpkR2x2YmlBOUlHNWxkeUJqWXk1R1lXUmxTVzRvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWTJ4dmJtVkVaV052Y21GMGFXOXVLR0ZqZEdsdmJpazdYRzRnSUNBZ0lDQWdJR0ZqZEdsdmJpNXBibWwwVjJsMGFFUjFjbUYwYVc5dUtIUm9hWE11WDJSMWNtRjBhVzl1TENCMGFHbHpMbDkwYjA5d1lXTnBkSGtwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWVdOMGFXOXVPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQnpkR0Z5ZEZkcGRHaFVZWEpuWlhRNlpuVnVZM1JwYjI0Z0tIUmhjbWRsZENrZ2UxeHVJQ0FnSUNBZ0lDQnBaaWgwYUdsekxsOXlaWFpsY25ObFFXTjBhVzl1S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmRHOVBjR0ZqYVhSNUlEMGdkR2hwY3k1ZmNtVjJaWEp6WlVGamRHbHZiaTVmWm5KdmJVOXdZV05wZEhrN1hHNGdJQ0FnSUNBZ0lHTmpMa1poWkdWVWJ5NXdjbTkwYjNSNWNHVXVjM1JoY25SWGFYUm9WR0Z5WjJWMExtTmhiR3dvZEdocGN5d2dkR0Z5WjJWMEtUdGNiaUFnSUNCOVhHNTlLVHRjYmx4dUx5b3FYRzRnS2lBaEkyVnVJRVpoWkdWeklFbHVJR0Z1SUc5aWFtVmpkQ0IwYUdGMElHbHRjR3hsYldWdWRITWdkR2hsSUdOakxsSkhRa0ZRY205MGIyTnZiQ0J3Y205MGIyTnZiQzRnU1hRZ2JXOWthV1pwWlhNZ2RHaGxJRzl3WVdOcGRIa2dabkp2YlNBd0lIUnZJREkxTlM1Y2JpQXFJQ0VqZW1nZzVyaVE1cGkrNXBXSTVwNmM0NENDWEc0Z0tpQkFiV1YwYUc5a0lHWmhaR1ZKYmx4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHUjFjbUYwYVc5dUlHUjFjbUYwYVc5dUlHbHVJSE5sWTI5dVpITmNiaUFxSUVCeVpYUjFjbTRnZTBGamRHbHZia2x1ZEdWeWRtRnNmVnh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFJQzh2WlhoaGJYQnNaVnh1SUNvZ2RtRnlJR0ZqZEdsdmJpQTlJR05qTG1aaFpHVkpiaWd4TGpBcE8xeHVJQ292WEc1all5NW1ZV1JsU1c0Z1BTQm1kVzVqZEdsdmJpQW9aSFZ5WVhScGIyNHBJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJR05qTGtaaFpHVkpiaWhrZFhKaGRHbHZiaWs3WEc1OU8xeHVYRzVjYmk4cUlFWmhaR1Z6SUU5MWRDQmhiaUJ2WW1wbFkzUWdkR2hoZENCcGJYQnNaVzFsYm5SeklIUm9aU0JqWXk1U1IwSkJVSEp2ZEc5amIyd2djSEp2ZEc5amIyd3VJRWwwSUcxdlpHbG1hV1Z6SUhSb1pTQnZjR0ZqYVhSNUlHWnliMjBnTWpVMUlIUnZJREF1WEc0Z0tpQlVhR1VnWENKeVpYWmxjbk5sWENJZ2IyWWdkR2hwY3lCaFkzUnBiMjRnYVhNZ1JtRmtaVWx1WEc0Z0tpQkFZMnhoYzNNZ1JtRmtaVTkxZEZ4dUlDb2dRR1Y0ZEdWdVpITWdSbUZrWlZSdlhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdaSFZ5WVhScGIyNGdaSFZ5WVhScGIyNGdhVzRnYzJWamIyNWtjMXh1SUNvdlhHNWpZeTVHWVdSbFQzVjBJRDBnWTJNdVEyeGhjM01vZTF4dUlDQWdJRzVoYldVNklDZGpZeTVHWVdSbFQzVjBKeXhjYmlBZ0lDQmxlSFJsYm1Sek9pQmpZeTVHWVdSbFZHOHNYRzVjYmlBZ0lDQmpkRzl5T21aMWJtTjBhVzl1SUNoa2RYSmhkR2x2YmlrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvWkhWeVlYUnBiMjRnUFQwZ2JuVnNiQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lHUjFjbUYwYVc5dUlEMGdNRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjbVYyWlhKelpVRmpkR2x2YmlBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhVzVwZEZkcGRHaEVkWEpoZEdsdmJpaGtkWEpoZEdsdmJpd2dNQ2s3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJSEpsZG1WeWMyVTZablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdZV04wYVc5dUlEMGdibVYzSUdOakxrWmhaR1ZKYmlncE8xeHVJQ0FnSUNBZ0lDQmhZM1JwYjI0dVgzSmxkbVZ5YzJWQlkzUnBiMjRnUFNCMGFHbHpPMXh1SUNBZ0lDQWdJQ0JoWTNScGIyNHVhVzVwZEZkcGRHaEVkWEpoZEdsdmJpaDBhR2x6TGw5a2RYSmhkR2x2Yml3Z01qVTFLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZMnh2Ym1WRVpXTnZjbUYwYVc5dUtHRmpkR2x2YmlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNKbGRtVnljMlZGWVhObFRHbHpkQ2hoWTNScGIyNHBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZV04wYVc5dU8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCamJHOXVaVHBtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJoWTNScGIyNGdQU0J1WlhjZ1kyTXVSbUZrWlU5MWRDZ3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWpiRzl1WlVSbFkyOXlZWFJwYjI0b1lXTjBhVzl1S1R0Y2JpQWdJQ0FnSUNBZ1lXTjBhVzl1TG1sdWFYUlhhWFJvUkhWeVlYUnBiMjRvZEdocGN5NWZaSFZ5WVhScGIyNHNJSFJvYVhNdVgzUnZUM0JoWTJsMGVTazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmhZM1JwYjI0N1hHNGdJQ0FnZlZ4dWZTazdYRzVjYmk4cUtseHVJQ29nSVNObGJpQkdZV1JsY3lCUGRYUWdZVzRnYjJKcVpXTjBJSFJvWVhRZ2FXMXdiR1Z0Wlc1MGN5QjBhR1VnWTJNdVVrZENRVkJ5YjNSdlkyOXNJSEJ5YjNSdlkyOXNMaUJKZENCdGIyUnBabWxsY3lCMGFHVWdiM0JoWTJsMGVTQm1jbTl0SURJMU5TQjBieUF3TGx4dUlDb2dJU042YUNEbXVKRHBtcERtbFlqbW5wempnSUpjYmlBcUlFQnRaWFJvYjJRZ1ptRmtaVTkxZEZ4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHUWdJR1IxY21GMGFXOXVJR2x1SUhObFkyOXVaSE5jYmlBcUlFQnlaWFIxY200Z2UwRmpkR2x2YmtsdWRHVnlkbUZzZlZ4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxSUM4dklHVjRZVzF3YkdWY2JpQXFJSFpoY2lCaFkzUnBiMjRnUFNCall5NW1ZV1JsVDNWMEtERXVNQ2s3WEc0Z0tpOWNibU5qTG1aaFpHVlBkWFFnUFNCbWRXNWpkR2x2YmlBb1pDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dZMk11Um1Ga1pVOTFkQ2hrS1R0Y2JuMDdYRzVjYmk4cUlGUnBiblJ6SUdFZ1RtOWtaU0IwYUdGMElHbHRjR3hsYldWdWRITWdkR2hsSUdOakxrNXZaR1ZTUjBJZ2NISnZkRzlqYjJ3Z1puSnZiU0JqZFhKeVpXNTBJSFJwYm5RZ2RHOGdZU0JqZFhOMGIyMGdiMjVsTGx4dUlDb2dRSGRoY201cGJtY2dWR2hwY3lCaFkzUnBiMjRnWkc5bGMyNG5kQ0J6ZFhCd2IzSjBJRndpY21WMlpYSnpaVndpWEc0Z0tpQkFZMnhoYzNNZ1ZHbHVkRlJ2WEc0Z0tpQkFaWGgwWlc1a2N5QkJZM1JwYjI1SmJuUmxjblpoYkZ4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHUjFjbUYwYVc5dVhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdjbVZrSURBdE1qVTFYRzRnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnWjNKbFpXNGdJREF0TWpVMVhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdZbXgxWlNBd0xUSTFOVnh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFJSFpoY2lCaFkzUnBiMjRnUFNCdVpYY2dZMk11VkdsdWRGUnZLRElzSURJMU5Td2dNQ3dnTWpVMUtUdGNiaUFxTDF4dVkyTXVWR2x1ZEZSdklEMGdZMk11UTJ4aGMzTW9lMXh1SUNBZ0lHNWhiV1U2SUNkall5NVVhVzUwVkc4bkxGeHVJQ0FnSUdWNGRHVnVaSE02SUdOakxrRmpkR2x2YmtsdWRHVnlkbUZzTEZ4dVhHNGdJQ0FnWTNSdmNqcG1kVzVqZEdsdmJpQW9aSFZ5WVhScGIyNHNJSEpsWkN3Z1ozSmxaVzRzSUdKc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkRzhnUFNCall5NWpiMnh2Y2lnd0xDQXdMQ0F3S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWm5KdmJTQTlJR05qTG1OdmJHOXlLREFzSURBc0lEQXBPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaHlaV1FnYVc1emRHRnVZMlZ2WmlCall5NURiMnh2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWW14MVpTQTlJSEpsWkM1aU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWjNKbFpXNGdQU0J5WldRdVp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbFpDQTlJSEpsWkM1eU8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnWW14MVpTQWhQVDBnZFc1a1pXWnBibVZrSUNZbUlIUm9hWE11YVc1cGRGZHBkR2hFZFhKaGRHbHZiaWhrZFhKaGRHbHZiaXdnY21Wa0xDQm5jbVZsYml3Z1lteDFaU2s3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxWEc0Z0lDQWdJQ29nU1c1cGRHbGhiR2w2WlhNZ2RHaGxJR0ZqZEdsdmJpNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ1pIVnlZWFJwYjI1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnY21Wa0lEQXRNalUxWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJR2R5WldWdUlEQXRNalUxWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJR0pzZFdVZ01DMHlOVFZjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRDYjI5c1pXRnVmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHbHVhWFJYYVhSb1JIVnlZWFJwYjI0NlpuVnVZM1JwYjI0Z0tHUjFjbUYwYVc5dUxDQnlaV1FzSUdkeVpXVnVMQ0JpYkhWbEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoall5NUJZM1JwYjI1SmJuUmxjblpoYkM1d2NtOTBiM1I1Y0dVdWFXNXBkRmRwZEdoRWRYSmhkR2x2Ymk1allXeHNLSFJvYVhNc0lHUjFjbUYwYVc5dUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmZEc4Z1BTQmpZeTVqYjJ4dmNpaHlaV1FzSUdkeVpXVnVMQ0JpYkhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWTJ4dmJtVTZablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdZV04wYVc5dUlEMGdibVYzSUdOakxsUnBiblJVYnlncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5amJHOXVaVVJsWTI5eVlYUnBiMjRvWVdOMGFXOXVLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHeHZZMVJ2SUQwZ2RHaHBjeTVmZEc4N1hHNGdJQ0FnSUNBZ0lHRmpkR2x2Ymk1cGJtbDBWMmwwYUVSMWNtRjBhVzl1S0hSb2FYTXVYMlIxY21GMGFXOXVMQ0JzYjJOVWJ5NXlMQ0JzYjJOVWJ5NW5MQ0JzYjJOVWJ5NWlLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR0ZqZEdsdmJqdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2MzUmhjblJYYVhSb1ZHRnlaMlYwT21aMWJtTjBhVzl1SUNoMFlYSm5aWFFwSUh0Y2JpQWdJQ0FnSUNBZ1kyTXVRV04wYVc5dVNXNTBaWEoyWVd3dWNISnZkRzkwZVhCbExuTjBZWEowVjJsMGFGUmhjbWRsZEM1allXeHNLSFJvYVhNc0lIUmhjbWRsZENrN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlpuSnZiU0E5SUhSb2FYTXVkR0Z5WjJWMExtTnZiRzl5TzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0IxY0dSaGRHVTZablZ1WTNScGIyNGdLR1IwS1NCN1hHNGdJQ0FnSUNBZ0lHUjBJRDBnZEdocGN5NWZZMjl0Y0hWMFpVVmhjMlZVYVcxbEtHUjBLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHeHZZMFp5YjIwZ1BTQjBhR2x6TGw5bWNtOXRMQ0JzYjJOVWJ5QTlJSFJvYVhNdVgzUnZPMXh1SUNBZ0lDQWdJQ0JwWmlBb2JHOWpSbkp2YlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTBZWEpuWlhRdVkyOXNiM0lnUFNCall5NWpiMnh2Y2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiRzlqUm5KdmJTNXlJQ3NnS0d4dlkxUnZMbklnTFNCc2IyTkdjbTl0TG5JcElDb2daSFFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeHZZMFp5YjIwdVp5QXJJQ2hzYjJOVWJ5NW5JQzBnYkc5alJuSnZiUzVuS1NBcUlHUjBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2IyTkdjbTl0TG1JZ0t5QW9iRzlqVkc4dVlpQXRJR3h2WTBaeWIyMHVZaWtnS2lCa2RDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzU5S1R0Y2JseHVMeW9xWEc0Z0tpQWhJMlZ1SUZScGJuUnpJR0VnVG05a1pTQjBhR0YwSUdsdGNHeGxiV1Z1ZEhNZ2RHaGxJR05qTGs1dlpHVlNSMElnY0hKdmRHOWpiMndnWm5KdmJTQmpkWEp5Wlc1MElIUnBiblFnZEc4Z1lTQmpkWE4wYjIwZ2IyNWxMbHh1SUNvZ0lTTjZhQ0RrdjY3bWxMbnBvcHpvaWJMbGlMRG1qSWZscnBybGdMempnSUpjYmlBcUlFQnRaWFJvYjJRZ2RHbHVkRlJ2WEc0Z0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ1pIVnlZWFJwYjI1Y2JpQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQnlaV1FnTUMweU5UVmNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JuY21WbGJpQWdNQzB5TlRWY2JpQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQmliSFZsSURBdE1qVTFYRzRnS2lCQWNtVjBkWEp1SUh0QlkzUnBiMjVKYm5SbGNuWmhiSDFjYmlBcUlFQmxlR0Z0Y0d4bFhHNGdLaUF2THlCbGVHRnRjR3hsWEc0Z0tpQjJZWElnWVdOMGFXOXVJRDBnWTJNdWRHbHVkRlJ2S0RJc0lESTFOU3dnTUN3Z01qVTFLVHRjYmlBcUwxeHVZMk11ZEdsdWRGUnZJRDBnWm5WdVkzUnBiMjRnS0dSMWNtRjBhVzl1TENCeVpXUXNJR2R5WldWdUxDQmliSFZsS1NCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCall5NVVhVzUwVkc4b1pIVnlZWFJwYjI0c0lISmxaQ3dnWjNKbFpXNHNJR0pzZFdVcE8xeHVmVHRjYmx4dVhHNHZLaUJVYVc1MGN5QmhJRTV2WkdVZ2RHaGhkQ0JwYlhCc1pXMWxiblJ6SUhSb1pTQmpZeTVPYjJSbFVrZENJSEJ5YjNSdlkyOXNJR1p5YjIwZ1kzVnljbVZ1ZENCMGFXNTBJSFJ2SUdFZ1kzVnpkRzl0SUc5dVpTNWNiaUFxSUZKbGJHRjBhWFpsSUhSdklIUm9aV2x5SUc5M2JpQmpiMnh2Y2lCamFHRnVaMlV1WEc0Z0tpQkFZMnhoYzNNZ1ZHbHVkRUo1WEc0Z0tpQkFaWGgwWlc1a2N5QkJZM1JwYjI1SmJuUmxjblpoYkZ4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHUjFjbUYwYVc5dUlDQmtkWEpoZEdsdmJpQnBiaUJ6WldOdmJtUnpYRzRnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnWkdWc2RHRlNaV1JjYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCa1pXeDBZVWR5WldWdVhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdaR1ZzZEdGQ2JIVmxYRzRnS2lCQVpYaGhiWEJzWlZ4dUlDb2dkbUZ5SUdGamRHbHZiaUE5SUc1bGR5QmpZeTVVYVc1MFFua29NaXdnTFRFeU55d2dMVEkxTlN3Z0xURXlOeWs3WEc0Z0tpOWNibU5qTGxScGJuUkNlU0E5SUdOakxrTnNZWE56S0h0Y2JpQWdJQ0J1WVcxbE9pQW5ZMk11VkdsdWRFSjVKeXhjYmlBZ0lDQmxlSFJsYm1Sek9pQmpZeTVCWTNScGIyNUpiblJsY25aaGJDeGNibHh1SUNBZ0lHTjBiM0k2Wm5WdVkzUnBiMjRnS0dSMWNtRjBhVzl1TENCa1pXeDBZVkpsWkN3Z1pHVnNkR0ZIY21WbGJpd2daR1ZzZEdGQ2JIVmxLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMlJsYkhSaFVpQTlJREE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMlJsYkhSaFJ5QTlJREE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMlJsYkhSaFFpQTlJREE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMlp5YjIxU0lEMGdNRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZabkp2YlVjZ1BTQXdPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOW1jbTl0UWlBOUlEQTdYRzVjZEZ4MFpHVnNkR0ZDYkhWbElDRTlQU0IxYm1SbFptbHVaV1FnSmlZZ2RHaHBjeTVwYm1sMFYybDBhRVIxY21GMGFXOXVLR1IxY21GMGFXOXVMQ0JrWld4MFlWSmxaQ3dnWkdWc2RHRkhjbVZsYml3Z1pHVnNkR0ZDYkhWbEtUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5cGNiaUFnSUNBZ0tpQkpibWwwYVdGc2FYcGxjeUIwYUdVZ1lXTjBhVzl1TGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JrZFhKaGRHbHZibHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQmtaV3gwWVZKbFpDQXdMVEkxTlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JrWld4MFlVZHlaV1Z1SURBdE1qVTFYRzRnSUNBZ0lDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHUmxiSFJoUW14MVpTQXdMVEkxTlZ4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTBKdmIyeGxZVzU5WEc0Z0lDQWdJQ292WEc0Z0lDQWdhVzVwZEZkcGRHaEVkWEpoZEdsdmJqcG1kVzVqZEdsdmJpQW9aSFZ5WVhScGIyNHNJR1JsYkhSaFVtVmtMQ0JrWld4MFlVZHlaV1Z1TENCa1pXeDBZVUpzZFdVcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0dOakxrRmpkR2x2YmtsdWRHVnlkbUZzTG5CeWIzUnZkSGx3WlM1cGJtbDBWMmwwYUVSMWNtRjBhVzl1TG1OaGJHd29kR2hwY3l3Z1pIVnlZWFJwYjI0cEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlrWld4MFlWSWdQU0JrWld4MFlWSmxaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJSbGJIUmhSeUE5SUdSbGJIUmhSM0psWlc0N1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWtaV3gwWVVJZ1BTQmtaV3gwWVVKc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUdOc2IyNWxPbVoxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR0ZqZEdsdmJpQTlJRzVsZHlCall5NVVhVzUwUW5rb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlkyeHZibVZFWldOdmNtRjBhVzl1S0dGamRHbHZiaWs3WEc0Z0lDQWdJQ0FnSUdGamRHbHZiaTVwYm1sMFYybDBhRVIxY21GMGFXOXVLSFJvYVhNdVgyUjFjbUYwYVc5dUxDQjBhR2x6TGw5a1pXeDBZVklzSUhSb2FYTXVYMlJsYkhSaFJ5d2dkR2hwY3k1ZlpHVnNkR0ZDS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdGamRHbHZianRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdjM1JoY25SWGFYUm9WR0Z5WjJWME9tWjFibU4wYVc5dUlDaDBZWEpuWlhRcElIdGNiaUFnSUNBZ0lDQWdZMk11UVdOMGFXOXVTVzUwWlhKMllXd3VjSEp2ZEc5MGVYQmxMbk4wWVhKMFYybDBhRlJoY21kbGRDNWpZV3hzS0hSb2FYTXNJSFJoY21kbGRDazdYRzVjYmlBZ0lDQWdJQ0FnZG1GeUlHTnZiRzl5SUQwZ2RHRnlaMlYwTG1OdmJHOXlPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOW1jbTl0VWlBOUlHTnZiRzl5TG5JN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJaeWIyMUhJRDBnWTI5c2IzSXVaenRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZabkp2YlVJZ1BTQmpiMnh2Y2k1aU8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCMWNHUmhkR1U2Wm5WdVkzUnBiMjRnS0dSMEtTQjdYRzRnSUNBZ0lDQWdJR1IwSUQwZ2RHaHBjeTVmWTI5dGNIVjBaVVZoYzJWVWFXMWxLR1IwS1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG5SaGNtZGxkQzVqYjJ4dmNpQTlJR05qTG1OdmJHOXlLSFJvYVhNdVgyWnliMjFTSUNzZ2RHaHBjeTVmWkdWc2RHRlNJQ29nWkhRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5bWNtOXRSeUFySUhSb2FYTXVYMlJsYkhSaFJ5QXFJR1IwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWm5KdmJVSWdLeUIwYUdsekxsOWtaV3gwWVVJZ0tpQmtkQ2s3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJSEpsZG1WeWMyVTZablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdZV04wYVc5dUlEMGdibVYzSUdOakxsUnBiblJDZVNoMGFHbHpMbDlrZFhKaGRHbHZiaXdnTFhSb2FYTXVYMlJsYkhSaFVpd2dMWFJvYVhNdVgyUmxiSFJoUnl3Z0xYUm9hWE11WDJSbGJIUmhRaWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMk5zYjI1bFJHVmpiM0poZEdsdmJpaGhZM1JwYjI0cE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5eVpYWmxjbk5sUldGelpVeHBjM1FvWVdOMGFXOXVLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR0ZqZEdsdmJqdGNiaUFnSUNCOVhHNTlLVHRjYmx4dUx5b3FYRzRnS2lBaEkyVnVYRzRnS2lCVWFXNTBjeUJoSUU1dlpHVWdkR2hoZENCcGJYQnNaVzFsYm5SeklIUm9aU0JqWXk1T2IyUmxVa2RDSUhCeWIzUnZZMjlzSUdaeWIyMGdZM1Z5Y21WdWRDQjBhVzUwSUhSdklHRWdZM1Z6ZEc5dElHOXVaUzVjYmlBcUlGSmxiR0YwYVhabElIUnZJSFJvWldseUlHOTNiaUJqYjJ4dmNpQmphR0Z1WjJVdVhHNGdLaUFoSTNwb0lPYU1pZWVGcCthTWgrV3VtdWVhaE9XaW51bUhqK1MvcnVhVXVlbWluT2lKc3VPQWdseHVJQ29nUUcxbGRHaHZaQ0IwYVc1MFFubGNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JrZFhKaGRHbHZiaUFnWkhWeVlYUnBiMjRnYVc0Z2MyVmpiMjVrYzF4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHUmxiSFJoVW1Wa1hHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdaR1ZzZEdGSGNtVmxibHh1SUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUdSbGJIUmhRbXgxWlZ4dUlDb2dRSEpsZEhWeWJpQjdRV04wYVc5dVNXNTBaWEoyWVd4OVhHNGdLaUJBWlhoaGJYQnNaVnh1SUNvZ0x5OGdaWGhoYlhCc1pWeHVJQ29nZG1GeUlHRmpkR2x2YmlBOUlHTmpMblJwYm5SQ2VTZ3lMQ0F0TVRJM0xDQXRNalUxTENBdE1USTNLVHRjYmlBcUwxeHVZMk11ZEdsdWRFSjVJRDBnWm5WdVkzUnBiMjRnS0dSMWNtRjBhVzl1TENCa1pXeDBZVkpsWkN3Z1pHVnNkR0ZIY21WbGJpd2daR1ZzZEdGQ2JIVmxLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJqWXk1VWFXNTBRbmtvWkhWeVlYUnBiMjRzSUdSbGJIUmhVbVZrTENCa1pXeDBZVWR5WldWdUxDQmtaV3gwWVVKc2RXVXBPMXh1ZlR0Y2JseHVMeW9nUkdWc1lYbHpJSFJvWlNCaFkzUnBiMjRnWVNCalpYSjBZV2x1SUdGdGIzVnVkQ0J2WmlCelpXTnZibVJ6WEc0Z0tpQkFZMnhoYzNNZ1JHVnNZWGxVYVcxbFhHNGdLaUJBWlhoMFpXNWtjeUJCWTNScGIyNUpiblJsY25aaGJGeHVJQ292WEc1all5NUVaV3hoZVZScGJXVWdQU0JqWXk1RGJHRnpjeWg3WEc0Z0lDQWdibUZ0WlRvZ0oyTmpMa1JsYkdGNVZHbHRaU2NzWEc0Z0lDQWdaWGgwWlc1a2N6b2dZMk11UVdOMGFXOXVTVzUwWlhKMllXd3NYRzVjYmlBZ0lDQjFjR1JoZEdVNlpuVnVZM1JwYjI0Z0tHUjBLU0I3ZlN4Y2JseHVJQ0FnSUhKbGRtVnljMlU2Wm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWVdOMGFXOXVJRDBnYm1WM0lHTmpMa1JsYkdGNVZHbHRaU2gwYUdsekxsOWtkWEpoZEdsdmJpazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyTnNiMjVsUkdWamIzSmhkR2x2YmloaFkzUnBiMjRwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl5WlhabGNuTmxSV0Z6WlV4cGMzUW9ZV04wYVc5dUtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHRmpkR2x2Ymp0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWTJ4dmJtVTZablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdZV04wYVc5dUlEMGdibVYzSUdOakxrUmxiR0Y1VkdsdFpTZ3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWpiRzl1WlVSbFkyOXlZWFJwYjI0b1lXTjBhVzl1S1R0Y2JpQWdJQ0FnSUNBZ1lXTjBhVzl1TG1sdWFYUlhhWFJvUkhWeVlYUnBiMjRvZEdocGN5NWZaSFZ5WVhScGIyNHBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZV04wYVc5dU8xeHVJQ0FnSUgxY2JuMHBPMXh1WEc0dktpcGNiaUFxSUNFalpXNGdSR1ZzWVhseklIUm9aU0JoWTNScGIyNGdZU0JqWlhKMFlXbHVJR0Z0YjNWdWRDQnZaaUJ6WldOdmJtUnpMbHh1SUNvZ0lTTjZhQ0RsdTdib3Y1L21qSWZscnBybm1vVG1sN2JwbDdUcGg0L2pnSUpjYmlBcUlFQnRaWFJvYjJRZ1pHVnNZWGxVYVcxbFhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdaQ0JrZFhKaGRHbHZiaUJwYmlCelpXTnZibVJ6WEc0Z0tpQkFjbVYwZFhKdUlIdEJZM1JwYjI1SmJuUmxjblpoYkgxY2JpQXFJRUJsZUdGdGNHeGxYRzRnS2lBdkx5QmxlR0Z0Y0d4bFhHNGdLaUIyWVhJZ1pHVnNZWGtnUFNCall5NWtaV3hoZVZScGJXVW9NU2s3WEc0Z0tpOWNibU5qTG1SbGJHRjVWR2x0WlNBOUlHWjFibU4wYVc5dUlDaGtLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJqWXk1RVpXeGhlVlJwYldVb1pDazdYRzU5TzF4dVhHNHZLbHh1SUNvZ1BIQStYRzRnS2lCRmVHVmpkWFJsY3lCaGJpQmhZM1JwYjI0Z2FXNGdjbVYyWlhKelpTQnZjbVJsY2l3Z1puSnZiU0IwYVcxbFBXUjFjbUYwYVc5dUlIUnZJSFJwYldVOU1DQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThZbkl2UGx4dUlDb2dRSGRoY201cGJtY2dWWE5sSUhSb2FYTWdZV04wYVc5dUlHTmhjbVZtZFd4c2VTNGdWR2hwY3lCaFkzUnBiMjRnYVhNZ2JtOTBJSE5sY1hWbGJtTmxZV0pzWlM0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4WW5JdlBseHVJQ29nVlhObElHbDBJR0Z6SUhSb1pTQmtaV1poZFd4MElGd2ljbVYyWlhKelpXUmNJaUJ0WlhSb2IyUWdiMllnZVc5MWNpQnZkMjRnWVdOMGFXOXVjeXdnWW5WMElIVnphVzVuSUdsMElHOTFkSE5wWkdVZ2RHaGxJRndpY21WMlpYSnpaV1JjSWlBZ0lDQWdJRHhpY2k4K1hHNGdLaUJ6WTI5d1pTQnBjeUJ1YjNRZ2NtVmpiMjF0Wlc1a1pXUXVYRzRnS2lBOEwzQStYRzRnS2lCQVkyeGhjM01nVW1WMlpYSnpaVlJwYldWY2JpQXFJRUJsZUhSbGJtUnpJRUZqZEdsdmJrbHVkR1Z5ZG1Gc1hHNGdLaUJBY0dGeVlXMGdlMFpwYm1sMFpWUnBiV1ZCWTNScGIyNTlJR0ZqZEdsdmJseHVJQ29nUUdWNFlXMXdiR1ZjYmlBcUlDQjJZWElnY21WMlpYSnpaU0E5SUc1bGR5QmpZeTVTWlhabGNuTmxWR2x0WlNoMGFHbHpLVHRjYmlBcUwxeHVZMk11VW1WMlpYSnpaVlJwYldVZ1BTQmpZeTVEYkdGemN5aDdYRzRnSUNBZ2JtRnRaVG9nSjJOakxsSmxkbVZ5YzJWVWFXMWxKeXhjYmlBZ0lDQmxlSFJsYm1Sek9pQmpZeTVCWTNScGIyNUpiblJsY25aaGJDeGNibHh1SUNBZ0lHTjBiM0k2Wm5WdVkzUnBiMjRnS0dGamRHbHZiaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl2ZEdobGNpQTlJRzUxYkd3N1hHNWNkRngwWVdOMGFXOXVJQ1ltSUhSb2FYTXVhVzVwZEZkcGRHaEJZM1JwYjI0b1lXTjBhVzl1S1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlwY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTBacGJtbDBaVlJwYldWQlkzUnBiMjU5SUdGamRHbHZibHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMEp2YjJ4bFlXNTlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FXNXBkRmRwZEdoQlkzUnBiMjQ2Wm5WdVkzUnBiMjRnS0dGamRHbHZiaWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9JV0ZqZEdsdmJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyTXVaWEp5YjNKSlJDZ3hNREk0S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvWVdOMGFXOXVJRDA5UFNCMGFHbHpMbDl2ZEdobGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyTXVaWEp5YjNKSlJDZ3hNREk1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtSUNoall5NUJZM1JwYjI1SmJuUmxjblpoYkM1d2NtOTBiM1I1Y0dVdWFXNXBkRmRwZEdoRWRYSmhkR2x2Ymk1allXeHNLSFJvYVhNc0lHRmpkR2x2Ymk1ZlpIVnlZWFJwYjI0cEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkViMjRuZENCc1pXRnJJR2xtSUdGamRHbHZiaUJwY3lCeVpYVnpaV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDI5MGFHVnlJRDBnWVdOMGFXOXVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCamJHOXVaVHBtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJoWTNScGIyNGdQU0J1WlhjZ1kyTXVVbVYyWlhKelpWUnBiV1VvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWTJ4dmJtVkVaV052Y21GMGFXOXVLR0ZqZEdsdmJpazdYRzRnSUNBZ0lDQWdJR0ZqZEdsdmJpNXBibWwwVjJsMGFFRmpkR2x2YmloMGFHbHpMbDl2ZEdobGNpNWpiRzl1WlNncEtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHRmpkR2x2Ymp0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnYzNSaGNuUlhhWFJvVkdGeVoyVjBPbVoxYm1OMGFXOXVJQ2gwWVhKblpYUXBJSHRjYmlBZ0lDQWdJQ0FnWTJNdVFXTjBhVzl1U1c1MFpYSjJZV3d1Y0hKdmRHOTBlWEJsTG5OMFlYSjBWMmwwYUZSaGNtZGxkQzVqWVd4c0tIUm9hWE1zSUhSaGNtZGxkQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjkwYUdWeUxuTjBZWEowVjJsMGFGUmhjbWRsZENoMFlYSm5aWFFwTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0IxY0dSaGRHVTZablZ1WTNScGIyNGdLR1IwS1NCN1hHNGdJQ0FnSUNBZ0lHUjBJRDBnZEdocGN5NWZZMjl0Y0hWMFpVVmhjMlZVYVcxbEtHUjBLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDI5MGFHVnlLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYjNSb1pYSXVkWEJrWVhSbEtERWdMU0JrZENrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUhKbGRtVnljMlU2Wm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYjNSb1pYSXVZMnh2Ym1Vb0tUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2MzUnZjRHBtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDI5MGFHVnlMbk4wYjNBb0tUdGNiaUFnSUNBZ0lDQWdZMk11UVdOMGFXOXVMbkJ5YjNSdmRIbHdaUzV6ZEc5d0xtTmhiR3dvZEdocGN5azdYRzRnSUNBZ2ZWeHVmU2s3WEc1Y2JpOHFLbHh1SUNvZ0lTTmxiaUJGZUdWamRYUmxjeUJoYmlCaFkzUnBiMjRnYVc0Z2NtVjJaWEp6WlNCdmNtUmxjaXdnWm5KdmJTQjBhVzFsUFdSMWNtRjBhVzl1SUhSdklIUnBiV1U5TUM1Y2JpQXFJQ0VqZW1nZzVZK042TDJzNTV1dTVxQ0g1WXFvNUwyYzU1cUU1cGUyNlplMDZMMjA0NENDWEc0Z0tpQkFiV1YwYUc5a0lISmxkbVZ5YzJWVWFXMWxYRzRnS2lCQWNHRnlZVzBnZTBacGJtbDBaVlJwYldWQlkzUnBiMjU5SUdGamRHbHZibHh1SUNvZ1FISmxkSFZ5YmlCN1FXTjBhVzl1U1c1MFpYSjJZV3g5WEc0Z0tpQkFaWGhoYlhCc1pWeHVJQ29nTHk4Z1pYaGhiWEJzWlZ4dUlDb2dJSFpoY2lCeVpYWmxjbk5sSUQwZ1kyTXVjbVYyWlhKelpWUnBiV1VvZEdocGN5azdYRzRnS2k5Y2JtTmpMbkpsZG1WeWMyVlVhVzFsSUQwZ1puVnVZM1JwYjI0Z0tHRmpkR2x2YmlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1kyTXVVbVYyWlhKelpWUnBiV1VvWVdOMGFXOXVLVHRjYm4wN1hHNWNiaThxWEc0Z0tpQThjRDVjYmlBcUlFOTJaWEp5YVdSbGN5QjBhR1VnZEdGeVoyVjBJRzltSUdGdUlHRmpkR2x2YmlCemJ5QjBhR0YwSUdsMElHRnNkMkY1Y3lCeWRXNXpJRzl1SUhSb1pTQjBZWEpuWlhROFluSXZQbHh1SUNvZ2MzQmxZMmxtYVdWa0lHRjBJR0ZqZEdsdmJpQmpjbVZoZEdsdmJpQnlZWFJvWlhJZ2RHaGhiaUIwYUdVZ2IyNWxJSE53WldOcFptbGxaQ0JpZVNCeWRXNUJZM1JwYjI0dVhHNGdLaUE4TDNBK1hHNGdLaUJBWTJ4aGMzTWdWR0Z5WjJWMFpXUkJZM1JwYjI1Y2JpQXFJRUJsZUhSbGJtUnpJRUZqZEdsdmJrbHVkR1Z5ZG1Gc1hHNGdLaUJBY0dGeVlXMGdlMDV2WkdWOUlIUmhjbWRsZEZ4dUlDb2dRSEJoY21GdElIdEdhVzVwZEdWVWFXMWxRV04wYVc5dWZTQmhZM1JwYjI1Y2JpQXFMMXh1WTJNdVZHRnlaMlYwWldSQlkzUnBiMjRnUFNCall5NURiR0Z6Y3loN1hHNGdJQ0FnYm1GdFpUb2dKMk5qTGxSaGNtZGxkR1ZrUVdOMGFXOXVKeXhjYmlBZ0lDQmxlSFJsYm1Sek9pQmpZeTVCWTNScGIyNUpiblJsY25aaGJDeGNibHh1SUNBZ0lHTjBiM0k2SUdaMWJtTjBhVzl1SUNoMFlYSm5aWFFzSUdGamRHbHZiaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDloWTNScGIyNGdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5bWIzSmpaV1JVWVhKblpYUWdQU0J1ZFd4c08xeHVYSFJjZEdGamRHbHZiaUFtSmlCMGFHbHpMbWx1YVhSWGFYUm9WR0Z5WjJWMEtIUmhjbWRsZEN3Z1lXTjBhVzl1S1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlwY2JpQWdJQ0FnS2lCSmJtbDBJR0Z1SUdGamRHbHZiaUIzYVhSb0lIUm9aU0J6Y0dWamFXWnBaV1FnWVdOMGFXOXVJR0Z1WkNCbWIzSmpaV1FnZEdGeVoyVjBYRzRnSUNBZ0lDb2dRSEJoY21GdElIdE9iMlJsZlNCMFlYSm5aWFJjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMFpwYm1sMFpWUnBiV1ZCWTNScGIyNTlJR0ZqZEdsdmJseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UwSnZiMnhsWVc1OVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYVc1cGRGZHBkR2hVWVhKblpYUTZablZ1WTNScGIyNGdLSFJoY21kbGRDd2dZV04wYVc5dUtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbWx1YVhSWGFYUm9SSFZ5WVhScGIyNG9ZV04wYVc5dUxsOWtkWEpoZEdsdmJpa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJadmNtTmxaRlJoY21kbGRDQTlJSFJoY21kbGREdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMkZqZEdsdmJpQTlJR0ZqZEdsdmJqdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWTJ4dmJtVTZablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdZV04wYVc5dUlEMGdibVYzSUdOakxsUmhjbWRsZEdWa1FXTjBhVzl1S0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJOc2IyNWxSR1ZqYjNKaGRHbHZiaWhoWTNScGIyNHBPMXh1SUNBZ0lDQWdJQ0JoWTNScGIyNHVhVzVwZEZkcGRHaFVZWEpuWlhRb2RHaHBjeTVmWm05eVkyVmtWR0Z5WjJWMExDQjBhR2x6TGw5aFkzUnBiMjR1WTJ4dmJtVW9LU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJoWTNScGIyNDdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lITjBZWEowVjJsMGFGUmhjbWRsZERwbWRXNWpkR2x2YmlBb2RHRnlaMlYwS1NCN1hHNGdJQ0FnSUNBZ0lHTmpMa0ZqZEdsdmJrbHVkR1Z5ZG1Gc0xuQnliM1J2ZEhsd1pTNXpkR0Z5ZEZkcGRHaFVZWEpuWlhRdVkyRnNiQ2gwYUdsekxDQjBZWEpuWlhRcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5aFkzUnBiMjR1YzNSaGNuUlhhWFJvVkdGeVoyVjBLSFJvYVhNdVgyWnZjbU5sWkZSaGNtZGxkQ2s3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJSE4wYjNBNlpuVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWhZM1JwYjI0dWMzUnZjQ2dwTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0IxY0dSaGRHVTZablZ1WTNScGIyNGdLR1IwS1NCN1hHNGdJQ0FnSUNBZ0lHUjBJRDBnZEdocGN5NWZZMjl0Y0hWMFpVVmhjMlZVYVcxbEtHUjBLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZV04wYVc5dUxuVndaR0YwWlNoa2RDazdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFYRzRnSUNBZ0lDb2djbVYwZFhKdUlIUm9aU0IwWVhKblpYUWdkR2hoZENCMGFHVWdZV04wYVc5dUlIZHBiR3dnWW1VZ1ptOXlZMlZrSUhSdklISjFiaUIzYVhSb1hHNGdJQ0FnSUNvZ1FISmxkSFZ5YmlCN1RtOWtaWDFjYmlBZ0lDQWdLaTljYmlBZ0lDQm5aWFJHYjNKalpXUlVZWEpuWlhRNlpuVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlptOXlZMlZrVkdGeVoyVjBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLbHh1SUNBZ0lDQXFJSE5sZENCMGFHVWdkR0Z5WjJWMElIUm9ZWFFnZEdobElHRmpkR2x2YmlCM2FXeHNJR0psSUdadmNtTmxaQ0IwYnlCeWRXNGdkMmwwYUZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VG05a1pYMGdabTl5WTJWa1ZHRnlaMlYwWEc0Z0lDQWdJQ292WEc0Z0lDQWdjMlYwUm05eVkyVmtWR0Z5WjJWME9tWjFibU4wYVc5dUlDaG1iM0pqWldSVVlYSm5aWFFwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgyWnZjbU5sWkZSaGNtZGxkQ0FoUFQwZ1ptOXlZMlZrVkdGeVoyVjBLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWm05eVkyVmtWR0Z5WjJWMElEMGdabTl5WTJWa1ZHRnlaMlYwTzF4dUlDQWdJSDFjYm4wcE8xeHVYRzR2S2lwY2JpQXFJQ0VqWlc0Z1EzSmxZWFJsSUdGdUlHRmpkR2x2YmlCM2FYUm9JSFJvWlNCemNHVmphV1pwWldRZ1lXTjBhVzl1SUdGdVpDQm1iM0pqWldRZ2RHRnlaMlYwTGx4dUlDb2dJU042YUNEbmxLamx0N0xtbklubGlxamt2Wnpsa296a3VJRGt1S3JtbHJEbm1vVG5tNjdtb0lmb2lvTG5ncm5saUp2bHU3cmxpcWprdlp6amdJSmNiaUFxSUVCdFpYUm9iMlFnZEdGeVoyVjBaV1JCWTNScGIyNWNiaUFxSUVCd1lYSmhiU0I3VG05a1pYMGdkR0Z5WjJWMFhHNGdLaUJBY0dGeVlXMGdlMFpwYm1sMFpWUnBiV1ZCWTNScGIyNTlJR0ZqZEdsdmJseHVJQ29nUUhKbGRIVnliaUI3UVdOMGFXOXVTVzUwWlhKMllXeDlYRzRnS2k5Y2JtTmpMblJoY21kbGRHVmtRV04wYVc5dUlEMGdablZ1WTNScGIyNGdLSFJoY21kbGRDd2dZV04wYVc5dUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QmpZeTVVWVhKblpYUmxaRUZqZEdsdmJpaDBZWEpuWlhRc0lHRmpkR2x2YmlrN1hHNTlPMXh1SWwxOSJdfQ==