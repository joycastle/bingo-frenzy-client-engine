(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/actions/CCActionEase.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        cc.easeIn = function (rate) {
            return {
                _rate: rate,
                easing: function easing(dt) {
                    return Math.pow(dt, this._rate);
                },
                reverse: function reverse() {
                    return cc.easeIn(1 / this._rate);
                }
            };
        };
        cc.easeOut = function (rate) {
            return {
                _rate: rate,
                easing: function easing(dt) {
                    return Math.pow(dt, 1 / this._rate);
                },
                reverse: function reverse() {
                    return cc.easeOut(1 / this._rate);
                }
            };
        };
        cc.easeInOut = function (rate) {
            return {
                _rate: rate,
                easing: function easing(dt) {
                    dt *= 2;
                    if (dt < 1)
                        return 0.5 * Math.pow(dt, this._rate);
                    else
                        return 1 - 0.5 * Math.pow(2 - dt, this._rate);
                },
                reverse: function reverse() {
                    return cc.easeInOut(this._rate);
                }
            };
        };
        var _easeExponentialInObj = {
            easing: function easing(dt) {
                return dt === 0 ? 0 : Math.pow(2, 10 * (dt - 1));
            },
            reverse: function reverse() {
                return _easeExponentialOutObj;
            }
        };
        cc.easeExponentialIn = function () {
            return _easeExponentialInObj;
        };
        var _easeExponentialOutObj = {
            easing: function easing(dt) {
                return dt === 1 ? 1 : -Math.pow(2, -10 * dt) + 1;
            },
            reverse: function reverse() {
                return _easeExponentialInObj;
            }
        };
        cc.easeExponentialOut = function () {
            return _easeExponentialOutObj;
        };
        var _easeExponentialInOutObj = {
            easing: function easing(dt) {
                if (dt !== 1 && dt !== 0) {
                    dt *= 2;
                    if (dt < 1)
                        return 0.5 * Math.pow(2, 10 * (dt - 1));
                    else
                        return 0.5 * (-Math.pow(2, -10 * (dt - 1)) + 2);
                }
                return dt;
            },
            reverse: function reverse() {
                return _easeExponentialInOutObj;
            }
        };
        cc.easeExponentialInOut = function () {
            return _easeExponentialInOutObj;
        };
        var _easeSineInObj = {
            easing: function easing(dt) {
                return dt === 0 || dt === 1 ? dt : -1 * Math.cos(dt * Math.PI / 2) + 1;
            },
            reverse: function reverse() {
                return _easeSineOutObj;
            }
        };
        cc.easeSineIn = function () {
            return _easeSineInObj;
        };
        var _easeSineOutObj = {
            easing: function easing(dt) {
                return dt === 0 || dt === 1 ? dt : Math.sin(dt * Math.PI / 2);
            },
            reverse: function reverse() {
                return _easeSineInObj;
            }
        };
        cc.easeSineOut = function () {
            return _easeSineOutObj;
        };
        var _easeSineInOutObj = {
            easing: function easing(dt) {
                return dt === 0 || dt === 1 ? dt : -0.5 * (Math.cos(Math.PI * dt) - 1);
            },
            reverse: function reverse() {
                return _easeSineInOutObj;
            }
        };
        cc.easeSineInOut = function () {
            return _easeSineInOutObj;
        };
        var _easeElasticInObj = {
            easing: function easing(dt) {
                if (dt === 0 || dt === 1)
                    return dt;
                dt = dt - 1;
                return -Math.pow(2, 10 * dt) * Math.sin((dt - 0.3 / 4) * Math.PI * 2 / 0.3);
            },
            reverse: function reverse() {
                return _easeElasticOutObj;
            }
        };
        cc.easeElasticIn = function (period) {
            if (period && period !== 0.3) {
                return {
                    _period: period,
                    easing: function easing(dt) {
                        if (dt === 0 || dt === 1)
                            return dt;
                        dt = dt - 1;
                        return -Math.pow(2, 10 * dt) * Math.sin((dt - this._period / 4) * Math.PI * 2 / this._period);
                    },
                    reverse: function reverse() {
                        return cc.easeElasticOut(this._period);
                    }
                };
            }
            return _easeElasticInObj;
        };
        var _easeElasticOutObj = {
            easing: function easing(dt) {
                return dt === 0 || dt === 1 ? dt : Math.pow(2, -10 * dt) * Math.sin((dt - 0.3 / 4) * Math.PI * 2 / 0.3) + 1;
            },
            reverse: function reverse() {
                return _easeElasticInObj;
            }
        };
        cc.easeElasticOut = function (period) {
            if (period && period !== 0.3) {
                return {
                    _period: period,
                    easing: function easing(dt) {
                        return dt === 0 || dt === 1 ? dt : Math.pow(2, -10 * dt) * Math.sin((dt - this._period / 4) * Math.PI * 2 / this._period) + 1;
                    },
                    reverse: function reverse() {
                        return cc.easeElasticIn(this._period);
                    }
                };
            }
            return _easeElasticOutObj;
        };
        cc.easeElasticInOut = function (period) {
            period = period || 0.3;
            return {
                _period: period,
                easing: function easing(dt) {
                    var newT = 0;
                    var locPeriod = this._period;
                    if (dt === 0 || dt === 1) {
                        newT = dt;
                    } else {
                        dt = dt * 2;
                        if (!locPeriod)
                            locPeriod = this._period = 0.3 * 1.5;
                        var s = locPeriod / 4;
                        dt = dt - 1;
                        if (dt < 0)
                            newT = -0.5 * Math.pow(2, 10 * dt) * Math.sin((dt - s) * Math.PI * 2 / locPeriod);
                        else
                            newT = Math.pow(2, -10 * dt) * Math.sin((dt - s) * Math.PI * 2 / locPeriod) * 0.5 + 1;
                    }
                    return newT;
                },
                reverse: function reverse() {
                    return cc.easeElasticInOut(this._period);
                }
            };
        };
        function _bounceTime(time1) {
            if (time1 < 1 / 2.75) {
                return 7.5625 * time1 * time1;
            } else if (time1 < 2 / 2.75) {
                time1 -= 1.5 / 2.75;
                return 7.5625 * time1 * time1 + 0.75;
            } else if (time1 < 2.5 / 2.75) {
                time1 -= 2.25 / 2.75;
                return 7.5625 * time1 * time1 + 0.9375;
            }
            time1 -= 2.625 / 2.75;
            return 7.5625 * time1 * time1 + 0.984375;
        }
        ;
        var _easeBounceInObj = {
            easing: function easing(dt) {
                return 1 - _bounceTime(1 - dt);
            },
            reverse: function reverse() {
                return _easeBounceOutObj;
            }
        };
        cc.easeBounceIn = function () {
            return _easeBounceInObj;
        };
        var _easeBounceOutObj = {
            easing: function easing(dt) {
                return _bounceTime(dt);
            },
            reverse: function reverse() {
                return _easeBounceInObj;
            }
        };
        cc.easeBounceOut = function () {
            return _easeBounceOutObj;
        };
        var _easeBounceInOutObj = {
            easing: function easing(time1) {
                var newT;
                if (time1 < 0.5) {
                    time1 = time1 * 2;
                    newT = (1 - _bounceTime(1 - time1)) * 0.5;
                } else {
                    newT = _bounceTime(time1 * 2 - 1) * 0.5 + 0.5;
                }
                return newT;
            },
            reverse: function reverse() {
                return _easeBounceInOutObj;
            }
        };
        cc.easeBounceInOut = function () {
            return _easeBounceInOutObj;
        };
        var _easeBackInObj = {
            easing: function easing(time1) {
                var overshoot = 1.70158;
                return time1 === 0 || time1 === 1 ? time1 : time1 * time1 * ((overshoot + 1) * time1 - overshoot);
            },
            reverse: function reverse() {
                return _easeBackOutObj;
            }
        };
        cc.easeBackIn = function () {
            return _easeBackInObj;
        };
        var _easeBackOutObj = {
            easing: function easing(time1) {
                var overshoot = 1.70158;
                time1 = time1 - 1;
                return time1 * time1 * ((overshoot + 1) * time1 + overshoot) + 1;
            },
            reverse: function reverse() {
                return _easeBackInObj;
            }
        };
        cc.easeBackOut = function () {
            return _easeBackOutObj;
        };
        var _easeBackInOutObj = {
            easing: function easing(time1) {
                var overshoot = 1.70158 * 1.525;
                time1 = time1 * 2;
                if (time1 < 1) {
                    return time1 * time1 * ((overshoot + 1) * time1 - overshoot) / 2;
                } else {
                    time1 = time1 - 2;
                    return time1 * time1 * ((overshoot + 1) * time1 + overshoot) / 2 + 1;
                }
            },
            reverse: function reverse() {
                return _easeBackInOutObj;
            }
        };
        cc.easeBackInOut = function () {
            return _easeBackInOutObj;
        };
        cc.easeBezierAction = function (a, b, c, d) {
            return {
                easing: function easing(t) {
                    return Math.pow(1 - t, 3) * a + 3 * t * Math.pow(1 - t, 2) * b + 3 * Math.pow(t, 2) * (1 - t) * c + Math.pow(t, 3) * d;
                },
                reverse: function reverse() {
                    return cc.easeBezierAction(d, c, b, a);
                }
            };
        };
        var _easeQuadraticActionIn = {
            easing: function easing(time) {
                return Math.pow(time, 2);
            },
            reverse: function reverse() {
                return _easeQuadraticActionIn;
            }
        };
        cc.easeQuadraticActionIn = function () {
            return _easeQuadraticActionIn;
        };
        var _easeQuadraticActionOut = {
            easing: function easing(time) {
                return -time * (time - 2);
            },
            reverse: function reverse() {
                return _easeQuadraticActionOut;
            }
        };
        cc.easeQuadraticActionOut = function () {
            return _easeQuadraticActionOut;
        };
        var _easeQuadraticActionInOut = {
            easing: function easing(time) {
                var resultTime = time;
                time *= 2;
                if (time < 1) {
                    resultTime = time * time * 0.5;
                } else {
                    --time;
                    resultTime = -0.5 * (time * (time - 2) - 1);
                }
                return resultTime;
            },
            reverse: function reverse() {
                return _easeQuadraticActionInOut;
            }
        };
        cc.easeQuadraticActionInOut = function () {
            return _easeQuadraticActionInOut;
        };
        var _easeQuarticActionIn = {
            easing: function easing(time) {
                return time * time * time * time;
            },
            reverse: function reverse() {
                return _easeQuarticActionIn;
            }
        };
        cc.easeQuarticActionIn = function () {
            return _easeQuarticActionIn;
        };
        var _easeQuarticActionOut = {
            easing: function easing(time) {
                time -= 1;
                return -(time * time * time * time - 1);
            },
            reverse: function reverse() {
                return _easeQuarticActionOut;
            }
        };
        cc.easeQuarticActionOut = function () {
            return _easeQuarticActionOut;
        };
        var _easeQuarticActionInOut = {
            easing: function easing(time) {
                time = time * 2;
                if (time < 1)
                    return 0.5 * time * time * time * time;
                time -= 2;
                return -0.5 * (time * time * time * time - 2);
            },
            reverse: function reverse() {
                return _easeQuarticActionInOut;
            }
        };
        cc.easeQuarticActionInOut = function () {
            return _easeQuarticActionInOut;
        };
        var _easeQuinticActionIn = {
            easing: function easing(time) {
                return time * time * time * time * time;
            },
            reverse: function reverse() {
                return _easeQuinticActionIn;
            }
        };
        cc.easeQuinticActionIn = function () {
            return _easeQuinticActionIn;
        };
        var _easeQuinticActionOut = {
            easing: function easing(time) {
                time -= 1;
                return time * time * time * time * time + 1;
            },
            reverse: function reverse() {
                return _easeQuinticActionOut;
            }
        };
        cc.easeQuinticActionOut = function () {
            return _easeQuinticActionOut;
        };
        var _easeQuinticActionInOut = {
            easing: function easing(time) {
                time = time * 2;
                if (time < 1)
                    return 0.5 * time * time * time * time * time;
                time -= 2;
                return 0.5 * (time * time * time * time * time + 2);
            },
            reverse: function reverse() {
                return _easeQuinticActionInOut;
            }
        };
        cc.easeQuinticActionInOut = function () {
            return _easeQuinticActionInOut;
        };
        var _easeCircleActionIn = {
            easing: function easing(time) {
                return -1 * (Math.sqrt(1 - time * time) - 1);
            },
            reverse: function reverse() {
                return _easeCircleActionIn;
            }
        };
        cc.easeCircleActionIn = function () {
            return _easeCircleActionIn;
        };
        var _easeCircleActionOut = {
            easing: function easing(time) {
                time = time - 1;
                return Math.sqrt(1 - time * time);
            },
            reverse: function reverse() {
                return _easeCircleActionOut;
            }
        };
        cc.easeCircleActionOut = function () {
            return _easeCircleActionOut;
        };
        var _easeCircleActionInOut = {
            easing: function easing(time) {
                time = time * 2;
                if (time < 1)
                    return -0.5 * (Math.sqrt(1 - time * time) - 1);
                time -= 2;
                return 0.5 * (Math.sqrt(1 - time * time) + 1);
            },
            reverse: function reverse() {
                return _easeCircleActionInOut;
            }
        };
        cc.easeCircleActionInOut = function () {
            return _easeCircleActionInOut;
        };
        var _easeCubicActionIn = {
            easing: function easing(time) {
                return time * time * time;
            },
            reverse: function reverse() {
                return _easeCubicActionIn;
            }
        };
        cc.easeCubicActionIn = function () {
            return _easeCubicActionIn;
        };
        var _easeCubicActionOut = {
            easing: function easing(time) {
                time -= 1;
                return time * time * time + 1;
            },
            reverse: function reverse() {
                return _easeCubicActionOut;
            }
        };
        cc.easeCubicActionOut = function () {
            return _easeCubicActionOut;
        };
        var _easeCubicActionInOut = {
            easing: function easing(time) {
                time = time * 2;
                if (time < 1)
                    return 0.5 * time * time * time;
                time -= 2;
                return 0.5 * (time * time * time + 2);
            },
            reverse: function reverse() {
                return _easeCubicActionInOut;
            }
        };
        cc.easeCubicActionInOut = function () {
            return _easeCubicActionInOut;
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,