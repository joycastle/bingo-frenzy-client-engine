(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/deprecated.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = cc.js;
        if (CC_DEBUG) {
            var deprecateEnum = function deprecateEnum(obj, oldPath, newPath, hasTypePrefixBefore) {
                if (!CC_SUPPORT_JIT) {
                    return;
                }
                hasTypePrefixBefore = hasTypePrefixBefore !== false;
                var enumDef = Function('return ' + newPath)();
                var entries = cc.Enum.getList(enumDef);
                var delimiter = hasTypePrefixBefore ? '_' : '.';
                for (var i = 0; i < entries.length; i++) {
                    var entry = entries[i].name;
                    var oldPropName;
                    if (hasTypePrefixBefore) {
                        var oldTypeName = oldPath.split('.').slice(-1)[0];
                        oldPropName = oldTypeName + '_' + entry;
                    } else {
                        oldPropName = entry;
                    }
                    js.get(obj, oldPropName, function (entry) {
                        cc.errorID(1400, oldPath + delimiter + entry, newPath + '.' + entry);
                        return enumDef[entry];
                    }.bind(null, entry));
                }
            };
            var markAsRemoved = function markAsRemoved(ownerCtor, removedProps, ownerName) {
                if (!ownerCtor) {
                    return;
                }
                ownerName = ownerName || js.getClassName(ownerCtor);
                removedProps.forEach(function (prop) {
                    function error() {
                        cc.errorID(1406, ownerName, prop);
                    }
                    js.getset(ownerCtor.prototype, prop, error, error);
                });
            };
            var markAsDeprecated = function markAsDeprecated(ownerCtor, deprecatedProps, ownerName) {
                if (!ownerCtor) {
                    return;
                }
                ownerName = ownerName || js.getClassName(ownerCtor);
                var descriptors = Object.getOwnPropertyDescriptors(ownerCtor.prototype);
                deprecatedProps.forEach(function (prop) {
                    var deprecatedProp = prop[0];
                    var newProp = prop[1];
                    var descriptor = descriptors[deprecatedProp];
                    js.getset(ownerCtor.prototype, deprecatedProp, function () {
                        cc.warnID(1400, ownerName + '.' + deprecatedProp, ownerName + '.' + newProp);
                        return descriptor.get.call(this);
                    }, function (v) {
                        cc.warnID(1400, ownerName + '.' + deprecatedProp, ownerName + '.' + newProp);
                        descriptor.set.call(this, v);
                    });
                });
            };
            var markAsRemovedInObject = function markAsRemovedInObject(ownerObj, removedProps, ownerName) {
                if (!ownerObj) {
                    return;
                }
                removedProps.forEach(function (prop) {
                    function error() {
                        cc.errorID(1406, ownerName, prop);
                    }
                    js.getset(ownerObj, prop, error);
                });
            };
            var provideClearError = function provideClearError(owner, obj, ownerName) {
                if (!owner) {
                    return;
                }
                var className = ownerName || cc.js.getClassName(owner);
                var Info = 'Sorry, ' + className + '.%s is removed, please use %s instead.';
                var _loop = function _loop() {
                    function define(prop, getset) {
                        function accessor(newProp) {
                            cc.error(Info, prop, newProp);
                        }
                        if (!Array.isArray(getset)) {
                            getset = getset.split(',').map(function (x) {
                                return x.trim();
                            });
                        }
                        try {
                            js.getset(owner, prop, accessor.bind(null, getset[0]), getset[1] && accessor.bind(null, getset[1]));
                        } catch (e) {
                        }
                    }
                    getset = obj[prop];
                    if (prop[0] === '*') {
                        etProp = prop.slice(1);
                        define('g' + etProp, getset);
                        define('s' + etProp, getset);
                    } else {
                        prop.split(',').map(function (x) {
                            return x.trim();
                        }).forEach(function (x) {
                            define(x, getset);
                        });
                    }
                };
                for (var prop in obj) {
                    var getset;
                    var etProp;
                    _loop();
                }
            };
            var markFunctionWarning = function markFunctionWarning(ownerCtor, obj, ownerName) {
                if (!ownerCtor) {
                    return;
                }
                ownerName = ownerName || js.getClassName(ownerCtor);
                for (var prop in obj) {
                    (function () {
                        var propName = prop;
                        var originFunc = ownerCtor[propName];
                        if (!originFunc)
                            return;
                        function warn() {
                            cc.warn('Sorry, %s.%s is deprecated. Please use %s instead', ownerName, propName, obj[propName]);
                            return originFunc.apply(this, arguments);
                        }
                        ownerCtor[propName] = warn;
                    }());
                }
            };
            js.get(cc, 'info', function () {
                cc.warnID(1400, 'cc.info', 'cc.log');
                return cc.log;
            });
            js.get(cc, 'spriteFrameCache', function () {
                cc.errorID(1404);
            });
            js.get(cc.SpriteFrame.prototype, '_textureLoaded', function () {
                cc.errorID(1400, 'spriteFrame._textureLoaded', 'spriteFrame.textureLoaded()');
                return this.textureLoaded();
            });
            markAsRemoved(cc.SpriteFrame, ['addLoadedEventListener']);
            markFunctionWarning(cc.Sprite.prototype, {
                setState: 'cc.Sprite.setMaterial',
                getState: 'cc.Sprite.getMaterial'
            }, 'cc.Sprite');
            js.get(cc.SpriteFrame.prototype, 'clearTexture', function () {
                cc.warnID(1406, 'cc.SpriteFrame', 'clearTexture');
                return function () {
                };
            });
            js.get(cc, 'textureCache', function () {
                cc.errorID(1406, 'cc', 'textureCache');
            });
            var Texture2D = cc.Texture2D;
            js.obsolete(Texture2D.prototype, 'texture.releaseTexture', 'texture.destroy');
            js.get(Texture2D.prototype, 'getName', function () {
                cc.warnID(1400, 'texture.getName()', 'texture._glID');
                return function () {
                    return this._glID || null;
                };
            });
            js.get(Texture2D.prototype, 'isLoaded', function () {
                cc.errorID(1400, 'texture.isLoaded function', 'texture.loaded property');
                return function () {
                    return this.loaded;
                };
            });
            js.get(Texture2D.prototype, 'setAntiAliasTexParameters', function () {
                cc.warnID(1400, 'texture.setAntiAliasTexParameters()', 'texture.setFilters(cc.Texture2D.Filter.LINEAR, cc.Texture2D.Filter.LINEAR)');
                return function () {
                    this.setFilters(Texture2D.Filter.LINEAR, Texture2D.Filter.LINEAR);
                };
            });
            js.get(Texture2D.prototype, 'setAliasTexParameters', function () {
                cc.warnID(1400, 'texture.setAntiAliasTexParameters()', 'texture.setFilters(cc.Texture2D.Filter.NEAREST, cc.Texture2D.Filter.NEAREST)');
                return function () {
                    this.setFilters(Texture2D.Filter.NEAREST, Texture2D.Filter.NEAREST);
                };
            });
            markAsRemovedInObject(cc.macro, [
                'ENABLE_GL_STATE_CACHE',
                'FIX_ARTIFACTS_BY_STRECHING_TEXEL'
            ], 'cc.macro');
            provideClearError(cc.macro, {
                PI: 'Math.PI',
                PI2: 'Math.PI*2',
                FLT_MAX: 'Number.MAX_VALUE',
                FLT_MIN: 'Number.MIN_VALUE',
                UINT_MAX: 'Number.MAX_SAFE_INTEGER'
            }, 'cc.macro');
            markAsRemovedInObject(cc.game, ['CONFIG_KEY'], 'cc.game');
            markAsRemovedInObject(cc.sys, [
                'dumpRoot',
                'cleanScript'
            ], 'cc.sys');
            provideClearError(cc.Director, {
                EVENT_PROJECTION_CHANGED: '',
                EVENT_BEFORE_VISIT: 'EVENT_AFTER_UPDATE',
                EVENT_AFTER_VISIT: 'EVENT_BEFORE_DRAW'
            }, 'cc.Director');
            markFunctionWarning(cc.Director.prototype, {
                convertToGL: 'cc.view.convertToLocationInView',
                convertToUI: '',
                getWinSize: 'cc.winSize',
                getWinSizeInPixels: 'cc.winSize',
                getVisibleSize: 'cc.view.getVisibleSize',
                getVisibleOrigin: 'cc.view.getVisibleOrigin',
                purgeCachedData: 'cc.loader.releaseAll',
                setDepthTest: 'cc.Camera.main.depth',
                setClearColor: 'cc.Camera.main.backgroundColor',
                getRunningScene: 'cc.director.getScene',
                getAnimationInterval: 'cc.game.getFrameRate',
                setAnimationInterval: 'cc.game.setFrameRate',
                isDisplayStats: 'cc.debug.isDisplayStats',
                setDisplayStats: 'cc.debug.setDisplayStats',
                stopAnimation: 'cc.game.pause',
                startAnimation: 'cc.game.resume'
            }, 'cc.Director');
            markAsRemoved(cc.Director, [
                'pushScene',
                'popScene',
                'popToRootScene',
                'popToSceneStackLevel',
                'setProjection',
                'getProjection'
            ], 'cc.Director');
            provideClearError(cc.Scheduler, {
                scheduleCallbackForTarget: 'schedule',
                scheduleUpdateForTarget: 'scheduleUpdate',
                unscheduleCallbackForTarget: 'unschedule',
                unscheduleUpdateForTarget: 'unscheduleUpdate',
                unscheduleAllCallbacksForTarget: 'unscheduleAllForTarget',
                unscheduleAllCallbacks: 'unscheduleAll',
                unscheduleAllCallbacksWithMinPriority: 'unscheduleAllWithMinPriority'
            }, 'cc.Scheduler');
            provideClearError(cc.view, {
                adjustViewPort: 'adjustViewportMeta',
                setViewPortInPoints: 'setViewportInPoints',
                getViewPortRect: 'getViewportRect'
            }, 'cc.view');
            markAsRemovedInObject(cc.view, [
                'isViewReady',
                'setTargetDensityDPI',
                'getTargetDensityDPI',
                'setFrameZoomFactor',
                'canSetContentScaleFactor',
                'setContentTranslateLeftTop',
                'getContentTranslateLeftTop',
                'setViewName',
                'getViewName'
            ], 'cc.view');
            markAsRemoved(cc.Pipeline, [
                'flowInDeps',
                'getItems'
            ], 'cc.loader');
            markAsRemoved(cc.PhysicsManager, [
                'attachDebugDrawToCamera',
                'detachDebugDrawFromCamera'
            ]);
            markAsRemoved(cc.CollisionManager, [
                'attachDebugDrawToCamera',
                'detachDebugDrawFromCamera'
            ]);
            provideClearError(cc._BaseNode.prototype, {
                'tag': 'name',
                'getTag': 'name',
                'setTag': 'name',
                'getChildByTag': 'getChildByName',
                'removeChildByTag': 'getChildByName(name).destroy()'
            });
            markAsRemoved(cc.Node, [
                '_cascadeColorEnabled',
                'cascadeColor',
                'isCascadeColorEnabled',
                'setCascadeColorEnabled',
                '_cascadeOpacityEnabled',
                'cascadeOpacity',
                'isCascadeOpacityEnabled',
                'setCascadeOpacityEnabled',
                'opacityModifyRGB',
                'isOpacityModifyRGB',
                'setOpacityModifyRGB',
                'ignoreAnchor',
                'isIgnoreAnchorPointForPosition',
                'ignoreAnchorPointForPosition',
                'isRunning',
                '_sgNode'
            ]);
            markFunctionWarning(cc.Node.prototype, {
                getNodeToParentTransform: 'getLocalMatrix',
                getNodeToParentTransformAR: 'getLocalMatrix',
                getNodeToWorldTransform: 'getWorldMatrix',
                getNodeToWorldTransformAR: 'getWorldMatrix',
                getParentToNodeTransform: 'getLocalMatrix',
                getWorldToNodeTransform: 'getWorldMatrix',
                convertTouchToNodeSpace: 'convertToNodeSpaceAR',
                convertTouchToNodeSpaceAR: 'convertToNodeSpaceAR',
                convertToWorldSpace: 'convertToWorldSpaceAR',
                convertToNodeSpace: 'convertToNodeSpaceAR'
            });
            provideClearError(cc.Node.prototype, {
                getRotationX: 'rotationX',
                setRotationX: 'rotationX',
                getRotationY: 'rotationY',
                setRotationY: 'rotationY',
                getPositionX: 'x',
                setPositionX: 'x',
                getPositionY: 'y',
                setPositionY: 'y',
                getSkewX: 'skewX',
                setSkewX: 'skewX',
                getSkewY: 'skewY',
                setSkewY: 'skewY',
                getScaleX: 'scaleX',
                setScaleX: 'scaleX',
                getScaleY: 'scaleY',
                setScaleY: 'scaleY',
                getOpacity: 'opacity',
                setOpacity: 'opacity',
                getColor: 'color',
                setColor: 'color',
                getLocalZOrder: 'zIndex',
                setLocalZOrder: 'zIndex'
            });
            markAsRemoved(cc.Component, ['isRunning']);
            provideClearError(cc.Sprite.prototype, {
                setInsetLeft: 'cc.SpriteFrame insetLeft',
                setInsetRight: 'cc.SpriteFrame insetRight',
                setInsetTop: 'cc.SpriteFrame insetTop',
                setInsetBottom: 'cc.SpriteFrame insetBottom'
            });
            markFunctionWarning(cc.Camera.prototype, {
                getNodeToCameraTransform: 'getWorldToScreenMatrix2D',
                getCameraToWorldPoint: 'getScreenToWorldPoint',
                getWorldToCameraPoint: 'getWorldToScreenPoint',
                getCameraToWorldMatrix: 'getScreenToWorldMatrix2D',
                getWorldToCameraMatrix: 'getWorldToScreenMatrix2D'
            });
            markAsRemoved(cc.Camera, [
                'addTarget',
                'removeTarget',
                'getTargets'
            ]);
            var ERR = '"%s" is not defined in the Scene, it is only defined in normal nodes.';
            CC_EDITOR || Object.defineProperties(cc.Scene.prototype, {
                active: {
                    get: function get() {
                        cc.error(ERR, 'active');
                        return true;
                    },
                    set: function set() {
                        cc.error(ERR, 'active');
                    }
                },
                activeInHierarchy: {
                    get: function get() {
                        cc.error(ERR, 'activeInHierarchy');
                        return true;
                    }
                },
                getComponent: {
                    get: function get() {
                        cc.error(ERR, 'getComponent');
                        return function () {
                            return null;
                        };
                    }
                },
                addComponent: {
                    get: function get() {
                        cc.error(ERR, 'addComponent');
                        return function () {
                            return null;
                        };
                    }
                }
            });
            provideClearError(cc, {
                affineTransformMake: 'cc.AffineTransform.create',
                affineTransformMakeIdentity: 'cc.AffineTransform.identity',
                affineTransformClone: 'cc.AffineTransform.clone',
                affineTransformConcat: 'cc.AffineTransform.concat',
                affineTransformConcatIn: 'cc.AffineTransform.concat',
                affineTransformInvert: 'cc.AffineTransform.invert',
                affineTransformInvertIn: 'cc.AffineTransform.invert',
                affineTransformInvertOut: 'cc.AffineTransform.invert',
                affineTransformEqualToTransform: 'cc.AffineTransform.equal',
                pointApplyAffineTransform: 'cc.AffineTransform.transformVec2',
                sizeApplyAffineTransform: 'cc.AffineTransform.transformSize',
                rectApplyAffineTransform: 'cc.AffineTransform.transformRect',
                obbApplyAffineTransform: 'cc.AffineTransform.transformObb',
                pointEqualToPoint: 'cc.Vec2 equals',
                sizeEqualToSize: 'cc.Size equals',
                rectEqualToRect: 'rectA.equals(rectB)',
                rectContainsRect: 'rectA.containsRect(rectB)',
                rectContainsPoint: 'rect.contains(vec2)',
                rectOverlapsRect: 'rectA.intersects(rectB)',
                rectIntersectsRect: 'rectA.intersects(rectB)',
                rectIntersection: 'rectA.intersection(intersection, rectB)',
                rectUnion: 'rectA.union(union, rectB)',
                rectGetMaxX: 'rect.xMax',
                rectGetMidX: 'rect.center.x',
                rectGetMinX: 'rect.xMin',
                rectGetMaxY: 'rect.yMax',
                rectGetMidY: 'rect.center.y',
                rectGetMinY: 'rect.yMin',
                colorEqual: 'colorA.equals(colorB)',
                hexToColor: 'color.fromHEX(hexColor)',
                colorToHex: 'color.toHEX()',
                TextAlignment: 'cc.macro.TextAlignment',
                VerticalTextAlignment: 'cc.macro.VerticalTextAlignment',
                pNeg: 'p.neg()',
                pAdd: 'p1.add(p2)',
                pSub: 'p1.sub(p2)',
                pMult: 'p.mul(factor)',
                pMidpoint: 'p1.add(p2).mul(0.5)',
                pDot: 'p1.dot(p2)',
                pCross: 'p1.cross(p2)',
                pPerp: 'p.rotate(-90 * Math.PI / 180)',
                pRPerp: 'p.rotate(90 * Math.PI / 180)',
                pProject: 'p1.project(p2)',
                pLengthSQ: 'p.magSqr()',
                pDistanceSQ: 'p1.sub(p2).magSqr()',
                pLength: 'p.mag()',
                pDistance: 'p1.sub(p2).mag()',
                pNormalize: 'p.normalize()',
                pForAngle: 'cc.v2(Math.cos(a), Math.sin(a))',
                pToAngle: 'Math.atan2(v.y, v.x)',
                pZeroIn: 'p.x = p.y = 0',
                pIn: 'p1.set(p2)',
                pMultIn: 'p.mulSelf(factor)',
                pSubIn: 'p1.subSelf(p2)',
                pAddIn: 'p1.addSelf(p2)',
                pNormalizeIn: 'p.normalizeSelf()',
                pSameAs: 'p1.equals(p2)',
                pAngle: 'v1.angle(v2)',
                pAngleSigned: 'v1.signAngle(v2)',
                pRotateByAngle: 'p.rotate(radians)',
                pCompMult: 'v1.dot(v2)',
                pFuzzyEqual: 'v1.fuzzyEquals(v2, tolerance)',
                pLerp: 'p.lerp(endPoint, ratio)',
                pClamp: 'p.clampf(min_inclusive, max_inclusive)',
                rand: 'Math.random() * 0xffffff',
                randomMinus1To1: '(Math.random() - 0.5) * 2',
                container: 'cc.game.container',
                _canvas: 'cc.game.canvas',
                _renderType: 'cc.game.renderType',
                _getError: 'cc.debug.getError',
                _initDebugSetting: 'cc.debug._resetDebugSetting',
                DebugMode: 'cc.debug.DebugMode'
            }, 'cc');
            markAsRemovedInObject(cc, [
                'blendFuncDisable',
                'pFromSize',
                'pCompOp',
                'pIntersectPoint',
                'pSegmentIntersect',
                'pLineIntersect',
                'obbApplyMatrix',
                'getImageFormatByData',
                'initEngine'
            ], 'cc');
            markFunctionWarning(cc, { p: 'cc.v2' }, 'cc');
            provideClearError(cc.Rect, {
                contain: 'rectA.contains(rectB)',
                transformMat4: 'rect.transformMat4(out, mat4)'
            });
            provideClearError(cc.Color, {
                rgb2hsv: 'color.toHSV()',
                hsv2rgb: 'color.fromHSV(h, s, v)'
            });
            js.get(cc, 'lerp', function () {
                cc.warnID(1400, 'cc.lerp', 'cc.misc.lerp');
                return cc.misc.lerp;
            });
            js.get(cc, 'random0To1', function () {
                cc.warnID(1400, 'cc.random0To1', 'Math.random');
                return Math.random;
            });
            js.get(cc, 'degreesToRadians', function () {
                cc.warnID(1400, 'cc.degreesToRadians', 'cc.misc.degreesToRadians');
                return cc.misc.degreesToRadians;
            });
            js.get(cc, 'radiansToDegrees', function () {
                cc.warnID(1400, 'cc.radiansToDegrees', 'cc.misc.radiansToDegrees');
                return cc.misc.radiansToDegrees;
            });
            js.get(cc, 'clampf', function () {
                cc.warnID(1400, 'cc.clampf', 'cc.misc.clampf');
                return cc.misc.clampf;
            });
            js.get(cc, 'clamp01', function () {
                cc.warnID(1400, 'cc.clamp01', 'cc.misc.clamp01');
                return cc.misc.clamp01;
            });
            js.get(cc, 'ImageFormat', function () {
                cc.warnID(1400, 'cc.ImageFormat', 'cc.macro.ImageFormat');
                return cc.macro.ImageFormat;
            });
            js.get(cc, 'KEY', function () {
                cc.warnID(1400, 'cc.KEY', 'cc.macro.KEY');
                return cc.macro.KEY;
            });
            js.get(cc, 'Easing', function () {
                cc.warnID(1400, 'cc.Easing', 'cc.easing');
                return cc.easing;
            });
            js.get(cc, 'isChildClassOf', function () {
                cc.errorID(1400, 'cc.isChildClassOf', 'cc.js.isChildClassOf');
                return cc.js.isChildClassOf;
            });
            if (typeof dragonBones !== 'undefined') {
                js.obsolete(dragonBones.CCFactory, 'dragonBones.CCFactory.getFactory', 'getInstance');
            }
            cc.renderer.renderEngine = {
                get gfx() {
                    cc.warnID(1400, 'cc.renderer.renderEngine.gfx', 'cc.gfx');
                    return cc.gfx;
                },
                get math() {
                    cc.warnID(1400, 'cc.renderer.renderEngine.math', 'cc.vmath');
                    return cc.vmath;
                },
                get InputAssembler() {
                    cc.warnID(1400, 'cc.renderer.renderEngine.InputAssembler', 'cc.renderer.InputAssembler');
                    return cc.renderer.InputAssembler;
                }
            };
        }
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlcHJlY2F0ZWQuanMiLCIvVXNlcnMvZ2FveWFuZy9Xb3JrU3BhY2Uvam95Y2FzdGxlL2JpbmdvL2NsaWVudC9iaW5nby9lbmdpbmUvY29jb3MyZC9kZXByZWNhdGVkLmpzIl0sIm5hbWVzIjpbImpzIiwiY2MiLCJDQ19ERUJVRyIsImRlcHJlY2F0ZUVudW0iLCJvYmoiLCJvbGRQYXRoIiwibmV3UGF0aCIsImhhc1R5cGVQcmVmaXhCZWZvcmUiLCJDQ19TVVBQT1JUX0pJVCIsImVudW1EZWYiLCJGdW5jdGlvbiIsImVudHJpZXMiLCJFbnVtIiwiZ2V0TGlzdCIsImRlbGltaXRlciIsImkiLCJsZW5ndGgiLCJlbnRyeSIsIm5hbWUiLCJvbGRQcm9wTmFtZSIsIm9sZFR5cGVOYW1lIiwic3BsaXQiLCJzbGljZSIsImdldCIsImVycm9ySUQiLCJiaW5kIiwibWFya0FzUmVtb3ZlZCIsIm93bmVyQ3RvciIsInJlbW92ZWRQcm9wcyIsIm93bmVyTmFtZSIsImdldENsYXNzTmFtZSIsImZvckVhY2giLCJwcm9wIiwiZXJyb3IiLCJnZXRzZXQiLCJwcm90b3R5cGUiLCJtYXJrQXNEZXByZWNhdGVkIiwiZGVwcmVjYXRlZFByb3BzIiwiZGVzY3JpcHRvcnMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVwcmVjYXRlZFByb3AiLCJuZXdQcm9wIiwiZGVzY3JpcHRvciIsIndhcm5JRCIsImNhbGwiLCJ2Iiwic2V0IiwibWFya0FzUmVtb3ZlZEluT2JqZWN0Iiwib3duZXJPYmoiLCJwcm92aWRlQ2xlYXJFcnJvciIsIm93bmVyIiwiY2xhc3NOYW1lIiwiSW5mbyIsImRlZmluZSIsImFjY2Vzc29yIiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwieCIsInRyaW0iLCJlIiwiZXRQcm9wIiwibWFya0Z1bmN0aW9uV2FybmluZyIsInByb3BOYW1lIiwib3JpZ2luRnVuYyIsIndhcm4iLCJhcHBseSIsImFyZ3VtZW50cyIsImxvZyIsIlNwcml0ZUZyYW1lIiwidGV4dHVyZUxvYWRlZCIsIlNwcml0ZSIsInNldFN0YXRlIiwiZ2V0U3RhdGUiLCJUZXh0dXJlMkQiLCJvYnNvbGV0ZSIsIl9nbElEIiwibG9hZGVkIiwic2V0RmlsdGVycyIsIkZpbHRlciIsIkxJTkVBUiIsIk5FQVJFU1QiLCJtYWNybyIsIlBJIiwiUEkyIiwiRkxUX01BWCIsIkZMVF9NSU4iLCJVSU5UX01BWCIsImdhbWUiLCJzeXMiLCJEaXJlY3RvciIsIkVWRU5UX1BST0pFQ1RJT05fQ0hBTkdFRCIsIkVWRU5UX0JFRk9SRV9WSVNJVCIsIkVWRU5UX0FGVEVSX1ZJU0lUIiwiY29udmVydFRvR0wiLCJjb252ZXJ0VG9VSSIsImdldFdpblNpemUiLCJnZXRXaW5TaXplSW5QaXhlbHMiLCJnZXRWaXNpYmxlU2l6ZSIsImdldFZpc2libGVPcmlnaW4iLCJwdXJnZUNhY2hlZERhdGEiLCJzZXREZXB0aFRlc3QiLCJzZXRDbGVhckNvbG9yIiwiZ2V0UnVubmluZ1NjZW5lIiwiZ2V0QW5pbWF0aW9uSW50ZXJ2YWwiLCJzZXRBbmltYXRpb25JbnRlcnZhbCIsImlzRGlzcGxheVN0YXRzIiwic2V0RGlzcGxheVN0YXRzIiwic3RvcEFuaW1hdGlvbiIsInN0YXJ0QW5pbWF0aW9uIiwiU2NoZWR1bGVyIiwic2NoZWR1bGVDYWxsYmFja0ZvclRhcmdldCIsInNjaGVkdWxlVXBkYXRlRm9yVGFyZ2V0IiwidW5zY2hlZHVsZUNhbGxiYWNrRm9yVGFyZ2V0IiwidW5zY2hlZHVsZVVwZGF0ZUZvclRhcmdldCIsInVuc2NoZWR1bGVBbGxDYWxsYmFja3NGb3JUYXJnZXQiLCJ1bnNjaGVkdWxlQWxsQ2FsbGJhY2tzIiwidW5zY2hlZHVsZUFsbENhbGxiYWNrc1dpdGhNaW5Qcmlvcml0eSIsInZpZXciLCJhZGp1c3RWaWV3UG9ydCIsInNldFZpZXdQb3J0SW5Qb2ludHMiLCJnZXRWaWV3UG9ydFJlY3QiLCJQaXBlbGluZSIsIlBoeXNpY3NNYW5hZ2VyIiwiQ29sbGlzaW9uTWFuYWdlciIsIl9CYXNlTm9kZSIsIk5vZGUiLCJnZXROb2RlVG9QYXJlbnRUcmFuc2Zvcm0iLCJnZXROb2RlVG9QYXJlbnRUcmFuc2Zvcm1BUiIsImdldE5vZGVUb1dvcmxkVHJhbnNmb3JtIiwiZ2V0Tm9kZVRvV29ybGRUcmFuc2Zvcm1BUiIsImdldFBhcmVudFRvTm9kZVRyYW5zZm9ybSIsImdldFdvcmxkVG9Ob2RlVHJhbnNmb3JtIiwiY29udmVydFRvdWNoVG9Ob2RlU3BhY2UiLCJjb252ZXJ0VG91Y2hUb05vZGVTcGFjZUFSIiwiY29udmVydFRvV29ybGRTcGFjZSIsImNvbnZlcnRUb05vZGVTcGFjZSIsImdldFJvdGF0aW9uWCIsInNldFJvdGF0aW9uWCIsImdldFJvdGF0aW9uWSIsInNldFJvdGF0aW9uWSIsImdldFBvc2l0aW9uWCIsInNldFBvc2l0aW9uWCIsImdldFBvc2l0aW9uWSIsInNldFBvc2l0aW9uWSIsImdldFNrZXdYIiwic2V0U2tld1giLCJnZXRTa2V3WSIsInNldFNrZXdZIiwiZ2V0U2NhbGVYIiwic2V0U2NhbGVYIiwiZ2V0U2NhbGVZIiwic2V0U2NhbGVZIiwiZ2V0T3BhY2l0eSIsInNldE9wYWNpdHkiLCJnZXRDb2xvciIsInNldENvbG9yIiwiZ2V0TG9jYWxaT3JkZXIiLCJzZXRMb2NhbFpPcmRlciIsIkNvbXBvbmVudCIsInNldEluc2V0TGVmdCIsInNldEluc2V0UmlnaHQiLCJzZXRJbnNldFRvcCIsInNldEluc2V0Qm90dG9tIiwiQ2FtZXJhIiwiZ2V0Tm9kZVRvQ2FtZXJhVHJhbnNmb3JtIiwiZ2V0Q2FtZXJhVG9Xb3JsZFBvaW50IiwiZ2V0V29ybGRUb0NhbWVyYVBvaW50IiwiZ2V0Q2FtZXJhVG9Xb3JsZE1hdHJpeCIsImdldFdvcmxkVG9DYW1lcmFNYXRyaXgiLCJFUlIiLCJDQ19FRElUT1IiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiU2NlbmUiLCJhY3RpdmUiLCJhY3RpdmVJbkhpZXJhcmNoeSIsImdldENvbXBvbmVudCIsImFkZENvbXBvbmVudCIsImFmZmluZVRyYW5zZm9ybU1ha2UiLCJhZmZpbmVUcmFuc2Zvcm1NYWtlSWRlbnRpdHkiLCJhZmZpbmVUcmFuc2Zvcm1DbG9uZSIsImFmZmluZVRyYW5zZm9ybUNvbmNhdCIsImFmZmluZVRyYW5zZm9ybUNvbmNhdEluIiwiYWZmaW5lVHJhbnNmb3JtSW52ZXJ0IiwiYWZmaW5lVHJhbnNmb3JtSW52ZXJ0SW4iLCJhZmZpbmVUcmFuc2Zvcm1JbnZlcnRPdXQiLCJhZmZpbmVUcmFuc2Zvcm1FcXVhbFRvVHJhbnNmb3JtIiwicG9pbnRBcHBseUFmZmluZVRyYW5zZm9ybSIsInNpemVBcHBseUFmZmluZVRyYW5zZm9ybSIsInJlY3RBcHBseUFmZmluZVRyYW5zZm9ybSIsIm9iYkFwcGx5QWZmaW5lVHJhbnNmb3JtIiwicG9pbnRFcXVhbFRvUG9pbnQiLCJzaXplRXF1YWxUb1NpemUiLCJyZWN0RXF1YWxUb1JlY3QiLCJyZWN0Q29udGFpbnNSZWN0IiwicmVjdENvbnRhaW5zUG9pbnQiLCJyZWN0T3ZlcmxhcHNSZWN0IiwicmVjdEludGVyc2VjdHNSZWN0IiwicmVjdEludGVyc2VjdGlvbiIsInJlY3RVbmlvbiIsInJlY3RHZXRNYXhYIiwicmVjdEdldE1pZFgiLCJyZWN0R2V0TWluWCIsInJlY3RHZXRNYXhZIiwicmVjdEdldE1pZFkiLCJyZWN0R2V0TWluWSIsImNvbG9yRXF1YWwiLCJoZXhUb0NvbG9yIiwiY29sb3JUb0hleCIsIlRleHRBbGlnbm1lbnQiLCJWZXJ0aWNhbFRleHRBbGlnbm1lbnQiLCJwTmVnIiwicEFkZCIsInBTdWIiLCJwTXVsdCIsInBNaWRwb2ludCIsInBEb3QiLCJwQ3Jvc3MiLCJwUGVycCIsInBSUGVycCIsInBQcm9qZWN0IiwicExlbmd0aFNRIiwicERpc3RhbmNlU1EiLCJwTGVuZ3RoIiwicERpc3RhbmNlIiwicE5vcm1hbGl6ZSIsInBGb3JBbmdsZSIsInBUb0FuZ2xlIiwicFplcm9JbiIsInBJbiIsInBNdWx0SW4iLCJwU3ViSW4iLCJwQWRkSW4iLCJwTm9ybWFsaXplSW4iLCJwU2FtZUFzIiwicEFuZ2xlIiwicEFuZ2xlU2lnbmVkIiwicFJvdGF0ZUJ5QW5nbGUiLCJwQ29tcE11bHQiLCJwRnV6enlFcXVhbCIsInBMZXJwIiwicENsYW1wIiwicmFuZCIsInJhbmRvbU1pbnVzMVRvMSIsImNvbnRhaW5lciIsIl9jYW52YXMiLCJfcmVuZGVyVHlwZSIsIl9nZXRFcnJvciIsIl9pbml0RGVidWdTZXR0aW5nIiwiRGVidWdNb2RlIiwicCIsIlJlY3QiLCJjb250YWluIiwidHJhbnNmb3JtTWF0NCIsIkNvbG9yIiwicmdiMmhzdiIsImhzdjJyZ2IiLCJtaXNjIiwibGVycCIsIk1hdGgiLCJyYW5kb20iLCJkZWdyZWVzVG9SYWRpYW5zIiwicmFkaWFuc1RvRGVncmVlcyIsImNsYW1wZiIsImNsYW1wMDEiLCJJbWFnZUZvcm1hdCIsIktFWSIsImVhc2luZyIsImlzQ2hpbGRDbGFzc09mIiwiZHJhZ29uQm9uZXMiLCJDQ0ZhY3RvcnkiLCJyZW5kZXJlciIsInJlbmRlckVuZ2luZSIsImdmeCIsIm1hdGgiLCJ2bWF0aCIsIklucHV0QXNzZW1ibGVyIl0sIm1hcHBpbmdzIjoiO0lBQUEsSUFBQSxPQUFBLEdBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQSxJQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUE7Ozs7Ozs7Ozs7Ozs7UUEwQkEsSUFBSUEsRUFBQUEsR0FBS0MsRUFBQUEsQ0FBR0QsRUFBWjtRQUVBLElBQUlFLFFBQUosRUFBYztBQUFBLFlBQUEsSUFFREMsYUFBQUEsR0FBVCxTQUFTQSxhQUFULENBQXdCQyxHQUF4QixFQUE2QkMsT0FBN0IsRUFBc0NDLE9BQXRDLEVBQStDQyxtQkFBL0MsRUFBb0U7QUFBQSxnQkFDaEUsSUFBSSxDQUFDQyxjQUFMLEVBQXFCO0FBQUEsb0JBQ2pCLE9BRGlCO0FBQUEsaUJBRDJDO0FBQUEsZ0JBSWhFRCxtQkFBQUEsR0FBc0JBLG1CQUFBQSxLQUF3QixLQUE5Q0EsQ0FKZ0U7QUFBQSxnQkFLaEUsSUFBSUUsT0FBQUEsR0FBVUMsUUFBQUEsQ0FBUyxZQUFZSixPQUFyQkksR0FBZCxDQUxnRTtBQUFBLGdC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RUFBQUEsQ0FBRzJDLE1BQUgzQyxDQUFVLElBQVZBLEVBQWdCLDhCQUFoQkEsRUFBZ0QsUUFBaERBLEVBRE87QUFBQSxvQkFFUCxPQUFPQSxFQUFBQSxDQUFHaVIsR0FBVixDQUZPO0FBQUEsaUJBRFk7QUFBQSxnQkFLdkIsSUFBSUMsSUFBSixHQUFZO0FBQUEsb0JBQ1JsUixFQUFBQSxDQUFHMkMsTUFBSDNDLENBQVUsSUFBVkEsRUFBZ0IsK0JBQWhCQSxFQUFpRCxVQUFqREEsRUFEUTtBQUFBLG9CQUVSLE9BQU9BLEVBQUFBLENBQUdtUixLQUFWLENBRlE7QUFBQSxpQkFMVztBQUFBLGdCQVN2QixJQUFJQyxjQUFKLEdBQXNCO0FBQUEsb0JBQ2xCcFIsRUFBQUEsQ0FBRzJDLE1BQUgzQyxDQUFVLElBQVZBLEVBQWdCLHlDQUFoQkEsRUFBMkQsNEJBQTNEQSxFQURrQjtBQUFBLG9CQUVsQixPQUFPQSxFQUFBQSxDQUFHK1EsUUFBSC9RLENBQVlvUixjQUFuQixDQUZrQjtBQUFBLGlCQVRDO0FBQUEsYUFBM0JwUixDQS9sQlU7QUFBQSIsImZpbGUiOiJkZXByZWNhdGVkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcbiBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxuXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuXG52YXIganMgPSBjYy5qcztcblxuaWYgKENDX0RFQlVHKSB7XG5cbiAgICBmdW5jdGlvbiBkZXByZWNhdGVFbnVtIChvYmosIG9sZFBhdGgsIG5ld1BhdGgsIGhhc1R5cGVQcmVmaXhCZWZvcmUpIHtcbiAgICAgICAgaWYgKCFDQ19TVVBQT1JUX0pJVCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGhhc1R5cGVQcmVmaXhCZWZvcmUgPSBoYXNUeXBlUHJlZml4QmVmb3JlICE9PSBmYWxzZTtcbiAgICAgICAgdmFyIGVudW1EZWYgPSBGdW5jdGlvbigncmV0dXJuICcgKyBuZXdQYXRoKSgpO1xuICAgICAgICB2YXIgZW50cmllcyA9IGNjLkVudW0uZ2V0TGlzdChlbnVtRGVmKTtcbiAgICAgICAgdmFyIGRlbGltaXRlciA9IGhhc1R5cGVQcmVmaXhCZWZvcmUgPyAnXycgOiAnLic7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZW50cmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpXS5uYW1lO1xuICAgICAgICAgICAgdmFyIG9sZFByb3BOYW1lO1xuICAgICAgICAgICAgaWYgKGhhc1R5cGVQcmVmaXhCZWZvcmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2xkVHlwZU5hbWUgPSBvbGRQYXRoLnNwbGl0KCcuJykuc2xpY2UoLTEpWzBdO1xuICAgICAgICAgICAgICAgIG9sZFByb3BOYW1lID0gb2xkVHlwZU5hbWUgKyAnXycgKyBlbnRyeTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG9sZFByb3BOYW1lID0gZW50cnk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBqcy5nZXQob2JqLCBvbGRQcm9wTmFtZSwgZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgY2MuZXJyb3JJRCgxNDAwLCBvbGRQYXRoICsgZGVsaW1pdGVyICsgZW50cnksIG5ld1BhdGggKyAnLicgKyBlbnRyeSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVudW1EZWZbZW50cnldO1xuICAgICAgICAgICAgfS5iaW5kKG51bGwsIGVudHJ5KSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXJrQXNSZW1vdmVkIChvd25lckN0b3IsIHJlbW92ZWRQcm9wcywgb3duZXJOYW1lKSB7XG4gICAgICAgIGlmICghb3duZXJDdG9yKSB7XG4gICAgICAgICAgICAvLyDlj6/og73ooqvoo4HliarkuoZcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBvd25lck5hbWUgPSBvd25lck5hbWUgfHwganMuZ2V0Q2xhc3NOYW1lKG93bmVyQ3Rvcik7XG4gICAgICAgIHJlbW92ZWRQcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBlcnJvciAoKSB7XG4gICAgICAgICAgICAgICAgY2MuZXJyb3JJRCgxNDA2LCBvd25lck5hbWUsIHByb3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAganMuZ2V0c2V0KG93bmVyQ3Rvci5wcm90b3R5cGUsIHByb3AsIGVycm9yLCBlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hcmtBc0RlcHJlY2F0ZWQgKG93bmVyQ3RvciwgZGVwcmVjYXRlZFByb3BzLCBvd25lck5hbWUpIHtcbiAgICAgICAgaWYgKCFvd25lckN0b3IpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBvd25lck5hbWUgPSBvd25lck5hbWUgfHwganMuZ2V0Q2xhc3NOYW1lKG93bmVyQ3Rvcik7XG4gICAgICAgIGxldCBkZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG93bmVyQ3Rvci5wcm90b3R5cGUpO1xuICAgICAgICBkZXByZWNhdGVkUHJvcHMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgICAgbGV0IGRlcHJlY2F0ZWRQcm9wID0gcHJvcFswXTtcbiAgICAgICAgICAgIGxldCBuZXdQcm9wID0gcHJvcFsxXTtcbiAgICAgICAgICAgIGxldCBkZXNjcmlwdG9yID0gZGVzY3JpcHRvcnNbZGVwcmVjYXRlZFByb3BdO1xuICAgICAgICAgICAganMuZ2V0c2V0KG93bmVyQ3Rvci5wcm90b3R5cGUsIGRlcHJlY2F0ZWRQcm9wLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY2Mud2FybklEKDE0MDAsIGAke293bmVyTmFtZX0uJHtkZXByZWNhdGVkUHJvcH1gLCBgJHtvd25lck5hbWV9LiR7bmV3UHJvcH1gKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVzY3JpcHRvci5nZXQuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICAgICAgY2Mud2FybklEKDE0MDAsIGAke293bmVyTmFtZX0uJHtkZXByZWNhdGVkUHJvcH1gLCBgJHtvd25lck5hbWV9LiR7bmV3UHJvcH1gKTtcbiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLnNldC5jYWxsKHRoaXMsIHYpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFya0FzUmVtb3ZlZEluT2JqZWN0IChvd25lck9iaiwgcmVtb3ZlZFByb3BzLCBvd25lck5hbWUpIHtcbiAgICAgICAgaWYgKCFvd25lck9iaikge1xuICAgICAgICAgICAgLy8g5Y+v6IO96KKr6KOB5Ymq5LqGXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVtb3ZlZFByb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGVycm9yICgpIHtcbiAgICAgICAgICAgICAgICBjYy5lcnJvcklEKDE0MDYsIG93bmVyTmFtZSwgcHJvcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBqcy5nZXRzZXQob3duZXJPYmosIHByb3AsIGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJvdmlkZUNsZWFyRXJyb3IgKG93bmVyLCBvYmosIG93bmVyTmFtZSkge1xuICAgICAgICBpZiAoIW93bmVyKSB7XG4gICAgICAgICAgICAvLyDlj6/og73ooqvoo4HliarkuoZcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2xhc3NOYW1lID0gb3duZXJOYW1lIHx8IGNjLmpzLmdldENsYXNzTmFtZShvd25lcik7XG4gICAgICAgIHZhciBJbmZvID0gJ1NvcnJ5LCAnICsgY2xhc3NOYW1lICsgJy4lcyBpcyByZW1vdmVkLCBwbGVhc2UgdXNlICVzIGluc3RlYWQuJztcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBvYmopIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlZmluZSAocHJvcCwgZ2V0c2V0KSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gYWNjZXNzb3IgKG5ld1Byb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgY2MuZXJyb3IoSW5mbywgcHJvcCwgbmV3UHJvcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShnZXRzZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldHNldCA9IGdldHNldC5zcGxpdCgnLCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHgudHJpbSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGpzLmdldHNldChvd25lciwgcHJvcCwgYWNjZXNzb3IuYmluZChudWxsLCBnZXRzZXRbMF0pLCBnZXRzZXRbMV0gJiYgYWNjZXNzb3IuYmluZChudWxsLCBnZXRzZXRbMV0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZ2V0c2V0ID0gb2JqW3Byb3BdO1xuICAgICAgICAgICAgaWYgKHByb3BbMF0gPT09ICcqJykge1xuICAgICAgICAgICAgICAgIC8vIGdldCBzZXRcbiAgICAgICAgICAgICAgICB2YXIgZXRQcm9wID0gcHJvcC5zbGljZSgxKTtcbiAgICAgICAgICAgICAgICBkZWZpbmUoJ2cnICsgZXRQcm9wLCBnZXRzZXQpO1xuICAgICAgICAgICAgICAgIGRlZmluZSgncycgKyBldFByb3AsIGdldHNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwcm9wLnNwbGl0KCcsJylcbiAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHgudHJpbSgpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5lKHgsIGdldHNldCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFya0Z1bmN0aW9uV2FybmluZyAob3duZXJDdG9yLCBvYmosIG93bmVyTmFtZSkge1xuICAgICAgICBpZiAoIW93bmVyQ3Rvcikge1xuICAgICAgICAgICAgLy8g5Y+v6IO96KKr6KOB5Ymq5LqGXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgb3duZXJOYW1lID0gb3duZXJOYW1lIHx8IGpzLmdldENsYXNzTmFtZShvd25lckN0b3IpO1xuICAgICAgICBmb3IgKHZhciBwcm9wIGluIG9iaikge1xuICAgICAgICAgICAgKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgdmFyIHByb3BOYW1lID0gcHJvcDtcbiAgICAgICAgICAgICAgICB2YXIgb3JpZ2luRnVuYyA9IG93bmVyQ3Rvcltwcm9wTmFtZV07XG4gICAgICAgICAgICAgICAgaWYgKCFvcmlnaW5GdW5jKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB3YXJuICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY2Mud2FybignU29ycnksICVzLiVzIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgJXMgaW5zdGVhZCcsIG93bmVyTmFtZSwgcHJvcE5hbWUsIG9ialtwcm9wTmFtZV0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luRnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG93bmVyQ3Rvcltwcm9wTmFtZV0gPSB3YXJuO1xuICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyByZW1vdmUgY2MuaW5mb1xuICAgIGpzLmdldChjYywgJ2luZm8nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNjLndhcm5JRCgxNDAwLCAnY2MuaW5mbycsICdjYy5sb2cnKTtcbiAgICAgICAgcmV0dXJuIGNjLmxvZztcbiAgICB9KTtcbiAgICAvLyBjYy5zcHJpdGVGcmFtZUNhY2hlXG4gICAganMuZ2V0KGNjLCBcInNwcml0ZUZyYW1lQ2FjaGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBjYy5lcnJvcklEKDE0MDQpO1xuICAgIH0pO1xuXG4gICAgLy8gU3ByaXRlRnJhbWVcbiAgICBqcy5nZXQoY2MuU3ByaXRlRnJhbWUucHJvdG90eXBlLCAnX3RleHR1cmVMb2FkZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNjLmVycm9ySUQoMTQwMCwgJ3Nwcml0ZUZyYW1lLl90ZXh0dXJlTG9hZGVkJywgJ3Nwcml0ZUZyYW1lLnRleHR1cmVMb2FkZWQoKScpO1xuICAgICAgICByZXR1cm4gdGhpcy50ZXh0dXJlTG9hZGVkKCk7XG4gICAgfSk7XG4gICAgbWFya0FzUmVtb3ZlZChjYy5TcHJpdGVGcmFtZSwgW1xuICAgICAgICAnYWRkTG9hZGVkRXZlbnRMaXN0ZW5lcidcbiAgICBdKTtcbiAgICBtYXJrRnVuY3Rpb25XYXJuaW5nKGNjLlNwcml0ZS5wcm90b3R5cGUsIHtcbiAgICAgICAgc2V0U3RhdGU6ICdjYy5TcHJpdGUuc2V0TWF0ZXJpYWwnLFxuICAgICAgICBnZXRTdGF0ZTogJ2NjLlNwcml0ZS5nZXRNYXRlcmlhbCdcbiAgICB9LCAnY2MuU3ByaXRlJyk7XG5cbiAgICBqcy5nZXQoY2MuU3ByaXRlRnJhbWUucHJvdG90eXBlLCAnY2xlYXJUZXh0dXJlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjYy53YXJuSUQoMTQwNiwgJ2NjLlNwcml0ZUZyYW1lJywgJ2NsZWFyVGV4dHVyZScpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge307XG4gICAgfSk7XG5cbiAgICAvLyBjYy50ZXh0dXJlQ2FjaGVcbiAgICBqcy5nZXQoY2MsICd0ZXh0dXJlQ2FjaGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNjLmVycm9ySUQoMTQwNiwgJ2NjJywgJ3RleHR1cmVDYWNoZScpO1xuICAgIH0pO1xuXG4gICAgLy8gVGV4dHVyZVxuICAgIGxldCBUZXh0dXJlMkQgPSBjYy5UZXh0dXJlMkQ7XG4gICAganMub2Jzb2xldGUoVGV4dHVyZTJELnByb3RvdHlwZSwgJ3RleHR1cmUucmVsZWFzZVRleHR1cmUnLCAndGV4dHVyZS5kZXN0cm95Jyk7XG5cbiAgICBqcy5nZXQoVGV4dHVyZTJELnByb3RvdHlwZSwgJ2dldE5hbWUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNjLndhcm5JRCgxNDAwLCAndGV4dHVyZS5nZXROYW1lKCknLCAndGV4dHVyZS5fZ2xJRCcpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dsSUQgfHwgbnVsbDtcbiAgICAgICAgfTtcbiAgICB9KTtcblxuICAgIGpzLmdldChUZXh0dXJlMkQucHJvdG90eXBlLCAnaXNMb2FkZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNjLmVycm9ySUQoMTQwMCwgJ3RleHR1cmUuaXNMb2FkZWQgZnVuY3Rpb24nLCAndGV4dHVyZS5sb2FkZWQgcHJvcGVydHknKTtcbiAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2FkZWQ7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAganMuZ2V0KFRleHR1cmUyRC5wcm90b3R5cGUsICdzZXRBbnRpQWxpYXNUZXhQYXJhbWV0ZXJzJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjYy53YXJuSUQoMTQwMCwgJ3RleHR1cmUuc2V0QW50aUFsaWFzVGV4UGFyYW1ldGVycygpJywgJ3RleHR1cmUuc2V0RmlsdGVycyhjYy5UZXh0dXJlMkQuRmlsdGVyLkxJTkVBUiwgY2MuVGV4dHVyZTJELkZpbHRlci5MSU5FQVIpJyk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnNldEZpbHRlcnMoVGV4dHVyZTJELkZpbHRlci5MSU5FQVIsIFRleHR1cmUyRC5GaWx0ZXIuTElORUFSKTtcbiAgICAgICAgfTtcbiAgICB9KTtcblxuICAgIGpzLmdldChUZXh0dXJlMkQucHJvdG90eXBlLCAnc2V0QWxpYXNUZXhQYXJhbWV0ZXJzJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjYy53YXJuSUQoMTQwMCwgJ3RleHR1cmUuc2V0QW50aUFsaWFzVGV4UGFyYW1ldGVycygpJywgJ3RleHR1cmUuc2V0RmlsdGVycyhjYy5UZXh0dXJlMkQuRmlsdGVyLk5FQVJFU1QsIGNjLlRleHR1cmUyRC5GaWx0ZXIuTkVBUkVTVCknKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RmlsdGVycyhUZXh0dXJlMkQuRmlsdGVyLk5FQVJFU1QsIFRleHR1cmUyRC5GaWx0ZXIuTkVBUkVTVCk7XG4gICAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBjYy5tYWNyb1xuICAgIG1hcmtBc1JlbW92ZWRJbk9iamVjdChjYy5tYWNybywgW1xuICAgICAgICAnRU5BQkxFX0dMX1NUQVRFX0NBQ0hFJyxcbiAgICAgICAgJ0ZJWF9BUlRJRkFDVFNfQllfU1RSRUNISU5HX1RFWEVMJyxcbiAgICBdLCAnY2MubWFjcm8nKTtcblxuICAgIHByb3ZpZGVDbGVhckVycm9yKGNjLm1hY3JvLCB7XG4gICAgICAgIFBJOiAnTWF0aC5QSScsXG4gICAgICAgIFBJMjogJ01hdGguUEkqMicsXG4gICAgICAgIEZMVF9NQVg6ICdOdW1iZXIuTUFYX1ZBTFVFJyxcbiAgICAgICAgRkxUX01JTjogJ051bWJlci5NSU5fVkFMVUUnLFxuICAgICAgICBVSU5UX01BWDogJ051bWJlci5NQVhfU0FGRV9JTlRFR0VSJ1xuICAgIH0sICdjYy5tYWNybycpO1xuXG4gICAgLy8gY2MuZ2FtZVxuICAgIG1hcmtBc1JlbW92ZWRJbk9iamVjdChjYy5nYW1lLCBbXG4gICAgICAgICdDT05GSUdfS0VZJyxcbiAgICBdLCAnY2MuZ2FtZScpO1xuXG4gICAgLy8gY2Muc3lzXG4gICAgbWFya0FzUmVtb3ZlZEluT2JqZWN0KGNjLnN5cywgW1xuICAgICAgICAnZHVtcFJvb3QnLFxuICAgICAgICAnY2xlYW5TY3JpcHQnLFxuICAgIF0sICdjYy5zeXMnKTtcblxuICAgIC8vIGNjLkRpcmVjdG9yXG4gICAgcHJvdmlkZUNsZWFyRXJyb3IoY2MuRGlyZWN0b3IsIHtcbiAgICAgICAgRVZFTlRfUFJPSkVDVElPTl9DSEFOR0VEOiAnJyxcbiAgICAgICAgRVZFTlRfQkVGT1JFX1ZJU0lUOiAnRVZFTlRfQUZURVJfVVBEQVRFJyxcbiAgICAgICAgRVZFTlRfQUZURVJfVklTSVQ6ICdFVkVOVF9CRUZPUkVfRFJBVycsXG4gICAgfSwgJ2NjLkRpcmVjdG9yJyk7XG4gICAgbWFya0Z1bmN0aW9uV2FybmluZyhjYy5EaXJlY3Rvci5wcm90b3R5cGUsIHtcbiAgICAgICAgY29udmVydFRvR0w6ICdjYy52aWV3LmNvbnZlcnRUb0xvY2F0aW9uSW5WaWV3JyxcbiAgICAgICAgY29udmVydFRvVUk6ICcnLFxuICAgICAgICBnZXRXaW5TaXplOiAnY2Mud2luU2l6ZScsXG4gICAgICAgIGdldFdpblNpemVJblBpeGVsczogJ2NjLndpblNpemUnLFxuICAgICAgICBnZXRWaXNpYmxlU2l6ZTogJ2NjLnZpZXcuZ2V0VmlzaWJsZVNpemUnLFxuICAgICAgICBnZXRWaXNpYmxlT3JpZ2luOiAnY2Mudmlldy5nZXRWaXNpYmxlT3JpZ2luJyxcbiAgICAgICAgcHVyZ2VDYWNoZWREYXRhOiAnY2MubG9hZGVyLnJlbGVhc2VBbGwnLFxuICAgICAgICBzZXREZXB0aFRlc3Q6ICdjYy5DYW1lcmEubWFpbi5kZXB0aCcsXG4gICAgICAgIHNldENsZWFyQ29sb3I6ICdjYy5DYW1lcmEubWFpbi5iYWNrZ3JvdW5kQ29sb3InLFxuICAgICAgICBnZXRSdW5uaW5nU2NlbmU6ICdjYy5kaXJlY3Rvci5nZXRTY2VuZScsXG4gICAgICAgIGdldEFuaW1hdGlvbkludGVydmFsOiAnY2MuZ2FtZS5nZXRGcmFtZVJhdGUnLFxuICAgICAgICBzZXRBbmltYXRpb25JbnRlcnZhbDogJ2NjLmdhbWUuc2V0RnJhbWVSYXRlJyxcbiAgICAgICAgaXNEaXNwbGF5U3RhdHM6ICdjYy5kZWJ1Zy5pc0Rpc3BsYXlTdGF0cycsXG4gICAgICAgIHNldERpc3BsYXlTdGF0czogJ2NjLmRlYnVnLnNldERpc3BsYXlTdGF0cycsXG4gICAgICAgIHN0b3BBbmltYXRpb246ICdjYy5nYW1lLnBhdXNlJyxcbiAgICAgICAgc3RhcnRBbmltYXRpb246ICdjYy5nYW1lLnJlc3VtZScsXG4gICAgfSwgJ2NjLkRpcmVjdG9yJyk7XG4gICAgbWFya0FzUmVtb3ZlZChjYy5EaXJlY3RvciwgW1xuICAgICAgICAncHVzaFNjZW5lJyxcbiAgICAgICAgJ3BvcFNjZW5lJyxcbiAgICAgICAgJ3BvcFRvUm9vdFNjZW5lJyxcbiAgICAgICAgJ3BvcFRvU2NlbmVTdGFja0xldmVsJyxcbiAgICAgICAgJ3NldFByb2plY3Rpb24nLFxuICAgICAgICAnZ2V0UHJvamVjdGlvbicsXG4gICAgXSwgJ2NjLkRpcmVjdG9yJyk7XG5cbiAgICAvLyBTY2hlZHVsZXJcbiAgICBwcm92aWRlQ2xlYXJFcnJvcihjYy5TY2hlZHVsZXIsIHtcbiAgICAgICAgc2NoZWR1bGVDYWxsYmFja0ZvclRhcmdldDogJ3NjaGVkdWxlJyxcbiAgICAgICAgc2NoZWR1bGVVcGRhdGVGb3JUYXJnZXQ6ICdzY2hlZHVsZVVwZGF0ZScsXG4gICAgICAgIHVuc2NoZWR1bGVDYWxsYmFja0ZvclRhcmdldDogJ3Vuc2NoZWR1bGUnLFxuICAgICAgICB1bnNjaGVkdWxlVXBkYXRlRm9yVGFyZ2V0OiAndW5zY2hlZHVsZVVwZGF0ZScsXG4gICAgICAgIHVuc2NoZWR1bGVBbGxDYWxsYmFja3NGb3JUYXJnZXQ6ICd1bnNjaGVkdWxlQWxsRm9yVGFyZ2V0JyxcbiAgICAgICAgdW5zY2hlZHVsZUFsbENhbGxiYWNrczogJ3Vuc2NoZWR1bGVBbGwnLFxuICAgICAgICB1bnNjaGVkdWxlQWxsQ2FsbGJhY2tzV2l0aE1pblByaW9yaXR5OiAndW5zY2hlZHVsZUFsbFdpdGhNaW5Qcmlvcml0eSdcbiAgICB9LCAnY2MuU2NoZWR1bGVyJyk7XG5cbiAgICAvLyBjYy52aWV3XG4gICAgcHJvdmlkZUNsZWFyRXJyb3IoY2Mudmlldywge1xuICAgICAgICBhZGp1c3RWaWV3UG9ydDogJ2FkanVzdFZpZXdwb3J0TWV0YScsXG4gICAgICAgIHNldFZpZXdQb3J0SW5Qb2ludHM6ICdzZXRWaWV3cG9ydEluUG9pbnRzJyxcbiAgICAgICAgZ2V0Vmlld1BvcnRSZWN0OiAnZ2V0Vmlld3BvcnRSZWN0J1xuICAgIH0sICdjYy52aWV3Jyk7XG4gICAgbWFya0FzUmVtb3ZlZEluT2JqZWN0KGNjLnZpZXcsIFtcbiAgICAgICAgJ2lzVmlld1JlYWR5JyxcbiAgICAgICAgJ3NldFRhcmdldERlbnNpdHlEUEknLFxuICAgICAgICAnZ2V0VGFyZ2V0RGVuc2l0eURQSScsXG4gICAgICAgICdzZXRGcmFtZVpvb21GYWN0b3InLFxuICAgICAgICAnY2FuU2V0Q29udGVudFNjYWxlRmFjdG9yJyxcbiAgICAgICAgJ3NldENvbnRlbnRUcmFuc2xhdGVMZWZ0VG9wJyxcbiAgICAgICAgJ2dldENvbnRlbnRUcmFuc2xhdGVMZWZ0VG9wJyxcbiAgICAgICAgJ3NldFZpZXdOYW1lJyxcbiAgICAgICAgJ2dldFZpZXdOYW1lJ1xuICAgIF0sICdjYy52aWV3Jyk7XG5cbiAgICAvLyBMb2FkZXJcbiAgICBtYXJrQXNSZW1vdmVkKGNjLlBpcGVsaW5lLCBbXG4gICAgICAgICdmbG93SW5EZXBzJyxcbiAgICAgICAgJ2dldEl0ZW1zJ1xuICAgIF0sICdjYy5sb2FkZXInKTtcblxuICAgIC8vIGNjLlBoeXNpY3NNYW5hZ2VyXG4gICAgbWFya0FzUmVtb3ZlZChjYy5QaHlzaWNzTWFuYWdlciwgW1xuICAgICAgICAnYXR0YWNoRGVidWdEcmF3VG9DYW1lcmEnLFxuICAgICAgICAnZGV0YWNoRGVidWdEcmF3RnJvbUNhbWVyYScsXG4gICAgXSk7XG5cbiAgICAvLyBjYy5Db2xsaXNpb25NYW5hZ2VyXG4gICAgbWFya0FzUmVtb3ZlZChjYy5Db2xsaXNpb25NYW5hZ2VyLCBbXG4gICAgICAgICdhdHRhY2hEZWJ1Z0RyYXdUb0NhbWVyYScsXG4gICAgICAgICdkZXRhY2hEZWJ1Z0RyYXdGcm9tQ2FtZXJhJyxcbiAgICBdKTtcblxuICAgIC8vIGNjLk5vZGVcbiAgICBwcm92aWRlQ2xlYXJFcnJvcihjYy5fQmFzZU5vZGUucHJvdG90eXBlLCB7XG4gICAgICAgICd0YWcnOiAnbmFtZScsXG4gICAgICAgICdnZXRUYWcnOiAnbmFtZScsXG4gICAgICAgICdzZXRUYWcnOiAnbmFtZScsXG4gICAgICAgICdnZXRDaGlsZEJ5VGFnJzogJ2dldENoaWxkQnlOYW1lJyxcbiAgICAgICAgJ3JlbW92ZUNoaWxkQnlUYWcnOiAnZ2V0Q2hpbGRCeU5hbWUobmFtZSkuZGVzdHJveSgpJ1xuICAgIH0pO1xuXG4gICAgbWFya0FzUmVtb3ZlZChjYy5Ob2RlLCBbXG4gICAgICAgICdfY2FzY2FkZUNvbG9yRW5hYmxlZCcsXG4gICAgICAgICdjYXNjYWRlQ29sb3InLFxuICAgICAgICAnaXNDYXNjYWRlQ29sb3JFbmFibGVkJyxcbiAgICAgICAgJ3NldENhc2NhZGVDb2xvckVuYWJsZWQnLFxuICAgICAgICAnX2Nhc2NhZGVPcGFjaXR5RW5hYmxlZCcsXG4gICAgICAgICdjYXNjYWRlT3BhY2l0eScsXG4gICAgICAgICdpc0Nhc2NhZGVPcGFjaXR5RW5hYmxlZCcsXG4gICAgICAgICdzZXRDYXNjYWRlT3BhY2l0eUVuYWJsZWQnLFxuICAgICAgICAnb3BhY2l0eU1vZGlmeVJHQicsXG4gICAgICAgICdpc09wYWNpdHlNb2RpZnlSR0InLFxuICAgICAgICAnc2V0T3BhY2l0eU1vZGlmeVJHQicsXG4gICAgICAgICdpZ25vcmVBbmNob3InLFxuICAgICAgICAnaXNJZ25vcmVBbmNob3JQb2ludEZvclBvc2l0aW9uJyxcbiAgICAgICAgJ2lnbm9yZUFuY2hvclBvaW50Rm9yUG9zaXRpb24nLFxuICAgICAgICAnaXNSdW5uaW5nJyxcbiAgICAgICAgJ19zZ05vZGUnLFxuICAgIF0pO1xuXG4gICAgbWFya0Z1bmN0aW9uV2FybmluZyhjYy5Ob2RlLnByb3RvdHlwZSwge1xuICAgICAgICBnZXROb2RlVG9QYXJlbnRUcmFuc2Zvcm06ICdnZXRMb2NhbE1hdHJpeCcsXG4gICAgICAgIGdldE5vZGVUb1BhcmVudFRyYW5zZm9ybUFSOiAnZ2V0TG9jYWxNYXRyaXgnLFxuICAgICAgICBnZXROb2RlVG9Xb3JsZFRyYW5zZm9ybTogJ2dldFdvcmxkTWF0cml4JyxcbiAgICAgICAgZ2V0Tm9kZVRvV29ybGRUcmFuc2Zvcm1BUjogJ2dldFdvcmxkTWF0cml4JyxcbiAgICAgICAgZ2V0UGFyZW50VG9Ob2RlVHJhbnNmb3JtOiAnZ2V0TG9jYWxNYXRyaXgnLFxuICAgICAgICBnZXRXb3JsZFRvTm9kZVRyYW5zZm9ybTogJ2dldFdvcmxkTWF0cml4JyxcbiAgICAgICAgY29udmVydFRvdWNoVG9Ob2RlU3BhY2U6ICdjb252ZXJ0VG9Ob2RlU3BhY2VBUicsXG4gICAgICAgIGNvbnZlcnRUb3VjaFRvTm9kZVNwYWNlQVI6ICdjb252ZXJ0VG9Ob2RlU3BhY2VBUicsXG4gICAgICAgIGNvbnZlcnRUb1dvcmxkU3BhY2U6ICdjb252ZXJ0VG9Xb3JsZFNwYWNlQVInLFxuICAgICAgICBjb252ZXJ0VG9Ob2RlU3BhY2U6ICdjb252ZXJ0VG9Ob2RlU3BhY2VBUidcbiAgICB9KTtcblxuICAgIHByb3ZpZGVDbGVhckVycm9yKGNjLk5vZGUucHJvdG90eXBlLCB7XG4gICAgICAgIGdldFJvdGF0aW9uWDogJ3JvdGF0aW9uWCcsXG4gICAgICAgIHNldFJvdGF0aW9uWDogJ3JvdGF0aW9uWCcsXG4gICAgICAgIGdldFJvdGF0aW9uWTogJ3JvdGF0aW9uWScsXG4gICAgICAgIHNldFJvdGF0aW9uWTogJ3JvdGF0aW9uWScsXG4gICAgICAgIGdldFBvc2l0aW9uWDogJ3gnLFxuICAgICAgICBzZXRQb3NpdGlvblg6ICd4JyxcbiAgICAgICAgZ2V0UG9zaXRpb25ZOiAneScsXG4gICAgICAgIHNldFBvc2l0aW9uWTogJ3knLFxuICAgICAgICBnZXRTa2V3WDogJ3NrZXdYJyxcbiAgICAgICAgc2V0U2tld1g6ICdza2V3WCcsXG4gICAgICAgIGdldFNrZXdZOiAnc2tld1knLFxuICAgICAgICBzZXRTa2V3WTogJ3NrZXdZJyxcbiAgICAgICAgZ2V0U2NhbGVYOiAnc2NhbGVYJyxcbiAgICAgICAgc2V0U2NhbGVYOiAnc2NhbGVYJyxcbiAgICAgICAgZ2V0U2NhbGVZOiAnc2NhbGVZJyxcbiAgICAgICAgc2V0U2NhbGVZOiAnc2NhbGVZJyxcbiAgICAgICAgZ2V0T3BhY2l0eTogJ29wYWNpdHknLFxuICAgICAgICBzZXRPcGFjaXR5OiAnb3BhY2l0eScsXG4gICAgICAgIGdldENvbG9yOiAnY29sb3InLFxuICAgICAgICBzZXRDb2xvcjogJ2NvbG9yJyxcbiAgICAgICAgZ2V0TG9jYWxaT3JkZXI6ICd6SW5kZXgnLFxuICAgICAgICBzZXRMb2NhbFpPcmRlcjogJ3pJbmRleCcsXG4gICAgfSk7XG5cbiAgICAvLyBjYy5Db21wb25lbnRcbiAgICBtYXJrQXNSZW1vdmVkKGNjLkNvbXBvbmVudCwgW1xuICAgICAgICAnaXNSdW5uaW5nJyxcbiAgICBdKTtcblxuICAgIHByb3ZpZGVDbGVhckVycm9yKGNjLlNwcml0ZS5wcm90b3R5cGUsIHtcbiAgICAgICAgc2V0SW5zZXRMZWZ0OiAnY2MuU3ByaXRlRnJhbWUgaW5zZXRMZWZ0JyxcbiAgICAgICAgc2V0SW5zZXRSaWdodDogJ2NjLlNwcml0ZUZyYW1lIGluc2V0UmlnaHQnLFxuICAgICAgICBzZXRJbnNldFRvcDogJ2NjLlNwcml0ZUZyYW1lIGluc2V0VG9wJyxcbiAgICAgICAgc2V0SW5zZXRCb3R0b206ICdjYy5TcHJpdGVGcmFtZSBpbnNldEJvdHRvbScsXG4gICAgfSk7XG5cbiAgICAvLyBjYy5DYW1lcmFcbiAgICBtYXJrRnVuY3Rpb25XYXJuaW5nKGNjLkNhbWVyYS5wcm90b3R5cGUsIHtcbiAgICAgICAgZ2V0Tm9kZVRvQ2FtZXJhVHJhbnNmb3JtOiAnZ2V0V29ybGRUb1NjcmVlbk1hdHJpeDJEJyxcbiAgICAgICAgZ2V0Q2FtZXJhVG9Xb3JsZFBvaW50OiAnZ2V0U2NyZWVuVG9Xb3JsZFBvaW50JyxcbiAgICAgICAgZ2V0V29ybGRUb0NhbWVyYVBvaW50OiAnZ2V0V29ybGRUb1NjcmVlblBvaW50JyxcbiAgICAgICAgZ2V0Q2FtZXJhVG9Xb3JsZE1hdHJpeDogJ2dldFNjcmVlblRvV29ybGRNYXRyaXgyRCcsXG4gICAgICAgIGdldFdvcmxkVG9DYW1lcmFNYXRyaXg6ICdnZXRXb3JsZFRvU2NyZWVuTWF0cml4MkQnXG4gICAgfSk7XG5cbiAgICBtYXJrQXNSZW1vdmVkKGNjLkNhbWVyYSwgW1xuICAgICAgICAnYWRkVGFyZ2V0JyxcbiAgICAgICAgJ3JlbW92ZVRhcmdldCcsXG4gICAgICAgICdnZXRUYXJnZXRzJ1xuICAgIF0pO1xuXG4gICAgLy8gU0NFTkVcbiAgICB2YXIgRVJSID0gJ1wiJXNcIiBpcyBub3QgZGVmaW5lZCBpbiB0aGUgU2NlbmUsIGl0IGlzIG9ubHkgZGVmaW5lZCBpbiBub3JtYWwgbm9kZXMuJztcbiAgICBDQ19FRElUT1IgfHwgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoY2MuU2NlbmUucHJvdG90eXBlLCB7XG4gICAgICAgIGFjdGl2ZToge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY2MuZXJyb3IoRVJSLCAnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY2MuZXJyb3IoRVJSLCAnYWN0aXZlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFjdGl2ZUluSGllcmFyY2h5OiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjYy5lcnJvcihFUlIsICdhY3RpdmVJbkhpZXJhcmNoeScpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0Q29tcG9uZW50OiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjYy5lcnJvcihFUlIsICdnZXRDb21wb25lbnQnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhZGRDb21wb25lbnQ6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGNjLmVycm9yKEVSUiwgJ2FkZENvbXBvbmVudCcpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICAvLyBWYWx1ZSB0eXBlc1xuICAgIHByb3ZpZGVDbGVhckVycm9yKGNjLCB7XG4gICAgICAgIC8vIEFmZmluZVRyYW5zZm9ybVxuICAgICAgICBhZmZpbmVUcmFuc2Zvcm1NYWtlOiAnY2MuQWZmaW5lVHJhbnNmb3JtLmNyZWF0ZScsXG4gICAgICAgIGFmZmluZVRyYW5zZm9ybU1ha2VJZGVudGl0eTogJ2NjLkFmZmluZVRyYW5zZm9ybS5pZGVudGl0eScsXG4gICAgICAgIGFmZmluZVRyYW5zZm9ybUNsb25lOiAnY2MuQWZmaW5lVHJhbnNmb3JtLmNsb25lJyxcbiAgICAgICAgYWZmaW5lVHJhbnNmb3JtQ29uY2F0OiAnY2MuQWZmaW5lVHJhbnNmb3JtLmNvbmNhdCcsXG4gICAgICAgIGFmZmluZVRyYW5zZm9ybUNvbmNhdEluOiAnY2MuQWZmaW5lVHJhbnNmb3JtLmNvbmNhdCcsXG4gICAgICAgIGFmZmluZVRyYW5zZm9ybUludmVydDogJ2NjLkFmZmluZVRyYW5zZm9ybS5pbnZlcnQnLFxuICAgICAgICBhZmZpbmVUcmFuc2Zvcm1JbnZlcnRJbjogJ2NjLkFmZmluZVRyYW5zZm9ybS5pbnZlcnQnLFxuICAgICAgICBhZmZpbmVUcmFuc2Zvcm1JbnZlcnRPdXQ6ICdjYy5BZmZpbmVUcmFuc2Zvcm0uaW52ZXJ0JyxcbiAgICAgICAgYWZmaW5lVHJhbnNmb3JtRXF1YWxUb1RyYW5zZm9ybTogJ2NjLkFmZmluZVRyYW5zZm9ybS5lcXVhbCcsXG4gICAgICAgIHBvaW50QXBwbHlBZmZpbmVUcmFuc2Zvcm06ICdjYy5BZmZpbmVUcmFuc2Zvcm0udHJhbnNmb3JtVmVjMicsXG4gICAgICAgIHNpemVBcHBseUFmZmluZVRyYW5zZm9ybTogJ2NjLkFmZmluZVRyYW5zZm9ybS50cmFuc2Zvcm1TaXplJyxcbiAgICAgICAgcmVjdEFwcGx5QWZmaW5lVHJhbnNmb3JtOiAnY2MuQWZmaW5lVHJhbnNmb3JtLnRyYW5zZm9ybVJlY3QnLFxuICAgICAgICBvYmJBcHBseUFmZmluZVRyYW5zZm9ybTogJ2NjLkFmZmluZVRyYW5zZm9ybS50cmFuc2Zvcm1PYmInLFxuXG4gICAgICAgIC8vIFZlYzJcbiAgICAgICAgcG9pbnRFcXVhbFRvUG9pbnQ6ICdjYy5WZWMyIGVxdWFscycsXG5cbiAgICAgICAgLy8gU2l6ZVxuICAgICAgICBzaXplRXF1YWxUb1NpemU6ICdjYy5TaXplIGVxdWFscycsXG5cbiAgICAgICAgLy8gUmVjdFxuICAgICAgICByZWN0RXF1YWxUb1JlY3Q6ICdyZWN0QS5lcXVhbHMocmVjdEIpJyxcbiAgICAgICAgcmVjdENvbnRhaW5zUmVjdDogJ3JlY3RBLmNvbnRhaW5zUmVjdChyZWN0QiknLFxuICAgICAgICByZWN0Q29udGFpbnNQb2ludDogJ3JlY3QuY29udGFpbnModmVjMiknLFxuICAgICAgICByZWN0T3ZlcmxhcHNSZWN0OiAncmVjdEEuaW50ZXJzZWN0cyhyZWN0QiknLFxuICAgICAgICByZWN0SW50ZXJzZWN0c1JlY3Q6ICdyZWN0QS5pbnRlcnNlY3RzKHJlY3RCKScsXG4gICAgICAgIHJlY3RJbnRlcnNlY3Rpb246ICdyZWN0QS5pbnRlcnNlY3Rpb24oaW50ZXJzZWN0aW9uLCByZWN0QiknLFxuICAgICAgICByZWN0VW5pb246ICdyZWN0QS51bmlvbih1bmlvbiwgcmVjdEIpJyxcbiAgICAgICAgcmVjdEdldE1heFg6ICdyZWN0LnhNYXgnLFxuICAgICAgICByZWN0R2V0TWlkWDogJ3JlY3QuY2VudGVyLngnLFxuICAgICAgICByZWN0R2V0TWluWDogJ3JlY3QueE1pbicsXG4gICAgICAgIHJlY3RHZXRNYXhZOiAncmVjdC55TWF4JyxcbiAgICAgICAgcmVjdEdldE1pZFk6ICdyZWN0LmNlbnRlci55JyxcbiAgICAgICAgcmVjdEdldE1pblk6ICdyZWN0LnlNaW4nLFxuXG4gICAgICAgIC8vIENvbG9yXG4gICAgICAgIGNvbG9yRXF1YWw6ICdjb2xvckEuZXF1YWxzKGNvbG9yQiknLFxuICAgICAgICBoZXhUb0NvbG9yOiAnY29sb3IuZnJvbUhFWChoZXhDb2xvciknLFxuICAgICAgICBjb2xvclRvSGV4OiAnY29sb3IudG9IRVgoKScsXG5cbiAgICAgICAgLy8gRW51bXNcbiAgICAgICAgVGV4dEFsaWdubWVudDogJ2NjLm1hY3JvLlRleHRBbGlnbm1lbnQnLFxuICAgICAgICBWZXJ0aWNhbFRleHRBbGlnbm1lbnQ6ICdjYy5tYWNyby5WZXJ0aWNhbFRleHRBbGlnbm1lbnQnLFxuXG4gICAgICAgIC8vIFBvaW50IEV4dGVuc2lvbnNcbiAgICAgICAgcE5lZzogJ3AubmVnKCknLFxuICAgICAgICBwQWRkOiAncDEuYWRkKHAyKScsXG4gICAgICAgIHBTdWI6ICdwMS5zdWIocDIpJyxcbiAgICAgICAgcE11bHQ6ICdwLm11bChmYWN0b3IpJyxcbiAgICAgICAgcE1pZHBvaW50OiAncDEuYWRkKHAyKS5tdWwoMC41KScsXG4gICAgICAgIHBEb3Q6ICdwMS5kb3QocDIpJyxcbiAgICAgICAgcENyb3NzOiAncDEuY3Jvc3MocDIpJyxcbiAgICAgICAgcFBlcnA6ICdwLnJvdGF0ZSgtOTAgKiBNYXRoLlBJIC8gMTgwKScsXG4gICAgICAgIHBSUGVycDogJ3Aucm90YXRlKDkwICogTWF0aC5QSSAvIDE4MCknLFxuICAgICAgICBwUHJvamVjdDogJ3AxLnByb2plY3QocDIpJyxcbiAgICAgICAgcExlbmd0aFNROiAncC5tYWdTcXIoKScsXG4gICAgICAgIHBEaXN0YW5jZVNROiAncDEuc3ViKHAyKS5tYWdTcXIoKScsXG4gICAgICAgIHBMZW5ndGg6ICdwLm1hZygpJyxcbiAgICAgICAgcERpc3RhbmNlOiAncDEuc3ViKHAyKS5tYWcoKScsXG4gICAgICAgIHBOb3JtYWxpemU6ICdwLm5vcm1hbGl6ZSgpJyxcbiAgICAgICAgcEZvckFuZ2xlOiAnY2MudjIoTWF0aC5jb3MoYSksIE1hdGguc2luKGEpKScsXG4gICAgICAgIHBUb0FuZ2xlOiAnTWF0aC5hdGFuMih2LnksIHYueCknLFxuICAgICAgICBwWmVyb0luOiAncC54ID0gcC55ID0gMCcsXG4gICAgICAgIHBJbjogJ3AxLnNldChwMiknLFxuICAgICAgICBwTXVsdEluOiAncC5tdWxTZWxmKGZhY3RvciknLFxuICAgICAgICBwU3ViSW46ICdwMS5zdWJTZWxmKHAyKScsXG4gICAgICAgIHBBZGRJbjogJ3AxLmFkZFNlbGYocDIpJyxcbiAgICAgICAgcE5vcm1hbGl6ZUluOiAncC5ub3JtYWxpemVTZWxmKCknLFxuICAgICAgICBwU2FtZUFzOiAncDEuZXF1YWxzKHAyKScsXG4gICAgICAgIHBBbmdsZTogJ3YxLmFuZ2xlKHYyKScsXG4gICAgICAgIHBBbmdsZVNpZ25lZDogJ3YxLnNpZ25BbmdsZSh2MiknLFxuICAgICAgICBwUm90YXRlQnlBbmdsZTogJ3Aucm90YXRlKHJhZGlhbnMpJyxcbiAgICAgICAgcENvbXBNdWx0OiAndjEuZG90KHYyKScsXG4gICAgICAgIHBGdXp6eUVxdWFsOiAndjEuZnV6enlFcXVhbHModjIsIHRvbGVyYW5jZSknLFxuICAgICAgICBwTGVycDogJ3AubGVycChlbmRQb2ludCwgcmF0aW8pJyxcbiAgICAgICAgcENsYW1wOiAncC5jbGFtcGYobWluX2luY2x1c2l2ZSwgbWF4X2luY2x1c2l2ZSknLFxuXG4gICAgICAgIHJhbmQ6ICdNYXRoLnJhbmRvbSgpICogMHhmZmZmZmYnLFxuICAgICAgICByYW5kb21NaW51czFUbzE6ICcoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiAyJyxcblxuICAgICAgICBjb250YWluZXI6ICdjYy5nYW1lLmNvbnRhaW5lcicsXG4gICAgICAgIF9jYW52YXM6ICdjYy5nYW1lLmNhbnZhcycsXG4gICAgICAgIF9yZW5kZXJUeXBlOiAnY2MuZ2FtZS5yZW5kZXJUeXBlJyxcblxuICAgICAgICBfZ2V0RXJyb3I6ICdjYy5kZWJ1Zy5nZXRFcnJvcicsXG4gICAgICAgIF9pbml0RGVidWdTZXR0aW5nOiAnY2MuZGVidWcuX3Jlc2V0RGVidWdTZXR0aW5nJyxcbiAgICAgICAgRGVidWdNb2RlOiAnY2MuZGVidWcuRGVidWdNb2RlJyxcbiAgICB9LCAnY2MnKTtcbiAgICBtYXJrQXNSZW1vdmVkSW5PYmplY3QoY2MsIFtcbiAgICAgICAgJ2JsZW5kRnVuY0Rpc2FibGUnLFxuXG4gICAgICAgICdwRnJvbVNpemUnLFxuICAgICAgICAncENvbXBPcCcsXG4gICAgICAgICdwSW50ZXJzZWN0UG9pbnQnLFxuICAgICAgICAncFNlZ21lbnRJbnRlcnNlY3QnLFxuICAgICAgICAncExpbmVJbnRlcnNlY3QnLFxuXG4gICAgICAgICdvYmJBcHBseU1hdHJpeCcsXG5cbiAgICAgICAgJ2dldEltYWdlRm9ybWF0QnlEYXRhJyxcblxuICAgICAgICAnaW5pdEVuZ2luZScsXG4gICAgXSwgJ2NjJyk7XG4gICAgbWFya0Z1bmN0aW9uV2FybmluZyhjYywge1xuICAgICAgICAvLyBjYy5wXG4gICAgICAgIHA6ICdjYy52MidcbiAgICB9LCAnY2MnKTtcbiAgICAvLyBjYy5SZWN0XG4gICAgcHJvdmlkZUNsZWFyRXJyb3IoY2MuUmVjdCwge1xuICAgICAgICBjb250YWluOiAncmVjdEEuY29udGFpbnMocmVjdEIpJyxcbiAgICAgICAgdHJhbnNmb3JtTWF0NDogJ3JlY3QudHJhbnNmb3JtTWF0NChvdXQsIG1hdDQpJ1xuICAgIH0pO1xuICAgIC8vIGNjLkNvbG9yXG4gICAgcHJvdmlkZUNsZWFyRXJyb3IoY2MuQ29sb3IsIHtcbiAgICAgICAgcmdiMmhzdjogJ2NvbG9yLnRvSFNWKCknLFxuICAgICAgICBoc3YycmdiOiAnY29sb3IuZnJvbUhTVihoLCBzLCB2KSdcbiAgICB9KTtcblxuICAgIC8vIG1hY3JvIGZ1bmN0aW9uc1xuICAgIGpzLmdldChjYywgJ2xlcnAnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNjLndhcm5JRCgxNDAwLCAnY2MubGVycCcsICdjYy5taXNjLmxlcnAnKTtcbiAgICAgICAgcmV0dXJuIGNjLm1pc2MubGVycDtcbiAgICB9KTtcbiAgICBqcy5nZXQoY2MsICdyYW5kb20wVG8xJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjYy53YXJuSUQoMTQwMCwgJ2NjLnJhbmRvbTBUbzEnLCAnTWF0aC5yYW5kb20nKTtcbiAgICAgICAgcmV0dXJuIE1hdGgucmFuZG9tO1xuICAgIH0pO1xuICAgIGpzLmdldChjYywgJ2RlZ3JlZXNUb1JhZGlhbnMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNjLndhcm5JRCgxNDAwLCAnY2MuZGVncmVlc1RvUmFkaWFucycsICdjYy5taXNjLmRlZ3JlZXNUb1JhZGlhbnMnKTtcbiAgICAgICAgcmV0dXJuIGNjLm1pc2MuZGVncmVlc1RvUmFkaWFucztcbiAgICB9KTtcbiAgICBqcy5nZXQoY2MsICdyYWRpYW5zVG9EZWdyZWVzJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjYy53YXJuSUQoMTQwMCwgJ2NjLnJhZGlhbnNUb0RlZ3JlZXMnLCAnY2MubWlzYy5yYWRpYW5zVG9EZWdyZWVzJyk7XG4gICAgICAgIHJldHVybiBjYy5taXNjLnJhZGlhbnNUb0RlZ3JlZXM7XG4gICAgfSk7XG4gICAganMuZ2V0KGNjLCAnY2xhbXBmJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjYy53YXJuSUQoMTQwMCwgJ2NjLmNsYW1wZicsICdjYy5taXNjLmNsYW1wZicpO1xuICAgICAgICByZXR1cm4gY2MubWlzYy5jbGFtcGY7XG4gICAgfSk7XG4gICAganMuZ2V0KGNjLCAnY2xhbXAwMScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2Mud2FybklEKDE0MDAsICdjYy5jbGFtcDAxJywgJ2NjLm1pc2MuY2xhbXAwMScpO1xuICAgICAgICByZXR1cm4gY2MubWlzYy5jbGFtcDAxO1xuICAgIH0pO1xuICAgIGpzLmdldChjYywgJ0ltYWdlRm9ybWF0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjYy53YXJuSUQoMTQwMCwgJ2NjLkltYWdlRm9ybWF0JywgJ2NjLm1hY3JvLkltYWdlRm9ybWF0Jyk7XG4gICAgICAgIHJldHVybiBjYy5tYWNyby5JbWFnZUZvcm1hdDtcbiAgICB9KTtcbiAgICBqcy5nZXQoY2MsICdLRVknLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNjLndhcm5JRCgxNDAwLCAnY2MuS0VZJywgJ2NjLm1hY3JvLktFWScpO1xuICAgICAgICByZXR1cm4gY2MubWFjcm8uS0VZO1xuICAgIH0pO1xuICAgIGpzLmdldChjYywgJ0Vhc2luZycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2Mud2FybklEKDE0MDAsICdjYy5FYXNpbmcnLCAnY2MuZWFzaW5nJyk7XG4gICAgICAgIHJldHVybiBjYy5lYXNpbmc7XG4gICAgfSk7XG5cbiAgICAvLyBjYy5pc0NoaWxkQ2xhc3NPZlxuICAgIGpzLmdldChjYywgJ2lzQ2hpbGRDbGFzc09mJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjYy5lcnJvcklEKDE0MDAsICdjYy5pc0NoaWxkQ2xhc3NPZicsICdjYy5qcy5pc0NoaWxkQ2xhc3NPZicpO1xuICAgICAgICByZXR1cm4gY2MuanMuaXNDaGlsZENsYXNzT2Y7XG4gICAgfSk7XG5cbiAgICAvLyBkcmFnb24gYm9uZXNcbiAgICBpZiAodHlwZW9mIGRyYWdvbkJvbmVzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBqcy5vYnNvbGV0ZShkcmFnb25Cb25lcy5DQ0ZhY3RvcnksICdkcmFnb25Cb25lcy5DQ0ZhY3RvcnkuZ2V0RmFjdG9yeScsICdnZXRJbnN0YW5jZScpO1xuICAgIH1cblxuICAgIC8vIHJlbmRlckVuZ2luZVxuICAgIGNjLnJlbmRlcmVyLnJlbmRlckVuZ2luZSA9IHtcbiAgICAgICAgZ2V0IGdmeCAoKSB7XG4gICAgICAgICAgICBjYy53YXJuSUQoMTQwMCwgJ2NjLnJlbmRlcmVyLnJlbmRlckVuZ2luZS5nZngnLCAnY2MuZ2Z4Jyk7XG4gICAgICAgICAgICByZXR1cm4gY2MuZ2Z4O1xuICAgICAgICB9LFxuICAgICAgICBnZXQgbWF0aCAoKSB7XG4gICAgICAgICAgICBjYy53YXJuSUQoMTQwMCwgJ2NjLnJlbmRlcmVyLnJlbmRlckVuZ2luZS5tYXRoJywgJ2NjLnZtYXRoJyk7XG4gICAgICAgICAgICByZXR1cm4gY2Mudm1hdGg7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBJbnB1dEFzc2VtYmxlciAoKSB7XG4gICAgICAgICAgICBjYy53YXJuSUQoMTQwMCwgJ2NjLnJlbmRlcmVyLnJlbmRlckVuZ2luZS5JbnB1dEFzc2VtYmxlcicsICdjYy5yZW5kZXJlci5JbnB1dEFzc2VtYmxlcicpO1xuICAgICAgICAgICAgcmV0dXJuIGNjLnJlbmRlcmVyLklucHV0QXNzZW1ibGVyO1xuICAgICAgICB9XG4gICAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcbiBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxuXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxudmFyIGpzID0gY2MuanM7XG5cbmlmIChDQ19ERUJVRykge1xuICAgIHZhciBkZXByZWNhdGVFbnVtID0gZnVuY3Rpb24gZGVwcmVjYXRlRW51bShvYmosIG9sZFBhdGgsIG5ld1BhdGgsIGhhc1R5cGVQcmVmaXhCZWZvcmUpIHtcbiAgICAgICAgaWYgKCFDQ19TVVBQT1JUX0pJVCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGhhc1R5cGVQcmVmaXhCZWZvcmUgPSBoYXNUeXBlUHJlZml4QmVmb3JlICE9PSBmYWxzZTtcbiAgICAgICAgdmFyIGVudW1EZWYgPSBGdW5jdGlvbigncmV0dXJuICcgKyBuZXdQYXRoKSgpO1xuICAgICAgICB2YXIgZW50cmllcyA9IGNjLkVudW0uZ2V0TGlzdChlbnVtRGVmKTtcbiAgICAgICAgdmFyIGRlbGltaXRlciA9IGhhc1R5cGVQcmVmaXhCZWZvcmUgPyAnXycgOiAnLic7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZW50cmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpXS5uYW1lO1xuICAgICAgICAgICAgdmFyIG9sZFByb3BOYW1lO1xuICAgICAgICAgICAgaWYgKGhhc1R5cGVQcmVmaXhCZWZvcmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2xkVHlwZU5hbWUgPSBvbGRQYXRoLnNwbGl0KCcuJykuc2xpY2UoLTEpWzBdO1xuICAgICAgICAgICAgICAgIG9sZFByb3BOYW1lID0gb2xkVHlwZU5hbWUgKyAnXycgKyBlbnRyeTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb2xkUHJvcE5hbWUgPSBlbnRyeTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGpzLmdldChvYmosIG9sZFByb3BOYW1lLCBmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICAgICAgICBjYy5lcnJvcklEKDE0MDAsIG9sZFBhdGggKyBkZWxpbWl0ZXIgKyBlbnRyeSwgbmV3UGF0aCArICcuJyArIGVudHJ5KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW51bURlZltlbnRyeV07XG4gICAgICAgICAgICB9LmJpbmQobnVsbCwgZW50cnkpKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgbWFya0FzUmVtb3ZlZCA9IGZ1bmN0aW9uIG1hcmtBc1JlbW92ZWQob3duZXJDdG9yLCByZW1vdmVkUHJvcHMsIG93bmVyTmFtZSkge1xuICAgICAgICBpZiAoIW93bmVyQ3Rvcikge1xuICAgICAgICAgICAgLy8g5Y+v6IO96KKr6KOB5Ymq5LqGXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgb3duZXJOYW1lID0gb3duZXJOYW1lIHx8IGpzLmdldENsYXNzTmFtZShvd25lckN0b3IpO1xuICAgICAgICByZW1vdmVkUHJvcHMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gZXJyb3IoKSB7XG4gICAgICAgICAgICAgICAgY2MuZXJyb3JJRCgxNDA2LCBvd25lck5hbWUsIHByb3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAganMuZ2V0c2V0KG93bmVyQ3Rvci5wcm90b3R5cGUsIHByb3AsIGVycm9yLCBlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICB2YXIgbWFya0FzRGVwcmVjYXRlZCA9IGZ1bmN0aW9uIG1hcmtBc0RlcHJlY2F0ZWQob3duZXJDdG9yLCBkZXByZWNhdGVkUHJvcHMsIG93bmVyTmFtZSkge1xuICAgICAgICBpZiAoIW93bmVyQ3Rvcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG93bmVyTmFtZSA9IG93bmVyTmFtZSB8fCBqcy5nZXRDbGFzc05hbWUob3duZXJDdG9yKTtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob3duZXJDdG9yLnByb3RvdHlwZSk7XG4gICAgICAgIGRlcHJlY2F0ZWRQcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgICB2YXIgZGVwcmVjYXRlZFByb3AgPSBwcm9wWzBdO1xuICAgICAgICAgICAgdmFyIG5ld1Byb3AgPSBwcm9wWzFdO1xuICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBkZXNjcmlwdG9yc1tkZXByZWNhdGVkUHJvcF07XG4gICAgICAgICAgICBqcy5nZXRzZXQob3duZXJDdG9yLnByb3RvdHlwZSwgZGVwcmVjYXRlZFByb3AsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjYy53YXJuSUQoMTQwMCwgb3duZXJOYW1lICsgJy4nICsgZGVwcmVjYXRlZFByb3AsIG93bmVyTmFtZSArICcuJyArIG5ld1Byb3ApO1xuICAgICAgICAgICAgICAgIHJldHVybiBkZXNjcmlwdG9yLmdldC5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICBjYy53YXJuSUQoMTQwMCwgb3duZXJOYW1lICsgJy4nICsgZGVwcmVjYXRlZFByb3AsIG93bmVyTmFtZSArICcuJyArIG5ld1Byb3ApO1xuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3Iuc2V0LmNhbGwodGhpcywgdik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZhciBtYXJrQXNSZW1vdmVkSW5PYmplY3QgPSBmdW5jdGlvbiBtYXJrQXNSZW1vdmVkSW5PYmplY3Qob3duZXJPYmosIHJlbW92ZWRQcm9wcywgb3duZXJOYW1lKSB7XG4gICAgICAgIGlmICghb3duZXJPYmopIHtcbiAgICAgICAgICAgIC8vIOWPr+iDveiiq+ijgeWJquS6hlxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlbW92ZWRQcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBlcnJvcigpIHtcbiAgICAgICAgICAgICAgICBjYy5lcnJvcklEKDE0MDYsIG93bmVyTmFtZSwgcHJvcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBqcy5nZXRzZXQob3duZXJPYmosIHByb3AsIGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZhciBwcm92aWRlQ2xlYXJFcnJvciA9IGZ1bmN0aW9uIHByb3ZpZGVDbGVhckVycm9yKG93bmVyLCBvYmosIG93bmVyTmFtZSkge1xuICAgICAgICBpZiAoIW93bmVyKSB7XG4gICAgICAgICAgICAvLyDlj6/og73ooqvoo4HliarkuoZcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2xhc3NOYW1lID0gb3duZXJOYW1lIHx8IGNjLmpzLmdldENsYXNzTmFtZShvd25lcik7XG4gICAgICAgIHZhciBJbmZvID0gJ1NvcnJ5LCAnICsgY2xhc3NOYW1lICsgJy4lcyBpcyByZW1vdmVkLCBwbGVhc2UgdXNlICVzIGluc3RlYWQuJztcblxuICAgICAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcCgpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlZmluZShwcm9wLCBnZXRzZXQpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBhY2Nlc3NvcihuZXdQcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgIGNjLmVycm9yKEluZm8sIHByb3AsIG5ld1Byb3ApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZ2V0c2V0KSkge1xuICAgICAgICAgICAgICAgICAgICBnZXRzZXQgPSBnZXRzZXQuc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB4LnRyaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGpzLmdldHNldChvd25lciwgcHJvcCwgYWNjZXNzb3IuYmluZChudWxsLCBnZXRzZXRbMF0pLCBnZXRzZXRbMV0gJiYgYWNjZXNzb3IuYmluZChudWxsLCBnZXRzZXRbMV0pKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2V0c2V0ID0gb2JqW3Byb3BdO1xuXG4gICAgICAgICAgICBpZiAocHJvcFswXSA9PT0gJyonKSB7XG4gICAgICAgICAgICAgICAgLy8gZ2V0IHNldFxuICAgICAgICAgICAgICAgIGV0UHJvcCA9IHByb3Auc2xpY2UoMSk7XG5cbiAgICAgICAgICAgICAgICBkZWZpbmUoJ2cnICsgZXRQcm9wLCBnZXRzZXQpO1xuICAgICAgICAgICAgICAgIGRlZmluZSgncycgKyBldFByb3AsIGdldHNldCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHByb3Auc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHgudHJpbSgpO1xuICAgICAgICAgICAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lKHgsIGdldHNldCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBvYmopIHtcbiAgICAgICAgICAgIHZhciBnZXRzZXQ7XG4gICAgICAgICAgICB2YXIgZXRQcm9wO1xuXG4gICAgICAgICAgICBfbG9vcCgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciBtYXJrRnVuY3Rpb25XYXJuaW5nID0gZnVuY3Rpb24gbWFya0Z1bmN0aW9uV2FybmluZyhvd25lckN0b3IsIG9iaiwgb3duZXJOYW1lKSB7XG4gICAgICAgIGlmICghb3duZXJDdG9yKSB7XG4gICAgICAgICAgICAvLyDlj6/og73ooqvoo4HliarkuoZcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBvd25lck5hbWUgPSBvd25lck5hbWUgfHwganMuZ2V0Q2xhc3NOYW1lKG93bmVyQ3Rvcik7XG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gb2JqKSB7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBwcm9wTmFtZSA9IHByb3A7XG4gICAgICAgICAgICAgICAgdmFyIG9yaWdpbkZ1bmMgPSBvd25lckN0b3JbcHJvcE5hbWVdO1xuICAgICAgICAgICAgICAgIGlmICghb3JpZ2luRnVuYykgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gd2FybigpIHtcbiAgICAgICAgICAgICAgICAgICAgY2Mud2FybignU29ycnksICVzLiVzIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgJXMgaW5zdGVhZCcsIG93bmVyTmFtZSwgcHJvcE5hbWUsIG9ialtwcm9wTmFtZV0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luRnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG93bmVyQ3Rvcltwcm9wTmFtZV0gPSB3YXJuO1xuICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gcmVtb3ZlIGNjLmluZm9cblxuXG4gICAganMuZ2V0KGNjLCAnaW5mbycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2Mud2FybklEKDE0MDAsICdjYy5pbmZvJywgJ2NjLmxvZycpO1xuICAgICAgICByZXR1cm4gY2MubG9nO1xuICAgIH0pO1xuICAgIC8vIGNjLnNwcml0ZUZyYW1lQ2FjaGVcbiAgICBqcy5nZXQoY2MsIFwic3ByaXRlRnJhbWVDYWNoZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNjLmVycm9ySUQoMTQwNCk7XG4gICAgfSk7XG5cbiAgICAvLyBTcHJpdGVGcmFtZVxuICAgIGpzLmdldChjYy5TcHJpdGVGcmFtZS5wcm90b3R5cGUsICdfdGV4dHVyZUxvYWRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2MuZXJyb3JJRCgxNDAwLCAnc3ByaXRlRnJhbWUuX3RleHR1cmVMb2FkZWQnLCAnc3ByaXRlRnJhbWUudGV4dHVyZUxvYWRlZCgpJyk7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHR1cmVMb2FkZWQoKTtcbiAgICB9KTtcbiAgICBtYXJrQXNSZW1vdmVkKGNjLlNwcml0ZUZyYW1lLCBbJ2FkZExvYWRlZEV2ZW50TGlzdGVuZXInXSk7XG4gICAgbWFya0Z1bmN0aW9uV2FybmluZyhjYy5TcHJpdGUucHJvdG90eXBlLCB7XG4gICAgICAgIHNldFN0YXRlOiAnY2MuU3ByaXRlLnNldE1hdGVyaWFsJyxcbiAgICAgICAgZ2V0U3RhdGU6ICdjYy5TcHJpdGUuZ2V0TWF0ZXJpYWwnXG4gICAgfSwgJ2NjLlNwcml0ZScpO1xuXG4gICAganMuZ2V0KGNjLlNwcml0ZUZyYW1lLnByb3RvdHlwZSwgJ2NsZWFyVGV4dHVyZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2Mud2FybklEKDE0MDYsICdjYy5TcHJpdGVGcmFtZScsICdjbGVhclRleHR1cmUnKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHt9O1xuICAgIH0pO1xuXG4gICAgLy8gY2MudGV4dHVyZUNhY2hlXG4gICAganMuZ2V0KGNjLCAndGV4dHVyZUNhY2hlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjYy5lcnJvcklEKDE0MDYsICdjYycsICd0ZXh0dXJlQ2FjaGUnKTtcbiAgICB9KTtcblxuICAgIC8vIFRleHR1cmVcbiAgICB2YXIgVGV4dHVyZTJEID0gY2MuVGV4dHVyZTJEO1xuICAgIGpzLm9ic29sZXRlKFRleHR1cmUyRC5wcm90b3R5cGUsICd0ZXh0dXJlLnJlbGVhc2VUZXh0dXJlJywgJ3RleHR1cmUuZGVzdHJveScpO1xuXG4gICAganMuZ2V0KFRleHR1cmUyRC5wcm90b3R5cGUsICdnZXROYW1lJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjYy53YXJuSUQoMTQwMCwgJ3RleHR1cmUuZ2V0TmFtZSgpJywgJ3RleHR1cmUuX2dsSUQnKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nbElEIHx8IG51bGw7XG4gICAgICAgIH07XG4gICAgfSk7XG5cbiAgICBqcy5nZXQoVGV4dHVyZTJELnByb3RvdHlwZSwgJ2lzTG9hZGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjYy5lcnJvcklEKDE0MDAsICd0ZXh0dXJlLmlzTG9hZGVkIGZ1bmN0aW9uJywgJ3RleHR1cmUubG9hZGVkIHByb3BlcnR5Jyk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2FkZWQ7XG4gICAgICAgIH07XG4gICAgfSk7XG5cbiAgICBqcy5nZXQoVGV4dHVyZTJELnByb3RvdHlwZSwgJ3NldEFudGlBbGlhc1RleFBhcmFtZXRlcnMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNjLndhcm5JRCgxNDAwLCAndGV4dHVyZS5zZXRBbnRpQWxpYXNUZXhQYXJhbWV0ZXJzKCknLCAndGV4dHVyZS5zZXRGaWx0ZXJzKGNjLlRleHR1cmUyRC5GaWx0ZXIuTElORUFSLCBjYy5UZXh0dXJlMkQuRmlsdGVyLkxJTkVBUiknKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RmlsdGVycyhUZXh0dXJlMkQuRmlsdGVyLkxJTkVBUiwgVGV4dHVyZTJELkZpbHRlci5MSU5FQVIpO1xuICAgICAgICB9O1xuICAgIH0pO1xuXG4gICAganMuZ2V0KFRleHR1cmUyRC5wcm90b3R5cGUsICdzZXRBbGlhc1RleFBhcmFtZXRlcnMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNjLndhcm5JRCgxNDAwLCAndGV4dHVyZS5zZXRBbnRpQWxpYXNUZXhQYXJhbWV0ZXJzKCknLCAndGV4dHVyZS5zZXRGaWx0ZXJzKGNjLlRleHR1cmUyRC5GaWx0ZXIuTkVBUkVTVCwgY2MuVGV4dHVyZTJELkZpbHRlci5ORUFSRVNUKScpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5zZXRGaWx0ZXJzKFRleHR1cmUyRC5GaWx0ZXIuTkVBUkVTVCwgVGV4dHVyZTJELkZpbHRlci5ORUFSRVNUKTtcbiAgICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIGNjLm1hY3JvXG4gICAgbWFya0FzUmVtb3ZlZEluT2JqZWN0KGNjLm1hY3JvLCBbJ0VOQUJMRV9HTF9TVEFURV9DQUNIRScsICdGSVhfQVJUSUZBQ1RTX0JZX1NUUkVDSElOR19URVhFTCddLCAnY2MubWFjcm8nKTtcblxuICAgIHByb3ZpZGVDbGVhckVycm9yKGNjLm1hY3JvLCB7XG4gICAgICAgIFBJOiAnTWF0aC5QSScsXG4gICAgICAgIFBJMjogJ01hdGguUEkqMicsXG4gICAgICAgIEZMVF9NQVg6ICdOdW1iZXIuTUFYX1ZBTFVFJyxcbiAgICAgICAgRkxUX01JTjogJ051bWJlci5NSU5fVkFMVUUnLFxuICAgICAgICBVSU5UX01BWDogJ051bWJlci5NQVhfU0FGRV9JTlRFR0VSJ1xuICAgIH0sICdjYy5tYWNybycpO1xuXG4gICAgLy8gY2MuZ2FtZVxuICAgIG1hcmtBc1JlbW92ZWRJbk9iamVjdChjYy5nYW1lLCBbJ0NPTkZJR19LRVknXSwgJ2NjLmdhbWUnKTtcblxuICAgIC8vIGNjLnN5c1xuICAgIG1hcmtBc1JlbW92ZWRJbk9iamVjdChjYy5zeXMsIFsnZHVtcFJvb3QnLCAnY2xlYW5TY3JpcHQnXSwgJ2NjLnN5cycpO1xuXG4gICAgLy8gY2MuRGlyZWN0b3JcbiAgICBwcm92aWRlQ2xlYXJFcnJvcihjYy5EaXJlY3Rvciwge1xuICAgICAgICBFVkVOVF9QUk9KRUNUSU9OX0NIQU5HRUQ6ICcnLFxuICAgICAgICBFVkVOVF9CRUZPUkVfVklTSVQ6ICdFVkVOVF9BRlRFUl9VUERBVEUnLFxuICAgICAgICBFVkVOVF9BRlRFUl9WSVNJVDogJ0VWRU5UX0JFRk9SRV9EUkFXJ1xuICAgIH0sICdjYy5EaXJlY3RvcicpO1xuICAgIG1hcmtGdW5jdGlvbldhcm5pbmcoY2MuRGlyZWN0b3IucHJvdG90eXBlLCB7XG4gICAgICAgIGNvbnZlcnRUb0dMOiAnY2Mudmlldy5jb252ZXJ0VG9Mb2NhdGlvbkluVmlldycsXG4gICAgICAgIGNvbnZlcnRUb1VJOiAnJyxcbiAgICAgICAgZ2V0V2luU2l6ZTogJ2NjLndpblNpemUnLFxuICAgICAgICBnZXRXaW5TaXplSW5QaXhlbHM6ICdjYy53aW5TaXplJyxcbiAgICAgICAgZ2V0VmlzaWJsZVNpemU6ICdjYy52aWV3LmdldFZpc2libGVTaXplJyxcbiAgICAgICAgZ2V0VmlzaWJsZU9yaWdpbjogJ2NjLnZpZXcuZ2V0VmlzaWJsZU9yaWdpbicsXG4gICAgICAgIHB1cmdlQ2FjaGVkRGF0YTogJ2NjLmxvYWRlci5yZWxlYXNlQWxsJyxcbiAgICAgICAgc2V0RGVwdGhUZXN0OiAnY2MuQ2FtZXJhLm1haW4uZGVwdGgnLFxuICAgICAgICBzZXRDbGVhckNvbG9yOiAnY2MuQ2FtZXJhLm1haW4uYmFja2dyb3VuZENvbG9yJyxcbiAgICAgICAgZ2V0UnVubmluZ1NjZW5lOiAnY2MuZGlyZWN0b3IuZ2V0U2NlbmUnLFxuICAgICAgICBnZXRBbmltYXRpb25JbnRlcnZhbDogJ2NjLmdhbWUuZ2V0RnJhbWVSYXRlJyxcbiAgICAgICAgc2V0QW5pbWF0aW9uSW50ZXJ2YWw6ICdjYy5nYW1lLnNldEZyYW1lUmF0ZScsXG4gICAgICAgIGlzRGlzcGxheVN0YXRzOiAnY2MuZGVidWcuaXNEaXNwbGF5U3RhdHMnLFxuICAgICAgICBzZXREaXNwbGF5U3RhdHM6ICdjYy5kZWJ1Zy5zZXREaXNwbGF5U3RhdHMnLFxuICAgICAgICBzdG9wQW5pbWF0aW9uOiAnY2MuZ2FtZS5wYXVzZScsXG4gICAgICAgIHN0YXJ0QW5pbWF0aW9uOiAnY2MuZ2FtZS5yZXN1bWUnXG4gICAgfSwgJ2NjLkRpcmVjdG9yJyk7XG4gICAgbWFya0FzUmVtb3ZlZChjYy5EaXJlY3RvciwgWydwdXNoU2NlbmUnLCAncG9wU2NlbmUnLCAncG9wVG9Sb290U2NlbmUnLCAncG9wVG9TY2VuZVN0YWNrTGV2ZWwnLCAnc2V0UHJvamVjdGlvbicsICdnZXRQcm9qZWN0aW9uJ10sICdjYy5EaXJlY3RvcicpO1xuXG4gICAgLy8gU2NoZWR1bGVyXG4gICAgcHJvdmlkZUNsZWFyRXJyb3IoY2MuU2NoZWR1bGVyLCB7XG4gICAgICAgIHNjaGVkdWxlQ2FsbGJhY2tGb3JUYXJnZXQ6ICdzY2hlZHVsZScsXG4gICAgICAgIHNjaGVkdWxlVXBkYXRlRm9yVGFyZ2V0OiAnc2NoZWR1bGVVcGRhdGUnLFxuICAgICAgICB1bnNjaGVkdWxlQ2FsbGJhY2tGb3JUYXJnZXQ6ICd1bnNjaGVkdWxlJyxcbiAgICAgICAgdW5zY2hlZHVsZVVwZGF0ZUZvclRhcmdldDogJ3Vuc2NoZWR1bGVVcGRhdGUnLFxuICAgICAgICB1bnNjaGVkdWxlQWxsQ2FsbGJhY2tzRm9yVGFyZ2V0OiAndW5zY2hlZHVsZUFsbEZvclRhcmdldCcsXG4gICAgICAgIHVuc2NoZWR1bGVBbGxDYWxsYmFja3M6ICd1bnNjaGVkdWxlQWxsJyxcbiAgICAgICAgdW5zY2hlZHVsZUFsbENhbGxiYWNrc1dpdGhNaW5Qcmlvcml0eTogJ3Vuc2NoZWR1bGVBbGxXaXRoTWluUHJpb3JpdHknXG4gICAgfSwgJ2NjLlNjaGVkdWxlcicpO1xuXG4gICAgLy8gY2Mudmlld1xuICAgIHByb3ZpZGVDbGVhckVycm9yKGNjLnZpZXcsIHtcbiAgICAgICAgYWRqdXN0Vmlld1BvcnQ6ICdhZGp1c3RWaWV3cG9ydE1ldGEnLFxuICAgICAgICBzZXRWaWV3UG9ydEluUG9pbnRzOiAnc2V0Vmlld3BvcnRJblBvaW50cycsXG4gICAgICAgIGdldFZpZXdQb3J0UmVjdDogJ2dldFZpZXdwb3J0UmVjdCdcbiAgICB9LCAnY2MudmlldycpO1xuICAgIG1hcmtBc1JlbW92ZWRJbk9iamVjdChjYy52aWV3LCBbJ2lzVmlld1JlYWR5JywgJ3NldFRhcmdldERlbnNpdHlEUEknLCAnZ2V0VGFyZ2V0RGVuc2l0eURQSScsICdzZXRGcmFtZVpvb21GYWN0b3InLCAnY2FuU2V0Q29udGVudFNjYWxlRmFjdG9yJywgJ3NldENvbnRlbnRUcmFuc2xhdGVMZWZ0VG9wJywgJ2dldENvbnRlbnRUcmFuc2xhdGVMZWZ0VG9wJywgJ3NldFZpZXdOYW1lJywgJ2dldFZpZXdOYW1lJ10sICdjYy52aWV3Jyk7XG5cbiAgICAvLyBMb2FkZXJcbiAgICBtYXJrQXNSZW1vdmVkKGNjLlBpcGVsaW5lLCBbJ2Zsb3dJbkRlcHMnLCAnZ2V0SXRlbXMnXSwgJ2NjLmxvYWRlcicpO1xuXG4gICAgLy8gY2MuUGh5c2ljc01hbmFnZXJcbiAgICBtYXJrQXNSZW1vdmVkKGNjLlBoeXNpY3NNYW5hZ2VyLCBbJ2F0dGFjaERlYnVnRHJhd1RvQ2FtZXJhJywgJ2RldGFjaERlYnVnRHJhd0Zyb21DYW1lcmEnXSk7XG5cbiAgICAvLyBjYy5Db2xsaXNpb25NYW5hZ2VyXG4gICAgbWFya0FzUmVtb3ZlZChjYy5Db2xsaXNpb25NYW5hZ2VyLCBbJ2F0dGFjaERlYnVnRHJhd1RvQ2FtZXJhJywgJ2RldGFjaERlYnVnRHJhd0Zyb21DYW1lcmEnXSk7XG5cbiAgICAvLyBjYy5Ob2RlXG4gICAgcHJvdmlkZUNsZWFyRXJyb3IoY2MuX0Jhc2VOb2RlLnByb3RvdHlwZSwge1xuICAgICAgICAndGFnJzogJ25hbWUnLFxuICAgICAgICAnZ2V0VGFnJzogJ25hbWUnLFxuICAgICAgICAnc2V0VGFnJzogJ25hbWUnLFxuICAgICAgICAnZ2V0Q2hpbGRCeVRhZyc6ICdnZXRDaGlsZEJ5TmFtZScsXG4gICAgICAgICdyZW1vdmVDaGlsZEJ5VGFnJzogJ2dldENoaWxkQnlOYW1lKG5hbWUpLmRlc3Ryb3koKSdcbiAgICB9KTtcblxuICAgIG1hcmtBc1JlbW92ZWQoY2MuTm9kZSwgWydfY2FzY2FkZUNvbG9yRW5hYmxlZCcsICdjYXNjYWRlQ29sb3InLCAnaXNDYXNjYWRlQ29sb3JFbmFibGVkJywgJ3NldENhc2NhZGVDb2xvckVuYWJsZWQnLCAnX2Nhc2NhZGVPcGFjaXR5RW5hYmxlZCcsICdjYXNjYWRlT3BhY2l0eScsICdpc0Nhc2NhZGVPcGFjaXR5RW5hYmxlZCcsICdzZXRDYXNjYWRlT3BhY2l0eUVuYWJsZWQnLCAnb3BhY2l0eU1vZGlmeVJHQicsICdpc09wYWNpdHlNb2RpZnlSR0InLCAnc2V0T3BhY2l0eU1vZGlmeVJHQicsICdpZ25vcmVBbmNob3InLCAnaXNJZ25vcmVBbmNob3JQb2ludEZvclBvc2l0aW9uJywgJ2lnbm9yZUFuY2hvclBvaW50Rm9yUG9zaXRpb24nLCAnaXNSdW5uaW5nJywgJ19zZ05vZGUnXSk7XG5cbiAgICBtYXJrRnVuY3Rpb25XYXJuaW5nKGNjLk5vZGUucHJvdG90eXBlLCB7XG4gICAgICAgIGdldE5vZGVUb1BhcmVudFRyYW5zZm9ybTogJ2dldExvY2FsTWF0cml4JyxcbiAgICAgICAgZ2V0Tm9kZVRvUGFyZW50VHJhbnNmb3JtQVI6ICdnZXRMb2NhbE1hdHJpeCcsXG4gICAgICAgIGdldE5vZGVUb1dvcmxkVHJhbnNmb3JtOiAnZ2V0V29ybGRNYXRyaXgnLFxuICAgICAgICBnZXROb2RlVG9Xb3JsZFRyYW5zZm9ybUFSOiAnZ2V0V29ybGRNYXRyaXgnLFxuICAgICAgICBnZXRQYXJlbnRUb05vZGVUcmFuc2Zvcm06ICdnZXRMb2NhbE1hdHJpeCcsXG4gICAgICAgIGdldFdvcmxkVG9Ob2RlVHJhbnNmb3JtOiAnZ2V0V29ybGRNYXRyaXgnLFxuICAgICAgICBjb252ZXJ0VG91Y2hUb05vZGVTcGFjZTogJ2NvbnZlcnRUb05vZGVTcGFjZUFSJyxcbiAgICAgICAgY29udmVydFRvdWNoVG9Ob2RlU3BhY2VBUjogJ2NvbnZlcnRUb05vZGVTcGFjZUFSJyxcbiAgICAgICAgY29udmVydFRvV29ybGRTcGFjZTogJ2NvbnZlcnRUb1dvcmxkU3BhY2VBUicsXG4gICAgICAgIGNvbnZlcnRUb05vZGVTcGFjZTogJ2NvbnZlcnRUb05vZGVTcGFjZUFSJ1xuICAgIH0pO1xuXG4gICAgcHJvdmlkZUNsZWFyRXJyb3IoY2MuTm9kZS5wcm90b3R5cGUsIHtcbiAgICAgICAgZ2V0Um90YXRpb25YOiAncm90YXRpb25YJyxcbiAgICAgICAgc2V0Um90YXRpb25YOiAncm90YXRpb25YJyxcbiAgICAgICAgZ2V0Um90YXRpb25ZOiAncm90YXRpb25ZJyxcbiAgICAgICAgc2V0Um90YXRpb25ZOiAncm90YXRpb25ZJyxcbiAgICAgICAgZ2V0UG9zaXRpb25YOiAneCcsXG4gICAgICAgIHNldFBvc2l0aW9uWDogJ3gnLFxuICAgICAgICBnZXRQb3NpdGlvblk6ICd5JyxcbiAgICAgICAgc2V0UG9zaXRpb25ZOiAneScsXG4gICAgICAgIGdldFNrZXdYOiAnc2tld1gnLFxuICAgICAgICBzZXRTa2V3WDogJ3NrZXdYJyxcbiAgICAgICAgZ2V0U2tld1k6ICdza2V3WScsXG4gICAgICAgIHNldFNrZXdZOiAnc2tld1knLFxuICAgICAgICBnZXRTY2FsZVg6ICdzY2FsZVgnLFxuICAgICAgICBzZXRTY2FsZVg6ICdzY2FsZVgnLFxuICAgICAgICBnZXRTY2FsZVk6ICdzY2FsZVknLFxuICAgICAgICBzZXRTY2FsZVk6ICdzY2FsZVknLFxuICAgICAgICBnZXRPcGFjaXR5OiAnb3BhY2l0eScsXG4gICAgICAgIHNldE9wYWNpdHk6ICdvcGFjaXR5JyxcbiAgICAgICAgZ2V0Q29sb3I6ICdjb2xvcicsXG4gICAgICAgIHNldENvbG9yOiAnY29sb3InLFxuICAgICAgICBnZXRMb2NhbFpPcmRlcjogJ3pJbmRleCcsXG4gICAgICAgIHNldExvY2FsWk9yZGVyOiAnekluZGV4J1xuICAgIH0pO1xuXG4gICAgLy8gY2MuQ29tcG9uZW50XG4gICAgbWFya0FzUmVtb3ZlZChjYy5Db21wb25lbnQsIFsnaXNSdW5uaW5nJ10pO1xuXG4gICAgcHJvdmlkZUNsZWFyRXJyb3IoY2MuU3ByaXRlLnByb3RvdHlwZSwge1xuICAgICAgICBzZXRJbnNldExlZnQ6ICdjYy5TcHJpdGVGcmFtZSBpbnNldExlZnQnLFxuICAgICAgICBzZXRJbnNldFJpZ2h0OiAnY2MuU3ByaXRlRnJhbWUgaW5zZXRSaWdodCcsXG4gICAgICAgIHNldEluc2V0VG9wOiAnY2MuU3ByaXRlRnJhbWUgaW5zZXRUb3AnLFxuICAgICAgICBzZXRJbnNldEJvdHRvbTogJ2NjLlNwcml0ZUZyYW1lIGluc2V0Qm90dG9tJ1xuICAgIH0pO1xuXG4gICAgLy8gY2MuQ2FtZXJhXG4gICAgbWFya0Z1bmN0aW9uV2FybmluZyhjYy5DYW1lcmEucHJvdG90eXBlLCB7XG4gICAgICAgIGdldE5vZGVUb0NhbWVyYVRyYW5zZm9ybTogJ2dldFdvcmxkVG9TY3JlZW5NYXRyaXgyRCcsXG4gICAgICAgIGdldENhbWVyYVRvV29ybGRQb2ludDogJ2dldFNjcmVlblRvV29ybGRQb2ludCcsXG4gICAgICAgIGdldFdvcmxkVG9DYW1lcmFQb2ludDogJ2dldFdvcmxkVG9TY3JlZW5Qb2ludCcsXG4gICAgICAgIGdldENhbWVyYVRvV29ybGRNYXRyaXg6ICdnZXRTY3JlZW5Ub1dvcmxkTWF0cml4MkQnLFxuICAgICAgICBnZXRXb3JsZFRvQ2FtZXJhTWF0cml4OiAnZ2V0V29ybGRUb1NjcmVlbk1hdHJpeDJEJ1xuICAgIH0pO1xuXG4gICAgbWFya0FzUmVtb3ZlZChjYy5DYW1lcmEsIFsnYWRkVGFyZ2V0JywgJ3JlbW92ZVRhcmdldCcsICdnZXRUYXJnZXRzJ10pO1xuXG4gICAgLy8gU0NFTkVcbiAgICB2YXIgRVJSID0gJ1wiJXNcIiBpcyBub3QgZGVmaW5lZCBpbiB0aGUgU2NlbmUsIGl0IGlzIG9ubHkgZGVmaW5lZCBpbiBub3JtYWwgbm9kZXMuJztcbiAgICBDQ19FRElUT1IgfHwgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoY2MuU2NlbmUucHJvdG90eXBlLCB7XG4gICAgICAgIGFjdGl2ZToge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgY2MuZXJyb3IoRVJSLCAnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoKSB7XG4gICAgICAgICAgICAgICAgY2MuZXJyb3IoRVJSLCAnYWN0aXZlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFjdGl2ZUluSGllcmFyY2h5OiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICBjYy5lcnJvcihFUlIsICdhY3RpdmVJbkhpZXJhcmNoeScpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBnZXRDb21wb25lbnQ6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIGNjLmVycm9yKEVSUiwgJ2dldENvbXBvbmVudCcpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFkZENvbXBvbmVudDoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgY2MuZXJyb3IoRVJSLCAnYWRkQ29tcG9uZW50Jyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gVmFsdWUgdHlwZXNcbiAgICBwcm92aWRlQ2xlYXJFcnJvcihjYywge1xuICAgICAgICAvLyBBZmZpbmVUcmFuc2Zvcm1cbiAgICAgICAgYWZmaW5lVHJhbnNmb3JtTWFrZTogJ2NjLkFmZmluZVRyYW5zZm9ybS5jcmVhdGUnLFxuICAgICAgICBhZmZpbmVUcmFuc2Zvcm1NYWtlSWRlbnRpdHk6ICdjYy5BZmZpbmVUcmFuc2Zvcm0uaWRlbnRpdHknLFxuICAgICAgICBhZmZpbmVUcmFuc2Zvcm1DbG9uZTogJ2NjLkFmZmluZVRyYW5zZm9ybS5jbG9uZScsXG4gICAgICAgIGFmZmluZVRyYW5zZm9ybUNvbmNhdDogJ2NjLkFmZmluZVRyYW5zZm9ybS5jb25jYXQnLFxuICAgICAgICBhZmZpbmVUcmFuc2Zvcm1Db25jYXRJbjogJ2NjLkFmZmluZVRyYW5zZm9ybS5jb25jYXQnLFxuICAgICAgICBhZmZpbmVUcmFuc2Zvcm1JbnZlcnQ6ICdjYy5BZmZpbmVUcmFuc2Zvcm0uaW52ZXJ0JyxcbiAgICAgICAgYWZmaW5lVHJhbnNmb3JtSW52ZXJ0SW46ICdjYy5BZmZpbmVUcmFuc2Zvcm0uaW52ZXJ0JyxcbiAgICAgICAgYWZmaW5lVHJhbnNmb3JtSW52ZXJ0T3V0OiAnY2MuQWZmaW5lVHJhbnNmb3JtLmludmVydCcsXG4gICAgICAgIGFmZmluZVRyYW5zZm9ybUVxdWFsVG9UcmFuc2Zvcm06ICdjYy5BZmZpbmVUcmFuc2Zvcm0uZXF1YWwnLFxuICAgICAgICBwb2ludEFwcGx5QWZmaW5lVHJhbnNmb3JtOiAnY2MuQWZmaW5lVHJhbnNmb3JtLnRyYW5zZm9ybVZlYzInLFxuICAgICAgICBzaXplQXBwbHlBZmZpbmVUcmFuc2Zvcm06ICdjYy5BZmZpbmVUcmFuc2Zvcm0udHJhbnNmb3JtU2l6ZScsXG4gICAgICAgIHJlY3RBcHBseUFmZmluZVRyYW5zZm9ybTogJ2NjLkFmZmluZVRyYW5zZm9ybS50cmFuc2Zvcm1SZWN0JyxcbiAgICAgICAgb2JiQXBwbHlBZmZpbmVUcmFuc2Zvcm06ICdjYy5BZmZpbmVUcmFuc2Zvcm0udHJhbnNmb3JtT2JiJyxcblxuICAgICAgICAvLyBWZWMyXG4gICAgICAgIHBvaW50RXF1YWxUb1BvaW50OiAnY2MuVmVjMiBlcXVhbHMnLFxuXG4gICAgICAgIC8vIFNpemVcbiAgICAgICAgc2l6ZUVxdWFsVG9TaXplOiAnY2MuU2l6ZSBlcXVhbHMnLFxuXG4gICAgICAgIC8vIFJlY3RcbiAgICAgICAgcmVjdEVxdWFsVG9SZWN0OiAncmVjdEEuZXF1YWxzKHJlY3RCKScsXG4gICAgICAgIHJlY3RDb250YWluc1JlY3Q6ICdyZWN0QS5jb250YWluc1JlY3QocmVjdEIpJyxcbiAgICAgICAgcmVjdENvbnRhaW5zUG9pbnQ6ICdyZWN0LmNvbnRhaW5zKHZlYzIpJyxcbiAgICAgICAgcmVjdE92ZXJsYXBzUmVjdDogJ3JlY3RBLmludGVyc2VjdHMocmVjdEIpJyxcbiAgICAgICAgcmVjdEludGVyc2VjdHNSZWN0OiAncmVjdEEuaW50ZXJzZWN0cyhyZWN0QiknLFxuICAgICAgICByZWN0SW50ZXJzZWN0aW9uOiAncmVjdEEuaW50ZXJzZWN0aW9uKGludGVyc2VjdGlvbiwgcmVjdEIpJyxcbiAgICAgICAgcmVjdFVuaW9uOiAncmVjdEEudW5pb24odW5pb24sIHJlY3RCKScsXG4gICAgICAgIHJlY3RHZXRNYXhYOiAncmVjdC54TWF4JyxcbiAgICAgICAgcmVjdEdldE1pZFg6ICdyZWN0LmNlbnRlci54JyxcbiAgICAgICAgcmVjdEdldE1pblg6ICdyZWN0LnhNaW4nLFxuICAgICAgICByZWN0R2V0TWF4WTogJ3JlY3QueU1heCcsXG4gICAgICAgIHJlY3RHZXRNaWRZOiAncmVjdC5jZW50ZXIueScsXG4gICAgICAgIHJlY3RHZXRNaW5ZOiAncmVjdC55TWluJyxcblxuICAgICAgICAvLyBDb2xvclxuICAgICAgICBjb2xvckVxdWFsOiAnY29sb3JBLmVxdWFscyhjb2xvckIpJyxcbiAgICAgICAgaGV4VG9Db2xvcjogJ2NvbG9yLmZyb21IRVgoaGV4Q29sb3IpJyxcbiAgICAgICAgY29sb3JUb0hleDogJ2NvbG9yLnRvSEVYKCknLFxuXG4gICAgICAgIC8vIEVudW1zXG4gICAgICAgIFRleHRBbGlnbm1lbnQ6ICdjYy5tYWNyby5UZXh0QWxpZ25tZW50JyxcbiAgICAgICAgVmVydGljYWxUZXh0QWxpZ25tZW50OiAnY2MubWFjcm8uVmVydGljYWxUZXh0QWxpZ25tZW50JyxcblxuICAgICAgICAvLyBQb2ludCBFeHRlbnNpb25zXG4gICAgICAgIHBOZWc6ICdwLm5lZygpJyxcbiAgICAgICAgcEFkZDogJ3AxLmFkZChwMiknLFxuICAgICAgICBwU3ViOiAncDEuc3ViKHAyKScsXG4gICAgICAgIHBNdWx0OiAncC5tdWwoZmFjdG9yKScsXG4gICAgICAgIHBNaWRwb2ludDogJ3AxLmFkZChwMikubXVsKDAuNSknLFxuICAgICAgICBwRG90OiAncDEuZG90KHAyKScsXG4gICAgICAgIHBDcm9zczogJ3AxLmNyb3NzKHAyKScsXG4gICAgICAgIHBQZXJwOiAncC5yb3RhdGUoLTkwICogTWF0aC5QSSAvIDE4MCknLFxuICAgICAgICBwUlBlcnA6ICdwLnJvdGF0ZSg5MCAqIE1hdGguUEkgLyAxODApJyxcbiAgICAgICAgcFByb2plY3Q6ICdwMS5wcm9qZWN0KHAyKScsXG4gICAgICAgIHBMZW5ndGhTUTogJ3AubWFnU3FyKCknLFxuICAgICAgICBwRGlzdGFuY2VTUTogJ3AxLnN1YihwMikubWFnU3FyKCknLFxuICAgICAgICBwTGVuZ3RoOiAncC5tYWcoKScsXG4gICAgICAgIHBEaXN0YW5jZTogJ3AxLnN1YihwMikubWFnKCknLFxuICAgICAgICBwTm9ybWFsaXplOiAncC5ub3JtYWxpemUoKScsXG4gICAgICAgIHBGb3JBbmdsZTogJ2NjLnYyKE1hdGguY29zKGEpLCBNYXRoLnNpbihhKSknLFxuICAgICAgICBwVG9BbmdsZTogJ01hdGguYXRhbjIodi55LCB2LngpJyxcbiAgICAgICAgcFplcm9JbjogJ3AueCA9IHAueSA9IDAnLFxuICAgICAgICBwSW46ICdwMS5zZXQocDIpJyxcbiAgICAgICAgcE11bHRJbjogJ3AubXVsU2VsZihmYWN0b3IpJyxcbiAgICAgICAgcFN1YkluOiAncDEuc3ViU2VsZihwMiknLFxuICAgICAgICBwQWRkSW46ICdwMS5hZGRTZWxmKHAyKScsXG4gICAgICAgIHBOb3JtYWxpemVJbjogJ3Aubm9ybWFsaXplU2VsZigpJyxcbiAgICAgICAgcFNhbWVBczogJ3AxLmVxdWFscyhwMiknLFxuICAgICAgICBwQW5nbGU6ICd2MS5hbmdsZSh2MiknLFxuICAgICAgICBwQW5nbGVTaWduZWQ6ICd2MS5zaWduQW5nbGUodjIpJyxcbiAgICAgICAgcFJvdGF0ZUJ5QW5nbGU6ICdwLnJvdGF0ZShyYWRpYW5zKScsXG4gICAgICAgIHBDb21wTXVsdDogJ3YxLmRvdCh2MiknLFxuICAgICAgICBwRnV6enlFcXVhbDogJ3YxLmZ1enp5RXF1YWxzKHYyLCB0b2xlcmFuY2UpJyxcbiAgICAgICAgcExlcnA6ICdwLmxlcnAoZW5kUG9pbnQsIHJhdGlvKScsXG4gICAgICAgIHBDbGFtcDogJ3AuY2xhbXBmKG1pbl9pbmNsdXNpdmUsIG1heF9pbmNsdXNpdmUpJyxcblxuICAgICAgICByYW5kOiAnTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmJyxcbiAgICAgICAgcmFuZG9tTWludXMxVG8xOiAnKE1hdGgucmFuZG9tKCkgLSAwLjUpICogMicsXG5cbiAgICAgICAgY29udGFpbmVyOiAnY2MuZ2FtZS5jb250YWluZXInLFxuICAgICAgICBfY2FudmFzOiAnY2MuZ2FtZS5jYW52YXMnLFxuICAgICAgICBfcmVuZGVyVHlwZTogJ2NjLmdhbWUucmVuZGVyVHlwZScsXG5cbiAgICAgICAgX2dldEVycm9yOiAnY2MuZGVidWcuZ2V0RXJyb3InLFxuICAgICAgICBfaW5pdERlYnVnU2V0dGluZzogJ2NjLmRlYnVnLl9yZXNldERlYnVnU2V0dGluZycsXG4gICAgICAgIERlYnVnTW9kZTogJ2NjLmRlYnVnLkRlYnVnTW9kZSdcbiAgICB9LCAnY2MnKTtcbiAgICBtYXJrQXNSZW1vdmVkSW5PYmplY3QoY2MsIFsnYmxlbmRGdW5jRGlzYWJsZScsICdwRnJvbVNpemUnLCAncENvbXBPcCcsICdwSW50ZXJzZWN0UG9pbnQnLCAncFNlZ21lbnRJbnRlcnNlY3QnLCAncExpbmVJbnRlcnNlY3QnLCAnb2JiQXBwbHlNYXRyaXgnLCAnZ2V0SW1hZ2VGb3JtYXRCeURhdGEnLCAnaW5pdEVuZ2luZSddLCAnY2MnKTtcbiAgICBtYXJrRnVuY3Rpb25XYXJuaW5nKGNjLCB7XG4gICAgICAgIC8vIGNjLnBcbiAgICAgICAgcDogJ2NjLnYyJ1xuICAgIH0sICdjYycpO1xuICAgIC8vIGNjLlJlY3RcbiAgICBwcm92aWRlQ2xlYXJFcnJvcihjYy5SZWN0LCB7XG4gICAgICAgIGNvbnRhaW46ICdyZWN0QS5jb250YWlucyhyZWN0QiknLFxuICAgICAgICB0cmFuc2Zvcm1NYXQ0OiAncmVjdC50cmFuc2Zvcm1NYXQ0KG91dCwgbWF0NCknXG4gICAgfSk7XG4gICAgLy8gY2MuQ29sb3JcbiAgICBwcm92aWRlQ2xlYXJFcnJvcihjYy5Db2xvciwge1xuICAgICAgICByZ2IyaHN2OiAnY29sb3IudG9IU1YoKScsXG4gICAgICAgIGhzdjJyZ2I6ICdjb2xvci5mcm9tSFNWKGgsIHMsIHYpJ1xuICAgIH0pO1xuXG4gICAgLy8gbWFjcm8gZnVuY3Rpb25zXG4gICAganMuZ2V0KGNjLCAnbGVycCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2Mud2FybklEKDE0MDAsICdjYy5sZXJwJywgJ2NjLm1pc2MubGVycCcpO1xuICAgICAgICByZXR1cm4gY2MubWlzYy5sZXJwO1xuICAgIH0pO1xuICAgIGpzLmdldChjYywgJ3JhbmRvbTBUbzEnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNjLndhcm5JRCgxNDAwLCAnY2MucmFuZG9tMFRvMScsICdNYXRoLnJhbmRvbScpO1xuICAgICAgICByZXR1cm4gTWF0aC5yYW5kb207XG4gICAgfSk7XG4gICAganMuZ2V0KGNjLCAnZGVncmVlc1RvUmFkaWFucycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2Mud2FybklEKDE0MDAsICdjYy5kZWdyZWVzVG9SYWRpYW5zJywgJ2NjLm1pc2MuZGVncmVlc1RvUmFkaWFucycpO1xuICAgICAgICByZXR1cm4gY2MubWlzYy5kZWdyZWVzVG9SYWRpYW5zO1xuICAgIH0pO1xuICAgIGpzLmdldChjYywgJ3JhZGlhbnNUb0RlZ3JlZXMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNjLndhcm5JRCgxNDAwLCAnY2MucmFkaWFuc1RvRGVncmVlcycsICdjYy5taXNjLnJhZGlhbnNUb0RlZ3JlZXMnKTtcbiAgICAgICAgcmV0dXJuIGNjLm1pc2MucmFkaWFuc1RvRGVncmVlcztcbiAgICB9KTtcbiAgICBqcy5nZXQoY2MsICdjbGFtcGYnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNjLndhcm5JRCgxNDAwLCAnY2MuY2xhbXBmJywgJ2NjLm1pc2MuY2xhbXBmJyk7XG4gICAgICAgIHJldHVybiBjYy5taXNjLmNsYW1wZjtcbiAgICB9KTtcbiAgICBqcy5nZXQoY2MsICdjbGFtcDAxJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjYy53YXJuSUQoMTQwMCwgJ2NjLmNsYW1wMDEnLCAnY2MubWlzYy5jbGFtcDAxJyk7XG4gICAgICAgIHJldHVybiBjYy5taXNjLmNsYW1wMDE7XG4gICAgfSk7XG4gICAganMuZ2V0KGNjLCAnSW1hZ2VGb3JtYXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNjLndhcm5JRCgxNDAwLCAnY2MuSW1hZ2VGb3JtYXQnLCAnY2MubWFjcm8uSW1hZ2VGb3JtYXQnKTtcbiAgICAgICAgcmV0dXJuIGNjLm1hY3JvLkltYWdlRm9ybWF0O1xuICAgIH0pO1xuICAgIGpzLmdldChjYywgJ0tFWScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2Mud2FybklEKDE0MDAsICdjYy5LRVknLCAnY2MubWFjcm8uS0VZJyk7XG4gICAgICAgIHJldHVybiBjYy5tYWNyby5LRVk7XG4gICAgfSk7XG4gICAganMuZ2V0KGNjLCAnRWFzaW5nJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjYy53YXJuSUQoMTQwMCwgJ2NjLkVhc2luZycsICdjYy5lYXNpbmcnKTtcbiAgICAgICAgcmV0dXJuIGNjLmVhc2luZztcbiAgICB9KTtcblxuICAgIC8vIGNjLmlzQ2hpbGRDbGFzc09mXG4gICAganMuZ2V0KGNjLCAnaXNDaGlsZENsYXNzT2YnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNjLmVycm9ySUQoMTQwMCwgJ2NjLmlzQ2hpbGRDbGFzc09mJywgJ2NjLmpzLmlzQ2hpbGRDbGFzc09mJyk7XG4gICAgICAgIHJldHVybiBjYy5qcy5pc0NoaWxkQ2xhc3NPZjtcbiAgICB9KTtcblxuICAgIC8vIGRyYWdvbiBib25lc1xuICAgIGlmICh0eXBlb2YgZHJhZ29uQm9uZXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGpzLm9ic29sZXRlKGRyYWdvbkJvbmVzLkNDRmFjdG9yeSwgJ2RyYWdvbkJvbmVzLkNDRmFjdG9yeS5nZXRGYWN0b3J5JywgJ2dldEluc3RhbmNlJyk7XG4gICAgfVxuXG4gICAgLy8gcmVuZGVyRW5naW5lXG4gICAgY2MucmVuZGVyZXIucmVuZGVyRW5naW5lID0ge1xuICAgICAgICBnZXQgZ2Z4KCkge1xuICAgICAgICAgICAgY2Mud2FybklEKDE0MDAsICdjYy5yZW5kZXJlci5yZW5kZXJFbmdpbmUuZ2Z4JywgJ2NjLmdmeCcpO1xuICAgICAgICAgICAgcmV0dXJuIGNjLmdmeDtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IG1hdGgoKSB7XG4gICAgICAgICAgICBjYy53YXJuSUQoMTQwMCwgJ2NjLnJlbmRlcmVyLnJlbmRlckVuZ2luZS5tYXRoJywgJ2NjLnZtYXRoJyk7XG4gICAgICAgICAgICByZXR1cm4gY2Mudm1hdGg7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBJbnB1dEFzc2VtYmxlcigpIHtcbiAgICAgICAgICAgIGNjLndhcm5JRCgxNDAwLCAnY2MucmVuZGVyZXIucmVuZGVyRW5naW5lLklucHV0QXNzZW1ibGVyJywgJ2NjLnJlbmRlcmVyLklucHV0QXNzZW1ibGVyJyk7XG4gICAgICAgICAgICByZXR1cm4gY2MucmVuZGVyZXIuSW5wdXRBc3NlbWJsZXI7XG4gICAgICAgIH1cbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1SbGNISmxZMkYwWldRdWFuTWlYU3dpYm1GdFpYTWlPbHNpYW5NaUxDSmpZeUlzSWtORFgwUkZRbFZISWl3aVpHVndjbVZqWVhSbFJXNTFiU0lzSW05aWFpSXNJbTlzWkZCaGRHZ2lMQ0p1WlhkUVlYUm9JaXdpYUdGelZIbHdaVkJ5WldacGVFSmxabTl5WlNJc0lrTkRYMU5WVUZCUFVsUmZTa2xVSWl3aVpXNTFiVVJsWmlJc0lrWjFibU4wYVc5dUlpd2laVzUwY21sbGN5SXNJa1Z1ZFcwaUxDSm5aWFJNYVhOMElpd2laR1ZzYVcxcGRHVnlJaXdpYVNJc0lteGxibWQwYUNJc0ltVnVkSEo1SWl3aWJtRnRaU0lzSW05c1pGQnliM0JPWVcxbElpd2liMnhrVkhsd1pVNWhiV1VpTENKemNHeHBkQ0lzSW5Oc2FXTmxJaXdpWjJWMElpd2laWEp5YjNKSlJDSXNJbUpwYm1RaUxDSnRZWEpyUVhOU1pXMXZkbVZrSWl3aWIzZHVaWEpEZEc5eUlpd2ljbVZ0YjNabFpGQnliM0J6SWl3aWIzZHVaWEpPWVcxbElpd2laMlYwUTJ4aGMzTk9ZVzFsSWl3aVptOXlSV0ZqYUNJc0luQnliM0FpTENKbGNuSnZjaUlzSW1kbGRITmxkQ0lzSW5CeWIzUnZkSGx3WlNJc0ltMWhjbXRCYzBSbGNISmxZMkYwWldRaUxDSmtaWEJ5WldOaGRHVmtVSEp2Y0hNaUxDSmtaWE5qY21sd2RHOXljeUlzSWs5aWFtVmpkQ0lzSW1kbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjbk1pTENKa1pYQnlaV05oZEdWa1VISnZjQ0lzSW01bGQxQnliM0FpTENKa1pYTmpjbWx3ZEc5eUlpd2lkMkZ5YmtsRUlpd2lZMkZzYkNJc0luWWlMQ0p6WlhRaUxDSnRZWEpyUVhOU1pXMXZkbVZrU1c1UFltcGxZM1FpTENKdmQyNWxjazlpYWlJc0luQnliM1pwWkdWRGJHVmhja1Z5Y205eUlpd2liM2R1WlhJaUxDSmpiR0Z6YzA1aGJXVWlMQ0pKYm1adklpd2laR1ZtYVc1bElpd2lZV05qWlhOemIzSWlMQ0pCY25KaGVTSXNJbWx6UVhKeVlYa2lMQ0p0WVhBaUxDSjRJaXdpZEhKcGJTSXNJbVVpTENKbGRGQnliM0FpTENKdFlYSnJSblZ1WTNScGIyNVhZWEp1YVc1bklpd2ljSEp2Y0U1aGJXVWlMQ0p2Y21sbmFXNUdkVzVqSWl3aWQyRnliaUlzSW1Gd2NHeDVJaXdpWVhKbmRXMWxiblJ6SWl3aWJHOW5JaXdpVTNCeWFYUmxSbkpoYldVaUxDSjBaWGgwZFhKbFRHOWhaR1ZrSWl3aVUzQnlhWFJsSWl3aWMyVjBVM1JoZEdVaUxDSm5aWFJUZEdGMFpTSXNJbFJsZUhSMWNtVXlSQ0lzSW05aWMyOXNaWFJsSWl3aVgyZHNTVVFpTENKc2IyRmtaV1FpTENKelpYUkdhV3gwWlhKeklpd2lSbWxzZEdWeUlpd2lURWxPUlVGU0lpd2lUa1ZCVWtWVFZDSXNJbTFoWTNKdklpd2lVRWtpTENKUVNUSWlMQ0pHVEZSZlRVRllJaXdpUmt4VVgwMUpUaUlzSWxWSlRsUmZUVUZZSWl3aVoyRnRaU0lzSW5ONWN5SXNJa1JwY21WamRHOXlJaXdpUlZaRlRsUmZVRkpQU2tWRFZFbFBUbDlEU0VGT1IwVkVJaXdpUlZaRlRsUmZRa1ZHVDFKRlgxWkpVMGxVSWl3aVJWWkZUbFJmUVVaVVJWSmZWa2xUU1ZRaUxDSmpiMjUyWlhKMFZHOUhUQ0lzSW1OdmJuWmxjblJVYjFWSklpd2laMlYwVjJsdVUybDZaU0lzSW1kbGRGZHBibE5wZW1WSmJsQnBlR1ZzY3lJc0ltZGxkRlpwYzJsaWJHVlRhWHBsSWl3aVoyVjBWbWx6YVdKc1pVOXlhV2RwYmlJc0luQjFjbWRsUTJGamFHVmtSR0YwWVNJc0luTmxkRVJsY0hSb1ZHVnpkQ0lzSW5ObGRFTnNaV0Z5UTI5c2IzSWlMQ0puWlhSU2RXNXVhVzVuVTJObGJtVWlMQ0puWlhSQmJtbHRZWFJwYjI1SmJuUmxjblpoYkNJc0luTmxkRUZ1YVcxaGRHbHZia2x1ZEdWeWRtRnNJaXdpYVhORWFYTndiR0Y1VTNSaGRITWlMQ0p6WlhSRWFYTndiR0Y1VTNSaGRITWlMQ0p6ZEc5d1FXNXBiV0YwYVc5dUlpd2ljM1JoY25SQmJtbHRZWFJwYjI0aUxDSlRZMmhsWkhWc1pYSWlMQ0p6WTJobFpIVnNaVU5oYkd4aVlXTnJSbTl5VkdGeVoyVjBJaXdpYzJOb1pXUjFiR1ZWY0dSaGRHVkdiM0pVWVhKblpYUWlMQ0oxYm5OamFHVmtkV3hsUTJGc2JHSmhZMnRHYjNKVVlYSm5aWFFpTENKMWJuTmphR1ZrZFd4bFZYQmtZWFJsUm05eVZHRnlaMlYwSWl3aWRXNXpZMmhsWkhWc1pVRnNiRU5oYkd4aVlXTnJjMFp2Y2xSaGNtZGxkQ0lzSW5WdWMyTm9aV1IxYkdWQmJHeERZV3hzWW1GamEzTWlMQ0oxYm5OamFHVmtkV3hsUVd4c1EyRnNiR0poWTJ0elYybDBhRTFwYmxCeWFXOXlhWFI1SWl3aWRtbGxkeUlzSW1Ga2FuVnpkRlpwWlhkUWIzSjBJaXdpYzJWMFZtbGxkMUJ2Y25SSmJsQnZhVzUwY3lJc0ltZGxkRlpwWlhkUWIzSjBVbVZqZENJc0lsQnBjR1ZzYVc1bElpd2lVR2g1YzJsamMwMWhibUZuWlhJaUxDSkRiMnhzYVhOcGIyNU5ZVzVoWjJWeUlpd2lYMEpoYzJWT2IyUmxJaXdpVG05a1pTSXNJbWRsZEU1dlpHVlViMUJoY21WdWRGUnlZVzV6Wm05eWJTSXNJbWRsZEU1dlpHVlViMUJoY21WdWRGUnlZVzV6Wm05eWJVRlNJaXdpWjJWMFRtOWtaVlJ2VjI5eWJHUlVjbUZ1YzJadmNtMGlMQ0puWlhST2IyUmxWRzlYYjNKc1pGUnlZVzV6Wm05eWJVRlNJaXdpWjJWMFVHRnlaVzUwVkc5T2IyUmxWSEpoYm5ObWIzSnRJaXdpWjJWMFYyOXliR1JVYjA1dlpHVlVjbUZ1YzJadmNtMGlMQ0pqYjI1MlpYSjBWRzkxWTJoVWIwNXZaR1ZUY0dGalpTSXNJbU52Ym5abGNuUlViM1ZqYUZSdlRtOWtaVk53WVdObFFWSWlMQ0pqYjI1MlpYSjBWRzlYYjNKc1pGTndZV05sSWl3aVkyOXVkbVZ5ZEZSdlRtOWtaVk53WVdObElpd2laMlYwVW05MFlYUnBiMjVZSWl3aWMyVjBVbTkwWVhScGIyNVlJaXdpWjJWMFVtOTBZWFJwYjI1Wklpd2ljMlYwVW05MFlYUnBiMjVaSWl3aVoyVjBVRzl6YVhScGIyNVlJaXdpYzJWMFVHOXphWFJwYjI1WUlpd2laMlYwVUc5emFYUnBiMjVaSWl3aWMyVjBVRzl6YVhScGIyNVpJaXdpWjJWMFUydGxkMWdpTENKelpYUlRhMlYzV0NJc0ltZGxkRk5yWlhkWklpd2ljMlYwVTJ0bGQxa2lMQ0puWlhSVFkyRnNaVmdpTENKelpYUlRZMkZzWlZnaUxDSm5aWFJUWTJGc1pWa2lMQ0p6WlhSVFkyRnNaVmtpTENKblpYUlBjR0ZqYVhSNUlpd2ljMlYwVDNCaFkybDBlU0lzSW1kbGRFTnZiRzl5SWl3aWMyVjBRMjlzYjNJaUxDSm5aWFJNYjJOaGJGcFBjbVJsY2lJc0luTmxkRXh2WTJGc1drOXlaR1Z5SWl3aVEyOXRjRzl1Wlc1MElpd2ljMlYwU1c1elpYUk1aV1owSWl3aWMyVjBTVzV6WlhSU2FXZG9kQ0lzSW5ObGRFbHVjMlYwVkc5d0lpd2ljMlYwU1c1elpYUkNiM1IwYjIwaUxDSkRZVzFsY21FaUxDSm5aWFJPYjJSbFZHOURZVzFsY21GVWNtRnVjMlp2Y20waUxDSm5aWFJEWVcxbGNtRlViMWR2Y214a1VHOXBiblFpTENKblpYUlhiM0pzWkZSdlEyRnRaWEpoVUc5cGJuUWlMQ0puWlhSRFlXMWxjbUZVYjFkdmNteGtUV0YwY21sNElpd2laMlYwVjI5eWJHUlViME5oYldWeVlVMWhkSEpwZUNJc0lrVlNVaUlzSWtORFgwVkVTVlJQVWlJc0ltUmxabWx1WlZCeWIzQmxjblJwWlhNaUxDSlRZMlZ1WlNJc0ltRmpkR2wyWlNJc0ltRmpkR2wyWlVsdVNHbGxjbUZ5WTJoNUlpd2laMlYwUTI5dGNHOXVaVzUwSWl3aVlXUmtRMjl0Y0c5dVpXNTBJaXdpWVdabWFXNWxWSEpoYm5ObWIzSnRUV0ZyWlNJc0ltRm1abWx1WlZSeVlXNXpabTl5YlUxaGEyVkpaR1Z1ZEdsMGVTSXNJbUZtWm1sdVpWUnlZVzV6Wm05eWJVTnNiMjVsSWl3aVlXWm1hVzVsVkhKaGJuTm1iM0p0UTI5dVkyRjBJaXdpWVdabWFXNWxWSEpoYm5ObWIzSnRRMjl1WTJGMFNXNGlMQ0poWm1acGJtVlVjbUZ1YzJadmNtMUpiblpsY25RaUxDSmhabVpwYm1WVWNtRnVjMlp2Y20xSmJuWmxjblJKYmlJc0ltRm1abWx1WlZSeVlXNXpabTl5YlVsdWRtVnlkRTkxZENJc0ltRm1abWx1WlZSeVlXNXpabTl5YlVWeGRXRnNWRzlVY21GdWMyWnZjbTBpTENKd2IybHVkRUZ3Y0d4NVFXWm1hVzVsVkhKaGJuTm1iM0p0SWl3aWMybDZaVUZ3Y0d4NVFXWm1hVzVsVkhKaGJuTm1iM0p0SWl3aWNtVmpkRUZ3Y0d4NVFXWm1hVzVsVkhKaGJuTm1iM0p0SWl3aWIySmlRWEJ3YkhsQlptWnBibVZVY21GdWMyWnZjbTBpTENKd2IybHVkRVZ4ZFdGc1ZHOVFiMmx1ZENJc0luTnBlbVZGY1hWaGJGUnZVMmw2WlNJc0luSmxZM1JGY1hWaGJGUnZVbVZqZENJc0luSmxZM1JEYjI1MFlXbHVjMUpsWTNRaUxDSnlaV04wUTI5dWRHRnBibk5RYjJsdWRDSXNJbkpsWTNSUGRtVnliR0Z3YzFKbFkzUWlMQ0p5WldOMFNXNTBaWEp6WldOMGMxSmxZM1FpTENKeVpXTjBTVzUwWlhKelpXTjBhVzl1SWl3aWNtVmpkRlZ1YVc5dUlpd2ljbVZqZEVkbGRFMWhlRmdpTENKeVpXTjBSMlYwVFdsa1dDSXNJbkpsWTNSSFpYUk5hVzVZSWl3aWNtVmpkRWRsZEUxaGVGa2lMQ0p5WldOMFIyVjBUV2xrV1NJc0luSmxZM1JIWlhSTmFXNVpJaXdpWTI5c2IzSkZjWFZoYkNJc0ltaGxlRlJ2UTI5c2IzSWlMQ0pqYjJ4dmNsUnZTR1Y0SWl3aVZHVjRkRUZzYVdkdWJXVnVkQ0lzSWxabGNuUnBZMkZzVkdWNGRFRnNhV2R1YldWdWRDSXNJbkJPWldjaUxDSndRV1JrSWl3aWNGTjFZaUlzSW5CTmRXeDBJaXdpY0UxcFpIQnZhVzUwSWl3aWNFUnZkQ0lzSW5CRGNtOXpjeUlzSW5CUVpYSndJaXdpY0ZKUVpYSndJaXdpY0ZCeWIycGxZM1FpTENKd1RHVnVaM1JvVTFFaUxDSndSR2x6ZEdGdVkyVlRVU0lzSW5CTVpXNW5kR2dpTENKd1JHbHpkR0Z1WTJVaUxDSndUbTl5YldGc2FYcGxJaXdpY0VadmNrRnVaMnhsSWl3aWNGUnZRVzVuYkdVaUxDSndXbVZ5YjBsdUlpd2ljRWx1SWl3aWNFMTFiSFJKYmlJc0luQlRkV0pKYmlJc0luQkJaR1JKYmlJc0luQk9iM0p0WVd4cGVtVkpiaUlzSW5CVFlXMWxRWE1pTENKd1FXNW5iR1VpTENKd1FXNW5iR1ZUYVdkdVpXUWlMQ0p3VW05MFlYUmxRbmxCYm1kc1pTSXNJbkJEYjIxd1RYVnNkQ0lzSW5CR2RYcDZlVVZ4ZFdGc0lpd2ljRXhsY25BaUxDSndRMnhoYlhBaUxDSnlZVzVrSWl3aWNtRnVaRzl0VFdsdWRYTXhWRzh4SWl3aVkyOXVkR0ZwYm1WeUlpd2lYMk5oYm5aaGN5SXNJbDl5Wlc1a1pYSlVlWEJsSWl3aVgyZGxkRVZ5Y205eUlpd2lYMmx1YVhSRVpXSjFaMU5sZEhScGJtY2lMQ0pFWldKMVowMXZaR1VpTENKd0lpd2lVbVZqZENJc0ltTnZiblJoYVc0aUxDSjBjbUZ1YzJadmNtMU5ZWFEwSWl3aVEyOXNiM0lpTENKeVoySXlhSE4ySWl3aWFITjJNbkpuWWlJc0ltMXBjMk1pTENKc1pYSndJaXdpVFdGMGFDSXNJbkpoYm1SdmJTSXNJbVJsWjNKbFpYTlViMUpoWkdsaGJuTWlMQ0p5WVdScFlXNXpWRzlFWldkeVpXVnpJaXdpWTJ4aGJYQm1JaXdpWTJ4aGJYQXdNU0lzSWtsdFlXZGxSbTl5YldGMElpd2lTMFZaSWl3aVpXRnphVzVuSWl3aWFYTkRhR2xzWkVOc1lYTnpUMllpTENKa2NtRm5iMjVDYjI1bGN5SXNJa05EUm1GamRHOXllU0lzSW5KbGJtUmxjbVZ5SWl3aWNtVnVaR1Z5Ulc1bmFXNWxJaXdpWjJaNElpd2liV0YwYUNJc0luWnRZWFJvSWl3aVNXNXdkWFJCYzNObGJXSnNaWElpWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVFd1FrRXNTVUZCU1VFc1MwRkJTME1zUjBGQlIwUXNSVUZCV2pzN1FVRkZRU3hKUVVGSlJTeFJRVUZLTEVWQlFXTTdRVUZCUVN4UlFVVkVReXhoUVVaRExFZEJSVllzVTBGQlUwRXNZVUZCVkN4RFFVRjNRa01zUjBGQmVFSXNSVUZCTmtKRExFOUJRVGRDTEVWQlFYTkRReXhQUVVGMFF5eEZRVUVyUTBNc2JVSkJRUzlETEVWQlFXOUZPMEZCUTJoRkxGbEJRVWtzUTBGQlEwTXNZMEZCVEN4RlFVRnhRanRCUVVOcVFqdEJRVU5JTzBGQlEwUkVMRGhDUVVGelFrRXNkMEpCUVhkQ0xFdEJRVGxETzBGQlEwRXNXVUZCU1VVc1ZVRkJWVU1zVTBGQlV5eFpRVUZaU2l4UFFVRnlRaXhIUVVGa08wRkJRMEVzV1VGQlNVc3NWVUZCVlZZc1IwRkJSMWNzU1VGQlNDeERRVUZSUXl4UFFVRlNMRU5CUVdkQ1NpeFBRVUZvUWl4RFFVRmtPMEZCUTBFc1dVRkJTVXNzV1VGQldWQXNjMEpCUVhOQ0xFZEJRWFJDTEVkQlFUUkNMRWRCUVRWRE8wRkJRMEVzWVVGQlN5eEpRVUZKVVN4SlFVRkpMRU5CUVdJc1JVRkJaMEpCTEVsQlFVbEtMRkZCUVZGTExFMUJRVFZDTEVWQlFXOURSQ3hIUVVGd1F5eEZRVUY1UXp0QlFVTnlReXhuUWtGQlNVVXNVVUZCVVU0c1VVRkJVVWtzUTBGQlVpeEZRVUZYUnl4SlFVRjJRanRCUVVOQkxHZENRVUZKUXl4WFFVRktPMEZCUTBFc1owSkJRVWxhTEcxQ1FVRktMRVZCUVhsQ08wRkJRM0pDTEc5Q1FVRkpZU3hqUVVGalppeFJRVUZSWjBJc1MwRkJVaXhEUVVGakxFZEJRV1FzUlVGQmJVSkRMRXRCUVc1Q0xFTkJRWGxDTEVOQlFVTXNRMEZCTVVJc1JVRkJOa0lzUTBGQk4wSXNRMEZCYkVJN1FVRkRRVWdzT0VKQlFXTkRMR05CUVdNc1IwRkJaQ3hIUVVGdlFrZ3NTMEZCYkVNN1FVRkRTQ3hoUVVoRUxFMUJTVXM3UVVGRFJFVXNPRUpCUVdOR0xFdEJRV1E3UVVGRFNEdEJRVU5FYWtJc1pVRkJSM1ZDTEVkQlFVZ3NRMEZCVDI1Q0xFZEJRVkFzUlVGQldXVXNWMEZCV2l4RlFVRjVRaXhWUVVGVlJpeExRVUZXTEVWQlFXbENPMEZCUTNSRGFFSXNiVUpCUVVkMVFpeFBRVUZJTEVOQlFWY3NTVUZCV0N4RlFVRnBRbTVDTEZWQlFWVlRMRk5CUVZZc1IwRkJjMEpITEV0QlFYWkRMRVZCUVRoRFdDeFZRVUZWTEVkQlFWWXNSMEZCWjBKWExFdEJRVGxFTzBGQlEwRXNkVUpCUVU5U0xGRkJRVkZSTEV0QlFWSXNRMEZCVUR0QlFVTklMR0ZCU0hkQ0xFTkJSM1pDVVN4SlFVaDFRaXhEUVVkc1FpeEpRVWhyUWl4RlFVZGFVaXhMUVVoWkxFTkJRWHBDTzBGQlNVZzdRVUZEU2l4TFFYcENVenM3UVVGQlFTeFJRVEpDUkZNc1lVRXpRa01zUjBFeVFsWXNVMEZCVTBFc1lVRkJWQ3hEUVVGM1FrTXNVMEZCZUVJc1JVRkJiVU5ETEZsQlFXNURMRVZCUVdsRVF5eFRRVUZxUkN4RlFVRTBSRHRCUVVONFJDeFpRVUZKTEVOQlFVTkdMRk5CUVV3c1JVRkJaMEk3UVVGRFdqdEJRVU5CTzBGQlEwZzdRVUZEUkVVc2IwSkJRVmxCTEdGQlFXRTNRaXhIUVVGSE9FSXNXVUZCU0N4RFFVRm5Ra2dzVTBGQmFFSXNRMEZCZWtJN1FVRkRRVU1zY1VKQlFXRkhMRTlCUVdJc1EwRkJjVUlzVlVGQlZVTXNTVUZCVml4RlFVRm5RanRCUVVOcVF5eHhRa0ZCVTBNc1MwRkJWQ3hIUVVGclFqdEJRVU5rYUVNc2JVSkJRVWQxUWl4UFFVRklMRU5CUVZjc1NVRkJXQ3hGUVVGcFFrc3NVMEZCYWtJc1JVRkJORUpITEVsQlFUVkNPMEZCUTBnN1FVRkRSR2hETEdWQlFVZHJReXhOUVVGSUxFTkJRVlZRTEZWQlFWVlJMRk5CUVhCQ0xFVkJRU3RDU0N4SlFVRXZRaXhGUVVGeFEwTXNTMEZCY2tNc1JVRkJORU5CTEV0QlFUVkRPMEZCUTBnc1UwRk1SRHRCUVUxSUxFdEJka05UT3p0QlFVRkJMRkZCZVVORVJ5eG5Ra0Y2UTBNc1IwRjVRMVlzVTBGQlUwRXNaMEpCUVZRc1EwRkJNa0pVTEZOQlFUTkNMRVZCUVhORFZTeGxRVUYwUXl4RlFVRjFSRklzVTBGQmRrUXNSVUZCYTBVN1FVRkRPVVFzV1VGQlNTeERRVUZEUml4VFFVRk1MRVZCUVdkQ08wRkJRMW83UVVGRFNEdEJRVU5FUlN4dlFrRkJXVUVzWVVGQllUZENMRWRCUVVjNFFpeFpRVUZJTEVOQlFXZENTQ3hUUVVGb1FpeERRVUY2UWp0QlFVTkJMRmxCUVVsWExHTkJRV05ETEU5QlFVOURMSGxDUVVGUUxFTkJRV2xEWWl4VlFVRlZVU3hUUVVFelF5eERRVUZzUWp0QlFVTkJSU3gzUWtGQlowSk9MRTlCUVdoQ0xFTkJRWGRDTEZWQlFWVkRMRWxCUVZZc1JVRkJaMEk3UVVGRGNFTXNaMEpCUVVsVExHbENRVUZwUWxRc1MwRkJTeXhEUVVGTUxFTkJRWEpDTzBGQlEwRXNaMEpCUVVsVkxGVkJRVlZXTEV0QlFVc3NRMEZCVEN4RFFVRmtPMEZCUTBFc1owSkJRVWxYTEdGQlFXRk1MRmxCUVZsSExHTkJRVm9zUTBGQmFrSTdRVUZEUVhwRExHVkJRVWRyUXl4TlFVRklMRU5CUVZWUUxGVkJRVlZSTEZOQlFYQkNMRVZCUVN0Q1RTeGpRVUV2UWl4RlFVRXJReXhaUVVGWk8wRkJRM1pFZUVNc2JVSkJRVWN5UXl4TlFVRklMRU5CUVZVc1NVRkJWaXhGUVVGdFFtWXNVMEZCYmtJc1UwRkJaME5aTEdOQlFXaERMRVZCUVhGRVdpeFRRVUZ5UkN4VFFVRnJSV0VzVDBGQmJFVTdRVUZEUVN4MVFrRkJUME1zVjBGQlYzQkNMRWRCUVZnc1EwRkJaWE5DTEVsQlFXWXNRMEZCYjBJc1NVRkJjRUlzUTBGQlVEdEJRVU5JTEdGQlNFUXNSVUZIUnl4VlFVRlZReXhEUVVGV0xFVkJRV0U3UVVGRFdqZERMRzFDUVVGSE1rTXNUVUZCU0N4RFFVRlZMRWxCUVZZc1JVRkJiVUptTEZOQlFXNUNMRk5CUVdkRFdTeGpRVUZvUXl4RlFVRnhSRm9zVTBGQmNrUXNVMEZCYTBWaExFOUJRV3hGTzBGQlEwRkRMREpDUVVGWFNTeEhRVUZZTEVOQlFXVkdMRWxCUVdZc1EwRkJiMElzU1VGQmNFSXNSVUZCTUVKRExFTkJRVEZDTzBGQlEwZ3NZVUZPUkR0QlFVOUlMRk5CV0VRN1FVRlpTQ3hMUVRORVV6czdRVUZCUVN4UlFUWkVSRVVzY1VKQk4wUkRMRWRCTmtSV0xGTkJRVk5CTEhGQ1FVRlVMRU5CUVdkRFF5eFJRVUZvUXl4RlFVRXdRM0pDTEZsQlFURkRMRVZCUVhkRVF5eFRRVUY0UkN4RlFVRnRSVHRCUVVNdlJDeFpRVUZKTEVOQlFVTnZRaXhSUVVGTUxFVkJRV1U3UVVGRFdEdEJRVU5CTzBGQlEwZzdRVUZEUkhKQ0xIRkNRVUZoUnl4UFFVRmlMRU5CUVhGQ0xGVkJRVlZETEVsQlFWWXNSVUZCWjBJN1FVRkRha01zY1VKQlFWTkRMRXRCUVZRc1IwRkJhMEk3UVVGRFpHaERMRzFDUVVGSGRVSXNUMEZCU0N4RFFVRlhMRWxCUVZnc1JVRkJhVUpMTEZOQlFXcENMRVZCUVRSQ1J5eEpRVUUxUWp0QlFVTklPMEZCUTBSb1F5eGxRVUZIYTBNc1RVRkJTQ3hEUVVGVlpTeFJRVUZXTEVWQlFXOUNha0lzU1VGQmNFSXNSVUZCTUVKRExFdEJRVEZDTzBGQlEwZ3NVMEZNUkR0QlFVMUlMRXRCZUVWVE96dEJRVUZCTEZGQk1FVkVhVUlzYVVKQk1VVkRMRWRCTUVWV0xGTkJRVk5CTEdsQ1FVRlVMRU5CUVRSQ1F5eExRVUUxUWl4RlFVRnRReTlETEVkQlFXNURMRVZCUVhkRGVVSXNVMEZCZUVNc1JVRkJiVVE3UVVGREwwTXNXVUZCU1N4RFFVRkRjMElzUzBGQlRDeEZRVUZaTzBGQlExSTdRVUZEUVR0QlFVTklPMEZCUTBRc1dVRkJTVU1zV1VGQldYWkNMR0ZCUVdFMVFpeEhRVUZIUkN4RlFVRklMRU5CUVUwNFFpeFpRVUZPTEVOQlFXMUNjVUlzUzBGQmJrSXNRMEZCTjBJN1FVRkRRU3haUVVGSlJTeFBRVUZQTEZsQlFWbEVMRk5CUVZvc1IwRkJkMElzZDBOQlFXNURPenRCUVU0clF6dEJRVkV6UXl4eFFrRkJVMFVzVFVGQlZDeERRVUZwUW5SQ0xFbEJRV3BDTEVWQlFYVkNSU3hOUVVGMlFpeEZRVUVyUWp0QlFVTXpRaXg1UWtGQlUzRkNMRkZCUVZRc1EwRkJiVUppTEU5QlFXNUNMRVZCUVRSQ08wRkJRM2hDZWtNc2RVSkJRVWRuUXl4TFFVRklMRU5CUVZOdlFpeEpRVUZVTEVWQlFXVnlRaXhKUVVGbUxFVkJRWEZDVlN4UFFVRnlRanRCUVVOSU8wRkJRMFFzYjBKQlFVa3NRMEZCUTJNc1RVRkJUVU1zVDBGQlRpeERRVUZqZGtJc1RVRkJaQ3hEUVVGTUxFVkJRVFJDTzBGQlEzaENRU3cyUWtGQlUwRXNUMEZCVDJJc1MwRkJVQ3hEUVVGaExFZEJRV0lzUlVGRFNuRkRMRWRCUkVrc1EwRkRRU3hWUVVGVlF5eERRVUZXTEVWQlFXRTdRVUZEWkN3clFrRkJUMEVzUlVGQlJVTXNTVUZCUml4RlFVRlFPMEZCUTBnc2NVSkJTRWtzUTBGQlZEdEJRVWxJTzBGQlEwUXNiMEpCUVVrN1FVRkRRVFZFTEhWQ1FVRkhhME1zVFVGQlNDeERRVUZWYVVJc1MwRkJWaXhGUVVGcFFtNUNMRWxCUVdwQ0xFVkJRWFZDZFVJc1UwRkJVemxDTEVsQlFWUXNRMEZCWXl4SlFVRmtMRVZCUVc5Q1V5eFBRVUZQTEVOQlFWQXNRMEZCY0VJc1EwRkJka0lzUlVGQmRVUkJMRTlCUVU4c1EwRkJVQ3hMUVVGaGNVSXNVMEZCVXpsQ0xFbEJRVlFzUTBGQll5eEpRVUZrTEVWQlFXOUNVeXhQUVVGUExFTkJRVkFzUTBGQmNFSXNRMEZCY0VVN1FVRkRTQ3hwUWtGR1JDeERRVWRCTEU5QlFVOHlRaXhEUVVGUUxFVkJRVlVzUTBGQlJUdEJRVU5tTzBGQlEwY3pRaXh4UWtGQlV6bENMRWxCUVVrMFFpeEpRVUZLTEVOQmRrSTRRanM3UVVGM1FqTkRMR2RDUVVGSlFTeExRVUZMTEVOQlFVd3NUVUZCV1N4SFFVRm9RaXhGUVVGeFFqdEJRVU5xUWp0QlFVTkpPRUlzZVVKQlFWTTVRaXhMUVVGTFZpeExRVUZNTEVOQlFWY3NRMEZCV0N4RFFVWkpPenRCUVVkcVFtZERMSFZDUVVGUExFMUJRVTFSTEUxQlFXSXNSVUZCY1VJMVFpeE5RVUZ5UWp0QlFVTkJiMElzZFVKQlFVOHNUVUZCVFZFc1RVRkJZaXhGUVVGeFFqVkNMRTFCUVhKQ08wRkJRMGdzWVVGTVJDeE5RVTFMTzBGQlEwUkdMSEZDUVVGTFdDeExRVUZNTEVOQlFWY3NSMEZCV0N4RlFVTkxjVU1zUjBGRVRDeERRVU5UTEZWQlFWVkRMRU5CUVZZc1JVRkJZVHRCUVVOa0xESkNRVUZQUVN4RlFVRkZReXhKUVVGR0xFVkJRVkE3UVVGRFNDeHBRa0ZJVEN4RlFVbExOMElzVDBGS1RDeERRVWxoTEZWQlFWVTBRaXhEUVVGV0xFVkJRV0U3UVVGRGJFSk1MREpDUVVGUFN5eERRVUZRTEVWQlFWVjZRaXhOUVVGV08wRkJRMGdzYVVKQlRrdzdRVUZQU0R0QlFYUkRNRU03TzBGQlR5OURMR0ZCUVVzc1NVRkJTVVlzU1VGQlZDeEpRVUZwUWpWQ0xFZEJRV3BDTEVWQlFYTkNPMEZCUVVFc1owSkJaMEprT0VJc1RVRm9RbU03UVVGQlFTeG5Ra0Z0UWxZMFFpeE5RVzVDVlRzN1FVRkJRVHRCUVdkRGNrSTdRVUZEU2l4TFFXeElVenM3UVVGQlFTeFJRVzlJUkVNc2JVSkJjRWhETEVkQmIwaFdMRk5CUVZOQkxHMUNRVUZVTEVOQlFUaENjRU1zVTBGQk9VSXNSVUZCZVVOMlFpeEhRVUY2UXl4RlFVRTRRM2xDTEZOQlFUbERMRVZCUVhsRU8wRkJRM0pFTEZsQlFVa3NRMEZCUTBZc1UwRkJUQ3hGUVVGblFqdEJRVU5hTzBGQlEwRTdRVUZEU0R0QlFVTkVSU3h2UWtGQldVRXNZVUZCWVRkQ0xFZEJRVWM0UWl4WlFVRklMRU5CUVdkQ1NDeFRRVUZvUWl4RFFVRjZRanRCUVVOQkxHRkJRVXNzU1VGQlNVc3NTVUZCVkN4SlFVRnBRalZDTEVkQlFXcENMRVZCUVhOQ08wRkJRMnhDTEdGQlFVTXNXVUZCVlR0QlFVTlFMRzlDUVVGSk5FUXNWMEZCVjJoRExFbEJRV1k3UVVGRFFTeHZRa0ZCU1dsRExHRkJRV0YwUXl4VlFVRlZjVU1zVVVGQlZpeERRVUZxUWp0QlFVTkJMRzlDUVVGSkxFTkJRVU5ETEZWQlFVd3NSVUZCYVVJN08wRkJSV3BDTEhsQ1FVRlRReXhKUVVGVUxFZEJRV2xDTzBGQlEySnFSU3gxUWtGQlIybEZMRWxCUVVnc1EwRkJVU3h0UkVGQlVpeEZRVUUyUkhKRExGTkJRVGRFTEVWQlFYZEZiVU1zVVVGQmVFVXNSVUZCYTBZMVJDeEpRVUZKTkVRc1VVRkJTaXhEUVVGc1JqdEJRVU5CTERKQ1FVRlBReXhYUVVGWFJTeExRVUZZTEVOQlFXbENMRWxCUVdwQ0xFVkJRWFZDUXl4VFFVRjJRaXhEUVVGUU8wRkJRMGc3TzBGQlJVUjZReXd3UWtGQlZYRkRMRkZCUVZZc1NVRkJjMEpGTEVsQlFYUkNPMEZCUTBnc1lVRllSRHRCUVZsSU8wRkJRMG9zUzBGNFNWTTdRVUY1U1ZZN096dEJRVU5CYkVVc1QwRkJSM1ZDTEVkQlFVZ3NRMEZCVDNSQ0xFVkJRVkFzUlVGQlZ5eE5RVUZZTEVWQlFXMUNMRmxCUVZrN1FVRkRNMEpCTEZkQlFVY3lReXhOUVVGSUxFTkJRVlVzU1VGQlZpeEZRVUZuUWl4VFFVRm9RaXhGUVVFeVFpeFJRVUV6UWp0QlFVTkJMR1ZCUVU4elF5eEhRVUZIYjBVc1IwRkJWanRCUVVOSUxFdEJTRVE3UVVGSlFUdEJRVU5CY2tVc1QwRkJSM1ZDTEVkQlFVZ3NRMEZCVDNSQ0xFVkJRVkFzUlVGQlZ5eHJRa0ZCV0N4RlFVRXJRaXhaUVVGWk8wRkJRM1pEUVN4WFFVRkhkVUlzVDBGQlNDeERRVUZYTEVsQlFWZzdRVUZEU0N4TFFVWkVPenRCUVVsQk8wRkJRMEY0UWl4UFFVRkhkVUlzUjBGQlNDeERRVUZQZEVJc1IwRkJSM0ZGTEZkQlFVZ3NRMEZCWlc1RExGTkJRWFJDTEVWQlFXbERMR2RDUVVGcVF5eEZRVUZ0UkN4WlFVRlpPMEZCUXpORWJFTXNWMEZCUjNWQ0xFOUJRVWdzUTBGQlZ5eEpRVUZZTEVWQlFXbENMRFJDUVVGcVFpeEZRVUVyUXl3MlFrRkJMME03UVVGRFFTeGxRVUZQTEV0QlFVc3JReXhoUVVGTUxFVkJRVkE3UVVGRFNDeExRVWhFTzBGQlNVRTNReXhyUWtGQlkzcENMRWRCUVVkeFJTeFhRVUZxUWl4RlFVRTRRaXhEUVVNeFFpeDNRa0ZFTUVJc1EwRkJPVUk3UVVGSFFWQXNkMEpCUVc5Q09VUXNSMEZCUjNWRkxFMUJRVWdzUTBGQlZYSkRMRk5CUVRsQ0xFVkJRWGxETzBGQlEzSkRjME1zYTBKQlFWVXNkVUpCUkRKQ08wRkJSWEpEUXl4clFrRkJWVHRCUVVZeVFpeExRVUY2UXl4RlFVZEhMRmRCU0VnN08wRkJTMEV4UlN4UFFVRkhkVUlzUjBGQlNDeERRVUZQZEVJc1IwRkJSM0ZGTEZkQlFVZ3NRMEZCWlc1RExGTkJRWFJDTEVWQlFXbERMR05CUVdwRExFVkJRV2xFTEZsQlFWazdRVUZEZWtSc1F5eFhRVUZITWtNc1RVRkJTQ3hEUVVGVkxFbEJRVllzUlVGQlowSXNaMEpCUVdoQ0xFVkJRV3RETEdOQlFXeERPMEZCUTBFc1pVRkJUeXhaUVVGWkxFTkJRVVVzUTBGQmNrSTdRVUZEU0N4TFFVaEVPenRCUVV0Qk8wRkJRMEUxUXl4UFFVRkhkVUlzUjBGQlNDeERRVUZQZEVJc1JVRkJVQ3hGUVVGWExHTkJRVmdzUlVGQk1rSXNXVUZCV1R0QlFVTnVRMEVzVjBGQlIzVkNMRTlCUVVnc1EwRkJWeXhKUVVGWUxFVkJRV2xDTEVsQlFXcENMRVZCUVhWQ0xHTkJRWFpDTzBGQlEwZ3NTMEZHUkRzN1FVRkpRVHRCUVVOQkxGRkJRVWx0UkN4WlFVRlpNVVVzUjBGQlJ6QkZMRk5CUVc1Q08wRkJRMEV6UlN4UFFVRkhORVVzVVVGQlNDeERRVUZaUkN4VlFVRlZlRU1zVTBGQmRFSXNSVUZCYVVNc2QwSkJRV3BETEVWQlFUSkVMR2xDUVVFelJEczdRVUZGUVc1RExFOUJRVWQxUWl4SFFVRklMRU5CUVU5dlJDeFZRVUZWZUVNc1UwRkJha0lzUlVGQk5FSXNVMEZCTlVJc1JVRkJkVU1zV1VGQldUdEJRVU12UTJ4RExGZEJRVWN5UXl4TlFVRklMRU5CUVZVc1NVRkJWaXhGUVVGblFpeHRRa0ZCYUVJc1JVRkJjVU1zWlVGQmNrTTdRVUZEUVN4bFFVRlBMRmxCUVZrN1FVRkRaaXh0UWtGQlR5eExRVUZMYVVNc1MwRkJUQ3hKUVVGakxFbEJRWEpDTzBGQlEwZ3NVMEZHUkR0QlFVZElMRXRCVEVRN08wRkJUMEUzUlN4UFFVRkhkVUlzUjBGQlNDeERRVUZQYjBRc1ZVRkJWWGhETEZOQlFXcENMRVZCUVRSQ0xGVkJRVFZDTEVWQlFYZERMRmxCUVZrN1FVRkRhRVJzUXl4WFFVRkhkVUlzVDBGQlNDeERRVUZYTEVsQlFWZ3NSVUZCYVVJc01rSkJRV3BDTEVWQlFUaERMSGxDUVVFNVF6dEJRVU5CTEdWQlFWRXNXVUZCV1R0QlFVTm9RaXh0UWtGQlR5eExRVUZMYzBRc1RVRkJXanRCUVVOSUxGTkJSa1E3UVVGSFNDeExRVXhFT3p0QlFVOUJPVVVzVDBGQlIzVkNMRWRCUVVnc1EwRkJUMjlFTEZWQlFWVjRReXhUUVVGcVFpeEZRVUUwUWl3eVFrRkJOVUlzUlVGQmVVUXNXVUZCV1R0QlFVTnFSV3hETEZkQlFVY3lReXhOUVVGSUxFTkJRVlVzU1VGQlZpeEZRVUZuUWl4eFEwRkJhRUlzUlVGQmRVUXNORVZCUVhaRU8wRkJRMEVzWlVGQlR5eFpRVUZaTzBGQlEyWXNhVUpCUVV0dFF5eFZRVUZNTEVOQlFXZENTaXhWUVVGVlN5eE5RVUZXTEVOQlFXbENReXhOUVVGcVF5eEZRVUY1UTA0c1ZVRkJWVXNzVFVGQlZpeERRVUZwUWtNc1RVRkJNVVE3UVVGRFNDeFRRVVpFTzBGQlIwZ3NTMEZNUkRzN1FVRlBRV3BHTEU5QlFVZDFRaXhIUVVGSUxFTkJRVTl2UkN4VlFVRlZlRU1zVTBGQmFrSXNSVUZCTkVJc2RVSkJRVFZDTEVWQlFYRkVMRmxCUVZrN1FVRkROMFJzUXl4WFFVRkhNa01zVFVGQlNDeERRVUZWTEVsQlFWWXNSVUZCWjBJc2NVTkJRV2hDTEVWQlFYVkVMRGhGUVVGMlJEdEJRVU5CTEdWQlFVOHNXVUZCV1R0QlFVTm1MR2xDUVVGTGJVTXNWVUZCVEN4RFFVRm5Ra29zVlVGQlZVc3NUVUZCVml4RFFVRnBRa1VzVDBGQmFrTXNSVUZCTUVOUUxGVkJRVlZMTEUxQlFWWXNRMEZCYVVKRkxFOUJRVE5FTzBGQlEwZ3NVMEZHUkR0QlFVZElMRXRCVEVRN08wRkJUMEU3UVVGRFFXeERMREJDUVVGelFpOURMRWRCUVVkclJpeExRVUY2UWl4RlFVRm5ReXhEUVVNMVFpeDFRa0ZFTkVJc1JVRkZOVUlzYTBOQlJqUkNMRU5CUVdoRExFVkJSMGNzVlVGSVNEczdRVUZMUVdwRExITkNRVUZyUW1wRUxFZEJRVWRyUml4TFFVRnlRaXhGUVVFMFFqdEJRVU40UWtNc1dVRkJTU3hUUVVSdlFqdEJRVVY0UWtNc1lVRkJTeXhYUVVadFFqdEJRVWQ0UWtNc2FVSkJRVk1zYTBKQlNHVTdRVUZKZUVKRExHbENRVUZUTEd0Q1FVcGxPMEZCUzNoQ1F5eHJRa0ZCVlR0QlFVeGpMRXRCUVRWQ0xFVkJUVWNzVlVGT1NEczdRVUZSUVR0QlFVTkJlRU1zTUVKQlFYTkNMME1zUjBGQlIzZEdMRWxCUVhwQ0xFVkJRU3RDTEVOQlF6TkNMRmxCUkRKQ0xFTkJRUzlDTEVWQlJVY3NVMEZHU0RzN1FVRkpRVHRCUVVOQmVrTXNNRUpCUVhOQ0wwTXNSMEZCUjNsR0xFZEJRWHBDTEVWQlFUaENMRU5CUXpGQ0xGVkJSREJDTEVWQlJURkNMR0ZCUmpCQ0xFTkJRVGxDTEVWQlIwY3NVVUZJU0RzN1FVRkxRVHRCUVVOQmVFTXNjMEpCUVd0Q2FrUXNSMEZCUnpCR0xGRkJRWEpDTEVWQlFTdENPMEZCUXpOQ1F5eHJRMEZCTUVJc1JVRkVRenRCUVVVelFrTXNORUpCUVc5Q0xHOUNRVVpQTzBGQlJ6TkNReXd5UWtGQmJVSTdRVUZJVVN4TFFVRXZRaXhGUVVsSExHRkJTa2c3UVVGTFFTOUNMSGRDUVVGdlFqbEVMRWRCUVVjd1JpeFJRVUZJTEVOQlFWbDRSQ3hUUVVGb1F5eEZRVUV5UXp0QlFVTjJRelJFTEhGQ1FVRmhMR2xEUVVRd1FqdEJRVVYyUTBNc2NVSkJRV0VzUlVGR01FSTdRVUZIZGtORExHOUNRVUZaTEZsQlNESkNPMEZCU1haRFF5dzBRa0ZCYjBJc1dVRktiVUk3UVVGTGRrTkRMSGRDUVVGblFpeDNRa0ZNZFVJN1FVRk5ka05ETERCQ1FVRnJRaXd3UWtGT2NVSTdRVUZQZGtORExIbENRVUZwUWl4elFrRlFjMEk3UVVGUmRrTkRMSE5DUVVGakxITkNRVko1UWp0QlFWTjJRME1zZFVKQlFXVXNaME5CVkhkQ08wRkJWWFpEUXl4NVFrRkJhVUlzYzBKQlZuTkNPMEZCVjNaRFF5dzRRa0ZCYzBJc2MwSkJXR2xDTzBGQldYWkRReXc0UWtGQmMwSXNjMEpCV21sQ08wRkJZWFpEUXl4M1FrRkJaMElzZVVKQlluVkNPMEZCWTNaRFF5eDVRa0ZCYVVJc01FSkJaSE5DTzBGQlpYWkRReXgxUWtGQlpTeGxRV1ozUWp0QlFXZENka05ETEhkQ1FVRm5RanRCUVdoQ2RVSXNTMEZCTTBNc1JVRnBRa2NzWVVGcVFrZzdRVUZyUWtGd1JpeHJRa0ZCWTNwQ0xFZEJRVWN3Uml4UlFVRnFRaXhGUVVFeVFpeERRVU4yUWl4WFFVUjFRaXhGUVVWMlFpeFZRVVoxUWl4RlFVZDJRaXhuUWtGSWRVSXNSVUZKZGtJc2MwSkJTblZDTEVWQlMzWkNMR1ZCVEhWQ0xFVkJUWFpDTEdWQlRuVkNMRU5CUVROQ0xFVkJUMGNzWVVGUVNEczdRVUZUUVR0QlFVTkJla01zYzBKQlFXdENha1FzUjBGQlJ6aEhMRk5CUVhKQ0xFVkJRV2RETzBGQlF6VkNReXh0UTBGQk1rSXNWVUZFUXp0QlFVVTFRa01zYVVOQlFYbENMR2RDUVVaSE8wRkJSelZDUXl4eFEwRkJOa0lzV1VGSVJEdEJRVWsxUWtNc2JVTkJRVEpDTEd0Q1FVcERPMEZCU3pWQ1F5eDVRMEZCYVVNc2QwSkJURXc3UVVGTk5VSkRMR2REUVVGM1FpeGxRVTVKTzBGQlR6VkNReXdyUTBGQmRVTTdRVUZRV0N4TFFVRm9ReXhGUVZGSExHTkJVa2c3TzBGQlZVRTdRVUZEUVhCRkxITkNRVUZyUW1wRUxFZEJRVWR6U0N4SlFVRnlRaXhGUVVFeVFqdEJRVU4yUWtNc2QwSkJRV2RDTEc5Q1FVUlBPMEZCUlhaQ1F5dzJRa0ZCY1VJc2NVSkJSa1U3UVVGSGRrSkRMSGxDUVVGcFFqdEJRVWhOTEV0QlFUTkNMRVZCU1Vjc1UwRktTRHRCUVV0Qk1VVXNNRUpCUVhOQ0wwTXNSMEZCUjNOSUxFbEJRWHBDTEVWQlFTdENMRU5CUXpOQ0xHRkJSREpDTEVWQlJUTkNMSEZDUVVZeVFpeEZRVWN6UWl4eFFrRklNa0lzUlVGSk0wSXNiMEpCU2pKQ0xFVkJTek5DTERCQ1FVd3lRaXhGUVUwelFpdzBRa0ZPTWtJc1JVRlBNMElzTkVKQlVESkNMRVZCVVROQ0xHRkJVakpDTEVWQlV6TkNMR0ZCVkRKQ0xFTkJRUzlDTEVWQlZVY3NVMEZXU0RzN1FVRlpRVHRCUVVOQk4wWXNhMEpCUVdONlFpeEhRVUZITUVnc1VVRkJha0lzUlVGQk1rSXNRMEZEZGtJc1dVRkVkVUlzUlVGRmRrSXNWVUZHZFVJc1EwRkJNMElzUlVGSFJ5eFhRVWhJT3p0QlFVdEJPMEZCUTBGcVJ5eHJRa0ZCWTNwQ0xFZEJRVWN5U0N4alFVRnFRaXhGUVVGcFF5eERRVU0zUWl4NVFrRkVOa0lzUlVGRk4wSXNNa0pCUmpaQ0xFTkJRV3BET3p0QlFVdEJPMEZCUTBGc1J5eHJRa0ZCWTNwQ0xFZEJRVWMwU0N4blFrRkJha0lzUlVGQmJVTXNRMEZETDBJc2VVSkJSQ3RDTEVWQlJTOUNMREpDUVVZclFpeERRVUZ1UXpzN1FVRkxRVHRCUVVOQk0wVXNjMEpCUVd0Q2FrUXNSMEZCUnpaSUxGTkJRVWdzUTBGQllUTkdMRk5CUVM5Q0xFVkJRVEJETzBGQlEzUkRMR1ZCUVU4c1RVRkVLMEk3UVVGRmRFTXNhMEpCUVZVc1RVRkdORUk3UVVGSGRFTXNhMEpCUVZVc1RVRklORUk3UVVGSmRFTXNlVUpCUVdsQ0xHZENRVXB4UWp0QlFVdDBReXcwUWtGQmIwSTdRVUZNYTBJc1MwRkJNVU03TzBGQlVVRlVMR3RDUVVGamVrSXNSMEZCUnpoSUxFbEJRV3BDTEVWQlFYVkNMRU5CUTI1Q0xITkNRVVJ0UWl4RlFVVnVRaXhqUVVadFFpeEZRVWR1UWl4MVFrRkliVUlzUlVGSmJrSXNkMEpCU20xQ0xFVkJTMjVDTEhkQ1FVeHRRaXhGUVUxdVFpeG5Ra0ZPYlVJc1JVRlBia0lzZVVKQlVHMUNMRVZCVVc1Q0xEQkNRVkp0UWl4RlFWTnVRaXhyUWtGVWJVSXNSVUZWYmtJc2IwSkJWbTFDTEVWQlYyNUNMSEZDUVZodFFpeEZRVmx1UWl4alFWcHRRaXhGUVdGdVFpeG5RMEZpYlVJc1JVRmpia0lzT0VKQlpHMUNMRVZCWlc1Q0xGZEJabTFDTEVWQlowSnVRaXhUUVdoQ2JVSXNRMEZCZGtJN08wRkJiVUpCYUVVc2QwSkJRVzlDT1VRc1IwRkJSemhJTEVsQlFVZ3NRMEZCVVRWR0xGTkJRVFZDTEVWQlFYVkRPMEZCUTI1RE5rWXNhME5CUVRCQ0xHZENRVVJUTzBGQlJXNURReXh2UTBGQk5FSXNaMEpCUms4N1FVRkhia05ETEdsRFFVRjVRaXhuUWtGSVZUdEJRVWx1UTBNc2JVTkJRVEpDTEdkQ1FVcFJPMEZCUzI1RFF5eHJRMEZCTUVJc1owSkJURk03UVVGTmJrTkRMR2xEUVVGNVFpeG5Ra0ZPVlR0QlFVOXVRME1zYVVOQlFYbENMSE5DUVZCVk8wRkJVVzVEUXl4dFEwRkJNa0lzYzBKQlVsRTdRVUZUYmtORExEWkNRVUZ4UWl4MVFrRlVZenRCUVZWdVEwTXNORUpCUVc5Q08wRkJWbVVzUzBGQmRrTTdPMEZCWVVGMlJpeHpRa0ZCYTBKcVJDeEhRVUZIT0Vnc1NVRkJTQ3hEUVVGUk5VWXNVMEZCTVVJc1JVRkJjVU03UVVGRGFrTjFSeXh6UWtGQll5eFhRVVJ0UWp0QlFVVnFRME1zYzBKQlFXTXNWMEZHYlVJN1FVRkhha05ETEhOQ1FVRmpMRmRCU0cxQ08wRkJTV3BEUXl4elFrRkJZeXhYUVVwdFFqdEJRVXRxUTBNc2MwSkJRV01zUjBGTWJVSTdRVUZOYWtORExITkNRVUZqTEVkQlRtMUNPMEZCVDJwRFF5eHpRa0ZCWXl4SFFWQnRRanRCUVZGcVEwTXNjMEpCUVdNc1IwRlNiVUk3UVVGVGFrTkRMR3RDUVVGVkxFOUJWSFZDTzBGQlZXcERReXhyUWtGQlZTeFBRVloxUWp0QlFWZHFRME1zYTBKQlFWVXNUMEZZZFVJN1FVRlpha05ETEd0Q1FVRlZMRTlCV25WQ08wRkJZV3BEUXl4dFFrRkJWeXhSUVdKelFqdEJRV05xUTBNc2JVSkJRVmNzVVVGa2MwSTdRVUZsYWtORExHMUNRVUZYTEZGQlpuTkNPMEZCWjBKcVEwTXNiVUpCUVZjc1VVRm9Rbk5DTzBGQmFVSnFRME1zYjBKQlFWa3NVMEZxUW5GQ08wRkJhMEpxUTBNc2IwSkJRVmtzVTBGc1FuRkNPMEZCYlVKcVEwTXNhMEpCUVZVc1QwRnVRblZDTzBGQmIwSnFRME1zYTBKQlFWVXNUMEZ3UW5WQ08wRkJjVUpxUTBNc2QwSkJRV2RDTEZGQmNrSnBRanRCUVhOQ2FrTkRMSGRDUVVGblFqdEJRWFJDYVVJc1MwRkJja003TzBGQmVVSkJPMEZCUTBGeVNTeHJRa0ZCWTNwQ0xFZEJRVWNyU2l4VFFVRnFRaXhGUVVFMFFpeERRVU40UWl4WFFVUjNRaXhEUVVFMVFqczdRVUZKUVRsSExITkNRVUZyUW1wRUxFZEJRVWQxUlN4TlFVRklMRU5CUVZWeVF5eFRRVUUxUWl4RlFVRjFRenRCUVVOdVF6aElMSE5DUVVGakxEQkNRVVJ4UWp0QlFVVnVRME1zZFVKQlFXVXNNa0pCUm05Q08wRkJSMjVEUXl4eFFrRkJZU3g1UWtGSWMwSTdRVUZKYmtORExIZENRVUZuUWp0QlFVcHRRaXhMUVVGMlF6czdRVUZQUVR0QlFVTkJja2NzZDBKQlFXOUNPVVFzUjBGQlIyOUxMRTFCUVVnc1EwRkJWV3hKTEZOQlFUbENMRVZCUVhsRE8wRkJRM0pEYlVrc2EwTkJRVEJDTERCQ1FVUlhPMEZCUlhKRFF5d3JRa0ZCZFVJc2RVSkJSbU03UVVGSGNrTkRMQ3RDUVVGMVFpeDFRa0ZJWXp0QlFVbHlRME1zWjBOQlFYZENMREJDUVVwaE8wRkJTM0pEUXl4blEwRkJkMEk3UVVGTVlTeExRVUY2UXpzN1FVRlJRV2hLTEd0Q1FVRmpla0lzUjBGQlIyOUxMRTFCUVdwQ0xFVkJRWGxDTEVOQlEzSkNMRmRCUkhGQ0xFVkJSWEpDTEdOQlJuRkNMRVZCUjNKQ0xGbEJTSEZDTEVOQlFYcENPenRCUVUxQk8wRkJRMEVzVVVGQlNVMHNUVUZCVFN4MVJVRkJWanRCUVVOQlF5eHBRa0ZCWVhKSkxFOUJRVTl6U1N4blFrRkJVQ3hEUVVGM1FqVkxMRWRCUVVjMlN5eExRVUZJTEVOQlFWTXpTU3hUUVVGcVF5eEZRVUUwUXp0QlFVTnlSRFJKTEdkQ1FVRlJPMEZCUTBwNFNpeHBRa0ZCU3l4bFFVRlpPMEZCUTJKMFFpeHRRa0ZCUjJkRExFdEJRVWdzUTBGQlV6QkpMRWRCUVZRc1JVRkJZeXhSUVVGa08wRkJRMEVzZFVKQlFVOHNTVUZCVUR0QlFVTklMR0ZCU2tjN1FVRkxTalZJTEdsQ1FVRkxMR1ZCUVZrN1FVRkRZamxETEcxQ1FVRkhaME1zUzBGQlNDeERRVUZUTUVrc1IwRkJWQ3hGUVVGakxGRkJRV1E3UVVGRFNEdEJRVkJITEZOQlJEWkRPMEZCVlhKRVN5d3lRa0ZCYlVJN1FVRkRabnBLTEdsQ1FVRkxMR1ZCUVZrN1FVRkRZblJDTEcxQ1FVRkhaME1zUzBGQlNDeERRVUZUTUVrc1IwRkJWQ3hGUVVGakxHMUNRVUZrTzBGQlEwRXNkVUpCUVU4c1NVRkJVRHRCUVVOSU8wRkJTbU1zVTBGV2EwTTdRVUZuUW5KRVRTeHpRa0ZCWXp0QlFVTldNVW9zYVVKQlFVc3NaVUZCV1R0QlFVTmlkRUlzYlVKQlFVZG5ReXhMUVVGSUxFTkJRVk13U1N4SFFVRlVMRVZCUVdNc1kwRkJaRHRCUVVOQkxIVkNRVUZQTEZsQlFWazdRVUZEWml3eVFrRkJUeXhKUVVGUU8wRkJRMGdzYVVKQlJrUTdRVUZIU0R0QlFVNVRMRk5CYUVKMVF6dEJRWGRDY2tSUExITkNRVUZqTzBGQlExWXpTaXhwUWtGQlN5eGxRVUZaTzBGQlEySjBRaXh0UWtGQlIyZERMRXRCUVVnc1EwRkJVekJKTEVkQlFWUXNSVUZCWXl4alFVRmtPMEZCUTBFc2RVSkJRVThzV1VGQldUdEJRVU5tTERKQ1FVRlBMRWxCUVZBN1FVRkRTQ3hwUWtGR1JEdEJRVWRJTzBGQlRsTTdRVUY0UW5WRExFdEJRVFZETEVOQlFXSTdPMEZCYTBOQk8wRkJRMEY2U0N4elFrRkJhMEpxUkN4RlFVRnNRaXhGUVVGelFqdEJRVU5zUWp0QlFVTkJhMHdzTmtKQlFYRkNMREpDUVVaSU8wRkJSMnhDUXl4eFEwRkJOa0lzTmtKQlNGZzdRVUZKYkVKRExEaENRVUZ6UWl3d1FrRktTanRCUVV0c1FrTXNLMEpCUVhWQ0xESkNRVXhNTzBGQlRXeENReXhwUTBGQmVVSXNNa0pCVGxBN1FVRlBiRUpETEN0Q1FVRjFRaXd5UWtGUVREdEJRVkZzUWtNc2FVTkJRWGxDTERKQ1FWSlFPMEZCVTJ4Q1F5eHJRMEZCTUVJc01rSkJWRkk3UVVGVmJFSkRMSGxEUVVGcFF5d3dRa0ZXWmp0QlFWZHNRa01zYlVOQlFUSkNMR3REUVZoVU8wRkJXV3hDUXl4clEwRkJNRUlzYTBOQldsSTdRVUZoYkVKRExHdERRVUV3UWl4clEwRmlVanRCUVdOc1FrTXNhVU5CUVhsQ0xHbERRV1JRT3p0QlFXZENiRUk3UVVGRFFVTXNNa0pCUVcxQ0xHZENRV3BDUkRzN1FVRnRRbXhDTzBGQlEwRkRMSGxDUVVGcFFpeG5Ra0Z3UWtNN08wRkJjMEpzUWp0QlFVTkJReXg1UWtGQmFVSXNjVUpCZGtKRE8wRkJkMEpzUWtNc01FSkJRV3RDTERKQ1FYaENRVHRCUVhsQ2JFSkRMREpDUVVGdFFpeHhRa0Y2UWtRN1FVRXdRbXhDUXl3d1FrRkJhMElzZVVKQk1VSkJPMEZCTWtKc1FrTXNORUpCUVc5Q0xIbENRVE5DUmp0QlFUUkNiRUpETERCQ1FVRnJRaXg1UTBFMVFrRTdRVUUyUW14Q1F5eHRRa0ZCVnl3eVFrRTNRazg3UVVFNFFteENReXh4UWtGQllTeFhRVGxDU3p0QlFTdENiRUpETEhGQ1FVRmhMR1ZCTDBKTE8wRkJaME5zUWtNc2NVSkJRV0VzVjBGb1EwczdRVUZwUTJ4Q1F5eHhRa0ZCWVN4WFFXcERTenRCUVd0RGJFSkRMSEZDUVVGaExHVkJiRU5MTzBGQmJVTnNRa01zY1VKQlFXRXNWMEZ1UTBzN08wRkJjVU5zUWp0QlFVTkJReXh2UWtGQldTeDFRa0YwUTAwN1FVRjFRMnhDUXl4dlFrRkJXU3g1UWtGMlEwMDdRVUYzUTJ4Q1F5eHZRa0ZCV1N4bFFYaERUVHM3UVVFd1EyeENPMEZCUTBGRExIVkNRVUZsTEhkQ1FUTkRSenRCUVRSRGJFSkRMQ3RDUVVGMVFpeG5RMEUxUTB3N08wRkJPRU5zUWp0QlFVTkJReXhqUVVGTkxGTkJMME5aTzBGQlowUnNRa01zWTBGQlRTeFpRV2hFV1R0QlFXbEViRUpETEdOQlFVMHNXVUZxUkZrN1FVRnJSR3hDUXl4bFFVRlBMR1ZCYkVSWE8wRkJiVVJzUWtNc2JVSkJRVmNzY1VKQmJrUlBPMEZCYjBSc1FrTXNZMEZCVFN4WlFYQkVXVHRCUVhGRWJFSkRMR2RDUVVGUkxHTkJja1JWTzBGQmMwUnNRa01zWlVGQlR5d3JRa0YwUkZjN1FVRjFSR3hDUXl4blFrRkJVU3c0UWtGMlJGVTdRVUYzUkd4Q1F5eHJRa0ZCVlN4blFrRjRSRkU3UVVGNVJHeENReXh0UWtGQlZ5eFpRWHBFVHp0QlFUQkViRUpETEhGQ1FVRmhMSEZDUVRGRVN6dEJRVEpFYkVKRExHbENRVUZUTEZOQk0wUlRPMEZCTkVSc1FrTXNiVUpCUVZjc2EwSkJOVVJQTzBGQk5rUnNRa01zYjBKQlFWa3NaVUUzUkUwN1FVRTRSR3hDUXl4dFFrRkJWeXhwUTBFNVJFODdRVUVyUkd4Q1F5eHJRa0ZCVlN4elFrRXZSRkU3UVVGblJXeENReXhwUWtGQlV5eGxRV2hGVXp0QlFXbEZiRUpETEdGQlFVc3NXVUZxUldFN1FVRnJSV3hDUXl4cFFrRkJVeXh0UWtGc1JWTTdRVUZ0Uld4Q1F5eG5Ra0ZCVVN4blFrRnVSVlU3UVVGdlJXeENReXhuUWtGQlVTeG5Ra0Z3UlZVN1FVRnhSV3hDUXl4elFrRkJZeXh0UWtGeVJVazdRVUZ6Uld4Q1F5eHBRa0ZCVXl4bFFYUkZVenRCUVhWRmJFSkRMR2RDUVVGUkxHTkJka1ZWTzBGQmQwVnNRa01zYzBKQlFXTXNhMEpCZUVWSk8wRkJlVVZzUWtNc2QwSkJRV2RDTEcxQ1FYcEZSVHRCUVRCRmJFSkRMRzFDUVVGWExGbEJNVVZQTzBGQk1rVnNRa01zY1VKQlFXRXNLMEpCTTBWTE8wRkJORVZzUWtNc1pVRkJUeXg1UWtFMVJWYzdRVUUyUld4Q1F5eG5Ra0ZCVVN4M1EwRTNSVlU3TzBGQkswVnNRa01zWTBGQlRTd3dRa0V2UlZrN1FVRm5SbXhDUXl4NVFrRkJhVUlzTWtKQmFFWkRPenRCUVd0R2JFSkRMRzFDUVVGWExHMUNRV3hHVHp0QlFXMUdiRUpETEdsQ1FVRlRMR2RDUVc1R1V6dEJRVzlHYkVKRExIRkNRVUZoTEc5Q1FYQkdTenM3UVVGelJteENReXh0UWtGQlZ5eHRRa0YwUms4N1FVRjFSbXhDUXl3eVFrRkJiVUlzTmtKQmRrWkVPMEZCZDBac1FrTXNiVUpCUVZjN1FVRjRSazhzUzBGQmRFSXNSVUY1Umtjc1NVRjZSa2c3UVVFd1JrRXhUU3d3UWtGQmMwSXZReXhGUVVGMFFpeEZRVUV3UWl4RFFVTjBRaXhyUWtGRWMwSXNSVUZIZEVJc1YwRkljMElzUlVGSmRFSXNVMEZLYzBJc1JVRkxkRUlzYVVKQlRITkNMRVZCVFhSQ0xHMUNRVTV6UWl4RlFVOTBRaXhuUWtGUWMwSXNSVUZUZEVJc1owSkJWSE5DTEVWQlYzUkNMSE5DUVZoelFpeEZRV0YwUWl4WlFXSnpRaXhEUVVFeFFpeEZRV05ITEVsQlpFZzdRVUZsUVRoRUxIZENRVUZ2UWpsRUxFVkJRWEJDTEVWQlFYZENPMEZCUTNCQ08wRkJRMEV3VUN4WFFVRkhPMEZCUm1sQ0xFdEJRWGhDTEVWQlIwY3NTVUZJU0R0QlFVbEJPMEZCUTBGNlRTeHpRa0ZCYTBKcVJDeEhRVUZITWxBc1NVRkJja0lzUlVGQk1rSTdRVUZEZGtKRExHbENRVUZUTEhWQ1FVUmpPMEZCUlhaQ1F5eDFRa0ZCWlR0QlFVWlJMRXRCUVROQ08wRkJTVUU3UVVGRFFUVk5MSE5DUVVGclFtcEVMRWRCUVVjNFVDeExRVUZ5UWl4RlFVRTBRanRCUVVONFFrTXNhVUpCUVZNc1pVRkVaVHRCUVVWNFFrTXNhVUpCUVZNN1FVRkdaU3hMUVVFMVFqczdRVUZMUVR0QlFVTkJhbEVzVDBGQlIzVkNMRWRCUVVnc1EwRkJUM1JDTEVWQlFWQXNSVUZCVnl4TlFVRllMRVZCUVcxQ0xGbEJRVms3UVVGRE0wSkJMRmRCUVVjeVF5eE5RVUZJTEVOQlFWVXNTVUZCVml4RlFVRm5RaXhUUVVGb1FpeEZRVUV5UWl4alFVRXpRanRCUVVOQkxHVkJRVTh6UXl4SFFVRkhhVkVzU1VGQlNDeERRVUZSUXl4SlFVRm1PMEZCUTBnc1MwRklSRHRCUVVsQmJsRXNUMEZCUjNWQ0xFZEJRVWdzUTBGQlQzUkNMRVZCUVZBc1JVRkJWeXhaUVVGWUxFVkJRWGxDTEZsQlFWazdRVUZEYWtOQkxGZEJRVWN5UXl4TlFVRklMRU5CUVZVc1NVRkJWaXhGUVVGblFpeGxRVUZvUWl4RlFVRnBReXhoUVVGcVF6dEJRVU5CTEdWQlFVOTNUaXhMUVVGTFF5eE5RVUZhTzBGQlEwZ3NTMEZJUkR0QlFVbEJjbEVzVDBGQlIzVkNMRWRCUVVnc1EwRkJUM1JDTEVWQlFWQXNSVUZCVnl4clFrRkJXQ3hGUVVFclFpeFpRVUZaTzBGQlEzWkRRU3hYUVVGSE1rTXNUVUZCU0N4RFFVRlZMRWxCUVZZc1JVRkJaMElzY1VKQlFXaENMRVZCUVhWRExEQkNRVUYyUXp0QlFVTkJMR1ZCUVU4elF5eEhRVUZIYVZFc1NVRkJTQ3hEUVVGUlNTeG5Ra0ZCWmp0QlFVTklMRXRCU0VRN1FVRkpRWFJSTEU5QlFVZDFRaXhIUVVGSUxFTkJRVTkwUWl4RlFVRlFMRVZCUVZjc2EwSkJRVmdzUlVGQkswSXNXVUZCV1R0QlFVTjJRMEVzVjBGQlJ6SkRMRTFCUVVnc1EwRkJWU3hKUVVGV0xFVkJRV2RDTEhGQ1FVRm9RaXhGUVVGMVF5d3dRa0ZCZGtNN1FVRkRRU3hsUVVGUE0wTXNSMEZCUjJsUkxFbEJRVWdzUTBGQlVVc3NaMEpCUVdZN1FVRkRTQ3hMUVVoRU8wRkJTVUYyVVN4UFFVRkhkVUlzUjBGQlNDeERRVUZQZEVJc1JVRkJVQ3hGUVVGWExGRkJRVmdzUlVGQmNVSXNXVUZCV1R0QlFVTTNRa0VzVjBGQlJ6SkRMRTFCUVVnc1EwRkJWU3hKUVVGV0xFVkJRV2RDTEZkQlFXaENMRVZCUVRaQ0xHZENRVUUzUWp0QlFVTkJMR1ZCUVU4elF5eEhRVUZIYVZFc1NVRkJTQ3hEUVVGUlRTeE5RVUZtTzBGQlEwZ3NTMEZJUkR0QlFVbEJlRkVzVDBGQlIzVkNMRWRCUVVnc1EwRkJUM1JDTEVWQlFWQXNSVUZCVnl4VFFVRllMRVZCUVhOQ0xGbEJRVms3UVVGRE9VSkJMRmRCUVVjeVF5eE5RVUZJTEVOQlFWVXNTVUZCVml4RlFVRm5RaXhaUVVGb1FpeEZRVUU0UWl4cFFrRkJPVUk3UVVGRFFTeGxRVUZQTTBNc1IwRkJSMmxSTEVsQlFVZ3NRMEZCVVU4c1QwRkJaanRCUVVOSUxFdEJTRVE3UVVGSlFYcFJMRTlCUVVkMVFpeEhRVUZJTEVOQlFVOTBRaXhGUVVGUUxFVkJRVmNzWVVGQldDeEZRVUV3UWl4WlFVRlpPMEZCUTJ4RFFTeFhRVUZITWtNc1RVRkJTQ3hEUVVGVkxFbEJRVllzUlVGQlowSXNaMEpCUVdoQ0xFVkJRV3RETEhOQ1FVRnNRenRCUVVOQkxHVkJRVTh6UXl4SFFVRkhhMFlzUzBGQlNDeERRVUZUZFV3c1YwRkJhRUk3UVVGRFNDeExRVWhFTzBGQlNVRXhVU3hQUVVGSGRVSXNSMEZCU0N4RFFVRlBkRUlzUlVGQlVDeEZRVUZYTEV0QlFWZ3NSVUZCYTBJc1dVRkJXVHRCUVVNeFFrRXNWMEZCUnpKRExFMUJRVWdzUTBGQlZTeEpRVUZXTEVWQlFXZENMRkZCUVdoQ0xFVkJRVEJDTEdOQlFURkNPMEZCUTBFc1pVRkJUek5ETEVkQlFVZHJSaXhMUVVGSUxFTkJRVk4zVEN4SFFVRm9RanRCUVVOSUxFdEJTRVE3UVVGSlFUTlJMRTlCUVVkMVFpeEhRVUZJTEVOQlFVOTBRaXhGUVVGUUxFVkJRVmNzVVVGQldDeEZRVUZ4UWl4WlFVRlpPMEZCUXpkQ1FTeFhRVUZITWtNc1RVRkJTQ3hEUVVGVkxFbEJRVllzUlVGQlowSXNWMEZCYUVJc1JVRkJOa0lzVjBGQk4wSTdRVUZEUVN4bFFVRlBNME1zUjBGQlJ6SlJMRTFCUVZZN1FVRkRTQ3hMUVVoRU96dEJRVXRCTzBGQlEwRTFVU3hQUVVGSGRVSXNSMEZCU0N4RFFVRlBkRUlzUlVGQlVDeEZRVUZYTEdkQ1FVRllMRVZCUVRaQ0xGbEJRVms3UVVGRGNrTkJMRmRCUVVkMVFpeFBRVUZJTEVOQlFWY3NTVUZCV0N4RlFVRnBRaXh0UWtGQmFrSXNSVUZCYzBNc2MwSkJRWFJETzBGQlEwRXNaVUZCVDNaQ0xFZEJRVWRFTEVWQlFVZ3NRMEZCVFRaUkxHTkJRV0k3UVVGRFNDeExRVWhFT3p0QlFVdEJPMEZCUTBFc1VVRkJTU3hQUVVGUFF5eFhRVUZRTEV0QlFYVkNMRmRCUVROQ0xFVkJRWGRETzBGQlEzQkRPVkVzVjBGQlJ6UkZMRkZCUVVnc1EwRkJXV3ROTEZsQlFWbERMRk5CUVhoQ0xFVkJRVzFETEd0RFFVRnVReXhGUVVGMVJTeGhRVUYyUlR0QlFVTklPenRCUVVWRU8wRkJRMEU1VVN4UFFVRkhLMUVzVVVGQlNDeERRVUZaUXl4WlFVRmFMRWRCUVRKQ08wRkJRM1pDTEZsQlFVbERMRWRCUVVvc1IwRkJWenRCUVVOUWFsSXNaVUZCUnpKRExFMUJRVWdzUTBGQlZTeEpRVUZXTEVWQlFXZENMRGhDUVVGb1FpeEZRVUZuUkN4UlFVRm9SRHRCUVVOQkxHMUNRVUZQTTBNc1IwRkJSMmxTTEVkQlFWWTdRVUZEU0N4VFFVcHpRanRCUVV0MlFpeFpRVUZKUXl4SlFVRktMRWRCUVZrN1FVRkRVbXhTTEdWQlFVY3lReXhOUVVGSUxFTkJRVlVzU1VGQlZpeEZRVUZuUWl3clFrRkJhRUlzUlVGQmFVUXNWVUZCYWtRN1FVRkRRU3h0UWtGQlR6TkRMRWRCUVVkdFVpeExRVUZXTzBGQlEwZ3NVMEZTYzBJN1FVRlRka0lzV1VGQlNVTXNZMEZCU2l4SFFVRnpRanRCUVVOc1FuQlNMR1ZCUVVjeVF5eE5RVUZJTEVOQlFWVXNTVUZCVml4RlFVRm5RaXg1UTBGQmFFSXNSVUZCTWtRc05FSkJRVE5FTzBGQlEwRXNiVUpCUVU4elF5eEhRVUZISzFFc1VVRkJTQ3hEUVVGWlN5eGpRVUZ1UWp0QlFVTklPMEZCV25OQ0xFdEJRVE5DTzBGQlkwZ2lMQ0ptYVd4bElqb2laR1Z3Y21WallYUmxaQzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z1EyOXdlWEpwWjJoMElDaGpLU0F5TURFM0xUSXdNVGdnV0dsaGJXVnVJRmxoYW1rZ1UyOW1kSGRoY21VZ1EyOHVMQ0JNZEdRdVhHNWNiaUJvZEhSd2N6b3ZMM2QzZHk1amIyTnZjeTVqYjIwdlhHNWNiaUJRWlhKdGFYTnphVzl1SUdseklHaGxjbVZpZVNCbmNtRnVkR1ZrTENCbWNtVmxJRzltSUdOb1lYSm5aU3dnZEc4Z1lXNTVJSEJsY25OdmJpQnZZblJoYVc1cGJtY2dZU0JqYjNCNVhHNGdiMllnZEdocGN5QnpiMlowZDJGeVpTQmhibVFnWVhOemIyTnBZWFJsWkNCbGJtZHBibVVnYzI5MWNtTmxJR052WkdVZ0tIUm9aU0JjSWxOdlpuUjNZWEpsWENJcExDQmhJR3hwYldsMFpXUXNYRzRnZDI5eWJHUjNhV1JsTENCeWIzbGhiSFI1TFdaeVpXVXNJRzV2YmkxaGMzTnBaMjVoWW14bExDQnlaWFp2WTJGaWJHVWdZVzVrSUc1dmJpMWxlR05zZFhOcGRtVWdiR2xqWlc1elpWeHVJSFJ2SUhWelpTQkRiMk52Y3lCRGNtVmhkRzl5SUhOdmJHVnNlU0IwYnlCa1pYWmxiRzl3SUdkaGJXVnpJRzl1SUhsdmRYSWdkR0Z5WjJWMElIQnNZWFJtYjNKdGN5NGdXVzkxSUhOb1lXeHNYRzRnYm05MElIVnpaU0JEYjJOdmN5QkRjbVZoZEc5eUlITnZablIzWVhKbElHWnZjaUJrWlhabGJHOXdhVzVuSUc5MGFHVnlJSE52Wm5SM1lYSmxJRzl5SUhSdmIyeHpJSFJvWVhRbmMxeHVJSFZ6WldRZ1ptOXlJR1JsZG1Wc2IzQnBibWNnWjJGdFpYTXVJRmx2ZFNCaGNtVWdibTkwSUdkeVlXNTBaV1FnZEc4Z2NIVmliR2x6YUN3Z1pHbHpkSEpwWW5WMFpTeGNiaUJ6ZFdKc2FXTmxibk5sTENCaGJtUXZiM0lnYzJWc2JDQmpiM0JwWlhNZ2IyWWdRMjlqYjNNZ1EzSmxZWFJ2Y2k1Y2JseHVJRlJvWlNCemIyWjBkMkZ5WlNCdmNpQjBiMjlzY3lCcGJpQjBhR2x6SUV4cFkyVnVjMlVnUVdkeVpXVnRaVzUwSUdGeVpTQnNhV05sYm5ObFpDd2dibTkwSUhOdmJHUXVYRzRnV0dsaGJXVnVJRmxoYW1rZ1UyOW1kSGRoY21VZ1EyOHVMQ0JNZEdRdUlISmxjMlZ5ZG1WeklHRnNiQ0J5YVdkb2RITWdibTkwSUdWNGNISmxjM05zZVNCbmNtRnVkR1ZrSUhSdklIbHZkUzVjYmx4dUlGUklSU0JUVDBaVVYwRlNSU0JKVXlCUVVrOVdTVVJGUkNCY0lrRlRJRWxUWENJc0lGZEpWRWhQVlZRZ1YwRlNVa0ZPVkZrZ1QwWWdRVTVaSUV0SlRrUXNJRVZZVUZKRlUxTWdUMUpjYmlCSlRWQk1TVVZFTENCSlRrTk1WVVJKVGtjZ1FsVlVJRTVQVkNCTVNVMUpWRVZFSUZSUElGUklSU0JYUVZKU1FVNVVTVVZUSUU5R0lFMUZVa05JUVU1VVFVSkpURWxVV1N4Y2JpQkdTVlJPUlZOVElFWlBVaUJCSUZCQlVsUkpRMVZNUVZJZ1VGVlNVRTlUUlNCQlRrUWdUazlPU1U1R1VrbE9SMFZOUlU1VUxpQkpUaUJPVHlCRlZrVk9WQ0JUU0VGTVRDQlVTRVZjYmlCQlZWUklUMUpUSUU5U0lFTlBVRmxTU1VkSVZDQklUMHhFUlZKVElFSkZJRXhKUVVKTVJTQkdUMUlnUVU1WklFTk1RVWxOTENCRVFVMUJSMFZUSUU5U0lFOVVTRVZTWEc0Z1RFbEJRa2xNU1ZSWkxDQlhTRVZVU0VWU0lFbE9JRUZPSUVGRFZFbFBUaUJQUmlCRFQwNVVVa0ZEVkN3Z1ZFOVNWQ0JQVWlCUFZFaEZVbGRKVTBVc0lFRlNTVk5KVGtjZ1JsSlBUU3hjYmlCUFZWUWdUMFlnVDFJZ1NVNGdRMDlPVGtWRFZFbFBUaUJYU1ZSSUlGUklSU0JUVDBaVVYwRlNSU0JQVWlCVVNFVWdWVk5GSUU5U0lFOVVTRVZTSUVSRlFVeEpUa2RUSUVsT1hHNGdWRWhGSUZOUFJsUlhRVkpGTGx4dUlDb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW92WEc1Y2JseHVkbUZ5SUdweklEMGdZMk11YW5NN1hHNWNibWxtSUNoRFExOUVSVUpWUnlrZ2UxeHVYRzRnSUNBZ1puVnVZM1JwYjI0Z1pHVndjbVZqWVhSbFJXNTFiU0FvYjJKcUxDQnZiR1JRWVhSb0xDQnVaWGRRWVhSb0xDQm9ZWE5VZVhCbFVISmxabWw0UW1WbWIzSmxLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hRME5mVTFWUVVFOVNWRjlLU1ZRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCb1lYTlVlWEJsVUhKbFptbDRRbVZtYjNKbElEMGdhR0Z6Vkhsd1pWQnlaV1pwZUVKbFptOXlaU0FoUFQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUhaaGNpQmxiblZ0UkdWbUlEMGdSblZ1WTNScGIyNG9KM0psZEhWeWJpQW5JQ3NnYm1WM1VHRjBhQ2tvS1R0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1Z1ZEhKcFpYTWdQU0JqWXk1RmJuVnRMbWRsZEV4cGMzUW9aVzUxYlVSbFppazdYRzRnSUNBZ0lDQWdJSFpoY2lCa1pXeHBiV2wwWlhJZ1BTQm9ZWE5VZVhCbFVISmxabWw0UW1WbWIzSmxJRDhnSjE4bklEb2dKeTRuTzF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHVnVkSEpwWlhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJsYm5SeWVTQTlJR1Z1ZEhKcFpYTmJhVjB1Ym1GdFpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnZiR1JRY205d1RtRnRaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hvWVhOVWVYQmxVSEpsWm1sNFFtVm1iM0psS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRzlzWkZSNWNHVk9ZVzFsSUQwZ2IyeGtVR0YwYUM1emNHeHBkQ2duTGljcExuTnNhV05sS0MweEtWc3dYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2YkdSUWNtOXdUbUZ0WlNBOUlHOXNaRlI1Y0dWT1lXMWxJQ3NnSjE4bklDc2daVzUwY25rN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmJHUlFjbTl3VG1GdFpTQTlJR1Z1ZEhKNU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhbk11WjJWMEtHOWlhaXdnYjJ4a1VISnZjRTVoYldVc0lHWjFibU4wYVc5dUlDaGxiblJ5ZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmpMbVZ5Y205eVNVUW9NVFF3TUN3Z2IyeGtVR0YwYUNBcklHUmxiR2x0YVhSbGNpQXJJR1Z1ZEhKNUxDQnVaWGRRWVhSb0lDc2dKeTRuSUNzZ1pXNTBjbmtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJsYm5WdFJHVm1XMlZ1ZEhKNVhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwdVltbHVaQ2h1ZFd4c0xDQmxiblJ5ZVNrcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1puVnVZM1JwYjI0Z2JXRnlhMEZ6VW1WdGIzWmxaQ0FvYjNkdVpYSkRkRzl5TENCeVpXMXZkbVZrVUhKdmNITXNJRzkzYm1WeVRtRnRaU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JVzkzYm1WeVEzUnZjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnNVkrdjZJTzk2S0tyNktPQjVZbXE1THFHWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdiM2R1WlhKT1lXMWxJRDBnYjNkdVpYSk9ZVzFsSUh4OElHcHpMbWRsZEVOc1lYTnpUbUZ0WlNodmQyNWxja04wYjNJcE8xeHVJQ0FnSUNBZ0lDQnlaVzF2ZG1Wa1VISnZjSE11Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvY0hKdmNDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z1pYSnliM0lnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmpMbVZ5Y205eVNVUW9NVFF3Tml3Z2IzZHVaWEpPWVcxbExDQndjbTl3S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHcHpMbWRsZEhObGRDaHZkMjVsY2tOMGIzSXVjSEp2ZEc5MGVYQmxMQ0J3Y205d0xDQmxjbkp2Y2l3Z1pYSnliM0lwTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCbWRXNWpkR2x2YmlCdFlYSnJRWE5FWlhCeVpXTmhkR1ZrSUNodmQyNWxja04wYjNJc0lHUmxjSEpsWTJGMFpXUlFjbTl3Y3l3Z2IzZHVaWEpPWVcxbEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGIzZHVaWEpEZEc5eUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2IzZHVaWEpPWVcxbElEMGdiM2R1WlhKT1lXMWxJSHg4SUdwekxtZGxkRU5zWVhOelRtRnRaU2h2ZDI1bGNrTjBiM0lwTzF4dUlDQWdJQ0FnSUNCc1pYUWdaR1Z6WTNKcGNIUnZjbk1nUFNCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXljeWh2ZDI1bGNrTjBiM0l1Y0hKdmRHOTBlWEJsS1R0Y2JpQWdJQ0FnSUNBZ1pHVndjbVZqWVhSbFpGQnliM0J6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0hCeWIzQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JrWlhCeVpXTmhkR1ZrVUhKdmNDQTlJSEJ5YjNCYk1GMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdibVYzVUhKdmNDQTlJSEJ5YjNCYk1WMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdaR1Z6WTNKcGNIUnZjaUE5SUdSbGMyTnlhWEIwYjNKelcyUmxjSEpsWTJGMFpXUlFjbTl3WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3B6TG1kbGRITmxkQ2h2ZDI1bGNrTjBiM0l1Y0hKdmRHOTBlWEJsTENCa1pYQnlaV05oZEdWa1VISnZjQ3dnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmpMbmRoY201SlJDZ3hOREF3TENCZ0pIdHZkMjVsY2s1aGJXVjlMaVI3WkdWd2NtVmpZWFJsWkZCeWIzQjlZQ3dnWUNSN2IzZHVaWEpPWVcxbGZTNGtlMjVsZDFCeWIzQjlZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1JsYzJOeWFYQjBiM0l1WjJWMExtTmhiR3dvZEdocGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxDQm1kVzVqZEdsdmJpQW9kaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOakxuZGhjbTVKUkNneE5EQXdMQ0JnSkh0dmQyNWxjazVoYldWOUxpUjdaR1Z3Y21WallYUmxaRkJ5YjNCOVlDd2dZQ1I3YjNkdVpYSk9ZVzFsZlM0a2UyNWxkMUJ5YjNCOVlDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1Z6WTNKcGNIUnZjaTV6WlhRdVkyRnNiQ2gwYUdsekxDQjJLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJSDFjYmx4dUlDQWdJR1oxYm1OMGFXOXVJRzFoY210QmMxSmxiVzkyWldSSmJrOWlhbVZqZENBb2IzZHVaWEpQWW1vc0lISmxiVzkyWldSUWNtOXdjeXdnYjNkdVpYSk9ZVzFsS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doYjNkdVpYSlBZbW9wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SU9XUHIraUR2ZWlpcStpamdlV0pxdVM2aGx4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsYlc5MlpXUlFjbTl3Y3k1bWIzSkZZV05vS0daMWJtTjBhVzl1SUNod2NtOXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQmxjbkp2Y2lBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMk11WlhKeWIzSkpSQ2d4TkRBMkxDQnZkMjVsY2s1aGJXVXNJSEJ5YjNBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhbk11WjJWMGMyVjBLRzkzYm1WeVQySnFMQ0J3Y205d0xDQmxjbkp2Y2lrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHWjFibU4wYVc5dUlIQnliM1pwWkdWRGJHVmhja1Z5Y205eUlDaHZkMjVsY2l3Z2IySnFMQ0J2ZDI1bGNrNWhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0Z2ZDI1bGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGc1WSt2NklPOTZLS3I2S09CNVltcTVMcUdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RtRnlJR05zWVhOelRtRnRaU0E5SUc5M2JtVnlUbUZ0WlNCOGZDQmpZeTVxY3k1blpYUkRiR0Z6YzA1aGJXVW9iM2R1WlhJcE8xeHVJQ0FnSUNBZ0lDQjJZWElnU1c1bWJ5QTlJQ2RUYjNKeWVTd2dKeUFySUdOc1lYTnpUbUZ0WlNBcklDY3VKWE1nYVhNZ2NtVnRiM1psWkN3Z2NHeGxZWE5sSUhWelpTQWxjeUJwYm5OMFpXRmtMaWM3WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUhCeWIzQWdhVzRnYjJKcUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCa1pXWnBibVVnS0hCeWIzQXNJR2RsZEhObGRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1oxYm1OMGFXOXVJR0ZqWTJWemMyOXlJQ2h1WlhkUWNtOXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmpMbVZ5Y205eUtFbHVabThzSUhCeWIzQXNJRzVsZDFCeWIzQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lVRnljbUY1TG1selFYSnlZWGtvWjJWMGMyVjBLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm5aWFJ6WlhRZ1BTQm5aWFJ6WlhRdWMzQnNhWFFvSnl3bktWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xtMWhjQ2htZFc1amRHbHZiaUFvZUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjRMblJ5YVcwb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JxY3k1blpYUnpaWFFvYjNkdVpYSXNJSEJ5YjNBc0lHRmpZMlZ6YzI5eUxtSnBibVFvYm5Wc2JDd2daMlYwYzJWMFd6QmRLU3dnWjJWMGMyVjBXekZkSUNZbUlHRmpZMlZ6YzI5eUxtSnBibVFvYm5Wc2JDd2daMlYwYzJWMFd6RmRLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGRHTm9JQ2hsS1NCN2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdkbGRITmxkQ0E5SUc5aWFsdHdjbTl3WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNod2NtOXdXekJkSUQwOVBTQW5LaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5Qm5aWFFnYzJWMFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1YwVUhKdmNDQTlJSEJ5YjNBdWMyeHBZMlVvTVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVm1hVzVsS0Nkbkp5QXJJR1YwVUhKdmNDd2daMlYwYzJWMEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaV1pwYm1Vb0ozTW5JQ3NnWlhSUWNtOXdMQ0JuWlhSelpYUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEp2Y0M1emNHeHBkQ2duTENjcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzV0WVhBb1puVnVZM1JwYjI0Z0tIZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjRMblJ5YVcwb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNGdLSGdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbFptbHVaU2g0TENCblpYUnpaWFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lHWjFibU4wYVc5dUlHMWhjbXRHZFc1amRHbHZibGRoY201cGJtY2dLRzkzYm1WeVEzUnZjaXdnYjJKcUxDQnZkMjVsY2s1aGJXVXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnZkMjVsY2tOMGIzSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJT1dQcitpRHZlaWlxK2lqZ2VXSnF1UzZobHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHOTNibVZ5VG1GdFpTQTlJRzkzYm1WeVRtRnRaU0I4ZkNCcWN5NW5aWFJEYkdGemMwNWhiV1VvYjNkdVpYSkRkRzl5S1R0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2NISnZjQ0JwYmlCdlltb3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDaG1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCd2NtOXdUbUZ0WlNBOUlIQnliM0E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHOXlhV2RwYmtaMWJtTWdQU0J2ZDI1bGNrTjBiM0piY0hKdmNFNWhiV1ZkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hiM0pwWjJsdVJuVnVZeWtnY21WMGRYSnVPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnZDJGeWJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmpMbmRoY200b0oxTnZjbko1TENBbGN5NGxjeUJwY3lCa1pYQnlaV05oZEdWa0xpQlFiR1ZoYzJVZ2RYTmxJQ1Z6SUdsdWMzUmxZV1FuTENCdmQyNWxjazVoYldVc0lIQnliM0JPWVcxbExDQnZZbXBiY0hKdmNFNWhiV1ZkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHOXlhV2RwYmtaMWJtTXVZWEJ3Ykhrb2RHaHBjeXdnWVhKbmRXMWxiblJ6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZkMjVsY2tOMGIzSmJjSEp2Y0U1aGJXVmRJRDBnZDJGeWJqdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwcEtDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ0x5OGdjbVZ0YjNabElHTmpMbWx1Wm05Y2JpQWdJQ0JxY3k1blpYUW9ZMk1zSUNkcGJtWnZKeXdnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQmpZeTUzWVhKdVNVUW9NVFF3TUN3Z0oyTmpMbWx1Wm04bkxDQW5ZMk11Ykc5bkp5azdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmpZeTVzYjJjN1hHNGdJQ0FnZlNrN1hHNGdJQ0FnTHk4Z1kyTXVjM0J5YVhSbFJuSmhiV1ZEWVdOb1pWeHVJQ0FnSUdwekxtZGxkQ2hqWXl3Z1hDSnpjSEpwZEdWR2NtRnRaVU5oWTJobFhDSXNJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ1kyTXVaWEp5YjNKSlJDZ3hOREEwS1R0Y2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUM4dklGTndjbWwwWlVaeVlXMWxYRzRnSUNBZ2FuTXVaMlYwS0dOakxsTndjbWwwWlVaeVlXMWxMbkJ5YjNSdmRIbHdaU3dnSjE5MFpYaDBkWEpsVEc5aFpHVmtKeXdnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQmpZeTVsY25KdmNrbEVLREUwTURBc0lDZHpjSEpwZEdWR2NtRnRaUzVmZEdWNGRIVnlaVXh2WVdSbFpDY3NJQ2R6Y0hKcGRHVkdjbUZ0WlM1MFpYaDBkWEpsVEc5aFpHVmtLQ2tuS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVkR1Y0ZEhWeVpVeHZZV1JsWkNncE8xeHVJQ0FnSUgwcE8xeHVJQ0FnSUcxaGNtdEJjMUpsYlc5MlpXUW9ZMk11VTNCeWFYUmxSbkpoYldVc0lGdGNiaUFnSUNBZ0lDQWdKMkZrWkV4dllXUmxaRVYyWlc1MFRHbHpkR1Z1WlhJblhHNGdJQ0FnWFNrN1hHNGdJQ0FnYldGeWEwWjFibU4wYVc5dVYyRnlibWx1Wnloall5NVRjSEpwZEdVdWNISnZkRzkwZVhCbExDQjdYRzRnSUNBZ0lDQWdJSE5sZEZOMFlYUmxPaUFuWTJNdVUzQnlhWFJsTG5ObGRFMWhkR1Z5YVdGc0p5eGNiaUFnSUNBZ0lDQWdaMlYwVTNSaGRHVTZJQ2RqWXk1VGNISnBkR1V1WjJWMFRXRjBaWEpwWVd3blhHNGdJQ0FnZlN3Z0oyTmpMbE53Y21sMFpTY3BPMXh1WEc0Z0lDQWdhbk11WjJWMEtHTmpMbE53Y21sMFpVWnlZVzFsTG5CeWIzUnZkSGx3WlN3Z0oyTnNaV0Z5VkdWNGRIVnlaU2NzSUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdZMk11ZDJGeWJrbEVLREUwTURZc0lDZGpZeTVUY0hKcGRHVkdjbUZ0WlNjc0lDZGpiR1ZoY2xSbGVIUjFjbVVuS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUNncElIdDlPMXh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdMeThnWTJNdWRHVjRkSFZ5WlVOaFkyaGxYRzRnSUNBZ2FuTXVaMlYwS0dOakxDQW5kR1Y0ZEhWeVpVTmhZMmhsSnl3Z1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0JqWXk1bGNuSnZja2xFS0RFME1EWXNJQ2RqWXljc0lDZDBaWGgwZFhKbFEyRmphR1VuS1R0Y2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUM4dklGUmxlSFIxY21WY2JpQWdJQ0JzWlhRZ1ZHVjRkSFZ5WlRKRUlEMGdZMk11VkdWNGRIVnlaVEpFTzF4dUlDQWdJR3B6TG05aWMyOXNaWFJsS0ZSbGVIUjFjbVV5UkM1d2NtOTBiM1I1Y0dVc0lDZDBaWGgwZFhKbExuSmxiR1ZoYzJWVVpYaDBkWEpsSnl3Z0ozUmxlSFIxY21VdVpHVnpkSEp2ZVNjcE8xeHVYRzRnSUNBZ2FuTXVaMlYwS0ZSbGVIUjFjbVV5UkM1d2NtOTBiM1I1Y0dVc0lDZG5aWFJPWVcxbEp5d2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCall5NTNZWEp1U1VRb01UUXdNQ3dnSjNSbGVIUjFjbVV1WjJWMFRtRnRaU2dwSnl3Z0ozUmxlSFIxY21VdVgyZHNTVVFuS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOW5iRWxFSUh4OElHNTFiR3c3WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnZlNrN1hHNWNiaUFnSUNCcWN5NW5aWFFvVkdWNGRIVnlaVEpFTG5CeWIzUnZkSGx3WlN3Z0oybHpURzloWkdWa0p5d2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCall5NWxjbkp2Y2tsRUtERTBNREFzSUNkMFpYaDBkWEpsTG1selRHOWhaR1ZrSUdaMWJtTjBhVzl1Snl3Z0ozUmxlSFIxY21VdWJHOWhaR1ZrSUhCeWIzQmxjblI1SnlrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXViRzloWkdWa08xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJR3B6TG1kbGRDaFVaWGgwZFhKbE1rUXVjSEp2ZEc5MGVYQmxMQ0FuYzJWMFFXNTBhVUZzYVdGelZHVjRVR0Z5WVcxbGRHVnljeWNzSUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdZMk11ZDJGeWJrbEVLREUwTURBc0lDZDBaWGgwZFhKbExuTmxkRUZ1ZEdsQmJHbGhjMVJsZUZCaGNtRnRaWFJsY25Nb0tTY3NJQ2QwWlhoMGRYSmxMbk5sZEVacGJIUmxjbk1vWTJNdVZHVjRkSFZ5WlRKRUxrWnBiSFJsY2k1TVNVNUZRVklzSUdOakxsUmxlSFIxY21VeVJDNUdhV3gwWlhJdVRFbE9SVUZTS1NjcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSR2FXeDBaWEp6S0ZSbGVIUjFjbVV5UkM1R2FXeDBaWEl1VEVsT1JVRlNMQ0JVWlhoMGRYSmxNa1F1Um1sc2RHVnlMa3hKVGtWQlVpazdYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0JxY3k1blpYUW9WR1Y0ZEhWeVpUSkVMbkJ5YjNSdmRIbHdaU3dnSjNObGRFRnNhV0Z6VkdWNFVHRnlZVzFsZEdWeWN5Y3NJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ1kyTXVkMkZ5YmtsRUtERTBNREFzSUNkMFpYaDBkWEpsTG5ObGRFRnVkR2xCYkdsaGMxUmxlRkJoY21GdFpYUmxjbk1vS1Njc0lDZDBaWGgwZFhKbExuTmxkRVpwYkhSbGNuTW9ZMk11VkdWNGRIVnlaVEpFTGtacGJIUmxjaTVPUlVGU1JWTlVMQ0JqWXk1VVpYaDBkWEpsTWtRdVJtbHNkR1Z5TGs1RlFWSkZVMVFwSnlrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEVacGJIUmxjbk1vVkdWNGRIVnlaVEpFTGtacGJIUmxjaTVPUlVGU1JWTlVMQ0JVWlhoMGRYSmxNa1F1Um1sc2RHVnlMazVGUVZKRlUxUXBPMXh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnTHk4Z1kyTXViV0ZqY205Y2JpQWdJQ0J0WVhKclFYTlNaVzF2ZG1Wa1NXNVBZbXBsWTNRb1kyTXViV0ZqY204c0lGdGNiaUFnSUNBZ0lDQWdKMFZPUVVKTVJWOUhURjlUVkVGVVJWOURRVU5JUlNjc1hHNGdJQ0FnSUNBZ0lDZEdTVmhmUVZKVVNVWkJRMVJUWDBKWlgxTlVVa1ZEU0VsT1IxOVVSVmhGVENjc1hHNGdJQ0FnWFN3Z0oyTmpMbTFoWTNKdkp5azdYRzVjYmlBZ0lDQndjbTkyYVdSbFEyeGxZWEpGY25KdmNpaGpZeTV0WVdOeWJ5d2dlMXh1SUNBZ0lDQWdJQ0JRU1RvZ0owMWhkR2d1VUVrbkxGeHVJQ0FnSUNBZ0lDQlFTVEk2SUNkTllYUm9MbEJKS2pJbkxGeHVJQ0FnSUNBZ0lDQkdURlJmVFVGWU9pQW5UblZ0WW1WeUxrMUJXRjlXUVV4VlJTY3NYRzRnSUNBZ0lDQWdJRVpNVkY5TlNVNDZJQ2RPZFcxaVpYSXVUVWxPWDFaQlRGVkZKeXhjYmlBZ0lDQWdJQ0FnVlVsT1ZGOU5RVmc2SUNkT2RXMWlaWEl1VFVGWVgxTkJSa1ZmU1U1VVJVZEZVaWRjYmlBZ0lDQjlMQ0FuWTJNdWJXRmpjbThuS1R0Y2JseHVJQ0FnSUM4dklHTmpMbWRoYldWY2JpQWdJQ0J0WVhKclFYTlNaVzF2ZG1Wa1NXNVBZbXBsWTNRb1kyTXVaMkZ0WlN3Z1cxeHVJQ0FnSUNBZ0lDQW5RMDlPUmtsSFgwdEZXU2NzWEc0Z0lDQWdYU3dnSjJOakxtZGhiV1VuS1R0Y2JseHVJQ0FnSUM4dklHTmpMbk41YzF4dUlDQWdJRzFoY210QmMxSmxiVzkyWldSSmJrOWlhbVZqZENoall5NXplWE1zSUZ0Y2JpQWdJQ0FnSUNBZ0oyUjFiWEJTYjI5MEp5eGNiaUFnSUNBZ0lDQWdKMk5zWldGdVUyTnlhWEIwSnl4Y2JpQWdJQ0JkTENBblkyTXVjM2x6SnlrN1hHNWNiaUFnSUNBdkx5QmpZeTVFYVhKbFkzUnZjbHh1SUNBZ0lIQnliM1pwWkdWRGJHVmhja1Z5Y205eUtHTmpMa1JwY21WamRHOXlMQ0I3WEc0Z0lDQWdJQ0FnSUVWV1JVNVVYMUJTVDBwRlExUkpUMDVmUTBoQlRrZEZSRG9nSnljc1hHNGdJQ0FnSUNBZ0lFVldSVTVVWDBKRlJrOVNSVjlXU1ZOSlZEb2dKMFZXUlU1VVgwRkdWRVZTWDFWUVJFRlVSU2NzWEc0Z0lDQWdJQ0FnSUVWV1JVNVVYMEZHVkVWU1gxWkpVMGxVT2lBblJWWkZUbFJmUWtWR1QxSkZYMFJTUVZjbkxGeHVJQ0FnSUgwc0lDZGpZeTVFYVhKbFkzUnZjaWNwTzF4dUlDQWdJRzFoY210R2RXNWpkR2x2YmxkaGNtNXBibWNvWTJNdVJHbHlaV04wYjNJdWNISnZkRzkwZVhCbExDQjdYRzRnSUNBZ0lDQWdJR052Ym5abGNuUlViMGRNT2lBblkyTXVkbWxsZHk1amIyNTJaWEowVkc5TWIyTmhkR2x2YmtsdVZtbGxkeWNzWEc0Z0lDQWdJQ0FnSUdOdmJuWmxjblJVYjFWSk9pQW5KeXhjYmlBZ0lDQWdJQ0FnWjJWMFYybHVVMmw2WlRvZ0oyTmpMbmRwYmxOcGVtVW5MRnh1SUNBZ0lDQWdJQ0JuWlhSWGFXNVRhWHBsU1c1UWFYaGxiSE02SUNkall5NTNhVzVUYVhwbEp5eGNiaUFnSUNBZ0lDQWdaMlYwVm1semFXSnNaVk5wZW1VNklDZGpZeTUyYVdWM0xtZGxkRlpwYzJsaWJHVlRhWHBsSnl4Y2JpQWdJQ0FnSUNBZ1oyVjBWbWx6YVdKc1pVOXlhV2RwYmpvZ0oyTmpMblpwWlhjdVoyVjBWbWx6YVdKc1pVOXlhV2RwYmljc1hHNGdJQ0FnSUNBZ0lIQjFjbWRsUTJGamFHVmtSR0YwWVRvZ0oyTmpMbXh2WVdSbGNpNXlaV3hsWVhObFFXeHNKeXhjYmlBZ0lDQWdJQ0FnYzJWMFJHVndkR2hVWlhOME9pQW5ZMk11UTJGdFpYSmhMbTFoYVc0dVpHVndkR2duTEZ4dUlDQWdJQ0FnSUNCelpYUkRiR1ZoY2tOdmJHOXlPaUFuWTJNdVEyRnRaWEpoTG0xaGFXNHVZbUZqYTJkeWIzVnVaRU52Ykc5eUp5eGNiaUFnSUNBZ0lDQWdaMlYwVW5WdWJtbHVaMU5qWlc1bE9pQW5ZMk11WkdseVpXTjBiM0l1WjJWMFUyTmxibVVuTEZ4dUlDQWdJQ0FnSUNCblpYUkJibWx0WVhScGIyNUpiblJsY25aaGJEb2dKMk5qTG1kaGJXVXVaMlYwUm5KaGJXVlNZWFJsSnl4Y2JpQWdJQ0FnSUNBZ2MyVjBRVzVwYldGMGFXOXVTVzUwWlhKMllXdzZJQ2RqWXk1bllXMWxMbk5sZEVaeVlXMWxVbUYwWlNjc1hHNGdJQ0FnSUNBZ0lHbHpSR2x6Y0d4aGVWTjBZWFJ6T2lBblkyTXVaR1ZpZFdjdWFYTkVhWE53YkdGNVUzUmhkSE1uTEZ4dUlDQWdJQ0FnSUNCelpYUkVhWE53YkdGNVUzUmhkSE02SUNkall5NWtaV0oxWnk1elpYUkVhWE53YkdGNVUzUmhkSE1uTEZ4dUlDQWdJQ0FnSUNCemRHOXdRVzVwYldGMGFXOXVPaUFuWTJNdVoyRnRaUzV3WVhWelpTY3NYRzRnSUNBZ0lDQWdJSE4wWVhKMFFXNXBiV0YwYVc5dU9pQW5ZMk11WjJGdFpTNXlaWE4xYldVbkxGeHVJQ0FnSUgwc0lDZGpZeTVFYVhKbFkzUnZjaWNwTzF4dUlDQWdJRzFoY210QmMxSmxiVzkyWldRb1kyTXVSR2x5WldOMGIzSXNJRnRjYmlBZ0lDQWdJQ0FnSjNCMWMyaFRZMlZ1WlNjc1hHNGdJQ0FnSUNBZ0lDZHdiM0JUWTJWdVpTY3NYRzRnSUNBZ0lDQWdJQ2R3YjNCVWIxSnZiM1JUWTJWdVpTY3NYRzRnSUNBZ0lDQWdJQ2R3YjNCVWIxTmpaVzVsVTNSaFkydE1aWFpsYkNjc1hHNGdJQ0FnSUNBZ0lDZHpaWFJRY205cVpXTjBhVzl1Snl4Y2JpQWdJQ0FnSUNBZ0oyZGxkRkJ5YjJwbFkzUnBiMjRuTEZ4dUlDQWdJRjBzSUNkall5NUVhWEpsWTNSdmNpY3BPMXh1WEc0Z0lDQWdMeThnVTJOb1pXUjFiR1Z5WEc0Z0lDQWdjSEp2ZG1sa1pVTnNaV0Z5UlhKeWIzSW9ZMk11VTJOb1pXUjFiR1Z5TENCN1hHNGdJQ0FnSUNBZ0lITmphR1ZrZFd4bFEyRnNiR0poWTJ0R2IzSlVZWEpuWlhRNklDZHpZMmhsWkhWc1pTY3NYRzRnSUNBZ0lDQWdJSE5qYUdWa2RXeGxWWEJrWVhSbFJtOXlWR0Z5WjJWME9pQW5jMk5vWldSMWJHVlZjR1JoZEdVbkxGeHVJQ0FnSUNBZ0lDQjFibk5qYUdWa2RXeGxRMkZzYkdKaFkydEdiM0pVWVhKblpYUTZJQ2QxYm5OamFHVmtkV3hsSnl4Y2JpQWdJQ0FnSUNBZ2RXNXpZMmhsWkhWc1pWVndaR0YwWlVadmNsUmhjbWRsZERvZ0ozVnVjMk5vWldSMWJHVlZjR1JoZEdVbkxGeHVJQ0FnSUNBZ0lDQjFibk5qYUdWa2RXeGxRV3hzUTJGc2JHSmhZMnR6Um05eVZHRnlaMlYwT2lBbmRXNXpZMmhsWkhWc1pVRnNiRVp2Y2xSaGNtZGxkQ2NzWEc0Z0lDQWdJQ0FnSUhWdWMyTm9aV1IxYkdWQmJHeERZV3hzWW1GamEzTTZJQ2QxYm5OamFHVmtkV3hsUVd4c0p5eGNiaUFnSUNBZ0lDQWdkVzV6WTJobFpIVnNaVUZzYkVOaGJHeGlZV05yYzFkcGRHaE5hVzVRY21sdmNtbDBlVG9nSjNWdWMyTm9aV1IxYkdWQmJHeFhhWFJvVFdsdVVISnBiM0pwZEhrblhHNGdJQ0FnZlN3Z0oyTmpMbE5qYUdWa2RXeGxjaWNwTzF4dVhHNGdJQ0FnTHk4Z1kyTXVkbWxsZDF4dUlDQWdJSEJ5YjNacFpHVkRiR1ZoY2tWeWNtOXlLR05qTG5acFpYY3NJSHRjYmlBZ0lDQWdJQ0FnWVdScWRYTjBWbWxsZDFCdmNuUTZJQ2RoWkdwMWMzUldhV1YzY0c5eWRFMWxkR0VuTEZ4dUlDQWdJQ0FnSUNCelpYUldhV1YzVUc5eWRFbHVVRzlwYm5Sek9pQW5jMlYwVm1sbGQzQnZjblJKYmxCdmFXNTBjeWNzWEc0Z0lDQWdJQ0FnSUdkbGRGWnBaWGRRYjNKMFVtVmpkRG9nSjJkbGRGWnBaWGR3YjNKMFVtVmpkQ2RjYmlBZ0lDQjlMQ0FuWTJNdWRtbGxkeWNwTzF4dUlDQWdJRzFoY210QmMxSmxiVzkyWldSSmJrOWlhbVZqZENoall5NTJhV1YzTENCYlhHNGdJQ0FnSUNBZ0lDZHBjMVpwWlhkU1pXRmtlU2NzWEc0Z0lDQWdJQ0FnSUNkelpYUlVZWEpuWlhSRVpXNXphWFI1UkZCSkp5eGNiaUFnSUNBZ0lDQWdKMmRsZEZSaGNtZGxkRVJsYm5OcGRIbEVVRWtuTEZ4dUlDQWdJQ0FnSUNBbmMyVjBSbkpoYldWYWIyOXRSbUZqZEc5eUp5eGNiaUFnSUNBZ0lDQWdKMk5oYmxObGRFTnZiblJsYm5SVFkyRnNaVVpoWTNSdmNpY3NYRzRnSUNBZ0lDQWdJQ2R6WlhSRGIyNTBaVzUwVkhKaGJuTnNZWFJsVEdWbWRGUnZjQ2NzWEc0Z0lDQWdJQ0FnSUNkblpYUkRiMjUwWlc1MFZISmhibk5zWVhSbFRHVm1kRlJ2Y0Njc1hHNGdJQ0FnSUNBZ0lDZHpaWFJXYVdWM1RtRnRaU2NzWEc0Z0lDQWdJQ0FnSUNkblpYUldhV1YzVG1GdFpTZGNiaUFnSUNCZExDQW5ZMk11ZG1sbGR5Y3BPMXh1WEc0Z0lDQWdMeThnVEc5aFpHVnlYRzRnSUNBZ2JXRnlhMEZ6VW1WdGIzWmxaQ2hqWXk1UWFYQmxiR2x1WlN3Z1cxeHVJQ0FnSUNBZ0lDQW5abXh2ZDBsdVJHVndjeWNzWEc0Z0lDQWdJQ0FnSUNkblpYUkpkR1Z0Y3lkY2JpQWdJQ0JkTENBblkyTXViRzloWkdWeUp5azdYRzVjYmlBZ0lDQXZMeUJqWXk1UWFIbHphV056VFdGdVlXZGxjbHh1SUNBZ0lHMWhjbXRCYzFKbGJXOTJaV1FvWTJNdVVHaDVjMmxqYzAxaGJtRm5aWElzSUZ0Y2JpQWdJQ0FnSUNBZ0oyRjBkR0ZqYUVSbFluVm5SSEpoZDFSdlEyRnRaWEpoSnl4Y2JpQWdJQ0FnSUNBZ0oyUmxkR0ZqYUVSbFluVm5SSEpoZDBaeWIyMURZVzFsY21FbkxGeHVJQ0FnSUYwcE8xeHVYRzRnSUNBZ0x5OGdZMk11UTI5c2JHbHphVzl1VFdGdVlXZGxjbHh1SUNBZ0lHMWhjbXRCYzFKbGJXOTJaV1FvWTJNdVEyOXNiR2x6YVc5dVRXRnVZV2RsY2l3Z1cxeHVJQ0FnSUNBZ0lDQW5ZWFIwWVdOb1JHVmlkV2RFY21GM1ZHOURZVzFsY21FbkxGeHVJQ0FnSUNBZ0lDQW5aR1YwWVdOb1JHVmlkV2RFY21GM1JuSnZiVU5oYldWeVlTY3NYRzRnSUNBZ1hTazdYRzVjYmlBZ0lDQXZMeUJqWXk1T2IyUmxYRzRnSUNBZ2NISnZkbWxrWlVOc1pXRnlSWEp5YjNJb1kyTXVYMEpoYzJWT2IyUmxMbkJ5YjNSdmRIbHdaU3dnZTF4dUlDQWdJQ0FnSUNBbmRHRm5Kem9nSjI1aGJXVW5MRnh1SUNBZ0lDQWdJQ0FuWjJWMFZHRm5Kem9nSjI1aGJXVW5MRnh1SUNBZ0lDQWdJQ0FuYzJWMFZHRm5Kem9nSjI1aGJXVW5MRnh1SUNBZ0lDQWdJQ0FuWjJWMFEyaHBiR1JDZVZSaFp5YzZJQ2RuWlhSRGFHbHNaRUo1VG1GdFpTY3NYRzRnSUNBZ0lDQWdJQ2R5WlcxdmRtVkRhR2xzWkVKNVZHRm5Kem9nSjJkbGRFTm9hV3hrUW5sT1lXMWxLRzVoYldVcExtUmxjM1J5YjNrb0tTZGNiaUFnSUNCOUtUdGNibHh1SUNBZ0lHMWhjbXRCYzFKbGJXOTJaV1FvWTJNdVRtOWtaU3dnVzF4dUlDQWdJQ0FnSUNBblgyTmhjMk5oWkdWRGIyeHZja1Z1WVdKc1pXUW5MRnh1SUNBZ0lDQWdJQ0FuWTJGelkyRmtaVU52Ykc5eUp5eGNiaUFnSUNBZ0lDQWdKMmx6UTJGelkyRmtaVU52Ykc5eVJXNWhZbXhsWkNjc1hHNGdJQ0FnSUNBZ0lDZHpaWFJEWVhOallXUmxRMjlzYjNKRmJtRmliR1ZrSnl4Y2JpQWdJQ0FnSUNBZ0oxOWpZWE5qWVdSbFQzQmhZMmwwZVVWdVlXSnNaV1FuTEZ4dUlDQWdJQ0FnSUNBblkyRnpZMkZrWlU5d1lXTnBkSGtuTEZ4dUlDQWdJQ0FnSUNBbmFYTkRZWE5qWVdSbFQzQmhZMmwwZVVWdVlXSnNaV1FuTEZ4dUlDQWdJQ0FnSUNBbmMyVjBRMkZ6WTJGa1pVOXdZV05wZEhsRmJtRmliR1ZrSnl4Y2JpQWdJQ0FnSUNBZ0oyOXdZV05wZEhsTmIyUnBabmxTUjBJbkxGeHVJQ0FnSUNBZ0lDQW5hWE5QY0dGamFYUjVUVzlrYVdaNVVrZENKeXhjYmlBZ0lDQWdJQ0FnSjNObGRFOXdZV05wZEhsTmIyUnBabmxTUjBJbkxGeHVJQ0FnSUNBZ0lDQW5hV2R1YjNKbFFXNWphRzl5Snl4Y2JpQWdJQ0FnSUNBZ0oybHpTV2R1YjNKbFFXNWphRzl5VUc5cGJuUkdiM0pRYjNOcGRHbHZiaWNzWEc0Z0lDQWdJQ0FnSUNkcFoyNXZjbVZCYm1Ob2IzSlFiMmx1ZEVadmNsQnZjMmwwYVc5dUp5eGNiaUFnSUNBZ0lDQWdKMmx6VW5WdWJtbHVaeWNzWEc0Z0lDQWdJQ0FnSUNkZmMyZE9iMlJsSnl4Y2JpQWdJQ0JkS1R0Y2JseHVJQ0FnSUcxaGNtdEdkVzVqZEdsdmJsZGhjbTVwYm1jb1kyTXVUbTlrWlM1d2NtOTBiM1I1Y0dVc0lIdGNiaUFnSUNBZ0lDQWdaMlYwVG05a1pWUnZVR0Z5Wlc1MFZISmhibk5tYjNKdE9pQW5aMlYwVEc5allXeE5ZWFJ5YVhnbkxGeHVJQ0FnSUNBZ0lDQm5aWFJPYjJSbFZHOVFZWEpsYm5SVWNtRnVjMlp2Y20xQlVqb2dKMmRsZEV4dlkyRnNUV0YwY21sNEp5eGNiaUFnSUNBZ0lDQWdaMlYwVG05a1pWUnZWMjl5YkdSVWNtRnVjMlp2Y20wNklDZG5aWFJYYjNKc1pFMWhkSEpwZUNjc1hHNGdJQ0FnSUNBZ0lHZGxkRTV2WkdWVWIxZHZjbXhrVkhKaGJuTm1iM0p0UVZJNklDZG5aWFJYYjNKc1pFMWhkSEpwZUNjc1hHNGdJQ0FnSUNBZ0lHZGxkRkJoY21WdWRGUnZUbTlrWlZSeVlXNXpabTl5YlRvZ0oyZGxkRXh2WTJGc1RXRjBjbWw0Snl4Y2JpQWdJQ0FnSUNBZ1oyVjBWMjl5YkdSVWIwNXZaR1ZVY21GdWMyWnZjbTA2SUNkblpYUlhiM0pzWkUxaGRISnBlQ2NzWEc0Z0lDQWdJQ0FnSUdOdmJuWmxjblJVYjNWamFGUnZUbTlrWlZOd1lXTmxPaUFuWTI5dWRtVnlkRlJ2VG05a1pWTndZV05sUVZJbkxGeHVJQ0FnSUNBZ0lDQmpiMjUyWlhKMFZHOTFZMmhVYjA1dlpHVlRjR0ZqWlVGU09pQW5ZMjl1ZG1WeWRGUnZUbTlrWlZOd1lXTmxRVkluTEZ4dUlDQWdJQ0FnSUNCamIyNTJaWEowVkc5WGIzSnNaRk53WVdObE9pQW5ZMjl1ZG1WeWRGUnZWMjl5YkdSVGNHRmpaVUZTSnl4Y2JpQWdJQ0FnSUNBZ1kyOXVkbVZ5ZEZSdlRtOWtaVk53WVdObE9pQW5ZMjl1ZG1WeWRGUnZUbTlrWlZOd1lXTmxRVkluWEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0J3Y205MmFXUmxRMnhsWVhKRmNuSnZjaWhqWXk1T2IyUmxMbkJ5YjNSdmRIbHdaU3dnZTF4dUlDQWdJQ0FnSUNCblpYUlNiM1JoZEdsdmJsZzZJQ2R5YjNSaGRHbHZibGduTEZ4dUlDQWdJQ0FnSUNCelpYUlNiM1JoZEdsdmJsZzZJQ2R5YjNSaGRHbHZibGduTEZ4dUlDQWdJQ0FnSUNCblpYUlNiM1JoZEdsdmJsazZJQ2R5YjNSaGRHbHZibGtuTEZ4dUlDQWdJQ0FnSUNCelpYUlNiM1JoZEdsdmJsazZJQ2R5YjNSaGRHbHZibGtuTEZ4dUlDQWdJQ0FnSUNCblpYUlFiM05wZEdsdmJsZzZJQ2Q0Snl4Y2JpQWdJQ0FnSUNBZ2MyVjBVRzl6YVhScGIyNVlPaUFuZUNjc1hHNGdJQ0FnSUNBZ0lHZGxkRkJ2YzJsMGFXOXVXVG9nSjNrbkxGeHVJQ0FnSUNBZ0lDQnpaWFJRYjNOcGRHbHZibGs2SUNkNUp5eGNiaUFnSUNBZ0lDQWdaMlYwVTJ0bGQxZzZJQ2R6YTJWM1dDY3NYRzRnSUNBZ0lDQWdJSE5sZEZOclpYZFlPaUFuYzJ0bGQxZ25MRnh1SUNBZ0lDQWdJQ0JuWlhSVGEyVjNXVG9nSjNOclpYZFpKeXhjYmlBZ0lDQWdJQ0FnYzJWMFUydGxkMWs2SUNkemEyVjNXU2NzWEc0Z0lDQWdJQ0FnSUdkbGRGTmpZV3hsV0RvZ0ozTmpZV3hsV0Njc1hHNGdJQ0FnSUNBZ0lITmxkRk5qWVd4bFdEb2dKM05qWVd4bFdDY3NYRzRnSUNBZ0lDQWdJR2RsZEZOallXeGxXVG9nSjNOallXeGxXU2NzWEc0Z0lDQWdJQ0FnSUhObGRGTmpZV3hsV1RvZ0ozTmpZV3hsV1Njc1hHNGdJQ0FnSUNBZ0lHZGxkRTl3WVdOcGRIazZJQ2R2Y0dGamFYUjVKeXhjYmlBZ0lDQWdJQ0FnYzJWMFQzQmhZMmwwZVRvZ0oyOXdZV05wZEhrbkxGeHVJQ0FnSUNBZ0lDQm5aWFJEYjJ4dmNqb2dKMk52Ykc5eUp5eGNiaUFnSUNBZ0lDQWdjMlYwUTI5c2IzSTZJQ2RqYjJ4dmNpY3NYRzRnSUNBZ0lDQWdJR2RsZEV4dlkyRnNXazl5WkdWeU9pQW5la2x1WkdWNEp5eGNiaUFnSUNBZ0lDQWdjMlYwVEc5allXeGFUM0prWlhJNklDZDZTVzVrWlhnbkxGeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ0x5OGdZMk11UTI5dGNHOXVaVzUwWEc0Z0lDQWdiV0Z5YTBGelVtVnRiM1psWkNoall5NURiMjF3YjI1bGJuUXNJRnRjYmlBZ0lDQWdJQ0FnSjJselVuVnVibWx1Wnljc1hHNGdJQ0FnWFNrN1hHNWNiaUFnSUNCd2NtOTJhV1JsUTJ4bFlYSkZjbkp2Y2loall5NVRjSEpwZEdVdWNISnZkRzkwZVhCbExDQjdYRzRnSUNBZ0lDQWdJSE5sZEVsdWMyVjBUR1ZtZERvZ0oyTmpMbE53Y21sMFpVWnlZVzFsSUdsdWMyVjBUR1ZtZENjc1hHNGdJQ0FnSUNBZ0lITmxkRWx1YzJWMFVtbG5hSFE2SUNkall5NVRjSEpwZEdWR2NtRnRaU0JwYm5ObGRGSnBaMmgwSnl4Y2JpQWdJQ0FnSUNBZ2MyVjBTVzV6WlhSVWIzQTZJQ2RqWXk1VGNISnBkR1ZHY21GdFpTQnBibk5sZEZSdmNDY3NYRzRnSUNBZ0lDQWdJSE5sZEVsdWMyVjBRbTkwZEc5dE9pQW5ZMk11VTNCeWFYUmxSbkpoYldVZ2FXNXpaWFJDYjNSMGIyMG5MRnh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdMeThnWTJNdVEyRnRaWEpoWEc0Z0lDQWdiV0Z5YTBaMWJtTjBhVzl1VjJGeWJtbHVaeWhqWXk1RFlXMWxjbUV1Y0hKdmRHOTBlWEJsTENCN1hHNGdJQ0FnSUNBZ0lHZGxkRTV2WkdWVWIwTmhiV1Z5WVZSeVlXNXpabTl5YlRvZ0oyZGxkRmR2Y214a1ZHOVRZM0psWlc1TllYUnlhWGd5UkNjc1hHNGdJQ0FnSUNBZ0lHZGxkRU5oYldWeVlWUnZWMjl5YkdSUWIybHVkRG9nSjJkbGRGTmpjbVZsYmxSdlYyOXliR1JRYjJsdWRDY3NYRzRnSUNBZ0lDQWdJR2RsZEZkdmNteGtWRzlEWVcxbGNtRlFiMmx1ZERvZ0oyZGxkRmR2Y214a1ZHOVRZM0psWlc1UWIybHVkQ2NzWEc0Z0lDQWdJQ0FnSUdkbGRFTmhiV1Z5WVZSdlYyOXliR1JOWVhSeWFYZzZJQ2RuWlhSVFkzSmxaVzVVYjFkdmNteGtUV0YwY21sNE1rUW5MRnh1SUNBZ0lDQWdJQ0JuWlhSWGIzSnNaRlJ2UTJGdFpYSmhUV0YwY21sNE9pQW5aMlYwVjI5eWJHUlViMU5qY21WbGJrMWhkSEpwZURKRUoxeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ2JXRnlhMEZ6VW1WdGIzWmxaQ2hqWXk1RFlXMWxjbUVzSUZ0Y2JpQWdJQ0FnSUNBZ0oyRmtaRlJoY21kbGRDY3NYRzRnSUNBZ0lDQWdJQ2R5WlcxdmRtVlVZWEpuWlhRbkxGeHVJQ0FnSUNBZ0lDQW5aMlYwVkdGeVoyVjBjeWRjYmlBZ0lDQmRLVHRjYmx4dUlDQWdJQzh2SUZORFJVNUZYRzRnSUNBZ2RtRnlJRVZTVWlBOUlDZGNJaVZ6WENJZ2FYTWdibTkwSUdSbFptbHVaV1FnYVc0Z2RHaGxJRk5qWlc1bExDQnBkQ0JwY3lCdmJteDVJR1JsWm1sdVpXUWdhVzRnYm05eWJXRnNJRzV2WkdWekxpYzdYRzRnSUNBZ1EwTmZSVVJKVkU5U0lIeDhJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowYVdWektHTmpMbE5qWlc1bExuQnliM1J2ZEhsd1pTd2dlMXh1SUNBZ0lDQWdJQ0JoWTNScGRtVTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmpMbVZ5Y205eUtFVlNVaXdnSjJGamRHbDJaU2NwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sZERvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05qTG1WeWNtOXlLRVZTVWl3Z0oyRmpkR2wyWlNjcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQmhZM1JwZG1WSmJraHBaWEpoY21Ob2VUb2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1oyVjBPaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyTXVaWEp5YjNJb1JWSlNMQ0FuWVdOMGFYWmxTVzVJYVdWeVlYSmphSGtuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJR2RsZEVOdmJYQnZibVZ1ZERvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWjJWME9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJNdVpYSnliM0lvUlZKU0xDQW5aMlYwUTI5dGNHOXVaVzUwSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdZV1JrUTI5dGNHOXVaVzUwT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JuWlhRNklHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWXk1bGNuSnZjaWhGVWxJc0lDZGhaR1JEYjIxd2IyNWxiblFuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ0x5OGdWbUZzZFdVZ2RIbHdaWE5jYmlBZ0lDQndjbTkyYVdSbFEyeGxZWEpGY25KdmNpaGpZeXdnZTF4dUlDQWdJQ0FnSUNBdkx5QkJabVpwYm1WVWNtRnVjMlp2Y20xY2JpQWdJQ0FnSUNBZ1lXWm1hVzVsVkhKaGJuTm1iM0p0VFdGclpUb2dKMk5qTGtGbVptbHVaVlJ5WVc1elptOXliUzVqY21WaGRHVW5MRnh1SUNBZ0lDQWdJQ0JoWm1acGJtVlVjbUZ1YzJadmNtMU5ZV3RsU1dSbGJuUnBkSGs2SUNkall5NUJabVpwYm1WVWNtRnVjMlp2Y20wdWFXUmxiblJwZEhrbkxGeHVJQ0FnSUNBZ0lDQmhabVpwYm1WVWNtRnVjMlp2Y20xRGJHOXVaVG9nSjJOakxrRm1abWx1WlZSeVlXNXpabTl5YlM1amJHOXVaU2NzWEc0Z0lDQWdJQ0FnSUdGbVptbHVaVlJ5WVc1elptOXliVU52Ym1OaGREb2dKMk5qTGtGbVptbHVaVlJ5WVc1elptOXliUzVqYjI1allYUW5MRnh1SUNBZ0lDQWdJQ0JoWm1acGJtVlVjbUZ1YzJadmNtMURiMjVqWVhSSmJqb2dKMk5qTGtGbVptbHVaVlJ5WVc1elptOXliUzVqYjI1allYUW5MRnh1SUNBZ0lDQWdJQ0JoWm1acGJtVlVjbUZ1YzJadmNtMUpiblpsY25RNklDZGpZeTVCWm1acGJtVlVjbUZ1YzJadmNtMHVhVzUyWlhKMEp5eGNiaUFnSUNBZ0lDQWdZV1ptYVc1bFZISmhibk5tYjNKdFNXNTJaWEowU1c0NklDZGpZeTVCWm1acGJtVlVjbUZ1YzJadmNtMHVhVzUyWlhKMEp5eGNiaUFnSUNBZ0lDQWdZV1ptYVc1bFZISmhibk5tYjNKdFNXNTJaWEowVDNWME9pQW5ZMk11UVdabWFXNWxWSEpoYm5ObWIzSnRMbWx1ZG1WeWRDY3NYRzRnSUNBZ0lDQWdJR0ZtWm1sdVpWUnlZVzV6Wm05eWJVVnhkV0ZzVkc5VWNtRnVjMlp2Y20wNklDZGpZeTVCWm1acGJtVlVjbUZ1YzJadmNtMHVaWEYxWVd3bkxGeHVJQ0FnSUNBZ0lDQndiMmx1ZEVGd2NHeDVRV1ptYVc1bFZISmhibk5tYjNKdE9pQW5ZMk11UVdabWFXNWxWSEpoYm5ObWIzSnRMblJ5WVc1elptOXliVlpsWXpJbkxGeHVJQ0FnSUNBZ0lDQnphWHBsUVhCd2JIbEJabVpwYm1WVWNtRnVjMlp2Y20wNklDZGpZeTVCWm1acGJtVlVjbUZ1YzJadmNtMHVkSEpoYm5ObWIzSnRVMmw2WlNjc1hHNGdJQ0FnSUNBZ0lISmxZM1JCY0hCc2VVRm1abWx1WlZSeVlXNXpabTl5YlRvZ0oyTmpMa0ZtWm1sdVpWUnlZVzV6Wm05eWJTNTBjbUZ1YzJadmNtMVNaV04wSnl4Y2JpQWdJQ0FnSUNBZ2IySmlRWEJ3YkhsQlptWnBibVZVY21GdWMyWnZjbTA2SUNkall5NUJabVpwYm1WVWNtRnVjMlp2Y20wdWRISmhibk5tYjNKdFQySmlKeXhjYmx4dUlDQWdJQ0FnSUNBdkx5QldaV015WEc0Z0lDQWdJQ0FnSUhCdmFXNTBSWEYxWVd4VWIxQnZhVzUwT2lBblkyTXVWbVZqTWlCbGNYVmhiSE1uTEZ4dVhHNGdJQ0FnSUNBZ0lDOHZJRk5wZW1WY2JpQWdJQ0FnSUNBZ2MybDZaVVZ4ZFdGc1ZHOVRhWHBsT2lBblkyTXVVMmw2WlNCbGNYVmhiSE1uTEZ4dVhHNGdJQ0FnSUNBZ0lDOHZJRkpsWTNSY2JpQWdJQ0FnSUNBZ2NtVmpkRVZ4ZFdGc1ZHOVNaV04wT2lBbmNtVmpkRUV1WlhGMVlXeHpLSEpsWTNSQ0tTY3NYRzRnSUNBZ0lDQWdJSEpsWTNSRGIyNTBZV2x1YzFKbFkzUTZJQ2R5WldOMFFTNWpiMjUwWVdsdWMxSmxZM1FvY21WamRFSXBKeXhjYmlBZ0lDQWdJQ0FnY21WamRFTnZiblJoYVc1elVHOXBiblE2SUNkeVpXTjBMbU52Ym5SaGFXNXpLSFpsWXpJcEp5eGNiaUFnSUNBZ0lDQWdjbVZqZEU5MlpYSnNZWEJ6VW1WamREb2dKM0psWTNSQkxtbHVkR1Z5YzJWamRITW9jbVZqZEVJcEp5eGNiaUFnSUNBZ0lDQWdjbVZqZEVsdWRHVnljMlZqZEhOU1pXTjBPaUFuY21WamRFRXVhVzUwWlhKelpXTjBjeWh5WldOMFFpa25MRnh1SUNBZ0lDQWdJQ0J5WldOMFNXNTBaWEp6WldOMGFXOXVPaUFuY21WamRFRXVhVzUwWlhKelpXTjBhVzl1S0dsdWRHVnljMlZqZEdsdmJpd2djbVZqZEVJcEp5eGNiaUFnSUNBZ0lDQWdjbVZqZEZWdWFXOXVPaUFuY21WamRFRXVkVzVwYjI0b2RXNXBiMjRzSUhKbFkzUkNLU2NzWEc0Z0lDQWdJQ0FnSUhKbFkzUkhaWFJOWVhoWU9pQW5jbVZqZEM1NFRXRjRKeXhjYmlBZ0lDQWdJQ0FnY21WamRFZGxkRTFwWkZnNklDZHlaV04wTG1ObGJuUmxjaTU0Snl4Y2JpQWdJQ0FnSUNBZ2NtVmpkRWRsZEUxcGJsZzZJQ2R5WldOMExuaE5hVzRuTEZ4dUlDQWdJQ0FnSUNCeVpXTjBSMlYwVFdGNFdUb2dKM0psWTNRdWVVMWhlQ2NzWEc0Z0lDQWdJQ0FnSUhKbFkzUkhaWFJOYVdSWk9pQW5jbVZqZEM1alpXNTBaWEl1ZVNjc1hHNGdJQ0FnSUNBZ0lISmxZM1JIWlhSTmFXNVpPaUFuY21WamRDNTVUV2x1Snl4Y2JseHVJQ0FnSUNBZ0lDQXZMeUJEYjJ4dmNseHVJQ0FnSUNBZ0lDQmpiMnh2Y2tWeGRXRnNPaUFuWTI5c2IzSkJMbVZ4ZFdGc2N5aGpiMnh2Y2tJcEp5eGNiaUFnSUNBZ0lDQWdhR1Y0Vkc5RGIyeHZjam9nSjJOdmJHOXlMbVp5YjIxSVJWZ29hR1Y0UTI5c2IzSXBKeXhjYmlBZ0lDQWdJQ0FnWTI5c2IzSlViMGhsZURvZ0oyTnZiRzl5TG5SdlNFVllLQ2tuTEZ4dVhHNGdJQ0FnSUNBZ0lDOHZJRVZ1ZFcxelhHNGdJQ0FnSUNBZ0lGUmxlSFJCYkdsbmJtMWxiblE2SUNkall5NXRZV055Ynk1VVpYaDBRV3hwWjI1dFpXNTBKeXhjYmlBZ0lDQWdJQ0FnVm1WeWRHbGpZV3hVWlhoMFFXeHBaMjV0Wlc1ME9pQW5ZMk11YldGamNtOHVWbVZ5ZEdsallXeFVaWGgwUVd4cFoyNXRaVzUwSnl4Y2JseHVJQ0FnSUNBZ0lDQXZMeUJRYjJsdWRDQkZlSFJsYm5OcGIyNXpYRzRnSUNBZ0lDQWdJSEJPWldjNklDZHdMbTVsWnlncEp5eGNiaUFnSUNBZ0lDQWdjRUZrWkRvZ0ozQXhMbUZrWkNod01pa25MRnh1SUNBZ0lDQWdJQ0J3VTNWaU9pQW5jREV1YzNWaUtIQXlLU2NzWEc0Z0lDQWdJQ0FnSUhCTmRXeDBPaUFuY0M1dGRXd29abUZqZEc5eUtTY3NYRzRnSUNBZ0lDQWdJSEJOYVdSd2IybHVkRG9nSjNBeExtRmtaQ2h3TWlrdWJYVnNLREF1TlNrbkxGeHVJQ0FnSUNBZ0lDQndSRzkwT2lBbmNERXVaRzkwS0hBeUtTY3NYRzRnSUNBZ0lDQWdJSEJEY205emN6b2dKM0F4TG1OeWIzTnpLSEF5S1Njc1hHNGdJQ0FnSUNBZ0lIQlFaWEp3T2lBbmNDNXliM1JoZEdVb0xUa3dJQ29nVFdGMGFDNVFTU0F2SURFNE1Da25MRnh1SUNBZ0lDQWdJQ0J3VWxCbGNuQTZJQ2R3TG5KdmRHRjBaU2c1TUNBcUlFMWhkR2d1VUVrZ0x5QXhPREFwSnl4Y2JpQWdJQ0FnSUNBZ2NGQnliMnBsWTNRNklDZHdNUzV3Y205cVpXTjBLSEF5S1Njc1hHNGdJQ0FnSUNBZ0lIQk1aVzVuZEdoVFVUb2dKM0F1YldGblUzRnlLQ2tuTEZ4dUlDQWdJQ0FnSUNCd1JHbHpkR0Z1WTJWVFVUb2dKM0F4TG5OMVlpaHdNaWt1YldGblUzRnlLQ2tuTEZ4dUlDQWdJQ0FnSUNCd1RHVnVaM1JvT2lBbmNDNXRZV2NvS1Njc1hHNGdJQ0FnSUNBZ0lIQkVhWE4wWVc1alpUb2dKM0F4TG5OMVlpaHdNaWt1YldGbktDa25MRnh1SUNBZ0lDQWdJQ0J3VG05eWJXRnNhWHBsT2lBbmNDNXViM0p0WVd4cGVtVW9LU2NzWEc0Z0lDQWdJQ0FnSUhCR2IzSkJibWRzWlRvZ0oyTmpMbll5S0UxaGRHZ3VZMjl6S0dFcExDQk5ZWFJvTG5OcGJpaGhLU2tuTEZ4dUlDQWdJQ0FnSUNCd1ZHOUJibWRzWlRvZ0owMWhkR2d1WVhSaGJqSW9kaTU1TENCMkxuZ3BKeXhjYmlBZ0lDQWdJQ0FnY0ZwbGNtOUpiam9nSjNBdWVDQTlJSEF1ZVNBOUlEQW5MRnh1SUNBZ0lDQWdJQ0J3U1c0NklDZHdNUzV6WlhRb2NESXBKeXhjYmlBZ0lDQWdJQ0FnY0UxMWJIUkpiam9nSjNBdWJYVnNVMlZzWmlobVlXTjBiM0lwSnl4Y2JpQWdJQ0FnSUNBZ2NGTjFZa2x1T2lBbmNERXVjM1ZpVTJWc1ppaHdNaWtuTEZ4dUlDQWdJQ0FnSUNCd1FXUmtTVzQ2SUNkd01TNWhaR1JUWld4bUtIQXlLU2NzWEc0Z0lDQWdJQ0FnSUhCT2IzSnRZV3hwZW1WSmJqb2dKM0F1Ym05eWJXRnNhWHBsVTJWc1ppZ3BKeXhjYmlBZ0lDQWdJQ0FnY0ZOaGJXVkJjem9nSjNBeExtVnhkV0ZzY3lod01pa25MRnh1SUNBZ0lDQWdJQ0J3UVc1bmJHVTZJQ2QyTVM1aGJtZHNaU2gyTWlrbkxGeHVJQ0FnSUNBZ0lDQndRVzVuYkdWVGFXZHVaV1E2SUNkMk1TNXphV2R1UVc1bmJHVW9kaklwSnl4Y2JpQWdJQ0FnSUNBZ2NGSnZkR0YwWlVKNVFXNW5iR1U2SUNkd0xuSnZkR0YwWlNoeVlXUnBZVzV6S1Njc1hHNGdJQ0FnSUNBZ0lIQkRiMjF3VFhWc2REb2dKM1l4TG1SdmRDaDJNaWtuTEZ4dUlDQWdJQ0FnSUNCd1JuVjZlbmxGY1hWaGJEb2dKM1l4TG1aMWVucDVSWEYxWVd4ektIWXlMQ0IwYjJ4bGNtRnVZMlVwSnl4Y2JpQWdJQ0FnSUNBZ2NFeGxjbkE2SUNkd0xteGxjbkFvWlc1a1VHOXBiblFzSUhKaGRHbHZLU2NzWEc0Z0lDQWdJQ0FnSUhCRGJHRnRjRG9nSjNBdVkyeGhiWEJtS0cxcGJsOXBibU5zZFhOcGRtVXNJRzFoZUY5cGJtTnNkWE5wZG1VcEp5eGNibHh1SUNBZ0lDQWdJQ0J5WVc1a09pQW5UV0YwYUM1eVlXNWtiMjBvS1NBcUlEQjRabVptWm1abUp5eGNiaUFnSUNBZ0lDQWdjbUZ1Wkc5dFRXbHVkWE14Vkc4eE9pQW5LRTFoZEdndWNtRnVaRzl0S0NrZ0xTQXdMalVwSUNvZ01pY3NYRzVjYmlBZ0lDQWdJQ0FnWTI5dWRHRnBibVZ5T2lBblkyTXVaMkZ0WlM1amIyNTBZV2x1WlhJbkxGeHVJQ0FnSUNBZ0lDQmZZMkZ1ZG1Gek9pQW5ZMk11WjJGdFpTNWpZVzUyWVhNbkxGeHVJQ0FnSUNBZ0lDQmZjbVZ1WkdWeVZIbHdaVG9nSjJOakxtZGhiV1V1Y21WdVpHVnlWSGx3WlNjc1hHNWNiaUFnSUNBZ0lDQWdYMmRsZEVWeWNtOXlPaUFuWTJNdVpHVmlkV2N1WjJWMFJYSnliM0luTEZ4dUlDQWdJQ0FnSUNCZmFXNXBkRVJsWW5WblUyVjBkR2x1WnpvZ0oyTmpMbVJsWW5WbkxsOXlaWE5sZEVSbFluVm5VMlYwZEdsdVp5Y3NYRzRnSUNBZ0lDQWdJRVJsWW5WblRXOWtaVG9nSjJOakxtUmxZblZuTGtSbFluVm5UVzlrWlNjc1hHNGdJQ0FnZlN3Z0oyTmpKeWs3WEc0Z0lDQWdiV0Z5YTBGelVtVnRiM1psWkVsdVQySnFaV04wS0dOakxDQmJYRzRnSUNBZ0lDQWdJQ2RpYkdWdVpFWjFibU5FYVhOaFlteGxKeXhjYmx4dUlDQWdJQ0FnSUNBbmNFWnliMjFUYVhwbEp5eGNiaUFnSUNBZ0lDQWdKM0JEYjIxd1QzQW5MRnh1SUNBZ0lDQWdJQ0FuY0VsdWRHVnljMlZqZEZCdmFXNTBKeXhjYmlBZ0lDQWdJQ0FnSjNCVFpXZHRaVzUwU1c1MFpYSnpaV04wSnl4Y2JpQWdJQ0FnSUNBZ0ozQk1hVzVsU1c1MFpYSnpaV04wSnl4Y2JseHVJQ0FnSUNBZ0lDQW5iMkppUVhCd2JIbE5ZWFJ5YVhnbkxGeHVYRzRnSUNBZ0lDQWdJQ2RuWlhSSmJXRm5aVVp2Y20xaGRFSjVSR0YwWVNjc1hHNWNiaUFnSUNBZ0lDQWdKMmx1YVhSRmJtZHBibVVuTEZ4dUlDQWdJRjBzSUNkall5Y3BPMXh1SUNBZ0lHMWhjbXRHZFc1amRHbHZibGRoY201cGJtY29ZMk1zSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdZMk11Y0Z4dUlDQWdJQ0FnSUNCd09pQW5ZMk11ZGpJblhHNGdJQ0FnZlN3Z0oyTmpKeWs3WEc0Z0lDQWdMeThnWTJNdVVtVmpkRnh1SUNBZ0lIQnliM1pwWkdWRGJHVmhja1Z5Y205eUtHTmpMbEpsWTNRc0lIdGNiaUFnSUNBZ0lDQWdZMjl1ZEdGcGJqb2dKM0psWTNSQkxtTnZiblJoYVc1ektISmxZM1JDS1Njc1hHNGdJQ0FnSUNBZ0lIUnlZVzV6Wm05eWJVMWhkRFE2SUNkeVpXTjBMblJ5WVc1elptOXliVTFoZERRb2IzVjBMQ0J0WVhRMEtTZGNiaUFnSUNCOUtUdGNiaUFnSUNBdkx5QmpZeTVEYjJ4dmNseHVJQ0FnSUhCeWIzWnBaR1ZEYkdWaGNrVnljbTl5S0dOakxrTnZiRzl5TENCN1hHNGdJQ0FnSUNBZ0lISm5ZakpvYzNZNklDZGpiMnh2Y2k1MGIwaFRWaWdwSnl4Y2JpQWdJQ0FnSUNBZ2FITjJNbkpuWWpvZ0oyTnZiRzl5TG1aeWIyMUlVMVlvYUN3Z2N5d2dkaWtuWEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0F2THlCdFlXTnlieUJtZFc1amRHbHZibk5jYmlBZ0lDQnFjeTVuWlhRb1kyTXNJQ2RzWlhKd0p5d2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCall5NTNZWEp1U1VRb01UUXdNQ3dnSjJOakxteGxjbkFuTENBblkyTXViV2x6WXk1c1pYSndKeWs3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJqWXk1dGFYTmpMbXhsY25BN1hHNGdJQ0FnZlNrN1hHNGdJQ0FnYW5NdVoyVjBLR05qTENBbmNtRnVaRzl0TUZSdk1TY3NJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ1kyTXVkMkZ5YmtsRUtERTBNREFzSUNkall5NXlZVzVrYjIwd1ZHOHhKeXdnSjAxaGRHZ3VjbUZ1Wkc5dEp5azdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQk5ZWFJvTG5KaGJtUnZiVHRjYmlBZ0lDQjlLVHRjYmlBZ0lDQnFjeTVuWlhRb1kyTXNJQ2RrWldkeVpXVnpWRzlTWVdScFlXNXpKeXdnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQmpZeTUzWVhKdVNVUW9NVFF3TUN3Z0oyTmpMbVJsWjNKbFpYTlViMUpoWkdsaGJuTW5MQ0FuWTJNdWJXbHpZeTVrWldkeVpXVnpWRzlTWVdScFlXNXpKeWs3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJqWXk1dGFYTmpMbVJsWjNKbFpYTlViMUpoWkdsaGJuTTdYRzRnSUNBZ2ZTazdYRzRnSUNBZ2FuTXVaMlYwS0dOakxDQW5jbUZrYVdGdWMxUnZSR1ZuY21WbGN5Y3NJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ1kyTXVkMkZ5YmtsRUtERTBNREFzSUNkall5NXlZV1JwWVc1elZHOUVaV2R5WldWekp5d2dKMk5qTG0xcGMyTXVjbUZrYVdGdWMxUnZSR1ZuY21WbGN5Y3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMk11Yldsell5NXlZV1JwWVc1elZHOUVaV2R5WldWek8xeHVJQ0FnSUgwcE8xeHVJQ0FnSUdwekxtZGxkQ2hqWXl3Z0oyTnNZVzF3Wmljc0lHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnWTJNdWQyRnlia2xFS0RFME1EQXNJQ2RqWXk1amJHRnRjR1luTENBblkyTXViV2x6WXk1amJHRnRjR1luS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOakxtMXBjMk11WTJ4aGJYQm1PMXh1SUNBZ0lIMHBPMXh1SUNBZ0lHcHpMbWRsZENoall5d2dKMk5zWVcxd01ERW5MQ0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lHTmpMbmRoY201SlJDZ3hOREF3TENBblkyTXVZMnhoYlhBd01TY3NJQ2RqWXk1dGFYTmpMbU5zWVcxd01ERW5LVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR05qTG0xcGMyTXVZMnhoYlhBd01UdGNiaUFnSUNCOUtUdGNiaUFnSUNCcWN5NW5aWFFvWTJNc0lDZEpiV0ZuWlVadmNtMWhkQ2NzSUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdZMk11ZDJGeWJrbEVLREUwTURBc0lDZGpZeTVKYldGblpVWnZjbTFoZENjc0lDZGpZeTV0WVdOeWJ5NUpiV0ZuWlVadmNtMWhkQ2NwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWTJNdWJXRmpjbTh1U1cxaFoyVkdiM0p0WVhRN1hHNGdJQ0FnZlNrN1hHNGdJQ0FnYW5NdVoyVjBLR05qTENBblMwVlpKeXdnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQmpZeTUzWVhKdVNVUW9NVFF3TUN3Z0oyTmpMa3RGV1Njc0lDZGpZeTV0WVdOeWJ5NUxSVmtuS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOakxtMWhZM0p2TGt0RldUdGNiaUFnSUNCOUtUdGNiaUFnSUNCcWN5NW5aWFFvWTJNc0lDZEZZWE5wYm1jbkxDQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUdOakxuZGhjbTVKUkNneE5EQXdMQ0FuWTJNdVJXRnphVzVuSnl3Z0oyTmpMbVZoYzJsdVp5Y3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMk11WldGemFXNW5PMXh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdMeThnWTJNdWFYTkRhR2xzWkVOc1lYTnpUMlpjYmlBZ0lDQnFjeTVuWlhRb1kyTXNJQ2RwYzBOb2FXeGtRMnhoYzNOUFppY3NJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ1kyTXVaWEp5YjNKSlJDZ3hOREF3TENBblkyTXVhWE5EYUdsc1pFTnNZWE56VDJZbkxDQW5ZMk11YW5NdWFYTkRhR2xzWkVOc1lYTnpUMlluS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOakxtcHpMbWx6UTJocGJHUkRiR0Z6YzA5bU8xeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ0x5OGdaSEpoWjI5dUlHSnZibVZ6WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJrY21GbmIyNUNiMjVsY3lBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ2FuTXViMkp6YjJ4bGRHVW9aSEpoWjI5dVFtOXVaWE11UTBOR1lXTjBiM0o1TENBblpISmhaMjl1UW05dVpYTXVRME5HWVdOMGIzSjVMbWRsZEVaaFkzUnZjbmtuTENBbloyVjBTVzV6ZEdGdVkyVW5LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJ5Wlc1a1pYSkZibWRwYm1WY2JpQWdJQ0JqWXk1eVpXNWtaWEpsY2k1eVpXNWtaWEpGYm1kcGJtVWdQU0I3WEc0Z0lDQWdJQ0FnSUdkbGRDQm5abmdnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJNdWQyRnlia2xFS0RFME1EQXNJQ2RqWXk1eVpXNWtaWEpsY2k1eVpXNWtaWEpGYm1kcGJtVXVaMlo0Snl3Z0oyTmpMbWRtZUNjcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR05qTG1kbWVEdGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnWjJWMElHMWhkR2dnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJNdWQyRnlia2xFS0RFME1EQXNJQ2RqWXk1eVpXNWtaWEpsY2k1eVpXNWtaWEpGYm1kcGJtVXViV0YwYUNjc0lDZGpZeTUyYldGMGFDY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOakxuWnRZWFJvTzF4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQm5aWFFnU1c1d2RYUkJjM05sYldKc1pYSWdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMk11ZDJGeWJrbEVLREUwTURBc0lDZGpZeTV5Wlc1a1pYSmxjaTV5Wlc1a1pYSkZibWRwYm1VdVNXNXdkWFJCYzNObGJXSnNaWEluTENBblkyTXVjbVZ1WkdWeVpYSXVTVzV3ZFhSQmMzTmxiV0pzWlhJbktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJqWXk1eVpXNWtaWEpsY2k1SmJuQjFkRUZ6YzJWdFlteGxjanRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDA3WEc1OVhHNGlYWDA9Il19