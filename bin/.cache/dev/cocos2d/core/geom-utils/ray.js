(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/geom-utils/ray.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var vec3 = cc.vmath.vec3;
        function ray(ox, oy, oz, dx, dy, dz) {
            this.o = cc.v3(ox, oy, oz);
            this.d = cc.v3(dx, dy, dz);
        }
        ray.create = function (ox, oy, oz, dx, dy, dz) {
            return new ray(ox, oy, oz, dx, dy, dz);
        };
        ray.clone = function (a) {
            return new ray(a.o.x, a.o.y, a.o.z, a.d.x, a.d.y, a.d.z);
        };
        ray.copy = function (out, a) {
            out.o.x = a.o.x;
            out.o.y = a.o.y;
            out.o.z = a.o.z;
            out.d.x = a.d.x;
            out.d.y = a.d.y;
            out.d.z = a.d.z;
            return out;
        };
        ray.set = function (out, ox, oy, oz, dx, dy, dz) {
            out.o.x = ox;
            out.o.y = oy;
            out.o.z = oz;
            out.d.x = dx;
            out.d.y = dy;
            out.d.z = dz;
            return out;
        };
        ray.fromPoints = function (out, origin, lookAt) {
            vec3.copy(out.o, origin);
            vec3.normalize(out.d, vec3.sub(out.d, lookAt, origin));
            return out;
        };
        module.exports = ray;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,