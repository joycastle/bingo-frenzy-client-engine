(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/geom-utils/aabb.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var vec3 = cc.vmath.vec3;
        var mat3 = cc.vmath.mat3;
        var _v3_tmp = vec3.create();
        var _v3_tmp2 = vec3.create();
        var _m3_tmp = mat3.create();
        var transform_extent_m4 = function transform_extent_m4(out, extent, m4) {
            var _m3_tmpm = _m3_tmp.m, m4m = m4.m;
            _m3_tmpm[0] = Math.abs(m4m[0]);
            _m3_tmpm[1] = Math.abs(m4m[1]);
            _m3_tmpm[2] = Math.abs(m4m[2]);
            _m3_tmpm[3] = Math.abs(m4m[4]);
            _m3_tmpm[4] = Math.abs(m4m[5]);
            _m3_tmpm[5] = Math.abs(m4m[6]);
            _m3_tmpm[6] = Math.abs(m4m[8]);
            _m3_tmpm[7] = Math.abs(m4m[9]);
            _m3_tmpm[8] = Math.abs(m4m[10]);
            vec3.transformMat3(out, extent, _m3_tmp);
        };
        function aabb(px, py, pz, w, h, l) {
            this.center = cc.v3(px, py, pz);
            this.halfExtents = cc.v3(w, h, l);
        }
        var proto = aabb.prototype;
        proto.getBoundary = function (minPos, maxPos) {
            vec3.sub(minPos, this.center, this.halfExtents);
            vec3.add(maxPos, this.center, this.halfExtents);
        };
        proto.transform = function (m, pos, rot, scale, out) {
            if (!out)
                out = this;
            vec3.transformMat4(out.center, this.center, m);
            transform_extent_m4(out.halfExtents, this.halfExtents, m);
        };
        aabb.create = function (px, py, pz, w, h, l) {
            return new aabb(px, py, pz, w, h, l);
        };
        aabb.clone = function (a) {
            return new aabb(a.center.x, a.center.y, a.center.z, a.halfExtents.x, a.halfExtents.y, a.halfExtents.z);
        };
        aabb.copy = function (out, a) {
            vec3.copy(out.center, a.center);
            vec3.copy(out.halfExtents, a.halfExtents);
            return out;
        };
        aabb.fromPoints = function (out, minPos, maxPos) {
            vec3.scale(out.center, vec3.add(_v3_tmp, minPos, maxPos), 0.5);
            vec3.scale(out.halfExtents, vec3.sub(_v3_tmp2, maxPos, minPos), 0.5);
            return out;
        };
        aabb.set = function (out, px, py, pz, w, h, l) {
            vec3.set(out.center, px, py, pz);
            vec3.set(out.halfExtents, w, h, l);
            return out;
        };
        module.exports = aabb;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,