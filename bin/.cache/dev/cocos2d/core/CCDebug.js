(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/CCDebug.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var utils = require('./platform/utils');
        var debugInfos = require('../../DebugInfos') || {};
        var ERROR_MAP_URL = 'https://github.com/cocos-creator/engine/blob/master/EngineErrorMap.md';
        var logList = void 0;
        cc.log = cc.warn = cc.error = cc.assert = console.log.bind ? console.log.bind(console) : console.log;
        var resetDebugSetting = function resetDebugSetting(mode) {
            cc.log = cc.warn = cc.error = cc.assert = function () {
            };
            if (mode === DebugMode.NONE)
                return;
            if (mode > DebugMode.ERROR) {
                var logToWebPage = function logToWebPage(msg) {
                    if (!cc.game.canvas)
                        return;
                    if (!logList) {
                        var logDiv = document.createElement('Div');
                        logDiv.setAttribute('id', 'logInfoDiv');
                        logDiv.setAttribute('width', '200');
                        logDiv.setAttribute('height', cc.game.canvas.height);
                        var logDivStyle = logDiv.style;
                        logDivStyle.zIndex = '99999';
                        logDivStyle.position = 'absolute';
                        logDivStyle.top = logDivStyle.left = '0';
                        logList = document.createElement('textarea');
                        logList.setAttribute('rows', '20');
                        logList.setAttribute('cols', '30');
                        logList.setAttribute('disabled', 'true');
                        var logListStyle = logList.style;
                        logListStyle.backgroundColor = 'transparent';
                        logListStyle.borderBottom = '1px solid #cccccc';
                        logListStyle.borderTopWidth = logListStyle.borderLeftWidth = logListStyle.borderRightWidth = '0px';
                        logListStyle.borderTopStyle = logListStyle.borderLeftStyle = logListStyle.borderRightStyle = 'none';
                        logListStyle.padding = '0px';
                        logListStyle.margin = 0;
                        logDiv.appendChild(logList);
                        cc.game.canvas.parentNode.appendChild(logDiv);
                    }
                    logList.value = logList.value + msg + '\r\n';
                    logList.scrollTop = logList.scrollHeight;
                };
                cc.error = function () {
                    logToWebPage('ERROR :  ' + cc.js.formatStr.apply(null, arguments));
                };
                cc.assert = function (cond, msg) {
                    'use strict';
                    if (!cond && msg) {
                        msg = cc.js.formatStr.apply(null, cc.js.shiftArguments.apply(null, arguments));
                        logToWebPage('ASSERT: ' + msg);
                    }
                };
                if (mode !== DebugMode.ERROR_FOR_WEB_PAGE) {
                    cc.warn = function () {
                        logToWebPage('WARN :  ' + cc.js.formatStr.apply(null, arguments));
                    };
                }
                if (mode === DebugMode.INFO_FOR_WEB_PAGE) {
                    cc.log = function () {
                        logToWebPage(cc.js.formatStr.apply(null, arguments));
                    };
                }
            } else if (console && console.log.apply) {
                if (!console.error)
                    console.error = console.log;
                if (!console.warn)
                    console.warn = console.log;
                if (CC_EDITOR) {
                    cc.error = Editor.error;
                } else if (console.error.bind) {
                    cc.error = console.error.bind(console);
                } else {
                    cc.error = CC_JSB || CC_RUNTIME ? console.error : function () {
                        return console.error.apply(console, arguments);
                    };
                }
                cc.assert = function (cond, msg) {
                    if (!cond) {
                        if (msg) {
                            msg = cc.js.formatStr.apply(null, cc.js.shiftArguments.apply(null, arguments));
                        }
                        if (CC_DEV) {
                            debugger;
                        }
                        if (CC_TEST) {
                            ok(false, msg);
                        } else {
                            throw new Error(msg);
                        }
                    }
                };
            }
            if (mode !== DebugMode.ERROR) {
                if (CC_EDITOR) {
                    cc.warn = Editor.warn;
                } else if (console.warn.bind) {
                    cc.warn = console.warn.bind(console);
                } else {
                    cc.warn = CC_JSB || CC_RUNTIME ? console.warn : function () {
                        return console.warn.apply(console, arguments);
                    };
                }
            }
            if (CC_EDITOR) {
                cc.log = Editor.log;
            } else if (mode === DebugMode.INFO) {
                if (CC_JSB || CC_RUNTIME) {
                    if (scriptEngineType === 'JavaScriptCore') {
                        cc.log = function () {
                            return console.log.apply(console, arguments);
                        };
                    } else {
                        cc.log = console.log;
                    }
                } else if (console.log.bind) {
                    cc.log = console.log.bind(console);
                } else {
                    cc.log = function () {
                        return console.log.apply(console, arguments);
                    };
                }
            }
        };
        cc._throw = CC_EDITOR ? Editor.error : function (error) {
            utils.callInNextTick(function () {
                throw error;
            });
        };
        function getTypedFormatter(type) {
            return function () {
                var id = arguments[0];
                var msg = CC_DEBUG ? debugInfos[id] || 'unknown id' : type + ' ' + id + ', please go to ' + ERROR_MAP_URL + '#' + id + ' to see details.';
                if (arguments.length === 1) {
                    return msg;
                } else if (arguments.length === 2) {
                    return CC_DEBUG ? cc.js.formatStr(msg, arguments[1]) : msg + ' Arguments: ' + arguments[1];
                } else {
                    var argsArray = cc.js.shiftArguments.apply(null, arguments);
                    return CC_DEBUG ? cc.js.formatStr.apply(null, [msg].concat(argsArray)) : msg + ' Arguments: ' + argsArray.join(', ');
                }
            };
        }
        var logFormatter = getTypedFormatter('Log');
        cc.logID = function () {
            cc.log(logFormatter.apply(null, arguments));
        };
        var warnFormatter = getTypedFormatter('Warning');
        cc.warnID = function () {
            cc.warn(warnFormatter.apply(null, arguments));
        };
        var errorFormatter = getTypedFormatter('Error');
        cc.errorID = function () {
            cc.error(errorFormatter.apply(null, arguments));
        };
        var assertFormatter = getTypedFormatter('Assert');
        cc.assertID = function (cond) {
            'use strict';
            if (cond) {
                return;
            }
            cc.assert(false, assertFormatter.apply(null, cc.js.shiftArguments.apply(null, arguments)));
        };
        var DebugMode = cc.Enum({
            NONE: 0,
            INFO: 1,
            WARN: 2,
            ERROR: 3,
            INFO_FOR_WEB_PAGE: 4,
            WARN_FOR_WEB_PAGE: 5,
            ERROR_FOR_WEB_PAGE: 6
        });
        module.exports = cc.debug = {
            DebugMode: DebugMode,
            _resetDebugSetting: resetDebugSetting,
            getError: getTypedFormatter('ERROR'),
            isDisplayStats: function isDisplayStats() {
                return cc.profiler ? cc.profiler.isShowingStats() : false;
            },
            setDisplayStats: function setDisplayStats(displayStats) {
                if (cc.profiler) {
                    displayStats ? cc.profiler.showStats() : cc.profiler.hideStats();
                    cc.game.config.showFPS = !!displayStats;
                }
            }
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,