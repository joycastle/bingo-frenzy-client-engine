(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/CCGame.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var EventTarget = require('./event/event-target');
        require('../audio/CCAudioEngine');
        var debug = require('./CCDebug');
        var renderer = require('./renderer/index.js');
        var dynamicAtlasManager = require('../core/renderer/utils/dynamic-atlas/manager');
        var game = {
            EVENT_HIDE: 'game_on_hide',
            EVENT_SHOW: 'game_on_show',
            EVENT_RESTART: 'game_on_restart',
            EVENT_GAME_INITED: 'game_inited',
            EVENT_ENGINE_INITED: 'engine_inited',
            EVENT_RENDERER_INITED: 'engine_inited',
            RENDER_TYPE_CANVAS: 0,
            RENDER_TYPE_WEBGL: 1,
            RENDER_TYPE_OPENGL: 2,
            _persistRootNodes: {},
            _paused: true,
            _configLoaded: false,
            _isCloning: false,
            _prepared: false,
            _rendererInitialized: false,
            _renderContext: null,
            _intervalId: null,
            _lastTime: null,
            _frameTime: null,
            _sceneInfos: [],
            frame: null,
            container: null,
            canvas: null,
            renderType: -1,
            config: null,
            onStart: null,
            setFrameRate: function setFrameRate(frameRate) {
                var config = this.config;
                config.frameRate = frameRate;
                if (this._intervalId)
                    window.cancelAnimFrame(this._intervalId);
                this._intervalId = 0;
                this._paused = true;
                this._setAnimFrame();
                this._runMainLoop();
            },
            getFrameRate: function getFrameRate() {
                return this.config.frameRate;
            },
            step: function step() {
                cc.director.mainLoop();
            },
            pause: function pause() {
                if (this._paused)
                    return;
                this._paused = true;
                if (cc.audioEngine) {
                    cc.audioEngine._break();
                }
                if (this._intervalId)
                    window.cancelAnimFrame(this._intervalId);
                this._intervalId = 0;
            },
            resume: function resume() {
                if (!this._paused)
                    return;
                this._paused = false;
                if (cc.audioEngine) {
                    cc.audioEngine._restore();
                }
                cc.director._resetDeltaTime();
                this._runMainLoop();
            },
            isPaused: function isPaused() {
                return this._paused;
            },
            restart: function restart() {
                cc.director.once(cc.Director.EVENT_AFTER_DRAW, function () {
                    for (var id in game._persistRootNodes) {
                        game.removePersistRootNode(game._persistRootNodes[id]);
                    }
                    cc.director.getScene().destroy();
                    cc.Object._deferredDestroy();
                    if (cc.audioEngine) {
                        cc.audioEngine.uncacheAll();
                    }
                    cc.director.reset();
                    game.pause();
                    cc.AssetLibrary._loadBuiltins(function () {
                        game.onStart();
                        game.emit(game.EVENT_RESTART);
                    });
                });
            },
            end: function end() {
                close();
            },
            _initEngine: function _initEngine() {
                if (this._rendererInitialized) {
                    return;
                }
                this._initRenderer();
                if (!CC_EDITOR) {
                    this._initEvents();
                }
                this.emit(this.EVENT_ENGINE_INITED);
            },
            _prepareFinished: function _prepareFinished(cb) {
                var _this = this;
                if (CC_PREVIEW && window.__modular) {
                    window.__modular.run();
                }
                this._initEngine();
                this._setAnimFrame();
                cc.AssetLibrary._loadBuiltins(function () {
                    console.log('Cocos Creator v' + cc.ENGINE_VERSION);
                    _this._prepared = true;
                    _this._runMainLoop();
                    _this.emit(_this.EVENT_GAME_INITED);
                    if (cb)
                        cb();
                });
            },
            eventTargetOn: EventTarget.prototype.on,
            eventTargetOnce: EventTarget.prototype.once,
            on: function on(type, callback, target) {
                if (this._prepared && type === this.EVENT_ENGINE_INITED || !this._paused && type === this.EVENT_GAME_INITED) {
                    callback.call(target);
                } else {
                    this.eventTargetOn(type, callback, target);
                }
            },
            once: function once(type, callback, target) {
                if (this._prepared && type === this.EVENT_ENGINE_INITED || !this._paused && type === this.EVENT_GAME_INITED) {
                    callback.call(target);
                } else {
                    this.eventTargetOnce(type, callback, target);
                }
            },
            prepare: function prepare(cb) {
                if (this._prepared) {
                    if (cb)
                        cb();
                    return;
                }
                var jsList = this.config.jsList;
                if (jsList && jsList.length > 0) {
                    var self = this;
                    cc.loader.load(jsList, function (err) {
                        if (err)
                            throw new Error(JSON.stringify(err));
                        self._prepareFinished(cb);
                    });
                } else {
                    this._prepareFinished(cb);
                }
            },
            run: function run(config, onStart) {
                this._initConfig(config);
                this.onStart = onStart;
                this.prepare(game.onStart && game.onStart.bind(game));
            },
            addPersistRootNode: function addPersistRootNode(node) {
                if (!cc.Node.isNode(node) || !node.uuid) {
                    cc.warnID(3800);
                    return;
                }
                var id = node.uuid;
                if (!this._persistRootNodes[id]) {
                    var scene = cc.director._scene;
                    if (cc.isValid(scene)) {
                        if (!node.parent) {
                            node.parent = scene;
                        } else if (!(node.parent instanceof cc.Scene)) {
                            cc.warnID(3801);
                            return;
                        } else if (node.parent !== scene) {
                            cc.warnID(3802);
                            return;
                        }
                    }
                    this._persistRootNodes[id] = node;
                    node._persistNode = true;
                }
            },
            removePersistRootNode: function removePersistRootNode(node) {
                var id = node.uuid || '';
                if (node === this._persistRootNodes[id]) {
                    delete this._persistRootNodes[id];
                    node._persistNode = false;
                }
            },
            isPersistRootNode: function isPersistRootNode(node) {
                return node._persistNode;
            },
            _setAnimFrame: function _setAnimFrame() {
                this._lastTime = performance.now();
                var frameRate = game.config.frameRate;
                this._frameTime = 1000 / frameRate;
                if (CC_JSB || CC_RUNTIME) {
                    jsb.setPreferredFramesPerSecond(frameRate);
                    window.requestAnimFrame = window.requestAnimationFrame;
                    window.cancelAnimFrame = window.cancelAnimationFrame;
                } else {
                    if (frameRate !== 60 && frameRate !== 30) {
                        window.requestAnimFrame = this._stTime;
                        window.cancelAnimFrame = this._ctTime;
                    } else {
                        window.requestAnimFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || this._stTime;
                        window.cancelAnimFrame = window.cancelAnimationFrame || window.cancelRequestAnimationFrame || window.msCancelRequestAnimationFrame || window.mozCancelRequestAnimationFrame || window.oCancelRequestAnimationFrame || window.webkitCancelRequestAnimationFrame || window.msCancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.oCancelAnimationFrame || this._ctTime;
                    }
                }
            },
            _stTime: function _stTime(callback) {
                var currTime = performance.now();
                var timeToCall = Math.max(0, game._frameTime - (currTime - game._lastTime));
                var id = window.setTimeout(function () {
                    callback();
                }, timeToCall);
                game._lastTime = currTime + timeToCall;
                return id;
            },
            _ctTime: function _ctTime(id) {
                window.clearTimeout(id);
            },
            _runMainLoop: function _runMainLoop() {
                if (CC_EDITOR) {
                    return;
                }
                if (!this._prepared)
                    return;
                var self = this, _callback, config = self.config, director = cc.director, skip = true, frameRate = config.frameRate;
                debug.setDisplayStats(config.showFPS);
                _callback = function callback(now) {
                    if (!self._paused) {
                        self._intervalId = window.requestAnimFrame(_callback);
                        if (!CC_JSB && !CC_RUNTIME && frameRate === 30) {
                            if (skip = !skip) {
                                return;
                            }
                        }
                        director.mainLoop(now);
                    }
                };
                self._intervalId = window.requestAnimFrame(_callback);
                self._paused = false;
            },
            _initConfig: function _initConfig(config) {
                if (typeof config.debugMode !== 'number') {
                    config.debugMode = 0;
                }
                config.exposeClassName = !!config.exposeClassName;
                if (typeof config.frameRate !== 'number') {
                    config.frameRate = 60;
                }
                var renderMode = config.renderMode;
                if (typeof renderMode !== 'number' || renderMode > 2 || renderMode < 0) {
                    config.renderMode = 0;
                }
                if (typeof config.registerSystemEvent !== 'boolean') {
                    config.registerSystemEvent = true;
                }
                config.showFPS = !!config.showFPS;
                this._sceneInfos = config.scenes || [];
                this.collisionMatrix = config.collisionMatrix || [];
                this.groupList = config.groupList || [];
                debug._resetDebugSetting(config.debugMode);
                this.config = config;
                this._configLoaded = true;
            },
            _determineRenderType: function _determineRenderType() {
                var config = this.config, userRenderMode = parseInt(config.renderMode) || 0;
                this.renderType = this.RENDER_TYPE_CANVAS;
                var supportRender = false;
                if (userRenderMode === 0) {
                    if (cc.sys.capabilities['opengl']) {
                        this.renderType = this.RENDER_TYPE_WEBGL;
                        supportRender = true;
                    } else if (cc.sys.capabilities['canvas']) {
                        this.renderType = this.RENDER_TYPE_CANVAS;
                        supportRender = true;
                    }
                } else if (userRenderMode === 1 && cc.sys.capabilities['canvas']) {
                    this.renderType = this.RENDER_TYPE_CANVAS;
                    supportRender = true;
                } else if (userRenderMode === 2 && cc.sys.capabilities['opengl']) {
                    this.renderType = this.RENDER_TYPE_WEBGL;
                    supportRender = true;
                }
                if (!supportRender) {
                    throw new Error(debug.getError(3820, userRenderMode));
                }
            },
            _initRenderer: function _initRenderer() {
                if (this._rendererInitialized)
                    return;
                var el = this.config.id, width = void 0, height = void 0, localCanvas = void 0, localContainer = void 0;
                if (CC_JSB || CC_RUNTIME) {
                    this.container = localContainer = document.createElement('DIV');
                    this.frame = localContainer.parentNode === document.body ? document.documentElement : localContainer.parentNode;
                    localCanvas = window.__canvas;
                    this.canvas = localCanvas;
                } else {
                    var addClass = function addClass(element, name) {
                        var hasClass = (' ' + element.className + ' ').indexOf(' ' + name + ' ') > -1;
                        if (!hasClass) {
                            if (element.className) {
                                element.className += ' ';
                            }
                            element.className += name;
                        }
                    };
                    var element = el instanceof HTMLElement ? el : document.querySelector(el) || document.querySelector('#' + el);
                    if (element.tagName === 'CANVAS') {
                        width = element.width;
                        height = element.height;
                        this.canvas = localCanvas = element;
                        this.container = localContainer = document.createElement('DIV');
                        if (localCanvas.parentNode)
                            localCanvas.parentNode.insertBefore(localContainer, localCanvas);
                    } else {
                        if (element.tagName !== 'DIV') {
                            cc.warnID(3819);
                        }
                        width = element.clientWidth;
                        height = element.clientHeight;
                        this.canvas = localCanvas = document.createElement('CANVAS');
                        this.container = localContainer = document.createElement('DIV');
                        element.appendChild(localContainer);
                    }
                    localContainer.setAttribute('id', 'Cocos2dGameContainer');
                    localContainer.appendChild(localCanvas);
                    this.frame = localContainer.parentNode === document.body ? document.documentElement : localContainer.parentNode;
                    addClass(localCanvas, 'gameCanvas');
                    localCanvas.setAttribute('width', width || 480);
                    localCanvas.setAttribute('height', height || 320);
                    localCanvas.setAttribute('tabindex', 99);
                }
                this._determineRenderType();
                if (this.renderType === this.RENDER_TYPE_WEBGL) {
                    var opts = {
                        'stencil': true,
                        'antialias': cc.macro.ENABLE_WEBGL_ANTIALIAS,
                        'alpha': cc.macro.ENABLE_TRANSPARENT_CANVAS
                    };
                    renderer.initWebGL(localCanvas, opts);
                    this._renderContext = renderer.device._gl;
                    if (!cc.macro.CLEANUP_IMAGE_CACHE && dynamicAtlasManager) {
                        dynamicAtlasManager.enabled = true;
                    }
                }
                if (!this._renderContext) {
                    this.renderType = this.RENDER_TYPE_CANVAS;
                    renderer.initCanvas(localCanvas);
                    this._renderContext = renderer.device._ctx;
                }
                this.canvas.oncontextmenu = function () {
                    if (!cc._isContextMenuEnable)
                        return false;
                };
                this._rendererInitialized = true;
            },
            _initEvents: function _initEvents() {
                var win = window, hiddenPropName;
                if (this.config.registerSystemEvent)
                    _cc.inputManager.registerSystemEvent(this.canvas);
                if (typeof document.hidden !== 'undefined') {
                    hiddenPropName = 'hidden';
                } else if (typeof document.mozHidden !== 'undefined') {
                    hiddenPropName = 'mozHidden';
                } else if (typeof document.msHidden !== 'undefined') {
                    hiddenPropName = 'msHidden';
                } else if (typeof document.webkitHidden !== 'undefined') {
                    hiddenPropName = 'webkitHidden';
                }
                var hidden = false;
                function onHidden() {
                    if (!hidden) {
                        hidden = true;
                        game.emit(game.EVENT_HIDE);
                    }
                }
                function onShown(arg0, arg1, arg2, arg3, arg4) {
                    if (hidden) {
                        hidden = false;
                        game.emit(game.EVENT_SHOW, arg0, arg1, arg2, arg3, arg4);
                    }
                }
                if (hiddenPropName) {
                    var changeList = [
                        'visibilitychange',
                        'mozvisibilitychange',
                        'msvisibilitychange',
                        'webkitvisibilitychange',
                        'qbrowserVisibilityChange'
                    ];
                    for (var i = 0; i < changeList.length; i++) {
                        document.addEventListener(changeList[i], function (event) {
                            var visible = document[hiddenPropName];
                            visible = visible || event['hidden'];
                            if (visible)
                                onHidden();
                            else
                                onShown();
                        });
                    }
                } else {
                    win.addEventListener('blur', onHidden);
                    win.addEventListener('focus', onShown);
                }
                if (navigator.userAgent.indexOf('MicroMessenger') > -1) {
                    win.onfocus = onShown;
                }
                if ('onpageshow' in window && 'onpagehide' in window) {
                    win.addEventListener('pagehide', onHidden);
                    win.addEventListener('pageshow', onShown);
                    document.addEventListener('pagehide', onHidden);
                    document.addEventListener('pageshow', onShown);
                }
                this.on(game.EVENT_HIDE, function () {
                    game.pause();
                });
                this.on(game.EVENT_SHOW, function () {
                    game.resume();
                });
            }
        };
        EventTarget.call(game);
        cc.js.addon(game, EventTarget.prototype);
        cc.game = module.exports = game;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,