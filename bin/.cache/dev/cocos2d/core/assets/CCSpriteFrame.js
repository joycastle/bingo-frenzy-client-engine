(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/assets/CCSpriteFrame.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var EventTarget = require('../event/event-target');
        var textureUtil = require('../utils/texture-util');
        var INSET_LEFT = 0;
        var INSET_TOP = 1;
        var INSET_RIGHT = 2;
        var INSET_BOTTOM = 3;
        var temp_uvs = [
            {
                u: 0,
                v: 0
            },
            {
                u: 0,
                v: 0
            },
            {
                u: 0,
                v: 0
            },
            {
                u: 0,
                v: 0
            }
        ];
        var SpriteFrame = cc.Class({
            name: 'cc.SpriteFrame',
            extends: require('../assets/CCAsset'),
            mixins: [EventTarget],
            properties: {
                _textureSetter: {
                    set: function set(texture) {
                        if (texture) {
                            if (CC_EDITOR && Editor.isBuilder) {
                                this._texture = texture;
                                return;
                            }
                            if (this._texture !== texture) {
                                this._refreshTexture(texture);
                            }
                            this._textureFilename = texture.url;
                        }
                    }
                },
                insetTop: {
                    get: function get() {
                        return this._capInsets[INSET_TOP];
                    },
                    set: function set(value) {
                        this._capInsets[INSET_TOP] = value;
                        if (this._texture) {
                            this._calculateSlicedUV();
                        }
                    }
                },
                insetBottom: {
                    get: function get() {
                        return this._capInsets[INSET_BOTTOM];
                    },
                    set: function set(value) {
                        this._capInsets[INSET_BOTTOM] = value;
                        if (this._texture) {
                            this._calculateSlicedUV();
                        }
                    }
                },
                insetLeft: {
                    get: function get() {
                        return this._capInsets[INSET_LEFT];
                    },
                    set: function set(value) {
                        this._capInsets[INSET_LEFT] = value;
                        if (this._texture) {
                            this._calculateSlicedUV();
                        }
                    }
                },
                insetRight: {
                    get: function get() {
                        return this._capInsets[INSET_RIGHT];
                    },
                    set: function set(value) {
                        this._capInsets[INSET_RIGHT] = value;
                        if (this._texture) {
                            this._calculateSlicedUV();
                        }
                    }
                }
            },
            ctor: function ctor() {
                EventTarget.call(this);
                var filename = arguments[0];
                var rect = arguments[1];
                var rotated = arguments[2];
                var offset = arguments[3];
                var originalSize = arguments[4];
                this._rect = null;
                this.uv = [];
                this._texture = null;
                this._original = null;
                this._offset = null;
                this._originalSize = null;
                this._rotated = false;
                this.vertices = null;
                this._capInsets = [
                    0,
                    0,
                    0,
                    0
                ];
                this.uvSliced = [];
                this._textureFilename = '';
                if (CC_EDITOR) {
                    this._atlasUuid = '';
                }
                if (filename !== undefined) {
                    this.setTexture(filename, rect, rotated, offset, originalSize);
                } else {
                }
            },
            textureLoaded: function textureLoaded() {
                return this._texture && this._texture.loaded;
            },
            isRotated: function isRotated() {
                return this._rotated;
            },
            setRotated: function setRotated(bRotated) {
                this._rotated = bRotated;
                if (this._texture)
                    this._calculateUV();
            },
            getRect: function getRect() {
                return cc.rect(this._rect);
            },
            setRect: function setRect(rect) {
                this._rect = rect;
                if (this._texture)
                    this._calculateUV();
            },
            getOriginalSize: function getOriginalSize() {
                return cc.size(this._originalSize);
            },
            setOriginalSize: function setOriginalSize(size) {
                if (!this._originalSize) {
                    this._originalSize = cc.size(size);
                } else {
                    this._originalSize.width = size.width;
                    this._originalSize.height = size.height;
                }
            },
            getTexture: function getTexture() {
                return this._texture;
            },
            _textureLoadedCallback: function _textureLoadedCallback() {
                var self = this;
                var texture = this._texture;
                if (!texture) {
                    return;
                }
                var w = texture.width, h = texture.height;
                if (self._rect) {
                    self._checkRect(self._texture);
                } else {
                    self._rect = cc.rect(0, 0, w, h);
                }
                if (!self._originalSize) {
                    self.setOriginalSize(cc.size(w, h));
                }
                if (!self._offset) {
                    self.setOffset(cc.v2(0, 0));
                }
                self._calculateUV();
                self.emit('load');
            },
            _refreshTexture: function _refreshTexture(texture) {
                this._texture = texture;
                if (texture.loaded) {
                    this._textureLoadedCallback();
                } else {
                    texture.once('load', this._textureLoadedCallback, this);
                }
            },
            getOffset: function getOffset() {
                return cc.v2(this._offset);
            },
            setOffset: function setOffset(offsets) {
                this._offset = cc.v2(offsets);
            },
            clone: function clone() {
                return new SpriteFrame(this._texture || this._textureFilename, this._rect, this._rotated, this._offset, this._originalSize);
            },
            setTexture: function setTexture(textureOrTextureFile, rect, rotated, offset, originalSize) {
                if (rect) {
                    this._rect = rect;
                } else {
                    this._rect = null;
                }
                if (offset) {
                    this.setOffset(offset);
                } else {
                    this._offset = null;
                }
                if (originalSize) {
                    this.setOriginalSize(originalSize);
                } else {
                    this._originalSize = null;
                }
                this._rotated = rotated || false;
                var texture = textureOrTextureFile;
                if (typeof texture === 'string' && texture) {
                    this._textureFilename = texture;
                    this._loadTexture();
                }
                if (texture instanceof cc.Texture2D && this._texture !== texture) {
                    this._refreshTexture(texture);
                }
                return true;
            },
            _loadTexture: function _loadTexture() {
                if (this._textureFilename) {
                    var texture = textureUtil.loadImage(this._textureFilename);
                    this._refreshTexture(texture);
                }
            },
            ensureLoadTexture: function ensureLoadTexture() {
                if (this._texture) {
                    if (!this._texture.loaded) {
                        this._refreshTexture(this._texture);
                        textureUtil.postLoadTexture(this._texture);
                    }
                } else if (this._textureFilename) {
                    this._loadTexture();
                }
            },
            _checkRect: function _checkRect(texture) {
                var rect = this._rect;
                var maxX = rect.x, maxY = rect.y;
                if (this._rotated) {
                    maxX += rect.height;
                    maxY += rect.width;
                } else {
                    maxX += rect.width;
                    maxY += rect.height;
                }
                if (maxX > texture.width) {
                    cc.errorID(3300, texture.url + '/' + this.name, maxX, texture.width);
                }
                if (maxY > texture.height) {
                    cc.errorID(3400, texture.url + '/' + this.name, maxY, texture.height);
                }
            },
            _calculateSlicedUV: function _calculateSlicedUV() {
                var rect = this._rect;
                var atlasWidth = this._texture.width;
                var atlasHeight = this._texture.height;
                var leftWidth = this._capInsets[INSET_LEFT];
                var rightWidth = this._capInsets[INSET_RIGHT];
                var centerWidth = rect.width - leftWidth - rightWidth;
                var topHeight = this._capInsets[INSET_TOP];
                var bottomHeight = this._capInsets[INSET_BOTTOM];
                var centerHeight = rect.height - topHeight - bottomHeight;
                var uvSliced = this.uvSliced;
                uvSliced.length = 0;
                if (this._rotated) {
                    temp_uvs[0].u = rect.x / atlasWidth;
                    temp_uvs[1].u = (rect.x + bottomHeight) / atlasWidth;
                    temp_uvs[2].u = (rect.x + bottomHeight + centerHeight) / atlasWidth;
                    temp_uvs[3].u = (rect.x + rect.height) / atlasWidth;
                    temp_uvs[3].v = rect.y / atlasHeight;
                    temp_uvs[2].v = (rect.y + leftWidth) / atlasHeight;
                    temp_uvs[1].v = (rect.y + leftWidth + centerWidth) / atlasHeight;
                    temp_uvs[0].v = (rect.y + rect.width) / atlasHeight;
                    for (var row = 0; row < 4; ++row) {
                        var rowD = temp_uvs[row];
                        for (var col = 0; col < 4; ++col) {
                            var colD = temp_uvs[3 - col];
                            uvSliced.push({
                                u: rowD.u,
                                v: colD.v
                            });
                        }
                    }
                } else {
                    temp_uvs[0].u = rect.x / atlasWidth;
                    temp_uvs[1].u = (rect.x + leftWidth) / atlasWidth;
                    temp_uvs[2].u = (rect.x + leftWidth + centerWidth) / atlasWidth;
                    temp_uvs[3].u = (rect.x + rect.width) / atlasWidth;
                    temp_uvs[3].v = rect.y / atlasHeight;
                    temp_uvs[2].v = (rect.y + topHeight) / atlasHeight;
                    temp_uvs[1].v = (rect.y + topHeight + centerHeight) / atlasHeight;
                    temp_uvs[0].v = (rect.y + rect.height) / atlasHeight;
                    for (var _row = 0; _row < 4; ++_row) {
                        var _rowD = temp_uvs[_row];
                        for (var _col = 0; _col < 4; ++_col) {
                            var _colD = temp_uvs[_col];
                            uvSliced.push({
                                u: _colD.u,
                                v: _rowD.v
                            });
                        }
                    }
                }
            },
            _setDynamicAtlasFrame: function _setDynamicAtlasFrame(frame) {
                if (!frame)
                    return;
                this._original = {
                    _texture: this._texture,
                    _x: this._rect.x,
                    _y: this._rect.y
                };
                this._texture = frame.texture;
                this._rect.x = frame.x;
                this._rect.y = frame.y;
                this._calculateUV();
            },
            _resetDynamicAtlasFrame: function _resetDynamicAtlasFrame() {
                if (!this._original)
                    return;
                this._rect.x = this._original._x;
                this._rect.y = this._original._y;
                this._texture = this._original._texture;
                this._original = null;
                this._calculateUV();
            },
            _calculateUV: function _calculateUV() {
                var rect = this._rect, texture = this._texture, uv = this.uv, texw = texture.width, texh = texture.height;
                if (this._rotated) {
                    var l = texw === 0 ? 0 : rect.x / texw;
                    var r = texw === 0 ? 0 : (rect.x + rect.height) / texw;
                    var b = texh === 0 ? 0 : (rect.y + rect.width) / texh;
                    var t = texh === 0 ? 0 : rect.y / texh;
                    uv[0] = l;
                    uv[1] = t;
                    uv[2] = l;
                    uv[3] = b;
                    uv[4] = r;
                    uv[5] = t;
                    uv[6] = r;
                    uv[7] = b;
                } else {
                    var _l = texw === 0 ? 0 : rect.x / texw;
                    var _r = texw === 0 ? 0 : (rect.x + rect.width) / texw;
                    var _b = texh === 0 ? 0 : (rect.y + rect.height) / texh;
                    var _t = texh === 0 ? 0 : rect.y / texh;
                    uv[0] = _l;
                    uv[1] = _b;
                    uv[2] = _r;
                    uv[3] = _b;
                    uv[4] = _l;
                    uv[5] = _t;
                    uv[6] = _r;
                    uv[7] = _t;
                }
                var vertices = this.vertices;
                if (vertices) {
                    vertices.nu.length = 0;
                    vertices.nv.length = 0;
                    for (var i = 0; i < vertices.u.length; i++) {
                        vertices.nu[i] = vertices.u[i] / texw;
                        vertices.nv[i] = vertices.v[i] / texh;
                    }
                }
                this._calculateSlicedUV();
            },
            _serialize: CC_EDITOR && function (exporting) {
                var rect = this._rect;
                var offset = this._offset;
                var size = this._originalSize;
                var uuid = void 0;
                var texture = this._texture;
                if (texture) {
                    uuid = texture._uuid;
                }
                if (!uuid) {
                    var url = this._textureFilename;
                    if (url) {
                        uuid = Editor.Utils.UuidCache.urlToUuid(url);
                    }
                }
                if (uuid && exporting) {
                    uuid = Editor.Utils.UuidUtils.compressUuid(uuid, true);
                }
                var vertices = void 0;
                if (this.vertices) {
                    vertices = {
                        triangles: this.vertices.triangles,
                        x: this.vertices.x,
                        y: this.vertices.y,
                        u: this.vertices.u,
                        v: this.vertices.v
                    };
                }
                return {
                    name: this._name,
                    texture: uuid || undefined,
                    atlas: exporting ? undefined : this._atlasUuid,
                    rect: rect ? [
                        rect.x,
                        rect.y,
                        rect.width,
                        rect.height
                    ] : undefined,
                    offset: offset ? [
                        offset.x,
                        offset.y
                    ] : undefined,
                    originalSize: size ? [
                        size.width,
                        size.height
                    ] : undefined,
                    rotated: this._rotated ? 1 : undefined,
                    capInsets: this._capInsets,
                    vertices: vertices
                };
            },
            _deserialize: function _deserialize(data, handle) {
                var rect = data.rect;
                if (rect) {
                    this._rect = new cc.Rect(rect[0], rect[1], rect[2], rect[3]);
                }
                if (data.offset) {
                    this.setOffset(new cc.Vec2(data.offset[0], data.offset[1]));
                }
                if (data.originalSize) {
                    this.setOriginalSize(new cc.Size(data.originalSize[0], data.originalSize[1]));
                }
                this._rotated = data.rotated === 1;
                this._name = data.name;
                var capInsets = data.capInsets;
                if (capInsets) {
                    this._capInsets[INSET_LEFT] = capInsets[INSET_LEFT];
                    this._capInsets[INSET_TOP] = capInsets[INSET_TOP];
                    this._capInsets[INSET_RIGHT] = capInsets[INSET_RIGHT];
                    this._capInsets[INSET_BOTTOM] = capInsets[INSET_BOTTOM];
                }
                if (CC_EDITOR) {
                    this._atlasUuid = data.atlas;
                }
                this.vertices = data.vertices;
                if (this.vertices) {
                    this.vertices.nu = [];
                    this.vertices.nv = [];
                }
                var textureUuid = data.texture;
                if (textureUuid) {
                    handle.result.push(this, '_textureSetter', textureUuid);
                }
            }
        });
        var proto = SpriteFrame.prototype;
        proto.copyWithZone = proto.clone;
        proto.copy = proto.clone;
        proto.initWithTexture = proto.setTexture;
        cc.SpriteFrame = SpriteFrame;
        module.exports = SpriteFrame;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,