(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/assets/CCTTFFont.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Font = require('./CCFont');
        var TTFFont = cc.Class({
            name: 'cc.TTFFont',
            extends: Font,
            properties: {
                _fontFamily: null,
                _nativeAsset: {
                    type: cc.String,
                    get: function get() {
                        return this._fontFamily;
                    },
                    set: function set(value) {
                        this._fontFamily = value || 'Arial';
                    },
                    override: true
                }
            }
        });
        cc.TTFFont = module.exports = TTFFont;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,