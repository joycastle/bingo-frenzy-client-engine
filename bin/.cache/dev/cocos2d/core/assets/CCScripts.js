(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/assets/CCScripts.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Script = cc.Class({
            name: 'cc.Script',
            extends: cc.Asset
        });
        cc._Script = Script;
        var JavaScript = cc.Class({
            name: 'cc.JavaScript',
            extends: Script
        });
        cc._JavaScript = JavaScript;
        var CoffeeScript = cc.Class({
            name: 'cc.CoffeeScript',
            extends: Script
        });
        cc._CoffeeScript = CoffeeScript;
        var TypeScript = cc.Class({
            name: 'cc.TypeScript',
            extends: Script
        });
        cc._TypeScript = TypeScript;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,