(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/assets/CCLabelAtlas.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var LabelAtlas = cc.Class({
            name: 'cc.LabelAtlas',
            extends: cc.BitmapFont,
            onLoad: function onLoad() {
                if (!this.spriteFrame) {
                    cc.warnID(9100, this.name);
                    return;
                }
                if (!this._fntConfig) {
                    cc.warnID(9101, this.name);
                    return;
                }
                this._super();
            }
        });
        cc.LabelAtlas = LabelAtlas;
        module.exports = LabelAtlas;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDTGFiZWxBdGxhcy5qcyIsIi9Vc2Vycy9TaGFyZWQvYmluZ29fZnJlbnp5L2VuZ2luZS9jb2NvczJkL2NvcmUvYXNzZXRzL0NDTGFiZWxBdGxhcy5qcyJdLCJuYW1lcyI6WyJMYWJlbEF0bGFzIiwiY2MiLCJDbGFzcyIsIm5hbWUiLCJleHRlbmRzIiwiQml0bWFwRm9udCIsIm9uTG9hZCIsInNwcml0ZUZyYW1lIiwid2FybklEIiwiX2ZudENvbmZpZyIsIl9zdXBlciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7SUFBQSxJQUFBLE9BQUEsR0FBQSxPQUFBLE9BQUEsS0FBQSxXQUFBLElBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQTs7Ozs7Ozs7Ozs7OztRQW9DQSxJQUFJQSxVQUFBQSxHQUFhQyxFQUFBQSxDQUFHQyxLQUFIRCxDQUFTO0FBQUEsWUFDdEJFLElBQUFBLEVBQU0sZUFEZ0I7QUFBQSxZQUV0QkMsT0FBQUEsRUFBU0gsRUFBQUEsQ0FBR0ksVUFGVTtBQUFBLFlBSXRCQyxNQUFBQSxFQUpzQixTQUFBLE1BQUEsR0FJWjtBQUFBLGdCQUNOLElBQUksQ0FBQyxLQUFLQyxXQUFWLEVBQXVCO0FBQUEsb0JBQ25CTixFQUFBQSxDQUFHTyxNQUFIUCxDQUFVLElBQVZBLEVBQWdCLEtBQUtFLElBQXJCRixFQURtQjtBQUFBLG9CQUVuQixPQUZtQjtBQUFBLGlCQURqQjtBQUFBLGdCQUtOLElBQUksQ0FBQyxLQUFLUSxVQUFWLEVBQXNCO0FBQUEsb0JBQ2xCUixFQUFBQSxDQUFHTyxNQUFIUCxDQUFVLElBQVZBLEVBQWdCLEtBQUtFLElBQXJCRixFQURrQjtBQUFBLG9CQUVsQixPQUZrQjtBQUFBLGlCQUxoQjtBQUFBLGdCQVNOLEtBQUtTLE1BQUwsR0FUTTtBQUFBLGFBSlk7QUFBQSxTQUFUVCxDQUFqQjtRQWtCQUEsRUFBQUEsQ0FBR0QsVUFBSEMsR0FBZ0JELFVBQWhCQztRQUNBVSxNQUFBQSxDQUFPQyxPQUFQRCxHQUFpQlgsVUFBakJXIiwiZmlsZSI6IkNDTGFiZWxBdGxhcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gQ29weXJpZ2h0IChjKSAyMDEzLTIwMTYgQ2h1a29uZyBUZWNobm9sb2dpZXMgSW5jLlxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxuXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xuXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxuICB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcbiAgbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xuICB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXG4gIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxuXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuLyoqXG4gKiBAbW9kdWxlIGNjXG4gKi9cbi8qKlxuICogISNlbiBDbGFzcyBmb3IgTGFiZWxBdGxhcyBoYW5kbGluZy5cbiAqICEjemgg6Im65pyv5pWw5a2X5a2X5L2T6LWE5rqQ57G744CCXG4gKiBAY2xhc3MgTGFiZWxBdGxhc1xuICogQGV4dGVuZHMgQml0bWFwRm9udFxuICpcbiAqL1xudmFyIExhYmVsQXRsYXMgPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLkxhYmVsQXRsYXMnLFxuICAgIGV4dGVuZHM6IGNjLkJpdG1hcEZvbnQsXG5cbiAgICBvbkxvYWQgKCkge1xuICAgICAgICBpZiAoIXRoaXMuc3ByaXRlRnJhbWUpIHtcbiAgICAgICAgICAgIGNjLndhcm5JRCg5MTAwLCB0aGlzLm5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fZm50Q29uZmlnKSB7XG4gICAgICAgICAgICBjYy53YXJuSUQoOTEwMSwgdGhpcy5uYW1lKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zdXBlcigpO1xuICAgIH1cblxufSk7XG5cbmNjLkxhYmVsQXRsYXMgPSBMYWJlbEF0bGFzO1xubW9kdWxlLmV4cG9ydHMgPSBMYWJlbEF0bGFzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAxMy0yMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiAgd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbi8qKlxuICogQG1vZHVsZSBjY1xuICovXG4vKipcbiAqICEjZW4gQ2xhc3MgZm9yIExhYmVsQXRsYXMgaGFuZGxpbmcuXG4gKiAhI3poIOiJuuacr+aVsOWtl+Wtl+S9k+i1hOa6kOexu+OAglxuICogQGNsYXNzIExhYmVsQXRsYXNcbiAqIEBleHRlbmRzIEJpdG1hcEZvbnRcbiAqXG4gKi9cbnZhciBMYWJlbEF0bGFzID0gY2MuQ2xhc3Moe1xuICBuYW1lOiAnY2MuTGFiZWxBdGxhcycsXG4gIGV4dGVuZHM6IGNjLkJpdG1hcEZvbnQsXG5cbiAgb25Mb2FkOiBmdW5jdGlvbiBvbkxvYWQoKSB7XG4gICAgaWYgKCF0aGlzLnNwcml0ZUZyYW1lKSB7XG4gICAgICBjYy53YXJuSUQoOTEwMCwgdGhpcy5uYW1lKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCF0aGlzLl9mbnRDb25maWcpIHtcbiAgICAgIGNjLndhcm5JRCg5MTAxLCB0aGlzLm5hbWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9zdXBlcigpO1xuICB9XG59KTtcblxuY2MuTGFiZWxBdGxhcyA9IExhYmVsQXRsYXM7XG5tb2R1bGUuZXhwb3J0cyA9IExhYmVsQXRsYXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa05EVEdGaVpXeEJkR3hoY3k1cWN5SmRMQ0p1WVcxbGN5STZXeUpNWVdKbGJFRjBiR0Z6SWl3aVkyTWlMQ0pEYkdGemN5SXNJbTVoYldVaUxDSmxlSFJsYm1Seklpd2lRbWwwYldGd1JtOXVkQ0lzSW05dVRHOWhaQ0lzSW5Od2NtbDBaVVp5WVcxbElpd2lkMkZ5YmtsRUlpd2lYMlp1ZEVOdmJtWnBaeUlzSWw5emRYQmxjaUlzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQk1FSkJPenM3UVVGSFFUczdPenM3T3p0QlFVOUJMRWxCUVVsQkxHRkJRV0ZETEVkQlFVZERMRXRCUVVnc1EwRkJVenRCUVVOMFFrTXNVVUZCVFN4bFFVUm5RanRCUVVWMFFrTXNWMEZCVTBnc1IwRkJSMGtzVlVGR1ZUczdRVUZKZEVKRExGRkJTbk5DTEc5Q1FVbGFPMEZCUTA0c1VVRkJTU3hEUVVGRExFdEJRVXRETEZkQlFWWXNSVUZCZFVJN1FVRkRia0pPTEZOQlFVZFBMRTFCUVVnc1EwRkJWU3hKUVVGV0xFVkJRV2RDTEV0QlFVdE1MRWxCUVhKQ08wRkJRMEU3UVVGRFNEdEJRVU5FTEZGQlFVa3NRMEZCUXl4TFFVRkxUU3hWUVVGV0xFVkJRWE5DTzBGQlEyeENVaXhUUVVGSFR5eE5RVUZJTEVOQlFWVXNTVUZCVml4RlFVRm5RaXhMUVVGTFRDeEpRVUZ5UWp0QlFVTkJPMEZCUTBnN1FVRkRSQ3hUUVVGTFR5eE5RVUZNTzBGQlEwZzdRVUZrY1VJc1EwRkJWQ3hEUVVGcVFqczdRVUZyUWtGVUxFZEJRVWRFTEZWQlFVZ3NSMEZCWjBKQkxGVkJRV2hDTzBGQlEwRlhMRTlCUVU5RExFOUJRVkFzUjBGQmFVSmFMRlZCUVdwQ0lpd2labWxzWlNJNklrTkRUR0ZpWld4QmRHeGhjeTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z1EyOXdlWEpwWjJoMElDaGpLU0F5TURFekxUSXdNVFlnUTJoMWEyOXVaeUJVWldOb2JtOXNiMmRwWlhNZ1NXNWpMbHh1SUVOdmNIbHlhV2RvZENBb1l5a2dNakF4TnkweU1ERTRJRmhwWVcxbGJpQlpZV3BwSUZOdlpuUjNZWEpsSUVOdkxpd2dUSFJrTGx4dVhHNGdhSFIwY0hNNkx5OTNkM2N1WTI5amIzTXVZMjl0TDF4dVhHNGdVR1Z5YldsemMybHZiaUJwY3lCb1pYSmxZbmtnWjNKaGJuUmxaQ3dnWm5KbFpTQnZaaUJqYUdGeVoyVXNJSFJ2SUdGdWVTQndaWEp6YjI0Z2IySjBZV2x1YVc1bklHRWdZMjl3ZVZ4dUlHOW1JSFJvYVhNZ2MyOW1kSGRoY21VZ1lXNWtJR0Z6YzI5amFXRjBaV1FnWlc1bmFXNWxJSE52ZFhKalpTQmpiMlJsSUNoMGFHVWdYQ0pUYjJaMGQyRnlaVndpS1N3Z1lTQnNhVzFwZEdWa0xGeHVJQ0IzYjNKc1pIZHBaR1VzSUhKdmVXRnNkSGt0Wm5KbFpTd2dibTl1TFdGemMybG5ibUZpYkdVc0lISmxkbTlqWVdKc1pTQmhibVFnYm05dUxXVjRZMngxYzJsMlpTQnNhV05sYm5ObFhHNGdkRzhnZFhObElFTnZZMjl6SUVOeVpXRjBiM0lnYzI5c1pXeDVJSFJ2SUdSbGRtVnNiM0FnWjJGdFpYTWdiMjRnZVc5MWNpQjBZWEpuWlhRZ2NHeGhkR1p2Y20xekxpQlpiM1VnYzJoaGJHeGNiaUFnYm05MElIVnpaU0JEYjJOdmN5QkRjbVZoZEc5eUlITnZablIzWVhKbElHWnZjaUJrWlhabGJHOXdhVzVuSUc5MGFHVnlJSE52Wm5SM1lYSmxJRzl5SUhSdmIyeHpJSFJvWVhRbmMxeHVJQ0IxYzJWa0lHWnZjaUJrWlhabGJHOXdhVzVuSUdkaGJXVnpMaUJaYjNVZ1lYSmxJRzV2ZENCbmNtRnVkR1ZrSUhSdklIQjFZbXhwYzJnc0lHUnBjM1J5YVdKMWRHVXNYRzRnSUhOMVlteHBZMlZ1YzJVc0lHRnVaQzl2Y2lCelpXeHNJR052Y0dsbGN5QnZaaUJEYjJOdmN5QkRjbVZoZEc5eUxseHVYRzRnVkdobElITnZablIzWVhKbElHOXlJSFJ2YjJ4eklHbHVJSFJvYVhNZ1RHbGpaVzV6WlNCQlozSmxaVzFsYm5RZ1lYSmxJR3hwWTJWdWMyVmtMQ0J1YjNRZ2MyOXNaQzVjYmlCWWFXRnRaVzRnV1dGcWFTQlRiMlowZDJGeVpTQkRieTRzSUV4MFpDNGdjbVZ6WlhKMlpYTWdZV3hzSUhKcFoyaDBjeUJ1YjNRZ1pYaHdjbVZ6YzJ4NUlHZHlZVzUwWldRZ2RHOGdlVzkxTGx4dVhHNGdWRWhGSUZOUFJsUlhRVkpGSUVsVElGQlNUMVpKUkVWRUlGd2lRVk1nU1ZOY0lpd2dWMGxVU0U5VlZDQlhRVkpTUVU1VVdTQlBSaUJCVGxrZ1MwbE9SQ3dnUlZoUVVrVlRVeUJQVWx4dUlFbE5VRXhKUlVRc0lFbE9RMHhWUkVsT1J5QkNWVlFnVGs5VUlFeEpUVWxVUlVRZ1ZFOGdWRWhGSUZkQlVsSkJUbFJKUlZNZ1QwWWdUVVZTUTBoQlRsUkJRa2xNU1ZSWkxGeHVJRVpKVkU1RlUxTWdSazlTSUVFZ1VFRlNWRWxEVlV4QlVpQlFWVkpRVDFORklFRk9SQ0JPVDA1SlRrWlNTVTVIUlUxRlRsUXVJRWxPSUU1UElFVldSVTVVSUZOSVFVeE1JRlJJUlZ4dUlFRlZWRWhQVWxNZ1QxSWdRMDlRV1ZKSlIwaFVJRWhQVEVSRlVsTWdRa1VnVEVsQlFreEZJRVpQVWlCQlRsa2dRMHhCU1Uwc0lFUkJUVUZIUlZNZ1QxSWdUMVJJUlZKY2JpQk1TVUZDU1V4SlZGa3NJRmRJUlZSSVJWSWdTVTRnUVU0Z1FVTlVTVTlPSUU5R0lFTlBUbFJTUVVOVUxDQlVUMUpVSUU5U0lFOVVTRVZTVjBsVFJTd2dRVkpKVTBsT1J5QkdVazlOTEZ4dUlFOVZWQ0JQUmlCUFVpQkpUaUJEVDA1T1JVTlVTVTlPSUZkSlZFZ2dWRWhGSUZOUFJsUlhRVkpGSUU5U0lGUklSU0JWVTBVZ1QxSWdUMVJJUlZJZ1JFVkJURWxPUjFNZ1NVNWNiaUJVU0VVZ1UwOUdWRmRCVWtVdVhHNGdLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2k5Y2JseHVMeW9xWEc0Z0tpQkFiVzlrZFd4bElHTmpYRzRnS2k5Y2JpOHFLbHh1SUNvZ0lTTmxiaUJEYkdGemN5Qm1iM0lnVEdGaVpXeEJkR3hoY3lCb1lXNWtiR2x1Wnk1Y2JpQXFJQ0VqZW1nZzZJbTY1cHl2NXBXdzVhMlg1YTJYNUwyVDZMV0U1cnFRNTdHNzQ0Q0NYRzRnS2lCQVkyeGhjM01nVEdGaVpXeEJkR3hoYzF4dUlDb2dRR1Y0ZEdWdVpITWdRbWwwYldGd1JtOXVkRnh1SUNwY2JpQXFMMXh1ZG1GeUlFeGhZbVZzUVhSc1lYTWdQU0JqWXk1RGJHRnpjeWg3WEc0Z0lDQWdibUZ0WlRvZ0oyTmpMa3hoWW1Wc1FYUnNZWE1uTEZ4dUlDQWdJR1Y0ZEdWdVpITTZJR05qTGtKcGRHMWhjRVp2Ym5Rc1hHNWNiaUFnSUNCdmJreHZZV1FnS0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVjM0J5YVhSbFJuSmhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05qTG5kaGNtNUpSQ2c1TVRBd0xDQjBhR2x6TG01aGJXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NWZabTUwUTI5dVptbG5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZeTUzWVhKdVNVUW9PVEV3TVN3Z2RHaHBjeTV1WVcxbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGFHbHpMbDl6ZFhCbGNpZ3BPMXh1SUNBZ0lIMWNibHh1ZlNrN1hHNWNibU5qTGt4aFltVnNRWFJzWVhNZ1BTQk1ZV0psYkVGMGJHRnpPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JNWVdKbGJFRjBiR0Z6TzF4dUlsMTkiXX0=