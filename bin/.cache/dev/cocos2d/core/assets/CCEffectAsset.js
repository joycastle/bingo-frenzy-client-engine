(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/assets/CCEffectAsset.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Asset = require('./CCAsset');
        var Effect = require('../../renderer/core/effect');
        var EffectAsset = cc.Class({
            name: 'cc.EffectAsset',
            extends: Asset,
            ctor: function ctor() {
                this._effect = null;
            },
            properties: {
                properties: Object,
                techniques: [],
                shaders: []
            },
            onLoad: function onLoad() {
                if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
                    return;
                }
                var lib = cc.renderer._forward._programLib;
                for (var i = 0; i < this.shaders.length; i++) {
                    lib.define(this.shaders[i]);
                }
                this._initEffect();
            },
            _initEffect: function _initEffect() {
                if (this._effect)
                    return;
                this._effect = Effect.parseEffect(this);
            },
            getInstantiatedEffect: function getInstantiatedEffect() {
                this._initEffect();
                return this._effect.clone();
            }
        });
        module.exports = cc.EffectAsset = EffectAsset;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDRWZmZWN0QXNzZXQuanMiLCIvVXNlcnMvU2hhcmVkL2JpbmdvX2ZyZW56eS9lbmdpbmUvY29jb3MyZC9jb3JlL2Fzc2V0cy9DQ0VmZmVjdEFzc2V0LmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJjYyIsIkNsYXNzIiwiQXNzZXQiLCJFZmZlY3QiLCJFZmZlY3RBc3NldCIsIm5hbWUiLCJleHRlbmRzIiwiY3RvciIsIl9lZmZlY3QiLCJwcm9wZXJ0aWVzIiwiT2JqZWN0IiwidGVjaG5pcXVlcyIsInNoYWRlcnMiLCJvbkxvYWQiLCJnYW1lIiwicmVuZGVyVHlwZSIsIlJFTkRFUl9UWVBFX0NBTlZBUyIsImxpYiIsInJlbmRlcmVyIiwiX2ZvcndhcmQiLCJfcHJvZ3JhbUxpYiIsImkiLCJsZW5ndGgiLCJkZWZpbmUiLCJfaW5pdEVmZmVjdCIsInBhcnNlRWZmZWN0IiwiZ2V0SW5zdGFudGlhdGVkRWZmZWN0IiwiY2xvbmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiO0lBQXNCLElBQUEsT0FBQSxHQUF0QixPQUFBLE9BQUEsS0FBQSxXQUFBLElBQUEsT0FBQSxPQUFBLEtBQUEsV0FBc0I7SUFDUEEsSUFBUSxRQUFBLEdBQUEsT0FBQSxHQUFBLE1BQUEsR0FBdkIsRUFBQSxPQUFBLEVBQUEsRUFBQSxFQUFlQTs7SUFFR0MsSUFBR0MsU0FBQUEsR0FBTSxPQUFBLEdBQUEsVUFBQSxPQUFBLEVBQUE7QUFBQSxRQUNqQixPQURpQixPQUFBLENBQUEsT0FBQSxDQUNqQixDQURpQjtBQUFBLEtBQUEsR0FBQSxVQUFBLE9BQUEsRUFBQTtBQUFBLDhEQUFBO0FBQUEsS0FBVEQ7SUFLVixTQUFBLFFBQUEsQ0FBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQTtBQUFBLFFBTG1CLElBQUEsQ0FBQSxPQUFBLEVBQUE7QUFBQSxZQUFBLGlCQUFBLENBQUEsY0FBQSxDQUFBLFVBQUEsRUFBQSxNQUFBLEVBQUE7QUFBQSxTQUtuQjtBQUFBO1FBUlIsSUFBTUUsS0FBQUEsR0FBUUgsT0FBQUEsQ0FBUSxXQUFSQSxDQUFkO1FBQ0EsSUFBTUksTUFBQUEsR0FBU0osT0FBQUEsQ0FBUSw0QkFBUkEsQ0FBZjtRQUVBLElBQUlLLFdBQUFBLEdBQWNKLEVBQUFBLENBQUdDLEtBQUhELENBQVM7QUFBQSxZQUN2QkssSUFBQUEsRUFBTSxnQkFEaUI7QUFBQSxZQUV2QkMsT0FBQUEsRUFBU0osS0FGYztBQUFBLFlBSXZCSyxJQUFBQSxFQUp1QixTQUFBLElBQUEsR0FJZjtBQUFBLGdCQUNKLEtBQUtDLE9BQUwsR0FBZSxJQUFmLENBREk7QUFBQSxhQUplO0FBQUEsWUFRdkJDLFVBQUFBLEVBQVk7QUFBQSxnQkFDUkEsVUFBQUEsRUFBWUMsTUFESjtBQUFBLGdCQUVSQyxVQUFBQSxFQUFZLEVBRko7QUFBQSxnQkFHUkMsT0FBQUEsRUFBUyxFQUhEO0FBQUEsYUFSVztBQUFBLFlBY3ZCQyxNQUFBQSxFQWR1QixTQUFBLE1BQUEsR0FjYjtBQUFBLGdCQUNOLElBQUliLEVBQUFBLENBQUdjLElBQUhkLENBQVFlLFVBQVJmLEtBQXVCQSxFQUFBQSxDQUFHYyxJQUFIZCxDQUFRZ0Isa0JBQW5DLEVBQXVEO0FBQUEsb0JBQ25ELE9BRG1EO0FBQUEsaUJBRGpEO0FBQUEsZ0JBS04sSUFBSUMsR0FBQUEsR0FBTWpCLEVBQUFBLENBQUdrQixRQUFIbEIsQ0FBWW1CLFFBQVpuQixDQUFxQm9CLFdBQS9CLENBTE07QUFBQSxnQkFNTixLQUFLLElBQUlDLENBQUFBLEdBQUksQ0FBUixDQUFMLENBQWdCQSxDQUFBQSxHQUFJLEtBQUtULE9BQUwsQ0FBYVUsTUFBakMsRUFBeUNELENBQUFBLEVBQXpDLEVBQThDO0FBQUEsb0JBQzFDSixHQUFBQSxDQUFJTSxNQUFKTixDQUFXLEtBQUtMLE9BQUwsQ0FBYVMsQ0FBYixDQUFYSixFQUQwQztBQUFBLGlCQU54QztBQUFBLGdCQVVOLEtBQUtPLFdBQUwsR0FWTTtBQUFBLGFBZGE7QUFBQSxZQTJCdkJBLFdBQUFBLEVBM0J1QixTQUFBLFdBQUEsR0EyQlI7QUFBQSxnQkFDWCxJQUFJLEtBQUtoQixPQUFUO0FBQUEsb0JBQWtCLE9BRFA7QUFBQSxnQkFFWCxLQUFLQSxPQUFMLEdBQWVMLE1BQUFBLENBQU9zQixXQUFQdEIsQ0FBbUIsSUFBbkJBLENBQWYsQ0FGVztBQUFBLGFBM0JRO0FBQUEsWUFnQ3ZCdUIscUJBQUFBLEVBaEN1QixTQUFBLHFCQUFBLEdBZ0NFO0FBQUEsZ0JBQ3JCLEtBQUtGLFdBQUwsR0FEcUI7QUFBQSxnQkFFckIsT0FBTyxLQUFLaEIsT0FBTCxDQUFhbUIsS0FBYixFQUFQLENBRnFCO0FBQUEsYUFoQ0Y7QUFBQSxTQUFUM0IsQ0FBbEI7UUFzQ0E0QixNQUFBQSxDQUFPQyxPQUFQRCxHQUFpQjVCLEVBQUFBLENBQUdJLFdBQUhKLEdBQWlCSSxXQUFsQ3dCLENBakNRO0FBQUE7O1FBR1EsUUFBQSxDQUFBLFFBQUEsQ0FBQSxPQUFBLEVBQUEsU0FBQSxFQUFBLFFBQUE7V0FBQTtBQUFBLFFBR0MsaUJBQUEsQ0FBQSxrQkFBQSxDQUFBLFVBQUEsRUFBQSxZQUFBO0FBQUEsWUFYVSxRQUFBLENBQUEsUUFBQSxDQUFBLE9BQUEsRUFBQSxTQUFBLEVBQUEsUUFBQSxFQVdWO0FBQUEsU0FBQSxFQUhEO0FBQUEiLCJmaWxlIjoiQ0NFZmZlY3RBc3NldC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFzc2V0ID0gcmVxdWlyZSgnLi9DQ0Fzc2V0Jyk7XG5jb25zdCBFZmZlY3QgPSByZXF1aXJlKCcuLi8uLi9yZW5kZXJlci9jb3JlL2VmZmVjdCcpO1xuXG5sZXQgRWZmZWN0QXNzZXQgPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLkVmZmVjdEFzc2V0JyxcbiAgICBleHRlbmRzOiBBc3NldCxcblxuICAgIGN0b3IgKCkge1xuICAgICAgICB0aGlzLl9lZmZlY3QgPSBudWxsO1xuICAgIH0sXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIHByb3BlcnRpZXM6IE9iamVjdCxcbiAgICAgICAgdGVjaG5pcXVlczogW10sXG4gICAgICAgIHNoYWRlcnM6IFtdXG4gICAgfSxcblxuICAgIG9uTG9hZCAoKSB7XG4gICAgICAgIGlmIChjYy5nYW1lLnJlbmRlclR5cGUgPT09IGNjLmdhbWUuUkVOREVSX1RZUEVfQ0FOVkFTKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGxldCBsaWIgPSBjYy5yZW5kZXJlci5fZm9yd2FyZC5fcHJvZ3JhbUxpYjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNoYWRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxpYi5kZWZpbmUodGhpcy5zaGFkZXJzW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2luaXRFZmZlY3QoKTtcbiAgICB9LFxuXG4gICAgX2luaXRFZmZlY3QgKCkge1xuICAgICAgICBpZiAodGhpcy5fZWZmZWN0KSByZXR1cm47XG4gICAgICAgIHRoaXMuX2VmZmVjdCA9IEVmZmVjdC5wYXJzZUVmZmVjdCh0aGlzKTtcbiAgICB9LFxuXG4gICAgZ2V0SW5zdGFudGlhdGVkRWZmZWN0ICgpIHtcbiAgICAgICAgdGhpcy5faW5pdEVmZmVjdCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5fZWZmZWN0LmNsb25lKCk7XG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gY2MuRWZmZWN0QXNzZXQgPSBFZmZlY3RBc3NldDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEFzc2V0ID0gcmVxdWlyZSgnLi9DQ0Fzc2V0Jyk7XG52YXIgRWZmZWN0ID0gcmVxdWlyZSgnLi4vLi4vcmVuZGVyZXIvY29yZS9lZmZlY3QnKTtcblxudmFyIEVmZmVjdEFzc2V0ID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5FZmZlY3RBc3NldCcsXG4gICAgZXh0ZW5kczogQXNzZXQsXG5cbiAgICBjdG9yOiBmdW5jdGlvbiBjdG9yKCkge1xuICAgICAgICB0aGlzLl9lZmZlY3QgPSBudWxsO1xuICAgIH0sXG5cblxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgcHJvcGVydGllczogT2JqZWN0LFxuICAgICAgICB0ZWNobmlxdWVzOiBbXSxcbiAgICAgICAgc2hhZGVyczogW11cbiAgICB9LFxuXG4gICAgb25Mb2FkOiBmdW5jdGlvbiBvbkxvYWQoKSB7XG4gICAgICAgIGlmIChjYy5nYW1lLnJlbmRlclR5cGUgPT09IGNjLmdhbWUuUkVOREVSX1RZUEVfQ0FOVkFTKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbGliID0gY2MucmVuZGVyZXIuX2ZvcndhcmQuX3Byb2dyYW1MaWI7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zaGFkZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsaWIuZGVmaW5lKHRoaXMuc2hhZGVyc1tpXSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9pbml0RWZmZWN0KCk7XG4gICAgfSxcbiAgICBfaW5pdEVmZmVjdDogZnVuY3Rpb24gX2luaXRFZmZlY3QoKSB7XG4gICAgICAgIGlmICh0aGlzLl9lZmZlY3QpIHJldHVybjtcbiAgICAgICAgdGhpcy5fZWZmZWN0ID0gRWZmZWN0LnBhcnNlRWZmZWN0KHRoaXMpO1xuICAgIH0sXG4gICAgZ2V0SW5zdGFudGlhdGVkRWZmZWN0OiBmdW5jdGlvbiBnZXRJbnN0YW50aWF0ZWRFZmZlY3QoKSB7XG4gICAgICAgIHRoaXMuX2luaXRFZmZlY3QoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VmZmVjdC5jbG9uZSgpO1xuICAgIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNjLkVmZmVjdEFzc2V0ID0gRWZmZWN0QXNzZXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa05EUldabVpXTjBRWE56WlhRdWFuTWlYU3dpYm1GdFpYTWlPbHNpUVhOelpYUWlMQ0p5WlhGMWFYSmxJaXdpUldabVpXTjBJaXdpUldabVpXTjBRWE56WlhRaUxDSmpZeUlzSWtOc1lYTnpJaXdpYm1GdFpTSXNJbVY0ZEdWdVpITWlMQ0pqZEc5eUlpd2lYMlZtWm1WamRDSXNJbkJ5YjNCbGNuUnBaWE1pTENKUFltcGxZM1FpTENKMFpXTm9ibWx4ZFdWeklpd2ljMmhoWkdWeWN5SXNJbTl1VEc5aFpDSXNJbWRoYldVaUxDSnlaVzVrWlhKVWVYQmxJaXdpVWtWT1JFVlNYMVJaVUVWZlEwRk9Wa0ZUSWl3aWJHbGlJaXdpY21WdVpHVnlaWElpTENKZlptOXlkMkZ5WkNJc0lsOXdjbTluY21GdFRHbGlJaXdpYVNJc0lteGxibWQwYUNJc0ltUmxabWx1WlNJc0lsOXBibWwwUldabVpXTjBJaXdpY0dGeWMyVkZabVpsWTNRaUxDSm5aWFJKYm5OMFlXNTBhV0YwWldSRlptWmxZM1FpTENKamJHOXVaU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFc1NVRkJUVUVzVVVGQlVVTXNVVUZCVVN4WFFVRlNMRU5CUVdRN1FVRkRRU3hKUVVGTlF5eFRRVUZUUkN4UlFVRlJMRFJDUVVGU0xFTkJRV1k3TzBGQlJVRXNTVUZCU1VVc1kwRkJZME1zUjBGQlIwTXNTMEZCU0N4RFFVRlRPMEZCUTNaQ1F5eFZRVUZOTEdkQ1FVUnBRanRCUVVWMlFrTXNZVUZCVTFBc1MwRkdZenM3UVVGSmRrSlJMRkZCU25WQ0xHdENRVWxtTzBGQlEwb3NZVUZCUzBNc1QwRkJUQ3hIUVVGbExFbEJRV1k3UVVGRFNDeExRVTV6UWpzN08wRkJVWFpDUXl4blFrRkJXVHRCUVVOU1FTeHZRa0ZCV1VNc1RVRkVTanRCUVVWU1F5eHZRa0ZCV1N4RlFVWktPMEZCUjFKRExHbENRVUZUTzBGQlNFUXNTMEZTVnpzN1FVRmpka0pETEZWQlpIVkNMRzlDUVdOaU8wRkJRMDRzV1VGQlNWWXNSMEZCUjFjc1NVRkJTQ3hEUVVGUlF5eFZRVUZTTEV0QlFYVkNXaXhIUVVGSFZ5eEpRVUZJTEVOQlFWRkZMR3RDUVVGdVF5eEZRVUYxUkR0QlFVTnVSRHRCUVVOSU96dEJRVVZFTEZsQlFVbERMRTFCUVUxa0xFZEJRVWRsTEZGQlFVZ3NRMEZCV1VNc1VVRkJXaXhEUVVGeFFrTXNWMEZCTDBJN1FVRkRRU3hoUVVGTExFbEJRVWxETEVsQlFVa3NRMEZCWWl4RlFVRm5Ra0VzU1VGQlNTeExRVUZMVkN4UFFVRk1MRU5CUVdGVkxFMUJRV3BETEVWQlFYbERSQ3hIUVVGNlF5eEZRVUU0UXp0QlFVTXhRMG9zWjBKQlFVbE5MRTFCUVVvc1EwRkJWeXhMUVVGTFdDeFBRVUZNTEVOQlFXRlRMRU5CUVdJc1EwRkJXRHRCUVVOSU96dEJRVVZFTEdGQlFVdEhMRmRCUVV3N1FVRkRTQ3hMUVhwQ2MwSTdRVUV5UW5aQ1FTeGxRVE5DZFVJc2VVSkJNa0pTTzBGQlExZ3NXVUZCU1N4TFFVRkxhRUlzVDBGQlZDeEZRVUZyUWp0QlFVTnNRaXhoUVVGTFFTeFBRVUZNTEVkQlFXVlFMRTlCUVU5M1FpeFhRVUZRTEVOQlFXMUNMRWxCUVc1Q0xFTkJRV1k3UVVGRFNDeExRVGxDYzBJN1FVRm5RM1pDUXl4NVFrRm9RM1ZDTEcxRFFXZERSVHRCUVVOeVFpeGhRVUZMUml4WFFVRk1PMEZCUTBFc1pVRkJUeXhMUVVGTGFFSXNUMEZCVEN4RFFVRmhiVUlzUzBGQllpeEZRVUZRTzBGQlEwZzdRVUZ1UTNOQ0xFTkJRVlFzUTBGQmJFSTdPMEZCYzBOQlF5eFBRVUZQUXl4UFFVRlFMRWRCUVdsQ01VSXNSMEZCUjBRc1YwRkJTQ3hIUVVGcFFrRXNWMEZCYkVNaUxDSm1hV3hsSWpvaVEwTkZabVpsWTNSQmMzTmxkQzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltTnZibk4wSUVGemMyVjBJRDBnY21WeGRXbHlaU2duTGk5RFEwRnpjMlYwSnlrN1hHNWpiMjV6ZENCRlptWmxZM1FnUFNCeVpYRjFhWEpsS0NjdUxpOHVMaTl5Wlc1a1pYSmxjaTlqYjNKbEwyVm1abVZqZENjcE8xeHVYRzVzWlhRZ1JXWm1aV04wUVhOelpYUWdQU0JqWXk1RGJHRnpjeWg3WEc0Z0lDQWdibUZ0WlRvZ0oyTmpMa1ZtWm1WamRFRnpjMlYwSnl4Y2JpQWdJQ0JsZUhSbGJtUnpPaUJCYzNObGRDeGNibHh1SUNBZ0lHTjBiM0lnS0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5bFptWmxZM1FnUFNCdWRXeHNPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQndjbTl3WlhKMGFXVnpPaUI3WEc0Z0lDQWdJQ0FnSUhCeWIzQmxjblJwWlhNNklFOWlhbVZqZEN4Y2JpQWdJQ0FnSUNBZ2RHVmphRzVwY1hWbGN6b2dXMTBzWEc0Z0lDQWdJQ0FnSUhOb1lXUmxjbk02SUZ0ZFhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUc5dVRHOWhaQ0FvS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hqWXk1bllXMWxMbkpsYm1SbGNsUjVjR1VnUFQwOUlHTmpMbWRoYldVdVVrVk9SRVZTWDFSWlVFVmZRMEZPVmtGVEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lHeGxkQ0JzYVdJZ1BTQmpZeTV5Wlc1a1pYSmxjaTVmWm05eWQyRnlaQzVmY0hKdlozSmhiVXhwWWp0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQjBhR2x6TG5Ob1lXUmxjbk11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4cFlpNWtaV1pwYm1Vb2RHaHBjeTV6YUdGa1pYSnpXMmxkS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVgybHVhWFJGWm1abFkzUW9LVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdYMmx1YVhSRlptWmxZM1FnS0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZaV1ptWldOMEtTQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJWbVptVmpkQ0E5SUVWbVptVmpkQzV3WVhKelpVVm1abVZqZENoMGFHbHpLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdaMlYwU1c1emRHRnVkR2xoZEdWa1JXWm1aV04wSUNncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmFXNXBkRVZtWm1WamRDZ3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlpXWm1aV04wTG1Oc2IyNWxLQ2s3WEc0Z0lDQWdmVnh1ZlNrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdZMk11UldabVpXTjBRWE56WlhRZ1BTQkZabVpsWTNSQmMzTmxkRHRjYmlKZGZRPT0iXX0=