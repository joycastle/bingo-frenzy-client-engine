(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/assets/CCRawAsset.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var CCObject = require('../platform/CCObject');
        var js = require('../platform/js');
        cc.RawAsset = cc.Class({
            name: 'cc.RawAsset',
            extends: CCObject,
            ctor: function ctor() {
                Object.defineProperty(this, '_uuid', {
                    value: '',
                    writable: true
                });
            }
        });
        js.value(cc.RawAsset, 'isRawAssetType', function (ctor) {
            return js.isChildClassOf(ctor, cc.RawAsset) && !js.isChildClassOf(ctor, cc.Asset);
        });
        js.value(cc.RawAsset, 'wasRawAssetType', function (ctor) {
            return ctor === cc.Texture2D || ctor === cc.AudioClip || ctor === cc.ParticleAsset || ctor === cc.Asset;
        });
        module.exports = cc.RawAsset;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,