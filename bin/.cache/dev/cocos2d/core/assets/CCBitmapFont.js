(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/assets/CCBitmapFont.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var FontLetterDefinition = function FontLetterDefinition() {
            this.u = 0;
            this.v = 0;
            this.w = 0;
            this.h = 0;
            this.offsetX = 0;
            this.offsetY = 0;
            this.textureID = 0;
            this.valid = false;
            this.xAdvance = 0;
        };
        var FontAtlas = function FontAtlas(texture) {
            this._letterDefinitions = {};
            this._texture = texture;
        };
        FontAtlas.prototype = {
            constructor: FontAtlas,
            addLetterDefinitions: function addLetterDefinitions(letter, letterDefinition) {
                this._letterDefinitions[letter] = letterDefinition;
            },
            cloneLetterDefinition: function cloneLetterDefinition() {
                var copyLetterDefinitions = {};
                for (var key in this._letterDefinitions) {
                    var value = new FontLetterDefinition();
                    cc.js.mixin(value, this._letterDefinitions[key]);
                    copyLetterDefinitions[key] = value;
                }
                return copyLetterDefinitions;
            },
            getTexture: function getTexture() {
                return this._texture;
            },
            getLetter: function getLetter(key) {
                return this._letterDefinitions[key];
            },
            getLetterDefinitionForChar: function getLetterDefinitionForChar(char) {
                var key = char.charCodeAt(0);
                var hasKey = this._letterDefinitions.hasOwnProperty(key);
                var letter = void 0;
                if (hasKey) {
                    letter = this._letterDefinitions[key];
                } else {
                    letter = null;
                }
                return letter;
            },
            clear: function clear() {
                this._letterDefinitions = {};
            }
        };
        var BitmapFont = cc.Class({
            name: 'cc.BitmapFont',
            extends: cc.Font,
            properties: {
                fntDataStr: { default: '' },
                spriteFrame: {
                    default: null,
                    type: cc.SpriteFrame
                },
                fontSize: { default: -1 },
                _fntConfig: null,
                _fontDefDictionary: null
            },
            onLoad: function onLoad() {
                var spriteFrame = this.spriteFrame;
                if (!this._fontDefDictionary && spriteFrame) {
                    this._fontDefDictionary = new FontAtlas(spriteFrame._texture);
                }
                var fntConfig = this._fntConfig;
                if (!fntConfig) {
                    return;
                }
                var fontDict = fntConfig.fontDefDictionary;
                for (var fontDef in fontDict) {
                    var letter = new FontLetterDefinition();
                    var rect = fontDict[fontDef].rect;
                    letter.offsetX = fontDict[fontDef].xOffset;
                    letter.offsetY = fontDict[fontDef].yOffset;
                    letter.w = rect.width;
                    letter.h = rect.height;
                    letter.u = rect.x;
                    letter.v = rect.y;
                    letter.textureID = 0;
                    letter.valid = true;
                    letter.xAdvance = fontDict[fontDef].xAdvance;
                    this._fontDefDictionary.addLetterDefinitions(fontDef, letter);
                }
            }
        });
        cc.BitmapFont = BitmapFont;
        cc.BitmapFont.FontLetterDefinition = FontLetterDefinition;
        cc.BitmapFont.FontAtlas = FontAtlas;
        module.exports = BitmapFont;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,