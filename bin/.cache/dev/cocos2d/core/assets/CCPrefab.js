(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/assets/CCPrefab.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var OptimizationPolicy = cc.Enum({
            AUTO: 0,
            SINGLE_INSTANCE: 1,
            MULTI_INSTANCE: 2
        });
        var Prefab = cc.Class({
            name: 'cc.Prefab',
            extends: cc.Asset,
            ctor: function ctor() {
                this._createFunction = null;
                this._instantiatedTimes = 0;
            },
            properties: {
                data: null,
                optimizationPolicy: OptimizationPolicy.AUTO,
                asyncLoadAssets: false,
                readonly: {
                    default: false,
                    editorOnly: true
                }
            },
            statics: {
                OptimizationPolicy: OptimizationPolicy,
                OptimizationPolicyThreshold: 3
            },
            createNode: CC_EDITOR && function (cb) {
                var node = cc.instantiate(this);
                node.name = this.name;
                cb(null, node);
            },
            compileCreateFunction: function compileCreateFunction() {
                var jit = require('../platform/instantiate-jit');
                this._createFunction = jit.compile(this.data);
            },
            _doInstantiate: function _doInstantiate(rootToRedirect) {
                if (this.data._prefab) {
                    this.data._prefab._synced = true;
                } else {
                    cc.warnID(3700);
                }
                if (!this._createFunction) {
                    this.compileCreateFunction();
                }
                return this._createFunction(rootToRedirect);
            },
            _instantiate: function _instantiate() {
                var node, useJit = false;
                if (CC_SUPPORT_JIT) {
                    if (this.optimizationPolicy === OptimizationPolicy.SINGLE_INSTANCE) {
                        useJit = false;
                    } else if (this.optimizationPolicy === OptimizationPolicy.MULTI_INSTANCE) {
                        useJit = true;
                    } else {
                        useJit = this._instantiatedTimes + 1 >= Prefab.OptimizationPolicyThreshold;
                    }
                }
                if (useJit) {
                    node = this._doInstantiate();
                    this.data._instantiate(node);
                } else {
                    this.data._prefab._synced = true;
                    node = this.data._instantiate();
                }
                ++this._instantiatedTimes;
                if (CC_EDITOR || CC_TEST) {
                    var PrefabUtils = Editor.require('scene://utils/prefab');
                    PrefabUtils.linkPrefab(this, node);
                }
                return node;
            },
            destroy: function destroy() {
                this.data && this.data.destroy();
                this._super();
            }
        });
        cc.Prefab = module.exports = Prefab;
        cc.js.obsolete(cc, 'cc._Prefab', 'Prefab');
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,