(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/assets/material/CCMaterial.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _murmurhash2_gc = require('../../../renderer/murmurhash2_gc');
        var _murmurhash2_gc2 = _interopRequireDefault(_murmurhash2_gc);
        var _utils = require('./utils');
        var _utils2 = _interopRequireDefault(_utils);
        var _materialPool = require('./material-pool');
        var _materialPool2 = _interopRequireDefault(_materialPool);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var Asset = require('../CCAsset');
        var Texture = require('../CCTexture2D');
        var PixelFormat = Texture.PixelFormat;
        var EffectAsset = require('../CCEffectAsset');
        var textureUtil = require('../../utils/texture-util');
        var Material = cc.Class({
            name: 'cc.Material',
            extends: Asset,
            ctor: function ctor() {
                this._manualHash = false;
                this._dirty = true;
                this._effect = null;
                this._owner = null;
                this._hash = 0;
            },
            properties: {
                _effectAsset: {
                    type: EffectAsset,
                    default: null
                },
                _defines: {
                    default: {},
                    type: Object
                },
                _props: {
                    default: {},
                    type: Object
                },
                effectName: CC_EDITOR ? {
                    get: function get() {
                        return this._effectAsset.name;
                    },
                    set: function set(val) {
                        var effectAsset = cc.AssetLibrary.getBuiltin('effect', val);
                        if (!effectAsset) {
                            Editor.warn('no effect named \'' + val + '\' found');
                            return;
                        }
                        this.effectAsset = effectAsset;
                    }
                } : undefined,
                effectAsset: {
                    get: function get() {
                        return this._effectAsset;
                    },
                    set: function set(asset) {
                        if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
                            return;
                        }
                        this._effectAsset = asset;
                        if (!asset) {
                            cc.error('Can not set an empty effect asset.');
                            return;
                        }
                        this._effect = this._effectAsset.getInstantiatedEffect();
                        ;
                    }
                },
                effect: {
                    get: function get() {
                        return this._effect;
                    }
                },
                owner: {
                    get: function get() {
                        return this._owner;
                    }
                }
            },
            statics: {
                getBuiltinMaterial: function getBuiltinMaterial(name) {
                    return cc.AssetLibrary.getBuiltin('material', 'builtin-' + name);
                },
                getInstantiatedBuiltinMaterial: function getInstantiatedBuiltinMaterial(name, renderComponent) {
                    var builtinMaterial = this.getBuiltinMaterial(name);
                    return Material.getInstantiatedMaterial(builtinMaterial, renderComponent);
                },
                getInstantiatedMaterial: function getInstantiatedMaterial(mat, renderComponent) {
                    if (mat._owner === renderComponent) {
                        return mat;
                    } else {
                        return _materialPool2.default.get(mat, renderComponent);
                    }
                }
            },
            copy: function copy(mat) {
                this.effectAsset = mat.effectAsset;
                for (var name in mat._defines) {
                    this.define(name, mat._defines[name]);
                }
                for (var _name in mat._props) {
                    this.setProperty(_name, mat._props[_name]);
                }
            },
            setProperty: function setProperty(name, val, force) {
                if (this._props[name] === val && !force)
                    return;
                this._props[name] = val;
                this._dirty = true;
                if (this._effect) {
                    if (val instanceof Texture) {
                        var loaded = function loaded() {
                            this._effect.setProperty(name, val);
                            var format = val.getPixelFormat();
                            var separateAlpha = format === PixelFormat.RGBA_ETC1 || format === PixelFormat.RGB_A_PVRTC_4BPPV1 || format === PixelFormat.RGB_A_PVRTC_2BPPV1;
                            this.define('CC_USE_ALPHA_ATLAS_' + name.toUpperCase(), separateAlpha);
                        };
                        if (!val.loaded) {
                            val.once('load', loaded, this);
                            textureUtil.postLoadTexture(val);
                        } else {
                            loaded.call(this);
                        }
                    } else {
                        this._effect.setProperty(name, val);
                    }
                }
            },
            getProperty: function getProperty(name) {
                return this._props[name];
            },
            define: function define(name, val, force) {
                if (this._defines[name] === val && !force)
                    return;
                this._defines[name] = val;
                this._dirty = true;
                if (this._effect) {
                    this._effect.define(name, val);
                }
            },
            getDefine: function getDefine(name) {
                return this._defines[name];
            },
            setDirty: function setDirty(dirty) {
                this._dirty = dirty;
            },
            updateHash: function updateHash(hash) {
                if (hash === undefined || hash === null) {
                    hash = this.computeHash();
                } else {
                    this._manualHash = true;
                }
                this._dirty = false;
                this._hash = hash;
                if (this._effect) {
                    this._effect.updateHash(this._hash);
                }
            },
            computeHash: function computeHash() {
                var effect = this._effect;
                var hashStr = '';
                if (effect) {
                    hashStr += _utils2.default.serializeDefines(effect._defines);
                    hashStr += _utils2.default.serializeTechniques(effect._techniques);
                    hashStr += _utils2.default.serializeUniforms(effect._properties);
                }
                return (0, _murmurhash2_gc2.default)(hashStr, 666);
            },
            getHash: function getHash() {
                if (!this._dirty)
                    return this._hash;
                if (!this._manualHash) {
                    this.updateHash();
                }
                this._dirty = false;
                return this._hash;
            },
            onLoad: function onLoad() {
                this.effectAsset = this._effectAsset;
                if (!this._effect)
                    return;
                for (var def in this._defines) {
                    this.define(def, this._defines[def], true);
                }
                for (var prop in this._props) {
                    this.setProperty(prop, this._props[prop], true);
                }
            }
        });
        module.exports = cc.Material = Material;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,