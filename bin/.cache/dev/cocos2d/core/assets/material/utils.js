(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/assets/material/utils.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _enums = require('../../../renderer/enums');
        var _enums2 = _interopRequireDefault(_enums);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function serializeDefines(defines) {
            var str = '';
            for (var name in defines) {
                str += name + defines[name];
            }
            return str;
        }
        function serializePass(pass) {
            var str = pass._programName + pass._cullMode;
            if (pass._blend) {
                str += pass._blendEq + pass._blendAlphaEq + pass._blendSrc + pass._blendDst + pass._blendSrcAlpha + pass._blendDstAlpha + pass._blendColor;
            }
            if (pass._depthTest) {
                str += pass._depthWrite + pass._depthFunc;
            }
            if (pass._stencilTest) {
                str += pass._stencilFuncFront + pass._stencilRefFront + pass._stencilMaskFront + pass._stencilFailOpFront + pass._stencilZFailOpFront + pass._stencilZPassOpFront + pass._stencilWriteMaskFront + pass._stencilFuncBack + pass._stencilRefBack + pass._stencilMaskBack + pass._stencilFailOpBack + pass._stencilZFailOpBack + pass._stencilZPassOpBack + pass._stencilWriteMaskBack;
            }
            return str;
        }
        function serializeTechniques(techniques) {
            var hashData = '';
            for (var i = 0; i < techniques.length; i++) {
                var techData = techniques[i];
                hashData += techData.stageIDs;
                for (var j = 0; j < techData.passes.length; j++) {
                    hashData += serializePass(techData.passes[j]);
                }
            }
            return hashData;
        }
        function serializeUniforms(uniforms) {
            var hashData = '';
            for (var name in uniforms) {
                var param = uniforms[name];
                var prop = param.value;
                if (!prop) {
                    continue;
                }
                if (param.type === _enums2.default.PARAM_TEXTURE_2D || param.type === _enums2.default.PARAM_TEXTURE_CUBE) {
                    hashData += prop._id + ';';
                } else {
                    hashData += prop.toString() + ';';
                }
            }
            return hashData;
        }
        exports.default = {
            serializeDefines: serializeDefines,
            serializeTechniques: serializeTechniques,
            serializeUniforms: serializeUniforms
        };
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,