(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/assets/CCTexture2D.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _gfx = require('../../renderer/gfx');
        var _gfx2 = _interopRequireDefault(_gfx);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var EventTarget = require('../event/event-target');
        var renderer = require('../renderer');
        require('../platform/CCClass');
        var GL_NEAREST = 9728;
        var GL_LINEAR = 9729;
        var GL_REPEAT = 10497;
        var GL_CLAMP_TO_EDGE = 33071;
        var GL_MIRRORED_REPEAT = 33648;
        var GL_RGBA = 6408;
        var CHAR_CODE_0 = 48;
        var CHAR_CODE_1 = 49;
        var idGenerater = new (require('../platform/id-generater'))('Tex');
        var CUSTOM_PIXEL_FORMAT = 1024;
        var PixelFormat = cc.Enum({
            RGB565: _gfx2.default.TEXTURE_FMT_R5_G6_B5,
            RGB5A1: _gfx2.default.TEXTURE_FMT_R5_G5_B5_A1,
            RGBA4444: _gfx2.default.TEXTURE_FMT_R4_G4_B4_A4,
            RGB888: _gfx2.default.TEXTURE_FMT_RGB8,
            RGBA8888: _gfx2.default.TEXTURE_FMT_RGBA8,
            RGBA32F: _gfx2.default.TEXTURE_FMT_RGBA32F,
            A8: _gfx2.default.TEXTURE_FMT_A8,
            I8: _gfx2.default.TEXTURE_FMT_L8,
            AI8: _gfx2.default.TEXTURE_FMT_L8_A8,
            RGB_PVRTC_2BPPV1: _gfx2.default.TEXTURE_FMT_RGB_PVRTC_2BPPV1,
            RGBA_PVRTC_2BPPV1: _gfx2.default.TEXTURE_FMT_RGBA_PVRTC_2BPPV1,
            RGB_A_PVRTC_2BPPV1: CUSTOM_PIXEL_FORMAT++,
            RGB_PVRTC_4BPPV1: _gfx2.default.TEXTURE_FMT_RGB_PVRTC_4BPPV1,
            RGBA_PVRTC_4BPPV1: _gfx2.default.TEXTURE_FMT_RGBA_PVRTC_4BPPV1,
            RGB_A_PVRTC_4BPPV1: CUSTOM_PIXEL_FORMAT++,
            RGB_ETC1: _gfx2.default.TEXTURE_FMT_RGB_ETC1,
            RGBA_ETC1: CUSTOM_PIXEL_FORMAT++,
            RGB_ETC2: _gfx2.default.TEXTURE_FMT_RGB_ETC2,
            RGBA_ETC2: _gfx2.default.TEXTURE_FMT_RGBA_ETC2
        });
        var WrapMode = cc.Enum({
            REPEAT: GL_REPEAT,
            CLAMP_TO_EDGE: GL_CLAMP_TO_EDGE,
            MIRRORED_REPEAT: GL_MIRRORED_REPEAT
        });
        var Filter = cc.Enum({
            LINEAR: GL_LINEAR,
            NEAREST: GL_NEAREST
        });
        var FilterIndex = {
            9728: 0,
            9729: 1
        };
        var _images = [];
        var _sharedOpts = {
            width: undefined,
            height: undefined,
            minFilter: undefined,
            magFilter: undefined,
            wrapS: undefined,
            wrapT: undefined,
            format: undefined,
            genMipmaps: undefined,
            images: undefined,
            image: undefined,
            flipY: undefined,
            premultiplyAlpha: undefined
        };
        function _getSharedOptions() {
            for (var key in _sharedOpts) {
                _sharedOpts[key] = undefined;
            }
            _images.length = 0;
            _sharedOpts.images = _images;
            _sharedOpts.flipY = false;
            return _sharedOpts;
        }
        var Texture2D = cc.Class({
            name: 'cc.Texture2D',
            extends: require('../assets/CCAsset'),
            mixins: [EventTarget],
            properties: {
                _nativeAsset: {
                    get: function get() {
                        return this._image;
                    },
                    set: function set(data) {
                        if (data._compressed && data._data) {
                            this.initWithData(data._data, this._format, data.width, data.height);
                            if (cc.macro.CLEANUP_IMAGE_CACHE) {
                                data.src = '';
                            }
                        } else {
                            this.initWithElement(data);
                        }
                    },
                    override: true
                },
                _format: PixelFormat.RGBA8888,
                _premultiplyAlpha: false,
                _flipY: false,
                _minFilter: Filter.LINEAR,
                _magFilter: Filter.LINEAR,
                _mipFilter: Filter.LINEAR,
                _wrapS: WrapMode.CLAMP_TO_EDGE,
                _wrapT: WrapMode.CLAMP_TO_EDGE,
                _genMipmaps: false,
                genMipmaps: {
                    get: function get() {
                        return this._genMipmaps;
                    },
                    set: function set(genMipmaps) {
                        if (this._genMipmaps !== genMipmaps) {
                            var opts = _getSharedOptions();
                            opts.genMipmaps = genMipmaps;
                            this.update(opts);
                        }
                    }
                },
                _packable: true,
                packable: {
                    get: function get() {
                        return this._packable;
                    },
                    set: function set(val) {
                        this._packable = val;
                    }
                }
            },
            statics: {
                PixelFormat: PixelFormat,
                WrapMode: WrapMode,
                Filter: Filter,
                _FilterIndex: FilterIndex,
                extnames: [
                    '.png',
                    '.jpg',
                    '.jpeg',
                    '.bmp',
                    '.webp',
                    '.pvr',
                    '.pkm'
                ]
            },
            ctor: function ctor() {
                this._id = idGenerater.getNewId();
                this.loaded = false;
                this.width = 0;
                this.height = 0;
                this._hashDirty = true;
                this._hash = 0;
                this._texture = null;
                if (CC_EDITOR) {
                    this._exportedExts = null;
                }
            },
            getImpl: function getImpl() {
                return this._texture;
            },
            getId: function getId() {
                return this._id;
            },
            toString: function toString() {
                return this.url || '';
            },
            update: function update(options) {
                if (options) {
                    var updateImg = false;
                    if (options.width !== undefined) {
                        this.width = options.width;
                    }
                    if (options.height !== undefined) {
                        this.height = options.height;
                    }
                    if (options.minFilter !== undefined) {
                        this._minFilter = options.minFilter;
                        options.minFilter = FilterIndex[options.minFilter];
                    }
                    if (options.magFilter !== undefined) {
                        this._magFilter = options.magFilter;
                        options.magFilter = FilterIndex[options.magFilter];
                    }
                    if (options.mipFilter !== undefined) {
                        this._mipFilter = options.mipFilter;
                        options.mipFilter = FilterIndex[options.mipFilter];
                    }
                    if (options.wrapS !== undefined) {
                        this._wrapS = options.wrapS;
                    }
                    if (options.wrapT !== undefined) {
                        this._wrapT = options.wrapT;
                    }
                    if (options.format !== undefined) {
                        this._format = options.format;
                    }
                    if (options.flipY !== undefined) {
                        this._flipY = options.flipY;
                        updateImg = true;
                    }
                    if (options.premultiplyAlpha !== undefined) {
                        this._premultiplyAlpha = options.premultiplyAlpha;
                        updateImg = true;
                    }
                    if (options.genMipmaps !== undefined) {
                        this._genMipmaps = options.genMipmaps;
                    }
                    if (updateImg && this._image) {
                        options.image = this._image;
                    }
                    if (options.images && options.images.length > 0) {
                        this._image = options.images[0];
                    } else if (options.image !== undefined) {
                        this._image = options.image;
                        if (!options.images) {
                            _images.length = 0;
                            options.images = _images;
                        }
                        options.images.push(options.image);
                    }
                    if (options.images && options.images.length > 0) {
                        this._texture.update(options);
                    }
                    this._hashDirty = true;
                }
            },
            initWithElement: function initWithElement(element) {
                if (!element)
                    return;
                this._image = element;
                if (element.complete || element instanceof HTMLCanvasElement) {
                    this.handleLoadedTexture();
                } else {
                    var self = this;
                    element.addEventListener('load', function () {
                        self.handleLoadedTexture();
                    });
                    element.addEventListener('error', function (err) {
                        cc.warnID(3119, err.message);
                    });
                }
            },
            initWithData: function initWithData(data, pixelFormat, pixelsWidth, pixelsHeight) {
                var opts = _getSharedOptions();
                opts.image = data;
                opts.images = [opts.image];
                opts.genMipmaps = this._genMipmaps;
                opts.premultiplyAlpha = this._premultiplyAlpha;
                opts.flipY = this._flipY;
                opts.minFilter = FilterIndex[this._minFilter];
                opts.magFilter = FilterIndex[this._magFilter];
                opts.wrapS = this._wrapS;
                opts.wrapT = this._wrapT;
                opts.format = this._getGFXPixelFormat(pixelFormat);
                opts.width = pixelsWidth;
                opts.height = pixelsHeight;
                if (!this._texture) {
                    this._texture = new renderer.Texture2D(renderer.device, opts);
                } else {
                    this._texture.update(opts);
                }
                this.width = pixelsWidth;
                this.height = pixelsHeight;
                this._checkPackable();
                this.loaded = true;
                this.emit('load');
                return true;
            },
            getHtmlElementObj: function getHtmlElementObj() {
                return this._image;
            },
            destroy: function destroy() {
                this._image = null;
                this._texture && this._texture.destroy();
                this._super();
            },
            getPixelFormat: function getPixelFormat() {
                return this._format;
            },
            hasPremultipliedAlpha: function hasPremultipliedAlpha() {
                return this._premultiplyAlpha || false;
            },
            handleLoadedTexture: function handleLoadedTexture() {
                if (!this._image || !this._image.width || !this._image.height)
                    return;
                this.width = this._image.width;
                this.height = this._image.height;
                var opts = _getSharedOptions();
                opts.image = this._image;
                opts.images = [opts.image];
                opts.width = this.width;
                opts.height = this.height;
                opts.genMipmaps = this._genMipmaps;
                opts.format = this._getGFXPixelFormat(this._format);
                opts.premultiplyAlpha = this._premultiplyAlpha;
                opts.flipY = this._flipY;
                opts.minFilter = FilterIndex[this._minFilter];
                opts.magFilter = FilterIndex[this._magFilter];
                opts.wrapS = this._wrapS;
                opts.wrapT = this._wrapT;
                if (!this._texture) {
                    this._texture = new renderer.Texture2D(renderer.device, opts);
                } else {
                    this._texture.update(opts);
                }
                this._checkPackable();
                this.loaded = true;
                this.emit('load');
                if (cc.macro.CLEANUP_IMAGE_CACHE && this._image instanceof HTMLImageElement) {
                    this._clearImage();
                }
            },
            description: function description() {
                return '<cc.Texture2D | Name = ' + this.url + ' | Dimensions = ' + this.width + ' x ' + this.height + '>';
            },
            releaseTexture: function releaseTexture() {
                this._image = null;
                this._texture && this._texture.destroy();
            },
            setWrapMode: function setWrapMode(wrapS, wrapT) {
                if (this._wrapS !== wrapS || this._wrapT !== wrapT) {
                    var opts = _getSharedOptions();
                    opts.wrapS = wrapS;
                    opts.wrapT = wrapT;
                    this.update(opts);
                }
            },
            setFilters: function setFilters(minFilter, magFilter) {
                if (this._minFilter !== minFilter || this._magFilter !== magFilter) {
                    var opts = _getSharedOptions();
                    opts.minFilter = minFilter;
                    opts.magFilter = magFilter;
                    this.update(opts);
                }
            },
            setFlipY: function setFlipY(flipY) {
                if (this._flipY !== flipY) {
                    var opts = _getSharedOptions();
                    opts.flipY = flipY;
                    this.update(opts);
                }
            },
            setPremultiplyAlpha: function setPremultiplyAlpha(premultiply) {
                if (this._premultiplyAlpha !== premultiply) {
                    var opts = _getSharedOptions();
                    opts.premultiplyAlpha = premultiply;
                    this.update(opts);
                }
            },
            _checkPackable: function _checkPackable() {
                var dynamicAtlas = cc.dynamicAtlasManager;
                if (!dynamicAtlas)
                    return;
                if (this._isCompressed()) {
                    this._packable = false;
                    return;
                }
                var w = this.width, h = this.height;
                if (!this._image || w > dynamicAtlas.maxFrameSize || h > dynamicAtlas.maxFrameSize || w <= dynamicAtlas.minFrameSize || h <= dynamicAtlas.minFrameSize || this._getHash() !== dynamicAtlas.Atlas.DEFAULT_HASH) {
                    this._packable = false;
                    return;
                }
                if (this._image && this._image instanceof HTMLCanvasElement) {
                    this._packable = true;
                }
            },
            _getOpts: function _getOpts() {
                var opts = _getSharedOptions();
                opts.width = this.width;
                opts.height = this.height;
                opts.genMipmaps = this._genMipmaps;
                opts.format = this._format;
                opts.premultiplyAlpha = this._premultiplyAlpha;
                opts.anisotropy = this._anisotropy;
                opts.flipY = this._flipY;
                opts.minFilter = FilterIndex[this._minFilter];
                opts.magFilter = FilterIndex[this._magFilter];
                opts.mipFilter = FilterIndex[this._mipFilter];
                opts.wrapS = this._wrapS;
                opts.wrapT = this._wrapT;
                return opts;
            },
            _getGFXPixelFormat: function _getGFXPixelFormat(format) {
                if (format === PixelFormat.RGBA_ETC1) {
                    format = PixelFormat.RGB_ETC1;
                } else if (format === PixelFormat.RGB_A_PVRTC_4BPPV1) {
                    format = PixelFormat.RGB_PVRTC_4BPPV1;
                } else if (format === PixelFormat.RGB_A_PVRTC_2BPPV1) {
                    format = PixelFormat.RGB_PVRTC_2BPPV1;
                }
                return format;
            },
            _resetUnderlyingMipmaps: function _resetUnderlyingMipmaps(mipmapSources) {
                var opts = this._getOpts();
                opts.images = mipmapSources || [null];
                if (!this._texture) {
                    this._texture = new renderer.Texture2D(renderer.device, opts);
                } else {
                    this._texture.update(opts);
                }
            },
            _serialize: (CC_EDITOR || CC_TEST) && function () {
                var extId = '';
                var exportedExts = this._exportedExts;
                if (!exportedExts && this._native) {
                    exportedExts = [this._native];
                }
                if (exportedExts) {
                    var exts = [];
                    for (var i = 0; i < exportedExts.length; i++) {
                        var _extId = '';
                        var ext = exportedExts[i];
                        if (ext) {
                            var extFormat = ext.split('@');
                            _extId = Texture2D.extnames.indexOf(extFormat[0]);
                            if (_extId < 0) {
                                _extId = ext;
                            }
                            if (extFormat[1]) {
                                _extId += '@' + extFormat[1];
                            }
                        }
                        exts.push(_extId);
                    }
                    extId = exts.join('_');
                }
                var asset = extId + ',' + this._minFilter + ',' + this._magFilter + ',' + this._wrapS + ',' + this._wrapT + ',' + ((this._premultiplyAlpha ? 1 : 0) + ',' + (this._genMipmaps ? 1 : 0) + ',' + (this._packable ? 1 : 0));
                return asset;
            },
            _deserialize: function _deserialize(data, handle) {
                var device = cc.renderer.device;
                var fields = data.split(',');
                var extIdStr = fields[0];
                if (extIdStr) {
                    var extIds = extIdStr.split('_');
                    var defaultExt = '';
                    var bestExt = '';
                    var bestIndex = 999;
                    var bestFormat = this._format;
                    var SupportTextureFormats = cc.macro.SUPPORT_TEXTURE_FORMATS;
                    for (var i = 0; i < extIds.length; i++) {
                        var extFormat = extIds[i].split('@');
                        var tmpExt = extFormat[0];
                        tmpExt = Texture2D.extnames[tmpExt.charCodeAt(0) - CHAR_CODE_0] || tmpExt;
                        var index = SupportTextureFormats.indexOf(tmpExt);
                        if (index !== -1 && index < bestIndex) {
                            var tmpFormat = extFormat[1] ? parseInt(extFormat[1]) : this._format;
                            if (tmpExt === '.pvr' && !device.ext('WEBGL_compressed_texture_pvrtc')) {
                                continue;
                            } else if ((tmpFormat === PixelFormat.RGB_ETC1 || tmpFormat === PixelFormat.RGBA_ETC1) && !device.ext('WEBGL_compressed_texture_etc1')) {
                                continue;
                            } else if ((tmpFormat === PixelFormat.RGB_ETC2 || tmpFormat === PixelFormat.RGBA_ETC2) && !device.ext('WEBGL_compressed_texture_etc')) {
                                continue;
                            } else if (tmpExt === '.webp' && !cc.sys.capabilities.webp) {
                                continue;
                            }
                            bestIndex = index;
                            bestExt = tmpExt;
                            bestFormat = tmpFormat;
                        } else if (!defaultExt) {
                            defaultExt = tmpExt;
                        }
                    }
                    if (bestExt) {
                        this._setRawAsset(bestExt);
                        this._format = bestFormat;
                    } else {
                        this._setRawAsset(defaultExt);
                        cc.warnID(3120, handle.customEnv.url, defaultExt, defaultExt);
                    }
                }
                if (fields.length === 8) {
                    this._minFilter = parseInt(fields[1]);
                    this._magFilter = parseInt(fields[2]);
                    this._wrapS = parseInt(fields[3]);
                    this._wrapT = parseInt(fields[4]);
                    this._premultiplyAlpha = fields[5].charCodeAt(0) === CHAR_CODE_1;
                    this._genMipmaps = fields[6].charCodeAt(0) === CHAR_CODE_1;
                    this._packable = fields[7].charCodeAt(0) === CHAR_CODE_1;
                }
            },
            _getHash: function _getHash() {
                if (!this._hashDirty) {
                    return this._hash;
                }
                var genMipmaps = this._genMipmaps ? 1 : 0;
                var premultiplyAlpha = this._premultiplyAlpha ? 1 : 0;
                var flipY = this._flipY ? 1 : 0;
                var minFilter = this._minFilter === Filter.LINEAR ? 1 : 2;
                var magFilter = this._magFilter === Filter.LINEAR ? 1 : 2;
                var wrapS = this._wrapS === WrapMode.REPEAT ? 1 : this._wrapS === WrapMode.CLAMP_TO_EDGE ? 2 : 3;
                var wrapT = this._wrapT === WrapMode.REPEAT ? 1 : this._wrapT === WrapMode.CLAMP_TO_EDGE ? 2 : 3;
                var pixelFormat = this._format;
                var image = this._image;
                if (CC_JSB && image) {
                    if (image._glFormat && image._glFormat !== GL_RGBA)
                        pixelFormat = 0;
                    premultiplyAlpha = image._premultiplyAlpha ? 1 : 0;
                }
                this._hash = Number('' + minFilter + magFilter + pixelFormat + wrapS + wrapT + genMipmaps + premultiplyAlpha + flipY);
                this._hashDirty = false;
                return this._hash;
            },
            _isCompressed: function _isCompressed() {
                return this._texture && this._texture._compressed;
            },
            _clearImage: function _clearImage() {
                cc.loader.removeItem(this._image.id || this._image.src);
                this._image.src = '';
            }
        });
        cc.Texture2D = module.exports = Texture2D;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,