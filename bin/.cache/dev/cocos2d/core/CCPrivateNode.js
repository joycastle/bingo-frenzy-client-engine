(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/CCPrivateNode.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Node = require('./CCNode');
        var RenderFlow = require('./renderer/render-flow');
        var HideInHierarchy = cc.Object.Flags.HideInHierarchy;
        var LocalDirtyFlag = Node._LocalDirtyFlag;
        var POSITION_ON = 1 << 0;
        var PrivateNode = cc.Class({
            name: 'cc.PrivateNode',
            extends: Node,
            properties: {
                x: {
                    get: function get() {
                        return this._originPos.x;
                    },
                    set: function set(value) {
                        var localPosition = this._originPos;
                        if (value !== localPosition.x) {
                            localPosition.x = value;
                            this._posDirty(true);
                        }
                    },
                    override: true
                },
                y: {
                    get: function get() {
                        return this._originPos.y;
                    },
                    set: function set(value) {
                        var localPosition = this._originPos;
                        if (value !== localPosition.y) {
                            localPosition.y = value;
                            this._posDirty(true);
                        }
                    },
                    override: true
                },
                zIndex: {
                    get: function get() {
                        return cc.macro.MIN_ZINDEX;
                    },
                    set: function set() {
                        cc.warnID(1638);
                    },
                    override: true
                },
                showInEditor: {
                    default: false,
                    editorOnly: true,
                    override: true
                }
            },
            ctor: function ctor(name) {
                this._localZOrder = cc.macro.MIN_ZINDEX << 16;
                this._originPos = cc.v2();
                if (CC_EDITOR) {
                    this._objFlags |= HideInHierarchy;
                }
            },
            _posDirty: function _posDirty(sendEvent) {
                this.setLocalDirty(LocalDirtyFlag.POSITION);
                !CC_NATIVERENDERER && (this._renderFlag |= RenderFlow.FLAG_TRANSFORM);
                if (sendEvent === true && this._eventMask & POSITION_ON) {
                    this.emit(Node.EventType.POSITION_CHANGED);
                }
            },
            _updateLocalMatrix: function _updateLocalMatrix() {
                if (!this._localMatDirty)
                    return;
                var parent = this.parent;
                if (parent) {
                    this._trs[0] = this._originPos.x - (parent._anchorPoint.x - 0.5) * parent._contentSize.width;
                    this._trs[1] = this._originPos.y - (parent._anchorPoint.y - 0.5) * parent._contentSize.height;
                }
                this._super();
            },
            getPosition: function getPosition() {
                return new cc.Vec2(this._originPos);
            },
            setPosition: function setPosition(x, y) {
                if (y === undefined) {
                    x = x.x;
                    y = x.y;
                }
                var pos = this._originPos;
                if (pos.x === x && pos.y === y) {
                    return;
                }
                pos.x = x;
                pos.y = y;
                this._posDirty(true);
            },
            setParent: function setParent(value) {
                var oldParent = this._parent;
                this._super(value);
                if (oldParent !== value) {
                    if (oldParent) {
                        oldParent.off(Node.EventType.ANCHOR_CHANGED, this._posDirty, this);
                    }
                    if (value) {
                        value.on(Node.EventType.ANCHOR_CHANGED, this._posDirty, this);
                    }
                }
            },
            _updateOrderOfArrival: function _updateOrderOfArrival() {
            }
        });
        cc.js.getset(PrivateNode.prototype, 'parent', PrivateNode.prototype.getParent, PrivateNode.prototype.setParent);
        cc.js.getset(PrivateNode.prototype, 'position', PrivateNode.prototype.getPosition, PrivateNode.prototype.setPosition);
        cc.PrivateNode = module.exports = PrivateNode;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,