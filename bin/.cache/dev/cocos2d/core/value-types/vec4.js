(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/value-types/vec4.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _valueType = require('./value-type');
        var _valueType2 = _interopRequireDefault(_valueType);
        var _CCClass = require('../platform/CCClass');
        var _CCClass2 = _interopRequireDefault(_CCClass);
        var _vmath = require('../vmath');
        var _misc = require('../utils/misc');
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var Vec4 = function (_ValueType) {
            _inherits(Vec4, _ValueType);
            function Vec4(x, y, z, w) {
                _classCallCheck(this, Vec4);
                var _this = _possibleConstructorReturn(this, (Vec4.__proto__ || Object.getPrototypeOf(Vec4)).call(this));
                if (x && (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object') {
                    w = x.w;
                    z = x.z;
                    y = x.y;
                    x = x.x;
                }
                _this.x = x || 0;
                _this.y = y || 0;
                _this.z = z || 0;
                _this.w = w || 0;
                return _this;
            }
            _createClass(Vec4, [
                {
                    key: 'clone',
                    value: function clone() {
                        return new Vec4(this.x, this.y, this.z, this.w);
                    }
                },
                {
                    key: 'set',
                    value: function set(newValue) {
                        this.x = newValue.x;
                        this.y = newValue.y;
                        this.z = newValue.z;
                        this.w = newValue.w;
                        return this;
                    }
                },
                {
                    key: 'equals',
                    value: function equals(other) {
                        return other && this.x === other.x && this.y === other.y && this.z === other.z && this.w === other.w;
                    }
                },
                {
                    key: 'fuzzyEquals',
                    value: function fuzzyEquals(other, variance) {
                        if (this.x - variance <= other.x && other.x <= this.x + variance) {
                            if (this.y - variance <= other.y && other.y <= this.y + variance) {
                                if (this.z - variance <= other.z && other.z <= this.z + variance) {
                                    if (this.w - variance <= other.w && other.w <= this.w + variance)
                                        return true;
                                }
                            }
                        }
                        return false;
                    }
                },
                {
                    key: 'toString',
                    value: function toString() {
                        return '(' + this.x.toFixed(2) + ', ' + this.y.toFixed(2) + ', ' + this.z.toFixed(2) + ', ' + this.w.toFixed(2) + ')';
                    }
                },
                {
                    key: 'lerp',
                    value: function lerp(to, ratio, out) {
                        out = out || new Vec4();
                        _vmath.vec4.lerp(out, this, to, ratio);
                        return out;
                    }
                },
                {
                    key: 'clampf',
                    value: function clampf(min_inclusive, max_inclusive) {
                        this.x = (0, _misc.clampf)(this.x, min_inclusive.x, max_inclusive.x);
                        this.y = (0, _misc.clampf)(this.y, min_inclusive.y, max_inclusive.y);
                        this.z = (0, _misc.clampf)(this.z, min_inclusive.z, max_inclusive.z);
                        this.w = (0, _misc.clampf)(this.w, min_inclusive.w, max_inclusive.w);
                        return this;
                    }
                },
                {
                    key: 'addSelf',
                    value: function addSelf(vector) {
                        this.x += vector.x;
                        this.y += vector.y;
                        this.z += vector.z;
                        this.w += vector.w;
                        return this;
                    }
                },
                {
                    key: 'add',
                    value: function add(vector, out) {
                        out = out || new Vec4();
                        out.x = this.x + vector.x;
                        out.y = this.y + vector.y;
                        out.z = this.z + vector.z;
                        out.w = this.w + vector.w;
                        return out;
                    }
                },
                {
                    key: 'subSelf',
                    value: function subSelf(vector) {
                        this.x -= vector.x;
                        this.y -= vector.y;
                        this.z -= vector.z;
                        this.w -= vector.w;
                        return this;
                    }
                },
                {
                    key: 'sub',
                    value: function sub(vector, out) {
                        out = out || new Vec4();
                        out.x = this.x - vector.x;
                        out.y = this.y - vector.y;
                        out.z = this.z - vector.z;
                        out.w = this.w - vector.w;
                        return out;
                    }
                },
                {
                    key: 'mulSelf',
                    value: function mulSelf(num) {
                        this.x *= num;
                        this.y *= num;
                        this.z *= num;
                        this.w *= num;
                        return this;
                    }
                },
                {
                    key: 'mul',
                    value: function mul(num, out) {
                        out = out || new Vec4();
                        out.x = this.x * num;
                        out.y = this.y * num;
                        out.z = this.z * num;
                        out.w = this.w * num;
                        return out;
                    }
                },
                {
                    key: 'scaleSelf',
                    value: function scaleSelf(vector) {
                        this.x *= vector.x;
                        this.y *= vector.y;
                        this.z *= vector.z;
                        this.w *= vector.w;
                        return this;
                    }
                },
                {
                    key: 'scale',
                    value: function scale(vector, out) {
                        out = out || new Vec4();
                        out.x = this.x * vector.x;
                        out.y = this.y * vector.y;
                        out.z = this.z * vector.z;
                        out.w = this.w * vector.w;
                        return out;
                    }
                },
                {
                    key: 'divSelf',
                    value: function divSelf(num) {
                        this.x /= num;
                        this.y /= num;
                        this.z /= num;
                        this.w /= num;
                        return this;
                    }
                },
                {
                    key: 'div',
                    value: function div(num, out) {
                        out = out || new Vec4();
                        out.x = this.x / num;
                        out.y = this.y / num;
                        out.z = this.z / num;
                        out.w = this.w / num;
                        return out;
                    }
                },
                {
                    key: 'negSelf',
                    value: function negSelf() {
                        this.x = -this.x;
                        this.y = -this.y;
                        this.z = -this.z;
                        this.w = -this.w;
                        return this;
                    }
                },
                {
                    key: 'neg',
                    value: function neg(out) {
                        out = out || new Vec4();
                        out.x = -this.x;
                        out.y = -this.y;
                        out.z = -this.z;
                        out.w = -this.w;
                        return out;
                    }
                },
                {
                    key: 'dot',
                    value: function dot(vector) {
                        return this.x * vector.x + this.y * vector.y + this.z * vector.z + this.w * vector.w;
                    }
                },
                {
                    key: 'cross',
                    value: function cross(vector, out) {
                        out = out || new Vec4();
                        _vmath.vec4.cross(out, this, vector);
                        return out;
                    }
                },
                {
                    key: 'mag',
                    value: function mag() {
                        var x = this.x, y = this.y, z = this.z, w = this.w;
                        return Math.sqrt(x * x + y * y + z * z + w * w);
                    }
                },
                {
                    key: 'magSqr',
                    value: function magSqr() {
                        var x = this.x, y = this.y, z = this.z, w = this.w;
                        return x * x + y * y + z * z + w * w;
                    }
                },
                {
                    key: 'normalizeSelf',
                    value: function normalizeSelf() {
                        _vmath.vec4.normalize(this, this);
                        return this;
                    }
                },
                {
                    key: 'normalize',
                    value: function normalize(out) {
                        out = out || new Vec4();
                        _vmath.vec4.normalize(out, this);
                        return out;
                    }
                },
                {
                    key: 'transformMat4',
                    value: function transformMat4(m, out) {
                        out = out || new Vec4();
                        _vmath.vec4.transformMat4(out, this, m);
                        return out;
                    }
                },
                {
                    key: 'array',
                    value: function array(out) {
                        _vmath.vec4.array(out, this);
                    }
                }
            ]);
            return Vec4;
        }(_valueType2.default);
        _CCClass2.default.fastDefine('cc.Vec4', Vec4, {
            x: 0,
            y: 0,
            z: 0,
            w: 0
        });
        cc.v4 = function v4(x, y, z, w) {
            return new Vec4(x, y, z, w);
        };
        module.exports = cc.Vec4 = Vec4;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,