(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/value-types/color.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var _vmath = require('../vmath');
        var ValueType = require('./value-type');
        var js = require('../platform/js');
        var Color = function () {
            function Color(r, g, b, a) {
                if ((typeof r === 'undefined' ? 'undefined' : _typeof(r)) === 'object') {
                    g = r.g;
                    b = r.b;
                    a = r.a;
                    r = r.r;
                }
                r = r || 0;
                g = g || 0;
                b = b || 0;
                a = typeof a === 'number' ? a : 255;
                this._val = (a << 24 >>> 0) + (b << 16) + (g << 8) + r;
            }
            js.extend(Color, ValueType);
            require('../platform/CCClass').fastDefine('cc.Color', Color, {
                r: 0,
                g: 0,
                b: 0,
                a: 255
            });
            var DefaultColors = {
                WHITE: [
                    255,
                    255,
                    255,
                    255
                ],
                BLACK: [
                    0,
                    0,
                    0,
                    255
                ],
                TRANSPARENT: [
                    0,
                    0,
                    0,
                    0
                ],
                GRAY: [
                    127.5,
                    127.5,
                    127.5
                ],
                RED: [
                    255,
                    0,
                    0
                ],
                GREEN: [
                    0,
                    255,
                    0
                ],
                BLUE: [
                    0,
                    0,
                    255
                ],
                YELLOW: [
                    255,
                    235,
                    4
                ],
                ORANGE: [
                    255,
                    127,
                    0
                ],
                CYAN: [
                    0,
                    255,
                    255
                ],
                MAGENTA: [
                    255,
                    0,
                    255
                ]
            };
            for (var colorName in DefaultColors) {
                js.get(Color, colorName, function (rgba) {
                    return function () {
                        return new Color(rgba[0], rgba[1], rgba[2], rgba[3]);
                    };
                }(DefaultColors[colorName]));
            }
            var proto = Color.prototype;
            proto.clone = function () {
                var ret = new Color();
                ret._val = this._val;
                return ret;
            };
            proto.equals = function (other) {
                return other && this._val === other._val;
            };
            proto.lerp = function (to, ratio, out) {
                out = out || new Color();
                var r = this.r;
                var g = this.g;
                var b = this.b;
                var a = this.a;
                out.r = r + (to.r - r) * ratio;
                out.g = g + (to.g - g) * ratio;
                out.b = b + (to.b - b) * ratio;
                out.a = a + (to.a - a) * ratio;
                return out;
            };
            proto.toString = function () {
                return 'rgba(' + this.r.toFixed() + ', ' + this.g.toFixed() + ', ' + this.b.toFixed() + ', ' + this.a.toFixed() + ')';
            };
            proto.getR = function () {
                return this._val & 255;
            };
            proto.setR = function (red) {
                red = ~~cc.misc.clampf(red, 0, 255);
                this._val = (this._val & 4294967040 | red) >>> 0;
                return this;
            };
            proto.getG = function () {
                return (this._val & 65280) >> 8;
            };
            proto.setG = function (green) {
                green = ~~cc.misc.clampf(green, 0, 255);
                this._val = (this._val & 4294902015 | green << 8) >>> 0;
                return this;
            };
            proto.getB = function () {
                return (this._val & 16711680) >> 16;
            };
            proto.setB = function (blue) {
                blue = ~~cc.misc.clampf(blue, 0, 255);
                this._val = (this._val & 4278255615 | blue << 16) >>> 0;
                return this;
            };
            proto.getA = function () {
                return (this._val & 4278190080) >>> 24;
            };
            proto.setA = function (alpha) {
                alpha = ~~cc.misc.clampf(alpha, 0, 255);
                this._val = (this._val & 16777215 | alpha << 24) >>> 0;
                return this;
            };
            proto._fastSetA = function (alpha) {
                this._val = (this._val & 16777215 | alpha << 24) >>> 0;
            };
            js.getset(proto, 'r', proto.getR, proto.setR, true);
            js.getset(proto, 'g', proto.getG, proto.setG, true);
            js.getset(proto, 'b', proto.getB, proto.setB, true);
            js.getset(proto, 'a', proto.getA, proto.setA, true);
            proto.toCSS = function (opt) {
                if (opt === 'rgba') {
                    return 'rgba(' + (this.r | 0) + ',' + (this.g | 0) + ',' + (this.b | 0) + ',' + (this.a / 255).toFixed(2) + ')';
                } else if (opt === 'rgb') {
                    return 'rgb(' + (this.r | 0) + ',' + (this.g | 0) + ',' + (this.b | 0) + ')';
                } else {
                    return '#' + this.toHEX(opt);
                }
            };
            proto.fromHEX = function (hexString) {
                hexString = hexString.indexOf('#') === 0 ? hexString.substring(1) : hexString;
                var r = parseInt(hexString.substr(0, 2), 16) || 0;
                var g = parseInt(hexString.substr(2, 2), 16) || 0;
                var b = parseInt(hexString.substr(4, 2), 16) || 0;
                var a = parseInt(hexString.substr(6, 2), 16);
                a = Number.isNaN(a) ? 255 : a;
                this._val = (a << 24 >>> 0) + (b << 16) + (g << 8) + r;
                return this;
            };
            proto.toHEX = function (fmt) {
                var prefix = '0';
                var hex = [
                    (this.r < 16 ? prefix : '') + (this.r | 0).toString(16),
                    (this.g < 16 ? prefix : '') + (this.g | 0).toString(16),
                    (this.b < 16 ? prefix : '') + (this.b | 0).toString(16)
                ];
                var i = -1;
                if (fmt === '#rgb') {
                    for (i = 0; i < hex.length; ++i) {
                        if (hex[i].length > 1) {
                            hex[i] = hex[i][0];
                        }
                    }
                } else if (fmt === '#rrggbb') {
                    for (i = 0; i < hex.length; ++i) {
                        if (hex[i].length === 1) {
                            hex[i] = '0' + hex[i];
                        }
                    }
                } else if (fmt === '#rrggbbaa') {
                    hex.push((this.a < 16 ? prefix : '') + (this.a | 0).toString(16));
                }
                return hex.join('');
            };
            proto.toRGBValue = function () {
                return this._val & 16777215;
            };
            proto.fromHSV = function (h, s, v) {
                var r, g, b;
                if (s === 0) {
                    r = g = b = v;
                } else {
                    if (v === 0) {
                        r = g = b = 0;
                    } else {
                        if (h === 1)
                            h = 0;
                        h *= 6;
                        s = s;
                        v = v;
                        var i = Math.floor(h);
                        var f = h - i;
                        var p = v * (1 - s);
                        var q = v * (1 - s * f);
                        var t = v * (1 - s * (1 - f));
                        switch (i) {
                        case 0:
                            r = v;
                            g = t;
                            b = p;
                            break;
                        case 1:
                            r = q;
                            g = v;
                            b = p;
                            break;
                        case 2:
                            r = p;
                            g = v;
                            b = t;
                            break;
                        case 3:
                            r = p;
                            g = q;
                            b = v;
                            break;
                        case 4:
                            r = t;
                            g = p;
                            b = v;
                            break;
                        case 5:
                            r = v;
                            g = p;
                            b = q;
                            break;
                        }
                    }
                }
                r *= 255;
                g *= 255;
                b *= 255;
                this._val = (this.a << 24 >>> 0) + (b << 16) + (g << 8) + r;
                return this;
            };
            proto.toHSV = function () {
                var r = this.r / 255;
                var g = this.g / 255;
                var b = this.b / 255;
                var hsv = {
                    h: 0,
                    s: 0,
                    v: 0
                };
                var max = Math.max(r, g, b);
                var min = Math.min(r, g, b);
                var delta = 0;
                hsv.v = max;
                hsv.s = max ? (max - min) / max : 0;
                if (!hsv.s)
                    hsv.h = 0;
                else {
                    delta = max - min;
                    if (r === max)
                        hsv.h = (g - b) / delta;
                    else if (g === max)
                        hsv.h = 2 + (b - r) / delta;
                    else
                        hsv.h = 4 + (r - g) / delta;
                    hsv.h /= 6;
                    if (hsv.h < 0)
                        hsv.h += 1;
                }
                return hsv;
            };
            proto.set = function (color) {
                if (color._val) {
                    this._val = color._val;
                } else {
                    this.r = color.r;
                    this.g = color.g;
                    this.b = color.b;
                    this.a = color.a;
                }
            };
            proto.array = function (out) {
                _vmath.color4.array(out, this);
            };
            return Color;
        }();
        cc.Color = Color;
        cc.color = function color(r, g, b, a) {
            if (typeof r === 'string') {
                var result = new cc.Color();
                return result.fromHEX(r);
            }
            if ((typeof r === 'undefined' ? 'undefined' : _typeof(r)) === 'object') {
                return new cc.Color(r.r, r.g, r.b, r.a);
            }
            return new cc.Color(r, g, b, a);
        };
        module.exports = cc.Color;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,