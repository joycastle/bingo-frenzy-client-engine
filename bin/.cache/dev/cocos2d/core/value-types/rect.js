(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/value-types/rect.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var ValueType = require('./value-type');
        var js = require('../platform/js');
        function Rect(x, y, w, h) {
            if (x && (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object') {
                y = x.y;
                w = x.width;
                h = x.height;
                x = x.x;
            }
            this.x = x || 0;
            this.y = y || 0;
            this.width = w || 0;
            this.height = h || 0;
        }
        js.extend(Rect, ValueType);
        require('../platform/CCClass').fastDefine('cc.Rect', Rect, {
            x: 0,
            y: 0,
            width: 0,
            height: 0
        });
        Rect.fromMinMax = function (v1, v2) {
            var min_x = Math.min(v1.x, v2.x);
            var min_y = Math.min(v1.y, v2.y);
            var max_x = Math.max(v1.x, v2.x);
            var max_y = Math.max(v1.y, v2.y);
            return new Rect(min_x, min_y, max_x - min_x, max_y - min_y);
        };
        var proto = Rect.prototype;
        proto.clone = function () {
            return new Rect(this.x, this.y, this.width, this.height);
        };
        proto.equals = function (other) {
            return other && this.x === other.x && this.y === other.y && this.width === other.width && this.height === other.height;
        };
        proto.lerp = function (to, ratio, out) {
            out = out || new Rect();
            var x = this.x;
            var y = this.y;
            var width = this.width;
            var height = this.height;
            out.x = x + (to.x - x) * ratio;
            out.y = y + (to.y - y) * ratio;
            out.width = width + (to.width - width) * ratio;
            out.height = height + (to.height - height) * ratio;
            return out;
        };
        proto.set = function (source) {
            this.x = source.x;
            this.y = source.y;
            this.width = source.width;
            this.height = source.height;
        };
        proto.intersects = function (rect) {
            var maxax = this.x + this.width, maxay = this.y + this.height, maxbx = rect.x + rect.width, maxby = rect.y + rect.height;
            return !(maxax < rect.x || maxbx < this.x || maxay < rect.y || maxby < this.y);
        };
        proto.intersection = function (out, rectB) {
            var axMin = this.x, ayMin = this.y, axMax = this.x + this.width, ayMax = this.y + this.height;
            var bxMin = rectB.x, byMin = rectB.y, bxMax = rectB.x + rectB.width, byMax = rectB.y + rectB.height;
            out.x = Math.max(axMin, bxMin);
            out.y = Math.max(ayMin, byMin);
            out.width = Math.min(axMax, bxMax) - out.x;
            out.height = Math.min(ayMax, byMax) - out.y;
            return out;
        };
        proto.contains = function (point) {
            return this.x <= point.x && this.x + this.width >= point.x && this.y <= point.y && this.y + this.height >= point.y;
        };
        proto.containsRect = function (rect) {
            return this.x <= rect.x && this.x + this.width >= rect.x + rect.width && this.y <= rect.y && this.y + this.height >= rect.y + rect.height;
        };
        proto.union = function (out, rectB) {
            var ax = this.x, ay = this.y, aw = this.width, ah = this.height;
            var bx = rectB.x, by = rectB.y, bw = rectB.width, bh = rectB.height;
            out.x = Math.min(ax, bx);
            out.y = Math.min(ay, by);
            out.width = Math.max(ax + aw, bx + bw) - out.x;
            out.height = Math.max(ay + ah, by + bh) - out.y;
            return out;
        };
        proto.transformMat4 = function (out, mat) {
            var ol = this.x;
            var ob = this.y;
            var or = ol + this.width;
            var ot = ob + this.height;
            var matm = mat.m;
            var lbx = matm[0] * ol + matm[4] * ob + matm[12];
            var lby = matm[1] * ol + matm[5] * ob + matm[13];
            var rbx = matm[0] * or + matm[4] * ob + matm[12];
            var rby = matm[1] * or + matm[5] * ob + matm[13];
            var ltx = matm[0] * ol + matm[4] * ot + matm[12];
            var lty = matm[1] * ol + matm[5] * ot + matm[13];
            var rtx = matm[0] * or + matm[4] * ot + matm[12];
            var rty = matm[1] * or + matm[5] * ot + matm[13];
            var minX = Math.min(lbx, rbx, ltx, rtx);
            var maxX = Math.max(lbx, rbx, ltx, rtx);
            var minY = Math.min(lby, rby, lty, rty);
            var maxY = Math.max(lby, rby, lty, rty);
            out.x = minX;
            out.y = minY;
            out.width = maxX - minX;
            out.height = maxY - minY;
            return out;
        };
        proto.toString = function () {
            return '(' + this.x.toFixed(2) + ', ' + this.y.toFixed(2) + ', ' + this.width.toFixed(2) + ', ' + this.height.toFixed(2) + ')';
        };
        js.getset(proto, 'xMin', function () {
            return this.x;
        }, function (value) {
            this.width += this.x - value;
            this.x = value;
        });
        js.getset(proto, 'yMin', function () {
            return this.y;
        }, function (value) {
            this.height += this.y - value;
            this.y = value;
        });
        js.getset(proto, 'xMax', function () {
            return this.x + this.width;
        }, function (value) {
            this.width = value - this.x;
        });
        js.getset(proto, 'yMax', function () {
            return this.y + this.height;
        }, function (value) {
            this.height = value - this.y;
        });
        js.getset(proto, 'center', function () {
            return new cc.Vec2(this.x + this.width * 0.5, this.y + this.height * 0.5);
        }, function (value) {
            this.x = value.x - this.width * 0.5;
            this.y = value.y - this.height * 0.5;
        });
        js.getset(proto, 'origin', function () {
            return new cc.Vec2(this.x, this.y);
        }, function (value) {
            this.x = value.x;
            this.y = value.y;
        });
        js.getset(proto, 'size', function () {
            return new cc.Size(this.width, this.height);
        }, function (value) {
            this.width = value.width;
            this.height = value.height;
        });
        cc.Rect = Rect;
        cc.rect = function rect(x, y, w, h) {
            return new Rect(x, y, w, h);
        };
        module.exports = cc.Rect;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,