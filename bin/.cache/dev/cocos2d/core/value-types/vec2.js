(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/value-types/vec2.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var _vmath = require('../vmath');
        var ValueType = require('./value-type');
        var js = require('../platform/js');
        var CCClass = require('../platform/CCClass');
        var misc = require('../utils/misc');
        function Vec2(x, y) {
            if (x && (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object') {
                y = x.y;
                x = x.x;
            }
            this.x = x || 0;
            this.y = y || 0;
        }
        js.extend(Vec2, ValueType);
        CCClass.fastDefine('cc.Vec2', Vec2, {
            x: 0,
            y: 0
        });
        var proto = Vec2.prototype;
        js.value(proto, 'z', 0, true);
        proto.clone = function () {
            return new Vec2(this.x, this.y);
        };
        proto.set = function (newValue) {
            this.x = newValue.x;
            this.y = newValue.y;
            return this;
        };
        proto.equals = function (other) {
            return other && this.x === other.x && this.y === other.y;
        };
        proto.fuzzyEquals = function (other, variance) {
            if (this.x - variance <= other.x && other.x <= this.x + variance) {
                if (this.y - variance <= other.y && other.y <= this.y + variance)
                    return true;
            }
            return false;
        };
        proto.toString = function () {
            return '(' + this.x.toFixed(2) + ', ' + this.y.toFixed(2) + ')';
        };
        proto.lerp = function (to, ratio, out) {
            out = out || new Vec2();
            var x = this.x;
            var y = this.y;
            out.x = x + (to.x - x) * ratio;
            out.y = y + (to.y - y) * ratio;
            return out;
        };
        proto.clampf = function (min_inclusive, max_inclusive) {
            this.x = misc.clampf(this.x, min_inclusive.x, max_inclusive.x);
            this.y = misc.clampf(this.y, min_inclusive.y, max_inclusive.y);
            return this;
        };
        proto.addSelf = function (vector) {
            this.x += vector.x;
            this.y += vector.y;
            return this;
        };
        proto.add = function (vector, out) {
            out = out || new Vec2();
            out.x = this.x + vector.x;
            out.y = this.y + vector.y;
            return out;
        };
        proto.subSelf = function (vector) {
            this.x -= vector.x;
            this.y -= vector.y;
            return this;
        };
        proto.sub = function (vector, out) {
            out = out || new Vec2();
            out.x = this.x - vector.x;
            out.y = this.y - vector.y;
            return out;
        };
        proto.mulSelf = function (num) {
            this.x *= num;
            this.y *= num;
            return this;
        };
        proto.mul = function (num, out) {
            out = out || new Vec2();
            out.x = this.x * num;
            out.y = this.y * num;
            return out;
        };
        proto.scaleSelf = function (vector) {
            this.x *= vector.x;
            this.y *= vector.y;
            return this;
        };
        proto.scale = function (vector, out) {
            out = out || new Vec2();
            out.x = this.x * vector.x;
            out.y = this.y * vector.y;
            return out;
        };
        proto.divSelf = function (num) {
            this.x /= num;
            this.y /= num;
            return this;
        };
        proto.div = function (num, out) {
            out = out || new Vec2();
            out.x = this.x / num;
            out.y = this.y / num;
            return out;
        };
        proto.negSelf = function () {
            this.x = -this.x;
            this.y = -this.y;
            return this;
        };
        proto.neg = function (out) {
            out = out || new Vec2();
            out.x = -this.x;
            out.y = -this.y;
            return out;
        };
        proto.dot = function (vector) {
            return this.x * vector.x + this.y * vector.y;
        };
        proto.cross = function (vector) {
            return this.x * vector.y - this.y * vector.x;
        };
        proto.mag = function () {
            return Math.sqrt(this.x * this.x + this.y * this.y);
        };
        proto.magSqr = function () {
            return this.x * this.x + this.y * this.y;
        };
        proto.normalizeSelf = function () {
            var magSqr = this.x * this.x + this.y * this.y;
            if (magSqr === 1)
                return this;
            if (magSqr === 0) {
                return this;
            }
            var invsqrt = 1 / Math.sqrt(magSqr);
            this.x *= invsqrt;
            this.y *= invsqrt;
            return this;
        };
        proto.normalize = function (out) {
            out = out || new Vec2();
            out.x = this.x;
            out.y = this.y;
            out.normalizeSelf();
            return out;
        };
        proto.angle = function (vector) {
            var magSqr1 = this.magSqr();
            var magSqr2 = vector.magSqr();
            if (magSqr1 === 0 || magSqr2 === 0) {
                console.warn('Can\'t get angle between zero vector');
                return 0;
            }
            var dot = this.dot(vector);
            var theta = dot / Math.sqrt(magSqr1 * magSqr2);
            theta = misc.clampf(theta, -1, 1);
            return Math.acos(theta);
        };
        proto.signAngle = function (vector) {
            var angle = this.angle(vector);
            return this.cross(vector) < 0 ? -angle : angle;
        };
        proto.rotate = function (radians, out) {
            out = out || new Vec2();
            out.x = this.x;
            out.y = this.y;
            return out.rotateSelf(radians);
        };
        proto.rotateSelf = function (radians) {
            var sin = Math.sin(radians);
            var cos = Math.cos(radians);
            var x = this.x;
            this.x = cos * x - sin * this.y;
            this.y = sin * x + cos * this.y;
            return this;
        };
        proto.project = function (vector) {
            return vector.mul(this.dot(vector) / vector.dot(vector));
        };
        proto.transformMat4 = function (m, out) {
            out = out || new Vec2();
            _vmath.vec2.transformMat4(out, this, m);
        };
        proto.fromTranslation = function (trs) {
            this.x = trs[0];
            this.y = trs[1];
            return this;
        };
        proto.toTranslation = function (trs) {
            trs[0] = this.x;
            trs[1] = this.y;
        };
        proto.fromScale = function (trs) {
            this.x = trs[7];
            this.y = trs[8];
            return this;
        };
        proto.toScale = function (trs) {
            trs[7] = this.x;
            trs[8] = this.y;
        };
        proto.array = function (out) {
            _vmath.vec2.array(out, this);
        };
        js.get(Vec2, 'ONE', function () {
            return new Vec2(1, 1);
        });
        js.get(Vec2, 'ZERO', function () {
            return new Vec2(0, 0);
        });
        js.get(Vec2, 'UP', function () {
            return new Vec2(0, 1);
        });
        js.get(Vec2, 'RIGHT', function () {
            return new Vec2(1, 0);
        });
        cc.Vec2 = Vec2;
        cc.v2 = function v2(x, y) {
            return new Vec2(x, y);
        };
        cc.p = cc.v2;
        module.exports = cc.Vec2;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,