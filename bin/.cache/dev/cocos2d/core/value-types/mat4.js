(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/value-types/mat4.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _vmath = require('../vmath');
        var _utils = require('../vmath/utils');
        var ValueType = require('./value-type');
        var js = require('../platform/js');
        var CCClass = require('../platform/CCClass');
        function Mat4(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
            this.m = new _utils.FLOAT_ARRAY_TYPE(16);
            var tm = this.m;
            tm[0] = m00;
            tm[1] = m01;
            tm[2] = m02;
            tm[3] = m03;
            tm[4] = m10;
            tm[5] = m11;
            tm[6] = m12;
            tm[7] = m13;
            tm[8] = m20;
            tm[9] = m21;
            tm[10] = m22;
            tm[11] = m23;
            tm[12] = m30;
            tm[13] = m31;
            tm[14] = m32;
            tm[15] = m33;
        }
        js.extend(Mat4, ValueType);
        CCClass.fastDefine('cc.Mat4', Mat4, {
            m00: 1,
            m01: 0,
            m02: 0,
            m03: 0,
            m04: 0,
            m05: 1,
            m06: 0,
            m07: 0,
            m08: 0,
            m09: 0,
            m10: 1,
            m11: 0,
            m12: 0,
            m13: 0,
            m14: 0,
            m15: 1
        });
        var _loop = function _loop(i) {
            Object.defineProperty(Mat4.prototype, 'm' + i, {
                get: function get() {
                    return this.m[i];
                },
                set: function set(value) {
                    this.m[i] = value;
                }
            });
        };
        for (var i = 0; i < 16; i++) {
            _loop(i);
        }
        js.mixin(Mat4.prototype, {
            clone: function clone() {
                var t = this;
                var tm = t.m;
                return new Mat4(tm[0], tm[1], tm[2], tm[3], tm[4], tm[5], tm[6], tm[7], tm[8], tm[9], tm[10], tm[11], tm[12], tm[13], tm[14], tm[15]);
            },
            set: function set(s) {
                var t = this;
                var tm = t.m, sm = s.m;
                tm[0] = sm[0];
                tm[1] = sm[1];
                tm[2] = sm[2];
                tm[3] = sm[3];
                tm[4] = sm[4];
                tm[5] = sm[5];
                tm[6] = sm[6];
                tm[7] = sm[7];
                tm[8] = sm[8];
                tm[9] = sm[9];
                tm[10] = sm[10];
                tm[11] = sm[11];
                tm[12] = sm[12];
                tm[13] = sm[13];
                tm[14] = sm[14];
                tm[15] = sm[15];
                return this;
            },
            equals: function equals(other) {
                return _vmath.mat4.exactEquals(this, other);
            },
            fuzzyEquals: function fuzzyEquals(other) {
                return _vmath.mat4.equals(this, other);
            },
            toString: function toString() {
                var tm = this.m;
                if (tm) {
                    return '[\n' + tm[0] + ', ' + tm[1] + ', ' + tm[2] + ', ' + tm[3] + ',\n' + tm[4] + ', ' + tm[5] + ', ' + tm[6] + ', ' + tm[7] + ',\n' + tm[8] + ', ' + tm[9] + ', ' + tm[10] + ', ' + tm[11] + ',\n' + tm[12] + ', ' + tm[13] + ', ' + tm[14] + ', ' + tm[15] + '\n' + ']';
                } else {
                    return '[\n' + '1, 0, 0, 0\n' + '0, 1, 0, 0\n' + '0, 0, 1, 0\n' + '0, 0, 0, 1\n' + ']';
                }
            },
            identity: function identity() {
                return _vmath.mat4.identity(this);
            },
            transpose: function transpose(out) {
                out = out || new cc.Mat4();
                return _vmath.mat4.transpose(out, this);
            },
            invert: function invert(out) {
                out = out || new cc.Mat4();
                return _vmath.mat4.invert(out, this);
            },
            adjoint: function adjoint(out) {
                out = out || new cc.Mat4();
                return _vmath.mat4.adjoint(out, this);
            },
            determinant: function determinant() {
                return _vmath.mat4.determinant(this);
            },
            add: function add(other, out) {
                out = out || new cc.Mat4();
                return _vmath.mat4.add(out, this, other);
            },
            sub: function sub(other, out) {
                out = out || new cc.Mat4();
                return _vmath.mat4.subtract(out, this, other);
            },
            mul: function mul(other, out) {
                out = out || new cc.Mat4();
                return _vmath.mat4.multiply(out, this, other);
            },
            mulScalar: function mulScalar(number, out) {
                out = out || new cc.Mat4();
                return _vmath.mat4.mulScalar(out, this, number);
            },
            translate: function translate(v, out) {
                out = out || new cc.Mat4();
                return _vmath.mat4.translate(out, this, v);
            },
            scale: function scale(v, out) {
                out = out || new cc.Mat4();
                return _vmath.mat4.scale(out, this, v);
            },
            rotate: function rotate(rad, axis, out) {
                out = out || new cc.Mat4();
                return _vmath.mat4.rotate(out, this, rad, axis);
            },
            getTranslation: function getTranslation(out) {
                out = out || new cc.Vec3();
                return _vmath.mat4.getTranslation(out, this);
            },
            getScale: function getScale(out) {
                out = out || new cc.Vec3();
                return _vmath.mat4.getScaling(out, this);
            },
            getRotation: function getRotation(out) {
                out = out || new cc.Quat();
                return _vmath.mat4.getRotation(out, this);
            },
            fromRTS: function fromRTS(q, v, s) {
                return _vmath.mat4.fromRTS(this, q, v, s);
            },
            fromQuat: function fromQuat(quat) {
                return _vmath.mat4.fromQuat(this, quat);
            },
            array: function array(out) {
                return _vmath.mat4.array(out, this);
            }
        });
        cc.mat4 = function (m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
            var mat = new Mat4(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
            if (m00 === undefined) {
                _vmath.mat4.identity(mat);
            }
            return mat;
        };
        module.exports = cc.Mat4 = Mat4;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,