(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/value-types/size.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var ValueType = require('./value-type');
        var js = require('../platform/js');
        function Size(width, height) {
            if (width && (typeof width === 'undefined' ? 'undefined' : _typeof(width)) === 'object') {
                height = width.height;
                width = width.width;
            }
            this.width = width || 0;
            this.height = height || 0;
        }
        js.extend(Size, ValueType);
        require('../platform/CCClass').fastDefine('cc.Size', Size, {
            width: 0,
            height: 0
        });
        js.get(Size, 'ZERO', function () {
            return new Size(0, 0);
        });
        var proto = Size.prototype;
        proto.clone = function () {
            return new Size(this.width, this.height);
        };
        proto.equals = function (other) {
            return other && this.width === other.width && this.height === other.height;
        };
        proto.lerp = function (to, ratio, out) {
            out = out || new Size();
            var width = this.width;
            var height = this.height;
            out.width = width + (to.width - width) * ratio;
            out.height = height + (to.height - height) * ratio;
            return out;
        };
        proto.set = function (source) {
            this.width = source.width;
            this.height = source.height;
        };
        proto.toString = function () {
            return '(' + this.width.toFixed(2) + ', ' + this.height.toFixed(2) + ')';
        };
        cc.size = function (w, h) {
            return new Size(w, h);
        };
        cc.Size = module.exports = Size;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,