(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/value-types/vec3.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var _vmath = require('../vmath');
        var ValueType = require('./value-type');
        var js = require('../platform/js');
        var CCClass = require('../platform/CCClass');
        var misc = require('../utils/misc');
        var v2Proto = require('./vec2').prototype;
        function Vec3(x, y, z) {
            if (x && (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object') {
                z = x.z;
                y = x.y;
                x = x.x;
            }
            this.x = x || 0;
            this.y = y || 0;
            this.z = z || 0;
        }
        js.extend(Vec3, ValueType);
        CCClass.fastDefine('cc.Vec3', Vec3, {
            x: 0,
            y: 0,
            z: 0
        });
        var proto = Vec3.prototype;
        proto.clone = function () {
            return new Vec3(this.x, this.y, this.z);
        };
        proto.set = function (newValue) {
            this.x = newValue.x;
            this.y = newValue.y;
            this.z = newValue.z;
            return this;
        };
        proto.equals = function (other) {
            return other && this.x === other.x && this.y === other.y && this.z === other.z;
        };
        proto.fuzzyEquals = function (other, variance) {
            if (this.x - variance <= other.x && other.x <= this.x + variance) {
                if (this.y - variance <= other.y && other.y <= this.y + variance) {
                    if (this.z - variance <= other.z && other.z <= this.z + variance)
                        return true;
                }
            }
            return false;
        };
        proto.toString = function () {
            return '(' + this.x.toFixed(2) + ', ' + this.y.toFixed(2) + ', ' + this.z.toFixed(2) + ')';
        };
        proto.lerp = function (to, ratio, out) {
            out = out || new Vec3();
            _vmath.vec3.lerp(out, this, to, ratio);
            return out;
        };
        proto.clampf = function (min_inclusive, max_inclusive) {
            this.x = misc.clampf(this.x, min_inclusive.x, max_inclusive.x);
            this.y = misc.clampf(this.y, min_inclusive.y, max_inclusive.y);
            this.z = misc.clampf(this.z, min_inclusive.z, max_inclusive.z);
            return this;
        };
        proto.addSelf = function (vector) {
            this.x += vector.x;
            this.y += vector.y;
            this.z += vector.z;
            return this;
        };
        proto.add = function (vector, out) {
            out = out || new Vec3();
            out.x = this.x + vector.x;
            out.y = this.y + vector.y;
            out.z = this.z + vector.z;
            return out;
        };
        proto.subSelf = function (vector) {
            this.x -= vector.x;
            this.y -= vector.y;
            this.z -= vector.z;
            return this;
        };
        proto.sub = function (vector, out) {
            out = out || new Vec3();
            out.x = this.x - vector.x;
            out.y = this.y - vector.y;
            out.z = this.z - vector.z;
            return out;
        };
        proto.mulSelf = function (num) {
            this.x *= num;
            this.y *= num;
            this.z *= num;
            return this;
        };
        proto.mul = function (num, out) {
            out = out || new Vec3();
            out.x = this.x * num;
            out.y = this.y * num;
            out.z = this.z * num;
            return out;
        };
        proto.scaleSelf = function (vector) {
            this.x *= vector.x;
            this.y *= vector.y;
            this.z *= vector.z;
            return this;
        };
        proto.scale = function (vector, out) {
            out = out || new Vec3();
            out.x = this.x * vector.x;
            out.y = this.y * vector.y;
            out.z = this.z * vector.z;
            return out;
        };
        proto.divSelf = function (num) {
            this.x /= num;
            this.y /= num;
            this.z /= num;
            return this;
        };
        proto.div = function (num, out) {
            out = out || new Vec3();
            out.x = this.x / num;
            out.y = this.y / num;
            out.z = this.z / num;
            return out;
        };
        proto.negSelf = function () {
            this.x = -this.x;
            this.y = -this.y;
            this.z = -this.z;
            return this;
        };
        proto.neg = function (out) {
            out = out || new Vec3();
            out.x = -this.x;
            out.y = -this.y;
            out.z = -this.z;
            return out;
        };
        proto.dot = function (vector) {
            return this.x * vector.x + this.y * vector.y + this.z * vector.z;
        };
        proto.cross = function (vector, out) {
            out = out || new Vec3();
            _vmath.vec3.cross(out, this, vector);
            return out;
        };
        proto.mag = function () {
            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
        };
        proto.magSqr = function () {
            return this.x * this.x + this.y * this.y + this.z * this.z;
        };
        proto.normalizeSelf = function () {
            _vmath.vec3.normalize(this, this);
            return this;
        };
        proto.normalize = function (out) {
            out = out || new Vec3();
            _vmath.vec3.normalize(out, this);
            return out;
        };
        proto.transformMat4 = function (m, out) {
            out = out || new Vec3();
            _vmath.vec3.transformMat4(out, this, m);
        };
        proto.angle = v2Proto.angle;
        proto.project = v2Proto.project;
        proto.signAngle = function (vector) {
            cc.warnID(1408, 'vec3.signAngle', 'v2.1', 'cc.v2(selfVector).signAngle(vector)');
            var vec1 = new cc.Vec2(this.x, this.y);
            var vec2 = new cc.Vec2(vector.x, vector.y);
            return vec1.signAngle(vec2);
        };
        proto.rotate = function (radians, out) {
            cc.warnID(1408, 'vec3.rotate', 'v2.1', 'cc.v2(selfVector).rotate(radians, out)');
            return v2Proto.rotate.call(this, radians, out);
        };
        proto.rotateSelf = function (radians) {
            cc.warnID(1408, 'vec3.rotateSelf', 'v2.1', 'cc.v2(selfVector).rotateSelf(radians)');
            return v2Proto.rotateSelf.call(this, radians);
        };
        proto.array = function (out) {
            _vmath.vec3.array(out, this);
        };
        js.get(Vec3, 'ONE', function () {
            return new Vec3(1, 1, 1);
        });
        js.get(Vec3, 'ZERO', function () {
            return new Vec3(0, 0, 0);
        });
        js.get(Vec3, 'UP', function () {
            return new Vec3(0, 1, 0);
        });
        js.get(Vec3, 'RIGHT', function () {
            return new Vec3(1, 0, 0);
        });
        js.get(Vec3, 'FRONT', function () {
            return new Vec3(0, 0, 1);
        });
        cc.v3 = function v3(x, y, z) {
            return new Vec3(x, y, z);
        };
        module.exports = cc.Vec3 = Vec3;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,