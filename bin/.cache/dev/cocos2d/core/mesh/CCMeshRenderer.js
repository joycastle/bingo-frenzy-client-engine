(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/mesh/CCMeshRenderer.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _gfx = require('../../renderer/gfx');
        var _gfx2 = _interopRequireDefault(_gfx);
        var _inputAssembler = require('../../renderer/core/input-assembler');
        var _inputAssembler2 = _interopRequireDefault(_inputAssembler);
        var _geomUtils = require('../geom-utils');
        var _geomUtils2 = _interopRequireDefault(_geomUtils);
        var _customProperties = require('../assets/material/custom-properties');
        var _customProperties2 = _interopRequireDefault(_customProperties);
        var _meshUtil = require('../utils/mesh-util');
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var RenderComponent = require('../components/CCRenderComponent');
        var Mesh = require('./CCMesh');
        var RenderFlow = require('../renderer/render-flow');
        var Renderer = require('../renderer');
        var Material = require('../assets/material/CCMaterial');
        var BLACK_COLOR = cc.Color.BLACK;
        var ShadowCastingMode = cc.Enum({
            OFF: 0,
            ON: 1
        });
        var MeshRenderer = cc.Class({
            name: 'cc.MeshRenderer',
            extends: RenderComponent,
            editor: CC_EDITOR && { menu: 'i18n:MAIN_MENU.component.mesh/MeshRenderer' },
            properties: {
                _mesh: {
                    default: null,
                    type: Mesh
                },
                _receiveShadows: false,
                _shadowCastingMode: ShadowCastingMode.OFF,
                _enableAutoBatch: false,
                mesh: {
                    get: function get() {
                        return this._mesh;
                    },
                    set: function set(v) {
                        if (this._mesh === v)
                            return;
                        this._setMesh(v);
                        if (!v) {
                            this.markForRender(false);
                            return;
                        }
                        this.markForRender(true);
                        this._activateMaterial(true);
                        this.markForUpdateRenderData(true);
                        this.node._renderFlag |= RenderFlow.FLAG_TRANSFORM;
                    },
                    type: Mesh,
                    animatable: false
                },
                textures: {
                    default: [],
                    type: cc.Texture2D,
                    visible: false
                },
                receiveShadows: {
                    get: function get() {
                        return this._receiveShadows;
                    },
                    set: function set(val) {
                        this._receiveShadows = val;
                        this._updateReceiveShadow();
                    },
                    animatable: false
                },
                shadowCastingMode: {
                    get: function get() {
                        return this._shadowCastingMode;
                    },
                    set: function set(val) {
                        this._shadowCastingMode = val;
                        this._updateCastShadow();
                    },
                    type: ShadowCastingMode,
                    animatable: false
                },
                enableAutoBatch: {
                    get: function get() {
                        return this._enableAutoBatch;
                    },
                    set: function set(val) {
                        this._enableAutoBatch = val;
                    }
                }
            },
            statics: { ShadowCastingMode: ShadowCastingMode },
            ctor: function ctor() {
                this._wireFrameDatas = [];
                this._boundingBox = null;
                this._customProperties = new cc.CustomProperties();
            },
            onEnable: function onEnable() {
                this._super();
                if (this._mesh && !this._mesh.loaded) {
                    this.disableRender();
                    var self = this;
                    this._mesh.once('load', function () {
                        self._setMesh(self._mesh);
                        self._activateMaterial();
                    });
                    (0, _meshUtil.postLoadMesh)(this._mesh);
                } else {
                    this._setMesh(this._mesh);
                    this._activateMaterial();
                }
                this._updateRenderNode();
            },
            onDestroy: function onDestroy() {
                this._setMesh(null);
                cc.pool.assembler.put(this._assembler);
            },
            _updateRenderNode: function _updateRenderNode() {
                this._assembler.setRenderNode(this.node);
            },
            _setMesh: function _setMesh(mesh) {
                if (this._mesh) {
                    this._mesh.off('init-format', this._updateMeshAttribute, this);
                }
                if (mesh) {
                    mesh.on('init-format', this._updateMeshAttribute, this);
                }
                this._mesh = mesh;
            },
            _getDefaultMaterial: function _getDefaultMaterial() {
                return Material.getBuiltinMaterial('unlit');
            },
            _activateMaterial: function _activateMaterial(force) {
                var mesh = this._mesh;
                if (!mesh || mesh._subDatas.length === 0) {
                    this.disableRender();
                    return;
                }
                if (_geomUtils2.default) {
                    this._boundingBox = _geomUtils2.default.Aabb.fromPoints(_geomUtils2.default.Aabb.create(), mesh._minPos, mesh._maxPos);
                }
                var textures = this.textures;
                if (textures && textures.length > 0) {
                    for (var i = 0; i < textures.length; i++) {
                        var material = this.sharedMaterials[i];
                        if (material)
                            continue;
                        material = cc.Material.getInstantiatedMaterial(this._getDefaultMaterial(), this);
                        material.setProperty('diffuseTexture', textures[i]);
                        this.setMaterial(i, material);
                    }
                }
                var materials = this.sharedMaterials;
                if (!materials[0]) {
                    var _material = this._getDefaultMaterial();
                    materials[0] = _material;
                }
                this._updateReceiveShadow();
                this._updateCastShadow();
                this._updateMeshAttribute();
                this.markForUpdateRenderData(true);
                this.markForRender(true);
            },
            _updateReceiveShadow: function _updateReceiveShadow() {
                this._customProperties.define('CC_USE_SHADOW_MAP', this._receiveShadows);
            },
            _updateCastShadow: function _updateCastShadow() {
                this._customProperties.define('CC_SHADOW_CASTING', this._shadowCastingMode === ShadowCastingMode.ON);
            },
            _updateMeshAttribute: function _updateMeshAttribute() {
                var subDatas = this._mesh && this._mesh.subDatas;
                if (!subDatas)
                    return;
                var vfm = subDatas[0].vfm;
                this._customProperties.define('CC_USE_ATTRIBUTE_COLOR', !!vfm.element(_gfx2.default.ATTR_COLOR));
                this._customProperties.define('CC_USE_ATTRIBUTE_UV0', !!vfm.element(_gfx2.default.ATTR_UV0));
                this._customProperties.define('CC_USE_ATTRIBUTE_NORMAL', !!vfm.element(_gfx2.default.ATTR_NORMAL));
                this._customProperties.define('CC_USE_ATTRIBUTE_TANGENT', !!vfm.element(_gfx2.default.ATTR_TANGENT));
                this._wireFrameDatas.length = 0;
                if (CC_JSB && CC_NATIVERENDERER) {
                    this._assembler.updateMeshData(this);
                }
            },
            _updateWireFrameDatas: function _updateWireFrameDatas() {
                var wireFrameDatas = this._wireFrameDatas;
                var subMeshes = this._mesh.subMeshes;
                if (subMeshes.length === wireFrameDatas.length)
                    return;
                wireFrameDatas.length = subMeshes.length;
                var subDatas = this._mesh._subDatas;
                for (var i = 0; i < subMeshes.length; i++) {
                    wireFrameDatas[i] = this._createWireFrameData(subMeshes[i], subDatas[i].iData);
                }
            },
            _createWireFrameData: function _createWireFrameData(ia, oldIbData) {
                var m = new Material();
                m.copy(Material.getBuiltinMaterial('unlit'));
                m.setProperty('diffuseColor', BLACK_COLOR);
                var indices = [];
                for (var i = 0; i < oldIbData.length; i += 3) {
                    var a = oldIbData[i + 0];
                    var b = oldIbData[i + 1];
                    var c = oldIbData[i + 2];
                    indices.push(a, b, b, c, c, a);
                }
                var ibData = new Uint16Array(indices);
                var ib = new _gfx2.default.IndexBuffer(Renderer.device, _gfx2.default.INDEX_FMT_UINT16, _gfx2.default.USAGE_STATIC, ibData, ibData.length);
                return {
                    material: m,
                    ia: new _inputAssembler2.default(ia._vertexBuffer, ib, _gfx2.default.PT_LINES)
                };
            },
            _checkBacth: function _checkBacth() {
            }
        });
        cc.MeshRenderer = module.exports = MeshRenderer;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,