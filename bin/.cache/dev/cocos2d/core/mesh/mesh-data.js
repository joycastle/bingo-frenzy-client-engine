(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/mesh/mesh-data.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.Primitive = exports.VertexBundle = exports.VertexFormat = exports.BufferRange = undefined;
        exports.MeshData = MeshData;
        var _gfx = require('../../renderer/gfx');
        var _gfx2 = _interopRequireDefault(_gfx);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var BufferRange = exports.BufferRange = cc.Class({
            name: 'cc.BufferRange',
            properties: {
                offset: 0,
                length: 0
            }
        });
        var VertexFormat = exports.VertexFormat = cc.Class({
            name: 'cc.mesh.VertexFormat',
            properties: {
                name: '',
                type: -1,
                num: -1,
                normalize: false
            }
        });
        var VertexBundle = exports.VertexBundle = cc.Class({
            name: 'cc.mesh.VertexBundle',
            properties: {
                data: {
                    default: null,
                    type: BufferRange
                },
                formats: {
                    default: [],
                    type: VertexFormat
                },
                verticesCount: 0
            }
        });
        var Primitive = exports.Primitive = cc.Class({
            name: 'cc.mesh.Primitive',
            properties: {
                vertexBundleIndices: {
                    default: [],
                    type: cc.Float
                },
                data: {
                    default: null,
                    type: BufferRange
                },
                indexUnit: _gfx2.default.INDEX_FMT_UINT16,
                topology: _gfx2.default.PT_TRIANGLES
            }
        });
        function MeshData() {
            this.vData = null;
            this.float32VData = null;
            this.uint32VData = null;
            this.iData = null;
            this.uint16IData = null;
            this.vfm = null;
            this.offset = 0;
            this.vb = null;
            this.ib = null;
            this.vDirty = false;
            this.iDirty = false;
        }
        MeshData.prototype.getVData = function (format) {
            if (format === Float32Array) {
                if (!this.float32VData) {
                    this.float32VData = new Float32Array(this.vData.buffer, this.vData.byteOffset, this.vData.byteLength / 4);
                }
                return this.float32VData;
            } else if (format === Uint32Array) {
                if (!this.uint32VData) {
                    this.uint32VData = new Uint32Array(this.vData.buffer, this.vData.byteOffset, this.vData.byteLength / 4);
                }
                return this.uint32VData;
            }
            return this.vData;
        };
        MeshData.prototype.getIData = function (format) {
            if (format === Uint16Array) {
                if (!this.uint16IData) {
                    this.uint16IData = new Uint16Array(this.iData.buffer, this.iData.byteOffset, this.iData.byteLength / 2);
                }
                return this.uint16IData;
            }
            return this.iData;
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,