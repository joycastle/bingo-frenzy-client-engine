(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/mesh/mesh-renderer.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _assembler = require('../renderer/assembler');
        var _assembler2 = _interopRequireDefault(_assembler);
        var _gfx = require('../../renderer/gfx');
        var _gfx2 = _interopRequireDefault(_gfx);
        var _vec = require('../vmath/vec3');
        var _vec2 = _interopRequireDefault(_vec);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var MeshRenderer = require('./CCMeshRenderer');
        var MeshRendererAssembler = function (_Assembler) {
            _inherits(MeshRendererAssembler, _Assembler);
            function MeshRendererAssembler(comp) {
                _classCallCheck(this, MeshRendererAssembler);
                var _this = _possibleConstructorReturn(this, (MeshRendererAssembler.__proto__ || Object.getPrototypeOf(MeshRendererAssembler)).call(this, comp));
                _this._renderNode = null;
                return _this;
            }
            _createClass(MeshRendererAssembler, [
                {
                    key: 'setRenderNode',
                    value: function setRenderNode(node) {
                        this._renderNode = node;
                    }
                },
                {
                    key: 'fillBuffers',
                    value: function fillBuffers(comp, renderer) {
                        if (!comp.mesh)
                            return;
                        comp.mesh._uploadData();
                        var isCustomPropertiesSame = renderer.customProperties && renderer.customProperties.getHash() === comp._customProperties.getHash();
                        var isCullingMaskSame = renderer.cullingMask === comp.node._cullingMask;
                        var enableAutoBatch = comp.enableAutoBatch;
                        var materials = comp.sharedMaterials;
                        var submeshes = comp.mesh._subMeshes;
                        var subDatas = comp.mesh.subDatas;
                        for (var i = 0; i < submeshes.length; i++) {
                            var ia = submeshes[i];
                            var meshData = subDatas[i];
                            var material = materials[i] || materials[0];
                            if (!enableAutoBatch || !meshData.canBatch || ia._primitiveType !== _gfx2.default.PT_TRIANGLES) {
                                renderer._flush();
                                renderer.material = material;
                                renderer.cullingMask = comp.node._cullingMask;
                                renderer.customProperties = comp._customProperties;
                                renderer.node = this._renderNode;
                                renderer._flushIA(ia);
                                continue;
                            }
                            if (!isCustomPropertiesSame || !isCullingMaskSame || material.getHash() !== renderer.material.getHash()) {
                                renderer._flush();
                                renderer.material = material;
                                renderer.cullingMask = comp.node._cullingMask;
                                renderer.customProperties = comp._customProperties;
                                renderer.node = renderer._dummyNode;
                            }
                            this._fillBuffer(comp, meshData, renderer);
                        }
                        if (cc.macro.SHOW_MESH_WIREFRAME) {
                            this._drawWireFrames(comp, renderer);
                        }
                    }
                },
                {
                    key: '_fillBuffer',
                    value: function _fillBuffer(comp, meshData, renderer) {
                        var matrix = comp.node._worldMatrix;
                        var vData = meshData.getVData(Float32Array);
                        var vtxFormat = meshData.vfm;
                        var attrPos = vtxFormat._attr2el[_gfx2.default.ATTR_POSITION];
                        var attrOffset = attrPos.offset / 4;
                        var elementCount = vtxFormat._bytes / 4;
                        var vertexCount = vData.length / elementCount | 0;
                        var indices = meshData.getIData(Uint16Array);
                        var indicesCount = indices.length;
                        var buffer = renderer.getBuffer('mesh', vtxFormat);
                        var offsetInfo = buffer.request(vertexCount, indicesCount);
                        var indiceOffset = offsetInfo.indiceOffset, vertexOffset = offsetInfo.byteOffset >> 2, vertexId = offsetInfo.vertexOffset, vbuf = buffer._vData, ibuf = buffer._iData;
                        var tmpV3 = cc.v3();
                        for (var i = 0; i < vertexCount; i++) {
                            var offset = i * elementCount;
                            for (var j = 0; j < attrOffset; j++) {
                                vbuf[vertexOffset++] = vData[offset + j];
                            }
                            tmpV3.x = vData[offset + attrOffset];
                            tmpV3.y = vData[offset + attrOffset + 1];
                            tmpV3.z = vData[offset + attrOffset + 2];
                            _vec2.default.transformMat4(tmpV3, tmpV3, matrix);
                            vbuf[vertexOffset++] = tmpV3.x;
                            vbuf[vertexOffset++] = tmpV3.y;
                            vbuf[vertexOffset++] = tmpV3.z;
                            for (var _j = attrOffset + 3; _j < elementCount; _j++) {
                                vbuf[vertexOffset++] = vData[offset + _j];
                            }
                        }
                        for (var _i = 0; _i < indicesCount; _i++) {
                            ibuf[indiceOffset + _i] = vertexId + indices[_i];
                        }
                    }
                },
                {
                    key: '_drawWireFrames',
                    value: function _drawWireFrames(comp, renderer) {
                        renderer._flush();
                        comp._updateWireFrameDatas();
                        renderer.node = this._renderNode;
                        var wireFrameDatas = comp._wireFrameDatas;
                        for (var i = 0; i < wireFrameDatas.length; i++) {
                            var wireFrameData = wireFrameDatas[i];
                            var material = wireFrameData.material;
                            renderer.material = material;
                            renderer._flushIA(wireFrameData.ia);
                        }
                    }
                }
            ]);
            return MeshRendererAssembler;
        }(_assembler2.default);
        exports.default = MeshRendererAssembler;
        _assembler2.default.register(MeshRenderer, MeshRendererAssembler);
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,