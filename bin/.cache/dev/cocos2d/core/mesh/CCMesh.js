(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/mesh/CCMesh.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _inputAssembler = require('../../renderer/core/input-assembler');
        var _inputAssembler2 = _interopRequireDefault(_inputAssembler);
        var _gfx = require('../../renderer/gfx');
        var _gfx2 = _interopRequireDefault(_gfx);
        var _meshData = require('./mesh-data');
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var renderer = require('../renderer');
        var EventTarget = require('../event/event-target');
        function applyColor(data, offset, value) {
            data[offset] = value._val;
        }
        function applyVec2(data, offset, value) {
            data[offset] = value.x;
            data[offset + 1] = value.y;
        }
        function applyVec3(data, offset, value) {
            data[offset] = value.x;
            data[offset + 1] = value.y;
            data[offset + 2] = value.z;
        }
        var Mesh = cc.Class({
            name: 'cc.Mesh',
            extends: cc.Asset,
            mixins: [EventTarget],
            properties: {
                _nativeAsset: {
                    override: true,
                    get: function get() {
                        return this._buffer;
                    },
                    set: function set(bin) {
                        this._buffer = ArrayBuffer.isView(bin) ? bin.buffer : bin;
                        this.initWithBuffer();
                    }
                },
                _vertexBundles: {
                    default: null,
                    type: _meshData.VertexBundle
                },
                _primitives: {
                    default: null,
                    Primitive: _meshData.Primitive
                },
                _minPos: cc.v3(),
                _maxPos: cc.v3(),
                subMeshes: {
                    get: function get() {
                        return this._subMeshes;
                    },
                    set: function set(v) {
                        this._subMeshes = v;
                    }
                },
                subDatas: {
                    get: function get() {
                        return this._subDatas;
                    }
                }
            },
            ctor: function ctor() {
                this._subMeshes = [];
                this.loaded = false;
                this._subDatas = [];
            },
            initWithBuffer: function initWithBuffer() {
                this._subMeshes.length = 0;
                var primitives = this._primitives;
                for (var i = 0; i < primitives.length; i++) {
                    var primitive = primitives[i];
                    var ibrange = primitive.data;
                    var ibData = new Uint8Array(this._buffer, ibrange.offset, ibrange.length);
                    var vertexBundle = this._vertexBundles[primitive.vertexBundleIndices[0]];
                    var vbRange = vertexBundle.data;
                    var gfxVFmt = new _gfx2.default.VertexFormat(vertexBundle.formats);
                    var vbData = new Uint8Array(this._buffer, vbRange.offset, vbRange.length);
                    var canBatch = this._canVertexFormatBatch(gfxVFmt);
                    var meshData = new _meshData.MeshData();
                    meshData.vData = vbData;
                    meshData.iData = ibData;
                    meshData.vfm = gfxVFmt;
                    meshData.offset = vbRange.offset;
                    meshData.canBatch = canBatch;
                    this._subDatas.push(meshData);
                    if (CC_JSB && CC_NATIVERENDERER) {
                        meshData.vDirty = true;
                    } else {
                        var vbBuffer = new _gfx2.default.VertexBuffer(renderer.device, gfxVFmt, _gfx2.default.USAGE_STATIC, vbData);
                        var ibBuffer = new _gfx2.default.IndexBuffer(renderer.device, primitive.indexUnit, _gfx2.default.USAGE_STATIC, ibData);
                        this._subMeshes.push(new _inputAssembler2.default(vbBuffer, ibBuffer));
                    }
                }
                this.loaded = true;
                this.emit('load');
            },
            _canVertexFormatBatch: function _canVertexFormatBatch(format) {
                var aPosition = format._attr2el[_gfx2.default.ATTR_POSITION];
                var canBatch = !aPosition || aPosition.type === _gfx2.default.ATTR_TYPE_FLOAT32 && format._bytes % 4 === 0;
                return canBatch;
            },
            init: function init(vertexFormat, vertexCount) {
                var dynamic = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
                var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
                var data = new Uint8Array(vertexFormat._bytes * vertexCount);
                var meshData = new _meshData.MeshData();
                meshData.vData = data;
                meshData.vfm = vertexFormat;
                meshData.vDirty = true;
                meshData.canBatch = this._canVertexFormatBatch(vertexFormat);
                if (!(CC_JSB && CC_NATIVERENDERER)) {
                    var vb = new _gfx2.default.VertexBuffer(renderer.device, vertexFormat, dynamic ? _gfx2.default.USAGE_DYNAMIC : _gfx2.default.USAGE_STATIC, data);
                    meshData.vb = vb;
                    this._subMeshes[index] = new _inputAssembler2.default(meshData.vb);
                }
                var oldSubData = this._subDatas[index];
                if (oldSubData) {
                    if (oldSubData.vb) {
                        oldSubData.vb.destroy();
                    }
                    if (oldSubData.ib) {
                        oldSubData.ib.destroy();
                    }
                }
                this._subDatas[index] = meshData;
                this.loaded = true;
                this.emit('load');
                this.emit('init-format');
            },
            setVertices: function setVertices(name, values, index) {
                index = index || 0;
                var subData = this._subDatas[index];
                var el = subData.vfm.element(name);
                if (!el) {
                    return cc.warn('Cannot find ' + name + ' attribute in vertex defines.');
                }
                var isFlatMode = typeof values[0] === 'number';
                var elNum = el.num;
                var verticesCount = isFlatMode ? values.length / elNum | 0 : values.length;
                if (subData.vData.byteLength < verticesCount * el.stride) {
                    subData.vData = new Uint8Array(verticesCount * subData.vfm._bytes);
                }
                var data = void 0;
                var bytes = 4;
                if (name === _gfx2.default.ATTR_COLOR) {
                    if (!isFlatMode) {
                        data = subData.getVData(Uint32Array);
                    } else {
                        data = subData.getVData();
                        bytes = 1;
                    }
                } else {
                    data = subData.getVData(Float32Array);
                }
                var stride = el.stride / bytes;
                var offset = el.offset / bytes;
                if (isFlatMode) {
                    for (var i = 0, l = values.length / elNum; i < l; i++) {
                        var sOffset = i * elNum;
                        var dOffset = i * stride + offset;
                        for (var j = 0; j < elNum; j++) {
                            data[dOffset + j] = values[sOffset + j];
                        }
                    }
                } else {
                    var applyFunc = void 0;
                    if (name === _gfx2.default.ATTR_COLOR) {
                        applyFunc = applyColor;
                    } else {
                        if (elNum === 2) {
                            applyFunc = applyVec2;
                        } else {
                            applyFunc = applyVec3;
                        }
                    }
                    for (var _i = 0, _l = values.length; _i < _l; _i++) {
                        var v = values[_i];
                        var vOffset = _i * stride + offset;
                        applyFunc(data, vOffset, v);
                    }
                }
                subData.vDirty = true;
            },
            setIndices: function setIndices(indices, index, dynamic) {
                index = index || 0;
                var iData = indices;
                if (indices instanceof Uint16Array) {
                    iData = new Uint8Array(indices.buffer, indices.byteOffset, indices.byteLength);
                } else if (Array.isArray(indices)) {
                    iData = new Uint16Array(indices);
                    iData = new Uint8Array(iData.buffer, iData.byteOffset, iData.byteLength);
                }
                var usage = dynamic ? _gfx2.default.USAGE_DYNAMIC : _gfx2.default.USAGE_STATIC;
                var subData = this._subDatas[index];
                if (!subData.ib) {
                    subData.iData = iData;
                    if (!(CC_JSB && CC_NATIVERENDERER)) {
                        var buffer = new _gfx2.default.IndexBuffer(renderer.device, _gfx2.default.INDEX_FMT_UINT16, usage, iData, iData.byteLength / _gfx2.default.IndexBuffer.BYTES_PER_INDEX[_gfx2.default.INDEX_FMT_UINT16]);
                        subData.ib = buffer;
                        this._subMeshes[index]._indexBuffer = subData.ib;
                    }
                } else {
                    subData.iData = iData;
                    subData.iDirty = true;
                }
            },
            setPrimitiveType: function setPrimitiveType(type, index) {
                index = index || 0;
                var subMesh = this._subMeshes[index];
                if (!subMesh) {
                    cc.warn('Do not have sub mesh at index ' + index);
                    return;
                }
                this._subMeshes[index]._primitiveType = type;
            },
            clear: function clear() {
                this._subMeshes.length = 0;
                var subDatas = this._subDatas;
                for (var i = 0, len = subDatas.length; i < len; i++) {
                    var vb = subDatas[i].vb;
                    if (vb) {
                        vb.destroy();
                    }
                    var ib = subDatas[i].ib;
                    if (ib) {
                        ib.destroy();
                    }
                }
                subDatas.length = 0;
            },
            setBoundingBox: function setBoundingBox(min, max) {
                this._minPos = min;
                this._maxPos = max;
            },
            destroy: function destroy() {
                this.clear();
            },
            _uploadData: function _uploadData() {
                var subDatas = this._subDatas;
                for (var i = 0, len = subDatas.length; i < len; i++) {
                    var subData = subDatas[i];
                    if (subData.vDirty) {
                        var buffer = subData.vb, data = subData.vData;
                        buffer.update(0, data);
                        subData.vDirty = false;
                    }
                    if (subData.iDirty) {
                        var _buffer = subData.ib, _data = subData.iData;
                        _buffer.update(0, _data);
                        subData.iDirty = false;
                    }
                }
            }
        });
        cc.Mesh = module.exports = Mesh;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,