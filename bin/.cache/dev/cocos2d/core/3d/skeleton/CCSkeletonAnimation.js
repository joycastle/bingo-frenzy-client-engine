(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/3d/skeleton/CCSkeletonAnimation.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Animation = require('../../components/CCAnimation');
        var Model = require('../CCModel');
        var SkeletonAnimationClip = require('./CCSkeletonAnimationClip');
        var SkeletonAnimation = cc.Class({
            name: 'cc.SkeletonAnimation',
            extends: Animation,
            editor: CC_EDITOR && {
                inspector: 'packages://inspector/inspectors/comps/skeleton-animation.js',
                menu: 'i18n:MAIN_MENU.component.others/Skeleton Animation'
            },
            properties: {
                _model: {
                    default: null,
                    type: Model
                },
                _defaultClip: {
                    override: true,
                    default: null,
                    type: SkeletonAnimationClip
                },
                _clips: {
                    override: true,
                    default: [],
                    type: [SkeletonAnimationClip],
                    visible: true
                },
                defaultClip: {
                    override: true,
                    get: function get() {
                        return this._defaultClip;
                    },
                    set: function set(v) {
                        this._defaultClip = v;
                    },
                    type: SkeletonAnimationClip
                },
                model: {
                    get: function get() {
                        return this._model;
                    },
                    set: function set(val) {
                        this._model = val;
                        this._updateClipModel();
                    },
                    type: Model
                }
            },
            __preload: function __preload() {
                this._updateClipModel();
            },
            _updateClipModel: function _updateClipModel() {
                if (this._defaultClip) {
                    this._defaultClip._model = this._model;
                }
                var clips = this._clips;
                for (var i = 0; i < clips.length; i++) {
                    clips[i]._model = this._model;
                }
            },
            addClip: function addClip(clip, newName) {
                clip._model = this._model;
                return Animation.prototype.addClip.call(this, clip, newName);
            },
            searchClips: CC_EDITOR && function () {
                if (!this._model) {
                    cc.warn('There was no model provided.');
                    return;
                }
                this._clips.length = 0;
                var self = this;
                Editor.assetdb.queryPathByUuid(this._model._uuid, function (err, modelPath) {
                    if (err)
                        return console.error(err);
                    var Path = require('fire-path');
                    var queryPath = Path.relative(Editor.remote.Project.path, modelPath);
                    queryPath = Path.join(Path.dirname(queryPath), Path.basenameNoExt(queryPath));
                    queryPath = 'db://' + queryPath + '*/*.sac';
                    Editor.assetdb.queryAssets(queryPath, null, function (err, results) {
                        if (results) {
                            for (var i = 0; i < results.length; i++) {
                                var clip = new SkeletonAnimationClip();
                                clip._uuid = results[i].uuid;
                                self._clips.push(clip);
                            }
                            self._defaultClip = self._clips[0];
                        }
                    });
                });
            }
        });
        cc.SkeletonAnimation = module.exports = SkeletonAnimation;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,