(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/3d/skeleton/CCSkinnedMeshRenderer.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Skeleton = require('./CCSkeleton');
        var MeshRenderer = require('../../mesh/CCMeshRenderer');
        var RenderFlow = require('../../renderer/render-flow');
        var enums = require('../../../renderer/enums');
        var mat4 = cc.vmath.mat4;
        var _m4_tmp = mat4.create();
        var _m4_tmp2 = mat4.create();
        var SkinnedMeshRenderer = cc.Class({
            name: 'cc.SkinnedMeshRenderer',
            extends: MeshRenderer,
            editor: CC_EDITOR && { menu: 'i18n:MAIN_MENU.component.mesh/Skinned Mesh Renderer' },
            ctor: function ctor() {
                this._jointsData = this._jointsFloat32Data = null;
                this._jointsTexture = null;
                this._joints = [];
                this._dummyNode = new cc.Node();
                this._jointsTextureOptions = null;
                this._usingRGBA8Texture = false;
            },
            properties: {
                _skeleton: Skeleton,
                _rootBone: cc.Node,
                skeleton: {
                    get: function get() {
                        return this._skeleton;
                    },
                    set: function set(val) {
                        this._skeleton = val;
                        this._init();
                        this._activateMaterial(true);
                    },
                    type: Skeleton
                },
                rootBone: {
                    get: function get() {
                        return this._rootBone;
                    },
                    set: function set(val) {
                        this._rootBone = val;
                        this._init();
                    },
                    type: cc.Node
                },
                enableAutoBatch: {
                    get: function get() {
                        return false;
                    },
                    visible: false,
                    override: true
                }
            },
            _activateMaterial: function _activateMaterial(force) {
                if (!this._jointsData) {
                    this.disableRender();
                    return;
                }
                this._super(force);
            },
            __preload: function __preload() {
                this._resetAssembler();
                this._init();
            },
            _init: function _init() {
                this._model = this._skeleton && this._skeleton.model;
                this._calFunc = null;
                this._initJoints();
                this._initJointsTexture();
                this._initCalcFunc();
                this._updateRenderNode();
            },
            _calcWorldMatrixToRoot: function _calcWorldMatrixToRoot(joint) {
                var worldMatrixToRoot = joint._worldMatrixToRoot;
                if (!worldMatrixToRoot) {
                    joint._worldMatrixToRoot = worldMatrixToRoot = cc.mat4();
                    joint.getLocalMatrix(worldMatrixToRoot);
                } else {
                    return;
                }
                var parent = joint.parent;
                if (parent !== this.rootBone) {
                    if (!parent._worldMatrixToRoot) {
                        this._calcWorldMatrixToRoot(parent);
                    }
                    mat4.mul(worldMatrixToRoot, parent._worldMatrixToRoot, worldMatrixToRoot);
                }
            },
            _initJoints: function _initJoints() {
                var joints = this._joints;
                joints.length = 0;
                if (!this.skeleton || !this.rootBone)
                    return;
                var useJointMatrix = this._useJointMatrix();
                var jointPaths = this.skeleton.jointPaths;
                var rootBone = this.rootBone;
                for (var i = 0; i < jointPaths.length; i++) {
                    var joint = cc.find(jointPaths[i], rootBone);
                    if (!joint) {
                        cc.warn('Can not find joint in root bone [%s] with path [%s]', rootBone.name, jointPaths[i]);
                    }
                    if (useJointMatrix) {
                        joint._renderFlag &= ~RenderFlow.FLAG_CHILDREN;
                        this._calcWorldMatrixToRoot(joint);
                    }
                    joints.push(joint);
                }
                if (useJointMatrix) {
                    var uniqueBindPoses = this.skeleton.uniqueBindPoses;
                    for (var _i = 0; _i < jointPaths.length; _i++) {
                        var _joint = joints[_i];
                        if (uniqueBindPoses[_i]) {
                            mat4.mul(_m4_tmp, _joint._worldMatrixToRoot, uniqueBindPoses[_i]);
                            _joint._jointMatrix = mat4.array([], _m4_tmp);
                        } else {
                            _joint._jointMatrix = _joint._worldMatrixToRoot;
                        }
                    }
                }
            },
            _initJointsTexture: function _initJointsTexture() {
                if (!this._skeleton)
                    return;
                var jointCount = this._joints.length;
                var customProperties = this._customProperties;
                var inited = false;
                if (jointCount <= cc.sys.getMaxJointMatrixSize()) {
                    inited = true;
                    this._jointsData = this._jointsFloat32Data = new Float32Array(jointCount * 16);
                    customProperties.setProperty('cc_jointMatrices', this._jointsFloat32Data, enums.PARAM_FLOAT4, true);
                    customProperties.define('CC_USE_JOINTS_TEXTRUE', false);
                }
                if (!inited) {
                    var SUPPORT_FLOAT_TEXTURE = !!cc.sys.glExtension('OES_texture_float');
                    var size = void 0;
                    if (jointCount > 256) {
                        size = 64;
                    } else if (jointCount > 64) {
                        size = 32;
                    } else if (jointCount > 16) {
                        size = 16;
                    } else {
                        size = 8;
                    }
                    this._jointsData = this._jointsFloat32Data = new Float32Array(size * size * 4);
                    var pixelFormat = cc.Texture2D.PixelFormat.RGBA32F, width = size, height = size;
                    if (!SUPPORT_FLOAT_TEXTURE) {
                        this._jointsData = new Uint8Array(this._jointsFloat32Data.buffer);
                        pixelFormat = cc.Texture2D.PixelFormat.RGBA8888;
                        width *= 4;
                        this._usingRGBA8Texture = true;
                        cc.warn('SkinnedMeshRenderer [' + this.node.name + '] has too many joints [' + jointCount + '] and device do not support float32 texture, fallback to use RGBA8888 texture, which is much slower.');
                    }
                    var texture = this._jointsTexture || new cc.Texture2D();
                    var NEAREST = cc.Texture2D.Filter.NEAREST;
                    texture.setFilters(NEAREST, NEAREST);
                    texture.initWithData(this._jointsData, pixelFormat, width, height);
                    this._jointsTexture = texture;
                    this._jointsTextureOptions = {
                        format: pixelFormat,
                        width: texture.width,
                        height: texture.height,
                        images: []
                    };
                    customProperties.setProperty('cc_jointsTexture', texture.getImpl(), enums.PARAM_TEXTURE_2D);
                    customProperties.setProperty('cc_jointsTextureSize', new Float32Array([
                        width,
                        height
                    ]), enums.PARAM_FLOAT2);
                    customProperties.define('CC_JOINTS_TEXTURE_FLOAT32', SUPPORT_FLOAT_TEXTURE);
                    customProperties.define('CC_USE_JOINTS_TEXTRUE', true);
                }
                customProperties.define('CC_USE_SKINNING', true);
            },
            _setJointsDataWithArray: function _setJointsDataWithArray(iMatrix, matrixArray) {
                var data = this._jointsFloat32Data;
                data.set(matrixArray, iMatrix * 16);
            },
            _setJointsDataWithMatrix: function _setJointsDataWithMatrix(iMatrix, matrix) {
                this._jointsFloat32Data.set(matrix.m, 16 * iMatrix);
            },
            _commitJointsData: function _commitJointsData() {
                if (this._jointsTexture) {
                    this._jointsTextureOptions.images[0] = this._jointsData;
                    this._jointsTexture.update(this._jointsTextureOptions);
                }
            },
            _useJointMatrix: function _useJointMatrix() {
                return this._model && this._model.precomputeJointMatrix;
            },
            _updateRenderNode: function _updateRenderNode() {
                if (this._useJointMatrix() || this._usingRGBA8Texture) {
                    this._assembler.setRenderNode(this.rootBone);
                } else {
                    this._assembler.setRenderNode(this._dummyNode);
                }
            },
            _initCalcFunc: function _initCalcFunc() {
                if (this._useJointMatrix()) {
                    this._calFunc = this._calJointMatrix;
                } else if (this._usingRGBA8Texture) {
                    this._calFunc = this._calRGBA8WorldMatrix;
                } else {
                    this._calFunc = this._calWorldMatrix;
                }
            },
            _calJointMatrix: function _calJointMatrix() {
                var joints = this._joints;
                var bindposes = this.skeleton.bindposes;
                var uniqueBindPoses = this.skeleton.uniqueBindPoses;
                for (var i = 0; i < joints.length; ++i) {
                    var joint = joints[i];
                    var jointMatrix = joint._jointMatrix;
                    if (uniqueBindPoses[i]) {
                        this._setJointsDataWithArray(i, jointMatrix);
                    } else {
                        mat4.multiply(_m4_tmp, jointMatrix, bindposes[i]);
                        this._setJointsDataWithMatrix(i, _m4_tmp);
                    }
                }
            },
            _calRGBA8WorldMatrix: function _calRGBA8WorldMatrix() {
                var joints = this._joints;
                var bindposes = this.skeleton.bindposes;
                this.rootBone._updateWorldMatrix();
                var rootMatrix = this.rootBone._worldMatrix;
                var invRootMat = mat4.invert(_m4_tmp2, rootMatrix);
                for (var i = 0; i < joints.length; ++i) {
                    var joint = joints[i];
                    joint._updateWorldMatrix();
                    mat4.multiply(_m4_tmp, invRootMat, joint._worldMatrix);
                    mat4.multiply(_m4_tmp, _m4_tmp, bindposes[i]);
                    this._setJointsDataWithMatrix(i, _m4_tmp);
                }
            },
            _calWorldMatrix: function _calWorldMatrix() {
                var joints = this._joints;
                var bindposes = this.skeleton.bindposes;
                for (var i = 0; i < joints.length; ++i) {
                    var joint = joints[i];
                    joint._updateWorldMatrix();
                    mat4.multiply(_m4_tmp, joint._worldMatrix, bindposes[i]);
                    this._setJointsDataWithMatrix(i, _m4_tmp);
                }
            },
            calcJointMatrix: function calcJointMatrix() {
                if (!this.skeleton || !this.rootBone)
                    return;
                this._calFunc.call(this);
                this._commitJointsData();
            }
        });
        cc.SkinnedMeshRenderer = module.exports = SkinnedMeshRenderer;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,