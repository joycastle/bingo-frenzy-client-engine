(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/3d/polyfill-3d.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _vmath = require('../vmath');
        var Node = require('../CCNode');
        var EventType = Node.EventType;
        var DirtyFlag = Node._LocalDirtyFlag;
        var RenderFlow = require('../renderer/render-flow');
        var ONE_DEGREE = Math.PI / 180;
        var POSITION_ON = 1 << 0;
        var SCALE_ON = 1 << 1;
        var ERR_INVALID_NUMBER = CC_EDITOR && 'The %s is invalid';
        function _updateLocalMatrix3d() {
            if (this._localMatDirty) {
                var t = this._matrix;
                var tm = t.m;
                _vmath.mat4.fromTRSArray(t, this._trs);
                if (this._skewX || this._skewY) {
                    var a = tm[0], b = tm[1], c = tm[4], d = tm[5];
                    var skx = Math.tan(this._skewX * ONE_DEGREE);
                    var sky = Math.tan(this._skewY * ONE_DEGREE);
                    if (skx === Infinity)
                        skx = 99999999;
                    if (sky === Infinity)
                        sky = 99999999;
                    tm[0] = a + c * sky;
                    tm[1] = b + d * sky;
                    tm[4] = c + a * skx;
                    tm[5] = d + b * skx;
                }
                this._localMatDirty = 0;
                this._worldMatDirty = true;
            }
        }
        function _calculWorldMatrix3d() {
            if (this._localMatDirty) {
                this._updateLocalMatrix();
            }
            if (this._parent) {
                var parentMat = this._parent._worldMatrix;
                _vmath.mat4.mul(this._worldMatrix, parentMat, this._matrix);
            } else {
                _vmath.mat4.copy(this._worldMatrix, this._matrix);
            }
            this._worldMatDirty = false;
        }
        function setPosition(newPosOrX, y, z) {
            var x = void 0;
            if (y === undefined) {
                x = newPosOrX.x;
                y = newPosOrX.y;
                z = newPosOrX.z || 0;
            } else {
                x = newPosOrX;
                z = z || 0;
            }
            var trs = this._trs;
            if (trs[0] === x && trs[1] === y && trs[2] === z) {
                return;
            }
            if (CC_EDITOR) {
                var oldPosition = new cc.Vec3(trs[0], trs[1], trs[2]);
            }
            trs[0] = x;
            trs[1] = y;
            trs[2] = z;
            this.setLocalDirty(DirtyFlag.POSITION);
            !CC_NATIVERENDERER && (this._renderFlag |= RenderFlow.FLAG_WORLD_TRANSFORM);
            if (this._eventMask & POSITION_ON) {
                if (CC_EDITOR) {
                    this.emit(EventType.POSITION_CHANGED, oldPosition);
                } else {
                    this.emit(EventType.POSITION_CHANGED);
                }
            }
        }
        function setScale(x, y, z) {
            if (x && typeof x !== 'number') {
                y = x.y;
                z = x.z === undefined ? 1 : x.z;
                x = x.x;
            } else if (x !== undefined && y === undefined) {
                y = x;
                z = x;
            } else if (z === undefined) {
                z = 1;
            }
            var trs = this._trs;
            if (trs[7] !== x || trs[8] !== y || trs[9] !== z) {
                trs[7] = x;
                trs[8] = y;
                trs[9] = z;
                this.setLocalDirty(DirtyFlag.SCALE);
                !CC_NATIVERENDERER && (this._renderFlag |= RenderFlow.FLAG_TRANSFORM);
                if (this._eventMask & SCALE_ON) {
                    this.emit(EventType.SCALE_CHANGED);
                }
            }
        }
        function _update3DFunction() {
            if (this._is3DNode) {
                this._updateLocalMatrix = _updateLocalMatrix3d;
                this._calculWorldMatrix = _calculWorldMatrix3d;
                this._mulMat = _vmath.mat4.mul;
            } else {
                this._updateLocalMatrix = _updateLocalMatrix2d;
                this._calculWorldMatrix = _calculWorldMatrix2d;
                this._mulMat = _mulMat2d;
            }
            if (this._renderComponent && this._renderComponent._on3DNodeChanged) {
                this._renderComponent._on3DNodeChanged();
            }
            this._renderFlag |= RenderFlow.FLAG_TRANSFORM;
            this._localMatDirty = DirtyFlag.ALL;
            if (CC_JSB && CC_NATIVERENDERER) {
                this._proxy.update3DNode();
            }
        }
        function _upgrade_1x_to_2x() {
            if (this._is3DNode) {
                this._update3DFunction();
            }
            _upgrade_1x_to_2x_2d.call(this);
        }
        var proto = cc.Node.prototype;
        var _updateLocalMatrix2d = proto._updateLocalMatrix;
        var _calculWorldMatrix2d = proto._calculWorldMatrix;
        var _upgrade_1x_to_2x_2d = proto._upgrade_1x_to_2x;
        var _mulMat2d = proto._mulMat;
        proto.setPosition = setPosition;
        proto.setScale = setScale;
        proto._upgrade_1x_to_2x = _upgrade_1x_to_2x;
        proto._update3DFunction = _update3DFunction;
        cc.js.getset(proto, 'position', proto.getPosition, setPosition, false, true);
        cc.js.getset(proto, 'is3DNode', function () {
            return this._is3DNode;
        }, function (v) {
            this._is3DNode = v;
            this._update3DFunction();
        });
        cc.js.getset(proto, 'scaleZ', function () {
            return this._trs[9];
        }, function (value) {
            if (this._trs[9] !== value) {
                this._trs[9] = value;
                this.setLocalDirty(DirtyFlag.SCALE);
                !CC_NATIVERENDERER && (this._renderFlag |= RenderFlow.FLAG_TRANSFORM);
                if (this._eventMask & SCALE_ON) {
                    this.emit(EventType.SCALE_CHANGED);
                }
            }
        });
        cc.js.getset(proto, 'z', function () {
            return this._trs[2];
        }, function (value) {
            var trs = this._trs;
            if (value !== trs[2]) {
                if (!CC_EDITOR || isFinite(value)) {
                    trs[2] = value;
                    this.setLocalDirty(DirtyFlag.POSITION);
                    !CC_NATIVERENDERER && (this._renderFlag |= RenderFlow.FLAG_WORLD_TRANSFORM);
                    if (this._eventMask & POSITION_ON) {
                        this.emit(EventType.POSITION_CHANGED);
                    }
                } else {
                    cc.error(ERR_INVALID_NUMBER, 'new z');
                }
            }
        });
        if (CC_EDITOR) {
            var vec3_tmp = cc.v3();
            cc.js.getset(proto, 'worldEulerAngles', function () {
                var angles = cc.v3(this._eulerAngles);
                var parent = this.parent;
                while (parent) {
                    angles.addSelf(parent._eulerAngles);
                    parent = parent.parent;
                }
                return angles;
            }, function (v) {
                vec3_tmp.set(v);
                var parent = this.parent;
                while (parent) {
                    vec3_tmp.subSelf(parent._eulerAngles);
                    parent = parent.parent;
                }
                this.eulerAngles = vec3_tmp;
            });
        }
        cc.js.getset(proto, 'eulerAngles', function () {
            if (CC_EDITOR) {
                return this._eulerAngles;
            } else {
                return _vmath.trs.toEuler(this._eulerAngles, this._trs);
            }
        }, function (v) {
            if (CC_EDITOR) {
                this._eulerAngles.set(v);
            }
            _vmath.trs.fromEuler(this._trs, v);
            this.setLocalDirty(DirtyFlag.ROTATION);
            !CC_NATIVERENDERER && (this._renderFlag |= RenderFlow.FLAG_TRANSFORM);
        });
        cc.js.getset(proto, 'quat', function () {
            var trs = this._trs;
            return cc.quat(trs[3], trs[4], trs[5], trs[6]);
        }, proto.setRotation);
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,