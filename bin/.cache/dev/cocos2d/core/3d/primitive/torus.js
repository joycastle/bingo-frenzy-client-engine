(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/3d/primitive/torus.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = function () {
            var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.4;
            var tube = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.1;
            var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            var radialSegments = opts.radialSegments || 32;
            var tubularSegments = opts.tubularSegments || 32;
            var arc = opts.arc || 2 * Math.PI;
            var positions = [];
            var normals = [];
            var uvs = [];
            var indices = [];
            var minPos = _vmath.vec3.create(-radius - tube, -tube, -radius - tube);
            var maxPos = _vmath.vec3.create(radius + tube, tube, radius + tube);
            var boundingRadius = radius + tube;
            for (var j = 0; j <= radialSegments; j++) {
                for (var i = 0; i <= tubularSegments; i++) {
                    var u = i / tubularSegments;
                    var v = j / radialSegments;
                    var u1 = u * arc;
                    var v1 = v * Math.PI * 2;
                    var x = (radius + tube * Math.cos(v1)) * Math.sin(u1);
                    var y = tube * Math.sin(v1);
                    var z = (radius + tube * Math.cos(v1)) * Math.cos(u1);
                    var nx = Math.sin(u1) * Math.cos(v1);
                    var ny = Math.sin(v1);
                    var nz = Math.cos(u1) * Math.cos(v1);
                    positions.push(x, y, z);
                    normals.push(nx, ny, nz);
                    uvs.push(u, v);
                    if (i < tubularSegments && j < radialSegments) {
                        var seg1 = tubularSegments + 1;
                        var a = seg1 * j + i;
                        var b = seg1 * (j + 1) + i;
                        var c = seg1 * (j + 1) + i + 1;
                        var d = seg1 * j + i + 1;
                        indices.push(a, d, b);
                        indices.push(d, c, b);
                    }
                }
            }
            return new _vertexData2.default(positions, normals, uvs, indices, minPos, maxPos, boundingRadius);
        };
        var _vmath = require('../../vmath');
        var _vertexData = require('./vertex-data');
        var _vertexData2 = _interopRequireDefault(_vertexData);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,