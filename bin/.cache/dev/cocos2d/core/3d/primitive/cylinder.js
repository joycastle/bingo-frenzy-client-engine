(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/3d/primitive/cylinder.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = function () {
            var radiusTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.5;
            var radiusBottom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;
            var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;
            var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var halfHeight = height * 0.5;
            var radialSegments = opts.radialSegments || 32;
            var heightSegments = opts.heightSegments || 1;
            var capped = opts.capped !== undefined ? opts.capped : true;
            var arc = opts.arc || 2 * Math.PI;
            var cntCap = 0;
            if (!capped) {
                if (radiusTop > 0) {
                    cntCap++;
                }
                if (radiusBottom > 0) {
                    cntCap++;
                }
            }
            var vertCount = (radialSegments + 1) * (heightSegments + 1);
            if (capped) {
                vertCount += (radialSegments + 1) * cntCap + radialSegments * cntCap;
            }
            var indexCount = radialSegments * heightSegments * 2 * 3;
            if (capped) {
                indexCount += radialSegments * cntCap * 3;
            }
            var indices = new Array(indexCount);
            var positions = new Array(vertCount * 3);
            var normals = new Array(vertCount * 3);
            var uvs = new Array(vertCount * 2);
            var maxRadius = Math.max(radiusTop, radiusBottom);
            var minPos = _vmath.vec3.create(-maxRadius, -halfHeight, -maxRadius);
            var maxPos = _vmath.vec3.create(maxRadius, halfHeight, maxRadius);
            var boundingRadius = Math.sqrt(maxRadius * maxRadius + halfHeight * halfHeight);
            var index = 0;
            var indexOffset = 0;
            generateTorso();
            if (capped) {
                if (radiusBottom > 0) {
                    generateCap(false);
                }
                if (radiusTop > 0) {
                    generateCap(true);
                }
            }
            return new _vertexData2.default(positions, normals, uvs, indices, minPos, maxPos, boundingRadius);
            function generateTorso() {
                var indexArray = [];
                var r = radiusTop - radiusBottom;
                var slope = r * r / height * Math.sign(r);
                for (var y = 0; y <= heightSegments; y++) {
                    var indexRow = [];
                    var v = y / heightSegments;
                    var radius = v * r + radiusBottom;
                    for (var x = 0; x <= radialSegments; ++x) {
                        var u = x / radialSegments;
                        var theta = u * arc;
                        var sinTheta = Math.sin(theta);
                        var cosTheta = Math.cos(theta);
                        positions[3 * index] = radius * sinTheta;
                        positions[3 * index + 1] = v * height - halfHeight;
                        positions[3 * index + 2] = radius * cosTheta;
                        _vmath.vec3.normalize(temp1, _vmath.vec3.set(temp2, sinTheta, -slope, cosTheta));
                        normals[3 * index] = temp1.x;
                        normals[3 * index + 1] = temp1.y;
                        normals[3 * index + 2] = temp1.z;
                        uvs[2 * index] = (1 - u) * 2 % 1;
                        uvs[2 * index + 1] = v;
                        indexRow.push(index);
                        ++index;
                    }
                    indexArray.push(indexRow);
                }
                for (var _y = 0; _y < heightSegments; ++_y) {
                    for (var _x5 = 0; _x5 < radialSegments; ++_x5) {
                        var i1 = indexArray[_y][_x5];
                        var i2 = indexArray[_y + 1][_x5];
                        var i3 = indexArray[_y + 1][_x5 + 1];
                        var i4 = indexArray[_y][_x5 + 1];
                        indices[indexOffset] = i1;
                        ++indexOffset;
                        indices[indexOffset] = i4;
                        ++indexOffset;
                        indices[indexOffset] = i2;
                        ++indexOffset;
                        indices[indexOffset] = i4;
                        ++indexOffset;
                        indices[indexOffset] = i3;
                        ++indexOffset;
                        indices[indexOffset] = i2;
                        ++indexOffset;
                    }
                }
            }
            function generateCap(top) {
                var centerIndexStart = void 0, centerIndexEnd = void 0;
                var radius = top ? radiusTop : radiusBottom;
                var sign = top ? 1 : -1;
                centerIndexStart = index;
                for (var x = 1; x <= radialSegments; ++x) {
                    positions[3 * index] = 0;
                    positions[3 * index + 1] = halfHeight * sign;
                    positions[3 * index + 2] = 0;
                    normals[3 * index] = 0;
                    normals[3 * index + 1] = sign;
                    normals[3 * index + 2] = 0;
                    uvs[2 * index] = 0.5;
                    uvs[2 * index + 1] = 0.5;
                    ++index;
                }
                centerIndexEnd = index;
                for (var _x6 = 0; _x6 <= radialSegments; ++_x6) {
                    var u = _x6 / radialSegments;
                    var theta = u * arc;
                    var cosTheta = Math.cos(theta);
                    var sinTheta = Math.sin(theta);
                    positions[3 * index] = radius * sinTheta;
                    positions[3 * index + 1] = halfHeight * sign;
                    positions[3 * index + 2] = radius * cosTheta;
                    normals[3 * index] = 0;
                    normals[3 * index + 1] = sign;
                    normals[3 * index + 2] = 0;
                    uvs[2 * index] = 0.5 - sinTheta * 0.5 * sign;
                    uvs[2 * index + 1] = 0.5 + cosTheta * 0.5;
                    ++index;
                }
                for (var _x7 = 0; _x7 < radialSegments; ++_x7) {
                    var c = centerIndexStart + _x7;
                    var i = centerIndexEnd + _x7;
                    if (top) {
                        indices[indexOffset] = i + 1;
                        ++indexOffset;
                        indices[indexOffset] = c;
                        ++indexOffset;
                        indices[indexOffset] = i;
                        ++indexOffset;
                    } else {
                        indices[indexOffset] = c;
                        ++indexOffset;
                        indices[indexOffset] = i + 1;
                        ++indexOffset;
                        indices[indexOffset] = i;
                        ++indexOffset;
                    }
                }
            }
        };
        var _vmath = require('../../vmath');
        var _vertexData = require('./vertex-data');
        var _vertexData2 = _interopRequireDefault(_vertexData);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var temp1 = _vmath.vec3.create(0, 0, 0);
        var temp2 = _vmath.vec3.create(0, 0, 0);
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,