(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/3d/primitive/vertex-data.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = VertexData;
        function VertexData(positions, normals, uvs, indices, minPos, maxPos, boundingRadius) {
            this.positions = positions;
            this.normals = normals;
            this.uvs = uvs;
            this.indices = indices;
            this.minPos = minPos;
            this.maxPos = maxPos;
            this.boundingRadius = boundingRadius;
        }
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlcnRleC1kYXRhLmpzIiwiL1VzZXJzL1NoYXJlZC9iaW5nb19mcmVuenkvZW5naW5lL2NvY29zMmQvY29yZS8zZC9wcmltaXRpdmUvdmVydGV4LWRhdGEuanMiXSwibmFtZXMiOlsiVmVydGV4RGF0YSIsInBvc2l0aW9ucyIsIm5vcm1hbHMiLCJ1dnMiLCJpbmRpY2VzIiwibWluUG9zIiwibWF4UG9zIiwiYm91bmRpbmdSYWRpdXMiXSwibWFwcGluZ3MiOiI7Ozs7SUFXd0JBLElBQUFBLFNBQUFBOztRQVZ4QixVQUFBLE9BQUEsRUFBQTtBQUFBLDhEQUFBO0FBQUEsS0FVd0JBOzs7Ozs7OzBCQUFBQTtRQUFULFNBQVNBLFVBQVQsQ0FBcUJDLFNBQXJCLEVBQWdDQyxPQUFoQyxFQUF5Q0MsR0FBekMsRUFBOENDLE9BQTlDLEVBQXVEQyxNQUF2RCxFQUErREMsTUFBL0QsRUFBdUVDLGNBQXZFLEVBQXVGO0FBQUEsWUFJbEcsS0FBS04sU0FBTCxHQUFpQkEsU0FBakIsQ0FKa0c7QUFBQSxZQVFsRyxLQUFLQyxPQUFMLEdBQWVBLE9BQWYsQ0FSa0c7QUFBQSxZQVlsRyxLQUFLQyxHQUFMLEdBQVdBLEdBQVgsQ0Faa0c7QUFBQSxZQWdCbEcsS0FBS0MsT0FBTCxHQUFlQSxPQUFmLENBaEJrRztBQUFBLFlBb0JsRyxLQUFLQyxNQUFMLEdBQWNBLE1BQWQsQ0FwQmtHO0FBQUEsWUF3QmxHLEtBQUtDLE1BQUwsR0FBY0EsTUFBZCxDQXhCa0c7QUFBQSxZQTRCbEcsS0FBS0MsY0FBTCxHQUFzQkEsY0FBdEIsQ0E1QmtHO0FBQUE7Ozs7OztRQUFsRU4saUJBQUFBLENBQW9CRSxrQkFBcEJGLENBQXJCLFVBQXFCQSxFQUFrRE0sWUFBdkU7QUFBQSxZQUNYLFFBQUEsQ0FBQSxRQUFBLENBQUEsT0FBQSxFQUFBLFNBQUEsRUFBQSxRQUFBLEVBRFc7QUFBQSxTQUFxQk4iLCJmaWxlIjoidmVydGV4LWRhdGEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogQGNsYXNzIHByaW1pdGl2ZS5WZXJ0ZXhEYXRhXG4gKiBAcGFyYW0ge1tOdW1iZXJdfSBwb3NpdGlvbnMgXG4gKiBAcGFyYW0ge1tOdW1iZXJdfSBub3JtYWxzIFxuICogQHBhcmFtIHtbTnVtYmVyXX0gdXZzIFxuICogQHBhcmFtIHtbTnVtYmVyXX0gaW5kaWNlcyBcbiAqIEBwYXJhbSB7VmVjM30gbWluUG9zIFxuICogQHBhcmFtIHtWZWMzfSBtYXhQb3MgXG4gKiBAcGFyYW0ge051bWJlcn0gYm91bmRpbmdSYWRpdXMgXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFZlcnRleERhdGEgKHBvc2l0aW9ucywgbm9ybWFscywgdXZzLCBpbmRpY2VzLCBtaW5Qb3MsIG1heFBvcywgYm91bmRpbmdSYWRpdXMpIHtcbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge1tOdW1iZXJdfSBwb3NpdGlvbnNcbiAgICAgKi9cbiAgICB0aGlzLnBvc2l0aW9ucyA9IHBvc2l0aW9ucztcbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge1tOdW1iZXJdfSBub3JtYWxzXG4gICAgICovXG4gICAgdGhpcy5ub3JtYWxzID0gbm9ybWFscztcbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge1tOdW1iZXJdfSB1dnNcbiAgICAgKi9cbiAgICB0aGlzLnV2cyA9IHV2cztcbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge1tOdW1iZXJdfSBpbmRpY2VzXG4gICAgICovXG4gICAgdGhpcy5pbmRpY2VzID0gaW5kaWNlcztcbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge1ZlYzN9IG1pblBvc1xuICAgICAqL1xuICAgIHRoaXMubWluUG9zID0gbWluUG9zO1xuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7VmVjM30gbWF4UG9zXG4gICAgICovXG4gICAgdGhpcy5tYXhQb3MgPSBtYXhQb3M7XG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGJvdW5kaW5nUmFkaXVzXG4gICAgICovXG4gICAgdGhpcy5ib3VuZGluZ1JhZGl1cyA9IGJvdW5kaW5nUmFkaXVzO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBWZXJ0ZXhEYXRhO1xuXG4vKipcbiAqIEBjbGFzcyBwcmltaXRpdmUuVmVydGV4RGF0YVxuICogQHBhcmFtIHtbTnVtYmVyXX0gcG9zaXRpb25zIFxuICogQHBhcmFtIHtbTnVtYmVyXX0gbm9ybWFscyBcbiAqIEBwYXJhbSB7W051bWJlcl19IHV2cyBcbiAqIEBwYXJhbSB7W051bWJlcl19IGluZGljZXMgXG4gKiBAcGFyYW0ge1ZlYzN9IG1pblBvcyBcbiAqIEBwYXJhbSB7VmVjM30gbWF4UG9zIFxuICogQHBhcmFtIHtOdW1iZXJ9IGJvdW5kaW5nUmFkaXVzIFxuICovXG5mdW5jdGlvbiBWZXJ0ZXhEYXRhKHBvc2l0aW9ucywgbm9ybWFscywgdXZzLCBpbmRpY2VzLCBtaW5Qb3MsIG1heFBvcywgYm91bmRpbmdSYWRpdXMpIHtcbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7W051bWJlcl19IHBvc2l0aW9uc1xuICAgKi9cbiAgdGhpcy5wb3NpdGlvbnMgPSBwb3NpdGlvbnM7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge1tOdW1iZXJdfSBub3JtYWxzXG4gICAqL1xuICB0aGlzLm5vcm1hbHMgPSBub3JtYWxzO1xuICAvKipcbiAgICogQHByb3BlcnR5IHtbTnVtYmVyXX0gdXZzXG4gICAqL1xuICB0aGlzLnV2cyA9IHV2cztcbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7W051bWJlcl19IGluZGljZXNcbiAgICovXG4gIHRoaXMuaW5kaWNlcyA9IGluZGljZXM7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge1ZlYzN9IG1pblBvc1xuICAgKi9cbiAgdGhpcy5taW5Qb3MgPSBtaW5Qb3M7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge1ZlYzN9IG1heFBvc1xuICAgKi9cbiAgdGhpcy5tYXhQb3MgPSBtYXhQb3M7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge051bWJlcn0gYm91bmRpbmdSYWRpdXNcbiAgICovXG4gIHRoaXMuYm91bmRpbmdSYWRpdXMgPSBib3VuZGluZ1JhZGl1cztcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJblpsY25SbGVDMWtZWFJoTG1weklsMHNJbTVoYldWeklqcGJJbFpsY25SbGVFUmhkR0VpTENKd2IzTnBkR2x2Ym5NaUxDSnViM0p0WVd4eklpd2lkWFp6SWl3aWFXNWthV05sY3lJc0ltMXBibEJ2Y3lJc0ltMWhlRkJ2Y3lJc0ltSnZkVzVrYVc1blVtRmthWFZ6SWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3p0clFrRlhkMEpCTEZVN08wRkJWbmhDT3pzN096czdPenM3TzBGQlZXVXNVMEZCVTBFc1ZVRkJWQ3hEUVVGeFFrTXNVMEZCY2tJc1JVRkJaME5ETEU5QlFXaERMRVZCUVhsRFF5eEhRVUY2UXl4RlFVRTRRME1zVDBGQk9VTXNSVUZCZFVSRExFMUJRWFpFTEVWQlFTdEVReXhOUVVFdlJDeEZRVUYxUlVNc1kwRkJka1VzUlVGQmRVWTdRVUZEYkVjN096dEJRVWRCTEU5QlFVdE9MRk5CUVV3c1IwRkJhVUpCTEZOQlFXcENPMEZCUTBFN096dEJRVWRCTEU5QlFVdERMRTlCUVV3c1IwRkJaVUVzVDBGQlpqdEJRVU5CT3pzN1FVRkhRU3hQUVVGTFF5eEhRVUZNTEVkQlFWZEJMRWRCUVZnN1FVRkRRVHM3TzBGQlIwRXNUMEZCUzBNc1QwRkJUQ3hIUVVGbFFTeFBRVUZtTzBGQlEwRTdPenRCUVVkQkxFOUJRVXRETEUxQlFVd3NSMEZCWTBFc1RVRkJaRHRCUVVOQk96czdRVUZIUVN4UFFVRkxReXhOUVVGTUxFZEJRV05CTEUxQlFXUTdRVUZEUVRzN08wRkJSMEVzVDBGQlMwTXNZMEZCVEN4SFFVRnpRa0VzWTBGQmRFSTdRVUZEU0NJc0ltWnBiR1VpT2lKMlpYSjBaWGd0WkdGMFlTNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWx4dUx5b3FYRzRnS2lCQVkyeGhjM01nY0hKcGJXbDBhWFpsTGxabGNuUmxlRVJoZEdGY2JpQXFJRUJ3WVhKaGJTQjdXMDUxYldKbGNsMTlJSEJ2YzJsMGFXOXVjeUJjYmlBcUlFQndZWEpoYlNCN1cwNTFiV0psY2wxOUlHNXZjbTFoYkhNZ1hHNGdLaUJBY0dGeVlXMGdlMXRPZFcxaVpYSmRmU0IxZG5NZ1hHNGdLaUJBY0dGeVlXMGdlMXRPZFcxaVpYSmRmU0JwYm1ScFkyVnpJRnh1SUNvZ1FIQmhjbUZ0SUh0V1pXTXpmU0J0YVc1UWIzTWdYRzRnS2lCQWNHRnlZVzBnZTFabFl6TjlJRzFoZUZCdmN5QmNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JpYjNWdVpHbHVaMUpoWkdsMWN5QmNiaUFxTDF4dVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRnVm1WeWRHVjRSR0YwWVNBb2NHOXphWFJwYjI1ekxDQnViM0p0WVd4ekxDQjFkbk1zSUdsdVpHbGpaWE1zSUcxcGJsQnZjeXdnYldGNFVHOXpMQ0JpYjNWdVpHbHVaMUpoWkdsMWN5a2dlMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3VzA1MWJXSmxjbDE5SUhCdmMybDBhVzl1YzF4dUlDQWdJQ0FxTDF4dUlDQWdJSFJvYVhNdWNHOXphWFJwYjI1eklEMGdjRzl6YVhScGIyNXpPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3VzA1MWJXSmxjbDE5SUc1dmNtMWhiSE5jYmlBZ0lDQWdLaTljYmlBZ0lDQjBhR2x6TG01dmNtMWhiSE1nUFNCdWIzSnRZV3h6TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCN1cwNTFiV0psY2wxOUlIVjJjMXh1SUNBZ0lDQXFMMXh1SUNBZ0lIUm9hWE11ZFhaeklEMGdkWFp6TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCN1cwNTFiV0psY2wxOUlHbHVaR2xqWlhOY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IwYUdsekxtbHVaR2xqWlhNZ1BTQnBibVJwWTJWek8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQjdWbVZqTTMwZ2JXbHVVRzl6WEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1dGFXNVFiM01nUFNCdGFXNVFiM003WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUh0V1pXTXpmU0J0WVhoUWIzTmNiaUFnSUNBZ0tpOWNiaUFnSUNCMGFHbHpMbTFoZUZCdmN5QTlJRzFoZUZCdmN6dGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMDUxYldKbGNuMGdZbTkxYm1ScGJtZFNZV1JwZFhOY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IwYUdsekxtSnZkVzVrYVc1blVtRmthWFZ6SUQwZ1ltOTFibVJwYm1kU1lXUnBkWE03WEc1OVhHNGlYWDA9Il19