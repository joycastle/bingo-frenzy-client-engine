(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/3d/primitive/quad.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = function () {
            return new _vertexData2.default(positions, normals, uvs, indices, minPos, maxPos, boundingRadius);
        };
        var _vmath = require('../../vmath');
        var _vertexData = require('./vertex-data');
        var _vertexData2 = _interopRequireDefault(_vertexData);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var positions = [
            -0.5,
            -0.5,
            0,
            -0.5,
            0.5,
            0,
            0.5,
            0.5,
            0,
            0.5,
            -0.5,
            0
        ];
        var normals = [
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1
        ];
        var uvs = [
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            0
        ];
        var indices = [
            0,
            3,
            1,
            3,
            2,
            1
        ];
        var minPos = _vmath.vec3.create(-0.5, -0.5, 0);
        var maxPos = _vmath.vec3.create(0.5, 0.5, 0);
        var boundingRadius = Math.sqrt(0.5 * 0.5 + 0.5 * 0.5);
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInF1YWQuanMiLCIvVXNlcnMvU2hhcmVkL2JpbmdvX2ZyZW56eS9lbmdpbmUvY29jb3MyZC9jb3JlLzNkL3ByaW1pdGl2ZS9xdWFkLmpzIl0sIm5hbWVzIjpbIlZlcnRleERhdGEiLCJwb3NpdGlvbnMiLCJub3JtYWxzIiwidXZzIiwiaW5kaWNlcyIsIm1pblBvcyIsIm1heFBvcyIsImJvdW5kaW5nUmFkaXVzIiwidmVjMyIsImNyZWF0ZSIsIk1hdGgiLCJzcXJ0Il0sIm1hcHBpbmdzIjoiOzs7OztRQW9DZSxPQUFZLE9BQUEsQ0FBQSxPQUFBLENBQVo7UUFDRkEsVUFDVEMsT0FEU0QsRUFBSjtBQUFBLDhEQUFBO0FBQUE7SUFuQ1QsU0FBQSxRQUFBLENBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUE7QUFBQTs7U0FBQTtBQUFBLFFBRkE7QUFBQSxzRUFBQTtBQUFBLDBCQW9DZSxZQUFZO0FBQUEsWUFDekIsT0FBTyxJQUFJQSxZQUFBQSxDQUFBQSxPQUFKLENBQ0xDLFNBREssRUFFTEMsT0FGSyxFQUdMQyxHQUhLLEVBSUxDLE9BSkssRUFLTEMsTUFMSyxFQU1MQyxNQU5LLEVBT0xDLGNBUEssQ0FBUCxDQUR5QjtBQUFBLFVBcEMzQjtBQUFBLFFBRUEsSUFBQSxNQUFBLEdBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQSxDQUZBO0FBQUEsUUFHQSxJQUFBLFdBQUEsR0FBQSxPQUFBLENBQUEsZUFBQSxDQUFBLENBSEE7QUFBQSwrREFBQTtBQUFBOztTQUFBO0FBQUEsUUFLQSxJQUFJTixTQUFBQSxHQUFZO0FBQUEsWUFDZCxDQUFDLEdBRGE7QUFBQSxZQUNSLENBQUMsR0FETztBQUFBLFlBQ0YsQ0FERTtBQUFBLFlBRWQsQ0FBQyxHQUZhO0FBQUEsWUFFUCxHQUZPO0FBQUEsWUFFRixDQUZFO0FBQUEsWUFHYixHQUhhO0FBQUEsWUFHUCxHQUhPO0FBQUEsWUFHRixDQUhFO0FBQUEsWUFJYixHQUphO0FBQUEsWUFJUixDQUFDLEdBSk87QUFBQSxZQUlGLENBSkU7QUFBQSxTQUFoQixDQUxBO0FBQUEsUUFZQSxJQUFJQyxPQUFBQSxHQUFVO0FBQUEsWUFDWixDQURZO0FBQUEsWUFDVCxDQURTO0FBQUEsWUFDTixDQURNO0FBQUEsWUFFWixDQUZZO0FBQUEsWUFFVCxDQUZTO0FBQUEsWUFFTixDQUZNO0FBQUEsWUFHWixDQUhZO0FBQUEsWUFHVCxDQUhTO0FBQUEsWUFHTixDQUhNO0FBQUEsWUFJWixDQUpZO0FBQUEsWUFJVCxDQUpTO0FBQUEsWUFJTixDQUpNO0FBQUEsU0FBZCxDQVpBO0FBQUEsUUFtQkEsSUFBSUMsR0FBQUEsR0FBTTtBQUFBLFlBQ1IsQ0FEUTtBQUFBLFlBQ0wsQ0FESztBQUFBLFlBRVIsQ0FGUTtBQUFBLFlBRUwsQ0FGSztBQUFBLFlBR1IsQ0FIUTtBQUFBLFlBR0wsQ0FISztBQUFBLFlBSVIsQ0FKUTtBQUFBLFlBSUwsQ0FKSztBQUFBLFNBQVYsQ0FuQkE7QUFBQSxRQTBCQSxJQUFJQyxPQUFBQSxHQUFVO0FBQUEsWUFDWixDQURZO0FBQUEsWUFDVCxDQURTO0FBQUEsWUFDTixDQURNO0FBQUEsWUFFWixDQUZZO0FBQUEsWUFFVCxDQUZTO0FBQUEsWUFFTixDQUZNO0FBQUEsU0FBZCxDQTFCQTtBQUFBLFFBZ0NBLElBQUlDLE1BQUFBLEdBQVNHLE1BQUFBLENBQUFBLElBQUFBLENBQUtDLE1BQUxELENBQVksQ0FBQyxHQUFiQSxFQUFrQixDQUFDLEdBQW5CQSxFQUF3QixDQUF4QkEsQ0FBYixDQWhDQTtBQUFBLFFBaUNBLElBQUlGLE1BQUFBLEdBQVNFLE1BQUFBLENBQUFBLElBQUFBLENBQUtDLE1BQUxELENBQVksR0FBWkEsRUFBaUIsR0FBakJBLEVBQXNCLENBQXRCQSxDQUFiLENBakNBO0FBQUEsUUFrQ0EsSUFBSUQsY0FBQUEsR0FBaUJHLElBQUFBLENBQUtDLElBQUxELENBQVUsTUFBTSxHQUFOLEdBQVksTUFBTSxHQUE1QkEsQ0FBckIsQ0FsQ0E7QUFBQSw0Q0FFQTtBQUFBOzs7OztZQUdnQixRQUFBLENBQ0MsUUFBQSxDQUFBLE9BREQsRUFDQyxTQURELEVBQ0MsUUFERCIsImZpbGUiOiJxdWFkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgeyB2ZWMzIH0gZnJvbSAnLi4vLi4vdm1hdGgnO1xuaW1wb3J0IFZlcnRleERhdGEgZnJvbSAnLi92ZXJ0ZXgtZGF0YSc7XG5cbmxldCBwb3NpdGlvbnMgPSBbXG4gIC0wLjUsIC0wLjUsIDAsIC8vIGJvdHRvbS1sZWZ0XG4gIC0wLjUsICAwLjUsIDAsIC8vIHRvcC1sZWZ0XG4gICAwLjUsICAwLjUsIDAsIC8vIHRvcC1yaWdodFxuICAgMC41LCAtMC41LCAwLCAvLyBib3R0b20tcmlnaHRcbl07XG5cbmxldCBub3JtYWxzID0gW1xuICAwLCAwLCAxLFxuICAwLCAwLCAxLFxuICAwLCAwLCAxLFxuICAwLCAwLCAxLFxuXTtcblxubGV0IHV2cyA9IFtcbiAgMCwgMCxcbiAgMCwgMSxcbiAgMSwgMSxcbiAgMSwgMCxcbl07XG5cbmxldCBpbmRpY2VzID0gW1xuICAwLCAzLCAxLFxuICAzLCAyLCAxXG5dO1xuXG4vLyBUT0RPOiA/XG5sZXQgbWluUG9zID0gdmVjMy5jcmVhdGUoLTAuNSwgLTAuNSwgMCk7XG5sZXQgbWF4UG9zID0gdmVjMy5jcmVhdGUoMC41LCAwLjUsIDApO1xubGV0IGJvdW5kaW5nUmFkaXVzID0gTWF0aC5zcXJ0KDAuNSAqIDAuNSArIDAuNSAqIDAuNSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBWZXJ0ZXhEYXRhKFxuICAgIHBvc2l0aW9ucyxcbiAgICBub3JtYWxzLFxuICAgIHV2cyxcbiAgICBpbmRpY2VzLFxuICAgIG1pblBvcyxcbiAgICBtYXhQb3MsXG4gICAgYm91bmRpbmdSYWRpdXNcbiAgKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IF92ZXJ0ZXhEYXRhMi5kZWZhdWx0KHBvc2l0aW9ucywgbm9ybWFscywgdXZzLCBpbmRpY2VzLCBtaW5Qb3MsIG1heFBvcywgYm91bmRpbmdSYWRpdXMpO1xufTtcblxudmFyIF92bWF0aCA9IHJlcXVpcmUoJy4uLy4uL3ZtYXRoJyk7XG5cbnZhciBfdmVydGV4RGF0YSA9IHJlcXVpcmUoJy4vdmVydGV4LWRhdGEnKTtcblxudmFyIF92ZXJ0ZXhEYXRhMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZlcnRleERhdGEpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgcG9zaXRpb25zID0gWy0wLjUsIC0wLjUsIDAsIC8vIGJvdHRvbS1sZWZ0XG4tMC41LCAwLjUsIDAsIC8vIHRvcC1sZWZ0XG4wLjUsIDAuNSwgMCwgLy8gdG9wLXJpZ2h0XG4wLjUsIC0wLjUsIDBdO1xuXG52YXIgbm9ybWFscyA9IFswLCAwLCAxLCAwLCAwLCAxLCAwLCAwLCAxLCAwLCAwLCAxXTtcblxudmFyIHV2cyA9IFswLCAwLCAwLCAxLCAxLCAxLCAxLCAwXTtcblxudmFyIGluZGljZXMgPSBbMCwgMywgMSwgMywgMiwgMV07XG5cbi8vIFRPRE86ID9cbnZhciBtaW5Qb3MgPSBfdm1hdGgudmVjMy5jcmVhdGUoLTAuNSwgLTAuNSwgMCk7XG52YXIgbWF4UG9zID0gX3ZtYXRoLnZlYzMuY3JlYXRlKDAuNSwgMC41LCAwKTtcbnZhciBib3VuZGluZ1JhZGl1cyA9IE1hdGguc3FydCgwLjUgKiAwLjUgKyAwLjUgKiAwLjUpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluRjFZV1F1YW5NaVhTd2libUZ0WlhNaU9sc2lWbVZ5ZEdWNFJHRjBZU0lzSW5CdmMybDBhVzl1Y3lJc0ltNXZjbTFoYkhNaUxDSjFkbk1pTENKcGJtUnBZMlZ6SWl3aWJXbHVVRzl6SWl3aWJXRjRVRzl6SWl3aVltOTFibVJwYm1kU1lXUnBkWE1pTENKMlpXTXpJaXdpWTNKbFlYUmxJaXdpVFdGMGFDSXNJbk54Y25RaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk96czdPenM3YTBKQmIwTmxMRmxCUVZrN1FVRkRla0lzVTBGQlR5eEpRVUZKUVN4dlFrRkJTaXhEUVVOTVF5eFRRVVJMTEVWQlJVeERMRTlCUmtzc1JVRkhURU1zUjBGSVN5eEZRVWxNUXl4UFFVcExMRVZCUzB4RExFMUJURXNzUlVGTlRFTXNUVUZPU3l4RlFVOU1ReXhqUVZCTExFTkJRVkE3UVVGVFJDeERPenRCUVRWRFJEczdRVUZEUVRzN096czdPMEZCUlVFc1NVRkJTVTRzV1VGQldTeERRVU5rTEVOQlFVTXNSMEZFWVN4RlFVTlNMRU5CUVVNc1IwRkVUeXhGUVVOR0xFTkJSRVVzUlVGRFF6dEJRVU5tTEVOQlFVTXNSMEZHWVN4RlFVVlFMRWRCUms4c1JVRkZSaXhEUVVaRkxFVkJSVU03UVVGRFpDeEhRVWhoTEVWQlIxQXNSMEZJVHl4RlFVZEdMRU5CU0VVc1JVRkhRenRCUVVOa0xFZEJTbUVzUlVGSlVpeERRVUZETEVkQlNrOHNSVUZKUml4RFFVcEZMRU5CUVdoQ096dEJRVTlCTEVsQlFVbERMRlZCUVZVc1EwRkRXaXhEUVVSWkxFVkJRMVFzUTBGRVV5eEZRVU5PTEVOQlJFMHNSVUZGV2l4RFFVWlpMRVZCUlZRc1EwRkdVeXhGUVVWT0xFTkJSazBzUlVGSFdpeERRVWhaTEVWQlIxUXNRMEZJVXl4RlFVZE9MRU5CU0Uwc1JVRkpXaXhEUVVwWkxFVkJTVlFzUTBGS1V5eEZRVWxPTEVOQlNrMHNRMEZCWkRzN1FVRlBRU3hKUVVGSlF5eE5RVUZOTEVOQlExSXNRMEZFVVN4RlFVTk1MRU5CUkVzc1JVRkZVaXhEUVVaUkxFVkJSVXdzUTBGR1N5eEZRVWRTTEVOQlNGRXNSVUZIVEN4RFFVaExMRVZCU1ZJc1EwRktVU3hGUVVsTUxFTkJTa3NzUTBGQlZqczdRVUZQUVN4SlFVRkpReXhWUVVGVkxFTkJRMW9zUTBGRVdTeEZRVU5VTEVOQlJGTXNSVUZEVGl4RFFVUk5MRVZCUlZvc1EwRkdXU3hGUVVWVUxFTkJSbE1zUlVGRlRpeERRVVpOTEVOQlFXUTdPMEZCUzBFN1FVRkRRU3hKUVVGSlF5eFRRVUZUUnl4WlFVRkxReXhOUVVGTUxFTkJRVmtzUTBGQlF5eEhRVUZpTEVWQlFXdENMRU5CUVVNc1IwRkJia0lzUlVGQmQwSXNRMEZCZUVJc1EwRkJZanRCUVVOQkxFbEJRVWxJTEZOQlFWTkZMRmxCUVV0RExFMUJRVXdzUTBGQldTeEhRVUZhTEVWQlFXbENMRWRCUVdwQ0xFVkJRWE5DTEVOQlFYUkNMRU5CUVdJN1FVRkRRU3hKUVVGSlJpeHBRa0ZCYVVKSExFdEJRVXRETEVsQlFVd3NRMEZCVlN4TlFVRk5MRWRCUVU0c1IwRkJXU3hOUVVGTkxFZEJRVFZDTEVOQlFYSkNJaXdpWm1sc1pTSTZJbkYxWVdRdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUluZFhObElITjBjbWxqZENjN1hHNWNibWx0Y0c5eWRDQjdJSFpsWXpNZ2ZTQm1jbTl0SUNjdUxpOHVMaTkyYldGMGFDYzdYRzVwYlhCdmNuUWdWbVZ5ZEdWNFJHRjBZU0JtY205dElDY3VMM1psY25SbGVDMWtZWFJoSnp0Y2JseHViR1YwSUhCdmMybDBhVzl1Y3lBOUlGdGNiaUFnTFRBdU5Td2dMVEF1TlN3Z01Dd2dMeThnWW05MGRHOXRMV3hsWm5SY2JpQWdMVEF1TlN3Z0lEQXVOU3dnTUN3Z0x5OGdkRzl3TFd4bFpuUmNiaUFnSURBdU5Td2dJREF1TlN3Z01Dd2dMeThnZEc5d0xYSnBaMmgwWEc0Z0lDQXdMalVzSUMwd0xqVXNJREFzSUM4dklHSnZkSFJ2YlMxeWFXZG9kRnh1WFR0Y2JseHViR1YwSUc1dmNtMWhiSE1nUFNCYlhHNGdJREFzSURBc0lERXNYRzRnSURBc0lEQXNJREVzWEc0Z0lEQXNJREFzSURFc1hHNGdJREFzSURBc0lERXNYRzVkTzF4dVhHNXNaWFFnZFhaeklEMGdXMXh1SUNBd0xDQXdMRnh1SUNBd0xDQXhMRnh1SUNBeExDQXhMRnh1SUNBeExDQXdMRnh1WFR0Y2JseHViR1YwSUdsdVpHbGpaWE1nUFNCYlhHNGdJREFzSURNc0lERXNYRzRnSURNc0lESXNJREZjYmwwN1hHNWNiaTh2SUZSUFJFODZJRDljYm14bGRDQnRhVzVRYjNNZ1BTQjJaV016TG1OeVpXRjBaU2d0TUM0MUxDQXRNQzQxTENBd0tUdGNibXhsZENCdFlYaFFiM01nUFNCMlpXTXpMbU55WldGMFpTZ3dMalVzSURBdU5Td2dNQ2s3WEc1c1pYUWdZbTkxYm1ScGJtZFNZV1JwZFhNZ1BTQk5ZWFJvTG5OeGNuUW9NQzQxSUNvZ01DNDFJQ3NnTUM0MUlDb2dNQzQxS1R0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNCeVpYUjFjbTRnYm1WM0lGWmxjblJsZUVSaGRHRW9YRzRnSUNBZ2NHOXphWFJwYjI1ekxGeHVJQ0FnSUc1dmNtMWhiSE1zWEc0Z0lDQWdkWFp6TEZ4dUlDQWdJR2x1WkdsalpYTXNYRzRnSUNBZ2JXbHVVRzl6TEZ4dUlDQWdJRzFoZUZCdmN5eGNiaUFnSUNCaWIzVnVaR2x1WjFKaFpHbDFjMXh1SUNBcE8xeHVmVnh1SWwxOSJdfQ==