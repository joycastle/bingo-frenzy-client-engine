(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/3d/actions.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var quat = cc.vmath.quat;
        var _quat_tmp = cc.quat();
        var _vec3_tmp = cc.v3();
        cc.Rotate3DTo = cc.Class({
            name: 'cc.Rotate3DTo',
            extends: cc.ActionInterval,
            ctor: function ctor(duration, dstAngleX, dstAngleY, dstAngleZ) {
                this._startQuat = cc.quat();
                this._dstQuat = cc.quat();
                dstAngleX !== undefined && this.initWithDuration(duration, dstAngleX, dstAngleY, dstAngleZ);
            },
            initWithDuration: function initWithDuration(duration, dstAngleX, dstAngleY, dstAngleZ) {
                if (cc.ActionInterval.prototype.initWithDuration.call(this, duration)) {
                    var dstQuat = this._dstQuat;
                    if (dstAngleX instanceof cc.Quat) {
                        dstQuat.set(dstAngleX);
                    } else {
                        if (dstAngleX instanceof cc.Vec3) {
                            dstAngleY = dstAngleX.y;
                            dstAngleZ = dstAngleX.z;
                            dstAngleX = dstAngleX.x;
                        } else {
                            dstAngleY = dstAngleY || 0;
                            dstAngleZ = dstAngleZ || 0;
                        }
                        cc.vmath.quat.fromEuler(dstQuat, dstAngleX, dstAngleY, dstAngleZ);
                    }
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.Rotate3DTo();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._dstQuat);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._startQuat.set(target.quat);
            },
            reverse: function reverse() {
                cc.logID(1016);
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                if (this.target) {
                    quat.slerp(_quat_tmp, this._startQuat, this._dstQuat, dt);
                    this.target.setRotation(_quat_tmp);
                }
            }
        });
        cc.rotate3DTo = function (duration, dstAngleX, dstAngleY, dstAngleZ) {
            return new cc.Rotate3DTo(duration, dstAngleX, dstAngleY, dstAngleZ);
        };
        cc.Rotate3DBy = cc.Class({
            name: 'cc.Rotate3DBy',
            extends: cc.ActionInterval,
            ctor: function ctor(duration, deltaAngleX, deltaAngleY, deltaAngleZ) {
                this._angle = cc.v3();
                this._quat = cc.quat();
                this._lastDt = 0;
                deltaAngleX !== undefined && this.initWithDuration(duration, deltaAngleX, deltaAngleY, deltaAngleZ);
            },
            initWithDuration: function initWithDuration(duration, deltaAngleX, deltaAngleY, deltaAngleZ) {
                if (cc.ActionInterval.prototype.initWithDuration.call(this, duration)) {
                    if (deltaAngleX instanceof cc.Vec3) {
                        deltaAngleY = deltaAngleX.y;
                        deltaAngleZ = deltaAngleX.z;
                        deltaAngleX = deltaAngleX.x;
                    } else {
                        deltaAngleY = deltaAngleY || 0;
                        deltaAngleZ = deltaAngleZ || 0;
                    }
                    cc.vmath.vec3.set(this._angle, deltaAngleX, deltaAngleY, deltaAngleZ);
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.Rotate3DBy();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._angle);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._quat.set(target.quat);
                this._lastDt = 0;
            },
            update: function () {
                var RAD = Math.PI / 180;
                return function (dt) {
                    dt = this._computeEaseTime(dt);
                    if (this.target) {
                        var angle = this._angle;
                        var dstQuat = this._quat;
                        var delta = dt - this._lastDt;
                        var angleX = angle.x, angleY = angle.y, angleZ = angle.z;
                        if (angleX)
                            quat.rotateX(dstQuat, dstQuat, angleX * RAD * delta);
                        if (angleY)
                            quat.rotateY(dstQuat, dstQuat, angleY * RAD * delta);
                        if (angleZ)
                            quat.rotateZ(dstQuat, dstQuat, angleZ * RAD * delta);
                        this.target.setRotation(dstQuat);
                        this._lastDt = dt;
                    }
                };
            }(),
            reverse: function reverse() {
                var angle = this._angle;
                _vec3_tmp.x = -angle.x;
                _vec3_tmp.y = -angle.y;
                _vec3_tmp.z = -angle.z;
                var action = new cc.Rotate3DBy(this._duration, _vec3_tmp);
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            }
        });
        cc.rotate3DBy = function (duration, deltaAngleX, deltaAngleY, deltaAngleZ) {
            return new cc.Rotate3DBy(duration, deltaAngleX, deltaAngleY, deltaAngleZ);
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFjdGlvbnMuanMiLCIvVXNlcnMvU2hhcmVkL2JpbmdvX2ZyZW56eS9lbmdpbmUvY29jb3MyZC9jb3JlLzNkL2FjdGlvbnMuanMiXSwibmFtZXMiOlsicXVhdCIsInYzIiwiY2MiLCJ2bWF0aCIsIl9xdWF0X3RtcCIsIl92ZWMzX3RtcCIsIlJvdGF0ZTNEVG8iLCJDbGFzcyIsIm5hbWUiLCJleHRlbmRzIiwiQWN0aW9uSW50ZXJ2YWwiLCJjdG9yIiwiZHVyYXRpb24iLCJkc3RBbmdsZVgiLCJkc3RBbmdsZVkiLCJkc3RBbmdsZVoiLCJfc3RhcnRRdWF0IiwiX2RzdFF1YXQiLCJ1bmRlZmluZWQiLCJpbml0V2l0aER1cmF0aW9uIiwicHJvdG90eXBlIiwiY2FsbCIsImRzdFF1YXQiLCJRdWF0Iiwic2V0IiwiVmVjMyIsInkiLCJ6IiwieCIsImZyb21FdWxlciIsImNsb25lIiwiYWN0aW9uIiwiX2Nsb25lRGVjb3JhdGlvbiIsIl9kdXJhdGlvbiIsInN0YXJ0V2l0aFRhcmdldCIsInRhcmdldCIsInJldmVyc2UiLCJsb2dJRCIsInVwZGF0ZSIsImR0IiwiX2NvbXB1dGVFYXNlVGltZSIsInNsZXJwIiwic2V0Um90YXRpb24iLCJyb3RhdGUzRFRvIiwiUm90YXRlM0RCeSIsImRlbHRhQW5nbGVYIiwiZGVsdGFBbmdsZVkiLCJkZWx0YUFuZ2xlWiIsIl9hbmdsZSIsIl9xdWF0IiwiX2xhc3REdCIsInZlYzMiLCJSQUQiLCJNYXRoIiwiUEkiLCJhbmdsZSIsImRlbHRhIiwiYW5nbGVYIiwiYW5nbGVZIiwiYW5nbGVaIiwicm90YXRlWCIsInJvdGF0ZVkiLCJyb3RhdGVaIiwiX3JldmVyc2VFYXNlTGlzdCIsInJvdGF0ZTNEQnkiXSwibWFwcGluZ3MiOiI7SUFDc0JBLElBQXRCLE9BQUEsR0FBQSxPQUFBLE9BQUEsS0FBQSxXQUFBLElBQUEsT0FBQSxPQUFBLEtBQUEsV0FBc0JBO0lBQ0hBLElBQUgsUUFBQSxHQUFoQixPQUFBLEdBQUEsTUFBQSxHQUFBLEVBQUEs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MEMsVUFBUCxDQUFrQmhDLFFBQWxCLEVBQTRCaUMsV0FBNUIsRUFBeUNDLFdBQXpDLEVBQXNEQyxXQUF0RCxDQUFQLENBRHVFO0FBQUEsU0FBM0U3Qzs7Ozs7O1lBbE15QixRQUFBLENBQUEsUUFBQSxDQUFBLE9BQUEsRUFBQSxTQUFBLEVBQUEsUUFBQSIsImZpbGUiOiJhY3Rpb25zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5jb25zdCBxdWF0ID0gY2Mudm1hdGgucXVhdDtcbmxldCBfcXVhdF90bXAgPSBjYy5xdWF0KCk7XG5sZXQgX3ZlYzNfdG1wID0gY2MudjMoKTtcblxuLypcbiAqIFJvdGF0ZXMgYSBOb2RlIG9iamVjdCB0byBhIGNlcnRhaW4gYW5nbGUgYnkgbW9kaWZ5aW5nIGl0cyBxdWF0ZXJuaW9uIHByb3BlcnR5LiA8YnIvPlxuICogVGhlIGRpcmVjdGlvbiB3aWxsIGJlIGRlY2lkZWQgYnkgdGhlIHNob3J0ZXN0IGFuZ2xlLlxuICogQGNsYXNzIFJvdGF0ZTNEVG9cbiAqIEBleHRlbmRzIEFjdGlvbkludGVydmFsXG4gKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb24gZHVyYXRpb24gaW4gc2Vjb25kc1xuICogQHBhcmFtIHtOdW1iZXJ8VmVjM30gZHN0QW5nbGVYIGRzdEFuZ2xlWCBpbiBkZWdyZWVzLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtkc3RBbmdsZVldIGRzdEFuZ2xlWSBpbiBkZWdyZWVzLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtkc3RBbmdsZVpdIGRzdEFuZ2xlWiBpbiBkZWdyZWVzLlxuICogQGV4YW1wbGVcbiAqIHZhciByb3RhdGUzRFRvID0gbmV3IGNjLlJvdGF0ZTNEVG8oMiwgY2MudjMoMCwgMTgwLCAwKSk7XG4gKi9cbmNjLlJvdGF0ZTNEVG8gPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLlJvdGF0ZTNEVG8nLFxuICAgIGV4dGVuZHM6IGNjLkFjdGlvbkludGVydmFsLFxuXG4gICAgY3RvcjpmdW5jdGlvbiAoZHVyYXRpb24sIGRzdEFuZ2xlWCwgZHN0QW5nbGVZLCBkc3RBbmdsZVopIHtcbiAgICAgICAgdGhpcy5fc3RhcnRRdWF0ID0gY2MucXVhdCgpO1xuICAgICAgICB0aGlzLl9kc3RRdWF0ID0gY2MucXVhdCgpO1xuXG5cdFx0ZHN0QW5nbGVYICE9PSB1bmRlZmluZWQgJiYgdGhpcy5pbml0V2l0aER1cmF0aW9uKGR1cmF0aW9uLCBkc3RBbmdsZVgsIGRzdEFuZ2xlWSwgZHN0QW5nbGVaKTtcbiAgICB9LFxuXG4gICAgLypcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfFZlYzN8UXVhdH0gZHN0QW5nbGVYXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGRzdEFuZ2xlWVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkc3RBbmdsZVpcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGluaXRXaXRoRHVyYXRpb246ZnVuY3Rpb24gKGR1cmF0aW9uLCBkc3RBbmdsZVgsIGRzdEFuZ2xlWSwgZHN0QW5nbGVaKSB7XG4gICAgICAgIGlmIChjYy5BY3Rpb25JbnRlcnZhbC5wcm90b3R5cGUuaW5pdFdpdGhEdXJhdGlvbi5jYWxsKHRoaXMsIGR1cmF0aW9uKSkge1xuICAgICAgICAgICAgbGV0IGRzdFF1YXQgPSB0aGlzLl9kc3RRdWF0O1xuICAgICAgICAgICAgaWYgKGRzdEFuZ2xlWCBpbnN0YW5jZW9mIGNjLlF1YXQpIHtcbiAgICAgICAgICAgICAgICBkc3RRdWF0LnNldChkc3RBbmdsZVgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGRzdEFuZ2xlWCBpbnN0YW5jZW9mIGNjLlZlYzMpIHtcbiAgICAgICAgICAgICAgICAgICAgZHN0QW5nbGVZID0gZHN0QW5nbGVYLnk7XG4gICAgICAgICAgICAgICAgICAgIGRzdEFuZ2xlWiA9IGRzdEFuZ2xlWC56O1xuICAgICAgICAgICAgICAgICAgICBkc3RBbmdsZVggPSBkc3RBbmdsZVgueDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRzdEFuZ2xlWSA9IGRzdEFuZ2xlWSB8fCAwO1xuICAgICAgICAgICAgICAgICAgICBkc3RBbmdsZVogPSBkc3RBbmdsZVogfHwgMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2Mudm1hdGgucXVhdC5mcm9tRXVsZXIoZHN0UXVhdCwgZHN0QW5nbGVYLCBkc3RBbmdsZVksIGRzdEFuZ2xlWik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIGNsb25lOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5Sb3RhdGUzRFRvKCk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICBhY3Rpb24uaW5pdFdpdGhEdXJhdGlvbih0aGlzLl9kdXJhdGlvbiwgdGhpcy5fZHN0UXVhdCk7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIHN0YXJ0V2l0aFRhcmdldDpmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5zdGFydFdpdGhUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpO1xuICAgICAgICB0aGlzLl9zdGFydFF1YXQuc2V0KHRhcmdldC5xdWF0KTtcbiAgICB9LFxuXG4gICAgcmV2ZXJzZTpmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNjLmxvZ0lEKDEwMTYpO1xuICAgIH0sXG5cbiAgICB1cGRhdGU6ZnVuY3Rpb24gKGR0KSB7XG4gICAgICAgIGR0ID0gdGhpcy5fY29tcHV0ZUVhc2VUaW1lKGR0KTtcbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0KSB7XG4gICAgICAgICAgICBxdWF0LnNsZXJwKF9xdWF0X3RtcCwgdGhpcy5fc3RhcnRRdWF0LCB0aGlzLl9kc3RRdWF0LCBkdCk7XG4gICAgICAgICAgICB0aGlzLnRhcmdldC5zZXRSb3RhdGlvbihfcXVhdF90bXApO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbi8qKlxuICogISNlblxuICogUm90YXRlcyBhIE5vZGUgb2JqZWN0IHRvIGEgY2VydGFpbiBhbmdsZSBieSBtb2RpZnlpbmcgaXRzIHF1dGVybmlvbiBwcm9wZXJ0eS4gPGJyLz5cbiAqIFRoZSBkaXJlY3Rpb24gd2lsbCBiZSBkZWNpZGVkIGJ5IHRoZSBzaG9ydGVzdCBhbmdsZS5cbiAqICEjemgg5peL6L2s5Yiw55uu5qCH6KeS5bqm77yM6YCa6L+H6YCQ5bin5L+u5pS55a6D55qEIHF1dGVybmlvbiDlsZ7mgKfvvIzml4vovazmlrnlkJHlsIbnlLHmnIDnn63nmoTop5LluqblhrPlrprjgIJcbiAqIEBtZXRob2Qgcm90YXRlM0RUb1xuICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uIGR1cmF0aW9uIGluIHNlY29uZHNcbiAqIEBwYXJhbSB7TnVtYmVyfFZlYzN8UXVhdH0gZHN0QW5nbGVYIGRzdEFuZ2xlWCBpbiBkZWdyZWVzLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtkc3RBbmdsZVldIGRzdEFuZ2xlWSBpbiBkZWdyZWVzLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtkc3RBbmdsZVpdIGRzdEFuZ2xlWiBpbiBkZWdyZWVzLlxuICogQHJldHVybiB7QWN0aW9uSW50ZXJ2YWx9XG4gKiBAZXhhbXBsZVxuICogLy8gZXhhbXBsZVxuICogdmFyIHJvdGF0ZTNEVG8gPSBjYy5yb3RhdGUzRFRvKDIsIGNjLnYzKDAsIDE4MCwgMCkpO1xuICovXG5jYy5yb3RhdGUzRFRvID0gZnVuY3Rpb24gKGR1cmF0aW9uLCBkc3RBbmdsZVgsIGRzdEFuZ2xlWSwgZHN0QW5nbGVaKSB7XG4gICAgcmV0dXJuIG5ldyBjYy5Sb3RhdGUzRFRvKGR1cmF0aW9uLCBkc3RBbmdsZVgsIGRzdEFuZ2xlWSwgZHN0QW5nbGVaKTtcbn07XG5cblxuLypcbiAqIFJvdGF0ZXMgYSBOb2RlIG9iamVjdCBjb3VudGVyIGNsb2Nrd2lzZSBhIG51bWJlciBvZiBkZWdyZWVzIGJ5IG1vZGlmeWluZyBpdHMgcXVhdGVybmlvbiBwcm9wZXJ0eS5cbiAqIFJlbGF0aXZlIHRvIGl0cyBwcm9wZXJ0aWVzIHRvIG1vZGlmeS5cbiAqIEBjbGFzcyBSb3RhdGUzREJ5XG4gKiBAZXh0ZW5kcyBBY3Rpb25JbnRlcnZhbFxuICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uIGR1cmF0aW9uIGluIHNlY29uZHNcbiAqIEBwYXJhbSB7TnVtYmVyfFZlYzN9IGRlbHRhQW5nbGVYIGRlbHRhQW5nbGVYIGluIGRlZ3JlZXNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbZGVsdGFBbmdsZVldIGRlbHRhQW5nbGVZIGluIGRlZ3JlZXNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbZGVsdGFBbmdsZVpdIGRlbHRhQW5nbGVaIGluIGRlZ3JlZXNcbiAqIEBleGFtcGxlXG4gKiB2YXIgYWN0aW9uQnkgPSBuZXcgY2MuUm90YXRlM0RCeSgyLCBjYy52MygwLCAzNjAsIDApKTtcbiAqL1xuY2MuUm90YXRlM0RCeSA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuUm90YXRlM0RCeScsXG4gICAgZXh0ZW5kczogY2MuQWN0aW9uSW50ZXJ2YWwsXG5cbiAgICBjdG9yOiBmdW5jdGlvbiAoZHVyYXRpb24sIGRlbHRhQW5nbGVYLCBkZWx0YUFuZ2xlWSwgZGVsdGFBbmdsZVopIHtcbiAgICAgICAgdGhpcy5fYW5nbGUgPSBjYy52MygpO1xuICAgICAgICB0aGlzLl9xdWF0ID0gY2MucXVhdCgpO1xuICAgICAgICB0aGlzLl9sYXN0RHQgPSAwO1xuXHRcdGRlbHRhQW5nbGVYICE9PSB1bmRlZmluZWQgJiYgdGhpcy5pbml0V2l0aER1cmF0aW9uKGR1cmF0aW9uLCBkZWx0YUFuZ2xlWCwgZGVsdGFBbmdsZVksIGRlbHRhQW5nbGVaKTtcbiAgICB9LFxuXG4gICAgLypcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvbiBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gICAgICogQHBhcmFtIHtOdW1iZXJ8VmVjM30gZGVsdGFBbmdsZVggZGVsdGFBbmdsZVggaW4gZGVncmVlc1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbZGVsdGFBbmdsZVk9XSBkZWx0YUFuZ2xlWSBpbiBkZWdyZWVzXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtkZWx0YUFuZ2xlWj1dIGRlbHRhQW5nbGVaIGluIGRlZ3JlZXNcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGluaXRXaXRoRHVyYXRpb246ZnVuY3Rpb24gKGR1cmF0aW9uLCBkZWx0YUFuZ2xlWCwgZGVsdGFBbmdsZVksIGRlbHRhQW5nbGVaKSB7XG4gICAgICAgIGlmIChjYy5BY3Rpb25JbnRlcnZhbC5wcm90b3R5cGUuaW5pdFdpdGhEdXJhdGlvbi5jYWxsKHRoaXMsIGR1cmF0aW9uKSkge1xuICAgICAgICAgICAgaWYgKGRlbHRhQW5nbGVYIGluc3RhbmNlb2YgY2MuVmVjMykge1xuICAgICAgICAgICAgICAgIGRlbHRhQW5nbGVZID0gZGVsdGFBbmdsZVgueTtcbiAgICAgICAgICAgICAgICBkZWx0YUFuZ2xlWiA9IGRlbHRhQW5nbGVYLno7XG4gICAgICAgICAgICAgICAgZGVsdGFBbmdsZVggPSBkZWx0YUFuZ2xlWC54O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVsdGFBbmdsZVkgPSBkZWx0YUFuZ2xlWSB8fCAwO1xuICAgICAgICAgICAgICAgIGRlbHRhQW5nbGVaID0gZGVsdGFBbmdsZVogfHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNjLnZtYXRoLnZlYzMuc2V0KHRoaXMuX2FuZ2xlLCBkZWx0YUFuZ2xlWCwgZGVsdGFBbmdsZVksIGRlbHRhQW5nbGVaKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgY2xvbmU6ZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYWN0aW9uID0gbmV3IGNjLlJvdGF0ZTNEQnkoKTtcbiAgICAgICAgdGhpcy5fY2xvbmVEZWNvcmF0aW9uKGFjdGlvbik7XG4gICAgICAgIGFjdGlvbi5pbml0V2l0aER1cmF0aW9uKHRoaXMuX2R1cmF0aW9uLCB0aGlzLl9hbmdsZSk7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIHN0YXJ0V2l0aFRhcmdldDpmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5zdGFydFdpdGhUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpO1xuICAgICAgICB0aGlzLl9xdWF0LnNldCh0YXJnZXQucXVhdCk7XG4gICAgICAgIHRoaXMuX2xhc3REdCA9IDA7XG4gICAgfSxcblxuICAgIHVwZGF0ZTogKGZ1bmN0aW9uKCl7XG4gICAgICAgIGxldCBSQUQgPSBNYXRoLlBJIC8gMTgwO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGR0KSB7XG4gICAgICAgICAgICBkdCA9IHRoaXMuX2NvbXB1dGVFYXNlVGltZShkdCk7XG4gICAgICAgICAgICBpZiAodGhpcy50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICBsZXQgYW5nbGUgPSB0aGlzLl9hbmdsZTtcbiAgICAgICAgICAgICAgICBsZXQgZHN0UXVhdCA9IHRoaXMuX3F1YXQ7XG4gICAgICAgICAgICAgICAgbGV0IGRlbHRhID0gZHQgLSB0aGlzLl9sYXN0RHQ7XG4gICAgICAgICAgICAgICAgbGV0IGFuZ2xlWCA9IGFuZ2xlLngsIGFuZ2xlWSA9IGFuZ2xlLnksIGFuZ2xlWiA9IGFuZ2xlLno7XG4gICAgICAgICAgICAgICAgaWYgKGFuZ2xlWCkgcXVhdC5yb3RhdGVYKGRzdFF1YXQsIGRzdFF1YXQsIGFuZ2xlWCAqIFJBRCAqIGRlbHRhKTtcbiAgICAgICAgICAgICAgICBpZiAoYW5nbGVZKSBxdWF0LnJvdGF0ZVkoZHN0UXVhdCwgZHN0UXVhdCwgYW5nbGVZICogUkFEICogZGVsdGEpO1xuICAgICAgICAgICAgICAgIGlmIChhbmdsZVopIHF1YXQucm90YXRlWihkc3RRdWF0LCBkc3RRdWF0LCBhbmdsZVogKiBSQUQgKiBkZWx0YSk7XG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXQuc2V0Um90YXRpb24oZHN0UXVhdCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5fbGFzdER0ID0gZHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KSgpLFxuXG4gICAgcmV2ZXJzZTpmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBhbmdsZSA9IHRoaXMuX2FuZ2xlO1xuICAgICAgICBfdmVjM190bXAueCA9IC1hbmdsZS54O1xuICAgICAgICBfdmVjM190bXAueSA9IC1hbmdsZS55O1xuICAgICAgICBfdmVjM190bXAueiA9IC1hbmdsZS56O1xuICAgICAgICB2YXIgYWN0aW9uID0gbmV3IGNjLlJvdGF0ZTNEQnkodGhpcy5fZHVyYXRpb24sIF92ZWMzX3RtcCk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICB0aGlzLl9yZXZlcnNlRWFzZUxpc3QoYWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9XG59KTtcblxuLyoqXG4gKiAhI2VuXG4gKiBSb3RhdGVzIGEgTm9kZSBvYmplY3QgY291bnRlciBjbG9ja3dpc2UgYSBudW1iZXIgb2YgZGVncmVlcyBieSBtb2RpZnlpbmcgaXRzIHF1YXRlcm5pb24gcHJvcGVydHkuXG4gKiBSZWxhdGl2ZSB0byBpdHMgcHJvcGVydGllcyB0byBtb2RpZnkuXG4gKiAhI3poIOaXi+i9rOaMh+WumueahCAzRCDop5LluqbjgIJcbiAqIEBtZXRob2Qgcm90YXRlM0RCeVxuICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uIGR1cmF0aW9uIGluIHNlY29uZHNcbiAqIEBwYXJhbSB7TnVtYmVyfFZlYzN9IGRlbHRhQW5nbGVYIGRlbHRhQW5nbGVYIGluIGRlZ3JlZXNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbZGVsdGFBbmdsZVldIGRlbHRhQW5nbGVZIGluIGRlZ3JlZXNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbZGVsdGFBbmdsZVpdIGRlbHRhQW5nbGVaIGluIGRlZ3JlZXNcbiAqIEByZXR1cm4ge0FjdGlvbkludGVydmFsfVxuICogQGV4YW1wbGVcbiAqIC8vIGV4YW1wbGVcbiAqIHZhciBhY3Rpb25CeSA9IGNjLnJvdGF0ZTNEQnkoMiwgY2MudjMoMCwgMzYwLCAwKSk7XG4gKi9cbmNjLnJvdGF0ZTNEQnkgPSBmdW5jdGlvbiAoZHVyYXRpb24sIGRlbHRhQW5nbGVYLCBkZWx0YUFuZ2xlWSwgZGVsdGFBbmdsZVopIHtcbiAgICByZXR1cm4gbmV3IGNjLlJvdGF0ZTNEQnkoZHVyYXRpb24sIGRlbHRhQW5nbGVYLCBkZWx0YUFuZ2xlWSwgZGVsdGFBbmdsZVopO1xufTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcXVhdCA9IGNjLnZtYXRoLnF1YXQ7XG52YXIgX3F1YXRfdG1wID0gY2MucXVhdCgpO1xudmFyIF92ZWMzX3RtcCA9IGNjLnYzKCk7XG5cbi8qXG4gKiBSb3RhdGVzIGEgTm9kZSBvYmplY3QgdG8gYSBjZXJ0YWluIGFuZ2xlIGJ5IG1vZGlmeWluZyBpdHMgcXVhdGVybmlvbiBwcm9wZXJ0eS4gPGJyLz5cbiAqIFRoZSBkaXJlY3Rpb24gd2lsbCBiZSBkZWNpZGVkIGJ5IHRoZSBzaG9ydGVzdCBhbmdsZS5cbiAqIEBjbGFzcyBSb3RhdGUzRFRvXG4gKiBAZXh0ZW5kcyBBY3Rpb25JbnRlcnZhbFxuICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uIGR1cmF0aW9uIGluIHNlY29uZHNcbiAqIEBwYXJhbSB7TnVtYmVyfFZlYzN9IGRzdEFuZ2xlWCBkc3RBbmdsZVggaW4gZGVncmVlcy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbZHN0QW5nbGVZXSBkc3RBbmdsZVkgaW4gZGVncmVlcy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbZHN0QW5nbGVaXSBkc3RBbmdsZVogaW4gZGVncmVlcy5cbiAqIEBleGFtcGxlXG4gKiB2YXIgcm90YXRlM0RUbyA9IG5ldyBjYy5Sb3RhdGUzRFRvKDIsIGNjLnYzKDAsIDE4MCwgMCkpO1xuICovXG5jYy5Sb3RhdGUzRFRvID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5Sb3RhdGUzRFRvJyxcbiAgICBleHRlbmRzOiBjYy5BY3Rpb25JbnRlcnZhbCxcblxuICAgIGN0b3I6IGZ1bmN0aW9uIGN0b3IoZHVyYXRpb24sIGRzdEFuZ2xlWCwgZHN0QW5nbGVZLCBkc3RBbmdsZVopIHtcbiAgICAgICAgdGhpcy5fc3RhcnRRdWF0ID0gY2MucXVhdCgpO1xuICAgICAgICB0aGlzLl9kc3RRdWF0ID0gY2MucXVhdCgpO1xuXG4gICAgICAgIGRzdEFuZ2xlWCAhPT0gdW5kZWZpbmVkICYmIHRoaXMuaW5pdFdpdGhEdXJhdGlvbihkdXJhdGlvbiwgZHN0QW5nbGVYLCBkc3RBbmdsZVksIGRzdEFuZ2xlWik7XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIGFjdGlvbi5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcnxWZWMzfFF1YXR9IGRzdEFuZ2xlWFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkc3RBbmdsZVlcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZHN0QW5nbGVaXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpbml0V2l0aER1cmF0aW9uOiBmdW5jdGlvbiBpbml0V2l0aER1cmF0aW9uKGR1cmF0aW9uLCBkc3RBbmdsZVgsIGRzdEFuZ2xlWSwgZHN0QW5nbGVaKSB7XG4gICAgICAgIGlmIChjYy5BY3Rpb25JbnRlcnZhbC5wcm90b3R5cGUuaW5pdFdpdGhEdXJhdGlvbi5jYWxsKHRoaXMsIGR1cmF0aW9uKSkge1xuICAgICAgICAgICAgdmFyIGRzdFF1YXQgPSB0aGlzLl9kc3RRdWF0O1xuICAgICAgICAgICAgaWYgKGRzdEFuZ2xlWCBpbnN0YW5jZW9mIGNjLlF1YXQpIHtcbiAgICAgICAgICAgICAgICBkc3RRdWF0LnNldChkc3RBbmdsZVgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoZHN0QW5nbGVYIGluc3RhbmNlb2YgY2MuVmVjMykge1xuICAgICAgICAgICAgICAgICAgICBkc3RBbmdsZVkgPSBkc3RBbmdsZVgueTtcbiAgICAgICAgICAgICAgICAgICAgZHN0QW5nbGVaID0gZHN0QW5nbGVYLno7XG4gICAgICAgICAgICAgICAgICAgIGRzdEFuZ2xlWCA9IGRzdEFuZ2xlWC54O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRzdEFuZ2xlWSA9IGRzdEFuZ2xlWSB8fCAwO1xuICAgICAgICAgICAgICAgICAgICBkc3RBbmdsZVogPSBkc3RBbmdsZVogfHwgMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2Mudm1hdGgucXVhdC5mcm9tRXVsZXIoZHN0UXVhdCwgZHN0QW5nbGVYLCBkc3RBbmdsZVksIGRzdEFuZ2xlWik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIGNsb25lOiBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBjYy5Sb3RhdGUzRFRvKCk7XG4gICAgICAgIHRoaXMuX2Nsb25lRGVjb3JhdGlvbihhY3Rpb24pO1xuICAgICAgICBhY3Rpb24uaW5pdFdpdGhEdXJhdGlvbih0aGlzLl9kdXJhdGlvbiwgdGhpcy5fZHN0UXVhdCk7XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIHN0YXJ0V2l0aFRhcmdldDogZnVuY3Rpb24gc3RhcnRXaXRoVGFyZ2V0KHRhcmdldCkge1xuICAgICAgICBjYy5BY3Rpb25JbnRlcnZhbC5wcm90b3R5cGUuc3RhcnRXaXRoVGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcbiAgICAgICAgdGhpcy5fc3RhcnRRdWF0LnNldCh0YXJnZXQucXVhdCk7XG4gICAgfSxcblxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICAgIGNjLmxvZ0lEKDEwMTYpO1xuICAgIH0sXG5cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShkdCkge1xuICAgICAgICBkdCA9IHRoaXMuX2NvbXB1dGVFYXNlVGltZShkdCk7XG4gICAgICAgIGlmICh0aGlzLnRhcmdldCkge1xuICAgICAgICAgICAgcXVhdC5zbGVycChfcXVhdF90bXAsIHRoaXMuX3N0YXJ0UXVhdCwgdGhpcy5fZHN0UXVhdCwgZHQpO1xuICAgICAgICAgICAgdGhpcy50YXJnZXQuc2V0Um90YXRpb24oX3F1YXRfdG1wKTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG4vKipcbiAqICEjZW5cbiAqIFJvdGF0ZXMgYSBOb2RlIG9iamVjdCB0byBhIGNlcnRhaW4gYW5nbGUgYnkgbW9kaWZ5aW5nIGl0cyBxdXRlcm5pb24gcHJvcGVydHkuIDxici8+XG4gKiBUaGUgZGlyZWN0aW9uIHdpbGwgYmUgZGVjaWRlZCBieSB0aGUgc2hvcnRlc3QgYW5nbGUuXG4gKiAhI3poIOaXi+i9rOWIsOebruagh+inkuW6pu+8jOmAmui/h+mAkOW4p+S/ruaUueWug+eahCBxdXRlcm5pb24g5bGe5oCn77yM5peL6L2s5pa55ZCR5bCG55Sx5pyA55+t55qE6KeS5bqm5Yaz5a6a44CCXG4gKiBAbWV0aG9kIHJvdGF0ZTNEVG9cbiAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvbiBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gKiBAcGFyYW0ge051bWJlcnxWZWMzfFF1YXR9IGRzdEFuZ2xlWCBkc3RBbmdsZVggaW4gZGVncmVlcy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbZHN0QW5nbGVZXSBkc3RBbmdsZVkgaW4gZGVncmVlcy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbZHN0QW5nbGVaXSBkc3RBbmdsZVogaW4gZGVncmVlcy5cbiAqIEByZXR1cm4ge0FjdGlvbkludGVydmFsfVxuICogQGV4YW1wbGVcbiAqIC8vIGV4YW1wbGVcbiAqIHZhciByb3RhdGUzRFRvID0gY2Mucm90YXRlM0RUbygyLCBjYy52MygwLCAxODAsIDApKTtcbiAqL1xuY2Mucm90YXRlM0RUbyA9IGZ1bmN0aW9uIChkdXJhdGlvbiwgZHN0QW5nbGVYLCBkc3RBbmdsZVksIGRzdEFuZ2xlWikge1xuICAgIHJldHVybiBuZXcgY2MuUm90YXRlM0RUbyhkdXJhdGlvbiwgZHN0QW5nbGVYLCBkc3RBbmdsZVksIGRzdEFuZ2xlWik7XG59O1xuXG4vKlxuICogUm90YXRlcyBhIE5vZGUgb2JqZWN0IGNvdW50ZXIgY2xvY2t3aXNlIGEgbnVtYmVyIG9mIGRlZ3JlZXMgYnkgbW9kaWZ5aW5nIGl0cyBxdWF0ZXJuaW9uIHByb3BlcnR5LlxuICogUmVsYXRpdmUgdG8gaXRzIHByb3BlcnRpZXMgdG8gbW9kaWZ5LlxuICogQGNsYXNzIFJvdGF0ZTNEQnlcbiAqIEBleHRlbmRzIEFjdGlvbkludGVydmFsXG4gKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb24gZHVyYXRpb24gaW4gc2Vjb25kc1xuICogQHBhcmFtIHtOdW1iZXJ8VmVjM30gZGVsdGFBbmdsZVggZGVsdGFBbmdsZVggaW4gZGVncmVlc1xuICogQHBhcmFtIHtOdW1iZXJ9IFtkZWx0YUFuZ2xlWV0gZGVsdGFBbmdsZVkgaW4gZGVncmVlc1xuICogQHBhcmFtIHtOdW1iZXJ9IFtkZWx0YUFuZ2xlWl0gZGVsdGFBbmdsZVogaW4gZGVncmVlc1xuICogQGV4YW1wbGVcbiAqIHZhciBhY3Rpb25CeSA9IG5ldyBjYy5Sb3RhdGUzREJ5KDIsIGNjLnYzKDAsIDM2MCwgMCkpO1xuICovXG5jYy5Sb3RhdGUzREJ5ID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5Sb3RhdGUzREJ5JyxcbiAgICBleHRlbmRzOiBjYy5BY3Rpb25JbnRlcnZhbCxcblxuICAgIGN0b3I6IGZ1bmN0aW9uIGN0b3IoZHVyYXRpb24sIGRlbHRhQW5nbGVYLCBkZWx0YUFuZ2xlWSwgZGVsdGFBbmdsZVopIHtcbiAgICAgICAgdGhpcy5fYW5nbGUgPSBjYy52MygpO1xuICAgICAgICB0aGlzLl9xdWF0ID0gY2MucXVhdCgpO1xuICAgICAgICB0aGlzLl9sYXN0RHQgPSAwO1xuICAgICAgICBkZWx0YUFuZ2xlWCAhPT0gdW5kZWZpbmVkICYmIHRoaXMuaW5pdFdpdGhEdXJhdGlvbihkdXJhdGlvbiwgZGVsdGFBbmdsZVgsIGRlbHRhQW5nbGVZLCBkZWx0YUFuZ2xlWik7XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIGFjdGlvbi5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb24gZHVyYXRpb24gaW4gc2Vjb25kc1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfFZlYzN9IGRlbHRhQW5nbGVYIGRlbHRhQW5nbGVYIGluIGRlZ3JlZXNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2RlbHRhQW5nbGVZPV0gZGVsdGFBbmdsZVkgaW4gZGVncmVlc1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbZGVsdGFBbmdsZVo9XSBkZWx0YUFuZ2xlWiBpbiBkZWdyZWVzXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpbml0V2l0aER1cmF0aW9uOiBmdW5jdGlvbiBpbml0V2l0aER1cmF0aW9uKGR1cmF0aW9uLCBkZWx0YUFuZ2xlWCwgZGVsdGFBbmdsZVksIGRlbHRhQW5nbGVaKSB7XG4gICAgICAgIGlmIChjYy5BY3Rpb25JbnRlcnZhbC5wcm90b3R5cGUuaW5pdFdpdGhEdXJhdGlvbi5jYWxsKHRoaXMsIGR1cmF0aW9uKSkge1xuICAgICAgICAgICAgaWYgKGRlbHRhQW5nbGVYIGluc3RhbmNlb2YgY2MuVmVjMykge1xuICAgICAgICAgICAgICAgIGRlbHRhQW5nbGVZID0gZGVsdGFBbmdsZVgueTtcbiAgICAgICAgICAgICAgICBkZWx0YUFuZ2xlWiA9IGRlbHRhQW5nbGVYLno7XG4gICAgICAgICAgICAgICAgZGVsdGFBbmdsZVggPSBkZWx0YUFuZ2xlWC54O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWx0YUFuZ2xlWSA9IGRlbHRhQW5nbGVZIHx8IDA7XG4gICAgICAgICAgICAgICAgZGVsdGFBbmdsZVogPSBkZWx0YUFuZ2xlWiB8fCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2Mudm1hdGgudmVjMy5zZXQodGhpcy5fYW5nbGUsIGRlbHRhQW5nbGVYLCBkZWx0YUFuZ2xlWSwgZGVsdGFBbmdsZVopO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuUm90YXRlM0RCeSgpO1xuICAgICAgICB0aGlzLl9jbG9uZURlY29yYXRpb24oYWN0aW9uKTtcbiAgICAgICAgYWN0aW9uLmluaXRXaXRoRHVyYXRpb24odGhpcy5fZHVyYXRpb24sIHRoaXMuX2FuZ2xlKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgc3RhcnRXaXRoVGFyZ2V0OiBmdW5jdGlvbiBzdGFydFdpdGhUYXJnZXQodGFyZ2V0KSB7XG4gICAgICAgIGNjLkFjdGlvbkludGVydmFsLnByb3RvdHlwZS5zdGFydFdpdGhUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpO1xuICAgICAgICB0aGlzLl9xdWF0LnNldCh0YXJnZXQucXVhdCk7XG4gICAgICAgIHRoaXMuX2xhc3REdCA9IDA7XG4gICAgfSxcblxuICAgIHVwZGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgUkFEID0gTWF0aC5QSSAvIDE4MDtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkdCkge1xuICAgICAgICAgICAgZHQgPSB0aGlzLl9jb21wdXRlRWFzZVRpbWUoZHQpO1xuICAgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGFuZ2xlID0gdGhpcy5fYW5nbGU7XG4gICAgICAgICAgICAgICAgdmFyIGRzdFF1YXQgPSB0aGlzLl9xdWF0O1xuICAgICAgICAgICAgICAgIHZhciBkZWx0YSA9IGR0IC0gdGhpcy5fbGFzdER0O1xuICAgICAgICAgICAgICAgIHZhciBhbmdsZVggPSBhbmdsZS54LFxuICAgICAgICAgICAgICAgICAgICBhbmdsZVkgPSBhbmdsZS55LFxuICAgICAgICAgICAgICAgICAgICBhbmdsZVogPSBhbmdsZS56O1xuICAgICAgICAgICAgICAgIGlmIChhbmdsZVgpIHF1YXQucm90YXRlWChkc3RRdWF0LCBkc3RRdWF0LCBhbmdsZVggKiBSQUQgKiBkZWx0YSk7XG4gICAgICAgICAgICAgICAgaWYgKGFuZ2xlWSkgcXVhdC5yb3RhdGVZKGRzdFF1YXQsIGRzdFF1YXQsIGFuZ2xlWSAqIFJBRCAqIGRlbHRhKTtcbiAgICAgICAgICAgICAgICBpZiAoYW5nbGVaKSBxdWF0LnJvdGF0ZVooZHN0UXVhdCwgZHN0UXVhdCwgYW5nbGVaICogUkFEICogZGVsdGEpO1xuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0LnNldFJvdGF0aW9uKGRzdFF1YXQpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fbGFzdER0ID0gZHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSgpLFxuXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgICAgdmFyIGFuZ2xlID0gdGhpcy5fYW5nbGU7XG4gICAgICAgIF92ZWMzX3RtcC54ID0gLWFuZ2xlLng7XG4gICAgICAgIF92ZWMzX3RtcC55ID0gLWFuZ2xlLnk7XG4gICAgICAgIF92ZWMzX3RtcC56ID0gLWFuZ2xlLno7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgY2MuUm90YXRlM0RCeSh0aGlzLl9kdXJhdGlvbiwgX3ZlYzNfdG1wKTtcbiAgICAgICAgdGhpcy5fY2xvbmVEZWNvcmF0aW9uKGFjdGlvbik7XG4gICAgICAgIHRoaXMuX3JldmVyc2VFYXNlTGlzdChhY3Rpb24pO1xuICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqICEjZW5cbiAqIFJvdGF0ZXMgYSBOb2RlIG9iamVjdCBjb3VudGVyIGNsb2Nrd2lzZSBhIG51bWJlciBvZiBkZWdyZWVzIGJ5IG1vZGlmeWluZyBpdHMgcXVhdGVybmlvbiBwcm9wZXJ0eS5cbiAqIFJlbGF0aXZlIHRvIGl0cyBwcm9wZXJ0aWVzIHRvIG1vZGlmeS5cbiAqICEjemgg5peL6L2s5oyH5a6a55qEIDNEIOinkuW6puOAglxuICogQG1ldGhvZCByb3RhdGUzREJ5XG4gKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb24gZHVyYXRpb24gaW4gc2Vjb25kc1xuICogQHBhcmFtIHtOdW1iZXJ8VmVjM30gZGVsdGFBbmdsZVggZGVsdGFBbmdsZVggaW4gZGVncmVlc1xuICogQHBhcmFtIHtOdW1iZXJ9IFtkZWx0YUFuZ2xlWV0gZGVsdGFBbmdsZVkgaW4gZGVncmVlc1xuICogQHBhcmFtIHtOdW1iZXJ9IFtkZWx0YUFuZ2xlWl0gZGVsdGFBbmdsZVogaW4gZGVncmVlc1xuICogQHJldHVybiB7QWN0aW9uSW50ZXJ2YWx9XG4gKiBAZXhhbXBsZVxuICogLy8gZXhhbXBsZVxuICogdmFyIGFjdGlvbkJ5ID0gY2Mucm90YXRlM0RCeSgyLCBjYy52MygwLCAzNjAsIDApKTtcbiAqL1xuY2Mucm90YXRlM0RCeSA9IGZ1bmN0aW9uIChkdXJhdGlvbiwgZGVsdGFBbmdsZVgsIGRlbHRhQW5nbGVZLCBkZWx0YUFuZ2xlWikge1xuICAgIHJldHVybiBuZXcgY2MuUm90YXRlM0RCeShkdXJhdGlvbiwgZGVsdGFBbmdsZVgsIGRlbHRhQW5nbGVZLCBkZWx0YUFuZ2xlWik7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1GamRHbHZibk11YW5NaVhTd2libUZ0WlhNaU9sc2ljWFZoZENJc0ltTmpJaXdpZG0xaGRHZ2lMQ0pmY1hWaGRGOTBiWEFpTENKZmRtVmpNMTkwYlhBaUxDSjJNeUlzSWxKdmRHRjBaVE5FVkc4aUxDSkRiR0Z6Y3lJc0ltNWhiV1VpTENKbGVIUmxibVJ6SWl3aVFXTjBhVzl1U1c1MFpYSjJZV3dpTENKamRHOXlJaXdpWkhWeVlYUnBiMjRpTENKa2MzUkJibWRzWlZnaUxDSmtjM1JCYm1kc1pWa2lMQ0prYzNSQmJtZHNaVm9pTENKZmMzUmhjblJSZFdGMElpd2lYMlJ6ZEZGMVlYUWlMQ0oxYm1SbFptbHVaV1FpTENKcGJtbDBWMmwwYUVSMWNtRjBhVzl1SWl3aWNISnZkRzkwZVhCbElpd2lZMkZzYkNJc0ltUnpkRkYxWVhRaUxDSlJkV0YwSWl3aWMyVjBJaXdpVm1Wak15SXNJbmtpTENKNklpd2llQ0lzSW1aeWIyMUZkV3hsY2lJc0ltTnNiMjVsSWl3aVlXTjBhVzl1SWl3aVgyTnNiMjVsUkdWamIzSmhkR2x2YmlJc0lsOWtkWEpoZEdsdmJpSXNJbk4wWVhKMFYybDBhRlJoY21kbGRDSXNJblJoY21kbGRDSXNJbkpsZG1WeWMyVWlMQ0pzYjJkSlJDSXNJblZ3WkdGMFpTSXNJbVIwSWl3aVgyTnZiWEIxZEdWRllYTmxWR2x0WlNJc0luTnNaWEp3SWl3aWMyVjBVbTkwWVhScGIyNGlMQ0p5YjNSaGRHVXpSRlJ2SWl3aVVtOTBZWFJsTTBSQ2VTSXNJbVJsYkhSaFFXNW5iR1ZZSWl3aVpHVnNkR0ZCYm1kc1pWa2lMQ0prWld4MFlVRnVaMnhsV2lJc0lsOWhibWRzWlNJc0lsOXhkV0YwSWl3aVgyeGhjM1JFZENJc0luWmxZek1pTENKU1FVUWlMQ0pOWVhSb0lpd2lVRWtpTENKaGJtZHNaU0lzSW1SbGJIUmhJaXdpWVc1bmJHVllJaXdpWVc1bmJHVlpJaXdpWVc1bmJHVmFJaXdpY205MFlYUmxXQ0lzSW5KdmRHRjBaVmtpTENKeWIzUmhkR1ZhSWl3aVgzSmxkbVZ5YzJWRllYTmxUR2x6ZENJc0luSnZkR0YwWlRORVFua2lYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRMEVzU1VGQlRVRXNUMEZCVDBNc1IwRkJSME1zUzBGQlNDeERRVUZUUml4SlFVRjBRanRCUVVOQkxFbEJRVWxITEZsQlFWbEdMRWRCUVVkRUxFbEJRVWdzUlVGQmFFSTdRVUZEUVN4SlFVRkpTU3haUVVGWlNDeEhRVUZIU1N4RlFVRklMRVZCUVdoQ096dEJRVVZCT3pzN096czdPenM3T3pzN1FVRlpRVW9zUjBGQlIwc3NWVUZCU0N4SFFVRm5Ra3dzUjBGQlIwMHNTMEZCU0N4RFFVRlRPMEZCUTNKQ1F5eFZRVUZOTEdWQlJHVTdRVUZGY2tKRExHRkJRVk5TTEVkQlFVZFRMR05CUmxNN08wRkJTWEpDUXl4VlFVRkxMR05CUVZWRExGRkJRVllzUlVGQmIwSkRMRk5CUVhCQ0xFVkJRU3RDUXl4VFFVRXZRaXhGUVVFd1EwTXNVMEZCTVVNc1JVRkJjVVE3UVVGRGRFUXNZVUZCUzBNc1ZVRkJUQ3hIUVVGclFtWXNSMEZCUjBRc1NVRkJTQ3hGUVVGc1FqdEJRVU5CTEdGQlFVdHBRaXhSUVVGTUxFZEJRV2RDYUVJc1IwRkJSMFFzU1VGQlNDeEZRVUZvUWpzN1FVRkZUbUVzYzBKQlFXTkxMRk5CUVdRc1NVRkJNa0lzUzBGQlMwTXNaMEpCUVV3c1EwRkJjMEpRTEZGQlFYUkNMRVZCUVdkRFF5eFRRVUZvUXl4RlFVRXlRME1zVTBGQk0wTXNSVUZCYzBSRExGTkJRWFJFTEVOQlFUTkNPMEZCUTBjc1MwRlViMEk3TzBGQlYzSkNPenM3T3pzN096dEJRVkZCU1N4elFrRkJhVUlzTUVKQlFWVlFMRkZCUVZZc1JVRkJiMEpETEZOQlFYQkNMRVZCUVN0Q1F5eFRRVUV2UWl4RlFVRXdRME1zVTBGQk1VTXNSVUZCY1VRN1FVRkRiRVVzV1VGQlNXUXNSMEZCUjFNc1kwRkJTQ3hEUVVGclFsVXNVMEZCYkVJc1EwRkJORUpFTEdkQ1FVRTFRaXhEUVVFMlEwVXNTVUZCTjBNc1EwRkJhMFFzU1VGQmJFUXNSVUZCZDBSVUxGRkJRWGhFTEVOQlFVb3NSVUZCZFVVN1FVRkRia1VzWjBKQlFVbFZMRlZCUVZVc1MwRkJTMHdzVVVGQmJrSTdRVUZEUVN4blFrRkJTVW9zY1VKQlFYRkNXaXhIUVVGSGMwSXNTVUZCTlVJc1JVRkJhME03UVVGRE9VSkVMSGRDUVVGUlJTeEhRVUZTTEVOQlFWbFlMRk5CUVZvN1FVRkRTQ3hoUVVaRUxFMUJSMHM3UVVGRFJDeHZRa0ZCU1VFc2NVSkJRWEZDV2l4SFFVRkhkMElzU1VGQk5VSXNSVUZCYTBNN1FVRkRPVUpZTEdkRFFVRlpSQ3hWUVVGVllTeERRVUYwUWp0QlFVTkJXQ3huUTBGQldVWXNWVUZCVldNc1EwRkJkRUk3UVVGRFFXUXNaME5CUVZsQkxGVkJRVlZsTEVOQlFYUkNPMEZCUTBnc2FVSkJTa1FzVFVGTFN6dEJRVU5FWkN4blEwRkJXVUVzWVVGQllTeERRVUY2UWp0QlFVTkJReXhuUTBGQldVRXNZVUZCWVN4RFFVRjZRanRCUVVOSU8wRkJRMFJrTEcxQ1FVRkhReXhMUVVGSUxFTkJRVk5HTEVsQlFWUXNRMEZCWXpaQ0xGTkJRV1FzUTBGQmQwSlFMRTlCUVhoQ0xFVkJRV2xEVkN4VFFVRnFReXhGUVVFMFEwTXNVMEZCTlVNc1JVRkJkVVJETEZOQlFYWkVPMEZCUTBnN1FVRkRSQ3h0UWtGQlR5eEpRVUZRTzBGQlEwZzdRVUZEUkN4bFFVRlBMRXRCUVZBN1FVRkRTQ3hMUVhoRGIwSTdPMEZCTUVOeVFtVXNWMEZCVFN4cFFrRkJXVHRCUVVOa0xGbEJRVWxETEZOQlFWTXNTVUZCU1RsQ0xFZEJRVWRMTEZWQlFWQXNSVUZCWWp0QlFVTkJMR0ZCUVVzd1FpeG5Ra0ZCVEN4RFFVRnpRa1FzVFVGQmRFSTdRVUZEUVVFc1pVRkJUMW9zWjBKQlFWQXNRMEZCZDBJc1MwRkJTMk1zVTBGQk4wSXNSVUZCZDBNc1MwRkJTMmhDTEZGQlFUZERPMEZCUTBFc1pVRkJUMk1zVFVGQlVEdEJRVU5JTEV0QkwwTnZRanM3UVVGcFJISkNSeXh4UWtGQlowSXNlVUpCUVZWRExFMUJRVllzUlVGQmEwSTdRVUZET1VKc1F5eFhRVUZIVXl4alFVRklMRU5CUVd0Q1ZTeFRRVUZzUWl4RFFVRTBRbU1zWlVGQk5VSXNRMEZCTkVOaUxFbEJRVFZETEVOQlFXbEVMRWxCUVdwRUxFVkJRWFZFWXl4TlFVRjJSRHRCUVVOQkxHRkJRVXR1UWl4VlFVRk1MRU5CUVdkQ1VTeEhRVUZvUWl4RFFVRnZRbGNzVDBGQlQyNURMRWxCUVROQ08wRkJRMGdzUzBGd1JHOUNPenRCUVhORWNrSnZReXhoUVVGUkxHMUNRVUZaTzBGQlEyaENia01zVjBGQlIyOURMRXRCUVVnc1EwRkJVeXhKUVVGVU8wRkJRMGdzUzBGNFJHOUNPenRCUVRCRWNrSkRMRmxCUVU4c1owSkJRVlZETEVWQlFWWXNSVUZCWXp0QlFVTnFRa0VzWVVGQlN5eExRVUZMUXl4blFrRkJUQ3hEUVVGelFrUXNSVUZCZEVJc1EwRkJURHRCUVVOQkxGbEJRVWtzUzBGQlMwb3NUVUZCVkN4RlFVRnBRanRCUVVOaWJrTXNhVUpCUVV0NVF5eExRVUZNTEVOQlFWZDBReXhUUVVGWUxFVkJRWE5DTEV0QlFVdGhMRlZCUVROQ0xFVkJRWFZETEV0QlFVdERMRkZCUVRWRExFVkJRWE5FYzBJc1JVRkJkRVE3UVVGRFFTeHBRa0ZCUzBvc1RVRkJUQ3hEUVVGWlR5eFhRVUZhTEVOQlFYZENka01zVTBGQmVFSTdRVUZEU0R0QlFVTktPMEZCYUVWdlFpeERRVUZVTEVOQlFXaENPenRCUVcxRlFUczdPenM3T3pzN096czdPenM3TzBGQlpVRkdMRWRCUVVjd1F5eFZRVUZJTEVkQlFXZENMRlZCUVZVdlFpeFJRVUZXTEVWQlFXOUNReXhUUVVGd1FpeEZRVUVyUWtNc1UwRkJMMElzUlVGQk1FTkRMRk5CUVRGRExFVkJRWEZFTzBGQlEycEZMRmRCUVU4c1NVRkJTV1FzUjBGQlIwc3NWVUZCVUN4RFFVRnJRazBzVVVGQmJFSXNSVUZCTkVKRExGTkJRVFZDTEVWQlFYVkRReXhUUVVGMlF5eEZRVUZyUkVNc1UwRkJiRVFzUTBGQlVEdEJRVU5JTEVOQlJrUTdPMEZCUzBFN096czdPenM3T3pzN096dEJRVmxCWkN4SFFVRkhNa01zVlVGQlNDeEhRVUZuUWpORExFZEJRVWROTEV0QlFVZ3NRMEZCVXp0QlFVTnlRa01zVlVGQlRTeGxRVVJsTzBGQlJYSkNReXhoUVVGVFVpeEhRVUZIVXl4alFVWlRPenRCUVVseVFrTXNWVUZCVFN4alFVRlZReXhSUVVGV0xFVkJRVzlDYVVNc1YwRkJjRUlzUlVGQmFVTkRMRmRCUVdwRExFVkJRVGhEUXl4WFFVRTVReXhGUVVFeVJEdEJRVU0zUkN4aFFVRkxReXhOUVVGTUxFZEJRV012UXl4SFFVRkhTU3hGUVVGSUxFVkJRV1E3UVVGRFFTeGhRVUZMTkVNc1MwRkJUQ3hIUVVGaGFFUXNSMEZCUjBRc1NVRkJTQ3hGUVVGaU8wRkJRMEVzWVVGQlMydEVMRTlCUVV3c1IwRkJaU3hEUVVGbU8wRkJRMDVNTEhkQ1FVRm5Rak5DTEZOQlFXaENMRWxCUVRaQ0xFdEJRVXRETEdkQ1FVRk1MRU5CUVhOQ1VDeFJRVUYwUWl4RlFVRm5RMmxETEZkQlFXaERMRVZCUVRaRFF5eFhRVUUzUXl4RlFVRXdSRU1zVjBGQk1VUXNRMEZCTjBJN1FVRkRSeXhMUVZSdlFqczdRVUZYY2tJN096czdPenM3TzBGQlVVRTFRaXh6UWtGQmFVSXNNRUpCUVZWUUxGRkJRVllzUlVGQmIwSnBReXhYUVVGd1FpeEZRVUZwUTBNc1YwRkJha01zUlVGQk9FTkRMRmRCUVRsRExFVkJRVEpFTzBGQlEzaEZMRmxCUVVrNVF5eEhRVUZIVXl4alFVRklMRU5CUVd0Q1ZTeFRRVUZzUWl4RFFVRTBRa1FzWjBKQlFUVkNMRU5CUVRaRFJTeEpRVUUzUXl4RFFVRnJSQ3hKUVVGc1JDeEZRVUYzUkZRc1VVRkJlRVFzUTBGQlNpeEZRVUYxUlR0QlFVTnVSU3huUWtGQlNXbERMSFZDUVVGMVFqVkRMRWRCUVVkM1FpeEpRVUU1UWl4RlFVRnZRenRCUVVOb1EzRkNMRGhDUVVGalJDeFpRVUZaYmtJc1EwRkJNVUk3UVVGRFFYRkNMRGhDUVVGalJpeFpRVUZaYkVJc1EwRkJNVUk3UVVGRFFXdENMRGhDUVVGalFTeFpRVUZaYWtJc1EwRkJNVUk3UVVGRFNDeGhRVXBFTEUxQlMwczdRVUZEUkd0Q0xEaENRVUZqUVN4bFFVRmxMRU5CUVRkQ08wRkJRMEZETERoQ1FVRmpRU3hsUVVGbExFTkJRVGRDTzBGQlEwZzdRVUZEUkRsRExHVkJRVWRETEV0QlFVZ3NRMEZCVTJsRUxFbEJRVlFzUTBGQll6TkNMRWRCUVdRc1EwRkJhMElzUzBGQlMzZENMRTFCUVhaQ0xFVkJRU3RDU0N4WFFVRXZRaXhGUVVFMFEwTXNWMEZCTlVNc1JVRkJlVVJETEZkQlFYcEVPMEZCUTBFc2JVSkJRVThzU1VGQlVEdEJRVU5JTzBGQlEwUXNaVUZCVHl4TFFVRlFPMEZCUTBnc1MwRnNRMjlDT3p0QlFXOURja0pxUWl4WFFVRk5MR2xDUVVGWk8wRkJRMlFzV1VGQlNVTXNVMEZCVXl4SlFVRkpPVUlzUjBGQlJ6SkRMRlZCUVZBc1JVRkJZanRCUVVOQkxHRkJRVXRhTEdkQ1FVRk1MRU5CUVhOQ1JDeE5RVUYwUWp0QlFVTkJRU3hsUVVGUFdpeG5Ra0ZCVUN4RFFVRjNRaXhMUVVGTFl5eFRRVUUzUWl4RlFVRjNReXhMUVVGTFpTeE5RVUUzUXp0QlFVTkJMR1ZCUVU5cVFpeE5RVUZRTzBGQlEwZ3NTMEY2UTI5Q096dEJRVEpEY2tKSExIRkNRVUZuUWl4NVFrRkJWVU1zVFVGQlZpeEZRVUZyUWp0QlFVTTVRbXhETEZkQlFVZFRMR05CUVVnc1EwRkJhMEpWTEZOQlFXeENMRU5CUVRSQ1l5eGxRVUUxUWl4RFFVRTBRMklzU1VGQk5VTXNRMEZCYVVRc1NVRkJha1FzUlVGQmRVUmpMRTFCUVhaRU8wRkJRMEVzWVVGQlMyTXNTMEZCVEN4RFFVRlhla0lzUjBGQldDeERRVUZsVnl4UFFVRlBia01zU1VGQmRFSTdRVUZEUVN4aFFVRkxhMFFzVDBGQlRDeEhRVUZsTEVOQlFXWTdRVUZEU0N4TFFTOURiMEk3TzBGQmFVUnlRbG9zV1VGQlV5eFpRVUZWTzBGQlEyWXNXVUZCU1dNc1RVRkJUVU1zUzBGQlMwTXNSVUZCVEN4SFFVRlZMRWRCUVhCQ08wRkJRMEVzWlVGQlR5eFZRVUZWWml4RlFVRldMRVZCUVdNN1FVRkRha0pCTEdsQ1FVRkxMRXRCUVV0RExHZENRVUZNTEVOQlFYTkNSQ3hGUVVGMFFpeERRVUZNTzBGQlEwRXNaMEpCUVVrc1MwRkJTMG9zVFVGQlZDeEZRVUZwUWp0QlFVTmlMRzlDUVVGSmIwSXNVVUZCVVN4TFFVRkxVQ3hOUVVGcVFqdEJRVU5CTEc5Q1FVRkpNVUlzVlVGQlZTeExRVUZMTWtJc1MwRkJia0k3UVVGRFFTeHZRa0ZCU1U4c1VVRkJVV3BDTEV0QlFVc3NTMEZCUzFjc1QwRkJkRUk3UVVGRFFTeHZRa0ZCU1U4c1UwRkJVMFlzVFVGQlRUTkNMRU5CUVc1Q08wRkJRVUVzYjBKQlFYTkNPRUlzVTBGQlUwZ3NUVUZCVFRkQ0xFTkJRWEpETzBGQlFVRXNiMEpCUVhkRGFVTXNVMEZCVTBvc1RVRkJUVFZDTEVOQlFYWkVPMEZCUTBFc2IwSkJRVWs0UWl4TlFVRktMRVZCUVZsNlJDeExRVUZMTkVRc1QwRkJUQ3hEUVVGaGRFTXNUMEZCWWl4RlFVRnpRa0VzVDBGQmRFSXNSVUZCSzBKdFF5eFRRVUZUVEN4SFFVRlVMRWRCUVdWSkxFdEJRVGxETzBGQlExb3NiMEpCUVVsRkxFMUJRVW9zUlVGQldURkVMRXRCUVVzMlJDeFBRVUZNTEVOQlFXRjJReXhQUVVGaUxFVkJRWE5DUVN4UFFVRjBRaXhGUVVFclFtOURMRk5CUVZOT0xFZEJRVlFzUjBGQlpVa3NTMEZCT1VNN1FVRkRXaXh2UWtGQlNVY3NUVUZCU2l4RlFVRlpNMFFzUzBGQlN6aEVMRTlCUVV3c1EwRkJZWGhETEU5QlFXSXNSVUZCYzBKQkxFOUJRWFJDTEVWQlFTdENjVU1zVTBGQlUxQXNSMEZCVkN4SFFVRmxTU3hMUVVFNVF6dEJRVU5hTEhGQ1FVRkxja0lzVFVGQlRDeERRVUZaVHl4WFFVRmFMRU5CUVhkQ2NFSXNUMEZCZUVJN08wRkJSVUVzY1VKQlFVczBRaXhQUVVGTUxFZEJRV1ZZTEVWQlFXWTdRVUZEU0R0QlFVTktMRk5CWkVRN1FVRmxTQ3hMUVdwQ1R5eEZRV3BFWVRzN1FVRnZSWEpDU0N4aFFVRlJMRzFDUVVGWk8wRkJRMmhDTEZsQlFVbHRRaXhSUVVGUkxFdEJRVXRRTEUxQlFXcENPMEZCUTBFMVF5eHJRa0ZCVlhkQ0xFTkJRVllzUjBGQll5eERRVUZETWtJc1RVRkJUVE5DTEVOQlFYSkNPMEZCUTBGNFFpeHJRa0ZCVlhOQ0xFTkJRVllzUjBGQll5eERRVUZETmtJc1RVRkJUVGRDTEVOQlFYSkNPMEZCUTBGMFFpeHJRa0ZCVlhWQ0xFTkJRVllzUjBGQll5eERRVUZETkVJc1RVRkJUVFZDTEVOQlFYSkNPMEZCUTBFc1dVRkJTVWtzVTBGQlV5eEpRVUZKT1VJc1IwRkJSekpETEZWQlFWQXNRMEZCYTBJc1MwRkJTMWdzVTBGQmRrSXNSVUZCYTBNM1FpeFRRVUZzUXl4RFFVRmlPMEZCUTBFc1lVRkJTelJDTEdkQ1FVRk1MRU5CUVhOQ1JDeE5RVUYwUWp0QlFVTkJMR0ZCUVV0blF5eG5Ra0ZCVEN4RFFVRnpRbWhETEUxQlFYUkNPMEZCUTBFc1pVRkJUMEVzVFVGQlVEdEJRVU5JTzBGQk4wVnZRaXhEUVVGVUxFTkJRV2hDT3p0QlFXZEdRVHM3T3pzN096czdPenM3T3pzN08wRkJaVUU1UWl4SFFVRkhLMFFzVlVGQlNDeEhRVUZuUWl4VlFVRlZjRVFzVVVGQlZpeEZRVUZ2UW1sRExGZEJRWEJDTEVWQlFXbERReXhYUVVGcVF5eEZRVUU0UTBNc1YwRkJPVU1zUlVGQk1rUTdRVUZEZGtVc1YwRkJUeXhKUVVGSk9VTXNSMEZCUnpKRExGVkJRVkFzUTBGQmEwSm9ReXhSUVVGc1FpeEZRVUUwUW1sRExGZEJRVFZDTEVWQlFYbERReXhYUVVGNlF5eEZRVUZ6UkVNc1YwRkJkRVFzUTBGQlVEdEJRVU5JTEVOQlJrUWlMQ0ptYVd4bElqb2lZV04wYVc5dWN5NXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWx4dVkyOXVjM1FnY1hWaGRDQTlJR05qTG5adFlYUm9MbkYxWVhRN1hHNXNaWFFnWDNGMVlYUmZkRzF3SUQwZ1kyTXVjWFZoZENncE8xeHViR1YwSUY5MlpXTXpYM1J0Y0NBOUlHTmpMbll6S0NrN1hHNWNiaThxWEc0Z0tpQlNiM1JoZEdWeklHRWdUbTlrWlNCdlltcGxZM1FnZEc4Z1lTQmpaWEowWVdsdUlHRnVaMnhsSUdKNUlHMXZaR2xtZVdsdVp5QnBkSE1nY1hWaGRHVnlibWx2YmlCd2NtOXdaWEowZVM0Z1BHSnlMejVjYmlBcUlGUm9aU0JrYVhKbFkzUnBiMjRnZDJsc2JDQmlaU0JrWldOcFpHVmtJR0o1SUhSb1pTQnphRzl5ZEdWemRDQmhibWRzWlM1Y2JpQXFJRUJqYkdGemN5QlNiM1JoZEdVelJGUnZYRzRnS2lCQVpYaDBaVzVrY3lCQlkzUnBiMjVKYm5SbGNuWmhiRnh1SUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUdSMWNtRjBhVzl1SUdSMWNtRjBhVzl1SUdsdUlITmxZMjl1WkhOY2JpQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZGWmxZek45SUdSemRFRnVaMnhsV0NCa2MzUkJibWRzWlZnZ2FXNGdaR1ZuY21WbGN5NWNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JiWkhOMFFXNW5iR1ZaWFNCa2MzUkJibWRzWlZrZ2FXNGdaR1ZuY21WbGN5NWNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JiWkhOMFFXNW5iR1ZhWFNCa2MzUkJibWRzWlZvZ2FXNGdaR1ZuY21WbGN5NWNiaUFxSUVCbGVHRnRjR3hsWEc0Z0tpQjJZWElnY205MFlYUmxNMFJVYnlBOUlHNWxkeUJqWXk1U2IzUmhkR1V6UkZSdktESXNJR05qTG5ZektEQXNJREU0TUN3Z01Da3BPMXh1SUNvdlhHNWpZeTVTYjNSaGRHVXpSRlJ2SUQwZ1kyTXVRMnhoYzNNb2UxeHVJQ0FnSUc1aGJXVTZJQ2RqWXk1U2IzUmhkR1V6UkZSdkp5eGNiaUFnSUNCbGVIUmxibVJ6T2lCall5NUJZM1JwYjI1SmJuUmxjblpoYkN4Y2JseHVJQ0FnSUdOMGIzSTZablZ1WTNScGIyNGdLR1IxY21GMGFXOXVMQ0JrYzNSQmJtZHNaVmdzSUdSemRFRnVaMnhsV1N3Z1pITjBRVzVuYkdWYUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzTjBZWEowVVhWaGRDQTlJR05qTG5GMVlYUW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZaSE4wVVhWaGRDQTlJR05qTG5GMVlYUW9LVHRjYmx4dVhIUmNkR1J6ZEVGdVoyeGxXQ0FoUFQwZ2RXNWtaV1pwYm1Wa0lDWW1JSFJvYVhNdWFXNXBkRmRwZEdoRWRYSmhkR2x2Ymloa2RYSmhkR2x2Yml3Z1pITjBRVzVuYkdWWUxDQmtjM1JCYm1kc1pWa3NJR1J6ZEVGdVoyeGxXaWs3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxWEc0Z0lDQWdJQ29nU1c1cGRHbGhiR2w2WlhNZ2RHaGxJR0ZqZEdsdmJpNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ1pIVnlZWFJwYjI1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbnhXWldNemZGRjFZWFI5SUdSemRFRnVaMnhsV0Z4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JrYzNSQmJtZHNaVmxjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdaSE4wUVc1bmJHVmFYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdRbTl2YkdWaGJuMWNiaUFnSUNBZ0tpOWNiaUFnSUNCcGJtbDBWMmwwYUVSMWNtRjBhVzl1T21aMWJtTjBhVzl1SUNoa2RYSmhkR2x2Yml3Z1pITjBRVzVuYkdWWUxDQmtjM1JCYm1kc1pWa3NJR1J6ZEVGdVoyeGxXaWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9ZMk11UVdOMGFXOXVTVzUwWlhKMllXd3VjSEp2ZEc5MGVYQmxMbWx1YVhSWGFYUm9SSFZ5WVhScGIyNHVZMkZzYkNoMGFHbHpMQ0JrZFhKaGRHbHZiaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCa2MzUlJkV0YwSUQwZ2RHaHBjeTVmWkhOMFVYVmhkRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hrYzNSQmJtZHNaVmdnYVc1emRHRnVZMlZ2WmlCall5NVJkV0YwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pITjBVWFZoZEM1elpYUW9aSE4wUVc1bmJHVllLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoa2MzUkJibWRzWlZnZ2FXNXpkR0Z1WTJWdlppQmpZeTVXWldNektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSemRFRnVaMnhsV1NBOUlHUnpkRUZ1WjJ4bFdDNTVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2MzUkJibWRzWlZvZ1BTQmtjM1JCYm1kc1pWZ3VlanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pITjBRVzVuYkdWWUlEMGdaSE4wUVc1bmJHVllMbmc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2MzUkJibWRzWlZrZ1BTQmtjM1JCYm1kc1pWa2dmSHdnTUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaSE4wUVc1bmJHVmFJRDBnWkhOMFFXNW5iR1ZhSUh4OElEQTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05qTG5adFlYUm9MbkYxWVhRdVpuSnZiVVYxYkdWeUtHUnpkRkYxWVhRc0lHUnpkRUZ1WjJ4bFdDd2daSE4wUVc1bmJHVlpMQ0JrYzNSQmJtZHNaVm9wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCamJHOXVaVHBtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJoWTNScGIyNGdQU0J1WlhjZ1kyTXVVbTkwWVhSbE0wUlVieWdwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlqYkc5dVpVUmxZMjl5WVhScGIyNG9ZV04wYVc5dUtUdGNiaUFnSUNBZ0lDQWdZV04wYVc5dUxtbHVhWFJYYVhSb1JIVnlZWFJwYjI0b2RHaHBjeTVmWkhWeVlYUnBiMjRzSUhSb2FYTXVYMlJ6ZEZGMVlYUXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZV04wYVc5dU8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCemRHRnlkRmRwZEdoVVlYSm5aWFE2Wm5WdVkzUnBiMjRnS0hSaGNtZGxkQ2tnZTF4dUlDQWdJQ0FnSUNCall5NUJZM1JwYjI1SmJuUmxjblpoYkM1d2NtOTBiM1I1Y0dVdWMzUmhjblJYYVhSb1ZHRnlaMlYwTG1OaGJHd29kR2hwY3l3Z2RHRnlaMlYwS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYzNSaGNuUlJkV0YwTG5ObGRDaDBZWEpuWlhRdWNYVmhkQ2s3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJSEpsZG1WeWMyVTZablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCall5NXNiMmRKUkNneE1ERTJLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdkWEJrWVhSbE9tWjFibU4wYVc5dUlDaGtkQ2tnZTF4dUlDQWdJQ0FnSUNCa2RDQTlJSFJvYVhNdVgyTnZiWEIxZEdWRllYTmxWR2x0WlNoa2RDazdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMblJoY21kbGRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NYVmhkQzV6YkdWeWNDaGZjWFZoZEY5MGJYQXNJSFJvYVhNdVgzTjBZWEowVVhWaGRDd2dkR2hwY3k1ZlpITjBVWFZoZEN3Z1pIUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUwWVhKblpYUXVjMlYwVW05MFlYUnBiMjRvWDNGMVlYUmZkRzF3S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JuMHBPMXh1WEc0dktpcGNiaUFxSUNFalpXNWNiaUFxSUZKdmRHRjBaWE1nWVNCT2IyUmxJRzlpYW1WamRDQjBieUJoSUdObGNuUmhhVzRnWVc1bmJHVWdZbmtnYlc5a2FXWjVhVzVuSUdsMGN5QnhkWFJsY201cGIyNGdjSEp2Y0dWeWRIa3VJRHhpY2k4K1hHNGdLaUJVYUdVZ1pHbHlaV04wYVc5dUlIZHBiR3dnWW1VZ1pHVmphV1JsWkNCaWVTQjBhR1VnYzJodmNuUmxjM1FnWVc1bmJHVXVYRzRnS2lBaEkzcG9JT2FYaStpOXJPV0lzT2VicnVhZ2graW5rdVc2cHUrOGpPbUFtdWkvaCttQWtPVzRwK1MvcnVhVXVlV3VnK2VhaENCeGRYUmxjbTVwYjI0ZzViR2U1b0NuNzd5TTVwZUw2TDJzNXBhNTVaQ1I1YkNHNTVTeDVweUE1NSt0NTVxRTZLZVM1YnFtNVlhejVhNmE0NENDWEc0Z0tpQkFiV1YwYUc5a0lISnZkR0YwWlRORVZHOWNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JrZFhKaGRHbHZiaUJrZFhKaGRHbHZiaUJwYmlCelpXTnZibVJ6WEc0Z0tpQkFjR0Z5WVcwZ2UwNTFiV0psY254V1pXTXpmRkYxWVhSOUlHUnpkRUZ1WjJ4bFdDQmtjM1JCYm1kc1pWZ2dhVzRnWkdWbmNtVmxjeTVjYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCYlpITjBRVzVuYkdWWlhTQmtjM1JCYm1kc1pWa2dhVzRnWkdWbmNtVmxjeTVjYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCYlpITjBRVzVuYkdWYVhTQmtjM1JCYm1kc1pWb2dhVzRnWkdWbmNtVmxjeTVjYmlBcUlFQnlaWFIxY200Z2UwRmpkR2x2YmtsdWRHVnlkbUZzZlZ4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxSUM4dklHVjRZVzF3YkdWY2JpQXFJSFpoY2lCeWIzUmhkR1V6UkZSdklEMGdZMk11Y205MFlYUmxNMFJVYnlneUxDQmpZeTUyTXlnd0xDQXhPREFzSURBcEtUdGNiaUFxTDF4dVkyTXVjbTkwWVhSbE0wUlVieUE5SUdaMWJtTjBhVzl1SUNoa2RYSmhkR2x2Yml3Z1pITjBRVzVuYkdWWUxDQmtjM1JCYm1kc1pWa3NJR1J6ZEVGdVoyeGxXaWtnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnWTJNdVVtOTBZWFJsTTBSVWJ5aGtkWEpoZEdsdmJpd2daSE4wUVc1bmJHVllMQ0JrYzNSQmJtZHNaVmtzSUdSemRFRnVaMnhsV2lrN1hHNTlPMXh1WEc1Y2JpOHFYRzRnS2lCU2IzUmhkR1Z6SUdFZ1RtOWtaU0J2WW1wbFkzUWdZMjkxYm5SbGNpQmpiRzlqYTNkcGMyVWdZU0J1ZFcxaVpYSWdiMllnWkdWbmNtVmxjeUJpZVNCdGIyUnBabmxwYm1jZ2FYUnpJSEYxWVhSbGNtNXBiMjRnY0hKdmNHVnlkSGt1WEc0Z0tpQlNaV3hoZEdsMlpTQjBieUJwZEhNZ2NISnZjR1Z5ZEdsbGN5QjBieUJ0YjJScFpua3VYRzRnS2lCQVkyeGhjM01nVW05MFlYUmxNMFJDZVZ4dUlDb2dRR1Y0ZEdWdVpITWdRV04wYVc5dVNXNTBaWEoyWVd4Y2JpQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQmtkWEpoZEdsdmJpQmtkWEpoZEdsdmJpQnBiaUJ6WldOdmJtUnpYRzRnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbnhXWldNemZTQmtaV3gwWVVGdVoyeGxXQ0JrWld4MFlVRnVaMnhsV0NCcGJpQmtaV2R5WldWelhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdXMlJsYkhSaFFXNW5iR1ZaWFNCa1pXeDBZVUZ1WjJ4bFdTQnBiaUJrWldkeVpXVnpYRzRnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnVzJSbGJIUmhRVzVuYkdWYVhTQmtaV3gwWVVGdVoyeGxXaUJwYmlCa1pXZHlaV1Z6WEc0Z0tpQkFaWGhoYlhCc1pWeHVJQ29nZG1GeUlHRmpkR2x2YmtKNUlEMGdibVYzSUdOakxsSnZkR0YwWlRORVFua29NaXdnWTJNdWRqTW9NQ3dnTXpZd0xDQXdLU2s3WEc0Z0tpOWNibU5qTGxKdmRHRjBaVE5FUW5rZ1BTQmpZeTVEYkdGemN5aDdYRzRnSUNBZ2JtRnRaVG9nSjJOakxsSnZkR0YwWlRORVFua25MRnh1SUNBZ0lHVjRkR1Z1WkhNNklHTmpMa0ZqZEdsdmJrbHVkR1Z5ZG1Gc0xGeHVYRzRnSUNBZ1kzUnZjam9nWm5WdVkzUnBiMjRnS0dSMWNtRjBhVzl1TENCa1pXeDBZVUZ1WjJ4bFdDd2daR1ZzZEdGQmJtZHNaVmtzSUdSbGJIUmhRVzVuYkdWYUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyRnVaMnhsSUQwZ1kyTXVkak1vS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY1hWaGRDQTlJR05qTG5GMVlYUW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZiR0Z6ZEVSMElEMGdNRHRjYmx4MFhIUmtaV3gwWVVGdVoyeGxXQ0FoUFQwZ2RXNWtaV1pwYm1Wa0lDWW1JSFJvYVhNdWFXNXBkRmRwZEdoRWRYSmhkR2x2Ymloa2RYSmhkR2x2Yml3Z1pHVnNkR0ZCYm1kc1pWZ3NJR1JsYkhSaFFXNW5iR1ZaTENCa1pXeDBZVUZ1WjJ4bFdpazdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFYRzRnSUNBZ0lDb2dTVzVwZEdsaGJHbDZaWE1nZEdobElHRmpkR2x2Ymk1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnWkhWeVlYUnBiMjRnWkhWeVlYUnBiMjRnYVc0Z2MyVmpiMjVrYzF4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmRlpsWXpOOUlHUmxiSFJoUVc1bmJHVllJR1JsYkhSaFFXNW5iR1ZZSUdsdUlHUmxaM0psWlhOY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnVzJSbGJIUmhRVzVuYkdWWlBWMGdaR1ZzZEdGQmJtZHNaVmtnYVc0Z1pHVm5jbVZsYzF4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JiWkdWc2RHRkJibWRzWlZvOVhTQmtaV3gwWVVGdVoyeGxXaUJwYmlCa1pXZHlaV1Z6WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3UW05dmJHVmhibjFjYmlBZ0lDQWdLaTljYmlBZ0lDQnBibWwwVjJsMGFFUjFjbUYwYVc5dU9tWjFibU4wYVc5dUlDaGtkWEpoZEdsdmJpd2daR1ZzZEdGQmJtZHNaVmdzSUdSbGJIUmhRVzVuYkdWWkxDQmtaV3gwWVVGdVoyeGxXaWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9ZMk11UVdOMGFXOXVTVzUwWlhKMllXd3VjSEp2ZEc5MGVYQmxMbWx1YVhSWGFYUm9SSFZ5WVhScGIyNHVZMkZzYkNoMGFHbHpMQ0JrZFhKaGRHbHZiaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoa1pXeDBZVUZ1WjJ4bFdDQnBibk4wWVc1alpXOW1JR05qTGxabFl6TXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWld4MFlVRnVaMnhsV1NBOUlHUmxiSFJoUVc1bmJHVllMbms3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWc2RHRkJibWRzWlZvZ1BTQmtaV3gwWVVGdVoyeGxXQzU2TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbGJIUmhRVzVuYkdWWUlEMGdaR1ZzZEdGQmJtZHNaVmd1ZUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbGJIUmhRVzVuYkdWWklEMGdaR1ZzZEdGQmJtZHNaVmtnZkh3Z01EdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaV3gwWVVGdVoyeGxXaUE5SUdSbGJIUmhRVzVuYkdWYUlIeDhJREE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCall5NTJiV0YwYUM1MlpXTXpMbk5sZENoMGFHbHpMbDloYm1kc1pTd2daR1ZzZEdGQmJtZHNaVmdzSUdSbGJIUmhRVzVuYkdWWkxDQmtaV3gwWVVGdVoyeGxXaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHTnNiMjVsT21aMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdGamRHbHZiaUE5SUc1bGR5QmpZeTVTYjNSaGRHVXpSRUo1S0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJOc2IyNWxSR1ZqYjNKaGRHbHZiaWhoWTNScGIyNHBPMXh1SUNBZ0lDQWdJQ0JoWTNScGIyNHVhVzVwZEZkcGRHaEVkWEpoZEdsdmJpaDBhR2x6TGw5a2RYSmhkR2x2Yml3Z2RHaHBjeTVmWVc1bmJHVXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZV04wYVc5dU8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCemRHRnlkRmRwZEdoVVlYSm5aWFE2Wm5WdVkzUnBiMjRnS0hSaGNtZGxkQ2tnZTF4dUlDQWdJQ0FnSUNCall5NUJZM1JwYjI1SmJuUmxjblpoYkM1d2NtOTBiM1I1Y0dVdWMzUmhjblJYYVhSb1ZHRnlaMlYwTG1OaGJHd29kR2hwY3l3Z2RHRnlaMlYwS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY1hWaGRDNXpaWFFvZEdGeVoyVjBMbkYxWVhRcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5c1lYTjBSSFFnUFNBd08xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCMWNHUmhkR1U2SUNobWRXNWpkR2x2YmlncGUxeHVJQ0FnSUNBZ0lDQnNaWFFnVWtGRUlEMGdUV0YwYUM1UVNTQXZJREU0TUR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUNoa2RDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pIUWdQU0IwYUdsekxsOWpiMjF3ZFhSbFJXRnpaVlJwYldVb1pIUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWRHRnlaMlYwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR0Z1WjJ4bElEMGdkR2hwY3k1ZllXNW5iR1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHUnpkRkYxWVhRZ1BTQjBhR2x6TGw5eGRXRjBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCa1pXeDBZU0E5SUdSMElDMGdkR2hwY3k1ZmJHRnpkRVIwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmhibWRzWlZnZ1BTQmhibWRzWlM1NExDQmhibWRzWlZrZ1BTQmhibWRzWlM1NUxDQmhibWRzWlZvZ1BTQmhibWRzWlM1Nk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hoYm1kc1pWZ3BJSEYxWVhRdWNtOTBZWFJsV0Noa2MzUlJkV0YwTENCa2MzUlJkV0YwTENCaGJtZHNaVmdnS2lCU1FVUWdLaUJrWld4MFlTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dGdVoyeGxXU2tnY1hWaGRDNXliM1JoZEdWWktHUnpkRkYxWVhRc0lHUnpkRkYxWVhRc0lHRnVaMnhsV1NBcUlGSkJSQ0FxSUdSbGJIUmhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1lXNW5iR1ZhS1NCeGRXRjBMbkp2ZEdGMFpWb29aSE4wVVhWaGRDd2daSE4wVVhWaGRDd2dZVzVuYkdWYUlDb2dVa0ZFSUNvZ1pHVnNkR0VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkR0Z5WjJWMExuTmxkRkp2ZEdGMGFXOXVLR1J6ZEZGMVlYUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyeGhjM1JFZENBOUlHUjBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZTa29LU3hjYmx4dUlDQWdJSEpsZG1WeWMyVTZablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCc1pYUWdZVzVuYkdVZ1BTQjBhR2x6TGw5aGJtZHNaVHRjYmlBZ0lDQWdJQ0FnWDNabFl6TmZkRzF3TG5nZ1BTQXRZVzVuYkdVdWVEdGNiaUFnSUNBZ0lDQWdYM1psWXpOZmRHMXdMbmtnUFNBdFlXNW5iR1V1ZVR0Y2JpQWdJQ0FnSUNBZ1gzWmxZek5mZEcxd0xub2dQU0F0WVc1bmJHVXVlanRjYmlBZ0lDQWdJQ0FnZG1GeUlHRmpkR2x2YmlBOUlHNWxkeUJqWXk1U2IzUmhkR1V6UkVKNUtIUm9hWE11WDJSMWNtRjBhVzl1TENCZmRtVmpNMTkwYlhBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5amJHOXVaVVJsWTI5eVlYUnBiMjRvWVdOMGFXOXVLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjbVYyWlhKelpVVmhjMlZNYVhOMEtHRmpkR2x2YmlrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCaFkzUnBiMjQ3WEc0Z0lDQWdmVnh1ZlNrN1hHNWNiaThxS2x4dUlDb2dJU05sYmx4dUlDb2dVbTkwWVhSbGN5QmhJRTV2WkdVZ2IySnFaV04wSUdOdmRXNTBaWElnWTJ4dlkydDNhWE5sSUdFZ2JuVnRZbVZ5SUc5bUlHUmxaM0psWlhNZ1lua2diVzlrYVdaNWFXNW5JR2wwY3lCeGRXRjBaWEp1YVc5dUlIQnliM0JsY25SNUxseHVJQ29nVW1Wc1lYUnBkbVVnZEc4Z2FYUnpJSEJ5YjNCbGNuUnBaWE1nZEc4Z2JXOWthV1o1TGx4dUlDb2dJU042YUNEbWw0dm92YXptaklmbHJwcm5tb1FnTTBRZzZLZVM1YnFtNDRDQ1hHNGdLaUJBYldWMGFHOWtJSEp2ZEdGMFpUTkVRbmxjYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCa2RYSmhkR2x2YmlCa2RYSmhkR2x2YmlCcGJpQnpaV052Ym1SelhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNueFdaV016ZlNCa1pXeDBZVUZ1WjJ4bFdDQmtaV3gwWVVGdVoyeGxXQ0JwYmlCa1pXZHlaV1Z6WEc0Z0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ1cyUmxiSFJoUVc1bmJHVlpYU0JrWld4MFlVRnVaMnhsV1NCcGJpQmtaV2R5WldWelhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdXMlJsYkhSaFFXNW5iR1ZhWFNCa1pXeDBZVUZ1WjJ4bFdpQnBiaUJrWldkeVpXVnpYRzRnS2lCQWNtVjBkWEp1SUh0QlkzUnBiMjVKYm5SbGNuWmhiSDFjYmlBcUlFQmxlR0Z0Y0d4bFhHNGdLaUF2THlCbGVHRnRjR3hsWEc0Z0tpQjJZWElnWVdOMGFXOXVRbmtnUFNCall5NXliM1JoZEdVelJFSjVLRElzSUdOakxuWXpLREFzSURNMk1Dd2dNQ2twTzF4dUlDb3ZYRzVqWXk1eWIzUmhkR1V6UkVKNUlEMGdablZ1WTNScGIyNGdLR1IxY21GMGFXOXVMQ0JrWld4MFlVRnVaMnhsV0N3Z1pHVnNkR0ZCYm1kc1pWa3NJR1JsYkhSaFFXNW5iR1ZhS1NCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCall5NVNiM1JoZEdVelJFSjVLR1IxY21GMGFXOXVMQ0JrWld4MFlVRnVaMnhsV0N3Z1pHVnNkR0ZCYm1kc1pWa3NJR1JsYkhSaFFXNW5iR1ZhS1R0Y2JuMDdYRzVjYmlKZGZRPT0iXX0=