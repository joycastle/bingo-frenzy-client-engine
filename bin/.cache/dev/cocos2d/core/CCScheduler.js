(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/CCScheduler.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('./platform/js');
        var IdGenerater = require('./platform/id-generater');
        var MAX_POOL_SIZE = 20;
        var idGenerater = new IdGenerater('Scheduler');
        var ListEntry = function ListEntry(target, priority, paused, markedForDeletion) {
            this.target = target;
            this.priority = priority;
            this.paused = paused;
            this.markedForDeletion = markedForDeletion;
        };
        var _listEntries = [];
        ListEntry.get = function (target, priority, paused, markedForDeletion) {
            var result = _listEntries.pop();
            if (result) {
                result.target = target;
                result.priority = priority;
                result.paused = paused;
                result.markedForDeletion = markedForDeletion;
            } else {
                result = new ListEntry(target, priority, paused, markedForDeletion);
            }
            return result;
        };
        ListEntry.put = function (entry) {
            if (_listEntries.length < MAX_POOL_SIZE) {
                entry.target = null;
                _listEntries.push(entry);
            }
        };
        var HashUpdateEntry = function HashUpdateEntry(list, entry, target, callback) {
            this.list = list;
            this.entry = entry;
            this.target = target;
            this.callback = callback;
        };
        var _hashUpdateEntries = [];
        HashUpdateEntry.get = function (list, entry, target, callback) {
            var result = _hashUpdateEntries.pop();
            if (result) {
                result.list = list;
                result.entry = entry;
                result.target = target;
                result.callback = callback;
            } else {
                result = new HashUpdateEntry(list, entry, target, callback);
            }
            return result;
        };
        HashUpdateEntry.put = function (entry) {
            if (_hashUpdateEntries.length < MAX_POOL_SIZE) {
                entry.list = entry.entry = entry.target = entry.callback = null;
                _hashUpdateEntries.push(entry);
            }
        };
        var HashTimerEntry = function HashTimerEntry(timers, target, timerIndex, currentTimer, currentTimerSalvaged, paused) {
            var _t = this;
            _t.timers = timers;
            _t.target = target;
            _t.timerIndex = timerIndex;
            _t.currentTimer = currentTimer;
            _t.currentTimerSalvaged = currentTimerSalvaged;
            _t.paused = paused;
        };
        var _hashTimerEntries = [];
        HashTimerEntry.get = function (timers, target, timerIndex, currentTimer, currentTimerSalvaged, paused) {
            var result = _hashTimerEntries.pop();
            if (result) {
                result.timers = timers;
                result.target = target;
                result.timerIndex = timerIndex;
                result.currentTimer = currentTimer;
                result.currentTimerSalvaged = currentTimerSalvaged;
                result.paused = paused;
            } else {
                result = new HashTimerEntry(timers, target, timerIndex, currentTimer, currentTimerSalvaged, paused);
            }
            return result;
        };
        HashTimerEntry.put = function (entry) {
            if (_hashTimerEntries.length < MAX_POOL_SIZE) {
                entry.timers = entry.target = entry.currentTimer = null;
                _hashTimerEntries.push(entry);
            }
        };
        function CallbackTimer() {
            this._lock = false;
            this._scheduler = null;
            this._elapsed = -1;
            this._runForever = false;
            this._useDelay = false;
            this._timesExecuted = 0;
            this._repeat = 0;
            this._delay = 0;
            this._interval = 0;
            this._target = null;
            this._callback = null;
        }
        var proto = CallbackTimer.prototype;
        proto.initWithCallback = function (scheduler, callback, target, seconds, repeat, delay) {
            this._lock = false;
            this._scheduler = scheduler;
            this._target = target;
            this._callback = callback;
            this._elapsed = -1;
            this._interval = seconds;
            this._delay = delay;
            this._useDelay = this._delay > 0;
            this._repeat = repeat;
            this._runForever = this._repeat === cc.macro.REPEAT_FOREVER;
            return true;
        };
        proto.getInterval = function () {
            return this._interval;
        };
        proto.setInterval = function (interval) {
            this._interval = interval;
        };
        proto.update = function (dt) {
            if (this._elapsed === -1) {
                this._elapsed = 0;
                this._timesExecuted = 0;
            } else {
                this._elapsed += dt;
                if (this._runForever && !this._useDelay) {
                    if (this._elapsed >= this._interval) {
                        this.trigger();
                        this._elapsed = 0;
                    }
                } else {
                    if (this._useDelay) {
                        if (this._elapsed >= this._delay) {
                            this.trigger();
                            this._elapsed -= this._delay;
                            this._timesExecuted += 1;
                            this._useDelay = false;
                        }
                    } else {
                        if (this._elapsed >= this._interval) {
                            this.trigger();
                            this._elapsed = 0;
                            this._timesExecuted += 1;
                        }
                    }
                    if (this._callback && !this._runForever && this._timesExecuted > this._repeat)
                        this.cancel();
                }
            }
        };
        proto.getCallback = function () {
            return this._callback;
        };
        proto.trigger = function () {
            if (this._target && this._callback) {
                this._lock = true;
                this._callback.call(this._target, this._elapsed);
                this._lock = false;
            }
        };
        proto.cancel = function () {
            this._scheduler.unschedule(this._callback, this._target);
        };
        var _timers = [];
        CallbackTimer.get = function () {
            return _timers.pop() || new CallbackTimer();
        };
        CallbackTimer.put = function (timer) {
            if (_timers.length < MAX_POOL_SIZE && !timer._lock) {
                timer._scheduler = timer._target = timer._callback = null;
                _timers.push(timer);
            }
        };
        cc.Scheduler = function () {
            this._timeScale = 1;
            this._updatesNegList = [];
            this._updates0List = [];
            this._updatesPosList = [];
            this._hashForUpdates = js.createMap(true);
            this._hashForTimers = js.createMap(true);
            this._currentTarget = null;
            this._currentTargetSalvaged = false;
            this._updateHashLocked = false;
            this._arrayForTimers = [];
        };
        cc.Scheduler.prototype = {
            constructor: cc.Scheduler,
            _removeHashElement: function _removeHashElement(element) {
                delete this._hashForTimers[element.target._id];
                var arr = this._arrayForTimers;
                for (var i = 0, l = arr.length; i < l; i++) {
                    if (arr[i] === element) {
                        arr.splice(i, 1);
                        break;
                    }
                }
                HashTimerEntry.put(element);
            },
            _removeUpdateFromHash: function _removeUpdateFromHash(entry) {
                var targetId = entry.target._id;
                var self = this, element = self._hashForUpdates[targetId];
                if (element) {
                    var list = element.list, listEntry = element.entry;
                    for (var i = 0, l = list.length; i < l; i++) {
                        if (list[i] === listEntry) {
                            list.splice(i, 1);
                            break;
                        }
                    }
                    delete self._hashForUpdates[targetId];
                    ListEntry.put(listEntry);
                    HashUpdateEntry.put(element);
                }
            },
            _priorityIn: function _priorityIn(ppList, listElement, priority) {
                for (var i = 0; i < ppList.length; i++) {
                    if (priority < ppList[i].priority) {
                        ppList.splice(i, 0, listElement);
                        return;
                    }
                }
                ppList.push(listElement);
            },
            _appendIn: function _appendIn(ppList, listElement) {
                ppList.push(listElement);
            },
            enableForTarget: function enableForTarget(target) {
                if (!target._id) {
                    if (target.__instanceId) {
                        cc.warnID(1513);
                    } else {
                        target._id = idGenerater.getNewId();
                    }
                }
            },
            setTimeScale: function setTimeScale(timeScale) {
                this._timeScale = timeScale;
            },
            getTimeScale: function getTimeScale() {
                return this._timeScale;
            },
            update: function update(dt) {
                this._updateHashLocked = true;
                if (this._timeScale !== 1)
                    dt *= this._timeScale;
                var i, list, len, entry;
                for (i = 0, list = this._updatesNegList, len = list.length; i < len; i++) {
                    entry = list[i];
                    if (!entry.paused && !entry.markedForDeletion)
                        entry.target.update(dt);
                }
                for (i = 0, list = this._updates0List, len = list.length; i < len; i++) {
                    entry = list[i];
                    if (!entry.paused && !entry.markedForDeletion)
                        entry.target.update(dt);
                }
                for (i = 0, list = this._updatesPosList, len = list.length; i < len; i++) {
                    entry = list[i];
                    if (!entry.paused && !entry.markedForDeletion)
                        entry.target.update(dt);
                }
                var elt, arr = this._arrayForTimers;
                for (i = 0; i < arr.length; i++) {
                    elt = arr[i];
                    this._currentTarget = elt;
                    this._currentTargetSalvaged = false;
                    if (!elt.paused) {
                        for (elt.timerIndex = 0; elt.timerIndex < elt.timers.length; ++elt.timerIndex) {
                            elt.currentTimer = elt.timers[elt.timerIndex];
                            elt.currentTimerSalvaged = false;
                            elt.currentTimer.update(dt);
                            elt.currentTimer = null;
                        }
                    }
                    if (this._currentTargetSalvaged && this._currentTarget.timers.length === 0) {
                        this._removeHashElement(this._currentTarget);
                        --i;
                    }
                }
                for (i = 0, list = this._updatesNegList; i < list.length;) {
                    entry = list[i];
                    if (entry.markedForDeletion)
                        this._removeUpdateFromHash(entry);
                    else
                        i++;
                }
                for (i = 0, list = this._updates0List; i < list.length;) {
                    entry = list[i];
                    if (entry.markedForDeletion)
                        this._removeUpdateFromHash(entry);
                    else
                        i++;
                }
                for (i = 0, list = this._updatesPosList; i < list.length;) {
                    entry = list[i];
                    if (entry.markedForDeletion)
                        this._removeUpdateFromHash(entry);
                    else
                        i++;
                }
                this._updateHashLocked = false;
                this._currentTarget = null;
            },
            schedule: function schedule(callback, target, interval, repeat, delay, paused) {
                'use strict';
                if (typeof callback !== 'function') {
                    var tmp = callback;
                    callback = target;
                    target = tmp;
                }
                if (arguments.length === 4 || arguments.length === 5) {
                    paused = !!repeat;
                    repeat = cc.macro.REPEAT_FOREVER;
                    delay = 0;
                }
                cc.assertID(target, 1502);
                var targetId = target._id;
                if (!targetId) {
                    if (target.__instanceId) {
                        cc.warnID(1513);
                        targetId = target._id = target.__instanceId;
                    } else {
                        cc.errorID(1510);
                    }
                }
                var element = this._hashForTimers[targetId];
                if (!element) {
                    element = HashTimerEntry.get(null, target, 0, null, null, paused);
                    this._arrayForTimers.push(element);
                    this._hashForTimers[targetId] = element;
                } else if (element.paused !== paused) {
                    cc.warnID(1511);
                }
                var timer, i;
                if (element.timers == null) {
                    element.timers = [];
                } else {
                    for (i = 0; i < element.timers.length; ++i) {
                        timer = element.timers[i];
                        if (timer && callback === timer._callback) {
                            cc.logID(1507, timer.getInterval(), interval);
                            timer._interval = interval;
                            return;
                        }
                    }
                }
                timer = CallbackTimer.get();
                timer.initWithCallback(this, callback, target, interval, repeat, delay);
                element.timers.push(timer);
                if (this._currentTarget === element && this._currentTargetSalvaged) {
                    this._currentTargetSalvaged = false;
                }
            },
            scheduleUpdate: function scheduleUpdate(target, priority, paused) {
                var targetId = target._id;
                if (!targetId) {
                    if (target.__instanceId) {
                        cc.warnID(1513);
                        targetId = target._id = target.__instanceId;
                    } else {
                        cc.errorID(1510);
                    }
                }
                var hashElement = this._hashForUpdates[targetId];
                if (hashElement && hashElement.entry) {
                    if (hashElement.entry.priority !== priority) {
                        if (this._updateHashLocked) {
                            cc.logID(1506);
                            hashElement.entry.markedForDeletion = false;
                            hashElement.entry.paused = paused;
                            return;
                        } else {
                            this.unscheduleUpdate(target);
                        }
                    } else {
                        hashElement.entry.markedForDeletion = false;
                        hashElement.entry.paused = paused;
                        return;
                    }
                }
                var listElement = ListEntry.get(target, priority, paused, false);
                var ppList;
                if (priority === 0) {
                    ppList = this._updates0List;
                    this._appendIn(ppList, listElement);
                } else {
                    ppList = priority < 0 ? this._updatesNegList : this._updatesPosList;
                    this._priorityIn(ppList, listElement, priority);
                }
                this._hashForUpdates[targetId] = HashUpdateEntry.get(ppList, listElement, target, null);
            },
            unschedule: function unschedule(callback, target) {
                if (!target || !callback)
                    return;
                var targetId = target._id;
                if (!targetId) {
                    if (target.__instanceId) {
                        cc.warnID(1513);
                        targetId = target._id = target.__instanceId;
                    } else {
                        cc.errorID(1510);
                    }
                }
                var self = this, element = self._hashForTimers[targetId];
                if (element) {
                    var timers = element.timers;
                    for (var i = 0, li = timers.length; i < li; i++) {
                        var timer = timers[i];
                        if (callback === timer._callback) {
                            if (timer === element.currentTimer && !element.currentTimerSalvaged) {
                                element.currentTimerSalvaged = true;
                            }
                            timers.splice(i, 1);
                            CallbackTimer.put(timer);
                            if (element.timerIndex >= i) {
                                element.timerIndex--;
                            }
                            if (timers.length === 0) {
                                if (self._currentTarget === element) {
                                    self._currentTargetSalvaged = true;
                                } else {
                                    self._removeHashElement(element);
                                }
                            }
                            return;
                        }
                    }
                }
            },
            unscheduleUpdate: function unscheduleUpdate(target) {
                if (!target)
                    return;
                var targetId = target._id;
                if (!targetId) {
                    if (target.__instanceId) {
                        cc.warnID(1513);
                        targetId = target._id = target.__instanceId;
                    } else {
                        cc.errorID(1510);
                    }
                }
                var element = this._hashForUpdates[targetId];
                if (element) {
                    if (this._updateHashLocked) {
                        element.entry.markedForDeletion = true;
                    } else {
                        this._removeUpdateFromHash(element.entry);
                    }
                }
            },
            unscheduleAllForTarget: function unscheduleAllForTarget(target) {
                if (!target) {
                    return;
                }
                var targetId = target._id;
                if (!targetId) {
                    if (target.__instanceId) {
                        cc.warnID(1513);
                        targetId = target._id = target.__instanceId;
                    } else {
                        cc.errorID(1510);
                    }
                }
                var element = this._hashForTimers[targetId];
                if (element) {
                    var timers = element.timers;
                    if (timers.indexOf(element.currentTimer) > -1 && !element.currentTimerSalvaged) {
                        element.currentTimerSalvaged = true;
                    }
                    for (var i = 0, l = timers.length; i < l; i++) {
                        CallbackTimer.put(timers[i]);
                    }
                    timers.length = 0;
                    if (this._currentTarget === element) {
                        this._currentTargetSalvaged = true;
                    } else {
                        this._removeHashElement(element);
                    }
                }
                this.unscheduleUpdate(target);
            },
            unscheduleAll: function unscheduleAll() {
                this.unscheduleAllWithMinPriority(cc.Scheduler.PRIORITY_SYSTEM);
            },
            unscheduleAllWithMinPriority: function unscheduleAllWithMinPriority(minPriority) {
                var i, element, arr = this._arrayForTimers;
                for (i = arr.length - 1; i >= 0; i--) {
                    element = arr[i];
                    this.unscheduleAllForTarget(element.target);
                }
                var entry;
                var temp_length = 0;
                if (minPriority < 0) {
                    for (i = 0; i < this._updatesNegList.length;) {
                        temp_length = this._updatesNegList.length;
                        entry = this._updatesNegList[i];
                        if (entry && entry.priority >= minPriority)
                            this.unscheduleUpdate(entry.target);
                        if (temp_length == this._updatesNegList.length)
                            i++;
                    }
                }
                if (minPriority <= 0) {
                    for (i = 0; i < this._updates0List.length;) {
                        temp_length = this._updates0List.length;
                        entry = this._updates0List[i];
                        if (entry)
                            this.unscheduleUpdate(entry.target);
                        if (temp_length == this._updates0List.length)
                            i++;
                    }
                }
                for (i = 0; i < this._updatesPosList.length;) {
                    temp_length = this._updatesPosList.length;
                    entry = this._updatesPosList[i];
                    if (entry && entry.priority >= minPriority)
                        this.unscheduleUpdate(entry.target);
                    if (temp_length == this._updatesPosList.length)
                        i++;
                }
            },
            isScheduled: function isScheduled(callback, target) {
                cc.assertID(callback, 1508);
                cc.assertID(target, 1509);
                var targetId = target._id;
                if (!targetId) {
                    if (target.__instanceId) {
                        cc.warnID(1513);
                        targetId = target._id = target.__instanceId;
                    } else {
                        cc.errorID(1510);
                    }
                }
                var element = this._hashForTimers[targetId];
                if (!element) {
                    return false;
                }
                if (element.timers == null) {
                    return false;
                } else {
                    var timers = element.timers;
                    for (var i = 0; i < timers.length; ++i) {
                        var timer = timers[i];
                        if (callback === timer._callback) {
                            return true;
                        }
                    }
                    return false;
                }
            },
            pauseAllTargets: function pauseAllTargets() {
                return this.pauseAllTargetsWithMinPriority(cc.Scheduler.PRIORITY_SYSTEM);
            },
            pauseAllTargetsWithMinPriority: function pauseAllTargetsWithMinPriority(minPriority) {
                var idsWithSelectors = [];
                var self = this, element, locArrayForTimers = self._arrayForTimers;
                var i, li;
                for (i = 0, li = locArrayForTimers.length; i < li; i++) {
                    element = locArrayForTimers[i];
                    if (element) {
                        element.paused = true;
                        idsWithSelectors.push(element.target);
                    }
                }
                var entry;
                if (minPriority < 0) {
                    for (i = 0; i < this._updatesNegList.length; i++) {
                        entry = this._updatesNegList[i];
                        if (entry) {
                            if (entry.priority >= minPriority) {
                                entry.paused = true;
                                idsWithSelectors.push(entry.target);
                            }
                        }
                    }
                }
                if (minPriority <= 0) {
                    for (i = 0; i < this._updates0List.length; i++) {
                        entry = this._updates0List[i];
                        if (entry) {
                            entry.paused = true;
                            idsWithSelectors.push(entry.target);
                        }
                    }
                }
                for (i = 0; i < this._updatesPosList.length; i++) {
                    entry = this._updatesPosList[i];
                    if (entry) {
                        if (entry.priority >= minPriority) {
                            entry.paused = true;
                            idsWithSelectors.push(entry.target);
                        }
                    }
                }
                return idsWithSelectors;
            },
            resumeTargets: function resumeTargets(targetsToResume) {
                if (!targetsToResume)
                    return;
                for (var i = 0; i < targetsToResume.length; i++) {
                    this.resumeTarget(targetsToResume[i]);
                }
            },
            pauseTarget: function pauseTarget(target) {
                cc.assertID(target, 1503);
                var targetId = target._id;
                if (!targetId) {
                    if (target.__instanceId) {
                        cc.warnID(1513);
                        targetId = target._id = target.__instanceId;
                    } else {
                        cc.errorID(1510);
                    }
                }
                var self = this, element = self._hashForTimers[targetId];
                if (element) {
                    element.paused = true;
                }
                var elementUpdate = self._hashForUpdates[targetId];
                if (elementUpdate) {
                    elementUpdate.entry.paused = true;
                }
            },
            resumeTarget: function resumeTarget(target) {
                cc.assertID(target, 1504);
                var targetId = target._id;
                if (!targetId) {
                    if (target.__instanceId) {
                        cc.warnID(1513);
                        targetId = target._id = target.__instanceId;
                    } else {
                        cc.errorID(1510);
                    }
                }
                var self = this, element = self._hashForTimers[targetId];
                if (element) {
                    element.paused = false;
                }
                var elementUpdate = self._hashForUpdates[targetId];
                if (elementUpdate) {
                    elementUpdate.entry.paused = false;
                }
            },
            isTargetPaused: function isTargetPaused(target) {
                cc.assertID(target, 1505);
                var targetId = target._id;
                if (!targetId) {
                    if (target.__instanceId) {
                        cc.warnID(1513);
                        targetId = target._id = target.__instanceId;
                    } else {
                        cc.errorID(1510);
                    }
                }
                var element = this._hashForTimers[targetId];
                if (element) {
                    return element.paused;
                }
                var elementUpdate = this._hashForUpdates[targetId];
                if (elementUpdate) {
                    return elementUpdate.entry.paused;
                }
                return false;
            }
        };
        cc.Scheduler.PRIORITY_SYSTEM = 1 << 31;
        cc.Scheduler.PRIORITY_NON_SYSTEM = cc.Scheduler.PRIORITY_SYSTEM + 1;
        module.exports = cc.Scheduler;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,