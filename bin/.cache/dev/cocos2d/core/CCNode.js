(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/CCNode.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _vmath = require('./vmath');
        var BaseNode = require('./utils/base-node');
        var PrefabHelper = require('./utils/prefab-helper');
        var nodeMemPool = require('./utils/trans-pool').NodeMemPool;
        var AffineTrans = require('./utils/affine-transform');
        var eventManager = require('./event-manager');
        var macro = require('./platform/CCMacro');
        var js = require('./platform/js');
        var Event = require('./event/event');
        var EventTarget = require('./event/event-target');
        var RenderFlow = require('./renderer/render-flow');
        var Flags = cc.Object.Flags;
        var Destroying = Flags.Destroying;
        var ERR_INVALID_NUMBER = CC_EDITOR && 'The %s is invalid';
        var ONE_DEGREE = Math.PI / 180;
        var ActionManagerExist = !!cc.ActionManager;
        var emptyFunc = function emptyFunc() {
        };
        var _gwpVec3 = cc.v3();
        var _gwpQuat = cc.quat();
        var _tpVec3a = cc.v3();
        var _tpVec3b = cc.v3();
        var _tpQuata = cc.quat();
        var _tpQuatb = cc.quat();
        var _swpVec3 = cc.v3();
        var _gwsVec3 = cc.v3();
        var _swsVec3 = cc.v3();
        var _gwrtVec3a = cc.v3();
        var _gwrtVec3b = cc.v3();
        var _gwrtQuata = cc.quat();
        var _gwrtQuatb = cc.quat();
        var _laVec3 = cc.v3();
        var _laQuat = _vmath.quat.create();
        var _htVec3a = cc.v3();
        var _htVec3b = cc.v3();
        var _gwrQuat = cc.quat();
        var _swrQuat = cc.quat();
        var _quata = cc.quat();
        var _mat4_temp = _vmath.mat4.create();
        var _vec3_temp = _vmath.vec3.create();
        var _cachedArray = new Array(16);
        _cachedArray.length = 0;
        var POSITION_ON = 1 << 0;
        var SCALE_ON = 1 << 1;
        var ROTATION_ON = 1 << 2;
        var SIZE_ON = 1 << 3;
        var ANCHOR_ON = 1 << 4;
        var COLOR_ON = 1 << 5;
        var BuiltinGroupIndex = cc.Enum({ DEBUG: 31 });
        var LocalDirtyFlag = cc.Enum({
            POSITION: 1 << 0,
            SCALE: 1 << 1,
            ROTATION: 1 << 2,
            SKEW: 1 << 3,
            TRS: 1 << 0 | 1 << 1 | 1 << 2,
            RS: 1 << 1 | 1 << 2,
            ALL: 65535
        });
        var EventType = cc.Enum({
            TOUCH_START: 'touchstart',
            TOUCH_MOVE: 'touchmove',
            TOUCH_END: 'touchend',
            TOUCH_CANCEL: 'touchcancel',
            MOUSE_DOWN: 'mousedown',
            MOUSE_MOVE: 'mousemove',
            MOUSE_ENTER: 'mouseenter',
            MOUSE_LEAVE: 'mouseleave',
            MOUSE_UP: 'mouseup',
            MOUSE_WHEEL: 'mousewheel',
            POSITION_CHANGED: 'position-changed',
            ROTATION_CHANGED: 'rotation-changed',
            SCALE_CHANGED: 'scale-changed',
            SIZE_CHANGED: 'size-changed',
            ANCHOR_CHANGED: 'anchor-changed',
            COLOR_CHANGED: 'color-changed',
            CHILD_ADDED: 'child-added',
            CHILD_REMOVED: 'child-removed',
            CHILD_REORDER: 'child-reorder',
            GROUP_CHANGED: 'group-changed',
            SIBLING_ORDER_CHANGED: 'sibling-order-changed'
        });
        var _touchEvents = [
            EventType.TOUCH_START,
            EventType.TOUCH_MOVE,
            EventType.TOUCH_END,
            EventType.TOUCH_CANCEL
        ];
        var _mouseEvents = [
            EventType.MOUSE_DOWN,
            EventType.MOUSE_ENTER,
            EventType.MOUSE_MOVE,
            EventType.MOUSE_LEAVE,
            EventType.MOUSE_UP,
            EventType.MOUSE_WHEEL
        ];
        var _skewNeedWarn = true;
        var _skewWarn = function _skewWarn(value, node) {
            if (value !== 0) {
                var nodePath = '';
                if (CC_EDITOR) {
                    var NodeUtils = Editor.require('scene://utils/node');
                    nodePath = 'Node: ' + NodeUtils.getNodePath(node) + '.';
                }
                _skewNeedWarn && cc.warn('`cc.Node.skewX/Y` is deprecated since v2.2.1, please use 3D node instead.', nodePath);
                !CC_EDITOR && (_skewNeedWarn = false);
            }
        };
        var _currentHovered = null;
        var _touchStartHandler = function _touchStartHandler(touch, event) {
            var pos = touch.getLocation();
            var node = this.owner;
            if (node._hitTest(pos, this)) {
                event.type = EventType.TOUCH_START;
                event.touch = touch;
                event.bubbles = true;
                node.dispatchEvent(event);
                return true;
            }
            return false;
        };
        var _touchMoveHandler = function _touchMoveHandler(touch, event) {
            var node = this.owner;
            event.type = EventType.TOUCH_MOVE;
            event.touch = touch;
            event.bubbles = true;
            node.dispatchEvent(event);
        };
        var _touchEndHandler = function _touchEndHandler(touch, event) {
            var pos = touch.getLocation();
            var node = this.owner;
            if (node._hitTest(pos, this)) {
                event.type = EventType.TOUCH_END;
            } else {
                event.type = EventType.TOUCH_CANCEL;
            }
            event.touch = touch;
            event.bubbles = true;
            node.dispatchEvent(event);
        };
        var _touchCancelHandler = function _touchCancelHandler(touch, event) {
            var pos = touch.getLocation();
            var node = this.owner;
            event.type = EventType.TOUCH_CANCEL;
            event.touch = touch;
            event.bubbles = true;
            node.dispatchEvent(event);
        };
        var _mouseDownHandler = function _mouseDownHandler(event) {
            var pos = event.getLocation();
            var node = this.owner;
            if (node._hitTest(pos, this)) {
                event.type = EventType.MOUSE_DOWN;
                event.bubbles = true;
                node.dispatchEvent(event);
            }
        };
        var _mouseMoveHandler = function _mouseMoveHandler(event) {
            var pos = event.getLocation();
            var node = this.owner;
            var hit = node._hitTest(pos, this);
            if (hit) {
                if (!this._previousIn) {
                    if (_currentHovered && _currentHovered._mouseListener) {
                        event.type = EventType.MOUSE_LEAVE;
                        _currentHovered.dispatchEvent(event);
                        _currentHovered._mouseListener._previousIn = false;
                    }
                    _currentHovered = this.owner;
                    event.type = EventType.MOUSE_ENTER;
                    node.dispatchEvent(event);
                    this._previousIn = true;
                }
                event.type = EventType.MOUSE_MOVE;
                event.bubbles = true;
                node.dispatchEvent(event);
            } else if (this._previousIn) {
                event.type = EventType.MOUSE_LEAVE;
                node.dispatchEvent(event);
                this._previousIn = false;
                _currentHovered = null;
            } else {
                return;
            }
            event.stopPropagation();
        };
        var _mouseUpHandler = function _mouseUpHandler(event) {
            var pos = event.getLocation();
            var node = this.owner;
            if (node._hitTest(pos, this)) {
                event.type = EventType.MOUSE_UP;
                event.bubbles = true;
                node.dispatchEvent(event);
                event.stopPropagation();
            }
        };
        var _mouseWheelHandler = function _mouseWheelHandler(event) {
            var pos = event.getLocation();
            var node = this.owner;
            if (node._hitTest(pos, this)) {
                event.type = EventType.MOUSE_WHEEL;
                event.bubbles = true;
                node.dispatchEvent(event);
                event.stopPropagation();
            }
        };
        function _searchMaskInParent(node) {
            var Mask = cc.Mask;
            if (Mask) {
                var index = 0;
                for (var curr = node; curr && cc.Node.isNode(curr); curr = curr._parent, ++index) {
                    if (curr.getComponent(Mask)) {
                        return {
                            index: index,
                            node: curr
                        };
                    }
                }
            }
            return null;
        }
        function _checkListeners(node, events) {
            if (!(node._objFlags & Destroying)) {
                var i = 0;
                if (node._bubblingListeners) {
                    for (; i < events.length; ++i) {
                        if (node._bubblingListeners.hasEventListener(events[i])) {
                            return true;
                        }
                    }
                }
                if (node._capturingListeners) {
                    for (; i < events.length; ++i) {
                        if (node._capturingListeners.hasEventListener(events[i])) {
                            return true;
                        }
                    }
                }
                return false;
            }
            return true;
        }
        function _doDispatchEvent(owner, event) {
            if (event instanceof cc.Event.EventTouch) {
                if (!owner.isMultiTouchEnabled) {
                    if (event.getID() !== 0) {
                        return;
                    }
                }
            }
            var target, i;
            event.target = owner;
            _cachedArray.length = 0;
            owner._getCapturingTargets(event.type, _cachedArray);
            event.eventPhase = 1;
            for (i = _cachedArray.length - 1; i >= 0; --i) {
                target = _cachedArray[i];
                if (target._capturingListeners) {
                    event.currentTarget = target;
                    target._capturingListeners.emit(event.type, event, _cachedArray);
                    if (event._propagationStopped) {
                        _cachedArray.length = 0;
                        return;
                    }
                }
            }
            _cachedArray.length = 0;
            event.eventPhase = 2;
            event.currentTarget = owner;
            if (owner._capturingListeners) {
                owner._capturingListeners.emit(event.type, event);
            }
            if (!event._propagationImmediateStopped && owner._bubblingListeners) {
                owner._bubblingListeners.emit(event.type, event);
            }
            if (!event._propagationStopped && event.bubbles) {
                owner._getBubblingTargets(event.type, _cachedArray);
                event.eventPhase = 3;
                for (i = 0; i < _cachedArray.length; ++i) {
                    target = _cachedArray[i];
                    if (target._bubblingListeners) {
                        event.currentTarget = target;
                        target._bubblingListeners.emit(event.type, event);
                        if (event._propagationStopped) {
                            _cachedArray.length = 0;
                            return;
                        }
                    }
                }
            }
            _cachedArray.length = 0;
        }
        function _getActualGroupIndex(node) {
            var groupIndex = node.groupIndex;
            if (groupIndex === 0 && node.parent) {
                groupIndex = _getActualGroupIndex(node.parent);
            }
            return groupIndex;
        }
        function _updateCullingMask(node) {
            var index = _getActualGroupIndex(node);
            node._cullingMask = 1 << index;
            if (CC_JSB && CC_NATIVERENDERER) {
                node._proxy && node._proxy.updateCullingMask();
            }
            ;
            for (var i = 0; i < node._children.length; i++) {
                _updateCullingMask(node._children[i]);
            }
        }
        var NodeDefines = {
            name: 'cc.Node',
            extends: BaseNode,
            properties: {
                _opacity: 255,
                _color: cc.Color.WHITE,
                _contentSize: cc.Size,
                _anchorPoint: cc.v2(0.5, 0.5),
                _position: undefined,
                _scale: undefined,
                _trs: null,
                _eulerAngles: cc.Vec3,
                _skewX: 0,
                _skewY: 0,
                _zIndex: {
                    default: undefined,
                    type: cc.Integer
                },
                _localZOrder: {
                    default: 0,
                    serializable: false
                },
                _is3DNode: false,
                _groupIndex: {
                    default: 0,
                    formerlySerializedAs: 'groupIndex'
                },
                groupIndex: {
                    get: function get() {
                        return this._groupIndex;
                    },
                    set: function set(value) {
                        this._groupIndex = value;
                        _updateCullingMask(this);
                        this.emit(EventType.GROUP_CHANGED, this);
                    }
                },
                group: {
                    get: function get() {
                        return cc.game.groupList[this.groupIndex] || '';
                    },
                    set: function set(value) {
                        this.groupIndex = cc.game.groupList.indexOf(value);
                    }
                },
                x: {
                    get: function get() {
                        return this._trs[0];
                    },
                    set: function set(value) {
                        var trs = this._trs;
                        if (value !== trs[0]) {
                            if (!CC_EDITOR || isFinite(value)) {
                                var oldValue = void 0;
                                if (CC_EDITOR) {
                                    oldValue = trs[0];
                                }
                                trs[0] = value;
                                this.setLocalDirty(LocalDirtyFlag.POSITION);
                                if (this._eventMask & POSITION_ON) {
                                    if (CC_EDITOR) {
                                        this.emit(EventType.POSITION_CHANGED, new cc.Vec3(oldValue, trs[1], trs[2]));
                                    } else {
                                        this.emit(EventType.POSITION_CHANGED);
                                    }
                                }
                            } else {
                                cc.error(ERR_INVALID_NUMBER, 'new x');
                            }
                        }
                    }
                },
                y: {
                    get: function get() {
                        return this._trs[1];
                    },
                    set: function set(value) {
                        var trs = this._trs;
                        if (value !== trs[1]) {
                            if (!CC_EDITOR || isFinite(value)) {
                                var oldValue = void 0;
                                if (CC_EDITOR) {
                                    oldValue = trs[1];
                                }
                                trs[1] = value;
                                this.setLocalDirty(LocalDirtyFlag.POSITION);
                                if (this._eventMask & POSITION_ON) {
                                    if (CC_EDITOR) {
                                        this.emit(EventType.POSITION_CHANGED, new cc.Vec3(trs[0], oldValue, trs[2]));
                                    } else {
                                        this.emit(EventType.POSITION_CHANGED);
                                    }
                                }
                            } else {
                                cc.error(ERR_INVALID_NUMBER, 'new y');
                            }
                        }
                    }
                },
                rotation: {
                    get: function get() {
                        if (CC_DEBUG) {
                            cc.warn('`cc.Node.rotation` is deprecated since v2.1.0, please use `-angle` instead. (`this.node.rotation` -> `-this.node.angle`)');
                        }
                        return -this.angle;
                    },
                    set: function set(value) {
                        if (CC_DEBUG) {
                            cc.warn('`cc.Node.rotation` is deprecated since v2.1.0, please set `-angle` instead. (`this.node.rotation = x` -> `this.node.angle = -x`)');
                        }
                        this.angle = -value;
                    }
                },
                angle: {
                    get: function get() {
                        return this._eulerAngles.z;
                    },
                    set: function set(value) {
                        _vmath.vec3.set(this._eulerAngles, 0, 0, value);
                        _vmath.trs.fromAngleZ(this._trs, value);
                        this.setLocalDirty(LocalDirtyFlag.ROTATION);
                        if (this._eventMask & ROTATION_ON) {
                            this.emit(EventType.ROTATION_CHANGED);
                        }
                    }
                },
                rotationX: {
                    get: function get() {
                        if (CC_DEBUG) {
                            cc.warn('`cc.Node.rotationX` is deprecated since v2.1.0, please use `eulerAngles.x` instead. (`this.node.rotationX` -> `this.node.eulerAngles.x`)');
                        }
                        return this._eulerAngles.x;
                    },
                    set: function set(value) {
                        if (CC_DEBUG) {
                            cc.warn('`cc.Node.rotationX` is deprecated since v2.1.0, please set `eulerAngles` instead. (`this.node.rotationX = x` -> `this.node.is3DNode = true; this.node.eulerAngles = cc.v3(x, 0, 0)`');
                        }
                        if (this._eulerAngles.x !== value) {
                            this._eulerAngles.x = value;
                            if (this._eulerAngles.x === this._eulerAngles.y) {
                                _vmath.trs.fromAngleZ(this._trs, -value);
                            } else {
                                _vmath.trs.fromEulerNumber(this._trs, value, this._eulerAngles.y, 0);
                            }
                            this.setLocalDirty(LocalDirtyFlag.ROTATION);
                            if (this._eventMask & ROTATION_ON) {
                                this.emit(EventType.ROTATION_CHANGED);
                            }
                        }
                    }
                },
                rotationY: {
                    get: function get() {
                        if (CC_DEBUG) {
                            cc.warn('`cc.Node.rotationY` is deprecated since v2.1.0, please use `eulerAngles.y` instead. (`this.node.rotationY` -> `this.node.eulerAngles.y`)');
                        }
                        return this._eulerAngles.y;
                    },
                    set: function set(value) {
                        if (CC_DEBUG) {
                            cc.warn('`cc.Node.rotationY` is deprecated since v2.1.0, please set `eulerAngles` instead. (`this.node.rotationY = y` -> `this.node.is3DNode = true; this.node.eulerAngles = cc.v3(0, y, 0)`');
                        }
                        if (this._eulerAngles.y !== value) {
                            this._eulerAngles.y = value;
                            if (this._eulerAngles.x === this._eulerAngles.y) {
                                _vmath.trs.fromAngleZ(this._trs, -value);
                            } else {
                                _vmath.trs.fromEulerNumber(this._trs, this._eulerAngles.x, value, 0);
                            }
                            this.setLocalDirty(LocalDirtyFlag.ROTATION);
                            if (this._eventMask & ROTATION_ON) {
                                this.emit(EventType.ROTATION_CHANGED);
                            }
                        }
                    }
                },
                scale: {
                    get: function get() {
                        return this._trs[7];
                    },
                    set: function set(v) {
                        this.setScale(v);
                    }
                },
                scaleX: {
                    get: function get() {
                        return this._trs[7];
                    },
                    set: function set(value) {
                        if (this._trs[7] !== value) {
                            this._trs[7] = value;
                            this.setLocalDirty(LocalDirtyFlag.SCALE);
                            if (this._eventMask & SCALE_ON) {
                                this.emit(EventType.SCALE_CHANGED);
                            }
                        }
                    }
                },
                scaleY: {
                    get: function get() {
                        return this._trs[8];
                    },
                    set: function set(value) {
                        if (this._trs[8] !== value) {
                            this._trs[8] = value;
                            this.setLocalDirty(LocalDirtyFlag.SCALE);
                            if (this._eventMask & SCALE_ON) {
                                this.emit(EventType.SCALE_CHANGED);
                            }
                        }
                    }
                },
                skewX: {
                    get: function get() {
                        return this._skewX;
                    },
                    set: function set(value) {
                        this._skewX = value;
                        this.setLocalDirty(LocalDirtyFlag.SKEW);
                        if (CC_JSB && CC_NATIVERENDERER) {
                            this._proxy.updateSkew();
                        }
                    }
                },
                skewY: {
                    get: function get() {
                        return this._skewY;
                    },
                    set: function set(value) {
                        this._skewY = value;
                        this.setLocalDirty(LocalDirtyFlag.SKEW);
                        if (CC_JSB && CC_NATIVERENDERER) {
                            this._proxy.updateSkew();
                        }
                    }
                },
                opacity: {
                    get: function get() {
                        return this._opacity;
                    },
                    set: function set(value) {
                        value = cc.misc.clampf(value, 0, 255);
                        if (this._opacity !== value) {
                            this._opacity = value;
                            if (CC_JSB && CC_NATIVERENDERER) {
                                this._proxy.updateOpacity();
                            }
                            ;
                            this._renderFlag |= RenderFlow.FLAG_OPACITY_COLOR;
                        }
                    },
                    range: [
                        0,
                        255
                    ]
                },
                color: {
                    get: function get() {
                        return this._color.clone();
                    },
                    set: function set(value) {
                        if (!this._color.equals(value)) {
                            this._color.set(value);
                            if (CC_DEV && value.a !== 255) {
                                cc.warnID(1626);
                            }
                            this._renderFlag |= RenderFlow.FLAG_COLOR;
                            if (this._eventMask & COLOR_ON) {
                                this.emit(EventType.COLOR_CHANGED, value);
                            }
                        }
                    }
                },
                anchorX: {
                    get: function get() {
                        return this._anchorPoint.x;
                    },
                    set: function set(value) {
                        var anchorPoint = this._anchorPoint;
                        if (anchorPoint.x !== value) {
                            anchorPoint.x = value;
                            if (this._eventMask & ANCHOR_ON) {
                                this.emit(EventType.ANCHOR_CHANGED);
                            }
                        }
                    }
                },
                anchorY: {
                    get: function get() {
                        return this._anchorPoint.y;
                    },
                    set: function set(value) {
                        var anchorPoint = this._anchorPoint;
                        if (anchorPoint.y !== value) {
                            anchorPoint.y = value;
                            if (this._eventMask & ANCHOR_ON) {
                                this.emit(EventType.ANCHOR_CHANGED);
                            }
                        }
                    }
                },
                width: {
                    get: function get() {
                        return this._contentSize.width;
                    },
                    set: function set(value) {
                        if (value !== this._contentSize.width) {
                            if (CC_EDITOR) {
                                var clone = cc.size(this._contentSize.width, this._contentSize.height);
                            }
                            this._contentSize.width = value;
                            if (this._eventMask & SIZE_ON) {
                                if (CC_EDITOR) {
                                    this.emit(EventType.SIZE_CHANGED, clone);
                                } else {
                                    this.emit(EventType.SIZE_CHANGED);
                                }
                            }
                        }
                    }
                },
                height: {
                    get: function get() {
                        return this._contentSize.height;
                    },
                    set: function set(value) {
                        if (value !== this._contentSize.height) {
                            if (CC_EDITOR) {
                                var clone = cc.size(this._contentSize.width, this._contentSize.height);
                            }
                            this._contentSize.height = value;
                            if (this._eventMask & SIZE_ON) {
                                if (CC_EDITOR) {
                                    this.emit(EventType.SIZE_CHANGED, clone);
                                } else {
                                    this.emit(EventType.SIZE_CHANGED);
                                }
                            }
                        }
                    }
                },
                zIndex: {
                    get: function get() {
                        return this._localZOrder >> 16;
                    },
                    set: function set(value) {
                        if (value > macro.MAX_ZINDEX) {
                            cc.warnID(1636);
                            value = macro.MAX_ZINDEX;
                        } else if (value < macro.MIN_ZINDEX) {
                            cc.warnID(1637);
                            value = macro.MIN_ZINDEX;
                        }
                        if (this.zIndex !== value) {
                            this._localZOrder = this._localZOrder & 65535 | value << 16;
                            this.emit(EventType.SIBLING_ORDER_CHANGED);
                            this._onSiblingIndexChanged();
                        }
                    }
                },
                _isMultiTouchEnabled: false,
                isMultiTouchEnabled: {
                    get: function get() {
                        return this._isMultiTouchEnabled;
                    },
                    set: function set(value) {
                        this._isMultiTouchEnabled = value;
                    }
                }
            },
            ctor: function ctor() {
                this._reorderChildDirty = false;
                this._widget = null;
                this._renderComponent = null;
                this._capturingListeners = null;
                this._bubblingListeners = null;
                this._touchListener = null;
                this._mouseListener = null;
                this._initDataFromPool();
                this._eventMask = 0;
                this._cullingMask = 1;
                this._childArrivalOrder = 1;
                if (CC_JSB && CC_NATIVERENDERER) {
                    this._proxy = new renderer.NodeProxy(this._spaceInfo.unitID, this._spaceInfo.index, this._id, this._name);
                    this._proxy.init(this);
                } else {
                    this._renderFlag = RenderFlow.FLAG_TRANSFORM | RenderFlow.FLAG_OPACITY_COLOR;
                }
            },
            statics: {
                EventType: EventType,
                _LocalDirtyFlag: LocalDirtyFlag,
                isNode: function isNode(obj) {
                    return obj instanceof Node && (obj.constructor === Node || !(obj instanceof cc.Scene));
                },
                BuiltinGroupIndex: BuiltinGroupIndex
            },
            _onSiblingIndexChanged: function _onSiblingIndexChanged() {
                if (this._parent) {
                    this._parent._delaySort();
                }
            },
            _onPreDestroy: function _onPreDestroy() {
                var destroyByParent = this._onPreDestroyBase();
                if (ActionManagerExist) {
                    cc.director.getActionManager().removeAllActionsFromTarget(this);
                }
                if (_currentHovered === this) {
                    _currentHovered = null;
                }
                if (this._touchListener || this._mouseListener) {
                    eventManager.removeListeners(this);
                    if (this._touchListener) {
                        this._touchListener.owner = null;
                        this._touchListener.mask = null;
                        this._touchListener = null;
                    }
                    if (this._mouseListener) {
                        this._mouseListener.owner = null;
                        this._mouseListener.mask = null;
                        this._mouseListener = null;
                    }
                }
                if (CC_JSB && CC_NATIVERENDERER) {
                    this._proxy.destroy();
                    this._proxy = null;
                }
                this._backDataIntoPool();
                if (this._reorderChildDirty) {
                    cc.director.__fastOff(cc.Director.EVENT_AFTER_UPDATE, this.sortAllChildren, this);
                }
                if (!destroyByParent) {
                    if (CC_EDITOR) {
                        this._parent = null;
                    }
                }
            },
            _onPostActivated: function _onPostActivated(active) {
                var actionManager = ActionManagerExist ? cc.director.getActionManager() : null;
                if (active) {
                    this._renderFlag |= RenderFlow.FLAG_WORLD_TRANSFORM;
                    actionManager && actionManager.resumeTarget(this);
                    eventManager.resumeTarget(this);
                    if (this._touchListener) {
                        var mask = this._touchListener.mask = _searchMaskInParent(this);
                        if (this._mouseListener) {
                            this._mouseListener.mask = mask;
                        }
                    } else if (this._mouseListener) {
                        this._mouseListener.mask = _searchMaskInParent(this);
                    }
                } else {
                    actionManager && actionManager.pauseTarget(this);
                    eventManager.pauseTarget(this);
                }
            },
            _onHierarchyChanged: function _onHierarchyChanged(oldParent) {
                this._updateOrderOfArrival();
                _updateCullingMask(this);
                if (this._parent) {
                    this._parent._delaySort();
                }
                this._renderFlag |= RenderFlow.FLAG_WORLD_TRANSFORM;
                this._onHierarchyChangedBase(oldParent);
                if (cc._widgetManager) {
                    cc._widgetManager._nodesOrderDirty = true;
                }
                if (CC_JSB && CC_NATIVERENDERER) {
                    this._proxy.updateParent();
                }
            },
            _initDataFromPool: function _initDataFromPool() {
                if (!this._spaceInfo) {
                    if (CC_EDITOR || CC_TEST) {
                        this._spaceInfo = {
                            trs: new Float64Array(10),
                            localMat: new Float64Array(16),
                            worldMat: new Float64Array(16)
                        };
                    } else {
                        this._spaceInfo = nodeMemPool.pop();
                    }
                }
                var spaceInfo = this._spaceInfo;
                this._matrix = _vmath.mat4.create(spaceInfo.localMat);
                _vmath.mat4.identity(this._matrix);
                this._worldMatrix = _vmath.mat4.create(spaceInfo.worldMat);
                _vmath.mat4.identity(this._worldMatrix);
                this._localMatDirty = LocalDirtyFlag.ALL;
                this._worldMatDirty = true;
                var trs = this._trs = this._spaceInfo.trs;
                trs[0] = 0;
                trs[1] = 0;
                trs[2] = 0;
                trs[3] = 0;
                trs[4] = 0;
                trs[5] = 0;
                trs[6] = 1;
                trs[7] = 1;
                trs[8] = 1;
                trs[9] = 1;
            },
            _backDataIntoPool: function _backDataIntoPool() {
                if (!(CC_EDITOR || CC_TEST)) {
                    nodeMemPool.push(this._spaceInfo);
                    this._matrix = null;
                    this._worldMatrix = null;
                    this._trs = null;
                    this._spaceInfo = null;
                }
            },
            _toEuler: function _toEuler() {
                if (this.is3DNode) {
                    _vmath.trs.toEuler(this._eulerAngles, this._trs);
                } else {
                    var z = Math.asin(this._trs[5]) / ONE_DEGREE * 2;
                    _vmath.vec3.set(this._eulerAngles, 0, 0, z);
                }
            },
            _fromEuler: function _fromEuler() {
                if (this.is3DNode) {
                    _vmath.trs.fromEuler(this._trs, this._eulerAngles);
                } else {
                    _vmath.trs.fromAngleZ(this._trs, this._eulerAngles.z);
                }
            },
            _upgrade_1x_to_2x: function _upgrade_1x_to_2x() {
                var trs = this._trs;
                if (trs) {
                    var desTrs = trs;
                    trs = this._trs = this._spaceInfo.trs;
                    if (desTrs.length === 11) {
                        trs.set(desTrs.subarray(1));
                    } else {
                        trs.set(desTrs);
                    }
                } else {
                    trs = this._trs = this._spaceInfo.trs;
                }
                if (this._zIndex !== undefined) {
                    this._localZOrder = this._zIndex << 16;
                    this._zIndex = undefined;
                }
                this._fromEuler();
                if (this._localZOrder !== 0) {
                    this._zIndex = (this._localZOrder & 4294901760) >> 16;
                }
                if (this._color.a < 255 && this._opacity === 255) {
                    this._opacity = this._color.a;
                    this._color.a = 255;
                }
                if (CC_JSB && CC_NATIVERENDERER) {
                    this._renderFlag |= RenderFlow.FLAG_TRANSFORM | RenderFlow.FLAG_OPACITY_COLOR;
                }
            },
            _onBatchCreated: function _onBatchCreated() {
                var prefabInfo = this._prefab;
                if (prefabInfo && prefabInfo.sync && prefabInfo.root === this) {
                    if (CC_DEV) {
                        cc.assert(!prefabInfo._synced, 'prefab should not synced');
                    }
                    PrefabHelper.syncWithPrefab(this);
                }
                this._upgrade_1x_to_2x();
                this._updateOrderOfArrival();
                this._cullingMask = 1 << _getActualGroupIndex(this);
                if (CC_JSB && CC_NATIVERENDERER) {
                    this._proxy && this._proxy.updateCullingMask();
                }
                ;
                if (!this._activeInHierarchy) {
                    if (ActionManagerExist) {
                        cc.director.getActionManager().pauseTarget(this);
                    }
                    eventManager.pauseTarget(this);
                }
                var children = this._children;
                for (var i = 0, len = children.length; i < len; i++) {
                    children[i]._onBatchCreated();
                }
                if (children.length > 0) {
                    this._renderFlag |= RenderFlow.FLAG_CHILDREN;
                }
                if (CC_JSB && CC_NATIVERENDERER) {
                    this._proxy.initNative();
                }
            },
            _onBatchRestored: function _onBatchRestored() {
                this._upgrade_1x_to_2x();
                this._cullingMask = 1 << _getActualGroupIndex(this);
                if (CC_JSB && CC_NATIVERENDERER) {
                    this._proxy && this._proxy.updateCullingMask();
                }
                ;
                if (!this._activeInHierarchy) {
                    var manager = cc.director.getActionManager();
                    manager && manager.pauseTarget(this);
                    eventManager.pauseTarget(this);
                }
                var children = this._children;
                for (var i = 0, len = children.length; i < len; i++) {
                    children[i]._onBatchRestored();
                }
                if (children.length > 0) {
                    this._renderFlag |= RenderFlow.FLAG_CHILDREN;
                }
                if (CC_JSB && CC_NATIVERENDERER) {
                    this._proxy.initNative();
                }
            },
            _checknSetupSysEvent: function _checknSetupSysEvent(type) {
                var newAdded = false;
                var forDispatch = false;
                if (_touchEvents.indexOf(type) !== -1) {
                    if (!this._touchListener) {
                        this._touchListener = cc.EventListener.create({
                            event: cc.EventListener.TOUCH_ONE_BY_ONE,
                            swallowTouches: true,
                            owner: this,
                            mask: _searchMaskInParent(this),
                            onTouchBegan: _touchStartHandler,
                            onTouchMoved: _touchMoveHandler,
                            onTouchEnded: _touchEndHandler,
                            onTouchCancelled: _touchCancelHandler
                        });
                        eventManager.addListener(this._touchListener, this);
                        newAdded = true;
                    }
                    forDispatch = true;
                } else if (_mouseEvents.indexOf(type) !== -1) {
                    if (!this._mouseListener) {
                        this._mouseListener = cc.EventListener.create({
                            event: cc.EventListener.MOUSE,
                            _previousIn: false,
                            owner: this,
                            mask: _searchMaskInParent(this),
                            onMouseDown: _mouseDownHandler,
                            onMouseMove: _mouseMoveHandler,
                            onMouseUp: _mouseUpHandler,
                            onMouseScroll: _mouseWheelHandler
                        });
                        eventManager.addListener(this._mouseListener, this);
                        newAdded = true;
                    }
                    forDispatch = true;
                }
                if (newAdded && !this._activeInHierarchy) {
                    cc.director.getScheduler().schedule(function () {
                        if (!this._activeInHierarchy) {
                            eventManager.pauseTarget(this);
                        }
                    }, this, 0, 0, 0, false);
                }
                return forDispatch;
            },
            on: function on(type, callback, target, useCapture) {
                var forDispatch = this._checknSetupSysEvent(type);
                if (forDispatch) {
                    return this._onDispatch(type, callback, target, useCapture);
                } else {
                    switch (type) {
                    case EventType.POSITION_CHANGED:
                        this._eventMask |= POSITION_ON;
                        break;
                    case EventType.SCALE_CHANGED:
                        this._eventMask |= SCALE_ON;
                        break;
                    case EventType.ROTATION_CHANGED:
                        this._eventMask |= ROTATION_ON;
                        break;
                    case EventType.SIZE_CHANGED:
                        this._eventMask |= SIZE_ON;
                        break;
                    case EventType.ANCHOR_CHANGED:
                        this._eventMask |= ANCHOR_ON;
                        break;
                    case EventType.COLOR_CHANGED:
                        this._eventMask |= COLOR_ON;
                        break;
                    }
                    if (!this._bubblingListeners) {
                        this._bubblingListeners = new EventTarget();
                    }
                    return this._bubblingListeners.on(type, callback, target);
                }
            },
            once: function once(type, callback, target, useCapture) {
                var forDispatch = this._checknSetupSysEvent(type);
                var listeners = null;
                if (forDispatch && useCapture) {
                    listeners = this._capturingListeners = this._capturingListeners || new EventTarget();
                } else {
                    listeners = this._bubblingListeners = this._bubblingListeners || new EventTarget();
                }
                listeners.once(type, callback, target);
            },
            _onDispatch: function _onDispatch(type, callback, target, useCapture) {
                if (typeof target === 'boolean') {
                    useCapture = target;
                    target = undefined;
                } else
                    useCapture = !!useCapture;
                if (!callback) {
                    cc.errorID(6800);
                    return;
                }
                var listeners = null;
                if (useCapture) {
                    listeners = this._capturingListeners = this._capturingListeners || new EventTarget();
                } else {
                    listeners = this._bubblingListeners = this._bubblingListeners || new EventTarget();
                }
                if (!listeners.hasEventListener(type, callback, target)) {
                    listeners.on(type, callback, target);
                    if (target && target.__eventTargets) {
                        target.__eventTargets.push(this);
                    }
                }
                return callback;
            },
            off: function off(type, callback, target, useCapture) {
                var touchEvent = _touchEvents.indexOf(type) !== -1;
                var mouseEvent = !touchEvent && _mouseEvents.indexOf(type) !== -1;
                if (touchEvent || mouseEvent) {
                    this._offDispatch(type, callback, target, useCapture);
                    if (touchEvent) {
                        if (this._touchListener && !_checkListeners(this, _touchEvents)) {
                            eventManager.removeListener(this._touchListener);
                            this._touchListener = null;
                        }
                    } else if (mouseEvent) {
                        if (this._mouseListener && !_checkListeners(this, _mouseEvents)) {
                            eventManager.removeListener(this._mouseListener);
                            this._mouseListener = null;
                        }
                    }
                } else if (this._bubblingListeners) {
                    this._bubblingListeners.off(type, callback, target);
                    var hasListeners = this._bubblingListeners.hasEventListener(type);
                    if (!hasListeners) {
                        switch (type) {
                        case EventType.POSITION_CHANGED:
                            this._eventMask &= ~POSITION_ON;
                            break;
                        case EventType.SCALE_CHANGED:
                            this._eventMask &= ~SCALE_ON;
                            break;
                        case EventType.ROTATION_CHANGED:
                            this._eventMask &= ~ROTATION_ON;
                            break;
                        case EventType.SIZE_CHANGED:
                            this._eventMask &= ~SIZE_ON;
                            break;
                        case EventType.ANCHOR_CHANGED:
                            this._eventMask &= ~ANCHOR_ON;
                            break;
                        case EventType.COLOR_CHANGED:
                            this._eventMask &= ~COLOR_ON;
                            break;
                        }
                    }
                }
            },
            _offDispatch: function _offDispatch(type, callback, target, useCapture) {
                if (typeof target === 'boolean') {
                    useCapture = target;
                    target = undefined;
                } else
                    useCapture = !!useCapture;
                if (!callback) {
                    this._capturingListeners && this._capturingListeners.removeAll(type);
                    this._bubblingListeners && this._bubblingListeners.removeAll(type);
                } else {
                    var listeners = useCapture ? this._capturingListeners : this._bubblingListeners;
                    if (listeners) {
                        listeners.off(type, callback, target);
                        if (target && target.__eventTargets) {
                            js.array.fastRemove(target.__eventTargets, this);
                        }
                    }
                }
            },
            targetOff: function targetOff(target) {
                var listeners = this._bubblingListeners;
                if (listeners) {
                    listeners.targetOff(target);
                    if (this._eventMask & POSITION_ON && !listeners.hasEventListener(EventType.POSITION_CHANGED)) {
                        this._eventMask &= ~POSITION_ON;
                    }
                    if (this._eventMask & SCALE_ON && !listeners.hasEventListener(EventType.SCALE_CHANGED)) {
                        this._eventMask &= ~SCALE_ON;
                    }
                    if (this._eventMask & ROTATION_ON && !listeners.hasEventListener(EventType.ROTATION_CHANGED)) {
                        this._eventMask &= ~ROTATION_ON;
                    }
                    if (this._eventMask & SIZE_ON && !listeners.hasEventListener(EventType.SIZE_CHANGED)) {
                        this._eventMask &= ~SIZE_ON;
                    }
                    if (this._eventMask & ANCHOR_ON && !listeners.hasEventListener(EventType.ANCHOR_CHANGED)) {
                        this._eventMask &= ~ANCHOR_ON;
                    }
                    if (this._eventMask & COLOR_ON && !listeners.hasEventListener(EventType.COLOR_CHANGED)) {
                        this._eventMask &= ~COLOR_ON;
                    }
                }
                if (this._capturingListeners) {
                    this._capturingListeners.targetOff(target);
                }
                if (target && target.__eventTargets) {
                    js.array.fastRemove(target.__eventTargets, this);
                }
                if (this._touchListener && !_checkListeners(this, _touchEvents)) {
                    eventManager.removeListener(this._touchListener);
                    this._touchListener = null;
                }
                if (this._mouseListener && !_checkListeners(this, _mouseEvents)) {
                    eventManager.removeListener(this._mouseListener);
                    this._mouseListener = null;
                }
            },
            hasEventListener: function hasEventListener(type) {
                var has = false;
                if (this._bubblingListeners) {
                    has = this._bubblingListeners.hasEventListener(type);
                }
                if (!has && this._capturingListeners) {
                    has = this._capturingListeners.hasEventListener(type);
                }
                return has;
            },
            emit: function emit(type, arg1, arg2, arg3, arg4, arg5) {
                if (this._bubblingListeners) {
                    this._bubblingListeners.emit(type, arg1, arg2, arg3, arg4, arg5);
                }
            },
            dispatchEvent: function dispatchEvent(event) {
                _doDispatchEvent(this, event);
                _cachedArray.length = 0;
            },
            pauseSystemEvents: function pauseSystemEvents(recursive) {
                eventManager.pauseTarget(this, recursive);
            },
            resumeSystemEvents: function resumeSystemEvents(recursive) {
                eventManager.resumeTarget(this, recursive);
            },
            _hitTest: function _hitTest(point, listener) {
                var w = this._contentSize.width, h = this._contentSize.height, cameraPt = _htVec3a, testPt = _htVec3b;
                var camera = cc.Camera.findCamera(this);
                if (camera) {
                    camera.getScreenToWorldPoint(point, cameraPt);
                } else {
                    cameraPt.set(point);
                }
                this._updateWorldMatrix();
                if (!_vmath.mat4.invert(_mat4_temp, this._worldMatrix)) {
                    return false;
                }
                _vmath.vec2.transformMat4(testPt, cameraPt, _mat4_temp);
                testPt.x += this._anchorPoint.x * w;
                testPt.y += this._anchorPoint.y * h;
                if (testPt.x >= 0 && testPt.y >= 0 && testPt.x <= w && testPt.y <= h) {
                    if (listener && listener.mask) {
                        var mask = listener.mask;
                        var parent = this;
                        for (var i = 0; parent && i < mask.index; ++i, parent = parent.parent) {
                        }
                        if (parent === mask.node) {
                            var comp = parent.getComponent(cc.Mask);
                            return comp && comp.enabledInHierarchy ? comp._hitTest(cameraPt) : true;
                        } else {
                            listener.mask = null;
                            return true;
                        }
                    } else {
                        return true;
                    }
                } else {
                    return false;
                }
            },
            _getCapturingTargets: function _getCapturingTargets(type, array) {
                var parent = this.parent;
                while (parent) {
                    if (parent._capturingListeners && parent._capturingListeners.hasEventListener(type)) {
                        array.push(parent);
                    }
                    parent = parent.parent;
                }
            },
            _getBubblingTargets: function _getBubblingTargets(type, array) {
                var parent = this.parent;
                while (parent) {
                    if (parent._bubblingListeners && parent._bubblingListeners.hasEventListener(type)) {
                        array.push(parent);
                    }
                    parent = parent.parent;
                }
            },
            runAction: ActionManagerExist ? function (action) {
                if (!this.active)
                    return;
                cc.assertID(action, 1618);
                cc.director.getActionManager().addAction(action, this, false);
                return action;
            } : emptyFunc,
            pauseAllActions: ActionManagerExist ? function () {
                cc.director.getActionManager().pauseTarget(this);
            } : emptyFunc,
            resumeAllActions: ActionManagerExist ? function () {
                cc.director.getActionManager().resumeTarget(this);
            } : emptyFunc,
            stopAllActions: ActionManagerExist ? function () {
                cc.director.getActionManager().removeAllActionsFromTarget(this);
            } : emptyFunc,
            stopAction: ActionManagerExist ? function (action) {
                cc.director.getActionManager().removeAction(action);
            } : emptyFunc,
            stopActionByTag: ActionManagerExist ? function (tag) {
                if (tag === cc.Action.TAG_INVALID) {
                    cc.logID(1612);
                    return;
                }
                cc.director.getActionManager().removeActionByTag(tag, this);
            } : emptyFunc,
            getActionByTag: ActionManagerExist ? function (tag) {
                if (tag === cc.Action.TAG_INVALID) {
                    cc.logID(1613);
                    return null;
                }
                return cc.director.getActionManager().getActionByTag(tag, this);
            } : function () {
                return null;
            },
            getNumberOfRunningActions: ActionManagerExist ? function () {
                return cc.director.getActionManager().getNumberOfRunningActionsInTarget(this);
            } : function () {
                return 0;
            },
            getPosition: function getPosition(out) {
                out = out || cc.v3();
                return _vmath.trs.toPosition(out, this._trs);
            },
            setPosition: function setPosition(newPosOrX, y) {
                var x;
                if (y === undefined) {
                    x = newPosOrX.x;
                    y = newPosOrX.y;
                } else {
                    x = newPosOrX;
                }
                var trs = this._trs;
                if (trs[0] === x && trs[1] === y) {
                    return;
                }
                if (CC_EDITOR) {
                    var oldPosition = new cc.Vec3(trs[0], trs[1], trs[2]);
                }
                if (!CC_EDITOR || isFinite(x)) {
                    trs[0] = x;
                } else {
                    return cc.error(ERR_INVALID_NUMBER, 'x of new position');
                }
                if (!CC_EDITOR || isFinite(y)) {
                    trs[1] = y;
                } else {
                    return cc.error(ERR_INVALID_NUMBER, 'y of new position');
                }
                this.setLocalDirty(LocalDirtyFlag.POSITION);
                if (this._eventMask & POSITION_ON) {
                    if (CC_EDITOR) {
                        this.emit(EventType.POSITION_CHANGED, oldPosition);
                    } else {
                        this.emit(EventType.POSITION_CHANGED);
                    }
                }
            },
            getScale: function getScale(out) {
                if (out !== undefined) {
                    return _vmath.trs.toScale(out, this._trs);
                } else {
                    cc.warnID(1400, 'cc.Node.getScale', 'cc.Node.scale or cc.Node.getScale(cc.Vec3)');
                    return this._trs[7];
                }
            },
            setScale: function setScale(x, y) {
                if (x && typeof x !== 'number') {
                    y = x.y;
                    x = x.x;
                } else if (y === undefined) {
                    y = x;
                }
                var trs = this._trs;
                if (trs[7] !== x || trs[8] !== y) {
                    trs[7] = x;
                    trs[8] = y;
                    this.setLocalDirty(LocalDirtyFlag.SCALE);
                    if (this._eventMask & SCALE_ON) {
                        this.emit(EventType.SCALE_CHANGED);
                    }
                }
            },
            getRotation: function getRotation(out) {
                if (out instanceof cc.Quat) {
                    return _vmath.trs.toRotation(out, this._trs);
                } else {
                    if (CC_DEBUG) {
                        cc.warn('`cc.Node.getRotation()` is deprecated since v2.1.0, please use `-cc.Node.angle` instead. (`this.node.getRotation()` -> `-this.node.angle`)');
                    }
                    return -this.angle;
                }
            },
            setRotation: function setRotation(quat, y, z, w) {
                if (typeof quat === 'number' && y === undefined) {
                    if (CC_DEBUG) {
                        cc.warn('`cc.Node.setRotation(degree)` is deprecated since v2.1.0, please set `-cc.Node.angle` instead. (`this.node.setRotation(x)` -> `this.node.angle = -x`)');
                    }
                    this.angle = -quat;
                } else {
                    var x = quat;
                    if (y === undefined) {
                        x = quat.x;
                        y = quat.y;
                        z = quat.z;
                        w = quat.w;
                    }
                    var _trs = this._trs;
                    if (_trs[3] !== x || _trs[4] !== y || _trs[5] !== z || _trs[6] !== w) {
                        _trs[3] = x;
                        _trs[4] = y;
                        _trs[5] = z;
                        _trs[6] = w;
                        this.setLocalDirty(LocalDirtyFlag.ROTATION);
                        if (this._eventMask & ROTATION_ON) {
                            this.emit(EventType.ROTATION_CHANGED);
                        }
                        if (CC_EDITOR) {
                            this._toEuler();
                        }
                    }
                }
            },
            getContentSize: function getContentSize() {
                return cc.size(this._contentSize.width, this._contentSize.height);
            },
            setContentSize: function setContentSize(size, height) {
                var locContentSize = this._contentSize;
                var clone;
                if (height === undefined) {
                    if (size.width === locContentSize.width && size.height === locContentSize.height)
                        return;
                    if (CC_EDITOR) {
                        clone = cc.size(locContentSize.width, locContentSize.height);
                    }
                    locContentSize.width = size.width;
                    locContentSize.height = size.height;
                } else {
                    if (size === locContentSize.width && height === locContentSize.height)
                        return;
                    if (CC_EDITOR) {
                        clone = cc.size(locContentSize.width, locContentSize.height);
                    }
                    locContentSize.width = size;
                    locContentSize.height = height;
                }
                if (this._eventMask & SIZE_ON) {
                    if (CC_EDITOR) {
                        this.emit(EventType.SIZE_CHANGED, clone);
                    } else {
                        this.emit(EventType.SIZE_CHANGED);
                    }
                }
            },
            getAnchorPoint: function getAnchorPoint() {
                return cc.v2(this._anchorPoint);
            },
            setAnchorPoint: function setAnchorPoint(point, y) {
                var locAnchorPoint = this._anchorPoint;
                if (y === undefined) {
                    if (point.x === locAnchorPoint.x && point.y === locAnchorPoint.y)
                        return;
                    locAnchorPoint.x = point.x;
                    locAnchorPoint.y = point.y;
                } else {
                    if (point === locAnchorPoint.x && y === locAnchorPoint.y)
                        return;
                    locAnchorPoint.x = point;
                    locAnchorPoint.y = y;
                }
                this.setLocalDirty(LocalDirtyFlag.POSITION);
                if (this._eventMask & ANCHOR_ON) {
                    this.emit(EventType.ANCHOR_CHANGED);
                }
            },
            _invTransformPoint: function _invTransformPoint(out, pos) {
                if (this._parent) {
                    this._parent._invTransformPoint(out, pos);
                } else {
                    _vmath.vec3.copy(out, pos);
                }
                var ltrs = this._trs;
                _vmath.trs.toPosition(_tpVec3a, ltrs);
                _vmath.vec3.sub(out, out, _tpVec3a);
                _vmath.trs.toRotation(_tpQuata, ltrs);
                _vmath.quat.conjugate(_tpQuatb, _tpQuata);
                _vmath.vec3.transformQuat(out, out, _tpQuatb);
                _vmath.trs.toScale(_tpVec3a, ltrs);
                _vmath.vec3.inverseSafe(_tpVec3b, _tpVec3a);
                _vmath.vec3.mul(out, out, _tpVec3b);
                return out;
            },
            getWorldPosition: function getWorldPosition(out) {
                _vmath.trs.toPosition(out, this._trs);
                var curr = this._parent;
                var ltrs = void 0;
                while (curr) {
                    ltrs = curr._trs;
                    _vmath.trs.toScale(_gwpVec3, ltrs);
                    _vmath.vec3.mul(out, out, _gwpVec3);
                    _vmath.trs.toRotation(_gwpQuat, ltrs);
                    _vmath.vec3.transformQuat(out, out, _gwpQuat);
                    _vmath.trs.toPosition(_gwpVec3, ltrs);
                    _vmath.vec3.add(out, out, _gwpVec3);
                    curr = curr._parent;
                }
                return out;
            },
            setWorldPosition: function setWorldPosition(pos) {
                var ltrs = this._trs;
                if (CC_EDITOR) {
                    var oldPosition = new cc.Vec3(ltrs[0], ltrs[1], ltrs[2]);
                }
                if (this._parent) {
                    this._parent._invTransformPoint(_swpVec3, pos);
                } else {
                    _vmath.vec3.copy(_swpVec3, pos);
                }
                _vmath.trs.fromPosition(ltrs, _swpVec3);
                this.setLocalDirty(LocalDirtyFlag.POSITION);
                if (this._eventMask & POSITION_ON) {
                    if (CC_EDITOR) {
                        this.emit(EventType.POSITION_CHANGED, oldPosition);
                    } else {
                        this.emit(EventType.POSITION_CHANGED);
                    }
                }
            },
            getWorldRotation: function getWorldRotation(out) {
                _vmath.trs.toRotation(_gwrQuat, this._trs);
                _vmath.quat.copy(out, _gwrQuat);
                var curr = this._parent;
                while (curr) {
                    _vmath.trs.toRotation(_gwrQuat, curr._trs);
                    _vmath.quat.mul(out, _gwrQuat, out);
                    curr = curr._parent;
                }
                return out;
            },
            setWorldRotation: function setWorldRotation(val) {
                if (this._parent) {
                    this._parent.getWorldRotation(_swrQuat);
                    _vmath.quat.conjugate(_swrQuat, _swrQuat);
                    _vmath.quat.mul(_swrQuat, _swrQuat, val);
                } else {
                    _vmath.quat.copy(_swrQuat, val);
                }
                _vmath.trs.fromRotation(this._trs, _swrQuat);
                if (CC_EDITOR) {
                    this._toEuler();
                }
                this.setLocalDirty(LocalDirtyFlag.ROTATION);
            },
            getWorldScale: function getWorldScale(out) {
                _vmath.trs.toScale(_gwsVec3, this._trs);
                _vmath.vec3.copy(out, _gwsVec3);
                var curr = this._parent;
                while (curr) {
                    _vmath.trs.toScale(_gwsVec3, curr._trs);
                    _vmath.vec3.mul(out, out, _gwsVec3);
                    curr = curr._parent;
                }
                return out;
            },
            setWorldScale: function setWorldScale(scale) {
                if (this._parent) {
                    this._parent.getWorldScale(_swsVec3);
                    _vmath.vec3.div(_swsVec3, scale, _swsVec3);
                } else {
                    _vmath.vec3.copy(_swsVec3, scale);
                }
                _vmath.trs.fromScale(this._trs, _swsVec3);
                this.setLocalDirty(LocalDirtyFlag.SCALE);
            },
            getWorldRT: function getWorldRT(out) {
                var opos = _gwrtVec3a;
                var orot = _gwrtQuata;
                var ltrs = this._trs;
                _vmath.trs.toPosition(opos, ltrs);
                _vmath.trs.toRotation(orot, ltrs);
                var curr = this._parent;
                while (curr) {
                    ltrs = curr._trs;
                    _vmath.trs.toScale(_gwrtVec3b, ltrs);
                    _vmath.vec3.mul(opos, opos, _gwrtVec3b);
                    _vmath.trs.toRotation(_gwrtQuatb, ltrs);
                    _vmath.vec3.transformQuat(opos, opos, _gwrtQuatb);
                    _vmath.trs.toPosition(_gwrtVec3b, ltrs);
                    _vmath.vec3.add(opos, opos, _gwrtVec3b);
                    _vmath.quat.mul(orot, _gwrtQuatb, orot);
                    curr = curr._parent;
                }
                _vmath.mat4.fromRT(out, orot, opos);
                return out;
            },
            lookAt: function lookAt(pos, up) {
                this.getWorldPosition(_laVec3);
                _vmath.vec3.sub(_laVec3, _laVec3, pos);
                _vmath.vec3.normalize(_laVec3, _laVec3);
                _vmath.quat.fromViewUp(_laQuat, _laVec3, up);
                this.setWorldRotation(_laQuat);
            },
            _updateLocalMatrix: function _updateLocalMatrix() {
                var dirtyFlag = this._localMatDirty;
                if (!dirtyFlag)
                    return;
                var t = this._matrix;
                var tm = t.m;
                var trs = this._trs;
                if (dirtyFlag & (LocalDirtyFlag.RS | LocalDirtyFlag.SKEW)) {
                    var rotation = -this._eulerAngles.z;
                    var hasSkew = this._skewX || this._skewY;
                    var sx = trs[7], sy = trs[8];
                    if (rotation || hasSkew) {
                        var a = 1, b = 0, c = 0, d = 1;
                        if (rotation) {
                            var rotationRadians = rotation * ONE_DEGREE;
                            c = Math.sin(rotationRadians);
                            d = Math.cos(rotationRadians);
                            a = d;
                            b = -c;
                        }
                        tm[0] = a *= sx;
                        tm[1] = b *= sx;
                        tm[4] = c *= sy;
                        tm[5] = d *= sy;
                        if (hasSkew) {
                            var _a = tm[0], _b = tm[1], _c = tm[4], _d = tm[5];
                            var skx = Math.tan(this._skewX * ONE_DEGREE);
                            var sky = Math.tan(this._skewY * ONE_DEGREE);
                            if (skx === Infinity)
                                skx = 99999999;
                            if (sky === Infinity)
                                sky = 99999999;
                            tm[0] = _a + _c * sky;
                            tm[1] = _b + _d * sky;
                            tm[4] = _c + _a * skx;
                            tm[5] = _d + _b * skx;
                        }
                    } else {
                        tm[0] = sx;
                        tm[1] = 0;
                        tm[4] = 0;
                        tm[5] = sy;
                    }
                }
                tm[12] = trs[0];
                tm[13] = trs[1];
                this._localMatDirty = 0;
                this._worldMatDirty = true;
            },
            _calculWorldMatrix: function _calculWorldMatrix() {
                if (this._localMatDirty) {
                    this._updateLocalMatrix();
                }
                var parent = this._parent;
                if (parent) {
                    this._mulMat(this._worldMatrix, parent._worldMatrix, this._matrix);
                } else {
                    _vmath.mat4.copy(this._worldMatrix, this._matrix);
                }
                this._worldMatDirty = false;
            },
            _mulMat: function _mulMat(out, a, b) {
                var am = a.m, bm = b.m, outm = out.m;
                var aa = am[0], ab = am[1], ac = am[4], ad = am[5], atx = am[12], aty = am[13];
                var ba = bm[0], bb = bm[1], bc = bm[4], bd = bm[5], btx = bm[12], bty = bm[13];
                if (ab !== 0 || ac !== 0) {
                    outm[0] = ba * aa + bb * ac;
                    outm[1] = ba * ab + bb * ad;
                    outm[4] = bc * aa + bd * ac;
                    outm[5] = bc * ab + bd * ad;
                    outm[12] = aa * btx + ac * bty + atx;
                    outm[13] = ab * btx + ad * bty + aty;
                } else {
                    outm[0] = ba * aa;
                    outm[1] = bb * ad;
                    outm[4] = bc * aa;
                    outm[5] = bd * ad;
                    outm[12] = aa * btx + atx;
                    outm[13] = ad * bty + aty;
                }
            },
            _updateWorldMatrix: function _updateWorldMatrix() {
                if (this._parent) {
                    this._parent._updateWorldMatrix();
                }
                if (this._worldMatDirty) {
                    this._calculWorldMatrix();
                    var children = this._children;
                    for (var i = 0, l = children.length; i < l; i++) {
                        children[i]._worldMatDirty = true;
                    }
                }
            },
            setLocalDirty: function setLocalDirty(flag) {
                this._localMatDirty |= flag;
                this._worldMatDirty = true;
                if (flag === LocalDirtyFlag.POSITION) {
                    this._renderFlag |= RenderFlow.FLAG_WORLD_TRANSFORM;
                } else {
                    this._renderFlag |= RenderFlow.FLAG_TRANSFORM;
                }
            },
            setWorldDirty: function setWorldDirty() {
                this._worldMatDirty = true;
            },
            getLocalMatrix: function getLocalMatrix(out) {
                this._updateLocalMatrix();
                return _vmath.mat4.copy(out, this._matrix);
            },
            getWorldMatrix: function getWorldMatrix(out) {
                this._updateWorldMatrix();
                return _vmath.mat4.copy(out, this._worldMatrix);
            },
            convertToNodeSpaceAR: function convertToNodeSpaceAR(worldPoint, out) {
                this._updateWorldMatrix();
                _vmath.mat4.invert(_mat4_temp, this._worldMatrix);
                if (worldPoint instanceof cc.Vec2) {
                    out = out || new cc.Vec2();
                    return _vmath.vec2.transformMat4(out, worldPoint, _mat4_temp);
                } else {
                    out = out || new cc.Vec3();
                    return _vmath.vec3.transformMat4(out, worldPoint, _mat4_temp);
                }
            },
            convertToWorldSpaceAR: function convertToWorldSpaceAR(nodePoint, out) {
                this._updateWorldMatrix();
                if (nodePoint instanceof cc.Vec2) {
                    out = out || new cc.Vec2();
                    return _vmath.vec2.transformMat4(out, nodePoint, this._worldMatrix);
                } else {
                    out = out || new cc.Vec3();
                    return _vmath.vec3.transformMat4(out, nodePoint, this._worldMatrix);
                }
            },
            convertToNodeSpace: function convertToNodeSpace(worldPoint) {
                this._updateWorldMatrix();
                _vmath.mat4.invert(_mat4_temp, this._worldMatrix);
                var out = new cc.Vec2();
                _vmath.vec2.transformMat4(out, worldPoint, _mat4_temp);
                out.x += this._anchorPoint.x * this._contentSize.width;
                out.y += this._anchorPoint.y * this._contentSize.height;
                return out;
            },
            convertToWorldSpace: function convertToWorldSpace(nodePoint) {
                this._updateWorldMatrix();
                var out = new cc.Vec2(nodePoint.x - this._anchorPoint.x * this._contentSize.width, nodePoint.y - this._anchorPoint.y * this._contentSize.height);
                return _vmath.vec2.transformMat4(out, out, this._worldMatrix);
            },
            getNodeToParentTransform: function getNodeToParentTransform(out) {
                if (!out) {
                    out = AffineTrans.identity();
                }
                this._updateLocalMatrix();
                var contentSize = this._contentSize;
                _vec3_temp.x = -this._anchorPoint.x * contentSize.width;
                _vec3_temp.y = -this._anchorPoint.y * contentSize.height;
                _vmath.mat4.copy(_mat4_temp, this._matrix);
                _vmath.mat4.translate(_mat4_temp, _mat4_temp, _vec3_temp);
                return AffineTrans.fromMat4(out, _mat4_temp);
            },
            getNodeToParentTransformAR: function getNodeToParentTransformAR(out) {
                if (!out) {
                    out = AffineTrans.identity();
                }
                this._updateLocalMatrix();
                return AffineTrans.fromMat4(out, this._matrix);
            },
            getNodeToWorldTransform: function getNodeToWorldTransform(out) {
                if (!out) {
                    out = AffineTrans.identity();
                }
                this._updateWorldMatrix();
                var contentSize = this._contentSize;
                _vec3_temp.x = -this._anchorPoint.x * contentSize.width;
                _vec3_temp.y = -this._anchorPoint.y * contentSize.height;
                _vmath.mat4.copy(_mat4_temp, this._worldMatrix);
                _vmath.mat4.translate(_mat4_temp, _mat4_temp, _vec3_temp);
                return AffineTrans.fromMat4(out, _mat4_temp);
            },
            getNodeToWorldTransformAR: function getNodeToWorldTransformAR(out) {
                if (!out) {
                    out = AffineTrans.identity();
                }
                this._updateWorldMatrix();
                return AffineTrans.fromMat4(out, this._worldMatrix);
            },
            getParentToNodeTransform: function getParentToNodeTransform(out) {
                if (!out) {
                    out = AffineTrans.identity();
                }
                this._updateLocalMatrix();
                _vmath.mat4.invert(_mat4_temp, this._matrix);
                return AffineTrans.fromMat4(out, _mat4_temp);
            },
            getWorldToNodeTransform: function getWorldToNodeTransform(out) {
                if (!out) {
                    out = AffineTrans.identity();
                }
                this._updateWorldMatrix();
                _vmath.mat4.invert(_mat4_temp, this._worldMatrix);
                return AffineTrans.fromMat4(out, _mat4_temp);
            },
            convertTouchToNodeSpace: function convertTouchToNodeSpace(touch) {
                return this.convertToNodeSpace(touch.getLocation());
            },
            convertTouchToNodeSpaceAR: function convertTouchToNodeSpaceAR(touch) {
                return this.convertToNodeSpaceAR(touch.getLocation());
            },
            getBoundingBox: function getBoundingBox() {
                this._updateLocalMatrix();
                var width = this._contentSize.width;
                var height = this._contentSize.height;
                var rect = cc.rect(-this._anchorPoint.x * width, -this._anchorPoint.y * height, width, height);
                return rect.transformMat4(rect, this._matrix);
            },
            getBoundingBoxToWorld: function getBoundingBoxToWorld() {
                if (this._parent) {
                    this._parent._updateWorldMatrix();
                    return this._getBoundingBoxTo(this._parent._worldMatrix);
                } else {
                    return this.getBoundingBox();
                }
            },
            _getBoundingBoxTo: function _getBoundingBoxTo(parentMat) {
                this._updateLocalMatrix();
                var width = this._contentSize.width;
                var height = this._contentSize.height;
                var rect = cc.rect(-this._anchorPoint.x * width, -this._anchorPoint.y * height, width, height);
                var parentMat = _vmath.mat4.mul(this._worldMatrix, parentMat, this._matrix);
                rect.transformMat4(rect, parentMat);
                if (!this._children)
                    return rect;
                var locChildren = this._children;
                for (var i = 0; i < locChildren.length; i++) {
                    var child = locChildren[i];
                    if (child && child.active) {
                        var childRect = child._getBoundingBoxTo(parentMat);
                        if (childRect)
                            rect.union(rect, childRect);
                    }
                }
                return rect;
            },
            _updateOrderOfArrival: function _updateOrderOfArrival() {
                var arrivalOrder = this._parent ? ++this._parent._childArrivalOrder : 0;
                this._localZOrder = this._localZOrder & 4294901760 | arrivalOrder;
                this.emit(EventType.SIBLING_ORDER_CHANGED);
            },
            addChild: function addChild(child, zIndex, name) {
                if (CC_DEV && !cc.Node.isNode(child)) {
                    return cc.errorID(1634, cc.js.getClassName(child));
                }
                cc.assertID(child, 1606);
                cc.assertID(child._parent === null, 1605);
                child.parent = this;
                if (zIndex !== undefined) {
                    child.zIndex = zIndex;
                }
                if (name !== undefined) {
                    child.name = name;
                }
            },
            cleanup: function cleanup() {
                ActionManagerExist && cc.director.getActionManager().removeAllActionsFromTarget(this);
                eventManager.removeListeners(this);
                var i, len = this._children.length, node;
                for (i = 0; i < len; ++i) {
                    node = this._children[i];
                    if (node)
                        node.cleanup();
                }
            },
            sortAllChildren: function sortAllChildren() {
                if (this._reorderChildDirty) {
                    this._reorderChildDirty = false;
                    var _children = this._children, child;
                    this._childArrivalOrder = 1;
                    for (var i = 0, len = _children.length; i < len; i++) {
                        child = _children[i];
                        child._updateOrderOfArrival();
                    }
                    eventManager._setDirtyForNode(this);
                    if (_children.length > 1) {
                        var j, child;
                        for (var _i = 1, _len = _children.length; _i < _len; _i++) {
                            child = _children[_i];
                            j = _i - 1;
                            while (j >= 0) {
                                if (child._localZOrder < _children[j]._localZOrder) {
                                    _children[j + 1] = _children[j];
                                } else {
                                    break;
                                }
                                j--;
                            }
                            _children[j + 1] = child;
                        }
                        this.emit(EventType.CHILD_REORDER, this);
                    }
                    cc.director.__fastOff(cc.Director.EVENT_AFTER_UPDATE, this.sortAllChildren, this);
                }
            },
            _delaySort: function _delaySort() {
                if (!this._reorderChildDirty) {
                    this._reorderChildDirty = true;
                    cc.director.__fastOn(cc.Director.EVENT_AFTER_UPDATE, this.sortAllChildren, this);
                }
            },
            _restoreProperties: CC_EDITOR && function () {
                this.is3DNode = this.is3DNode;
                if (!this._matrix) {
                    this._matrix = _vmath.mat4.create(this._spaceInfo.localMat);
                    _vmath.mat4.identity(this._matrix);
                }
                if (!this._worldMatrix) {
                    this._worldMatrix = _vmath.mat4.create(this._spaceInfo.worldMat);
                    _vmath.mat4.identity(this._worldMatrix);
                }
                this._localMatDirty = LocalDirtyFlag.ALL;
                this._worldMatDirty = true;
                this._fromEuler();
                this._renderFlag |= RenderFlow.FLAG_TRANSFORM;
                if (this._renderComponent) {
                    if (this._renderComponent.enabled) {
                        this._renderComponent.markForUpdateRenderData(true);
                    } else {
                        this._renderComponent.disableRender();
                    }
                }
                if (this._children.length > 0) {
                    this._renderFlag |= RenderFlow.FLAG_CHILDREN;
                }
            },
            onRestore: CC_EDITOR && function () {
                this._onRestoreBase();
                this._restoreProperties();
                var actionManager = cc.director.getActionManager();
                if (this._activeInHierarchy) {
                    actionManager && actionManager.resumeTarget(this);
                    eventManager.resumeTarget(this);
                } else {
                    actionManager && actionManager.pauseTarget(this);
                    eventManager.pauseTarget(this);
                }
            }
        };
        if (CC_EDITOR) {
            js.mixin(NodeDefines.properties, {
                _scaleX: {
                    default: undefined,
                    type: cc.Float,
                    editorOnly: true
                },
                _scaleY: {
                    default: undefined,
                    type: cc.Float,
                    editorOnly: true
                }
            });
        }
        var Node = cc.Class(NodeDefines);
        var _p = Node.prototype;
        js.getset(_p, 'position', _p.getPosition, _p.setPosition, false, true);
        cc.Node = module.exports = Node;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,