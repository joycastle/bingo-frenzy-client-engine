(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/collider/CCCollisionManager.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Contact = require('./CCContact');
        var CollisionType = Contact.CollisionType;
        var NodeEvent = require('../CCNode').EventType;
        var math = cc.vmath;
        var _vec2 = cc.v2();
        function obbApplyMatrix(rect, mat4, out_bl, out_tl, out_tr, out_br) {
            var x = rect.x;
            var y = rect.y;
            var width = rect.width;
            var height = rect.height;
            var mat4m = mat4.m;
            var m00 = mat4m[0], m01 = mat4m[1], m04 = mat4m[4], m05 = mat4m[5];
            var m12 = mat4m[12], m13 = mat4m[13];
            var tx = m00 * x + m04 * y + m12;
            var ty = m01 * x + m05 * y + m13;
            var xa = m00 * width;
            var xb = m01 * width;
            var yc = m04 * height;
            var yd = m05 * height;
            out_tl.x = tx;
            out_tl.y = ty;
            out_tr.x = xa + tx;
            out_tr.y = xb + ty;
            out_bl.x = yc + tx;
            out_bl.y = yd + ty;
            out_br.x = xa + yc + tx;
            out_br.y = xb + yd + ty;
        }
        var CollisionManager = cc.Class({
            mixins: [cc.EventTarget],
            properties: {
                enabled: false,
                enabledDrawBoundingBox: false
            },
            ctor: function ctor() {
                this._contacts = [];
                this._colliders = [];
                this._debugDrawer = null;
                this._enabledDebugDraw = false;
                cc.director._scheduler && cc.director._scheduler.enableForTarget(this);
            },
            update: function update(dt) {
                if (!this.enabled) {
                    return;
                }
                var i = void 0, l = void 0;
                var colliders = this._colliders;
                for (i = 0, l = colliders.length; i < l; i++) {
                    this.updateCollider(colliders[i]);
                }
                var contacts = this._contacts;
                var results = [];
                for (i = 0, l = contacts.length; i < l; i++) {
                    var collisionType = contacts[i].updateState();
                    if (collisionType === CollisionType.None) {
                        continue;
                    }
                    results.push([
                        collisionType,
                        contacts[i]
                    ]);
                }
                for (i = 0, l = results.length; i < l; i++) {
                    var result = results[i];
                    this._doCollide(result[0], result[1]);
                }
                this.drawColliders();
            },
            _doCollide: function _doCollide(collisionType, contact) {
                var contactFunc = void 0;
                switch (collisionType) {
                case CollisionType.CollisionEnter:
                    contactFunc = 'onCollisionEnter';
                    break;
                case CollisionType.CollisionStay:
                    contactFunc = 'onCollisionStay';
                    break;
                case CollisionType.CollisionExit:
                    contactFunc = 'onCollisionExit';
                    break;
                }
                var collider1 = contact.collider1;
                var collider2 = contact.collider2;
                var comps1 = collider1.node._components;
                var comps2 = collider2.node._components;
                var i = void 0, l = void 0, comp = void 0;
                for (i = 0, l = comps1.length; i < l; i++) {
                    comp = comps1[i];
                    if (comp[contactFunc]) {
                        comp[contactFunc](collider2, collider1);
                    }
                }
                for (i = 0, l = comps2.length; i < l; i++) {
                    comp = comps2[i];
                    if (comp[contactFunc]) {
                        comp[contactFunc](collider1, collider2);
                    }
                }
            },
            shouldCollide: function shouldCollide(c1, c2) {
                var node1 = c1.node, node2 = c2.node;
                var collisionMatrix = cc.game.collisionMatrix;
                return node1 !== node2 && collisionMatrix[node1.groupIndex][node2.groupIndex];
            },
            initCollider: function initCollider(collider) {
                if (!collider.world) {
                    var world = collider.world = {};
                    world.aabb = cc.rect();
                    world.preAabb = cc.rect();
                    world.matrix = math.mat4.create();
                    world.radius = 0;
                    if (collider instanceof cc.BoxCollider) {
                        world.position = null;
                        world.points = [
                            cc.v2(),
                            cc.v2(),
                            cc.v2(),
                            cc.v2()
                        ];
                    } else if (collider instanceof cc.PolygonCollider) {
                        world.position = null;
                        world.points = collider.points.map(function (p) {
                            return cc.v2(p.x, p.y);
                        });
                    } else if (collider instanceof cc.CircleCollider) {
                        world.position = cc.v2();
                        world.points = null;
                    }
                }
            },
            updateCollider: function updateCollider(collider) {
                var offset = collider.offset;
                var world = collider.world;
                var aabb = world.aabb;
                var m = world.matrix;
                collider.node.getWorldMatrix(m);
                var preAabb = world.preAabb;
                preAabb.x = aabb.x;
                preAabb.y = aabb.y;
                preAabb.width = aabb.width;
                preAabb.height = aabb.height;
                if (collider instanceof cc.BoxCollider) {
                    var size = collider.size;
                    aabb.x = offset.x - size.width / 2;
                    aabb.y = offset.y - size.height / 2;
                    aabb.width = size.width;
                    aabb.height = size.height;
                    var wps = world.points;
                    var wp0 = wps[0], wp1 = wps[1], wp2 = wps[2], wp3 = wps[3];
                    obbApplyMatrix(aabb, m, wp0, wp1, wp2, wp3);
                    var minx = Math.min(wp0.x, wp1.x, wp2.x, wp3.x);
                    var miny = Math.min(wp0.y, wp1.y, wp2.y, wp3.y);
                    var maxx = Math.max(wp0.x, wp1.x, wp2.x, wp3.x);
                    var maxy = Math.max(wp0.y, wp1.y, wp2.y, wp3.y);
                    aabb.x = minx;
                    aabb.y = miny;
                    aabb.width = maxx - minx;
                    aabb.height = maxy - miny;
                } else if (collider instanceof cc.CircleCollider) {
                    math.vec2.transformMat4(_vec2, collider.offset, m);
                    world.position.x = _vec2.x;
                    world.position.y = _vec2.y;
                    var mm = m.m;
                    var tempx = mm[12], tempy = mm[13];
                    mm[12] = mm[13] = 0;
                    _vec2.x = collider.radius;
                    _vec2.y = 0;
                    math.vec2.transformMat4(_vec2, _vec2, m);
                    var d = Math.sqrt(_vec2.x * _vec2.x + _vec2.y * _vec2.y);
                    world.radius = d;
                    aabb.x = world.position.x - d;
                    aabb.y = world.position.y - d;
                    aabb.width = d * 2;
                    aabb.height = d * 2;
                    mm[12] = tempx;
                    mm[13] = tempy;
                } else if (collider instanceof cc.PolygonCollider) {
                    var points = collider.points;
                    var worldPoints = world.points;
                    worldPoints.length = points.length;
                    var _minx = 1000000, _miny = 1000000, _maxx = -1000000, _maxy = -1000000;
                    for (var i = 0, l = points.length; i < l; i++) {
                        if (!worldPoints[i]) {
                            worldPoints[i] = cc.v2();
                        }
                        _vec2.x = points[i].x + offset.x;
                        _vec2.y = points[i].y + offset.y;
                        math.vec2.transformMat4(_vec2, _vec2, m);
                        var x = _vec2.x;
                        var y = _vec2.y;
                        worldPoints[i].x = x;
                        worldPoints[i].y = y;
                        if (x > _maxx)
                            _maxx = x;
                        if (x < _minx)
                            _minx = x;
                        if (y > _maxy)
                            _maxy = y;
                        if (y < _miny)
                            _miny = y;
                    }
                    aabb.x = _minx;
                    aabb.y = _miny;
                    aabb.width = _maxx - _minx;
                    aabb.height = _maxy - _miny;
                }
            },
            addCollider: function addCollider(collider) {
                var colliders = this._colliders;
                var index = colliders.indexOf(collider);
                if (index === -1) {
                    for (var i = 0, l = colliders.length; i < l; i++) {
                        var other = colliders[i];
                        if (this.shouldCollide(collider, other)) {
                            var contact = new Contact(collider, other);
                            this._contacts.push(contact);
                        }
                    }
                    colliders.push(collider);
                    this.initCollider(collider);
                }
                collider.node.on(NodeEvent.GROUP_CHANGED, this.onNodeGroupChanged, this);
            },
            removeCollider: function removeCollider(collider) {
                var colliders = this._colliders;
                var index = colliders.indexOf(collider);
                if (index >= 0) {
                    colliders.splice(index, 1);
                    var contacts = this._contacts;
                    for (var i = contacts.length - 1; i >= 0; i--) {
                        var contact = contacts[i];
                        if (contact.collider1 === collider || contact.collider2 === collider) {
                            if (contact.touching) {
                                this._doCollide(CollisionType.CollisionExit, contact);
                            }
                            contacts.splice(i, 1);
                        }
                    }
                    collider.node.off(NodeEvent.GROUP_CHANGED, this.onNodeGroupChanged, this);
                } else {
                    cc.errorID(6600);
                }
            },
            onNodeGroupChanged: function onNodeGroupChanged(node) {
                var colliders = node.getComponents(cc.Collider);
                for (var i = 0, l = colliders.length; i < l; i++) {
                    var collider = colliders[i];
                    if (cc.PhysicsCollider && collider instanceof cc.PhysicsCollider) {
                        continue;
                    }
                    this.removeCollider(collider);
                    this.addCollider(collider);
                }
            },
            drawColliders: function drawColliders() {
                if (!this._enabledDebugDraw) {
                    return;
                }
                this._checkDebugDrawValid();
                var debugDrawer = this._debugDrawer;
                debugDrawer.clear();
                var colliders = this._colliders;
                for (var i = 0, l = colliders.length; i < l; i++) {
                    var collider = colliders[i];
                    debugDrawer.strokeColor = cc.Color.WHITE;
                    if (collider instanceof cc.BoxCollider || collider instanceof cc.PolygonCollider) {
                        var ps = collider.world.points;
                        if (ps.length > 0) {
                            debugDrawer.moveTo(ps[0].x, ps[0].y);
                            for (var j = 1; j < ps.length; j++) {
                                debugDrawer.lineTo(ps[j].x, ps[j].y);
                            }
                            debugDrawer.close();
                            debugDrawer.stroke();
                        }
                    } else if (collider instanceof cc.CircleCollider) {
                        debugDrawer.circle(collider.world.position.x, collider.world.position.y, collider.world.radius);
                        debugDrawer.stroke();
                    }
                    if (this.enabledDrawBoundingBox) {
                        var aabb = collider.world.aabb;
                        debugDrawer.strokeColor = cc.Color.BLUE;
                        debugDrawer.moveTo(aabb.xMin, aabb.yMin);
                        debugDrawer.lineTo(aabb.xMin, aabb.yMax);
                        debugDrawer.lineTo(aabb.xMax, aabb.yMax);
                        debugDrawer.lineTo(aabb.xMax, aabb.yMin);
                        debugDrawer.close();
                        debugDrawer.stroke();
                    }
                }
            },
            _checkDebugDrawValid: function _checkDebugDrawValid() {
                if (!this._debugDrawer || !this._debugDrawer.isValid) {
                    var node = new cc.Node('COLLISION_MANAGER_DEBUG_DRAW');
                    node.zIndex = cc.macro.MAX_ZINDEX;
                    cc.game.addPersistRootNode(node);
                    this._debugDrawer = node.addComponent(cc.Graphics);
                }
            }
        });
        cc.js.getset(CollisionManager.prototype, 'enabledDebugDraw', function () {
            return this._enabledDebugDraw;
        }, function (value) {
            if (value && !this._enabledDebugDraw) {
                this._checkDebugDrawValid();
                this._debugDrawer.node.active = true;
            } else if (!value && this._enabledDebugDraw) {
                this._debugDrawer.clear(true);
                this._debugDrawer.node.active = false;
            }
            this._enabledDebugDraw = value;
        });
        cc.CollisionManager = module.exports = CollisionManager;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDQ29sbGlzaW9uTWFuYWdlci5qcyIsIi9Vc2Vycy9nYW95YW5nL1dvcmtTcGFjZS9qb3ljYXN0bGUvYmluZ28vY2xpZW50L2JpbmdvL2VuZ2luZS9jb2NvczJkL2NvcmUvY29sbGlkZXIvQ0NDb2xsaXNpb25NYW5hZ2VyLmpzIl0sIm5hbWVzIjpbIkNvbnRhY3QiLCJyZXF1aXJlIiwiQ29sbGlzaW9uVHlwZSIsIk5vZGVFdmVudCIsIkV2ZW50VHlwZSIsIm1hdGgiLCJjYyIsInZtYXRoIiwiX3ZlYzIiLCJ2MiIsIm9iYkFwcGx5TWF0cml4IiwicmVjdCIsIm1hdDQiLCJvdXRfYmwiLCJvdXRfdGwiLCJvdXRfdHIiLCJvdXRfYnIiLCJ4IiwieSIsIndpZHRoIiwiaGVpZ2h0IiwibWF0NG0iLCJtIiwibTAwIiwibTAxIiwibTA0IiwibTA1IiwibTEyIiwibTEzIiwidHgiLCJ0eSIsInhhIiwieGIiLCJ5YyIsInlkIiwiQ29sbGlzaW9uTWFuYWdlciIsIkNsYXNzIiwibWl4aW5zIiwiRXZlbnRUYXJnZXQiLCJwcm9wZXJ0aWVzIiwiZW5hYmxlZCIsImVuYWJsZWREcmF3Qm91bmRpbmdCb3giLCJjdG9yIiwiX2NvbnRhY3RzIiwiX2NvbGxpZGVycyIsIl9kZWJ1Z0RyYXdlciIsIl9lbmFibGVkRGVidWdEcmF3IiwiZGlyZWN0b3IiLCJfc2NoZWR1bGVyIiwiZW5hYmxlRm9yVGFyZ2V0IiwidXBkYXRlIiwiZHQiLCJpIiwibCIsImNvbGxpZGVycyIsImxlbmd0aCIsInVwZGF0ZUNvbGxpZGVyIiwiY29udGFjdHMiLCJyZXN1bHRzIiwiY29sbGlzaW9uVHlwZSIsInVwZGF0ZVN0YXRlIiwiTm9uZSIsInB1c2giLCJyZXN1bHQiLCJfZG9Db2xsaWRlIiwiZHJhd0NvbGxpZGVycyIsImNvbnRhY3QiLCJjb250YWN0RnVuYyIsIkNvbGxpc2lvbkVudGVyIiwiQ29sbGlzaW9uU3RheSIsIkNvbGxpc2lvbkV4aXQiLCJjb2xsaWRlcjEiLCJjb2xsaWRlcjIiLCJjb21wczEiLCJub2RlIiwiX2NvbXBvbmVudHMiLCJjb21wczIiLCJjb21wIiwic2hvdWxkQ29sbGlkZSIsImMxIiwiYzIiLCJub2RlMSIsIm5vZGUyIiwiY29sbGlzaW9uTWF0cml4IiwiZ2FtZSIsImdyb3VwSW5kZXgiLCJpbml0Q29sbGlkZXIiLCJjb2xsaWRlciIsIndvcmxkIiwiYWFiYiIsInByZUFhYmIiLCJtYXRyaXgiLCJjcmVhdGUiLCJyYWRpdXMiLCJCb3hDb2xsaWRlciIsInBvc2l0aW9uIiwicG9pbnRzIiwiUG9seWdvbkNvbGxpZGVyIiwibWFwIiwicCIsIkNpcmNsZUNvbGxpZGVyIiwib2Zmc2V0IiwiZ2V0V29ybGRNYXRyaXgiLCJzaXplIiwid3BzIiwid3AwIiwid3AxIiwid3AyIiwid3AzIiwibWlueCIsIk1hdGgiLCJtaW4iLCJtaW55IiwibWF4eCIsIm1heCIsIm1heHkiLCJ2ZWMyIiwidHJhbnNmb3JtTWF0NCIsIm1tIiwidGVtcHgiLCJ0ZW1weSIsImQiLCJzcXJ0Iiwid29ybGRQb2ludHMiLCJhZGRDb2xsaWRlciIsImluZGV4IiwiaW5kZXhPZiIsIm90aGVyIiwib24iLCJHUk9VUF9DSEFOR0VEIiwib25Ob2RlR3JvdXBDaGFuZ2VkIiwicmVtb3ZlQ29sbGlkZXIiLCJzcGxpY2UiLCJ0b3VjaGluZyIsIm9mZiIsImVycm9ySUQiLCJnZXRDb21wb25lbnRzIiwiQ29sbGlkZXIiLCJQaHlzaWNzQ29sbGlkZXIiLCJfY2hlY2tEZWJ1Z0RyYXdWYWxpZCIsImRlYnVnRHJhd2VyIiwiY2xlYXIiLCJzdHJva2VDb2xvciIsIkNvbG9yIiwiV0hJVEUiLCJwcyIsIm1vdmVUbyIsImoiLCJsaW5lVG8iLCJjbG9zZSIsInN0cm9rZSIsImNpcmNsZSIsIkJMVUUiLCJ4TWluIiwieU1pbiIsInlNYXgiLCJ4TWF4IiwiaXNWYWxpZCIsIk5vZGUiLCJ6SW5kZXgiLCJtYWNybyIsIk1BWF9aSU5ERVgiLCJhZGRQZXJzaXN0Um9vdE5vZGUiLCJhZGRDb21wb25lbnQiLCJHcmFwaGljcyIsImpzIiwi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Q0FWYTtBQUFBLFNBSnJCbEs7UUFtQkFBLEVBQUFBLENBQUc2QixnQkFBSDdCLEdBQXNCb0ssTUFBQUEsQ0FBT0MsT0FBUEQsR0FBaUJ2SSxnQkFBdkM3QiIsImZpbGUiOiJDQ0NvbGxpc2lvbk1hbmFnZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxuXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xuXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxuIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxuIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXG4gc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXG5cbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5jb25zdCBDb250YWN0ID0gcmVxdWlyZSgnLi9DQ0NvbnRhY3QnKTtcbmNvbnN0IENvbGxpc2lvblR5cGUgPSBDb250YWN0LkNvbGxpc2lvblR5cGU7XG5jb25zdCBOb2RlRXZlbnQgPSByZXF1aXJlKCcuLi9DQ05vZGUnKS5FdmVudFR5cGU7XG5cbmNvbnN0IG1hdGggPSBjYy52bWF0aDtcblxubGV0IF92ZWMyID0gY2MudjIoKTtcblxuZnVuY3Rpb24gb2JiQXBwbHlNYXRyaXggKHJlY3QsIG1hdDQsIG91dF9ibCwgb3V0X3RsLCBvdXRfdHIsIG91dF9icikge1xuICAgIGxldCB4ID0gcmVjdC54O1xuICAgIGxldCB5ID0gcmVjdC55O1xuICAgIGxldCB3aWR0aCA9IHJlY3Qud2lkdGg7XG4gICAgbGV0IGhlaWdodCA9IHJlY3QuaGVpZ2h0O1xuXG4gICAgbGV0IG1hdDRtID0gbWF0NC5tO1xuICAgIGxldCBtMDAgPSBtYXQ0bVswXSwgbTAxID0gbWF0NG1bMV0sIG0wNCA9IG1hdDRtWzRdLCBtMDUgPSBtYXQ0bVs1XTtcbiAgICBsZXQgbTEyID0gbWF0NG1bMTJdLCBtMTMgPSBtYXQ0bVsxM107XG5cbiAgICBsZXQgdHggPSBtMDAgKiB4ICsgbTA0ICogeSArIG0xMjtcbiAgICBsZXQgdHkgPSBtMDEgKiB4ICsgbTA1ICogeSArIG0xMztcbiAgICBsZXQgeGEgPSBtMDAgKiB3aWR0aDtcbiAgICBsZXQgeGIgPSBtMDEgKiB3aWR0aDtcbiAgICBsZXQgeWMgPSBtMDQgKiBoZWlnaHQ7XG4gICAgbGV0IHlkID0gbTA1ICogaGVpZ2h0O1xuXG4gICAgb3V0X3RsLnggPSB0eDtcbiAgICBvdXRfdGwueSA9IHR5O1xuICAgIG91dF90ci54ID0geGEgKyB0eDtcbiAgICBvdXRfdHIueSA9IHhiICsgdHk7XG4gICAgb3V0X2JsLnggPSB5YyArIHR4O1xuICAgIG91dF9ibC55ID0geWQgKyB0eTtcbiAgICBvdXRfYnIueCA9IHhhICsgeWMgKyB0eDtcbiAgICBvdXRfYnIueSA9IHhiICsgeWQgKyB0eTtcbn1cblxuLyoqXG4gKiAhI2VuXG4gKiBBIHNpbXBsZSBjb2xsaXNpb24gbWFuYWdlciBjbGFzcy4gXG4gKiBJdCB3aWxsIGNhbGN1bGF0ZSB3aGV0aGVyIHRoZSBjb2xsaWRlciBjb2xsaWRlcyBvdGhlciBjb2xsaWRlcnMsIGlmIGNvbGxpZGVzIHRoZW4gY2FsbCB0aGUgY2FsbGJhY2tzLlxuICogISN6aFxuICog5LiA5Liq566A5Y2V55qE56Kw5pKe57uE5Lu2566h55CG57G777yM55So5LqO5aSE55CG6IqC54K55LmL6Ze055qE56Kw5pKe57uE5Lu25piv5ZCm5Lqn55Sf5LqG56Kw5pKe77yM5bm26LCD55So55u45bqU5Zue6LCD5Ye95pWw44CCXG4gKlxuICogQGNsYXNzIENvbGxpc2lvbk1hbmFnZXJcbiAqIEB1c2VzIEV2ZW50VGFyZ2V0XG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIEdldCB0aGUgY29sbGlzaW9uIG1hbmFnZXIuXG4gKiBsZXQgbWFuYWdlciA9IGNjLmRpcmVjdG9yLmdldENvbGxpc2lvbk1hbmFnZXIoKTtcbiAqXG4gKiAvLyBFbmFibGVkIHRoZSBjb2xpZGVyIG1hbmFnZXIuXG4gKiBtYW5hZ2VyLmVuYWJsZWQgPSB0cnVlO1xuICpcbiAqIC8vIEVuYWJsZWQgZHJhdyBjb2xsaWRlclxuICogbWFuYWdlci5lbmFibGVkRGVidWdEcmF3ID0gdHJ1ZTtcbiAqXG4gKiAvLyBFbmFibGVkIGRyYXcgY29sbGlkZXIgYm91bmRpbmcgYm94XG4gKiBtYW5hZ2VyLmVuYWJsZWREcmF3Qm91bmRpbmdCb3ggPSB0cnVlO1xuICpcbiAqIFxuICogLy8gQ29sbGlzaW9uIGNhbGxiYWNrXG4gKiBvbkNvbGxpc2lvbkVudGVyOiBmdW5jdGlvbiAob3RoZXIsIHNlbGYpIHtcbiAqICAgICB0aGlzLm5vZGUuY29sb3IgPSBjYy5Db2xvci5SRUQ7XG4gKiAgICAgdGhpcy50b3VjaGluZ051bWJlciArKztcbiAqXG4gKiAgICAgLy8gbGV0IHdvcmxkID0gc2VsZi53b3JsZDtcbiAqICAgICAvLyBsZXQgYWFiYiA9IHdvcmxkLmFhYmI7XG4gKiAgICAgLy8gbGV0IHByZUFhYmIgPSB3b3JsZC5wcmVBYWJiO1xuICogICAgIC8vIGxldCBtID0gd29ybGQubWF0cml4O1xuICpcbiAqICAgICAvLyBmb3IgY2lyY2xlIGNvbGxpZGVyXG4gKiAgICAgLy8gbGV0IHIgPSB3b3JsZC5yYWRpdXM7XG4gKiAgICAgLy8gbGV0IHAgPSB3b3JsZC5wb3NpdGlvbjtcbiAqXG4gKiAgICAgLy8gZm9yIGJveCBjb2xsaWRlciBhbmQgcG9seWdvbiBjb2xsaWRlclxuICogICAgIC8vIGxldCBwcyA9IHdvcmxkLnBvaW50cztcbiAqIH0sXG4gKiAgIFxuICogb25Db2xsaXNpb25TdGF5OiBmdW5jdGlvbiAob3RoZXIsIHNlbGYpIHtcbiAqICAgICBjb25zb2xlLmxvZygnb24gY29sbGlzaW9uIHN0YXknKTtcbiAqIH0sXG4gKiAgIFxuICogb25Db2xsaXNpb25FeGl0OiBmdW5jdGlvbiAob3RoZXIsIHNlbGYpIHtcbiAqICAgICB0aGlzLnRvdWNoaW5nTnVtYmVyIC0tO1xuICogICAgIGlmICh0aGlzLnRvdWNoaW5nTnVtYmVyID09PSAwKSB7XG4gKiAgICAgICAgIHRoaXMubm9kZS5jb2xvciA9IGNjLkNvbG9yLldISVRFO1xuICogICAgIH1cbiAqIH1cbiAqL1xubGV0IENvbGxpc2lvbk1hbmFnZXIgPSBjYy5DbGFzcyh7XG4gICAgbWl4aW5zOiBbY2MuRXZlbnRUYXJnZXRdLFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICAvKipcbiAgICAgICAgICogISNlblxuICAgICAgICAgKiAhI3poXG4gICAgICAgICAqIOaYr+WQpuW8gOWQr+eisOaSnueuoeeQhu+8jOm7mOiupOS4uuS4jeW8gOWQr1xuICAgICAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGVuYWJsZWRcbiAgICAgICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgICAgICovXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAvKipcbiAgICAgICAgICogISNlblxuICAgICAgICAgKiAhI3poXG4gICAgICAgICAqIOaYr+WQpue7mOWItueisOaSnue7hOS7tueahOWMheWbtOebku+8jOm7mOiupOS4uuS4jee7mOWItlxuICAgICAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGVuYWJsZWREcmF3Qm91bmRpbmdCb3hcbiAgICAgICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgICAgICovXG4gICAgICAgIGVuYWJsZWREcmF3Qm91bmRpbmdCb3g6IGZhbHNlXG4gICAgfSxcblxuICAgIGN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fY29udGFjdHMgPSBbXTtcbiAgICAgICAgdGhpcy5fY29sbGlkZXJzID0gW107XG4gICAgICAgIHRoaXMuX2RlYnVnRHJhd2VyID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZW5hYmxlZERlYnVnRHJhdyA9IGZhbHNlO1xuICAgICAgICBcbiAgICAgICAgY2MuZGlyZWN0b3IuX3NjaGVkdWxlciAmJiBjYy5kaXJlY3Rvci5fc2NoZWR1bGVyLmVuYWJsZUZvclRhcmdldCh0aGlzKTtcbiAgICB9LFxuXG4gICAgdXBkYXRlOiBmdW5jdGlvbiAoZHQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBpLCBsO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBjb2xsaWRlclxuICAgICAgICBsZXQgY29sbGlkZXJzID0gdGhpcy5fY29sbGlkZXJzO1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gY29sbGlkZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVDb2xsaWRlcihjb2xsaWRlcnNbaV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZG8gY29sbGlkZVxuICAgICAgICBsZXQgY29udGFjdHMgPSB0aGlzLl9jb250YWN0cztcbiAgICAgICAgbGV0IHJlc3VsdHMgPSBbXTtcbiAgICAgICAgXG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBjb250YWN0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBjb2xsaXNpb25UeXBlID0gY29udGFjdHNbaV0udXBkYXRlU3RhdGUoKTtcbiAgICAgICAgICAgIGlmIChjb2xsaXNpb25UeXBlID09PSBDb2xsaXNpb25UeXBlLk5vbmUpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKFtjb2xsaXNpb25UeXBlLCBjb250YWN0c1tpXV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaGFuZGxlIGNvbGxpZGUgcmVzdWx0cywgZW1pdCBtZXNzYWdlXG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSByZXN1bHRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHJlc3VsdHNbaV07XG4gICAgICAgICAgICB0aGlzLl9kb0NvbGxpZGUocmVzdWx0WzBdLCByZXN1bHRbMV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZHJhdyBjb2xsaWRlcnNcbiAgICAgICAgdGhpcy5kcmF3Q29sbGlkZXJzKCk7XG4gICAgfSxcblxuICAgIF9kb0NvbGxpZGU6IGZ1bmN0aW9uIChjb2xsaXNpb25UeXBlLCBjb250YWN0KSB7XG4gICAgICAgIGxldCBjb250YWN0RnVuYztcbiAgICAgICAgc3dpdGNoIChjb2xsaXNpb25UeXBlKSB7XG4gICAgICAgICAgICBjYXNlIENvbGxpc2lvblR5cGUuQ29sbGlzaW9uRW50ZXI6XG4gICAgICAgICAgICAgICAgY29udGFjdEZ1bmMgPSAnb25Db2xsaXNpb25FbnRlcic7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIENvbGxpc2lvblR5cGUuQ29sbGlzaW9uU3RheTpcbiAgICAgICAgICAgICAgICBjb250YWN0RnVuYyA9ICdvbkNvbGxpc2lvblN0YXknO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBDb2xsaXNpb25UeXBlLkNvbGxpc2lvbkV4aXQ6XG4gICAgICAgICAgICAgICAgY29udGFjdEZ1bmMgPSAnb25Db2xsaXNpb25FeGl0JztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjb2xsaWRlcjEgPSBjb250YWN0LmNvbGxpZGVyMTtcbiAgICAgICAgbGV0IGNvbGxpZGVyMiA9IGNvbnRhY3QuY29sbGlkZXIyO1xuXG4gICAgICAgIGxldCBjb21wczEgPSBjb2xsaWRlcjEubm9kZS5fY29tcG9uZW50cztcbiAgICAgICAgbGV0IGNvbXBzMiA9IGNvbGxpZGVyMi5ub2RlLl9jb21wb25lbnRzO1xuXG4gICAgICAgIGxldCBpLCBsLCBjb21wO1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gY29tcHMxLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgY29tcCA9IGNvbXBzMVtpXTtcbiAgICAgICAgICAgIGlmIChjb21wW2NvbnRhY3RGdW5jXSkge1xuICAgICAgICAgICAgICAgIGNvbXBbY29udGFjdEZ1bmNdKGNvbGxpZGVyMiwgY29sbGlkZXIxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBjb21wczIubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBjb21wID0gY29tcHMyW2ldO1xuICAgICAgICAgICAgaWYgKGNvbXBbY29udGFjdEZ1bmNdKSB7XG4gICAgICAgICAgICAgICAgY29tcFtjb250YWN0RnVuY10oY29sbGlkZXIxLCBjb2xsaWRlcjIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgXG5cbiAgICBzaG91bGRDb2xsaWRlOiBmdW5jdGlvbiAoYzEsIGMyKSB7XG4gICAgICAgIGxldCBub2RlMSA9IGMxLm5vZGUsIG5vZGUyID0gYzIubm9kZTtcbiAgICAgICAgbGV0IGNvbGxpc2lvbk1hdHJpeCA9IGNjLmdhbWUuY29sbGlzaW9uTWF0cml4O1xuICAgICAgICByZXR1cm4gbm9kZTEgIT09IG5vZGUyICYmIGNvbGxpc2lvbk1hdHJpeFtub2RlMS5ncm91cEluZGV4XVtub2RlMi5ncm91cEluZGV4XTtcbiAgICB9LFxuXG4gICAgaW5pdENvbGxpZGVyOiBmdW5jdGlvbiAoY29sbGlkZXIpIHtcbiAgICAgICAgaWYgKCFjb2xsaWRlci53b3JsZCkge1xuICAgICAgICAgICAgbGV0IHdvcmxkID0gY29sbGlkZXIud29ybGQgPSB7fTtcbiAgICAgICAgICAgIHdvcmxkLmFhYmIgPSBjYy5yZWN0KCk7XG4gICAgICAgICAgICB3b3JsZC5wcmVBYWJiID0gY2MucmVjdCgpO1xuICAgICAgICAgICAgd29ybGQubWF0cml4ID0gbWF0aC5tYXQ0LmNyZWF0ZSgpO1xuXG4gICAgICAgICAgICB3b3JsZC5yYWRpdXMgPSAwO1xuXG4gICAgICAgICAgICBpZiAoY29sbGlkZXIgaW5zdGFuY2VvZiBjYy5Cb3hDb2xsaWRlcikge1xuICAgICAgICAgICAgICAgIHdvcmxkLnBvc2l0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICB3b3JsZC5wb2ludHMgPSBbY2MudjIoKSwgY2MudjIoKSwgY2MudjIoKSwgY2MudjIoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjb2xsaWRlciBpbnN0YW5jZW9mIGNjLlBvbHlnb25Db2xsaWRlcikge1xuICAgICAgICAgICAgICAgIHdvcmxkLnBvc2l0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICB3b3JsZC5wb2ludHMgPSBjb2xsaWRlci5wb2ludHMubWFwKGZ1bmN0aW9uIChwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYy52MihwLngsIHAueSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjb2xsaWRlciBpbnN0YW5jZW9mIGNjLkNpcmNsZUNvbGxpZGVyKSB7XG4gICAgICAgICAgICAgICAgd29ybGQucG9zaXRpb24gPSBjYy52MigpO1xuICAgICAgICAgICAgICAgIHdvcmxkLnBvaW50cyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdXBkYXRlQ29sbGlkZXI6IGZ1bmN0aW9uIChjb2xsaWRlcikge1xuICAgICAgICBsZXQgb2Zmc2V0ID0gY29sbGlkZXIub2Zmc2V0O1xuICAgICAgICBsZXQgd29ybGQgPSBjb2xsaWRlci53b3JsZDtcbiAgICAgICAgbGV0IGFhYmIgPSB3b3JsZC5hYWJiO1xuXG4gICAgICAgIGxldCBtID0gd29ybGQubWF0cml4O1xuICAgICAgICBjb2xsaWRlci5ub2RlLmdldFdvcmxkTWF0cml4KG0pO1xuXG4gICAgICAgIGxldCBwcmVBYWJiID0gd29ybGQucHJlQWFiYjtcbiAgICAgICAgcHJlQWFiYi54ID0gYWFiYi54O1xuICAgICAgICBwcmVBYWJiLnkgPSBhYWJiLnk7XG4gICAgICAgIHByZUFhYmIud2lkdGggPSBhYWJiLndpZHRoO1xuICAgICAgICBwcmVBYWJiLmhlaWdodCA9IGFhYmIuaGVpZ2h0O1xuXG4gICAgICAgIGlmIChjb2xsaWRlciBpbnN0YW5jZW9mIGNjLkJveENvbGxpZGVyKSB7XG4gICAgICAgICAgICBsZXQgc2l6ZSA9IGNvbGxpZGVyLnNpemU7XG5cbiAgICAgICAgICAgIGFhYmIueCA9IG9mZnNldC54IC0gc2l6ZS53aWR0aC8yO1xuICAgICAgICAgICAgYWFiYi55ID0gb2Zmc2V0LnkgLSBzaXplLmhlaWdodC8yO1xuICAgICAgICAgICAgYWFiYi53aWR0aCA9IHNpemUud2lkdGg7XG4gICAgICAgICAgICBhYWJiLmhlaWdodCA9IHNpemUuaGVpZ2h0O1xuXG4gICAgICAgICAgICBsZXQgd3BzID0gd29ybGQucG9pbnRzO1xuICAgICAgICAgICAgbGV0IHdwMCA9IHdwc1swXSwgd3AxID0gd3BzWzFdLFxuICAgICAgICAgICAgICAgIHdwMiA9IHdwc1syXSwgd3AzID0gd3BzWzNdO1xuICAgICAgICAgICAgb2JiQXBwbHlNYXRyaXgoYWFiYiwgbSwgd3AwLCB3cDEsIHdwMiwgd3AzKTtcblxuICAgICAgICAgICAgbGV0IG1pbnggPSBNYXRoLm1pbih3cDAueCwgd3AxLngsIHdwMi54LCB3cDMueCk7XG4gICAgICAgICAgICBsZXQgbWlueSA9IE1hdGgubWluKHdwMC55LCB3cDEueSwgd3AyLnksIHdwMy55KTtcbiAgICAgICAgICAgIGxldCBtYXh4ID0gTWF0aC5tYXgod3AwLngsIHdwMS54LCB3cDIueCwgd3AzLngpO1xuICAgICAgICAgICAgbGV0IG1heHkgPSBNYXRoLm1heCh3cDAueSwgd3AxLnksIHdwMi55LCB3cDMueSk7XG5cbiAgICAgICAgICAgIGFhYmIueCA9IG1pbng7XG4gICAgICAgICAgICBhYWJiLnkgPSBtaW55O1xuICAgICAgICAgICAgYWFiYi53aWR0aCA9IG1heHggLSBtaW54O1xuICAgICAgICAgICAgYWFiYi5oZWlnaHQgPSBtYXh5IC0gbWlueTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb2xsaWRlciBpbnN0YW5jZW9mIGNjLkNpcmNsZUNvbGxpZGVyKSB7XG4gICAgICAgICAgICAvLyBjYWxjdWxhdGUgd29ybGQgcG9zaXRpb25cbiAgICAgICAgICAgIG1hdGgudmVjMi50cmFuc2Zvcm1NYXQ0KF92ZWMyLCBjb2xsaWRlci5vZmZzZXQsIG0pO1xuXG4gICAgICAgICAgICB3b3JsZC5wb3NpdGlvbi54ID0gX3ZlYzIueDtcbiAgICAgICAgICAgIHdvcmxkLnBvc2l0aW9uLnkgPSBfdmVjMi55O1xuXG4gICAgICAgICAgICAvLyBjYWxjdWxhdGUgd29ybGQgcmFkaXVzXG4gICAgICAgICAgICBsZXQgbW0gPSBtLm07XG4gICAgICAgICAgICBsZXQgdGVtcHggPSBtbVsxMl0sIHRlbXB5ID0gbW1bMTNdO1xuICAgICAgICAgICAgbW1bMTJdID0gbW1bMTNdID0gMDtcblxuICAgICAgICAgICAgX3ZlYzIueCA9IGNvbGxpZGVyLnJhZGl1cztcbiAgICAgICAgICAgIF92ZWMyLnkgPSAwO1xuXG4gICAgICAgICAgICBtYXRoLnZlYzIudHJhbnNmb3JtTWF0NChfdmVjMiwgX3ZlYzIsIG0pO1xuICAgICAgICAgICAgbGV0IGQgPSBNYXRoLnNxcnQoX3ZlYzIueCAqIF92ZWMyLnggKyBfdmVjMi55ICogX3ZlYzIueSk7XG5cbiAgICAgICAgICAgIHdvcmxkLnJhZGl1cyA9IGQ7XG5cbiAgICAgICAgICAgIGFhYmIueCA9IHdvcmxkLnBvc2l0aW9uLnggLSBkO1xuICAgICAgICAgICAgYWFiYi55ID0gd29ybGQucG9zaXRpb24ueSAtIGQ7XG4gICAgICAgICAgICBhYWJiLndpZHRoID0gZCAqIDI7XG4gICAgICAgICAgICBhYWJiLmhlaWdodCA9IGQgKiAyO1xuXG4gICAgICAgICAgICBtbVsxMl0gPSB0ZW1weDtcbiAgICAgICAgICAgIG1tWzEzXSA9IHRlbXB5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNvbGxpZGVyIGluc3RhbmNlb2YgY2MuUG9seWdvbkNvbGxpZGVyKSB7XG4gICAgICAgICAgICBsZXQgcG9pbnRzID0gY29sbGlkZXIucG9pbnRzO1xuICAgICAgICAgICAgbGV0IHdvcmxkUG9pbnRzID0gd29ybGQucG9pbnRzO1xuXG4gICAgICAgICAgICB3b3JsZFBvaW50cy5sZW5ndGggPSBwb2ludHMubGVuZ3RoO1xuXG4gICAgICAgICAgICBsZXQgbWlueCA9IDFlNiwgbWlueSA9IDFlNiwgbWF4eCA9IC0xZTYsIG1heHkgPSAtMWU2O1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBwb2ludHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF3b3JsZFBvaW50c1tpXSkge1xuICAgICAgICAgICAgICAgICAgICB3b3JsZFBvaW50c1tpXSA9IGNjLnYyKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgX3ZlYzIueCA9IHBvaW50c1tpXS54ICsgb2Zmc2V0Lng7XG4gICAgICAgICAgICAgICAgX3ZlYzIueSA9IHBvaW50c1tpXS55ICsgb2Zmc2V0Lnk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbWF0aC52ZWMyLnRyYW5zZm9ybU1hdDQoX3ZlYzIsIF92ZWMyLCBtKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsZXQgeCA9IF92ZWMyLng7XG4gICAgICAgICAgICAgICAgbGV0IHkgPSBfdmVjMi55O1xuXG4gICAgICAgICAgICAgICAgd29ybGRQb2ludHNbaV0ueCA9IHg7XG4gICAgICAgICAgICAgICAgd29ybGRQb2ludHNbaV0ueSA9IHk7XG5cbiAgICAgICAgICAgICAgICBpZiAoeCA+IG1heHgpIG1heHggPSB4O1xuICAgICAgICAgICAgICAgIGlmICh4IDwgbWlueCkgbWlueCA9IHg7XG4gICAgICAgICAgICAgICAgaWYgKHkgPiBtYXh5KSBtYXh5ID0geTtcbiAgICAgICAgICAgICAgICBpZiAoeSA8IG1pbnkpIG1pbnkgPSB5O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhYWJiLnggPSBtaW54O1xuICAgICAgICAgICAgYWFiYi55ID0gbWlueTtcbiAgICAgICAgICAgIGFhYmIud2lkdGggPSBtYXh4IC0gbWlueDtcbiAgICAgICAgICAgIGFhYmIuaGVpZ2h0ID0gbWF4eSAtIG1pbnk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgYWRkQ29sbGlkZXI6IGZ1bmN0aW9uIChjb2xsaWRlcikge1xuICAgICAgICBsZXQgY29sbGlkZXJzID0gdGhpcy5fY29sbGlkZXJzO1xuICAgICAgICBsZXQgaW5kZXggPSBjb2xsaWRlcnMuaW5kZXhPZihjb2xsaWRlcik7XG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gY29sbGlkZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBvdGhlciA9IGNvbGxpZGVyc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zaG91bGRDb2xsaWRlKGNvbGxpZGVyLCBvdGhlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRhY3QgPSBuZXcgQ29udGFjdChjb2xsaWRlciwgb3RoZXIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb250YWN0cy5wdXNoKGNvbnRhY3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29sbGlkZXJzLnB1c2goY29sbGlkZXIpO1xuICAgICAgICAgICAgdGhpcy5pbml0Q29sbGlkZXIoY29sbGlkZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29sbGlkZXIubm9kZS5vbihOb2RlRXZlbnQuR1JPVVBfQ0hBTkdFRCwgdGhpcy5vbk5vZGVHcm91cENoYW5nZWQsIHRoaXMpO1xuICAgIH0sXG5cbiAgICByZW1vdmVDb2xsaWRlcjogZnVuY3Rpb24gKGNvbGxpZGVyKSB7XG4gICAgICAgIGxldCBjb2xsaWRlcnMgPSB0aGlzLl9jb2xsaWRlcnM7XG4gICAgICAgIGxldCBpbmRleCA9IGNvbGxpZGVycy5pbmRleE9mKGNvbGxpZGVyKTtcbiAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICAgIGNvbGxpZGVycy5zcGxpY2UoaW5kZXgsIDEpO1xuXG4gICAgICAgICAgICBsZXQgY29udGFjdHMgPSB0aGlzLl9jb250YWN0cztcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBjb250YWN0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgIGxldCBjb250YWN0ID0gY29udGFjdHNbaV07XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRhY3QuY29sbGlkZXIxID09PSBjb2xsaWRlciB8fCBjb250YWN0LmNvbGxpZGVyMiA9PT0gY29sbGlkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRhY3QudG91Y2hpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RvQ29sbGlkZShDb2xsaXNpb25UeXBlLkNvbGxpc2lvbkV4aXQsIGNvbnRhY3QpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29udGFjdHMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29sbGlkZXIubm9kZS5vZmYoTm9kZUV2ZW50LkdST1VQX0NIQU5HRUQsIHRoaXMub25Ob2RlR3JvdXBDaGFuZ2VkLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNjLmVycm9ySUQoNjYwMCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgb25Ob2RlR3JvdXBDaGFuZ2VkOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICBsZXQgY29sbGlkZXJzID0gbm9kZS5nZXRDb21wb25lbnRzKGNjLkNvbGxpZGVyKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGNvbGxpZGVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBjb2xsaWRlciA9IGNvbGxpZGVyc1tpXTtcbiAgICAgICAgICAgIGlmKGNjLlBoeXNpY3NDb2xsaWRlciAmJiBjb2xsaWRlciBpbnN0YW5jZW9mIGNjLlBoeXNpY3NDb2xsaWRlcikge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZW1vdmVDb2xsaWRlcihjb2xsaWRlcik7XG4gICAgICAgICAgICB0aGlzLmFkZENvbGxpZGVyKGNvbGxpZGVyKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBkcmF3Q29sbGlkZXJzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5fZW5hYmxlZERlYnVnRHJhdykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY2hlY2tEZWJ1Z0RyYXdWYWxpZCgpO1xuXG4gICAgICAgIGxldCBkZWJ1Z0RyYXdlciA9IHRoaXMuX2RlYnVnRHJhd2VyO1xuICAgICAgICBkZWJ1Z0RyYXdlci5jbGVhcigpO1xuXG4gICAgICAgIGxldCBjb2xsaWRlcnMgPSB0aGlzLl9jb2xsaWRlcnM7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBjb2xsaWRlcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgY29sbGlkZXIgPSBjb2xsaWRlcnNbaV07XG5cbiAgICAgICAgICAgIGRlYnVnRHJhd2VyLnN0cm9rZUNvbG9yID0gY2MuQ29sb3IuV0hJVEU7XG4gICAgICAgICAgICBpZiAoY29sbGlkZXIgaW5zdGFuY2VvZiBjYy5Cb3hDb2xsaWRlciB8fCBjb2xsaWRlciBpbnN0YW5jZW9mIGNjLlBvbHlnb25Db2xsaWRlcikge1xuICAgICAgICAgICAgICAgIGxldCBwcyA9IGNvbGxpZGVyLndvcmxkLnBvaW50cztcbiAgICAgICAgICAgICAgICBpZiAocHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBkZWJ1Z0RyYXdlci5tb3ZlVG8ocHNbMF0ueCwgcHNbMF0ueSk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAxOyBqIDwgcHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnRHJhd2VyLmxpbmVUbyhwc1tqXS54LCBwc1tqXS55KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkZWJ1Z0RyYXdlci5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICBkZWJ1Z0RyYXdlci5zdHJva2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjb2xsaWRlciBpbnN0YW5jZW9mIGNjLkNpcmNsZUNvbGxpZGVyKSB7XG4gICAgICAgICAgICAgICAgZGVidWdEcmF3ZXIuY2lyY2xlKGNvbGxpZGVyLndvcmxkLnBvc2l0aW9uLngsIGNvbGxpZGVyLndvcmxkLnBvc2l0aW9uLnksIGNvbGxpZGVyLndvcmxkLnJhZGl1cyk7XG4gICAgICAgICAgICAgICAgZGVidWdEcmF3ZXIuc3Ryb2tlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmVuYWJsZWREcmF3Qm91bmRpbmdCb3gpIHtcbiAgICAgICAgICAgICAgICBsZXQgYWFiYiA9IGNvbGxpZGVyLndvcmxkLmFhYmI7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZGVidWdEcmF3ZXIuc3Ryb2tlQ29sb3IgPSBjYy5Db2xvci5CTFVFO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGRlYnVnRHJhd2VyLm1vdmVUbyhhYWJiLnhNaW4sIGFhYmIueU1pbik7XG4gICAgICAgICAgICAgICAgZGVidWdEcmF3ZXIubGluZVRvKGFhYmIueE1pbiwgYWFiYi55TWF4KTtcbiAgICAgICAgICAgICAgICBkZWJ1Z0RyYXdlci5saW5lVG8oYWFiYi54TWF4LCBhYWJiLnlNYXgpO1xuICAgICAgICAgICAgICAgIGRlYnVnRHJhd2VyLmxpbmVUbyhhYWJiLnhNYXgsIGFhYmIueU1pbik7XG5cbiAgICAgICAgICAgICAgICBkZWJ1Z0RyYXdlci5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIGRlYnVnRHJhd2VyLnN0cm9rZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9jaGVja0RlYnVnRHJhd1ZhbGlkICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9kZWJ1Z0RyYXdlciB8fCAhdGhpcy5fZGVidWdEcmF3ZXIuaXNWYWxpZCkge1xuICAgICAgICAgICAgbGV0IG5vZGUgPSBuZXcgY2MuTm9kZSgnQ09MTElTSU9OX01BTkFHRVJfREVCVUdfRFJBVycpO1xuICAgICAgICAgICAgbm9kZS56SW5kZXggPSBjYy5tYWNyby5NQVhfWklOREVYO1xuICAgICAgICAgICAgY2MuZ2FtZS5hZGRQZXJzaXN0Um9vdE5vZGUobm9kZSk7XG4gICAgICAgICAgICB0aGlzLl9kZWJ1Z0RyYXdlciA9IG5vZGUuYWRkQ29tcG9uZW50KGNjLkdyYXBoaWNzKTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG4vKipcbiAqICEjZW5cbiAqICEjemhcbiAqIOaYr+WQpue7mOWItueisOaSnue7hOS7tueahOW9oueKtu+8jOm7mOiupOS4uuS4jee7mOWItlxuICogQHByb3BlcnR5IHtCb29sZWFufSBlbmFibGVkRGVidWdEcmF3XG4gKiBAZGVmYXVsdCBmYWxzZVxuICovXG5jYy5qcy5nZXRzZXQoQ29sbGlzaW9uTWFuYWdlci5wcm90b3R5cGUsICdlbmFibGVkRGVidWdEcmF3JywgXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5hYmxlZERlYnVnRHJhdztcbiAgICB9LFxuICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgJiYgIXRoaXMuX2VuYWJsZWREZWJ1Z0RyYXcpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrRGVidWdEcmF3VmFsaWQoKTtcbiAgICAgICAgICAgIHRoaXMuX2RlYnVnRHJhd2VyLm5vZGUuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghdmFsdWUgJiYgdGhpcy5fZW5hYmxlZERlYnVnRHJhdykge1xuICAgICAgICAgICAgdGhpcy5fZGVidWdEcmF3ZXIuY2xlYXIodHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLl9kZWJ1Z0RyYXdlci5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZW5hYmxlZERlYnVnRHJhdyA9IHZhbHVlO1xuICAgIH1cbik7XG5cblxuY2MuQ29sbGlzaW9uTWFuYWdlciA9IG1vZHVsZS5leHBvcnRzID0gQ29sbGlzaW9uTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcbiBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxuXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxudmFyIENvbnRhY3QgPSByZXF1aXJlKCcuL0NDQ29udGFjdCcpO1xudmFyIENvbGxpc2lvblR5cGUgPSBDb250YWN0LkNvbGxpc2lvblR5cGU7XG52YXIgTm9kZUV2ZW50ID0gcmVxdWlyZSgnLi4vQ0NOb2RlJykuRXZlbnRUeXBlO1xuXG52YXIgbWF0aCA9IGNjLnZtYXRoO1xuXG52YXIgX3ZlYzIgPSBjYy52MigpO1xuXG5mdW5jdGlvbiBvYmJBcHBseU1hdHJpeChyZWN0LCBtYXQ0LCBvdXRfYmwsIG91dF90bCwgb3V0X3RyLCBvdXRfYnIpIHtcbiAgICB2YXIgeCA9IHJlY3QueDtcbiAgICB2YXIgeSA9IHJlY3QueTtcbiAgICB2YXIgd2lkdGggPSByZWN0LndpZHRoO1xuICAgIHZhciBoZWlnaHQgPSByZWN0LmhlaWdodDtcblxuICAgIHZhciBtYXQ0bSA9IG1hdDQubTtcbiAgICB2YXIgbTAwID0gbWF0NG1bMF0sXG4gICAgICAgIG0wMSA9IG1hdDRtWzFdLFxuICAgICAgICBtMDQgPSBtYXQ0bVs0XSxcbiAgICAgICAgbTA1ID0gbWF0NG1bNV07XG4gICAgdmFyIG0xMiA9IG1hdDRtWzEyXSxcbiAgICAgICAgbTEzID0gbWF0NG1bMTNdO1xuXG4gICAgdmFyIHR4ID0gbTAwICogeCArIG0wNCAqIHkgKyBtMTI7XG4gICAgdmFyIHR5ID0gbTAxICogeCArIG0wNSAqIHkgKyBtMTM7XG4gICAgdmFyIHhhID0gbTAwICogd2lkdGg7XG4gICAgdmFyIHhiID0gbTAxICogd2lkdGg7XG4gICAgdmFyIHljID0gbTA0ICogaGVpZ2h0O1xuICAgIHZhciB5ZCA9IG0wNSAqIGhlaWdodDtcblxuICAgIG91dF90bC54ID0gdHg7XG4gICAgb3V0X3RsLnkgPSB0eTtcbiAgICBvdXRfdHIueCA9IHhhICsgdHg7XG4gICAgb3V0X3RyLnkgPSB4YiArIHR5O1xuICAgIG91dF9ibC54ID0geWMgKyB0eDtcbiAgICBvdXRfYmwueSA9IHlkICsgdHk7XG4gICAgb3V0X2JyLnggPSB4YSArIHljICsgdHg7XG4gICAgb3V0X2JyLnkgPSB4YiArIHlkICsgdHk7XG59XG5cbi8qKlxuICogISNlblxuICogQSBzaW1wbGUgY29sbGlzaW9uIG1hbmFnZXIgY2xhc3MuIFxuICogSXQgd2lsbCBjYWxjdWxhdGUgd2hldGhlciB0aGUgY29sbGlkZXIgY29sbGlkZXMgb3RoZXIgY29sbGlkZXJzLCBpZiBjb2xsaWRlcyB0aGVuIGNhbGwgdGhlIGNhbGxiYWNrcy5cbiAqICEjemhcbiAqIOS4gOS4queugOWNleeahOeisOaSnue7hOS7tueuoeeQhuexu++8jOeUqOS6juWkhOeQhuiKgueCueS5i+mXtOeahOeisOaSnue7hOS7tuaYr+WQpuS6p+eUn+S6hueisOaSnu+8jOW5tuiwg+eUqOebuOW6lOWbnuiwg+WHveaVsOOAglxuICpcbiAqIEBjbGFzcyBDb2xsaXNpb25NYW5hZ2VyXG4gKiBAdXNlcyBFdmVudFRhcmdldFxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBHZXQgdGhlIGNvbGxpc2lvbiBtYW5hZ2VyLlxuICogbGV0IG1hbmFnZXIgPSBjYy5kaXJlY3Rvci5nZXRDb2xsaXNpb25NYW5hZ2VyKCk7XG4gKlxuICogLy8gRW5hYmxlZCB0aGUgY29saWRlciBtYW5hZ2VyLlxuICogbWFuYWdlci5lbmFibGVkID0gdHJ1ZTtcbiAqXG4gKiAvLyBFbmFibGVkIGRyYXcgY29sbGlkZXJcbiAqIG1hbmFnZXIuZW5hYmxlZERlYnVnRHJhdyA9IHRydWU7XG4gKlxuICogLy8gRW5hYmxlZCBkcmF3IGNvbGxpZGVyIGJvdW5kaW5nIGJveFxuICogbWFuYWdlci5lbmFibGVkRHJhd0JvdW5kaW5nQm94ID0gdHJ1ZTtcbiAqXG4gKiBcbiAqIC8vIENvbGxpc2lvbiBjYWxsYmFja1xuICogb25Db2xsaXNpb25FbnRlcjogZnVuY3Rpb24gKG90aGVyLCBzZWxmKSB7XG4gKiAgICAgdGhpcy5ub2RlLmNvbG9yID0gY2MuQ29sb3IuUkVEO1xuICogICAgIHRoaXMudG91Y2hpbmdOdW1iZXIgKys7XG4gKlxuICogICAgIC8vIGxldCB3b3JsZCA9IHNlbGYud29ybGQ7XG4gKiAgICAgLy8gbGV0IGFhYmIgPSB3b3JsZC5hYWJiO1xuICogICAgIC8vIGxldCBwcmVBYWJiID0gd29ybGQucHJlQWFiYjtcbiAqICAgICAvLyBsZXQgbSA9IHdvcmxkLm1hdHJpeDtcbiAqXG4gKiAgICAgLy8gZm9yIGNpcmNsZSBjb2xsaWRlclxuICogICAgIC8vIGxldCByID0gd29ybGQucmFkaXVzO1xuICogICAgIC8vIGxldCBwID0gd29ybGQucG9zaXRpb247XG4gKlxuICogICAgIC8vIGZvciBib3ggY29sbGlkZXIgYW5kIHBvbHlnb24gY29sbGlkZXJcbiAqICAgICAvLyBsZXQgcHMgPSB3b3JsZC5wb2ludHM7XG4gKiB9LFxuICogICBcbiAqIG9uQ29sbGlzaW9uU3RheTogZnVuY3Rpb24gKG90aGVyLCBzZWxmKSB7XG4gKiAgICAgY29uc29sZS5sb2coJ29uIGNvbGxpc2lvbiBzdGF5Jyk7XG4gKiB9LFxuICogICBcbiAqIG9uQ29sbGlzaW9uRXhpdDogZnVuY3Rpb24gKG90aGVyLCBzZWxmKSB7XG4gKiAgICAgdGhpcy50b3VjaGluZ051bWJlciAtLTtcbiAqICAgICBpZiAodGhpcy50b3VjaGluZ051bWJlciA9PT0gMCkge1xuICogICAgICAgICB0aGlzLm5vZGUuY29sb3IgPSBjYy5Db2xvci5XSElURTtcbiAqICAgICB9XG4gKiB9XG4gKi9cbnZhciBDb2xsaXNpb25NYW5hZ2VyID0gY2MuQ2xhc3Moe1xuICAgIG1peGluczogW2NjLkV2ZW50VGFyZ2V0XSxcblxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW5cbiAgICAgICAgICogISN6aFxuICAgICAgICAgKiDmmK/lkKblvIDlkK/norDmkp7nrqHnkIbvvIzpu5jorqTkuLrkuI3lvIDlkK9cbiAgICAgICAgICogQHByb3BlcnR5IHtCb29sZWFufSBlbmFibGVkXG4gICAgICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW5cbiAgICAgICAgICogISN6aFxuICAgICAgICAgKiDmmK/lkKbnu5jliLbnorDmkp7nu4Tku7bnmoTljIXlm7Tnm5LvvIzpu5jorqTkuLrkuI3nu5jliLZcbiAgICAgICAgICogQHByb3BlcnR5IHtCb29sZWFufSBlbmFibGVkRHJhd0JvdW5kaW5nQm94XG4gICAgICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICBlbmFibGVkRHJhd0JvdW5kaW5nQm94OiBmYWxzZVxuICAgIH0sXG5cbiAgICBjdG9yOiBmdW5jdGlvbiBjdG9yKCkge1xuICAgICAgICB0aGlzLl9jb250YWN0cyA9IFtdO1xuICAgICAgICB0aGlzLl9jb2xsaWRlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5fZGVidWdEcmF3ZXIgPSBudWxsO1xuICAgICAgICB0aGlzLl9lbmFibGVkRGVidWdEcmF3ID0gZmFsc2U7XG5cbiAgICAgICAgY2MuZGlyZWN0b3IuX3NjaGVkdWxlciAmJiBjYy5kaXJlY3Rvci5fc2NoZWR1bGVyLmVuYWJsZUZvclRhcmdldCh0aGlzKTtcbiAgICB9LFxuXG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoZHQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpID0gdm9pZCAwLFxuICAgICAgICAgICAgbCA9IHZvaWQgMDtcblxuICAgICAgICAvLyB1cGRhdGUgY29sbGlkZXJcbiAgICAgICAgdmFyIGNvbGxpZGVycyA9IHRoaXMuX2NvbGxpZGVycztcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGNvbGxpZGVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ29sbGlkZXIoY29sbGlkZXJzW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRvIGNvbGxpZGVcbiAgICAgICAgdmFyIGNvbnRhY3RzID0gdGhpcy5fY29udGFjdHM7XG4gICAgICAgIHZhciByZXN1bHRzID0gW107XG5cbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGNvbnRhY3RzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdmFyIGNvbGxpc2lvblR5cGUgPSBjb250YWN0c1tpXS51cGRhdGVTdGF0ZSgpO1xuICAgICAgICAgICAgaWYgKGNvbGxpc2lvblR5cGUgPT09IENvbGxpc2lvblR5cGUuTm9uZSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXN1bHRzLnB1c2goW2NvbGxpc2lvblR5cGUsIGNvbnRhY3RzW2ldXSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBoYW5kbGUgY29sbGlkZSByZXN1bHRzLCBlbWl0IG1lc3NhZ2VcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IHJlc3VsdHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gcmVzdWx0c1tpXTtcbiAgICAgICAgICAgIHRoaXMuX2RvQ29sbGlkZShyZXN1bHRbMF0sIHJlc3VsdFsxXSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkcmF3IGNvbGxpZGVyc1xuICAgICAgICB0aGlzLmRyYXdDb2xsaWRlcnMoKTtcbiAgICB9LFxuXG4gICAgX2RvQ29sbGlkZTogZnVuY3Rpb24gX2RvQ29sbGlkZShjb2xsaXNpb25UeXBlLCBjb250YWN0KSB7XG4gICAgICAgIHZhciBjb250YWN0RnVuYyA9IHZvaWQgMDtcbiAgICAgICAgc3dpdGNoIChjb2xsaXNpb25UeXBlKSB7XG4gICAgICAgICAgICBjYXNlIENvbGxpc2lvblR5cGUuQ29sbGlzaW9uRW50ZXI6XG4gICAgICAgICAgICAgICAgY29udGFjdEZ1bmMgPSAnb25Db2xsaXNpb25FbnRlcic7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIENvbGxpc2lvblR5cGUuQ29sbGlzaW9uU3RheTpcbiAgICAgICAgICAgICAgICBjb250YWN0RnVuYyA9ICdvbkNvbGxpc2lvblN0YXknO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBDb2xsaXNpb25UeXBlLkNvbGxpc2lvbkV4aXQ6XG4gICAgICAgICAgICAgICAgY29udGFjdEZ1bmMgPSAnb25Db2xsaXNpb25FeGl0JztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjb2xsaWRlcjEgPSBjb250YWN0LmNvbGxpZGVyMTtcbiAgICAgICAgdmFyIGNvbGxpZGVyMiA9IGNvbnRhY3QuY29sbGlkZXIyO1xuXG4gICAgICAgIHZhciBjb21wczEgPSBjb2xsaWRlcjEubm9kZS5fY29tcG9uZW50cztcbiAgICAgICAgdmFyIGNvbXBzMiA9IGNvbGxpZGVyMi5ub2RlLl9jb21wb25lbnRzO1xuXG4gICAgICAgIHZhciBpID0gdm9pZCAwLFxuICAgICAgICAgICAgbCA9IHZvaWQgMCxcbiAgICAgICAgICAgIGNvbXAgPSB2b2lkIDA7XG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBjb21wczEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBjb21wID0gY29tcHMxW2ldO1xuICAgICAgICAgICAgaWYgKGNvbXBbY29udGFjdEZ1bmNdKSB7XG4gICAgICAgICAgICAgICAgY29tcFtjb250YWN0RnVuY10oY29sbGlkZXIyLCBjb2xsaWRlcjEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGNvbXBzMi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGNvbXAgPSBjb21wczJbaV07XG4gICAgICAgICAgICBpZiAoY29tcFtjb250YWN0RnVuY10pIHtcbiAgICAgICAgICAgICAgICBjb21wW2NvbnRhY3RGdW5jXShjb2xsaWRlcjEsIGNvbGxpZGVyMik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgc2hvdWxkQ29sbGlkZTogZnVuY3Rpb24gc2hvdWxkQ29sbGlkZShjMSwgYzIpIHtcbiAgICAgICAgdmFyIG5vZGUxID0gYzEubm9kZSxcbiAgICAgICAgICAgIG5vZGUyID0gYzIubm9kZTtcbiAgICAgICAgdmFyIGNvbGxpc2lvbk1hdHJpeCA9IGNjLmdhbWUuY29sbGlzaW9uTWF0cml4O1xuICAgICAgICByZXR1cm4gbm9kZTEgIT09IG5vZGUyICYmIGNvbGxpc2lvbk1hdHJpeFtub2RlMS5ncm91cEluZGV4XVtub2RlMi5ncm91cEluZGV4XTtcbiAgICB9LFxuXG4gICAgaW5pdENvbGxpZGVyOiBmdW5jdGlvbiBpbml0Q29sbGlkZXIoY29sbGlkZXIpIHtcbiAgICAgICAgaWYgKCFjb2xsaWRlci53b3JsZCkge1xuICAgICAgICAgICAgdmFyIHdvcmxkID0gY29sbGlkZXIud29ybGQgPSB7fTtcbiAgICAgICAgICAgIHdvcmxkLmFhYmIgPSBjYy5yZWN0KCk7XG4gICAgICAgICAgICB3b3JsZC5wcmVBYWJiID0gY2MucmVjdCgpO1xuICAgICAgICAgICAgd29ybGQubWF0cml4ID0gbWF0aC5tYXQ0LmNyZWF0ZSgpO1xuXG4gICAgICAgICAgICB3b3JsZC5yYWRpdXMgPSAwO1xuXG4gICAgICAgICAgICBpZiAoY29sbGlkZXIgaW5zdGFuY2VvZiBjYy5Cb3hDb2xsaWRlcikge1xuICAgICAgICAgICAgICAgIHdvcmxkLnBvc2l0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICB3b3JsZC5wb2ludHMgPSBbY2MudjIoKSwgY2MudjIoKSwgY2MudjIoKSwgY2MudjIoKV07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbGxpZGVyIGluc3RhbmNlb2YgY2MuUG9seWdvbkNvbGxpZGVyKSB7XG4gICAgICAgICAgICAgICAgd29ybGQucG9zaXRpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgIHdvcmxkLnBvaW50cyA9IGNvbGxpZGVyLnBvaW50cy5tYXAoZnVuY3Rpb24gKHApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNjLnYyKHAueCwgcC55KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29sbGlkZXIgaW5zdGFuY2VvZiBjYy5DaXJjbGVDb2xsaWRlcikge1xuICAgICAgICAgICAgICAgIHdvcmxkLnBvc2l0aW9uID0gY2MudjIoKTtcbiAgICAgICAgICAgICAgICB3b3JsZC5wb2ludHMgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHVwZGF0ZUNvbGxpZGVyOiBmdW5jdGlvbiB1cGRhdGVDb2xsaWRlcihjb2xsaWRlcikge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gY29sbGlkZXIub2Zmc2V0O1xuICAgICAgICB2YXIgd29ybGQgPSBjb2xsaWRlci53b3JsZDtcbiAgICAgICAgdmFyIGFhYmIgPSB3b3JsZC5hYWJiO1xuXG4gICAgICAgIHZhciBtID0gd29ybGQubWF0cml4O1xuICAgICAgICBjb2xsaWRlci5ub2RlLmdldFdvcmxkTWF0cml4KG0pO1xuXG4gICAgICAgIHZhciBwcmVBYWJiID0gd29ybGQucHJlQWFiYjtcbiAgICAgICAgcHJlQWFiYi54ID0gYWFiYi54O1xuICAgICAgICBwcmVBYWJiLnkgPSBhYWJiLnk7XG4gICAgICAgIHByZUFhYmIud2lkdGggPSBhYWJiLndpZHRoO1xuICAgICAgICBwcmVBYWJiLmhlaWdodCA9IGFhYmIuaGVpZ2h0O1xuXG4gICAgICAgIGlmIChjb2xsaWRlciBpbnN0YW5jZW9mIGNjLkJveENvbGxpZGVyKSB7XG4gICAgICAgICAgICB2YXIgc2l6ZSA9IGNvbGxpZGVyLnNpemU7XG5cbiAgICAgICAgICAgIGFhYmIueCA9IG9mZnNldC54IC0gc2l6ZS53aWR0aCAvIDI7XG4gICAgICAgICAgICBhYWJiLnkgPSBvZmZzZXQueSAtIHNpemUuaGVpZ2h0IC8gMjtcbiAgICAgICAgICAgIGFhYmIud2lkdGggPSBzaXplLndpZHRoO1xuICAgICAgICAgICAgYWFiYi5oZWlnaHQgPSBzaXplLmhlaWdodDtcblxuICAgICAgICAgICAgdmFyIHdwcyA9IHdvcmxkLnBvaW50cztcbiAgICAgICAgICAgIHZhciB3cDAgPSB3cHNbMF0sXG4gICAgICAgICAgICAgICAgd3AxID0gd3BzWzFdLFxuICAgICAgICAgICAgICAgIHdwMiA9IHdwc1syXSxcbiAgICAgICAgICAgICAgICB3cDMgPSB3cHNbM107XG4gICAgICAgICAgICBvYmJBcHBseU1hdHJpeChhYWJiLCBtLCB3cDAsIHdwMSwgd3AyLCB3cDMpO1xuXG4gICAgICAgICAgICB2YXIgbWlueCA9IE1hdGgubWluKHdwMC54LCB3cDEueCwgd3AyLngsIHdwMy54KTtcbiAgICAgICAgICAgIHZhciBtaW55ID0gTWF0aC5taW4od3AwLnksIHdwMS55LCB3cDIueSwgd3AzLnkpO1xuICAgICAgICAgICAgdmFyIG1heHggPSBNYXRoLm1heCh3cDAueCwgd3AxLngsIHdwMi54LCB3cDMueCk7XG4gICAgICAgICAgICB2YXIgbWF4eSA9IE1hdGgubWF4KHdwMC55LCB3cDEueSwgd3AyLnksIHdwMy55KTtcblxuICAgICAgICAgICAgYWFiYi54ID0gbWlueDtcbiAgICAgICAgICAgIGFhYmIueSA9IG1pbnk7XG4gICAgICAgICAgICBhYWJiLndpZHRoID0gbWF4eCAtIG1pbng7XG4gICAgICAgICAgICBhYWJiLmhlaWdodCA9IG1heHkgLSBtaW55O1xuICAgICAgICB9IGVsc2UgaWYgKGNvbGxpZGVyIGluc3RhbmNlb2YgY2MuQ2lyY2xlQ29sbGlkZXIpIHtcbiAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSB3b3JsZCBwb3NpdGlvblxuICAgICAgICAgICAgbWF0aC52ZWMyLnRyYW5zZm9ybU1hdDQoX3ZlYzIsIGNvbGxpZGVyLm9mZnNldCwgbSk7XG5cbiAgICAgICAgICAgIHdvcmxkLnBvc2l0aW9uLnggPSBfdmVjMi54O1xuICAgICAgICAgICAgd29ybGQucG9zaXRpb24ueSA9IF92ZWMyLnk7XG5cbiAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSB3b3JsZCByYWRpdXNcbiAgICAgICAgICAgIHZhciBtbSA9IG0ubTtcbiAgICAgICAgICAgIHZhciB0ZW1weCA9IG1tWzEyXSxcbiAgICAgICAgICAgICAgICB0ZW1weSA9IG1tWzEzXTtcbiAgICAgICAgICAgIG1tWzEyXSA9IG1tWzEzXSA9IDA7XG5cbiAgICAgICAgICAgIF92ZWMyLnggPSBjb2xsaWRlci5yYWRpdXM7XG4gICAgICAgICAgICBfdmVjMi55ID0gMDtcblxuICAgICAgICAgICAgbWF0aC52ZWMyLnRyYW5zZm9ybU1hdDQoX3ZlYzIsIF92ZWMyLCBtKTtcbiAgICAgICAgICAgIHZhciBkID0gTWF0aC5zcXJ0KF92ZWMyLnggKiBfdmVjMi54ICsgX3ZlYzIueSAqIF92ZWMyLnkpO1xuXG4gICAgICAgICAgICB3b3JsZC5yYWRpdXMgPSBkO1xuXG4gICAgICAgICAgICBhYWJiLnggPSB3b3JsZC5wb3NpdGlvbi54IC0gZDtcbiAgICAgICAgICAgIGFhYmIueSA9IHdvcmxkLnBvc2l0aW9uLnkgLSBkO1xuICAgICAgICAgICAgYWFiYi53aWR0aCA9IGQgKiAyO1xuICAgICAgICAgICAgYWFiYi5oZWlnaHQgPSBkICogMjtcblxuICAgICAgICAgICAgbW1bMTJdID0gdGVtcHg7XG4gICAgICAgICAgICBtbVsxM10gPSB0ZW1weTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2xsaWRlciBpbnN0YW5jZW9mIGNjLlBvbHlnb25Db2xsaWRlcikge1xuICAgICAgICAgICAgdmFyIHBvaW50cyA9IGNvbGxpZGVyLnBvaW50cztcbiAgICAgICAgICAgIHZhciB3b3JsZFBvaW50cyA9IHdvcmxkLnBvaW50cztcblxuICAgICAgICAgICAgd29ybGRQb2ludHMubGVuZ3RoID0gcG9pbnRzLmxlbmd0aDtcblxuICAgICAgICAgICAgdmFyIF9taW54ID0gMWU2LFxuICAgICAgICAgICAgICAgIF9taW55ID0gMWU2LFxuICAgICAgICAgICAgICAgIF9tYXh4ID0gLTFlNixcbiAgICAgICAgICAgICAgICBfbWF4eSA9IC0xZTY7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoIXdvcmxkUG9pbnRzW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIHdvcmxkUG9pbnRzW2ldID0gY2MudjIoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfdmVjMi54ID0gcG9pbnRzW2ldLnggKyBvZmZzZXQueDtcbiAgICAgICAgICAgICAgICBfdmVjMi55ID0gcG9pbnRzW2ldLnkgKyBvZmZzZXQueTtcblxuICAgICAgICAgICAgICAgIG1hdGgudmVjMi50cmFuc2Zvcm1NYXQ0KF92ZWMyLCBfdmVjMiwgbSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgeCA9IF92ZWMyLng7XG4gICAgICAgICAgICAgICAgdmFyIHkgPSBfdmVjMi55O1xuXG4gICAgICAgICAgICAgICAgd29ybGRQb2ludHNbaV0ueCA9IHg7XG4gICAgICAgICAgICAgICAgd29ybGRQb2ludHNbaV0ueSA9IHk7XG5cbiAgICAgICAgICAgICAgICBpZiAoeCA+IF9tYXh4KSBfbWF4eCA9IHg7XG4gICAgICAgICAgICAgICAgaWYgKHggPCBfbWlueCkgX21pbnggPSB4O1xuICAgICAgICAgICAgICAgIGlmICh5ID4gX21heHkpIF9tYXh5ID0geTtcbiAgICAgICAgICAgICAgICBpZiAoeSA8IF9taW55KSBfbWlueSA9IHk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFhYmIueCA9IF9taW54O1xuICAgICAgICAgICAgYWFiYi55ID0gX21pbnk7XG4gICAgICAgICAgICBhYWJiLndpZHRoID0gX21heHggLSBfbWlueDtcbiAgICAgICAgICAgIGFhYmIuaGVpZ2h0ID0gX21heHkgLSBfbWlueTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBhZGRDb2xsaWRlcjogZnVuY3Rpb24gYWRkQ29sbGlkZXIoY29sbGlkZXIpIHtcbiAgICAgICAgdmFyIGNvbGxpZGVycyA9IHRoaXMuX2NvbGxpZGVycztcbiAgICAgICAgdmFyIGluZGV4ID0gY29sbGlkZXJzLmluZGV4T2YoY29sbGlkZXIpO1xuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNvbGxpZGVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgb3RoZXIgPSBjb2xsaWRlcnNbaV07XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2hvdWxkQ29sbGlkZShjb2xsaWRlciwgb3RoZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250YWN0ID0gbmV3IENvbnRhY3QoY29sbGlkZXIsIG90aGVyKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29udGFjdHMucHVzaChjb250YWN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbGxpZGVycy5wdXNoKGNvbGxpZGVyKTtcbiAgICAgICAgICAgIHRoaXMuaW5pdENvbGxpZGVyKGNvbGxpZGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbGxpZGVyLm5vZGUub24oTm9kZUV2ZW50LkdST1VQX0NIQU5HRUQsIHRoaXMub25Ob2RlR3JvdXBDaGFuZ2VkLCB0aGlzKTtcbiAgICB9LFxuXG4gICAgcmVtb3ZlQ29sbGlkZXI6IGZ1bmN0aW9uIHJlbW92ZUNvbGxpZGVyKGNvbGxpZGVyKSB7XG4gICAgICAgIHZhciBjb2xsaWRlcnMgPSB0aGlzLl9jb2xsaWRlcnM7XG4gICAgICAgIHZhciBpbmRleCA9IGNvbGxpZGVycy5pbmRleE9mKGNvbGxpZGVyKTtcbiAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICAgIGNvbGxpZGVycy5zcGxpY2UoaW5kZXgsIDEpO1xuXG4gICAgICAgICAgICB2YXIgY29udGFjdHMgPSB0aGlzLl9jb250YWN0cztcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBjb250YWN0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgIHZhciBjb250YWN0ID0gY29udGFjdHNbaV07XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRhY3QuY29sbGlkZXIxID09PSBjb2xsaWRlciB8fCBjb250YWN0LmNvbGxpZGVyMiA9PT0gY29sbGlkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRhY3QudG91Y2hpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RvQ29sbGlkZShDb2xsaXNpb25UeXBlLkNvbGxpc2lvbkV4aXQsIGNvbnRhY3QpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29udGFjdHMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29sbGlkZXIubm9kZS5vZmYoTm9kZUV2ZW50LkdST1VQX0NIQU5HRUQsIHRoaXMub25Ob2RlR3JvdXBDaGFuZ2VkLCB0aGlzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNjLmVycm9ySUQoNjYwMCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgb25Ob2RlR3JvdXBDaGFuZ2VkOiBmdW5jdGlvbiBvbk5vZGVHcm91cENoYW5nZWQobm9kZSkge1xuICAgICAgICB2YXIgY29sbGlkZXJzID0gbm9kZS5nZXRDb21wb25lbnRzKGNjLkNvbGxpZGVyKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNvbGxpZGVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjb2xsaWRlciA9IGNvbGxpZGVyc1tpXTtcbiAgICAgICAgICAgIGlmIChjYy5QaHlzaWNzQ29sbGlkZXIgJiYgY29sbGlkZXIgaW5zdGFuY2VvZiBjYy5QaHlzaWNzQ29sbGlkZXIpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQ29sbGlkZXIoY29sbGlkZXIpO1xuICAgICAgICAgICAgdGhpcy5hZGRDb2xsaWRlcihjb2xsaWRlcik7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZHJhd0NvbGxpZGVyczogZnVuY3Rpb24gZHJhd0NvbGxpZGVycygpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9lbmFibGVkRGVidWdEcmF3KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jaGVja0RlYnVnRHJhd1ZhbGlkKCk7XG5cbiAgICAgICAgdmFyIGRlYnVnRHJhd2VyID0gdGhpcy5fZGVidWdEcmF3ZXI7XG4gICAgICAgIGRlYnVnRHJhd2VyLmNsZWFyKCk7XG5cbiAgICAgICAgdmFyIGNvbGxpZGVycyA9IHRoaXMuX2NvbGxpZGVycztcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNvbGxpZGVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjb2xsaWRlciA9IGNvbGxpZGVyc1tpXTtcblxuICAgICAgICAgICAgZGVidWdEcmF3ZXIuc3Ryb2tlQ29sb3IgPSBjYy5Db2xvci5XSElURTtcbiAgICAgICAgICAgIGlmIChjb2xsaWRlciBpbnN0YW5jZW9mIGNjLkJveENvbGxpZGVyIHx8IGNvbGxpZGVyIGluc3RhbmNlb2YgY2MuUG9seWdvbkNvbGxpZGVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBzID0gY29sbGlkZXIud29ybGQucG9pbnRzO1xuICAgICAgICAgICAgICAgIGlmIChwcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnRHJhd2VyLm1vdmVUbyhwc1swXS54LCBwc1swXS55KTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCBwcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdEcmF3ZXIubGluZVRvKHBzW2pdLngsIHBzW2pdLnkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnRHJhd2VyLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnRHJhd2VyLnN0cm9rZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29sbGlkZXIgaW5zdGFuY2VvZiBjYy5DaXJjbGVDb2xsaWRlcikge1xuICAgICAgICAgICAgICAgIGRlYnVnRHJhd2VyLmNpcmNsZShjb2xsaWRlci53b3JsZC5wb3NpdGlvbi54LCBjb2xsaWRlci53b3JsZC5wb3NpdGlvbi55LCBjb2xsaWRlci53b3JsZC5yYWRpdXMpO1xuICAgICAgICAgICAgICAgIGRlYnVnRHJhd2VyLnN0cm9rZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5lbmFibGVkRHJhd0JvdW5kaW5nQm94KSB7XG4gICAgICAgICAgICAgICAgdmFyIGFhYmIgPSBjb2xsaWRlci53b3JsZC5hYWJiO1xuXG4gICAgICAgICAgICAgICAgZGVidWdEcmF3ZXIuc3Ryb2tlQ29sb3IgPSBjYy5Db2xvci5CTFVFO1xuXG4gICAgICAgICAgICAgICAgZGVidWdEcmF3ZXIubW92ZVRvKGFhYmIueE1pbiwgYWFiYi55TWluKTtcbiAgICAgICAgICAgICAgICBkZWJ1Z0RyYXdlci5saW5lVG8oYWFiYi54TWluLCBhYWJiLnlNYXgpO1xuICAgICAgICAgICAgICAgIGRlYnVnRHJhd2VyLmxpbmVUbyhhYWJiLnhNYXgsIGFhYmIueU1heCk7XG4gICAgICAgICAgICAgICAgZGVidWdEcmF3ZXIubGluZVRvKGFhYmIueE1heCwgYWFiYi55TWluKTtcblxuICAgICAgICAgICAgICAgIGRlYnVnRHJhd2VyLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgZGVidWdEcmF3ZXIuc3Ryb2tlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX2NoZWNrRGVidWdEcmF3VmFsaWQ6IGZ1bmN0aW9uIF9jaGVja0RlYnVnRHJhd1ZhbGlkKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2RlYnVnRHJhd2VyIHx8ICF0aGlzLl9kZWJ1Z0RyYXdlci5pc1ZhbGlkKSB7XG4gICAgICAgICAgICB2YXIgbm9kZSA9IG5ldyBjYy5Ob2RlKCdDT0xMSVNJT05fTUFOQUdFUl9ERUJVR19EUkFXJyk7XG4gICAgICAgICAgICBub2RlLnpJbmRleCA9IGNjLm1hY3JvLk1BWF9aSU5ERVg7XG4gICAgICAgICAgICBjYy5nYW1lLmFkZFBlcnNpc3RSb290Tm9kZShub2RlKTtcbiAgICAgICAgICAgIHRoaXMuX2RlYnVnRHJhd2VyID0gbm9kZS5hZGRDb21wb25lbnQoY2MuR3JhcGhpY3MpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbi8qKlxuICogISNlblxuICogISN6aFxuICog5piv5ZCm57uY5Yi256Kw5pKe57uE5Lu255qE5b2i54q277yM6buY6K6k5Li65LiN57uY5Yi2XG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGVuYWJsZWREZWJ1Z0RyYXdcbiAqIEBkZWZhdWx0IGZhbHNlXG4gKi9cbmNjLmpzLmdldHNldChDb2xsaXNpb25NYW5hZ2VyLnByb3RvdHlwZSwgJ2VuYWJsZWREZWJ1Z0RyYXcnLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VuYWJsZWREZWJ1Z0RyYXc7XG59LCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgJiYgIXRoaXMuX2VuYWJsZWREZWJ1Z0RyYXcpIHtcbiAgICAgICAgdGhpcy5fY2hlY2tEZWJ1Z0RyYXdWYWxpZCgpO1xuICAgICAgICB0aGlzLl9kZWJ1Z0RyYXdlci5ub2RlLmFjdGl2ZSA9IHRydWU7XG4gICAgfSBlbHNlIGlmICghdmFsdWUgJiYgdGhpcy5fZW5hYmxlZERlYnVnRHJhdykge1xuICAgICAgICB0aGlzLl9kZWJ1Z0RyYXdlci5jbGVhcih0cnVlKTtcbiAgICAgICAgdGhpcy5fZGVidWdEcmF3ZXIubm9kZS5hY3RpdmUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLl9lbmFibGVkRGVidWdEcmF3ID0gdmFsdWU7XG59KTtcblxuY2MuQ29sbGlzaW9uTWFuYWdlciA9IG1vZHVsZS5leHBvcnRzID0gQ29sbGlzaW9uTWFuYWdlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrTkRRMjlzYkdsemFXOXVUV0Z1WVdkbGNpNXFjeUpkTENKdVlXMWxjeUk2V3lKRGIyNTBZV04wSWl3aWNtVnhkV2x5WlNJc0lrTnZiR3hwYzJsdmJsUjVjR1VpTENKT2IyUmxSWFpsYm5RaUxDSkZkbVZ1ZEZSNWNHVWlMQ0p0WVhSb0lpd2lZMk1pTENKMmJXRjBhQ0lzSWw5MlpXTXlJaXdpZGpJaUxDSnZZbUpCY0hCc2VVMWhkSEpwZUNJc0luSmxZM1FpTENKdFlYUTBJaXdpYjNWMFgySnNJaXdpYjNWMFgzUnNJaXdpYjNWMFgzUnlJaXdpYjNWMFgySnlJaXdpZUNJc0lua2lMQ0ozYVdSMGFDSXNJbWhsYVdkb2RDSXNJbTFoZERSdElpd2liU0lzSW0wd01DSXNJbTB3TVNJc0ltMHdOQ0lzSW0wd05TSXNJbTB4TWlJc0ltMHhNeUlzSW5SNElpd2lkSGtpTENKNFlTSXNJbmhpSWl3aWVXTWlMQ0o1WkNJc0lrTnZiR3hwYzJsdmJrMWhibUZuWlhJaUxDSkRiR0Z6Y3lJc0ltMXBlR2x1Y3lJc0lrVjJaVzUwVkdGeVoyVjBJaXdpY0hKdmNHVnlkR2xsY3lJc0ltVnVZV0pzWldRaUxDSmxibUZpYkdWa1JISmhkMEp2ZFc1a2FXNW5RbTk0SWl3aVkzUnZjaUlzSWw5amIyNTBZV04wY3lJc0lsOWpiMnhzYVdSbGNuTWlMQ0pmWkdWaWRXZEVjbUYzWlhJaUxDSmZaVzVoWW14bFpFUmxZblZuUkhKaGR5SXNJbVJwY21WamRHOXlJaXdpWDNOamFHVmtkV3hsY2lJc0ltVnVZV0pzWlVadmNsUmhjbWRsZENJc0luVndaR0YwWlNJc0ltUjBJaXdpYVNJc0ltd2lMQ0pqYjJ4c2FXUmxjbk1pTENKc1pXNW5kR2dpTENKMWNHUmhkR1ZEYjJ4c2FXUmxjaUlzSW1OdmJuUmhZM1J6SWl3aWNtVnpkV3gwY3lJc0ltTnZiR3hwYzJsdmJsUjVjR1VpTENKMWNHUmhkR1ZUZEdGMFpTSXNJazV2Ym1VaUxDSndkWE5vSWl3aWNtVnpkV3gwSWl3aVgyUnZRMjlzYkdsa1pTSXNJbVJ5WVhkRGIyeHNhV1JsY25NaUxDSmpiMjUwWVdOMElpd2lZMjl1ZEdGamRFWjFibU1pTENKRGIyeHNhWE5wYjI1RmJuUmxjaUlzSWtOdmJHeHBjMmx2YmxOMFlYa2lMQ0pEYjJ4c2FYTnBiMjVGZUdsMElpd2lZMjlzYkdsa1pYSXhJaXdpWTI5c2JHbGtaWEl5SWl3aVkyOXRjSE14SWl3aWJtOWtaU0lzSWw5amIyMXdiMjVsYm5Seklpd2lZMjl0Y0hNeUlpd2lZMjl0Y0NJc0luTm9iM1ZzWkVOdmJHeHBaR1VpTENKak1TSXNJbU15SWl3aWJtOWtaVEVpTENKdWIyUmxNaUlzSW1OdmJHeHBjMmx2YmsxaGRISnBlQ0lzSW1kaGJXVWlMQ0puY205MWNFbHVaR1Y0SWl3aWFXNXBkRU52Ykd4cFpHVnlJaXdpWTI5c2JHbGtaWElpTENKM2IzSnNaQ0lzSW1GaFltSWlMQ0p3Y21WQllXSmlJaXdpYldGMGNtbDRJaXdpWTNKbFlYUmxJaXdpY21Ga2FYVnpJaXdpUW05NFEyOXNiR2xrWlhJaUxDSndiM05wZEdsdmJpSXNJbkJ2YVc1MGN5SXNJbEJ2YkhsbmIyNURiMnhzYVdSbGNpSXNJbTFoY0NJc0luQWlMQ0pEYVhKamJHVkRiMnhzYVdSbGNpSXNJbTltWm5ObGRDSXNJbWRsZEZkdmNteGtUV0YwY21sNElpd2ljMmw2WlNJc0luZHdjeUlzSW5kd01DSXNJbmR3TVNJc0luZHdNaUlzSW5kd015SXNJbTFwYm5naUxDSk5ZWFJvSWl3aWJXbHVJaXdpYldsdWVTSXNJbTFoZUhnaUxDSnRZWGdpTENKdFlYaDVJaXdpZG1Wak1pSXNJblJ5WVc1elptOXliVTFoZERRaUxDSnRiU0lzSW5SbGJYQjRJaXdpZEdWdGNIa2lMQ0prSWl3aWMzRnlkQ0lzSW5kdmNteGtVRzlwYm5Seklpd2lZV1JrUTI5c2JHbGtaWElpTENKcGJtUmxlQ0lzSW1sdVpHVjRUMllpTENKdmRHaGxjaUlzSW05dUlpd2lSMUpQVlZCZlEwaEJUa2RGUkNJc0ltOXVUbTlrWlVkeWIzVndRMmhoYm1kbFpDSXNJbkpsYlc5MlpVTnZiR3hwWkdWeUlpd2ljM0JzYVdObElpd2lkRzkxWTJocGJtY2lMQ0p2Wm1ZaUxDSmxjbkp2Y2tsRUlpd2laMlYwUTI5dGNHOXVaVzUwY3lJc0lrTnZiR3hwWkdWeUlpd2lVR2g1YzJsamMwTnZiR3hwWkdWeUlpd2lYMk5vWldOclJHVmlkV2RFY21GM1ZtRnNhV1FpTENKa1pXSjFaMFJ5WVhkbGNpSXNJbU5zWldGeUlpd2ljM1J5YjJ0bFEyOXNiM0lpTENKRGIyeHZjaUlzSWxkSVNWUkZJaXdpY0hNaUxDSnRiM1psVkc4aUxDSnFJaXdpYkdsdVpWUnZJaXdpWTJ4dmMyVWlMQ0p6ZEhKdmEyVWlMQ0pqYVhKamJHVWlMQ0pDVEZWRklpd2llRTFwYmlJc0lubE5hVzRpTENKNVRXRjRJaXdpZUUxaGVDSXNJbWx6Vm1Gc2FXUWlMQ0pPYjJSbElpd2lla2x1WkdWNElpd2liV0ZqY204aUxDSk5RVmhmV2tsT1JFVllJaXdpWVdSa1VHVnljMmx6ZEZKdmIzUk9iMlJsSWl3aVlXUmtRMjl0Y0c5dVpXNTBJaXdpUjNKaGNHaHBZM01pTENKcWN5SXNJbWRsZEhObGRDSXNJbkJ5YjNSdmRIbHdaU0lzSW5aaGJIVmxJaXdpWVdOMGFYWmxJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUVhsQ1FTeEpRVUZOUVN4VlFVRlZReXhSUVVGUkxHRkJRVklzUTBGQmFFSTdRVUZEUVN4SlFVRk5ReXhuUWtGQlowSkdMRkZCUVZGRkxHRkJRVGxDTzBGQlEwRXNTVUZCVFVNc1dVRkJXVVlzVVVGQlVTeFhRVUZTTEVWQlFYRkNSeXhUUVVGMlF6czdRVUZGUVN4SlFVRk5ReXhQUVVGUFF5eEhRVUZIUXl4TFFVRm9RanM3UVVGRlFTeEpRVUZKUXl4UlFVRlJSaXhIUVVGSFJ5eEZRVUZJTEVWQlFWbzdPMEZCUlVFc1UwRkJVME1zWTBGQlZDeERRVUY1UWtNc1NVRkJla0lzUlVGQkswSkRMRWxCUVM5Q0xFVkJRWEZEUXl4TlFVRnlReXhGUVVFMlEwTXNUVUZCTjBNc1JVRkJjVVJETEUxQlFYSkVMRVZCUVRaRVF5eE5RVUUzUkN4RlFVRnhSVHRCUVVOcVJTeFJRVUZKUXl4SlFVRkpUaXhMUVVGTFRTeERRVUZpTzBGQlEwRXNVVUZCU1VNc1NVRkJTVkFzUzBGQlMwOHNRMEZCWWp0QlFVTkJMRkZCUVVsRExGRkJRVkZTTEV0QlFVdFJMRXRCUVdwQ08wRkJRMEVzVVVGQlNVTXNVMEZCVTFRc1MwRkJTMU1zVFVGQmJFSTdPMEZCUlVFc1VVRkJTVU1zVVVGQlVWUXNTMEZCUzFVc1EwRkJha0k3UVVGRFFTeFJRVUZKUXl4TlFVRk5SaXhOUVVGTkxFTkJRVTRzUTBGQlZqdEJRVUZCTEZGQlFXOUNSeXhOUVVGTlNDeE5RVUZOTEVOQlFVNHNRMEZCTVVJN1FVRkJRU3hSUVVGdlEwa3NUVUZCVFVvc1RVRkJUU3hEUVVGT0xFTkJRVEZETzBGQlFVRXNVVUZCYjBSTExFMUJRVTFNTEUxQlFVMHNRMEZCVGl4RFFVRXhSRHRCUVVOQkxGRkJRVWxOTEUxQlFVMU9MRTFCUVUwc1JVRkJUaXhEUVVGV08wRkJRVUVzVVVGQmNVSlBMRTFCUVUxUUxFMUJRVTBzUlVGQlRpeERRVUV6UWpzN1FVRkZRU3hSUVVGSlVTeExRVUZMVGl4TlFVRk5UaXhEUVVGT0xFZEJRVlZSTEUxQlFVMVFMRU5CUVdoQ0xFZEJRVzlDVXl4SFFVRTNRanRCUVVOQkxGRkJRVWxITEV0QlFVdE9MRTFCUVUxUUxFTkJRVTRzUjBGQlZWTXNUVUZCVFZJc1EwRkJhRUlzUjBGQmIwSlZMRWRCUVRkQ08wRkJRMEVzVVVGQlNVY3NTMEZCUzFJc1RVRkJUVW9zUzBGQlpqdEJRVU5CTEZGQlFVbGhMRXRCUVV0U0xFMUJRVTFNTEV0QlFXWTdRVUZEUVN4UlFVRkpZeXhMUVVGTFVpeE5RVUZOVEN4TlFVRm1PMEZCUTBFc1VVRkJTV01zUzBGQlMxSXNUVUZCVFU0c1RVRkJaanM3UVVGRlFVNHNWMEZCVDBjc1EwRkJVQ3hIUVVGWFdTeEZRVUZZTzBGQlEwRm1MRmRCUVU5SkxFTkJRVkFzUjBGQlYxa3NSVUZCV0R0QlFVTkJaaXhYUVVGUFJTeERRVUZRTEVkQlFWZGpMRXRCUVV0R0xFVkJRV2hDTzBGQlEwRmtMRmRCUVU5SExFTkJRVkFzUjBGQlYyTXNTMEZCUzBZc1JVRkJhRUk3UVVGRFFXcENMRmRCUVU5SkxFTkJRVkFzUjBGQlYyZENMRXRCUVV0S0xFVkJRV2hDTzBGQlEwRm9RaXhYUVVGUFN5eERRVUZRTEVkQlFWZG5RaXhMUVVGTFNpeEZRVUZvUWp0QlFVTkJaQ3hYUVVGUFF5eERRVUZRTEVkQlFWZGpMRXRCUVV0RkxFVkJRVXdzUjBGQlZVb3NSVUZCY2tJN1FVRkRRV0lzVjBGQlQwVXNRMEZCVUN4SFFVRlhZeXhMUVVGTFJTeEZRVUZNTEVkQlFWVktMRVZCUVhKQ08wRkJRMGc3TzBGQlJVUTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJjVVJCTEVsQlFVbExMRzFDUVVGdFFqZENMRWRCUVVjNFFpeExRVUZJTEVOQlFWTTdRVUZETlVKRExGbEJRVkVzUTBGQlF5OUNMRWRCUVVkblF5eFhRVUZLTEVOQlJHOUNPenRCUVVjMVFrTXNaMEpCUVZrN1FVRkRVanM3T3pzN096dEJRVTlCUXl4cFFrRkJVeXhMUVZKRU8wRkJVMUk3T3pzN096czdRVUZQUVVNc1owTkJRWGRDTzBGQmFFSm9RaXhMUVVoblFqczdRVUZ6UWpWQ1F5eFZRVUZOTEdkQ1FVRlpPMEZCUTJRc1lVRkJTME1zVTBGQlRDeEhRVUZwUWl4RlFVRnFRanRCUVVOQkxHRkJRVXRETEZWQlFVd3NSMEZCYTBJc1JVRkJiRUk3UVVGRFFTeGhRVUZMUXl4WlFVRk1MRWRCUVc5Q0xFbEJRWEJDTzBGQlEwRXNZVUZCUzBNc2FVSkJRVXdzUjBGQmVVSXNTMEZCZWtJN08wRkJSVUY0UXl4WFFVRkhlVU1zVVVGQlNDeERRVUZaUXl4VlFVRmFMRWxCUVRCQ01VTXNSMEZCUjNsRExGRkJRVWdzUTBGQldVTXNWVUZCV2l4RFFVRjFRa01zWlVGQmRrSXNRMEZCZFVNc1NVRkJka01zUTBGQk1VSTdRVUZEU0N4TFFUZENNa0k3TzBGQkswSTFRa01zV1VGQlVTeG5Ra0ZCVlVNc1JVRkJWaXhGUVVGak8wRkJRMnhDTEZsQlFVa3NRMEZCUXl4TFFVRkxXQ3hQUVVGV0xFVkJRVzFDTzBGQlEyWTdRVUZEU0RzN1FVRkZSQ3haUVVGSldTeFZRVUZLTzBGQlFVRXNXVUZCVDBNc1ZVRkJVRHM3UVVGRlFUdEJRVU5CTEZsQlFVbERMRmxCUVZrc1MwRkJTMVlzVlVGQmNrSTdRVUZEUVN4aFFVRkxVU3hKUVVGSkxFTkJRVW9zUlVGQlQwTXNTVUZCU1VNc1ZVRkJWVU1zVFVGQk1VSXNSVUZCYTBOSUxFbEJRVWxETEVOQlFYUkRMRVZCUVhsRFJDeEhRVUY2UXl4RlFVRTRRenRCUVVNeFF5eHBRa0ZCUzBrc1kwRkJUQ3hEUVVGdlFrWXNWVUZCVlVZc1EwRkJWaXhEUVVGd1FqdEJRVU5JT3p0QlFVVkVPMEZCUTBFc1dVRkJTVXNzVjBGQlZ5eExRVUZMWkN4VFFVRndRanRCUVVOQkxGbEJRVWxsTEZWQlFWVXNSVUZCWkRzN1FVRkZRU3hoUVVGTFRpeEpRVUZKTEVOQlFVb3NSVUZCVDBNc1NVRkJTVWtzVTBGQlUwWXNUVUZCZWtJc1JVRkJhVU5JTEVsQlFVbERMRU5CUVhKRExFVkJRWGREUkN4SFFVRjRReXhGUVVFMlF6dEJRVU42UXl4blFrRkJTVThzWjBKQlFXZENSaXhUUVVGVFRDeERRVUZVTEVWQlFWbFJMRmRCUVZvc1JVRkJjRUk3UVVGRFFTeG5Ra0ZCU1VRc2EwSkJRV3RDZWtRc1kwRkJZekpFTEVsQlFYQkRMRVZCUVRCRE8wRkJRM1JETzBGQlEwZzdPMEZCUlVSSUxHOUNRVUZSU1N4SlFVRlNMRU5CUVdFc1EwRkJRMGdzWVVGQlJDeEZRVUZuUWtZc1UwRkJVMHdzUTBGQlZDeERRVUZvUWl4RFFVRmlPMEZCUTBnN08wRkJSVVE3UVVGRFFTeGhRVUZMUVN4SlFVRkpMRU5CUVVvc1JVRkJUME1zU1VGQlNVc3NVVUZCVVVnc1RVRkJlRUlzUlVGQlowTklMRWxCUVVsRExFTkJRWEJETEVWQlFYVkRSQ3hIUVVGMlF5eEZRVUUwUXp0QlFVTjRReXhuUWtGQlNWY3NVMEZCVTB3c1VVRkJVVTRzUTBGQlVpeERRVUZpTzBGQlEwRXNhVUpCUVV0WkxGVkJRVXdzUTBGQlowSkVMRTlCUVU4c1EwRkJVQ3hEUVVGb1FpeEZRVUV5UWtFc1QwRkJUeXhEUVVGUUxFTkJRVE5DTzBGQlEwZzdPMEZCUlVRN1FVRkRRU3hoUVVGTFJTeGhRVUZNTzBGQlEwZ3NTMEZxUlRKQ096dEJRVzFGTlVKRUxHZENRVUZaTEc5Q1FVRlZUQ3hoUVVGV0xFVkJRWGxDVHl4UFFVRjZRaXhGUVVGclF6dEJRVU14UXl4WlFVRkpReXh2UWtGQlNqdEJRVU5CTEdkQ1FVRlJVaXhoUVVGU08wRkJRMGtzYVVKQlFVdDZSQ3hqUVVGamEwVXNZMEZCYmtJN1FVRkRTVVFzT0VKQlFXTXNhMEpCUVdRN1FVRkRRVHRCUVVOS0xHbENRVUZMYWtVc1kwRkJZMjFGTEdGQlFXNUNPMEZCUTBsR0xEaENRVUZqTEdsQ1FVRmtPMEZCUTBFN1FVRkRTaXhwUWtGQlMycEZMR05CUVdOdlJTeGhRVUZ1UWp0QlFVTkpTQ3c0UWtGQll5eHBRa0ZCWkR0QlFVTkJPMEZCVkZJN08wRkJXVUVzV1VGQlNVa3NXVUZCV1V3c1VVRkJVVXNzVTBGQmVFSTdRVUZEUVN4WlFVRkpReXhaUVVGWlRpeFJRVUZSVFN4VFFVRjRRanM3UVVGRlFTeFpRVUZKUXl4VFFVRlRSaXhWUVVGVlJ5eEpRVUZXTEVOQlFXVkRMRmRCUVRWQ08wRkJRMEVzV1VGQlNVTXNVMEZCVTBvc1ZVRkJWVVVzU1VGQlZpeERRVUZsUXl4WFFVRTFRanM3UVVGRlFTeFpRVUZKZGtJc1ZVRkJTanRCUVVGQkxGbEJRVTlETEZWQlFWQTdRVUZCUVN4WlFVRlZkMElzWVVGQlZqdEJRVU5CTEdGQlFVdDZRaXhKUVVGSkxFTkJRVW9zUlVGQlQwTXNTVUZCU1c5Q0xFOUJRVTlzUWl4TlFVRjJRaXhGUVVFclFrZ3NTVUZCU1VNc1EwRkJia01zUlVGQmMwTkVMRWRCUVhSRExFVkJRVEpETzBGQlEzWkRlVUlzYlVKQlFVOUtMRTlCUVU5eVFpeERRVUZRTEVOQlFWQTdRVUZEUVN4blFrRkJTWGxDTEV0QlFVdFdMRmRCUVV3c1EwRkJTaXhGUVVGMVFqdEJRVU51UWxVc2NVSkJRVXRXTEZkQlFVd3NSVUZCYTBKTExGTkJRV3hDTEVWQlFUWkNSQ3hUUVVFM1FqdEJRVU5JTzBGQlEwbzdPMEZCUlVRc1lVRkJTMjVDTEVsQlFVa3NRMEZCU2l4RlFVRlBReXhKUVVGSmRVSXNUMEZCVDNKQ0xFMUJRWFpDTEVWQlFTdENTQ3hKUVVGSlF5eERRVUZ1UXl4RlFVRnpRMFFzUjBGQmRFTXNSVUZCTWtNN1FVRkRka041UWl4dFFrRkJUMFFzVDBGQlQzaENMRU5CUVZBc1EwRkJVRHRCUVVOQkxHZENRVUZKZVVJc1MwRkJTMVlzVjBGQlRDeERRVUZLTEVWQlFYVkNPMEZCUTI1Q1ZTeHhRa0ZCUzFZc1YwRkJUQ3hGUVVGclFra3NVMEZCYkVJc1JVRkJOa0pETEZOQlFUZENPMEZCUTBnN1FVRkRTanRCUVVOS0xFdEJja2N5UWpzN1FVRjFSelZDVFN4dFFrRkJaU3gxUWtGQlZVTXNSVUZCVml4RlFVRmpReXhGUVVGa0xFVkJRV3RDTzBGQlF6ZENMRmxCUVVsRExGRkJRVkZHTEVkQlFVZE1MRWxCUVdZN1FVRkJRU3haUVVGeFFsRXNVVUZCVVVZc1IwRkJSMDRzU1VGQmFFTTdRVUZEUVN4WlFVRkpVeXhyUWtGQmEwSTNSU3hIUVVGSE9FVXNTVUZCU0N4RFFVRlJSQ3hsUVVFNVFqdEJRVU5CTEdWQlFVOUdMRlZCUVZWRExFdEJRVllzU1VGQmJVSkRMR2RDUVVGblFrWXNUVUZCVFVrc1ZVRkJkRUlzUlVGQmEwTklMRTFCUVUxSExGVkJRWGhETEVOQlFURkNPMEZCUTBnc1MwRXpSekpDT3p0QlFUWkhOVUpETEd0Q1FVRmpMSE5DUVVGVlF5eFJRVUZXTEVWQlFXOUNPMEZCUXpsQ0xGbEJRVWtzUTBGQlEwRXNVMEZCVTBNc1MwRkJaQ3hGUVVGeFFqdEJRVU5xUWl4blFrRkJTVUVzVVVGQlVVUXNVMEZCVTBNc1MwRkJWQ3hIUVVGcFFpeEZRVUUzUWp0QlFVTkJRU3hyUWtGQlRVTXNTVUZCVGl4SFFVRmhia1lzUjBGQlIwc3NTVUZCU0N4RlFVRmlPMEZCUTBFMlJTeHJRa0ZCVFVVc1QwRkJUaXhIUVVGblFuQkdMRWRCUVVkTExFbEJRVWdzUlVGQmFFSTdRVUZEUVRaRkxHdENRVUZOUnl4TlFVRk9MRWRCUVdWMFJpeExRVUZMVHl4SlFVRk1MRU5CUVZWblJpeE5RVUZXTEVWQlFXWTdPMEZCUlVGS0xHdENRVUZOU3l4TlFVRk9MRWRCUVdVc1EwRkJaanM3UVVGRlFTeG5Ra0ZCU1U0c2IwSkJRVzlDYWtZc1IwRkJSM2RHTEZkQlFUTkNMRVZCUVhkRE8wRkJRM0JEVGl4elFrRkJUVThzVVVGQlRpeEhRVUZwUWl4SlFVRnFRanRCUVVOQlVDeHpRa0ZCVFZFc1RVRkJUaXhIUVVGbExFTkJRVU14Uml4SFFVRkhSeXhGUVVGSUxFVkJRVVFzUlVGQlZVZ3NSMEZCUjBjc1JVRkJTQ3hGUVVGV0xFVkJRVzFDU0N4SFFVRkhSeXhGUVVGSUxFVkJRVzVDTEVWQlFUUkNTQ3hIUVVGSFJ5eEZRVUZJTEVWQlFUVkNMRU5CUVdZN1FVRkRTQ3hoUVVoRUxFMUJTVXNzU1VGQlNUaEZMRzlDUVVGdlFtcEdMRWRCUVVjeVJpeGxRVUV6UWl4RlFVRTBRenRCUVVNM1ExUXNjMEpCUVUxUExGRkJRVTRzUjBGQmFVSXNTVUZCYWtJN1FVRkRRVkFzYzBKQlFVMVJMRTFCUVU0c1IwRkJaVlFzVTBGQlUxTXNUVUZCVkN4RFFVRm5Ra1VzUjBGQmFFSXNRMEZCYjBJc1ZVRkJWVU1zUTBGQlZpeEZRVUZoTzBGQlF6VkRMREpDUVVGUE4wWXNSMEZCUjBjc1JVRkJTQ3hEUVVGTk1FWXNSVUZCUld4R0xFTkJRVklzUlVGQlYydEdMRVZCUVVWcVJpeERRVUZpTEVOQlFWQTdRVUZEU0N4cFFrRkdZeXhEUVVGbU8wRkJSMGdzWVVGTVNTeE5RVTFCTEVsQlFVbHhSU3h2UWtGQmIwSnFSaXhIUVVGSE9FWXNZMEZCTTBJc1JVRkJNa003UVVGRE5VTmFMSE5DUVVGTlR5eFJRVUZPTEVkQlFXbENla1lzUjBGQlIwY3NSVUZCU0N4RlFVRnFRanRCUVVOQkswVXNjMEpCUVUxUkxFMUJRVTRzUjBGQlpTeEpRVUZtTzBGQlEwZzdRVUZEU2p0QlFVTktMRXRCY2treVFqczdRVUYxU1RWQ2VFTXNiMEpCUVdkQ0xIZENRVUZWSzBJc1VVRkJWaXhGUVVGdlFqdEJRVU5vUXl4WlFVRkpZeXhUUVVGVFpDeFRRVUZUWXl4TlFVRjBRanRCUVVOQkxGbEJRVWxpTEZGQlFWRkVMRk5CUVZORExFdEJRWEpDTzBGQlEwRXNXVUZCU1VNc1QwRkJUMFFzVFVGQlRVTXNTVUZCYWtJN08wRkJSVUVzV1VGQlNXNUZMRWxCUVVsclJTeE5RVUZOUnl4TlFVRmtPMEZCUTBGS0xHbENRVUZUWWl4SlFVRlVMRU5CUVdNMFFpeGpRVUZrTEVOQlFUWkNhRVlzUTBGQk4wSTdPMEZCUlVFc1dVRkJTVzlGTEZWQlFWVkdMRTFCUVUxRkxFOUJRWEJDTzBGQlEwRkJMR2RDUVVGUmVrVXNRMEZCVWl4SFFVRlpkMFVzUzBGQlMzaEZMRU5CUVdwQ08wRkJRMEY1UlN4blFrRkJVWGhGTEVOQlFWSXNSMEZCV1hWRkxFdEJRVXQyUlN4RFFVRnFRanRCUVVOQmQwVXNaMEpCUVZGMlJTeExRVUZTTEVkQlFXZENjMFVzUzBGQlMzUkZMRXRCUVhKQ08wRkJRMEYxUlN4blFrRkJVWFJGTEUxQlFWSXNSMEZCYVVKeFJTeExRVUZMY2tVc1RVRkJkRUk3TzBGQlJVRXNXVUZCU1cxRkxHOUNRVUZ2UW1wR0xFZEJRVWQzUml4WFFVRXpRaXhGUVVGM1F6dEJRVU53UXl4blFrRkJTVk1zVDBGQlQyaENMRk5CUVZOblFpeEpRVUZ3UWpzN1FVRkZRV1FzYVVKQlFVdDRSU3hEUVVGTUxFZEJRVk52Uml4UFFVRlBjRVlzUTBGQlVDeEhRVUZYYzBZc1MwRkJTM0JHTEV0QlFVd3NSMEZCVnl4RFFVRXZRanRCUVVOQmMwVXNhVUpCUVV0MlJTeERRVUZNTEVkQlFWTnRSaXhQUVVGUGJrWXNRMEZCVUN4SFFVRlhjVVlzUzBGQlMyNUdMRTFCUVV3c1IwRkJXU3hEUVVGb1F6dEJRVU5CY1VVc2FVSkJRVXQwUlN4TFFVRk1MRWRCUVdGdlJpeExRVUZMY0VZc1MwRkJiRUk3UVVGRFFYTkZMR2xDUVVGTGNrVXNUVUZCVEN4SFFVRmpiVVlzUzBGQlMyNUdMRTFCUVc1Q096dEJRVVZCTEdkQ1FVRkpiMFlzVFVGQlRXaENMRTFCUVUxUkxFMUJRV2hDTzBGQlEwRXNaMEpCUVVsVExFMUJRVTFFTEVsQlFVa3NRMEZCU2l4RFFVRldPMEZCUVVFc1owSkJRV3RDUlN4TlFVRk5SaXhKUVVGSkxFTkJRVW9zUTBGQmVFSTdRVUZCUVN4blFrRkRTVWNzVFVGQlRVZ3NTVUZCU1N4RFFVRktMRU5CUkZZN1FVRkJRU3huUWtGRGEwSkpMRTFCUVUxS0xFbEJRVWtzUTBGQlNpeERRVVI0UWp0QlFVVkJPVVlzTWtKQlFXVXJSU3hKUVVGbUxFVkJRWEZDYmtVc1EwRkJja0lzUlVGQmQwSnRSaXhIUVVGNFFpeEZRVUUyUWtNc1IwRkJOMElzUlVGQmEwTkRMRWRCUVd4RExFVkJRWFZEUXl4SFFVRjJRenM3UVVGRlFTeG5Ra0ZCU1VNc1QwRkJUME1zUzBGQlMwTXNSMEZCVEN4RFFVRlRUaXhKUVVGSmVFWXNRMEZCWWl4RlFVRm5RbmxHTEVsQlFVbDZSaXhEUVVGd1FpeEZRVUYxUWpCR0xFbEJRVWt4Uml4RFFVRXpRaXhGUVVFNFFqSkdMRWxCUVVrelJpeERRVUZzUXl4RFFVRllPMEZCUTBFc1owSkJRVWtyUml4UFFVRlBSaXhMUVVGTFF5eEhRVUZNTEVOQlFWTk9MRWxCUVVsMlJpeERRVUZpTEVWQlFXZENkMFlzU1VGQlNYaEdMRU5CUVhCQ0xFVkJRWFZDZVVZc1NVRkJTWHBHTEVOQlFUTkNMRVZCUVRoQ01FWXNTVUZCU1RGR0xFTkJRV3hETEVOQlFWZzdRVUZEUVN4blFrRkJTU3RHTEU5QlFVOUlMRXRCUVV0SkxFZEJRVXdzUTBGQlUxUXNTVUZCU1hoR0xFTkJRV0lzUlVGQlowSjVSaXhKUVVGSmVrWXNRMEZCY0VJc1JVRkJkVUl3Uml4SlFVRkpNVVlzUTBGQk0wSXNSVUZCT0VJeVJpeEpRVUZKTTBZc1EwRkJiRU1zUTBGQldEdEJRVU5CTEdkQ1FVRkphMGNzVDBGQlQwd3NTMEZCUzBrc1IwRkJUQ3hEUVVGVFZDeEpRVUZKZGtZc1EwRkJZaXhGUVVGblFuZEdMRWxCUVVsNFJpeERRVUZ3UWl4RlFVRjFRbmxHTEVsQlFVbDZSaXhEUVVFelFpeEZRVUU0UWpCR0xFbEJRVWt4Uml4RFFVRnNReXhEUVVGWU96dEJRVVZCZFVVc2FVSkJRVXQ0UlN4RFFVRk1MRWRCUVZNMFJpeEpRVUZVTzBGQlEwRndRaXhwUWtGQlMzWkZMRU5CUVV3c1IwRkJVemhHTEVsQlFWUTdRVUZEUVhaQ0xHbENRVUZMZEVVc1MwRkJUQ3hIUVVGaE9FWXNUMEZCVDBvc1NVRkJjRUk3UVVGRFFYQkNMR2xDUVVGTGNrVXNUVUZCVEN4SFFVRmpLMFlzVDBGQlQwZ3NTVUZCY2tJN1FVRkRTQ3hUUVhSQ1JDeE5RWFZDU3l4SlFVRkpla0lzYjBKQlFXOUNha1lzUjBGQlJ6aEdMR05CUVROQ0xFVkJRVEpETzBGQlF6VkRPMEZCUTBFdlJpeHBRa0ZCU3l0SExFbEJRVXdzUTBGQlZVTXNZVUZCVml4RFFVRjNRamRITEV0QlFYaENMRVZCUVN0Q0swVXNVMEZCVTJNc1RVRkJlRU1zUlVGQlowUXZSU3hEUVVGb1JEczdRVUZGUVd0RkxHdENRVUZOVHl4UlFVRk9MRU5CUVdVNVJTeERRVUZtTEVkQlFXMUNWQ3hOUVVGTlV5eERRVUY2UWp0QlFVTkJkVVVzYTBKQlFVMVBMRkZCUVU0c1EwRkJaVGRGTEVOQlFXWXNSMEZCYlVKV0xFMUJRVTFWTEVOQlFYcENPenRCUVVWQk8wRkJRMEVzWjBKQlFVbHZSeXhMUVVGTGFFY3NSVUZCUlVFc1EwRkJXRHRCUVVOQkxHZENRVUZKYVVjc1VVRkJVVVFzUjBGQlJ5eEZRVUZJTEVOQlFWbzdRVUZCUVN4blFrRkJiMEpGTEZGQlFWRkdMRWRCUVVjc1JVRkJTQ3hEUVVFMVFqdEJRVU5CUVN4bFFVRkhMRVZCUVVnc1NVRkJVMEVzUjBGQlJ5eEZRVUZJTEVsQlFWTXNRMEZCYkVJN08wRkJSVUU1Unl4clFrRkJUVk1zUTBGQlRpeEhRVUZWYzBVc1UwRkJVMDBzVFVGQmJrSTdRVUZEUVhKR0xHdENRVUZOVlN4RFFVRk9MRWRCUVZVc1EwRkJWanM3UVVGRlFXSXNhVUpCUVVzclJ5eEpRVUZNTEVOQlFWVkRMR0ZCUVZZc1EwRkJkMEkzUnl4TFFVRjRRaXhGUVVFclFrRXNTMEZCTDBJc1JVRkJjME5qTEVOQlFYUkRPMEZCUTBFc1owSkJRVWx0Unl4SlFVRkpXQ3hMUVVGTFdTeEpRVUZNTEVOQlFWVnNTQ3hOUVVGTlV5eERRVUZPTEVkQlFWVlVMRTFCUVUxVExFTkJRV2hDTEVkQlFXOUNWQ3hOUVVGTlZTeERRVUZPTEVkQlFWVldMRTFCUVUxVkxFTkJRVGxETEVOQlFWSTdPMEZCUlVGelJTeHJRa0ZCVFVzc1RVRkJUaXhIUVVGbE5FSXNRMEZCWmpzN1FVRkZRV2hETEdsQ1FVRkxlRVVzUTBGQlRDeEhRVUZUZFVVc1RVRkJUVThzVVVGQlRpeERRVUZsT1VVc1EwRkJaaXhIUVVGdFFuZEhMRU5CUVRWQ08wRkJRMEZvUXl4cFFrRkJTM1pGTEVOQlFVd3NSMEZCVTNORkxFMUJRVTFQTEZGQlFVNHNRMEZCWlRkRkxFTkJRV1lzUjBGQmJVSjFSeXhEUVVFMVFqdEJRVU5CYUVNc2FVSkJRVXQwUlN4TFFVRk1MRWRCUVdGelJ5eEpRVUZKTEVOQlFXcENPMEZCUTBGb1F5eHBRa0ZCUzNKRkxFMUJRVXdzUjBGQlkzRkhMRWxCUVVrc1EwRkJiRUk3TzBGQlJVRklMR1ZCUVVjc1JVRkJTQ3hKUVVGVFF5eExRVUZVTzBGQlEwRkVMR1ZCUVVjc1JVRkJTQ3hKUVVGVFJTeExRVUZVTzBGQlEwZ3NVMEV6UWtrc1RVRTBRa0VzU1VGQlNXcERMRzlDUVVGdlFtcEdMRWRCUVVjeVJpeGxRVUV6UWl4RlFVRTBRenRCUVVNM1F5eG5Ra0ZCU1VRc1UwRkJVMVFzVTBGQlUxTXNUVUZCZEVJN1FVRkRRU3huUWtGQlNUSkNMR05CUVdOdVF5eE5RVUZOVVN4TlFVRjRRanM3UVVGRlFUSkNMSGRDUVVGWmNFVXNUVUZCV2l4SFFVRnhRbmxETEU5QlFVOTZReXhOUVVFMVFqczdRVUZGUVN4blFrRkJTWE5FTEZGQlFVOHNSMEZCV0R0QlFVRkJMR2RDUVVGblFrY3NVVUZCVHl4SFFVRjJRanRCUVVGQkxHZENRVUUwUWtNc1VVRkJUeXhEUVVGRExFZEJRWEJETzBGQlFVRXNaMEpCUVhsRFJTeFJRVUZQTEVOQlFVTXNSMEZCYWtRN1FVRkRRU3hwUWtGQlN5eEpRVUZKTDBRc1NVRkJTU3hEUVVGU0xFVkJRVmRETEVsQlFVa3lReXhQUVVGUGVrTXNUVUZCTTBJc1JVRkJiVU5JTEVsQlFVbERMRU5CUVhaRExFVkJRVEJEUkN4SFFVRXhReXhGUVVFclF6dEJRVU16UXl4dlFrRkJTU3hEUVVGRGRVVXNXVUZCV1haRkxFTkJRVm9zUTBGQlRDeEZRVUZ4UWp0QlFVTnFRblZGTEdkRFFVRlpka1VzUTBGQldpeEpRVUZwUWpsRExFZEJRVWRITEVWQlFVZ3NSVUZCYWtJN1FVRkRTRHM3UVVGRlJFUXNjMEpCUVUxVExFTkJRVTRzUjBGQlZTdEZMRTlCUVU4MVF5eERRVUZRTEVWQlFWVnVReXhEUVVGV0xFZEJRV052Uml4UFFVRlBjRVlzUTBGQkwwSTdRVUZEUVZRc2MwSkJRVTFWTEVOQlFVNHNSMEZCVlRoRkxFOUJRVTgxUXl4RFFVRlFMRVZCUVZWc1F5eERRVUZXTEVkQlFXTnRSaXhQUVVGUGJrWXNRMEZCTDBJN08wRkJSVUZpTEhGQ1FVRkxLMGNzU1VGQlRDeERRVUZWUXl4aFFVRldMRU5CUVhkQ04wY3NTMEZCZUVJc1JVRkJLMEpCTEV0QlFTOUNMRVZCUVhORFl5eERRVUYwUXpzN1FVRkZRU3h2UWtGQlNVd3NTVUZCU1ZRc1RVRkJUVk1zUTBGQlpEdEJRVU5CTEc5Q1FVRkpReXhKUVVGSlZpeE5RVUZOVlN4RFFVRmtPenRCUVVWQmVVY3NORUpCUVZsMlJTeERRVUZhTEVWQlFXVnVReXhEUVVGbUxFZEJRVzFDUVN4RFFVRnVRanRCUVVOQk1FY3NORUpCUVZsMlJTeERRVUZhTEVWQlFXVnNReXhEUVVGbUxFZEJRVzFDUVN4RFFVRnVRanM3UVVGRlFTeHZRa0ZCU1VRc1NVRkJTV2RITEV0QlFWSXNSVUZCWTBFc1VVRkJUMmhITEVOQlFWQTdRVUZEWkN4dlFrRkJTVUVzU1VGQlNUUkdMRXRCUVZJc1JVRkJZMEVzVVVGQlR6VkdMRU5CUVZBN1FVRkRaQ3h2UWtGQlNVTXNTVUZCU1dsSExFdEJRVklzUlVGQlkwRXNVVUZCVDJwSExFTkJRVkE3UVVGRFpDeHZRa0ZCU1VFc1NVRkJTVGhHTEV0QlFWSXNSVUZCWTBFc1VVRkJUemxHTEVOQlFWQTdRVUZEYWtJN08wRkJSVVIxUlN4cFFrRkJTM2hGTEVOQlFVd3NSMEZCVXpSR0xFdEJRVlE3UVVGRFFYQkNMR2xDUVVGTGRrVXNRMEZCVEN4SFFVRlRPRVlzUzBGQlZEdEJRVU5CZGtJc2FVSkJRVXQwUlN4TFFVRk1MRWRCUVdFNFJpeFJRVUZQU2l4TFFVRndRanRCUVVOQmNFSXNhVUpCUVV0eVJTeE5RVUZNTEVkQlFXTXJSaXhSUVVGUFNDeExRVUZ5UWp0QlFVTklPMEZCUTBvc1MwRXhUekpDT3p0QlFUUlBOVUpaTEdsQ1FVRmhMSEZDUVVGVmNrTXNVVUZCVml4RlFVRnZRanRCUVVNM1FpeFpRVUZKYWtNc1dVRkJXU3hMUVVGTFZpeFZRVUZ5UWp0QlFVTkJMRmxCUVVscFJpeFJRVUZSZGtVc1ZVRkJWWGRGTEU5QlFWWXNRMEZCYTBKMlF5eFJRVUZzUWl4RFFVRmFPMEZCUTBFc1dVRkJTWE5ETEZWQlFWVXNRMEZCUXl4RFFVRm1MRVZCUVd0Q08wRkJRMlFzYVVKQlFVc3NTVUZCU1hwRkxFbEJRVWtzUTBGQlVpeEZRVUZYUXl4SlFVRkpReXhWUVVGVlF5eE5RVUU1UWl4RlFVRnpRMGdzU1VGQlNVTXNRMEZCTVVNc1JVRkJOa05FTEVkQlFUZERMRVZCUVd0RU8wRkJRemxETEc5Q1FVRkpNa1VzVVVGQlVYcEZMRlZCUVZWR0xFTkJRVllzUTBGQldqdEJRVU5CTEc5Q1FVRkpMRXRCUVVzd1FpeGhRVUZNTEVOQlFXMUNVeXhSUVVGdVFpeEZRVUUyUW5kRExFdEJRVGRDTEVOQlFVb3NSVUZCZVVNN1FVRkRja01zZDBKQlFVazNSQ3hWUVVGVkxFbEJRVWxzUlN4UFFVRktMRU5CUVZsMVJpeFJRVUZhTEVWQlFYTkNkME1zUzBGQmRFSXNRMEZCWkR0QlFVTkJMSGxDUVVGTGNFWXNVMEZCVEN4RFFVRmxiVUlzU1VGQlppeERRVUZ2UWtrc1QwRkJjRUk3UVVGRFNEdEJRVU5LT3p0QlFVVkVXaXh6UWtGQlZWRXNTVUZCVml4RFFVRmxlVUlzVVVGQlpqdEJRVU5CTEdsQ1FVRkxSQ3haUVVGTUxFTkJRV3RDUXl4UlFVRnNRanRCUVVOSU96dEJRVVZFUVN4cFFrRkJVMklzU1VGQlZDeERRVUZqYzBRc1JVRkJaQ3hEUVVGcFFqZElMRlZCUVZVNFNDeGhRVUV6UWl4RlFVRXdReXhMUVVGTFF5eHJRa0ZCTDBNc1JVRkJiVVVzU1VGQmJrVTdRVUZEU0N4TFFUZFFNa0k3TzBGQksxQTFRa01zYjBKQlFXZENMSGRDUVVGVk5VTXNVVUZCVml4RlFVRnZRanRCUVVOb1F5eFpRVUZKYWtNc1dVRkJXU3hMUVVGTFZpeFZRVUZ5UWp0QlFVTkJMRmxCUVVscFJpeFJRVUZSZGtVc1ZVRkJWWGRGTEU5QlFWWXNRMEZCYTBKMlF5eFJRVUZzUWl4RFFVRmFPMEZCUTBFc1dVRkJTWE5ETEZOQlFWTXNRMEZCWWl4RlFVRm5RanRCUVVOYWRrVXNjMEpCUVZVNFJTeE5RVUZXTEVOQlFXbENVQ3hMUVVGcVFpeEZRVUYzUWl4RFFVRjRRanM3UVVGRlFTeG5Ra0ZCU1hCRkxGZEJRVmNzUzBGQlMyUXNVMEZCY0VJN1FVRkRRU3hwUWtGQlN5eEpRVUZKVXl4SlFVRkpTeXhUUVVGVFJpeE5RVUZVTEVkQlFXdENMRU5CUVM5Q0xFVkJRV3REU0N4TFFVRkxMRU5CUVhaRExFVkJRVEJEUVN4SFFVRXhReXhGUVVFclF6dEJRVU16UXl4dlFrRkJTV01zVlVGQlZWUXNVMEZCVTB3c1EwRkJWQ3hEUVVGa08wRkJRMEVzYjBKQlFVbGpMRkZCUVZGTExGTkJRVklzUzBGQmMwSm5RaXhSUVVGMFFpeEpRVUZyUTNKQ0xGRkJRVkZOTEZOQlFWSXNTMEZCYzBKbExGRkJRVFZFTEVWQlFYTkZPMEZCUTJ4RkxIZENRVUZKY2tJc1VVRkJVVzFGTEZGQlFWb3NSVUZCYzBJN1FVRkRiRUlzTmtKQlFVdHlSU3hWUVVGTUxFTkJRV2RDT1VRc1kwRkJZMjlGTEdGQlFUbENMRVZCUVRaRFNpeFBRVUUzUXp0QlFVTklPenRCUVVWRVZDdzJRa0ZCVXpKRkxFMUJRVlFzUTBGQlowSm9SaXhEUVVGb1FpeEZRVUZ0UWl4RFFVRnVRanRCUVVOSU8wRkJRMG83TzBGQlJVUnRReXh4UWtGQlUySXNTVUZCVkN4RFFVRmpORVFzUjBGQlpDeERRVUZyUW01SkxGVkJRVlU0U0N4aFFVRTFRaXhGUVVFeVF5eExRVUZMUXl4clFrRkJhRVFzUlVGQmIwVXNTVUZCY0VVN1FVRkRTQ3hUUVdoQ1JDeE5RV2xDU3p0QlFVTkVOVWdzWlVGQlIybEpMRTlCUVVnc1EwRkJWeXhKUVVGWU8wRkJRMGc3UVVGRFNpeExRWFJTTWtJN08wRkJkMUkxUWt3c2QwSkJRVzlDTERSQ1FVRlZlRVFzU1VGQlZpeEZRVUZuUWp0QlFVTm9ReXhaUVVGSmNFSXNXVUZCV1c5Q0xFdEJRVXM0UkN4aFFVRk1MRU5CUVcxQ2JFa3NSMEZCUjIxSkxGRkJRWFJDTEVOQlFXaENPenRCUVVWQkxHRkJRVXNzU1VGQlNYSkdMRWxCUVVrc1EwRkJVaXhGUVVGWFF5eEpRVUZKUXl4VlFVRlZReXhOUVVFNVFpeEZRVUZ6UTBnc1NVRkJTVU1zUTBGQk1VTXNSVUZCTmtORUxFZEJRVGRETEVWQlFXdEVPMEZCUXpsRExHZENRVUZKYlVNc1YwRkJWMnBETEZWQlFWVkdMRU5CUVZZc1EwRkJaanRCUVVOQkxHZENRVUZIT1VNc1IwRkJSMjlKTEdWQlFVZ3NTVUZCYzBKdVJDeHZRa0ZCYjBKcVJpeEhRVUZIYjBrc1pVRkJhRVFzUlVGQmFVVTdRVUZETjBRN1FVRkRTRHRCUVVORUxHbENRVUZMVUN4alFVRk1MRU5CUVc5Q05VTXNVVUZCY0VJN1FVRkRRU3hwUWtGQlMzRkRMRmRCUVV3c1EwRkJhVUp5UXl4UlFVRnFRanRCUVVOSU8wRkJRMG9zUzBGdVV6SkNPenRCUVhGVE5VSjBRaXh0UWtGQlpTeDVRa0ZCV1R0QlFVTjJRaXhaUVVGSkxFTkJRVU1zUzBGQlMyNUNMR2xDUVVGV0xFVkJRVFpDTzBGQlEzcENPMEZCUTBnN08wRkJSVVFzWVVGQlN6WkdMRzlDUVVGTU96dEJRVVZCTEZsQlFVbERMR05CUVdNc1MwRkJTeTlHTEZsQlFYWkNPMEZCUTBFclJpeHZRa0ZCV1VNc1MwRkJXanM3UVVGRlFTeFpRVUZKZGtZc1dVRkJXU3hMUVVGTFZpeFZRVUZ5UWpzN1FVRkZRU3hoUVVGTExFbEJRVWxSTEVsQlFVa3NRMEZCVWl4RlFVRlhReXhKUVVGSlF5eFZRVUZWUXl4TlFVRTVRaXhGUVVGelEwZ3NTVUZCU1VNc1EwRkJNVU1zUlVGQk5rTkVMRWRCUVRkRExFVkJRV3RFTzBGQlF6bERMR2RDUVVGSmJVTXNWMEZCVjJwRExGVkJRVlZHTEVOQlFWWXNRMEZCWmpzN1FVRkZRWGRHTEhkQ1FVRlpSU3hYUVVGYUxFZEJRVEJDZUVrc1IwRkJSM2xKTEV0QlFVZ3NRMEZCVTBNc1MwRkJia003UVVGRFFTeG5Ra0ZCU1hwRUxHOUNRVUZ2UW1wR0xFZEJRVWQzUml4WFFVRjJRaXhKUVVGelExQXNiMEpCUVc5Q2FrWXNSMEZCUnpKR0xHVkJRV3BGTEVWQlFXdEdPMEZCUXpsRkxHOUNRVUZKWjBRc1MwRkJTekZFTEZOQlFWTkRMRXRCUVZRc1EwRkJaVkVzVFVGQmVFSTdRVUZEUVN4dlFrRkJTV2xFTEVkQlFVY3hSaXhOUVVGSUxFZEJRVmtzUTBGQmFFSXNSVUZCYlVJN1FVRkRabkZHTEdkRFFVRlpUU3hOUVVGYUxFTkJRVzFDUkN4SFFVRkhMRU5CUVVnc1JVRkJUV2hKTEVOQlFYcENMRVZCUVRSQ1owa3NSMEZCUnl4RFFVRklMRVZCUVUwdlNDeERRVUZzUXp0QlFVTkJMSGxDUVVGTExFbEJRVWxwU1N4SlFVRkpMRU5CUVdJc1JVRkJaMEpCTEVsQlFVbEdMRWRCUVVjeFJpeE5RVUYyUWl4RlFVRXJRalJHTEVkQlFTOUNMRVZCUVc5RE8wRkJRMmhEVUN4dlEwRkJXVkVzVFVGQldpeERRVUZ0UWtnc1IwRkJSMFVzUTBGQlNDeEZRVUZOYkVrc1EwRkJla0lzUlVGQk5FSm5TU3hIUVVGSFJTeERRVUZJTEVWQlFVMXFTU3hEUVVGc1F6dEJRVU5JTzBGQlEwUXdTQ3huUTBGQldWTXNTMEZCV2p0QlFVTkJWQ3huUTBGQldWVXNUVUZCV2p0QlFVTklPMEZCUTBvc1lVRldSQ3hOUVZkTExFbEJRVWt2UkN4dlFrRkJiMEpxUml4SFFVRkhPRVlzWTBGQk0wSXNSVUZCTWtNN1FVRkROVU4zUXl3MFFrRkJXVmNzVFVGQldpeERRVUZ0UW1oRkxGTkJRVk5ETEV0QlFWUXNRMEZCWlU4c1VVRkJaaXhEUVVGM1FqbEZMRU5CUVRORExFVkJRVGhEYzBVc1UwRkJVME1zUzBGQlZDeERRVUZsVHl4UlFVRm1MRU5CUVhkQ04wVXNRMEZCZEVVc1JVRkJlVVZ4UlN4VFFVRlRReXhMUVVGVUxFTkJRV1ZMTEUxQlFYaEdPMEZCUTBFclF5dzBRa0ZCV1ZVc1RVRkJXanRCUVVOSU96dEJRVVZFTEdkQ1FVRkpMRXRCUVVzM1J5eHpRa0ZCVkN4RlFVRnBRenRCUVVNM1FpeHZRa0ZCU1dkRUxFOUJRVTlHTEZOQlFWTkRMRXRCUVZRc1EwRkJaVU1zU1VGQk1VSTdPMEZCUlVGdFJDdzBRa0ZCV1VVc1YwRkJXaXhIUVVFd1FuaEpMRWRCUVVkNVNTeExRVUZJTEVOQlFWTlRMRWxCUVc1RE96dEJRVVZCV2l3MFFrRkJXVTBzVFVGQldpeERRVUZ0UW5wRUxFdEJRVXRuUlN4SlFVRjRRaXhGUVVFNFFtaEZMRXRCUVV0cFJTeEpRVUZ1UXp0QlFVTkJaQ3cwUWtGQldWRXNUVUZCV2l4RFFVRnRRak5FTEV0QlFVdG5SU3hKUVVGNFFpeEZRVUU0UW1oRkxFdEJRVXRyUlN4SlFVRnVRenRCUVVOQlppdzBRa0ZCV1ZFc1RVRkJXaXhEUVVGdFFqTkVMRXRCUVV0dFJTeEpRVUY0UWl4RlFVRTRRbTVGTEV0QlFVdHJSU3hKUVVGdVF6dEJRVU5CWml3MFFrRkJXVkVzVFVGQldpeERRVUZ0UWpORUxFdEJRVXR0UlN4SlFVRjRRaXhGUVVFNFFtNUZMRXRCUVV0cFJTeEpRVUZ1UXpzN1FVRkZRV1FzTkVKQlFWbFRMRXRCUVZvN1FVRkRRVlFzTkVKQlFWbFZMRTFCUVZvN1FVRkRTRHRCUVVOS08wRkJRMG9zUzBGdVZqSkNPenRCUVhGV05VSllMSGRDUVhKV05FSXNhME5CY1ZaS08wRkJRM0JDTEZsQlFVa3NRMEZCUXl4TFFVRkxPVVlzV1VGQlRpeEpRVUZ6UWl4RFFVRkRMRXRCUVV0QkxGbEJRVXdzUTBGQmEwSm5TQ3hQUVVFM1F5eEZRVUZ6UkR0QlFVTnNSQ3huUWtGQlNXNUdMRTlCUVU4c1NVRkJTWEJGTEVkQlFVZDNTaXhKUVVGUUxFTkJRVmtzT0VKQlFWb3NRMEZCV0R0QlFVTkJjRVlzYVVKQlFVdHhSaXhOUVVGTUxFZEJRV042U2l4SFFVRkhNRW9zUzBGQlNDeERRVUZUUXl4VlFVRjJRanRCUVVOQk0wb3NaVUZCUnpoRkxFbEJRVWdzUTBGQlVUaEZMR3RDUVVGU0xFTkJRVEpDZUVZc1NVRkJNMEk3UVVGRFFTeHBRa0ZCU3pkQ0xGbEJRVXdzUjBGQmIwSTJRaXhMUVVGTGVVWXNXVUZCVEN4RFFVRnJRamRLTEVkQlFVYzRTaXhSUVVGeVFpeERRVUZ3UWp0QlFVTklPMEZCUTBvN1FVRTFWakpDTEVOQlFWUXNRMEZCZGtJN08wRkJLMVpCT3pzN096czdPMEZCVDBFNVNpeEhRVUZISzBvc1JVRkJTQ3hEUVVGTlF5eE5RVUZPTEVOQlFXRnVTU3hwUWtGQmFVSnZTU3hUUVVFNVFpeEZRVUY1UXl4clFrRkJla01zUlVGRFNTeFpRVUZaTzBGQlExSXNWMEZCVHl4TFFVRkxla2dzYVVKQlFWbzdRVUZEU0N4RFFVaE1MRVZCU1Vrc1ZVRkJWVEJJTEV0QlFWWXNSVUZCYVVJN1FVRkRZaXhSUVVGSlFTeFRRVUZUTEVOQlFVTXNTMEZCU3pGSUxHbENRVUZ1UWl4RlFVRnpRenRCUVVOc1F5eGhRVUZMTmtZc2IwSkJRVXc3UVVGRFFTeGhRVUZMT1VZc1dVRkJUQ3hEUVVGclFqWkNMRWxCUVd4Q0xFTkJRWFZDSzBZc1RVRkJka0lzUjBGQlowTXNTVUZCYUVNN1FVRkRTQ3hMUVVoRUxFMUJTVXNzU1VGQlNTeERRVUZEUkN4TFFVRkVMRWxCUVZVc1MwRkJTekZJTEdsQ1FVRnVRaXhGUVVGelF6dEJRVU4yUXl4aFFVRkxSQ3haUVVGTUxFTkJRV3RDWjBjc1MwRkJiRUlzUTBGQmQwSXNTVUZCZUVJN1FVRkRRU3hoUVVGTGFFY3NXVUZCVEN4RFFVRnJRalpDTEVsQlFXeENMRU5CUVhWQ0swWXNUVUZCZGtJc1IwRkJaME1zUzBGQmFFTTdRVUZEU0RzN1FVRkZSQ3hUUVVGTE0wZ3NhVUpCUVV3c1IwRkJlVUl3U0N4TFFVRjZRanRCUVVOSUxFTkJaa3c3TzBGQmJVSkJiRXNzUjBGQlJ6WkNMR2RDUVVGSUxFZEJRWE5DZFVrc1QwRkJUME1zVDBGQlVDeEhRVUZwUW5oSkxHZENRVUYyUXlJc0ltWnBiR1VpT2lKRFEwTnZiR3hwYzJsdmJrMWhibUZuWlhJdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVJRU52Y0hseWFXZG9kQ0FvWXlrZ01qQXhOeTB5TURFNElGaHBZVzFsYmlCWllXcHBJRk52Wm5SM1lYSmxJRU52TGl3Z1RIUmtMbHh1WEc0Z2FIUjBjSE02THk5M2QzY3VZMjlqYjNNdVkyOXRMMXh1WEc0Z1VHVnliV2x6YzJsdmJpQnBjeUJvWlhKbFlua2daM0poYm5SbFpDd2dabkpsWlNCdlppQmphR0Z5WjJVc0lIUnZJR0Z1ZVNCd1pYSnpiMjRnYjJKMFlXbHVhVzVuSUdFZ1kyOXdlVnh1SUc5bUlIUm9hWE1nYzI5bWRIZGhjbVVnWVc1a0lHRnpjMjlqYVdGMFpXUWdaVzVuYVc1bElITnZkWEpqWlNCamIyUmxJQ2gwYUdVZ1hDSlRiMlowZDJGeVpWd2lLU3dnWVNCc2FXMXBkR1ZrTEZ4dUlIZHZjbXhrZDJsa1pTd2djbTk1WVd4MGVTMW1jbVZsTENCdWIyNHRZWE56YVdkdVlXSnNaU3dnY21WMmIyTmhZbXhsSUdGdVpDQnViMjR0WlhoamJIVnphWFpsSUd4cFkyVnVjMlZjYmlCMGJ5QjFjMlVnUTI5amIzTWdRM0psWVhSdmNpQnpiMnhsYkhrZ2RHOGdaR1YyWld4dmNDQm5ZVzFsY3lCdmJpQjViM1Z5SUhSaGNtZGxkQ0J3YkdGMFptOXliWE11SUZsdmRTQnphR0ZzYkZ4dUlHNXZkQ0IxYzJVZ1EyOWpiM01nUTNKbFlYUnZjaUJ6YjJaMGQyRnlaU0JtYjNJZ1pHVjJaV3h2Y0dsdVp5QnZkR2hsY2lCemIyWjBkMkZ5WlNCdmNpQjBiMjlzY3lCMGFHRjBKM05jYmlCMWMyVmtJR1p2Y2lCa1pYWmxiRzl3YVc1bklHZGhiV1Z6TGlCWmIzVWdZWEpsSUc1dmRDQm5jbUZ1ZEdWa0lIUnZJSEIxWW14cGMyZ3NJR1JwYzNSeWFXSjFkR1VzWEc0Z2MzVmliR2xqWlc1elpTd2dZVzVrTDI5eUlITmxiR3dnWTI5d2FXVnpJRzltSUVOdlkyOXpJRU55WldGMGIzSXVYRzVjYmlCVWFHVWdjMjltZEhkaGNtVWdiM0lnZEc5dmJITWdhVzRnZEdocGN5Qk1hV05sYm5ObElFRm5jbVZsYldWdWRDQmhjbVVnYkdsalpXNXpaV1FzSUc1dmRDQnpiMnhrTGx4dUlGaHBZVzFsYmlCWllXcHBJRk52Wm5SM1lYSmxJRU52TGl3Z1RIUmtMaUJ5WlhObGNuWmxjeUJoYkd3Z2NtbG5hSFJ6SUc1dmRDQmxlSEJ5WlhOemJIa2daM0poYm5SbFpDQjBieUI1YjNVdVhHNWNiaUJVU0VVZ1UwOUdWRmRCVWtVZ1NWTWdVRkpQVmtsRVJVUWdYQ0pCVXlCSlUxd2lMQ0JYU1ZSSVQxVlVJRmRCVWxKQlRsUlpJRTlHSUVGT1dTQkxTVTVFTENCRldGQlNSVk5USUU5U1hHNGdTVTFRVEVsRlJDd2dTVTVEVEZWRVNVNUhJRUpWVkNCT1QxUWdURWxOU1ZSRlJDQlVUeUJVU0VVZ1YwRlNVa0ZPVkVsRlV5QlBSaUJOUlZKRFNFRk9WRUZDU1V4SlZGa3NYRzRnUmtsVVRrVlRVeUJHVDFJZ1FTQlFRVkpVU1VOVlRFRlNJRkJWVWxCUFUwVWdRVTVFSUU1UFRrbE9SbEpKVGtkRlRVVk9WQzRnU1U0Z1RrOGdSVlpGVGxRZ1UwaEJURXdnVkVoRlhHNGdRVlZVU0U5U1V5QlBVaUJEVDFCWlVrbEhTRlFnU0U5TVJFVlNVeUJDUlNCTVNVRkNURVVnUms5U0lFRk9XU0JEVEVGSlRTd2dSRUZOUVVkRlV5QlBVaUJQVkVoRlVseHVJRXhKUVVKSlRFbFVXU3dnVjBoRlZFaEZVaUJKVGlCQlRpQkJRMVJKVDA0Z1QwWWdRMDlPVkZKQlExUXNJRlJQVWxRZ1QxSWdUMVJJUlZKWFNWTkZMQ0JCVWtsVFNVNUhJRVpTVDAwc1hHNGdUMVZVSUU5R0lFOVNJRWxPSUVOUFRrNUZRMVJKVDA0Z1YwbFVTQ0JVU0VVZ1UwOUdWRmRCVWtVZ1QxSWdWRWhGSUZWVFJTQlBVaUJQVkVoRlVpQkVSVUZNU1U1SFV5QkpUbHh1SUZSSVJTQlRUMFpVVjBGU1JTNWNiaUFxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUwxeHVYRzVqYjI1emRDQkRiMjUwWVdOMElEMGdjbVZ4ZFdseVpTZ25MaTlEUTBOdmJuUmhZM1FuS1R0Y2JtTnZibk4wSUVOdmJHeHBjMmx2YmxSNWNHVWdQU0JEYjI1MFlXTjBMa052Ykd4cGMybHZibFI1Y0dVN1hHNWpiMjV6ZENCT2IyUmxSWFpsYm5RZ1BTQnlaWEYxYVhKbEtDY3VMaTlEUTA1dlpHVW5LUzVGZG1WdWRGUjVjR1U3WEc1Y2JtTnZibk4wSUcxaGRHZ2dQU0JqWXk1MmJXRjBhRHRjYmx4dWJHVjBJRjkyWldNeUlEMGdZMk11ZGpJb0tUdGNibHh1Wm5WdVkzUnBiMjRnYjJKaVFYQndiSGxOWVhSeWFYZ2dLSEpsWTNRc0lHMWhkRFFzSUc5MWRGOWliQ3dnYjNWMFgzUnNMQ0J2ZFhSZmRISXNJRzkxZEY5aWNpa2dlMXh1SUNBZ0lHeGxkQ0I0SUQwZ2NtVmpkQzU0TzF4dUlDQWdJR3hsZENCNUlEMGdjbVZqZEM1NU8xeHVJQ0FnSUd4bGRDQjNhV1IwYUNBOUlISmxZM1F1ZDJsa2RHZzdYRzRnSUNBZ2JHVjBJR2hsYVdkb2RDQTlJSEpsWTNRdWFHVnBaMmgwTzF4dVhHNGdJQ0FnYkdWMElHMWhkRFJ0SUQwZ2JXRjBOQzV0TzF4dUlDQWdJR3hsZENCdE1EQWdQU0J0WVhRMGJWc3dYU3dnYlRBeElEMGdiV0YwTkcxYk1WMHNJRzB3TkNBOUlHMWhkRFJ0V3pSZExDQnRNRFVnUFNCdFlYUTBiVnMxWFR0Y2JpQWdJQ0JzWlhRZ2JURXlJRDBnYldGME5HMWJNVEpkTENCdE1UTWdQU0J0WVhRMGJWc3hNMTA3WEc1Y2JpQWdJQ0JzWlhRZ2RIZ2dQU0J0TURBZ0tpQjRJQ3NnYlRBMElDb2dlU0FySUcweE1qdGNiaUFnSUNCc1pYUWdkSGtnUFNCdE1ERWdLaUI0SUNzZ2JUQTFJQ29nZVNBcklHMHhNenRjYmlBZ0lDQnNaWFFnZUdFZ1BTQnRNREFnS2lCM2FXUjBhRHRjYmlBZ0lDQnNaWFFnZUdJZ1BTQnRNREVnS2lCM2FXUjBhRHRjYmlBZ0lDQnNaWFFnZVdNZ1BTQnRNRFFnS2lCb1pXbG5hSFE3WEc0Z0lDQWdiR1YwSUhsa0lEMGdiVEExSUNvZ2FHVnBaMmgwTzF4dVhHNGdJQ0FnYjNWMFgzUnNMbmdnUFNCMGVEdGNiaUFnSUNCdmRYUmZkR3d1ZVNBOUlIUjVPMXh1SUNBZ0lHOTFkRjkwY2k1NElEMGdlR0VnS3lCMGVEdGNiaUFnSUNCdmRYUmZkSEl1ZVNBOUlIaGlJQ3NnZEhrN1hHNGdJQ0FnYjNWMFgySnNMbmdnUFNCNVl5QXJJSFI0TzF4dUlDQWdJRzkxZEY5aWJDNTVJRDBnZVdRZ0t5QjBlVHRjYmlBZ0lDQnZkWFJmWW5JdWVDQTlJSGhoSUNzZ2VXTWdLeUIwZUR0Y2JpQWdJQ0J2ZFhSZlluSXVlU0E5SUhoaUlDc2dlV1FnS3lCMGVUdGNibjFjYmx4dUx5b3FYRzRnS2lBaEkyVnVYRzRnS2lCQklITnBiWEJzWlNCamIyeHNhWE5wYjI0Z2JXRnVZV2RsY2lCamJHRnpjeTRnWEc0Z0tpQkpkQ0IzYVd4c0lHTmhiR04xYkdGMFpTQjNhR1YwYUdWeUlIUm9aU0JqYjJ4c2FXUmxjaUJqYjJ4c2FXUmxjeUJ2ZEdobGNpQmpiMnhzYVdSbGNuTXNJR2xtSUdOdmJHeHBaR1Z6SUhSb1pXNGdZMkZzYkNCMGFHVWdZMkZzYkdKaFkydHpMbHh1SUNvZ0lTTjZhRnh1SUNvZzVMaUE1TGlxNTY2QTVZMlY1NXFFNTZLdzVwS2U1N3VFNUx1MjU2Nmg1NUNHNTdHNzc3eU01NVNvNUxxTzVhU0U1NUNHNklxQzU0SzU1TG1MNlplMDU1cUU1Nkt3NXBLZTU3dUU1THUyNXBpdjVaQ201THFuNTVTZjVMcUc1Nkt3NXBLZTc3eU01Ym0yNkxDRDU1U281NXU0NWJxVTVadWU2TENENVllOTVwV3c0NENDWEc0Z0tseHVJQ29nUUdOc1lYTnpJRU52Ykd4cGMybHZiazFoYm1GblpYSmNiaUFxSUVCMWMyVnpJRVYyWlc1MFZHRnlaMlYwWEc0Z0tpQkFaWGhoYlhCc1pWeHVJQ3BjYmlBcUlDOHZJRWRsZENCMGFHVWdZMjlzYkdsemFXOXVJRzFoYm1GblpYSXVYRzRnS2lCc1pYUWdiV0Z1WVdkbGNpQTlJR05qTG1ScGNtVmpkRzl5TG1kbGRFTnZiR3hwYzJsdmJrMWhibUZuWlhJb0tUdGNiaUFxWEc0Z0tpQXZMeUJGYm1GaWJHVmtJSFJvWlNCamIyeHBaR1Z5SUcxaGJtRm5aWEl1WEc0Z0tpQnRZVzVoWjJWeUxtVnVZV0pzWldRZ1BTQjBjblZsTzF4dUlDcGNiaUFxSUM4dklFVnVZV0pzWldRZ1pISmhkeUJqYjJ4c2FXUmxjbHh1SUNvZ2JXRnVZV2RsY2k1bGJtRmliR1ZrUkdWaWRXZEVjbUYzSUQwZ2RISjFaVHRjYmlBcVhHNGdLaUF2THlCRmJtRmliR1ZrSUdSeVlYY2dZMjlzYkdsa1pYSWdZbTkxYm1ScGJtY2dZbTk0WEc0Z0tpQnRZVzVoWjJWeUxtVnVZV0pzWldSRWNtRjNRbTkxYm1ScGJtZENiM2dnUFNCMGNuVmxPMXh1SUNwY2JpQXFJRnh1SUNvZ0x5OGdRMjlzYkdsemFXOXVJR05oYkd4aVlXTnJYRzRnS2lCdmJrTnZiR3hwYzJsdmJrVnVkR1Z5T2lCbWRXNWpkR2x2YmlBb2IzUm9aWElzSUhObGJHWXBJSHRjYmlBcUlDQWdJQ0IwYUdsekxtNXZaR1V1WTI5c2IzSWdQU0JqWXk1RGIyeHZjaTVTUlVRN1hHNGdLaUFnSUNBZ2RHaHBjeTUwYjNWamFHbHVaMDUxYldKbGNpQXJLenRjYmlBcVhHNGdLaUFnSUNBZ0x5OGdiR1YwSUhkdmNteGtJRDBnYzJWc1ppNTNiM0pzWkR0Y2JpQXFJQ0FnSUNBdkx5QnNaWFFnWVdGaVlpQTlJSGR2Y214a0xtRmhZbUk3WEc0Z0tpQWdJQ0FnTHk4Z2JHVjBJSEJ5WlVGaFltSWdQU0IzYjNKc1pDNXdjbVZCWVdKaU8xeHVJQ29nSUNBZ0lDOHZJR3hsZENCdElEMGdkMjl5YkdRdWJXRjBjbWw0TzF4dUlDcGNiaUFxSUNBZ0lDQXZMeUJtYjNJZ1kybHlZMnhsSUdOdmJHeHBaR1Z5WEc0Z0tpQWdJQ0FnTHk4Z2JHVjBJSElnUFNCM2IzSnNaQzV5WVdScGRYTTdYRzRnS2lBZ0lDQWdMeThnYkdWMElIQWdQU0IzYjNKc1pDNXdiM05wZEdsdmJqdGNiaUFxWEc0Z0tpQWdJQ0FnTHk4Z1ptOXlJR0p2ZUNCamIyeHNhV1JsY2lCaGJtUWdjRzlzZVdkdmJpQmpiMnhzYVdSbGNseHVJQ29nSUNBZ0lDOHZJR3hsZENCd2N5QTlJSGR2Y214a0xuQnZhVzUwY3p0Y2JpQXFJSDBzWEc0Z0tpQWdJRnh1SUNvZ2IyNURiMnhzYVhOcGIyNVRkR0Y1T2lCbWRXNWpkR2x2YmlBb2IzUm9aWElzSUhObGJHWXBJSHRjYmlBcUlDQWdJQ0JqYjI1emIyeGxMbXh2WnlnbmIyNGdZMjlzYkdsemFXOXVJSE4wWVhrbktUdGNiaUFxSUgwc1hHNGdLaUFnSUZ4dUlDb2diMjVEYjJ4c2FYTnBiMjVGZUdsME9pQm1kVzVqZEdsdmJpQW9iM1JvWlhJc0lITmxiR1lwSUh0Y2JpQXFJQ0FnSUNCMGFHbHpMblJ2ZFdOb2FXNW5UblZ0WW1WeUlDMHRPMXh1SUNvZ0lDQWdJR2xtSUNoMGFHbHpMblJ2ZFdOb2FXNW5UblZ0WW1WeUlEMDlQU0F3S1NCN1hHNGdLaUFnSUNBZ0lDQWdJSFJvYVhNdWJtOWtaUzVqYjJ4dmNpQTlJR05qTGtOdmJHOXlMbGRJU1ZSRk8xeHVJQ29nSUNBZ0lIMWNiaUFxSUgxY2JpQXFMMXh1YkdWMElFTnZiR3hwYzJsdmJrMWhibUZuWlhJZ1BTQmpZeTVEYkdGemN5aDdYRzRnSUNBZ2JXbDRhVzV6T2lCYlkyTXVSWFpsYm5SVVlYSm5aWFJkTEZ4dVhHNGdJQ0FnY0hKdmNHVnlkR2xsY3pvZ2UxeHVJQ0FnSUNBZ0lDQXZLaXBjYmlBZ0lDQWdJQ0FnSUNvZ0lTTmxibHh1SUNBZ0lDQWdJQ0FnS2lBaEkzcG9YRzRnSUNBZ0lDQWdJQ0FxSU9hWXIrV1FwdVc4Z09XUXIrZWlzT2FTbnVldW9lZVFodSs4ak9tN21PaXVwT1M0dXVTNGplVzhnT1dRcjF4dUlDQWdJQ0FnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMEp2YjJ4bFlXNTlJR1Z1WVdKc1pXUmNiaUFnSUNBZ0lDQWdJQ29nUUdSbFptRjFiSFFnWm1Gc2MyVmNiaUFnSUNBZ0lDQWdJQ292WEc0Z0lDQWdJQ0FnSUdWdVlXSnNaV1E2SUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBZ0lDb2dJU05sYmx4dUlDQWdJQ0FnSUNBZ0tpQWhJM3BvWEc0Z0lDQWdJQ0FnSUNBcUlPYVlyK1dRcHVlN21PV0l0dWVpc09hU251ZTdoT1M3dHVlYWhPV01oZVdidE9lYmt1KzhqT203bU9pdXBPUzR1dVM0amVlN21PV0l0bHh1SUNBZ0lDQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2UwSnZiMnhsWVc1OUlHVnVZV0pzWldSRWNtRjNRbTkxYm1ScGJtZENiM2hjYmlBZ0lDQWdJQ0FnSUNvZ1FHUmxabUYxYkhRZ1ptRnNjMlZjYmlBZ0lDQWdJQ0FnSUNvdlhHNGdJQ0FnSUNBZ0lHVnVZV0pzWldSRWNtRjNRbTkxYm1ScGJtZENiM2c2SUdaaGJITmxYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHTjBiM0k2SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlkyOXVkR0ZqZEhNZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZMjlzYkdsa1pYSnpJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJSbFluVm5SSEpoZDJWeUlEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWlc1aFlteGxaRVJsWW5WblJISmhkeUE5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnWTJNdVpHbHlaV04wYjNJdVgzTmphR1ZrZFd4bGNpQW1KaUJqWXk1a2FYSmxZM1J2Y2k1ZmMyTm9aV1IxYkdWeUxtVnVZV0pzWlVadmNsUmhjbWRsZENoMGFHbHpLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdkWEJrWVhSbE9pQm1kVzVqZEdsdmJpQW9aSFFwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxtVnVZV0pzWldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHeGxkQ0JwTENCc08xeHVYRzRnSUNBZ0lDQWdJQzh2SUhWd1pHRjBaU0JqYjJ4c2FXUmxjbHh1SUNBZ0lDQWdJQ0JzWlhRZ1kyOXNiR2xrWlhKeklEMGdkR2hwY3k1ZlkyOXNiR2xrWlhKek8xeHVJQ0FnSUNBZ0lDQm1iM0lnS0drZ1BTQXdMQ0JzSUQwZ1kyOXNiR2xrWlhKekxteGxibWQwYURzZ2FTQThJR3c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUxY0dSaGRHVkRiMnhzYVdSbGNpaGpiMnhzYVdSbGNuTmJhVjBwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnWkc4Z1kyOXNiR2xrWlZ4dUlDQWdJQ0FnSUNCc1pYUWdZMjl1ZEdGamRITWdQU0IwYUdsekxsOWpiMjUwWVdOMGN6dGNiaUFnSUNBZ0lDQWdiR1YwSUhKbGMzVnNkSE1nUFNCYlhUdGNiaUFnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2FTQTlJREFzSUd3Z1BTQmpiMjUwWVdOMGN5NXNaVzVuZEdnN0lHa2dQQ0JzT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JqYjJ4c2FYTnBiMjVVZVhCbElEMGdZMjl1ZEdGamRITmJhVjB1ZFhCa1lYUmxVM1JoZEdVb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGpiMnhzYVhOcGIyNVVlWEJsSUQwOVBTQkRiMnhzYVhOcGIyNVVlWEJsTGs1dmJtVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MGFXNTFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwY3k1d2RYTm9LRnRqYjJ4c2FYTnBiMjVVZVhCbExDQmpiMjUwWVdOMGMxdHBYVjBwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnYUdGdVpHeGxJR052Ykd4cFpHVWdjbVZ6ZFd4MGN5d2daVzFwZENCdFpYTnpZV2RsWEc0Z0lDQWdJQ0FnSUdadmNpQW9hU0E5SURBc0lHd2dQU0J5WlhOMWJIUnpMbXhsYm1kMGFEc2dhU0E4SUd3N0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhKbGMzVnNkQ0E5SUhKbGMzVnNkSE5iYVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWtiME52Ykd4cFpHVW9jbVZ6ZFd4MFd6QmRMQ0J5WlhOMWJIUmJNVjBwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnWkhKaGR5QmpiMnhzYVdSbGNuTmNiaUFnSUNBZ0lDQWdkR2hwY3k1a2NtRjNRMjlzYkdsa1pYSnpLQ2s3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJRjlrYjBOdmJHeHBaR1U2SUdaMWJtTjBhVzl1SUNoamIyeHNhWE5wYjI1VWVYQmxMQ0JqYjI1MFlXTjBLU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQmpiMjUwWVdOMFJuVnVZenRjYmlBZ0lDQWdJQ0FnYzNkcGRHTm9JQ2hqYjJ4c2FYTnBiMjVVZVhCbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRU52Ykd4cGMybHZibFI1Y0dVdVEyOXNiR2x6YVc5dVJXNTBaWEk2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRHRmpkRVoxYm1NZ1BTQW5iMjVEYjJ4c2FYTnBiMjVGYm5SbGNpYzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElFTnZiR3hwYzJsdmJsUjVjR1V1UTI5c2JHbHphVzl1VTNSaGVUcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjUwWVdOMFJuVnVZeUE5SUNkdmJrTnZiR3hwYzJsdmJsTjBZWGtuTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JEYjJ4c2FYTnBiMjVVZVhCbExrTnZiR3hwYzJsdmJrVjRhWFE2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRHRmpkRVoxYm1NZ1BTQW5iMjVEYjJ4c2FYTnBiMjVGZUdsMEp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR3hsZENCamIyeHNhV1JsY2pFZ1BTQmpiMjUwWVdOMExtTnZiR3hwWkdWeU1UdGNiaUFnSUNBZ0lDQWdiR1YwSUdOdmJHeHBaR1Z5TWlBOUlHTnZiblJoWTNRdVkyOXNiR2xrWlhJeU8xeHVYRzRnSUNBZ0lDQWdJR3hsZENCamIyMXdjekVnUFNCamIyeHNhV1JsY2pFdWJtOWtaUzVmWTI5dGNHOXVaVzUwY3p0Y2JpQWdJQ0FnSUNBZ2JHVjBJR052YlhCek1pQTlJR052Ykd4cFpHVnlNaTV1YjJSbExsOWpiMjF3YjI1bGJuUnpPMXh1WEc0Z0lDQWdJQ0FnSUd4bGRDQnBMQ0JzTENCamIyMXdPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tHa2dQU0F3TENCc0lEMGdZMjl0Y0hNeExteGxibWQwYURzZ2FTQThJR3c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXRjQ0E5SUdOdmJYQnpNVnRwWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoamIyMXdXMk52Ym5SaFkzUkdkVzVqWFNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiWEJiWTI5dWRHRmpkRVoxYm1OZEtHTnZiR3hwWkdWeU1pd2dZMjlzYkdsa1pYSXhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdadmNpQW9hU0E5SURBc0lHd2dQU0JqYjIxd2N6SXViR1Z1WjNSb095QnBJRHdnYkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjF3SUQwZ1kyOXRjSE15VzJsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTnZiWEJiWTI5dWRHRmpkRVoxYm1OZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl0Y0Z0amIyNTBZV04wUm5WdVkxMG9ZMjlzYkdsa1pYSXhMQ0JqYjJ4c2FXUmxjaklwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU3dnWEc1Y2JpQWdJQ0J6YUc5MWJHUkRiMnhzYVdSbE9pQm1kVzVqZEdsdmJpQW9ZekVzSUdNeUtTQjdYRzRnSUNBZ0lDQWdJR3hsZENCdWIyUmxNU0E5SUdNeExtNXZaR1VzSUc1dlpHVXlJRDBnWXpJdWJtOWtaVHRjYmlBZ0lDQWdJQ0FnYkdWMElHTnZiR3hwYzJsdmJrMWhkSEpwZUNBOUlHTmpMbWRoYldVdVkyOXNiR2x6YVc5dVRXRjBjbWw0TzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm05a1pURWdJVDA5SUc1dlpHVXlJQ1ltSUdOdmJHeHBjMmx2YmsxaGRISnBlRnR1YjJSbE1TNW5jbTkxY0VsdVpHVjRYVnR1YjJSbE1pNW5jbTkxY0VsdVpHVjRYVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdhVzVwZEVOdmJHeHBaR1Z5T2lCbWRXNWpkR2x2YmlBb1kyOXNiR2xrWlhJcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGamIyeHNhV1JsY2k1M2IzSnNaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhkdmNteGtJRDBnWTI5c2JHbGtaWEl1ZDI5eWJHUWdQU0I3ZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSGR2Y214a0xtRmhZbUlnUFNCall5NXlaV04wS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IzYjNKc1pDNXdjbVZCWVdKaUlEMGdZMk11Y21WamRDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2QyOXliR1F1YldGMGNtbDRJRDBnYldGMGFDNXRZWFEwTG1OeVpXRjBaU2dwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0IzYjNKc1pDNXlZV1JwZFhNZ1BTQXdPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWTI5c2JHbGtaWElnYVc1emRHRnVZMlZ2WmlCall5NUNiM2hEYjJ4c2FXUmxjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkdmNteGtMbkJ2YzJsMGFXOXVJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNiM0pzWkM1d2IybHVkSE1nUFNCYlkyTXVkaklvS1N3Z1kyTXVkaklvS1N3Z1kyTXVkaklvS1N3Z1kyTXVkaklvS1YwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaGpiMnhzYVdSbGNpQnBibk4wWVc1alpXOW1JR05qTGxCdmJIbG5iMjVEYjJ4c2FXUmxjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkdmNteGtMbkJ2YzJsMGFXOXVJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNiM0pzWkM1d2IybHVkSE1nUFNCamIyeHNhV1JsY2k1d2IybHVkSE11YldGd0tHWjFibU4wYVc5dUlDaHdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCall5NTJNaWh3TG5nc0lIQXVlU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaGpiMnhzYVdSbGNpQnBibk4wWVc1alpXOW1JR05qTGtOcGNtTnNaVU52Ykd4cFpHVnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZDI5eWJHUXVjRzl6YVhScGIyNGdQU0JqWXk1Mk1pZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGR2Y214a0xuQnZhVzUwY3lBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdkWEJrWVhSbFEyOXNiR2xrWlhJNklHWjFibU4wYVc5dUlDaGpiMnhzYVdSbGNpa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2IyWm1jMlYwSUQwZ1kyOXNiR2xrWlhJdWIyWm1jMlYwTzF4dUlDQWdJQ0FnSUNCc1pYUWdkMjl5YkdRZ1BTQmpiMnhzYVdSbGNpNTNiM0pzWkR0Y2JpQWdJQ0FnSUNBZ2JHVjBJR0ZoWW1JZ1BTQjNiM0pzWkM1aFlXSmlPMXh1WEc0Z0lDQWdJQ0FnSUd4bGRDQnRJRDBnZDI5eWJHUXViV0YwY21sNE8xeHVJQ0FnSUNBZ0lDQmpiMnhzYVdSbGNpNXViMlJsTG1kbGRGZHZjbXhrVFdGMGNtbDRLRzBwTzF4dVhHNGdJQ0FnSUNBZ0lHeGxkQ0J3Y21WQllXSmlJRDBnZDI5eWJHUXVjSEpsUVdGaVlqdGNiaUFnSUNBZ0lDQWdjSEpsUVdGaVlpNTRJRDBnWVdGaVlpNTRPMXh1SUNBZ0lDQWdJQ0J3Y21WQllXSmlMbmtnUFNCaFlXSmlMbms3WEc0Z0lDQWdJQ0FnSUhCeVpVRmhZbUl1ZDJsa2RHZ2dQU0JoWVdKaUxuZHBaSFJvTzF4dUlDQWdJQ0FnSUNCd2NtVkJZV0ppTG1obGFXZG9kQ0E5SUdGaFltSXVhR1ZwWjJoME8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoamIyeHNhV1JsY2lCcGJuTjBZVzVqWlc5bUlHTmpMa0p2ZUVOdmJHeHBaR1Z5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2MybDZaU0E5SUdOdmJHeHBaR1Z5TG5OcGVtVTdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHRmhZbUl1ZUNBOUlHOW1abk5sZEM1NElDMGdjMmw2WlM1M2FXUjBhQzh5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdZV0ZpWWk1NUlEMGdiMlptYzJWMExua2dMU0J6YVhwbExtaGxhV2RvZEM4eU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWVdGaVlpNTNhV1IwYUNBOUlITnBlbVV1ZDJsa2RHZzdYRzRnSUNBZ0lDQWdJQ0FnSUNCaFlXSmlMbWhsYVdkb2RDQTlJSE5wZW1VdWFHVnBaMmgwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2QzQnpJRDBnZDI5eWJHUXVjRzlwYm5Sek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIZHdNQ0E5SUhkd2Mxc3dYU3dnZDNBeElEMGdkM0J6V3pGZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZHdNaUE5SUhkd2Mxc3lYU3dnZDNBeklEMGdkM0J6V3pOZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYjJKaVFYQndiSGxOWVhSeWFYZ29ZV0ZpWWl3Z2JTd2dkM0F3TENCM2NERXNJSGR3TWl3Z2QzQXpLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUcxcGJuZ2dQU0JOWVhSb0xtMXBiaWgzY0RBdWVDd2dkM0F4TG5nc0lIZHdNaTU0TENCM2NETXVlQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYldsdWVTQTlJRTFoZEdndWJXbHVLSGR3TUM1NUxDQjNjREV1ZVN3Z2QzQXlMbmtzSUhkd015NTVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J0WVhoNElEMGdUV0YwYUM1dFlYZ29kM0F3TG5nc0lIZHdNUzU0TENCM2NESXVlQ3dnZDNBekxuZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzFoZUhrZ1BTQk5ZWFJvTG0xaGVDaDNjREF1ZVN3Z2QzQXhMbmtzSUhkd01pNTVMQ0IzY0RNdWVTazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHRmhZbUl1ZUNBOUlHMXBibmc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhZV0ppTG5rZ1BTQnRhVzU1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdZV0ZpWWk1M2FXUjBhQ0E5SUcxaGVIZ2dMU0J0YVc1NE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWVdGaVlpNW9aV2xuYUhRZ1BTQnRZWGg1SUMwZ2JXbHVlVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxJR2xtSUNoamIyeHNhV1JsY2lCcGJuTjBZVzVqWlc5bUlHTmpMa05wY21Oc1pVTnZiR3hwWkdWeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QmpZV3hqZFd4aGRHVWdkMjl5YkdRZ2NHOXphWFJwYjI1Y2JpQWdJQ0FnSUNBZ0lDQWdJRzFoZEdndWRtVmpNaTUwY21GdWMyWnZjbTFOWVhRMEtGOTJaV015TENCamIyeHNhV1JsY2k1dlptWnpaWFFzSUcwcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCM2IzSnNaQzV3YjNOcGRHbHZiaTU0SUQwZ1gzWmxZekl1ZUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSGR2Y214a0xuQnZjMmwwYVc5dUxua2dQU0JmZG1Wak1pNTVPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJqWVd4amRXeGhkR1VnZDI5eWJHUWdjbUZrYVhWelhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JXMGdQU0J0TG0wN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RHVnRjSGdnUFNCdGJWc3hNbDBzSUhSbGJYQjVJRDBnYlcxYk1UTmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JXMWJNVEpkSUQwZ2JXMWJNVE5kSUQwZ01EdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ1gzWmxZekl1ZUNBOUlHTnZiR3hwWkdWeUxuSmhaR2wxY3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJRjkyWldNeUxua2dQU0F3TzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0J0WVhSb0xuWmxZekl1ZEhKaGJuTm1iM0p0VFdGME5DaGZkbVZqTWl3Z1gzWmxZeklzSUcwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHUWdQU0JOWVhSb0xuTnhjblFvWDNabFl6SXVlQ0FxSUY5MlpXTXlMbmdnS3lCZmRtVmpNaTU1SUNvZ1gzWmxZekl1ZVNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhkdmNteGtMbkpoWkdsMWN5QTlJR1E3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR0ZoWW1JdWVDQTlJSGR2Y214a0xuQnZjMmwwYVc5dUxuZ2dMU0JrTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZV0ZpWWk1NUlEMGdkMjl5YkdRdWNHOXphWFJwYjI0dWVTQXRJR1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhZV0ppTG5kcFpIUm9JRDBnWkNBcUlESTdYRzRnSUNBZ0lDQWdJQ0FnSUNCaFlXSmlMbWhsYVdkb2RDQTlJR1FnS2lBeU8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCdGJWc3hNbDBnUFNCMFpXMXdlRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHMXRXekV6WFNBOUlIUmxiWEI1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tHTnZiR3hwWkdWeUlHbHVjM1JoYm1ObGIyWWdZMk11VUc5c2VXZHZia052Ykd4cFpHVnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY0c5cGJuUnpJRDBnWTI5c2JHbGtaWEl1Y0c5cGJuUnpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSGR2Y214a1VHOXBiblJ6SUQwZ2QyOXliR1F1Y0c5cGJuUnpPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQjNiM0pzWkZCdmFXNTBjeTVzWlc1bmRHZ2dQU0J3YjJsdWRITXViR1Z1WjNSb08xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiV2x1ZUNBOUlERmxOaXdnYldsdWVTQTlJREZsTml3Z2JXRjRlQ0E5SUMweFpUWXNJRzFoZUhrZ1BTQXRNV1UyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBc0lHd2dQU0J3YjJsdWRITXViR1Z1WjNSb095QnBJRHdnYkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRjNiM0pzWkZCdmFXNTBjMXRwWFNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IzYjNKc1pGQnZhVzUwYzF0cFhTQTlJR05qTG5ZeUtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNabFl6SXVlQ0E5SUhCdmFXNTBjMXRwWFM1NElDc2diMlptYzJWMExuZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYM1psWXpJdWVTQTlJSEJ2YVc1MGMxdHBYUzU1SUNzZ2IyWm1jMlYwTG5rN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXRjBhQzUyWldNeUxuUnlZVzV6Wm05eWJVMWhkRFFvWDNabFl6SXNJRjkyWldNeUxDQnRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2VDQTlJRjkyWldNeUxuZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhrZ1BTQmZkbVZqTWk1NU8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMjl5YkdSUWIybHVkSE5iYVYwdWVDQTlJSGc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZDI5eWJHUlFiMmx1ZEhOYmFWMHVlU0E5SUhrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZUNBK0lHMWhlSGdwSUcxaGVIZ2dQU0I0TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDRJRHdnYldsdWVDa2diV2x1ZUNBOUlIZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hrZ1BpQnRZWGg1S1NCdFlYaDVJRDBnZVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9lU0E4SUcxcGJua3BJRzFwYm5rZ1BTQjVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCaFlXSmlMbmdnUFNCdGFXNTRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lXRmlZaTU1SUQwZ2JXbHVlVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHRmhZbUl1ZDJsa2RHZ2dQU0J0WVhoNElDMGdiV2x1ZUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0ZoWW1JdWFHVnBaMmgwSUQwZ2JXRjRlU0F0SUcxcGJuazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdZV1JrUTI5c2JHbGtaWEk2SUdaMWJtTjBhVzl1SUNoamIyeHNhV1JsY2lrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnWTI5c2JHbGtaWEp6SUQwZ2RHaHBjeTVmWTI5c2JHbGtaWEp6TzF4dUlDQWdJQ0FnSUNCc1pYUWdhVzVrWlhnZ1BTQmpiMnhzYVdSbGNuTXVhVzVrWlhoUFppaGpiMnhzYVdSbGNpazdYRzRnSUNBZ0lDQWdJR2xtSUNocGJtUmxlQ0E5UFQwZ0xURXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3TENCc0lEMGdZMjlzYkdsa1pYSnpMbXhsYm1kMGFEc2dhU0E4SUd3N0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnZkR2hsY2lBOUlHTnZiR3hwWkdWeWMxdHBYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV6YUc5MWJHUkRiMnhzYVdSbEtHTnZiR3hwWkdWeUxDQnZkR2hsY2lrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHTnZiblJoWTNRZ1BTQnVaWGNnUTI5dWRHRmpkQ2hqYjJ4c2FXUmxjaXdnYjNSb1pYSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlqYjI1MFlXTjBjeTV3ZFhOb0tHTnZiblJoWTNRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5c2JHbGtaWEp6TG5CMWMyZ29ZMjlzYkdsa1pYSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVwYm1sMFEyOXNiR2xrWlhJb1kyOXNiR2xrWlhJcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnWTI5c2JHbGtaWEl1Ym05a1pTNXZiaWhPYjJSbFJYWmxiblF1UjFKUFZWQmZRMGhCVGtkRlJDd2dkR2hwY3k1dmJrNXZaR1ZIY205MWNFTm9ZVzVuWldRc0lIUm9hWE1wTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0J5WlcxdmRtVkRiMnhzYVdSbGNqb2dablZ1WTNScGIyNGdLR052Ykd4cFpHVnlLU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQmpiMnhzYVdSbGNuTWdQU0IwYUdsekxsOWpiMnhzYVdSbGNuTTdYRzRnSUNBZ0lDQWdJR3hsZENCcGJtUmxlQ0E5SUdOdmJHeHBaR1Z5Y3k1cGJtUmxlRTltS0dOdmJHeHBaR1Z5S1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLR2x1WkdWNElENDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ykd4cFpHVnljeTV6Y0d4cFkyVW9hVzVrWlhnc0lERXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWTI5dWRHRmpkSE1nUFNCMGFHbHpMbDlqYjI1MFlXTjBjenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0JqYjI1MFlXTjBjeTVzWlc1bmRHZ2dMU0F4T3lCcElENDlJREE3SUdrdExTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCamIyNTBZV04wSUQwZ1kyOXVkR0ZqZEhOYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dOdmJuUmhZM1F1WTI5c2JHbGtaWEl4SUQwOVBTQmpiMnhzYVdSbGNpQjhmQ0JqYjI1MFlXTjBMbU52Ykd4cFpHVnlNaUE5UFQwZ1kyOXNiR2xrWlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTnZiblJoWTNRdWRHOTFZMmhwYm1jcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJSdlEyOXNiR2xrWlNoRGIyeHNhWE5wYjI1VWVYQmxMa052Ykd4cGMybHZia1Y0YVhRc0lHTnZiblJoWTNRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdGamRITXVjM0JzYVdObEtHa3NJREVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdZMjlzYkdsa1pYSXVibTlrWlM1dlptWW9UbTlrWlVWMlpXNTBMa2RTVDFWUVgwTklRVTVIUlVRc0lIUm9hWE11YjI1T2IyUmxSM0p2ZFhCRGFHRnVaMlZrTENCMGFHbHpLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmpMbVZ5Y205eVNVUW9Oall3TUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzRnSUNBZ2IyNU9iMlJsUjNKdmRYQkRhR0Z1WjJWa09pQm1kVzVqZEdsdmJpQW9ibTlrWlNrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnWTI5c2JHbGtaWEp6SUQwZ2JtOWtaUzVuWlhSRGIyMXdiMjVsYm5SektHTmpMa052Ykd4cFpHVnlLVHRjYmx4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNQ3dnYkNBOUlHTnZiR3hwWkdWeWN5NXNaVzVuZEdnN0lHa2dQQ0JzT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JqYjJ4c2FXUmxjaUE5SUdOdmJHeHBaR1Z5YzF0cFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUtHTmpMbEJvZVhOcFkzTkRiMnhzYVdSbGNpQW1KaUJqYjJ4c2FXUmxjaUJwYm5OMFlXNWpaVzltSUdOakxsQm9lWE5wWTNORGIyeHNhV1JsY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJwYm5WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1eVpXMXZkbVZEYjJ4c2FXUmxjaWhqYjJ4c2FXUmxjaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1Ga1pFTnZiR3hwWkdWeUtHTnZiR3hwWkdWeUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQmtjbUYzUTI5c2JHbGtaWEp6T2lCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTVmWlc1aFlteGxaRVJsWW5WblJISmhkeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZMmhsWTJ0RVpXSjFaMFJ5WVhkV1lXeHBaQ2dwTzF4dVhHNGdJQ0FnSUNBZ0lHeGxkQ0JrWldKMVowUnlZWGRsY2lBOUlIUm9hWE11WDJSbFluVm5SSEpoZDJWeU8xeHVJQ0FnSUNBZ0lDQmtaV0oxWjBSeVlYZGxjaTVqYkdWaGNpZ3BPMXh1WEc0Z0lDQWdJQ0FnSUd4bGRDQmpiMnhzYVdSbGNuTWdQU0IwYUdsekxsOWpiMnhzYVdSbGNuTTdYRzVjYmlBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQXNJR3dnUFNCamIyeHNhV1JsY25NdWJHVnVaM1JvT3lCcElEd2diRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZMjlzYkdsa1pYSWdQU0JqYjJ4c2FXUmxjbk5iYVYwN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdSbFluVm5SSEpoZDJWeUxuTjBjbTlyWlVOdmJHOXlJRDBnWTJNdVEyOXNiM0l1VjBoSlZFVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZMjlzYkdsa1pYSWdhVzV6ZEdGdVkyVnZaaUJqWXk1Q2IzaERiMnhzYVdSbGNpQjhmQ0JqYjJ4c2FXUmxjaUJwYm5OMFlXNWpaVzltSUdOakxsQnZiSGxuYjI1RGIyeHNhV1JsY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J3Y3lBOUlHTnZiR3hwWkdWeUxuZHZjbXhrTG5CdmFXNTBjenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NITXViR1Z1WjNSb0lENGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaV0oxWjBSeVlYZGxjaTV0YjNabFZHOG9jSE5iTUYwdWVDd2djSE5iTUYwdWVTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdvZ1BTQXhPeUJxSUR3Z2NITXViR1Z1WjNSb095QnFLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbFluVm5SSEpoZDJWeUxteHBibVZVYnlod2MxdHFYUzU0TENCd2MxdHFYUzU1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXSjFaMFJ5WVhkbGNpNWpiRzl6WlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWldKMVowUnlZWGRsY2k1emRISnZhMlVvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaGpiMnhzYVdSbGNpQnBibk4wWVc1alpXOW1JR05qTGtOcGNtTnNaVU52Ykd4cFpHVnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWaWRXZEVjbUYzWlhJdVkybHlZMnhsS0dOdmJHeHBaR1Z5TG5kdmNteGtMbkJ2YzJsMGFXOXVMbmdzSUdOdmJHeHBaR1Z5TG5kdmNteGtMbkJ2YzJsMGFXOXVMbmtzSUdOdmJHeHBaR1Z5TG5kdmNteGtMbkpoWkdsMWN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZpZFdkRWNtRjNaWEl1YzNSeWIydGxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtVnVZV0pzWldSRWNtRjNRbTkxYm1ScGJtZENiM2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZV0ZpWWlBOUlHTnZiR3hwWkdWeUxuZHZjbXhrTG1GaFltSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZpZFdkRWNtRjNaWEl1YzNSeWIydGxRMjlzYjNJZ1BTQmpZeTVEYjJ4dmNpNUNURlZGTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbFluVm5SSEpoZDJWeUxtMXZkbVZVYnloaFlXSmlMbmhOYVc0c0lHRmhZbUl1ZVUxcGJpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZpZFdkRWNtRjNaWEl1YkdsdVpWUnZLR0ZoWW1JdWVFMXBiaXdnWVdGaVlpNTVUV0Y0S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXSjFaMFJ5WVhkbGNpNXNhVzVsVkc4b1lXRmlZaTU0VFdGNExDQmhZV0ppTG5sTllYZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsWW5WblJISmhkMlZ5TG14cGJtVlVieWhoWVdKaUxuaE5ZWGdzSUdGaFltSXVlVTFwYmlrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaV0oxWjBSeVlYZGxjaTVqYkc5elpTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsWW5WblJISmhkMlZ5TG5OMGNtOXJaU2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYmx4dUlDQWdJRjlqYUdWamEwUmxZblZuUkhKaGQxWmhiR2xrSUNncElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbDlrWldKMVowUnlZWGRsY2lCOGZDQWhkR2hwY3k1ZlpHVmlkV2RFY21GM1pYSXVhWE5XWVd4cFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzV2WkdVZ1BTQnVaWGNnWTJNdVRtOWtaU2duUTA5TVRFbFRTVTlPWDAxQlRrRkhSVkpmUkVWQ1ZVZGZSRkpCVnljcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYm05a1pTNTZTVzVrWlhnZ1BTQmpZeTV0WVdOeWJ5NU5RVmhmV2tsT1JFVllPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyTXVaMkZ0WlM1aFpHUlFaWEp6YVhOMFVtOXZkRTV2WkdVb2JtOWtaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5a1pXSjFaMFJ5WVhkbGNpQTlJRzV2WkdVdVlXUmtRMjl0Y0c5dVpXNTBLR05qTGtkeVlYQm9hV056S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JuMHBPMXh1WEc0dktpcGNiaUFxSUNFalpXNWNiaUFxSUNFamVtaGNiaUFxSU9hWXIrV1FwdWU3bU9XSXR1ZWlzT2FTbnVlN2hPUzd0dWVhaE9XOW91ZUt0dSs4ak9tN21PaXVwT1M0dXVTNGplZTdtT1dJdGx4dUlDb2dRSEJ5YjNCbGNuUjVJSHRDYjI5c1pXRnVmU0JsYm1GaWJHVmtSR1ZpZFdkRWNtRjNYRzRnS2lCQVpHVm1ZWFZzZENCbVlXeHpaVnh1SUNvdlhHNWpZeTVxY3k1blpYUnpaWFFvUTI5c2JHbHphVzl1VFdGdVlXZGxjaTV3Y205MGIzUjVjR1VzSUNkbGJtRmliR1ZrUkdWaWRXZEVjbUYzSnl3Z1hHNGdJQ0FnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWlc1aFlteGxaRVJsWW5WblJISmhkenRjYmlBZ0lDQjlMRnh1SUNBZ0lHWjFibU4wYVc5dUlDaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZG1Gc2RXVWdKaVlnSVhSb2FYTXVYMlZ1WVdKc1pXUkVaV0oxWjBSeVlYY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJOb1pXTnJSR1ZpZFdkRWNtRjNWbUZzYVdRb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMlJsWW5WblJISmhkMlZ5TG01dlpHVXVZV04wYVhabElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDZ2hkbUZzZFdVZ0ppWWdkR2hwY3k1ZlpXNWhZbXhsWkVSbFluVm5SSEpoZHlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZaR1ZpZFdkRWNtRjNaWEl1WTJ4bFlYSW9kSEoxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWtaV0oxWjBSeVlYZGxjaTV1YjJSbExtRmpkR2wyWlNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlpXNWhZbXhsWkVSbFluVm5SSEpoZHlBOUlIWmhiSFZsTzF4dUlDQWdJSDFjYmlrN1hHNWNibHh1WTJNdVEyOXNiR2x6YVc5dVRXRnVZV2RsY2lBOUlHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1EyOXNiR2x6YVc5dVRXRnVZV2RsY2p0Y2JpSmRmUT09Il19