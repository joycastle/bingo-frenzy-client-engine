(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/collider/CCPolygonCollider.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        cc.Collider.Polygon = cc.Class({
            properties: {
                threshold: {
                    default: 1,
                    serializable: false,
                    visible: false
                },
                _offset: cc.v2(0, 0),
                offset: {
                    get: function get() {
                        return this._offset;
                    },
                    set: function set(value) {
                        this._offset = value;
                    },
                    type: cc.Vec2
                },
                points: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.points',
                    default: function _default() {
                        return [
                            cc.v2(-50, -50),
                            cc.v2(50, -50),
                            cc.v2(50, 50),
                            cc.v2(-50, 50)
                        ];
                    },
                    type: [cc.Vec2]
                }
            },
            resetPointsByContour: CC_EDITOR && function () {
                var PhysicsUtils = Editor.require('scene://utils/physics');
                PhysicsUtils.resetPoints(this, { threshold: this.threshold });
            }
        });
        var PolygonCollider = cc.Class({
            name: 'cc.PolygonCollider',
            extends: cc.Collider,
            mixins: [cc.Collider.Polygon],
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.collider/Polygon Collider',
                inspector: 'packages://inspector/inspectors/comps/physics/points-base-collider.js'
            }
        });
        cc.PolygonCollider = module.exports = PolygonCollider;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,