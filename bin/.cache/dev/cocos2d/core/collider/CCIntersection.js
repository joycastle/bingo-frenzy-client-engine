(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/collider/CCIntersection.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Intersection = {};
        function lineLine(a1, a2, b1, b2) {
            var ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);
            var ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);
            var u_b = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);
            if (u_b !== 0) {
                var ua = ua_t / u_b;
                var ub = ub_t / u_b;
                if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {
                    return true;
                }
            }
            return false;
        }
        Intersection.lineLine = lineLine;
        function lineRect(a1, a2, b) {
            var r0 = new cc.Vec2(b.x, b.y);
            var r1 = new cc.Vec2(b.x, b.yMax);
            var r2 = new cc.Vec2(b.xMax, b.yMax);
            var r3 = new cc.Vec2(b.xMax, b.y);
            if (lineLine(a1, a2, r0, r1))
                return true;
            if (lineLine(a1, a2, r1, r2))
                return true;
            if (lineLine(a1, a2, r2, r3))
                return true;
            if (lineLine(a1, a2, r3, r0))
                return true;
            return false;
        }
        Intersection.lineRect = lineRect;
        function linePolygon(a1, a2, b) {
            var length = b.length;
            for (var i = 0; i < length; ++i) {
                var b1 = b[i];
                var b2 = b[(i + 1) % length];
                if (lineLine(a1, a2, b1, b2))
                    return true;
            }
            return false;
        }
        Intersection.linePolygon = linePolygon;
        function rectRect(a, b) {
            var a_min_x = a.x;
            var a_min_y = a.y;
            var a_max_x = a.x + a.width;
            var a_max_y = a.y + a.height;
            var b_min_x = b.x;
            var b_min_y = b.y;
            var b_max_x = b.x + b.width;
            var b_max_y = b.y + b.height;
            return a_min_x <= b_max_x && a_max_x >= b_min_x && a_min_y <= b_max_y && a_max_y >= b_min_y;
        }
        Intersection.rectRect = rectRect;
        function rectPolygon(a, b) {
            var i, l;
            var r0 = new cc.Vec2(a.x, a.y);
            var r1 = new cc.Vec2(a.x, a.yMax);
            var r2 = new cc.Vec2(a.xMax, a.yMax);
            var r3 = new cc.Vec2(a.xMax, a.y);
            if (linePolygon(r0, r1, b))
                return true;
            if (linePolygon(r1, r2, b))
                return true;
            if (linePolygon(r2, r3, b))
                return true;
            if (linePolygon(r3, r0, b))
                return true;
            for (i = 0, l = b.length; i < l; ++i) {
                if (pointInPolygon(b[i], a))
                    return true;
            }
            if (pointInPolygon(r0, b))
                return true;
            if (pointInPolygon(r1, b))
                return true;
            if (pointInPolygon(r2, b))
                return true;
            if (pointInPolygon(r3, b))
                return true;
            return false;
        }
        Intersection.rectPolygon = rectPolygon;
        function polygonPolygon(a, b) {
            var i, l;
            for (i = 0, l = a.length; i < l; ++i) {
                var a1 = a[i];
                var a2 = a[(i + 1) % l];
                if (linePolygon(a1, a2, b))
                    return true;
            }
            for (i = 0, l = b.length; i < l; ++i) {
                if (pointInPolygon(b[i], a))
                    return true;
            }
            for (i = 0, l = a.length; i < l; ++i) {
                if (pointInPolygon(a[i], b))
                    return true;
            }
            return false;
        }
        Intersection.polygonPolygon = polygonPolygon;
        function circleCircle(a, b) {
            var distance = a.position.sub(b.position).mag();
            return distance < a.radius + b.radius;
        }
        Intersection.circleCircle = circleCircle;
        function polygonCircle(polygon, circle) {
            var position = circle.position;
            if (pointInPolygon(position, polygon)) {
                return true;
            }
            for (var i = 0, l = polygon.length; i < l; i++) {
                var start = i === 0 ? polygon[polygon.length - 1] : polygon[i - 1];
                var end = polygon[i];
                if (pointLineDistance(position, start, end, true) < circle.radius) {
                    return true;
                }
            }
            return false;
        }
        Intersection.polygonCircle = polygonCircle;
        function pointInPolygon(point, polygon) {
            var inside = false;
            var x = point.x;
            var y = point.y;
            var length = polygon.length;
            for (var i = 0, j = length - 1; i < length; j = i++) {
                var xi = polygon[i].x, yi = polygon[i].y, xj = polygon[j].x, yj = polygon[j].y, intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;
                if (intersect)
                    inside = !inside;
            }
            return inside;
        }
        Intersection.pointInPolygon = pointInPolygon;
        function pointLineDistance(point, start, end, isSegment) {
            var dx = end.x - start.x;
            var dy = end.y - start.y;
            var d = dx * dx + dy * dy;
            var t = ((point.x - start.x) * dx + (point.y - start.y) * dy) / d;
            var p;
            if (!isSegment) {
                p = cc.v2(start.x + t * dx, start.y + t * dy);
            } else {
                if (d) {
                    if (t < 0)
                        p = start;
                    else if (t > 1)
                        p = end;
                    else
                        p = cc.v2(start.x + t * dx, start.y + t * dy);
                } else {
                    p = start;
                }
            }
            dx = point.x - p.x;
            dy = point.y - p.y;
            return Math.sqrt(dx * dx + dy * dy);
        }
        Intersection.pointLineDistance = pointLineDistance;
        cc.Intersection = module.exports = Intersection;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,