(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/collider/CCCircleCollider.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        cc.Collider.Circle = cc.Class({
            properties: {
                _offset: cc.v2(0, 0),
                _radius: 50,
                offset: {
                    get: function get() {
                        return this._offset;
                    },
                    set: function set(value) {
                        this._offset = value;
                    },
                    type: cc.Vec2
                },
                radius: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.radius',
                    get: function get() {
                        return this._radius;
                    },
                    set: function set(value) {
                        this._radius = value < 0 ? 0 : value;
                    }
                }
            },
            resetInEditor: CC_EDITOR && function () {
                var size = this.node.getContentSize();
                var radius = Math.max(size.width, size.height);
                if (radius !== 0) {
                    this.radius = radius;
                }
            }
        });
        var CircleCollider = cc.Class({
            name: 'cc.CircleCollider',
            extends: cc.Collider,
            mixins: [cc.Collider.Circle],
            editor: CC_EDITOR && { menu: 'i18n:MAIN_MENU.component.collider/Circle Collider' }
        });
        cc.CircleCollider = module.exports = CircleCollider;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,