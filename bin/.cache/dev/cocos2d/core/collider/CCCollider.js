(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/collider/CCCollider.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Collider = cc.Class({
            name: 'cc.Collider',
            extends: cc.Component,
            properties: {
                editing: {
                    default: false,
                    serializable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.collider.editing'
                },
                tag: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.tag',
                    default: 0,
                    range: [
                        0,
                        10000000
                    ],
                    type: cc.Integer
                }
            },
            onDisable: function onDisable() {
                cc.director.getCollisionManager().removeCollider(this);
            },
            onEnable: function onEnable() {
                cc.director.getCollisionManager().addCollider(this);
            }
        });
        cc.Collider = module.exports = Collider;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,