(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/vmath/vec3.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _utils = require('./utils');
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var vec3 = function () {
            function vec3() {
                var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                _classCallCheck(this, vec3);
                this.x = x;
                this.y = y;
                this.z = z;
            }
            _createClass(vec3, null, [
                {
                    key: 'create',
                    value: function create() {
                        var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                        var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                        var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                        return new vec3(x, y, z);
                    }
                },
                {
                    key: 'zero',
                    value: function zero(out) {
                        out.x = 0;
                        out.y = 0;
                        out.z = 0;
                        return out;
                    }
                },
                {
                    key: 'clone',
                    value: function clone(a) {
                        return new vec3(a.x, a.y, a.z);
                    }
                },
                {
                    key: 'copy',
                    value: function copy(out, a) {
                        out.x = a.x;
                        out.y = a.y;
                        out.z = a.z;
                        return out;
                    }
                },
                {
                    key: 'set',
                    value: function set(out, x, y, z) {
                        out.x = x;
                        out.y = y;
                        out.z = z;
                        return out;
                    }
                },
                {
                    key: 'add',
                    value: function add(out, a, b) {
                        out.x = a.x + b.x;
                        out.y = a.y + b.y;
                        out.z = a.z + b.z;
                        return out;
                    }
                },
                {
                    key: 'subtract',
                    value: function subtract(out, a, b) {
                        out.x = a.x - b.x;
                        out.y = a.y - b.y;
                        out.z = a.z - b.z;
                        return out;
                    }
                },
                {
                    key: 'sub',
                    value: function sub(out, a, b) {
                        return vec3.subtract(out, a, b);
                    }
                },
                {
                    key: 'multiply',
                    value: function multiply(out, a, b) {
                        out.x = a.x * b.x;
                        out.y = a.y * b.y;
                        out.z = a.z * b.z;
                        return out;
                    }
                },
                {
                    key: 'mul',
                    value: function mul(out, a, b) {
                        return vec3.multiply(out, a, b);
                    }
                },
                {
                    key: 'divide',
                    value: function divide(out, a, b) {
                        out.x = a.x / b.x;
                        out.y = a.y / b.y;
                        out.z = a.z / b.z;
                        return out;
                    }
                },
                {
                    key: 'div',
                    value: function div(out, a, b) {
                        return vec3.divide(out, a, b);
                    }
                },
                {
                    key: 'ceil',
                    value: function ceil(out, a) {
                        out.x = Math.ceil(a.x);
                        out.y = Math.ceil(a.y);
                        out.z = Math.ceil(a.z);
                        return out;
                    }
                },
                {
                    key: 'floor',
                    value: function floor(out, a) {
                        out.x = Math.floor(a.x);
                        out.y = Math.floor(a.y);
                        out.z = Math.floor(a.z);
                        return out;
                    }
                },
                {
                    key: 'min',
                    value: function min(out, a, b) {
                        out.x = Math.min(a.x, b.x);
                        out.y = Math.min(a.y, b.y);
                        out.z = Math.min(a.z, b.z);
                        return out;
                    }
                },
                {
                    key: 'max',
                    value: function max(out, a, b) {
                        out.x = Math.max(a.x, b.x);
                        out.y = Math.max(a.y, b.y);
                        out.z = Math.max(a.z, b.z);
                        return out;
                    }
                },
                {
                    key: 'round',
                    value: function round(out, a) {
                        out.x = Math.round(a.x);
                        out.y = Math.round(a.y);
                        out.z = Math.round(a.z);
                        return out;
                    }
                },
                {
                    key: 'scale',
                    value: function scale(out, a, b) {
                        out.x = a.x * b;
                        out.y = a.y * b;
                        out.z = a.z * b;
                        return out;
                    }
                },
                {
                    key: 'scaleAndAdd',
                    value: function scaleAndAdd(out, a, b, scale) {
                        out.x = a.x + b.x * scale;
                        out.y = a.y + b.y * scale;
                        out.z = a.z + b.z * scale;
                        return out;
                    }
                },
                {
                    key: 'distance',
                    value: function distance(a, b) {
                        var x = b.x - a.x, y = b.y - a.y, z = b.z - a.z;
                        return Math.sqrt(x * x + y * y + z * z);
                    }
                },
                {
                    key: 'dist',
                    value: function dist(a, b) {
                        return vec3.distance(a, b);
                    }
                },
                {
                    key: 'squaredDistance',
                    value: function squaredDistance(a, b) {
                        var x = b.x - a.x, y = b.y - a.y, z = b.z - a.z;
                        return x * x + y * y + z * z;
                    }
                },
                {
                    key: 'sqrDist',
                    value: function sqrDist(a, b) {
                        return vec3.squaredDistance(a, b);
                    }
                },
                {
                    key: 'magnitude',
                    value: function magnitude(a) {
                        var x = a.x, y = a.y, z = a.z;
                        return Math.sqrt(x * x + y * y + z * z);
                    }
                },
                {
                    key: 'mag',
                    value: function mag(a) {
                        return vec3.magnitude(a);
                    }
                },
                {
                    key: 'squaredMagnitude',
                    value: function squaredMagnitude(a) {
                        var x = a.x, y = a.y, z = a.z;
                        return x * x + y * y + z * z;
                    }
                },
                {
                    key: 'sqrMag',
                    value: function sqrMag(a) {
                        return vec3.squaredMagnitude(a);
                    }
                },
                {
                    key: 'negate',
                    value: function negate(out, a) {
                        out.x = -a.x;
                        out.y = -a.y;
                        out.z = -a.z;
                        return out;
                    }
                },
                {
                    key: 'inverse',
                    value: function inverse(out, a) {
                        out.x = 1 / a.x;
                        out.y = 1 / a.y;
                        out.z = 1 / a.z;
                        return out;
                    }
                },
                {
                    key: 'inverseSafe',
                    value: function inverseSafe(out, a) {
                        var x = a.x, y = a.y, z = a.z;
                        if (Math.abs(x) < _utils.EPSILON) {
                            out.x = 0;
                        } else {
                            out.x = 1 / x;
                        }
                        if (Math.abs(y) < _utils.EPSILON) {
                            out.y = 0;
                        } else {
                            out.y = 1 / y;
                        }
                        if (Math.abs(z) < _utils.EPSILON) {
                            out.z = 0;
                        } else {
                            out.z = 1 / z;
                        }
                        return out;
                    }
                },
                {
                    key: 'normalize',
                    value: function normalize(out, a) {
                        var x = a.x, y = a.y, z = a.z;
                        var len = x * x + y * y + z * z;
                        if (len > 0) {
                            len = 1 / Math.sqrt(len);
                            out.x = x * len;
                            out.y = y * len;
                            out.z = z * len;
                        }
                        return out;
                    }
                },
                {
                    key: 'dot',
                    value: function dot(a, b) {
                        return a.x * b.x + a.y * b.y + a.z * b.z;
                    }
                },
                {
                    key: 'cross',
                    value: function cross(out, a, b) {
                        var ax = a.x, ay = a.y, az = a.z, bx = b.x, by = b.y, bz = b.z;
                        out.x = ay * bz - az * by;
                        out.y = az * bx - ax * bz;
                        out.z = ax * by - ay * bx;
                        return out;
                    }
                },
                {
                    key: 'lerp',
                    value: function lerp(out, a, b, t) {
                        var ax = a.x, ay = a.y, az = a.z;
                        out.x = ax + t * (b.x - ax);
                        out.y = ay + t * (b.y - ay);
                        out.z = az + t * (b.z - az);
                        return out;
                    }
                },
                {
                    key: 'hermite',
                    value: function hermite(out, a, b, c, d, t) {
                        var factorTimes2 = t * t, factor1 = factorTimes2 * (2 * t - 3) + 1, factor2 = factorTimes2 * (t - 2) + t, factor3 = factorTimes2 * (t - 1), factor4 = factorTimes2 * (3 - 2 * t);
                        out.x = a.x * factor1 + b.x * factor2 + c.x * factor3 + d.x * factor4;
                        out.y = a.y * factor1 + b.y * factor2 + c.y * factor3 + d.y * factor4;
                        out.z = a.z * factor1 + b.z * factor2 + c.z * factor3 + d.z * factor4;
                        return out;
                    }
                },
                {
                    key: 'bezier',
                    value: function bezier(out, a, b, c, d, t) {
                        var inverseFactor = 1 - t, inverseFactorTimesTwo = inverseFactor * inverseFactor, factorTimes2 = t * t, factor1 = inverseFactorTimesTwo * inverseFactor, factor2 = 3 * t * inverseFactorTimesTwo, factor3 = 3 * factorTimes2 * inverseFactor, factor4 = factorTimes2 * t;
                        out.x = a.x * factor1 + b.x * factor2 + c.x * factor3 + d.x * factor4;
                        out.y = a.y * factor1 + b.y * factor2 + c.y * factor3 + d.y * factor4;
                        out.z = a.z * factor1 + b.z * factor2 + c.z * factor3 + d.z * factor4;
                        return out;
                    }
                },
                {
                    key: 'random',
                    value: function random(out, scale) {
                        scale = scale || 1;
                        var phi = (0, _utils.random)() * 2 * Math.PI;
                        var theta = Math.acos((0, _utils.random)() * 2 - 1);
                        out.x = Math.sin(theta) * Math.cos(phi) * scale;
                        out.y = Math.sin(theta) * Math.sin(phi) * scale;
                        out.z = Math.cos(theta) * scale;
                        return out;
                    }
                },
                {
                    key: 'transformMat4',
                    value: function transformMat4(out, a, m) {
                        var mm = m.m;
                        var x = a.x, y = a.y, z = a.z, rhw = mm[3] * x + mm[7] * y + mm[11] * z + mm[15];
                        rhw = rhw ? 1 / rhw : 1;
                        out.x = (mm[0] * x + mm[4] * y + mm[8] * z + mm[12]) * rhw;
                        out.y = (mm[1] * x + mm[5] * y + mm[9] * z + mm[13]) * rhw;
                        out.z = (mm[2] * x + mm[6] * y + mm[10] * z + mm[14]) * rhw;
                        return out;
                    }
                },
                {
                    key: 'transformMat4Normal',
                    value: function transformMat4Normal(out, a, m) {
                        var mm = m.m;
                        var x = a.x, y = a.y, z = a.z, rhw = mm[3] * x + mm[7] * y + mm[11] * z;
                        rhw = rhw ? 1 / rhw : 1;
                        out.x = (mm[0] * x + mm[4] * y + mm[8] * z) * rhw;
                        out.y = (mm[1] * x + mm[5] * y + mm[9] * z) * rhw;
                        out.z = (mm[2] * x + mm[6] * y + mm[10] * z) * rhw;
                        return out;
                    }
                },
                {
                    key: 'transformMat3',
                    value: function transformMat3(out, a, m) {
                        var mm = m.m;
                        var x = a.x, y = a.y, z = a.z;
                        out.x = x * mm[0] + y * mm[3] + z * mm[6];
                        out.y = x * mm[1] + y * mm[4] + z * mm[7];
                        out.z = x * mm[2] + y * mm[5] + z * mm[8];
                        return out;
                    }
                },
                {
                    key: 'transformQuat',
                    value: function transformQuat(out, a, q) {
                        var x = a.x, y = a.y, z = a.z;
                        var qx = q.x, qy = q.y, qz = q.z, qw = q.w;
                        var ix = qw * x + qy * z - qz * y;
                        var iy = qw * y + qz * x - qx * z;
                        var iz = qw * z + qx * y - qy * x;
                        var iw = -qx * x - qy * y - qz * z;
                        out.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
                        out.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
                        out.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
                        return out;
                    }
                },
                {
                    key: 'rotateX',
                    value: function rotateX(out, a, b, c) {
                        var px = a.x - b.x;
                        var py = a.y - b.y;
                        var pz = a.z - b.z;
                        var rx = px;
                        var ry = py * Math.cos(c) - pz * Math.sin(c);
                        var rz = py * Math.sin(c) + pz * Math.cos(c);
                        out.x = rx + b.x;
                        out.y = ry + b.y;
                        out.z = rz + b.z;
                        return out;
                    }
                },
                {
                    key: 'rotateY',
                    value: function rotateY(out, a, b, c) {
                        var px = a.x - b.x;
                        var py = a.y - b.y;
                        var pz = a.z - b.z;
                        var rx = pz * Math.sin(c) + px * Math.cos(c);
                        var ry = py;
                        var rz = pz * Math.cos(c) - px * Math.sin(c);
                        out.x = rx + b.x;
                        out.y = ry + b.y;
                        out.z = rz + b.z;
                        return out;
                    }
                },
                {
                    key: 'rotateZ',
                    value: function rotateZ(out, a, b, c) {
                        var px = a.x - b.x;
                        var py = a.y - b.y;
                        var pz = a.z - b.z;
                        var rx = px * Math.cos(c) - py * Math.sin(c);
                        var ry = px * Math.sin(c) + py * Math.cos(c);
                        var rz = pz;
                        out.x = rx + b.x;
                        out.y = ry + b.y;
                        out.z = rz + b.z;
                        return out;
                    }
                },
                {
                    key: 'str',
                    value: function str(a) {
                        return 'vec3(' + a.x + ', ' + a.y + ', ' + a.z + ')';
                    }
                },
                {
                    key: 'array',
                    value: function array(out, v) {
                        out[0] = v.x;
                        out[1] = v.y;
                        out[2] = v.z;
                        return out;
                    }
                },
                {
                    key: 'exactEquals',
                    value: function exactEquals(a, b) {
                        return a.x === b.x && a.y === b.y && a.z === b.z;
                    }
                },
                {
                    key: 'equals',
                    value: function equals(a, b) {
                        var a0 = a.x, a1 = a.y, a2 = a.z;
                        var b0 = b.x, b1 = b.y, b2 = b.z;
                        return Math.abs(a0 - b0) <= _utils.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _utils.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _utils.EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2));
                    }
                },
                {
                    key: 'forEach',
                    value: function forEach(a, stride, offset, count, fn, arg) {
                        return vec3._forEach(a, stride, offset, count, fn, arg);
                    }
                },
                {
                    key: 'angle',
                    value: function angle(a, b) {
                        return vec3._angle(a, b);
                    }
                },
                {
                    key: 'projectOnPlane',
                    value: function projectOnPlane(out, a, n) {
                        return vec3.sub(out, a, vec3.project(out, a, n));
                    }
                },
                {
                    key: 'project',
                    value: function project(out, a, b) {
                        var sqrLen = vec3.squaredMagnitude(b);
                        if (sqrLen < 0.000001)
                            return vec3.set(out, 0, 0, 0);
                        else
                            return vec3.scale(out, b, vec3.dot(a, b) / sqrLen);
                    }
                }
            ]);
            return vec3;
        }();
        vec3._forEach = function () {
            var vec = vec3.create(0, 0, 0);
            return function (a, stride, offset, count, fn, arg) {
                var i = void 0, l = void 0;
                if (!stride) {
                    stride = 3;
                }
                if (!offset) {
                    offset = 0;
                }
                if (count) {
                    l = Math.min(count * stride + offset, a.length);
                } else {
                    l = a.length;
                }
                for (i = offset; i < l; i += stride) {
                    vec.x = a[i];
                    vec.y = a[i + 1];
                    vec.z = a[i + 2];
                    fn(vec, vec, arg);
                    a[i] = vec.x;
                    a[i + 1] = vec.y;
                    a[i + 2] = vec.z;
                }
                return a;
            };
        }();
        vec3._angle = function () {
            var tempA = vec3.create(0, 0, 0);
            var tempB = vec3.create(0, 0, 0);
            return function (a, b) {
                vec3.copy(tempA, a);
                vec3.copy(tempB, b);
                vec3.normalize(tempA, tempA);
                vec3.normalize(tempB, tempB);
                var cosine = vec3.dot(tempA, tempB);
                if (cosine > 1) {
                    return 0;
                }
                if (cosine < -1) {
                    return Math.PI;
                }
                return Math.acos(cosine);
            };
        }();
        exports.default = vec3;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,