(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/vmath/quat.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _vec = require('./vec3');
        var _vec2 = _interopRequireDefault(_vec);
        var _vec3 = require('./vec4');
        var _vec4 = _interopRequireDefault(_vec3);
        var _mat = require('./mat3');
        var _mat2 = _interopRequireDefault(_mat);
        var _utils = require('./utils');
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var halfToRad = 0.5 * Math.PI / 180;
        var quat = function () {
            function quat() {
                var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                var w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
                _classCallCheck(this, quat);
                this.x = x;
                this.y = y;
                this.z = z;
                this.w = w;
            }
            _createClass(quat, null, [
                {
                    key: 'create',
                    value: function create() {
                        var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                        var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                        var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                        var w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
                        return new quat(x, y, z, w);
                    }
                },
                {
                    key: 'clone',
                    value: function clone(a) {
                        return new quat(a.x, a.y, a.z, a.w);
                    }
                },
                {
                    key: 'copy',
                    value: function copy(out, a) {
                        return _vec4.default.copy(out, a);
                    }
                },
                {
                    key: 'set',
                    value: function set(out, x, y, z, w) {
                        out.x = x;
                        out.y = y;
                        out.z = z;
                        out.w = w;
                        return out;
                    }
                },
                {
                    key: 'identity',
                    value: function identity(out) {
                        out.x = 0;
                        out.y = 0;
                        out.z = 0;
                        out.w = 1;
                        return out;
                    }
                },
                {
                    key: 'rotationTo',
                    value: function rotationTo(out, a, b) {
                        var rotationToIIFE = function () {
                            var tmpvec3 = _vec2.default.create(0, 0, 0);
                            var xUnitVec3 = _vec2.default.create(1, 0, 0);
                            var yUnitVec3 = _vec2.default.create(0, 1, 0);
                            return function (out, a, b) {
                                var dot = _vec2.default.dot(a, b);
                                if (dot < -0.999999) {
                                    _vec2.default.cross(tmpvec3, xUnitVec3, a);
                                    if (_vec2.default.magnitude(tmpvec3) < 0.000001) {
                                        _vec2.default.cross(tmpvec3, yUnitVec3, a);
                                    }
                                    _vec2.default.normalize(tmpvec3, tmpvec3);
                                    quat.fromAxisAngle(out, tmpvec3, Math.PI);
                                    return out;
                                } else if (dot > 0.999999) {
                                    out.x = 0;
                                    out.y = 0;
                                    out.z = 0;
                                    out.w = 1;
                                    return out;
                                } else {
                                    _vec2.default.cross(tmpvec3, a, b);
                                    out.x = tmpvec3.x;
                                    out.y = tmpvec3.y;
                                    out.z = tmpvec3.z;
                                    out.w = 1 + dot;
                                    return quat.normalize(out, out);
                                }
                            };
                        }();
                        return rotationToIIFE(out, a, b);
                    }
                },
                {
                    key: 'getAxisAngle',
                    value: function getAxisAngle(out_axis, q) {
                        var rad = Math.acos(q.w) * 2;
                        var s = Math.sin(rad / 2);
                        if (s != 0) {
                            out_axis.x = q.x / s;
                            out_axis.y = q.y / s;
                            out_axis.z = q.z / s;
                        } else {
                            out_axis.x = 1;
                            out_axis.y = 0;
                            out_axis.z = 0;
                        }
                        return rad;
                    }
                },
                {
                    key: 'multiply',
                    value: function multiply(out, a, b) {
                        var ax = a.x, ay = a.y, az = a.z, aw = a.w, bx = b.x, by = b.y, bz = b.z, bw = b.w;
                        out.x = ax * bw + aw * bx + ay * bz - az * by;
                        out.y = ay * bw + aw * by + az * bx - ax * bz;
                        out.z = az * bw + aw * bz + ax * by - ay * bx;
                        out.w = aw * bw - ax * bx - ay * by - az * bz;
                        return out;
                    }
                },
                {
                    key: 'mul',
                    value: function mul(out, a, b) {
                        return quat.multiply(out, a, b);
                    }
                },
                {
                    key: 'scale',
                    value: function scale(out, a, b) {
                        out.x = a.x * b;
                        out.y = a.y * b;
                        out.z = a.z * b;
                        out.w = a.w * b;
                        return out;
                    }
                },
                {
                    key: 'rotateX',
                    value: function rotateX(out, a, rad) {
                        rad *= 0.5;
                        var ax = a.x, ay = a.y, az = a.z, aw = a.w, bx = Math.sin(rad), bw = Math.cos(rad);
                        out.x = ax * bw + aw * bx;
                        out.y = ay * bw + az * bx;
                        out.z = az * bw - ay * bx;
                        out.w = aw * bw - ax * bx;
                        return out;
                    }
                },
                {
                    key: 'rotateY',
                    value: function rotateY(out, a, rad) {
                        rad *= 0.5;
                        var ax = a.x, ay = a.y, az = a.z, aw = a.w, by = Math.sin(rad), bw = Math.cos(rad);
                        out.x = ax * bw - az * by;
                        out.y = ay * bw + aw * by;
                        out.z = az * bw + ax * by;
                        out.w = aw * bw - ay * by;
                        return out;
                    }
                },
                {
                    key: 'rotateZ',
                    value: function rotateZ(out, a, rad) {
                        rad *= 0.5;
                        var ax = a.x, ay = a.y, az = a.z, aw = a.w, bz = Math.sin(rad), bw = Math.cos(rad);
                        out.x = ax * bw + ay * bz;
                        out.y = ay * bw - ax * bz;
                        out.z = az * bw + aw * bz;
                        out.w = aw * bw - az * bz;
                        return out;
                    }
                },
                {
                    key: 'rotateAround',
                    value: function rotateAround(out, rot, axis, rad) {
                        var rotateAroundIIFE = function () {
                            var v3_tmp = _vec2.default.create(0, 0, 0);
                            var q_tmp = quat.create();
                            return function (out, rot, axis, rad) {
                                quat.invert(q_tmp, rot);
                                _vec2.default.transformQuat(v3_tmp, axis, q_tmp);
                                quat.fromAxisAngle(q_tmp, v3_tmp, rad);
                                quat.mul(out, rot, q_tmp);
                                return out;
                            };
                        }();
                        return rotateAroundIIFE(out, rot, axis, rad);
                    }
                },
                {
                    key: 'rotateAroundLocal',
                    value: function rotateAroundLocal(out, rot, axis, rad) {
                        var rotateAroundLocalIIFE = function () {
                            var q_tmp = quat.create();
                            return function (out, rot, axis, rad) {
                                quat.fromAxisAngle(q_tmp, axis, rad);
                                quat.mul(out, rot, q_tmp);
                                return out;
                            };
                        }();
                        return rotateAroundLocalIIFE(out, rot, axis, rad);
                    }
                },
                {
                    key: 'calculateW',
                    value: function calculateW(out, a) {
                        var x = a.x, y = a.y, z = a.z;
                        out.x = x;
                        out.y = y;
                        out.z = z;
                        out.w = Math.sqrt(Math.abs(1 - x * x - y * y - z * z));
                        return out;
                    }
                },
                {
                    key: 'dot',
                    value: function dot(a, b) {
                        return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
                    }
                },
                {
                    key: 'lerp',
                    value: function lerp(out, a, b, t) {
                        var ax = a.x, ay = a.y, az = a.z, aw = a.w;
                        out.x = ax + t * (b.x - ax);
                        out.y = ay + t * (b.y - ay);
                        out.z = az + t * (b.z - az);
                        out.w = aw + t * (b.w - aw);
                        return out;
                    }
                },
                {
                    key: 'slerp',
                    value: function slerp(out, a, b, t) {
                        var ax = a.x, ay = a.y, az = a.z, aw = a.w, bx = b.x, by = b.y, bz = b.z, bw = b.w;
                        var omega = void 0, cosom = void 0, sinom = void 0, scale0 = void 0, scale1 = void 0;
                        cosom = ax * bx + ay * by + az * bz + aw * bw;
                        if (cosom < 0) {
                            cosom = -cosom;
                            bx = -bx;
                            by = -by;
                            bz = -bz;
                            bw = -bw;
                        }
                        if (1 - cosom > 0.000001) {
                            omega = Math.acos(cosom);
                            sinom = Math.sin(omega);
                            scale0 = Math.sin((1 - t) * omega) / sinom;
                            scale1 = Math.sin(t * omega) / sinom;
                        } else {
                            scale0 = 1 - t;
                            scale1 = t;
                        }
                        out.x = scale0 * ax + scale1 * bx;
                        out.y = scale0 * ay + scale1 * by;
                        out.z = scale0 * az + scale1 * bz;
                        out.w = scale0 * aw + scale1 * bw;
                        return out;
                    }
                },
                {
                    key: 'sqlerp',
                    value: function sqlerp(out, a, b, c, d, t) {
                        var sqlerpIIFE = function () {
                            var temp1 = quat.create();
                            var temp2 = quat.create();
                            return function (out, a, b, c, d, t) {
                                quat.slerp(temp1, a, d, t);
                                quat.slerp(temp2, b, c, t);
                                quat.slerp(out, temp1, temp2, 2 * t * (1 - t));
                                return out;
                            };
                        }();
                        return sqlerpIIFE(out, a, b, c, d, t);
                    }
                },
                {
                    key: 'invert',
                    value: function invert(out, a) {
                        var a0 = a.x, a1 = a.y, a2 = a.z, a3 = a.w;
                        var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;
                        var invDot = dot ? 1 / dot : 0;
                        out.x = -a0 * invDot;
                        out.y = -a1 * invDot;
                        out.z = -a2 * invDot;
                        out.w = a3 * invDot;
                        return out;
                    }
                },
                {
                    key: 'conjugate',
                    value: function conjugate(out, a) {
                        out.x = -a.x;
                        out.y = -a.y;
                        out.z = -a.z;
                        out.w = a.w;
                        return out;
                    }
                },
                {
                    key: 'magnitude',
                    value: function magnitude(a) {
                        var x = a.x, y = a.y, z = a.z, w = a.w;
                        return Math.sqrt(x * x + y * y + z * z + w * w);
                    }
                },
                {
                    key: 'mag',
                    value: function mag(a) {
                        return quat.magnitude(a);
                    }
                },
                {
                    key: 'squaredMagnitude',
                    value: function squaredMagnitude(a) {
                        var x = a.x, y = a.y, z = a.z, w = a.w;
                        return x * x + y * y + z * z + w * w;
                    }
                },
                {
                    key: 'sqrMag',
                    value: function sqrMag(a) {
                        return quat.squaredMagnitude(a);
                    }
                },
                {
                    key: 'normalize',
                    value: function normalize(out, a) {
                        var x = a.x, y = a.y, z = a.z, w = a.w;
                        var len = x * x + y * y + z * z + w * w;
                        if (len > 0) {
                            len = 1 / Math.sqrt(len);
                            out.x = x * len;
                            out.y = y * len;
                            out.z = z * len;
                            out.w = w * len;
                        }
                        return out;
                    }
                },
                {
                    key: 'fromAxes',
                    value: function fromAxes(out, xAxis, yAxis, zAxis) {
                        var fromAxesIIFE = function () {
                            var matr = _mat2.default.create();
                            return function (out, xAxis, yAxis, zAxis) {
                                _mat2.default.set(matr, xAxis.x, xAxis.y, xAxis.z, yAxis.x, yAxis.y, yAxis.z, zAxis.x, zAxis.y, zAxis.z);
                                return quat.normalize(out, quat.fromMat3(out, matr));
                            };
                        }();
                        return fromAxesIIFE(out, xAxis, yAxis, zAxis);
                    }
                },
                {
                    key: 'fromViewUp',
                    value: function fromViewUp(out, view, up) {
                        var fromViewUpIIFE = function () {
                            var matr = _mat2.default.create();
                            return function (out, view, up) {
                                _mat2.default.fromViewUp(matr, view, up);
                                if (!matr) {
                                    return null;
                                }
                                return quat.normalize(out, quat.fromMat3(out, matr));
                            };
                        }();
                        return fromViewUpIIFE(out, view, up);
                    }
                },
                {
                    key: 'fromAxisAngle',
                    value: function fromAxisAngle(out, axis, rad) {
                        rad = rad * 0.5;
                        var s = Math.sin(rad);
                        out.x = s * axis.x;
                        out.y = s * axis.y;
                        out.z = s * axis.z;
                        out.w = Math.cos(rad);
                        return out;
                    }
                },
                {
                    key: 'fromMat3',
                    value: function fromMat3(out, m) {
                        var mm = m.m;
                        var m00 = mm[0], m01 = mm[3], m02 = mm[6], m10 = mm[1], m11 = mm[4], m12 = mm[7], m20 = mm[2], m21 = mm[5], m22 = mm[8];
                        var trace = m00 + m11 + m22;
                        if (trace > 0) {
                            var s = 0.5 / Math.sqrt(trace + 1);
                            out.w = 0.25 / s;
                            out.x = (m21 - m12) * s;
                            out.y = (m02 - m20) * s;
                            out.z = (m10 - m01) * s;
                        } else if (m00 > m11 && m00 > m22) {
                            var _s = 2 * Math.sqrt(1 + m00 - m11 - m22);
                            out.w = (m21 - m12) / _s;
                            out.x = 0.25 * _s;
                            out.y = (m01 + m10) / _s;
                            out.z = (m02 + m20) / _s;
                        } else if (m11 > m22) {
                            var _s2 = 2 * Math.sqrt(1 + m11 - m00 - m22);
                            out.w = (m02 - m20) / _s2;
                            out.x = (m01 + m10) / _s2;
                            out.y = 0.25 * _s2;
                            out.z = (m12 + m21) / _s2;
                        } else {
                            var _s3 = 2 * Math.sqrt(1 + m22 - m00 - m11);
                            out.w = (m10 - m01) / _s3;
                            out.x = (m02 + m20) / _s3;
                            out.y = (m12 + m21) / _s3;
                            out.z = 0.25 * _s3;
                        }
                        return out;
                    }
                },
                {
                    key: 'fromEuler',
                    value: function fromEuler(out, x, y, z) {
                        x *= halfToRad;
                        y *= halfToRad;
                        z *= halfToRad;
                        var sx = Math.sin(x);
                        var cx = Math.cos(x);
                        var sy = Math.sin(y);
                        var cy = Math.cos(y);
                        var sz = Math.sin(z);
                        var cz = Math.cos(z);
                        out.x = sx * cy * cz + cx * sy * sz;
                        out.y = cx * sy * cz + sx * cy * sz;
                        out.z = cx * cy * sz - sx * sy * cz;
                        out.w = cx * cy * cz - sx * sy * sz;
                        return out;
                    }
                },
                {
                    key: 'fromAngleZ',
                    value: function fromAngleZ(out, z) {
                        z *= halfToRad;
                        out.x = out.y = 0;
                        out.z = Math.sin(z);
                        out.w = Math.cos(z);
                    }
                },
                {
                    key: 'toEuler',
                    value: function toEuler(out, q) {
                        var x = q.x, y = q.y, z = q.z, w = q.w;
                        var heading = void 0, attitude = void 0, bank = void 0;
                        var test = x * y + z * w;
                        if (test > 0.499) {
                            heading = 2 * Math.atan2(x, w);
                            attitude = Math.PI / 2;
                            bank = 0;
                        }
                        if (test < -0.499) {
                            heading = -2 * Math.atan2(x, w);
                            attitude = -Math.PI / 2;
                            bank = 0;
                        }
                        if (isNaN(heading)) {
                            var sqx = x * x;
                            var sqy = y * y;
                            var sqz = z * z;
                            heading = Math.atan2(2 * y * w - 2 * x * z, 1 - 2 * sqy - 2 * sqz);
                            attitude = Math.asin(2 * test);
                            bank = Math.atan2(2 * x * w - 2 * y * z, 1 - 2 * sqx - 2 * sqz);
                        }
                        out.y = (0, _utils.toDegree)(heading);
                        out.z = (0, _utils.toDegree)(attitude);
                        out.x = (0, _utils.toDegree)(bank);
                        return out;
                    }
                },
                {
                    key: 'str',
                    value: function str(a) {
                        return 'quat(' + a.x + ', ' + a.y + ', ' + a.z + ', ' + a.w + ')';
                    }
                },
                {
                    key: 'array',
                    value: function array(out, q) {
                        out[0] = q.x;
                        out[1] = q.y;
                        out[2] = q.z;
                        out[3] = q.w;
                        return out;
                    }
                },
                {
                    key: 'exactEquals',
                    value: function exactEquals(a, b) {
                        return _vec4.default.exactEquals(a, b);
                    }
                },
                {
                    key: 'equals',
                    value: function equals(a, b) {
                        return _vec4.default.equals(a, b);
                    }
                }
            ]);
            return quat;
        }();
        exports.default = quat;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,