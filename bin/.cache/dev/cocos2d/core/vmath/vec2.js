(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/vmath/vec2.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _utils = require('./utils');
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var vec2 = function () {
            function vec2() {
                var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                _classCallCheck(this, vec2);
                this.x = x;
                this.y = y;
            }
            _createClass(vec2, null, [
                {
                    key: 'create',
                    value: function create() {
                        var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                        var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                        return new vec2(x, y);
                    }
                },
                {
                    key: 'zero',
                    value: function zero(out) {
                        out.x = 0;
                        out.y = 0;
                        return out;
                    }
                },
                {
                    key: 'clone',
                    value: function clone(a) {
                        return new vec2(a.x, a.y);
                    }
                },
                {
                    key: 'copy',
                    value: function copy(out, a) {
                        out.x = a.x;
                        out.y = a.y;
                        return out;
                    }
                },
                {
                    key: 'set',
                    value: function set(out, x, y) {
                        out.x = x;
                        out.y = y;
                        return out;
                    }
                },
                {
                    key: 'add',
                    value: function add(out, a, b) {
                        out.x = a.x + b.x;
                        out.y = a.y + b.y;
                        return out;
                    }
                },
                {
                    key: 'subtract',
                    value: function subtract(out, a, b) {
                        out.x = a.x - b.x;
                        out.y = a.y - b.y;
                        return out;
                    }
                },
                {
                    key: 'sub',
                    value: function sub(out, a, b) {
                        return vec2.subtract(out, a, b);
                    }
                },
                {
                    key: 'multiply',
                    value: function multiply(out, a, b) {
                        out.x = a.x * b.x;
                        out.y = a.y * b.y;
                        return out;
                    }
                },
                {
                    key: 'mul',
                    value: function mul(out, a, b) {
                        return vec2.multiply(out, a, b);
                    }
                },
                {
                    key: 'divide',
                    value: function divide(out, a, b) {
                        out.x = a.x / b.x;
                        out.y = a.y / b.y;
                        return out;
                    }
                },
                {
                    key: 'div',
                    value: function div(out, a, b) {
                        return vec2.divide(out, a, b);
                    }
                },
                {
                    key: 'ceil',
                    value: function ceil(out, a) {
                        out.x = Math.ceil(a.x);
                        out.y = Math.ceil(a.y);
                        return out;
                    }
                },
                {
                    key: 'floor',
                    value: function floor(out, a) {
                        out.x = Math.floor(a.x);
                        out.y = Math.floor(a.y);
                        return out;
                    }
                },
                {
                    key: 'min',
                    value: function min(out, a, b) {
                        out.x = Math.min(a.x, b.x);
                        out.y = Math.min(a.y, b.y);
                        return out;
                    }
                },
                {
                    key: 'max',
                    value: function max(out, a, b) {
                        out.x = Math.max(a.x, b.x);
                        out.y = Math.max(a.y, b.y);
                        return out;
                    }
                },
                {
                    key: 'round',
                    value: function round(out, a) {
                        out.x = Math.round(a.x);
                        out.y = Math.round(a.y);
                        return out;
                    }
                },
                {
                    key: 'scale',
                    value: function scale(out, a, b) {
                        out.x = a.x * b;
                        out.y = a.y * b;
                        return out;
                    }
                },
                {
                    key: 'scaleAndAdd',
                    value: function scaleAndAdd(out, a, b, scale) {
                        out.x = a.x + b.x * scale;
                        out.y = a.y + b.y * scale;
                        return out;
                    }
                },
                {
                    key: 'distance',
                    value: function distance(a, b) {
                        var x = b.x - a.x, y = b.y - a.y;
                        return Math.sqrt(x * x + y * y);
                    }
                },
                {
                    key: 'dist',
                    value: function dist(a, b) {
                        return vec2.distance(a, b);
                    }
                },
                {
                    key: 'squaredDistance',
                    value: function squaredDistance(a, b) {
                        var x = b.x - a.x, y = b.y - a.y;
                        return x * x + y * y;
                    }
                },
                {
                    key: 'sqrDist',
                    value: function sqrDist(a, b) {
                        return vec2.squaredDistance(a, b);
                    }
                },
                {
                    key: 'magnitude',
                    value: function magnitude(a) {
                        var x = a.x, y = a.y;
                        return Math.sqrt(x * x + y * y);
                    }
                },
                {
                    key: 'mag',
                    value: function mag(a) {
                        return vec2.magnitude(a);
                    }
                },
                {
                    key: 'squaredMagnitude',
                    value: function squaredMagnitude(a) {
                        var x = a.x, y = a.y;
                        return x * x + y * y;
                    }
                },
                {
                    key: 'sqrMag',
                    value: function sqrMag(a) {
                        return vec2.squaredMagnitude(a);
                    }
                },
                {
                    key: 'negate',
                    value: function negate(out, a) {
                        out.x = -a.x;
                        out.y = -a.y;
                        return out;
                    }
                },
                {
                    key: 'inverse',
                    value: function inverse(out, a) {
                        out.x = 1 / a.x;
                        out.y = 1 / a.y;
                        return out;
                    }
                },
                {
                    key: 'inverseSafe',
                    value: function inverseSafe(out, a) {
                        var x = a.x, y = a.y;
                        if (Math.abs(x) < _utils.EPSILON) {
                            out.x = 0;
                        } else {
                            out.x = 1 / x;
                        }
                        if (Math.abs(y) < _utils.EPSILON) {
                            out.y = 0;
                        } else {
                            out.y = 1 / a.y;
                        }
                        return out;
                    }
                },
                {
                    key: 'normalize',
                    value: function normalize(out, a) {
                        var x = a.x, y = a.y;
                        var len = x * x + y * y;
                        if (len > 0) {
                            len = 1 / Math.sqrt(len);
                            out.x = a.x * len;
                            out.y = a.y * len;
                        }
                        return out;
                    }
                },
                {
                    key: 'dot',
                    value: function dot(a, b) {
                        return a.x * b.x + a.y * b.y;
                    }
                },
                {
                    key: 'cross',
                    value: function cross(out, a, b) {
                        var z = a.x * b.y - a.y * b.x;
                        out.x = out.y = 0;
                        out.z = z;
                        return out;
                    }
                },
                {
                    key: 'lerp',
                    value: function lerp(out, a, b, t) {
                        var ax = a.x, ay = a.y;
                        out.x = ax + t * (b.x - ax);
                        out.y = ay + t * (b.y - ay);
                        return out;
                    }
                },
                {
                    key: 'random',
                    value: function random(out, scale) {
                        scale = scale || 1;
                        var r = (0, _utils.random)() * 2 * Math.PI;
                        out.x = Math.cos(r) * scale;
                        out.y = Math.sin(r) * scale;
                        return out;
                    }
                },
                {
                    key: 'transformMat2',
                    value: function transformMat2(out, a, m) {
                        var mm = m.m;
                        var x = a.x, y = a.y;
                        out.x = mm[0] * x + mm[2] * y;
                        out.y = mm[1] * x + mm[3] * y;
                        return out;
                    }
                },
                {
                    key: 'transformMat23',
                    value: function transformMat23(out, a, m) {
                        var mm = m.m;
                        var x = a.x, y = a.y;
                        out.x = mm[0] * x + mm[2] * y + mm[4];
                        out.y = mm[1] * x + mm[3] * y + mm[5];
                        return out;
                    }
                },
                {
                    key: 'transformMat3',
                    value: function transformMat3(out, a, m) {
                        var mm = m.m;
                        var x = a.x, y = a.y;
                        out.x = mm[0] * x + mm[3] * y + mm[6];
                        out.y = mm[1] * x + mm[4] * y + mm[7];
                        return out;
                    }
                },
                {
                    key: 'transformMat4',
                    value: function transformMat4(out, a, m) {
                        var mm = m.m;
                        var x = a.x, y = a.y;
                        out.x = mm[0] * x + mm[4] * y + mm[12];
                        out.y = mm[1] * x + mm[5] * y + mm[13];
                        return out;
                    }
                },
                {
                    key: 'forEach',
                    value: function forEach(a, stride, offset, count, fn, arg) {
                        return vec2._forEach(a, stride, offset, count, fn, arg);
                    }
                },
                {
                    key: 'str',
                    value: function str(a) {
                        return 'vec2(' + a.x + ', ' + a.y + ')';
                    }
                },
                {
                    key: 'array',
                    value: function array(out, v) {
                        out[0] = v.x;
                        out[1] = v.y;
                        return out;
                    }
                },
                {
                    key: 'exactEquals',
                    value: function exactEquals(a, b) {
                        return a.x === b.x && a.y === b.y;
                    }
                },
                {
                    key: 'equals',
                    value: function equals(a, b) {
                        var a0 = a.x, a1 = a.y;
                        var b0 = b.x, b1 = b.y;
                        return Math.abs(a0 - b0) <= _utils.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _utils.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1));
                    }
                },
                {
                    key: 'angle',
                    value: function angle(a, b) {
                        return vec2._angle(a, b);
                    }
                }
            ]);
            return vec2;
        }();
        vec2._forEach = function () {
            var vec = vec2.create(0, 0);
            return function (a, stride, offset, count, fn, arg) {
                var i = void 0, l = void 0;
                if (!stride) {
                    stride = 2;
                }
                if (!offset) {
                    offset = 0;
                }
                if (count) {
                    l = Math.min(count * stride + offset, a.length);
                } else {
                    l = a.length;
                }
                for (i = offset; i < l; i += stride) {
                    vec.x = a[i];
                    vec.y = a[i + 1];
                    fn(vec, vec, arg);
                    a[i] = vec.x;
                    a[i + 1] = vec.y;
                }
                return a;
            };
        }();
        vec2._angle = function () {
            var tempA = vec2.create(0, 0);
            var tempB = vec2.create(0, 0);
            return function (a, b) {
                vec2.normalize(tempA, a);
                vec2.normalize(tempB, b);
                var cosine = vec2.dot(tempA, tempB);
                if (cosine > 1) {
                    return 0;
                }
                if (cosine < -1) {
                    return Math.PI;
                }
                return Math.acos(cosine);
            };
        }();
        exports.default = vec2;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,