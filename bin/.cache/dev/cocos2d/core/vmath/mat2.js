(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/vmath/mat2.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _utils = require('./utils');
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var mat2 = function () {
            function mat2() {
                var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
                var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
                _classCallCheck(this, mat2);
                if ((typeof m00 === 'undefined' ? 'undefined' : _typeof(m00)) === 'object') {
                    if (m01) {
                        this.m = new m00.constructor(4);
                        this.m.set(m00);
                    } else {
                        this.m = m00;
                    }
                } else {
                    this.m = new _utils.FLOAT_ARRAY_TYPE(4);
                    var m = this.m;
                    m[0] = m00;
                    m[1] = m01;
                    m[2] = m02;
                    m[3] = m03;
                }
            }
            _createClass(mat2, null, [
                {
                    key: 'create',
                    value: function create() {
                        var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
                        var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                        var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                        var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
                        return new mat2(m00, m01, m02, m03);
                    }
                },
                {
                    key: 'clone',
                    value: function clone(a) {
                        var am = a.m;
                        return new mat2(am[0], am[1], am[2], am[3]);
                    }
                },
                {
                    key: 'copy',
                    value: function copy(out, a) {
                        out.m.set(a.m);
                        return out;
                    }
                },
                {
                    key: 'identity',
                    value: function identity(out) {
                        var outm = out.m;
                        outm[0] = 1;
                        outm[1] = 0;
                        outm[2] = 0;
                        outm[3] = 1;
                        return out;
                    }
                },
                {
                    key: 'set',
                    value: function set(out, m00, m01, m10, m11) {
                        var outm = out.m;
                        outm[0] = m00;
                        outm[1] = m01;
                        outm[2] = m10;
                        outm[3] = m11;
                        return out;
                    }
                },
                {
                    key: 'transpose',
                    value: function transpose(out, a) {
                        var outm = out.m, am = a.m;
                        if (out === a) {
                            var a1 = am[1];
                            outm[1] = am[2];
                            outm[2] = a1;
                        } else {
                            outm[0] = am[0];
                            outm[1] = am[2];
                            outm[2] = am[1];
                            outm[3] = am[3];
                        }
                        return out;
                    }
                },
                {
                    key: 'invert',
                    value: function invert(out, a) {
                        var am = a.m, outm = out.m;
                        var a0 = am[0], a1 = am[1], a2 = am[2], a3 = am[3];
                        var det = a0 * a3 - a2 * a1;
                        if (!det) {
                            return null;
                        }
                        det = 1 / det;
                        outm[0] = a3 * det;
                        outm[1] = -a1 * det;
                        outm[2] = -a2 * det;
                        outm[3] = a0 * det;
                        return out;
                    }
                },
                {
                    key: 'adjoint',
                    value: function adjoint(out, a) {
                        var outm = out.m, am = a.m;
                        var a0 = am[0];
                        outm[0] = am[3];
                        outm[1] = -am[1];
                        outm[2] = -am[2];
                        outm[3] = a0;
                        return out;
                    }
                },
                {
                    key: 'determinant',
                    value: function determinant(a) {
                        var am = a.m;
                        return am[0] * am[3] - am[2] * am[1];
                    }
                },
                {
                    key: 'multiply',
                    value: function multiply(out, a, b) {
                        var am = a.m, outm = out.m;
                        var a0 = am[0], a1 = am[1], a2 = am[2], a3 = am[3];
                        var b0 = bm[0], b1 = bm[1], b2 = bm[2], b3 = bm[3];
                        outm[0] = a0 * b0 + a2 * b1;
                        outm[1] = a1 * b0 + a3 * b1;
                        outm[2] = a0 * b2 + a2 * b3;
                        outm[3] = a1 * b2 + a3 * b3;
                        return out;
                    }
                },
                {
                    key: 'mul',
                    value: function mul(out, a, b) {
                        return mat2.multiply(out, a, b);
                    }
                },
                {
                    key: 'rotate',
                    value: function rotate(out, a, rad) {
                        var am = a.m, outm = out.m;
                        var a0 = am[0], a1 = am[1], a2 = am[2], a3 = am[3], s = Math.sin(rad), c = Math.cos(rad);
                        outm[0] = a0 * c + a2 * s;
                        outm[1] = a1 * c + a3 * s;
                        outm[2] = a0 * -s + a2 * c;
                        outm[3] = a1 * -s + a3 * c;
                        return out;
                    }
                },
                {
                    key: 'scale',
                    value: function scale(out, a, v) {
                        var am = a.m, outm = out.m;
                        var a0 = am[0], a1 = am[1], a2 = am[2], a3 = am[3], v0 = v.x, v1 = v.y;
                        outm[0] = a0 * v0;
                        outm[1] = a1 * v0;
                        outm[2] = a2 * v1;
                        outm[3] = a3 * v1;
                        return out;
                    }
                },
                {
                    key: 'fromRotation',
                    value: function fromRotation(out, rad) {
                        var outm = out.m;
                        var s = Math.sin(rad), c = Math.cos(rad);
                        outm[0] = c;
                        outm[1] = s;
                        outm[2] = -s;
                        outm[3] = c;
                        return out;
                    }
                },
                {
                    key: 'fromScaling',
                    value: function fromScaling(out, v) {
                        var outm = out.m;
                        outm[0] = v.x;
                        outm[1] = 0;
                        outm[2] = 0;
                        outm[3] = v.y;
                        return out;
                    }
                },
                {
                    key: 'str',
                    value: function str(a) {
                        var am = a.m;
                        return 'mat2(' + am[0] + ', ' + am[1] + ', ' + am[2] + ', ' + am[3] + ')';
                    }
                },
                {
                    key: 'array',
                    value: function array(out, m) {
                        var mm = m.m;
                        out[0] = mm[0];
                        out[1] = mm[1];
                        out[2] = mm[2];
                        out[3] = mm[3];
                        return out;
                    }
                },
                {
                    key: 'frob',
                    value: function frob(a) {
                        var am = a.m;
                        return Math.sqrt(Math.pow(am[0], 2) + Math.pow(am[1], 2) + Math.pow(am[2], 2) + Math.pow(am[3], 2));
                    }
                },
                {
                    key: 'LDU',
                    value: function LDU(L, D, U, a) {
                        var Lm = L.m, Um = U.m, am = a.m;
                        Lm[2] = am[2] / am[0];
                        Um[0] = am[0];
                        Um[1] = am[1];
                        Um[3] = am[3] - Lm[2] * Um[1];
                    }
                },
                {
                    key: 'add',
                    value: function add(out, a, b) {
                        var am = a.m, bm = b.m, outm = out.m;
                        outm[0] = am[0] + bm[0];
                        outm[1] = am[1] + bm[1];
                        outm[2] = am[2] + bm[2];
                        outm[3] = am[3] + bm[3];
                        return out;
                    }
                },
                {
                    key: 'subtract',
                    value: function subtract(out, a, b) {
                        var am = a.m, bm = b.m, outm = out.m;
                        outm[0] = am[0] - bm[0];
                        outm[1] = am[1] - bm[1];
                        outm[2] = am[2] - bm[2];
                        outm[3] = am[3] - bm[3];
                        return out;
                    }
                },
                {
                    key: 'sub',
                    value: function sub(out, a, b) {
                        return mat2.subtract(out, a, b);
                    }
                },
                {
                    key: 'exactEquals',
                    value: function exactEquals(a, b) {
                        var am = a.m, bm = b.m;
                        return am[0] === bm[0] && am[1] === bm[1] && am[2] === bm[2] && am[3] === bm[3];
                    }
                },
                {
                    key: 'equals',
                    value: function equals(a, b) {
                        var am = a.m, bm = b.m;
                        var a0 = am[0], a1 = am[1], a2 = am[2], a3 = am[3];
                        var b0 = bm[0], b1 = bm[1], b2 = bm[2], b3 = bm[3];
                        return Math.abs(a0 - b0) <= _utils.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _utils.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _utils.EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _utils.EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3));
                    }
                },
                {
                    key: 'multiplyScalar',
                    value: function multiplyScalar(out, a, b) {
                        var am = a.m, outm = out.m;
                        outm[0] = am[0] * b;
                        outm[1] = am[1] * b;
                        outm[2] = am[2] * b;
                        outm[3] = am[3] * b;
                        return out;
                    }
                },
                {
                    key: 'multiplyScalarAndAdd',
                    value: function multiplyScalarAndAdd(out, a, b, scale) {
                        var am = a.m, bm = b.m, outm = out.m;
                        outm[0] = am[0] + bm[0] * scale;
                        outm[1] = am[1] + bm[1] * scale;
                        outm[2] = am[2] + bm[2] * scale;
                        outm[3] = am[3] + bm[3] * scale;
                        return out;
                    }
                }
            ]);
            return mat2;
        }();
        exports.default = mat2;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,