(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/vmath/mat4.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _utils = require('./utils');
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var mat4 = function () {
            function mat4() {
                var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
                var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
                var m04 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
                var m05 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;
                var m06 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
                var m07 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
                var m08 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;
                var m09 = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;
                var m10 = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 1;
                var m11 = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 0;
                var m12 = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : 0;
                var m13 = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : 0;
                var m14 = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : 0;
                var m15 = arguments.length > 15 && arguments[15] !== undefined ? arguments[15] : 1;
                _classCallCheck(this, mat4);
                if ((typeof m00 === 'undefined' ? 'undefined' : _typeof(m00)) === 'object') {
                    if (m01) {
                        this.m = new m00.constructor(16);
                        this.m.set(m00);
                    } else {
                        this.m = m00;
                    }
                } else {
                    this.m = new _utils.FLOAT_ARRAY_TYPE(16);
                    var m = this.m;
                    m[0] = m00;
                    m[1] = m01;
                    m[2] = m02;
                    m[3] = m03;
                    m[4] = m04;
                    m[5] = m05;
                    m[6] = m06;
                    m[7] = m07;
                    m[8] = m08;
                    m[9] = m09;
                    m[10] = m10;
                    m[11] = m11;
                    m[12] = m12;
                    m[13] = m13;
                    m[14] = m14;
                    m[15] = m15;
                }
            }
            _createClass(mat4, null, [
                {
                    key: 'create',
                    value: function create() {
                        var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
                        var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                        var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                        var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
                        var m04 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
                        var m05 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;
                        var m06 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
                        var m07 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
                        var m08 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;
                        var m09 = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;
                        var m10 = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 1;
                        var m11 = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 0;
                        var m12 = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : 0;
                        var m13 = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : 0;
                        var m14 = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : 0;
                        var m15 = arguments.length > 15 && arguments[15] !== undefined ? arguments[15] : 1;
                        return new mat4(m00, m01, m02, m03, m04, m05, m06, m07, m08, m09, m10, m11, m12, m13, m14, m15);
                    }
                },
                {
                    key: 'clone',
                    value: function clone(a) {
                        var am = a.m;
                        return new mat4(am[0], am[1], am[2], am[3], am[4], am[5], am[6], am[7], am[8], am[9], am[10], am[11], am[12], am[13], am[14], am[15]);
                    }
                },
                {
                    key: 'copy',
                    value: function copy(out, a) {
                        out.m.set(a.m);
                        return out;
                    }
                },
                {
                    key: 'set',
                    value: function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
                        var outm = out.m;
                        outm[0] = m00;
                        outm[1] = m01;
                        outm[2] = m02;
                        outm[3] = m03;
                        outm[4] = m10;
                        outm[5] = m11;
                        outm[6] = m12;
                        outm[7] = m13;
                        outm[8] = m20;
                        outm[9] = m21;
                        outm[10] = m22;
                        outm[11] = m23;
                        outm[12] = m30;
                        outm[13] = m31;
                        outm[14] = m32;
                        outm[15] = m33;
                        return out;
                    }
                },
                {
                    key: 'identity',
                    value: function identity(out) {
                        var outm = out.m;
                        outm[0] = 1;
                        outm[1] = 0;
                        outm[2] = 0;
                        outm[3] = 0;
                        outm[4] = 0;
                        outm[5] = 1;
                        outm[6] = 0;
                        outm[7] = 0;
                        outm[8] = 0;
                        outm[9] = 0;
                        outm[10] = 1;
                        outm[11] = 0;
                        outm[12] = 0;
                        outm[13] = 0;
                        outm[14] = 0;
                        outm[15] = 1;
                        return out;
                    }
                },
                {
                    key: 'transpose',
                    value: function transpose(out, a) {
                        var am = a.m, outm = out.m;
                        if (out === a) {
                            var a01 = am[1], a02 = am[2], a03 = am[3], a12 = am[6], a13 = am[7], a23 = am[11];
                            outm[1] = am[4];
                            outm[2] = am[8];
                            outm[3] = am[12];
                            outm[4] = a01;
                            outm[6] = am[9];
                            outm[7] = am[13];
                            outm[8] = a02;
                            outm[9] = a12;
                            outm[11] = am[14];
                            outm[12] = a03;
                            outm[13] = a13;
                            outm[14] = a23;
                        } else {
                            outm[0] = am[0];
                            outm[1] = am[4];
                            outm[2] = am[8];
                            outm[3] = am[12];
                            outm[4] = am[1];
                            outm[5] = am[5];
                            outm[6] = am[9];
                            outm[7] = am[13];
                            outm[8] = am[2];
                            outm[9] = am[6];
                            outm[10] = am[10];
                            outm[11] = am[14];
                            outm[12] = am[3];
                            outm[13] = am[7];
                            outm[14] = am[11];
                            outm[15] = am[15];
                        }
                        return out;
                    }
                },
                {
                    key: 'invert',
                    value: function invert(out, a) {
                        var am = a.m, outm = out.m;
                        var a00 = am[0], a01 = am[1], a02 = am[2], a03 = am[3], a10 = am[4], a11 = am[5], a12 = am[6], a13 = am[7], a20 = am[8], a21 = am[9], a22 = am[10], a23 = am[11], a30 = am[12], a31 = am[13], a32 = am[14], a33 = am[15];
                        var b00 = a00 * a11 - a01 * a10;
                        var b01 = a00 * a12 - a02 * a10;
                        var b02 = a00 * a13 - a03 * a10;
                        var b03 = a01 * a12 - a02 * a11;
                        var b04 = a01 * a13 - a03 * a11;
                        var b05 = a02 * a13 - a03 * a12;
                        var b06 = a20 * a31 - a21 * a30;
                        var b07 = a20 * a32 - a22 * a30;
                        var b08 = a20 * a33 - a23 * a30;
                        var b09 = a21 * a32 - a22 * a31;
                        var b10 = a21 * a33 - a23 * a31;
                        var b11 = a22 * a33 - a23 * a32;
                        var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
                        if (!det) {
                            return null;
                        }
                        det = 1 / det;
                        outm[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
                        outm[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
                        outm[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
                        outm[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
                        outm[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
                        outm[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
                        outm[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
                        outm[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
                        outm[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
                        outm[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
                        outm[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
                        outm[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
                        outm[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
                        outm[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
                        outm[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
                        outm[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
                        return out;
                    }
                },
                {
                    key: 'adjoint',
                    value: function adjoint(out, a) {
                        var am = a.m, outm = out.m;
                        var a00 = am[0], a01 = am[1], a02 = am[2], a03 = am[3], a10 = am[4], a11 = am[5], a12 = am[6], a13 = am[7], a20 = am[8], a21 = am[9], a22 = am[10], a23 = am[11], a30 = am[12], a31 = am[13], a32 = am[14], a33 = am[15];
                        outm[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
                        outm[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
                        outm[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
                        outm[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
                        outm[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
                        outm[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
                        outm[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
                        outm[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
                        outm[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
                        outm[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
                        outm[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
                        outm[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
                        outm[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
                        outm[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
                        outm[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
                        outm[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
                        return out;
                    }
                },
                {
                    key: 'determinant',
                    value: function determinant(a) {
                        var am = a.m;
                        var a00 = am[0], a01 = am[1], a02 = am[2], a03 = am[3], a10 = am[4], a11 = am[5], a12 = am[6], a13 = am[7], a20 = am[8], a21 = am[9], a22 = am[10], a23 = am[11], a30 = am[12], a31 = am[13], a32 = am[14], a33 = am[15];
                        var b00 = a00 * a11 - a01 * a10;
                        var b01 = a00 * a12 - a02 * a10;
                        var b02 = a00 * a13 - a03 * a10;
                        var b03 = a01 * a12 - a02 * a11;
                        var b04 = a01 * a13 - a03 * a11;
                        var b05 = a02 * a13 - a03 * a12;
                        var b06 = a20 * a31 - a21 * a30;
                        var b07 = a20 * a32 - a22 * a30;
                        var b08 = a20 * a33 - a23 * a30;
                        var b09 = a21 * a32 - a22 * a31;
                        var b10 = a21 * a33 - a23 * a31;
                        var b11 = a22 * a33 - a23 * a32;
                        return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
                    }
                },
                {
                    key: 'multiply',
                    value: function multiply(out, a, b) {
                        var am = a.m, bm = b.m, outm = out.m;
                        var a00 = am[0], a01 = am[1], a02 = am[2], a03 = am[3], a10 = am[4], a11 = am[5], a12 = am[6], a13 = am[7], a20 = am[8], a21 = am[9], a22 = am[10], a23 = am[11], a30 = am[12], a31 = am[13], a32 = am[14], a33 = am[15];
                        var b0 = bm[0], b1 = bm[1], b2 = bm[2], b3 = bm[3];
                        outm[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                        outm[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                        outm[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                        outm[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                        b0 = bm[4];
                        b1 = bm[5];
                        b2 = bm[6];
                        b3 = bm[7];
                        outm[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                        outm[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                        outm[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                        outm[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                        b0 = bm[8];
                        b1 = bm[9];
                        b2 = bm[10];
                        b3 = bm[11];
                        outm[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                        outm[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                        outm[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                        outm[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                        b0 = bm[12];
                        b1 = bm[13];
                        b2 = bm[14];
                        b3 = bm[15];
                        outm[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                        outm[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                        outm[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                        outm[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                        return out;
                    }
                },
                {
                    key: 'mul',
                    value: function mul(out, a, b) {
                        return mat4.multiply(out, a, b);
                    }
                },
                {
                    key: 'translate',
                    value: function translate(out, a, v) {
                        var am = a.m, outm = out.m;
                        var x = v.x, y = v.y, z = v.z, a00 = void 0, a01 = void 0, a02 = void 0, a03 = void 0, a10 = void 0, a11 = void 0, a12 = void 0, a13 = void 0, a20 = void 0, a21 = void 0, a22 = void 0, a23 = void 0;
                        if (a === out) {
                            outm[12] = am[0] * x + am[4] * y + am[8] * z + am[12];
                            outm[13] = am[1] * x + am[5] * y + am[9] * z + am[13];
                            outm[14] = am[2] * x + am[6] * y + am[10] * z + am[14];
                            outm[15] = am[3] * x + am[7] * y + am[11] * z + am[15];
                        } else {
                            a00 = am[0];
                            a01 = am[1];
                            a02 = am[2];
                            a03 = am[3];
                            a10 = am[4];
                            a11 = am[5];
                            a12 = am[6];
                            a13 = am[7];
                            a20 = am[8];
                            a21 = am[9];
                            a22 = am[10];
                            a23 = am[11];
                            outm[0] = a00;
                            outm[1] = a01;
                            outm[2] = a02;
                            outm[3] = a03;
                            outm[4] = a10;
                            outm[5] = a11;
                            outm[6] = a12;
                            outm[7] = a13;
                            outm[8] = a20;
                            outm[9] = a21;
                            outm[10] = a22;
                            outm[11] = a23;
                            outm[12] = a00 * x + a10 * y + a20 * z + am[12];
                            outm[13] = a01 * x + a11 * y + a21 * z + am[13];
                            outm[14] = a02 * x + a12 * y + a22 * z + am[14];
                            outm[15] = a03 * x + a13 * y + a23 * z + am[15];
                        }
                        return out;
                    }
                },
                {
                    key: 'scale',
                    value: function scale(out, a, v) {
                        var x = v.x, y = v.y, z = v.z;
                        var am = a.m, outm = out.m;
                        outm[0] = am[0] * x;
                        outm[1] = am[1] * x;
                        outm[2] = am[2] * x;
                        outm[3] = am[3] * x;
                        outm[4] = am[4] * y;
                        outm[5] = am[5] * y;
                        outm[6] = am[6] * y;
                        outm[7] = am[7] * y;
                        outm[8] = am[8] * z;
                        outm[9] = am[9] * z;
                        outm[10] = am[10] * z;
                        outm[11] = am[11] * z;
                        outm[12] = am[12];
                        outm[13] = am[13];
                        outm[14] = am[14];
                        outm[15] = am[15];
                        return out;
                    }
                },
                {
                    key: 'rotate',
                    value: function rotate(out, a, rad, axis) {
                        var am = a.m, outm = out.m;
                        var x = axis.x, y = axis.y, z = axis.z;
                        var s = void 0, c = void 0, t = void 0, a00 = void 0, a01 = void 0, a02 = void 0, a03 = void 0, a10 = void 0, a11 = void 0, a12 = void 0, a13 = void 0, a20 = void 0, a21 = void 0, a22 = void 0, a23 = void 0, b00 = void 0, b01 = void 0, b02 = void 0, b10 = void 0, b11 = void 0, b12 = void 0, b20 = void 0, b21 = void 0, b22 = void 0;
                        var len = Math.sqrt(x * x + y * y + z * z);
                        if (Math.abs(len) < _utils.EPSILON) {
                            return null;
                        }
                        len = 1 / len;
                        x *= len;
                        y *= len;
                        z *= len;
                        s = Math.sin(rad);
                        c = Math.cos(rad);
                        t = 1 - c;
                        a00 = am[0];
                        a01 = am[1];
                        a02 = am[2];
                        a03 = am[3];
                        a10 = am[4];
                        a11 = am[5];
                        a12 = am[6];
                        a13 = am[7];
                        a20 = am[8];
                        a21 = am[9];
                        a22 = am[10];
                        a23 = am[11];
                        b00 = x * x * t + c;
                        b01 = y * x * t + z * s;
                        b02 = z * x * t - y * s;
                        b10 = x * y * t - z * s;
                        b11 = y * y * t + c;
                        b12 = z * y * t + x * s;
                        b20 = x * z * t + y * s;
                        b21 = y * z * t - x * s;
                        b22 = z * z * t + c;
                        outm[0] = a00 * b00 + a10 * b01 + a20 * b02;
                        outm[1] = a01 * b00 + a11 * b01 + a21 * b02;
                        outm[2] = a02 * b00 + a12 * b01 + a22 * b02;
                        outm[3] = a03 * b00 + a13 * b01 + a23 * b02;
                        outm[4] = a00 * b10 + a10 * b11 + a20 * b12;
                        outm[5] = a01 * b10 + a11 * b11 + a21 * b12;
                        outm[6] = a02 * b10 + a12 * b11 + a22 * b12;
                        outm[7] = a03 * b10 + a13 * b11 + a23 * b12;
                        outm[8] = a00 * b20 + a10 * b21 + a20 * b22;
                        outm[9] = a01 * b20 + a11 * b21 + a21 * b22;
                        outm[10] = a02 * b20 + a12 * b21 + a22 * b22;
                        outm[11] = a03 * b20 + a13 * b21 + a23 * b22;
                        if (a !== out) {
                            outm[12] = am[12];
                            outm[13] = am[13];
                            outm[14] = am[14];
                            outm[15] = am[15];
                        }
                        return out;
                    }
                },
                {
                    key: 'rotateX',
                    value: function rotateX(out, a, rad) {
                        var am = a.m, outm = out.m;
                        var s = Math.sin(rad), c = Math.cos(rad), a10 = am[4], a11 = am[5], a12 = am[6], a13 = am[7], a20 = am[8], a21 = am[9], a22 = am[10], a23 = am[11];
                        if (a !== out) {
                            outm[0] = am[0];
                            outm[1] = am[1];
                            outm[2] = am[2];
                            outm[3] = am[3];
                            outm[12] = am[12];
                            outm[13] = am[13];
                            outm[14] = am[14];
                            outm[15] = am[15];
                        }
                        outm[4] = a10 * c + a20 * s;
                        outm[5] = a11 * c + a21 * s;
                        outm[6] = a12 * c + a22 * s;
                        outm[7] = a13 * c + a23 * s;
                        outm[8] = a20 * c - a10 * s;
                        outm[9] = a21 * c - a11 * s;
                        outm[10] = a22 * c - a12 * s;
                        outm[11] = a23 * c - a13 * s;
                        return out;
                    }
                },
                {
                    key: 'rotateY',
                    value: function rotateY(out, a, rad) {
                        var am = a.m, outm = out.m;
                        var s = Math.sin(rad), c = Math.cos(rad), a00 = am[0], a01 = am[1], a02 = am[2], a03 = am[3], a20 = am[8], a21 = am[9], a22 = am[10], a23 = am[11];
                        if (a !== out) {
                            outm[4] = am[4];
                            outm[5] = am[5];
                            outm[6] = am[6];
                            outm[7] = am[7];
                            outm[12] = am[12];
                            outm[13] = am[13];
                            outm[14] = am[14];
                            outm[15] = am[15];
                        }
                        outm[0] = a00 * c - a20 * s;
                        outm[1] = a01 * c - a21 * s;
                        outm[2] = a02 * c - a22 * s;
                        outm[3] = a03 * c - a23 * s;
                        outm[8] = a00 * s + a20 * c;
                        outm[9] = a01 * s + a21 * c;
                        outm[10] = a02 * s + a22 * c;
                        outm[11] = a03 * s + a23 * c;
                        return out;
                    }
                },
                {
                    key: 'rotateZ',
                    value: function rotateZ(out, a, rad) {
                        var am = a.m, outm = out.m;
                        var s = Math.sin(rad), c = Math.cos(rad), a00 = am[0], a01 = am[1], a02 = am[2], a03 = am[3], a10 = am[4], a11 = am[5], a12 = am[6], a13 = am[7];
                        if (a !== out) {
                            outm[8] = am[8];
                            outm[9] = am[9];
                            outm[10] = am[10];
                            outm[11] = am[11];
                            outm[12] = am[12];
                            outm[13] = am[13];
                            outm[14] = am[14];
                            outm[15] = am[15];
                        }
                        outm[0] = a00 * c + a10 * s;
                        outm[1] = a01 * c + a11 * s;
                        outm[2] = a02 * c + a12 * s;
                        outm[3] = a03 * c + a13 * s;
                        outm[4] = a10 * c - a00 * s;
                        outm[5] = a11 * c - a01 * s;
                        outm[6] = a12 * c - a02 * s;
                        outm[7] = a13 * c - a03 * s;
                        return out;
                    }
                },
                {
                    key: 'fromTranslation',
                    value: function fromTranslation(out, v) {
                        var outm = out.m;
                        outm[0] = 1;
                        outm[1] = 0;
                        outm[2] = 0;
                        outm[3] = 0;
                        outm[4] = 0;
                        outm[5] = 1;
                        outm[6] = 0;
                        outm[7] = 0;
                        outm[8] = 0;
                        outm[9] = 0;
                        outm[10] = 1;
                        outm[11] = 0;
                        outm[12] = v.x;
                        outm[13] = v.y;
                        outm[14] = v.z;
                        outm[15] = 1;
                        return out;
                    }
                },
                {
                    key: 'fromScaling',
                    value: function fromScaling(out, v) {
                        var outm = out.m;
                        outm[0] = v.x;
                        outm[1] = 0;
                        outm[2] = 0;
                        outm[3] = 0;
                        outm[4] = 0;
                        outm[5] = v.y;
                        outm[6] = 0;
                        outm[7] = 0;
                        outm[8] = 0;
                        outm[9] = 0;
                        outm[10] = v.z;
                        outm[11] = 0;
                        outm[12] = 0;
                        outm[13] = 0;
                        outm[14] = 0;
                        outm[15] = 1;
                        return out;
                    }
                },
                {
                    key: 'fromRotation',
                    value: function fromRotation(out, rad, axis) {
                        var outm = out.m;
                        var x = axis.x, y = axis.y, z = axis.z;
                        var len = Math.sqrt(x * x + y * y + z * z);
                        var s = void 0, c = void 0, t = void 0;
                        if (Math.abs(len) < _utils.EPSILON) {
                            return null;
                        }
                        len = 1 / len;
                        x *= len;
                        y *= len;
                        z *= len;
                        s = Math.sin(rad);
                        c = Math.cos(rad);
                        t = 1 - c;
                        outm[0] = x * x * t + c;
                        outm[1] = y * x * t + z * s;
                        outm[2] = z * x * t - y * s;
                        outm[3] = 0;
                        outm[4] = x * y * t - z * s;
                        outm[5] = y * y * t + c;
                        outm[6] = z * y * t + x * s;
                        outm[7] = 0;
                        outm[8] = x * z * t + y * s;
                        outm[9] = y * z * t - x * s;
                        outm[10] = z * z * t + c;
                        outm[11] = 0;
                        outm[12] = 0;
                        outm[13] = 0;
                        outm[14] = 0;
                        outm[15] = 1;
                        return out;
                    }
                },
                {
                    key: 'fromXRotation',
                    value: function fromXRotation(out, rad) {
                        var outm = out.m;
                        var s = Math.sin(rad), c = Math.cos(rad);
                        outm[0] = 1;
                        outm[1] = 0;
                        outm[2] = 0;
                        outm[3] = 0;
                        outm[4] = 0;
                        outm[5] = c;
                        outm[6] = s;
                        outm[7] = 0;
                        outm[8] = 0;
                        outm[9] = -s;
                        outm[10] = c;
                        outm[11] = 0;
                        outm[12] = 0;
                        outm[13] = 0;
                        outm[14] = 0;
                        outm[15] = 1;
                        return out;
                    }
                },
                {
                    key: 'fromYRotation',
                    value: function fromYRotation(out, rad) {
                        var outm = out.m;
                        var s = Math.sin(rad), c = Math.cos(rad);
                        outm[0] = c;
                        outm[1] = 0;
                        outm[2] = -s;
                        outm[3] = 0;
                        outm[4] = 0;
                        outm[5] = 1;
                        outm[6] = 0;
                        outm[7] = 0;
                        outm[8] = s;
                        outm[9] = 0;
                        outm[10] = c;
                        outm[11] = 0;
                        outm[12] = 0;
                        outm[13] = 0;
                        outm[14] = 0;
                        outm[15] = 1;
                        return out;
                    }
                },
                {
                    key: 'fromZRotation',
                    value: function fromZRotation(out, rad) {
                        var outm = out.m;
                        var s = Math.sin(rad), c = Math.cos(rad);
                        outm[0] = c;
                        outm[1] = s;
                        outm[2] = 0;
                        outm[3] = 0;
                        outm[4] = -s;
                        outm[5] = c;
                        outm[6] = 0;
                        outm[7] = 0;
                        outm[8] = 0;
                        outm[9] = 0;
                        outm[10] = 1;
                        outm[11] = 0;
                        outm[12] = 0;
                        outm[13] = 0;
                        outm[14] = 0;
                        outm[15] = 1;
                        return out;
                    }
                },
                {
                    key: 'fromRT',
                    value: function fromRT(out, q, v) {
                        var outm = out.m;
                        var x = q.x, y = q.y, z = q.z, w = q.w;
                        var x2 = x + x;
                        var y2 = y + y;
                        var z2 = z + z;
                        var xx = x * x2;
                        var xy = x * y2;
                        var xz = x * z2;
                        var yy = y * y2;
                        var yz = y * z2;
                        var zz = z * z2;
                        var wx = w * x2;
                        var wy = w * y2;
                        var wz = w * z2;
                        outm[0] = 1 - (yy + zz);
                        outm[1] = xy + wz;
                        outm[2] = xz - wy;
                        outm[3] = 0;
                        outm[4] = xy - wz;
                        outm[5] = 1 - (xx + zz);
                        outm[6] = yz + wx;
                        outm[7] = 0;
                        outm[8] = xz + wy;
                        outm[9] = yz - wx;
                        outm[10] = 1 - (xx + yy);
                        outm[11] = 0;
                        outm[12] = v.x;
                        outm[13] = v.y;
                        outm[14] = v.z;
                        outm[15] = 1;
                        return out;
                    }
                },
                {
                    key: 'fromTRSArray',
                    value: function fromTRSArray(out, trs) {
                        var outm = out.m;
                        var x = trs[3], y = trs[4], z = trs[5], w = trs[6];
                        var x2 = x + x;
                        var y2 = y + y;
                        var z2 = z + z;
                        var xx = x * x2;
                        var xy = x * y2;
                        var xz = x * z2;
                        var yy = y * y2;
                        var yz = y * z2;
                        var zz = z * z2;
                        var wx = w * x2;
                        var wy = w * y2;
                        var wz = w * z2;
                        var sx = trs[7];
                        var sy = trs[8];
                        var sz = trs[9];
                        outm[0] = (1 - (yy + zz)) * sx;
                        outm[1] = (xy + wz) * sx;
                        outm[2] = (xz - wy) * sx;
                        outm[3] = 0;
                        outm[4] = (xy - wz) * sy;
                        outm[5] = (1 - (xx + zz)) * sy;
                        outm[6] = (yz + wx) * sy;
                        outm[7] = 0;
                        outm[8] = (xz + wy) * sz;
                        outm[9] = (yz - wx) * sz;
                        outm[10] = (1 - (xx + yy)) * sz;
                        outm[11] = 0;
                        outm[12] = trs[0];
                        outm[13] = trs[1];
                        outm[14] = trs[2];
                        outm[15] = 1;
                        return out;
                    }
                },
                {
                    key: 'getTranslation',
                    value: function getTranslation(out, mat) {
                        var matm = mat.m;
                        out.x = matm[12];
                        out.y = matm[13];
                        out.z = matm[14];
                        return out;
                    }
                },
                {
                    key: 'getScaling',
                    value: function getScaling(out, mat) {
                        var matm = mat.m;
                        var m11 = matm[0], m12 = matm[1], m13 = matm[2], m21 = matm[4], m22 = matm[5], m23 = matm[6], m31 = matm[8], m32 = matm[9], m33 = matm[10];
                        out.x = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);
                        out.y = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);
                        out.z = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);
                        return out;
                    }
                },
                {
                    key: 'getRotation',
                    value: function getRotation(out, mat) {
                        var matm = mat.m;
                        var trace = matm[0] + matm[5] + matm[10];
                        var S = 0;
                        if (trace > 0) {
                            S = Math.sqrt(trace + 1) * 2;
                            out.w = 0.25 * S;
                            out.x = (matm[6] - matm[9]) / S;
                            out.y = (matm[8] - matm[2]) / S;
                            out.z = (matm[1] - matm[4]) / S;
                        } else if (matm[0] > matm[5] & matm[0] > matm[10]) {
                            S = Math.sqrt(1 + matm[0] - matm[5] - matm[10]) * 2;
                            out.w = (matm[6] - matm[9]) / S;
                            out.x = 0.25 * S;
                            out.y = (matm[1] + matm[4]) / S;
                            out.z = (matm[8] + matm[2]) / S;
                        } else if (matm[5] > matm[10]) {
                            S = Math.sqrt(1 + matm[5] - matm[0] - matm[10]) * 2;
                            out.w = (matm[8] - matm[2]) / S;
                            out.x = (matm[1] + matm[4]) / S;
                            out.y = 0.25 * S;
                            out.z = (matm[6] + matm[9]) / S;
                        } else {
                            S = Math.sqrt(1 + matm[10] - matm[0] - matm[5]) * 2;
                            out.w = (matm[1] - matm[4]) / S;
                            out.x = (matm[8] + matm[2]) / S;
                            out.y = (matm[6] + matm[9]) / S;
                            out.z = 0.25 * S;
                        }
                        return out;
                    }
                },
                {
                    key: 'fromRTS',
                    value: function fromRTS(out, q, v, s) {
                        var outm = out.m;
                        var x = q.x, y = q.y, z = q.z, w = q.w;
                        var x2 = x + x;
                        var y2 = y + y;
                        var z2 = z + z;
                        var xx = x * x2;
                        var xy = x * y2;
                        var xz = x * z2;
                        var yy = y * y2;
                        var yz = y * z2;
                        var zz = z * z2;
                        var wx = w * x2;
                        var wy = w * y2;
                        var wz = w * z2;
                        var sx = s.x;
                        var sy = s.y;
                        var sz = s.z;
                        outm[0] = (1 - (yy + zz)) * sx;
                        outm[1] = (xy + wz) * sx;
                        outm[2] = (xz - wy) * sx;
                        outm[3] = 0;
                        outm[4] = (xy - wz) * sy;
                        outm[5] = (1 - (xx + zz)) * sy;
                        outm[6] = (yz + wx) * sy;
                        outm[7] = 0;
                        outm[8] = (xz + wy) * sz;
                        outm[9] = (yz - wx) * sz;
                        outm[10] = (1 - (xx + yy)) * sz;
                        outm[11] = 0;
                        outm[12] = v.x;
                        outm[13] = v.y;
                        outm[14] = v.z;
                        outm[15] = 1;
                        return out;
                    }
                },
                {
                    key: 'fromRTSOrigin',
                    value: function fromRTSOrigin(out, q, v, s, o) {
                        var outm = out.m;
                        var x = q.x, y = q.y, z = q.z, w = q.w;
                        var x2 = x + x;
                        var y2 = y + y;
                        var z2 = z + z;
                        var xx = x * x2;
                        var xy = x * y2;
                        var xz = x * z2;
                        var yy = y * y2;
                        var yz = y * z2;
                        var zz = z * z2;
                        var wx = w * x2;
                        var wy = w * y2;
                        var wz = w * z2;
                        var sx = s.x;
                        var sy = s.y;
                        var sz = s.z;
                        var ox = o.x;
                        var oy = o.y;
                        var oz = o.z;
                        outm[0] = (1 - (yy + zz)) * sx;
                        outm[1] = (xy + wz) * sx;
                        outm[2] = (xz - wy) * sx;
                        outm[3] = 0;
                        outm[4] = (xy - wz) * sy;
                        outm[5] = (1 - (xx + zz)) * sy;
                        outm[6] = (yz + wx) * sy;
                        outm[7] = 0;
                        outm[8] = (xz + wy) * sz;
                        outm[9] = (yz - wx) * sz;
                        outm[10] = (1 - (xx + yy)) * sz;
                        outm[11] = 0;
                        outm[12] = v.x + ox - (outm[0] * ox + outm[4] * oy + outm[8] * oz);
                        outm[13] = v.y + oy - (outm[1] * ox + outm[5] * oy + outm[9] * oz);
                        outm[14] = v.z + oz - (outm[2] * ox + outm[6] * oy + outm[10] * oz);
                        outm[15] = 1;
                        return out;
                    }
                },
                {
                    key: 'fromQuat',
                    value: function fromQuat(out, q) {
                        var outm = out.m;
                        var x = q.x, y = q.y, z = q.z, w = q.w;
                        var x2 = x + x;
                        var y2 = y + y;
                        var z2 = z + z;
                        var xx = x * x2;
                        var yx = y * x2;
                        var yy = y * y2;
                        var zx = z * x2;
                        var zy = z * y2;
                        var zz = z * z2;
                        var wx = w * x2;
                        var wy = w * y2;
                        var wz = w * z2;
                        outm[0] = 1 - yy - zz;
                        outm[1] = yx + wz;
                        outm[2] = zx - wy;
                        outm[3] = 0;
                        outm[4] = yx - wz;
                        outm[5] = 1 - xx - zz;
                        outm[6] = zy + wx;
                        outm[7] = 0;
                        outm[8] = zx + wy;
                        outm[9] = zy - wx;
                        outm[10] = 1 - xx - yy;
                        outm[11] = 0;
                        outm[12] = 0;
                        outm[13] = 0;
                        outm[14] = 0;
                        outm[15] = 1;
                        return out;
                    }
                },
                {
                    key: 'frustum',
                    value: function frustum(out, left, right, bottom, top, near, far) {
                        var outm = out.m;
                        var rl = 1 / (right - left);
                        var tb = 1 / (top - bottom);
                        var nf = 1 / (near - far);
                        outm[0] = near * 2 * rl;
                        outm[1] = 0;
                        outm[2] = 0;
                        outm[3] = 0;
                        outm[4] = 0;
                        outm[5] = near * 2 * tb;
                        outm[6] = 0;
                        outm[7] = 0;
                        outm[8] = (right + left) * rl;
                        outm[9] = (top + bottom) * tb;
                        outm[10] = (far + near) * nf;
                        outm[11] = -1;
                        outm[12] = 0;
                        outm[13] = 0;
                        outm[14] = far * near * 2 * nf;
                        outm[15] = 0;
                        return out;
                    }
                },
                {
                    key: 'perspective',
                    value: function perspective(out, fovy, aspect, near, far) {
                        var outm = out.m;
                        var f = 1 / Math.tan(fovy / 2);
                        var nf = 1 / (near - far);
                        outm[0] = f / aspect;
                        outm[1] = 0;
                        outm[2] = 0;
                        outm[3] = 0;
                        outm[4] = 0;
                        outm[5] = f;
                        outm[6] = 0;
                        outm[7] = 0;
                        outm[8] = 0;
                        outm[9] = 0;
                        outm[10] = (far + near) * nf;
                        outm[11] = -1;
                        outm[12] = 0;
                        outm[13] = 0;
                        outm[14] = 2 * far * near * nf;
                        outm[15] = 0;
                        return out;
                    }
                },
                {
                    key: 'perspectiveFromFieldOfView',
                    value: function perspectiveFromFieldOfView(out, fov, near, far) {
                        var outm = out.m;
                        var upTan = Math.tan(fov.upDegrees * Math.PI / 180);
                        var downTan = Math.tan(fov.downDegrees * Math.PI / 180);
                        var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180);
                        var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180);
                        var xScale = 2 / (leftTan + rightTan);
                        var yScale = 2 / (upTan + downTan);
                        outm[0] = xScale;
                        outm[1] = 0;
                        outm[2] = 0;
                        outm[3] = 0;
                        outm[4] = 0;
                        outm[5] = yScale;
                        outm[6] = 0;
                        outm[7] = 0;
                        outm[8] = -((leftTan - rightTan) * xScale * 0.5);
                        outm[9] = (upTan - downTan) * yScale * 0.5;
                        outm[10] = far / (near - far);
                        outm[11] = -1;
                        outm[12] = 0;
                        outm[13] = 0;
                        outm[14] = far * near / (near - far);
                        outm[15] = 0;
                        return out;
                    }
                },
                {
                    key: 'ortho',
                    value: function ortho(out, left, right, bottom, top, near, far) {
                        var outm = out.m;
                        var lr = 1 / (left - right);
                        var bt = 1 / (bottom - top);
                        var nf = 1 / (near - far);
                        outm[0] = -2 * lr;
                        outm[1] = 0;
                        outm[2] = 0;
                        outm[3] = 0;
                        outm[4] = 0;
                        outm[5] = -2 * bt;
                        outm[6] = 0;
                        outm[7] = 0;
                        outm[8] = 0;
                        outm[9] = 0;
                        outm[10] = 2 * nf;
                        outm[11] = 0;
                        outm[12] = (left + right) * lr;
                        outm[13] = (top + bottom) * bt;
                        outm[14] = (far + near) * nf;
                        outm[15] = 1;
                        return out;
                    }
                },
                {
                    key: 'lookAt',
                    value: function lookAt(out, eye, center, up) {
                        var outm = out.m;
                        var x0 = void 0, x1 = void 0, x2 = void 0, y0 = void 0, y1 = void 0, y2 = void 0, z0 = void 0, z1 = void 0, z2 = void 0, len = void 0;
                        var eyex = eye.x;
                        var eyey = eye.y;
                        var eyez = eye.z;
                        var upx = up.x;
                        var upy = up.y;
                        var upz = up.z;
                        var centerx = center.x;
                        var centery = center.y;
                        var centerz = center.z;
                        z0 = eyex - centerx;
                        z1 = eyey - centery;
                        z2 = eyez - centerz;
                        len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
                        z0 *= len;
                        z1 *= len;
                        z2 *= len;
                        x0 = upy * z2 - upz * z1;
                        x1 = upz * z0 - upx * z2;
                        x2 = upx * z1 - upy * z0;
                        len = 1 / Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
                        x0 *= len;
                        x1 *= len;
                        x2 *= len;
                        y0 = z1 * x2 - z2 * x1;
                        y1 = z2 * x0 - z0 * x2;
                        y2 = z0 * x1 - z1 * x0;
                        outm[0] = x0;
                        outm[1] = y0;
                        outm[2] = z0;
                        outm[3] = 0;
                        outm[4] = x1;
                        outm[5] = y1;
                        outm[6] = z1;
                        outm[7] = 0;
                        outm[8] = x2;
                        outm[9] = y2;
                        outm[10] = z2;
                        outm[11] = 0;
                        outm[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
                        outm[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
                        outm[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
                        outm[15] = 1;
                        return out;
                    }
                },
                {
                    key: 'str',
                    value: function str(a) {
                        var am = a.m;
                        return 'mat4(' + am[0] + ', ' + am[1] + ', ' + am[2] + ', ' + am[3] + ', ' + am[4] + ', ' + am[5] + ', ' + am[6] + ', ' + am[7] + ', ' + am[8] + ', ' + am[9] + ', ' + am[10] + ', ' + am[11] + ', ' + am[12] + ', ' + am[13] + ', ' + am[14] + ', ' + am[15] + ')';
                    }
                },
                {
                    key: 'array',
                    value: function array(out, m) {
                        var mm = m.m;
                        out[0] = mm[0];
                        out[1] = mm[1];
                        out[2] = mm[2];
                        out[3] = mm[3];
                        out[4] = mm[4];
                        out[5] = mm[5];
                        out[6] = mm[6];
                        out[7] = mm[7];
                        out[8] = mm[8];
                        out[9] = mm[9];
                        out[10] = mm[10];
                        out[11] = mm[11];
                        out[12] = mm[12];
                        out[13] = mm[13];
                        out[14] = mm[14];
                        out[15] = mm[15];
                        return out;
                    }
                },
                {
                    key: 'frob',
                    value: function frob(a) {
                        var am = a.m;
                        return Math.sqrt(Math.pow(am[0], 2) + Math.pow(am[1], 2) + Math.pow(am[2], 2) + Math.pow(am[3], 2) + Math.pow(am[4], 2) + Math.pow(am[5], 2) + Math.pow(am[6], 2) + Math.pow(am[7], 2) + Math.pow(am[8], 2) + Math.pow(am[9], 2) + Math.pow(am[10], 2) + Math.pow(am[11], 2) + Math.pow(am[12], 2) + Math.pow(am[13], 2) + Math.pow(am[14], 2) + Math.pow(am[15], 2));
                    }
                },
                {
                    key: 'add',
                    value: function add(out, a, b) {
                        var am = a.m, bm = b.m, outm = out.m;
                        outm[0] = am[0] + bm[0];
                        outm[1] = am[1] + bm[1];
                        outm[2] = am[2] + bm[2];
                        outm[3] = am[3] + bm[3];
                        outm[4] = am[4] + bm[4];
                        outm[5] = am[5] + bm[5];
                        outm[6] = am[6] + bm[6];
                        outm[7] = am[7] + bm[7];
                        outm[8] = am[8] + bm[8];
                        outm[9] = am[9] + bm[9];
                        outm[10] = am[10] + bm[10];
                        outm[11] = am[11] + bm[11];
                        outm[12] = am[12] + bm[12];
                        outm[13] = am[13] + bm[13];
                        outm[14] = am[14] + bm[14];
                        outm[15] = am[15] + bm[15];
                        return out;
                    }
                },
                {
                    key: 'subtract',
                    value: function subtract(out, a, b) {
                        var am = a.m, bm = b.m, outm = out.m;
                        outm[0] = am[0] - bm[0];
                        outm[1] = am[1] - bm[1];
                        outm[2] = am[2] - bm[2];
                        outm[3] = am[3] - bm[3];
                        outm[4] = am[4] - bm[4];
                        outm[5] = am[5] - bm[5];
                        outm[6] = am[6] - bm[6];
                        outm[7] = am[7] - bm[7];
                        outm[8] = am[8] - bm[8];
                        outm[9] = am[9] - bm[9];
                        outm[10] = am[10] - bm[10];
                        outm[11] = am[11] - bm[11];
                        outm[12] = am[12] - bm[12];
                        outm[13] = am[13] - bm[13];
                        outm[14] = am[14] - bm[14];
                        outm[15] = am[15] - bm[15];
                        return out;
                    }
                },
                {
                    key: 'sub',
                    value: function sub(out, a, b) {
                        return mat4.subtract(out, a, b);
                    }
                },
                {
                    key: 'multiplyScalar',
                    value: function multiplyScalar(out, a, b) {
                        var am = a.m, outm = out.m;
                        outm[0] = am[0] * b;
                        outm[1] = am[1] * b;
                        outm[2] = am[2] * b;
                        outm[3] = am[3] * b;
                        outm[4] = am[4] * b;
                        outm[5] = am[5] * b;
                        outm[6] = am[6] * b;
                        outm[7] = am[7] * b;
                        outm[8] = am[8] * b;
                        outm[9] = am[9] * b;
                        outm[10] = am[10] * b;
                        outm[11] = am[11] * b;
                        outm[12] = am[12] * b;
                        outm[13] = am[13] * b;
                        outm[14] = am[14] * b;
                        outm[15] = am[15] * b;
                        return out;
                    }
                },
                {
                    key: 'multiplyScalarAndAdd',
                    value: function multiplyScalarAndAdd(out, a, b, scale) {
                        var am = a.m, bm = b.m, outm = out.m;
                        outm[0] = am[0] + bm[0] * scale;
                        outm[1] = am[1] + bm[1] * scale;
                        outm[2] = am[2] + bm[2] * scale;
                        outm[3] = am[3] + bm[3] * scale;
                        outm[4] = am[4] + bm[4] * scale;
                        outm[5] = am[5] + bm[5] * scale;
                        outm[6] = am[6] + bm[6] * scale;
                        outm[7] = am[7] + bm[7] * scale;
                        outm[8] = am[8] + bm[8] * scale;
                        outm[9] = am[9] + bm[9] * scale;
                        outm[10] = am[10] + bm[10] * scale;
                        outm[11] = am[11] + bm[11] * scale;
                        outm[12] = am[12] + bm[12] * scale;
                        outm[13] = am[13] + bm[13] * scale;
                        outm[14] = am[14] + bm[14] * scale;
                        outm[15] = am[15] + bm[15] * scale;
                        return out;
                    }
                },
                {
                    key: 'exactEquals',
                    value: function exactEquals(a, b) {
                        var am = a.m, bm = b.m;
                        return am[0] === bm[0] && am[1] === bm[1] && am[2] === bm[2] && am[3] === bm[3] && am[4] === bm[4] && am[5] === bm[5] && am[6] === bm[6] && am[7] === bm[7] && am[8] === bm[8] && am[9] === bm[9] && am[10] === bm[10] && am[11] === bm[11] && am[12] === bm[12] && am[13] === bm[13] && am[14] === bm[14] && am[15] === bm[15];
                    }
                },
                {
                    key: 'equals',
                    value: function equals(a, b) {
                        var am = a.m, bm = b.m;
                        var a0 = am[0], a1 = am[1], a2 = am[2], a3 = am[3], a4 = am[4], a5 = am[5], a6 = am[6], a7 = am[7], a8 = am[8], a9 = am[9], a10 = am[10], a11 = am[11], a12 = am[12], a13 = am[13], a14 = am[14], a15 = am[15];
                        var b0 = bm[0], b1 = bm[1], b2 = bm[2], b3 = bm[3], b4 = bm[4], b5 = bm[5], b6 = bm[6], b7 = bm[7], b8 = bm[8], b9 = bm[9], b10 = bm[10], b11 = bm[11], b12 = bm[12], b13 = bm[13], b14 = bm[14], b15 = bm[15];
                        return Math.abs(a0 - b0) <= _utils.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _utils.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _utils.EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _utils.EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _utils.EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _utils.EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _utils.EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _utils.EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= _utils.EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= _utils.EPSILON * Math.max(1, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= _utils.EPSILON * Math.max(1, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= _utils.EPSILON * Math.max(1, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= _utils.EPSILON * Math.max(1, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= _utils.EPSILON * Math.max(1, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= _utils.EPSILON * Math.max(1, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= _utils.EPSILON * Math.max(1, Math.abs(a15), Math.abs(b15));
                    }
                }
            ]);
            return mat4;
        }();
        exports.default = mat4;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,