(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/vmath/mat23.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _utils = require('./utils');
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var mat23 = function () {
            function mat23() {
                var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
                var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
                var m04 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
                var m05 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
                _classCallCheck(this, mat23);
                if ((typeof m00 === 'undefined' ? 'undefined' : _typeof(m00)) === 'object') {
                    if (m01) {
                        this.m = new m00.constructor(6);
                        this.m.set(m00);
                    } else {
                        this.m = m00;
                    }
                } else {
                    this.m = new _utils.FLOAT_ARRAY_TYPE(6);
                    var m = this.m;
                    m[0] = m00;
                    m[1] = m01;
                    m[2] = m02;
                    m[3] = m03;
                    m[4] = m04;
                    m[5] = m05;
                }
            }
            _createClass(mat23, null, [
                {
                    key: 'create',
                    value: function create() {
                        var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
                        var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                        var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                        var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
                        var m04 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
                        var m05 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
                        return new mat23(m00, m01, m02, m03, m04, m05);
                    }
                },
                {
                    key: 'clone',
                    value: function clone(a) {
                        var am = a.m;
                        return new mat23(am[0], am[1], am[2], am[3], am[4], am[5]);
                    }
                },
                {
                    key: 'copy',
                    value: function copy(out, a) {
                        out.m.set(a.m);
                        return out;
                    }
                },
                {
                    key: 'identity',
                    value: function identity(out) {
                        var outm = out.m;
                        outm[0] = 1;
                        outm[1] = 0;
                        outm[2] = 0;
                        outm[3] = 1;
                        outm[4] = 0;
                        outm[5] = 0;
                        return out;
                    }
                },
                {
                    key: 'set',
                    value: function set(out, a, b, c, d, tx, ty) {
                        var outm = out.m;
                        outm[0] = a;
                        outm[1] = b;
                        outm[2] = c;
                        outm[3] = d;
                        outm[4] = tx;
                        outm[5] = ty;
                        return out;
                    }
                },
                {
                    key: 'invert',
                    value: function invert(out, a) {
                        var am = a.m, outm = out.m;
                        var aa = am[0], ab = am[1], ac = am[2], ad = am[3], atx = am[4], aty = am[5];
                        var det = aa * ad - ab * ac;
                        if (!det) {
                            return null;
                        }
                        det = 1 / det;
                        outm[0] = ad * det;
                        outm[1] = -ab * det;
                        outm[2] = -ac * det;
                        outm[3] = aa * det;
                        outm[4] = (ac * aty - ad * atx) * det;
                        outm[5] = (ab * atx - aa * aty) * det;
                        return out;
                    }
                },
                {
                    key: 'determinant',
                    value: function determinant(a) {
                        var am = a.m;
                        return am[0] * am[3] - am[1] * am[2];
                    }
                },
                {
                    key: 'multiply',
                    value: function multiply(out, a, b) {
                        var am = a.m, bm = b.m, outm = out.m;
                        var a0 = am[0], a1 = am[1], a2 = am[2], a3 = am[3], a4 = am[4], a5 = am[5], b0 = bm[0], b1 = bm[1], b2 = bm[2], b3 = bm[3], b4 = bm[4], b5 = bm[5];
                        outm[0] = a0 * b0 + a2 * b1;
                        outm[1] = a1 * b0 + a3 * b1;
                        outm[2] = a0 * b2 + a2 * b3;
                        outm[3] = a1 * b2 + a3 * b3;
                        outm[4] = a0 * b4 + a2 * b5 + a4;
                        outm[5] = a1 * b4 + a3 * b5 + a5;
                        return out;
                    }
                },
                {
                    key: 'mul',
                    value: function mul(out, a, b) {
                        return mat23.multiply(out, a, b);
                    }
                },
                {
                    key: 'rotate',
                    value: function rotate(out, a, rad) {
                        var am = a.m, outm = out.m;
                        var a0 = am[0], a1 = am[1], a2 = am[2], a3 = am[3], a4 = am[4], a5 = am[5], s = Math.sin(rad), c = Math.cos(rad);
                        outm[0] = a0 * c + a2 * s;
                        outm[1] = a1 * c + a3 * s;
                        outm[2] = a0 * -s + a2 * c;
                        outm[3] = a1 * -s + a3 * c;
                        outm[4] = a4;
                        outm[5] = a5;
                        return out;
                    }
                },
                {
                    key: 'scale',
                    value: function scale(out, a, v) {
                        var am = a.m, outm = out.m;
                        var a0 = am[0], a1 = am[1], a2 = am[2], a3 = am[3], a4 = am[4], a5 = am[5], v0 = v.x, v1 = v.y;
                        outm[0] = a0 * v0;
                        outm[1] = a1 * v0;
                        outm[2] = a2 * v1;
                        outm[3] = a3 * v1;
                        outm[4] = a4;
                        outm[5] = a5;
                        return out;
                    }
                },
                {
                    key: 'translate',
                    value: function translate(out, a, v) {
                        var am = a.m, outm = out.m;
                        var a0 = am[0], a1 = am[1], a2 = am[2], a3 = am[3], a4 = am[4], a5 = am[5], v0 = v.x, v1 = v.y;
                        outm[0] = a0;
                        outm[1] = a1;
                        outm[2] = a2;
                        outm[3] = a3;
                        outm[4] = a0 * v0 + a2 * v1 + a4;
                        outm[5] = a1 * v0 + a3 * v1 + a5;
                        return out;
                    }
                },
                {
                    key: 'fromRotation',
                    value: function fromRotation(out, rad) {
                        var outm = out.m;
                        var s = Math.sin(rad), c = Math.cos(rad);
                        outm[0] = c;
                        outm[1] = s;
                        outm[2] = -s;
                        outm[3] = c;
                        outm[4] = 0;
                        outm[5] = 0;
                        return out;
                    }
                },
                {
                    key: 'fromScaling',
                    value: function fromScaling(out, v) {
                        var vm = v.m, outm = out.m;
                        outm[0] = vm[0];
                        outm[1] = 0;
                        outm[2] = 0;
                        outm[3] = vm[1];
                        outm[4] = 0;
                        outm[5] = 0;
                        return out;
                    }
                },
                {
                    key: 'fromTranslation',
                    value: function fromTranslation(out, v) {
                        var outm = out.m;
                        outm[0] = 1;
                        outm[1] = 0;
                        outm[2] = 0;
                        outm[3] = 1;
                        outm[4] = v.x;
                        outm[5] = v.y;
                        return out;
                    }
                },
                {
                    key: 'fromRTS',
                    value: function fromRTS(out, r, t, s) {
                        var outm = out.m;
                        var sr = Math.sin(r), cr = Math.cos(r);
                        outm[0] = cr * s.x;
                        outm[1] = sr * s.x;
                        outm[2] = -sr * s.y;
                        outm[3] = cr * s.y;
                        outm[4] = t.x;
                        outm[5] = t.y;
                        return out;
                    }
                },
                {
                    key: 'str',
                    value: function str(a) {
                        var am = a.m;
                        return 'mat23(' + am[0] + ', ' + am[1] + ', ' + am[2] + ', ' + am[3] + ', ' + am[4] + ', ' + am[5] + ')';
                    }
                },
                {
                    key: 'array',
                    value: function array(out, m) {
                        var mm = m.m;
                        out[0] = mm[0];
                        out[1] = mm[1];
                        out[2] = mm[2];
                        out[3] = mm[3];
                        out[4] = mm[4];
                        out[5] = mm[5];
                        return out;
                    }
                },
                {
                    key: 'array4x4',
                    value: function array4x4(out, m) {
                        var mm = m.m;
                        out[0] = mm[0];
                        out[1] = mm[1];
                        out[2] = 0;
                        out[3] = 0;
                        out[4] = mm[2];
                        out[5] = mm[3];
                        out[6] = 0;
                        out[7] = 0;
                        out[8] = 0;
                        out[9] = 0;
                        out[10] = 1;
                        out[11] = 0;
                        out[12] = mm[4];
                        out[13] = mm[5];
                        out[14] = 0;
                        out[15] = 1;
                        return out;
                    }
                },
                {
                    key: 'frob',
                    value: function frob(a) {
                        var am = a.m;
                        return Math.sqrt(Math.pow(am[0], 2) + Math.pow(am[1], 2) + Math.pow(am[2], 2) + Math.pow(am[3], 2) + Math.pow(am[4], 2) + Math.pow(am[5], 2) + 1);
                    }
                },
                {
                    key: 'add',
                    value: function add(out, a, b) {
                        var am = a.m, bm = b.m, outm = out.m;
                        outm[0] = am[0] + bm[0];
                        outm[1] = am[1] + bm[1];
                        outm[2] = am[2] + bm[2];
                        outm[3] = am[3] + bm[3];
                        outm[4] = am[4] + bm[4];
                        outm[5] = am[5] + bm[5];
                        return out;
                    }
                },
                {
                    key: 'subtract',
                    value: function subtract(out, a, b) {
                        var am = a.m, bm = b.m, outm = out.m;
                        outm[0] = am[0] - bm[0];
                        outm[1] = am[1] - bm[1];
                        outm[2] = am[2] - bm[2];
                        outm[3] = am[3] - bm[3];
                        outm[4] = am[4] - bm[4];
                        outm[5] = am[5] - bm[5];
                        return out;
                    }
                },
                {
                    key: 'sub',
                    value: function sub(out, a, b) {
                        return mat23.subtract(out, a, b);
                    }
                },
                {
                    key: 'multiplyScalar',
                    value: function multiplyScalar(out, a, b) {
                        var am = a.m, outm = out.m;
                        outm[0] = am[0] * b;
                        outm[1] = am[1] * b;
                        outm[2] = am[2] * b;
                        outm[3] = am[3] * b;
                        outm[4] = am[4] * b;
                        outm[5] = am[5] * b;
                        return out;
                    }
                },
                {
                    key: 'multiplyScalarAndAdd',
                    value: function multiplyScalarAndAdd(out, a, b, scale) {
                        var am = a.m, bm = b.m, outm = out.m;
                        outm[0] = am[0] + bm[0] * scale;
                        outm[1] = am[1] + bm[1] * scale;
                        outm[2] = am[2] + bm[2] * scale;
                        outm[3] = am[3] + bm[3] * scale;
                        outm[4] = am[4] + bm[4] * scale;
                        outm[5] = am[5] + bm[5] * scale;
                        return out;
                    }
                },
                {
                    key: 'exactEquals',
                    value: function exactEquals(a, b) {
                        var am = a.m, bm = b.m;
                        return am[0] === bm[0] && am[1] === bm[1] && am[2] === bm[2] && am[3] === bm[3] && am[4] === bm[4] && am[5] === bm[5];
                    }
                },
                {
                    key: 'equals',
                    value: function equals(a, b) {
                        var am = a.m, bm = b.m;
                        var a0 = am[0], a1 = am[1], a2 = am[2], a3 = am[3], a4 = am[4], a5 = am[5];
                        var b0 = bm[0], b1 = bm[1], b2 = bm[2], b3 = bm[3], b4 = bm[4], b5 = bm[5];
                        return Math.abs(a0 - b0) <= _utils.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _utils.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _utils.EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _utils.EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _utils.EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _utils.EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5));
                    }
                }
            ]);
            return mat23;
        }();
        exports.default = mat23;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,