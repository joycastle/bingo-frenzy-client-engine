(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/vmath/mat3.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _utils = require('./utils');
        var _vec = require('./vec3');
        var _vec2 = _interopRequireDefault(_vec);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var mat3 = function () {
            function mat3() {
                var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
                var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
                var m04 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
                var m05 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
                var m06 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
                var m07 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
                var m08 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;
                _classCallCheck(this, mat3);
                if ((typeof m00 === 'undefined' ? 'undefined' : _typeof(m00)) === 'object') {
                    if (m01) {
                        this.m = new m00.constructor(9);
                        this.m.set(m00);
                    } else {
                        this.m = m00;
                    }
                } else {
                    this.m = new _utils.FLOAT_ARRAY_TYPE(9);
                    var m = this.m;
                    m[0] = m00;
                    m[1] = m01;
                    m[2] = m02;
                    m[3] = m03;
                    m[4] = m04;
                    m[5] = m05;
                    m[6] = m06;
                    m[7] = m07;
                    m[8] = m08;
                }
            }
            _createClass(mat3, null, [
                {
                    key: 'create',
                    value: function create() {
                        var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
                        var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                        var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                        var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
                        var m04 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
                        var m05 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
                        var m06 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
                        var m07 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
                        var m08 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;
                        return new mat3(m00, m01, m02, m03, m04, m05, m06, m07, m08);
                    }
                },
                {
                    key: 'clone',
                    value: function clone(a) {
                        var am = a.m;
                        return new mat3(am[0], am[1], am[2], am[3], am[4], am[5], am[6], am[7], am[8]);
                    }
                },
                {
                    key: 'copy',
                    value: function copy(out, a) {
                        out.m.set(a.m);
                        return out;
                    }
                },
                {
                    key: 'set',
                    value: function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
                        var outm = out.m;
                        outm[0] = m00;
                        outm[1] = m01;
                        outm[2] = m02;
                        outm[3] = m10;
                        outm[4] = m11;
                        outm[5] = m12;
                        outm[6] = m20;
                        outm[7] = m21;
                        outm[8] = m22;
                        return out;
                    }
                },
                {
                    key: 'identity',
                    value: function identity(out) {
                        var outm = out.m;
                        outm[0] = 1;
                        outm[1] = 0;
                        outm[2] = 0;
                        outm[3] = 0;
                        outm[4] = 1;
                        outm[5] = 0;
                        outm[6] = 0;
                        outm[7] = 0;
                        outm[8] = 1;
                        return out;
                    }
                },
                {
                    key: 'transpose',
                    value: function transpose(out, a) {
                        var am = a.m, outm = out.m;
                        if (out === a) {
                            var a01 = am[1], a02 = am[2], a12 = am[5];
                            outm[1] = am[3];
                            outm[2] = am[6];
                            outm[3] = a01;
                            outm[5] = am[7];
                            outm[6] = a02;
                            outm[7] = a12;
                        } else {
                            outm[0] = am[0];
                            outm[1] = am[3];
                            outm[2] = am[6];
                            outm[3] = am[1];
                            outm[4] = am[4];
                            outm[5] = am[7];
                            outm[6] = am[2];
                            outm[7] = am[5];
                            outm[8] = am[8];
                        }
                        return out;
                    }
                },
                {
                    key: 'invert',
                    value: function invert(out, a) {
                        var am = a.m, outm = out.m;
                        var a00 = am[0], a01 = am[1], a02 = am[2], a10 = am[3], a11 = am[4], a12 = am[5], a20 = am[6], a21 = am[7], a22 = am[8];
                        var b01 = a22 * a11 - a12 * a21;
                        var b11 = -a22 * a10 + a12 * a20;
                        var b21 = a21 * a10 - a11 * a20;
                        var det = a00 * b01 + a01 * b11 + a02 * b21;
                        if (!det) {
                            return null;
                        }
                        det = 1 / det;
                        outm[0] = b01 * det;
                        outm[1] = (-a22 * a01 + a02 * a21) * det;
                        outm[2] = (a12 * a01 - a02 * a11) * det;
                        outm[3] = b11 * det;
                        outm[4] = (a22 * a00 - a02 * a20) * det;
                        outm[5] = (-a12 * a00 + a02 * a10) * det;
                        outm[6] = b21 * det;
                        outm[7] = (-a21 * a00 + a01 * a20) * det;
                        outm[8] = (a11 * a00 - a01 * a10) * det;
                        return out;
                    }
                },
                {
                    key: 'adjoint',
                    value: function adjoint(out, a) {
                        var am = a.m, outm = out.m;
                        var a00 = am[0], a01 = am[1], a02 = am[2], a10 = am[3], a11 = am[4], a12 = am[5], a20 = am[6], a21 = am[7], a22 = am[8];
                        outm[0] = a11 * a22 - a12 * a21;
                        outm[1] = a02 * a21 - a01 * a22;
                        outm[2] = a01 * a12 - a02 * a11;
                        outm[3] = a12 * a20 - a10 * a22;
                        outm[4] = a00 * a22 - a02 * a20;
                        outm[5] = a02 * a10 - a00 * a12;
                        outm[6] = a10 * a21 - a11 * a20;
                        outm[7] = a01 * a20 - a00 * a21;
                        outm[8] = a00 * a11 - a01 * a10;
                        return out;
                    }
                },
                {
                    key: 'determinant',
                    value: function determinant(a) {
                        var am = a.m;
                        var a00 = am[0], a01 = am[1], a02 = am[2], a10 = am[3], a11 = am[4], a12 = am[5], a20 = am[6], a21 = am[7], a22 = am[8];
                        return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
                    }
                },
                {
                    key: 'multiply',
                    value: function multiply(out, a, b) {
                        var am = a.m, bm = b.m, outm = out.m;
                        var a00 = am[0], a01 = am[1], a02 = am[2], a10 = am[3], a11 = am[4], a12 = am[5], a20 = am[6], a21 = am[7], a22 = am[8];
                        var b00 = bm[0], b01 = bm[1], b02 = bm[2];
                        var b10 = bm[3], b11 = bm[4], b12 = bm[5];
                        var b20 = bm[6], b21 = bm[7], b22 = bm[8];
                        outm[0] = b00 * a00 + b01 * a10 + b02 * a20;
                        outm[1] = b00 * a01 + b01 * a11 + b02 * a21;
                        outm[2] = b00 * a02 + b01 * a12 + b02 * a22;
                        outm[3] = b10 * a00 + b11 * a10 + b12 * a20;
                        outm[4] = b10 * a01 + b11 * a11 + b12 * a21;
                        outm[5] = b10 * a02 + b11 * a12 + b12 * a22;
                        outm[6] = b20 * a00 + b21 * a10 + b22 * a20;
                        outm[7] = b20 * a01 + b21 * a11 + b22 * a21;
                        outm[8] = b20 * a02 + b21 * a12 + b22 * a22;
                        return out;
                    }
                },
                {
                    key: 'mul',
                    value: function mul(out, a, b) {
                        return mat3.multiply(out, a, b);
                    }
                },
                {
                    key: 'translate',
                    value: function translate(out, a, v) {
                        var am = a.m, outm = out.m;
                        var a00 = am[0], a01 = am[1], a02 = am[2], a10 = am[3], a11 = am[4], a12 = am[5], a20 = am[6], a21 = am[7], a22 = am[8];
                        var x = v.x, y = v.y;
                        outm[0] = a00;
                        outm[1] = a01;
                        outm[2] = a02;
                        outm[3] = a10;
                        outm[4] = a11;
                        outm[5] = a12;
                        outm[6] = x * a00 + y * a10 + a20;
                        outm[7] = x * a01 + y * a11 + a21;
                        outm[8] = x * a02 + y * a12 + a22;
                        return out;
                    }
                },
                {
                    key: 'rotate',
                    value: function rotate(out, a, rad) {
                        var am = a.m, outm = out.m;
                        var a00 = am[0], a01 = am[1], a02 = am[2], a10 = am[3], a11 = am[4], a12 = am[5], a20 = am[6], a21 = am[7], a22 = am[8];
                        var s = Math.sin(rad);
                        var c = Math.cos(rad);
                        outm[0] = c * a00 + s * a10;
                        outm[1] = c * a01 + s * a11;
                        outm[2] = c * a02 + s * a12;
                        outm[3] = c * a10 - s * a00;
                        outm[4] = c * a11 - s * a01;
                        outm[5] = c * a12 - s * a02;
                        outm[6] = a20;
                        outm[7] = a21;
                        outm[8] = a22;
                        return out;
                    }
                },
                {
                    key: 'scale',
                    value: function scale(out, a, v) {
                        var x = v.x, y = v.y;
                        var am = a.m, outm = out.m;
                        outm[0] = x * am[0];
                        outm[1] = x * am[1];
                        outm[2] = x * am[2];
                        outm[3] = y * am[3];
                        outm[4] = y * am[4];
                        outm[5] = y * am[5];
                        outm[6] = am[6];
                        outm[7] = am[7];
                        outm[8] = am[8];
                        return out;
                    }
                },
                {
                    key: 'fromMat4',
                    value: function fromMat4(out, a) {
                        var am = a.m, outm = out.m;
                        outm[0] = am[0];
                        outm[1] = am[1];
                        outm[2] = am[2];
                        outm[3] = am[4];
                        outm[4] = am[5];
                        outm[5] = am[6];
                        outm[6] = am[8];
                        outm[7] = am[9];
                        outm[8] = am[10];
                        return out;
                    }
                },
                {
                    key: 'fromTranslation',
                    value: function fromTranslation(out, v) {
                        var outm = out.m;
                        outm[0] = 1;
                        outm[1] = 0;
                        outm[2] = 0;
                        outm[3] = 0;
                        outm[4] = 1;
                        outm[5] = 0;
                        outm[6] = v.x;
                        outm[7] = v.y;
                        outm[8] = 1;
                        return out;
                    }
                },
                {
                    key: 'fromRotation',
                    value: function fromRotation(out, rad) {
                        var s = Math.sin(rad), c = Math.cos(rad);
                        var outm = out.m;
                        outm[0] = c;
                        outm[1] = s;
                        outm[2] = 0;
                        outm[3] = -s;
                        outm[4] = c;
                        outm[5] = 0;
                        outm[6] = 0;
                        outm[7] = 0;
                        outm[8] = 1;
                        return out;
                    }
                },
                {
                    key: 'fromScaling',
                    value: function fromScaling(out, v) {
                        var outm = out.m;
                        outm[0] = v.x;
                        outm[1] = 0;
                        outm[2] = 0;
                        outm[3] = 0;
                        outm[4] = v.y;
                        outm[5] = 0;
                        outm[6] = 0;
                        outm[7] = 0;
                        outm[8] = 1;
                        return out;
                    }
                },
                {
                    key: 'fromMat2d',
                    value: function fromMat2d(out, a) {
                        var am = a.m, outm = out.m;
                        outm[0] = am[0];
                        outm[1] = am[1];
                        outm[2] = 0;
                        outm[3] = am[2];
                        outm[4] = am[3];
                        outm[5] = 0;
                        outm[6] = am[4];
                        outm[7] = am[5];
                        outm[8] = 1;
                        return out;
                    }
                },
                {
                    key: 'fromQuat',
                    value: function fromQuat(out, q) {
                        var outm = out.m;
                        var x = q.x, y = q.y, z = q.z, w = q.w;
                        var x2 = x + x;
                        var y2 = y + y;
                        var z2 = z + z;
                        var xx = x * x2;
                        var yx = y * x2;
                        var yy = y * y2;
                        var zx = z * x2;
                        var zy = z * y2;
                        var zz = z * z2;
                        var wx = w * x2;
                        var wy = w * y2;
                        var wz = w * z2;
                        outm[0] = 1 - yy - zz;
                        outm[3] = yx - wz;
                        outm[6] = zx + wy;
                        outm[1] = yx + wz;
                        outm[4] = 1 - xx - zz;
                        outm[7] = zy - wx;
                        outm[2] = zx - wy;
                        outm[5] = zy + wx;
                        outm[8] = 1 - xx - yy;
                        return out;
                    }
                },
                {
                    key: 'fromViewUp',
                    value: function fromViewUp(out, view, up) {
                        var _fromViewUpIIFE = function () {
                            var default_up = _vec2.default.create(0, 1, 0);
                            var x = _vec2.default.create(0, 0, 0);
                            var y = _vec2.default.create(0, 0, 0);
                            return function (out, view, up) {
                                if (_vec2.default.sqrMag(view) < _utils.EPSILON * _utils.EPSILON) {
                                    mat3.identity(out);
                                    return out;
                                }
                                up = up || default_up;
                                _vec2.default.normalize(x, _vec2.default.cross(x, up, view));
                                if (_vec2.default.sqrMag(x) < _utils.EPSILON * _utils.EPSILON) {
                                    mat3.identity(out);
                                    return out;
                                }
                                _vec2.default.cross(y, view, x);
                                mat3.set(out, x.x, x.y, x.z, y.x, y.y, y.z, view.x, view.y, view.z);
                                return out;
                            };
                        }();
                        return _fromViewUpIIFE(out, view, up);
                    }
                },
                {
                    key: 'normalFromMat4',
                    value: function normalFromMat4(out, a) {
                        var am = a.m, outm = out.m;
                        var a00 = am[0], a01 = am[1], a02 = am[2], a03 = am[3], a10 = am[4], a11 = am[5], a12 = am[6], a13 = am[7], a20 = am[8], a21 = am[9], a22 = am[10], a23 = am[11], a30 = am[12], a31 = am[13], a32 = am[14], a33 = am[15];
                        var b00 = a00 * a11 - a01 * a10;
                        var b01 = a00 * a12 - a02 * a10;
                        var b02 = a00 * a13 - a03 * a10;
                        var b03 = a01 * a12 - a02 * a11;
                        var b04 = a01 * a13 - a03 * a11;
                        var b05 = a02 * a13 - a03 * a12;
                        var b06 = a20 * a31 - a21 * a30;
                        var b07 = a20 * a32 - a22 * a30;
                        var b08 = a20 * a33 - a23 * a30;
                        var b09 = a21 * a32 - a22 * a31;
                        var b10 = a21 * a33 - a23 * a31;
                        var b11 = a22 * a33 - a23 * a32;
                        var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
                        if (!det) {
                            return null;
                        }
                        det = 1 / det;
                        outm[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
                        outm[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
                        outm[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
                        outm[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
                        outm[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
                        outm[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
                        outm[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
                        outm[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
                        outm[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
                        return out;
                    }
                },
                {
                    key: 'str',
                    value: function str(a) {
                        var am = a.m;
                        return 'mat3(' + am[0] + ', ' + am[1] + ', ' + am[2] + ', ' + am[3] + ', ' + am[4] + ', ' + am[5] + ', ' + am[6] + ', ' + am[7] + ', ' + am[8] + ')';
                    }
                },
                {
                    key: 'array',
                    value: function array(out, m) {
                        var mm = m.m;
                        out[0] = mm[0];
                        out[1] = mm[1];
                        out[2] = mm[2];
                        out[3] = mm[3];
                        out[4] = mm[4];
                        out[5] = mm[5];
                        out[6] = mm[6];
                        out[7] = mm[7];
                        out[8] = mm[8];
                        return out;
                    }
                },
                {
                    key: 'frob',
                    value: function frob(a) {
                        var am = a.m;
                        return Math.sqrt(Math.pow(am[0], 2) + Math.pow(am[1], 2) + Math.pow(am[2], 2) + Math.pow(am[3], 2) + Math.pow(am[4], 2) + Math.pow(am[5], 2) + Math.pow(am[6], 2) + Math.pow(am[7], 2) + Math.pow(am[8], 2));
                    }
                },
                {
                    key: 'add',
                    value: function add(out, a, b) {
                        var am = a.m, bm = b.m, outm = out.m;
                        outm[0] = am[0] + bm[0];
                        outm[1] = am[1] + bm[1];
                        outm[2] = am[2] + bm[2];
                        outm[3] = am[3] + bm[3];
                        outm[4] = am[4] + bm[4];
                        outm[5] = am[5] + bm[5];
                        outm[6] = am[6] + bm[6];
                        outm[7] = am[7] + bm[7];
                        outm[8] = am[8] + bm[8];
                        return out;
                    }
                },
                {
                    key: 'subtract',
                    value: function subtract(out, a, b) {
                        var am = a.m, bm = b.m, outm = out.m;
                        outm[0] = am[0] - bm[0];
                        outm[1] = am[1] - bm[1];
                        outm[2] = am[2] - bm[2];
                        outm[3] = am[3] - bm[3];
                        outm[4] = am[4] - bm[4];
                        outm[5] = am[5] - bm[5];
                        outm[6] = am[6] - bm[6];
                        outm[7] = am[7] - bm[7];
                        outm[8] = am[8] - bm[8];
                        return out;
                    }
                },
                {
                    key: 'sub',
                    value: function sub(out, a, b) {
                        return mat3.subtract(out, a, b);
                    }
                },
                {
                    key: 'multiplyScalar',
                    value: function multiplyScalar(out, a, b) {
                        var am = a.m, outm = out.m;
                        outm[0] = am[0] * b;
                        outm[1] = am[1] * b;
                        outm[2] = am[2] * b;
                        outm[3] = am[3] * b;
                        outm[4] = am[4] * b;
                        outm[5] = am[5] * b;
                        outm[6] = am[6] * b;
                        outm[7] = am[7] * b;
                        outm[8] = am[8] * b;
                        return out;
                    }
                },
                {
                    key: 'multiplyScalarAndAdd',
                    value: function multiplyScalarAndAdd(out, a, b, scale) {
                        var am = a.m, bm = b.m, outm = out.m;
                        outm[0] = am[0] + bm[0] * scale;
                        outm[1] = am[1] + bm[1] * scale;
                        outm[2] = am[2] + bm[2] * scale;
                        outm[3] = am[3] + bm[3] * scale;
                        outm[4] = am[4] + bm[4] * scale;
                        outm[5] = am[5] + bm[5] * scale;
                        outm[6] = am[6] + bm[6] * scale;
                        outm[7] = am[7] + bm[7] * scale;
                        outm[8] = am[8] + bm[8] * scale;
                        return out;
                    }
                },
                {
                    key: 'exactEquals',
                    value: function exactEquals(a, b) {
                        var am = a.m, bm = b.m;
                        return am[0] === bm[0] && am[1] === bm[1] && am[2] === bm[2] && am[3] === bm[3] && am[4] === bm[4] && am[5] === bm[5] && am[6] === bm[6] && am[7] === bm[7] && am[8] === bm[8];
                    }
                },
                {
                    key: 'equals',
                    value: function equals(a, b) {
                        var am = a.m, bm = b.m;
                        var a0 = am[0], a1 = am[1], a2 = am[2], a3 = am[3], a4 = am[4], a5 = am[5], a6 = am[6], a7 = am[7], a8 = am[8];
                        var b0 = bm[0], b1 = bm[1], b2 = bm[2], b3 = bm[3], b4 = bm[4], b5 = bm[5], b6 = bm[6], b7 = bm[7], b8 = bm[8];
                        return Math.abs(a0 - b0) <= _utils.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _utils.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _utils.EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _utils.EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _utils.EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _utils.EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _utils.EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _utils.EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= _utils.EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8));
                    }
                }
            ]);
            return mat3;
        }();
        exports.default = mat3;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,