(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/vmath/trs.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _quat = require('./quat');
        var _quat2 = _interopRequireDefault(_quat);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var tmp_quat = _quat2.default.create();
        var trs = function () {
            function trs() {
                _classCallCheck(this, trs);
            }
            _createClass(trs, null, [
                {
                    key: 'toRotation',
                    value: function toRotation(out, a) {
                        out.x = a[3];
                        out.y = a[4];
                        out.z = a[5];
                        out.w = a[6];
                        return out;
                    }
                },
                {
                    key: 'fromRotation',
                    value: function fromRotation(out, a) {
                        out[3] = a.x;
                        out[4] = a.y;
                        out[5] = a.z;
                        out[6] = a.w;
                        return out;
                    }
                },
                {
                    key: 'toEuler',
                    value: function toEuler(out, a) {
                        trs.toRotation(tmp_quat, a);
                        _quat2.default.toEuler(out, tmp_quat);
                        return out;
                    }
                },
                {
                    key: 'fromEuler',
                    value: function fromEuler(out, a) {
                        _quat2.default.fromEuler(tmp_quat, a.x, a.y, a.z);
                        trs.fromRotation(out, tmp_quat);
                        return out;
                    }
                },
                {
                    key: 'fromEulerNumber',
                    value: function fromEulerNumber(out, x, y, z) {
                        _quat2.default.fromEuler(tmp_quat, x, y, z);
                        trs.fromRotation(out, tmp_quat);
                        return out;
                    }
                },
                {
                    key: 'toScale',
                    value: function toScale(out, a) {
                        out.x = a[7];
                        out.y = a[8];
                        out.z = a[9];
                        return out;
                    }
                },
                {
                    key: 'fromScale',
                    value: function fromScale(out, a) {
                        out[7] = a.x;
                        out[8] = a.y;
                        out[9] = a.z;
                        return out;
                    }
                },
                {
                    key: 'toPosition',
                    value: function toPosition(out, a) {
                        out.x = a[0];
                        out.y = a[1];
                        out.z = a[2];
                        return out;
                    }
                },
                {
                    key: 'fromPosition',
                    value: function fromPosition(out, a) {
                        out[0] = a.x;
                        out[1] = a.y;
                        out[2] = a.z;
                        return out;
                    }
                },
                {
                    key: 'fromAngleZ',
                    value: function fromAngleZ(out, a) {
                        _quat2.default.fromAngleZ(tmp_quat, a);
                        trs.fromRotation(out, tmp_quat);
                        return out;
                    }
                }
            ]);
            return trs;
        }();
        exports.default = trs;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,