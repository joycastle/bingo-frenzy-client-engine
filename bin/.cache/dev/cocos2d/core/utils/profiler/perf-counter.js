(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/utils/profiler/perf-counter.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Counter = require('./counter');
        var PerfCounter = cc.Class({
            name: 'cc.PerfCounter',
            extends: Counter,
            ctor: function ctor(id, opts, now) {
                this._time = now;
            },
            start: function start(now) {
                this._time = now;
            },
            end: function end(now) {
                this._value = now - this._time;
                this._average(this._value);
            },
            tick: function tick() {
                this.end();
                this.start();
            },
            frame: function frame(now) {
                var t = now;
                var e = t - this._time;
                this._total++;
                var avg = this._opts.average || 1000;
                if (e > avg) {
                    this._value = this._total * 1000 / e;
                    this._total = 0;
                    this._time = t;
                    this._average(this._value);
                }
            }
        });
        module.exports = PerfCounter;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,