(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/utils/profiler/CCProfiler.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var macro = require('../../platform/CCMacro');
        var PerfCounter = require('./perf-counter');
        var _showFPS = false;
        var _fontSize = 15;
        var _stats = null;
        var _rootNode = null;
        var _label = null;
        function generateStats() {
            if (_stats)
                return;
            _stats = {
                frame: {
                    desc: 'Frame time (ms)',
                    min: 0,
                    max: 50,
                    average: 500
                },
                fps: {
                    desc: 'Framerate (FPS)',
                    below: 30,
                    average: 500
                },
                draws: { desc: 'Draw call' },
                logic: {
                    desc: 'Game Logic (ms)',
                    min: 0,
                    max: 50,
                    average: 500,
                    color: '#080'
                },
                render: {
                    desc: 'Renderer (ms)',
                    min: 0,
                    max: 50,
                    average: 500,
                    color: '#f90'
                },
                mode: {
                    desc: cc.game.renderType === cc.game.RENDER_TYPE_WEBGL ? 'WebGL' : 'Canvas',
                    min: 1
                }
            };
            var now = performance.now();
            for (var id in _stats) {
                _stats[id]._counter = new PerfCounter(id, _stats[id], now);
            }
        }
        function generateNode() {
            if (_rootNode && _rootNode.isValid)
                return;
            _rootNode = new cc.Node('PROFILER-NODE');
            _rootNode.x = _rootNode.y = 10;
            _rootNode.groupIndex = cc.Node.BuiltinGroupIndex.DEBUG;
            cc.Camera._setupDebugCamera();
            _rootNode.zIndex = macro.MAX_ZINDEX;
            cc.game.addPersistRootNode(_rootNode);
            var left = new cc.Node('LEFT-PANEL');
            left.anchorX = left.anchorY = 0;
            var leftLabel = left.addComponent(cc.Label);
            leftLabel.fontSize = _fontSize;
            leftLabel.lineHeight = _fontSize;
            left.parent = _rootNode;
            var right = new cc.Node('RIGHT-PANEL');
            right.anchorX = 1;
            right.anchorY = 0;
            right.x = 200;
            var rightLabel = right.addComponent(cc.Label);
            rightLabel.horizontalAlign = cc.Label.HorizontalAlign.RIGHT;
            rightLabel.fontSize = _fontSize;
            rightLabel.lineHeight = _fontSize;
            right.parent = _rootNode;
            if (cc.sys.browserType !== cc.sys.BROWSER_TYPE_BAIDU_GAME_SUB && cc.sys.browserType !== cc.sys.BROWSER_TYPE_WECHAT_GAME_SUB) {
                leftLabel.cacheMode = cc.Label.CacheMode.CHAR;
                rightLabel.cacheMode = cc.Label.CacheMode.CHAR;
            }
            _label = {
                left: leftLabel,
                right: rightLabel
            };
        }
        function beforeUpdate() {
            generateNode();
            var now = cc.director._lastUpdate;
            _stats['frame']._counter.start(now);
            _stats['logic']._counter.start(now);
        }
        function afterUpdate() {
            var now = performance.now();
            if (cc.director.isPaused()) {
                _stats['frame']._counter.start(now);
            } else {
                _stats['logic']._counter.end(now);
            }
            _stats['render']._counter.start(now);
        }
        function updateLabel(stat) {
            var length = 20;
            var desc = stat.desc;
            var value = stat._counter.human() + '';
            stat.label.string = stat.desc + '  ' + stat._counter.human();
        }
        function afterDraw() {
            var now = performance.now();
            _stats['render']._counter.end(now);
            _stats['draws']._counter.value = cc.renderer.drawCalls;
            _stats['frame']._counter.end(now);
            _stats['fps']._counter.frame(now);
            var left = '';
            var right = '';
            for (var id in _stats) {
                var stat = _stats[id];
                stat._counter.sample(now);
                left += stat.desc + '\n';
                right += stat._counter.human() + '\n';
            }
            if (_label) {
                _label.left.string = left;
                _label.right.string = right;
            }
        }
        cc.profiler = module.exports = {
            isShowingStats: function isShowingStats() {
                return _showFPS;
            },
            hideStats: function hideStats() {
                if (_showFPS) {
                    if (_rootNode) {
                        _rootNode.active = false;
                    }
                    cc.director.off(cc.Director.EVENT_BEFORE_UPDATE, beforeUpdate);
                    cc.director.off(cc.Director.EVENT_AFTER_UPDATE, afterUpdate);
                    cc.director.off(cc.Director.EVENT_AFTER_DRAW, afterDraw);
                    _showFPS = false;
                }
            },
            showStats: function showStats() {
                if (!_showFPS) {
                    generateStats();
                    if (_rootNode) {
                        _rootNode.active = true;
                    }
                    cc.director.on(cc.Director.EVENT_BEFORE_UPDATE, beforeUpdate);
                    cc.director.on(cc.Director.EVENT_AFTER_UPDATE, afterUpdate);
                    cc.director.on(cc.Director.EVENT_AFTER_DRAW, afterDraw);
                    _showFPS = true;
                }
            }
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,