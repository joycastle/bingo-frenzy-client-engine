(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/utils/text-utils.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _js = require('../platform/js');
        var _js2 = _interopRequireDefault(_js);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var _BASELINE_RATIO = 0.26;
        if (CC_RUNTIME) {
            _BASELINE_RATIO = -0.05;
        }
        var MAX_CACHE_SIZE = 100;
        var pool = new _js2.default.Pool(2);
        pool.get = function () {
            var node = this._get() || {
                key: null,
                value: null,
                prev: null,
                next: null
            };
            return node;
        };
        function LRUCache(size) {
            this.count = 0;
            this.limit = size;
            this.datas = {};
            this.head = null;
            this.tail = null;
        }
        LRUCache.prototype.moveToHead = function (node) {
            node.next = this.head;
            node.prev = null;
            if (this.head !== null)
                this.head.prev = node;
            this.head = node;
            if (this.tail === null)
                this.tail = node;
            this.count++;
            this.datas[node.key] = node;
        };
        LRUCache.prototype.put = function (key, value) {
            var node = pool.get();
            node.key = key;
            node.value = value;
            if (this.count >= this.limit) {
                var discard = this.tail;
                delete this.datas[discard.key];
                this.count--;
                this.tail = discard.prev;
                this.tail.next = null;
                discard.prev = null;
                discard.next = null;
                pool.put(discard);
            }
            this.moveToHead(node);
        };
        LRUCache.prototype.remove = function (node) {
            if (node.prev !== null) {
                node.prev.next = node.next;
            } else {
                this.head = node.next;
            }
            if (node.next !== null) {
                node.next.prev = node.prev;
            } else {
                this.tail = node.prev;
            }
            delete this.datas[node.key];
            this.count--;
        };
        LRUCache.prototype.get = function (key) {
            var node = this.datas[key];
            if (node) {
                this.remove(node);
                this.moveToHead(node);
                return node.value;
            }
            return null;
        };
        LRUCache.prototype.clear = function () {
            this.count = 0;
            this.datas = {};
            this.head = null;
            this.tail = null;
        };
        LRUCache.prototype.has = function (key) {
            return !!this.datas[key];
        };
        LRUCache.prototype.delete = function (key) {
            var node = this.datas[key];
            this.remove(node);
        };
        var measureCache = new LRUCache(MAX_CACHE_SIZE);
        var textUtils = {
            BASELINE_RATIO: _BASELINE_RATIO,
            MIDDLE_RATIO: (_BASELINE_RATIO + 1) / 2 - _BASELINE_RATIO,
            label_wordRex: /([a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûа-яА-ЯЁё]+|\S)/,
            label_symbolRex: /^[!,.:;'}\]%\?>、‘“》？。，！]/,
            label_lastWordRex: /([a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûаíìÍÌïÁÀáàÉÈÒÓòóŐőÙÚŰúűñÑæÆœŒÃÂãÔõěščřžýáíéóúůťďňĚŠČŘŽÁÍÉÓÚŤżźśóńłęćąŻŹŚÓŃŁĘĆĄ-яА-ЯЁё]+|\S)$/,
            label_lastEnglish: /[a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûаíìÍÌïÁÀáàÉÈÒÓòóŐőÙÚŰúűñÑæÆœŒÃÂãÔõěščřžýáíéóúůťďňĚŠČŘŽÁÍÉÓÚŤżźśóńłęćąŻŹŚÓŃŁĘĆĄ-яА-ЯЁё]+$/,
            label_firstEnglish: /^[a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûаíìÍÌïÁÀáàÉÈÒÓòóŐőÙÚŰúűñÑæÆœŒÃÂãÔõěščřžýáíéóúůťďňĚŠČŘŽÁÍÉÓÚŤżźśóńłęćąŻŹŚÓŃŁĘĆĄ-яА-ЯЁё]/,
            label_wrapinspection: true,
            __CHINESE_REG: /^[\u4E00-\u9FFF\u3400-\u4DFF]+$/,
            __JAPANESE_REG: /[\u3000-\u303F]|[\u3040-\u309F]|[\u30A0-\u30FF]|[\uFF00-\uFFEF]|[\u4E00-\u9FAF]|[\u2605-\u2606]|[\u2190-\u2195]|\u203B/g,
            __KOREAN_REG: /^[\u1100-\u11FF]|[\u3130-\u318F]|[\uA960-\uA97F]|[\uAC00-\uD7AF]|[\uD7B0-\uD7FF]+$/,
            isUnicodeCJK: function isUnicodeCJK(ch) {
                return this.__CHINESE_REG.test(ch) || this.__JAPANESE_REG.test(ch) || this.__KOREAN_REG.test(ch);
            },
            isUnicodeSpace: function isUnicodeSpace(ch) {
                ch = ch.charCodeAt(0);
                return ch >= 9 && ch <= 13 || ch === 32 || ch === 133 || ch === 160 || ch === 5760 || ch >= 8192 && ch <= 8202 || ch === 8232 || ch === 8233 || ch === 8239 || ch === 8287 || ch === 12288;
            },
            safeMeasureText: function safeMeasureText(ctx, string, desc) {
                var font = desc || ctx.font;
                var key = font + '\uD83C\uDFAE' + string;
                var cache = measureCache.get(key);
                if (cache !== null) {
                    return cache;
                }
                var metric = ctx.measureText(string);
                var width = metric && metric.width || 0;
                measureCache.put(key, width);
                return width;
            },
            _stringValidLength: function _stringValidLength(str) {
                return Array.from(str).length;
            },
            _safeSubstring: function _safeSubstring(targetString, startIndex, endIndex) {
                var stringArray = Array.from(targetString);
                stringArray = stringArray.slice(startIndex, endIndex);
                return stringArray.join('');
            },
            fragmentText: function fragmentText(stringToken, allWidth, maxWidth, measureText) {
                var wrappedWords = [];
                if (stringToken.length === 0 || maxWidth < 0) {
                    wrappedWords.push('');
                    return wrappedWords;
                }
                var text = stringToken;
                while (allWidth > maxWidth && this._stringValidLength(text) > 1) {
                    var fuzzyLen = this._stringValidLength(text) * (maxWidth / allWidth) | 0;
                    var tmpText = this._safeSubstring(text, fuzzyLen);
                    var width = allWidth - measureText(tmpText);
                    var sLine = tmpText;
                    var pushNum = 0;
                    var checkWhile = 0;
                    var checkCount = 10;
                    while (width > maxWidth && checkWhile++ < checkCount) {
                        fuzzyLen *= maxWidth / width;
                        fuzzyLen = fuzzyLen | 0;
                        tmpText = this._safeSubstring(text, fuzzyLen);
                        width = allWidth - measureText(tmpText);
                    }
                    checkWhile = 0;
                    while (width <= maxWidth && checkWhile++ < checkCount) {
                        if (tmpText) {
                            var exec = this.label_wordRex.exec(tmpText);
                            pushNum = exec ? this._stringValidLength(exec[0]) : 1;
                            sLine = tmpText;
                        }
                        fuzzyLen = fuzzyLen + pushNum;
                        tmpText = this._safeSubstring(text, fuzzyLen);
                        width = allWidth - measureText(tmpText);
                    }
                    fuzzyLen -= pushNum;
                    if (fuzzyLen === 0) {
                        fuzzyLen = 1;
                        sLine = this._safeSubstring(sLine, 1);
                    }
                    var sText = this._safeSubstring(text, 0, fuzzyLen), result;
                    if (this.label_wrapinspection) {
                        if (this.label_symbolRex.test(sLine || tmpText)) {
                            result = this.label_lastWordRex.exec(sText);
                            fuzzyLen -= result ? this._stringValidLength(result[0]) : 0;
                            if (fuzzyLen === 0)
                                fuzzyLen = 1;
                            sLine = this._safeSubstring(text, fuzzyLen);
                            sText = this._safeSubstring(text, 0, fuzzyLen);
                        }
                    }
                    if (this.label_firstEnglish.test(sLine)) {
                        result = this.label_lastEnglish.exec(sText);
                        if (result && sText !== result[0]) {
                            fuzzyLen -= this._stringValidLength(result[0]);
                            sLine = this._safeSubstring(text, fuzzyLen);
                            sText = this._safeSubstring(text, 0, fuzzyLen);
                        }
                    }
                    if (wrappedWords.length === 0) {
                        wrappedWords.push(sText);
                    } else {
                        sText = sText.trimLeft();
                        if (sText.length > 0) {
                            wrappedWords.push(sText);
                        }
                    }
                    text = sLine || tmpText;
                    allWidth = measureText(text);
                }
                if (wrappedWords.length === 0) {
                    wrappedWords.push(text);
                } else {
                    text = text.trimLeft();
                    if (text.length > 0) {
                        wrappedWords.push(text);
                    }
                }
                return wrappedWords;
            }
        };
        cc.textUtils = module.exports = textUtils;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,