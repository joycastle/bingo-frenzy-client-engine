(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/utils/CCPath.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        require('../platform/CCSys');
        var EXTNAME_RE = /(\.[^\.\/\?\\]*)(\?.*)?$/;
        var DIRNAME_RE = /((.*)(\/|\\|\\\\))?(.*?\..*$)?/;
        var NORMALIZE_RE = /[^\.\/]+\/\.\.\//;
        cc.path = {
            join: function join() {
                var l = arguments.length;
                var result = '';
                for (var i = 0; i < l; i++) {
                    result = (result + (result === '' ? '' : '/') + arguments[i]).replace(/(\/|\\\\)$/, '');
                }
                return result;
            },
            extname: function extname(pathStr) {
                var temp = EXTNAME_RE.exec(pathStr);
                return temp ? temp[1] : '';
            },
            mainFileName: function mainFileName(fileName) {
                if (fileName) {
                    var idx = fileName.lastIndexOf('.');
                    if (idx !== -1)
                        return fileName.substring(0, idx);
                }
                return fileName;
            },
            basename: function basename(pathStr, extname) {
                var index = pathStr.indexOf('?');
                if (index > 0)
                    pathStr = pathStr.substring(0, index);
                var reg = /(\/|\\)([^\/\\]+)$/g;
                var result = reg.exec(pathStr.replace(/(\/|\\)$/, ''));
                if (!result)
                    return null;
                var baseName = result[2];
                if (extname && pathStr.substring(pathStr.length - extname.length).toLowerCase() === extname.toLowerCase())
                    return baseName.substring(0, baseName.length - extname.length);
                return baseName;
            },
            dirname: function dirname(pathStr) {
                var temp = DIRNAME_RE.exec(pathStr);
                return temp ? temp[2] : '';
            },
            changeExtname: function changeExtname(pathStr, extname) {
                extname = extname || '';
                var index = pathStr.indexOf('?');
                var tempStr = '';
                if (index > 0) {
                    tempStr = pathStr.substring(index);
                    pathStr = pathStr.substring(0, index);
                }
                index = pathStr.lastIndexOf('.');
                if (index < 0)
                    return pathStr + extname + tempStr;
                return pathStr.substring(0, index) + extname + tempStr;
            },
            changeBasename: function changeBasename(pathStr, basename, isSameExt) {
                if (basename.indexOf('.') === 0)
                    return this.changeExtname(pathStr, basename);
                var index = pathStr.indexOf('?');
                var tempStr = '';
                var ext = isSameExt ? this.extname(pathStr) : '';
                if (index > 0) {
                    tempStr = pathStr.substring(index);
                    pathStr = pathStr.substring(0, index);
                }
                index = pathStr.lastIndexOf('/');
                index = index <= 0 ? 0 : index + 1;
                return pathStr.substring(0, index) + basename + ext + tempStr;
            },
            _normalize: function _normalize(url) {
                var oldUrl = url = String(url);
                do {
                    oldUrl = url;
                    url = url.replace(NORMALIZE_RE, '');
                } while (oldUrl.length !== url.length);
                return url;
            },
            sep: cc.sys.os === cc.sys.OS_WINDOWS ? '\\' : '/',
            stripSep: function stripSep(path) {
                return path.replace(/[\/\\]$/, '');
            }
        };
        module.exports = cc.path;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,