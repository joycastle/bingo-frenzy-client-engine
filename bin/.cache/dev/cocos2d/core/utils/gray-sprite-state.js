(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/utils/gray-sprite-state.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Material = require('../assets/material/CCMaterial');
        var GraySpriteState = cc.Class({
            properties: {
                _normalMaterial: null,
                normalMaterial: {
                    get: function get() {
                        return this._normalMaterial;
                    },
                    set: function set(val) {
                        this._normalMaterial = val;
                        this._updateDisabledState && this._updateDisabledState();
                    },
                    type: Material,
                    tooltip: CC_DEV && 'i18n:COMPONENT.button.normal_material',
                    animatable: false
                },
                _grayMaterial: null,
                grayMaterial: {
                    get: function get() {
                        return this._grayMaterial;
                    },
                    set: function set(val) {
                        this._grayMaterial = val;
                        this._updateDisabledState && this._updateDisabledState();
                    },
                    type: Material,
                    tooltip: CC_DEV && 'i18n:COMPONENT.button.gray_material',
                    animatable: false
                }
            },
            _switchGrayMaterial: function _switchGrayMaterial(useGrayMaterial, renderComp) {
                if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
                    return;
                }
                var material = void 0;
                if (useGrayMaterial) {
                    material = this._grayMaterial;
                    if (!material) {
                        material = Material.getBuiltinMaterial('2d-gray-sprite');
                    }
                    material = this._grayMaterial = Material.getInstantiatedMaterial(material, renderComp);
                } else {
                    material = this._normalMaterial;
                    if (!material) {
                        material = Material.getBuiltinMaterial('2d-sprite', renderComp);
                    }
                    material = this._normalMaterial = Material.getInstantiatedMaterial(material, renderComp);
                }
                renderComp.setMaterial(0, material);
            }
        });
        module.exports = GraySpriteState;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyYXktc3ByaXRlLXN0YXRlLmpzIiwiL1VzZXJzL1NoYXJlZC9iaW5nb19mcmVuenkvZW5naW5lL2NvY29zMmQvY29yZS91dGlscy9ncmF5LXNwcml0ZS1zdGF0ZS5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiY2MiLCJfbm9ybWFsTWF0ZXJpYWwiLCJNYXRlcmlhbCIsIkdyYXlTcHJpdGVTdGF0ZSIsIkNsYXNzIiwicHJvcGVydGllcyIsIm5vcm1hbE1hdGVyaWFsIiwiZ2V0Iiwic2V0IiwidmFsIiwiX3VwZGF0ZURpc2FibGVkU3RhdGUiLCJ0eXBlIiwidG9vbHRpcCIsIkNDX0RFViIsImFuaW1hdGFibGUiLCJfZ3JheU1hdGVyaWFsIiwiZ3JheU1hdGVyaWFsIiwiX3N3aXRjaEdyYXlNYXRlcmlhbCIsInVzZUdyYXlNYXRlcmlhbCIsInJlbmRlckNvbXAiLCJnYW1lIiwicmVuZGVyVHlwZSIsIlJFTkRFUl9UWVBFX0NBTlZBUyIsIm1hdGVyaWFsIiwiZ2V0QnVpbHRpbk1hdGVyaWFsIiwiZ2V0SW5zdGFudGlhdGVkTWF0ZXJpYWwiLCJzZXRNYXRlcmlhbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7SUFDaUJBLElBQVEsT0FBQSxHQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUEsSUFBekIsT0FBQSxPQUFBLEtBQUEsV0FBaUJBOztJQUVqQixJQUFBLFVBQUEsR0FBQSxvREFBQTs7OztRQUlzQkMsT0FBUyxpQkFBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBLEVBQUEsVUFBQSxDQUFUQTs7SUFFZEMsU0FEUSxRQUNSQSxDQURRLE9BQ1JBLEVBRFEsT0FDUkEsRUFEUSxNQUNSQSxFQURRO0FBQUE7O1NBQUE7QUFBQTtRQVBoQixJQUFNQyxRQUFBQSxHQUFXSCxPQUFBQSxDQUFRLCtCQUFSQSxDQUFqQjtRQU1BLElBQUlJLGVBQUFBLEdBQWtCSCxFQUFBQSxDQUFHSSxLQUFISixDQUFTO0FBQUEsWUFDM0JLLFVBQUFBLEVBQVk7QUFBQSxnQkFDUkos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IjoiZ3JheS1zcHJpdGUtc3RhdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmNvbnN0IE1hdGVyaWFsID0gcmVxdWlyZSgnLi4vYXNzZXRzL21hdGVyaWFsL0NDTWF0ZXJpYWwnKTtcblxuLyoqXG4gKiBIZWxwQ2xhc3MgZm9yIHN3aXRjaGluZyByZW5kZXIgY29tcG9uZW50J3MgbWF0ZXJpYWwgYmV0d2VlbiBub3JtYWwgc3ByaXRlIG1hdGVyaWFsIGFuZCBncmF5IHNwcml0ZSBtYXRlcmlhbC5cbiAqL1xuXG5sZXQgR3JheVNwcml0ZVN0YXRlID0gY2MuQ2xhc3Moe1xuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgX25vcm1hbE1hdGVyaWFsOiBudWxsLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIFRoZSBub3JtYWwgbWF0ZXJpYWwuXG4gICAgICAgICAqICEjemgg5q2j5bi454q25oCB55qE5p2Q6LSo44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSBub3JtYWxNYXRlcmlhbFxuICAgICAgICAgKiBAdHlwZSB7TWF0ZXJpYWx9XG4gICAgICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgICAgICovXG4gICAgICAgIG5vcm1hbE1hdGVyaWFsOiB7XG4gICAgICAgICAgICBnZXQgKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ub3JtYWxNYXRlcmlhbDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQgKHZhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX25vcm1hbE1hdGVyaWFsID0gdmFsO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZURpc2FibGVkU3RhdGUgJiYgdGhpcy5fdXBkYXRlRGlzYWJsZWRTdGF0ZSgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHR5cGU6IE1hdGVyaWFsLFxuICAgICAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC5idXR0b24ubm9ybWFsX21hdGVyaWFsJyxcbiAgICAgICAgICAgIGFuaW1hdGFibGU6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgX2dyYXlNYXRlcmlhbDogbnVsbCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBUaGUgZ3JheSBtYXRlcmlhbC5cbiAgICAgICAgICogISN6aCDnva7ngbDnirbmgIHnmoTmnZDotKjjgIJcbiAgICAgICAgICogQHByb3BlcnR5IGdyYXlNYXRlcmlhbFxuICAgICAgICAgKiBAdHlwZSB7TWF0ZXJpYWx9XG4gICAgICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgICAgICovXG4gICAgICAgIGdyYXlNYXRlcmlhbDoge1xuICAgICAgICAgICAgZ2V0ICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZ3JheU1hdGVyaWFsO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldCAodmFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZ3JheU1hdGVyaWFsID0gdmFsO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZURpc2FibGVkU3RhdGUgJiYgdGhpcy5fdXBkYXRlRGlzYWJsZWRTdGF0ZSgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHR5cGU6IE1hdGVyaWFsLFxuICAgICAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC5idXR0b24uZ3JheV9tYXRlcmlhbCcsXG4gICAgICAgICAgICBhbmltYXRhYmxlOiBmYWxzZVxuICAgICAgICB9XG4gICAgfSxcbiAgXG4gICAgX3N3aXRjaEdyYXlNYXRlcmlhbCAodXNlR3JheU1hdGVyaWFsLCByZW5kZXJDb21wKSB7XG4gICAgICAgIGlmIChjYy5nYW1lLnJlbmRlclR5cGUgPT09IGNjLmdhbWUuUkVOREVSX1RZUEVfQ0FOVkFTKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgbGV0IG1hdGVyaWFsO1xuICAgICAgICBpZiAodXNlR3JheU1hdGVyaWFsKSB7XG4gICAgICAgICAgICBtYXRlcmlhbCA9IHRoaXMuX2dyYXlNYXRlcmlhbDtcbiAgICAgICAgICAgIGlmICghbWF0ZXJpYWwpIHtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbCA9IE1hdGVyaWFsLmdldEJ1aWx0aW5NYXRlcmlhbCgnMmQtZ3JheS1zcHJpdGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1hdGVyaWFsID0gdGhpcy5fZ3JheU1hdGVyaWFsID0gTWF0ZXJpYWwuZ2V0SW5zdGFudGlhdGVkTWF0ZXJpYWwobWF0ZXJpYWwsIHJlbmRlckNvbXApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbWF0ZXJpYWwgPSB0aGlzLl9ub3JtYWxNYXRlcmlhbDtcbiAgICAgICAgICAgIGlmICghbWF0ZXJpYWwpIHtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbCA9IE1hdGVyaWFsLmdldEJ1aWx0aW5NYXRlcmlhbCgnMmQtc3ByaXRlJywgcmVuZGVyQ29tcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtYXRlcmlhbCA9IHRoaXMuX25vcm1hbE1hdGVyaWFsID0gTWF0ZXJpYWwuZ2V0SW5zdGFudGlhdGVkTWF0ZXJpYWwobWF0ZXJpYWwsIHJlbmRlckNvbXApO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIHJlbmRlckNvbXAuc2V0TWF0ZXJpYWwoMCwgbWF0ZXJpYWwpO1xuICAgIH1cbn0pXG5cbm1vZHVsZS5leHBvcnRzID0gR3JheVNwcml0ZVN0YXRlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgTWF0ZXJpYWwgPSByZXF1aXJlKCcuLi9hc3NldHMvbWF0ZXJpYWwvQ0NNYXRlcmlhbCcpO1xuXG4vKipcbiAqIEhlbHBDbGFzcyBmb3Igc3dpdGNoaW5nIHJlbmRlciBjb21wb25lbnQncyBtYXRlcmlhbCBiZXR3ZWVuIG5vcm1hbCBzcHJpdGUgbWF0ZXJpYWwgYW5kIGdyYXkgc3ByaXRlIG1hdGVyaWFsLlxuICovXG5cbnZhciBHcmF5U3ByaXRlU3RhdGUgPSBjYy5DbGFzcyh7XG4gICAgcHJvcGVydGllczoge1xuICAgICAgICBfbm9ybWFsTWF0ZXJpYWw6IG51bGwsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gVGhlIG5vcm1hbCBtYXRlcmlhbC5cbiAgICAgICAgICogISN6aCDmraPluLjnirbmgIHnmoTmnZDotKjjgIJcbiAgICAgICAgICogQHByb3BlcnR5IG5vcm1hbE1hdGVyaWFsXG4gICAgICAgICAqIEB0eXBlIHtNYXRlcmlhbH1cbiAgICAgICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgbm9ybWFsTWF0ZXJpYWw6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ub3JtYWxNYXRlcmlhbDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9ub3JtYWxNYXRlcmlhbCA9IHZhbDtcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVEaXNhYmxlZFN0YXRlICYmIHRoaXMuX3VwZGF0ZURpc2FibGVkU3RhdGUoKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHR5cGU6IE1hdGVyaWFsLFxuICAgICAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC5idXR0b24ubm9ybWFsX21hdGVyaWFsJyxcbiAgICAgICAgICAgIGFuaW1hdGFibGU6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgX2dyYXlNYXRlcmlhbDogbnVsbCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBUaGUgZ3JheSBtYXRlcmlhbC5cbiAgICAgICAgICogISN6aCDnva7ngbDnirbmgIHnmoTmnZDotKjjgIJcbiAgICAgICAgICogQHByb3BlcnR5IGdyYXlNYXRlcmlhbFxuICAgICAgICAgKiBAdHlwZSB7TWF0ZXJpYWx9XG4gICAgICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgICAgICovXG4gICAgICAgIGdyYXlNYXRlcmlhbDoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dyYXlNYXRlcmlhbDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9ncmF5TWF0ZXJpYWwgPSB2YWw7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlRGlzYWJsZWRTdGF0ZSAmJiB0aGlzLl91cGRhdGVEaXNhYmxlZFN0YXRlKCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0eXBlOiBNYXRlcmlhbCxcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQuYnV0dG9uLmdyYXlfbWF0ZXJpYWwnLFxuICAgICAgICAgICAgYW5pbWF0YWJsZTogZmFsc2VcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfc3dpdGNoR3JheU1hdGVyaWFsOiBmdW5jdGlvbiBfc3dpdGNoR3JheU1hdGVyaWFsKHVzZUdyYXlNYXRlcmlhbCwgcmVuZGVyQ29tcCkge1xuICAgICAgICBpZiAoY2MuZ2FtZS5yZW5kZXJUeXBlID09PSBjYy5nYW1lLlJFTkRFUl9UWVBFX0NBTlZBUykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG1hdGVyaWFsID0gdm9pZCAwO1xuICAgICAgICBpZiAodXNlR3JheU1hdGVyaWFsKSB7XG4gICAgICAgICAgICBtYXRlcmlhbCA9IHRoaXMuX2dyYXlNYXRlcmlhbDtcbiAgICAgICAgICAgIGlmICghbWF0ZXJpYWwpIHtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbCA9IE1hdGVyaWFsLmdldEJ1aWx0aW5NYXRlcmlhbCgnMmQtZ3JheS1zcHJpdGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1hdGVyaWFsID0gdGhpcy5fZ3JheU1hdGVyaWFsID0gTWF0ZXJpYWwuZ2V0SW5zdGFudGlhdGVkTWF0ZXJpYWwobWF0ZXJpYWwsIHJlbmRlckNvbXApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWF0ZXJpYWwgPSB0aGlzLl9ub3JtYWxNYXRlcmlhbDtcbiAgICAgICAgICAgIGlmICghbWF0ZXJpYWwpIHtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbCA9IE1hdGVyaWFsLmdldEJ1aWx0aW5NYXRlcmlhbCgnMmQtc3ByaXRlJywgcmVuZGVyQ29tcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtYXRlcmlhbCA9IHRoaXMuX25vcm1hbE1hdGVyaWFsID0gTWF0ZXJpYWwuZ2V0SW5zdGFudGlhdGVkTWF0ZXJpYWwobWF0ZXJpYWwsIHJlbmRlckNvbXApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVuZGVyQ29tcC5zZXRNYXRlcmlhbCgwLCBtYXRlcmlhbCk7XG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gR3JheVNwcml0ZVN0YXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1keVlYa3RjM0J5YVhSbExYTjBZWFJsTG1weklsMHNJbTVoYldWeklqcGJJazFoZEdWeWFXRnNJaXdpY21WeGRXbHlaU0lzSWtkeVlYbFRjSEpwZEdWVGRHRjBaU0lzSW1Oaklpd2lRMnhoYzNNaUxDSndjbTl3WlhKMGFXVnpJaXdpWDI1dmNtMWhiRTFoZEdWeWFXRnNJaXdpYm05eWJXRnNUV0YwWlhKcFlXd2lMQ0puWlhRaUxDSnpaWFFpTENKMllXd2lMQ0pmZFhCa1lYUmxSR2x6WVdKc1pXUlRkR0YwWlNJc0luUjVjR1VpTENKMGIyOXNkR2x3SWl3aVEwTmZSRVZXSWl3aVlXNXBiV0YwWVdKc1pTSXNJbDluY21GNVRXRjBaWEpwWVd3aUxDSm5jbUY1VFdGMFpYSnBZV3dpTENKZmMzZHBkR05vUjNKaGVVMWhkR1Z5YVdGc0lpd2lkWE5sUjNKaGVVMWhkR1Z5YVdGc0lpd2ljbVZ1WkdWeVEyOXRjQ0lzSW1kaGJXVWlMQ0p5Wlc1a1pYSlVlWEJsSWl3aVVrVk9SRVZTWDFSWlVFVmZRMEZPVmtGVElpd2liV0YwWlhKcFlXd2lMQ0puWlhSQ2RXbHNkR2x1VFdGMFpYSnBZV3dpTENKblpYUkpibk4wWVc1MGFXRjBaV1JOWVhSbGNtbGhiQ0lzSW5ObGRFMWhkR1Z5YVdGc0lpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWpzN1FVRkRRU3hKUVVGTlFTeFhRVUZYUXl4UlFVRlJMQ3RDUVVGU0xFTkJRV3BDT3p0QlFVVkJPenM3TzBGQlNVRXNTVUZCU1VNc2EwSkJRV3RDUXl4SFFVRkhReXhMUVVGSUxFTkJRVk03UVVGRE0wSkRMR2RDUVVGWk8wRkJRMUpETEhsQ1FVRnBRaXhKUVVSVU96dEJRVWRTT3pzN096czdPMEZCVDBGRExIZENRVUZuUWp0QlFVTmFReXhsUVVSWkxHbENRVU5NTzBGQlEwZ3NkVUpCUVU4c1MwRkJTMFlzWlVGQldqdEJRVU5JTEdGQlNGYzdRVUZKV2tjc1pVRktXU3hsUVVsUVF5eEhRVXBQTEVWQlNVWTdRVUZEVGl4eFFrRkJTMG9zWlVGQlRDeEhRVUYxUWtrc1IwRkJka0k3UVVGRFFTeHhRa0ZCUzBNc2IwSkJRVXdzU1VGQk5rSXNTMEZCUzBFc2IwSkJRVXdzUlVGQk4wSTdRVUZEU0N4aFFWQlhPenRCUVZGYVF5eHJRa0ZCVFZvc1VVRlNUVHRCUVZOYVlTeHhRa0ZCVTBNc1ZVRkJWU3gxUTBGVVVEdEJRVlZhUXl4M1FrRkJXVHRCUVZaQkxGTkJWbEk3TzBGQmRVSlNReXgxUWtGQlpTeEpRWFpDVURzN1FVRjVRbEk3T3pzN096czdRVUZQUVVNc2MwSkJRV003UVVGRFZsUXNaVUZFVlN4cFFrRkRTRHRCUVVOSUxIVkNRVUZQTEV0QlFVdFJMR0ZCUVZvN1FVRkRTQ3hoUVVoVE8wRkJTVlpRTEdWQlNsVXNaVUZKVEVNc1IwRktTeXhGUVVsQk8wRkJRMDRzY1VKQlFVdE5MR0ZCUVV3c1IwRkJjVUpPTEVkQlFYSkNPMEZCUTBFc2NVSkJRVXRETEc5Q1FVRk1MRWxCUVRaQ0xFdEJRVXRCTEc5Q1FVRk1MRVZCUVRkQ08wRkJRMGdzWVVGUVV6czdRVUZSVmtNc2EwSkJRVTFhTEZGQlVrazdRVUZUVm1Fc2NVSkJRVk5ETEZWQlFWVXNjVU5CVkZRN1FVRlZWa01zZDBKQlFWazdRVUZXUmp0QlFXaERUaXhMUVVSbE96dEJRU3RETTBKSExIVkNRUzlETWtJc0swSkJLME5PUXl4bFFTOURUU3hGUVN0RFYwTXNWVUV2UTFnc1JVRXJRM1ZDTzBGQlF6bERMRmxCUVVscVFpeEhRVUZIYTBJc1NVRkJTQ3hEUVVGUlF5eFZRVUZTTEV0QlFYVkNia0lzUjBGQlIydENMRWxCUVVnc1EwRkJVVVVzYTBKQlFXNURMRVZCUVhWRU8wRkJRMjVFTzBGQlEwZzdPMEZCUlVRc1dVRkJTVU1zYVVKQlFVbzdRVUZEUVN4WlFVRkpUQ3hsUVVGS0xFVkJRWEZDTzBGQlEycENTeXgxUWtGQlZ5eExRVUZMVWl4aFFVRm9RanRCUVVOQkxHZENRVUZKTEVOQlFVTlJMRkZCUVV3c1JVRkJaVHRCUVVOWVFTd3lRa0ZCVjNoQ0xGTkJRVk41UWl4clFrRkJWQ3hEUVVFMFFpeG5Ra0ZCTlVJc1EwRkJXRHRCUVVOSU8wRkJRMFJFTEhWQ1FVRlhMRXRCUVV0U0xHRkJRVXdzUjBGQmNVSm9RaXhUUVVGVE1FSXNkVUpCUVZRc1EwRkJhVU5HTEZGQlFXcERMRVZCUVRKRFNpeFZRVUV6UXl4RFFVRm9RenRCUVVOSUxGTkJUa1FzVFVGUFN6dEJRVU5FU1N4MVFrRkJWeXhMUVVGTGJFSXNaVUZCYUVJN1FVRkRRU3huUWtGQlNTeERRVUZEYTBJc1VVRkJUQ3hGUVVGbE8wRkJRMWhCTERKQ1FVRlhlRUlzVTBGQlUzbENMR3RDUVVGVUxFTkJRVFJDTEZkQlFUVkNMRVZCUVhsRFRDeFZRVUY2UXl4RFFVRllPMEZCUTBnN1FVRkRSRWtzZFVKQlFWY3NTMEZCUzJ4Q0xHVkJRVXdzUjBGQmRVSk9MRk5CUVZNd1FpeDFRa0ZCVkN4RFFVRnBRMFlzVVVGQmFrTXNSVUZCTWtOS0xGVkJRVE5ETEVOQlFXeERPMEZCUTBnN08wRkJSVVJCTEcxQ1FVRlhUeXhYUVVGWUxFTkJRWFZDTEVOQlFYWkNMRVZCUVRCQ1NDeFJRVUV4UWp0QlFVTklPMEZCY2tVd1FpeERRVUZVTEVOQlFYUkNPenRCUVhkRlFVa3NUMEZCVDBNc1QwRkJVQ3hIUVVGcFFqTkNMR1ZCUVdwQ0lpd2labWxzWlNJNkltZHlZWGt0YzNCeWFYUmxMWE4wWVhSbExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpWEc1amIyNXpkQ0JOWVhSbGNtbGhiQ0E5SUhKbGNYVnBjbVVvSnk0dUwyRnpjMlYwY3k5dFlYUmxjbWxoYkM5RFEwMWhkR1Z5YVdGc0p5azdYRzVjYmk4cUtseHVJQ29nU0dWc2NFTnNZWE56SUdadmNpQnpkMmwwWTJocGJtY2djbVZ1WkdWeUlHTnZiWEJ2Ym1WdWRDZHpJRzFoZEdWeWFXRnNJR0psZEhkbFpXNGdibTl5YldGc0lITndjbWwwWlNCdFlYUmxjbWxoYkNCaGJtUWdaM0poZVNCemNISnBkR1VnYldGMFpYSnBZV3d1WEc0Z0tpOWNibHh1YkdWMElFZHlZWGxUY0hKcGRHVlRkR0YwWlNBOUlHTmpMa05zWVhOektIdGNiaUFnSUNCd2NtOXdaWEowYVdWek9pQjdYRzRnSUNBZ0lDQWdJRjl1YjNKdFlXeE5ZWFJsY21saGJEb2diblZzYkN4Y2JseHVJQ0FnSUNBZ0lDQXZLaXBjYmlBZ0lDQWdJQ0FnSUNvZ0lTTmxiaUJVYUdVZ2JtOXliV0ZzSUcxaGRHVnlhV0ZzTGx4dUlDQWdJQ0FnSUNBZ0tpQWhJM3BvSU9hdG8rVzR1T2VLdHVhQWdlZWFoT2Fka09pMHFPT0FnbHh1SUNBZ0lDQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2JtOXliV0ZzVFdGMFpYSnBZV3hjYmlBZ0lDQWdJQ0FnSUNvZ1FIUjVjR1VnZTAxaGRHVnlhV0ZzZlZ4dUlDQWdJQ0FnSUNBZ0tpQkFaR1ZtWVhWc2RDQnVkV3hzWEc0Z0lDQWdJQ0FnSUNBcUwxeHVJQ0FnSUNBZ0lDQnViM0p0WVd4TllYUmxjbWxoYkRvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWjJWMElDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJtOXliV0ZzVFdGMFpYSnBZV3c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVjBJQ2gyWVd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5dWIzSnRZV3hOWVhSbGNtbGhiQ0E5SUhaaGJEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5MWNHUmhkR1ZFYVhOaFlteGxaRk4wWVhSbElDWW1JSFJvYVhNdVgzVndaR0YwWlVScGMyRmliR1ZrVTNSaGRHVW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUJOWVhSbGNtbGhiQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnZiMngwYVhBNklFTkRYMFJGVmlBbUppQW5hVEU0YmpwRFQwMVFUMDVGVGxRdVluVjBkRzl1TG01dmNtMWhiRjl0WVhSbGNtbGhiQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmhibWx0WVhSaFlteGxPaUJtWVd4elpWeHVJQ0FnSUNBZ0lDQjlMRnh1WEc0Z0lDQWdJQ0FnSUY5bmNtRjVUV0YwWlhKcFlXdzZJRzUxYkd3c1hHNWNiaUFnSUNBZ0lDQWdMeW9xWEc0Z0lDQWdJQ0FnSUNBcUlDRWpaVzRnVkdobElHZHlZWGtnYldGMFpYSnBZV3d1WEc0Z0lDQWdJQ0FnSUNBcUlDRWplbWdnNTcydTU0R3c1NHEyNW9DQjU1cUU1cDJRNkxTbzQ0Q0NYRzRnSUNBZ0lDQWdJQ0FxSUVCd2NtOXdaWEowZVNCbmNtRjVUV0YwWlhKcFlXeGNiaUFnSUNBZ0lDQWdJQ29nUUhSNWNHVWdlMDFoZEdWeWFXRnNmVnh1SUNBZ0lDQWdJQ0FnS2lCQVpHVm1ZWFZzZENCdWRXeHNYRzRnSUNBZ0lDQWdJQ0FxTDF4dUlDQWdJQ0FnSUNCbmNtRjVUV0YwWlhKcFlXdzZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHZGxkQ0FvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMmR5WVhsTllYUmxjbWxoYkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaWFFnS0haaGJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyZHlZWGxOWVhSbGNtbGhiQ0E5SUhaaGJEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5MWNHUmhkR1ZFYVhOaFlteGxaRk4wWVhSbElDWW1JSFJvYVhNdVgzVndaR0YwWlVScGMyRmliR1ZrVTNSaGRHVW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUJOWVhSbGNtbGhiQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnZiMngwYVhBNklFTkRYMFJGVmlBbUppQW5hVEU0YmpwRFQwMVFUMDVGVGxRdVluVjBkRzl1TG1keVlYbGZiV0YwWlhKcFlXd25MRnh1SUNBZ0lDQWdJQ0FnSUNBZ1lXNXBiV0YwWVdKc1pUb2dabUZzYzJWY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNGdJRnh1SUNBZ0lGOXpkMmwwWTJoSGNtRjVUV0YwWlhKcFlXd2dLSFZ6WlVkeVlYbE5ZWFJsY21saGJDd2djbVZ1WkdWeVEyOXRjQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9ZMk11WjJGdFpTNXlaVzVrWlhKVWVYQmxJRDA5UFNCall5NW5ZVzFsTGxKRlRrUkZVbDlVV1ZCRlgwTkJUbFpCVXlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdYRzRnSUNBZ0lDQWdJR3hsZENCdFlYUmxjbWxoYkR0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFZ6WlVkeVlYbE5ZWFJsY21saGJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JXRjBaWEpwWVd3Z1BTQjBhR2x6TGw5bmNtRjVUV0YwWlhKcFlXdzdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JVzFoZEdWeWFXRnNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldGMFpYSnBZV3dnUFNCTllYUmxjbWxoYkM1blpYUkNkV2xzZEdsdVRXRjBaWEpwWVd3b0p6SmtMV2R5WVhrdGMzQnlhWFJsSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRZWFJsY21saGJDQTlJSFJvYVhNdVgyZHlZWGxOWVhSbGNtbGhiQ0E5SUUxaGRHVnlhV0ZzTG1kbGRFbHVjM1JoYm5ScFlYUmxaRTFoZEdWeWFXRnNLRzFoZEdWeWFXRnNMQ0J5Wlc1a1pYSkRiMjF3S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzFoZEdWeWFXRnNJRDBnZEdocGN5NWZibTl5YldGc1RXRjBaWEpwWVd3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXMWhkR1Z5YVdGc0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV0YwWlhKcFlXd2dQU0JOWVhSbGNtbGhiQzVuWlhSQ2RXbHNkR2x1VFdGMFpYSnBZV3dvSnpKa0xYTndjbWwwWlNjc0lISmxibVJsY2tOdmJYQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYldGMFpYSnBZV3dnUFNCMGFHbHpMbDl1YjNKdFlXeE5ZWFJsY21saGJDQTlJRTFoZEdWeWFXRnNMbWRsZEVsdWMzUmhiblJwWVhSbFpFMWhkR1Z5YVdGc0tHMWhkR1Z5YVdGc0xDQnlaVzVrWlhKRGIyMXdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJRnh1SUNBZ0lDQWdJQ0J5Wlc1a1pYSkRiMjF3TG5ObGRFMWhkR1Z5YVdGc0tEQXNJRzFoZEdWeWFXRnNLVHRjYmlBZ0lDQjlYRzU5S1Z4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlFZHlZWGxUY0hKcGRHVlRkR0YwWlR0Y2JpSmRmUT09Il19