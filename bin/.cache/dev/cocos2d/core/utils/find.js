(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/utils/find.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        cc.find = module.exports = function (path, referenceNode) {
            if (path == null) {
                cc.errorID(5600);
                return null;
            }
            if (!referenceNode) {
                var scene = cc.director.getScene();
                if (!scene) {
                    if (CC_DEV) {
                        cc.warnID(5601);
                    }
                    return null;
                } else if (CC_DEV && !scene.isValid) {
                    cc.warnID(5602);
                    return null;
                }
                referenceNode = scene;
            } else if (CC_DEV && !referenceNode.isValid) {
                cc.warnID(5603);
                return null;
            }
            var match = referenceNode;
            var startIndex = path[0] !== '/' ? 0 : 1;
            var nameList = path.split('/');
            for (var n = startIndex; n < nameList.length; n++) {
                var name = nameList[n];
                var children = match._children;
                match = null;
                for (var t = 0, len = children.length; t < len; ++t) {
                    var subChild = children[t];
                    if (subChild.name === name) {
                        match = subChild;
                        break;
                    }
                }
                if (!match) {
                    return null;
                }
            }
            return match;
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,