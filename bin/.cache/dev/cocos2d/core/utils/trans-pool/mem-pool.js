(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/utils/trans-pool/mem-pool.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var MemPool = function MemPool(unitClass) {
            this._unitClass = unitClass;
            this._pool = [];
            this._findOrder = [];
            if (CC_JSB && CC_NATIVERENDERER) {
                this._initNative();
            }
        };
        var proto = MemPool.prototype;
        proto._initNative = function () {
            this._nativeMemPool = new renderer.MemPool();
        };
        proto._buildUnit = function (unitID) {
            var unit = new this._unitClass(unitID, this);
            if (CC_JSB && CC_NATIVERENDERER) {
                this._nativeMemPool.updateCommonData(unitID, unit._data, unit._signData);
            }
            return unit;
        };
        proto._destroyUnit = function (unitID) {
            this._pool[unitID] = null;
            for (var idx = 0, n = this._findOrder.length; idx < n; idx++) {
                var unit = this._findOrder[idx];
                if (unit && unit.unitID == unitID) {
                    this._findOrder.splice(idx, 1);
                    break;
                }
            }
            if (CC_JSB && CC_NATIVERENDERER) {
                this._nativeMemPool.removeCommonData(unitID);
            }
        };
        proto._findUnitID = function () {
            var unitID = 0;
            var pool = this._pool;
            while (pool[unitID]) {
                unitID++;
            }
            return unitID;
        };
        proto.pop = function () {
            var findUnit = null;
            var idx = 0;
            var findOrder = this._findOrder;
            var pool = this._pool;
            for (var n = findOrder.length; idx < n; idx++) {
                var unit = findOrder[idx];
                if (unit && unit.hasSpace()) {
                    findUnit = unit;
                    break;
                }
            }
            if (!findUnit) {
                var unitID = this._findUnitID();
                findUnit = this._buildUnit(unitID);
                pool[unitID] = findUnit;
                findOrder.push(findUnit);
                idx = findOrder.length - 1;
            }
            var firstUnit = findOrder[0];
            if (firstUnit !== findUnit) {
                findOrder[0] = findUnit;
                findOrder[idx] = firstUnit;
            }
            return findUnit.pop();
        };
        proto.push = function (info) {
            var unit = this._pool[info.unitID];
            unit.push(info.index);
            if (this._findOrder.length > 1 && unit.isAllFree()) {
                this._destroyUnit(info.unitID);
            }
            return unit;
        };
        module.exports = MemPool;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,