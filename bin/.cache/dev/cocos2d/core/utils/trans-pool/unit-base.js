(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/utils/trans-pool/unit-base.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var POINTER_INVALID_FLAG = 65535;
        var SPACE_FREE_FLAG = 0;
        var SPACE_USE_FLAG = 1;
        var POS_NEXT_FREE = 0;
        var POS_FREE_FLAG = 1;
        var UnitBase = function UnitBase(unitID, memPool, contentNum) {
            contentNum = contentNum || 128;
            this.unitID = unitID;
            this._memPool = memPool;
            this._data = new Uint16Array(2);
            this._data[0] = 0;
            this._data[1] = 0;
            this._contentNum = contentNum;
            this._signData = new Uint16Array(this._contentNum * 2);
            this._spacesData = [];
            for (var i = 0; i < contentNum; i++) {
                var signIndex = i * 2;
                this._signData[signIndex + POS_NEXT_FREE] = i + 1;
                this._signData[signIndex + POS_FREE_FLAG] = SPACE_FREE_FLAG;
                this._spacesData[i] = {
                    index: i,
                    unitID: unitID
                };
            }
            this._signData[(contentNum - 1) * 2] = POINTER_INVALID_FLAG;
        };
        var UnitBaseProto = UnitBase.prototype;
        UnitBaseProto.hasSpace = function () {
            return this._data[0] !== POINTER_INVALID_FLAG;
        };
        UnitBaseProto.isAllFree = function () {
            return this._data[1] == 0;
        };
        UnitBaseProto.pop = function () {
            var headFreeIndex = this._data[0];
            if (headFreeIndex === POINTER_INVALID_FLAG)
                return null;
            var index = headFreeIndex;
            var signIndex = index * 2;
            var space = this._spacesData[index];
            this._signData[signIndex + POS_FREE_FLAG] = SPACE_USE_FLAG;
            this._data[0] = this._signData[signIndex + POS_NEXT_FREE];
            this._data[1]++;
            return space;
        };
        UnitBaseProto.push = function (index) {
            var signIndex = index * 2;
            this._signData[signIndex + POS_FREE_FLAG] = SPACE_FREE_FLAG;
            this._signData[signIndex + POS_NEXT_FREE] = this._data[0];
            this._data[0] = index;
            this._data[1]--;
        };
        UnitBaseProto.dump = function () {
            var spaceNum = 0;
            var index = this._data[0];
            var freeStr = '';
            while (index != POINTER_INVALID_FLAG) {
                spaceNum++;
                freeStr += index + '->';
                index = this._signData[index * 2 + POS_NEXT_FREE];
            }
            var usingNum = 0;
            var usingStr = '';
            var contentNum = this._contentNum;
            for (var i = 0; i < contentNum; i++) {
                var freeFlag = this._signData[i * 2 + POS_FREE_FLAG];
                if (freeFlag == SPACE_USE_FLAG) {
                    usingNum++;
                    usingStr += i + '->';
                }
            }
            var totalNum = spaceNum + usingNum;
            console.log('unitID:', this.unitID, 'spaceNum:', spaceNum, 'calc using num:', usingNum, 'store using num:', this._data[1], 'calc total num:', totalNum, 'actually total num:', this._contentNum);
            console.log('free info:', freeStr);
            console.log('using info:', usingStr);
            if (usingNum != this._data[1]) {
                cc.error('using num error', 'calc using num:', usingNum, 'store using num:', this._data[1]);
            }
            if (spaceNum + usingNum != this._contentNum) {
                cc.error('total num error', 'calc total num:', totalNum, 'actually total num:', this._contentNum);
            }
        };
        module.exports = UnitBase;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,