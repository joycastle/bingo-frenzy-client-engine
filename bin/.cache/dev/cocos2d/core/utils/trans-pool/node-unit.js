(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/utils/trans-pool/node-unit.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _utils = require('../../vmath/utils');
        var Uint32_Bytes = 4;
        var Uint8_Bytes = 1;
        var Dirty_Type = Uint32Array;
        var Dirty_Members = 1;
        var Dirty_Stride = Dirty_Members * Uint32_Bytes;
        var TRS_Members = 10;
        var TRS_Stride = TRS_Members * _utils.FLOAT_BYTES;
        var LocalMatrix_Members = 16;
        var LocalMatrix_Stride = LocalMatrix_Members * _utils.FLOAT_BYTES;
        var WorldMatrix_Members = 16;
        var WorldMatrix_Stride = WorldMatrix_Members * _utils.FLOAT_BYTES;
        var Parent_Type = Uint32Array;
        var Parent_Members = 2;
        var Parent_Stride = Parent_Members * Uint32_Bytes;
        var ZOrder_Type = Uint32Array;
        var ZOrder_Members = 1;
        var ZOrder_Stride = ZOrder_Members * Uint32_Bytes;
        var CullingMask_Type = Int32Array;
        var CullingMask_Members = 1;
        var CullingMask_Stride = CullingMask_Members * Uint32_Bytes;
        var Opacity_Type = Uint8Array;
        var Opacity_Members = 1;
        var Opacity_Stride = Opacity_Members * Uint8_Bytes;
        var Is3D_Type = Uint8Array;
        var Is3D_Members = 1;
        var Is3D_Stride = Is3D_Members * Uint8_Bytes;
        var Node_Type = Uint32Array;
        var Node_Members = 2;
        var Skew_Members = 2;
        var Skew_Stride = Skew_Members * _utils.FLOAT_BYTES;
        var UnitBase = require('./unit-base');
        var NodeUnit = function NodeUnit(unitID, memPool) {
            UnitBase.call(this, unitID, memPool);
            var contentNum = this._contentNum;
            this.trsList = new _utils.FLOAT_ARRAY_TYPE(contentNum * TRS_Members);
            this.localMatList = new _utils.FLOAT_ARRAY_TYPE(contentNum * LocalMatrix_Members);
            this.worldMatList = new _utils.FLOAT_ARRAY_TYPE(contentNum * WorldMatrix_Members);
            if (CC_JSB && CC_NATIVERENDERER) {
                this.dirtyList = new Dirty_Type(contentNum * Dirty_Members);
                this.parentList = new Parent_Type(contentNum * Parent_Members);
                this.zOrderList = new ZOrder_Type(contentNum * ZOrder_Members);
                this.cullingMaskList = new CullingMask_Type(contentNum * CullingMask_Members);
                this.opacityList = new Opacity_Type(contentNum * Opacity_Members);
                this.is3DList = new Is3D_Type(contentNum * Is3D_Members);
                this.nodeList = new Node_Type(contentNum * Node_Members);
                this.skewList = new _utils.FLOAT_ARRAY_TYPE(contentNum * Skew_Members);
                this._memPool._nativeMemPool.updateNodeData(unitID, this.dirtyList, this.trsList, this.localMatList, this.worldMatList, this.parentList, this.zOrderList, this.cullingMaskList, this.opacityList, this.is3DList, this.nodeList, this.skewList);
            }
            for (var i = 0; i < contentNum; i++) {
                var space = this._spacesData[i];
                space.trs = new _utils.FLOAT_ARRAY_TYPE(this.trsList.buffer, i * TRS_Stride, TRS_Members);
                space.localMat = new _utils.FLOAT_ARRAY_TYPE(this.localMatList.buffer, i * LocalMatrix_Stride, LocalMatrix_Members);
                space.worldMat = new _utils.FLOAT_ARRAY_TYPE(this.worldMatList.buffer, i * WorldMatrix_Stride, WorldMatrix_Members);
                if (CC_JSB && CC_NATIVERENDERER) {
                    space.dirty = new Dirty_Type(this.dirtyList.buffer, i * Dirty_Stride, Dirty_Members);
                    space.parent = new Parent_Type(this.parentList.buffer, i * Parent_Stride, Parent_Members);
                    space.zOrder = new ZOrder_Type(this.zOrderList.buffer, i * ZOrder_Stride, ZOrder_Members);
                    space.cullingMask = new CullingMask_Type(this.cullingMaskList.buffer, i * CullingMask_Stride, CullingMask_Members);
                    space.opacity = new Opacity_Type(this.opacityList.buffer, i * Opacity_Stride, Opacity_Members);
                    space.is3D = new Is3D_Type(this.is3DList.buffer, i * Is3D_Stride, Is3D_Members);
                    space.skew = new _utils.FLOAT_ARRAY_TYPE(this.skewList.buffer, i * Skew_Stride, Skew_Members);
                }
            }
        };
        (function () {
            var Super = function Super() {
            };
            Super.prototype = UnitBase.prototype;
            NodeUnit.prototype = new Super();
        }());
        module.exports = NodeUnit;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGUtdW5pdC5qcyIsIi9Vc2Vycy9TaGFyZWQvYmluZ29fZnJlbnp5L2VuZ2luZS9jb2NvczJkL2NvcmUvdXRpbHMvdHJhbnMtcG9vbC9ub2RlLXVuaXQuanMiXSwibmFtZXMiOlsiVWludDMyX0J5dGVzIiwiVWludDhfQnl0ZXMiLCJEaXJ0eV9UeXBlIiwiVWludDMyQXJyYXkiLCJEaXJ0eV9NZW1iZXJzIiwiRGlydHlfU3RyaWRlIiwiVFJTX01lbWJlcnMiLCJUUlNfU3RyaWRlIiwiRkxPQVRfQllURVMiLCJMb2NhbE1hdHJpeF9NZW1iZXJzIiwiTG9jYWxNYXRyaXhfU3RyaWRlIiwiV29ybGRNYXRyaXhfTWVtYmVycyIsIldvcmxkTWF0cml4X1N0cmlkZSIsIlBhcmVudF9UeXBlIiwiUGFyZW50X01lbWJlcnMiLCJQYXJlbnRfU3RyaWRlIiwiWk9yZGVyX1R5cGUiLCJaT3JkZXJfTWVtYmVycyIsIlpPcmRlcl9TdHJpZGUiLCJDdWxsaW5nTWFza19UeXBlIiwiSW50MzJBcnJheSIsIkN1bGxpbmdNYXNrX01lbWJlcnMiLCJDdWxsaW5nTWFza19TdHJpZGUiLCJPcGFjaXR5X1R5cGUiLCJVaW50OEFycmF5IiwiT3BhY2l0eV9NZW1iZXJzIiwiT3BhY2l0eV9TdHJpZGUiLCJJczNEX1R5cGUiLCJJczNEX01lbWJlcnMiLCJJczNEX1N0cmlkZSIsIk5vZGVfVHlwZSIsIk5vZGVfTWVtYmVycyIsIlNrZXdfTWVtYmVycyIsIlNrZXdfU3RyaWRlIiwiVW5pdEJhc2UiLCJyZXF1aXJlIiwiTm9kZVVuaXQiLCJ1bml0SUQiLCJtZW1Qb29sIiwiY2FsbCIsImNvbnRlbnROdW0iLCJfY29udGVudE51bSIsInRyc0xpc3QiLCJGTE9BVF9BUlJBWV9UWVBFIiwibG9jYWxNYXRMaXN0Iiwid29ybGRNYXRMaXN0IiwiQ0NfSlNCIiwiQ0NfTkFUSVZFUkVOREVSRVIiLCJkaXJ0eUxpc3QiLCJwYXJlbnRMaXN0Iiwiek9yZGVyTGlzdCIsImN1bGxpbmdNYXNrTGlzdCIsIm9wYWNpdHlMaXN0IiwiaXMzRExpc3QiLCJub2RlTGlzdCIsInNrZXdMaXN0IiwiX21lbVBvb2wiLCJfbmF0aXZlTWVtUG9vbCIsInVwZGF0ZU5vZGVEYXRhIiwiaSIsInNwYWNlIiwiX3NwYWNlc0RhdGEiLCJ0cnMiLCJidWZmZXIiLCJsb2NhbE1hdCIsIndvcmxkTWF0IiwiZGlydHkiLCJwYXJlbnQiLCJ6T3JkZXIiLCJjdWxsaW5nTWFzayIsIm9wYWNpdHkiLCJpczNEIiwic2tldyIsIlN1cGVyIiwicHJvdG90eXBlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjtJQXlCQSxJQUFBLE9BQUEsR0FBQSxPQUFBLE9BQUEsS0FBQSxXQUFBLElBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQTs7SUFFQSxJQTNCQSxVQUFBLEdBQUEsdURBMkJBOzs7Ozs7Ozs7OztRQUZBLElBQUEsTUFBQSxHQUFBLE9BQUEsQ0FBQSxtQkFBQSxDQUFBO1FBRUEsSUFBTUEsWUFBQUEsR0FBZSxDQUFyQjtRQUNBLElBQU1DLFdBQUFBLEdBQWMsQ0FBcEI7UUFHQSxJQUFNQyxVQUFBQSxHQUFhQyxXQUFuQjtRQUNBLElBQU1DLGFBQUFBLEdBQWdCLENBQXRCO1FBQ0EsSUFBTUMsWUFBQUEsR0FBZUQsYUFBQUEsR0FBZ0JKLFlBQXJDO1FBR0EsSUFBTU0sV0FBQUEsR0FBYyxFQUFwQjtRQUNBLElBQU1DLFVBQUFBLEdBQWFELFdBQUFBLEdBQWNFLE1BQUFBLENBQUFBLFdBQWpDO1FBR0EsSUFBTUMsbUJBQUFBLEdBQXNCLEVBQTVCO1FBQ0EsSUFBTUMsa0JBQUFBLEdBQXFCRCxtQkFBQUEsR0FBc0JELE1BQUFBLENBQUFBLFdBQWpEO1FBR0EsSUFBTUcsbUJBQUFBLEdBQXNCLEVBQTVCO1FBQ0EsSUFBTUMsa0JBQUFBLEdBQXFCRCxtQkFBQUEsR0FBc0JILE1BQUFBLENBQUFBLFdBQWpEO1FBSUEsSUFBTUssV0FBQUEsR0FBY1YsV0FBcEI7UUFDQSxJQUFNVyxjQUFBQSxHQUFpQixDQUF2QjtRQUNBLElBQU1DLGFB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QVA2QjtBQUFBLGlCQVBDO0FBQUEsYUFsQ0E7QUFBQSxTQUExQztRQXFEQSxDQUFDLFlBQVU7QUFBQSxZQUNQLElBQUlhLEtBQUFBLEdBQVEsU0FBUkEsS0FBUSxHQUFVO0FBQUEsYUFBdEIsQ0FETztBQUFBLFlBRVBBLEtBQUFBLENBQU1DLFNBQU5ELEdBQWtCdkMsUUFBQUEsQ0FBU3dDLFNBQTNCRCxDQUZPO0FBQUEsWUFHUHJDLFFBQUFBLENBQVNzQyxTQUFUdEMsR0FBcUIsSUFBSXFDLEtBQUosRUFBckJyQyxDQUhPO0FBQUEsU0FBWDtRQU1BdUMsTUFBQUEsQ0FBT0MsT0FBUEQsR0FBaUJ2QyxRQUFqQnVDIiwiZmlsZSI6Im5vZGUtdW5pdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gQ29weXJpZ2h0IChjKSAyMDE5IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxuXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xuXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxuIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxuIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXG4gc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXG5cbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQgeyBGTE9BVF9BUlJBWV9UWVBFLCBGTE9BVF9CWVRFUyB9IGZyb20gJy4uLy4uL3ZtYXRoL3V0aWxzJztcblxuY29uc3QgVWludDMyX0J5dGVzID0gNDtcbmNvbnN0IFVpbnQ4X0J5dGVzID0gMTtcblxuLy8gU3BhY2UgOiBbRGlydHldICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTaXplOjQgVWludDMyXVxuY29uc3QgRGlydHlfVHlwZSA9IFVpbnQzMkFycmF5O1xuY29uc3QgRGlydHlfTWVtYmVycyA9IDE7XG5jb25zdCBEaXJ0eV9TdHJpZGUgPSBEaXJ0eV9NZW1iZXJzICogVWludDMyX0J5dGVzO1xuXG4vLyBTcGFjZSA6IFtUUlNdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1NpemU6NCAqIDEwIEZsb2F0MzJ8RmxvYXQ2NF1cbmNvbnN0IFRSU19NZW1iZXJzID0gMTA7XG5jb25zdCBUUlNfU3RyaWRlID0gVFJTX01lbWJlcnMgKiBGTE9BVF9CWVRFUztcblxuLy8gU3BhY2UgOiBbTG9jYWxNYXRyaXhdICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTaXplOjQgKiAxNiBGbG9hdDMyfEZsb2F0NjRdXG5jb25zdCBMb2NhbE1hdHJpeF9NZW1iZXJzID0gMTY7XG5jb25zdCBMb2NhbE1hdHJpeF9TdHJpZGUgPSBMb2NhbE1hdHJpeF9NZW1iZXJzICogRkxPQVRfQllURVM7XG5cbi8vIFNwYWNlIDogW1dvcmxkTWF0cml4XSAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU2l6ZTo0ICogMTYgRmxvYXQzMnxGbG9hdDY0XVxuY29uc3QgV29ybGRNYXRyaXhfTWVtYmVycyA9IDE2O1xuY29uc3QgV29ybGRNYXRyaXhfU3RyaWRlID0gV29ybGRNYXRyaXhfTWVtYmVycyAqIEZMT0FUX0JZVEVTO1xuXG4vLyBTcGFjZSA6IFtQYXJlbnQgVW5pdF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgW1NpemU6NCBVaW50MzJdXG4vLyBTcGFjZSA6IFtQYXJlbnQgSW5kZXhdICAgICAgICAgICAgICAgICAgICAgICAgICAgW1NpemU6NCBVaW50MzJdXG5jb25zdCBQYXJlbnRfVHlwZSA9IFVpbnQzMkFycmF5O1xuY29uc3QgUGFyZW50X01lbWJlcnMgPSAyO1xuY29uc3QgUGFyZW50X1N0cmlkZSA9IFBhcmVudF9NZW1iZXJzICogVWludDMyX0J5dGVzO1xuXG4vLyBTcGFjZSA6IFtaT3JkZXJdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1NpemU6NCBVaW50MzJdXG5jb25zdCBaT3JkZXJfVHlwZSA9IFVpbnQzMkFycmF5O1xuY29uc3QgWk9yZGVyX01lbWJlcnMgPSAxO1xuY29uc3QgWk9yZGVyX1N0cmlkZSA9IFpPcmRlcl9NZW1iZXJzICogVWludDMyX0J5dGVzO1xuXG4vLyBTcGFjZSA6IFtDdWxsaW5nTWFza10gICAgICAgICAgICAgICAgICAgICAgICAgICAgW1NpemU6NCBJbnQzMl1cbmNvbnN0IEN1bGxpbmdNYXNrX1R5cGUgPSBJbnQzMkFycmF5O1xuY29uc3QgQ3VsbGluZ01hc2tfTWVtYmVycyA9IDE7XG5jb25zdCBDdWxsaW5nTWFza19TdHJpZGUgPSBDdWxsaW5nTWFza19NZW1iZXJzICogVWludDMyX0J5dGVzO1xuXG4vLyBTcGFjZSA6IFtPcGFjaXR5XSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1NpemU6MSBVaW50OF1cbmNvbnN0IE9wYWNpdHlfVHlwZSA9IFVpbnQ4QXJyYXk7XG5jb25zdCBPcGFjaXR5X01lbWJlcnMgPSAxO1xuY29uc3QgT3BhY2l0eV9TdHJpZGUgPSBPcGFjaXR5X01lbWJlcnMgKiBVaW50OF9CeXRlcztcblxuLy8gU3BhY2UgOiBbSXMzRF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTaXplOjEgVWludDhdXG5jb25zdCBJczNEX1R5cGUgPSBVaW50OEFycmF5O1xuY29uc3QgSXMzRF9NZW1iZXJzID0gMTtcbmNvbnN0IElzM0RfU3RyaWRlID0gSXMzRF9NZW1iZXJzICogVWludDhfQnl0ZXM7XG5cbi8vIFNwYWNlIDogW05vZGVQdHJdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU2l6ZTo0ICogMiBVaW50MzJdXG5jb25zdCBOb2RlX1R5cGUgPSBVaW50MzJBcnJheTtcbmNvbnN0IE5vZGVfTWVtYmVycyA9IDI7XG5cbi8vIFNwYWNlIDogW1NrZXddICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU2l6ZTo0ICogMiBGbG9hdDMyXVxuY29uc3QgU2tld19NZW1iZXJzID0gMjtcbmNvbnN0IFNrZXdfU3RyaWRlID0gU2tld19NZW1iZXJzICogRkxPQVRfQllURVM7XG5cbmxldCBVbml0QmFzZSA9IHJlcXVpcmUoJy4vdW5pdC1iYXNlJyk7XG5sZXQgTm9kZVVuaXQgPSBmdW5jdGlvbiAodW5pdElELCBtZW1Qb29sKSB7XG4gICAgVW5pdEJhc2UuY2FsbCh0aGlzLCB1bml0SUQsIG1lbVBvb2wpO1xuXG4gICAgbGV0IGNvbnRlbnROdW0gPSB0aGlzLl9jb250ZW50TnVtO1xuICAgIHRoaXMudHJzTGlzdCA9IG5ldyBGTE9BVF9BUlJBWV9UWVBFKGNvbnRlbnROdW0gKiBUUlNfTWVtYmVycyk7XG4gICAgdGhpcy5sb2NhbE1hdExpc3QgPSBuZXcgRkxPQVRfQVJSQVlfVFlQRShjb250ZW50TnVtICogTG9jYWxNYXRyaXhfTWVtYmVycyk7XG4gICAgdGhpcy53b3JsZE1hdExpc3QgPSBuZXcgRkxPQVRfQVJSQVlfVFlQRShjb250ZW50TnVtICogV29ybGRNYXRyaXhfTWVtYmVycyk7XG5cbiAgICBpZiAoQ0NfSlNCICYmIENDX05BVElWRVJFTkRFUkVSKSB7XG4gICAgICAgIHRoaXMuZGlydHlMaXN0ID0gbmV3IERpcnR5X1R5cGUoY29udGVudE51bSAqIERpcnR5X01lbWJlcnMpO1xuICAgICAgICB0aGlzLnBhcmVudExpc3QgPSBuZXcgUGFyZW50X1R5cGUoY29udGVudE51bSAqIFBhcmVudF9NZW1iZXJzKTtcbiAgICAgICAgdGhpcy56T3JkZXJMaXN0ID0gbmV3IFpPcmRlcl9UeXBlKGNvbnRlbnROdW0gKiBaT3JkZXJfTWVtYmVycyk7XG4gICAgICAgIHRoaXMuY3VsbGluZ01hc2tMaXN0ID0gbmV3IEN1bGxpbmdNYXNrX1R5cGUoY29udGVudE51bSAqIEN1bGxpbmdNYXNrX01lbWJlcnMpO1xuICAgICAgICB0aGlzLm9wYWNpdHlMaXN0ID0gbmV3IE9wYWNpdHlfVHlwZShjb250ZW50TnVtICogT3BhY2l0eV9NZW1iZXJzKTtcbiAgICAgICAgdGhpcy5pczNETGlzdCA9IG5ldyBJczNEX1R5cGUoY29udGVudE51bSAqIElzM0RfTWVtYmVycyk7XG4gICAgICAgIHRoaXMubm9kZUxpc3QgPSBuZXcgTm9kZV9UeXBlKGNvbnRlbnROdW0gKiBOb2RlX01lbWJlcnMpO1xuICAgICAgICB0aGlzLnNrZXdMaXN0ID0gbmV3IEZMT0FUX0FSUkFZX1RZUEUoY29udGVudE51bSAqIFNrZXdfTWVtYmVycyk7XG5cbiAgICAgICAgdGhpcy5fbWVtUG9vbC5fbmF0aXZlTWVtUG9vbC51cGRhdGVOb2RlRGF0YShcbiAgICAgICAgICAgIHVuaXRJRCxcbiAgICAgICAgICAgIHRoaXMuZGlydHlMaXN0LFxuICAgICAgICAgICAgdGhpcy50cnNMaXN0LFxuICAgICAgICAgICAgdGhpcy5sb2NhbE1hdExpc3QsXG4gICAgICAgICAgICB0aGlzLndvcmxkTWF0TGlzdCxcbiAgICAgICAgICAgIHRoaXMucGFyZW50TGlzdCxcbiAgICAgICAgICAgIHRoaXMuek9yZGVyTGlzdCxcbiAgICAgICAgICAgIHRoaXMuY3VsbGluZ01hc2tMaXN0LFxuICAgICAgICAgICAgdGhpcy5vcGFjaXR5TGlzdCxcbiAgICAgICAgICAgIHRoaXMuaXMzRExpc3QsXG4gICAgICAgICAgICB0aGlzLm5vZGVMaXN0LFxuICAgICAgICAgICAgdGhpcy5za2V3TGlzdFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udGVudE51bTsgaSArKykge1xuICAgICAgICBsZXQgc3BhY2UgPSB0aGlzLl9zcGFjZXNEYXRhW2ldO1xuXG4gICAgICAgIHNwYWNlLnRycyA9IG5ldyBGTE9BVF9BUlJBWV9UWVBFKHRoaXMudHJzTGlzdC5idWZmZXIsIGkgKiBUUlNfU3RyaWRlLCBUUlNfTWVtYmVycyk7XG4gICAgICAgIHNwYWNlLmxvY2FsTWF0ID0gbmV3IEZMT0FUX0FSUkFZX1RZUEUodGhpcy5sb2NhbE1hdExpc3QuYnVmZmVyLCBpICogTG9jYWxNYXRyaXhfU3RyaWRlLCBMb2NhbE1hdHJpeF9NZW1iZXJzKTtcbiAgICAgICAgc3BhY2Uud29ybGRNYXQgPSBuZXcgRkxPQVRfQVJSQVlfVFlQRSh0aGlzLndvcmxkTWF0TGlzdC5idWZmZXIsIGkgKiBXb3JsZE1hdHJpeF9TdHJpZGUsIFdvcmxkTWF0cml4X01lbWJlcnMpO1xuXG4gICAgICAgIGlmIChDQ19KU0IgJiYgQ0NfTkFUSVZFUkVOREVSRVIpIHtcbiAgICAgICAgICAgIHNwYWNlLmRpcnR5ID0gbmV3IERpcnR5X1R5cGUodGhpcy5kaXJ0eUxpc3QuYnVmZmVyLCBpICogRGlydHlfU3RyaWRlLCBEaXJ0eV9NZW1iZXJzKTtcbiAgICAgICAgICAgIHNwYWNlLnBhcmVudCA9IG5ldyBQYXJlbnRfVHlwZSh0aGlzLnBhcmVudExpc3QuYnVmZmVyLCBpICogUGFyZW50X1N0cmlkZSwgUGFyZW50X01lbWJlcnMpO1xuICAgICAgICAgICAgc3BhY2Uuek9yZGVyID0gbmV3IFpPcmRlcl9UeXBlKHRoaXMuek9yZGVyTGlzdC5idWZmZXIsIGkgKiBaT3JkZXJfU3RyaWRlLCBaT3JkZXJfTWVtYmVycyk7XG4gICAgICAgICAgICBzcGFjZS5jdWxsaW5nTWFzayA9IG5ldyBDdWxsaW5nTWFza19UeXBlKHRoaXMuY3VsbGluZ01hc2tMaXN0LmJ1ZmZlciwgaSAqIEN1bGxpbmdNYXNrX1N0cmlkZSwgQ3VsbGluZ01hc2tfTWVtYmVycyk7XG4gICAgICAgICAgICBzcGFjZS5vcGFjaXR5ID0gbmV3IE9wYWNpdHlfVHlwZSh0aGlzLm9wYWNpdHlMaXN0LmJ1ZmZlciwgaSAqIE9wYWNpdHlfU3RyaWRlLCBPcGFjaXR5X01lbWJlcnMpO1xuICAgICAgICAgICAgc3BhY2UuaXMzRCA9IG5ldyBJczNEX1R5cGUodGhpcy5pczNETGlzdC5idWZmZXIsIGkgKiBJczNEX1N0cmlkZSwgSXMzRF9NZW1iZXJzKTtcbiAgICAgICAgICAgIHNwYWNlLnNrZXcgPSBuZXcgRkxPQVRfQVJSQVlfVFlQRSh0aGlzLnNrZXdMaXN0LmJ1ZmZlciwgaSAqIFNrZXdfU3RyaWRlLCBTa2V3X01lbWJlcnMpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuKGZ1bmN0aW9uKCl7XG4gICAgbGV0IFN1cGVyID0gZnVuY3Rpb24oKXt9O1xuICAgIFN1cGVyLnByb3RvdHlwZSA9IFVuaXRCYXNlLnByb3RvdHlwZTtcbiAgICBOb2RlVW5pdC5wcm90b3R5cGUgPSBuZXcgU3VwZXIoKTtcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gTm9kZVVuaXQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vLi4vdm1hdGgvdXRpbHMnKTtcblxudmFyIFVpbnQzMl9CeXRlcyA9IDQ7IC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgICAgICAgICAgICAgICAgICAgIENvcHlyaWdodCAoYykgMjAxOSBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cbiAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgaHR0cHM6Ly93d3cuY29jb3MuY29tL1xuICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gICAgICAgICAgICAgICAgICAgICAgIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxuICAgICAgICAgICAgICAgICAgICAgICB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gICAgICAgICAgICAgICAgICAgICAgIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gICAgICAgICAgICAgICAgICAgICAgIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiAgICAgICAgICAgICAgICAgICAgICAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuICAgICAgICAgICAgICAgICAgICAgICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cbiAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiAgICAgICAgICAgICAgICAgICAgICAgWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cbiAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICAgICAgICAgICAgICAgICAgICAgICBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAgICAgICAgICAgICAgICAgICAgICAgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gICAgICAgICAgICAgICAgICAgICAgIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAgICAgICAgICAgICAgICAgICAgICAgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAgICAgICAgICAgICAgICAgICAgICAgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICAgICAgICAgICAgICAgICAgICAgICBUSEUgU09GVFdBUkUuXG4gICAgICAgICAgICAgICAgICAgICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbnZhciBVaW50OF9CeXRlcyA9IDE7XG5cbi8vIFNwYWNlIDogW0RpcnR5XSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU2l6ZTo0IFVpbnQzMl1cbnZhciBEaXJ0eV9UeXBlID0gVWludDMyQXJyYXk7XG52YXIgRGlydHlfTWVtYmVycyA9IDE7XG52YXIgRGlydHlfU3RyaWRlID0gRGlydHlfTWVtYmVycyAqIFVpbnQzMl9CeXRlcztcblxuLy8gU3BhY2UgOiBbVFJTXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTaXplOjQgKiAxMCBGbG9hdDMyfEZsb2F0NjRdXG52YXIgVFJTX01lbWJlcnMgPSAxMDtcbnZhciBUUlNfU3RyaWRlID0gVFJTX01lbWJlcnMgKiBfdXRpbHMuRkxPQVRfQllURVM7XG5cbi8vIFNwYWNlIDogW0xvY2FsTWF0cml4XSAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU2l6ZTo0ICogMTYgRmxvYXQzMnxGbG9hdDY0XVxudmFyIExvY2FsTWF0cml4X01lbWJlcnMgPSAxNjtcbnZhciBMb2NhbE1hdHJpeF9TdHJpZGUgPSBMb2NhbE1hdHJpeF9NZW1iZXJzICogX3V0aWxzLkZMT0FUX0JZVEVTO1xuXG4vLyBTcGFjZSA6IFtXb3JsZE1hdHJpeF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgW1NpemU6NCAqIDE2IEZsb2F0MzJ8RmxvYXQ2NF1cbnZhciBXb3JsZE1hdHJpeF9NZW1iZXJzID0gMTY7XG52YXIgV29ybGRNYXRyaXhfU3RyaWRlID0gV29ybGRNYXRyaXhfTWVtYmVycyAqIF91dGlscy5GTE9BVF9CWVRFUztcblxuLy8gU3BhY2UgOiBbUGFyZW50IFVuaXRdICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTaXplOjQgVWludDMyXVxuLy8gU3BhY2UgOiBbUGFyZW50IEluZGV4XSAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTaXplOjQgVWludDMyXVxudmFyIFBhcmVudF9UeXBlID0gVWludDMyQXJyYXk7XG52YXIgUGFyZW50X01lbWJlcnMgPSAyO1xudmFyIFBhcmVudF9TdHJpZGUgPSBQYXJlbnRfTWVtYmVycyAqIFVpbnQzMl9CeXRlcztcblxuLy8gU3BhY2UgOiBbWk9yZGVyXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTaXplOjQgVWludDMyXVxudmFyIFpPcmRlcl9UeXBlID0gVWludDMyQXJyYXk7XG52YXIgWk9yZGVyX01lbWJlcnMgPSAxO1xudmFyIFpPcmRlcl9TdHJpZGUgPSBaT3JkZXJfTWVtYmVycyAqIFVpbnQzMl9CeXRlcztcblxuLy8gU3BhY2UgOiBbQ3VsbGluZ01hc2tdICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTaXplOjQgSW50MzJdXG52YXIgQ3VsbGluZ01hc2tfVHlwZSA9IEludDMyQXJyYXk7XG52YXIgQ3VsbGluZ01hc2tfTWVtYmVycyA9IDE7XG52YXIgQ3VsbGluZ01hc2tfU3RyaWRlID0gQ3VsbGluZ01hc2tfTWVtYmVycyAqIFVpbnQzMl9CeXRlcztcblxuLy8gU3BhY2UgOiBbT3BhY2l0eV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTaXplOjEgVWludDhdXG52YXIgT3BhY2l0eV9UeXBlID0gVWludDhBcnJheTtcbnZhciBPcGFjaXR5X01lbWJlcnMgPSAxO1xudmFyIE9wYWNpdHlfU3RyaWRlID0gT3BhY2l0eV9NZW1iZXJzICogVWludDhfQnl0ZXM7XG5cbi8vIFNwYWNlIDogW0lzM0RdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU2l6ZToxIFVpbnQ4XVxudmFyIElzM0RfVHlwZSA9IFVpbnQ4QXJyYXk7XG52YXIgSXMzRF9NZW1iZXJzID0gMTtcbnZhciBJczNEX1N0cmlkZSA9IElzM0RfTWVtYmVycyAqIFVpbnQ4X0J5dGVzO1xuXG4vLyBTcGFjZSA6IFtOb2RlUHRyXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1NpemU6NCAqIDIgVWludDMyXVxudmFyIE5vZGVfVHlwZSA9IFVpbnQzMkFycmF5O1xudmFyIE5vZGVfTWVtYmVycyA9IDI7XG5cbi8vIFNwYWNlIDogW1NrZXddICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU2l6ZTo0ICogMiBGbG9hdDMyXVxudmFyIFNrZXdfTWVtYmVycyA9IDI7XG52YXIgU2tld19TdHJpZGUgPSBTa2V3X01lbWJlcnMgKiBfdXRpbHMuRkxPQVRfQllURVM7XG5cbnZhciBVbml0QmFzZSA9IHJlcXVpcmUoJy4vdW5pdC1iYXNlJyk7XG52YXIgTm9kZVVuaXQgPSBmdW5jdGlvbiBOb2RlVW5pdCh1bml0SUQsIG1lbVBvb2wpIHtcbiAgICBVbml0QmFzZS5jYWxsKHRoaXMsIHVuaXRJRCwgbWVtUG9vbCk7XG5cbiAgICB2YXIgY29udGVudE51bSA9IHRoaXMuX2NvbnRlbnROdW07XG4gICAgdGhpcy50cnNMaXN0ID0gbmV3IF91dGlscy5GTE9BVF9BUlJBWV9UWVBFKGNvbnRlbnROdW0gKiBUUlNfTWVtYmVycyk7XG4gICAgdGhpcy5sb2NhbE1hdExpc3QgPSBuZXcgX3V0aWxzLkZMT0FUX0FSUkFZX1RZUEUoY29udGVudE51bSAqIExvY2FsTWF0cml4X01lbWJlcnMpO1xuICAgIHRoaXMud29ybGRNYXRMaXN0ID0gbmV3IF91dGlscy5GTE9BVF9BUlJBWV9UWVBFKGNvbnRlbnROdW0gKiBXb3JsZE1hdHJpeF9NZW1iZXJzKTtcblxuICAgIGlmIChDQ19KU0IgJiYgQ0NfTkFUSVZFUkVOREVSRVIpIHtcbiAgICAgICAgdGhpcy5kaXJ0eUxpc3QgPSBuZXcgRGlydHlfVHlwZShjb250ZW50TnVtICogRGlydHlfTWVtYmVycyk7XG4gICAgICAgIHRoaXMucGFyZW50TGlzdCA9IG5ldyBQYXJlbnRfVHlwZShjb250ZW50TnVtICogUGFyZW50X01lbWJlcnMpO1xuICAgICAgICB0aGlzLnpPcmRlckxpc3QgPSBuZXcgWk9yZGVyX1R5cGUoY29udGVudE51bSAqIFpPcmRlcl9NZW1iZXJzKTtcbiAgICAgICAgdGhpcy5jdWxsaW5nTWFza0xpc3QgPSBuZXcgQ3VsbGluZ01hc2tfVHlwZShjb250ZW50TnVtICogQ3VsbGluZ01hc2tfTWVtYmVycyk7XG4gICAgICAgIHRoaXMub3BhY2l0eUxpc3QgPSBuZXcgT3BhY2l0eV9UeXBlKGNvbnRlbnROdW0gKiBPcGFjaXR5X01lbWJlcnMpO1xuICAgICAgICB0aGlzLmlzM0RMaXN0ID0gbmV3IElzM0RfVHlwZShjb250ZW50TnVtICogSXMzRF9NZW1iZXJzKTtcbiAgICAgICAgdGhpcy5ub2RlTGlzdCA9IG5ldyBOb2RlX1R5cGUoY29udGVudE51bSAqIE5vZGVfTWVtYmVycyk7XG4gICAgICAgIHRoaXMuc2tld0xpc3QgPSBuZXcgX3V0aWxzLkZMT0FUX0FSUkFZX1RZUEUoY29udGVudE51bSAqIFNrZXdfTWVtYmVycyk7XG5cbiAgICAgICAgdGhpcy5fbWVtUG9vbC5fbmF0aXZlTWVtUG9vbC51cGRhdGVOb2RlRGF0YSh1bml0SUQsIHRoaXMuZGlydHlMaXN0LCB0aGlzLnRyc0xpc3QsIHRoaXMubG9jYWxNYXRMaXN0LCB0aGlzLndvcmxkTWF0TGlzdCwgdGhpcy5wYXJlbnRMaXN0LCB0aGlzLnpPcmRlckxpc3QsIHRoaXMuY3VsbGluZ01hc2tMaXN0LCB0aGlzLm9wYWNpdHlMaXN0LCB0aGlzLmlzM0RMaXN0LCB0aGlzLm5vZGVMaXN0LCB0aGlzLnNrZXdMaXN0KTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRlbnROdW07IGkrKykge1xuICAgICAgICB2YXIgc3BhY2UgPSB0aGlzLl9zcGFjZXNEYXRhW2ldO1xuXG4gICAgICAgIHNwYWNlLnRycyA9IG5ldyBfdXRpbHMuRkxPQVRfQVJSQVlfVFlQRSh0aGlzLnRyc0xpc3QuYnVmZmVyLCBpICogVFJTX1N0cmlkZSwgVFJTX01lbWJlcnMpO1xuICAgICAgICBzcGFjZS5sb2NhbE1hdCA9IG5ldyBfdXRpbHMuRkxPQVRfQVJSQVlfVFlQRSh0aGlzLmxvY2FsTWF0TGlzdC5idWZmZXIsIGkgKiBMb2NhbE1hdHJpeF9TdHJpZGUsIExvY2FsTWF0cml4X01lbWJlcnMpO1xuICAgICAgICBzcGFjZS53b3JsZE1hdCA9IG5ldyBfdXRpbHMuRkxPQVRfQVJSQVlfVFlQRSh0aGlzLndvcmxkTWF0TGlzdC5idWZmZXIsIGkgKiBXb3JsZE1hdHJpeF9TdHJpZGUsIFdvcmxkTWF0cml4X01lbWJlcnMpO1xuXG4gICAgICAgIGlmIChDQ19KU0IgJiYgQ0NfTkFUSVZFUkVOREVSRVIpIHtcbiAgICAgICAgICAgIHNwYWNlLmRpcnR5ID0gbmV3IERpcnR5X1R5cGUodGhpcy5kaXJ0eUxpc3QuYnVmZmVyLCBpICogRGlydHlfU3RyaWRlLCBEaXJ0eV9NZW1iZXJzKTtcbiAgICAgICAgICAgIHNwYWNlLnBhcmVudCA9IG5ldyBQYXJlbnRfVHlwZSh0aGlzLnBhcmVudExpc3QuYnVmZmVyLCBpICogUGFyZW50X1N0cmlkZSwgUGFyZW50X01lbWJlcnMpO1xuICAgICAgICAgICAgc3BhY2Uuek9yZGVyID0gbmV3IFpPcmRlcl9UeXBlKHRoaXMuek9yZGVyTGlzdC5idWZmZXIsIGkgKiBaT3JkZXJfU3RyaWRlLCBaT3JkZXJfTWVtYmVycyk7XG4gICAgICAgICAgICBzcGFjZS5jdWxsaW5nTWFzayA9IG5ldyBDdWxsaW5nTWFza19UeXBlKHRoaXMuY3VsbGluZ01hc2tMaXN0LmJ1ZmZlciwgaSAqIEN1bGxpbmdNYXNrX1N0cmlkZSwgQ3VsbGluZ01hc2tfTWVtYmVycyk7XG4gICAgICAgICAgICBzcGFjZS5vcGFjaXR5ID0gbmV3IE9wYWNpdHlfVHlwZSh0aGlzLm9wYWNpdHlMaXN0LmJ1ZmZlciwgaSAqIE9wYWNpdHlfU3RyaWRlLCBPcGFjaXR5X01lbWJlcnMpO1xuICAgICAgICAgICAgc3BhY2UuaXMzRCA9IG5ldyBJczNEX1R5cGUodGhpcy5pczNETGlzdC5idWZmZXIsIGkgKiBJczNEX1N0cmlkZSwgSXMzRF9NZW1iZXJzKTtcbiAgICAgICAgICAgIHNwYWNlLnNrZXcgPSBuZXcgX3V0aWxzLkZMT0FUX0FSUkFZX1RZUEUodGhpcy5za2V3TGlzdC5idWZmZXIsIGkgKiBTa2V3X1N0cmlkZSwgU2tld19NZW1iZXJzKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIFN1cGVyID0gZnVuY3Rpb24gU3VwZXIoKSB7fTtcbiAgICBTdXBlci5wcm90b3R5cGUgPSBVbml0QmFzZS5wcm90b3R5cGU7XG4gICAgTm9kZVVuaXQucHJvdG90eXBlID0gbmV3IFN1cGVyKCk7XG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5vZGVVbml0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVXRkVzVwZEM1cWN5SmRMQ0p1WVcxbGN5STZXeUpWYVc1ME16SmZRbmwwWlhNaUxDSlZhVzUwT0Y5Q2VYUmxjeUlzSWtScGNuUjVYMVI1Y0dVaUxDSlZhVzUwTXpKQmNuSmhlU0lzSWtScGNuUjVYMDFsYldKbGNuTWlMQ0pFYVhKMGVWOVRkSEpwWkdVaUxDSlVVbE5mVFdWdFltVnljeUlzSWxSU1UxOVRkSEpwWkdVaUxDSkdURTlCVkY5Q1dWUkZVeUlzSWt4dlkyRnNUV0YwY21sNFgwMWxiV0psY25NaUxDSk1iMk5oYkUxaGRISnBlRjlUZEhKcFpHVWlMQ0pYYjNKc1pFMWhkSEpwZUY5TlpXMWlaWEp6SWl3aVYyOXliR1JOWVhSeWFYaGZVM1J5YVdSbElpd2lVR0Z5Wlc1MFgxUjVjR1VpTENKUVlYSmxiblJmVFdWdFltVnljeUlzSWxCaGNtVnVkRjlUZEhKcFpHVWlMQ0phVDNKa1pYSmZWSGx3WlNJc0lscFBjbVJsY2w5TlpXMWlaWEp6SWl3aVdrOXlaR1Z5WDFOMGNtbGtaU0lzSWtOMWJHeHBibWROWVhOclgxUjVjR1VpTENKSmJuUXpNa0Z5Y21GNUlpd2lRM1ZzYkdsdVowMWhjMnRmVFdWdFltVnljeUlzSWtOMWJHeHBibWROWVhOclgxTjBjbWxrWlNJc0lrOXdZV05wZEhsZlZIbHdaU0lzSWxWcGJuUTRRWEp5WVhraUxDSlBjR0ZqYVhSNVgwMWxiV0psY25NaUxDSlBjR0ZqYVhSNVgxTjBjbWxrWlNJc0lrbHpNMFJmVkhsd1pTSXNJa2x6TTBSZlRXVnRZbVZ5Y3lJc0lrbHpNMFJmVTNSeWFXUmxJaXdpVG05a1pWOVVlWEJsSWl3aVRtOWtaVjlOWlcxaVpYSnpJaXdpVTJ0bGQxOU5aVzFpWlhKeklpd2lVMnRsZDE5VGRISnBaR1VpTENKVmJtbDBRbUZ6WlNJc0luSmxjWFZwY21VaUxDSk9iMlJsVlc1cGRDSXNJblZ1YVhSSlJDSXNJbTFsYlZCdmIyd2lMQ0pqWVd4c0lpd2lZMjl1ZEdWdWRFNTFiU0lzSWw5amIyNTBaVzUwVG5WdElpd2lkSEp6VEdsemRDSXNJa1pNVDBGVVgwRlNVa0ZaWDFSWlVFVWlMQ0pzYjJOaGJFMWhkRXhwYzNRaUxDSjNiM0pzWkUxaGRFeHBjM1FpTENKRFExOUtVMElpTENKRFExOU9RVlJKVmtWU1JVNUVSVkpGVWlJc0ltUnBjblI1VEdsemRDSXNJbkJoY21WdWRFeHBjM1FpTENKNlQzSmtaWEpNYVhOMElpd2lZM1ZzYkdsdVowMWhjMnRNYVhOMElpd2liM0JoWTJsMGVVeHBjM1FpTENKcGN6TkVUR2x6ZENJc0ltNXZaR1ZNYVhOMElpd2ljMnRsZDB4cGMzUWlMQ0pmYldWdFVHOXZiQ0lzSWw5dVlYUnBkbVZOWlcxUWIyOXNJaXdpZFhCa1lYUmxUbTlrWlVSaGRHRWlMQ0pwSWl3aWMzQmhZMlVpTENKZmMzQmhZMlZ6UkdGMFlTSXNJblJ5Y3lJc0ltSjFabVpsY2lJc0lteHZZMkZzVFdGMElpd2lkMjl5YkdSTllYUWlMQ0prYVhKMGVTSXNJbkJoY21WdWRDSXNJbnBQY21SbGNpSXNJbU4xYkd4cGJtZE5ZWE5ySWl3aWIzQmhZMmwwZVNJc0ltbHpNMFFpTENKemEyVjNJaXdpVTNWd1pYSWlMQ0p3Y205MGIzUjVjR1VpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lPenRCUVhsQ1FUczdRVUZGUVN4SlFVRk5RU3hsUVVGbExFTkJRWEpDTEVNc1EwRXpRa0U3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVUUwUWtFc1NVRkJUVU1zWTBGQll5eERRVUZ3UWpzN1FVRkZRVHRCUVVOQkxFbEJRVTFETEdGQlFXRkRMRmRCUVc1Q08wRkJRMEVzU1VGQlRVTXNaMEpCUVdkQ0xFTkJRWFJDTzBGQlEwRXNTVUZCVFVNc1pVRkJaVVFzWjBKQlFXZENTaXhaUVVGeVF6czdRVUZGUVR0QlFVTkJMRWxCUVUxTkxHTkJRV01zUlVGQmNFSTdRVUZEUVN4SlFVRk5ReXhoUVVGaFJDeGpRVUZqUlN4clFrRkJha003TzBGQlJVRTdRVUZEUVN4SlFVRk5ReXh6UWtGQmMwSXNSVUZCTlVJN1FVRkRRU3hKUVVGTlF5eHhRa0ZCY1VKRUxITkNRVUZ6UWtRc2EwSkJRV3BFT3p0QlFVVkJPMEZCUTBFc1NVRkJUVWNzYzBKQlFYTkNMRVZCUVRWQ08wRkJRMEVzU1VGQlRVTXNjVUpCUVhGQ1JDeHpRa0ZCYzBKSUxHdENRVUZxUkRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzU1VGQlRVc3NZMEZCWTFZc1YwRkJjRUk3UVVGRFFTeEpRVUZOVnl4cFFrRkJhVUlzUTBGQmRrSTdRVUZEUVN4SlFVRk5ReXhuUWtGQlowSkVMR2xDUVVGcFFtUXNXVUZCZGtNN08wRkJSVUU3UVVGRFFTeEpRVUZOWjBJc1kwRkJZMklzVjBGQmNFSTdRVUZEUVN4SlFVRk5ZeXhwUWtGQmFVSXNRMEZCZGtJN1FVRkRRU3hKUVVGTlF5eG5Ra0ZCWjBKRUxHbENRVUZwUW1wQ0xGbEJRWFpET3p0QlFVVkJPMEZCUTBFc1NVRkJUVzFDTEcxQ1FVRnRRa01zVlVGQmVrSTdRVUZEUVN4SlFVRk5ReXh6UWtGQmMwSXNRMEZCTlVJN1FVRkRRU3hKUVVGTlF5eHhRa0ZCY1VKRUxITkNRVUZ6UW5KQ0xGbEJRV3BFT3p0QlFVVkJPMEZCUTBFc1NVRkJUWFZDTEdWQlFXVkRMRlZCUVhKQ08wRkJRMEVzU1VGQlRVTXNhMEpCUVd0Q0xFTkJRWGhDTzBGQlEwRXNTVUZCVFVNc2FVSkJRV2xDUkN4clFrRkJhMEo0UWl4WFFVRjZRenM3UVVGRlFUdEJRVU5CTEVsQlFVMHdRaXhaUVVGWlNDeFZRVUZzUWp0QlFVTkJMRWxCUVUxSkxHVkJRV1VzUTBGQmNrSTdRVUZEUVN4SlFVRk5ReXhqUVVGalJDeGxRVUZsTTBJc1YwRkJia003TzBGQlJVRTdRVUZEUVN4SlFVRk5Oa0lzV1VGQldUTkNMRmRCUVd4Q08wRkJRMEVzU1VGQlRUUkNMR1ZCUVdVc1EwRkJja0k3TzBGQlJVRTdRVUZEUVN4SlFVRk5ReXhsUVVGbExFTkJRWEpDTzBGQlEwRXNTVUZCVFVNc1kwRkJZMFFzWlVGQlpYaENMR3RDUVVGdVF6czdRVUZGUVN4SlFVRkpNRUlzVjBGQlYwTXNVVUZCVVN4aFFVRlNMRU5CUVdZN1FVRkRRU3hKUVVGSlF5eFhRVUZYTEZOQlFWaEJMRkZCUVZjc1EwRkJWVU1zVFVGQlZpeEZRVUZyUWtNc1QwRkJiRUlzUlVGQk1rSTdRVUZEZEVOS0xHRkJRVk5MTEVsQlFWUXNRMEZCWXl4SlFVRmtMRVZCUVc5Q1JpeE5RVUZ3UWl4RlFVRTBRa01zVDBGQk5VSTdPMEZCUlVFc1VVRkJTVVVzWVVGQllTeExRVUZMUXl4WFFVRjBRanRCUVVOQkxGTkJRVXRETEU5QlFVd3NSMEZCWlN4SlFVRkpReXgxUWtGQlNpeERRVUZ4UWtnc1lVRkJZV3hETEZkQlFXeERMRU5CUVdZN1FVRkRRU3hUUVVGTGMwTXNXVUZCVEN4SFFVRnZRaXhKUVVGSlJDeDFRa0ZCU2l4RFFVRnhRa2dzWVVGQllTOUNMRzFDUVVGc1F5eERRVUZ3UWp0QlFVTkJMRk5CUVV0dlF5eFpRVUZNTEVkQlFXOUNMRWxCUVVsR0xIVkNRVUZLTEVOQlFYRkNTQ3hoUVVGaE4wSXNiVUpCUVd4RExFTkJRWEJDT3p0QlFVVkJMRkZCUVVsdFF5eFZRVUZWUXl4cFFrRkJaQ3hGUVVGcFF6dEJRVU0zUWl4aFFVRkxReXhUUVVGTUxFZEJRV2xDTEVsQlFVazVReXhWUVVGS0xFTkJRV1Z6UXl4aFFVRmhjRU1zWVVGQk5VSXNRMEZCYWtJN1FVRkRRU3hoUVVGTE5rTXNWVUZCVEN4SFFVRnJRaXhKUVVGSmNFTXNWMEZCU2l4RFFVRm5RakpDTEdGQlFXRXhRaXhqUVVFM1FpeERRVUZzUWp0QlFVTkJMR0ZCUVV0dlF5eFZRVUZNTEVkQlFXdENMRWxCUVVsc1F5eFhRVUZLTEVOQlFXZENkMElzWVVGQllYWkNMR05CUVRkQ0xFTkJRV3hDTzBGQlEwRXNZVUZCUzJ0RExHVkJRVXdzUjBGQmRVSXNTVUZCU1doRExHZENRVUZLTEVOQlFYRkNjVUlzWVVGQllXNUNMRzFDUVVGc1F5eERRVUYyUWp0QlFVTkJMR0ZCUVVzclFpeFhRVUZNTEVkQlFXMUNMRWxCUVVrM1FpeFpRVUZLTEVOQlFXbENhVUlzWVVGQllXWXNaVUZCT1VJc1EwRkJia0k3UVVGRFFTeGhRVUZMTkVJc1VVRkJUQ3hIUVVGblFpeEpRVUZKTVVJc1UwRkJTaXhEUVVGallTeGhRVUZoV2l4WlFVRXpRaXhEUVVGb1FqdEJRVU5CTEdGQlFVc3dRaXhSUVVGTUxFZEJRV2RDTEVsQlFVbDRRaXhUUVVGS0xFTkJRV05WTEdGQlFXRlVMRmxCUVROQ0xFTkJRV2hDTzBGQlEwRXNZVUZCUzNkQ0xGRkJRVXdzUjBGQlowSXNTVUZCU1Zvc2RVSkJRVW9zUTBGQmNVSklMR0ZCUVdGU0xGbEJRV3hETEVOQlFXaENPenRCUVVWQkxHRkJRVXQzUWl4UlFVRk1MRU5CUVdORExHTkJRV1FzUTBGQk5rSkRMR05CUVRkQ0xFTkJRMGx5UWl4TlFVUktMRVZCUlVrc1MwRkJTMWNzVTBGR1ZDeEZRVWRKTEV0QlFVdE9MRTlCU0ZRc1JVRkpTU3hMUVVGTFJTeFpRVXBVTEVWQlMwa3NTMEZCUzBNc1dVRk1WQ3hGUVUxSkxFdEJRVXRKTEZWQlRsUXNSVUZQU1N4TFFVRkxReXhWUVZCVUxFVkJVVWtzUzBGQlMwTXNaVUZTVkN4RlFWTkpMRXRCUVV0RExGZEJWRlFzUlVGVlNTeExRVUZMUXl4UlFWWlVMRVZCVjBrc1MwRkJTME1zVVVGWVZDeEZRVmxKTEV0QlFVdERMRkZCV2xRN1FVRmpTRHM3UVVGRlJDeFRRVUZMTEVsQlFVbEpMRWxCUVVrc1EwRkJZaXhGUVVGblFrRXNTVUZCU1c1Q0xGVkJRWEJDTEVWQlFXZERiVUlzUjBGQmFFTXNSVUZCYzBNN1FVRkRiRU1zV1VGQlNVTXNVVUZCVVN4TFFVRkxReXhYUVVGTUxFTkJRV2xDUml4RFFVRnFRaXhEUVVGYU96dEJRVVZCUXl4alFVRk5SU3hIUVVGT0xFZEJRVmtzU1VGQlNXNUNMSFZDUVVGS0xFTkJRWEZDTEV0QlFVdEVMRTlCUVV3c1EwRkJZWEZDTEUxQlFXeERMRVZCUVRCRFNpeEpRVUZKY0VRc1ZVRkJPVU1zUlVGQk1FUkVMRmRCUVRGRUxFTkJRVm83UVVGRFFYTkVMR05CUVUxSkxGRkJRVTRzUjBGQmFVSXNTVUZCU1hKQ0xIVkNRVUZLTEVOQlFYRkNMRXRCUVV0RExGbEJRVXdzUTBGQmEwSnRRaXhOUVVGMlF5eEZRVUVyUTBvc1NVRkJTV3BFTEd0Q1FVRnVSQ3hGUVVGMVJVUXNiVUpCUVhaRkxFTkJRV3BDTzBGQlEwRnRSQ3hqUVVGTlN5eFJRVUZPTEVkQlFXbENMRWxCUVVsMFFpeDFRa0ZCU2l4RFFVRnhRaXhMUVVGTFJTeFpRVUZNTEVOQlFXdENhMElzVFVGQmRrTXNSVUZCSzBOS0xFbEJRVWt2UXl4clFrRkJia1FzUlVGQmRVVkVMRzFDUVVGMlJTeERRVUZxUWpzN1FVRkZRU3haUVVGSmJVTXNWVUZCVlVNc2FVSkJRV1FzUlVGQmFVTTdRVUZETjBKaExHdENRVUZOVFN4TFFVRk9MRWRCUVdNc1NVRkJTV2hGTEZWQlFVb3NRMEZCWlN4TFFVRkxPRU1zVTBGQlRDeERRVUZsWlN4TlFVRTVRaXhGUVVGelEwb3NTVUZCU1hSRUxGbEJRVEZETEVWQlFYZEVSQ3hoUVVGNFJDeERRVUZrTzBGQlEwRjNSQ3hyUWtGQlRVOHNUVUZCVGl4SFFVRmxMRWxCUVVsMFJDeFhRVUZLTEVOQlFXZENMRXRCUVV0dlF5eFZRVUZNTEVOQlFXZENZeXhOUVVGb1F5eEZRVUYzUTBvc1NVRkJTVFZETEdGQlFUVkRMRVZCUVRKRVJDeGpRVUV6UkN4RFFVRm1PMEZCUTBFNFF5eHJRa0ZCVFZFc1RVRkJUaXhIUVVGbExFbEJRVWx3UkN4WFFVRktMRU5CUVdkQ0xFdEJRVXRyUXl4VlFVRk1MRU5CUVdkQ1lTeE5RVUZvUXl4RlFVRjNRMG9zU1VGQlNYcERMR0ZCUVRWRExFVkJRVEpFUkN4alFVRXpSQ3hEUVVGbU8wRkJRMEV5UXl4clFrRkJUVk1zVjBGQlRpeEhRVUZ2UWl4SlFVRkpiRVFzWjBKQlFVb3NRMEZCY1VJc1MwRkJTMmRETEdWQlFVd3NRMEZCY1VKWkxFMUJRVEZETEVWQlFXdEVTaXhKUVVGSmNrTXNhMEpCUVhSRUxFVkJRVEJGUkN4dFFrRkJNVVVzUTBGQmNFSTdRVUZEUVhWRExHdENRVUZOVlN4UFFVRk9MRWRCUVdkQ0xFbEJRVWt2UXl4WlFVRktMRU5CUVdsQ0xFdEJRVXMyUWl4WFFVRk1MRU5CUVdsQ1Z5eE5RVUZzUXl4RlFVRXdRMG9zU1VGQlNXcERMR05CUVRsRExFVkJRVGhFUkN4bFFVRTVSQ3hEUVVGb1FqdEJRVU5CYlVNc2EwSkJRVTFYTEVsQlFVNHNSMEZCWVN4SlFVRkpOVU1zVTBGQlNpeERRVUZqTEV0QlFVc3dRaXhSUVVGTUxFTkJRV05WTEUxQlFUVkNMRVZCUVc5RFNpeEpRVUZKT1VJc1YwRkJlRU1zUlVGQmNVUkVMRmxCUVhKRUxFTkJRV0k3UVVGRFFXZERMR3RDUVVGTldTeEpRVUZPTEVkQlFXRXNTVUZCU1RkQ0xIVkNRVUZLTEVOQlFYRkNMRXRCUVV0WkxGRkJRVXdzUTBGQlkxRXNUVUZCYmtNc1JVRkJNa05LTEVsQlFVa3hRaXhYUVVFdlF5eEZRVUUwUkVRc1dVRkJOVVFzUTBGQllqdEJRVU5JTzBGQlEwbzdRVUZEU2l4RFFXNUVSRHM3UVVGeFJFRXNRMEZCUXl4WlFVRlZPMEZCUTFBc1VVRkJTWGxETEZGQlFWRXNVMEZCVWtFc1MwRkJVU3hIUVVGVkxFTkJRVVVzUTBGQmVFSTdRVUZEUVVFc1ZVRkJUVU1zVTBGQlRpeEhRVUZyUW5oRExGTkJRVk4zUXl4VFFVRXpRanRCUVVOQmRFTXNZVUZCVTNORExGTkJRVlFzUjBGQmNVSXNTVUZCU1VRc1MwRkJTaXhGUVVGeVFqdEJRVU5JTEVOQlNrUTdPMEZCVFVGRkxFOUJRVTlETEU5QlFWQXNSMEZCYVVKNFF5eFJRVUZxUWlJc0ltWnBiR1VpT2lKdWIyUmxMWFZ1YVhRdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVJRU52Y0hseWFXZG9kQ0FvWXlrZ01qQXhPU0JZYVdGdFpXNGdXV0ZxYVNCVGIyWjBkMkZ5WlNCRGJ5NHNJRXgwWkM1Y2JseHVJR2gwZEhCek9pOHZkM2QzTG1OdlkyOXpMbU52YlM5Y2JseHVJRkJsY20xcGMzTnBiMjRnYVhNZ2FHVnlaV0o1SUdkeVlXNTBaV1FzSUdaeVpXVWdiMllnWTJoaGNtZGxMQ0IwYnlCaGJua2djR1Z5YzI5dUlHOWlkR0ZwYm1sdVp5QmhJR052Y0hsY2JpQnZaaUIwYUdseklITnZablIzWVhKbElHRnVaQ0JoYzNOdlkybGhkR1ZrSUdWdVoybHVaU0J6YjNWeVkyVWdZMjlrWlNBb2RHaGxJRndpVTI5bWRIZGhjbVZjSWlrc0lHRWdiR2x0YVhSbFpDeGNiaUIzYjNKc1pIZHBaR1VzSUhKdmVXRnNkSGt0Wm5KbFpTd2dibTl1TFdGemMybG5ibUZpYkdVc0lISmxkbTlqWVdKc1pTQmhibVFnYm05dUxXVjRZMngxYzJsMlpTQnNhV05sYm5ObFhHNGdkRzhnZFhObElFTnZZMjl6SUVOeVpXRjBiM0lnYzI5c1pXeDVJSFJ2SUdSbGRtVnNiM0FnWjJGdFpYTWdiMjRnZVc5MWNpQjBZWEpuWlhRZ2NHeGhkR1p2Y20xekxpQlpiM1VnYzJoaGJHeGNiaUJ1YjNRZ2RYTmxJRU52WTI5eklFTnlaV0YwYjNJZ2MyOW1kSGRoY21VZ1ptOXlJR1JsZG1Wc2IzQnBibWNnYjNSb1pYSWdjMjltZEhkaGNtVWdiM0lnZEc5dmJITWdkR2hoZENkelhHNGdkWE5sWkNCbWIzSWdaR1YyWld4dmNHbHVaeUJuWVcxbGN5NGdXVzkxSUdGeVpTQnViM1FnWjNKaGJuUmxaQ0IwYnlCd2RXSnNhWE5vTENCa2FYTjBjbWxpZFhSbExGeHVJSE4xWW14cFkyVnVjMlVzSUdGdVpDOXZjaUJ6Wld4c0lHTnZjR2xsY3lCdlppQkRiMk52Y3lCRGNtVmhkRzl5TGx4dVhHNGdWR2hsSUhOdlpuUjNZWEpsSUc5eUlIUnZiMnh6SUdsdUlIUm9hWE1nVEdsalpXNXpaU0JCWjNKbFpXMWxiblFnWVhKbElHeHBZMlZ1YzJWa0xDQnViM1FnYzI5c1pDNWNiaUJZYVdGdFpXNGdXV0ZxYVNCVGIyWjBkMkZ5WlNCRGJ5NHNJRXgwWkM0Z2NtVnpaWEoyWlhNZ1lXeHNJSEpwWjJoMGN5QnViM1FnWlhod2NtVnpjMng1SUdkeVlXNTBaV1FnZEc4Z2VXOTFMbHh1WEc0Z1ZFaEZJRk5QUmxSWFFWSkZJRWxUSUZCU1QxWkpSRVZFSUZ3aVFWTWdTVk5jSWl3Z1YwbFVTRTlWVkNCWFFWSlNRVTVVV1NCUFJpQkJUbGtnUzBsT1JDd2dSVmhRVWtWVFV5QlBVbHh1SUVsTlVFeEpSVVFzSUVsT1EweFZSRWxPUnlCQ1ZWUWdUazlVSUV4SlRVbFVSVVFnVkU4Z1ZFaEZJRmRCVWxKQlRsUkpSVk1nVDBZZ1RVVlNRMGhCVGxSQlFrbE1TVlJaTEZ4dUlFWkpWRTVGVTFNZ1JrOVNJRUVnVUVGU1ZFbERWVXhCVWlCUVZWSlFUMU5GSUVGT1JDQk9UMDVKVGtaU1NVNUhSVTFGVGxRdUlFbE9JRTVQSUVWV1JVNVVJRk5JUVV4TUlGUklSVnh1SUVGVlZFaFBVbE1nVDFJZ1EwOVFXVkpKUjBoVUlFaFBURVJGVWxNZ1FrVWdURWxCUWt4RklFWlBVaUJCVGxrZ1EweEJTVTBzSUVSQlRVRkhSVk1nVDFJZ1QxUklSVkpjYmlCTVNVRkNTVXhKVkZrc0lGZElSVlJJUlZJZ1NVNGdRVTRnUVVOVVNVOU9JRTlHSUVOUFRsUlNRVU5VTENCVVQxSlVJRTlTSUU5VVNFVlNWMGxUUlN3Z1FWSkpVMGxPUnlCR1VrOU5MRnh1SUU5VlZDQlBSaUJQVWlCSlRpQkRUMDVPUlVOVVNVOU9JRmRKVkVnZ1ZFaEZJRk5QUmxSWFFWSkZJRTlTSUZSSVJTQlZVMFVnVDFJZ1QxUklSVklnUkVWQlRFbE9SMU1nU1U1Y2JpQlVTRVVnVTA5R1ZGZEJVa1V1WEc0Z0tpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaTljYmx4dWFXMXdiM0owSUhzZ1JreFBRVlJmUVZKU1FWbGZWRmxRUlN3Z1JreFBRVlJmUWxsVVJWTWdmU0JtY205dElDY3VMaTh1TGk5MmJXRjBhQzkxZEdsc2N5YzdYRzVjYm1OdmJuTjBJRlZwYm5Rek1sOUNlWFJsY3lBOUlEUTdYRzVqYjI1emRDQlZhVzUwT0Y5Q2VYUmxjeUE5SURFN1hHNWNiaTh2SUZOd1lXTmxJRG9nVzBScGNuUjVYU0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmJVMmw2WlRvMElGVnBiblF6TWwxY2JtTnZibk4wSUVScGNuUjVYMVI1Y0dVZ1BTQlZhVzUwTXpKQmNuSmhlVHRjYm1OdmJuTjBJRVJwY25SNVgwMWxiV0psY25NZ1BTQXhPMXh1WTI5dWMzUWdSR2x5ZEhsZlUzUnlhV1JsSUQwZ1JHbHlkSGxmVFdWdFltVnljeUFxSUZWcGJuUXpNbDlDZVhSbGN6dGNibHh1THk4Z1UzQmhZMlVnT2lCYlZGSlRYU0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRnRUYVhwbE9qUWdLaUF4TUNCR2JHOWhkRE15ZkVac2IyRjBOalJkWEc1amIyNXpkQ0JVVWxOZlRXVnRZbVZ5Y3lBOUlERXdPMXh1WTI5dWMzUWdWRkpUWDFOMGNtbGtaU0E5SUZSU1UxOU5aVzFpWlhKeklDb2dSa3hQUVZSZlFsbFVSVk03WEc1Y2JpOHZJRk53WVdObElEb2dXMHh2WTJGc1RXRjBjbWw0WFNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCYlUybDZaVG8wSUNvZ01UWWdSbXh2WVhRek1ueEdiRzloZERZMFhWeHVZMjl1YzNRZ1RHOWpZV3hOWVhSeWFYaGZUV1Z0WW1WeWN5QTlJREUyTzF4dVkyOXVjM1FnVEc5allXeE5ZWFJ5YVhoZlUzUnlhV1JsSUQwZ1RHOWpZV3hOWVhSeWFYaGZUV1Z0WW1WeWN5QXFJRVpNVDBGVVgwSlpWRVZUTzF4dVhHNHZMeUJUY0dGalpTQTZJRnRYYjNKc1pFMWhkSEpwZUYwZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1cxTnBlbVU2TkNBcUlERTJJRVpzYjJGME16SjhSbXh2WVhRMk5GMWNibU52Ym5OMElGZHZjbXhrVFdGMGNtbDRYMDFsYldKbGNuTWdQU0F4Tmp0Y2JtTnZibk4wSUZkdmNteGtUV0YwY21sNFgxTjBjbWxrWlNBOUlGZHZjbXhrVFdGMGNtbDRYMDFsYldKbGNuTWdLaUJHVEU5QlZGOUNXVlJGVXp0Y2JseHVMeThnVTNCaFkyVWdPaUJiVUdGeVpXNTBJRlZ1YVhSZElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGdFRhWHBsT2pRZ1ZXbHVkRE15WFZ4dUx5OGdVM0JoWTJVZ09pQmJVR0Z5Wlc1MElFbHVaR1Y0WFNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ0VGFYcGxPalFnVldsdWRETXlYVnh1WTI5dWMzUWdVR0Z5Wlc1MFgxUjVjR1VnUFNCVmFXNTBNekpCY25KaGVUdGNibU52Ym5OMElGQmhjbVZ1ZEY5TlpXMWlaWEp6SUQwZ01qdGNibU52Ym5OMElGQmhjbVZ1ZEY5VGRISnBaR1VnUFNCUVlYSmxiblJmVFdWdFltVnljeUFxSUZWcGJuUXpNbDlDZVhSbGN6dGNibHh1THk4Z1UzQmhZMlVnT2lCYldrOXlaR1Z5WFNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRnRUYVhwbE9qUWdWV2x1ZERNeVhWeHVZMjl1YzNRZ1drOXlaR1Z5WDFSNWNHVWdQU0JWYVc1ME16SkJjbkpoZVR0Y2JtTnZibk4wSUZwUGNtUmxjbDlOWlcxaVpYSnpJRDBnTVR0Y2JtTnZibk4wSUZwUGNtUmxjbDlUZEhKcFpHVWdQU0JhVDNKa1pYSmZUV1Z0WW1WeWN5QXFJRlZwYm5Rek1sOUNlWFJsY3p0Y2JseHVMeThnVTNCaFkyVWdPaUJiUTNWc2JHbHVaMDFoYzJ0ZElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGdFRhWHBsT2pRZ1NXNTBNekpkWEc1amIyNXpkQ0JEZFd4c2FXNW5UV0Z6YTE5VWVYQmxJRDBnU1c1ME16SkJjbkpoZVR0Y2JtTnZibk4wSUVOMWJHeHBibWROWVhOclgwMWxiV0psY25NZ1BTQXhPMXh1WTI5dWMzUWdRM1ZzYkdsdVowMWhjMnRmVTNSeWFXUmxJRDBnUTNWc2JHbHVaMDFoYzJ0ZlRXVnRZbVZ5Y3lBcUlGVnBiblF6TWw5Q2VYUmxjenRjYmx4dUx5OGdVM0JoWTJVZ09pQmJUM0JoWTJsMGVWMGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ0VGFYcGxPakVnVldsdWREaGRYRzVqYjI1emRDQlBjR0ZqYVhSNVgxUjVjR1VnUFNCVmFXNTBPRUZ5Y21GNU8xeHVZMjl1YzNRZ1QzQmhZMmwwZVY5TlpXMWlaWEp6SUQwZ01UdGNibU52Ym5OMElFOXdZV05wZEhsZlUzUnlhV1JsSUQwZ1QzQmhZMmwwZVY5TlpXMWlaWEp6SUNvZ1ZXbHVkRGhmUW5sMFpYTTdYRzVjYmk4dklGTndZV05sSURvZ1cwbHpNMFJkSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JiVTJsNlpUb3hJRlZwYm5RNFhWeHVZMjl1YzNRZ1NYTXpSRjlVZVhCbElEMGdWV2x1ZERoQmNuSmhlVHRjYm1OdmJuTjBJRWx6TTBSZlRXVnRZbVZ5Y3lBOUlERTdYRzVqYjI1emRDQkpjek5FWDFOMGNtbGtaU0E5SUVsek0wUmZUV1Z0WW1WeWN5QXFJRlZwYm5RNFgwSjVkR1Z6TzF4dVhHNHZMeUJUY0dGalpTQTZJRnRPYjJSbFVIUnlYU0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1cxTnBlbVU2TkNBcUlESWdWV2x1ZERNeVhWeHVZMjl1YzNRZ1RtOWtaVjlVZVhCbElEMGdWV2x1ZERNeVFYSnlZWGs3WEc1amIyNXpkQ0JPYjJSbFgwMWxiV0psY25NZ1BTQXlPMXh1WEc0dkx5QlRjR0ZqWlNBNklGdFRhMlYzWFNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVzFOcGVtVTZOQ0FxSURJZ1JteHZZWFF6TWwxY2JtTnZibk4wSUZOclpYZGZUV1Z0WW1WeWN5QTlJREk3WEc1amIyNXpkQ0JUYTJWM1gxTjBjbWxrWlNBOUlGTnJaWGRmVFdWdFltVnljeUFxSUVaTVQwRlVYMEpaVkVWVE8xeHVYRzVzWlhRZ1ZXNXBkRUpoYzJVZ1BTQnlaWEYxYVhKbEtDY3VMM1Z1YVhRdFltRnpaU2NwTzF4dWJHVjBJRTV2WkdWVmJtbDBJRDBnWm5WdVkzUnBiMjRnS0hWdWFYUkpSQ3dnYldWdFVHOXZiQ2tnZTF4dUlDQWdJRlZ1YVhSQ1lYTmxMbU5oYkd3b2RHaHBjeXdnZFc1cGRFbEVMQ0J0WlcxUWIyOXNLVHRjYmx4dUlDQWdJR3hsZENCamIyNTBaVzUwVG5WdElEMGdkR2hwY3k1ZlkyOXVkR1Z1ZEU1MWJUdGNiaUFnSUNCMGFHbHpMblJ5YzB4cGMzUWdQU0J1WlhjZ1JreFBRVlJmUVZKU1FWbGZWRmxRUlNoamIyNTBaVzUwVG5WdElDb2dWRkpUWDAxbGJXSmxjbk1wTzF4dUlDQWdJSFJvYVhNdWJHOWpZV3hOWVhSTWFYTjBJRDBnYm1WM0lFWk1UMEZVWDBGU1VrRlpYMVJaVUVVb1kyOXVkR1Z1ZEU1MWJTQXFJRXh2WTJGc1RXRjBjbWw0WDAxbGJXSmxjbk1wTzF4dUlDQWdJSFJvYVhNdWQyOXliR1JOWVhSTWFYTjBJRDBnYm1WM0lFWk1UMEZVWDBGU1VrRlpYMVJaVUVVb1kyOXVkR1Z1ZEU1MWJTQXFJRmR2Y214a1RXRjBjbWw0WDAxbGJXSmxjbk1wTzF4dVhHNGdJQ0FnYVdZZ0tFTkRYMHBUUWlBbUppQkRRMTlPUVZSSlZrVlNSVTVFUlZKRlVpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtUnBjblI1VEdsemRDQTlJRzVsZHlCRWFYSjBlVjlVZVhCbEtHTnZiblJsYm5ST2RXMGdLaUJFYVhKMGVWOU5aVzFpWlhKektUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1d1lYSmxiblJNYVhOMElEMGdibVYzSUZCaGNtVnVkRjlVZVhCbEtHTnZiblJsYm5ST2RXMGdLaUJRWVhKbGJuUmZUV1Z0WW1WeWN5azdYRzRnSUNBZ0lDQWdJSFJvYVhNdWVrOXlaR1Z5VEdsemRDQTlJRzVsZHlCYVQzSmtaWEpmVkhsd1pTaGpiMjUwWlc1MFRuVnRJQ29nV2s5eVpHVnlYMDFsYldKbGNuTXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTjFiR3hwYm1kTllYTnJUR2x6ZENBOUlHNWxkeUJEZFd4c2FXNW5UV0Z6YTE5VWVYQmxLR052Ym5SbGJuUk9kVzBnS2lCRGRXeHNhVzVuVFdGemExOU5aVzFpWlhKektUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dmNHRmphWFI1VEdsemRDQTlJRzVsZHlCUGNHRmphWFI1WDFSNWNHVW9ZMjl1ZEdWdWRFNTFiU0FxSUU5d1lXTnBkSGxmVFdWdFltVnljeWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhWE16UkV4cGMzUWdQU0J1WlhjZ1NYTXpSRjlVZVhCbEtHTnZiblJsYm5ST2RXMGdLaUJKY3pORVgwMWxiV0psY25NcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG01dlpHVk1hWE4wSUQwZ2JtVjNJRTV2WkdWZlZIbHdaU2hqYjI1MFpXNTBUblZ0SUNvZ1RtOWtaVjlOWlcxaVpYSnpLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXphMlYzVEdsemRDQTlJRzVsZHlCR1RFOUJWRjlCVWxKQldWOVVXVkJGS0dOdmJuUmxiblJPZFcwZ0tpQlRhMlYzWDAxbGJXSmxjbk1wTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDIxbGJWQnZiMnd1WDI1aGRHbDJaVTFsYlZCdmIyd3VkWEJrWVhSbFRtOWtaVVJoZEdFb1hHNGdJQ0FnSUNBZ0lDQWdJQ0IxYm1sMFNVUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVJwY25SNVRHbHpkQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZEhKelRHbHpkQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Ykc5allXeE5ZWFJNYVhOMExGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTNiM0pzWkUxaGRFeHBjM1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CaGNtVnVkRXhwYzNRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxucFBjbVJsY2t4cGMzUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU4xYkd4cGJtZE5ZWE5yVEdsemRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViM0JoWTJsMGVVeHBjM1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1sek0wUk1hWE4wTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dWIyUmxUR2x6ZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMydGxkMHhwYzNSY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElHTnZiblJsYm5ST2RXMDdJR2tnS3lzcElIdGNiaUFnSUNBZ0lDQWdiR1YwSUhOd1lXTmxJRDBnZEdocGN5NWZjM0JoWTJWelJHRjBZVnRwWFR0Y2JseHVJQ0FnSUNBZ0lDQnpjR0ZqWlM1MGNuTWdQU0J1WlhjZ1JreFBRVlJmUVZKU1FWbGZWRmxRUlNoMGFHbHpMblJ5YzB4cGMzUXVZblZtWm1WeUxDQnBJQ29nVkZKVFgxTjBjbWxrWlN3Z1ZGSlRYMDFsYldKbGNuTXBPMXh1SUNBZ0lDQWdJQ0J6Y0dGalpTNXNiMk5oYkUxaGRDQTlJRzVsZHlCR1RFOUJWRjlCVWxKQldWOVVXVkJGS0hSb2FYTXViRzlqWVd4TllYUk1hWE4wTG1KMVptWmxjaXdnYVNBcUlFeHZZMkZzVFdGMGNtbDRYMU4wY21sa1pTd2dURzlqWVd4TllYUnlhWGhmVFdWdFltVnljeWs3WEc0Z0lDQWdJQ0FnSUhOd1lXTmxMbmR2Y214a1RXRjBJRDBnYm1WM0lFWk1UMEZVWDBGU1VrRlpYMVJaVUVVb2RHaHBjeTUzYjNKc1pFMWhkRXhwYzNRdVluVm1abVZ5TENCcElDb2dWMjl5YkdSTllYUnlhWGhmVTNSeWFXUmxMQ0JYYjNKc1pFMWhkSEpwZUY5TlpXMWlaWEp6S1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvUTBOZlNsTkNJQ1ltSUVORFgwNUJWRWxXUlZKRlRrUkZVa1ZTS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6Y0dGalpTNWthWEowZVNBOUlHNWxkeUJFYVhKMGVWOVVlWEJsS0hSb2FYTXVaR2x5ZEhsTWFYTjBMbUoxWm1abGNpd2dhU0FxSUVScGNuUjVYMU4wY21sa1pTd2dSR2x5ZEhsZlRXVnRZbVZ5Y3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6Y0dGalpTNXdZWEpsYm5RZ1BTQnVaWGNnVUdGeVpXNTBYMVI1Y0dVb2RHaHBjeTV3WVhKbGJuUk1hWE4wTG1KMVptWmxjaXdnYVNBcUlGQmhjbVZ1ZEY5VGRISnBaR1VzSUZCaGNtVnVkRjlOWlcxaVpYSnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITndZV05sTG5wUGNtUmxjaUE5SUc1bGR5QmFUM0prWlhKZlZIbHdaU2gwYUdsekxucFBjbVJsY2t4cGMzUXVZblZtWm1WeUxDQnBJQ29nV2s5eVpHVnlYMU4wY21sa1pTd2dXazl5WkdWeVgwMWxiV0psY25NcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNCaFkyVXVZM1ZzYkdsdVowMWhjMnNnUFNCdVpYY2dRM1ZzYkdsdVowMWhjMnRmVkhsd1pTaDBhR2x6TG1OMWJHeHBibWROWVhOclRHbHpkQzVpZFdabVpYSXNJR2tnS2lCRGRXeHNhVzVuVFdGemExOVRkSEpwWkdVc0lFTjFiR3hwYm1kTllYTnJYMDFsYldKbGNuTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MzQmhZMlV1YjNCaFkybDBlU0E5SUc1bGR5QlBjR0ZqYVhSNVgxUjVjR1VvZEdocGN5NXZjR0ZqYVhSNVRHbHpkQzVpZFdabVpYSXNJR2tnS2lCUGNHRmphWFI1WDFOMGNtbGtaU3dnVDNCaFkybDBlVjlOWlcxaVpYSnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITndZV05sTG1sek0wUWdQU0J1WlhjZ1NYTXpSRjlVZVhCbEtIUm9hWE11YVhNelJFeHBjM1F1WW5WbVptVnlMQ0JwSUNvZ1NYTXpSRjlUZEhKcFpHVXNJRWx6TTBSZlRXVnRZbVZ5Y3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6Y0dGalpTNXphMlYzSUQwZ2JtVjNJRVpNVDBGVVgwRlNVa0ZaWDFSWlVFVW9kR2hwY3k1emEyVjNUR2x6ZEM1aWRXWm1aWElzSUdrZ0tpQlRhMlYzWDFOMGNtbGtaU3dnVTJ0bGQxOU5aVzFpWlhKektUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibjA3WEc1Y2JpaG1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lHeGxkQ0JUZFhCbGNpQTlJR1oxYm1OMGFXOXVLQ2w3ZlR0Y2JpQWdJQ0JUZFhCbGNpNXdjbTkwYjNSNWNHVWdQU0JWYm1sMFFtRnpaUzV3Y205MGIzUjVjR1U3WEc0Z0lDQWdUbTlrWlZWdWFYUXVjSEp2ZEc5MGVYQmxJRDBnYm1WM0lGTjFjR1Z5S0NrN1hHNTlLU2dwTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlFNXZaR1ZWYm1sME95SmRmUT09Il19