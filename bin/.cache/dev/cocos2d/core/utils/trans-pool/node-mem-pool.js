(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/utils/trans-pool/node-mem-pool.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var MemPool = require('./mem-pool');
        var NodeMemPool = function NodeMemPool(unitClass) {
            MemPool.call(this, unitClass);
        };
        (function () {
            var Super = function Super() {
            };
            Super.prototype = MemPool.prototype;
            NodeMemPool.prototype = new Super();
        }());
        var proto = NodeMemPool.prototype;
        proto._initNative = function () {
            this._nativeMemPool = new renderer.NodeMemPool();
        };
        proto._destroyUnit = function (unitID) {
            MemPool.prototype._destroyUnit.call(this, unitID);
            if (CC_JSB && CC_NATIVERENDERER) {
                this._nativeMemPool.removeNodeData(unitID);
            }
        };
        module.exports = NodeMemPool;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,