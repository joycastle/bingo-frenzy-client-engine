(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/utils/affine-transform.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var AffineTransform = function AffineTransform(a, b, c, d, tx, ty) {
            this.a = a;
            this.b = b;
            this.c = c;
            this.d = d;
            this.tx = tx;
            this.ty = ty;
        };
        AffineTransform.create = function (a, b, c, d, tx, ty) {
            return {
                a: a,
                b: b,
                c: c,
                d: d,
                tx: tx,
                ty: ty
            };
        };
        AffineTransform.identity = function () {
            return {
                a: 1,
                b: 0,
                c: 0,
                d: 1,
                tx: 0,
                ty: 0
            };
        };
        AffineTransform.clone = function (t) {
            return {
                a: t.a,
                b: t.b,
                c: t.c,
                d: t.d,
                tx: t.tx,
                ty: t.ty
            };
        };
        AffineTransform.concat = function (out, t1, t2) {
            var a = t1.a, b = t1.b, c = t1.c, d = t1.d, tx = t1.tx, ty = t1.ty;
            out.a = a * t2.a + b * t2.c;
            out.b = a * t2.b + b * t2.d;
            out.c = c * t2.a + d * t2.c;
            out.d = c * t2.b + d * t2.d;
            out.tx = tx * t2.a + ty * t2.c + t2.tx;
            out.ty = tx * t2.b + ty * t2.d + t2.ty;
            return out;
        };
        AffineTransform.invert = function (out, t) {
            var a = t.a, b = t.b, c = t.c, d = t.d;
            var determinant = 1 / (a * d - b * c);
            var tx = t.tx, ty = t.ty;
            out.a = determinant * d;
            out.b = -determinant * b;
            out.c = -determinant * c;
            out.d = determinant * a;
            out.tx = determinant * (c * ty - d * tx);
            out.ty = determinant * (b * tx - a * ty);
            return out;
        };
        AffineTransform.fromMat4 = function (out, mat) {
            var matm = mat.m;
            out.a = matm[0];
            out.b = matm[1];
            out.c = matm[4];
            out.d = matm[5];
            out.tx = matm[12];
            out.ty = matm[13];
            return out;
        };
        AffineTransform.transformVec2 = function (out, point, transOrY, t) {
            var x, y;
            if (t === undefined) {
                t = transOrY;
                x = point.x;
                y = point.y;
            } else {
                x = point;
                y = transOrY;
            }
            out.x = t.a * x + t.c * y + t.tx;
            out.y = t.b * x + t.d * y + t.ty;
            return out;
        };
        AffineTransform.transformSize = function (out, size, t) {
            out.width = t.a * size.width + t.c * size.height;
            out.height = t.b * size.width + t.d * size.height;
            return out;
        };
        AffineTransform.transformRect = function (out, rect, t) {
            var ol = rect.x;
            var ob = rect.y;
            var or = ol + rect.width;
            var ot = ob + rect.height;
            var lbx = t.a * ol + t.c * ob + t.tx;
            var lby = t.b * ol + t.d * ob + t.ty;
            var rbx = t.a * or + t.c * ob + t.tx;
            var rby = t.b * or + t.d * ob + t.ty;
            var ltx = t.a * ol + t.c * ot + t.tx;
            var lty = t.b * ol + t.d * ot + t.ty;
            var rtx = t.a * or + t.c * ot + t.tx;
            var rty = t.b * or + t.d * ot + t.ty;
            var minX = Math.min(lbx, rbx, ltx, rtx);
            var maxX = Math.max(lbx, rbx, ltx, rtx);
            var minY = Math.min(lby, rby, lty, rty);
            var maxY = Math.max(lby, rby, lty, rty);
            out.x = minX;
            out.y = minY;
            out.width = maxX - minX;
            out.height = maxY - minY;
            return out;
        };
        AffineTransform.transformObb = function (out_bl, out_tl, out_tr, out_br, rect, anAffineTransform) {
            var x = rect.x;
            var y = rect.y;
            var width = rect.width;
            var height = rect.height;
            var tx = anAffineTransform.a * x + anAffineTransform.c * y + anAffineTransform.tx;
            var ty = anAffineTransform.b * x + anAffineTransform.d * y + anAffineTransform.ty;
            var xa = anAffineTransform.a * width;
            var xb = anAffineTransform.b * width;
            var yc = anAffineTransform.c * height;
            var yd = anAffineTransform.d * height;
            out_tl.x = tx;
            out_tl.y = ty;
            out_tr.x = xa + tx;
            out_tr.y = xb + ty;
            out_bl.x = yc + tx;
            out_bl.y = yd + ty;
            out_br.x = xa + yc + tx;
            out_br.y = xb + yd + ty;
        };
        cc.AffineTransform = module.exports = AffineTransform;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,