(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/utils/mutable-forward-iterator.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        function MutableForwardIterator(array) {
            this.i = 0;
            this.array = array;
        }
        var proto = MutableForwardIterator.prototype;
        proto.remove = function (value) {
            var index = this.array.indexOf(value);
            if (index >= 0) {
                this.removeAt(index);
            }
        };
        proto.removeAt = function (i) {
            this.array.splice(i, 1);
            if (i <= this.i) {
                --this.i;
            }
        };
        proto.fastRemove = function (value) {
            var index = this.array.indexOf(value);
            if (index >= 0) {
                this.fastRemoveAt(index);
            }
        };
        proto.fastRemoveAt = function (i) {
            var array = this.array;
            array[i] = array[array.length - 1];
            --array.length;
            if (i <= this.i) {
                --this.i;
            }
        };
        proto.push = function (item) {
            this.array.push(item);
        };
        module.exports = MutableForwardIterator;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,