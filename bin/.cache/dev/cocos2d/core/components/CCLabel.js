(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCLabel.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var macro = require('../platform/CCMacro');
        var RenderComponent = require('./CCRenderComponent');
        var Material = require('../assets/material/CCMaterial');
        var LabelFrame = require('../renderer/utils/label/label-frame');
        var HorizontalAlign = macro.TextAlignment;
        var VerticalAlign = macro.VerticalTextAlignment;
        var Overflow = cc.Enum({
            NONE: 0,
            CLAMP: 1,
            SHRINK: 2,
            RESIZE_HEIGHT: 3
        });
        var CacheMode = cc.Enum({
            NONE: 0,
            BITMAP: 1,
            CHAR: 2
        });
        var Label = cc.Class({
            name: 'cc.Label',
            extends: RenderComponent,
            ctor: function ctor() {
                if (CC_EDITOR) {
                    this._userDefinedFont = null;
                }
                this._actualFontSize = 0;
                this._assemblerData = null;
                this._frame = null;
                this._ttfTexture = null;
                this._letterTexture = null;
                if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
                    this._activateMaterial = this._activateMaterialCanvas;
                } else {
                    this._activateMaterial = this._activateMaterialWebgl;
                }
            },
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.renderers/Label',
                help: 'i18n:COMPONENT.help_url.label',
                inspector: 'packages://inspector/inspectors/comps/label.js'
            },
            properties: {
                _useOriginalSize: true,
                _string: {
                    default: '',
                    formerlySerializedAs: '_N$string'
                },
                string: {
                    get: function get() {
                        return this._string;
                    },
                    set: function set(value) {
                        var oldValue = this._string;
                        this._string = '' + value;
                        if (this.string !== oldValue) {
                            this._lazyUpdateRenderData();
                        }
                        this._checkStringEmpty();
                    },
                    multiline: true,
                    tooltip: CC_DEV && 'i18n:COMPONENT.label.string'
                },
                horizontalAlign: {
                    default: HorizontalAlign.LEFT,
                    type: HorizontalAlign,
                    tooltip: CC_DEV && 'i18n:COMPONENT.label.horizontal_align',
                    notify: function notify(oldValue) {
                        if (this.horizontalAlign === oldValue)
                            return;
                        this._lazyUpdateRenderData();
                    },
                    animatable: false
                },
                verticalAlign: {
                    default: VerticalAlign.TOP,
                    type: VerticalAlign,
                    tooltip: CC_DEV && 'i18n:COMPONENT.label.vertical_align',
                    notify: function notify(oldValue) {
                        if (this.verticalAlign === oldValue)
                            return;
                        this._lazyUpdateRenderData();
                    },
                    animatable: false
                },
                actualFontSize: {
                    displayName: 'Actual Font Size',
                    animatable: false,
                    readonly: true,
                    get: function get() {
                        return this._actualFontSize;
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.label.actualFontSize'
                },
                _fontSize: 40,
                fontSize: {
                    get: function get() {
                        return this._fontSize;
                    },
                    set: function set(value) {
                        if (this._fontSize === value)
                            return;
                        this._fontSize = value;
                        this._lazyUpdateRenderData();
                    },
                    range: [
                        0,
                        512
                    ],
                    tooltip: CC_DEV && 'i18n:COMPONENT.label.font_size'
                },
                fontFamily: {
                    default: 'Arial',
                    tooltip: CC_DEV && 'i18n:COMPONENT.label.font_family',
                    notify: function notify(oldValue) {
                        if (this.fontFamily === oldValue)
                            return;
                        this._lazyUpdateRenderData();
                    },
                    animatable: false
                },
                _lineHeight: 40,
                lineHeight: {
                    get: function get() {
                        return this._lineHeight;
                    },
                    set: function set(value) {
                        if (this._lineHeight === value)
                            return;
                        this._lineHeight = value;
                        this._lazyUpdateRenderData();
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.label.line_height'
                },
                overflow: {
                    default: Overflow.NONE,
                    type: Overflow,
                    tooltip: CC_DEV && 'i18n:COMPONENT.label.overflow',
                    notify: function notify(oldValue) {
                        if (this.overflow === oldValue)
                            return;
                        this._lazyUpdateRenderData();
                    },
                    animatable: false
                },
                _enableWrapText: true,
                enableWrapText: {
                    get: function get() {
                        return this._enableWrapText;
                    },
                    set: function set(value) {
                        if (this._enableWrapText === value)
                            return;
                        this._enableWrapText = value;
                        this._lazyUpdateRenderData();
                    },
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.label.wrap'
                },
                _N$file: null,
                font: {
                    get: function get() {
                        return this._N$file;
                    },
                    set: function set(value) {
                        if (this.font === value)
                            return;
                        if (!value) {
                            this._isSystemFontUsed = true;
                        }
                        if (CC_EDITOR && value) {
                            this._userDefinedFont = value;
                        }
                        this._N$file = value;
                        if (value && this._isSystemFontUsed)
                            this._isSystemFontUsed = false;
                        if (typeof value === 'string') {
                            cc.warnID(4000);
                        }
                        this._resetAssembler();
                        this._applyFontTexture(true);
                        this._lazyUpdateRenderData();
                    },
                    type: cc.Font,
                    tooltip: CC_DEV && 'i18n:COMPONENT.label.font',
                    animatable: false
                },
                _isSystemFontUsed: true,
                useSystemFont: {
                    get: function get() {
                        return this._isSystemFontUsed;
                    },
                    set: function set(value) {
                        if (this._isSystemFontUsed === value)
                            return;
                        this._isSystemFontUsed = !!value;
                        if (CC_EDITOR) {
                            if (!value && this._userDefinedFont) {
                                this.font = this._userDefinedFont;
                                this.spacingX = this._spacingX;
                                return;
                            }
                        }
                        if (value) {
                            this.font = null;
                            this._resetAssembler();
                            this._applyFontTexture(true);
                            this._lazyUpdateRenderData();
                            this._checkStringEmpty();
                        }
                    },
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.label.system_font'
                },
                _bmFontOriginalSize: {
                    displayName: 'BMFont Original Size',
                    get: function get() {
                        if (this._N$file instanceof cc.BitmapFont) {
                            return this._N$file.fontSize;
                        } else {
                            return -1;
                        }
                    },
                    visible: true,
                    animatable: false
                },
                _spacingX: 0,
                spacingX: {
                    get: function get() {
                        return this._spacingX;
                    },
                    set: function set(value) {
                        this._spacingX = value;
                        this._lazyUpdateRenderData();
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.label.spacingX'
                },
                _batchAsBitmap: false,
                cacheMode: {
                    default: CacheMode.NONE,
                    type: CacheMode,
                    tooltip: CC_DEV && 'i18n:COMPONENT.label.cacheMode',
                    notify: function notify(oldValue) {
                        if (this.cacheMode === oldValue)
                            return;
                        if (oldValue === CacheMode.BITMAP && !(this.font instanceof cc.BitmapFont)) {
                            this._frame && this._frame._resetDynamicAtlasFrame();
                        }
                        if (oldValue === CacheMode.CHAR) {
                            this._ttfTexture = null;
                        }
                        this._resetAssembler();
                        this._applyFontTexture(true);
                        this._lazyUpdateRenderData();
                    },
                    animatable: false
                },
                _isBold: {
                    default: false,
                    serializable: false
                },
                _isItalic: {
                    default: false,
                    serializable: false
                },
                _isUnderline: {
                    default: false,
                    serializable: false
                }
            },
            statics: {
                HorizontalAlign: HorizontalAlign,
                VerticalAlign: VerticalAlign,
                Overflow: Overflow,
                CacheMode: CacheMode,
                _shareAtlas: null,
                clearCharCache: function clearCharCache() {
                    if (Label._shareAtlas) {
                        Label._shareAtlas.clearAllCache();
                    }
                }
            },
            onLoad: function onLoad() {
                if (this._batchAsBitmap && this.cacheMode === CacheMode.NONE) {
                    this.cacheMode = CacheMode.BITMAP;
                    this._batchAsBitmap = false;
                }
                if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
                    this.cacheMode = CacheMode.NONE;
                }
            },
            onEnable: function onEnable() {
                this._super();
                this.node.on(cc.Node.EventType.SIZE_CHANGED, this._lazyUpdateRenderData, this);
                this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this._lazyUpdateRenderData, this);
                this._forceUpdateRenderData();
                this._checkStringEmpty();
            },
            onDisable: function onDisable() {
                this._super();
                this.node.off(cc.Node.EventType.SIZE_CHANGED, this._lazyUpdateRenderData, this);
                this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this._lazyUpdateRenderData, this);
            },
            onDestroy: function onDestroy() {
                this._assembler && this._assembler._resetAssemblerData && this._assembler._resetAssemblerData(this._assemblerData);
                this._assemblerData = null;
                this._letterTexture = null;
                if (this._ttfTexture) {
                    this._ttfTexture.destroy();
                    this._ttfTexture = null;
                }
                this._super();
            },
            _updateColor: function _updateColor() {
                if (!(this.font instanceof cc.BitmapFont)) {
                    this._lazyUpdateRenderData();
                }
                RenderComponent.prototype._updateColor.call(this);
            },
            _resetAssembler: function _resetAssembler() {
                this._frame = null;
                RenderComponent.prototype._resetAssembler.call(this);
            },
            _canRender: function _canRender() {
                var result = this._super();
                var font = this.font;
                if (font instanceof cc.BitmapFont) {
                    var spriteFrame = font.spriteFrame;
                    if (!spriteFrame || !spriteFrame.textureLoaded()) {
                        result = false;
                    }
                }
                return result;
            },
            _checkStringEmpty: function _checkStringEmpty() {
                this.markForRender(!!this.string);
            },
            _on3DNodeChanged: function _on3DNodeChanged() {
                this._resetAssembler();
                this._applyFontTexture(true);
            },
            _applyFontTexture: function _applyFontTexture(force) {
                var font = this.font;
                if (font instanceof cc.BitmapFont) {
                    var spriteFrame = font.spriteFrame;
                    this._frame = spriteFrame;
                    var self = this;
                    var onBMFontTextureLoaded = function onBMFontTextureLoaded() {
                        self._frame._texture = spriteFrame._texture;
                        self._activateMaterial(force);
                        if (force) {
                            self._assembler && self._assembler.updateRenderData(self);
                        }
                    };
                    if (spriteFrame && spriteFrame.textureLoaded()) {
                        onBMFontTextureLoaded();
                    } else {
                        this.disableRender();
                        if (spriteFrame) {
                            spriteFrame.once('load', onBMFontTextureLoaded, this);
                            spriteFrame.ensureLoadTexture();
                        }
                    }
                } else {
                    if (!this._frame) {
                        this._frame = new LabelFrame();
                    }
                    if (this.cacheMode === CacheMode.CHAR) {
                        this._letterTexture = this._assembler._getAssemblerData();
                        this._frame._refreshTexture(this._letterTexture);
                    } else if (!this._ttfTexture) {
                        this._ttfTexture = new cc.Texture2D();
                        this._assemblerData = this._assembler._getAssemblerData();
                        this._ttfTexture.initWithElement(this._assemblerData.canvas);
                    }
                    if (this.cacheMode !== CacheMode.CHAR) {
                        this._frame._resetDynamicAtlasFrame();
                        this._frame._refreshTexture(this._ttfTexture);
                    }
                    this._activateMaterial(force);
                    if (force) {
                        this._assembler && this._assembler.updateRenderData(this);
                    }
                }
            },
            _activateMaterialCanvas: function _activateMaterialCanvas(force) {
                if (!force)
                    return;
                this._frame._texture.url = this.uuid + '_texture';
                this.markForUpdateRenderData(true);
                this.markForRender(true);
            },
            _activateMaterialWebgl: function _activateMaterialWebgl(force) {
                if (!force)
                    return;
                if (!this._frame) {
                    this.disableRender();
                    return;
                }
                var material = this.sharedMaterials[0];
                if (!material) {
                    material = Material.getInstantiatedBuiltinMaterial('2d-sprite', this);
                } else {
                    material = Material.getInstantiatedMaterial(material, this);
                }
                material.setProperty('texture', this._frame._texture);
                this.setMaterial(0, material);
                this.markForUpdateRenderData(true);
                this.markForRender(true);
            },
            _lazyUpdateRenderData: function _lazyUpdateRenderData() {
                this.setVertsDirty();
                this.markForUpdateRenderData(true);
            },
            _forceUpdateRenderData: function _forceUpdateRenderData() {
                this.setVertsDirty();
                this._resetAssembler();
                this._applyFontTexture(true);
                this.markForUpdateRenderData(true);
            },
            _enableBold: function _enableBold(enabled) {
                this._isBold = !!enabled;
            },
            _enableItalics: function _enableItalics(enabled) {
                this._isItalic = !!enabled;
            },
            _enableUnderline: function _enableUnderline(enabled) {
                this._isUnderline = !!enabled;
            }
        });
        cc.Label = module.exports = Label;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,