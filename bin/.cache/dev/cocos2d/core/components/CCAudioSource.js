(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCAudioSource.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var misc = require('../utils/misc');
        var Component = require('./CCComponent');
        var AudioClip = require('../assets/CCAudioClip');
        var AudioSource = cc.Class({
            name: 'cc.AudioSource',
            extends: Component,
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.others/AudioSource',
                help: 'i18n:COMPONENT.help_url.audiosource'
            },
            ctor: function ctor() {
                this.audio = new cc.Audio();
            },
            properties: {
                _clip: {
                    default: null,
                    type: AudioClip
                },
                _volume: 1,
                _mute: false,
                _loop: false,
                _pausedFlag: {
                    default: false,
                    serializable: false
                },
                isPlaying: {
                    get: function get() {
                        var state = this.audio.getState();
                        return state === cc.Audio.State.PLAYING;
                    },
                    visible: false
                },
                clip: {
                    get: function get() {
                        return this._clip;
                    },
                    set: function set(value) {
                        if (typeof value === 'string') {
                            cc.warnID(8401, 'cc.AudioSource', 'cc.AudioClip', 'AudioClip', 'cc.AudioClip', 'audio');
                            var self = this;
                            AudioClip._loadByUrl(value, function (err, clip) {
                                if (clip) {
                                    self.clip = clip;
                                }
                            });
                            return;
                        }
                        if (value === this._clip) {
                            return;
                        }
                        this._clip = value;
                        this.audio.stop();
                        if (this.preload) {
                            this.audio.src = this._clip;
                        }
                    },
                    type: AudioClip,
                    tooltip: CC_DEV && 'i18n:COMPONENT.audio.clip',
                    animatable: false
                },
                volume: {
                    get: function get() {
                        return this._volume;
                    },
                    set: function set(value) {
                        value = misc.clamp01(value);
                        this._volume = value;
                        if (!this._mute) {
                            this.audio.setVolume(value);
                        }
                        return value;
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.audio.volume'
                },
                mute: {
                    get: function get() {
                        return this._mute;
                    },
                    set: function set(value) {
                        this._mute = value;
                        this.audio.setVolume(value ? 0 : this._volume);
                        return value;
                    },
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.audio.mute'
                },
                loop: {
                    get: function get() {
                        return this._loop;
                    },
                    set: function set(value) {
                        this._loop = value;
                        this.audio.setLoop(value);
                        return value;
                    },
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.audio.loop'
                },
                playOnLoad: {
                    default: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.audio.play_on_load',
                    animatable: false
                },
                preload: {
                    default: false,
                    animatable: false
                }
            },
            _ensureDataLoaded: function _ensureDataLoaded() {
                if (this.audio.src !== this._clip) {
                    this.audio.src = this._clip;
                }
            },
            _pausedCallback: function _pausedCallback() {
                var state = this.audio.getState();
                if (state === cc.Audio.State.PLAYING) {
                    this.audio.pause();
                    this._pausedFlag = true;
                }
            },
            _restoreCallback: function _restoreCallback() {
                if (this._pausedFlag) {
                    this.audio.resume();
                }
                this._pausedFlag = false;
            },
            onLoad: function onLoad() {
                this.audio.setVolume(this._mute ? 0 : this._volume);
                this.audio.setLoop(this._loop);
            },
            onEnable: function onEnable() {
                if (this.preload) {
                    this.audio.src = this._clip;
                }
                if (this.playOnLoad) {
                    this.play();
                }
                cc.game.on(cc.game.EVENT_HIDE, this._pausedCallback, this);
                cc.game.on(cc.game.EVENT_SHOW, this._restoreCallback, this);
            },
            onDisable: function onDisable() {
                this.stop();
                cc.game.off(cc.game.EVENT_HIDE, this._pausedCallback, this);
                cc.game.off(cc.game.EVENT_SHOW, this._restoreCallback, this);
            },
            onDestroy: function onDestroy() {
                this.stop();
                this.audio.destroy();
                cc.audioEngine.uncache(this._clip);
            },
            play: function play() {
                if (!this._clip)
                    return;
                var audio = this.audio;
                if (this._clip.loaded) {
                    audio.stop();
                }
                this._ensureDataLoaded();
                audio.setCurrentTime(0);
                audio.play();
            },
            stop: function stop() {
                this.audio.stop();
            },
            pause: function pause() {
                this.audio.pause();
            },
            resume: function resume() {
                this._ensureDataLoaded();
                this.audio.resume();
            },
            rewind: function rewind() {
                this.audio.setCurrentTime(0);
            },
            getCurrentTime: function getCurrentTime() {
                return this.audio.getCurrentTime();
            },
            setCurrentTime: function setCurrentTime(time) {
                this.audio.setCurrentTime(time);
                return time;
            },
            getDuration: function getDuration() {
                return this.audio.getDuration();
            }
        });
        cc.AudioSource = module.exports = AudioSource;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDQXVkaW9Tb3VyY2UuanMiLCIvVXNlcnMvU2hhcmVkL2JpbmdvX2ZyZW56eS9lbmdpbmUvY29jb3MyZC9jb3JlL2NvbXBvbmVudHMvQ0NBdWRpb1NvdXJjZS5qcyJdLCJuYW1lcyI6WyJtaXNjIiwicmVxdWlyZSIsIkNvbXBvbmVudCIsIkF1ZGlvQ2xpcCIsIkF1ZGlvU291cmNlIiwiY2MiLCJDbGFzcyIsIm5hbWUiLCJleHRlbmRzIiwiZWRpdG9yIiwiQ0NfRURJVE9SIiwibWVudSIsImhlbHAiLCJjdG9yIiwiYXVkaW8iLCJBdWRpbyIsInByb3BlcnRpZXMiLCJfY2xpcCIsImRlZmF1bHQiLCJ0eXBlIiwiX3ZvbHVtZSIsIl9tdXRlIiwiX2xvb3AiLCJfcGF1c2VkRmxhZyIsInNlcmlhbGl6YWJsZSIsImlzUGxheWluZyIsImdldCIsInN0YXRlIiwiZ2V0U3RhdGUiLCJTdGF0ZSIsIlBMQVlJTkciLCJ2aXNpYmxlIiwiY2xpcCIsInNldCIsInZhbHVlIiwid2FybklEIiwic2VsZiIsIl9sb2FkQnlVcmwiLCJlcnIiLCJzdG9wIiwicHJlbG9hZCIsInNyYyIsInRvb2x0aXAiLCJDQ19ERVYiLCJhbmltYXRhYmxlIiwidm9sdW1lIiwiY2xhbXAwMSIsInNldFZvbHVtZSIsIm11dGUiLCJsb29wIiwic2V0TG9vcCIsInBsYXlPbkxvYWQiLCJfZW5zdXJlRGF0YUxvYWRlZCIsIl9wYXVzZWRDYWxsYmFjayIsInBhdXNlIiwiX3Jlc3RvcmVDYWxsYmFjayIsInJlc3VtZSIsIm9uTG9hZCIsIm9uRW5hYmxlIiwicGxheSIsImdhbWUiLCJvbiIsIkVWRU5UX0hJREUiLCJFVkVOVF9TSE9XIiwib25EaXNhYmxlIiwib2ZmIiwib25EZXN0cm95IiwiZGVzdHJveSIsImF1ZGlvRW5naW5lIiwidW5jYWNoZSIsImxvYWRlZCIsInNldEN1cnJlbnRUaW1lIiwicmV3aW5kIiwiZ2V0Q3VycmVudFRpbWUiLCJ0aW1lIiwiZ2V0RHVyYXRpb24iLCJtb2R1bGUiLCJleHBv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UCxDQUR3QjtBQUFBLGFBcFJMO0FBQUEsWUErUnZCRixjQUFBQSxFQUFnQixTQUFBLGNBQUEsQ0FBVUcsSUFBVixFQUFnQjtBQUFBLGdCQUM1QixLQUFLNUQsS0FBTCxDQUFXeUQsY0FBWCxDQUEwQkcsSUFBMUIsRUFENEI7QUFBQSxnQkFFNUIsT0FBT0EsSUFBUCxDQUY0QjtBQUFBLGFBL1JUO0FBQUEsWUEwU3ZCQyxXQUFBQSxFQUFhLFNBQUEsV0FBQSxHQUFZO0FBQUEsZ0JBQ3JCLE9BQU8sS0FBSzdELEtBQUwsQ0FBVzZELFdBQVgsRUFBUCxDQURxQjtBQUFBLGFBMVNGO0FBQUEsU0FBVHRFLENBQWxCO1FBZ1RBQSxFQUFBQSxDQUFHRCxXQUFIQyxHQUFpQnVFLE1BQUFBLENBQU9DLE9BQVBELEdBQWlCeEUsV0FBbENDIiwiZmlsZSI6IkNDQXVkaW9Tb3VyY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAxMy0yMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiAgd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmNvbnN0IG1pc2MgPSByZXF1aXJlKCcuLi91dGlscy9taXNjJyk7XG5jb25zdCBDb21wb25lbnQgPSByZXF1aXJlKCcuL0NDQ29tcG9uZW50Jyk7XG5jb25zdCBBdWRpb0NsaXAgPSByZXF1aXJlKCcuLi9hc3NldHMvQ0NBdWRpb0NsaXAnKTtcblxuLyoqXG4gKiAhI2VuIEF1ZGlvIFNvdXJjZS5cbiAqICEjemgg6Z+z6aKR5rqQ57uE5Lu277yM6IO95a+56Z+z6aKR5Ymq6L6R44CCXG4gKiBAY2xhc3MgQXVkaW9Tb3VyY2VcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG52YXIgQXVkaW9Tb3VyY2UgPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLkF1ZGlvU291cmNlJyxcbiAgICBleHRlbmRzOiBDb21wb25lbnQsXG5cbiAgICBlZGl0b3I6IENDX0VESVRPUiAmJiB7XG4gICAgICAgIG1lbnU6ICdpMThuOk1BSU5fTUVOVS5jb21wb25lbnQub3RoZXJzL0F1ZGlvU291cmNlJyxcbiAgICAgICAgaGVscDogJ2kxOG46Q09NUE9ORU5ULmhlbHBfdXJsLmF1ZGlvc291cmNlJyxcbiAgICB9LFxuXG4gICAgY3RvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBXZSBjYW4ndCByZXF1aXJlIEF1ZGlvIGhlcmUgYmVjYXVzZSBqc2IgQXVkaW8gaXMgaW1wbGVtZW50ZWQgb3V0c2lkZSB0aGUgZW5naW5lLFxuICAgICAgICAvLyBpdCBjYW4gb25seSB0YWtlIGVmZmVjdCByZWx5IG9uIG92ZXJ3cml0aW5nIGNjLkF1ZGlvXG4gICAgICAgIHRoaXMuYXVkaW8gPSBuZXcgY2MuQXVkaW8oKTtcbiAgICB9LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICBfY2xpcDoge1xuICAgICAgICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICAgICAgICAgIHR5cGU6IEF1ZGlvQ2xpcFxuICAgICAgICB9LFxuICAgICAgICBfdm9sdW1lOiAxLFxuICAgICAgICBfbXV0ZTogZmFsc2UsXG4gICAgICAgIF9sb29wOiBmYWxzZSxcbiAgICAgICAgX3BhdXNlZEZsYWc6IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgICAgICAgc2VyaWFsaXphYmxlOiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuXG4gICAgICAgICAqIElzIHRoZSBhdWRpbyBzb3VyY2UgcGxheWluZyAoUmVhZCBPbmx5KS4gPGJyLz5cbiAgICAgICAgICogTm90ZTogaXNQbGF5aW5nIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIE5hdGl2ZSBwbGF0Zm9ybXMuXG4gICAgICAgICAqICEjemhcbiAgICAgICAgICog6K+l6Z+z6aKR5Ymq6L6R5piv5ZCm5q2j5pKt5pS+77yI5Y+q6K+777yJ44CCPGJyLz5cbiAgICAgICAgICog5rOo5oSP77yaTmF0aXZlIOW5s+WPsOaaguaXtuS4jeaUr+aMgSBpc1BsYXlpbmfjgIJcbiAgICAgICAgICogQHByb3BlcnR5IGlzUGxheWluZ1xuICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgICAgICogQHJlYWRPbmx5XG4gICAgICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICBpc1BsYXlpbmc6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuYXVkaW8uZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGUgPT09IGNjLkF1ZGlvLlN0YXRlLlBMQVlJTkc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBUaGUgY2xpcCBvZiB0aGUgYXVkaW8gc291cmNlIHRvIHBsYXkuXG4gICAgICAgICAqICEjemgg6KaB5pKt5pS+55qE6Z+z6aKR5Ymq6L6R44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSBjbGlwXG4gICAgICAgICAqIEB0eXBlIHtBdWRpb0NsaXB9XG4gICAgICAgICAqIEBkZWZhdWx0IDFcbiAgICAgICAgICovXG4gICAgICAgIGNsaXA6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jbGlwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSBzaW5jZSAxLjEwXG4gICAgICAgICAgICAgICAgICAgIGNjLndhcm5JRCg4NDAxLCAnY2MuQXVkaW9Tb3VyY2UnLCAnY2MuQXVkaW9DbGlwJywgJ0F1ZGlvQ2xpcCcsICdjYy5BdWRpb0NsaXAnLCAnYXVkaW8nKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICBBdWRpb0NsaXAuX2xvYWRCeVVybCh2YWx1ZSwgZnVuY3Rpb24gKGVyciwgY2xpcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsaXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNsaXAgPSBjbGlwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdGhpcy5fY2xpcCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX2NsaXAgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmF1ZGlvLnN0b3AoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcmVsb2FkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXVkaW8uc3JjID0gdGhpcy5fY2xpcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHlwZTogQXVkaW9DbGlwLFxuICAgICAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC5hdWRpby5jbGlwJyxcbiAgICAgICAgICAgIGFuaW1hdGFibGU6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gVGhlIHZvbHVtZSBvZiB0aGUgYXVkaW8gc291cmNlLlxuICAgICAgICAgKiAhI3poIOmfs+mikea6kOeahOmfs+mHj++8iDAuMCB+IDEuMO+8ieOAglxuICAgICAgICAgKiBAcHJvcGVydHkgdm9sdW1lXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqIEBkZWZhdWx0IDFcbiAgICAgICAgICovXG4gICAgICAgIHZvbHVtZToge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZvbHVtZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbWlzYy5jbGFtcDAxKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl92b2x1bWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX211dGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdWRpby5zZXRWb2x1bWUodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC5hdWRpby52b2x1bWUnXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gSXMgdGhlIGF1ZGlvIHNvdXJjZSBtdXRlP1xuICAgICAgICAgKiAhI3poIOaYr+WQpumdmemfs+mfs+mikea6kOOAgk11dGUg5piv6K6+572u6Z+z6YeP5Li6IDDvvIzlj5bmtojpnZnpn7PmmK/mgaLlpI3ljp/mnaXnmoTpn7Pph4/jgIJcbiAgICAgICAgICogQHByb3BlcnR5IG11dGVcbiAgICAgICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICBtdXRlOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbXV0ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX211dGUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmF1ZGlvLnNldFZvbHVtZSh2YWx1ZSA/IDAgOiB0aGlzLl92b2x1bWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbmltYXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQuYXVkaW8ubXV0ZScsXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gSXMgdGhlIGF1ZGlvIHNvdXJjZSBsb29waW5nP1xuICAgICAgICAgKiAhI3poIOmfs+mikea6kOaYr+WQpuW+queOr+aSreaUvu+8n1xuICAgICAgICAgKiBAcHJvcGVydHkgbG9vcFxuICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgICAgICovXG4gICAgICAgIGxvb3A6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb29wO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9vcCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMuYXVkaW8uc2V0TG9vcCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFuaW1hdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC5hdWRpby5sb29wJ1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIElmIHNldCB0byB0cnVlLCB0aGUgYXVkaW8gc291cmNlIHdpbGwgYXV0b21hdGljYWxseSBzdGFydCBwbGF5aW5nIG9uIG9uRW5hYmxlLlxuICAgICAgICAgKiAhI3poIOWmguaenOiuvue9ruS4uiB0cnVl77yM6Z+z6aKR5rqQ5bCG5ZyoIG9uRW5hYmxlIOaXtuiHquWKqOaSreaUvuOAglxuICAgICAgICAgKiBAcHJvcGVydHkgcGxheU9uTG9hZFxuICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAgICAgKi9cbiAgICAgICAgcGxheU9uTG9hZDoge1xuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICAgICAgICB0b29sdGlwOiBDQ19ERVYgJiYgJ2kxOG46Q09NUE9ORU5ULmF1ZGlvLnBsYXlfb25fbG9hZCcsXG4gICAgICAgICAgICBhbmltYXRhYmxlOiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIHByZWxvYWQ6IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgICAgICAgYW5pbWF0YWJsZTogZmFsc2VcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfZW5zdXJlRGF0YUxvYWRlZCAoKSB7XG4gICAgICAgIGlmICh0aGlzLmF1ZGlvLnNyYyAhPT0gdGhpcy5fY2xpcCkge1xuICAgICAgICAgICAgdGhpcy5hdWRpby5zcmMgPSB0aGlzLl9jbGlwO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9wYXVzZWRDYWxsYmFjazogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLmF1ZGlvLmdldFN0YXRlKCk7XG4gICAgICAgIGlmIChzdGF0ZSA9PT0gY2MuQXVkaW8uU3RhdGUuUExBWUlORykge1xuICAgICAgICAgICAgdGhpcy5hdWRpby5wYXVzZSgpO1xuICAgICAgICAgICAgdGhpcy5fcGF1c2VkRmxhZyA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX3Jlc3RvcmVDYWxsYmFjazogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fcGF1c2VkRmxhZykge1xuICAgICAgICAgICAgdGhpcy5hdWRpby5yZXN1bWUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wYXVzZWRGbGFnID0gZmFsc2U7XG4gICAgfSxcblxuICAgIG9uTG9hZDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmF1ZGlvLnNldFZvbHVtZSh0aGlzLl9tdXRlID8gMCA6IHRoaXMuX3ZvbHVtZSk7XG4gICAgICAgIHRoaXMuYXVkaW8uc2V0TG9vcCh0aGlzLl9sb29wKTtcbiAgICB9LFxuXG4gICAgb25FbmFibGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJlbG9hZCkge1xuICAgICAgICAgICAgdGhpcy5hdWRpby5zcmMgPSB0aGlzLl9jbGlwO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnBsYXlPbkxvYWQpIHtcbiAgICAgICAgICAgIHRoaXMucGxheSgpO1xuICAgICAgICB9XG4gICAgICAgIGNjLmdhbWUub24oY2MuZ2FtZS5FVkVOVF9ISURFLCB0aGlzLl9wYXVzZWRDYWxsYmFjaywgdGhpcyk7XG4gICAgICAgIGNjLmdhbWUub24oY2MuZ2FtZS5FVkVOVF9TSE9XLCB0aGlzLl9yZXN0b3JlQ2FsbGJhY2ssIHRoaXMpO1xuICAgIH0sXG5cbiAgICBvbkRpc2FibGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIGNjLmdhbWUub2ZmKGNjLmdhbWUuRVZFTlRfSElERSwgdGhpcy5fcGF1c2VkQ2FsbGJhY2ssIHRoaXMpO1xuICAgICAgICBjYy5nYW1lLm9mZihjYy5nYW1lLkVWRU5UX1NIT1csIHRoaXMuX3Jlc3RvcmVDYWxsYmFjaywgdGhpcyk7XG4gICAgfSxcblxuICAgIG9uRGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgdGhpcy5hdWRpby5kZXN0cm95KCk7XG4gICAgICAgIGNjLmF1ZGlvRW5naW5lLnVuY2FjaGUodGhpcy5fY2xpcCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gUGxheXMgdGhlIGNsaXAuXG4gICAgICogISN6aCDmkq3mlL7pn7PpopHliarovpHjgIJcbiAgICAgKiBAbWV0aG9kIHBsYXlcbiAgICAgKi9cbiAgICBwbGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICggIXRoaXMuX2NsaXAgKSByZXR1cm47XG5cbiAgICAgICAgdmFyIGF1ZGlvID0gdGhpcy5hdWRpbztcbiAgICAgICAgaWYgKHRoaXMuX2NsaXAubG9hZGVkKSB7XG4gICAgICAgICAgICBhdWRpby5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZW5zdXJlRGF0YUxvYWRlZCgpO1xuICAgICAgICBhdWRpby5zZXRDdXJyZW50VGltZSgwKTtcbiAgICAgICAgYXVkaW8ucGxheSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFN0b3BzIHRoZSBjbGlwLlxuICAgICAqICEjemgg5YGc5q2i5b2T5YmN6Z+z6aKR5Ymq6L6R44CCXG4gICAgICogQG1ldGhvZCBzdG9wXG4gICAgICovXG4gICAgc3RvcDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmF1ZGlvLnN0b3AoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBQYXVzZSB0aGUgY2xpcC5cbiAgICAgKiAhI3poIOaaguWBnOW9k+WJjemfs+mikeWJqui+keOAglxuICAgICAqIEBtZXRob2QgcGF1c2VcbiAgICAgKi9cbiAgICBwYXVzZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmF1ZGlvLnBhdXNlKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gUmVzdW1lIHRoZSBjbGlwLlxuICAgICAqICEjemgg5oGi5aSN5pKt5pS+44CCXG4gICAgICogQG1ldGhvZCByZXN1bWVcbiAgICAgKi9cbiAgICByZXN1bWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fZW5zdXJlRGF0YUxvYWRlZCgpO1xuICAgICAgICB0aGlzLmF1ZGlvLnJlc3VtZSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFJld2luZCBwbGF5aW5nIG11c2ljLlxuICAgICAqICEjemgg5LuO5aS05byA5aeL5pKt5pS+44CCXG4gICAgICogQG1ldGhvZCByZXdpbmRcbiAgICAgKi9cbiAgICByZXdpbmQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMuYXVkaW8uc2V0Q3VycmVudFRpbWUoMCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gR2V0IGN1cnJlbnQgdGltZVxuICAgICAqICEjemgg6I635Y+W5b2T5YmN55qE5pKt5pS+5pe26Ze0XG4gICAgICogQG1ldGhvZCBnZXRDdXJyZW50VGltZVxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICBnZXRDdXJyZW50VGltZTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdWRpby5nZXRDdXJyZW50VGltZSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFNldCBjdXJyZW50IHRpbWVcbiAgICAgKiAhI3poIOiuvue9ruW9k+WJjeeahOaSreaUvuaXtumXtFxuICAgICAqIEBtZXRob2Qgc2V0Q3VycmVudFRpbWVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdGltZVxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICBzZXRDdXJyZW50VGltZTogZnVuY3Rpb24gKHRpbWUpIHtcbiAgICAgICAgdGhpcy5hdWRpby5zZXRDdXJyZW50VGltZSh0aW1lKTtcbiAgICAgICAgcmV0dXJuIHRpbWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gR2V0IGF1ZGlvIGR1cmF0aW9uXG4gICAgICogISN6aCDojrflj5blvZPliY3pn7PpopHnmoTplb/luqZcbiAgICAgKiBAbWV0aG9kIGdldER1cmF0aW9uXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldER1cmF0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF1ZGlvLmdldER1cmF0aW9uKCk7XG4gICAgfVxuXG59KTtcblxuY2MuQXVkaW9Tb3VyY2UgPSBtb2R1bGUuZXhwb3J0cyA9IEF1ZGlvU291cmNlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAxMy0yMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiAgd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbnZhciBtaXNjID0gcmVxdWlyZSgnLi4vdXRpbHMvbWlzYycpO1xudmFyIENvbXBvbmVudCA9IHJlcXVpcmUoJy4vQ0NDb21wb25lbnQnKTtcbnZhciBBdWRpb0NsaXAgPSByZXF1aXJlKCcuLi9hc3NldHMvQ0NBdWRpb0NsaXAnKTtcblxuLyoqXG4gKiAhI2VuIEF1ZGlvIFNvdXJjZS5cbiAqICEjemgg6Z+z6aKR5rqQ57uE5Lu277yM6IO95a+56Z+z6aKR5Ymq6L6R44CCXG4gKiBAY2xhc3MgQXVkaW9Tb3VyY2VcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG52YXIgQXVkaW9Tb3VyY2UgPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLkF1ZGlvU291cmNlJyxcbiAgICBleHRlbmRzOiBDb21wb25lbnQsXG5cbiAgICBlZGl0b3I6IENDX0VESVRPUiAmJiB7XG4gICAgICAgIG1lbnU6ICdpMThuOk1BSU5fTUVOVS5jb21wb25lbnQub3RoZXJzL0F1ZGlvU291cmNlJyxcbiAgICAgICAgaGVscDogJ2kxOG46Q09NUE9ORU5ULmhlbHBfdXJsLmF1ZGlvc291cmNlJ1xuICAgIH0sXG5cbiAgICBjdG9yOiBmdW5jdGlvbiBjdG9yKCkge1xuICAgICAgICAvLyBXZSBjYW4ndCByZXF1aXJlIEF1ZGlvIGhlcmUgYmVjYXVzZSBqc2IgQXVkaW8gaXMgaW1wbGVtZW50ZWQgb3V0c2lkZSB0aGUgZW5naW5lLFxuICAgICAgICAvLyBpdCBjYW4gb25seSB0YWtlIGVmZmVjdCByZWx5IG9uIG92ZXJ3cml0aW5nIGNjLkF1ZGlvXG4gICAgICAgIHRoaXMuYXVkaW8gPSBuZXcgY2MuQXVkaW8oKTtcbiAgICB9LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICBfY2xpcDoge1xuICAgICAgICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICAgICAgICAgIHR5cGU6IEF1ZGlvQ2xpcFxuICAgICAgICB9LFxuICAgICAgICBfdm9sdW1lOiAxLFxuICAgICAgICBfbXV0ZTogZmFsc2UsXG4gICAgICAgIF9sb29wOiBmYWxzZSxcbiAgICAgICAgX3BhdXNlZEZsYWc6IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgICAgICAgc2VyaWFsaXphYmxlOiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuXG4gICAgICAgICAqIElzIHRoZSBhdWRpbyBzb3VyY2UgcGxheWluZyAoUmVhZCBPbmx5KS4gPGJyLz5cbiAgICAgICAgICogTm90ZTogaXNQbGF5aW5nIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIE5hdGl2ZSBwbGF0Zm9ybXMuXG4gICAgICAgICAqICEjemhcbiAgICAgICAgICog6K+l6Z+z6aKR5Ymq6L6R5piv5ZCm5q2j5pKt5pS+77yI5Y+q6K+777yJ44CCPGJyLz5cbiAgICAgICAgICog5rOo5oSP77yaTmF0aXZlIOW5s+WPsOaaguaXtuS4jeaUr+aMgSBpc1BsYXlpbmfjgIJcbiAgICAgICAgICogQHByb3BlcnR5IGlzUGxheWluZ1xuICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgICAgICogQHJlYWRPbmx5XG4gICAgICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICBpc1BsYXlpbmc6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuYXVkaW8uZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGUgPT09IGNjLkF1ZGlvLlN0YXRlLlBMQVlJTkc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBUaGUgY2xpcCBvZiB0aGUgYXVkaW8gc291cmNlIHRvIHBsYXkuXG4gICAgICAgICAqICEjemgg6KaB5pKt5pS+55qE6Z+z6aKR5Ymq6L6R44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSBjbGlwXG4gICAgICAgICAqIEB0eXBlIHtBdWRpb0NsaXB9XG4gICAgICAgICAqIEBkZWZhdWx0IDFcbiAgICAgICAgICovXG4gICAgICAgIGNsaXA6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jbGlwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSBzaW5jZSAxLjEwXG4gICAgICAgICAgICAgICAgICAgIGNjLndhcm5JRCg4NDAxLCAnY2MuQXVkaW9Tb3VyY2UnLCAnY2MuQXVkaW9DbGlwJywgJ0F1ZGlvQ2xpcCcsICdjYy5BdWRpb0NsaXAnLCAnYXVkaW8nKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICBBdWRpb0NsaXAuX2xvYWRCeVVybCh2YWx1ZSwgZnVuY3Rpb24gKGVyciwgY2xpcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsaXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNsaXAgPSBjbGlwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdGhpcy5fY2xpcCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX2NsaXAgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmF1ZGlvLnN0b3AoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcmVsb2FkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXVkaW8uc3JjID0gdGhpcy5fY2xpcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHlwZTogQXVkaW9DbGlwLFxuICAgICAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC5hdWRpby5jbGlwJyxcbiAgICAgICAgICAgIGFuaW1hdGFibGU6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gVGhlIHZvbHVtZSBvZiB0aGUgYXVkaW8gc291cmNlLlxuICAgICAgICAgKiAhI3poIOmfs+mikea6kOeahOmfs+mHj++8iDAuMCB+IDEuMO+8ieOAglxuICAgICAgICAgKiBAcHJvcGVydHkgdm9sdW1lXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqIEBkZWZhdWx0IDFcbiAgICAgICAgICovXG4gICAgICAgIHZvbHVtZToge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZvbHVtZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbWlzYy5jbGFtcDAxKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl92b2x1bWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX211dGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdWRpby5zZXRWb2x1bWUodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC5hdWRpby52b2x1bWUnXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gSXMgdGhlIGF1ZGlvIHNvdXJjZSBtdXRlP1xuICAgICAgICAgKiAhI3poIOaYr+WQpumdmemfs+mfs+mikea6kOOAgk11dGUg5piv6K6+572u6Z+z6YeP5Li6IDDvvIzlj5bmtojpnZnpn7PmmK/mgaLlpI3ljp/mnaXnmoTpn7Pph4/jgIJcbiAgICAgICAgICogQHByb3BlcnR5IG11dGVcbiAgICAgICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICBtdXRlOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbXV0ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX211dGUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmF1ZGlvLnNldFZvbHVtZSh2YWx1ZSA/IDAgOiB0aGlzLl92b2x1bWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbmltYXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQuYXVkaW8ubXV0ZSdcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBJcyB0aGUgYXVkaW8gc291cmNlIGxvb3Bpbmc/XG4gICAgICAgICAqICEjemgg6Z+z6aKR5rqQ5piv5ZCm5b6q546v5pKt5pS+77yfXG4gICAgICAgICAqIEBwcm9wZXJ0eSBsb29wXG4gICAgICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAgICAgKi9cbiAgICAgICAgbG9vcDoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvb3A7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb29wID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5hdWRpby5zZXRMb29wKHZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYW5pbWF0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICB0b29sdGlwOiBDQ19ERVYgJiYgJ2kxOG46Q09NUE9ORU5ULmF1ZGlvLmxvb3AnXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gSWYgc2V0IHRvIHRydWUsIHRoZSBhdWRpbyBzb3VyY2Ugd2lsbCBhdXRvbWF0aWNhbGx5IHN0YXJ0IHBsYXlpbmcgb24gb25FbmFibGUuXG4gICAgICAgICAqICEjemgg5aaC5p6c6K6+572u5Li6IHRydWXvvIzpn7PpopHmupDlsIblnKggb25FbmFibGUg5pe26Ieq5Yqo5pKt5pS+44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSBwbGF5T25Mb2FkXG4gICAgICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICAgICAqL1xuICAgICAgICBwbGF5T25Mb2FkOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQuYXVkaW8ucGxheV9vbl9sb2FkJyxcbiAgICAgICAgICAgIGFuaW1hdGFibGU6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgcHJlbG9hZDoge1xuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICAgICAgICBhbmltYXRhYmxlOiBmYWxzZVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9lbnN1cmVEYXRhTG9hZGVkOiBmdW5jdGlvbiBfZW5zdXJlRGF0YUxvYWRlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuYXVkaW8uc3JjICE9PSB0aGlzLl9jbGlwKSB7XG4gICAgICAgICAgICB0aGlzLmF1ZGlvLnNyYyA9IHRoaXMuX2NsaXA7XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICBfcGF1c2VkQ2FsbGJhY2s6IGZ1bmN0aW9uIF9wYXVzZWRDYWxsYmFjaygpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5hdWRpby5nZXRTdGF0ZSgpO1xuICAgICAgICBpZiAoc3RhdGUgPT09IGNjLkF1ZGlvLlN0YXRlLlBMQVlJTkcpIHtcbiAgICAgICAgICAgIHRoaXMuYXVkaW8ucGF1c2UoKTtcbiAgICAgICAgICAgIHRoaXMuX3BhdXNlZEZsYWcgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9yZXN0b3JlQ2FsbGJhY2s6IGZ1bmN0aW9uIF9yZXN0b3JlQ2FsbGJhY2soKSB7XG4gICAgICAgIGlmICh0aGlzLl9wYXVzZWRGbGFnKSB7XG4gICAgICAgICAgICB0aGlzLmF1ZGlvLnJlc3VtZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3BhdXNlZEZsYWcgPSBmYWxzZTtcbiAgICB9LFxuXG4gICAgb25Mb2FkOiBmdW5jdGlvbiBvbkxvYWQoKSB7XG4gICAgICAgIHRoaXMuYXVkaW8uc2V0Vm9sdW1lKHRoaXMuX211dGUgPyAwIDogdGhpcy5fdm9sdW1lKTtcbiAgICAgICAgdGhpcy5hdWRpby5zZXRMb29wKHRoaXMuX2xvb3ApO1xuICAgIH0sXG5cbiAgICBvbkVuYWJsZTogZnVuY3Rpb24gb25FbmFibGUoKSB7XG4gICAgICAgIGlmICh0aGlzLnByZWxvYWQpIHtcbiAgICAgICAgICAgIHRoaXMuYXVkaW8uc3JjID0gdGhpcy5fY2xpcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wbGF5T25Mb2FkKSB7XG4gICAgICAgICAgICB0aGlzLnBsYXkoKTtcbiAgICAgICAgfVxuICAgICAgICBjYy5nYW1lLm9uKGNjLmdhbWUuRVZFTlRfSElERSwgdGhpcy5fcGF1c2VkQ2FsbGJhY2ssIHRoaXMpO1xuICAgICAgICBjYy5nYW1lLm9uKGNjLmdhbWUuRVZFTlRfU0hPVywgdGhpcy5fcmVzdG9yZUNhbGxiYWNrLCB0aGlzKTtcbiAgICB9LFxuXG4gICAgb25EaXNhYmxlOiBmdW5jdGlvbiBvbkRpc2FibGUoKSB7XG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICBjYy5nYW1lLm9mZihjYy5nYW1lLkVWRU5UX0hJREUsIHRoaXMuX3BhdXNlZENhbGxiYWNrLCB0aGlzKTtcbiAgICAgICAgY2MuZ2FtZS5vZmYoY2MuZ2FtZS5FVkVOVF9TSE9XLCB0aGlzLl9yZXN0b3JlQ2FsbGJhY2ssIHRoaXMpO1xuICAgIH0sXG5cbiAgICBvbkRlc3Ryb3k6IGZ1bmN0aW9uIG9uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIHRoaXMuYXVkaW8uZGVzdHJveSgpO1xuICAgICAgICBjYy5hdWRpb0VuZ2luZS51bmNhY2hlKHRoaXMuX2NsaXApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFBsYXlzIHRoZSBjbGlwLlxuICAgICAqICEjemgg5pKt5pS+6Z+z6aKR5Ymq6L6R44CCXG4gICAgICogQG1ldGhvZCBwbGF5XG4gICAgICovXG4gICAgcGxheTogZnVuY3Rpb24gcGxheSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jbGlwKSByZXR1cm47XG5cbiAgICAgICAgdmFyIGF1ZGlvID0gdGhpcy5hdWRpbztcbiAgICAgICAgaWYgKHRoaXMuX2NsaXAubG9hZGVkKSB7XG4gICAgICAgICAgICBhdWRpby5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZW5zdXJlRGF0YUxvYWRlZCgpO1xuICAgICAgICBhdWRpby5zZXRDdXJyZW50VGltZSgwKTtcbiAgICAgICAgYXVkaW8ucGxheSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFN0b3BzIHRoZSBjbGlwLlxuICAgICAqICEjemgg5YGc5q2i5b2T5YmN6Z+z6aKR5Ymq6L6R44CCXG4gICAgICogQG1ldGhvZCBzdG9wXG4gICAgICovXG4gICAgc3RvcDogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgICAgdGhpcy5hdWRpby5zdG9wKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gUGF1c2UgdGhlIGNsaXAuXG4gICAgICogISN6aCDmmoLlgZzlvZPliY3pn7PpopHliarovpHjgIJcbiAgICAgKiBAbWV0aG9kIHBhdXNlXG4gICAgICovXG4gICAgcGF1c2U6IGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgICAgICB0aGlzLmF1ZGlvLnBhdXNlKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gUmVzdW1lIHRoZSBjbGlwLlxuICAgICAqICEjemgg5oGi5aSN5pKt5pS+44CCXG4gICAgICogQG1ldGhvZCByZXN1bWVcbiAgICAgKi9cbiAgICByZXN1bWU6IGZ1bmN0aW9uIHJlc3VtZSgpIHtcbiAgICAgICAgdGhpcy5fZW5zdXJlRGF0YUxvYWRlZCgpO1xuICAgICAgICB0aGlzLmF1ZGlvLnJlc3VtZSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFJld2luZCBwbGF5aW5nIG11c2ljLlxuICAgICAqICEjemgg5LuO5aS05byA5aeL5pKt5pS+44CCXG4gICAgICogQG1ldGhvZCByZXdpbmRcbiAgICAgKi9cbiAgICByZXdpbmQ6IGZ1bmN0aW9uIHJld2luZCgpIHtcbiAgICAgICAgdGhpcy5hdWRpby5zZXRDdXJyZW50VGltZSgwKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBHZXQgY3VycmVudCB0aW1lXG4gICAgICogISN6aCDojrflj5blvZPliY3nmoTmkq3mlL7ml7bpl7RcbiAgICAgKiBAbWV0aG9kIGdldEN1cnJlbnRUaW1lXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldEN1cnJlbnRUaW1lOiBmdW5jdGlvbiBnZXRDdXJyZW50VGltZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXVkaW8uZ2V0Q3VycmVudFRpbWUoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBTZXQgY3VycmVudCB0aW1lXG4gICAgICogISN6aCDorr7nva7lvZPliY3nmoTmkq3mlL7ml7bpl7RcbiAgICAgKiBAbWV0aG9kIHNldEN1cnJlbnRUaW1lXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHRpbWVcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICovXG4gICAgc2V0Q3VycmVudFRpbWU6IGZ1bmN0aW9uIHNldEN1cnJlbnRUaW1lKHRpbWUpIHtcbiAgICAgICAgdGhpcy5hdWRpby5zZXRDdXJyZW50VGltZSh0aW1lKTtcbiAgICAgICAgcmV0dXJuIHRpbWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gR2V0IGF1ZGlvIGR1cmF0aW9uXG4gICAgICogISN6aCDojrflj5blvZPliY3pn7PpopHnmoTplb/luqZcbiAgICAgKiBAbWV0aG9kIGdldER1cmF0aW9uXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldER1cmF0aW9uOiBmdW5jdGlvbiBnZXREdXJhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXVkaW8uZ2V0RHVyYXRpb24oKTtcbiAgICB9XG5cbn0pO1xuXG5jYy5BdWRpb1NvdXJjZSA9IG1vZHVsZS5leHBvcnRzID0gQXVkaW9Tb3VyY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa05EUVhWa2FXOVRiM1Z5WTJVdWFuTWlYU3dpYm1GdFpYTWlPbHNpYldsell5SXNJbkpsY1hWcGNtVWlMQ0pEYjIxd2IyNWxiblFpTENKQmRXUnBiME5zYVhBaUxDSkJkV1JwYjFOdmRYSmpaU0lzSW1Oaklpd2lRMnhoYzNNaUxDSnVZVzFsSWl3aVpYaDBaVzVrY3lJc0ltVmthWFJ2Y2lJc0lrTkRYMFZFU1ZSUFVpSXNJbTFsYm5VaUxDSm9aV3h3SWl3aVkzUnZjaUlzSW1GMVpHbHZJaXdpUVhWa2FXOGlMQ0p3Y205d1pYSjBhV1Z6SWl3aVgyTnNhWEFpTENKa1pXWmhkV3gwSWl3aWRIbHdaU0lzSWw5MmIyeDFiV1VpTENKZmJYVjBaU0lzSWw5c2IyOXdJaXdpWDNCaGRYTmxaRVpzWVdjaUxDSnpaWEpwWVd4cGVtRmliR1VpTENKcGMxQnNZWGxwYm1jaUxDSm5aWFFpTENKemRHRjBaU0lzSW1kbGRGTjBZWFJsSWl3aVUzUmhkR1VpTENKUVRFRlpTVTVISWl3aWRtbHphV0pzWlNJc0ltTnNhWEFpTENKelpYUWlMQ0oyWVd4MVpTSXNJbmRoY201SlJDSXNJbk5sYkdZaUxDSmZiRzloWkVKNVZYSnNJaXdpWlhKeUlpd2ljM1J2Y0NJc0luQnlaV3h2WVdRaUxDSnpjbU1pTENKMGIyOXNkR2x3SWl3aVEwTmZSRVZXSWl3aVlXNXBiV0YwWVdKc1pTSXNJblp2YkhWdFpTSXNJbU5zWVcxd01ERWlMQ0p6WlhSV2IyeDFiV1VpTENKdGRYUmxJaXdpYkc5dmNDSXNJbk5sZEV4dmIzQWlMQ0p3YkdGNVQyNU1iMkZrSWl3aVgyVnVjM1Z5WlVSaGRHRk1iMkZrWldRaUxDSmZjR0YxYzJWa1EyRnNiR0poWTJzaUxDSndZWFZ6WlNJc0lsOXlaWE4wYjNKbFEyRnNiR0poWTJzaUxDSnlaWE4xYldVaUxDSnZia3h2WVdRaUxDSnZia1Z1WVdKc1pTSXNJbkJzWVhraUxDSm5ZVzFsSWl3aWIyNGlMQ0pGVmtWT1ZGOUlTVVJGSWl3aVJWWkZUbFJmVTBoUFZ5SXNJbTl1UkdsellXSnNaU0lzSW05bVppSXNJbTl1UkdWemRISnZlU0lzSW1SbGMzUnliM2tpTENKaGRXUnBiMFZ1WjJsdVpTSXNJblZ1WTJGamFHVWlMQ0pzYjJGa1pXUWlMQ0p6WlhSRGRYSnlaVzUwVkdsdFpTSXNJbkpsZDJsdVpDSXNJbWRsZEVOMWNuSmxiblJVYVcxbElpd2lkR2x0WlNJc0ltZGxkRVIxY21GMGFXOXVJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVFd1FrRXNTVUZCVFVFc1QwRkJUME1zVVVGQlVTeGxRVUZTTEVOQlFXSTdRVUZEUVN4SlFVRk5ReXhaUVVGWlJDeFJRVUZSTEdWQlFWSXNRMEZCYkVJN1FVRkRRU3hKUVVGTlJTeFpRVUZaUml4UlFVRlJMSFZDUVVGU0xFTkJRV3hDT3p0QlFVVkJPenM3T3pzN1FVRk5RU3hKUVVGSlJ5eGpRVUZqUXl4SFFVRkhReXhMUVVGSUxFTkJRVk03UVVGRGRrSkRMRlZCUVUwc1owSkJSR2xDTzBGQlJYWkNReXhoUVVGVFRpeFRRVVpqT3p0QlFVbDJRazhzV1VGQlVVTXNZVUZCWVR0QlFVTnFRa01zWTBGQlRTdzJRMEZFVnp0QlFVVnFRa01zWTBGQlRUdEJRVVpYTEV0QlNrVTdPMEZCVTNaQ1F5eFZRVUZOTEdkQ1FVRlpPMEZCUTJRN1FVRkRRVHRCUVVOQkxHRkJRVXRETEV0QlFVd3NSMEZCWVN4SlFVRkpWQ3hIUVVGSFZTeExRVUZRTEVWQlFXSTdRVUZEU0N4TFFXSnpRanM3UVVGbGRrSkRMR2RDUVVGWk8wRkJRMUpETEdWQlFVODdRVUZEU0VNc2NVSkJRVk1zU1VGRVRqdEJRVVZJUXl4clFrRkJUV2hDTzBGQlJrZ3NVMEZFUXp0QlFVdFNhVUlzYVVKQlFWTXNRMEZNUkR0QlFVMVNReXhsUVVGUExFdEJUa003UVVGUFVrTXNaVUZCVHl4TFFWQkRPMEZCVVZKRExIRkNRVUZoTzBGQlExUk1MSEZDUVVGVExFdEJSRUU3UVVGRlZFMHNNRUpCUVdNN1FVRkdUQ3hUUVZKTU96dEJRV0ZTT3pzN096czdPenM3T3pzN1FVRlpRVU1zYlVKQlFWYzdRVUZEVUVNc2FVSkJRVXNzWlVGQldUdEJRVU5pTEc5Q1FVRkpReXhSUVVGUkxFdEJRVXRpTEV0QlFVd3NRMEZCVjJNc1VVRkJXQ3hGUVVGYU8wRkJRMEVzZFVKQlFVOUVMRlZCUVZWMFFpeEhRVUZIVlN4TFFVRklMRU5CUVZOakxFdEJRVlFzUTBGQlpVTXNUMEZCYUVNN1FVRkRTQ3hoUVVwTk8wRkJTMUJETEhGQ1FVRlRPMEZCVEVZc1UwRjZRa2c3TzBGQmFVTlNPenM3T3pzN08wRkJUMEZETEdOQlFVMDdRVUZEUms0c2FVSkJRVXNzWlVGQldUdEJRVU5pTEhWQ1FVRlBMRXRCUVV0VUxFdEJRVm83UVVGRFNDeGhRVWhETzBGQlNVWm5RaXhwUWtGQlN5eGhRVUZWUXl4TFFVRldMRVZCUVdsQ08wRkJRMnhDTEc5Q1FVRkpMRTlCUVU5QkxFdEJRVkFzUzBGQmFVSXNVVUZCY2tJc1JVRkJLMEk3UVVGRE0wSTdRVUZEUVRkQ0xIVkNRVUZIT0VJc1RVRkJTQ3hEUVVGVkxFbEJRVllzUlVGQlowSXNaMEpCUVdoQ0xFVkJRV3RETEdOQlFXeERMRVZCUVd0RUxGZEJRV3hFTEVWQlFTdEVMR05CUVM5RUxFVkJRU3RGTEU5QlFTOUZPMEZCUTBFc2QwSkJRVWxETEU5QlFVOHNTVUZCV0R0QlFVTkJha01zT0VKQlFWVnJReXhWUVVGV0xFTkJRWEZDU0N4TFFVRnlRaXhGUVVFMFFpeFZRVUZWU1N4SFFVRldMRVZCUVdWT0xFbEJRV1lzUlVGQmNVSTdRVUZETjBNc05FSkJRVWxCTEVsQlFVb3NSVUZCVlR0QlFVTk9TU3hwUTBGQlMwb3NTVUZCVEN4SFFVRlpRU3hKUVVGYU8wRkJRMGc3UVVGRFNpeHhRa0ZLUkR0QlFVdEJPMEZCUTBnN08wRkJSVVFzYjBKQlFVbEZMRlZCUVZVc1MwRkJTMnBDTEV0QlFXNUNMRVZCUVRCQ08wRkJRM1JDTzBGQlEwZzdRVUZEUkN4eFFrRkJTMEVzUzBGQlRDeEhRVUZoYVVJc1MwRkJZanRCUVVOQkxIRkNRVUZMY0VJc1MwRkJUQ3hEUVVGWGVVSXNTVUZCV0R0QlFVTkJMRzlDUVVGSkxFdEJRVXRETEU5QlFWUXNSVUZCYTBJN1FVRkRaQ3g1UWtGQlN6RkNMRXRCUVV3c1EwRkJWekpDTEVkQlFWZ3NSMEZCYVVJc1MwRkJTM2hDTEV0QlFYUkNPMEZCUTBnN1FVRkRTaXhoUVhwQ1F6dEJRVEJDUmtVc2EwSkJRVTFvUWl4VFFURkNTanRCUVRKQ1JuVkRMSEZDUVVGVFF5eFZRVUZWTERKQ1FUTkNha0k3UVVFMFFrWkRMSGRDUVVGWk8wRkJOVUpXTEZOQmVFTkZPenRCUVhWRlVqczdPenM3T3p0QlFVOUJReXhuUWtGQlVUdEJRVU5LYmtJc2FVSkJRVXNzWlVGQldUdEJRVU5pTEhWQ1FVRlBMRXRCUVV0T0xFOUJRVm83UVVGRFNDeGhRVWhITzBGQlNVcGhMR2xDUVVGTExHRkJRVlZETEV0QlFWWXNSVUZCYVVJN1FVRkRiRUpCTEhkQ1FVRlJiRU1zUzBGQlN6aERMRTlCUVV3c1EwRkJZVm9zUzBGQllpeERRVUZTTzBGQlEwRXNjVUpCUVV0a0xFOUJRVXdzUjBGQlpXTXNTMEZCWmp0QlFVTkJMRzlDUVVGSkxFTkJRVU1zUzBGQlMySXNTMEZCVml4RlFVRnBRanRCUVVOaUxIbENRVUZMVUN4TFFVRk1MRU5CUVZkcFF5eFRRVUZZTEVOQlFYRkNZaXhMUVVGeVFqdEJRVU5JTzBGQlEwUXNkVUpCUVU5QkxFdEJRVkE3UVVGRFNDeGhRVmhITzBGQldVcFJMSEZDUVVGVFF5eFZRVUZWTzBGQldtWXNVMEU1UlVFN08wRkJOa1pTT3pzN096czdPMEZCVDBGTExHTkJRVTA3UVVGRFJuUkNMR2xDUVVGTExHVkJRVms3UVVGRFlpeDFRa0ZCVHl4TFFVRkxUQ3hMUVVGYU8wRkJRMGdzWVVGSVF6dEJRVWxHV1N4cFFrRkJTeXhoUVVGVlF5eExRVUZXTEVWQlFXbENPMEZCUTJ4Q0xIRkNRVUZMWWl4TFFVRk1MRWRCUVdGaExFdEJRV0k3UVVGRFFTeHhRa0ZCUzNCQ0xFdEJRVXdzUTBGQlYybERMRk5CUVZnc1EwRkJjVUppTEZGQlFWRXNRMEZCVWl4SFFVRlpMRXRCUVV0a0xFOUJRWFJETzBGQlEwRXNkVUpCUVU5akxFdEJRVkE3UVVGRFNDeGhRVkpETzBGQlUwWlZMSGRDUVVGWkxFdEJWRlk3UVVGVlJrWXNjVUpCUVZORExGVkJRVlU3UVVGV2FrSXNVMEZ3UjBVN08wRkJhVWhTT3pzN096czdPMEZCVDBGTkxHTkJRVTA3UVVGRFJuWkNMR2xDUVVGTExHVkJRVms3UVVGRFlpeDFRa0ZCVHl4TFFVRkxTaXhMUVVGYU8wRkJRMGdzWVVGSVF6dEJRVWxHVnl4cFFrRkJTeXhoUVVGVlF5eExRVUZXTEVWQlFXbENPMEZCUTJ4Q0xIRkNRVUZMV2l4TFFVRk1MRWRCUVdGWkxFdEJRV0k3UVVGRFFTeHhRa0ZCUzNCQ0xFdEJRVXdzUTBGQlYyOURMRTlCUVZnc1EwRkJiVUpvUWl4TFFVRnVRanRCUVVOQkxIVkNRVUZQUVN4TFFVRlFPMEZCUTBnc1lVRlNRenRCUVZOR1ZTeDNRa0ZCV1N4TFFWUldPMEZCVlVaR0xIRkNRVUZUUXl4VlFVRlZPMEZCVm1wQ0xGTkJlRWhGT3p0QlFYRkpVanM3T3pzN096dEJRVTlCVVN4dlFrRkJXVHRCUVVOU2FrTXNjVUpCUVZNc1MwRkVSRHRCUVVWU2QwSXNjVUpCUVZORExGVkJRVlVzYlVOQlJsZzdRVUZIVWtNc2QwSkJRVms3UVVGSVNpeFRRVFZKU2pzN1FVRnJTbEpLTEdsQ1FVRlRPMEZCUTB4MFFpeHhRa0ZCVXl4TFFVUktPMEZCUlV3d1FpeDNRa0ZCV1R0QlFVWlFPMEZCYkVwRUxFdEJabGM3TzBGQmRVdDJRbEVzY1VKQmRrdDFRaXdyUWtGMVMwWTdRVUZEYWtJc1dVRkJTU3hMUVVGTGRFTXNTMEZCVEN4RFFVRlhNa0lzUjBGQldDeExRVUZ0UWl4TFFVRkxlRUlzUzBGQk5VSXNSVUZCYlVNN1FVRkRMMElzYVVKQlFVdElMRXRCUVV3c1EwRkJWekpDTEVkQlFWZ3NSMEZCYVVJc1MwRkJTM2hDTEV0QlFYUkNPMEZCUTBnN1FVRkRTaXhMUVROTGMwSTdPenRCUVRaTGRrSnZReXh4UWtGQmFVSXNNa0pCUVZrN1FVRkRla0lzV1VGQlNURkNMRkZCUVZFc1MwRkJTMklzUzBGQlRDeERRVUZYWXl4UlFVRllMRVZCUVZvN1FVRkRRU3haUVVGSlJDeFZRVUZWZEVJc1IwRkJSMVVzUzBGQlNDeERRVUZUWXl4TFFVRlVMRU5CUVdWRExFOUJRVGRDTEVWQlFYTkRPMEZCUTJ4RExHbENRVUZMYUVJc1MwRkJUQ3hEUVVGWGQwTXNTMEZCV0R0QlFVTkJMR2xDUVVGTEwwSXNWMEZCVEN4SFFVRnRRaXhKUVVGdVFqdEJRVU5JTzBGQlEwb3NTMEZ1VEhOQ096dEJRWEZNZGtKblF5eHpRa0ZCYTBJc05FSkJRVms3UVVGRE1VSXNXVUZCU1N4TFFVRkxhRU1zVjBGQlZDeEZRVUZ6UWp0QlFVTnNRaXhwUWtGQlMxUXNTMEZCVEN4RFFVRlhNRU1zVFVGQldEdEJRVU5JTzBGQlEwUXNZVUZCUzJwRExGZEJRVXdzUjBGQmJVSXNTMEZCYmtJN1FVRkRTQ3hMUVRGTWMwSTdPMEZCTkV4MlFtdERMRmxCUVZFc2EwSkJRVms3UVVGRGFFSXNZVUZCU3pORExFdEJRVXdzUTBGQlYybERMRk5CUVZnc1EwRkJjVUlzUzBGQlN6RkNMRXRCUVV3c1IwRkJZU3hEUVVGaUxFZEJRV2xDTEV0QlFVdEVMRTlCUVRORE8wRkJRMEVzWVVGQlMwNHNTMEZCVEN4RFFVRlhiME1zVDBGQldDeERRVUZ0UWl4TFFVRkxOVUlzUzBGQmVFSTdRVUZEU0N4TFFTOU1jMEk3TzBGQmFVMTJRbTlETEdOQlFWVXNiMEpCUVZrN1FVRkRiRUlzV1VGQlNTeExRVUZMYkVJc1QwRkJWQ3hGUVVGclFqdEJRVU5rTEdsQ1FVRkxNVUlzUzBGQlRDeERRVUZYTWtJc1IwRkJXQ3hIUVVGcFFpeExRVUZMZUVJc1MwRkJkRUk3UVVGRFNEdEJRVU5FTEZsQlFVa3NTMEZCUzJ0RExGVkJRVlFzUlVGQmNVSTdRVUZEYWtJc2FVSkJRVXRSTEVsQlFVdzdRVUZEU0R0QlFVTkVkRVFzVjBGQlIzVkVMRWxCUVVnc1EwRkJVVU1zUlVGQlVpeERRVUZYZUVRc1IwRkJSM1ZFTEVsQlFVZ3NRMEZCVVVVc1ZVRkJia0lzUlVGQkswSXNTMEZCUzFRc1pVRkJjRU1zUlVGQmNVUXNTVUZCY2tRN1FVRkRRV2hFTEZkQlFVZDFSQ3hKUVVGSUxFTkJRVkZETEVWQlFWSXNRMEZCVjNoRUxFZEJRVWQxUkN4SlFVRklMRU5CUVZGSExGVkJRVzVDTEVWQlFTdENMRXRCUVV0U0xHZENRVUZ3UXl4RlFVRnpSQ3hKUVVGMFJEdEJRVU5JTEV0Qk1VMXpRanM3UVVFMFRYWkNVeXhsUVVGWExIRkNRVUZaTzBGQlEyNUNMR0ZCUVV0NlFpeEpRVUZNTzBGQlEwRnNReXhYUVVGSGRVUXNTVUZCU0N4RFFVRlJTeXhIUVVGU0xFTkJRVmsxUkN4SFFVRkhkVVFzU1VGQlNDeERRVUZSUlN4VlFVRndRaXhGUVVGblF5eExRVUZMVkN4bFFVRnlReXhGUVVGelJDeEpRVUYwUkR0QlFVTkJhRVFzVjBGQlIzVkVMRWxCUVVnc1EwRkJVVXNzUjBGQlVpeERRVUZaTlVRc1IwRkJSM1ZFTEVsQlFVZ3NRMEZCVVVjc1ZVRkJjRUlzUlVGQlowTXNTMEZCUzFJc1owSkJRWEpETEVWQlFYVkVMRWxCUVhaRU8wRkJRMGdzUzBGb1RuTkNPenRCUVd0T2RrSlhMR1ZCUVZjc2NVSkJRVms3UVVGRGJrSXNZVUZCU3pOQ0xFbEJRVXc3UVVGRFFTeGhRVUZMZWtJc1MwRkJUQ3hEUVVGWGNVUXNUMEZCV0R0QlFVTkJPVVFzVjBGQlJ5dEVMRmRCUVVnc1EwRkJaVU1zVDBGQlppeERRVUYxUWl4TFFVRkxjRVFzUzBGQk5VSTdRVUZEU0N4TFFYUk9jMEk3TzBGQmQwNTJRanM3T3pzN1FVRkxRVEJETEZWQlFVMHNaMEpCUVZrN1FVRkRaQ3haUVVGTExFTkJRVU1zUzBGQlN6RkRMRXRCUVZnc1JVRkJiVUk3TzBGQlJXNUNMRmxCUVVsSUxGRkJRVkVzUzBGQlMwRXNTMEZCYWtJN1FVRkRRU3haUVVGSkxFdEJRVXRITEV0QlFVd3NRMEZCVjNGRUxFMUJRV1lzUlVGQmRVSTdRVUZEYmtKNFJDeHJRa0ZCVFhsQ0xFbEJRVTQ3UVVGRFNEdEJRVU5FTEdGQlFVdGhMR2xDUVVGTU8wRkJRMEYwUXl4alFVRk5lVVFzWTBGQlRpeERRVUZ4UWl4RFFVRnlRanRCUVVOQmVrUXNZMEZCVFRaRExFbEJRVTQ3UVVGRFNDeExRWFpQYzBJN08wRkJlVTkyUWpzN096czdRVUZMUVhCQ0xGVkJRVTBzWjBKQlFWazdRVUZEWkN4aFFVRkxla0lzUzBGQlRDeERRVUZYZVVJc1NVRkJXRHRCUVVOSUxFdEJhRkJ6UWpzN1FVRnJVSFpDT3pzN096dEJRVXRCWlN4WFFVRlBMR2xDUVVGWk8wRkJRMllzWVVGQlMzaERMRXRCUVV3c1EwRkJWM2RETEV0QlFWZzdRVUZEU0N4TFFYcFFjMEk3TzBGQk1sQjJRanM3T3pzN1FVRkxRVVVzV1VGQlVTeHJRa0ZCV1R0QlFVTm9RaXhoUVVGTFNpeHBRa0ZCVER0QlFVTkJMR0ZCUVV0MFF5eExRVUZNTEVOQlFWY3dReXhOUVVGWU8wRkJRMGdzUzBGdVVYTkNPenRCUVhGUmRrSTdPenM3TzBGQlMwRm5RaXhaUVVGUkxHdENRVUZWTzBGQlEyUXNZVUZCU3pGRUxFdEJRVXdzUTBGQlYzbEVMR05CUVZnc1EwRkJNRUlzUTBGQk1VSTdRVUZEU0N4TFFUVlJjMEk3TzBGQk9GRjJRanM3T3pzN08wRkJUVUZGTEc5Q1FVRm5RaXd3UWtGQldUdEJRVU40UWl4bFFVRlBMRXRCUVVzelJDeExRVUZNTEVOQlFWY3lSQ3hqUVVGWUxFVkJRVkE3UVVGRFNDeExRWFJTYzBJN08wRkJkMUoyUWpzN096czdPenRCUVU5QlJpeHZRa0ZCWjBJc2QwSkJRVlZITEVsQlFWWXNSVUZCWjBJN1FVRkROVUlzWVVGQlN6VkVMRXRCUVV3c1EwRkJWM2xFTEdOQlFWZ3NRMEZCTUVKSExFbEJRVEZDTzBGQlEwRXNaVUZCVDBFc1NVRkJVRHRCUVVOSUxFdEJiRk56UWpzN1FVRnZVM1pDT3pzN096czdRVUZOUVVNc2FVSkJRV0VzZFVKQlFWazdRVUZEY2tJc1pVRkJUeXhMUVVGTE4wUXNTMEZCVEN4RFFVRlhOa1FzVjBGQldDeEZRVUZRTzBGQlEwZzdPMEZCTlZOelFpeERRVUZVTEVOQlFXeENPenRCUVdkVVFYUkZMRWRCUVVkRUxGZEJRVWdzUjBGQmFVSjNSU3hQUVVGUFF5eFBRVUZRTEVkQlFXbENla1VzVjBGQmJFTWlMQ0ptYVd4bElqb2lRME5CZFdScGIxTnZkWEpqWlM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdRMjl3ZVhKcFoyaDBJQ2hqS1NBeU1ERXpMVEl3TVRZZ1EyaDFhMjl1WnlCVVpXTm9ibTlzYjJkcFpYTWdTVzVqTGx4dUlFTnZjSGx5YVdkb2RDQW9ZeWtnTWpBeE55MHlNREU0SUZocFlXMWxiaUJaWVdwcElGTnZablIzWVhKbElFTnZMaXdnVEhSa0xseHVYRzRnYUhSMGNITTZMeTkzZDNjdVkyOWpiM011WTI5dEwxeHVYRzRnVUdWeWJXbHpjMmx2YmlCcGN5Qm9aWEpsWW5rZ1ozSmhiblJsWkN3Z1puSmxaU0J2WmlCamFHRnlaMlVzSUhSdklHRnVlU0J3WlhKemIyNGdiMkowWVdsdWFXNW5JR0VnWTI5d2VWeHVJRzltSUhSb2FYTWdjMjltZEhkaGNtVWdZVzVrSUdGemMyOWphV0YwWldRZ1pXNW5hVzVsSUhOdmRYSmpaU0JqYjJSbElDaDBhR1VnWENKVGIyWjBkMkZ5WlZ3aUtTd2dZU0JzYVcxcGRHVmtMRnh1SUNCM2IzSnNaSGRwWkdVc0lISnZlV0ZzZEhrdFpuSmxaU3dnYm05dUxXRnpjMmxuYm1GaWJHVXNJSEpsZG05allXSnNaU0JoYm1RZ2JtOXVMV1Y0WTJ4MWMybDJaU0JzYVdObGJuTmxYRzRnZEc4Z2RYTmxJRU52WTI5eklFTnlaV0YwYjNJZ2MyOXNaV3g1SUhSdklHUmxkbVZzYjNBZ1oyRnRaWE1nYjI0Z2VXOTFjaUIwWVhKblpYUWdjR3hoZEdadmNtMXpMaUJaYjNVZ2MyaGhiR3hjYmlBZ2JtOTBJSFZ6WlNCRGIyTnZjeUJEY21WaGRHOXlJSE52Wm5SM1lYSmxJR1p2Y2lCa1pYWmxiRzl3YVc1bklHOTBhR1Z5SUhOdlpuUjNZWEpsSUc5eUlIUnZiMnh6SUhSb1lYUW5jMXh1SUNCMWMyVmtJR1p2Y2lCa1pYWmxiRzl3YVc1bklHZGhiV1Z6TGlCWmIzVWdZWEpsSUc1dmRDQm5jbUZ1ZEdWa0lIUnZJSEIxWW14cGMyZ3NJR1JwYzNSeWFXSjFkR1VzWEc0Z0lITjFZbXhwWTJWdWMyVXNJR0Z1WkM5dmNpQnpaV3hzSUdOdmNHbGxjeUJ2WmlCRGIyTnZjeUJEY21WaGRHOXlMbHh1WEc0Z1ZHaGxJSE52Wm5SM1lYSmxJRzl5SUhSdmIyeHpJR2x1SUhSb2FYTWdUR2xqWlc1elpTQkJaM0psWlcxbGJuUWdZWEpsSUd4cFkyVnVjMlZrTENCdWIzUWdjMjlzWkM1Y2JpQllhV0Z0Wlc0Z1dXRnFhU0JUYjJaMGQyRnlaU0JEYnk0c0lFeDBaQzRnY21WelpYSjJaWE1nWVd4c0lISnBaMmgwY3lCdWIzUWdaWGh3Y21WemMyeDVJR2R5WVc1MFpXUWdkRzhnZVc5MUxseHVYRzRnVkVoRklGTlBSbFJYUVZKRklFbFRJRkJTVDFaSlJFVkVJRndpUVZNZ1NWTmNJaXdnVjBsVVNFOVZWQ0JYUVZKU1FVNVVXU0JQUmlCQlRsa2dTMGxPUkN3Z1JWaFFVa1ZUVXlCUFVseHVJRWxOVUV4SlJVUXNJRWxPUTB4VlJFbE9SeUJDVlZRZ1RrOVVJRXhKVFVsVVJVUWdWRThnVkVoRklGZEJVbEpCVGxSSlJWTWdUMFlnVFVWU1EwaEJUbFJCUWtsTVNWUlpMRnh1SUVaSlZFNUZVMU1nUms5U0lFRWdVRUZTVkVsRFZVeEJVaUJRVlZKUVQxTkZJRUZPUkNCT1QwNUpUa1pTU1U1SFJVMUZUbFF1SUVsT0lFNVBJRVZXUlU1VUlGTklRVXhNSUZSSVJWeHVJRUZWVkVoUFVsTWdUMUlnUTA5UVdWSkpSMGhVSUVoUFRFUkZVbE1nUWtVZ1RFbEJRa3hGSUVaUFVpQkJUbGtnUTB4QlNVMHNJRVJCVFVGSFJWTWdUMUlnVDFSSVJWSmNiaUJNU1VGQ1NVeEpWRmtzSUZkSVJWUklSVklnU1U0Z1FVNGdRVU5VU1U5T0lFOUdJRU5QVGxSU1FVTlVMQ0JVVDFKVUlFOVNJRTlVU0VWU1YwbFRSU3dnUVZKSlUwbE9SeUJHVWs5TkxGeHVJRTlWVkNCUFJpQlBVaUJKVGlCRFQwNU9SVU5VU1U5T0lGZEpWRWdnVkVoRklGTlBSbFJYUVZKRklFOVNJRlJJUlNCVlUwVWdUMUlnVDFSSVJWSWdSRVZCVEVsT1IxTWdTVTVjYmlCVVNFVWdVMDlHVkZkQlVrVXVYRzRnS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpOWNibHh1WTI5dWMzUWdiV2x6WXlBOUlISmxjWFZwY21Vb0p5NHVMM1YwYVd4ekwyMXBjMk1uS1R0Y2JtTnZibk4wSUVOdmJYQnZibVZ1ZENBOUlISmxjWFZwY21Vb0p5NHZRME5EYjIxd2IyNWxiblFuS1R0Y2JtTnZibk4wSUVGMVpHbHZRMnhwY0NBOUlISmxjWFZwY21Vb0p5NHVMMkZ6YzJWMGN5OURRMEYxWkdsdlEyeHBjQ2NwTzF4dVhHNHZLaXBjYmlBcUlDRWpaVzRnUVhWa2FXOGdVMjkxY21ObExseHVJQ29nSVNONmFDRHBuN1Bwb3BIbXVwRG51NFRrdTdidnZJem9nNzNscjducG43UHBvcEhsaWFyb3ZwSGpnSUpjYmlBcUlFQmpiR0Z6Y3lCQmRXUnBiMU52ZFhKalpWeHVJQ29nUUdWNGRHVnVaSE1nUTI5dGNHOXVaVzUwWEc0Z0tpOWNiblpoY2lCQmRXUnBiMU52ZFhKalpTQTlJR05qTGtOc1lYTnpLSHRjYmlBZ0lDQnVZVzFsT2lBblkyTXVRWFZrYVc5VGIzVnlZMlVuTEZ4dUlDQWdJR1Y0ZEdWdVpITTZJRU52YlhCdmJtVnVkQ3hjYmx4dUlDQWdJR1ZrYVhSdmNqb2dRME5mUlVSSlZFOVNJQ1ltSUh0Y2JpQWdJQ0FnSUNBZ2JXVnVkVG9nSjJreE9HNDZUVUZKVGw5TlJVNVZMbU52YlhCdmJtVnVkQzV2ZEdobGNuTXZRWFZrYVc5VGIzVnlZMlVuTEZ4dUlDQWdJQ0FnSUNCb1pXeHdPaUFuYVRFNGJqcERUMDFRVDA1RlRsUXVhR1ZzY0Y5MWNtd3VZWFZrYVc5emIzVnlZMlVuTEZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JqZEc5eU9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUM4dklGZGxJR05oYmlkMElISmxjWFZwY21VZ1FYVmthVzhnYUdWeVpTQmlaV05oZFhObElHcHpZaUJCZFdScGJ5QnBjeUJwYlhCc1pXMWxiblJsWkNCdmRYUnphV1JsSUhSb1pTQmxibWRwYm1Vc1hHNGdJQ0FnSUNBZ0lDOHZJR2wwSUdOaGJpQnZibXg1SUhSaGEyVWdaV1ptWldOMElISmxiSGtnYjI0Z2IzWmxjbmR5YVhScGJtY2dZMk11UVhWa2FXOWNiaUFnSUNBZ0lDQWdkR2hwY3k1aGRXUnBieUE5SUc1bGR5QmpZeTVCZFdScGJ5Z3BPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQndjbTl3WlhKMGFXVnpPaUI3WEc0Z0lDQWdJQ0FnSUY5amJHbHdPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaV1poZFd4ME9pQnVkV3hzTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ1FYVmthVzlEYkdsd1hHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJRjkyYjJ4MWJXVTZJREVzWEc0Z0lDQWdJQ0FnSUY5dGRYUmxPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdYMnh2YjNBNklHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNCZmNHRjFjMlZrUm14aFp6b2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZERvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaWEpwWVd4cGVtRmliR1U2SUdaaGJITmxYRzRnSUNBZ0lDQWdJSDBzWEc1Y2JpQWdJQ0FnSUNBZ0x5b3FYRzRnSUNBZ0lDQWdJQ0FxSUNFalpXNWNiaUFnSUNBZ0lDQWdJQ29nU1hNZ2RHaGxJR0YxWkdsdklITnZkWEpqWlNCd2JHRjVhVzVuSUNoU1pXRmtJRTl1YkhrcExpQThZbkl2UGx4dUlDQWdJQ0FnSUNBZ0tpQk9iM1JsT2lCcGMxQnNZWGxwYm1jZ2FYTWdibTkwSUhOMWNIQnZjblJsWkNCbWIzSWdUbUYwYVhabElIQnNZWFJtYjNKdGN5NWNiaUFnSUNBZ0lDQWdJQ29nSVNONmFGeHVJQ0FnSUNBZ0lDQWdLaURvcjZYcG43UHBvcEhsaWFyb3ZwSG1tSy9sa0tibXJhUG1rcTNtbEw3dnZJamxqNnJvcjd2dnZJbmpnSUk4WW5JdlBseHVJQ0FnSUNBZ0lDQWdLaURtczZqbWhJL3Z2SnBPWVhScGRtVWc1Ym16NVkrdzVwcUM1cGUyNUxpTjVwU3Y1b3lCSUdselVHeGhlV2x1WitPQWdseHVJQ0FnSUNBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnYVhOUWJHRjVhVzVuWEc0Z0lDQWdJQ0FnSUNBcUlFQjBlWEJsSUh0Q2IyOXNaV0Z1ZlZ4dUlDQWdJQ0FnSUNBZ0tpQkFjbVZoWkU5dWJIbGNiaUFnSUNBZ0lDQWdJQ29nUUdSbFptRjFiSFFnWm1Gc2MyVmNiaUFnSUNBZ0lDQWdJQ292WEc0Z0lDQWdJQ0FnSUdselVHeGhlV2x1WnpvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWjJWME9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlITjBZWFJsSUQwZ2RHaHBjeTVoZFdScGJ5NW5aWFJUZEdGMFpTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnpkR0YwWlNBOVBUMGdZMk11UVhWa2FXOHVVM1JoZEdVdVVFeEJXVWxPUnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjJhWE5wWW14bE9pQm1ZV3h6WlZ4dUlDQWdJQ0FnSUNCOUxGeHVYRzRnSUNBZ0lDQWdJQzhxS2x4dUlDQWdJQ0FnSUNBZ0tpQWhJMlZ1SUZSb1pTQmpiR2x3SUc5bUlIUm9aU0JoZFdScGJ5QnpiM1Z5WTJVZ2RHOGdjR3hoZVM1Y2JpQWdJQ0FnSUNBZ0lDb2dJU042YUNEb3BvSG1rcTNtbEw3bm1vVHBuN1Bwb3BIbGlhcm92cEhqZ0lKY2JpQWdJQ0FnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJR05zYVhCY2JpQWdJQ0FnSUNBZ0lDb2dRSFI1Y0dVZ2UwRjFaR2x2UTJ4cGNIMWNiaUFnSUNBZ0lDQWdJQ29nUUdSbFptRjFiSFFnTVZ4dUlDQWdJQ0FnSUNBZ0tpOWNiaUFnSUNBZ0lDQWdZMnhwY0RvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWjJWME9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyTnNhWEE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVjBPaUJtZFc1amRHbHZiaUFvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhaaGJIVmxJRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCaVlXTnJkMkZ5WkNCamIyMXdZWFJwWW1sc2FYUjVJSE5wYm1ObElERXVNVEJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyTXVkMkZ5YmtsRUtEZzBNREVzSUNkall5NUJkV1JwYjFOdmRYSmpaU2NzSUNkall5NUJkV1JwYjBOc2FYQW5MQ0FuUVhWa2FXOURiR2x3Snl3Z0oyTmpMa0YxWkdsdlEyeHBjQ2NzSUNkaGRXUnBieWNwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYzJWc1ppQTlJSFJvYVhNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRUYxWkdsdlEyeHBjQzVmYkc5aFpFSjVWWEpzS0haaGJIVmxMQ0JtZFc1amRHbHZiaUFvWlhKeUxDQmpiR2x3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZMnhwY0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sYkdZdVkyeHBjQ0E5SUdOc2FYQTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIWmhiSFZsSUQwOVBTQjBhR2x6TGw5amJHbHdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWTJ4cGNDQTlJSFpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WVhWa2FXOHVjM1J2Y0NncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuQnlaV3h2WVdRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWhkV1JwYnk1emNtTWdQU0IwYUdsekxsOWpiR2x3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lCQmRXUnBiME5zYVhBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYjI5c2RHbHdPaUJEUTE5RVJWWWdKaVlnSjJreE9HNDZRMDlOVUU5T1JVNVVMbUYxWkdsdkxtTnNhWEFuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZVzVwYldGMFlXSnNaVG9nWm1Gc2MyVmNiaUFnSUNBZ0lDQWdmU3hjYmx4dUlDQWdJQ0FnSUNBdktpcGNiaUFnSUNBZ0lDQWdJQ29nSVNObGJpQlVhR1VnZG05c2RXMWxJRzltSUhSb1pTQmhkV1JwYnlCemIzVnlZMlV1WEc0Z0lDQWdJQ0FnSUNBcUlDRWplbWdnNlorejZhS1I1cnFRNTVxRTZaK3o2WWVQNzd5SU1DNHdJSDRnTVM0dzc3eUo0NENDWEc0Z0lDQWdJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQjJiMngxYldWY2JpQWdJQ0FnSUNBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2JpQWdJQ0FnSUNBZ0lDb2dRR1JsWm1GMWJIUWdNVnh1SUNBZ0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUNBZ2RtOXNkVzFsT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JuWlhRNklHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmRtOXNkVzFsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxkRG9nWm5WdVkzUnBiMjRnS0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVWdQU0J0YVhOakxtTnNZVzF3TURFb2RtRnNkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM1p2YkhWdFpTQTlJSFpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NWZiWFYwWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtRjFaR2x2TG5ObGRGWnZiSFZ0WlNoMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIyWVd4MVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYjI5c2RHbHdPaUJEUTE5RVJWWWdKaVlnSjJreE9HNDZRMDlOVUU5T1JVNVVMbUYxWkdsdkxuWnZiSFZ0WlNkY2JpQWdJQ0FnSUNBZ2ZTeGNibHh1SUNBZ0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBZ0lDb2dJU05sYmlCSmN5QjBhR1VnWVhWa2FXOGdjMjkxY21ObElHMTFkR1UvWEc0Z0lDQWdJQ0FnSUNBcUlDRWplbWdnNXBpdjVaQ202WjJaNlorejZaK3o2YUtSNXJxUTQ0Q0NUWFYwWlNEbW1LL29ycjdudmE3cG43UHBoNC9rdUxvZ01PKzhqT1dQbHVhMmlPbWRtZW1mcythWXIrYUJvdVdramVXT24rYWRwZWVhaE9tZnMrbUhqK09BZ2x4dUlDQWdJQ0FnSUNBZ0tpQkFjSEp2Y0dWeWRIa2diWFYwWlZ4dUlDQWdJQ0FnSUNBZ0tpQkFkSGx3WlNCN1FtOXZiR1ZoYm4xY2JpQWdJQ0FnSUNBZ0lDb2dRR1JsWm1GMWJIUWdabUZzYzJWY2JpQWdJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQWdJRzExZEdVNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdkbGREb2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXRkWFJsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxkRG9nWm5WdVkzUnBiMjRnS0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiWFYwWlNBOUlIWmhiSFZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZWFZrYVc4dWMyVjBWbTlzZFcxbEtIWmhiSFZsSUQ4Z01DQTZJSFJvYVhNdVgzWnZiSFZ0WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhaaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdGdWFXMWhkR0ZpYkdVNklHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkRzl2YkhScGNEb2dRME5mUkVWV0lDWW1JQ2RwTVRodU9rTlBUVkJQVGtWT1ZDNWhkV1JwYnk1dGRYUmxKeXhjYmlBZ0lDQWdJQ0FnZlN4Y2JseHVJQ0FnSUNBZ0lDQXZLaXBjYmlBZ0lDQWdJQ0FnSUNvZ0lTTmxiaUJKY3lCMGFHVWdZWFZrYVc4Z2MyOTFjbU5sSUd4dmIzQnBibWMvWEc0Z0lDQWdJQ0FnSUNBcUlDRWplbWdnNlorejZhS1I1cnFRNXBpdjVaQ201YjZxNTQ2djVwS3Q1cFMrNzd5ZlhHNGdJQ0FnSUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0JzYjI5d1hHNGdJQ0FnSUNBZ0lDQXFJRUIwZVhCbElIdENiMjlzWldGdWZWeHVJQ0FnSUNBZ0lDQWdLaUJBWkdWbVlYVnNkQ0JtWVd4elpWeHVJQ0FnSUNBZ0lDQWdLaTljYmlBZ0lDQWdJQ0FnYkc5dmNEb2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1oyVjBPaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMnh2YjNBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjMlYwT2lCbWRXNWpkR2x2YmlBb2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlzYjI5d0lEMGdkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVoZFdScGJ5NXpaWFJNYjI5d0tIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZG1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWVc1cGJXRjBZV0pzWlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBiMjlzZEdsd09pQkRRMTlFUlZZZ0ppWWdKMmt4T0c0NlEwOU5VRTlPUlU1VUxtRjFaR2x2TG14dmIzQW5YRzRnSUNBZ0lDQWdJSDBzWEc1Y2JpQWdJQ0FnSUNBZ0x5b3FYRzRnSUNBZ0lDQWdJQ0FxSUNFalpXNGdTV1lnYzJWMElIUnZJSFJ5ZFdVc0lIUm9aU0JoZFdScGJ5QnpiM1Z5WTJVZ2QybHNiQ0JoZFhSdmJXRjBhV05oYkd4NUlITjBZWEowSUhCc1lYbHBibWNnYjI0Z2IyNUZibUZpYkdVdVhHNGdJQ0FnSUNBZ0lDQXFJQ0VqZW1nZzVhYUM1cDZjNks2KzU3MnU1TGk2SUhSeWRXWHZ2SXpwbjdQcG9wSG11cERsc0libG5LZ2diMjVGYm1GaWJHVWc1cGUyNkllcTVZcW81cEt0NXBTKzQ0Q0NYRzRnSUNBZ0lDQWdJQ0FxSUVCd2NtOXdaWEowZVNCd2JHRjVUMjVNYjJGa1hHNGdJQ0FnSUNBZ0lDQXFJRUIwZVhCbElIdENiMjlzWldGdWZWeHVJQ0FnSUNBZ0lDQWdLaUJBWkdWbVlYVnNkQ0IwY25WbFhHNGdJQ0FnSUNBZ0lDQXFMMXh1SUNBZ0lDQWdJQ0J3YkdGNVQyNU1iMkZrT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWldaaGRXeDBPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhSdmIyeDBhWEE2SUVORFgwUkZWaUFtSmlBbmFURTRianBEVDAxUVQwNUZUbFF1WVhWa2FXOHVjR3hoZVY5dmJsOXNiMkZrSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0Z1YVcxaGRHRmliR1U2SUdaaGJITmxYRzRnSUNBZ0lDQWdJSDBzWEc1Y2JpQWdJQ0FnSUNBZ2NISmxiRzloWkRvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdWbVlYVnNkRG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCaGJtbHRZWFJoWW14bE9pQm1ZV3h6WlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUY5bGJuTjFjbVZFWVhSaFRHOWhaR1ZrSUNncElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVZWFZrYVc4dWMzSmpJQ0U5UFNCMGFHbHpMbDlqYkdsd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbUYxWkdsdkxuTnlZeUE5SUhSb2FYTXVYMk5zYVhBN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzRnSUNBZ1gzQmhkWE5sWkVOaGJHeGlZV05yT2lCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCemRHRjBaU0E5SUhSb2FYTXVZWFZrYVc4dVoyVjBVM1JoZEdVb0tUdGNiaUFnSUNBZ0lDQWdhV1lnS0hOMFlYUmxJRDA5UFNCall5NUJkV1JwYnk1VGRHRjBaUzVRVEVGWlNVNUhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1GMVpHbHZMbkJoZFhObEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl3WVhWelpXUkdiR0ZuSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JmY21WemRHOXlaVU5oYkd4aVlXTnJPaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOXdZWFZ6WldSR2JHRm5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1GMVpHbHZMbkpsYzNWdFpTZ3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM0JoZFhObFpFWnNZV2NnUFNCbVlXeHpaVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdiMjVNYjJGa09pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZWFZrYVc4dWMyVjBWbTlzZFcxbEtIUm9hWE11WDIxMWRHVWdQeUF3SURvZ2RHaHBjeTVmZG05c2RXMWxLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWhkV1JwYnk1elpYUk1iMjl3S0hSb2FYTXVYMnh2YjNBcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCdmJrVnVZV0pzWlRvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV3Y21Wc2IyRmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1GMVpHbHZMbk55WXlBOUlIUm9hWE11WDJOc2FYQTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Y0d4aGVVOXVURzloWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdiR0Y1S0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdZMk11WjJGdFpTNXZiaWhqWXk1bllXMWxMa1ZXUlU1VVgwaEpSRVVzSUhSb2FYTXVYM0JoZFhObFpFTmhiR3hpWVdOckxDQjBhR2x6S1R0Y2JpQWdJQ0FnSUNBZ1kyTXVaMkZ0WlM1dmJpaGpZeTVuWVcxbExrVldSVTVVWDFOSVQxY3NJSFJvYVhNdVgzSmxjM1J2Y21WRFlXeHNZbUZqYXl3Z2RHaHBjeWs3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJRzl1UkdsellXSnNaVG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMGIzQW9LVHRjYmlBZ0lDQWdJQ0FnWTJNdVoyRnRaUzV2Wm1Zb1kyTXVaMkZ0WlM1RlZrVk9WRjlJU1VSRkxDQjBhR2x6TGw5d1lYVnpaV1JEWVd4c1ltRmpheXdnZEdocGN5azdYRzRnSUNBZ0lDQWdJR05qTG1kaGJXVXViMlptS0dOakxtZGhiV1V1UlZaRlRsUmZVMGhQVnl3Z2RHaHBjeTVmY21WemRHOXlaVU5oYkd4aVlXTnJMQ0IwYUdsektUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2IyNUVaWE4wY205NU9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1J2Y0NncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1GMVpHbHZMbVJsYzNSeWIza29LVHRjYmlBZ0lDQWdJQ0FnWTJNdVlYVmthVzlGYm1kcGJtVXVkVzVqWVdOb1pTaDBhR2x6TGw5amJHbHdLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQlFiR0Y1Y3lCMGFHVWdZMnhwY0M1Y2JpQWdJQ0FnS2lBaEkzcG9JT2FTcmVhVXZ1bWZzK21pa2VXSnF1aStrZU9BZ2x4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnY0d4aGVWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhCc1lYazZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0FoZEdocGN5NWZZMnhwY0NBcElISmxkSFZ5Ymp0Y2JseHVJQ0FnSUNBZ0lDQjJZWElnWVhWa2FXOGdQU0IwYUdsekxtRjFaR2x2TzF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1ZlkyeHBjQzVzYjJGa1pXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHRjFaR2x2TG5OMGIzQW9LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGFHbHpMbDlsYm5OMWNtVkVZWFJoVEc5aFpHVmtLQ2s3WEc0Z0lDQWdJQ0FnSUdGMVpHbHZMbk5sZEVOMWNuSmxiblJVYVcxbEtEQXBPMXh1SUNBZ0lDQWdJQ0JoZFdScGJ5NXdiR0Y1S0NrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnVTNSdmNITWdkR2hsSUdOc2FYQXVYRzRnSUNBZ0lDb2dJU042YUNEbGdaem1yYUxsdlpQbGlZM3BuN1Bwb3BIbGlhcm92cEhqZ0lKY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUhOMGIzQmNiaUFnSUNBZ0tpOWNiaUFnSUNCemRHOXdPaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WVhWa2FXOHVjM1J2Y0NncE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1SUZCaGRYTmxJSFJvWlNCamJHbHdMbHh1SUNBZ0lDQXFJQ0VqZW1nZzVwcUM1WUdjNWIyVDVZbU42Wit6NmFLUjVZbXE2TDZSNDRDQ1hHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCd1lYVnpaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lIQmhkWE5sT2lCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVlYVmthVzh1Y0dGMWMyVW9LVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQlNaWE4xYldVZ2RHaGxJR05zYVhBdVhHNGdJQ0FnSUNvZ0lTTjZhQ0RtZ2FMbHBJM21rcTNtbEw3amdJSmNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lISmxjM1Z0WlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSEpsYzNWdFpUb2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlsYm5OMWNtVkVZWFJoVEc5aFpHVmtLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZWFZrYVc4dWNtVnpkVzFsS0NrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnVW1WM2FXNWtJSEJzWVhscGJtY2diWFZ6YVdNdVhHNGdJQ0FnSUNvZ0lTTjZhQ0RrdTQ3bHBMVGx2SURscDR2bWtxM21sTDdqZ0lKY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUhKbGQybHVaRnh1SUNBZ0lDQXFMMXh1SUNBZ0lISmxkMmx1WkRvZ1puVnVZM1JwYjI0b0tYdGNiaUFnSUNBZ0lDQWdkR2hwY3k1aGRXUnBieTV6WlhSRGRYSnlaVzUwVkdsdFpTZ3dLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQkhaWFFnWTNWeWNtVnVkQ0IwYVcxbFhHNGdJQ0FnSUNvZ0lTTjZhQ0RvanJmbGo1Ymx2WlBsaVkzbm1vVG1rcTNtbEw3bWw3YnBsN1JjYmlBZ0lDQWdLaUJBYldWMGFHOWtJR2RsZEVOMWNuSmxiblJVYVcxbFhHNGdJQ0FnSUNvZ1FISmxkSFZ5YmlCN1RuVnRZbVZ5ZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJR2RsZEVOMWNuSmxiblJVYVcxbE9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtRjFaR2x2TG1kbGRFTjFjbkpsYm5SVWFXMWxLQ2s3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdVMlYwSUdOMWNuSmxiblFnZEdsdFpWeHVJQ0FnSUNBcUlDRWplbWdnNks2KzU3MnU1YjJUNVltTjU1cUU1cEt0NXBTKzVwZTI2WmUwWEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0J6WlhSRGRYSnlaVzUwVkdsdFpWeHVJQ0FnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCMGFXMWxYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdUblZ0WW1WeWZWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhObGRFTjFjbkpsYm5SVWFXMWxPaUJtZFc1amRHbHZiaUFvZEdsdFpTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtRjFaR2x2TG5ObGRFTjFjbkpsYm5SVWFXMWxLSFJwYldVcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHbHRaVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQkhaWFFnWVhWa2FXOGdaSFZ5WVhScGIyNWNiaUFnSUNBZ0tpQWhJM3BvSU9pT3QrV1BsdVc5aytXSmplbWZzK21pa2VlYWhPbVZ2K1c2cGx4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnWjJWMFJIVnlZWFJwYjI1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0T2RXMWlaWEo5WEc0Z0lDQWdJQ292WEc0Z0lDQWdaMlYwUkhWeVlYUnBiMjQ2SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WVhWa2FXOHVaMlYwUkhWeVlYUnBiMjRvS1R0Y2JpQWdJQ0I5WEc1Y2JuMHBPMXh1WEc1all5NUJkV1JwYjFOdmRYSmpaU0E5SUcxdlpIVnNaUzVsZUhCdmNuUnpJRDBnUVhWa2FXOVRiM1Z5WTJVN1hHNGlYWDA9Il19