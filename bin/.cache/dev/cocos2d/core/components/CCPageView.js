(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCPageView.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var SizeMode = cc.Enum({
            Unified: 0,
            Free: 1
        });
        var Direction = cc.Enum({
            Horizontal: 0,
            Vertical: 1
        });
        var EventType = cc.Enum({ PAGE_TURNING: 0 });
        var PageView = cc.Class({
            name: 'cc.PageView',
            extends: cc.ScrollView,
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.ui/PageView',
                help: 'i18n:COMPONENT.help_url.pageview',
                inspector: 'packages://inspector/inspectors/comps/ccpageview.js',
                executeInEditMode: false
            },
            ctor: function ctor() {
                this._curPageIdx = 0;
                this._lastPageIdx = 0;
                this._pages = [];
                this._initContentPos = cc.v2();
                this._scrollCenterOffsetX = [];
                this._scrollCenterOffsetY = [];
            },
            properties: {
                sizeMode: {
                    default: SizeMode.Unified,
                    type: SizeMode,
                    tooltip: CC_DEV && 'i18n:COMPONENT.pageview.sizeMode',
                    notify: function notify() {
                        this._syncSizeMode();
                    }
                },
                direction: {
                    default: Direction.Horizontal,
                    type: Direction,
                    tooltip: CC_DEV && 'i18n:COMPONENT.pageview.direction',
                    notify: function notify() {
                        this._syncScrollDirection();
                    }
                },
                scrollThreshold: {
                    default: 0.5,
                    type: cc.Float,
                    slide: true,
                    range: [
                        0,
                        1,
                        0.01
                    ],
                    tooltip: CC_DEV && 'i18n:COMPONENT.pageview.scrollThreshold'
                },
                autoPageTurningThreshold: {
                    default: 100,
                    type: cc.Float,
                    tooltip: CC_DEV && 'i18n:COMPONENT.pageview.autoPageTurningThreshold'
                },
                pageTurningEventTiming: {
                    default: 0.1,
                    type: cc.Float,
                    range: [
                        0,
                        1,
                        0.01
                    ],
                    tooltip: CC_DEV && 'i18n:COMPONENT.pageview.pageTurningEventTiming'
                },
                indicator: {
                    default: null,
                    type: cc.PageViewIndicator,
                    tooltip: CC_DEV && 'i18n:COMPONENT.pageview.indicator',
                    notify: function notify() {
                        if (this.indicator) {
                            this.indicator.setPageView(this);
                        }
                    }
                },
                pageTurningSpeed: {
                    default: 0.3,
                    type: cc.Float,
                    tooltip: CC_DEV && 'i18n:COMPONENT.pageview.pageTurningSpeed'
                },
                pageEvents: {
                    default: [],
                    type: cc.Component.EventHandler,
                    tooltip: CC_DEV && 'i18n:COMPONENT.pageview.pageEvents'
                }
            },
            statics: {
                SizeMode: SizeMode,
                Direction: Direction,
                EventType: EventType
            },
            __preload: function __preload() {
                this.node.on(cc.Node.EventType.SIZE_CHANGED, this._updateAllPagesSize, this);
            },
            onEnable: function onEnable() {
                this._super();
                if (!CC_EDITOR) {
                    this.node.on('scroll-ended-with-threshold', this._dispatchPageTurningEvent, this);
                }
            },
            onDisable: function onDisable() {
                this._super();
                if (!CC_EDITOR) {
                    this.node.off('scroll-ended-with-threshold', this._dispatchPageTurningEvent, this);
                }
            },
            onLoad: function onLoad() {
                this._initPages();
                if (this.indicator) {
                    this.indicator.setPageView(this);
                }
            },
            onDestroy: function onDestroy() {
                this.node.off(cc.Node.EventType.SIZE_CHANGED, this._updateAllPagesSize, this);
            },
            getCurrentPageIndex: function getCurrentPageIndex() {
                return this._curPageIdx;
            },
            setCurrentPageIndex: function setCurrentPageIndex(index) {
                this.scrollToPage(index, true);
            },
            getPages: function getPages() {
                return this._pages;
            },
            addPage: function addPage(page) {
                if (!page || this._pages.indexOf(page) !== -1 || !this.content)
                    return;
                this.content.addChild(page);
                this._pages.push(page);
                this._updatePageView();
            },
            insertPage: function insertPage(page, index) {
                if (index < 0 || !page || this._pages.indexOf(page) !== -1 || !this.content)
                    return;
                var pageCount = this._pages.length;
                if (index >= pageCount)
                    this.addPage(page);
                else {
                    this._pages.splice(index, 0, page);
                    this.content.addChild(page);
                    this._updatePageView();
                }
            },
            removePage: function removePage(page) {
                if (!page || !this.content)
                    return;
                var index = this._pages.indexOf(page);
                if (index === -1) {
                    cc.warnID(4300, page.name);
                    return;
                }
                this.removePageAtIndex(index);
            },
            removePageAtIndex: function removePageAtIndex(index) {
                var pageList = this._pages;
                if (index < 0 || index >= pageList.length)
                    return;
                var page = pageList[index];
                if (!page)
                    return;
                this.content.removeChild(page);
                pageList.splice(index, 1);
                this._updatePageView();
            },
            removeAllPages: function removeAllPages() {
                if (!this.content) {
                    return;
                }
                var locPages = this._pages;
                for (var i = 0, len = locPages.length; i < len; i++) {
                    this.content.removeChild(locPages[i]);
                }
                this._pages.length = 0;
                this._updatePageView();
            },
            scrollToPage: function scrollToPage(idx, timeInSecond) {
                if (idx < 0 || idx >= this._pages.length)
                    return;
                timeInSecond = timeInSecond !== undefined ? timeInSecond : 0.3;
                this._curPageIdx = idx;
                this.scrollToOffset(this._moveOffsetValue(idx), timeInSecond, true);
                if (this.indicator) {
                    this.indicator._changedState();
                }
            },
            getScrollEndedEventTiming: function getScrollEndedEventTiming() {
                return this.pageTurningEventTiming;
            },
            _syncScrollDirection: function _syncScrollDirection() {
                this.horizontal = this.direction === Direction.Horizontal;
                this.vertical = this.direction === Direction.Vertical;
            },
            _syncSizeMode: function _syncSizeMode() {
                if (!this.content) {
                    return;
                }
                var layout = this.content.getComponent(cc.Layout);
                if (layout) {
                    if (this.sizeMode === SizeMode.Free && this._pages.length > 0) {
                        var lastPage = this._pages[this._pages.length - 1];
                        if (this.direction === Direction.Horizontal) {
                            layout.paddingLeft = (this._view.width - this._pages[0].width) / 2;
                            layout.paddingRight = (this._view.width - lastPage.width) / 2;
                        } else if (this.direction === Direction.Vertical) {
                            layout.paddingTop = (this._view.height - this._pages[0].height) / 2;
                            layout.paddingBottom = (this._view.height - lastPage.height) / 2;
                        }
                    }
                    layout.updateLayout();
                }
            },
            _updatePageView: function _updatePageView() {
                var layout = this.content.getComponent(cc.Layout);
                if (layout && layout.enabled) {
                    layout.updateLayout();
                }
                var pageCount = this._pages.length;
                if (this._curPageIdx >= pageCount) {
                    this._curPageIdx = pageCount === 0 ? 0 : pageCount - 1;
                    this._lastPageIdx = this._curPageIdx;
                }
                var contentPos = this._initContentPos;
                for (var i = 0; i < pageCount; ++i) {
                    var page = this._pages[i];
                    page.setSiblingIndex(i);
                    if (this.direction === Direction.Horizontal) {
                        this._scrollCenterOffsetX[i] = Math.abs(contentPos.x + page.x);
                    } else {
                        this._scrollCenterOffsetY[i] = Math.abs(contentPos.y + page.y);
                    }
                }
                if (this.indicator) {
                    this.indicator._refresh();
                }
            },
            _updateAllPagesSize: function _updateAllPagesSize() {
                if (this.sizeMode !== SizeMode.Unified) {
                    return;
                }
                var locPages = CC_EDITOR ? this.content.children : this._pages;
                var selfSize = this._view.getContentSize();
                for (var i = 0, len = locPages.length; i < len; i++) {
                    locPages[i].setContentSize(selfSize);
                }
            },
            _initPages: function _initPages() {
                if (!this.content) {
                    return;
                }
                this._initContentPos = this.content.position;
                var children = this.content.children;
                for (var i = 0; i < children.length; ++i) {
                    var page = children[i];
                    if (this._pages.indexOf(page) >= 0) {
                        continue;
                    }
                    this._pages.push(page);
                }
                this._syncScrollDirection();
                this._syncSizeMode();
                this._updatePageView();
            },
            _dispatchPageTurningEvent: function _dispatchPageTurningEvent() {
                if (this._lastPageIdx === this._curPageIdx)
                    return;
                this._lastPageIdx = this._curPageIdx;
                cc.Component.EventHandler.emitEvents(this.pageEvents, this, EventType.PAGE_TURNING);
                this.node.emit('page-turning', this);
            },
            _isScrollable: function _isScrollable(offset, index, nextIndex) {
                if (this.sizeMode === SizeMode.Free) {
                    var curPageCenter, nextPageCenter;
                    if (this.direction === Direction.Horizontal) {
                        curPageCenter = this._scrollCenterOffsetX[index];
                        nextPageCenter = this._scrollCenterOffsetX[nextIndex];
                        return Math.abs(offset.x) >= Math.abs(curPageCenter - nextPageCenter) * this.scrollThreshold;
                    } else if (this.direction === Direction.Vertical) {
                        curPageCenter = this._scrollCenterOffsetY[index];
                        nextPageCenter = this._scrollCenterOffsetY[nextIndex];
                        return Math.abs(offset.y) >= Math.abs(curPageCenter - nextPageCenter) * this.scrollThreshold;
                    }
                } else {
                    if (this.direction === Direction.Horizontal) {
                        return Math.abs(offset.x) >= this._view.width * this.scrollThreshold;
                    } else if (this.direction === Direction.Vertical) {
                        return Math.abs(offset.y) >= this._view.height * this.scrollThreshold;
                    }
                }
            },
            _isQuicklyScrollable: function _isQuicklyScrollable(touchMoveVelocity) {
                if (this.direction === Direction.Horizontal) {
                    if (Math.abs(touchMoveVelocity.x) > this.autoPageTurningThreshold) {
                        return true;
                    }
                } else if (this.direction === Direction.Vertical) {
                    if (Math.abs(touchMoveVelocity.y) > this.autoPageTurningThreshold) {
                        return true;
                    }
                }
                return false;
            },
            _moveOffsetValue: function _moveOffsetValue(idx) {
                var offset = cc.v2(0, 0);
                if (this.sizeMode === SizeMode.Free) {
                    if (this.direction === Direction.Horizontal) {
                        offset.x = this._scrollCenterOffsetX[idx];
                    } else if (this.direction === Direction.Vertical) {
                        offset.y = this._scrollCenterOffsetY[idx];
                    }
                } else {
                    if (this.direction === Direction.Horizontal) {
                        offset.x = idx * this._view.width;
                    } else if (this.direction === Direction.Vertical) {
                        offset.y = idx * this._view.height;
                    }
                }
                return offset;
            },
            _getDragDirection: function _getDragDirection(moveOffset) {
                if (this.direction === Direction.Horizontal) {
                    if (moveOffset.x === 0) {
                        return 0;
                    }
                    return moveOffset.x > 0 ? 1 : -1;
                } else if (this.direction === Direction.Vertical) {
                    if (moveOffset.y === 0) {
                        return 0;
                    }
                    return moveOffset.y < 0 ? 1 : -1;
                }
            },
            _handleReleaseLogic: function _handleReleaseLogic(touch) {
                this._autoScrollToPage();
                if (this._scrolling) {
                    this._scrolling = false;
                    if (!this._autoScrolling) {
                        this._dispatchEvent('scroll-ended');
                    }
                }
            },
            _autoScrollToPage: function _autoScrollToPage() {
                var bounceBackStarted = this._startBounceBackIfNeeded();
                var moveOffset = this._touchBeganPosition.sub(this._touchEndPosition);
                if (bounceBackStarted) {
                    var dragDirection = this._getDragDirection(moveOffset);
                    if (dragDirection === 0) {
                        return;
                    }
                    if (dragDirection > 0) {
                        this._curPageIdx = this._pages.length - 1;
                    } else {
                        this._curPageIdx = 0;
                    }
                    if (this.indicator) {
                        this.indicator._changedState();
                    }
                } else {
                    var index = this._curPageIdx, nextIndex = index + this._getDragDirection(moveOffset);
                    var timeInSecond = this.pageTurningSpeed * Math.abs(index - nextIndex);
                    if (nextIndex < this._pages.length) {
                        if (this._isScrollable(moveOffset, index, nextIndex)) {
                            this.scrollToPage(nextIndex, timeInSecond);
                            return;
                        } else {
                            var touchMoveVelocity = this._calculateTouchMoveVelocity();
                            if (this._isQuicklyScrollable(touchMoveVelocity)) {
                                this.scrollToPage(nextIndex, timeInSecond);
                                return;
                            }
                        }
                    }
                    this.scrollToPage(index, timeInSecond);
                }
            },
            _onTouchBegan: function _onTouchBegan(event, captureListeners) {
                this._touchBeganPosition = event.touch.getLocation();
                this._super(event, captureListeners);
            },
            _onTouchMoved: function _onTouchMoved(event, captureListeners) {
                this._super(event, captureListeners);
            },
            _onTouchEnded: function _onTouchEnded(event, captureListeners) {
                this._touchEndPosition = event.touch.getLocation();
                this._super(event, captureListeners);
            },
            _onTouchCancelled: function _onTouchCancelled(event, captureListeners) {
                this._touchEndPosition = event.touch.getLocation();
                this._super(event, captureListeners);
            },
            _onMouseWheel: function _onMouseWheel() {
            }
        });
        cc.PageView = module.exports = PageView;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,