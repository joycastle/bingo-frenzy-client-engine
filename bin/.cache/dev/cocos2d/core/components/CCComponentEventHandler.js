(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCComponentEventHandler.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        cc.Component.EventHandler = cc.Class({
            name: 'cc.ClickEvent',
            properties: {
                target: {
                    default: null,
                    type: cc.Node
                },
                component: '',
                _componentId: '',
                _componentName: {
                    get: function get() {
                        this._genCompIdIfNeeded();
                        return this._compId2Name(this._componentId);
                    },
                    set: function set(value) {
                        this._componentId = this._compName2Id(value);
                    }
                },
                handler: { default: '' },
                customEventData: { default: '' }
            },
            statics: {
                emitEvents: function emitEvents(events) {
                    'use strict';
                    var args = void 0;
                    if (arguments.length > 0) {
                        args = new Array(arguments.length - 1);
                        for (var i = 0, l = args.length; i < l; i++) {
                            args[i] = arguments[i + 1];
                        }
                    }
                    for (var _i = 0, _l = events.length; _i < _l; _i++) {
                        var event = events[_i];
                        if (!(event instanceof cc.Component.EventHandler))
                            continue;
                        event.emit(args);
                    }
                }
            },
            emit: function emit(params) {
                var target = this.target;
                if (!cc.isValid(target))
                    return;
                this._genCompIdIfNeeded();
                var compType = cc.js._getClassById(this._componentId);
                var comp = target.getComponent(compType);
                if (!cc.isValid(comp))
                    return;
                var handler = comp[this.handler];
                if (typeof handler !== 'function')
                    return;
                if (this.customEventData != null && this.customEventData !== '') {
                    params = params.slice();
                    params.push(this.customEventData);
                }
                handler.apply(comp, params);
            },
            _compName2Id: function _compName2Id(compName) {
                var comp = cc.js.getClassByName(compName);
                return cc.js._getClassId(comp);
            },
            _compId2Name: function _compId2Name(compId) {
                var comp = cc.js._getClassById(compId);
                return cc.js.getClassName(comp);
            },
            _genCompIdIfNeeded: function _genCompIdIfNeeded() {
                if (!this._componentId) {
                    this._componentName = this.component;
                    this.component = '';
                }
            }
        });
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,