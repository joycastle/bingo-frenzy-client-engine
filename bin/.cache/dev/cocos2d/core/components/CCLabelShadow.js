(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCLabelShadow.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var LabelShadow = cc.Class({
            name: 'cc.LabelShadow',
            extends: require('./CCComponent'),
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.renderers/LabelShadow',
                executeInEditMode: true,
                requireComponent: cc.Label
            },
            properties: {
                _color: cc.Color.WHITE,
                _offset: cc.v2(2, 2),
                _blur: 2,
                color: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.shadow.color',
                    get: function get() {
                        return this._color;
                    },
                    set: function set(value) {
                        this._color = value;
                        this._updateRenderData();
                    }
                },
                offset: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.shadow.offset',
                    get: function get() {
                        return this._offset;
                    },
                    set: function set(value) {
                        this._offset = value;
                        this._updateRenderData();
                    }
                },
                blur: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.shadow.blur',
                    get: function get() {
                        return this._blur;
                    },
                    set: function set(value) {
                        this._blur = value;
                        this._updateRenderData();
                    },
                    range: [
                        0,
                        1024
                    ]
                }
            },
            onEnable: function onEnable() {
                this._updateRenderData();
            },
            onDisable: function onDisable() {
                this._updateRenderData();
            },
            _updateRenderData: function _updateRenderData() {
                var label = this.node.getComponent(cc.Label);
                if (label) {
                    label._lazyUpdateRenderData();
                }
            }
        });
        cc.LabelShadow = module.exports = LabelShadow;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,