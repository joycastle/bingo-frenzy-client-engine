(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCToggleContainer.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var ToggleContainer = cc.Class({
            name: 'cc.ToggleContainer',
            extends: cc.Component,
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.ui/ToggleContainer',
                help: 'i18n:COMPONENT.help_url.toggleContainer',
                executeInEditMode: true
            },
            properties: {
                allowSwitchOff: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.toggle_group.allowSwitchOff',
                    default: false
                },
                checkEvents: {
                    default: [],
                    type: cc.Component.EventHandler
                }
            },
            updateToggles: function updateToggles(toggle) {
                if (!this.enabledInHierarchy)
                    return;
                if (toggle.isChecked) {
                    this.toggleItems.forEach(function (item) {
                        if (item !== toggle && item.isChecked && item.enabled) {
                            item._hideCheckMark();
                        }
                    });
                    if (this.checkEvents) {
                        cc.Component.EventHandler.emitEvents(this.checkEvents, toggle);
                    }
                }
            },
            _allowOnlyOneToggleChecked: function _allowOnlyOneToggleChecked() {
                var isChecked = false;
                this.toggleItems.forEach(function (item) {
                    if (isChecked) {
                        item._hideCheckMark();
                    } else if (item.isChecked) {
                        isChecked = true;
                    }
                });
                return isChecked;
            },
            _makeAtLeastOneToggleChecked: function _makeAtLeastOneToggleChecked() {
                var isChecked = this._allowOnlyOneToggleChecked();
                if (!isChecked && !this.allowSwitchOff) {
                    var toggleItems = this.toggleItems;
                    if (toggleItems.length > 0) {
                        toggleItems[0].check();
                    }
                }
            },
            onEnable: function onEnable() {
                this.node.on('child-added', this._allowOnlyOneToggleChecked, this);
                this.node.on('child-removed', this._makeAtLeastOneToggleChecked, this);
            },
            onDisable: function onDisable() {
                this.node.off('child-added', this._allowOnlyOneToggleChecked, this);
                this.node.off('child-removed', this._makeAtLeastOneToggleChecked, this);
            },
            start: function start() {
                this._makeAtLeastOneToggleChecked();
            }
        });
        var js = require('../platform/js');
        js.get(ToggleContainer.prototype, 'toggleItems', function () {
            return this.node.getComponentsInChildren(cc.Toggle);
        });
        cc.ToggleContainer = module.exports = ToggleContainer;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,