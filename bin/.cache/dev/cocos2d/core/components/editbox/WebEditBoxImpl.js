(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/editbox/WebEditBoxImpl.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var utils = require('../../platform/utils');
        var macro = require('../../platform/CCMacro');
        var Types = require('./types');
        var Label = require('../CCLabel');
        var tabIndexUtil = require('./tabIndexUtil');
        var EditBox = cc.EditBox;
        var js = cc.js;
        var InputMode = Types.InputMode;
        var InputFlag = Types.InputFlag;
        var KeyboardReturnType = Types.KeyboardReturnType;
        var math = cc.vmath;
        var polyfill = { zoomInvalid: false };
        if (cc.sys.OS_ANDROID === cc.sys.os && (cc.sys.browserType === cc.sys.BROWSER_TYPE_SOUGOU || cc.sys.browserType === cc.sys.BROWSER_TYPE_360)) {
            polyfill.zoomInvalid = true;
        }
        var DELAY_TIME = 800;
        var SCROLLY = 100;
        var LEFT_PADDING = 2;
        var _domCount = 0;
        var _vec3 = cc.v3();
        var _currentEditBoxImpl = null;
        var _fullscreen = false;
        var _autoResize = false;
        var BaseClass = EditBox._ImplClass;
        function WebEditBoxImpl() {
            BaseClass.call(this);
            this._domId = 'EditBoxId_' + ++_domCount;
            this._placeholderStyleSheet = null;
            this._elem = null;
            this._isTextArea = false;
            this._worldMat = math.mat4.create();
            this._cameraMat = math.mat4.create();
            this._m00 = 0;
            this._m01 = 0;
            this._m04 = 0;
            this._m05 = 0;
            this._m12 = 0;
            this._m13 = 0;
            this._w = 0;
            this._h = 0;
            this._inputMode = null;
            this._inputFlag = null;
            this._returnType = null;
            this._eventListeners = {};
            this._textLabelFont = null;
            this._textLabelFontSize = null;
            this._textLabelFontColor = null;
            this._textLabelAlign = null;
            this._placeholderLabelFont = null;
            this._placeholderLabelFontSize = null;
            this._placeholderLabelFontColor = null;
            this._placeholderLabelAlign = null;
            this._placeholderLineHeight = null;
        }
        js.extend(WebEditBoxImpl, BaseClass);
        EditBox._ImplClass = WebEditBoxImpl;
        Object.assign(WebEditBoxImpl.prototype, {
            init: function init(delegate) {
                if (!delegate) {
                    return;
                }
                this._delegate = delegate;
                if (delegate.inputMode === InputMode.ANY) {
                    this._createTextArea();
                } else {
                    this._createInput();
                }
                tabIndexUtil.add(this);
                this.setTabIndex(delegate.tabIndex);
                this._initStyleSheet();
                this._registerEventListeners();
                this._addDomToGameContainer();
                _fullscreen = cc.view.isAutoFullScreenEnabled();
                _autoResize = cc.view._resizeWithBrowserSize;
            },
            clear: function clear() {
                this._removeEventListeners();
                this._removeDomFromGameContainer();
                tabIndexUtil.remove(this);
                if (_currentEditBoxImpl === this) {
                    _currentEditBoxImpl = null;
                }
            },
            update: function update() {
                this._updateMatrix();
            },
            setTabIndex: function setTabIndex(index) {
                this._elem.tabIndex = index;
                tabIndexUtil.resort();
            },
            setSize: function setSize(width, height) {
                var elem = this._elem;
                elem.style.width = width + 'px';
                elem.style.height = height + 'px';
            },
            beginEditing: function beginEditing() {
                if (_currentEditBoxImpl && _currentEditBoxImpl !== this) {
                    _currentEditBoxImpl.setFocus(false);
                }
                this._editing = true;
                _currentEditBoxImpl = this;
                this._delegate.editBoxEditingDidBegan();
                this._showDom();
                this._elem.focus();
            },
            endEditing: function endEditing() {
                if (this._elem) {
                    this._elem.blur();
                }
            },
            _createInput: function _createInput() {
                this._isTextArea = false;
                this._elem = document.createElement('input');
            },
            _createTextArea: function _createTextArea() {
                this._isTextArea = true;
                this._elem = document.createElement('textarea');
            },
            _addDomToGameContainer: function _addDomToGameContainer() {
                cc.game.container.appendChild(this._elem);
                document.head.appendChild(this._placeholderStyleSheet);
            },
            _removeDomFromGameContainer: function _removeDomFromGameContainer() {
                var hasElem = utils.contains(cc.game.container, this._elem);
                if (hasElem) {
                    cc.game.container.removeChild(this._elem);
                }
                var hasStyleSheet = utils.contains(document.head, this._placeholderStyleSheet);
                if (hasStyleSheet) {
                    document.head.removeChild(this._placeholderStyleSheet);
                }
                delete this._elem;
                delete this._placeholderStyleSheet;
            },
            _showDom: function _showDom() {
                this._updateMaxLength();
                this._updateInputType();
                this._updateStyleSheet();
                this._elem.style.display = '';
                this._delegate._hideLabels();
                if (cc.sys.isMobile) {
                    this._showDomOnMobile();
                }
            },
            _hideDom: function _hideDom() {
                var elem = this._elem;
                elem.style.display = 'none';
                this._delegate._showLabels();
                if (cc.sys.isMobile) {
                    this._hideDomOnMobile();
                }
            },
            _showDomOnMobile: function _showDomOnMobile() {
                if (cc.sys.os !== cc.sys.OS_ANDROID) {
                    return;
                }
                if (_fullscreen) {
                    cc.view.enableAutoFullScreen(false);
                    cc.screen.exitFullScreen();
                }
                if (_autoResize) {
                    cc.view.resizeWithBrowserSize(false);
                }
                this._adjustWindowScroll();
            },
            _hideDomOnMobile: function _hideDomOnMobile() {
                if (cc.sys.os === cc.sys.OS_ANDROID) {
                    setTimeout(function () {
                        if (!_currentEditBoxImpl) {
                            if (_fullscreen) {
                                cc.view.enableAutoFullScreen(true);
                            }
                            if (_autoResize) {
                                cc.view.resizeWithBrowserSize(true);
                            }
                        }
                    }, DELAY_TIME);
                }
                this._scrollBackWindow();
            },
            _adjustWindowScroll: function _adjustWindowScroll() {
                var self = this;
                setTimeout(function () {
                    if (window.scrollY < SCROLLY) {
                        self._elem.scrollIntoView({
                            block: 'start',
                            inline: 'nearest',
                            behavior: 'smooth'
                        });
                    }
                }, DELAY_TIME);
            },
            _scrollBackWindow: function _scrollBackWindow() {
                setTimeout(function () {
                    var sys = cc.sys;
                    if (sys.browserType === sys.BROWSER_TYPE_WECHAT && sys.os === sys.OS_IOS) {
                        window.top && window.top.scrollTo(0, 0);
                        return;
                    }
                    window.scrollTo(0, 0);
                }, DELAY_TIME);
            },
            _updateMatrix: function _updateMatrix() {
                var node = this._delegate.node;
                node.getWorldMatrix(this._worldMat);
                var worldMat = this._worldMat;
                var worldMatm = worldMat.m;
                if (this._m00 === worldMatm[0] && this._m01 === worldMatm[1] && this._m04 === worldMatm[4] && this._m05 === worldMatm[5] && this._m12 === worldMatm[12] && this._m13 === worldMatm[13] && this._w === node._contentSize.width && this._h === node._contentSize.height) {
                    return;
                }
                this._m00 = worldMatm[0];
                this._m01 = worldMatm[1];
                this._m04 = worldMatm[4];
                this._m05 = worldMatm[5];
                this._m12 = worldMatm[12];
                this._m13 = worldMatm[13];
                this._w = node._contentSize.width;
                this._h = node._contentSize.height;
                var scaleX = cc.view._scaleX, scaleY = cc.view._scaleY, viewport = cc.view._viewportRect, dpr = cc.view._devicePixelRatio;
                _vec3.x = -node._anchorPoint.x * this._w;
                _vec3.y = -node._anchorPoint.y * this._h;
                math.mat4.translate(worldMat, worldMat, _vec3);
                var cameraMat = void 0;
                if (CC_EDITOR) {
                    cameraMat = this._cameraMat = worldMat;
                } else {
                    var camera = cc.Camera.findCamera(node);
                    camera.getWorldToScreenMatrix2D(this._cameraMat);
                    cameraMat = this._cameraMat;
                    math.mat4.mul(cameraMat, cameraMat, worldMat);
                }
                scaleX /= dpr;
                scaleY /= dpr;
                var container = cc.game.container;
                var cameraMatm = cameraMat.m;
                var a = cameraMatm[0] * scaleX, b = cameraMatm[1], c = cameraMatm[4], d = cameraMatm[5] * scaleY;
                var offsetX = container && container.style.paddingLeft && parseInt(container.style.paddingLeft);
                offsetX += viewport.x / dpr;
                var offsetY = container && container.style.paddingBottom && parseInt(container.style.paddingBottom);
                offsetY += viewport.y / dpr;
                var tx = cameraMatm[12] * scaleX + offsetX, ty = cameraMatm[13] * scaleY + offsetY;
                if (polyfill.zoomInvalid) {
                    this.setSize(node.width * a, node.height * d);
                    a = 1;
                    d = 1;
                }
                var elem = this._elem;
                var matrix = 'matrix(' + a + ',' + -b + ',' + -c + ',' + d + ',' + tx + ',' + -ty + ')';
                elem.style['transform'] = matrix;
                elem.style['-webkit-transform'] = matrix;
                elem.style['transform-origin'] = '0px 100% 0px';
                elem.style['-webkit-transform-origin'] = '0px 100% 0px';
            },
            _updateInputType: function _updateInputType() {
                var delegate = this._delegate, inputMode = delegate.inputMode, inputFlag = delegate.inputFlag, returnType = delegate.returnType, elem = this._elem;
                if (this._inputMode === inputMode && this._inputFlag === inputFlag && this._returnType === returnType) {
                    return;
                }
                this._inputMode = inputMode;
                this._inputFlag = inputFlag;
                this._returnType = returnType;
                if (this._isTextArea) {
                    var _textTransform = 'none';
                    if (inputFlag === InputFlag.INITIAL_CAPS_ALL_CHARACTERS) {
                        _textTransform = 'uppercase';
                    } else if (inputFlag === InputFlag.INITIAL_CAPS_WORD) {
                        _textTransform = 'capitalize';
                    }
                    elem.style.textTransform = _textTransform;
                    return;
                }
                if (inputFlag === InputFlag.PASSWORD) {
                    elem.type = 'password';
                    return;
                }
                var type = elem.type;
                if (inputMode === InputMode.EMAIL_ADDR) {
                    type = 'email';
                } else if (inputMode === InputMode.NUMERIC || inputMode === InputMode.DECIMAL) {
                    type = 'number';
                } else if (inputMode === InputMode.PHONE_NUMBER) {
                    type = 'number';
                    elem.pattern = '[0-9]*';
                } else if (inputMode === InputMode.URL) {
                    type = 'url';
                } else {
                    type = 'text';
                    if (returnType === KeyboardReturnType.SEARCH) {
                        type = 'search';
                    }
                }
                elem.type = type;
                var textTransform = 'none';
                if (inputFlag === InputFlag.INITIAL_CAPS_ALL_CHARACTERS) {
                    textTransform = 'uppercase';
                } else if (inputFlag === InputFlag.INITIAL_CAPS_WORD) {
                    textTransform = 'capitalize';
                }
                elem.style.textTransform = textTransform;
            },
            _updateMaxLength: function _updateMaxLength() {
                var maxLength = this._delegate.maxLength;
                if (maxLength < 0) {
                    maxLength = 65535;
                }
                this._elem.maxLength = maxLength;
            },
            _initStyleSheet: function _initStyleSheet() {
                var elem = this._elem;
                elem.style.display = 'none';
                elem.style.border = 0;
                elem.style.background = 'transparent';
                elem.style.width = '100%';
                elem.style.height = '100%';
                elem.style.active = 0;
                elem.style.outline = 'medium';
                elem.style.padding = '0';
                elem.style.textTransform = 'uppercase';
                elem.style.position = 'absolute';
                elem.style.bottom = '0px';
                elem.style.left = LEFT_PADDING + 'px';
                elem.className = 'cocosEditBox';
                elem.id = this._domId;
                if (!this._isTextArea) {
                    elem.type = 'text';
                    elem.style['-moz-appearance'] = 'textfield';
                } else {
                    elem.style.resize = 'none';
                    elem.style.overflow_y = 'scroll';
                }
                this._placeholderStyleSheet = document.createElement('style');
            },
            _updateStyleSheet: function _updateStyleSheet() {
                var delegate = this._delegate, elem = this._elem;
                elem.value = delegate.string;
                elem.placeholder = delegate.placeholder;
                this._updateTextLabel(delegate.textLabel);
                this._updatePlaceholderLabel(delegate.placeholderLabel);
            },
            _updateTextLabel: function _updateTextLabel(textLabel) {
                if (!textLabel) {
                    return;
                }
                var font = textLabel.font;
                if (font && !(font instanceof cc.BitmapFont)) {
                    font = font._fontFamily;
                } else {
                    font = textLabel.fontFamily;
                }
                var fontSize = textLabel.fontSize * textLabel.node.scaleY;
                if (this._textLabelFont === font && this._textLabelFontSize === fontSize && this._textLabelFontColor === textLabel.fontColor && this._textLabelAlign === textLabel.horizontalAlign) {
                    return;
                }
                this._textLabelFont = font;
                this._textLabelFontSize = fontSize;
                this._textLabelFontColor = textLabel.fontColor;
                this._textLabelAlign = textLabel.horizontalAlign;
                var elem = this._elem;
                elem.style.fontSize = fontSize + 'px';
                elem.style.color = textLabel.node.color.toCSS('rgba');
                elem.style.fontFamily = font;
                switch (textLabel.horizontalAlign) {
                case Label.HorizontalAlign.LEFT:
                    elem.style.textAlign = 'left';
                    break;
                case Label.HorizontalAlign.CENTER:
                    elem.style.textAlign = 'center';
                    break;
                case Label.HorizontalAlign.RIGHT:
                    elem.style.textAlign = 'right';
                    break;
                }
            },
            _updatePlaceholderLabel: function _updatePlaceholderLabel(placeholderLabel) {
                if (!placeholderLabel) {
                    return;
                }
                var font = placeholderLabel.font;
                if (font && !(font instanceof cc.BitmapFont)) {
                    font = placeholderLabel.font._fontFamily;
                } else {
                    font = placeholderLabel.fontFamily;
                }
                var fontSize = placeholderLabel.fontSize * placeholderLabel.node.scaleY;
                if (this._placeholderLabelFont === font && this._placeholderLabelFontSize === fontSize && this._placeholderLabelFontColor === placeholderLabel.fontColor && this._placeholderLabelAlign === placeholderLabel.horizontalAlign && this._placeholderLineHeight === placeholderLabel.fontSize) {
                    return;
                }
                this._placeholderLabelFont = font;
                this._placeholderLabelFontSize = fontSize;
                this._placeholderLabelFontColor = placeholderLabel.fontColor;
                this._placeholderLabelAlign = placeholderLabel.horizontalAlign;
                this._placeholderLineHeight = placeholderLabel.fontSize;
                var styleEl = this._placeholderStyleSheet;
                var fontColor = placeholderLabel.node.color.toCSS('rgba');
                var lineHeight = placeholderLabel.fontSize;
                var horizontalAlign = void 0;
                switch (placeholderLabel.horizontalAlign) {
                case Label.HorizontalAlign.LEFT:
                    horizontalAlign = 'left';
                    break;
                case Label.HorizontalAlign.CENTER:
                    horizontalAlign = 'center';
                    break;
                case Label.HorizontalAlign.RIGHT:
                    horizontalAlign = 'right';
                    break;
                }
                styleEl.innerHTML = '#' + this._domId + '::-webkit-input-placeholder,#' + this._domId + '::-moz-placeholder,#' + this._domId + ':-ms-input-placeholder' + ('{text-transform: initial; font-family: ' + font + '; font-size: ' + fontSize + 'px; color: ' + fontColor + '; line-height: ' + lineHeight + 'px; text-align: ' + horizontalAlign + ';}');
                if (cc.sys.browserType === cc.sys.BROWSER_TYPE_EDGE) {
                    styleEl.innerHTML += '#' + this._domId + '::-ms-clear{display: none;}';
                }
            },
            _registerEventListeners: function _registerEventListeners() {
                var impl = this, elem = this._elem, inputLock = false, cbs = this._eventListeners;
                cbs.compositionStart = function () {
                    inputLock = true;
                };
                cbs.compositionEnd = function () {
                    inputLock = false;
                    impl._delegate.editBoxTextChanged(elem.value);
                };
                cbs.onInput = function () {
                    if (inputLock) {
                        return;
                    }
                    impl._delegate.editBoxTextChanged(elem.value);
                };
                cbs.onClick = function (e) {
                    if (impl._editing) {
                        if (cc.sys.isMobile) {
                            impl._adjustWindowScroll();
                        }
                    }
                };
                cbs.onKeydown = function (e) {
                    if (e.keyCode === macro.KEY.enter) {
                        e.stopPropagation();
                        impl._delegate.editBoxEditingReturn();
                        if (!impl._isTextArea) {
                            elem.blur();
                        }
                    } else if (e.keyCode === macro.KEY.tab) {
                        e.stopPropagation();
                        e.preventDefault();
                        tabIndexUtil.next(impl);
                    }
                };
                cbs.onBlur = function () {
                    impl._editing = false;
                    _currentEditBoxImpl = null;
                    impl._hideDom();
                    impl._delegate.editBoxEditingDidEnded();
                };
                elem.addEventListener('compositionstart', cbs.compositionStart);
                elem.addEventListener('compositionend', cbs.compositionEnd);
                elem.addEventListener('input', cbs.onInput);
                elem.addEventListener('keydown', cbs.onKeydown);
                elem.addEventListener('blur', cbs.onBlur);
                elem.addEventListener('touchstart', cbs.onClick);
            },
            _removeEventListeners: function _removeEventListeners() {
                var elem = this._elem, cbs = this._eventListeners;
                elem.removeEventListener('compositionstart', cbs.compositionStart);
                elem.removeEventListener('compositionend', cbs.compositionEnd);
                elem.removeEventListener('input', cbs.onInput);
                elem.removeEventListener('keydown', cbs.onKeydown);
                elem.removeEventListener('blur', cbs.onBlur);
                elem.removeEventListener('touchstart', cbs.onClick);
                cbs.compositionStart = null;
                cbs.compositionEnd = null;
                cbs.onInput = null;
                cbs.onKeydown = null;
                cbs.onBlur = null;
                cbs.onClick = null;
            }
        });
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,