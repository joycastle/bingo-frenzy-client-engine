(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/editbox/EditBoxImplBase.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var EditBoxImplBase = cc.Class({
            ctor: function ctor() {
                this._delegate = null;
                this._editing = false;
            },
            init: function init(delegate) {
            },
            enable: function enable() {
            },
            disable: function disable() {
                if (this._editing) {
                    this.endEditing();
                }
            },
            clear: function clear() {
            },
            update: function update() {
            },
            setTabIndex: function setTabIndex(index) {
            },
            setSize: function setSize(width, height) {
            },
            setFocus: function setFocus(value) {
                if (value) {
                    this.beginEditing();
                } else {
                    this.endEditing();
                }
            },
            isFocused: function isFocused() {
                return this._editing;
            },
            beginEditing: function beginEditing() {
            },
            endEditing: function endEditing() {
            }
        });
        module.exports = EditBoxImplBase;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,