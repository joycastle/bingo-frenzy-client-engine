(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCProgressBar.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var misc = require('../utils/misc');
        var Component = require('./CCComponent');
        var Mode = cc.Enum({
            HORIZONTAL: 0,
            VERTICAL: 1,
            FILLED: 2
        });
        var ProgressBar = cc.Class({
            name: 'cc.ProgressBar',
            extends: Component,
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.ui/ProgressBar',
                help: 'i18n:COMPONENT.help_url.progressbar'
            },
            _initBarSprite: function _initBarSprite() {
                if (this.barSprite) {
                    var entity = this.barSprite.node;
                    if (!entity)
                        return;
                    var nodeSize = this.node.getContentSize();
                    var nodeAnchor = this.node.getAnchorPoint();
                    var entitySize = entity.getContentSize();
                    if (entity.parent === this.node) {
                        this.node.setContentSize(entitySize);
                    }
                    if (this.barSprite.fillType === cc.Sprite.FillType.RADIAL) {
                        this.mode = Mode.FILLED;
                    }
                    var barSpriteSize = entity.getContentSize();
                    if (this.mode === Mode.HORIZONTAL) {
                        this.totalLength = barSpriteSize.width;
                    } else if (this.mode === Mode.VERTICAL) {
                        this.totalLength = barSpriteSize.height;
                    } else {
                        this.totalLength = this.barSprite.fillRange;
                    }
                    if (entity.parent === this.node) {
                        var x = -nodeSize.width * nodeAnchor.x;
                        var y = 0;
                        entity.setPosition(cc.v2(x, y));
                    }
                }
            },
            _updateBarStatus: function _updateBarStatus() {
                if (this.barSprite) {
                    var entity = this.barSprite.node;
                    if (!entity)
                        return;
                    var entityAnchorPoint = entity.getAnchorPoint();
                    var entitySize = entity.getContentSize();
                    var entityPosition = entity.getPosition();
                    var anchorPoint = cc.v2(0, 0.5);
                    var progress = misc.clamp01(this.progress);
                    var actualLenth = this.totalLength * progress;
                    var finalContentSize;
                    var totalWidth;
                    var totalHeight;
                    switch (this.mode) {
                    case Mode.HORIZONTAL:
                        if (this.reverse) {
                            anchorPoint = cc.v2(1, 0.5);
                        }
                        finalContentSize = cc.size(actualLenth, entitySize.height);
                        totalWidth = this.totalLength;
                        totalHeight = entitySize.height;
                        break;
                    case Mode.VERTICAL:
                        if (this.reverse) {
                            anchorPoint = cc.v2(0.5, 1);
                        } else {
                            anchorPoint = cc.v2(0.5, 0);
                        }
                        finalContentSize = cc.size(entitySize.width, actualLenth);
                        totalWidth = entitySize.width;
                        totalHeight = this.totalLength;
                        break;
                    }
                    if (this.mode === Mode.FILLED) {
                        if (this.barSprite.type !== cc.Sprite.Type.FILLED) {
                            cc.warn('ProgressBar FILLED mode only works when barSprite\'s Type is FILLED!');
                        } else {
                            if (this.reverse) {
                                actualLenth = actualLenth * -1;
                            }
                            this.barSprite.fillRange = actualLenth;
                        }
                    } else {
                        if (this.barSprite.type !== cc.Sprite.Type.FILLED) {
                            var anchorOffsetX = anchorPoint.x - entityAnchorPoint.x;
                            var anchorOffsetY = anchorPoint.y - entityAnchorPoint.y;
                            var finalPosition = cc.v2(totalWidth * anchorOffsetX, totalHeight * anchorOffsetY);
                            entity.setPosition(entityPosition.x + finalPosition.x, entityPosition.y + finalPosition.y);
                            entity.setAnchorPoint(anchorPoint);
                            entity.setContentSize(finalContentSize);
                        } else {
                            cc.warn('ProgressBar non-FILLED mode only works when barSprite\'s Type is non-FILLED!');
                        }
                    }
                }
            },
            properties: {
                barSprite: {
                    default: null,
                    type: cc.Sprite,
                    tooltip: CC_DEV && 'i18n:COMPONENT.progress.bar_sprite',
                    notify: function notify() {
                        this._initBarSprite();
                    },
                    animatable: false
                },
                mode: {
                    default: Mode.HORIZONTAL,
                    type: Mode,
                    tooltip: CC_DEV && 'i18n:COMPONENT.progress.mode',
                    notify: function notify() {
                        if (this.barSprite) {
                            var entity = this.barSprite.node;
                            if (!entity)
                                return;
                            var entitySize = entity.getContentSize();
                            if (this.mode === Mode.HORIZONTAL) {
                                this.totalLength = entitySize.width;
                            } else if (this.mode === Mode.VERTICAL) {
                                this.totalLength = entitySize.height;
                            } else if (this.mode === Mode.FILLED) {
                                this.totalLength = this.barSprite.fillRange;
                            }
                        }
                    },
                    animatable: false
                },
                _N$totalLength: 1,
                totalLength: {
                    range: [
                        0,
                        Number.MAX_VALUE
                    ],
                    tooltip: CC_DEV && 'i18n:COMPONENT.progress.total_length',
                    get: function get() {
                        return this._N$totalLength;
                    },
                    set: function set(value) {
                        if (this.mode === Mode.FILLED) {
                            value = misc.clamp01(value);
                        }
                        this._N$totalLength = value;
                        this._updateBarStatus();
                    }
                },
                progress: {
                    default: 1,
                    type: cc.Float,
                    range: [
                        0,
                        1,
                        0.1
                    ],
                    slide: true,
                    tooltip: CC_DEV && 'i18n:COMPONENT.progress.progress',
                    notify: function notify() {
                        this._updateBarStatus();
                    }
                },
                reverse: {
                    default: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.progress.reverse',
                    notify: function notify() {
                        if (this.barSprite) {
                            this.barSprite.fillStart = 1 - this.barSprite.fillStart;
                        }
                        this._updateBarStatus();
                    },
                    animatable: false
                }
            },
            statics: { Mode: Mode }
        });
        cc.ProgressBar = module.exports = ProgressBar;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,