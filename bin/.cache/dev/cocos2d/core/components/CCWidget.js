(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCWidget.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var WidgetManager = require('../base-ui/CCWidgetManager');
        var AlignMode = WidgetManager.AlignMode;
        var AlignFlags = WidgetManager._AlignFlags;
        var TOP = AlignFlags.TOP;
        var MID = AlignFlags.MID;
        var BOT = AlignFlags.BOT;
        var LEFT = AlignFlags.LEFT;
        var CENTER = AlignFlags.CENTER;
        var RIGHT = AlignFlags.RIGHT;
        var TOP_BOT = TOP | BOT;
        var LEFT_RIGHT = LEFT | RIGHT;
        var Widget = cc.Class({
            name: 'cc.Widget',
            extends: require('./CCComponent'),
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.ui/Widget',
                help: 'i18n:COMPONENT.help_url.widget',
                inspector: 'packages://inspector/inspectors/comps/ccwidget.js',
                executeInEditMode: true,
                disallowMultiple: true
            },
            properties: {
                target: {
                    get: function get() {
                        return this._target;
                    },
                    set: function set(value) {
                        this._target = value;
                        if (CC_EDITOR && !cc.engine._isPlaying && this.node._parent) {
                            WidgetManager.updateOffsetsToStayPut(this);
                        }
                    },
                    type: cc.Node,
                    tooltip: CC_DEV && 'i18n:COMPONENT.widget.target'
                },
                isAlignTop: {
                    get: function get() {
                        return (this._alignFlags & TOP) > 0;
                    },
                    set: function set(value) {
                        this._setAlign(TOP, value);
                    },
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.widget.align_top'
                },
                isAlignVerticalCenter: {
                    get: function get() {
                        return (this._alignFlags & MID) > 0;
                    },
                    set: function set(value) {
                        if (value) {
                            this.isAlignTop = false;
                            this.isAlignBottom = false;
                            this._alignFlags |= MID;
                        } else {
                            this._alignFlags &= ~MID;
                        }
                    },
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.widget.align_v_center'
                },
                isAlignBottom: {
                    get: function get() {
                        return (this._alignFlags & BOT) > 0;
                    },
                    set: function set(value) {
                        this._setAlign(BOT, value);
                    },
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.widget.align_bottom'
                },
                isAlignLeft: {
                    get: function get() {
                        return (this._alignFlags & LEFT) > 0;
                    },
                    set: function set(value) {
                        this._setAlign(LEFT, value);
                    },
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.widget.align_left'
                },
                isAlignHorizontalCenter: {
                    get: function get() {
                        return (this._alignFlags & CENTER) > 0;
                    },
                    set: function set(value) {
                        if (value) {
                            this.isAlignLeft = false;
                            this.isAlignRight = false;
                            this._alignFlags |= CENTER;
                        } else {
                            this._alignFlags &= ~CENTER;
                        }
                    },
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.widget.align_h_center'
                },
                isAlignRight: {
                    get: function get() {
                        return (this._alignFlags & RIGHT) > 0;
                    },
                    set: function set(value) {
                        this._setAlign(RIGHT, value);
                    },
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.widget.align_right'
                },
                isStretchWidth: {
                    get: function get() {
                        return (this._alignFlags & LEFT_RIGHT) === LEFT_RIGHT;
                    },
                    visible: false
                },
                isStretchHeight: {
                    get: function get() {
                        return (this._alignFlags & TOP_BOT) === TOP_BOT;
                    },
                    visible: false
                },
                top: {
                    get: function get() {
                        return this._top;
                    },
                    set: function set(value) {
                        this._top = value;
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.widget.top'
                },
                bottom: {
                    get: function get() {
                        return this._bottom;
                    },
                    set: function set(value) {
                        this._bottom = value;
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.widget.bottom'
                },
                left: {
                    get: function get() {
                        return this._left;
                    },
                    set: function set(value) {
                        this._left = value;
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.widget.left'
                },
                right: {
                    get: function get() {
                        return this._right;
                    },
                    set: function set(value) {
                        this._right = value;
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.widget.right'
                },
                horizontalCenter: {
                    get: function get() {
                        return this._horizontalCenter;
                    },
                    set: function set(value) {
                        this._horizontalCenter = value;
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.widget.horizontal_center'
                },
                verticalCenter: {
                    get: function get() {
                        return this._verticalCenter;
                    },
                    set: function set(value) {
                        this._verticalCenter = value;
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.widget.vertical_center'
                },
                isAbsoluteHorizontalCenter: {
                    get: function get() {
                        return this._isAbsHorizontalCenter;
                    },
                    set: function set(value) {
                        this._isAbsHorizontalCenter = value;
                    },
                    animatable: false
                },
                isAbsoluteVerticalCenter: {
                    get: function get() {
                        return this._isAbsVerticalCenter;
                    },
                    set: function set(value) {
                        this._isAbsVerticalCenter = value;
                    },
                    animatable: false
                },
                isAbsoluteTop: {
                    get: function get() {
                        return this._isAbsTop;
                    },
                    set: function set(value) {
                        this._isAbsTop = value;
                    },
                    animatable: false
                },
                isAbsoluteBottom: {
                    get: function get() {
                        return this._isAbsBottom;
                    },
                    set: function set(value) {
                        this._isAbsBottom = value;
                    },
                    animatable: false
                },
                isAbsoluteLeft: {
                    get: function get() {
                        return this._isAbsLeft;
                    },
                    set: function set(value) {
                        this._isAbsLeft = value;
                    },
                    animatable: false
                },
                isAbsoluteRight: {
                    get: function get() {
                        return this._isAbsRight;
                    },
                    set: function set(value) {
                        this._isAbsRight = value;
                    },
                    animatable: false
                },
                alignMode: {
                    default: AlignMode.ON_WINDOW_RESIZE,
                    type: AlignMode,
                    tooltip: CC_DEV && 'i18n:COMPONENT.widget.align_mode'
                },
                _wasAlignOnce: {
                    default: undefined,
                    formerlySerializedAs: 'isAlignOnce'
                },
                _target: null,
                _alignFlags: 0,
                _left: 0,
                _right: 0,
                _top: 0,
                _bottom: 0,
                _verticalCenter: 0,
                _horizontalCenter: 0,
                _isAbsLeft: true,
                _isAbsRight: true,
                _isAbsTop: true,
                _isAbsBottom: true,
                _isAbsHorizontalCenter: true,
                _isAbsVerticalCenter: true,
                _originalWidth: 0,
                _originalHeight: 0
            },
            statics: { AlignMode: AlignMode },
            onLoad: function onLoad() {
                if (this._wasAlignOnce !== undefined) {
                    this.alignMode = this._wasAlignOnce ? AlignMode.ONCE : AlignMode.ALWAYS;
                    this._wasAlignOnce = undefined;
                }
            },
            onEnable: function onEnable() {
                WidgetManager.add(this);
            },
            onDisable: function onDisable() {
                WidgetManager.remove(this);
            },
            _validateTargetInDEV: CC_DEV && function () {
                var target = this._target;
                if (target) {
                    var isParent = this.node !== target && this.node.isChildOf(target);
                    if (!isParent) {
                        cc.errorID(6500);
                        this._target = null;
                    }
                }
            },
            _setAlign: function _setAlign(flag, isAlign) {
                var current = (this._alignFlags & flag) > 0;
                if (isAlign === current) {
                    return;
                }
                var isHorizontal = (flag & LEFT_RIGHT) > 0;
                if (isAlign) {
                    this._alignFlags |= flag;
                    if (isHorizontal) {
                        this.isAlignHorizontalCenter = false;
                        if (this.isStretchWidth) {
                            this._originalWidth = this.node.width;
                            if (CC_EDITOR && !cc.engine.isPlaying) {
                                _Scene.DetectConflict.checkConflict_Widget(this);
                            }
                        }
                    } else {
                        this.isAlignVerticalCenter = false;
                        if (this.isStretchHeight) {
                            this._originalHeight = this.node.height;
                            if (CC_EDITOR && !cc.engine.isPlaying) {
                                _Scene.DetectConflict.checkConflict_Widget(this);
                            }
                        }
                    }
                    if (CC_EDITOR && !cc.engine._isPlaying && this.node._parent) {
                        WidgetManager.updateOffsetsToStayPut(this, flag);
                    }
                } else {
                    if (isHorizontal) {
                        if (this.isStretchWidth) {
                            this.node.width = this._originalWidth;
                        }
                    } else {
                        if (this.isStretchHeight) {
                            this.node.height = this._originalHeight;
                        }
                    }
                    this._alignFlags &= ~flag;
                }
            },
            updateAlignment: function updateAlignment() {
                WidgetManager.updateAlignment(this.node);
            }
        });
        Object.defineProperty(Widget.prototype, 'isAlignOnce', {
            get: function get() {
                if (CC_DEBUG) {
                    cc.warn('`widget.isAlignOnce` is deprecated, use `widget.alignMode === cc.Widget.AlignMode.ONCE` instead please.');
                }
                return this.alignMode === AlignMode.ONCE;
            },
            set: function set(value) {
                if (CC_DEBUG) {
                    cc.warn('`widget.isAlignOnce` is deprecated, use `widget.alignMode = cc.Widget.AlignMode.*` instead please.');
                }
                this.alignMode = value ? AlignMode.ONCE : AlignMode.ALWAYS;
            }
        });
        cc.Widget = module.exports = Widget;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDV2lkZ2V0LmpzIiwiL1VzZXJzL1NoYXJlZC9iaW5nb19mcmVuenkvZW5naW5lL2NvY29zMmQvY29yZS9jb21wb25lbnRzL0NDV2lkZ2V0LmpzIl0sIm5hbWVzIjpbIldpZGdldE1hbmFnZXIiLCJyZXF1aXJlIiwiQWxpZ25Nb2RlIiwiQWxpZ25GbGFncyIsIl9BbGlnbkZsYWdzIiwiVE9QIiwiTUlEIiwiQk9UIiwiTEVGVCIsIkNFTlRFUiIsIlJJR0hUIiwiVE9QX0JPVCIsIkxFRlRfUklHSFQiLCJXaWRnZXQiLCJjYyIsIkNsYXNzIiwibmFtZSIsImV4dGVuZHMiLCJlZGl0b3IiLCJDQ19FRElUT1IiLCJtZW51IiwiaGVscCIsImluc3BlY3RvciIsImV4ZWN1dGVJbkVkaXRNb2RlIiwiZGlzYWxsb3dNdWx0aXBsZSIsInByb3BlcnRpZXMiLCJ0YXJnZXQiLCJnZXQiLCJfdGFyZ2V0Iiwic2V0IiwidmFsdWUiLCJlbmdpbmUiLCJfaXNQbGF5aW5nIiwibm9kZSIsIl9wYXJlbnQiLCJ1cGRhdGVPZmZzZXRzVG9TdGF5UHV0IiwidHlwZSIsIk5vZGUiLCJ0b29sdGlwIiwiQ0NfREVWIiwiaXNBbGlnblRvcCIsIl9hbGlnbkZsYWdzIiwiX3NldEFsaWduIiwiYW5pbWF0YWJsZSIsImlzQWxpZ25WZXJ0aWNhbENlbnRlciIsImlzQWxpZ25Cb3R0b20iLCJpc0FsaWduTGVmdCIsImlzQWxpZ25Ib3Jpem9udGFsQ2VudGVyIiwiaXNBbGlnblJpZ2h0IiwiaXNTdHJldGNoV2lkdGgiLCJ2aXNpYmxlIiwiaXNTdHJldGNoSGVpZ2h0IiwidG9wIiwiX3RvcCIsImJvdHRvbSIsIl9ib3R0b20iLCJsZWZ0IiwiX2xlZnQiLCJyaWdodCIsIl9yaWdodCIsImhvcml6b250YWxDZW50ZXIiLCJfaG9yaXpvbnRhbENlbnRlciIsInZlcnRpY2FsQ2VudGVyIiwiX3ZlcnRpY2FsQ2VudGVyIiwiaXNBYnNvbHV0ZUhvcml6b250YWxDZW50ZXIiLCJfaXNBYnNIb3Jpem9udGFsQ2VudGVyIiwiaXNBYnNvbHV0ZVZlcnRpY2FsQ2VudGVyIiwiX2lzQWJzVmVydGljYWxDZW50ZXIiLCJpc0Fic29sdXRlVG9wIiwiX2lzQWJzVG9wIiwiaXNBYnNvbHV0ZUJvdHRvbSIsIl9pc0Fic0JvdHRvbSIsImlzQWJzb2x1dGVMZWZ0IiwiX2lzQWJzTGVmdCIsImlzQWJzb2x1dGVSaWdodCIsIl9pc0Fic1JpZ2h0IiwiYWxpZ25Nb2RlIiwiZGVmYXVsdCIsIk9OX1dJTkRPV19SRVNJWkUiLCJfd2FzQWxpZ25PbmNlIiwidW5kZWZpbmVkIiwiZm9ybWVybHlTZXJpYWxpemVkQXMiLCJfb3JpZ2luYWxXaWR0aCIsIl9vcmlnaW5hbEhlaWdodCIsInN0YXRpY3MiLCJvbkxvYWQiLCJPTkNFIiwiQUxXQVlTIiwib25FbmFibGUiLCJhZGQiLCJvbkRpc2FibGUiLCJyZW1vdmUiLCJfdmFsaWRhdGVUYXJnZXRJbkRFViIsImlzUGFyZW50IiwiaXNDaGlsZE9mIiwiZXJyb3JJRCIsImZsYWciLCJpc0FsaWduIiwiY3VycmVudCIsImlzSG9yaXpvbnRhbCIsIndpZHRoIiwiaXNQbGF5aW5nIiwiX1NjZW5lIiwiRGV0ZWN0Q29uZmxpY3QiLCJjaGVja0NvbmZsaWN0X1dpZGdldCIsImhlaWdodCIsInVwZGF0ZUFsaWdubWVudCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwicHJvdG90eXBlIiwiQ0NfREVCVUciLCJ3YXJuIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjtJQUFBLElBQUEsT0FBQSxHQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUEsSUFBQSxPQUFBLE9BQUEsS0FBQSxXQUFBOzs7Ozs7Ozs7Ozs7O1FBMEJBLElBQUlBLGFBQUFBLEdBQWdCQyxPQUFBQSxDQUFRLDRCQUFSQSxDQUFwQjtRQTRCQSxJQUFJQyxTQUFBQSxHQUFZRixhQUFBQSxDQUFjRSxTQUE5QjtRQUVBLElBQUlDLFVBQUFBLEdBQWFILGFBQUFBLENBQWNJLFdBQS9CO1FBQ0EsSUFBSUMsR0FBQUEsR0FBVUYsVUFB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bEJ4RCxHQUF5QjVCLFNBQUFBLENBQVVxRixNQUFwRCxDQUpRO0FBQUEsYUFQdUM7QUFBQSxTQUF2RG9CO1FBZ0JBN0YsRUFBQUEsQ0FBR0QsTUFBSEMsR0FBWWtHLE1BQUFBLENBQU9DLE9BQVBELEdBQWlCbkcsTUFBN0JDIiwiZmlsZSI6IkNDV2lkZ2V0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxNiBDaHVrb25nIFRlY2hub2xvZ2llcyBJbmMuXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXG4gIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxuICBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcbiAgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXG5cbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG52YXIgV2lkZ2V0TWFuYWdlciA9IHJlcXVpcmUoJy4uL2Jhc2UtdWkvQ0NXaWRnZXRNYW5hZ2VyJyk7XG5cbi8qKlxuICogISNlbiBFbnVtIGZvciBXaWRnZXQncyBhbGlnbm1lbnQgbW9kZSwgaW5kaWNhdGluZyB3aGVuIHRoZSB3aWRnZXQgc2hvdWxkIHJlZnJlc2guXG4gKiAhI3poIFdpZGdldCDnmoTlr7npvZDmqKHlvI/vvIzooajnpLogV2lkZ2V0IOW6lOivpeS9leaXtuWIt+aWsOOAglxuICogQGVudW0gV2lkZ2V0LkFsaWduTW9kZVxuICovXG4vKipcbiAqICEjZW5cbiAqIE9ubHkgYWxpZ24gb25jZSB3aGVuIHRoZSBXaWRnZXQgaXMgZW5hYmxlZCBmb3IgdGhlIGZpcnN0IHRpbWUuXG4gKiBUaGlzIHdpbGwgYWxsb3cgdGhlIHNjcmlwdCBvciBhbmltYXRpb24gdG8gY29udGludWUgY29udHJvbGxpbmcgdGhlIGN1cnJlbnQgbm9kZS5cbiAqIEl0IHdpbGwgb25seSBiZSBhbGlnbmVkIG9uY2UgYmVmb3JlIHRoZSBlbmQgb2YgZnJhbWUgd2hlbiBvbkVuYWJsZSBpcyBjYWxsZWQsXG4gKiB0aGVuIGltbWVkaWF0ZWx5IGRpc2FibGVzIHRoZSBXaWRnZXQuXG4gKiAhI3poXG4gKiDku4XlnKggV2lkZ2V0IOesrOS4gOasoea/gOa0u+aXtuWvuem9kOS4gOasoe+8jOS+v+S6juiEmuacrOaIluWKqOeUu+e7p+e7reaOp+WItuW9k+WJjeiKgueCueOAglxuICog5byA5ZCv5ZCO5Lya5ZyoIG9uRW5hYmxlIOaXtuaJgOWcqOeahOmCo+S4gOW4p+e7k+adn+WJjeWvuem9kOS4gOasoe+8jOeEtuWQjueri+WIu+emgeeUqOivpSBXaWRnZXTjgIJcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBPTkNFXG4gKi9cbi8qKlxuICogISNlbiBBbGlnbiBmaXJzdCBmcm9tIHRoZSBiZWdpbm5pbmcgYXMgT05DRSwgYW5kIHRoZW4gcmVhbGlnbiBpdCBldmVyeSB0aW1lIHRoZSB3aW5kb3cgaXMgcmVzaXplZC5cbiAqICEjemgg5LiA5byA5aeL5Lya5YOPIE9OQ0Ug5LiA5qC35a+56b2Q5LiA5qyh77yM5LmL5ZCO5q+P5b2T56qX5Y+j5aSn5bCP5pS55Y+Y5pe26L+Y5Lya6YeN5paw5a+56b2Q44CCXG4gKiBAcHJvcGVydHkge051bWJlcn0gT05fV0lORE9XX1JFU0laRVxuICovXG4vKipcbiAqICEjZW4gS2VlcCBhbGlnbmluZyBhbGwgdGhlIHdheS5cbiAqICEjemgg5aeL57uI5L+d5oyB5a+56b2Q44CCXG4gKiBAcHJvcGVydHkge051bWJlcn0gQUxXQVlTXG4gKi9cbnZhciBBbGlnbk1vZGUgPSBXaWRnZXRNYW5hZ2VyLkFsaWduTW9kZTtcblxudmFyIEFsaWduRmxhZ3MgPSBXaWRnZXRNYW5hZ2VyLl9BbGlnbkZsYWdzO1xudmFyIFRPUCAgICAgPSBBbGlnbkZsYWdzLlRPUDtcbnZhciBNSUQgICAgID0gQWxpZ25GbGFncy5NSUQ7XG52YXIgQk9UICAgICA9IEFsaWduRmxhZ3MuQk9UO1xudmFyIExFRlQgICAgPSBBbGlnbkZsYWdzLkxFRlQ7XG52YXIgQ0VOVEVSICA9IEFsaWduRmxhZ3MuQ0VOVEVSO1xudmFyIFJJR0hUICAgPSBBbGlnbkZsYWdzLlJJR0hUO1xudmFyIFRPUF9CT1QgPSBUT1AgfCBCT1Q7XG52YXIgTEVGVF9SSUdIVCA9IExFRlQgfCBSSUdIVDtcblxuLyoqXG4gKiAhI2VuXG4gKiBTdG9yZXMgYW5kIG1hbmlwdWxhdGUgdGhlIGFuY2hvcmluZyBiYXNlZCBvbiBpdHMgcGFyZW50LlxuICogV2lkZ2V0IGFyZSB1c2VkIGZvciBHVUkgYnV0IGNhbiBhbHNvIGJlIHVzZWQgZm9yIG90aGVyIHRoaW5ncy5cbiAqIFdpZGdldCB3aWxsIGFkanVzdCBjdXJyZW50IG5vZGUncyBwb3NpdGlvbiBhbmQgc2l6ZSBhdXRvbWF0aWNhbGx5LCBidXQgdGhlIHJlc3VsdHMgYWZ0ZXIgYWRqdXN0bWVudCBjYW4gbm90IGJlIG9idGFpbmVkIHVudGlsIHRoZSBuZXh0IGZyYW1lIHVubGVzcyB5b3UgY2FsbCB7eyNjcm9zc0xpbmsgXCJXaWRnZXQvdXBkYXRlQWxpZ25tZW50Om1ldGhvZFwifX17ey9jcm9zc0xpbmt9fSBtYW51YWxseS5cbiAqICEjemhcbiAqIFdpZGdldCDnu4Tku7bvvIznlKjkuo7orr7nva7lkozpgILphY3lhbbnm7jlr7nkuo7niLboioLngrnnmoTovrnot53vvIxXaWRnZXQg6YCa5bi46KKr55So5LqOIFVJIOeVjOmdou+8jOS5n+WPr+S7peeUqOS6juWFtuS7luWcsOaWueOAglxuICogV2lkZ2V0IOS8muiHquWKqOiwg+aVtOW9k+WJjeiKgueCueeahOWdkOagh+WSjOWuvemrmO+8jOS4jei/h+ebruWJjeiwg+aVtOWQjueahOe7k+aenOimgeWIsOS4i+S4gOW4p+aJjeiDveWcqOiEmuacrOmHjOiOt+WPluWIsO+8jOmZpOmdnuS9oOWFiOaJi+WKqOiwg+eUqCB7eyNjcm9zc0xpbmsgXCJXaWRnZXQvdXBkYXRlQWxpZ25tZW50Om1ldGhvZFwifX17ey9jcm9zc0xpbmt9feOAglxuICpcbiAqIEBjbGFzcyBXaWRnZXRcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG52YXIgV2lkZ2V0ID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5XaWRnZXQnLCBleHRlbmRzOiByZXF1aXJlKCcuL0NDQ29tcG9uZW50JyksXG5cbiAgICBlZGl0b3I6IENDX0VESVRPUiAmJiB7XG4gICAgICAgIG1lbnU6ICdpMThuOk1BSU5fTUVOVS5jb21wb25lbnQudWkvV2lkZ2V0JyxcbiAgICAgICAgaGVscDogJ2kxOG46Q09NUE9ORU5ULmhlbHBfdXJsLndpZGdldCcsXG4gICAgICAgIGluc3BlY3RvcjogJ3BhY2thZ2VzOi8vaW5zcGVjdG9yL2luc3BlY3RvcnMvY29tcHMvY2N3aWRnZXQuanMnLFxuICAgICAgICBleGVjdXRlSW5FZGl0TW9kZTogdHJ1ZSxcbiAgICAgICAgZGlzYWxsb3dNdWx0aXBsZTogdHJ1ZSxcbiAgICB9LFxuXG4gICAgcHJvcGVydGllczoge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIFNwZWNpZmllcyBhbiBhbGlnbm1lbnQgdGFyZ2V0IHRoYXQgY2FuIG9ubHkgYmUgb25lIG9mIHRoZSBwYXJlbnQgbm9kZXMgb2YgdGhlIGN1cnJlbnQgbm9kZS5cbiAgICAgICAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgbnVsbCwgYW5kIHdoZW4gbnVsbCwgaW5kaWNhdGVzIHRoZSBjdXJyZW50IHBhcmVudC5cbiAgICAgICAgICogISN6aCDmjIflrprkuIDkuKrlr7npvZDnm67moIfvvIzlj6rog73mmK/lvZPliY3oioLngrnnmoTlhbbkuK3kuIDkuKrniLboioLngrnvvIzpu5jorqTkuLrnqbrvvIzkuLrnqbrml7booajnpLrlvZPliY3niLboioLngrnjgIJcbiAgICAgICAgICogQHByb3BlcnR5IHtOb2RlfSB0YXJnZXRcbiAgICAgICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgdGFyZ2V0OiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdGFyZ2V0O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKENDX0VESVRPUiAmJiAhY2MuZW5naW5lLl9pc1BsYXlpbmcgJiYgdGhpcy5ub2RlLl9wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYWRqdXN0IHRoZSBvZmZzZXRzIHRvIGtlZXAgdGhlIHNpemUgYW5kIHBvc2l0aW9uIHVuY2hhbmdlZCBhZnRlciB0YXJnZXQgY2hhZ25lZFxuICAgICAgICAgICAgICAgICAgICBXaWRnZXRNYW5hZ2VyLnVwZGF0ZU9mZnNldHNUb1N0YXlQdXQodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHR5cGU6IGNjLk5vZGUsXG4gICAgICAgICAgICB0b29sdGlwOiBDQ19ERVYgJiYgJ2kxOG46Q09NUE9ORU5ULndpZGdldC50YXJnZXQnLFxuICAgICAgICB9LFxuXG4gICAgICAgIC8vIEVOQUJMRSBBTElHTiA/XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gV2hldGhlciB0byBhbGlnbiB0aGUgdG9wLlxuICAgICAgICAgKiAhI3poIOaYr+WQpuWvuem9kOS4iui+ueOAglxuICAgICAgICAgKiBAcHJvcGVydHkgaXNBbGlnblRvcFxuICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgICAgICovXG4gICAgICAgIGlzQWxpZ25Ub3A6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5fYWxpZ25GbGFncyAmIFRPUCkgPiAwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0QWxpZ24oVE9QLCB2YWx1ZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYW5pbWF0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICB0b29sdGlwOiBDQ19ERVYgJiYgJ2kxOG46Q09NUE9ORU5ULndpZGdldC5hbGlnbl90b3AnLFxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuXG4gICAgICAgICAqIFZlcnRpY2FsbHkgYWxpZ25zIHRoZSBtaWRwb2ludCwgVGhpcyB3aWxsIG9wZW4gdGhlIG90aGVyIHZlcnRpY2FsIGFsaWdubWVudCBvcHRpb25zIGNhbmNlbC5cbiAgICAgICAgICogISN6aFxuICAgICAgICAgKiDmmK/lkKblnoLnm7TmlrnlkJHlr7npvZDkuK3ngrnvvIzlvIDlkK/mraTpobnkvJrlsIblnoLnm7TmlrnlkJHlhbbku5blr7npvZDpgInpobnlj5bmtojjgIJcbiAgICAgICAgICogQHByb3BlcnR5IGlzQWxpZ25WZXJ0aWNhbENlbnRlclxuICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgICAgICovXG4gICAgICAgIGlzQWxpZ25WZXJ0aWNhbENlbnRlcjoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLl9hbGlnbkZsYWdzICYgTUlEKSA+IDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0FsaWduVG9wID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNBbGlnbkJvdHRvbSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hbGlnbkZsYWdzIHw9IE1JRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FsaWduRmxhZ3MgJj0gfk1JRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYW5pbWF0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICB0b29sdGlwOiBDQ19ERVYgJiYgJ2kxOG46Q09NUE9ORU5ULndpZGdldC5hbGlnbl92X2NlbnRlcicsXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gV2hldGhlciB0byBhbGlnbiB0aGUgYm90dG9tLlxuICAgICAgICAgKiAhI3poIOaYr+WQpuWvuem9kOS4i+i+ueOAglxuICAgICAgICAgKiBAcHJvcGVydHkgaXNBbGlnbkJvdHRvbVxuICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgICAgICovXG4gICAgICAgIGlzQWxpZ25Cb3R0b206IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5fYWxpZ25GbGFncyAmIEJPVCkgPiAwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0QWxpZ24oQk9ULCB2YWx1ZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYW5pbWF0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICB0b29sdGlwOiBDQ19ERVYgJiYgJ2kxOG46Q09NUE9ORU5ULndpZGdldC5hbGlnbl9ib3R0b20nLFxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIFdoZXRoZXIgdG8gYWxpZ24gdGhlIGxlZnQuXG4gICAgICAgICAqICEjemgg5piv5ZCm5a+56b2Q5bem6L65XG4gICAgICAgICAqIEBwcm9wZXJ0eSBpc0FsaWduTGVmdFxuICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgICAgICovXG4gICAgICAgIGlzQWxpZ25MZWZ0OiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuX2FsaWduRmxhZ3MgJiBMRUZUKSA+IDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRBbGlnbihMRUZULCB2YWx1ZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYW5pbWF0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICB0b29sdGlwOiBDQ19ERVYgJiYgJ2kxOG46Q09NUE9ORU5ULndpZGdldC5hbGlnbl9sZWZ0JyxcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlblxuICAgICAgICAgKiBIb3Jpem9udGFsIGFsaWducyB0aGUgbWlkcG9pbnQuIFRoaXMgd2lsbCBvcGVuIHRoZSBvdGhlciBob3Jpem9udGFsIGFsaWdubWVudCBvcHRpb25zIGNhbmNlbGVkLlxuICAgICAgICAgKiAhI3poXG4gICAgICAgICAqIOaYr+WQpuawtOW5s+aWueWQkeWvuem9kOS4reeCue+8jOW8gOWQr+atpOmAiemhueS8muWwhuawtOW5s+aWueWQkeWFtuS7luWvuem9kOmAiemhueWPlua2iOOAglxuICAgICAgICAgKiBAcHJvcGVydHkgaXNBbGlnbkhvcml6b250YWxDZW50ZXJcbiAgICAgICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICBpc0FsaWduSG9yaXpvbnRhbENlbnRlcjoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLl9hbGlnbkZsYWdzICYgQ0VOVEVSKSA+IDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0FsaWduTGVmdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzQWxpZ25SaWdodCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hbGlnbkZsYWdzIHw9IENFTlRFUjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FsaWduRmxhZ3MgJj0gfkNFTlRFUjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYW5pbWF0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICB0b29sdGlwOiBDQ19ERVYgJiYgJ2kxOG46Q09NUE9ORU5ULndpZGdldC5hbGlnbl9oX2NlbnRlcicsXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gV2hldGhlciB0byBhbGlnbiB0aGUgcmlnaHQuXG4gICAgICAgICAqICEjemgg5piv5ZCm5a+56b2Q5Y+z6L6544CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSBpc0FsaWduUmlnaHRcbiAgICAgICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICBpc0FsaWduUmlnaHQ6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5fYWxpZ25GbGFncyAmIFJJR0hUKSA+IDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRBbGlnbihSSUdIVCwgdmFsdWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFuaW1hdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC53aWRnZXQuYWxpZ25fcmlnaHQnLFxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuXG4gICAgICAgICAqIFdoZXRoZXIgdGhlIHN0cmV0Y2hlZCBob3Jpem9udGFsbHksIHdoZW4gZW5hYmxlIHRoZSBsZWZ0IGFuZCByaWdodCBhbGlnbm1lbnQgd2lsbCBiZSBzdHJldGNoZWQgaG9yaXpvbnRhbGx5LFxuICAgICAgICAgKiB0aGUgd2lkdGggc2V0dGluZyBpcyBpbnZhbGlkIChyZWFkIG9ubHkpLlxuICAgICAgICAgKiAhI3poXG4gICAgICAgICAqIOW9k+WJjeaYr+WQpuawtOW5s+aLieS8uOOAguW9k+WQjOaXtuWQr+eUqOW3puWPs+Wvuem9kOaXtu+8jOiKgueCueWwhuS8muiiq+awtOW5s+aLieS8uO+8jOatpOaXtuiKgueCueeahOWuveW6puWPquivu+OAglxuICAgICAgICAgKiBAcHJvcGVydHkgaXNTdHJldGNoV2lkdGhcbiAgICAgICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgKi9cbiAgICAgICAgaXNTdHJldGNoV2lkdGg6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5fYWxpZ25GbGFncyAmIExFRlRfUklHSFQpID09PSBMRUZUX1JJR0hUO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuXG4gICAgICAgICAqIFdoZXRoZXIgdGhlIHN0cmV0Y2hlZCB2ZXJ0aWNhbGx5LCB3aGVuIGVuYWJsZSB0aGUgbGVmdCBhbmQgcmlnaHQgYWxpZ25tZW50IHdpbGwgYmUgc3RyZXRjaGVkIHZlcnRpY2FsbHksXG4gICAgICAgICAqIHRoZW4gaGVpZ2h0IHNldHRpbmcgaXMgaW52YWxpZCAocmVhZCBvbmx5KVxuICAgICAgICAgKiAhI3poXG4gICAgICAgICAqIOW9k+WJjeaYr+WQpuWeguebtOaLieS8uOOAguW9k+WQjOaXtuWQr+eUqOS4iuS4i+Wvuem9kOaXtu+8jOiKgueCueWwhuS8muiiq+WeguebtOaLieS8uO+8jOatpOaXtuiKgueCueeahOmrmOW6puWPquivu+OAglxuICAgICAgICAgKiBAcHJvcGVydHkgaXNTdHJldGNoSGVpZ2h0XG4gICAgICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICAgICovXG4gICAgICAgIGlzU3RyZXRjaEhlaWdodDoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLl9hbGlnbkZsYWdzICYgVE9QX0JPVCkgPT09IFRPUF9CT1Q7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBBTElHTiBNQVJHSU5TXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW5cbiAgICAgICAgICogVGhlIG1hcmdpbnMgYmV0d2VlbiB0aGUgdG9wIG9mIHRoaXMgbm9kZSBhbmQgdGhlIHRvcCBvZiBwYXJlbnQgbm9kZSxcbiAgICAgICAgICogdGhlIHZhbHVlIGNhbiBiZSBuZWdhdGl2ZSwgT25seSBhdmFpbGFibGUgaW4gJ2lzQWxpZ25Ub3AnIG9wZW4uXG4gICAgICAgICAqICEjemhcbiAgICAgICAgICog5pys6IqC54K56aG26L655ZKM54i26IqC54K56aG26L6555qE6Led56a777yM5Y+v5aGr5YaZ6LSf5YC877yM5Y+q5pyJ5ZyoIGlzQWxpZ25Ub3Ag5byA5ZCv5pe25omN5pyJ5L2c55So44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSB0b3BcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICogQGRlZmF1bHQgMFxuICAgICAgICAgKi9cbiAgICAgICAgdG9wOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdG9wO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdG9wID0gdmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC53aWRnZXQudG9wJyxcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlblxuICAgICAgICAgKiBUaGUgbWFyZ2lucyBiZXR3ZWVuIHRoZSBib3R0b20gb2YgdGhpcyBub2RlIGFuZCB0aGUgYm90dG9tIG9mIHBhcmVudCBub2RlLFxuICAgICAgICAgKiB0aGUgdmFsdWUgY2FuIGJlIG5lZ2F0aXZlLCBPbmx5IGF2YWlsYWJsZSBpbiAnaXNBbGlnbkJvdHRvbScgb3Blbi5cbiAgICAgICAgICogISN6aFxuICAgICAgICAgKiDmnKzoioLngrnlupXovrnlkozniLboioLngrnlupXovrnnmoTot53nprvvvIzlj6/loavlhpnotJ/lgLzvvIzlj6rmnInlnKggaXNBbGlnbkJvdHRvbSDlvIDlkK/ml7bmiY3mnInkvZznlKjjgIJcbiAgICAgICAgICogQHByb3BlcnR5IGJvdHRvbVxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKiBAZGVmYXVsdCAwXG4gICAgICAgICAqL1xuICAgICAgICBib3R0b206IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ib3R0b207XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9ib3R0b20gPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0b29sdGlwOiBDQ19ERVYgJiYgJ2kxOG46Q09NUE9ORU5ULndpZGdldC5ib3R0b20nLFxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuXG4gICAgICAgICAqIFRoZSBtYXJnaW5zIGJldHdlZW4gdGhlIGxlZnQgb2YgdGhpcyBub2RlIGFuZCB0aGUgbGVmdCBvZiBwYXJlbnQgbm9kZSxcbiAgICAgICAgICogdGhlIHZhbHVlIGNhbiBiZSBuZWdhdGl2ZSwgT25seSBhdmFpbGFibGUgaW4gJ2lzQWxpZ25MZWZ0JyBvcGVuLlxuICAgICAgICAgKiAhI3poXG4gICAgICAgICAqIOacrOiKgueCueW3pui+ueWSjOeItuiKgueCueW3pui+ueeahOi3neemu++8jOWPr+Whq+WGmei0n+WAvO+8jOWPquacieWcqCBpc0FsaWduTGVmdCDlvIDlkK/ml7bmiY3mnInkvZznlKjjgIJcbiAgICAgICAgICogQHByb3BlcnR5IGxlZnRcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICogQGRlZmF1bHQgMFxuICAgICAgICAgKi9cbiAgICAgICAgbGVmdDoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xlZnQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sZWZ0ID0gdmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC53aWRnZXQubGVmdCcsXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW5cbiAgICAgICAgICogVGhlIG1hcmdpbnMgYmV0d2VlbiB0aGUgcmlnaHQgb2YgdGhpcyBub2RlIGFuZCB0aGUgcmlnaHQgb2YgcGFyZW50IG5vZGUsXG4gICAgICAgICAqIHRoZSB2YWx1ZSBjYW4gYmUgbmVnYXRpdmUsIE9ubHkgYXZhaWxhYmxlIGluICdpc0FsaWduUmlnaHQnIG9wZW4uXG4gICAgICAgICAqICEjemhcbiAgICAgICAgICog5pys6IqC54K55Y+z6L655ZKM54i26IqC54K55Y+z6L6555qE6Led56a777yM5Y+v5aGr5YaZ6LSf5YC877yM5Y+q5pyJ5ZyoIGlzQWxpZ25SaWdodCDlvIDlkK/ml7bmiY3mnInkvZznlKjjgIJcbiAgICAgICAgICogQHByb3BlcnR5IHJpZ2h0XG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqIEBkZWZhdWx0IDBcbiAgICAgICAgICovXG4gICAgICAgIHJpZ2h0OiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmlnaHQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yaWdodCA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQud2lkZ2V0LnJpZ2h0JyxcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlblxuICAgICAgICAgKiBIb3Jpem9udGFsIGFsaWducyB0aGUgbWlkcG9pbnQgb2Zmc2V0IHZhbHVlLFxuICAgICAgICAgKiB0aGUgdmFsdWUgY2FuIGJlIG5lZ2F0aXZlLCBPbmx5IGF2YWlsYWJsZSBpbiAnaXNBbGlnbkhvcml6b250YWxDZW50ZXInIG9wZW4uXG4gICAgICAgICAqICEjemgg5rC05bmz5bGF5Lit55qE5YGP56e75YC877yM5Y+v5aGr5YaZ6LSf5YC877yM5Y+q5pyJ5ZyoIGlzQWxpZ25Ib3Jpem9udGFsQ2VudGVyIOW8gOWQr+aXtuaJjeacieS9nOeUqOOAglxuICAgICAgICAgKiBAcHJvcGVydHkgaG9yaXpvbnRhbENlbnRlclxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKiBAZGVmYXVsdCAwXG4gICAgICAgICAqL1xuICAgICAgICBob3Jpem9udGFsQ2VudGVyOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faG9yaXpvbnRhbENlbnRlcjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hvcml6b250YWxDZW50ZXIgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0b29sdGlwOiBDQ19ERVYgJiYgJ2kxOG46Q09NUE9ORU5ULndpZGdldC5ob3Jpem9udGFsX2NlbnRlcicsXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW5cbiAgICAgICAgICogVmVydGljYWwgYWxpZ25zIHRoZSBtaWRwb2ludCBvZmZzZXQgdmFsdWUsXG4gICAgICAgICAqIHRoZSB2YWx1ZSBjYW4gYmUgbmVnYXRpdmUsIE9ubHkgYXZhaWxhYmxlIGluICdpc0FsaWduVmVydGljYWxDZW50ZXInIG9wZW4uXG4gICAgICAgICAqICEjemgg5Z6C55u05bGF5Lit55qE5YGP56e75YC877yM5Y+v5aGr5YaZ6LSf5YC877yM5Y+q5pyJ5ZyoIGlzQWxpZ25WZXJ0aWNhbENlbnRlciDlvIDlkK/ml7bmiY3mnInkvZznlKjjgIJcbiAgICAgICAgICogQHByb3BlcnR5IHZlcnRpY2FsQ2VudGVyXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqIEBkZWZhdWx0IDBcbiAgICAgICAgICovXG4gICAgICAgIHZlcnRpY2FsQ2VudGVyOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdmVydGljYWxDZW50ZXI7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl92ZXJ0aWNhbENlbnRlciA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQud2lkZ2V0LnZlcnRpY2FsX2NlbnRlcicsXG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gUEFSQ0VOVEFHRSBPUiBBQlNPTFVURVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIElmIHRydWUsIGhvcml6b250YWxDZW50ZXIgaXMgcGl4ZWwgbWFyZ2luLCBvdGhlcndpc2UgaXMgcGVyY2VudGFnZSAoMCAtIDEpIG1hcmdpbi5cbiAgICAgICAgICogISN6aCDlpoLmnpzkuLogdHJ1Ze+8jFwiaG9yaXpvbnRhbENlbnRlclwiIOWwhuS8muS7peWDj+e0oOS9nOS4uuWBj+enu+WAvO+8jOWPjeS5i+S4uueZvuWIhuavlO+8iDAg5YiwIDHvvInjgIJcbiAgICAgICAgICogQHByb3BlcnR5IGlzQWJzb2x1dGVIb3Jpem9udGFsQ2VudGVyXG4gICAgICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICAgICAqL1xuICAgICAgICBpc0Fic29sdXRlSG9yaXpvbnRhbENlbnRlcjoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzQWJzSG9yaXpvbnRhbENlbnRlcjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2lzQWJzSG9yaXpvbnRhbENlbnRlciA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFuaW1hdGFibGU6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gSWYgdHJ1ZSwgdmVydGljYWxDZW50ZXIgaXMgcGl4ZWwgbWFyZ2luLCBvdGhlcndpc2UgaXMgcGVyY2VudGFnZSAoMCAtIDEpIG1hcmdpbi5cbiAgICAgICAgICogISN6aCDlpoLmnpzkuLogdHJ1Ze+8jFwidmVydGljYWxDZW50ZXJcIiDlsIbkvJrku6Xlg4/ntKDkvZzkuLrlgY/np7vlgLzvvIzlj43kuYvkuLrnmb7liIbmr5TvvIgwIOWIsCAx77yJ44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSBpc0Fic29sdXRlVmVydGljYWxDZW50ZXJcbiAgICAgICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgICAgICovXG4gICAgICAgIGlzQWJzb2x1dGVWZXJ0aWNhbENlbnRlcjoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzQWJzVmVydGljYWxDZW50ZXI7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pc0Fic1ZlcnRpY2FsQ2VudGVyID0gdmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYW5pbWF0YWJsZTogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlblxuICAgICAgICAgKiBJZiB0cnVlLCB0b3AgaXMgcGl4ZWwgbWFyZ2luLCBvdGhlcndpc2UgaXMgcGVyY2VudGFnZSAoMCAtIDEpIG1hcmdpbiByZWxhdGl2ZSB0byB0aGUgcGFyZW50J3MgaGVpZ2h0LlxuICAgICAgICAgKiAhI3poXG4gICAgICAgICAqIOWmguaenOS4uiB0cnVl77yMXCJ0b3BcIiDlsIbkvJrku6Xlg4/ntKDkvZzkuLrovrnot53vvIzlkKbliJnlsIbkvJrku6Xnm7jlr7nniLbniankvZPpq5jluqbnmoTnmb7liIbmr5TvvIgwIOWIsCAx77yJ5L2c5Li66L656Led44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSBpc0Fic29sdXRlVG9wXG4gICAgICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICAgICAqL1xuICAgICAgICBpc0Fic29sdXRlVG9wOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faXNBYnNUb3A7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pc0Fic1RvcCA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFuaW1hdGFibGU6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW5cbiAgICAgICAgICogSWYgdHJ1ZSwgYm90dG9tIGlzIHBpeGVsIG1hcmdpbiwgb3RoZXJ3aXNlIGlzIHBlcmNlbnRhZ2UgKDAgLSAxKSBtYXJnaW4gcmVsYXRpdmUgdG8gdGhlIHBhcmVudCdzIGhlaWdodC5cbiAgICAgICAgICogISN6aFxuICAgICAgICAgKiDlpoLmnpzkuLogdHJ1Ze+8jFwiYm90dG9tXCIg5bCG5Lya5Lul5YOP57Sg5L2c5Li66L656Led77yM5ZCm5YiZ5bCG5Lya5Lul55u45a+554i254mp5L2T6auY5bqm55qE55m+5YiG5q+U77yIMCDliLAgMe+8ieS9nOS4uui+uei3neOAglxuICAgICAgICAgKiBAcHJvcGVydHkgaXNBYnNvbHV0ZUJvdHRvbVxuICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAgICAgKi9cbiAgICAgICAgaXNBYnNvbHV0ZUJvdHRvbToge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzQWJzQm90dG9tO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faXNBYnNCb3R0b20gPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbmltYXRhYmxlOiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuXG4gICAgICAgICAqIElmIHRydWUsIGxlZnQgaXMgcGl4ZWwgbWFyZ2luLCBvdGhlcndpc2UgaXMgcGVyY2VudGFnZSAoMCAtIDEpIG1hcmdpbiByZWxhdGl2ZSB0byB0aGUgcGFyZW50J3Mgd2lkdGguXG4gICAgICAgICAqICEjemhcbiAgICAgICAgICog5aaC5p6c5Li6IHRydWXvvIxcImxlZnRcIiDlsIbkvJrku6Xlg4/ntKDkvZzkuLrovrnot53vvIzlkKbliJnlsIbkvJrku6Xnm7jlr7nniLbniankvZPlrr3luqbnmoTnmb7liIbmr5TvvIgwIOWIsCAx77yJ5L2c5Li66L656Led44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSBpc0Fic29sdXRlTGVmdFxuICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAgICAgKi9cbiAgICAgICAgaXNBYnNvbHV0ZUxlZnQ6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc0Fic0xlZnQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pc0Fic0xlZnQgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbmltYXRhYmxlOiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuXG4gICAgICAgICAqIElmIHRydWUsIHJpZ2h0IGlzIHBpeGVsIG1hcmdpbiwgb3RoZXJ3aXNlIGlzIHBlcmNlbnRhZ2UgKDAgLSAxKSBtYXJnaW4gcmVsYXRpdmUgdG8gdGhlIHBhcmVudCdzIHdpZHRoLlxuICAgICAgICAgKiAhI3poXG4gICAgICAgICAqIOWmguaenOS4uiB0cnVl77yMXCJyaWdodFwiIOWwhuS8muS7peWDj+e0oOS9nOS4uui+uei3ne+8jOWQpuWImeWwhuS8muS7peebuOWvueeItueJqeS9k+WuveW6pueahOeZvuWIhuavlO+8iDAg5YiwIDHvvInkvZzkuLrovrnot53jgIJcbiAgICAgICAgICogQHByb3BlcnR5IGlzQWJzb2x1dGVSaWdodFxuICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAgICAgKi9cbiAgICAgICAgaXNBYnNvbHV0ZVJpZ2h0OiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faXNBYnNSaWdodDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2lzQWJzUmlnaHQgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbmltYXRhYmxlOiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIFNwZWNpZmllcyB0aGUgYWxpZ25tZW50IG1vZGUgb2YgdGhlIFdpZGdldCwgd2hpY2ggZGV0ZXJtaW5lcyB3aGVuIHRoZSB3aWRnZXQgc2hvdWxkIHJlZnJlc2guXG4gICAgICAgICAqICEjemgg5oyH5a6aIFdpZGdldCDnmoTlr7npvZDmqKHlvI/vvIznlKjkuo7lhrPlrpogV2lkZ2V0IOW6lOivpeS9leaXtuWIt+aWsOOAglxuICAgICAgICAgKiBAcHJvcGVydHkge1dpZGdldC5BbGlnbk1vZGV9IGFsaWduTW9kZVxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiB3aWRnZXQuYWxpZ25Nb2RlID0gY2MuV2lkZ2V0LkFsaWduTW9kZS5PTl9XSU5ET1dfUkVTSVpFO1xuICAgICAgICAgKi9cbiAgICAgICAgYWxpZ25Nb2RlOiB7XG4gICAgICAgICAgIGRlZmF1bHQ6IEFsaWduTW9kZS5PTl9XSU5ET1dfUkVTSVpFLFxuICAgICAgICAgICB0eXBlOiBBbGlnbk1vZGUsXG4gICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQud2lkZ2V0LmFsaWduX21vZGUnLFxuICAgICAgICB9LFxuXG4gICAgICAgIC8vXG5cbiAgICAgICAgX3dhc0FsaWduT25jZToge1xuICAgICAgICAgICAgZGVmYXVsdDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZm9ybWVybHlTZXJpYWxpemVkQXM6ICdpc0FsaWduT25jZScsXG4gICAgICAgIH0sXG5cbiAgICAgICAgX3RhcmdldDogbnVsbCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISN6aDog5a+56b2Q5byA5YWz77yM55SxIEFsaWduRmxhZ3Mg57uE5oiQXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwcm9wZXJ0eSBfYWxpZ25GbGFnc1xuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKiBAZGVmYXVsdCAwXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICBfYWxpZ25GbGFnczogMCxcblxuICAgICAgICBfbGVmdDogMCxcbiAgICAgICAgX3JpZ2h0OiAwLFxuICAgICAgICBfdG9wOiAwLFxuICAgICAgICBfYm90dG9tOiAwLFxuICAgICAgICBfdmVydGljYWxDZW50ZXI6IDAsXG4gICAgICAgIF9ob3Jpem9udGFsQ2VudGVyOiAwLFxuICAgICAgICBfaXNBYnNMZWZ0OiB0cnVlLFxuICAgICAgICBfaXNBYnNSaWdodDogdHJ1ZSxcbiAgICAgICAgX2lzQWJzVG9wOiB0cnVlLFxuICAgICAgICBfaXNBYnNCb3R0b206IHRydWUsXG4gICAgICAgIF9pc0Fic0hvcml6b250YWxDZW50ZXI6IHRydWUsXG4gICAgICAgIF9pc0Fic1ZlcnRpY2FsQ2VudGVyOiB0cnVlLFxuXG4gICAgICAgIC8vIG9yaWdpbmFsIHNpemUgYmVmb3JlIGFsaWduXG4gICAgICAgIF9vcmlnaW5hbFdpZHRoOiAwLFxuICAgICAgICBfb3JpZ2luYWxIZWlnaHQ6IDBcbiAgICB9LFxuXG4gICAgc3RhdGljczoge1xuICAgICAgICBBbGlnbk1vZGU6IEFsaWduTW9kZSxcbiAgICB9LFxuXG4gICAgb25Mb2FkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl93YXNBbGlnbk9uY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gbWlncmF0ZSBmb3Igb2xkIHZlcnNpb25cbiAgICAgICAgICAgIHRoaXMuYWxpZ25Nb2RlID0gdGhpcy5fd2FzQWxpZ25PbmNlID8gQWxpZ25Nb2RlLk9OQ0UgOiBBbGlnbk1vZGUuQUxXQVlTO1xuICAgICAgICAgICAgdGhpcy5fd2FzQWxpZ25PbmNlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG9uRW5hYmxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIFdpZGdldE1hbmFnZXIuYWRkKHRoaXMpO1xuICAgIH0sXG5cbiAgICBvbkRpc2FibGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgV2lkZ2V0TWFuYWdlci5yZW1vdmUodGhpcyk7XG4gICAgfSxcblxuICAgIF92YWxpZGF0ZVRhcmdldEluREVWOiBDQ19ERVYgJiYgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy5fdGFyZ2V0O1xuICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgICB2YXIgaXNQYXJlbnQgPSB0aGlzLm5vZGUgIT09IHRhcmdldCAmJiB0aGlzLm5vZGUuaXNDaGlsZE9mKHRhcmdldCk7XG4gICAgICAgICAgICBpZiAoIWlzUGFyZW50KSB7XG4gICAgICAgICAgICAgICAgY2MuZXJyb3JJRCg2NTAwKTtcbiAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgX3NldEFsaWduOiBmdW5jdGlvbiAoZmxhZywgaXNBbGlnbikge1xuICAgICAgICB2YXIgY3VycmVudCA9ICh0aGlzLl9hbGlnbkZsYWdzICYgZmxhZykgPiAwO1xuICAgICAgICBpZiAoaXNBbGlnbiA9PT0gY3VycmVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpc0hvcml6b250YWwgPSAoZmxhZyAmIExFRlRfUklHSFQpID4gMDtcbiAgICAgICAgaWYgKGlzQWxpZ24pIHtcbiAgICAgICAgICAgIHRoaXMuX2FsaWduRmxhZ3MgfD0gZmxhZztcblxuICAgICAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaXNBbGlnbkhvcml6b250YWxDZW50ZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1N0cmV0Y2hXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBiZWNvbWUgc3RyZXRjaFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcmlnaW5hbFdpZHRoID0gdGhpcy5ub2RlLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAvLyB0ZXN0IGNoZWNrIGNvbmZsaWN0XG4gICAgICAgICAgICAgICAgICAgIGlmIChDQ19FRElUT1IgJiYgIWNjLmVuZ2luZS5pc1BsYXlpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9TY2VuZS5EZXRlY3RDb25mbGljdC5jaGVja0NvbmZsaWN0X1dpZGdldCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuaXNBbGlnblZlcnRpY2FsQ2VudGVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNTdHJldGNoSGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGJlY29tZSBzdHJldGNoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29yaWdpbmFsSGVpZ2h0ID0gdGhpcy5ub2RlLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGVzdCBjaGVjayBjb25mbGljdFxuICAgICAgICAgICAgICAgICAgICBpZiAoQ0NfRURJVE9SICYmICFjYy5lbmdpbmUuaXNQbGF5aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfU2NlbmUuRGV0ZWN0Q29uZmxpY3QuY2hlY2tDb25mbGljdF9XaWRnZXQodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChDQ19FRElUT1IgJiYgIWNjLmVuZ2luZS5faXNQbGF5aW5nICYmIHRoaXMubm9kZS5fcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gYWRqdXN0IHRoZSBvZmZzZXRzIHRvIGtlZXAgdGhlIHNpemUgYW5kIHBvc2l0aW9uIHVuY2hhbmdlZCBhZnRlciBhbGlnbm1lbnQgY2hhZ25lZFxuICAgICAgICAgICAgICAgIFdpZGdldE1hbmFnZXIudXBkYXRlT2Zmc2V0c1RvU3RheVB1dCh0aGlzLCBmbGFnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1N0cmV0Y2hXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB3aWxsIGNhbmNlbCBzdHJldGNoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm9kZS53aWR0aCA9IHRoaXMuX29yaWdpbmFsV2lkdGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNTdHJldGNoSGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHdpbGwgY2FuY2VsIHN0cmV0Y2hcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub2RlLmhlaWdodCA9IHRoaXMuX29yaWdpbmFsSGVpZ2h0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fYWxpZ25GbGFncyAmPSB+ZmxhZztcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogSW1tZWRpYXRlbHkgcGVyZm9ybSB0aGUgd2lkZ2V0IGFsaWdubWVudC4gWW91IG5lZWQgdG8gbWFudWFsbHkgY2FsbCB0aGlzIG1ldGhvZCBvbmx5IGlmXG4gICAgICogeW91IG5lZWQgdG8gZ2V0IHRoZSBsYXRlc3QgcmVzdWx0cyBhZnRlciB0aGUgYWxpZ25tZW50IGJlZm9yZSB0aGUgZW5kIG9mIGN1cnJlbnQgZnJhbWUuXG4gICAgICogISN6aFxuICAgICAqIOeri+WIu+aJp+ihjCB3aWRnZXQg5a+56b2Q5pON5L2c44CC6L+Z5Liq5o6l5Y+j5LiA6Iis5LiN6ZyA6KaB5omL5bel6LCD55So44CCXG4gICAgICog5Y+q5pyJ5b2T5L2g6ZyA6KaB5Zyo5b2T5YmN5bin57uT5p2f5YmN6I635b6XIHdpZGdldCDlr7npvZDlkI7nmoTmnIDmlrDnu5Pmnpzml7bmiY3pnIDopoHmiYvliqjosIPnlKjov5nkuKrmlrnms5XjgIJcbiAgICAgKlxuICAgICAqIEBtZXRob2QgdXBkYXRlQWxpZ25tZW50XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHdpZGdldC50b3AgPSAxMDsgICAgICAgLy8gY2hhbmdlIHRvcCBtYXJnaW5cbiAgICAgKiBjYy5sb2cod2lkZ2V0Lm5vZGUueSk7IC8vIG5vdCB5ZXQgY2hhbmdlZFxuICAgICAqIHdpZGdldC51cGRhdGVBbGlnbm1lbnQoKTtcbiAgICAgKiBjYy5sb2cod2lkZ2V0Lm5vZGUueSk7IC8vIGNoYW5nZWRcbiAgICAgKi9cbiAgICB1cGRhdGVBbGlnbm1lbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgV2lkZ2V0TWFuYWdlci51cGRhdGVBbGlnbm1lbnQodGhpcy5ub2RlKTtcbiAgICB9LFxufSk7XG5cbi8qKlxuICogISNlblxuICogV2hlbiB0dXJuZWQgb24sIGl0IHdpbGwgb25seSBiZSBhbGlnbmVkIG9uY2UgYXQgdGhlIGVuZCBvZiB0aGUgb25FbmFibGUgZnJhbWUsXG4gKiB0aGVuIGltbWVkaWF0ZWx5IGRpc2FibGVzIHRoZSBjdXJyZW50IGNvbXBvbmVudC5cbiAqIFRoaXMgd2lsbCBhbGxvdyB0aGUgc2NyaXB0IG9yIGFuaW1hdGlvbiB0byBjb250aW51ZSBjb250cm9sbGluZyB0aGUgY3VycmVudCBub2RlLlxuICogTm90ZTogSXQgd2lsbCBzdGlsbCBiZSBhbGlnbmVkIGF0IHRoZSBmcmFtZSB3aGVuIG9uRW5hYmxlIGlzIGNhbGxlZC5cbiAqICEjemhcbiAqIOW8gOWQr+WQjuS7heS8muWcqCBvbkVuYWJsZSDnmoTlvZPluKfnu5PmnZ/ml7blr7npvZDkuIDmrKHvvIznhLblkI7nq4vliLvnpoHnlKjlvZPliY3nu4Tku7bjgIJcbiAqIOi/meagt+S+v+S6juiEmuacrOaIluWKqOeUu+e7p+e7reaOp+WItuW9k+WJjeiKgueCueOAglxuICog5rOo5oSP77yab25FbmFibGUg5pe25omA5Zyo55qE6YKj5LiA5bin5LuN54S25Lya6L+b6KGM5a+56b2Q44CCXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGlzQWxpZ25PbmNlXG4gKiBAZGVmYXVsdCBmYWxzZVxuICogQGRlcHJlY2F0ZWRcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdpZGdldC5wcm90b3R5cGUsICdpc0FsaWduT25jZScsIHtcbiAgICBnZXQgKCkge1xuICAgICAgICBpZiAoQ0NfREVCVUcpIHtcbiAgICAgICAgICAgIGNjLndhcm4oJ2B3aWRnZXQuaXNBbGlnbk9uY2VgIGlzIGRlcHJlY2F0ZWQsIHVzZSBgd2lkZ2V0LmFsaWduTW9kZSA9PT0gY2MuV2lkZ2V0LkFsaWduTW9kZS5PTkNFYCBpbnN0ZWFkIHBsZWFzZS4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5hbGlnbk1vZGUgPT09IEFsaWduTW9kZS5PTkNFO1xuICAgIH0sXG4gICAgc2V0ICh2YWx1ZSkge1xuICAgICAgICBpZiAoQ0NfREVCVUcpIHtcbiAgICAgICAgICAgIGNjLndhcm4oJ2B3aWRnZXQuaXNBbGlnbk9uY2VgIGlzIGRlcHJlY2F0ZWQsIHVzZSBgd2lkZ2V0LmFsaWduTW9kZSA9IGNjLldpZGdldC5BbGlnbk1vZGUuKmAgaW5zdGVhZCBwbGVhc2UuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hbGlnbk1vZGUgPSB2YWx1ZSA/IEFsaWduTW9kZS5PTkNFIDogQWxpZ25Nb2RlLkFMV0FZUztcbiAgICB9XG59KTtcblxuXG5jYy5XaWRnZXQgPSBtb2R1bGUuZXhwb3J0cyA9IFdpZGdldDtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxNiBDaHVrb25nIFRlY2hub2xvZ2llcyBJbmMuXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXG4gIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxuICBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcbiAgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXG5cbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG52YXIgV2lkZ2V0TWFuYWdlciA9IHJlcXVpcmUoJy4uL2Jhc2UtdWkvQ0NXaWRnZXRNYW5hZ2VyJyk7XG5cbi8qKlxuICogISNlbiBFbnVtIGZvciBXaWRnZXQncyBhbGlnbm1lbnQgbW9kZSwgaW5kaWNhdGluZyB3aGVuIHRoZSB3aWRnZXQgc2hvdWxkIHJlZnJlc2guXG4gKiAhI3poIFdpZGdldCDnmoTlr7npvZDmqKHlvI/vvIzooajnpLogV2lkZ2V0IOW6lOivpeS9leaXtuWIt+aWsOOAglxuICogQGVudW0gV2lkZ2V0LkFsaWduTW9kZVxuICovXG4vKipcbiAqICEjZW5cbiAqIE9ubHkgYWxpZ24gb25jZSB3aGVuIHRoZSBXaWRnZXQgaXMgZW5hYmxlZCBmb3IgdGhlIGZpcnN0IHRpbWUuXG4gKiBUaGlzIHdpbGwgYWxsb3cgdGhlIHNjcmlwdCBvciBhbmltYXRpb24gdG8gY29udGludWUgY29udHJvbGxpbmcgdGhlIGN1cnJlbnQgbm9kZS5cbiAqIEl0IHdpbGwgb25seSBiZSBhbGlnbmVkIG9uY2UgYmVmb3JlIHRoZSBlbmQgb2YgZnJhbWUgd2hlbiBvbkVuYWJsZSBpcyBjYWxsZWQsXG4gKiB0aGVuIGltbWVkaWF0ZWx5IGRpc2FibGVzIHRoZSBXaWRnZXQuXG4gKiAhI3poXG4gKiDku4XlnKggV2lkZ2V0IOesrOS4gOasoea/gOa0u+aXtuWvuem9kOS4gOasoe+8jOS+v+S6juiEmuacrOaIluWKqOeUu+e7p+e7reaOp+WItuW9k+WJjeiKgueCueOAglxuICog5byA5ZCv5ZCO5Lya5ZyoIG9uRW5hYmxlIOaXtuaJgOWcqOeahOmCo+S4gOW4p+e7k+adn+WJjeWvuem9kOS4gOasoe+8jOeEtuWQjueri+WIu+emgeeUqOivpSBXaWRnZXTjgIJcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBPTkNFXG4gKi9cbi8qKlxuICogISNlbiBBbGlnbiBmaXJzdCBmcm9tIHRoZSBiZWdpbm5pbmcgYXMgT05DRSwgYW5kIHRoZW4gcmVhbGlnbiBpdCBldmVyeSB0aW1lIHRoZSB3aW5kb3cgaXMgcmVzaXplZC5cbiAqICEjemgg5LiA5byA5aeL5Lya5YOPIE9OQ0Ug5LiA5qC35a+56b2Q5LiA5qyh77yM5LmL5ZCO5q+P5b2T56qX5Y+j5aSn5bCP5pS55Y+Y5pe26L+Y5Lya6YeN5paw5a+56b2Q44CCXG4gKiBAcHJvcGVydHkge051bWJlcn0gT05fV0lORE9XX1JFU0laRVxuICovXG4vKipcbiAqICEjZW4gS2VlcCBhbGlnbmluZyBhbGwgdGhlIHdheS5cbiAqICEjemgg5aeL57uI5L+d5oyB5a+56b2Q44CCXG4gKiBAcHJvcGVydHkge051bWJlcn0gQUxXQVlTXG4gKi9cbnZhciBBbGlnbk1vZGUgPSBXaWRnZXRNYW5hZ2VyLkFsaWduTW9kZTtcblxudmFyIEFsaWduRmxhZ3MgPSBXaWRnZXRNYW5hZ2VyLl9BbGlnbkZsYWdzO1xudmFyIFRPUCA9IEFsaWduRmxhZ3MuVE9QO1xudmFyIE1JRCA9IEFsaWduRmxhZ3MuTUlEO1xudmFyIEJPVCA9IEFsaWduRmxhZ3MuQk9UO1xudmFyIExFRlQgPSBBbGlnbkZsYWdzLkxFRlQ7XG52YXIgQ0VOVEVSID0gQWxpZ25GbGFncy5DRU5URVI7XG52YXIgUklHSFQgPSBBbGlnbkZsYWdzLlJJR0hUO1xudmFyIFRPUF9CT1QgPSBUT1AgfCBCT1Q7XG52YXIgTEVGVF9SSUdIVCA9IExFRlQgfCBSSUdIVDtcblxuLyoqXG4gKiAhI2VuXG4gKiBTdG9yZXMgYW5kIG1hbmlwdWxhdGUgdGhlIGFuY2hvcmluZyBiYXNlZCBvbiBpdHMgcGFyZW50LlxuICogV2lkZ2V0IGFyZSB1c2VkIGZvciBHVUkgYnV0IGNhbiBhbHNvIGJlIHVzZWQgZm9yIG90aGVyIHRoaW5ncy5cbiAqIFdpZGdldCB3aWxsIGFkanVzdCBjdXJyZW50IG5vZGUncyBwb3NpdGlvbiBhbmQgc2l6ZSBhdXRvbWF0aWNhbGx5LCBidXQgdGhlIHJlc3VsdHMgYWZ0ZXIgYWRqdXN0bWVudCBjYW4gbm90IGJlIG9idGFpbmVkIHVudGlsIHRoZSBuZXh0IGZyYW1lIHVubGVzcyB5b3UgY2FsbCB7eyNjcm9zc0xpbmsgXCJXaWRnZXQvdXBkYXRlQWxpZ25tZW50Om1ldGhvZFwifX17ey9jcm9zc0xpbmt9fSBtYW51YWxseS5cbiAqICEjemhcbiAqIFdpZGdldCDnu4Tku7bvvIznlKjkuo7orr7nva7lkozpgILphY3lhbbnm7jlr7nkuo7niLboioLngrnnmoTovrnot53vvIxXaWRnZXQg6YCa5bi46KKr55So5LqOIFVJIOeVjOmdou+8jOS5n+WPr+S7peeUqOS6juWFtuS7luWcsOaWueOAglxuICogV2lkZ2V0IOS8muiHquWKqOiwg+aVtOW9k+WJjeiKgueCueeahOWdkOagh+WSjOWuvemrmO+8jOS4jei/h+ebruWJjeiwg+aVtOWQjueahOe7k+aenOimgeWIsOS4i+S4gOW4p+aJjeiDveWcqOiEmuacrOmHjOiOt+WPluWIsO+8jOmZpOmdnuS9oOWFiOaJi+WKqOiwg+eUqCB7eyNjcm9zc0xpbmsgXCJXaWRnZXQvdXBkYXRlQWxpZ25tZW50Om1ldGhvZFwifX17ey9jcm9zc0xpbmt9feOAglxuICpcbiAqIEBjbGFzcyBXaWRnZXRcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG52YXIgV2lkZ2V0ID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5XaWRnZXQnLCBleHRlbmRzOiByZXF1aXJlKCcuL0NDQ29tcG9uZW50JyksXG5cbiAgICBlZGl0b3I6IENDX0VESVRPUiAmJiB7XG4gICAgICAgIG1lbnU6ICdpMThuOk1BSU5fTUVOVS5jb21wb25lbnQudWkvV2lkZ2V0JyxcbiAgICAgICAgaGVscDogJ2kxOG46Q09NUE9ORU5ULmhlbHBfdXJsLndpZGdldCcsXG4gICAgICAgIGluc3BlY3RvcjogJ3BhY2thZ2VzOi8vaW5zcGVjdG9yL2luc3BlY3RvcnMvY29tcHMvY2N3aWRnZXQuanMnLFxuICAgICAgICBleGVjdXRlSW5FZGl0TW9kZTogdHJ1ZSxcbiAgICAgICAgZGlzYWxsb3dNdWx0aXBsZTogdHJ1ZVxuICAgIH0sXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gU3BlY2lmaWVzIGFuIGFsaWdubWVudCB0YXJnZXQgdGhhdCBjYW4gb25seSBiZSBvbmUgb2YgdGhlIHBhcmVudCBub2RlcyBvZiB0aGUgY3VycmVudCBub2RlLlxuICAgICAgICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBudWxsLCBhbmQgd2hlbiBudWxsLCBpbmRpY2F0ZXMgdGhlIGN1cnJlbnQgcGFyZW50LlxuICAgICAgICAgKiAhI3poIOaMh+WumuS4gOS4quWvuem9kOebruagh++8jOWPquiDveaYr+W9k+WJjeiKgueCueeahOWFtuS4reS4gOS4queItuiKgueCue+8jOm7mOiupOS4uuepuu+8jOS4uuepuuaXtuihqOekuuW9k+WJjeeItuiKgueCueOAglxuICAgICAgICAgKiBAcHJvcGVydHkge05vZGV9IHRhcmdldFxuICAgICAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICAgICAqL1xuICAgICAgICB0YXJnZXQ6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl90YXJnZXQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXQgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoQ0NfRURJVE9SICYmICFjYy5lbmdpbmUuX2lzUGxheWluZyAmJiB0aGlzLm5vZGUuX3BhcmVudCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBhZGp1c3QgdGhlIG9mZnNldHMgdG8ga2VlcCB0aGUgc2l6ZSBhbmQgcG9zaXRpb24gdW5jaGFuZ2VkIGFmdGVyIHRhcmdldCBjaGFnbmVkXG4gICAgICAgICAgICAgICAgICAgIFdpZGdldE1hbmFnZXIudXBkYXRlT2Zmc2V0c1RvU3RheVB1dCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHlwZTogY2MuTm9kZSxcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQud2lkZ2V0LnRhcmdldCdcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBFTkFCTEUgQUxJR04gP1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIFdoZXRoZXIgdG8gYWxpZ24gdGhlIHRvcC5cbiAgICAgICAgICogISN6aCDmmK/lkKblr7npvZDkuIrovrnjgIJcbiAgICAgICAgICogQHByb3BlcnR5IGlzQWxpZ25Ub3BcbiAgICAgICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICBpc0FsaWduVG9wOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuX2FsaWduRmxhZ3MgJiBUT1ApID4gMDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldEFsaWduKFRPUCwgdmFsdWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFuaW1hdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC53aWRnZXQuYWxpZ25fdG9wJ1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuXG4gICAgICAgICAqIFZlcnRpY2FsbHkgYWxpZ25zIHRoZSBtaWRwb2ludCwgVGhpcyB3aWxsIG9wZW4gdGhlIG90aGVyIHZlcnRpY2FsIGFsaWdubWVudCBvcHRpb25zIGNhbmNlbC5cbiAgICAgICAgICogISN6aFxuICAgICAgICAgKiDmmK/lkKblnoLnm7TmlrnlkJHlr7npvZDkuK3ngrnvvIzlvIDlkK/mraTpobnkvJrlsIblnoLnm7TmlrnlkJHlhbbku5blr7npvZDpgInpobnlj5bmtojjgIJcbiAgICAgICAgICogQHByb3BlcnR5IGlzQWxpZ25WZXJ0aWNhbENlbnRlclxuICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgICAgICovXG4gICAgICAgIGlzQWxpZ25WZXJ0aWNhbENlbnRlcjoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLl9hbGlnbkZsYWdzICYgTUlEKSA+IDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0FsaWduVG9wID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNBbGlnbkJvdHRvbSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hbGlnbkZsYWdzIHw9IE1JRDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hbGlnbkZsYWdzICY9IH5NSUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFuaW1hdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC53aWRnZXQuYWxpZ25fdl9jZW50ZXInXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gV2hldGhlciB0byBhbGlnbiB0aGUgYm90dG9tLlxuICAgICAgICAgKiAhI3poIOaYr+WQpuWvuem9kOS4i+i+ueOAglxuICAgICAgICAgKiBAcHJvcGVydHkgaXNBbGlnbkJvdHRvbVxuICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgICAgICovXG4gICAgICAgIGlzQWxpZ25Cb3R0b206IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5fYWxpZ25GbGFncyAmIEJPVCkgPiAwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0QWxpZ24oQk9ULCB2YWx1ZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYW5pbWF0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICB0b29sdGlwOiBDQ19ERVYgJiYgJ2kxOG46Q09NUE9ORU5ULndpZGdldC5hbGlnbl9ib3R0b20nXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gV2hldGhlciB0byBhbGlnbiB0aGUgbGVmdC5cbiAgICAgICAgICogISN6aCDmmK/lkKblr7npvZDlt6bovrlcbiAgICAgICAgICogQHByb3BlcnR5IGlzQWxpZ25MZWZ0XG4gICAgICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAgICAgKi9cbiAgICAgICAgaXNBbGlnbkxlZnQ6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5fYWxpZ25GbGFncyAmIExFRlQpID4gMDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldEFsaWduKExFRlQsIHZhbHVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbmltYXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQud2lkZ2V0LmFsaWduX2xlZnQnXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW5cbiAgICAgICAgICogSG9yaXpvbnRhbCBhbGlnbnMgdGhlIG1pZHBvaW50LiBUaGlzIHdpbGwgb3BlbiB0aGUgb3RoZXIgaG9yaXpvbnRhbCBhbGlnbm1lbnQgb3B0aW9ucyBjYW5jZWxlZC5cbiAgICAgICAgICogISN6aFxuICAgICAgICAgKiDmmK/lkKbmsLTlubPmlrnlkJHlr7npvZDkuK3ngrnvvIzlvIDlkK/mraTpgInpobnkvJrlsIbmsLTlubPmlrnlkJHlhbbku5blr7npvZDpgInpobnlj5bmtojjgIJcbiAgICAgICAgICogQHByb3BlcnR5IGlzQWxpZ25Ib3Jpem9udGFsQ2VudGVyXG4gICAgICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAgICAgKi9cbiAgICAgICAgaXNBbGlnbkhvcml6b250YWxDZW50ZXI6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5fYWxpZ25GbGFncyAmIENFTlRFUikgPiAwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNBbGlnbkxlZnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0FsaWduUmlnaHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWxpZ25GbGFncyB8PSBDRU5URVI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWxpZ25GbGFncyAmPSB+Q0VOVEVSO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbmltYXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQud2lkZ2V0LmFsaWduX2hfY2VudGVyJ1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIFdoZXRoZXIgdG8gYWxpZ24gdGhlIHJpZ2h0LlxuICAgICAgICAgKiAhI3poIOaYr+WQpuWvuem9kOWPs+i+ueOAglxuICAgICAgICAgKiBAcHJvcGVydHkgaXNBbGlnblJpZ2h0XG4gICAgICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAgICAgKi9cbiAgICAgICAgaXNBbGlnblJpZ2h0OiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuX2FsaWduRmxhZ3MgJiBSSUdIVCkgPiAwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0QWxpZ24oUklHSFQsIHZhbHVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbmltYXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQud2lkZ2V0LmFsaWduX3JpZ2h0J1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuXG4gICAgICAgICAqIFdoZXRoZXIgdGhlIHN0cmV0Y2hlZCBob3Jpem9udGFsbHksIHdoZW4gZW5hYmxlIHRoZSBsZWZ0IGFuZCByaWdodCBhbGlnbm1lbnQgd2lsbCBiZSBzdHJldGNoZWQgaG9yaXpvbnRhbGx5LFxuICAgICAgICAgKiB0aGUgd2lkdGggc2V0dGluZyBpcyBpbnZhbGlkIChyZWFkIG9ubHkpLlxuICAgICAgICAgKiAhI3poXG4gICAgICAgICAqIOW9k+WJjeaYr+WQpuawtOW5s+aLieS8uOOAguW9k+WQjOaXtuWQr+eUqOW3puWPs+Wvuem9kOaXtu+8jOiKgueCueWwhuS8muiiq+awtOW5s+aLieS8uO+8jOatpOaXtuiKgueCueeahOWuveW6puWPquivu+OAglxuICAgICAgICAgKiBAcHJvcGVydHkgaXNTdHJldGNoV2lkdGhcbiAgICAgICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgKi9cbiAgICAgICAgaXNTdHJldGNoV2lkdGg6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5fYWxpZ25GbGFncyAmIExFRlRfUklHSFQpID09PSBMRUZUX1JJR0hUO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuXG4gICAgICAgICAqIFdoZXRoZXIgdGhlIHN0cmV0Y2hlZCB2ZXJ0aWNhbGx5LCB3aGVuIGVuYWJsZSB0aGUgbGVmdCBhbmQgcmlnaHQgYWxpZ25tZW50IHdpbGwgYmUgc3RyZXRjaGVkIHZlcnRpY2FsbHksXG4gICAgICAgICAqIHRoZW4gaGVpZ2h0IHNldHRpbmcgaXMgaW52YWxpZCAocmVhZCBvbmx5KVxuICAgICAgICAgKiAhI3poXG4gICAgICAgICAqIOW9k+WJjeaYr+WQpuWeguebtOaLieS8uOOAguW9k+WQjOaXtuWQr+eUqOS4iuS4i+Wvuem9kOaXtu+8jOiKgueCueWwhuS8muiiq+WeguebtOaLieS8uO+8jOatpOaXtuiKgueCueeahOmrmOW6puWPquivu+OAglxuICAgICAgICAgKiBAcHJvcGVydHkgaXNTdHJldGNoSGVpZ2h0XG4gICAgICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICAgICovXG4gICAgICAgIGlzU3RyZXRjaEhlaWdodDoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLl9hbGlnbkZsYWdzICYgVE9QX0JPVCkgPT09IFRPUF9CT1Q7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBBTElHTiBNQVJHSU5TXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW5cbiAgICAgICAgICogVGhlIG1hcmdpbnMgYmV0d2VlbiB0aGUgdG9wIG9mIHRoaXMgbm9kZSBhbmQgdGhlIHRvcCBvZiBwYXJlbnQgbm9kZSxcbiAgICAgICAgICogdGhlIHZhbHVlIGNhbiBiZSBuZWdhdGl2ZSwgT25seSBhdmFpbGFibGUgaW4gJ2lzQWxpZ25Ub3AnIG9wZW4uXG4gICAgICAgICAqICEjemhcbiAgICAgICAgICog5pys6IqC54K56aG26L655ZKM54i26IqC54K56aG26L6555qE6Led56a777yM5Y+v5aGr5YaZ6LSf5YC877yM5Y+q5pyJ5ZyoIGlzQWxpZ25Ub3Ag5byA5ZCv5pe25omN5pyJ5L2c55So44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSB0b3BcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICogQGRlZmF1bHQgMFxuICAgICAgICAgKi9cbiAgICAgICAgdG9wOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdG9wO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdG9wID0gdmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC53aWRnZXQudG9wJ1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuXG4gICAgICAgICAqIFRoZSBtYXJnaW5zIGJldHdlZW4gdGhlIGJvdHRvbSBvZiB0aGlzIG5vZGUgYW5kIHRoZSBib3R0b20gb2YgcGFyZW50IG5vZGUsXG4gICAgICAgICAqIHRoZSB2YWx1ZSBjYW4gYmUgbmVnYXRpdmUsIE9ubHkgYXZhaWxhYmxlIGluICdpc0FsaWduQm90dG9tJyBvcGVuLlxuICAgICAgICAgKiAhI3poXG4gICAgICAgICAqIOacrOiKgueCueW6lei+ueWSjOeItuiKgueCueW6lei+ueeahOi3neemu++8jOWPr+Whq+WGmei0n+WAvO+8jOWPquacieWcqCBpc0FsaWduQm90dG9tIOW8gOWQr+aXtuaJjeacieS9nOeUqOOAglxuICAgICAgICAgKiBAcHJvcGVydHkgYm90dG9tXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqIEBkZWZhdWx0IDBcbiAgICAgICAgICovXG4gICAgICAgIGJvdHRvbToge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2JvdHRvbTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2JvdHRvbSA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQud2lkZ2V0LmJvdHRvbSdcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlblxuICAgICAgICAgKiBUaGUgbWFyZ2lucyBiZXR3ZWVuIHRoZSBsZWZ0IG9mIHRoaXMgbm9kZSBhbmQgdGhlIGxlZnQgb2YgcGFyZW50IG5vZGUsXG4gICAgICAgICAqIHRoZSB2YWx1ZSBjYW4gYmUgbmVnYXRpdmUsIE9ubHkgYXZhaWxhYmxlIGluICdpc0FsaWduTGVmdCcgb3Blbi5cbiAgICAgICAgICogISN6aFxuICAgICAgICAgKiDmnKzoioLngrnlt6bovrnlkozniLboioLngrnlt6bovrnnmoTot53nprvvvIzlj6/loavlhpnotJ/lgLzvvIzlj6rmnInlnKggaXNBbGlnbkxlZnQg5byA5ZCv5pe25omN5pyJ5L2c55So44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSBsZWZ0XG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqIEBkZWZhdWx0IDBcbiAgICAgICAgICovXG4gICAgICAgIGxlZnQ6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9sZWZ0O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGVmdCA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQud2lkZ2V0LmxlZnQnXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW5cbiAgICAgICAgICogVGhlIG1hcmdpbnMgYmV0d2VlbiB0aGUgcmlnaHQgb2YgdGhpcyBub2RlIGFuZCB0aGUgcmlnaHQgb2YgcGFyZW50IG5vZGUsXG4gICAgICAgICAqIHRoZSB2YWx1ZSBjYW4gYmUgbmVnYXRpdmUsIE9ubHkgYXZhaWxhYmxlIGluICdpc0FsaWduUmlnaHQnIG9wZW4uXG4gICAgICAgICAqICEjemhcbiAgICAgICAgICog5pys6IqC54K55Y+z6L655ZKM54i26IqC54K55Y+z6L6555qE6Led56a777yM5Y+v5aGr5YaZ6LSf5YC877yM5Y+q5pyJ5ZyoIGlzQWxpZ25SaWdodCDlvIDlkK/ml7bmiY3mnInkvZznlKjjgIJcbiAgICAgICAgICogQHByb3BlcnR5IHJpZ2h0XG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqIEBkZWZhdWx0IDBcbiAgICAgICAgICovXG4gICAgICAgIHJpZ2h0OiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmlnaHQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yaWdodCA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQud2lkZ2V0LnJpZ2h0J1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuXG4gICAgICAgICAqIEhvcml6b250YWwgYWxpZ25zIHRoZSBtaWRwb2ludCBvZmZzZXQgdmFsdWUsXG4gICAgICAgICAqIHRoZSB2YWx1ZSBjYW4gYmUgbmVnYXRpdmUsIE9ubHkgYXZhaWxhYmxlIGluICdpc0FsaWduSG9yaXpvbnRhbENlbnRlcicgb3Blbi5cbiAgICAgICAgICogISN6aCDmsLTlubPlsYXkuK3nmoTlgY/np7vlgLzvvIzlj6/loavlhpnotJ/lgLzvvIzlj6rmnInlnKggaXNBbGlnbkhvcml6b250YWxDZW50ZXIg5byA5ZCv5pe25omN5pyJ5L2c55So44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSBob3Jpem9udGFsQ2VudGVyXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqIEBkZWZhdWx0IDBcbiAgICAgICAgICovXG4gICAgICAgIGhvcml6b250YWxDZW50ZXI6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ob3Jpem9udGFsQ2VudGVyO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faG9yaXpvbnRhbENlbnRlciA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQud2lkZ2V0Lmhvcml6b250YWxfY2VudGVyJ1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuXG4gICAgICAgICAqIFZlcnRpY2FsIGFsaWducyB0aGUgbWlkcG9pbnQgb2Zmc2V0IHZhbHVlLFxuICAgICAgICAgKiB0aGUgdmFsdWUgY2FuIGJlIG5lZ2F0aXZlLCBPbmx5IGF2YWlsYWJsZSBpbiAnaXNBbGlnblZlcnRpY2FsQ2VudGVyJyBvcGVuLlxuICAgICAgICAgKiAhI3poIOWeguebtOWxheS4reeahOWBj+enu+WAvO+8jOWPr+Whq+WGmei0n+WAvO+8jOWPquacieWcqCBpc0FsaWduVmVydGljYWxDZW50ZXIg5byA5ZCv5pe25omN5pyJ5L2c55So44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSB2ZXJ0aWNhbENlbnRlclxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKiBAZGVmYXVsdCAwXG4gICAgICAgICAqL1xuICAgICAgICB2ZXJ0aWNhbENlbnRlcjoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZlcnRpY2FsQ2VudGVyO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdmVydGljYWxDZW50ZXIgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0b29sdGlwOiBDQ19ERVYgJiYgJ2kxOG46Q09NUE9ORU5ULndpZGdldC52ZXJ0aWNhbF9jZW50ZXInXG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gUEFSQ0VOVEFHRSBPUiBBQlNPTFVURVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIElmIHRydWUsIGhvcml6b250YWxDZW50ZXIgaXMgcGl4ZWwgbWFyZ2luLCBvdGhlcndpc2UgaXMgcGVyY2VudGFnZSAoMCAtIDEpIG1hcmdpbi5cbiAgICAgICAgICogISN6aCDlpoLmnpzkuLogdHJ1Ze+8jFwiaG9yaXpvbnRhbENlbnRlclwiIOWwhuS8muS7peWDj+e0oOS9nOS4uuWBj+enu+WAvO+8jOWPjeS5i+S4uueZvuWIhuavlO+8iDAg5YiwIDHvvInjgIJcbiAgICAgICAgICogQHByb3BlcnR5IGlzQWJzb2x1dGVIb3Jpem9udGFsQ2VudGVyXG4gICAgICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICAgICAqL1xuICAgICAgICBpc0Fic29sdXRlSG9yaXpvbnRhbENlbnRlcjoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzQWJzSG9yaXpvbnRhbENlbnRlcjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2lzQWJzSG9yaXpvbnRhbENlbnRlciA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFuaW1hdGFibGU6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gSWYgdHJ1ZSwgdmVydGljYWxDZW50ZXIgaXMgcGl4ZWwgbWFyZ2luLCBvdGhlcndpc2UgaXMgcGVyY2VudGFnZSAoMCAtIDEpIG1hcmdpbi5cbiAgICAgICAgICogISN6aCDlpoLmnpzkuLogdHJ1Ze+8jFwidmVydGljYWxDZW50ZXJcIiDlsIbkvJrku6Xlg4/ntKDkvZzkuLrlgY/np7vlgLzvvIzlj43kuYvkuLrnmb7liIbmr5TvvIgwIOWIsCAx77yJ44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSBpc0Fic29sdXRlVmVydGljYWxDZW50ZXJcbiAgICAgICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgICAgICovXG4gICAgICAgIGlzQWJzb2x1dGVWZXJ0aWNhbENlbnRlcjoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzQWJzVmVydGljYWxDZW50ZXI7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pc0Fic1ZlcnRpY2FsQ2VudGVyID0gdmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYW5pbWF0YWJsZTogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlblxuICAgICAgICAgKiBJZiB0cnVlLCB0b3AgaXMgcGl4ZWwgbWFyZ2luLCBvdGhlcndpc2UgaXMgcGVyY2VudGFnZSAoMCAtIDEpIG1hcmdpbiByZWxhdGl2ZSB0byB0aGUgcGFyZW50J3MgaGVpZ2h0LlxuICAgICAgICAgKiAhI3poXG4gICAgICAgICAqIOWmguaenOS4uiB0cnVl77yMXCJ0b3BcIiDlsIbkvJrku6Xlg4/ntKDkvZzkuLrovrnot53vvIzlkKbliJnlsIbkvJrku6Xnm7jlr7nniLbniankvZPpq5jluqbnmoTnmb7liIbmr5TvvIgwIOWIsCAx77yJ5L2c5Li66L656Led44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSBpc0Fic29sdXRlVG9wXG4gICAgICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICAgICAqL1xuICAgICAgICBpc0Fic29sdXRlVG9wOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faXNBYnNUb3A7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pc0Fic1RvcCA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFuaW1hdGFibGU6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW5cbiAgICAgICAgICogSWYgdHJ1ZSwgYm90dG9tIGlzIHBpeGVsIG1hcmdpbiwgb3RoZXJ3aXNlIGlzIHBlcmNlbnRhZ2UgKDAgLSAxKSBtYXJnaW4gcmVsYXRpdmUgdG8gdGhlIHBhcmVudCdzIGhlaWdodC5cbiAgICAgICAgICogISN6aFxuICAgICAgICAgKiDlpoLmnpzkuLogdHJ1Ze+8jFwiYm90dG9tXCIg5bCG5Lya5Lul5YOP57Sg5L2c5Li66L656Led77yM5ZCm5YiZ5bCG5Lya5Lul55u45a+554i254mp5L2T6auY5bqm55qE55m+5YiG5q+U77yIMCDliLAgMe+8ieS9nOS4uui+uei3neOAglxuICAgICAgICAgKiBAcHJvcGVydHkgaXNBYnNvbHV0ZUJvdHRvbVxuICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAgICAgKi9cbiAgICAgICAgaXNBYnNvbHV0ZUJvdHRvbToge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzQWJzQm90dG9tO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faXNBYnNCb3R0b20gPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbmltYXRhYmxlOiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuXG4gICAgICAgICAqIElmIHRydWUsIGxlZnQgaXMgcGl4ZWwgbWFyZ2luLCBvdGhlcndpc2UgaXMgcGVyY2VudGFnZSAoMCAtIDEpIG1hcmdpbiByZWxhdGl2ZSB0byB0aGUgcGFyZW50J3Mgd2lkdGguXG4gICAgICAgICAqICEjemhcbiAgICAgICAgICog5aaC5p6c5Li6IHRydWXvvIxcImxlZnRcIiDlsIbkvJrku6Xlg4/ntKDkvZzkuLrovrnot53vvIzlkKbliJnlsIbkvJrku6Xnm7jlr7nniLbniankvZPlrr3luqbnmoTnmb7liIbmr5TvvIgwIOWIsCAx77yJ5L2c5Li66L656Led44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSBpc0Fic29sdXRlTGVmdFxuICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAgICAgKi9cbiAgICAgICAgaXNBYnNvbHV0ZUxlZnQ6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc0Fic0xlZnQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pc0Fic0xlZnQgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbmltYXRhYmxlOiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuXG4gICAgICAgICAqIElmIHRydWUsIHJpZ2h0IGlzIHBpeGVsIG1hcmdpbiwgb3RoZXJ3aXNlIGlzIHBlcmNlbnRhZ2UgKDAgLSAxKSBtYXJnaW4gcmVsYXRpdmUgdG8gdGhlIHBhcmVudCdzIHdpZHRoLlxuICAgICAgICAgKiAhI3poXG4gICAgICAgICAqIOWmguaenOS4uiB0cnVl77yMXCJyaWdodFwiIOWwhuS8muS7peWDj+e0oOS9nOS4uui+uei3ne+8jOWQpuWImeWwhuS8muS7peebuOWvueeItueJqeS9k+WuveW6pueahOeZvuWIhuavlO+8iDAg5YiwIDHvvInkvZzkuLrovrnot53jgIJcbiAgICAgICAgICogQHByb3BlcnR5IGlzQWJzb2x1dGVSaWdodFxuICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAgICAgKi9cbiAgICAgICAgaXNBYnNvbHV0ZVJpZ2h0OiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faXNBYnNSaWdodDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2lzQWJzUmlnaHQgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbmltYXRhYmxlOiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIFNwZWNpZmllcyB0aGUgYWxpZ25tZW50IG1vZGUgb2YgdGhlIFdpZGdldCwgd2hpY2ggZGV0ZXJtaW5lcyB3aGVuIHRoZSB3aWRnZXQgc2hvdWxkIHJlZnJlc2guXG4gICAgICAgICAqICEjemgg5oyH5a6aIFdpZGdldCDnmoTlr7npvZDmqKHlvI/vvIznlKjkuo7lhrPlrpogV2lkZ2V0IOW6lOivpeS9leaXtuWIt+aWsOOAglxuICAgICAgICAgKiBAcHJvcGVydHkge1dpZGdldC5BbGlnbk1vZGV9IGFsaWduTW9kZVxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiB3aWRnZXQuYWxpZ25Nb2RlID0gY2MuV2lkZ2V0LkFsaWduTW9kZS5PTl9XSU5ET1dfUkVTSVpFO1xuICAgICAgICAgKi9cbiAgICAgICAgYWxpZ25Nb2RlOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBBbGlnbk1vZGUuT05fV0lORE9XX1JFU0laRSxcbiAgICAgICAgICAgIHR5cGU6IEFsaWduTW9kZSxcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQud2lkZ2V0LmFsaWduX21vZGUnXG4gICAgICAgIH0sXG5cbiAgICAgICAgLy9cblxuICAgICAgICBfd2FzQWxpZ25PbmNlOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBmb3JtZXJseVNlcmlhbGl6ZWRBczogJ2lzQWxpZ25PbmNlJ1xuICAgICAgICB9LFxuXG4gICAgICAgIF90YXJnZXQ6IG51bGwsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjemg6IOWvuem9kOW8gOWFs++8jOeUsSBBbGlnbkZsYWdzIOe7hOaIkFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcHJvcGVydHkgX2FsaWduRmxhZ3NcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICogQGRlZmF1bHQgMFxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgX2FsaWduRmxhZ3M6IDAsXG5cbiAgICAgICAgX2xlZnQ6IDAsXG4gICAgICAgIF9yaWdodDogMCxcbiAgICAgICAgX3RvcDogMCxcbiAgICAgICAgX2JvdHRvbTogMCxcbiAgICAgICAgX3ZlcnRpY2FsQ2VudGVyOiAwLFxuICAgICAgICBfaG9yaXpvbnRhbENlbnRlcjogMCxcbiAgICAgICAgX2lzQWJzTGVmdDogdHJ1ZSxcbiAgICAgICAgX2lzQWJzUmlnaHQ6IHRydWUsXG4gICAgICAgIF9pc0Fic1RvcDogdHJ1ZSxcbiAgICAgICAgX2lzQWJzQm90dG9tOiB0cnVlLFxuICAgICAgICBfaXNBYnNIb3Jpem9udGFsQ2VudGVyOiB0cnVlLFxuICAgICAgICBfaXNBYnNWZXJ0aWNhbENlbnRlcjogdHJ1ZSxcblxuICAgICAgICAvLyBvcmlnaW5hbCBzaXplIGJlZm9yZSBhbGlnblxuICAgICAgICBfb3JpZ2luYWxXaWR0aDogMCxcbiAgICAgICAgX29yaWdpbmFsSGVpZ2h0OiAwXG4gICAgfSxcblxuICAgIHN0YXRpY3M6IHtcbiAgICAgICAgQWxpZ25Nb2RlOiBBbGlnbk1vZGVcbiAgICB9LFxuXG4gICAgb25Mb2FkOiBmdW5jdGlvbiBvbkxvYWQoKSB7XG4gICAgICAgIGlmICh0aGlzLl93YXNBbGlnbk9uY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gbWlncmF0ZSBmb3Igb2xkIHZlcnNpb25cbiAgICAgICAgICAgIHRoaXMuYWxpZ25Nb2RlID0gdGhpcy5fd2FzQWxpZ25PbmNlID8gQWxpZ25Nb2RlLk9OQ0UgOiBBbGlnbk1vZGUuQUxXQVlTO1xuICAgICAgICAgICAgdGhpcy5fd2FzQWxpZ25PbmNlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG9uRW5hYmxlOiBmdW5jdGlvbiBvbkVuYWJsZSgpIHtcbiAgICAgICAgV2lkZ2V0TWFuYWdlci5hZGQodGhpcyk7XG4gICAgfSxcblxuICAgIG9uRGlzYWJsZTogZnVuY3Rpb24gb25EaXNhYmxlKCkge1xuICAgICAgICBXaWRnZXRNYW5hZ2VyLnJlbW92ZSh0aGlzKTtcbiAgICB9LFxuXG4gICAgX3ZhbGlkYXRlVGFyZ2V0SW5ERVY6IENDX0RFViAmJiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLl90YXJnZXQ7XG4gICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICAgIHZhciBpc1BhcmVudCA9IHRoaXMubm9kZSAhPT0gdGFyZ2V0ICYmIHRoaXMubm9kZS5pc0NoaWxkT2YodGFyZ2V0KTtcbiAgICAgICAgICAgIGlmICghaXNQYXJlbnQpIHtcbiAgICAgICAgICAgICAgICBjYy5lcnJvcklEKDY1MDApO1xuICAgICAgICAgICAgICAgIHRoaXMuX3RhcmdldCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX3NldEFsaWduOiBmdW5jdGlvbiBfc2V0QWxpZ24oZmxhZywgaXNBbGlnbikge1xuICAgICAgICB2YXIgY3VycmVudCA9ICh0aGlzLl9hbGlnbkZsYWdzICYgZmxhZykgPiAwO1xuICAgICAgICBpZiAoaXNBbGlnbiA9PT0gY3VycmVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpc0hvcml6b250YWwgPSAoZmxhZyAmIExFRlRfUklHSFQpID4gMDtcbiAgICAgICAgaWYgKGlzQWxpZ24pIHtcbiAgICAgICAgICAgIHRoaXMuX2FsaWduRmxhZ3MgfD0gZmxhZztcblxuICAgICAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaXNBbGlnbkhvcml6b250YWxDZW50ZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1N0cmV0Y2hXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBiZWNvbWUgc3RyZXRjaFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcmlnaW5hbFdpZHRoID0gdGhpcy5ub2RlLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAvLyB0ZXN0IGNoZWNrIGNvbmZsaWN0XG4gICAgICAgICAgICAgICAgICAgIGlmIChDQ19FRElUT1IgJiYgIWNjLmVuZ2luZS5pc1BsYXlpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9TY2VuZS5EZXRlY3RDb25mbGljdC5jaGVja0NvbmZsaWN0X1dpZGdldCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0FsaWduVmVydGljYWxDZW50ZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1N0cmV0Y2hIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYmVjb21lIHN0cmV0Y2hcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3JpZ2luYWxIZWlnaHQgPSB0aGlzLm5vZGUuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAvLyB0ZXN0IGNoZWNrIGNvbmZsaWN0XG4gICAgICAgICAgICAgICAgICAgIGlmIChDQ19FRElUT1IgJiYgIWNjLmVuZ2luZS5pc1BsYXlpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9TY2VuZS5EZXRlY3RDb25mbGljdC5jaGVja0NvbmZsaWN0X1dpZGdldCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKENDX0VESVRPUiAmJiAhY2MuZW5naW5lLl9pc1BsYXlpbmcgJiYgdGhpcy5ub2RlLl9wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBhZGp1c3QgdGhlIG9mZnNldHMgdG8ga2VlcCB0aGUgc2l6ZSBhbmQgcG9zaXRpb24gdW5jaGFuZ2VkIGFmdGVyIGFsaWdubWVudCBjaGFnbmVkXG4gICAgICAgICAgICAgICAgV2lkZ2V0TWFuYWdlci51cGRhdGVPZmZzZXRzVG9TdGF5UHV0KHRoaXMsIGZsYWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzU3RyZXRjaFdpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHdpbGwgY2FuY2VsIHN0cmV0Y2hcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub2RlLndpZHRoID0gdGhpcy5fb3JpZ2luYWxXaWR0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzU3RyZXRjaEhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB3aWxsIGNhbmNlbCBzdHJldGNoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm9kZS5oZWlnaHQgPSB0aGlzLl9vcmlnaW5hbEhlaWdodDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2FsaWduRmxhZ3MgJj0gfmZsYWc7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIEltbWVkaWF0ZWx5IHBlcmZvcm0gdGhlIHdpZGdldCBhbGlnbm1lbnQuIFlvdSBuZWVkIHRvIG1hbnVhbGx5IGNhbGwgdGhpcyBtZXRob2Qgb25seSBpZlxuICAgICAqIHlvdSBuZWVkIHRvIGdldCB0aGUgbGF0ZXN0IHJlc3VsdHMgYWZ0ZXIgdGhlIGFsaWdubWVudCBiZWZvcmUgdGhlIGVuZCBvZiBjdXJyZW50IGZyYW1lLlxuICAgICAqICEjemhcbiAgICAgKiDnq4vliLvmiafooYwgd2lkZ2V0IOWvuem9kOaTjeS9nOOAgui/meS4quaOpeWPo+S4gOiIrOS4jemcgOimgeaJi+W3peiwg+eUqOOAglxuICAgICAqIOWPquacieW9k+S9oOmcgOimgeWcqOW9k+WJjeW4p+e7k+adn+WJjeiOt+W+lyB3aWRnZXQg5a+56b2Q5ZCO55qE5pyA5paw57uT5p6c5pe25omN6ZyA6KaB5omL5Yqo6LCD55So6L+Z5Liq5pa55rOV44CCXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHVwZGF0ZUFsaWdubWVudFxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB3aWRnZXQudG9wID0gMTA7ICAgICAgIC8vIGNoYW5nZSB0b3AgbWFyZ2luXG4gICAgICogY2MubG9nKHdpZGdldC5ub2RlLnkpOyAvLyBub3QgeWV0IGNoYW5nZWRcbiAgICAgKiB3aWRnZXQudXBkYXRlQWxpZ25tZW50KCk7XG4gICAgICogY2MubG9nKHdpZGdldC5ub2RlLnkpOyAvLyBjaGFuZ2VkXG4gICAgICovXG4gICAgdXBkYXRlQWxpZ25tZW50OiBmdW5jdGlvbiB1cGRhdGVBbGlnbm1lbnQoKSB7XG4gICAgICAgIFdpZGdldE1hbmFnZXIudXBkYXRlQWxpZ25tZW50KHRoaXMubm9kZSk7XG4gICAgfVxufSk7XG5cbi8qKlxuICogISNlblxuICogV2hlbiB0dXJuZWQgb24sIGl0IHdpbGwgb25seSBiZSBhbGlnbmVkIG9uY2UgYXQgdGhlIGVuZCBvZiB0aGUgb25FbmFibGUgZnJhbWUsXG4gKiB0aGVuIGltbWVkaWF0ZWx5IGRpc2FibGVzIHRoZSBjdXJyZW50IGNvbXBvbmVudC5cbiAqIFRoaXMgd2lsbCBhbGxvdyB0aGUgc2NyaXB0IG9yIGFuaW1hdGlvbiB0byBjb250aW51ZSBjb250cm9sbGluZyB0aGUgY3VycmVudCBub2RlLlxuICogTm90ZTogSXQgd2lsbCBzdGlsbCBiZSBhbGlnbmVkIGF0IHRoZSBmcmFtZSB3aGVuIG9uRW5hYmxlIGlzIGNhbGxlZC5cbiAqICEjemhcbiAqIOW8gOWQr+WQjuS7heS8muWcqCBvbkVuYWJsZSDnmoTlvZPluKfnu5PmnZ/ml7blr7npvZDkuIDmrKHvvIznhLblkI7nq4vliLvnpoHnlKjlvZPliY3nu4Tku7bjgIJcbiAqIOi/meagt+S+v+S6juiEmuacrOaIluWKqOeUu+e7p+e7reaOp+WItuW9k+WJjeiKgueCueOAglxuICog5rOo5oSP77yab25FbmFibGUg5pe25omA5Zyo55qE6YKj5LiA5bin5LuN54S25Lya6L+b6KGM5a+56b2Q44CCXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGlzQWxpZ25PbmNlXG4gKiBAZGVmYXVsdCBmYWxzZVxuICogQGRlcHJlY2F0ZWRcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdpZGdldC5wcm90b3R5cGUsICdpc0FsaWduT25jZScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgaWYgKENDX0RFQlVHKSB7XG4gICAgICAgICAgICBjYy53YXJuKCdgd2lkZ2V0LmlzQWxpZ25PbmNlYCBpcyBkZXByZWNhdGVkLCB1c2UgYHdpZGdldC5hbGlnbk1vZGUgPT09IGNjLldpZGdldC5BbGlnbk1vZGUuT05DRWAgaW5zdGVhZCBwbGVhc2UuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYWxpZ25Nb2RlID09PSBBbGlnbk1vZGUuT05DRTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgIGlmIChDQ19ERUJVRykge1xuICAgICAgICAgICAgY2Mud2FybignYHdpZGdldC5pc0FsaWduT25jZWAgaXMgZGVwcmVjYXRlZCwgdXNlIGB3aWRnZXQuYWxpZ25Nb2RlID0gY2MuV2lkZ2V0LkFsaWduTW9kZS4qYCBpbnN0ZWFkIHBsZWFzZS4nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFsaWduTW9kZSA9IHZhbHVlID8gQWxpZ25Nb2RlLk9OQ0UgOiBBbGlnbk1vZGUuQUxXQVlTO1xuICAgIH1cbn0pO1xuXG5jYy5XaWRnZXQgPSBtb2R1bGUuZXhwb3J0cyA9IFdpZGdldDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrTkRWMmxrWjJWMExtcHpJbDBzSW01aGJXVnpJanBiSWxkcFpHZGxkRTFoYm1GblpYSWlMQ0p5WlhGMWFYSmxJaXdpUVd4cFoyNU5iMlJsSWl3aVFXeHBaMjVHYkdGbmN5SXNJbDlCYkdsbmJrWnNZV2R6SWl3aVZFOVFJaXdpVFVsRUlpd2lRazlVSWl3aVRFVkdWQ0lzSWtORlRsUkZVaUlzSWxKSlIwaFVJaXdpVkU5UVgwSlBWQ0lzSWt4RlJsUmZVa2xIU0ZRaUxDSlhhV1JuWlhRaUxDSmpZeUlzSWtOc1lYTnpJaXdpYm1GdFpTSXNJbVY0ZEdWdVpITWlMQ0psWkdsMGIzSWlMQ0pEUTE5RlJFbFVUMUlpTENKdFpXNTFJaXdpYUdWc2NDSXNJbWx1YzNCbFkzUnZjaUlzSW1WNFpXTjFkR1ZKYmtWa2FYUk5iMlJsSWl3aVpHbHpZV3hzYjNkTmRXeDBhWEJzWlNJc0luQnliM0JsY25ScFpYTWlMQ0owWVhKblpYUWlMQ0puWlhRaUxDSmZkR0Z5WjJWMElpd2ljMlYwSWl3aWRtRnNkV1VpTENKbGJtZHBibVVpTENKZmFYTlFiR0Y1YVc1bklpd2libTlrWlNJc0lsOXdZWEpsYm5RaUxDSjFjR1JoZEdWUFptWnpaWFJ6Vkc5VGRHRjVVSFYwSWl3aWRIbHdaU0lzSWs1dlpHVWlMQ0owYjI5c2RHbHdJaXdpUTBOZlJFVldJaXdpYVhOQmJHbG5ibFJ2Y0NJc0lsOWhiR2xuYmtac1lXZHpJaXdpWDNObGRFRnNhV2R1SWl3aVlXNXBiV0YwWVdKc1pTSXNJbWx6UVd4cFoyNVdaWEowYVdOaGJFTmxiblJsY2lJc0ltbHpRV3hwWjI1Q2IzUjBiMjBpTENKcGMwRnNhV2R1VEdWbWRDSXNJbWx6UVd4cFoyNUliM0pwZW05dWRHRnNRMlZ1ZEdWeUlpd2lhWE5CYkdsbmJsSnBaMmgwSWl3aWFYTlRkSEpsZEdOb1YybGtkR2dpTENKMmFYTnBZbXhsSWl3aWFYTlRkSEpsZEdOb1NHVnBaMmgwSWl3aWRHOXdJaXdpWDNSdmNDSXNJbUp2ZEhSdmJTSXNJbDlpYjNSMGIyMGlMQ0pzWldaMElpd2lYMnhsWm5RaUxDSnlhV2RvZENJc0lsOXlhV2RvZENJc0ltaHZjbWw2YjI1MFlXeERaVzUwWlhJaUxDSmZhRzl5YVhwdmJuUmhiRU5sYm5SbGNpSXNJblpsY25ScFkyRnNRMlZ1ZEdWeUlpd2lYM1psY25ScFkyRnNRMlZ1ZEdWeUlpd2lhWE5CWW5OdmJIVjBaVWh2Y21sNmIyNTBZV3hEWlc1MFpYSWlMQ0pmYVhOQlluTkliM0pwZW05dWRHRnNRMlZ1ZEdWeUlpd2lhWE5CWW5OdmJIVjBaVlpsY25ScFkyRnNRMlZ1ZEdWeUlpd2lYMmx6UVdKelZtVnlkR2xqWVd4RFpXNTBaWElpTENKcGMwRmljMjlzZFhSbFZHOXdJaXdpWDJselFXSnpWRzl3SWl3aWFYTkJZbk52YkhWMFpVSnZkSFJ2YlNJc0lsOXBjMEZpYzBKdmRIUnZiU0lzSW1selFXSnpiMngxZEdWTVpXWjBJaXdpWDJselFXSnpUR1ZtZENJc0ltbHpRV0p6YjJ4MWRHVlNhV2RvZENJc0lsOXBjMEZpYzFKcFoyaDBJaXdpWVd4cFoyNU5iMlJsSWl3aVpHVm1ZWFZzZENJc0lrOU9YMWRKVGtSUFYxOVNSVk5KV2tVaUxDSmZkMkZ6UVd4cFoyNVBibU5sSWl3aWRXNWtaV1pwYm1Wa0lpd2labTl5YldWeWJIbFRaWEpwWVd4cGVtVmtRWE1pTENKZmIzSnBaMmx1WVd4WGFXUjBhQ0lzSWw5dmNtbG5hVzVoYkVobGFXZG9kQ0lzSW5OMFlYUnBZM01pTENKdmJreHZZV1FpTENKUFRrTkZJaXdpUVV4WFFWbFRJaXdpYjI1RmJtRmliR1VpTENKaFpHUWlMQ0p2YmtScGMyRmliR1VpTENKeVpXMXZkbVVpTENKZmRtRnNhV1JoZEdWVVlYSm5aWFJKYmtSRlZpSXNJbWx6VUdGeVpXNTBJaXdpYVhORGFHbHNaRTltSWl3aVpYSnliM0pKUkNJc0ltWnNZV2NpTENKcGMwRnNhV2R1SWl3aVkzVnljbVZ1ZENJc0ltbHpTRzl5YVhwdmJuUmhiQ0lzSW5kcFpIUm9JaXdpYVhOUWJHRjVhVzVuSWl3aVgxTmpaVzVsSWl3aVJHVjBaV04wUTI5dVpteHBZM1FpTENKamFHVmphME52Ym1ac2FXTjBYMWRwWkdkbGRDSXNJbWhsYVdkb2RDSXNJblZ3WkdGMFpVRnNhV2R1YldWdWRDSXNJazlpYW1WamRDSXNJbVJsWm1sdVpWQnliM0JsY25SNUlpd2ljSEp2ZEc5MGVYQmxJaXdpUTBOZlJFVkNWVWNpTENKM1lYSnVJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVFd1FrRXNTVUZCU1VFc1owSkJRV2RDUXl4UlFVRlJMRFJDUVVGU0xFTkJRWEJDT3p0QlFVVkJPenM3T3p0QlFVdEJPenM3T3pzN096czdPenRCUVZkQk96czdPenRCUVV0Qk96czdPenRCUVV0QkxFbEJRVWxETEZsQlFWbEdMR05CUVdORkxGTkJRVGxDT3p0QlFVVkJMRWxCUVVsRExHRkJRV0ZJTEdOQlFXTkpMRmRCUVM5Q08wRkJRMEVzU1VGQlNVTXNUVUZCVlVZc1YwRkJWMFVzUjBGQmVrSTdRVUZEUVN4SlFVRkpReXhOUVVGVlNDeFhRVUZYUnl4SFFVRjZRanRCUVVOQkxFbEJRVWxETEUxQlFWVktMRmRCUVZkSkxFZEJRWHBDTzBGQlEwRXNTVUZCU1VNc1QwRkJWVXdzVjBGQlYwc3NTVUZCZWtJN1FVRkRRU3hKUVVGSlF5eFRRVUZWVGl4WFFVRlhUU3hOUVVGNlFqdEJRVU5CTEVsQlFVbERMRkZCUVZWUUxGZEJRVmRQTEV0QlFYcENPMEZCUTBFc1NVRkJTVU1zVlVGQlZVNHNUVUZCVFVVc1IwRkJjRUk3UVVGRFFTeEpRVUZKU3l4aFFVRmhTaXhQUVVGUFJTeExRVUY0UWpzN1FVRkZRVHM3T3pzN096czdPenM3TzBGQldVRXNTVUZCU1Vjc1UwRkJVME1zUjBGQlIwTXNTMEZCU0N4RFFVRlRPMEZCUTJ4Q1F5eFZRVUZOTEZkQlJGa3NSVUZEUTBNc1UwRkJVMmhDTEZGQlFWRXNaVUZCVWl4RFFVUldPenRCUVVkc1FtbENMRmxCUVZGRExHRkJRV0U3UVVGRGFrSkRMR05CUVUwc2IwTkJSRmM3UVVGRmFrSkRMR05CUVUwc1owTkJSbGM3UVVGSGFrSkRMRzFDUVVGWExHMUVRVWhOTzBGQlNXcENReXd5UWtGQmJVSXNTVUZLUmp0QlFVdHFRa01zTUVKQlFXdENPMEZCVEVRc1MwRklTRHM3UVVGWGJFSkRMR2RDUVVGWk96dEJRVVZTT3pzN096czdPMEZCVDBGRExHZENRVUZSTzBGQlEwcERMR2xDUVVGTExHVkJRVms3UVVGRFlpeDFRa0ZCVHl4TFFVRkxReXhQUVVGYU8wRkJRMGdzWVVGSVJ6dEJRVWxLUXl4cFFrRkJTeXhoUVVGVlF5eExRVUZXTEVWQlFXbENPMEZCUTJ4Q0xIRkNRVUZMUml4UFFVRk1MRWRCUVdWRkxFdEJRV1k3UVVGRFFTeHZRa0ZCU1Znc1lVRkJZU3hEUVVGRFRDeEhRVUZIYVVJc1RVRkJTQ3hEUVVGVlF5eFZRVUY0UWl4SlFVRnpReXhMUVVGTFF5eEpRVUZNTEVOQlFWVkRMRTlCUVhCRUxFVkJRVFpFTzBGQlEzcEVPMEZCUTBGc1F5eHJRMEZCWTIxRExITkNRVUZrTEVOQlFYRkRMRWxCUVhKRE8wRkJRMGc3UVVGRFNpeGhRVlpITzBGQlYwcERMR3RDUVVGTmRFSXNSMEZCUjNWQ0xFbEJXRXc3UVVGWlNrTXNjVUpCUVZORExGVkJRVlU3UVVGYVppeFRRVlJCT3p0QlFYZENVanM3UVVGRlFUczdPenM3T3p0QlFVOUJReXh2UWtGQldUdEJRVU5TWWl4cFFrRkJTeXhsUVVGWk8wRkJRMklzZFVKQlFVOHNRMEZCUXl4TFFVRkxZeXhYUVVGTUxFZEJRVzFDY0VNc1IwRkJjRUlzU1VGQk1rSXNRMEZCYkVNN1FVRkRTQ3hoUVVoUE8wRkJTVkozUWl4cFFrRkJTeXhoUVVGVlF5eExRVUZXTEVWQlFXbENPMEZCUTJ4Q0xIRkNRVUZMV1N4VFFVRk1MRU5CUVdWeVF5eEhRVUZtTEVWQlFXOUNlVUlzUzBGQmNFSTdRVUZEU0N4aFFVNVBPMEZCVDFKaExIZENRVUZaTEV0QlVFbzdRVUZSVWt3c2NVSkJRVk5ETEZWQlFWVTdRVUZTV0N4VFFXcERTanM3UVVFMFExSTdPenM3T3pzN096dEJRVk5CU3l3clFrRkJkVUk3UVVGRGJrSnFRaXhwUWtGQlN5eGxRVUZaTzBGQlEySXNkVUpCUVU4c1EwRkJReXhMUVVGTFl5eFhRVUZNTEVkQlFXMUNia01zUjBGQmNFSXNTVUZCTWtJc1EwRkJiRU03UVVGRFNDeGhRVWhyUWp0QlFVbHVRblZDTEdsQ1FVRkxMR0ZCUVZWRExFdEJRVllzUlVGQmFVSTdRVUZEYkVJc2IwSkJRVWxCTEV0QlFVb3NSVUZCVnp0QlFVTlFMSGxDUVVGTFZTeFZRVUZNTEVkQlFXdENMRXRCUVd4Q08wRkJRMEVzZVVKQlFVdExMR0ZCUVV3c1IwRkJjVUlzUzBGQmNrSTdRVUZEUVN4NVFrRkJTMG9zVjBGQlRDeEpRVUZ2UW01RExFZEJRWEJDTzBGQlEwZ3NhVUpCU2tRc1RVRkxTenRCUVVORUxIbENRVUZMYlVNc1YwRkJUQ3hKUVVGdlFpeERRVUZEYmtNc1IwRkJja0k3UVVGRFNEdEJRVU5LTEdGQlltdENPMEZCWTI1Q2NVTXNkMEpCUVZrc1MwRmtUenRCUVdWdVFrd3NjVUpCUVZORExGVkJRVlU3UVVGbVFTeFRRWEpFWmpzN1FVRjFSVkk3T3pzN096czdRVUZQUVUwc2RVSkJRV1U3UVVGRFdHeENMR2xDUVVGTExHVkJRVms3UVVGRFlpeDFRa0ZCVHl4RFFVRkRMRXRCUVV0akxGZEJRVXdzUjBGQmJVSnNReXhIUVVGd1FpeEpRVUV5UWl4RFFVRnNRenRCUVVOSUxHRkJTRlU3UVVGSldITkNMR2xDUVVGTExHRkJRVlZETEV0QlFWWXNSVUZCYVVJN1FVRkRiRUlzY1VKQlFVdFpMRk5CUVV3c1EwRkJaVzVETEVkQlFXWXNSVUZCYjBKMVFpeExRVUZ3UWp0QlFVTklMR0ZCVGxVN1FVRlBXR0VzZDBKQlFWa3NTMEZRUkR0QlFWRllUQ3h4UWtGQlUwTXNWVUZCVlR0QlFWSlNMRk5CT1VWUU96dEJRWGxHVWpzN096czdPenRCUVU5QlR5eHhRa0ZCWVR0QlFVTlVia0lzYVVKQlFVc3NaVUZCV1R0QlFVTmlMSFZDUVVGUExFTkJRVU1zUzBGQlMyTXNWMEZCVEN4SFFVRnRRbXBETEVsQlFYQkNMRWxCUVRSQ0xFTkJRVzVETzBGQlEwZ3NZVUZJVVR0QlFVbFVjVUlzYVVKQlFVc3NZVUZCVlVNc1MwRkJWaXhGUVVGcFFqdEJRVU5zUWl4eFFrRkJTMWtzVTBGQlRDeERRVUZsYkVNc1NVRkJaaXhGUVVGeFFuTkNMRXRCUVhKQ08wRkJRMGdzWVVGT1VUdEJRVTlVWVN4M1FrRkJXU3hMUVZCSU8wRkJVVlJNTEhGQ1FVRlRReXhWUVVGVk8wRkJVbFlzVTBGb1IwdzdPMEZCTWtkU096czdPenM3T3pzN1FVRlRRVkVzYVVOQlFYbENPMEZCUTNKQ2NFSXNhVUpCUVVzc1pVRkJXVHRCUVVOaUxIVkNRVUZQTEVOQlFVTXNTMEZCUzJNc1YwRkJUQ3hIUVVGdFFtaERMRTFCUVhCQ0xFbEJRVGhDTEVOQlFYSkRPMEZCUTBnc1lVRkliMEk3UVVGSmNrSnZRaXhwUWtGQlN5eGhRVUZWUXl4TFFVRldMRVZCUVdsQ08wRkJRMnhDTEc5Q1FVRkpRU3hMUVVGS0xFVkJRVmM3UVVGRFVDeDVRa0ZCUzJkQ0xGZEJRVXdzUjBGQmJVSXNTMEZCYmtJN1FVRkRRU3g1UWtGQlMwVXNXVUZCVEN4SFFVRnZRaXhMUVVGd1FqdEJRVU5CTEhsQ1FVRkxVQ3hYUVVGTUxFbEJRVzlDYUVNc1RVRkJjRUk3UVVGRFNDeHBRa0ZLUkN4TlFVdExPMEZCUTBRc2VVSkJRVXRuUXl4WFFVRk1MRWxCUVc5Q0xFTkJRVU5vUXl4TlFVRnlRanRCUVVOSU8wRkJRMG9zWVVGaWIwSTdRVUZqY2tKclF5eDNRa0ZCV1N4TFFXUlRPMEZCWlhKQ1RDeHhRa0ZCVTBNc1ZVRkJWVHRCUVdaRkxGTkJjRWhxUWpzN1FVRnpTVkk3T3pzN096czdRVUZQUVZNc2MwSkJRV003UVVGRFZuSkNMR2xDUVVGTExHVkJRVms3UVVGRFlpeDFRa0ZCVHl4RFFVRkRMRXRCUVV0akxGZEJRVXdzUjBGQmJVSXZRaXhMUVVGd1FpeEpRVUUyUWl4RFFVRndRenRCUVVOSUxHRkJTRk03UVVGSlZtMUNMR2xDUVVGTExHRkJRVlZETEV0QlFWWXNSVUZCYVVJN1FVRkRiRUlzY1VKQlFVdFpMRk5CUVV3c1EwRkJaV2hETEV0QlFXWXNSVUZCYzBKdlFpeExRVUYwUWp0QlFVTklMR0ZCVGxNN1FVRlBWbUVzZDBKQlFWa3NTMEZRUmp0QlFWRldUQ3h4UWtGQlUwTXNWVUZCVlR0QlFWSlVMRk5CTjBsT096dEJRWGRLVWpzN096czdPenM3T3pzN1FVRlhRVlVzZDBKQlFXZENPMEZCUTFwMFFpeHBRa0ZCU3l4bFFVRlpPMEZCUTJJc2RVSkJRVThzUTBGQlF5eExRVUZMWXl4WFFVRk1MRWRCUVcxQ04wSXNWVUZCY0VJc1RVRkJiME5CTEZWQlFUTkRPMEZCUTBnc1lVRklWenRCUVVsYWMwTXNjVUpCUVZNN1FVRktSeXhUUVc1TFVqdEJRWGxMVWpzN096czdPenM3T3pzN1FVRlhRVU1zZVVKQlFXbENPMEZCUTJKNFFpeHBRa0ZCU3l4bFFVRlpPMEZCUTJJc2RVSkJRVThzUTBGQlF5eExRVUZMWXl4WFFVRk1MRWRCUVcxQ09VSXNUMEZCY0VJc1RVRkJhVU5CTEU5QlFYaERPMEZCUTBnc1lVRklXVHRCUVVsaWRVTXNjVUpCUVZNN1FVRktTU3hUUVhCTVZEczdRVUV5VEZJN08wRkJSVUU3T3pzN096czdPenM3UVVGVlFVVXNZVUZCU3p0QlFVTkVla0lzYVVKQlFVc3NaVUZCV1R0QlFVTmlMSFZDUVVGUExFdEJRVXN3UWl4SlFVRmFPMEZCUTBnc1lVRklRVHRCUVVsRWVFSXNhVUpCUVVzc1lVRkJWVU1zUzBGQlZpeEZRVUZwUWp0QlFVTnNRaXh4UWtGQlMzVkNMRWxCUVV3c1IwRkJXWFpDTEV0QlFWbzdRVUZEU0N4aFFVNUJPMEZCVDBSUkxIRkNRVUZUUXl4VlFVRlZPMEZCVUd4Q0xGTkJkazFIT3p0QlFXbE9VanM3T3pzN096czdPenRCUVZWQlpTeG5Ra0ZCVVR0QlFVTktNMElzYVVKQlFVc3NaVUZCV1R0QlFVTmlMSFZDUVVGUExFdEJRVXMwUWl4UFFVRmFPMEZCUTBnc1lVRklSenRCUVVsS01VSXNhVUpCUVVzc1lVRkJWVU1zUzBGQlZpeEZRVUZwUWp0QlFVTnNRaXh4UWtGQlMzbENMRTlCUVV3c1IwRkJaWHBDTEV0QlFXWTdRVUZEU0N4aFFVNUhPMEZCVDBwUkxIRkNRVUZUUXl4VlFVRlZPMEZCVUdZc1UwRXpUa0U3TzBGQmNVOVNPenM3T3pzN096czdPMEZCVlVGcFFpeGpRVUZOTzBGQlEwWTNRaXhwUWtGQlN5eGxRVUZaTzBGQlEySXNkVUpCUVU4c1MwRkJTemhDTEV0QlFWbzdRVUZEU0N4aFFVaERPMEZCU1VZMVFpeHBRa0ZCU3l4aFFVRlZReXhMUVVGV0xFVkJRV2xDTzBGQlEyeENMSEZDUVVGTE1rSXNTMEZCVEN4SFFVRmhNMElzUzBGQllqdEJRVU5JTEdGQlRrTTdRVUZQUmxFc2NVSkJRVk5ETEZWQlFWVTdRVUZRYWtJc1UwRXZUMFU3TzBGQmVWQlNPenM3T3pzN096czdPMEZCVlVGdFFpeGxRVUZQTzBGQlEwZ3ZRaXhwUWtGQlN5eGxRVUZaTzBGQlEySXNkVUpCUVU4c1MwRkJTMmRETEUxQlFWbzdRVUZEU0N4aFFVaEZPMEZCU1VnNVFpeHBRa0ZCU3l4aFFVRlZReXhMUVVGV0xFVkJRV2xDTzBGQlEyeENMSEZDUVVGTE5rSXNUVUZCVEN4SFFVRmpOMElzUzBGQlpEdEJRVU5JTEdGQlRrVTdRVUZQU0ZFc2NVSkJRVk5ETEZWQlFWVTdRVUZRYUVJc1UwRnVVVU03TzBGQk5sRlNPenM3T3pzN096czdRVUZUUVhGQ0xEQkNRVUZyUWp0QlFVTmtha01zYVVKQlFVc3NaVUZCV1R0QlFVTmlMSFZDUVVGUExFdEJRVXRyUXl4cFFrRkJXanRCUVVOSUxHRkJTR0U3UVVGSlpHaERMR2xDUVVGTExHRkJRVlZETEV0QlFWWXNSVUZCYVVJN1FVRkRiRUlzY1VKQlFVc3JRaXhwUWtGQlRDeEhRVUY1UWk5Q0xFdEJRWHBDTzBGQlEwZ3NZVUZPWVR0QlFVOWtVU3h4UWtGQlUwTXNWVUZCVlR0QlFWQk1MRk5CZEZKV096dEJRV2RUVWpzN096czdPenM3TzBGQlUwRjFRaXgzUWtGQlowSTdRVUZEV201RExHbENRVUZMTEdWQlFWazdRVUZEWWl4MVFrRkJUeXhMUVVGTGIwTXNaVUZCV2p0QlFVTklMR0ZCU0ZjN1FVRkpXbXhETEdsQ1FVRkxMR0ZCUVZWRExFdEJRVllzUlVGQmFVSTdRVUZEYkVJc2NVSkJRVXRwUXl4bFFVRk1MRWRCUVhWQ2FrTXNTMEZCZGtJN1FVRkRTQ3hoUVU1WE8wRkJUMXBSTEhGQ1FVRlRReXhWUVVGVk8wRkJVRkFzVTBGNlUxSTdPMEZCYlZSU096dEJRVVZCT3pzN096czdPMEZCVDBGNVFpeHZRMEZCTkVJN1FVRkRlRUp5UXl4cFFrRkJTeXhsUVVGWk8wRkJRMklzZFVKQlFVOHNTMEZCUzNORExITkNRVUZhTzBGQlEwZ3NZVUZJZFVJN1FVRkplRUp3UXl4cFFrRkJTeXhoUVVGVlF5eExRVUZXTEVWQlFXbENPMEZCUTJ4Q0xIRkNRVUZMYlVNc2MwSkJRVXdzUjBGQk9FSnVReXhMUVVFNVFqdEJRVU5JTEdGQlRuVkNPMEZCVDNoQ1lTeDNRa0ZCV1R0QlFWQlpMRk5CTlZSd1FqczdRVUZ6VlZJN096czdPenM3UVVGUFFYVkNMR3REUVVFd1FqdEJRVU4wUW5aRExHbENRVUZMTEdWQlFWazdRVUZEWWl4MVFrRkJUeXhMUVVGTGQwTXNiMEpCUVZvN1FVRkRTQ3hoUVVoeFFqdEJRVWwwUW5SRExHbENRVUZMTEdGQlFWVkRMRXRCUVZZc1JVRkJhVUk3UVVGRGJFSXNjVUpCUVV0eFF5eHZRa0ZCVEN4SFFVRTBRbkpETEV0QlFUVkNPMEZCUTBnc1lVRk9jVUk3UVVGUGRFSmhMSGRDUVVGWk8wRkJVRlVzVTBFM1ZXeENPenRCUVhWV1VqczdPenM3T3pzN08wRkJVMEY1UWl4MVFrRkJaVHRCUVVOWWVrTXNhVUpCUVVzc1pVRkJXVHRCUVVOaUxIVkNRVUZQTEV0QlFVc3dReXhUUVVGYU8wRkJRMGdzWVVGSVZUdEJRVWxZZUVNc2FVSkJRVXNzWVVGQlZVTXNTMEZCVml4RlFVRnBRanRCUVVOc1FpeHhRa0ZCUzNWRExGTkJRVXdzUjBGQmFVSjJReXhMUVVGcVFqdEJRVU5JTEdGQlRsVTdRVUZQV0dFc2QwSkJRVms3UVVGUVJDeFRRV2hYVURzN1FVRXdWMUk3T3pzN096czdPenRCUVZOQk1rSXNNRUpCUVd0Q08wRkJRMlF6UXl4cFFrRkJTeXhsUVVGWk8wRkJRMklzZFVKQlFVOHNTMEZCU3pSRExGbEJRVm83UVVGRFNDeGhRVWhoTzBGQlNXUXhReXhwUWtGQlN5eGhRVUZWUXl4TFFVRldMRVZCUVdsQ08wRkJRMnhDTEhGQ1FVRkxlVU1zV1VGQlRDeEhRVUZ2UW5wRExFdEJRWEJDTzBGQlEwZ3NZVUZPWVR0QlFVOWtZU3gzUWtGQldUdEJRVkJGTEZOQmJsaFdPenRCUVRaWVVqczdPenM3T3pzN08wRkJVMEUyUWl4M1FrRkJaMEk3UVVGRFdqZERMR2xDUVVGTExHVkJRVms3UVVGRFlpeDFRa0ZCVHl4TFFVRkxPRU1zVlVGQldqdEJRVU5JTEdGQlNGYzdRVUZKV2pWRExHbENRVUZMTEdGQlFWVkRMRXRCUVZZc1JVRkJhVUk3UVVGRGJFSXNjVUpCUVVzeVF5eFZRVUZNTEVkQlFXdENNME1zUzBGQmJFSTdRVUZEU0N4aFFVNVhPMEZCVDFwaExIZENRVUZaTzBGQlVFRXNVMEYwV1ZJN08wRkJaMXBTT3pzN096czdPenM3UVVGVFFTdENMSGxDUVVGcFFqdEJRVU5pTDBNc2FVSkJRVXNzWlVGQldUdEJRVU5pTEhWQ1FVRlBMRXRCUVV0blJDeFhRVUZhTzBGQlEwZ3NZVUZJV1R0QlFVbGlPVU1zYVVKQlFVc3NZVUZCVlVNc1MwRkJWaXhGUVVGcFFqdEJRVU5zUWl4eFFrRkJTelpETEZkQlFVd3NSMEZCYlVJM1F5eExRVUZ1UWp0QlFVTklMR0ZCVGxrN1FVRlBZbUVzZDBKQlFWazdRVUZRUXl4VFFYcGFWRHM3UVVGdFlWSTdPenM3T3pzN1FVRlBRV2xETEcxQ1FVRlhPMEZCUTFKRExIRkNRVUZUTTBVc1ZVRkJWVFJGTEdkQ1FVUllPMEZCUlZJeFF5eHJRa0ZCVFd4RExGTkJSa1U3UVVGSFVtOURMSEZDUVVGVFF5eFZRVUZWTzBGQlNGZ3NVMEV4WVVnN08wRkJaMkpTT3p0QlFVVkJkME1zZFVKQlFXVTdRVUZEV0VZc2NVSkJRVk5ITEZOQlJFVTdRVUZGV0VNc2EwTkJRWE5DTzBGQlJsZ3NVMEZzWWxBN08wRkJkV0pTY2tRc2FVSkJRVk1zU1VGMllrUTdPMEZCZVdKU096czdPenM3T3p0QlFWRkJZU3h4UWtGQllTeERRV3BqVERzN1FVRnRZMUpuUWl4bFFVRlBMRU5CYm1ORE8wRkJiMk5TUlN4blFrRkJVU3hEUVhCalFUdEJRWEZqVWs0c1kwRkJUU3hEUVhKalJUdEJRWE5qVWtVc2FVSkJRVk1zUTBGMFkwUTdRVUYxWTFKUkxIbENRVUZwUWl4RFFYWmpWRHRCUVhkalVrWXNNa0pCUVcxQ0xFTkJlR05ZTzBGQmVXTlNXU3h2UWtGQldTeEpRWHBqU2p0QlFUQmpVa1VzY1VKQlFXRXNTVUV4WTB3N1FVRXlZMUpPTEcxQ1FVRlhMRWxCTTJOSU8wRkJOR05TUlN4elFrRkJZeXhKUVRWalRqdEJRVFpqVWs0c1owTkJRWGRDTEVsQk4yTm9RanRCUVRoalVrVXNPRUpCUVhOQ0xFbEJPV05rT3p0QlFXZGtVanRCUVVOQlpTeDNRa0ZCWjBJc1EwRnFaRkk3UVVGclpGSkRMSGxDUVVGcFFqdEJRV3hrVkN4TFFWaE5PenRCUVdkbGJFSkRMR0ZCUVZNN1FVRkRUR3hHTEcxQ1FVRlhRVHRCUVVST0xFdEJhR1ZUT3p0QlFXOWxiRUp0Uml4WlFVRlJMR3RDUVVGWk8wRkJRMmhDTEZsQlFVa3NTMEZCUzA0c1lVRkJUQ3hMUVVGMVFrTXNVMEZCTTBJc1JVRkJjME03UVVGRGJFTTdRVUZEUVN4cFFrRkJTMG9zVTBGQlRDeEhRVUZwUWl4TFFVRkxSeXhoUVVGTUxFZEJRWEZDTjBVc1ZVRkJWVzlHTEVsQlFTOUNMRWRCUVhORGNFWXNWVUZCVlhGR0xFMUJRV3BGTzBGQlEwRXNhVUpCUVV0U0xHRkJRVXdzUjBGQmNVSkRMRk5CUVhKQ08wRkJRMGc3UVVGRFNpeExRVEZsYVVJN08wRkJOR1ZzUWxFc1kwRkJWU3h2UWtGQldUdEJRVU5zUW5oR0xITkNRVUZqZVVZc1IwRkJaQ3hEUVVGclFpeEpRVUZzUWp0QlFVTklMRXRCT1dWcFFqczdRVUZuWm14Q1F5eGxRVUZYTEhGQ1FVRlpPMEZCUTI1Q01VWXNjMEpCUVdNeVJpeE5RVUZrTEVOQlFYRkNMRWxCUVhKQ08wRkJRMGdzUzBGc1ptbENPenRCUVc5bWJFSkRMREJDUVVGelFuSkVMRlZCUVZVc1dVRkJXVHRCUVVONFF5eFpRVUZKWWl4VFFVRlRMRXRCUVV0RkxFOUJRV3hDTzBGQlEwRXNXVUZCU1VZc1RVRkJTaXhGUVVGWk8wRkJRMUlzWjBKQlFVbHRSU3hYUVVGWExFdEJRVXMxUkN4SlFVRk1MRXRCUVdOUUxFMUJRV1FzU1VGQmQwSXNTMEZCUzA4c1NVRkJUQ3hEUVVGVk5rUXNVMEZCVml4RFFVRnZRbkJGTEUxQlFYQkNMRU5CUVhaRE8wRkJRMEVzWjBKQlFVa3NRMEZCUTIxRkxGRkJRVXdzUlVGQlpUdEJRVU5ZTDBVc2JVSkJRVWRwUml4UFFVRklMRU5CUVZjc1NVRkJXRHRCUVVOQkxIRkNRVUZMYmtVc1QwRkJUQ3hIUVVGbExFbEJRV1k3UVVGRFNEdEJRVU5LTzBGQlJVb3NTMEU1Wm1sQ096dEJRV2RuUW14Q1l5eGxRVUZYTEcxQ1FVRlZjMFFzU1VGQlZpeEZRVUZuUWtNc1QwRkJhRUlzUlVGQmVVSTdRVUZEYUVNc1dVRkJTVU1zVlVGQlZTeERRVUZETEV0QlFVdDZSQ3hYUVVGTUxFZEJRVzFDZFVRc1NVRkJjRUlzU1VGQk5FSXNRMEZCTVVNN1FVRkRRU3haUVVGSlF5eFpRVUZaUXl4UFFVRm9RaXhGUVVGNVFqdEJRVU55UWp0QlFVTklPMEZCUTBRc1dVRkJTVU1zWlVGQlpTeERRVUZEU0N4UFFVRlBjRVlzVlVGQlVpeEpRVUZ6UWl4RFFVRjZRenRCUVVOQkxGbEJRVWx4Uml4UFFVRktMRVZCUVdFN1FVRkRWQ3hwUWtGQlMzaEVMRmRCUVV3c1NVRkJiMEoxUkN4SlFVRndRanM3UVVGRlFTeG5Ra0ZCU1Vjc1dVRkJTaXhGUVVGclFqdEJRVU5rTEhGQ1FVRkxjRVFzZFVKQlFVd3NSMEZCSzBJc1MwRkJMMEk3UVVGRFFTeHZRa0ZCU1N4TFFVRkxSU3hqUVVGVUxFVkJRWGxDTzBGQlEzSkNPMEZCUTBFc2VVSkJRVXRwUXl4alFVRk1MRWRCUVhOQ0xFdEJRVXRxUkN4SlFVRk1MRU5CUVZWdFJTeExRVUZvUXp0QlFVTkJPMEZCUTBFc2QwSkJRVWxxUml4aFFVRmhMRU5CUVVOTUxFZEJRVWRwUWl4TlFVRklMRU5CUVZWelJTeFRRVUUxUWl4RlFVRjFRenRCUVVOdVEwTXNLMEpCUVU5RExHTkJRVkFzUTBGQmMwSkRMRzlDUVVGMFFpeERRVUV5UXl4SlFVRXpRenRCUVVOSU8wRkJRMG83UVVGRFNpeGhRVlpFTEUxQlYwczdRVUZEUkN4eFFrRkJTelZFTEhGQ1FVRk1MRWRCUVRaQ0xFdEJRVGRDTzBGQlEwRXNiMEpCUVVrc1MwRkJTMDhzWlVGQlZDeEZRVUV3UWp0QlFVTjBRanRCUVVOQkxIbENRVUZMWjBNc1pVRkJUQ3hIUVVGMVFpeExRVUZMYkVRc1NVRkJUQ3hEUVVGVmQwVXNUVUZCYWtNN1FVRkRRVHRCUVVOQkxIZENRVUZKZEVZc1lVRkJZU3hEUVVGRFRDeEhRVUZIYVVJc1RVRkJTQ3hEUVVGVmMwVXNVMEZCTlVJc1JVRkJkVU03UVVGRGJrTkRMQ3RDUVVGUFF5eGpRVUZRTEVOQlFYTkNReXh2UWtGQmRFSXNRMEZCTWtNc1NVRkJNME03UVVGRFNEdEJRVU5LTzBGQlEwbzdPMEZCUlVRc1owSkJRVWx5Uml4aFFVRmhMRU5CUVVOTUxFZEJRVWRwUWl4TlFVRklMRU5CUVZWRExGVkJRWGhDTEVsQlFYTkRMRXRCUVV0RExFbEJRVXdzUTBGQlZVTXNUMEZCY0VRc1JVRkJOa1E3UVVGRGVrUTdRVUZEUVd4RExEaENRVUZqYlVNc2MwSkJRV1FzUTBGQmNVTXNTVUZCY2tNc1JVRkJNa00yUkN4SlFVRXpRenRCUVVOSU8wRkJRMG9zVTBFNVFrUXNUVUVyUWtzN1FVRkRSQ3huUWtGQlNVY3NXVUZCU2l4RlFVRnJRanRCUVVOa0xHOUNRVUZKTEV0QlFVdHNSQ3hqUVVGVUxFVkJRWGxDTzBGQlEzSkNPMEZCUTBFc2VVSkJRVXRvUWl4SlFVRk1MRU5CUVZWdFJTeExRVUZXTEVkQlFXdENMRXRCUVV0c1FpeGpRVUYyUWp0QlFVTklPMEZCUTBvc1lVRk1SQ3hOUVUxTE8wRkJRMFFzYjBKQlFVa3NTMEZCU3k5Q0xHVkJRVlFzUlVGQk1FSTdRVUZEZEVJN1FVRkRRU3g1UWtGQlMyeENMRWxCUVV3c1EwRkJWWGRGTEUxQlFWWXNSMEZCYlVJc1MwRkJTM1JDTEdWQlFYaENPMEZCUTBnN1FVRkRTanM3UVVGRlJDeHBRa0ZCU3pGRExGZEJRVXdzU1VGQmIwSXNRMEZCUTNWRUxFbEJRWEpDTzBGQlEwZzdRVUZEU2l4TFFYSnFRbWxDT3p0QlFYVnFRbXhDT3pzN096czdPenM3T3pzN096czdPMEZCWjBKQlZTeHhRa0ZCYVVJc01rSkJRVms3UVVGRGVrSXhSeXh6UWtGQll6QkhMR1ZCUVdRc1EwRkJPRUlzUzBGQlMzcEZMRWxCUVc1RE8wRkJRMGc3UVVGNmEwSnBRaXhEUVVGVUxFTkJRV0k3TzBGQk5HdENRVHM3T3pzN096czdPenM3T3pzN1FVRmpRVEJGTEU5QlFVOURMR05CUVZBc1EwRkJjMEl2Uml4UFFVRlBaMGNzVTBGQk4wSXNSVUZCZDBNc1lVRkJlRU1zUlVGQmRVUTdRVUZEYmtSc1JpeFBRVVJ0UkN4cFFrRkROVU03UVVGRFNDeFpRVUZKYlVZc1VVRkJTaXhGUVVGak8wRkJRMVpvUnl4bFFVRkhhVWNzU1VGQlNDeERRVUZSTEhsSFFVRlNPMEZCUTBnN1FVRkRSQ3hsUVVGUExFdEJRVXR1UXl4VFFVRk1MRXRCUVcxQ01VVXNWVUZCVlc5R0xFbEJRWEJETzBGQlEwZ3NTMEZPYTBRN1FVRlBia1I2UkN4UFFWQnRSQ3hsUVU4NVEwTXNTMEZRT0VNc1JVRlBka003UVVGRFVpeFpRVUZKWjBZc1VVRkJTaXhGUVVGak8wRkJRMVpvUnl4bFFVRkhhVWNzU1VGQlNDeERRVUZSTEc5SFFVRlNPMEZCUTBnN1FVRkRSQ3hoUVVGTGJrTXNVMEZCVEN4SFFVRnBRamxETEZGQlFWRTFRaXhWUVVGVmIwWXNTVUZCYkVJc1IwRkJlVUp3Uml4VlFVRlZjVVlzVFVGQmNFUTdRVUZEU0R0QlFWcHJSQ3hEUVVGMlJEczdRVUZuUWtGNlJTeEhRVUZIUkN4TlFVRklMRWRCUVZsdFJ5eFBRVUZQUXl4UFFVRlFMRWRCUVdsQ2NFY3NUVUZCTjBJaUxDSm1hV3hsSWpvaVEwTlhhV1JuWlhRdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVJRU52Y0hseWFXZG9kQ0FvWXlrZ01qQXhNeTB5TURFMklFTm9kV3R2Ym1jZ1ZHVmphRzV2Ykc5bmFXVnpJRWx1WXk1Y2JpQkRiM0I1Y21sbmFIUWdLR01wSURJd01UY3RNakF4T0NCWWFXRnRaVzRnV1dGcWFTQlRiMlowZDJGeVpTQkRieTRzSUV4MFpDNWNibHh1SUdoMGRIQnpPaTh2ZDNkM0xtTnZZMjl6TG1OdmJTOWNibHh1SUZCbGNtMXBjM05wYjI0Z2FYTWdhR1Z5WldKNUlHZHlZVzUwWldRc0lHWnlaV1VnYjJZZ1kyaGhjbWRsTENCMGJ5QmhibmtnY0dWeWMyOXVJRzlpZEdGcGJtbHVaeUJoSUdOdmNIbGNiaUJ2WmlCMGFHbHpJSE52Wm5SM1lYSmxJR0Z1WkNCaGMzTnZZMmxoZEdWa0lHVnVaMmx1WlNCemIzVnlZMlVnWTI5a1pTQW9kR2hsSUZ3aVUyOW1kSGRoY21WY0lpa3NJR0VnYkdsdGFYUmxaQ3hjYmlBZ2QyOXliR1IzYVdSbExDQnliM2xoYkhSNUxXWnlaV1VzSUc1dmJpMWhjM05wWjI1aFlteGxMQ0J5WlhadlkyRmliR1VnWVc1a0lHNXZiaTFsZUdOc2RYTnBkbVVnYkdsalpXNXpaVnh1SUhSdklIVnpaU0JEYjJOdmN5QkRjbVZoZEc5eUlITnZiR1ZzZVNCMGJ5QmtaWFpsYkc5d0lHZGhiV1Z6SUc5dUlIbHZkWElnZEdGeVoyVjBJSEJzWVhSbWIzSnRjeTRnV1c5MUlITm9ZV3hzWEc0Z0lHNXZkQ0IxYzJVZ1EyOWpiM01nUTNKbFlYUnZjaUJ6YjJaMGQyRnlaU0JtYjNJZ1pHVjJaV3h2Y0dsdVp5QnZkR2hsY2lCemIyWjBkMkZ5WlNCdmNpQjBiMjlzY3lCMGFHRjBKM05jYmlBZ2RYTmxaQ0JtYjNJZ1pHVjJaV3h2Y0dsdVp5Qm5ZVzFsY3k0Z1dXOTFJR0Z5WlNCdWIzUWdaM0poYm5SbFpDQjBieUJ3ZFdKc2FYTm9MQ0JrYVhOMGNtbGlkWFJsTEZ4dUlDQnpkV0pzYVdObGJuTmxMQ0JoYm1RdmIzSWdjMlZzYkNCamIzQnBaWE1nYjJZZ1EyOWpiM01nUTNKbFlYUnZjaTVjYmx4dUlGUm9aU0J6YjJaMGQyRnlaU0J2Y2lCMGIyOXNjeUJwYmlCMGFHbHpJRXhwWTJWdWMyVWdRV2R5WldWdFpXNTBJR0Z5WlNCc2FXTmxibk5sWkN3Z2JtOTBJSE52YkdRdVhHNGdXR2xoYldWdUlGbGhhbWtnVTI5bWRIZGhjbVVnUTI4dUxDQk1kR1F1SUhKbGMyVnlkbVZ6SUdGc2JDQnlhV2RvZEhNZ2JtOTBJR1Y0Y0hKbGMzTnNlU0JuY21GdWRHVmtJSFJ2SUhsdmRTNWNibHh1SUZSSVJTQlRUMFpVVjBGU1JTQkpVeUJRVWs5V1NVUkZSQ0JjSWtGVElFbFRYQ0lzSUZkSlZFaFBWVlFnVjBGU1VrRk9WRmtnVDBZZ1FVNVpJRXRKVGtRc0lFVllVRkpGVTFNZ1QxSmNiaUJKVFZCTVNVVkVMQ0JKVGtOTVZVUkpUa2NnUWxWVUlFNVBWQ0JNU1UxSlZFVkVJRlJQSUZSSVJTQlhRVkpTUVU1VVNVVlRJRTlHSUUxRlVrTklRVTVVUVVKSlRFbFVXU3hjYmlCR1NWUk9SVk5USUVaUFVpQkJJRkJCVWxSSlExVk1RVklnVUZWU1VFOVRSU0JCVGtRZ1RrOU9TVTVHVWtsT1IwVk5SVTVVTGlCSlRpQk9UeUJGVmtWT1ZDQlRTRUZNVENCVVNFVmNiaUJCVlZSSVQxSlRJRTlTSUVOUFVGbFNTVWRJVkNCSVQweEVSVkpUSUVKRklFeEpRVUpNUlNCR1QxSWdRVTVaSUVOTVFVbE5MQ0JFUVUxQlIwVlRJRTlTSUU5VVNFVlNYRzRnVEVsQlFrbE1TVlJaTENCWFNFVlVTRVZTSUVsT0lFRk9JRUZEVkVsUFRpQlBSaUJEVDA1VVVrRkRWQ3dnVkU5U1ZDQlBVaUJQVkVoRlVsZEpVMFVzSUVGU1NWTkpUa2NnUmxKUFRTeGNiaUJQVlZRZ1QwWWdUMUlnU1U0Z1EwOU9Ua1ZEVkVsUFRpQlhTVlJJSUZSSVJTQlRUMFpVVjBGU1JTQlBVaUJVU0VVZ1ZWTkZJRTlTSUU5VVNFVlNJRVJGUVV4SlRrZFRJRWxPWEc0Z1ZFaEZJRk5QUmxSWFFWSkZMbHh1SUNvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3ZYRzVjYm5aaGNpQlhhV1JuWlhSTllXNWhaMlZ5SUQwZ2NtVnhkV2x5WlNnbkxpNHZZbUZ6WlMxMWFTOURRMWRwWkdkbGRFMWhibUZuWlhJbktUdGNibHh1THlvcVhHNGdLaUFoSTJWdUlFVnVkVzBnWm05eUlGZHBaR2RsZENkeklHRnNhV2R1YldWdWRDQnRiMlJsTENCcGJtUnBZMkYwYVc1bklIZG9aVzRnZEdobElIZHBaR2RsZENCemFHOTFiR1FnY21WbWNtVnphQzVjYmlBcUlDRWplbWdnVjJsa1oyVjBJT2VhaE9XdnVlbTlrT2Fvb2VXOGorKzhqT2locU9la3VpQlhhV1JuWlhRZzVicVU2SytsNUwyVjVwZTI1WWkzNXBhdzQ0Q0NYRzRnS2lCQVpXNTFiU0JYYVdSblpYUXVRV3hwWjI1TmIyUmxYRzRnS2k5Y2JpOHFLbHh1SUNvZ0lTTmxibHh1SUNvZ1QyNXNlU0JoYkdsbmJpQnZibU5sSUhkb1pXNGdkR2hsSUZkcFpHZGxkQ0JwY3lCbGJtRmliR1ZrSUdadmNpQjBhR1VnWm1seWMzUWdkR2x0WlM1Y2JpQXFJRlJvYVhNZ2QybHNiQ0JoYkd4dmR5QjBhR1VnYzJOeWFYQjBJRzl5SUdGdWFXMWhkR2x2YmlCMGJ5QmpiMjUwYVc1MVpTQmpiMjUwY205c2JHbHVaeUIwYUdVZ1kzVnljbVZ1ZENCdWIyUmxMbHh1SUNvZ1NYUWdkMmxzYkNCdmJteDVJR0psSUdGc2FXZHVaV1FnYjI1alpTQmlaV1p2Y21VZ2RHaGxJR1Z1WkNCdlppQm1jbUZ0WlNCM2FHVnVJRzl1Ulc1aFlteGxJR2x6SUdOaGJHeGxaQ3hjYmlBcUlIUm9aVzRnYVcxdFpXUnBZWFJsYkhrZ1pHbHpZV0pzWlhNZ2RHaGxJRmRwWkdkbGRDNWNiaUFxSUNFamVtaGNiaUFxSU9TN2hlV2NxQ0JYYVdSblpYUWc1NnlzNUxpQTVxeWg1citBNXJTNzVwZTI1YSs1NmIyUTVMaUE1cXloNzd5TTVMNi81THFPNklTYTVweXM1b2lXNVlxbzU1Uzc1N3VuNTd1dDVvNm41WWkyNWIyVDVZbU42SXFDNTRLNTQ0Q0NYRzRnS2lEbHZJRGxrSy9sa0k3a3ZKcmxuS2dnYjI1RmJtRmliR1VnNXBlMjVvbUE1WnlvNTVxRTZZS2o1TGlBNWJpbjU3dVQ1cDJmNVltTjVhKzU2YjJRNUxpQTVxeWg3N3lNNTRTMjVaQ081NnVMNVlpNzU2YUI1NVNvNksrbElGZHBaR2RsZE9PQWdseHVJQ29nUUhCeWIzQmxjblI1SUh0T2RXMWlaWEo5SUU5T1EwVmNiaUFxTDF4dUx5b3FYRzRnS2lBaEkyVnVJRUZzYVdkdUlHWnBjbk4wSUdaeWIyMGdkR2hsSUdKbFoybHVibWx1WnlCaGN5QlBUa05GTENCaGJtUWdkR2hsYmlCeVpXRnNhV2R1SUdsMElHVjJaWEo1SUhScGJXVWdkR2hsSUhkcGJtUnZkeUJwY3lCeVpYTnBlbVZrTGx4dUlDb2dJU042YUNEa3VJRGx2SURscDR2a3ZKcmxnNDhnVDA1RFJTRGt1SURtb0xmbHI3bnB2WkRrdUlEbXJLSHZ2SXprdVl2bGtJN21yNC9sdlpQbnFwZmxqNlBscEtmbHNJL21sTG5sajVqbWw3Ym92NWprdkpycGg0M21sckRscjducHZaRGpnSUpjYmlBcUlFQndjbTl3WlhKMGVTQjdUblZ0WW1WeWZTQlBUbDlYU1U1RVQxZGZVa1ZUU1ZwRlhHNGdLaTljYmk4cUtseHVJQ29nSVNObGJpQkxaV1Z3SUdGc2FXZHVhVzVuSUdGc2JDQjBhR1VnZDJGNUxseHVJQ29nSVNONmFDRGxwNHZudTRqa3Y1M21qSUhscjducHZaRGpnSUpjYmlBcUlFQndjbTl3WlhKMGVTQjdUblZ0WW1WeWZTQkJURmRCV1ZOY2JpQXFMMXh1ZG1GeUlFRnNhV2R1VFc5a1pTQTlJRmRwWkdkbGRFMWhibUZuWlhJdVFXeHBaMjVOYjJSbE8xeHVYRzUyWVhJZ1FXeHBaMjVHYkdGbmN5QTlJRmRwWkdkbGRFMWhibUZuWlhJdVgwRnNhV2R1Um14aFozTTdYRzUyWVhJZ1ZFOVFJQ0FnSUNBOUlFRnNhV2R1Um14aFozTXVWRTlRTzF4dWRtRnlJRTFKUkNBZ0lDQWdQU0JCYkdsbmJrWnNZV2R6TGsxSlJEdGNiblpoY2lCQ1QxUWdJQ0FnSUQwZ1FXeHBaMjVHYkdGbmN5NUNUMVE3WEc1MllYSWdURVZHVkNBZ0lDQTlJRUZzYVdkdVJteGhaM011VEVWR1ZEdGNiblpoY2lCRFJVNVVSVklnSUQwZ1FXeHBaMjVHYkdGbmN5NURSVTVVUlZJN1hHNTJZWElnVWtsSFNGUWdJQ0E5SUVGc2FXZHVSbXhoWjNNdVVrbEhTRlE3WEc1MllYSWdWRTlRWDBKUFZDQTlJRlJQVUNCOElFSlBWRHRjYm5aaGNpQk1SVVpVWDFKSlIwaFVJRDBnVEVWR1ZDQjhJRkpKUjBoVU8xeHVYRzR2S2lwY2JpQXFJQ0VqWlc1Y2JpQXFJRk4wYjNKbGN5QmhibVFnYldGdWFYQjFiR0YwWlNCMGFHVWdZVzVqYUc5eWFXNW5JR0poYzJWa0lHOXVJR2wwY3lCd1lYSmxiblF1WEc0Z0tpQlhhV1JuWlhRZ1lYSmxJSFZ6WldRZ1ptOXlJRWRWU1NCaWRYUWdZMkZ1SUdGc2MyOGdZbVVnZFhObFpDQm1iM0lnYjNSb1pYSWdkR2hwYm1kekxseHVJQ29nVjJsa1oyVjBJSGRwYkd3Z1lXUnFkWE4wSUdOMWNuSmxiblFnYm05a1pTZHpJSEJ2YzJsMGFXOXVJR0Z1WkNCemFYcGxJR0YxZEc5dFlYUnBZMkZzYkhrc0lHSjFkQ0IwYUdVZ2NtVnpkV3gwY3lCaFpuUmxjaUJoWkdwMWMzUnRaVzUwSUdOaGJpQnViM1FnWW1VZ2IySjBZV2x1WldRZ2RXNTBhV3dnZEdobElHNWxlSFFnWm5KaGJXVWdkVzVzWlhOeklIbHZkU0JqWVd4c0lIdDdJMk55YjNOelRHbHVheUJjSWxkcFpHZGxkQzkxY0dSaGRHVkJiR2xuYm0xbGJuUTZiV1YwYUc5a1hDSjlmWHQ3TDJOeWIzTnpUR2x1YTMxOUlHMWhiblZoYkd4NUxseHVJQ29nSVNONmFGeHVJQ29nVjJsa1oyVjBJT2U3aE9TN3R1KzhqT2VVcU9TNmp1aXV2dWU5cnVXU2pPbUFndW1GamVXRnR1ZWJ1T1d2dWVTNmp1ZUl0dWlLZ3VlQ3VlZWFoT2krdWVpM25lKzhqRmRwWkdkbGRDRHBnSnJsdUxqb29xdm5sS2prdW80Z1ZVa2c1NVdNNloyaTc3eU01TG1mNVkrdjVMdWw1NVNvNUxxTzVZVzI1THVXNVp5dzVwYTU0NENDWEc0Z0tpQlhhV1JuWlhRZzVMeWE2SWVxNVlxbzZMQ0Q1cFcwNWIyVDVZbU42SXFDNTRLNTU1cUU1WjJRNXFDSDVaS001YTY5NmF1WTc3eU01TGlONkwrSDU1dXU1WW1ONkxDRDVwVzA1WkNPNTVxRTU3dVQ1cDZjNkthQjVZaXc1TGlMNUxpQTViaW41b21ONklPOTVaeW82SVNhNXB5czZZZU02STYzNVkrVzVZaXc3N3lNNlptazZaMmU1TDJnNVlXSTVvbUw1WXFvNkxDRDU1U29JSHQ3STJOeWIzTnpUR2x1YXlCY0lsZHBaR2RsZEM5MWNHUmhkR1ZCYkdsbmJtMWxiblE2YldWMGFHOWtYQ0o5Zlh0N0wyTnliM056VEdsdWEzMTk0NENDWEc0Z0tseHVJQ29nUUdOc1lYTnpJRmRwWkdkbGRGeHVJQ29nUUdWNGRHVnVaSE1nUTI5dGNHOXVaVzUwWEc0Z0tpOWNiblpoY2lCWGFXUm5aWFFnUFNCall5NURiR0Z6Y3loN1hHNGdJQ0FnYm1GdFpUb2dKMk5qTGxkcFpHZGxkQ2NzSUdWNGRHVnVaSE02SUhKbGNYVnBjbVVvSnk0dlEwTkRiMjF3YjI1bGJuUW5LU3hjYmx4dUlDQWdJR1ZrYVhSdmNqb2dRME5mUlVSSlZFOVNJQ1ltSUh0Y2JpQWdJQ0FnSUNBZ2JXVnVkVG9nSjJreE9HNDZUVUZKVGw5TlJVNVZMbU52YlhCdmJtVnVkQzUxYVM5WGFXUm5aWFFuTEZ4dUlDQWdJQ0FnSUNCb1pXeHdPaUFuYVRFNGJqcERUMDFRVDA1RlRsUXVhR1ZzY0Y5MWNtd3VkMmxrWjJWMEp5eGNiaUFnSUNBZ0lDQWdhVzV6Y0dWamRHOXlPaUFuY0dGamEyRm5aWE02THk5cGJuTndaV04wYjNJdmFXNXpjR1ZqZEc5eWN5OWpiMjF3Y3k5alkzZHBaR2RsZEM1cWN5Y3NYRzRnSUNBZ0lDQWdJR1Y0WldOMWRHVkpia1ZrYVhSTmIyUmxPaUIwY25WbExGeHVJQ0FnSUNBZ0lDQmthWE5oYkd4dmQwMTFiSFJwY0d4bE9pQjBjblZsTEZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0J3Y205d1pYSjBhV1Z6T2lCN1hHNWNiaUFnSUNBZ0lDQWdMeW9xWEc0Z0lDQWdJQ0FnSUNBcUlDRWpaVzRnVTNCbFkybG1hV1Z6SUdGdUlHRnNhV2R1YldWdWRDQjBZWEpuWlhRZ2RHaGhkQ0JqWVc0Z2IyNXNlU0JpWlNCdmJtVWdiMllnZEdobElIQmhjbVZ1ZENCdWIyUmxjeUJ2WmlCMGFHVWdZM1Z5Y21WdWRDQnViMlJsTGx4dUlDQWdJQ0FnSUNBZ0tpQlVhR1VnWkdWbVlYVnNkQ0IyWVd4MVpTQnBjeUJ1ZFd4c0xDQmhibVFnZDJobGJpQnVkV3hzTENCcGJtUnBZMkYwWlhNZ2RHaGxJR04xY25KbGJuUWdjR0Z5Wlc1MExseHVJQ0FnSUNBZ0lDQWdLaUFoSTNwb0lPYU1oK1d1bXVTNGdPUzRxdVd2dWVtOWtPZWJydWFnaCsrOGpPV1BxdWlEdmVhWXIrVzlrK1dKamVpS2d1ZUN1ZWVhaE9XRnR1UzRyZVM0Z09TNHF1ZUl0dWlLZ3VlQ3VlKzhqT203bU9pdXBPUzR1dWVwdXUrOGpPUzR1dWVwdXVhWHR1aWhxT2VrdXVXOWsrV0pqZWVJdHVpS2d1ZUN1ZU9BZ2x4dUlDQWdJQ0FnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMDV2WkdWOUlIUmhjbWRsZEZ4dUlDQWdJQ0FnSUNBZ0tpQkFaR1ZtWVhWc2RDQnVkV3hzWEc0Z0lDQWdJQ0FnSUNBcUwxeHVJQ0FnSUNBZ0lDQjBZWEpuWlhRNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdkbGREb2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOTBZWEpuWlhRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjMlYwT2lCbWRXNWpkR2x2YmlBb2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDkwWVhKblpYUWdQU0IyWVd4MVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvUTBOZlJVUkpWRTlTSUNZbUlDRmpZeTVsYm1kcGJtVXVYMmx6VUd4aGVXbHVaeUFtSmlCMGFHbHpMbTV2WkdVdVgzQmhjbVZ1ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCaFpHcDFjM1FnZEdobElHOW1abk5sZEhNZ2RHOGdhMlZsY0NCMGFHVWdjMmw2WlNCaGJtUWdjRzl6YVhScGIyNGdkVzVqYUdGdVoyVmtJR0ZtZEdWeUlIUmhjbWRsZENCamFHRm5ibVZrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGZHBaR2RsZEUxaGJtRm5aWEl1ZFhCa1lYUmxUMlptYzJWMGMxUnZVM1JoZVZCMWRDaDBhR2x6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ1kyTXVUbTlrWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJ2YjJ4MGFYQTZJRU5EWDBSRlZpQW1KaUFuYVRFNGJqcERUMDFRVDA1RlRsUXVkMmxrWjJWMExuUmhjbWRsZENjc1hHNGdJQ0FnSUNBZ0lIMHNYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1JVNUJRa3hGSUVGTVNVZE9JRDljYmx4dUlDQWdJQ0FnSUNBdktpcGNiaUFnSUNBZ0lDQWdJQ29nSVNObGJpQlhhR1YwYUdWeUlIUnZJR0ZzYVdkdUlIUm9aU0IwYjNBdVhHNGdJQ0FnSUNBZ0lDQXFJQ0VqZW1nZzVwaXY1WkNtNWErNTZiMlE1TGlLNkw2NTQ0Q0NYRzRnSUNBZ0lDQWdJQ0FxSUVCd2NtOXdaWEowZVNCcGMwRnNhV2R1Vkc5d1hHNGdJQ0FnSUNBZ0lDQXFJRUIwZVhCbElIdENiMjlzWldGdWZWeHVJQ0FnSUNBZ0lDQWdLaUJBWkdWbVlYVnNkQ0JtWVd4elpWeHVJQ0FnSUNBZ0lDQWdLaTljYmlBZ0lDQWdJQ0FnYVhOQmJHbG5ibFJ2Y0RvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWjJWME9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQ2gwYUdsekxsOWhiR2xuYmtac1lXZHpJQ1lnVkU5UUtTQStJREE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVjBPaUJtZFc1amRHbHZiaUFvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXpaWFJCYkdsbmJpaFVUMUFzSUhaaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCaGJtbHRZWFJoWW14bE9pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJ2YjJ4MGFYQTZJRU5EWDBSRlZpQW1KaUFuYVRFNGJqcERUMDFRVDA1RlRsUXVkMmxrWjJWMExtRnNhV2R1WDNSdmNDY3NYRzRnSUNBZ0lDQWdJSDBzWEc1Y2JpQWdJQ0FnSUNBZ0x5b3FYRzRnSUNBZ0lDQWdJQ0FxSUNFalpXNWNiaUFnSUNBZ0lDQWdJQ29nVm1WeWRHbGpZV3hzZVNCaGJHbG5ibk1nZEdobElHMXBaSEJ2YVc1MExDQlVhR2x6SUhkcGJHd2diM0JsYmlCMGFHVWdiM1JvWlhJZ2RtVnlkR2xqWVd3Z1lXeHBaMjV0Wlc1MElHOXdkR2x2Ym5NZ1kyRnVZMlZzTGx4dUlDQWdJQ0FnSUNBZ0tpQWhJM3BvWEc0Z0lDQWdJQ0FnSUNBcUlPYVlyK1dRcHVXZWd1ZWJ0T2FXdWVXUWtlV3Z1ZW05a09TNHJlZUN1ZSs4ak9XOGdPV1FyK2F0cE9taHVlUzhtdVd3aHVXZWd1ZWJ0T2FXdWVXUWtlV0Z0dVM3bHVXdnVlbTlrT21BaWVtaHVlV1BsdWEyaU9PQWdseHVJQ0FnSUNBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnYVhOQmJHbG5ibFpsY25ScFkyRnNRMlZ1ZEdWeVhHNGdJQ0FnSUNBZ0lDQXFJRUIwZVhCbElIdENiMjlzWldGdWZWeHVJQ0FnSUNBZ0lDQWdLaUJBWkdWbVlYVnNkQ0JtWVd4elpWeHVJQ0FnSUNBZ0lDQWdLaTljYmlBZ0lDQWdJQ0FnYVhOQmJHbG5ibFpsY25ScFkyRnNRMlZ1ZEdWeU9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCblpYUTZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnS0hSb2FYTXVYMkZzYVdkdVJteGhaM01nSmlCTlNVUXBJRDRnTUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaWFE2SUdaMWJtTjBhVzl1SUNoMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtbHpRV3hwWjI1VWIzQWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXBjMEZzYVdkdVFtOTBkRzl0SUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJGc2FXZHVSbXhoWjNNZ2ZEMGdUVWxFTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWVd4cFoyNUdiR0ZuY3lBbVBTQitUVWxFTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmhibWx0WVhSaFlteGxPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhSdmIyeDBhWEE2SUVORFgwUkZWaUFtSmlBbmFURTRianBEVDAxUVQwNUZUbFF1ZDJsa1oyVjBMbUZzYVdkdVgzWmZZMlZ1ZEdWeUp5eGNiaUFnSUNBZ0lDQWdmU3hjYmx4dUlDQWdJQ0FnSUNBdktpcGNiaUFnSUNBZ0lDQWdJQ29nSVNObGJpQlhhR1YwYUdWeUlIUnZJR0ZzYVdkdUlIUm9aU0JpYjNSMGIyMHVYRzRnSUNBZ0lDQWdJQ0FxSUNFamVtZ2c1cGl2NVpDbTVhKzU2YjJRNUxpTDZMNjU0NENDWEc0Z0lDQWdJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQnBjMEZzYVdkdVFtOTBkRzl0WEc0Z0lDQWdJQ0FnSUNBcUlFQjBlWEJsSUh0Q2IyOXNaV0Z1ZlZ4dUlDQWdJQ0FnSUNBZ0tpQkFaR1ZtWVhWc2RDQm1ZV3h6WlZ4dUlDQWdJQ0FnSUNBZ0tpOWNiaUFnSUNBZ0lDQWdhWE5CYkdsbmJrSnZkSFJ2YlRvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWjJWME9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQ2gwYUdsekxsOWhiR2xuYmtac1lXZHpJQ1lnUWs5VUtTQStJREE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVjBPaUJtZFc1amRHbHZiaUFvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXpaWFJCYkdsbmJpaENUMVFzSUhaaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCaGJtbHRZWFJoWW14bE9pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJ2YjJ4MGFYQTZJRU5EWDBSRlZpQW1KaUFuYVRFNGJqcERUMDFRVDA1RlRsUXVkMmxrWjJWMExtRnNhV2R1WDJKdmRIUnZiU2NzWEc0Z0lDQWdJQ0FnSUgwc1hHNWNiaUFnSUNBZ0lDQWdMeW9xWEc0Z0lDQWdJQ0FnSUNBcUlDRWpaVzRnVjJobGRHaGxjaUIwYnlCaGJHbG5iaUIwYUdVZ2JHVm1kQzVjYmlBZ0lDQWdJQ0FnSUNvZ0lTTjZhQ0RtbUsvbGtLYmxyN25wdlpEbHQ2Ym92cmxjYmlBZ0lDQWdJQ0FnSUNvZ1FIQnliM0JsY25SNUlHbHpRV3hwWjI1TVpXWjBYRzRnSUNBZ0lDQWdJQ0FxSUVCMGVYQmxJSHRDYjI5c1pXRnVmVnh1SUNBZ0lDQWdJQ0FnS2lCQVpHVm1ZWFZzZENCbVlXeHpaVnh1SUNBZ0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUNBZ2FYTkJiR2xuYmt4bFpuUTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBb2RHaHBjeTVmWVd4cFoyNUdiR0ZuY3lBbUlFeEZSbFFwSUQ0Z01EdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6WlhRNklHWjFibU4wYVc5dUlDaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNObGRFRnNhV2R1S0V4RlJsUXNJSFpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoYm1sdFlYUmhZbXhsT2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnZiMngwYVhBNklFTkRYMFJGVmlBbUppQW5hVEU0YmpwRFQwMVFUMDVGVGxRdWQybGtaMlYwTG1Gc2FXZHVYMnhsWm5RbkxGeHVJQ0FnSUNBZ0lDQjlMRnh1WEc0Z0lDQWdJQ0FnSUM4cUtseHVJQ0FnSUNBZ0lDQWdLaUFoSTJWdVhHNGdJQ0FnSUNBZ0lDQXFJRWh2Y21sNmIyNTBZV3dnWVd4cFoyNXpJSFJvWlNCdGFXUndiMmx1ZEM0Z1ZHaHBjeUIzYVd4c0lHOXdaVzRnZEdobElHOTBhR1Z5SUdodmNtbDZiMjUwWVd3Z1lXeHBaMjV0Wlc1MElHOXdkR2x2Ym5NZ1kyRnVZMlZzWldRdVhHNGdJQ0FnSUNBZ0lDQXFJQ0VqZW1oY2JpQWdJQ0FnSUNBZ0lDb2c1cGl2NVpDbTVyQzA1Ym16NXBhNTVaQ1I1YSs1NmIyUTVMaXQ1NEs1Nzd5TTVieUE1WkN2NXEyazZZQ0o2YUc1NUx5YTViQ0c1ckMwNWJtejVwYTU1WkNSNVlXMjVMdVc1YSs1NmIyUTZZQ0o2YUc1NVkrVzVyYUk0NENDWEc0Z0lDQWdJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQnBjMEZzYVdkdVNHOXlhWHB2Ym5SaGJFTmxiblJsY2x4dUlDQWdJQ0FnSUNBZ0tpQkFkSGx3WlNCN1FtOXZiR1ZoYm4xY2JpQWdJQ0FnSUNBZ0lDb2dRR1JsWm1GMWJIUWdabUZzYzJWY2JpQWdJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQWdJR2x6UVd4cFoyNUliM0pwZW05dWRHRnNRMlZ1ZEdWeU9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCblpYUTZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnS0hSb2FYTXVYMkZzYVdkdVJteGhaM01nSmlCRFJVNVVSVklwSUQ0Z01EdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6WlhRNklHWjFibU4wYVc5dUlDaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWx6UVd4cFoyNU1aV1owSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YVhOQmJHbG5ibEpwWjJoMElEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyRnNhV2R1Um14aFozTWdmRDBnUTBWT1ZFVlNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZZV3hwWjI1R2JHRm5jeUFtUFNCK1EwVk9WRVZTTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmhibWx0WVhSaFlteGxPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhSdmIyeDBhWEE2SUVORFgwUkZWaUFtSmlBbmFURTRianBEVDAxUVQwNUZUbFF1ZDJsa1oyVjBMbUZzYVdkdVgyaGZZMlZ1ZEdWeUp5eGNiaUFnSUNBZ0lDQWdmU3hjYmx4dUlDQWdJQ0FnSUNBdktpcGNiaUFnSUNBZ0lDQWdJQ29nSVNObGJpQlhhR1YwYUdWeUlIUnZJR0ZzYVdkdUlIUm9aU0J5YVdkb2RDNWNiaUFnSUNBZ0lDQWdJQ29nSVNONmFDRG1tSy9sa0tibHI3bnB2WkRsajdQb3ZybmpnSUpjYmlBZ0lDQWdJQ0FnSUNvZ1FIQnliM0JsY25SNUlHbHpRV3hwWjI1U2FXZG9kRnh1SUNBZ0lDQWdJQ0FnS2lCQWRIbHdaU0I3UW05dmJHVmhibjFjYmlBZ0lDQWdJQ0FnSUNvZ1FHUmxabUYxYkhRZ1ptRnNjMlZjYmlBZ0lDQWdJQ0FnSUNvdlhHNGdJQ0FnSUNBZ0lHbHpRV3hwWjI1U2FXZG9kRG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaMlYwT2lCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlDaDBhR2x6TGw5aGJHbG5ia1pzWVdkeklDWWdVa2xIU0ZRcElENGdNRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCelpYUTZJR1oxYm1OMGFXOXVJQ2gyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzTmxkRUZzYVdkdUtGSkpSMGhVTENCMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1lXNXBiV0YwWVdKc1pUb2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYjI5c2RHbHdPaUJEUTE5RVJWWWdKaVlnSjJreE9HNDZRMDlOVUU5T1JVNVVMbmRwWkdkbGRDNWhiR2xuYmw5eWFXZG9kQ2NzWEc0Z0lDQWdJQ0FnSUgwc1hHNWNiaUFnSUNBZ0lDQWdMeW9xWEc0Z0lDQWdJQ0FnSUNBcUlDRWpaVzVjYmlBZ0lDQWdJQ0FnSUNvZ1YyaGxkR2hsY2lCMGFHVWdjM1J5WlhSamFHVmtJR2h2Y21sNmIyNTBZV3hzZVN3Z2QyaGxiaUJsYm1GaWJHVWdkR2hsSUd4bFpuUWdZVzVrSUhKcFoyaDBJR0ZzYVdkdWJXVnVkQ0IzYVd4c0lHSmxJSE4wY21WMFkyaGxaQ0JvYjNKcGVtOXVkR0ZzYkhrc1hHNGdJQ0FnSUNBZ0lDQXFJSFJvWlNCM2FXUjBhQ0J6WlhSMGFXNW5JR2x6SUdsdWRtRnNhV1FnS0hKbFlXUWdiMjVzZVNrdVhHNGdJQ0FnSUNBZ0lDQXFJQ0VqZW1oY2JpQWdJQ0FnSUNBZ0lDb2c1YjJUNVltTjVwaXY1WkNtNXJDMDVibXo1b3VKNUx5NDQ0Q0M1YjJUNVpDTTVwZTI1WkN2NTVTbzViZW01WSt6NWErNTZiMlE1cGUyNzd5TTZJcUM1NEs1NWJDRzVMeWE2S0tyNXJDMDVibXo1b3VKNUx5NDc3eU01cTJrNXBlMjZJcUM1NEs1NTVxRTVhNjk1YnFtNVkrcTZLKzc0NENDWEc0Z0lDQWdJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQnBjMU4wY21WMFkyaFhhV1IwYUZ4dUlDQWdJQ0FnSUNBZ0tpQkFkSGx3WlNCN1FtOXZiR1ZoYm4xY2JpQWdJQ0FnSUNBZ0lDb2dRR1JsWm1GMWJIUWdabUZzYzJWY2JpQWdJQ0FnSUNBZ0lDb2dRSEpsWVdSUGJteDVYRzRnSUNBZ0lDQWdJQ0FxTDF4dUlDQWdJQ0FnSUNCcGMxTjBjbVYwWTJoWGFXUjBhRG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaMlYwT2lCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlDaDBhR2x6TGw5aGJHbG5ia1pzWVdkeklDWWdURVZHVkY5U1NVZElWQ2tnUFQwOUlFeEZSbFJmVWtsSFNGUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1semFXSnNaVG9nWm1Gc2MyVmNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnTHlvcVhHNGdJQ0FnSUNBZ0lDQXFJQ0VqWlc1Y2JpQWdJQ0FnSUNBZ0lDb2dWMmhsZEdobGNpQjBhR1VnYzNSeVpYUmphR1ZrSUhabGNuUnBZMkZzYkhrc0lIZG9aVzRnWlc1aFlteGxJSFJvWlNCc1pXWjBJR0Z1WkNCeWFXZG9kQ0JoYkdsbmJtMWxiblFnZDJsc2JDQmlaU0J6ZEhKbGRHTm9aV1FnZG1WeWRHbGpZV3hzZVN4Y2JpQWdJQ0FnSUNBZ0lDb2dkR2hsYmlCb1pXbG5hSFFnYzJWMGRHbHVaeUJwY3lCcGJuWmhiR2xrSUNoeVpXRmtJRzl1YkhrcFhHNGdJQ0FnSUNBZ0lDQXFJQ0VqZW1oY2JpQWdJQ0FnSUNBZ0lDb2c1YjJUNVltTjVwaXY1WkNtNVo2QzU1dTA1b3VKNUx5NDQ0Q0M1YjJUNVpDTTVwZTI1WkN2NTVTbzVMaUs1TGlMNWErNTZiMlE1cGUyNzd5TTZJcUM1NEs1NWJDRzVMeWE2S0tyNVo2QzU1dTA1b3VKNUx5NDc3eU01cTJrNXBlMjZJcUM1NEs1NTVxRTZhdVk1YnFtNVkrcTZLKzc0NENDWEc0Z0lDQWdJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQnBjMU4wY21WMFkyaElaV2xuYUhSY2JpQWdJQ0FnSUNBZ0lDb2dRSFI1Y0dVZ2UwSnZiMnhsWVc1OVhHNGdJQ0FnSUNBZ0lDQXFJRUJrWldaaGRXeDBJR1poYkhObFhHNGdJQ0FnSUNBZ0lDQXFJRUJ5WldGa1QyNXNlVnh1SUNBZ0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUNBZ2FYTlRkSEpsZEdOb1NHVnBaMmgwT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JuWlhRNklHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdLSFJvYVhNdVgyRnNhV2R1Um14aFozTWdKaUJVVDFCZlFrOVVLU0E5UFQwZ1ZFOVFYMEpQVkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjJhWE5wWW14bE9pQm1ZV3h6WlZ4dUlDQWdJQ0FnSUNCOUxGeHVYRzRnSUNBZ0lDQWdJQzh2SUVGTVNVZE9JRTFCVWtkSlRsTmNibHh1SUNBZ0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBZ0lDb2dJU05sYmx4dUlDQWdJQ0FnSUNBZ0tpQlVhR1VnYldGeVoybHVjeUJpWlhSM1pXVnVJSFJvWlNCMGIzQWdiMllnZEdocGN5QnViMlJsSUdGdVpDQjBhR1VnZEc5d0lHOW1JSEJoY21WdWRDQnViMlJsTEZ4dUlDQWdJQ0FnSUNBZ0tpQjBhR1VnZG1Gc2RXVWdZMkZ1SUdKbElHNWxaMkYwYVhabExDQlBibXg1SUdGMllXbHNZV0pzWlNCcGJpQW5hWE5CYkdsbmJsUnZjQ2NnYjNCbGJpNWNiaUFnSUNBZ0lDQWdJQ29nSVNONmFGeHVJQ0FnSUNBZ0lDQWdLaURtbkt6b2lvTG5ncm5wb2Jib3Zybmxrb3puaUxib2lvTG5ncm5wb2Jib3Zybm5tb1RvdDUzbnBydnZ2SXpsajYvbG9hdmxocG5vdEovbGdMenZ2SXpsajZybW5JbmxuS2dnYVhOQmJHbG5ibFJ2Y0NEbHZJRGxrSy9tbDdibWlZM21uSW5rdlp6bmxLampnSUpjYmlBZ0lDQWdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIUnZjRnh1SUNBZ0lDQWdJQ0FnS2lCQWRIbHdaU0I3VG5WdFltVnlmVnh1SUNBZ0lDQWdJQ0FnS2lCQVpHVm1ZWFZzZENBd1hHNGdJQ0FnSUNBZ0lDQXFMMXh1SUNBZ0lDQWdJQ0IwYjNBNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdkbGREb2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOTBiM0E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVjBPaUJtZFc1amRHbHZiaUFvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTBiM0FnUFNCMllXeDFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCMGIyOXNkR2x3T2lCRFExOUVSVllnSmlZZ0oya3hPRzQ2UTA5TlVFOU9SVTVVTG5kcFpHZGxkQzUwYjNBbkxGeHVJQ0FnSUNBZ0lDQjlMRnh1WEc0Z0lDQWdJQ0FnSUM4cUtseHVJQ0FnSUNBZ0lDQWdLaUFoSTJWdVhHNGdJQ0FnSUNBZ0lDQXFJRlJvWlNCdFlYSm5hVzV6SUdKbGRIZGxaVzRnZEdobElHSnZkSFJ2YlNCdlppQjBhR2x6SUc1dlpHVWdZVzVrSUhSb1pTQmliM1IwYjIwZ2IyWWdjR0Z5Wlc1MElHNXZaR1VzWEc0Z0lDQWdJQ0FnSUNBcUlIUm9aU0IyWVd4MVpTQmpZVzRnWW1VZ2JtVm5ZWFJwZG1Vc0lFOXViSGtnWVhaaGFXeGhZbXhsSUdsdUlDZHBjMEZzYVdkdVFtOTBkRzl0SnlCdmNHVnVMbHh1SUNBZ0lDQWdJQ0FnS2lBaEkzcG9YRzRnSUNBZ0lDQWdJQ0FxSU9hY3JPaUtndWVDdWVXNmxlaSt1ZVdTak9lSXR1aUtndWVDdWVXNmxlaSt1ZWVhaE9pM25lZW11Kys4ak9XUHIrV2hxK1dHbWVpMG4rV0F2Tys4ak9XUHF1YWNpZVdjcUNCcGMwRnNhV2R1UW05MGRHOXRJT1c4Z09XUXIrYVh0dWFKamVhY2llUzluT2VVcU9PQWdseHVJQ0FnSUNBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnWW05MGRHOXRYRzRnSUNBZ0lDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDQWdJQ0FxSUVCa1pXWmhkV3gwSURCY2JpQWdJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQWdJR0p2ZEhSdmJUb2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1oyVjBPaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMkp2ZEhSdmJUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6WlhRNklHWjFibU4wYVc5dUlDaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJKdmRIUnZiU0E5SUhaaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhSdmIyeDBhWEE2SUVORFgwUkZWaUFtSmlBbmFURTRianBEVDAxUVQwNUZUbFF1ZDJsa1oyVjBMbUp2ZEhSdmJTY3NYRzRnSUNBZ0lDQWdJSDBzWEc1Y2JpQWdJQ0FnSUNBZ0x5b3FYRzRnSUNBZ0lDQWdJQ0FxSUNFalpXNWNiaUFnSUNBZ0lDQWdJQ29nVkdobElHMWhjbWRwYm5NZ1ltVjBkMlZsYmlCMGFHVWdiR1ZtZENCdlppQjBhR2x6SUc1dlpHVWdZVzVrSUhSb1pTQnNaV1owSUc5bUlIQmhjbVZ1ZENCdWIyUmxMRnh1SUNBZ0lDQWdJQ0FnS2lCMGFHVWdkbUZzZFdVZ1kyRnVJR0psSUc1bFoyRjBhWFpsTENCUGJteDVJR0YyWVdsc1lXSnNaU0JwYmlBbmFYTkJiR2xuYmt4bFpuUW5JRzl3Wlc0dVhHNGdJQ0FnSUNBZ0lDQXFJQ0VqZW1oY2JpQWdJQ0FnSUNBZ0lDb2c1cHlzNklxQzU0SzU1YmVtNkw2NTVaS001NGkyNklxQzU0SzU1YmVtNkw2NTU1cUU2TGVkNTZhNzc3eU01WSt2NWFHcjVZYVo2TFNmNVlDODc3eU01WStxNXB5SjVaeW9JR2x6UVd4cFoyNU1aV1owSU9XOGdPV1FyK2FYdHVhSmplYWNpZVM5bk9lVXFPT0FnbHh1SUNBZ0lDQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2JHVm1kRnh1SUNBZ0lDQWdJQ0FnS2lCQWRIbHdaU0I3VG5WdFltVnlmVnh1SUNBZ0lDQWdJQ0FnS2lCQVpHVm1ZWFZzZENBd1hHNGdJQ0FnSUNBZ0lDQXFMMXh1SUNBZ0lDQWdJQ0JzWldaME9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCblpYUTZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiR1ZtZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaWFE2SUdaMWJtTjBhVzl1SUNoMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMnhsWm5RZ1BTQjJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBiMjlzZEdsd09pQkRRMTlFUlZZZ0ppWWdKMmt4T0c0NlEwOU5VRTlPUlU1VUxuZHBaR2RsZEM1c1pXWjBKeXhjYmlBZ0lDQWdJQ0FnZlN4Y2JseHVJQ0FnSUNBZ0lDQXZLaXBjYmlBZ0lDQWdJQ0FnSUNvZ0lTTmxibHh1SUNBZ0lDQWdJQ0FnS2lCVWFHVWdiV0Z5WjJsdWN5QmlaWFIzWldWdUlIUm9aU0J5YVdkb2RDQnZaaUIwYUdseklHNXZaR1VnWVc1a0lIUm9aU0J5YVdkb2RDQnZaaUJ3WVhKbGJuUWdibTlrWlN4Y2JpQWdJQ0FnSUNBZ0lDb2dkR2hsSUhaaGJIVmxJR05oYmlCaVpTQnVaV2RoZEdsMlpTd2dUMjVzZVNCaGRtRnBiR0ZpYkdVZ2FXNGdKMmx6UVd4cFoyNVNhV2RvZENjZ2IzQmxiaTVjYmlBZ0lDQWdJQ0FnSUNvZ0lTTjZhRnh1SUNBZ0lDQWdJQ0FnS2lEbW5Lem9pb0xuZ3JubGo3UG92cm5sa296bmlMYm9pb0xuZ3JubGo3UG92cm5ubW9Ub3Q1M25wcnZ2dkl6bGo2L2xvYXZsaHBub3RKL2xnTHp2dkl6bGo2cm1uSW5sbktnZ2FYTkJiR2xuYmxKcFoyaDBJT1c4Z09XUXIrYVh0dWFKamVhY2llUzluT2VVcU9PQWdseHVJQ0FnSUNBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnY21sbmFIUmNiaUFnSUNBZ0lDQWdJQ29nUUhSNWNHVWdlMDUxYldKbGNuMWNiaUFnSUNBZ0lDQWdJQ29nUUdSbFptRjFiSFFnTUZ4dUlDQWdJQ0FnSUNBZ0tpOWNiaUFnSUNBZ0lDQWdjbWxuYUhRNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdkbGREb2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlhV2RvZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaWFE2SUdaMWJtTjBhVzl1SUNoMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM0pwWjJoMElEMGdkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkRzl2YkhScGNEb2dRME5mUkVWV0lDWW1JQ2RwTVRodU9rTlBUVkJQVGtWT1ZDNTNhV1JuWlhRdWNtbG5hSFFuTEZ4dUlDQWdJQ0FnSUNCOUxGeHVYRzRnSUNBZ0lDQWdJQzhxS2x4dUlDQWdJQ0FnSUNBZ0tpQWhJMlZ1WEc0Z0lDQWdJQ0FnSUNBcUlFaHZjbWw2YjI1MFlXd2dZV3hwWjI1eklIUm9aU0J0YVdSd2IybHVkQ0J2Wm1aelpYUWdkbUZzZFdVc1hHNGdJQ0FnSUNBZ0lDQXFJSFJvWlNCMllXeDFaU0JqWVc0Z1ltVWdibVZuWVhScGRtVXNJRTl1YkhrZ1lYWmhhV3hoWW14bElHbHVJQ2RwYzBGc2FXZHVTRzl5YVhwdmJuUmhiRU5sYm5SbGNpY2diM0JsYmk1Y2JpQWdJQ0FnSUNBZ0lDb2dJU042YUNEbXNMVGx1YlBsc1lYa3VLM25tb1RsZ1kvbnA3dmxnTHp2dkl6bGo2L2xvYXZsaHBub3RKL2xnTHp2dkl6bGo2cm1uSW5sbktnZ2FYTkJiR2xuYmtodmNtbDZiMjUwWVd4RFpXNTBaWElnNWJ5QTVaQ3Y1cGUyNW9tTjVweUo1TDJjNTVTbzQ0Q0NYRzRnSUNBZ0lDQWdJQ0FxSUVCd2NtOXdaWEowZVNCb2IzSnBlbTl1ZEdGc1EyVnVkR1Z5WEc0Z0lDQWdJQ0FnSUNBcUlFQjBlWEJsSUh0T2RXMWlaWEo5WEc0Z0lDQWdJQ0FnSUNBcUlFQmtaV1poZFd4MElEQmNiaUFnSUNBZ0lDQWdJQ292WEc0Z0lDQWdJQ0FnSUdodmNtbDZiMjUwWVd4RFpXNTBaWEk2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2RsZERvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5b2IzSnBlbTl1ZEdGc1EyVnVkR1Z5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxkRG9nWm5WdVkzUnBiMjRnS0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZhRzl5YVhwdmJuUmhiRU5sYm5SbGNpQTlJSFpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJ2YjJ4MGFYQTZJRU5EWDBSRlZpQW1KaUFuYVRFNGJqcERUMDFRVDA1RlRsUXVkMmxrWjJWMExtaHZjbWw2YjI1MFlXeGZZMlZ1ZEdWeUp5eGNiaUFnSUNBZ0lDQWdmU3hjYmx4dUlDQWdJQ0FnSUNBdktpcGNiaUFnSUNBZ0lDQWdJQ29nSVNObGJseHVJQ0FnSUNBZ0lDQWdLaUJXWlhKMGFXTmhiQ0JoYkdsbmJuTWdkR2hsSUcxcFpIQnZhVzUwSUc5bVpuTmxkQ0IyWVd4MVpTeGNiaUFnSUNBZ0lDQWdJQ29nZEdobElIWmhiSFZsSUdOaGJpQmlaU0J1WldkaGRHbDJaU3dnVDI1c2VTQmhkbUZwYkdGaWJHVWdhVzRnSjJselFXeHBaMjVXWlhKMGFXTmhiRU5sYm5SbGNpY2diM0JsYmk1Y2JpQWdJQ0FnSUNBZ0lDb2dJU042YUNEbG5vTG5tN1Rsc1lYa3VLM25tb1RsZ1kvbnA3dmxnTHp2dkl6bGo2L2xvYXZsaHBub3RKL2xnTHp2dkl6bGo2cm1uSW5sbktnZ2FYTkJiR2xuYmxabGNuUnBZMkZzUTJWdWRHVnlJT1c4Z09XUXIrYVh0dWFKamVhY2llUzluT2VVcU9PQWdseHVJQ0FnSUNBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnZG1WeWRHbGpZV3hEWlc1MFpYSmNiaUFnSUNBZ0lDQWdJQ29nUUhSNWNHVWdlMDUxYldKbGNuMWNiaUFnSUNBZ0lDQWdJQ29nUUdSbFptRjFiSFFnTUZ4dUlDQWdJQ0FnSUNBZ0tpOWNiaUFnSUNBZ0lDQWdkbVZ5ZEdsallXeERaVzUwWlhJNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdkbGREb2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOTJaWEowYVdOaGJFTmxiblJsY2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaWFE2SUdaMWJtTjBhVzl1SUNoMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM1psY25ScFkyRnNRMlZ1ZEdWeUlEMGdkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkRzl2YkhScGNEb2dRME5mUkVWV0lDWW1JQ2RwTVRodU9rTlBUVkJQVGtWT1ZDNTNhV1JuWlhRdWRtVnlkR2xqWVd4ZlkyVnVkR1Z5Snl4Y2JpQWdJQ0FnSUNBZ2ZTeGNibHh1SUNBZ0lDQWdJQ0F2THlCUVFWSkRSVTVVUVVkRklFOVNJRUZDVTA5TVZWUkZYRzVjYmlBZ0lDQWdJQ0FnTHlvcVhHNGdJQ0FnSUNBZ0lDQXFJQ0VqWlc0Z1NXWWdkSEoxWlN3Z2FHOXlhWHB2Ym5SaGJFTmxiblJsY2lCcGN5QndhWGhsYkNCdFlYSm5hVzRzSUc5MGFHVnlkMmx6WlNCcGN5QndaWEpqWlc1MFlXZGxJQ2d3SUMwZ01Ta2diV0Z5WjJsdUxseHVJQ0FnSUNBZ0lDQWdLaUFoSTNwb0lPV21ndWFlbk9TNHVpQjBjblZsNzd5TVhDSm9iM0pwZW05dWRHRnNRMlZ1ZEdWeVhDSWc1YkNHNUx5YTVMdWw1WU9QNTdTZzVMMmM1TGk2NVlHUDU2ZTc1WUM4Nzd5TTVZK041TG1MNUxpNjU1bSs1WWlHNXErVTc3eUlNQ0RsaUxBZ01lKzhpZU9BZ2x4dUlDQWdJQ0FnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dhWE5CWW5OdmJIVjBaVWh2Y21sNmIyNTBZV3hEWlc1MFpYSmNiaUFnSUNBZ0lDQWdJQ29nUUhSNWNHVWdlMEp2YjJ4bFlXNTlYRzRnSUNBZ0lDQWdJQ0FxSUVCa1pXWmhkV3gwSUhSeWRXVmNiaUFnSUNBZ0lDQWdJQ292WEc0Z0lDQWdJQ0FnSUdselFXSnpiMngxZEdWSWIzSnBlbTl1ZEdGc1EyVnVkR1Z5T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JuWlhRNklHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmFYTkJZbk5JYjNKcGVtOXVkR0ZzUTJWdWRHVnlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhObGREb2dablZ1WTNScGIyNGdLSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmFYTkJZbk5JYjNKcGVtOXVkR0ZzUTJWdWRHVnlJRDBnZG1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWVc1cGJXRjBZV0pzWlRvZ1ptRnNjMlZjYmlBZ0lDQWdJQ0FnZlN4Y2JseHVJQ0FnSUNBZ0lDQXZLaXBjYmlBZ0lDQWdJQ0FnSUNvZ0lTTmxiaUJKWmlCMGNuVmxMQ0IyWlhKMGFXTmhiRU5sYm5SbGNpQnBjeUJ3YVhobGJDQnRZWEpuYVc0c0lHOTBhR1Z5ZDJselpTQnBjeUJ3WlhKalpXNTBZV2RsSUNnd0lDMGdNU2tnYldGeVoybHVMbHh1SUNBZ0lDQWdJQ0FnS2lBaEkzcG9JT1dtZ3VhZW5PUzR1aUIwY25WbDc3eU1YQ0oyWlhKMGFXTmhiRU5sYm5SbGNsd2lJT1d3aHVTOG11UzdwZVdEaitlMG9PUzluT1M0dXVXQmorZW51K1dBdk8rOGpPV1BqZVM1aStTNHV1ZVp2dVdJaHVhdmxPKzhpREFnNVlpd0lESHZ2SW5qZ0lKY2JpQWdJQ0FnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJR2x6UVdKemIyeDFkR1ZXWlhKMGFXTmhiRU5sYm5SbGNseHVJQ0FnSUNBZ0lDQWdLaUJBZEhsd1pTQjdRbTl2YkdWaGJuMWNiaUFnSUNBZ0lDQWdJQ29nUUdSbFptRjFiSFFnZEhKMVpWeHVJQ0FnSUNBZ0lDQWdLaTljYmlBZ0lDQWdJQ0FnYVhOQlluTnZiSFYwWlZabGNuUnBZMkZzUTJWdWRHVnlPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm5aWFE2SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYVhOQlluTldaWEowYVdOaGJFTmxiblJsY2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaWFE2SUdaMWJtTjBhVzl1SUNoMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMmx6UVdKelZtVnlkR2xqWVd4RFpXNTBaWElnUFNCMllXeDFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCaGJtbHRZWFJoWW14bE9pQm1ZV3h6WlZ4dUlDQWdJQ0FnSUNCOUxGeHVYRzRnSUNBZ0lDQWdJQzhxS2x4dUlDQWdJQ0FnSUNBZ0tpQWhJMlZ1WEc0Z0lDQWdJQ0FnSUNBcUlFbG1JSFJ5ZFdVc0lIUnZjQ0JwY3lCd2FYaGxiQ0J0WVhKbmFXNHNJRzkwYUdWeWQybHpaU0JwY3lCd1pYSmpaVzUwWVdkbElDZ3dJQzBnTVNrZ2JXRnlaMmx1SUhKbGJHRjBhWFpsSUhSdklIUm9aU0J3WVhKbGJuUW5jeUJvWldsbmFIUXVYRzRnSUNBZ0lDQWdJQ0FxSUNFamVtaGNiaUFnSUNBZ0lDQWdJQ29nNWFhQzVwNmM1TGk2SUhSeWRXWHZ2SXhjSW5SdmNGd2lJT1d3aHVTOG11UzdwZVdEaitlMG9PUzluT1M0dXVpK3VlaTNuZSs4ak9XUXB1V0ltZVd3aHVTOG11UzdwZWVidU9XdnVlZUl0dWVKcWVTOWsrbXJtT1c2cHVlYWhPZVp2dVdJaHVhdmxPKzhpREFnNVlpd0lESHZ2SW5rdlp6a3VMcm92cm5vdDUzamdJSmNiaUFnSUNBZ0lDQWdJQ29nUUhCeWIzQmxjblI1SUdselFXSnpiMngxZEdWVWIzQmNiaUFnSUNBZ0lDQWdJQ29nUUhSNWNHVWdlMEp2YjJ4bFlXNTlYRzRnSUNBZ0lDQWdJQ0FxSUVCa1pXWmhkV3gwSUhSeWRXVmNiaUFnSUNBZ0lDQWdJQ292WEc0Z0lDQWdJQ0FnSUdselFXSnpiMngxZEdWVWIzQTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlwYzBGaWMxUnZjRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCelpYUTZJR1oxYm1OMGFXOXVJQ2gyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgybHpRV0p6Vkc5d0lEMGdkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZVzVwYldGMFlXSnNaVG9nWm1Gc2MyVmNiaUFnSUNBZ0lDQWdmU3hjYmx4dUlDQWdJQ0FnSUNBdktpcGNiaUFnSUNBZ0lDQWdJQ29nSVNObGJseHVJQ0FnSUNBZ0lDQWdLaUJKWmlCMGNuVmxMQ0JpYjNSMGIyMGdhWE1nY0dsNFpXd2diV0Z5WjJsdUxDQnZkR2hsY25kcGMyVWdhWE1nY0dWeVkyVnVkR0ZuWlNBb01DQXRJREVwSUcxaGNtZHBiaUJ5Wld4aGRHbDJaU0IwYnlCMGFHVWdjR0Z5Wlc1MEozTWdhR1ZwWjJoMExseHVJQ0FnSUNBZ0lDQWdLaUFoSTNwb1hHNGdJQ0FnSUNBZ0lDQXFJT1dtZ3VhZW5PUzR1aUIwY25WbDc3eU1YQ0ppYjNSMGIyMWNJaURsc0lia3ZKcmt1NlhsZzQvbnRLRGt2WnprdUxyb3Zybm90NTN2dkl6bGtLYmxpSm5sc0lia3ZKcmt1NlhubTdqbHI3bm5pTGJuaWFua3ZaUHBxNWpsdXFibm1vVG5tYjdsaUlibXI1VHZ2SWd3SU9XSXNDQXg3N3lKNUwyYzVMaTY2TDY1NkxlZDQ0Q0NYRzRnSUNBZ0lDQWdJQ0FxSUVCd2NtOXdaWEowZVNCcGMwRmljMjlzZFhSbFFtOTBkRzl0WEc0Z0lDQWdJQ0FnSUNBcUlFQjBlWEJsSUh0Q2IyOXNaV0Z1ZlZ4dUlDQWdJQ0FnSUNBZ0tpQkFaR1ZtWVhWc2RDQjBjblZsWEc0Z0lDQWdJQ0FnSUNBcUwxeHVJQ0FnSUNBZ0lDQnBjMEZpYzI5c2RYUmxRbTkwZEc5dE9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCblpYUTZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZhWE5CWW5OQ2IzUjBiMjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVjBPaUJtZFc1amRHbHZiaUFvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXBjMEZpYzBKdmRIUnZiU0E5SUhaaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdGdWFXMWhkR0ZpYkdVNklHWmhiSE5sWEc0Z0lDQWdJQ0FnSUgwc1hHNWNiaUFnSUNBZ0lDQWdMeW9xWEc0Z0lDQWdJQ0FnSUNBcUlDRWpaVzVjYmlBZ0lDQWdJQ0FnSUNvZ1NXWWdkSEoxWlN3Z2JHVm1kQ0JwY3lCd2FYaGxiQ0J0WVhKbmFXNHNJRzkwYUdWeWQybHpaU0JwY3lCd1pYSmpaVzUwWVdkbElDZ3dJQzBnTVNrZ2JXRnlaMmx1SUhKbGJHRjBhWFpsSUhSdklIUm9aU0J3WVhKbGJuUW5jeUIzYVdSMGFDNWNiaUFnSUNBZ0lDQWdJQ29nSVNONmFGeHVJQ0FnSUNBZ0lDQWdLaURscG9MbW5wemt1TG9nZEhKMVplKzhqRndpYkdWbWRGd2lJT1d3aHVTOG11UzdwZVdEaitlMG9PUzluT1M0dXVpK3VlaTNuZSs4ak9XUXB1V0ltZVd3aHVTOG11UzdwZWVidU9XdnVlZUl0dWVKcWVTOWsrV3V2ZVc2cHVlYWhPZVp2dVdJaHVhdmxPKzhpREFnNVlpd0lESHZ2SW5rdlp6a3VMcm92cm5vdDUzamdJSmNiaUFnSUNBZ0lDQWdJQ29nUUhCeWIzQmxjblI1SUdselFXSnpiMngxZEdWTVpXWjBYRzRnSUNBZ0lDQWdJQ0FxSUVCMGVYQmxJSHRDYjI5c1pXRnVmVnh1SUNBZ0lDQWdJQ0FnS2lCQVpHVm1ZWFZzZENCMGNuVmxYRzRnSUNBZ0lDQWdJQ0FxTDF4dUlDQWdJQ0FnSUNCcGMwRmljMjlzZFhSbFRHVm1kRG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaMlYwT2lCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJselFXSnpUR1ZtZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaWFE2SUdaMWJtTjBhVzl1SUNoMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMmx6UVdKelRHVm1kQ0E5SUhaaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdGdWFXMWhkR0ZpYkdVNklHWmhiSE5sWEc0Z0lDQWdJQ0FnSUgwc1hHNWNiaUFnSUNBZ0lDQWdMeW9xWEc0Z0lDQWdJQ0FnSUNBcUlDRWpaVzVjYmlBZ0lDQWdJQ0FnSUNvZ1NXWWdkSEoxWlN3Z2NtbG5hSFFnYVhNZ2NHbDRaV3dnYldGeVoybHVMQ0J2ZEdobGNuZHBjMlVnYVhNZ2NHVnlZMlZ1ZEdGblpTQW9NQ0F0SURFcElHMWhjbWRwYmlCeVpXeGhkR2wyWlNCMGJ5QjBhR1VnY0dGeVpXNTBKM01nZDJsa2RHZ3VYRzRnSUNBZ0lDQWdJQ0FxSUNFamVtaGNiaUFnSUNBZ0lDQWdJQ29nNWFhQzVwNmM1TGk2SUhSeWRXWHZ2SXhjSW5KcFoyaDBYQ0lnNWJDRzVMeWE1THVsNVlPUDU3U2c1TDJjNUxpNjZMNjU2TGVkNzd5TTVaQ201WWlaNWJDRzVMeWE1THVsNTV1NDVhKzU1NGkyNTRtcDVMMlQ1YTY5NWJxbTU1cUU1NW0rNVlpRzVxK1U3N3lJTUNEbGlMQWdNZSs4aWVTOW5PUzR1dWkrdWVpM25lT0FnbHh1SUNBZ0lDQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2FYTkJZbk52YkhWMFpWSnBaMmgwWEc0Z0lDQWdJQ0FnSUNBcUlFQjBlWEJsSUh0Q2IyOXNaV0Z1ZlZ4dUlDQWdJQ0FnSUNBZ0tpQkFaR1ZtWVhWc2RDQjBjblZsWEc0Z0lDQWdJQ0FnSUNBcUwxeHVJQ0FnSUNBZ0lDQnBjMEZpYzI5c2RYUmxVbWxuYUhRNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdkbGREb2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXBjMEZpYzFKcFoyaDBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhObGREb2dablZ1WTNScGIyNGdLSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmFYTkJZbk5TYVdkb2RDQTlJSFpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0Z1YVcxaGRHRmliR1U2SUdaaGJITmxYRzRnSUNBZ0lDQWdJSDBzWEc1Y2JpQWdJQ0FnSUNBZ0x5b3FYRzRnSUNBZ0lDQWdJQ0FxSUNFalpXNGdVM0JsWTJsbWFXVnpJSFJvWlNCaGJHbG5ibTFsYm5RZ2JXOWtaU0J2WmlCMGFHVWdWMmxrWjJWMExDQjNhR2xqYUNCa1pYUmxjbTFwYm1WeklIZG9aVzRnZEdobElIZHBaR2RsZENCemFHOTFiR1FnY21WbWNtVnphQzVjYmlBZ0lDQWdJQ0FnSUNvZ0lTTjZhQ0RtaklmbHJwb2dWMmxrWjJWMElPZWFoT1d2dWVtOWtPYW9vZVc4aisrOGpPZVVxT1M2anVXR3MrV3VtaUJYYVdSblpYUWc1YnFVNksrbDVMMlY1cGUyNVlpMzVwYXc0NENDWEc0Z0lDQWdJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQjdWMmxrWjJWMExrRnNhV2R1VFc5a1pYMGdZV3hwWjI1TmIyUmxYRzRnSUNBZ0lDQWdJQ0FxSUVCbGVHRnRjR3hsWEc0Z0lDQWdJQ0FnSUNBcUlIZHBaR2RsZEM1aGJHbG5iazF2WkdVZ1BTQmpZeTVYYVdSblpYUXVRV3hwWjI1TmIyUmxMazlPWDFkSlRrUlBWMTlTUlZOSldrVTdYRzRnSUNBZ0lDQWdJQ0FxTDF4dUlDQWdJQ0FnSUNCaGJHbG5iazF2WkdVNklIdGNiaUFnSUNBZ0lDQWdJQ0FnWkdWbVlYVnNkRG9nUVd4cFoyNU5iMlJsTGs5T1gxZEpUa1JQVjE5U1JWTkpXa1VzWEc0Z0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUVGc2FXZHVUVzlrWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdkRzl2YkhScGNEb2dRME5mUkVWV0lDWW1JQ2RwTVRodU9rTlBUVkJQVGtWT1ZDNTNhV1JuWlhRdVlXeHBaMjVmYlc5a1pTY3NYRzRnSUNBZ0lDQWdJSDBzWEc1Y2JpQWdJQ0FnSUNBZ0x5OWNibHh1SUNBZ0lDQWdJQ0JmZDJGelFXeHBaMjVQYm1ObE9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2lCMWJtUmxabWx1WldRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNKdFpYSnNlVk5sY21saGJHbDZaV1JCY3pvZ0oybHpRV3hwWjI1UGJtTmxKeXhjYmlBZ0lDQWdJQ0FnZlN4Y2JseHVJQ0FnSUNBZ0lDQmZkR0Z5WjJWME9pQnVkV3hzTEZ4dVhHNGdJQ0FnSUNBZ0lDOHFLbHh1SUNBZ0lDQWdJQ0FnS2lBaEkzcG9PaURscjducHZaRGx2SURsaGJQdnZJem5sTEVnUVd4cFoyNUdiR0ZuY3lEbnU0VG1pSkJjYmlBZ0lDQWdJQ0FnSUNwY2JpQWdJQ0FnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJRjloYkdsbmJrWnNZV2R6WEc0Z0lDQWdJQ0FnSUNBcUlFQjBlWEJsSUh0T2RXMWlaWEo5WEc0Z0lDQWdJQ0FnSUNBcUlFQmtaV1poZFd4MElEQmNiaUFnSUNBZ0lDQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDQWdJQ0FnSUNvdlhHNGdJQ0FnSUNBZ0lGOWhiR2xuYmtac1lXZHpPaUF3TEZ4dVhHNGdJQ0FnSUNBZ0lGOXNaV1owT2lBd0xGeHVJQ0FnSUNBZ0lDQmZjbWxuYUhRNklEQXNYRzRnSUNBZ0lDQWdJRjkwYjNBNklEQXNYRzRnSUNBZ0lDQWdJRjlpYjNSMGIyMDZJREFzWEc0Z0lDQWdJQ0FnSUY5MlpYSjBhV05oYkVObGJuUmxjam9nTUN4Y2JpQWdJQ0FnSUNBZ1gyaHZjbWw2YjI1MFlXeERaVzUwWlhJNklEQXNYRzRnSUNBZ0lDQWdJRjlwYzBGaWMweGxablE2SUhSeWRXVXNYRzRnSUNBZ0lDQWdJRjlwYzBGaWMxSnBaMmgwT2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0JmYVhOQlluTlViM0E2SUhSeWRXVXNYRzRnSUNBZ0lDQWdJRjlwYzBGaWMwSnZkSFJ2YlRvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnWDJselFXSnpTRzl5YVhwdmJuUmhiRU5sYm5SbGNqb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ1gybHpRV0p6Vm1WeWRHbGpZV3hEWlc1MFpYSTZJSFJ5ZFdVc1hHNWNiaUFnSUNBZ0lDQWdMeThnYjNKcFoybHVZV3dnYzJsNlpTQmlaV1p2Y21VZ1lXeHBaMjVjYmlBZ0lDQWdJQ0FnWDI5eWFXZHBibUZzVjJsa2RHZzZJREFzWEc0Z0lDQWdJQ0FnSUY5dmNtbG5hVzVoYkVobGFXZG9kRG9nTUZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0J6ZEdGMGFXTnpPaUI3WEc0Z0lDQWdJQ0FnSUVGc2FXZHVUVzlrWlRvZ1FXeHBaMjVOYjJSbExGeHVJQ0FnSUgwc1hHNWNiaUFnSUNCdmJreHZZV1E2SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYM2RoYzBGc2FXZHVUMjVqWlNBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJ0YVdkeVlYUmxJR1p2Y2lCdmJHUWdkbVZ5YzJsdmJseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWhiR2xuYmsxdlpHVWdQU0IwYUdsekxsOTNZWE5CYkdsbmJrOXVZMlVnUHlCQmJHbG5iazF2WkdVdVQwNURSU0E2SUVGc2FXZHVUVzlrWlM1QlRGZEJXVk03WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5M1lYTkJiR2xuYms5dVkyVWdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnYjI1RmJtRmliR1U2SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdWMmxrWjJWMFRXRnVZV2RsY2k1aFpHUW9kR2hwY3lrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUc5dVJHbHpZV0pzWlRvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0JYYVdSblpYUk5ZVzVoWjJWeUxuSmxiVzkyWlNoMGFHbHpLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdYM1poYkdsa1lYUmxWR0Z5WjJWMFNXNUVSVlk2SUVORFgwUkZWaUFtSmlCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCMFlYSm5aWFFnUFNCMGFHbHpMbDkwWVhKblpYUTdYRzRnSUNBZ0lDQWdJR2xtSUNoMFlYSm5aWFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCcGMxQmhjbVZ1ZENBOUlIUm9hWE11Ym05a1pTQWhQVDBnZEdGeVoyVjBJQ1ltSUhSb2FYTXVibTlrWlM1cGMwTm9hV3hrVDJZb2RHRnlaMlYwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGFYTlFZWEpsYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZeTVsY25KdmNrbEVLRFkxTURBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNSaGNtZGxkQ0E5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lIMHNYRzVjYmlBZ0lDQmZjMlYwUVd4cFoyNDZJR1oxYm1OMGFXOXVJQ2htYkdGbkxDQnBjMEZzYVdkdUtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCamRYSnlaVzUwSUQwZ0tIUm9hWE11WDJGc2FXZHVSbXhoWjNNZ0ppQm1iR0ZuS1NBK0lEQTdYRzRnSUNBZ0lDQWdJR2xtSUNocGMwRnNhV2R1SUQwOVBTQmpkWEp5Wlc1MEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RtRnlJR2x6U0c5eWFYcHZiblJoYkNBOUlDaG1iR0ZuSUNZZ1RFVkdWRjlTU1VkSVZDa2dQaUF3TzF4dUlDQWdJQ0FnSUNCcFppQW9hWE5CYkdsbmJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWVd4cFoyNUdiR0ZuY3lCOFBTQm1iR0ZuTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FYTkliM0pwZW05dWRHRnNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXBjMEZzYVdkdVNHOXlhWHB2Ym5SaGJFTmxiblJsY2lBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1selUzUnlaWFJqYUZkcFpIUm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR0psWTI5dFpTQnpkSEpsZEdOb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyOXlhV2RwYm1Gc1YybGtkR2dnUFNCMGFHbHpMbTV2WkdVdWQybGtkR2c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJSFJsYzNRZ1kyaGxZMnNnWTI5dVpteHBZM1JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRU5EWDBWRVNWUlBVaUFtSmlBaFkyTXVaVzVuYVc1bExtbHpVR3hoZVdsdVp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYMU5qWlc1bExrUmxkR1ZqZEVOdmJtWnNhV04wTG1Ob1pXTnJRMjl1Wm14cFkzUmZWMmxrWjJWMEtIUm9hWE1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1cGMwRnNhV2R1Vm1WeWRHbGpZV3hEWlc1MFpYSWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXBjMU4wY21WMFkyaElaV2xuYUhRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ltVmpiMjFsSUhOMGNtVjBZMmhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYjNKcFoybHVZV3hJWldsbmFIUWdQU0IwYUdsekxtNXZaR1V1YUdWcFoyaDBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QjBaWE4wSUdOb1pXTnJJR052Ym1ac2FXTjBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaERRMTlGUkVsVVQxSWdKaVlnSVdOakxtVnVaMmx1WlM1cGMxQnNZWGxwYm1jcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOVRZMlZ1WlM1RVpYUmxZM1JEYjI1bWJHbGpkQzVqYUdWamEwTnZibVpzYVdOMFgxZHBaR2RsZENoMGFHbHpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tFTkRYMFZFU1ZSUFVpQW1KaUFoWTJNdVpXNW5hVzVsTGw5cGMxQnNZWGxwYm1jZ0ppWWdkR2hwY3k1dWIyUmxMbDl3WVhKbGJuUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCaFpHcDFjM1FnZEdobElHOW1abk5sZEhNZ2RHOGdhMlZsY0NCMGFHVWdjMmw2WlNCaGJtUWdjRzl6YVhScGIyNGdkVzVqYUdGdVoyVmtJR0ZtZEdWeUlHRnNhV2R1YldWdWRDQmphR0ZuYm1Wa1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1YybGtaMlYwVFdGdVlXZGxjaTUxY0dSaGRHVlBabVp6WlhSelZHOVRkR0Y1VUhWMEtIUm9hWE1zSUdac1lXY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHbHpTRzl5YVhwdmJuUmhiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1selUzUnlaWFJqYUZkcFpIUm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJSGRwYkd3Z1kyRnVZMlZzSUhOMGNtVjBZMmhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV1YjJSbExuZHBaSFJvSUQwZ2RHaHBjeTVmYjNKcFoybHVZV3hYYVdSMGFEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXBjMU4wY21WMFkyaElaV2xuYUhRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2QybHNiQ0JqWVc1alpXd2djM1J5WlhSamFGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtNXZaR1V1YUdWcFoyaDBJRDBnZEdocGN5NWZiM0pwWjJsdVlXeElaV2xuYUhRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWhiR2xuYmtac1lXZHpJQ1k5SUg1bWJHRm5PMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNWNiaUFnSUNBZ0tpQkpiVzFsWkdsaGRHVnNlU0J3WlhKbWIzSnRJSFJvWlNCM2FXUm5aWFFnWVd4cFoyNXRaVzUwTGlCWmIzVWdibVZsWkNCMGJ5QnRZVzUxWVd4c2VTQmpZV3hzSUhSb2FYTWdiV1YwYUc5a0lHOXViSGtnYVdaY2JpQWdJQ0FnS2lCNWIzVWdibVZsWkNCMGJ5Qm5aWFFnZEdobElHeGhkR1Z6ZENCeVpYTjFiSFJ6SUdGbWRHVnlJSFJvWlNCaGJHbG5ibTFsYm5RZ1ltVm1iM0psSUhSb1pTQmxibVFnYjJZZ1kzVnljbVZ1ZENCbWNtRnRaUzVjYmlBZ0lDQWdLaUFoSTNwb1hHNGdJQ0FnSUNvZzU2dUw1WWk3NW9tbjZLR01JSGRwWkdkbGRDRGxyN25wdlpEbWs0M2t2WnpqZ0lMb3Y1bmt1S3JtanFYbGo2UGt1SURvaUt6a3VJM3BuSURvcG9IbWlZdmx0Nlhvc0lQbmxLampnSUpjYmlBZ0lDQWdLaURsajZybW5Jbmx2WlBrdmFEcG5JRG9wb0hsbktqbHZaUGxpWTNsdUtmbnU1UG1uWi9saVkzb2pyZmx2cGNnZDJsa1oyVjBJT1d2dWVtOWtPV1FqdWVhaE9hY2dPYVdzT2U3aythZW5PYVh0dWFKamVtY2dPaW1nZWFKaStXS3FPaXdnK2VVcU9pL21lUzRxdWFXdWVhemxlT0FnbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQjFjR1JoZEdWQmJHbG5ibTFsYm5SY2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCbGVHRnRjR3hsWEc0Z0lDQWdJQ29nZDJsa1oyVjBMblJ2Y0NBOUlERXdPeUFnSUNBZ0lDQXZMeUJqYUdGdVoyVWdkRzl3SUcxaGNtZHBibHh1SUNBZ0lDQXFJR05qTG14dlp5aDNhV1JuWlhRdWJtOWtaUzU1S1RzZ0x5OGdibTkwSUhsbGRDQmphR0Z1WjJWa1hHNGdJQ0FnSUNvZ2QybGtaMlYwTG5Wd1pHRjBaVUZzYVdkdWJXVnVkQ2dwTzF4dUlDQWdJQ0FxSUdOakxteHZaeWgzYVdSblpYUXVibTlrWlM1NUtUc2dMeThnWTJoaGJtZGxaRnh1SUNBZ0lDQXFMMXh1SUNBZ0lIVndaR0YwWlVGc2FXZHViV1Z1ZERvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0JYYVdSblpYUk5ZVzVoWjJWeUxuVndaR0YwWlVGc2FXZHViV1Z1ZENoMGFHbHpMbTV2WkdVcE8xeHVJQ0FnSUgwc1hHNTlLVHRjYmx4dUx5b3FYRzRnS2lBaEkyVnVYRzRnS2lCWGFHVnVJSFIxY201bFpDQnZiaXdnYVhRZ2QybHNiQ0J2Ym14NUlHSmxJR0ZzYVdkdVpXUWdiMjVqWlNCaGRDQjBhR1VnWlc1a0lHOW1JSFJvWlNCdmJrVnVZV0pzWlNCbWNtRnRaU3hjYmlBcUlIUm9aVzRnYVcxdFpXUnBZWFJsYkhrZ1pHbHpZV0pzWlhNZ2RHaGxJR04xY25KbGJuUWdZMjl0Y0c5dVpXNTBMbHh1SUNvZ1ZHaHBjeUIzYVd4c0lHRnNiRzkzSUhSb1pTQnpZM0pwY0hRZ2IzSWdZVzVwYldGMGFXOXVJSFJ2SUdOdmJuUnBiblZsSUdOdmJuUnliMnhzYVc1bklIUm9aU0JqZFhKeVpXNTBJRzV2WkdVdVhHNGdLaUJPYjNSbE9pQkpkQ0IzYVd4c0lITjBhV3hzSUdKbElHRnNhV2R1WldRZ1lYUWdkR2hsSUdaeVlXMWxJSGRvWlc0Z2IyNUZibUZpYkdVZ2FYTWdZMkZzYkdWa0xseHVJQ29nSVNONmFGeHVJQ29nNWJ5QTVaQ3Y1WkNPNUx1RjVMeWE1WnlvSUc5dVJXNWhZbXhsSU9lYWhPVzlrK1c0cCtlN2srYWRuK2FYdHVXdnVlbTlrT1M0Z09hc29lKzhqT2VFdHVXUWp1ZXJpK1dJdStlbWdlZVVxT1c5aytXSmplZTdoT1M3dHVPQWdseHVJQ29nNkwrWjVxQzM1TDYvNUxxTzZJU2E1cHlzNW9pVzVZcW81NVM3NTd1bjU3dXQ1bzZuNVlpMjViMlQ1WW1ONklxQzU0SzU0NENDWEc0Z0tpRG1zNmptaEkvdnZKcHZia1Z1WVdKc1pTRG1sN2JtaVlEbG5Lam5tb1RwZ3FQa3VJRGx1S2ZrdTQzbmhMYmt2SnJvdjV2b29ZemxyN25wdlpEamdJSmNiaUFxSUVCd2NtOXdaWEowZVNCN1FtOXZiR1ZoYm4wZ2FYTkJiR2xuYms5dVkyVmNiaUFxSUVCa1pXWmhkV3gwSUdaaGJITmxYRzRnS2lCQVpHVndjbVZqWVhSbFpGeHVJQ292WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29WMmxrWjJWMExuQnliM1J2ZEhsd1pTd2dKMmx6UVd4cFoyNVBibU5sSnl3Z2UxeHVJQ0FnSUdkbGRDQW9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaERRMTlFUlVKVlJ5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyTXVkMkZ5YmlnbllIZHBaR2RsZEM1cGMwRnNhV2R1VDI1alpXQWdhWE1nWkdWd2NtVmpZWFJsWkN3Z2RYTmxJR0IzYVdSblpYUXVZV3hwWjI1TmIyUmxJRDA5UFNCall5NVhhV1JuWlhRdVFXeHBaMjVOYjJSbExrOU9RMFZnSUdsdWMzUmxZV1FnY0d4bFlYTmxMaWNwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbUZzYVdkdVRXOWtaU0E5UFQwZ1FXeHBaMjVOYjJSbExrOU9RMFU3WEc0Z0lDQWdmU3hjYmlBZ0lDQnpaWFFnS0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaERRMTlFUlVKVlJ5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyTXVkMkZ5YmlnbllIZHBaR2RsZEM1cGMwRnNhV2R1VDI1alpXQWdhWE1nWkdWd2NtVmpZWFJsWkN3Z2RYTmxJR0IzYVdSblpYUXVZV3hwWjI1TmIyUmxJRDBnWTJNdVYybGtaMlYwTGtGc2FXZHVUVzlrWlM0cVlDQnBibk4wWldGa0lIQnNaV0Z6WlM0bktUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYUdsekxtRnNhV2R1VFc5a1pTQTlJSFpoYkhWbElEOGdRV3hwWjI1TmIyUmxMazlPUTBVZ09pQkJiR2xuYmsxdlpHVXVRVXhYUVZsVE8xeHVJQ0FnSUgxY2JuMHBPMXh1WEc1Y2JtTmpMbGRwWkdkbGRDQTlJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdWMmxrWjJWME8xeHVJbDE5Il19