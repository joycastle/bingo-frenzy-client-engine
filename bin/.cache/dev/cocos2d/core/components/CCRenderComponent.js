(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCRenderComponent.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _assembler = require('../renderer/assembler');
        var _assembler2 = _interopRequireDefault(_assembler);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var Component = require('./CCComponent');
        var RenderFlow = require('../renderer/render-flow');
        var Material = require('../assets/material/CCMaterial');
        var RenderComponent = cc.Class({
            name: 'RenderComponent',
            extends: Component,
            editor: CC_EDITOR && {
                executeInEditMode: true,
                disallowMultiple: true
            },
            properties: {
                _materials: {
                    default: [],
                    type: Material
                },
                sharedMaterials: {
                    get: function get() {
                        return this._materials;
                    },
                    set: function set(val) {
                        this._materials = val;
                        this._activateMaterial(true);
                    },
                    type: [Material],
                    displayName: 'Materials',
                    animatable: false
                }
            },
            ctor: function ctor() {
                this._vertsDirty = true;
                this._material = null;
                this._assembler = null;
            },
            _resetAssembler: function _resetAssembler() {
                this.setVertsDirty(true);
                _assembler2.default.init(this);
                this._updateColor();
            },
            __preload: function __preload() {
                this._resetAssembler();
            },
            onEnable: function onEnable() {
                if (this.node._renderComponent) {
                    this.node._renderComponent.enabled = false;
                }
                this.node._renderComponent = this;
                this.node.on(cc.Node.EventType.SIZE_CHANGED, this._onNodeSizeDirty, this);
                this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this._onNodeSizeDirty, this);
                this.node._renderFlag |= RenderFlow.FLAG_RENDER | RenderFlow.FLAG_UPDATE_RENDER_DATA | RenderFlow.FLAG_OPACITY_COLOR;
            },
            onDisable: function onDisable() {
                this.node._renderComponent = null;
                this.node.off(cc.Node.EventType.SIZE_CHANGED, this._onNodeSizeDirty, this);
                this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this._onNodeSizeDirty, this);
                this.disableRender();
            },
            onDestroy: function onDestroy() {
                var materials = this._materials;
                for (var i = 0; i < materials.length; i++) {
                    cc.pool.material.put(materials[i]);
                }
                materials.length = 0;
                cc.pool.assembler.put(this._assembler);
            },
            setVertsDirty: function setVertsDirty() {
                this._vertsDirty = true;
                this.markForUpdateRenderData(true);
            },
            _onNodeSizeDirty: function _onNodeSizeDirty() {
                this.setVertsDirty();
            },
            _on3DNodeChanged: function _on3DNodeChanged() {
                this.setVertsDirty();
            },
            _canRender: function _canRender() {
                return this._enabled && this.node._activeInHierarchy;
            },
            markForUpdateRenderData: function markForUpdateRenderData(enable) {
                if (enable && this._canRender()) {
                    this.node._renderFlag |= RenderFlow.FLAG_UPDATE_RENDER_DATA;
                } else if (!enable) {
                    this.node._renderFlag &= ~RenderFlow.FLAG_UPDATE_RENDER_DATA;
                }
            },
            markForRender: function markForRender(enable) {
                if (enable && this._canRender()) {
                    this.node._renderFlag |= RenderFlow.FLAG_RENDER;
                } else if (!enable) {
                    this.node._renderFlag &= ~RenderFlow.FLAG_RENDER;
                }
            },
            disableRender: function disableRender() {
                this.node._renderFlag &= ~(RenderFlow.FLAG_RENDER | RenderFlow.FLAG_UPDATE_RENDER_DATA);
            },
            getMaterial: function getMaterial(index) {
                if (index < 0 || index >= this._materials.length) {
                    return null;
                }
                var material = this._materials[index];
                if (!material)
                    return null;
                var instantiated = Material.getInstantiatedMaterial(material, this);
                if (instantiated !== material) {
                    this.setMaterial(index, instantiated);
                }
                return this._materials[index];
            },
            setMaterial: function setMaterial(index, material) {
                this._materials[index] = material;
                if (material) {
                    this.markForUpdateRenderData(true);
                }
            },
            _activateMaterial: function _activateMaterial(force) {
            },
            _updateColor: function _updateColor() {
                if (this._assembler.updateColor) {
                    this._assembler.updateColor(this);
                }
            },
            _checkBacth: function _checkBacth(renderer, cullingMask) {
                var material = this.sharedMaterials[0];
                if (material && material.getHash() !== renderer.material.getHash() || renderer.cullingMask !== cullingMask) {
                    renderer._flush();
                    renderer.node = material.getDefine('CC_USE_MODEL') ? this.node : renderer._dummyNode;
                    renderer.material = material;
                    renderer.cullingMask = cullingMask;
                }
            }
        });
        cc.RenderComponent = module.exports = RenderComponent;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDUmVuZGVyQ29tcG9uZW50LmpzIiwiL1VzZXJzL1NoYXJlZC9iaW5nb19mcmVuenkvZW5naW5lL2NvY29zMmQvY29yZS9jb21wb25lbnRzL0NDUmVuZGVyQ29tcG9uZW50LmpzIl0sIm5hbWVzIjpbIkNvbXBvbmVudCIsInJlcXVpcmUiLCJSZW5kZXJGbG93IiwiTWF0ZXJpYWwiLCJSZW5kZXJDb21wb25lbnQiLCJjYyIsIkNsYXNzIiwibmFtZSIsImV4dGVuZHMiLCJlZGl0b3IiLCJDQ19FRElUT1IiLCJleGVjdXRlSW5FZGl0TW9kZSIsImRpc2FsbG93TXVsdGlwbGUiLCJwcm9wZXJ0aWVzIiwiX21hdGVyaWFscyIsImRlZmF1bHQiLCJ0eXBlIiwic2hhcmVkTWF0ZXJpYWxzIiwiZ2V0Iiwic2V0IiwidmFsIiwiX2FjdGl2YXRlTWF0ZXJpYWwiLCJkaXNwbGF5TmFtZSIsImFuaW1hdGFibGUiLCJjdG9yIiwiX3ZlcnRzRGlydHkiLCJfbWF0ZXJpYWwiLCJfYXNzZW1ibGVyIiwiX3Jlc2V0QXNzZW1ibGVyIiwic2V0VmVydHNEaXJ0eSIsIkFzc2VtYmxlciIsImluaXQiLCJfdXBkYXRlQ29sb3IiLCJfX3ByZWxvYWQiLCJvbkVuYWJsZSIsIm5vZGUiLCJfcmVuZGVyQ29tcG9uZW50IiwiZW5hYmxlZCIsIm9uIiwiTm9kZSIsIkV2ZW50VHlwZSIsIlNJWkVfQ0hBTkdFRCIsIl9vbk5vZGVTaXplRGlydHkiLCJBTkNIT1JfQ0hBTkdFRCIsIl9yZW5kZXJGbGFnIiwiRkxBR19SRU5ERVIiLCJGTEFHX1VQREFURV9SRU5ERVJfREFUQSIsIkZMQUdfT1BBQ0lUWV9DT0xPUiIsIm9uRGlzYWJsZSIsIm9mZiIsImRpc2FibGVSZW5kZXIiLCJvbkRlc3Ryb3kiLCJtYXRlcmlhbHMiLCJpIiwibGVuZ3RoIiwicG9vbCIsIm1hdGVyaWFsIiwicHV0IiwiYXNzZW1ibGVyIiwibWFya0ZvclVwZGF0ZVJlbmRlckRhdGEiLCJfb24zRE5vZGVDaGFuZ2VkIiwiX2NhblJlbmRlciIsIl9lbmFibGVkIiwiX2FjdGl2ZUluSGllcmFyY2h5IiwiZW5hYmxlIiwibWFya0ZvclJlbmRlciIsImdldE1hdGVyaWFsIiwiaW5kZXgiLCJpbnN0YW50aWF0ZWQiLCJnZXRJbnN0YW50aWF0ZWRNYXRlcmlhbCIsInNldE1hdGVyaWFsIiwiZm9yY2UiLCJ1cGRhdGVDb2xvciIsIl9jaGVja0JhY3RoIiwicmVuZGVyZXIiLCJjdWxsaW5nTWFzayIsImdldEhhc2giLCJfZmx1c2giLCJnZXREZWZpbmUiLCJfZHVtbXlOb2RlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjtJQXlCQSxJQUFBLE9BQUEsR0FBQSxPQUFBLE9BQUEsS0FBQSxXQUFBLElBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQTs7Ozs7O1FBRTBCLE9BQUEsaUJBQUEsQ0EzQjFCLE9BMkIwQixDQTNCMUIsT0EyQjBCLEVBM0IxQixVQTJCMEIsQ0FBQTs7Ozs7OztRQUYxQixJQUFBLFVBQUEsR0FBQSxPQUFBLENBQUEsdUJBQUEsQ0FBQTs7Ozs7UUFFQSxJQUFNQSxTQUFBQSxHQUFZQyxPQUFBQSxDQUFRLGVBQVJBLENBQWxCO1FBQ0EsSUFBTUMsVUFBQUEsR0FBYUQsT0FBQUEsQ0FBUSx5QkFBUkEsQ0FBbkI7UUFDQSxJQUFNRSxRQUFBQSxHQUFXRixPQUFBQSxDQUFRLCtCQUFSQSxDQUFqQjtRQVdBLElBQUlHLGVBQUFBLEdBQWtCQyxFQUFBQSxDQUFHQyxLQUFIRCxDQUFTO0FBQUEsWUFDM0JFLElBQUFBLEVBQU0saUJBRHFCO0FBQUEsWUFFM0JDLE9BQUFBLEVBQVNSLFNBRmtCO0FBQUEsWUFJM0JTLE1BQUFBLEVBQVFDLFNBQUFBLElBQWE7QUFBQSxnQkFDakJDLGlCQUFBQSxFQUFtQixJQURGO0FBQUEsZ0JBRWpCQyxnQkFBQUEsRUFBa0IsSUFGRDtBQUFBLGFBSk07QUFBQSxZQVMzQkMsVUFBQUEsRUFBWTtBQUFBLGdCQUNSQyxVQUFBQSxFQUFZO0FBQUEsb0JBQ1JDLE9BQUFBLEVBQVMsRUFERDtBQUFBLG9C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QUFBQSxFQXRLMkIsU0FBQSxXQUFBLENBc0tkQyxRQXRLYyxFQXNLSkMsV0F0S0ksRUFzS1M7QUFBQSxnQkFDaEMsSUFBSW5CLFFBQUFBLEdBQVcsS0FBS3ZDLGVBQUwsQ0FBcUIsQ0FBckIsQ0FBZixDQURnQztBQUFBLGdCQUVoQyxJQUFLdUMsUUFBQUEsSUFBWUEsUUFBQUEsQ0FBU29CLE9BQVRwQixPQUF1QmtCLFFBQUFBLENBQVNsQixRQUFUa0IsQ0FBa0JFLE9BQWxCRixFQUFuQ2xCLElBQ0RrQixRQUFBQSxDQUFTQyxXQUFURCxLQUF5QkMsV0FEN0IsRUFDMEM7QUFBQSxvQkFDdENELFFBQUFBLENBQVNHLE1BQVRILEdBRHNDO0FBQUEsb0JBR3RDQSxRQUFBQSxDQUFTdkMsSUFBVHVDLEdBQWdCbEIsUUFBQUEsQ0FBU3NCLFNBQVR0QixDQUFtQixjQUFuQkEsSUFBcUMsS0FBS3JCLElBQTFDcUIsR0FBaURrQixRQUFBQSxDQUFTSyxVQUExRUwsQ0FIc0M7QUFBQSxvQkFJdENBLFFBQUFBLENBQVNsQixRQUFUa0IsR0FBb0JsQixRQUFwQmtCLENBSnNDO0FBQUEsb0JBS3RDQSxRQUFBQSxDQUFTQyxXQUFURCxHQUF1QkMsV0FBdkJELENBTHNDO0FBQUEsaUJBSFY7QUFBQSxhQXRLVDtBQUFBLFNBQVRyRSxDQUF0QjtRQW1MQUEsRUFBQUEsQ0FBR0QsZUFBSEMsR0FBcUIyRSxNQUFBQSxDQUFPQyxPQUFQRCxHQUFpQjVFLGVBQXRDQyIsImZpbGUiOiJDQ1JlbmRlckNvbXBvbmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXG4gd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xuIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcbiBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCBBc3NlbWJsZXIgZnJvbSAnLi4vcmVuZGVyZXIvYXNzZW1ibGVyJztcblxuY29uc3QgQ29tcG9uZW50ID0gcmVxdWlyZSgnLi9DQ0NvbXBvbmVudCcpO1xuY29uc3QgUmVuZGVyRmxvdyA9IHJlcXVpcmUoJy4uL3JlbmRlcmVyL3JlbmRlci1mbG93Jyk7XG5jb25zdCBNYXRlcmlhbCA9IHJlcXVpcmUoJy4uL2Fzc2V0cy9tYXRlcmlhbC9DQ01hdGVyaWFsJyk7XG5cbi8qKlxuICogISNlblxuICogQmFzZSBjbGFzcyBmb3IgY29tcG9uZW50cyB3aGljaCBzdXBwb3J0cyByZW5kZXJpbmcgZmVhdHVyZXMuXG4gKiAhI3poXG4gKiDmiYDmnInmlK/mjIHmuLLmn5PnmoTnu4Tku7bnmoTln7rnsbtcbiAqXG4gKiBAY2xhc3MgUmVuZGVyQ29tcG9uZW50XG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcbiAqL1xubGV0IFJlbmRlckNvbXBvbmVudCA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnUmVuZGVyQ29tcG9uZW50JyxcbiAgICBleHRlbmRzOiBDb21wb25lbnQsXG5cbiAgICBlZGl0b3I6IENDX0VESVRPUiAmJiB7XG4gICAgICAgIGV4ZWN1dGVJbkVkaXRNb2RlOiB0cnVlLFxuICAgICAgICBkaXNhbGxvd011bHRpcGxlOiB0cnVlXG4gICAgfSxcblxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgX21hdGVyaWFsczoge1xuICAgICAgICAgICAgZGVmYXVsdDogW10sXG4gICAgICAgICAgICB0eXBlOiBNYXRlcmlhbCxcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBUaGUgbWF0ZXJpYWxzIHVzZWQgYnkgdGhpcyByZW5kZXIgY29tcG9uZW50LlxuICAgICAgICAgKiAhI3poIOa4suafk+e7hOS7tuS9v+eUqOeahOadkOi0qOOAglxuICAgICAgICAgKiBAcHJvcGVydHkge1tNYXRlcmlhbF19IHNoYXJlZE1hdGVyaWFsc1xuICAgICAgICAgKi9cbiAgICAgICAgc2hhcmVkTWF0ZXJpYWxzOiB7XG4gICAgICAgICAgICBnZXQgKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYXRlcmlhbHM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0ICh2YWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXRlcmlhbHMgPSB2YWw7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWN0aXZhdGVNYXRlcmlhbCh0cnVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0eXBlOiBbTWF0ZXJpYWxdLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdNYXRlcmlhbHMnLFxuICAgICAgICAgICAgYW5pbWF0YWJsZTogZmFsc2VcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXG4gICAgY3RvciAoKSB7XG4gICAgICAgIHRoaXMuX3ZlcnRzRGlydHkgPSB0cnVlO1xuICAgICAgICB0aGlzLl9tYXRlcmlhbCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2Fzc2VtYmxlciA9IG51bGw7XG4gICAgfSxcblxuICAgIF9yZXNldEFzc2VtYmxlciAoKSB7XG4gICAgICAgIHRoaXMuc2V0VmVydHNEaXJ0eSh0cnVlKTtcbiAgICAgICAgQXNzZW1ibGVyLmluaXQodGhpcyk7XG5cbiAgICAgICAgdGhpcy5fdXBkYXRlQ29sb3IoKTtcbiAgICB9LFxuXG4gICAgX19wcmVsb2FkICgpIHtcbiAgICAgICAgdGhpcy5fcmVzZXRBc3NlbWJsZXIoKTtcbiAgICB9LFxuXG4gICAgb25FbmFibGUgKCkge1xuICAgICAgICBpZiAodGhpcy5ub2RlLl9yZW5kZXJDb21wb25lbnQpIHtcbiAgICAgICAgICAgIHRoaXMubm9kZS5fcmVuZGVyQ29tcG9uZW50LmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5vZGUuX3JlbmRlckNvbXBvbmVudCA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5ub2RlLm9uKGNjLk5vZGUuRXZlbnRUeXBlLlNJWkVfQ0hBTkdFRCwgdGhpcy5fb25Ob2RlU2l6ZURpcnR5LCB0aGlzKTtcbiAgICAgICAgdGhpcy5ub2RlLm9uKGNjLk5vZGUuRXZlbnRUeXBlLkFOQ0hPUl9DSEFOR0VELCB0aGlzLl9vbk5vZGVTaXplRGlydHksIHRoaXMpO1xuXG4gICAgICAgIHRoaXMubm9kZS5fcmVuZGVyRmxhZyB8PSBSZW5kZXJGbG93LkZMQUdfUkVOREVSIHwgUmVuZGVyRmxvdy5GTEFHX1VQREFURV9SRU5ERVJfREFUQSB8IFJlbmRlckZsb3cuRkxBR19PUEFDSVRZX0NPTE9SO1xuICAgIH0sXG5cbiAgICBvbkRpc2FibGUgKCkge1xuICAgICAgICB0aGlzLm5vZGUuX3JlbmRlckNvbXBvbmVudCA9IG51bGw7XG4gICAgICAgIHRoaXMubm9kZS5vZmYoY2MuTm9kZS5FdmVudFR5cGUuU0laRV9DSEFOR0VELCB0aGlzLl9vbk5vZGVTaXplRGlydHksIHRoaXMpO1xuICAgICAgICB0aGlzLm5vZGUub2ZmKGNjLk5vZGUuRXZlbnRUeXBlLkFOQ0hPUl9DSEFOR0VELCB0aGlzLl9vbk5vZGVTaXplRGlydHksIHRoaXMpO1xuICAgICAgICB0aGlzLmRpc2FibGVSZW5kZXIoKTtcbiAgICB9LFxuXG4gICAgb25EZXN0cm95ICgpIHtcbiAgICAgICAgbGV0IG1hdGVyaWFscyA9IHRoaXMuX21hdGVyaWFscztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXRlcmlhbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNjLnBvb2wubWF0ZXJpYWwucHV0KG1hdGVyaWFsc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgbWF0ZXJpYWxzLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgY2MucG9vbC5hc3NlbWJsZXIucHV0KHRoaXMuX2Fzc2VtYmxlcik7XG4gICAgfSxcblxuICAgIHNldFZlcnRzRGlydHkgKCkge1xuICAgICAgICB0aGlzLl92ZXJ0c0RpcnR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5tYXJrRm9yVXBkYXRlUmVuZGVyRGF0YSh0cnVlKTtcbiAgICB9LFxuXG4gICAgX29uTm9kZVNpemVEaXJ0eSAoKSB7XG4gICAgICAgIHRoaXMuc2V0VmVydHNEaXJ0eSgpO1xuICAgIH0sXG5cbiAgICBfb24zRE5vZGVDaGFuZ2VkICgpIHtcbiAgICAgICAgdGhpcy5zZXRWZXJ0c0RpcnR5KCk7XG4gICAgfSxcbiAgICBcbiAgICBfY2FuUmVuZGVyICgpIHtcbiAgICAgICAgLy8gV2hlbiB0aGUgbm9kZSBpcyBhY3RpdmF0ZWQsIGl0IHdpbGwgZXhlY3V0ZSBvbkVuYWJsZSBhbmQgdGhlIHJlbmRlcmZsYWcgd2lsbCBhbHNvIGJlIHJlc2V0LlxuICAgICAgICByZXR1cm4gdGhpcy5fZW5hYmxlZCAmJiB0aGlzLm5vZGUuX2FjdGl2ZUluSGllcmFyY2h5O1xuICAgIH0sXG5cbiAgICBtYXJrRm9yVXBkYXRlUmVuZGVyRGF0YSAoZW5hYmxlKSB7XG4gICAgICAgIGlmIChlbmFibGUgJiYgdGhpcy5fY2FuUmVuZGVyKCkpIHtcbiAgICAgICAgICAgIHRoaXMubm9kZS5fcmVuZGVyRmxhZyB8PSBSZW5kZXJGbG93LkZMQUdfVVBEQVRFX1JFTkRFUl9EQVRBO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFlbmFibGUpIHtcbiAgICAgICAgICAgIHRoaXMubm9kZS5fcmVuZGVyRmxhZyAmPSB+UmVuZGVyRmxvdy5GTEFHX1VQREFURV9SRU5ERVJfREFUQTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtYXJrRm9yUmVuZGVyIChlbmFibGUpIHtcbiAgICAgICAgaWYgKGVuYWJsZSAmJiB0aGlzLl9jYW5SZW5kZXIoKSkge1xuICAgICAgICAgICAgdGhpcy5ub2RlLl9yZW5kZXJGbGFnIHw9IFJlbmRlckZsb3cuRkxBR19SRU5ERVI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWVuYWJsZSkge1xuICAgICAgICAgICAgdGhpcy5ub2RlLl9yZW5kZXJGbGFnICY9IH5SZW5kZXJGbG93LkZMQUdfUkVOREVSO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGRpc2FibGVSZW5kZXIgKCkge1xuICAgICAgICB0aGlzLm5vZGUuX3JlbmRlckZsYWcgJj0gfihSZW5kZXJGbG93LkZMQUdfUkVOREVSIHwgUmVuZGVyRmxvdy5GTEFHX1VQREFURV9SRU5ERVJfREFUQSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gR2V0IHRoZSBtYXRlcmlhbCBieSBpbmRleC5cbiAgICAgKiAhI3poIOagueaNruaMh+Wumue0ouW8leiOt+WPluadkOi0qFxuICAgICAqIEBtZXRob2QgZ2V0TWF0ZXJpYWxcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXggXG4gICAgICogQHJldHVybiB7TWF0ZXJpYWx9XG4gICAgICovXG4gICAgZ2V0TWF0ZXJpYWwgKGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5fbWF0ZXJpYWxzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbWF0ZXJpYWwgPSB0aGlzLl9tYXRlcmlhbHNbaW5kZXhdO1xuICAgICAgICBpZiAoIW1hdGVyaWFsKSByZXR1cm4gbnVsbDtcbiAgICAgICAgXG4gICAgICAgIGxldCBpbnN0YW50aWF0ZWQgPSBNYXRlcmlhbC5nZXRJbnN0YW50aWF0ZWRNYXRlcmlhbChtYXRlcmlhbCwgdGhpcyk7XG4gICAgICAgIGlmIChpbnN0YW50aWF0ZWQgIT09IG1hdGVyaWFsKSB7XG4gICAgICAgICAgICB0aGlzLnNldE1hdGVyaWFsKGluZGV4LCBpbnN0YW50aWF0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX21hdGVyaWFsc1tpbmRleF07XG4gICAgfSxcbiAgICBcbiAgICAvKipcbiAgICAgKiAhI2VuIFNldCB0aGUgbWF0ZXJpYWwgYnkgaW5kZXguXG4gICAgICogISN6aCDmoLnmja7mjIflrprntKLlvJXorr7nva7mnZDotKhcbiAgICAgKiBAbWV0aG9kIHNldE1hdGVyaWFsXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4IFxuICAgICAqIEBwYXJhbSB7TWF0ZXJpYWx9IG1hdGVyaWFsIFxuICAgICAqL1xuICAgIHNldE1hdGVyaWFsIChpbmRleCwgbWF0ZXJpYWwpIHtcbiAgICAgICAgdGhpcy5fbWF0ZXJpYWxzW2luZGV4XSA9IG1hdGVyaWFsO1xuICAgICAgICBpZiAobWF0ZXJpYWwpIHtcbiAgICAgICAgICAgIHRoaXMubWFya0ZvclVwZGF0ZVJlbmRlckRhdGEodHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX2FjdGl2YXRlTWF0ZXJpYWwgKGZvcmNlKSB7XG4gICAgfSxcblxuICAgIF91cGRhdGVDb2xvciAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9hc3NlbWJsZXIudXBkYXRlQ29sb3IpIHtcbiAgICAgICAgICAgIHRoaXMuX2Fzc2VtYmxlci51cGRhdGVDb2xvcih0aGlzKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfY2hlY2tCYWN0aCAocmVuZGVyZXIsIGN1bGxpbmdNYXNrKSB7XG4gICAgICAgIGxldCBtYXRlcmlhbCA9IHRoaXMuc2hhcmVkTWF0ZXJpYWxzWzBdO1xuICAgICAgICBpZiAoKG1hdGVyaWFsICYmIG1hdGVyaWFsLmdldEhhc2goKSAhPT0gcmVuZGVyZXIubWF0ZXJpYWwuZ2V0SGFzaCgpKSB8fCBcbiAgICAgICAgICAgIHJlbmRlcmVyLmN1bGxpbmdNYXNrICE9PSBjdWxsaW5nTWFzaykge1xuICAgICAgICAgICAgcmVuZGVyZXIuX2ZsdXNoKCk7XG4gICAgXG4gICAgICAgICAgICByZW5kZXJlci5ub2RlID0gbWF0ZXJpYWwuZ2V0RGVmaW5lKCdDQ19VU0VfTU9ERUwnKSA/IHRoaXMubm9kZSA6IHJlbmRlcmVyLl9kdW1teU5vZGU7XG4gICAgICAgICAgICByZW5kZXJlci5tYXRlcmlhbCA9IG1hdGVyaWFsO1xuICAgICAgICAgICAgcmVuZGVyZXIuY3VsbGluZ01hc2sgPSBjdWxsaW5nTWFzaztcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG5jYy5SZW5kZXJDb21wb25lbnQgPSBtb2R1bGUuZXhwb3J0cyA9IFJlbmRlckNvbXBvbmVudDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9hc3NlbWJsZXIgPSByZXF1aXJlKCcuLi9yZW5kZXJlci9hc3NlbWJsZXInKTtcblxudmFyIF9hc3NlbWJsZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXNzZW1ibGVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIENvbXBvbmVudCA9IHJlcXVpcmUoJy4vQ0NDb21wb25lbnQnKTsgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUSEUgU09GVFdBUkUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxudmFyIFJlbmRlckZsb3cgPSByZXF1aXJlKCcuLi9yZW5kZXJlci9yZW5kZXItZmxvdycpO1xudmFyIE1hdGVyaWFsID0gcmVxdWlyZSgnLi4vYXNzZXRzL21hdGVyaWFsL0NDTWF0ZXJpYWwnKTtcblxuLyoqXG4gKiAhI2VuXG4gKiBCYXNlIGNsYXNzIGZvciBjb21wb25lbnRzIHdoaWNoIHN1cHBvcnRzIHJlbmRlcmluZyBmZWF0dXJlcy5cbiAqICEjemhcbiAqIOaJgOacieaUr+aMgea4suafk+eahOe7hOS7tueahOWfuuexu1xuICpcbiAqIEBjbGFzcyBSZW5kZXJDb21wb25lbnRcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG52YXIgUmVuZGVyQ29tcG9uZW50ID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdSZW5kZXJDb21wb25lbnQnLFxuICAgIGV4dGVuZHM6IENvbXBvbmVudCxcblxuICAgIGVkaXRvcjogQ0NfRURJVE9SICYmIHtcbiAgICAgICAgZXhlY3V0ZUluRWRpdE1vZGU6IHRydWUsXG4gICAgICAgIGRpc2FsbG93TXVsdGlwbGU6IHRydWVcbiAgICB9LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICBfbWF0ZXJpYWxzOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBbXSxcbiAgICAgICAgICAgIHR5cGU6IE1hdGVyaWFsXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gVGhlIG1hdGVyaWFscyB1c2VkIGJ5IHRoaXMgcmVuZGVyIGNvbXBvbmVudC5cbiAgICAgICAgICogISN6aCDmuLLmn5Pnu4Tku7bkvb/nlKjnmoTmnZDotKjjgIJcbiAgICAgICAgICogQHByb3BlcnR5IHtbTWF0ZXJpYWxdfSBzaGFyZWRNYXRlcmlhbHNcbiAgICAgICAgICovXG4gICAgICAgIHNoYXJlZE1hdGVyaWFsczoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21hdGVyaWFscztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXRlcmlhbHMgPSB2YWw7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWN0aXZhdGVNYXRlcmlhbCh0cnVlKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHR5cGU6IFtNYXRlcmlhbF0sXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogJ01hdGVyaWFscycsXG4gICAgICAgICAgICBhbmltYXRhYmxlOiBmYWxzZVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGN0b3I6IGZ1bmN0aW9uIGN0b3IoKSB7XG4gICAgICAgIHRoaXMuX3ZlcnRzRGlydHkgPSB0cnVlO1xuICAgICAgICB0aGlzLl9tYXRlcmlhbCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2Fzc2VtYmxlciA9IG51bGw7XG4gICAgfSxcbiAgICBfcmVzZXRBc3NlbWJsZXI6IGZ1bmN0aW9uIF9yZXNldEFzc2VtYmxlcigpIHtcbiAgICAgICAgdGhpcy5zZXRWZXJ0c0RpcnR5KHRydWUpO1xuICAgICAgICBfYXNzZW1ibGVyMi5kZWZhdWx0LmluaXQodGhpcyk7XG5cbiAgICAgICAgdGhpcy5fdXBkYXRlQ29sb3IoKTtcbiAgICB9LFxuICAgIF9fcHJlbG9hZDogZnVuY3Rpb24gX19wcmVsb2FkKCkge1xuICAgICAgICB0aGlzLl9yZXNldEFzc2VtYmxlcigpO1xuICAgIH0sXG4gICAgb25FbmFibGU6IGZ1bmN0aW9uIG9uRW5hYmxlKCkge1xuICAgICAgICBpZiAodGhpcy5ub2RlLl9yZW5kZXJDb21wb25lbnQpIHtcbiAgICAgICAgICAgIHRoaXMubm9kZS5fcmVuZGVyQ29tcG9uZW50LmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5vZGUuX3JlbmRlckNvbXBvbmVudCA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5ub2RlLm9uKGNjLk5vZGUuRXZlbnRUeXBlLlNJWkVfQ0hBTkdFRCwgdGhpcy5fb25Ob2RlU2l6ZURpcnR5LCB0aGlzKTtcbiAgICAgICAgdGhpcy5ub2RlLm9uKGNjLk5vZGUuRXZlbnRUeXBlLkFOQ0hPUl9DSEFOR0VELCB0aGlzLl9vbk5vZGVTaXplRGlydHksIHRoaXMpO1xuXG4gICAgICAgIHRoaXMubm9kZS5fcmVuZGVyRmxhZyB8PSBSZW5kZXJGbG93LkZMQUdfUkVOREVSIHwgUmVuZGVyRmxvdy5GTEFHX1VQREFURV9SRU5ERVJfREFUQSB8IFJlbmRlckZsb3cuRkxBR19PUEFDSVRZX0NPTE9SO1xuICAgIH0sXG4gICAgb25EaXNhYmxlOiBmdW5jdGlvbiBvbkRpc2FibGUoKSB7XG4gICAgICAgIHRoaXMubm9kZS5fcmVuZGVyQ29tcG9uZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5ub2RlLm9mZihjYy5Ob2RlLkV2ZW50VHlwZS5TSVpFX0NIQU5HRUQsIHRoaXMuX29uTm9kZVNpemVEaXJ0eSwgdGhpcyk7XG4gICAgICAgIHRoaXMubm9kZS5vZmYoY2MuTm9kZS5FdmVudFR5cGUuQU5DSE9SX0NIQU5HRUQsIHRoaXMuX29uTm9kZVNpemVEaXJ0eSwgdGhpcyk7XG4gICAgICAgIHRoaXMuZGlzYWJsZVJlbmRlcigpO1xuICAgIH0sXG4gICAgb25EZXN0cm95OiBmdW5jdGlvbiBvbkRlc3Ryb3koKSB7XG4gICAgICAgIHZhciBtYXRlcmlhbHMgPSB0aGlzLl9tYXRlcmlhbHM7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF0ZXJpYWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjYy5wb29sLm1hdGVyaWFsLnB1dChtYXRlcmlhbHNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIG1hdGVyaWFscy5sZW5ndGggPSAwO1xuXG4gICAgICAgIGNjLnBvb2wuYXNzZW1ibGVyLnB1dCh0aGlzLl9hc3NlbWJsZXIpO1xuICAgIH0sXG4gICAgc2V0VmVydHNEaXJ0eTogZnVuY3Rpb24gc2V0VmVydHNEaXJ0eSgpIHtcbiAgICAgICAgdGhpcy5fdmVydHNEaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMubWFya0ZvclVwZGF0ZVJlbmRlckRhdGEodHJ1ZSk7XG4gICAgfSxcbiAgICBfb25Ob2RlU2l6ZURpcnR5OiBmdW5jdGlvbiBfb25Ob2RlU2l6ZURpcnR5KCkge1xuICAgICAgICB0aGlzLnNldFZlcnRzRGlydHkoKTtcbiAgICB9LFxuICAgIF9vbjNETm9kZUNoYW5nZWQ6IGZ1bmN0aW9uIF9vbjNETm9kZUNoYW5nZWQoKSB7XG4gICAgICAgIHRoaXMuc2V0VmVydHNEaXJ0eSgpO1xuICAgIH0sXG4gICAgX2NhblJlbmRlcjogZnVuY3Rpb24gX2NhblJlbmRlcigpIHtcbiAgICAgICAgLy8gV2hlbiB0aGUgbm9kZSBpcyBhY3RpdmF0ZWQsIGl0IHdpbGwgZXhlY3V0ZSBvbkVuYWJsZSBhbmQgdGhlIHJlbmRlcmZsYWcgd2lsbCBhbHNvIGJlIHJlc2V0LlxuICAgICAgICByZXR1cm4gdGhpcy5fZW5hYmxlZCAmJiB0aGlzLm5vZGUuX2FjdGl2ZUluSGllcmFyY2h5O1xuICAgIH0sXG4gICAgbWFya0ZvclVwZGF0ZVJlbmRlckRhdGE6IGZ1bmN0aW9uIG1hcmtGb3JVcGRhdGVSZW5kZXJEYXRhKGVuYWJsZSkge1xuICAgICAgICBpZiAoZW5hYmxlICYmIHRoaXMuX2NhblJlbmRlcigpKSB7XG4gICAgICAgICAgICB0aGlzLm5vZGUuX3JlbmRlckZsYWcgfD0gUmVuZGVyRmxvdy5GTEFHX1VQREFURV9SRU5ERVJfREFUQTtcbiAgICAgICAgfSBlbHNlIGlmICghZW5hYmxlKSB7XG4gICAgICAgICAgICB0aGlzLm5vZGUuX3JlbmRlckZsYWcgJj0gflJlbmRlckZsb3cuRkxBR19VUERBVEVfUkVOREVSX0RBVEE7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1hcmtGb3JSZW5kZXI6IGZ1bmN0aW9uIG1hcmtGb3JSZW5kZXIoZW5hYmxlKSB7XG4gICAgICAgIGlmIChlbmFibGUgJiYgdGhpcy5fY2FuUmVuZGVyKCkpIHtcbiAgICAgICAgICAgIHRoaXMubm9kZS5fcmVuZGVyRmxhZyB8PSBSZW5kZXJGbG93LkZMQUdfUkVOREVSO1xuICAgICAgICB9IGVsc2UgaWYgKCFlbmFibGUpIHtcbiAgICAgICAgICAgIHRoaXMubm9kZS5fcmVuZGVyRmxhZyAmPSB+UmVuZGVyRmxvdy5GTEFHX1JFTkRFUjtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZGlzYWJsZVJlbmRlcjogZnVuY3Rpb24gZGlzYWJsZVJlbmRlcigpIHtcbiAgICAgICAgdGhpcy5ub2RlLl9yZW5kZXJGbGFnICY9IH4oUmVuZGVyRmxvdy5GTEFHX1JFTkRFUiB8IFJlbmRlckZsb3cuRkxBR19VUERBVEVfUkVOREVSX0RBVEEpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqICEjZW4gR2V0IHRoZSBtYXRlcmlhbCBieSBpbmRleC5cbiAgICAgKiAhI3poIOagueaNruaMh+Wumue0ouW8leiOt+WPluadkOi0qFxuICAgICAqIEBtZXRob2QgZ2V0TWF0ZXJpYWxcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXggXG4gICAgICogQHJldHVybiB7TWF0ZXJpYWx9XG4gICAgICovXG4gICAgZ2V0TWF0ZXJpYWw6IGZ1bmN0aW9uIGdldE1hdGVyaWFsKGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5fbWF0ZXJpYWxzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWF0ZXJpYWwgPSB0aGlzLl9tYXRlcmlhbHNbaW5kZXhdO1xuICAgICAgICBpZiAoIW1hdGVyaWFsKSByZXR1cm4gbnVsbDtcblxuICAgICAgICB2YXIgaW5zdGFudGlhdGVkID0gTWF0ZXJpYWwuZ2V0SW5zdGFudGlhdGVkTWF0ZXJpYWwobWF0ZXJpYWwsIHRoaXMpO1xuICAgICAgICBpZiAoaW5zdGFudGlhdGVkICE9PSBtYXRlcmlhbCkge1xuICAgICAgICAgICAgdGhpcy5zZXRNYXRlcmlhbChpbmRleCwgaW5zdGFudGlhdGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9tYXRlcmlhbHNbaW5kZXhdO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqICEjZW4gU2V0IHRoZSBtYXRlcmlhbCBieSBpbmRleC5cbiAgICAgKiAhI3poIOagueaNruaMh+Wumue0ouW8leiuvue9ruadkOi0qFxuICAgICAqIEBtZXRob2Qgc2V0TWF0ZXJpYWxcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXggXG4gICAgICogQHBhcmFtIHtNYXRlcmlhbH0gbWF0ZXJpYWwgXG4gICAgICovXG4gICAgc2V0TWF0ZXJpYWw6IGZ1bmN0aW9uIHNldE1hdGVyaWFsKGluZGV4LCBtYXRlcmlhbCkge1xuICAgICAgICB0aGlzLl9tYXRlcmlhbHNbaW5kZXhdID0gbWF0ZXJpYWw7XG4gICAgICAgIGlmIChtYXRlcmlhbCkge1xuICAgICAgICAgICAgdGhpcy5tYXJrRm9yVXBkYXRlUmVuZGVyRGF0YSh0cnVlKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgX2FjdGl2YXRlTWF0ZXJpYWw6IGZ1bmN0aW9uIF9hY3RpdmF0ZU1hdGVyaWFsKGZvcmNlKSB7fSxcbiAgICBfdXBkYXRlQ29sb3I6IGZ1bmN0aW9uIF91cGRhdGVDb2xvcigpIHtcbiAgICAgICAgaWYgKHRoaXMuX2Fzc2VtYmxlci51cGRhdGVDb2xvcikge1xuICAgICAgICAgICAgdGhpcy5fYXNzZW1ibGVyLnVwZGF0ZUNvbG9yKHRoaXMpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBfY2hlY2tCYWN0aDogZnVuY3Rpb24gX2NoZWNrQmFjdGgocmVuZGVyZXIsIGN1bGxpbmdNYXNrKSB7XG4gICAgICAgIHZhciBtYXRlcmlhbCA9IHRoaXMuc2hhcmVkTWF0ZXJpYWxzWzBdO1xuICAgICAgICBpZiAobWF0ZXJpYWwgJiYgbWF0ZXJpYWwuZ2V0SGFzaCgpICE9PSByZW5kZXJlci5tYXRlcmlhbC5nZXRIYXNoKCkgfHwgcmVuZGVyZXIuY3VsbGluZ01hc2sgIT09IGN1bGxpbmdNYXNrKSB7XG4gICAgICAgICAgICByZW5kZXJlci5fZmx1c2goKTtcblxuICAgICAgICAgICAgcmVuZGVyZXIubm9kZSA9IG1hdGVyaWFsLmdldERlZmluZSgnQ0NfVVNFX01PREVMJykgPyB0aGlzLm5vZGUgOiByZW5kZXJlci5fZHVtbXlOb2RlO1xuICAgICAgICAgICAgcmVuZGVyZXIubWF0ZXJpYWwgPSBtYXRlcmlhbDtcbiAgICAgICAgICAgIHJlbmRlcmVyLmN1bGxpbmdNYXNrID0gY3VsbGluZ01hc2s7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuY2MuUmVuZGVyQ29tcG9uZW50ID0gbW9kdWxlLmV4cG9ydHMgPSBSZW5kZXJDb21wb25lbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa05EVW1WdVpHVnlRMjl0Y0c5dVpXNTBMbXB6SWwwc0ltNWhiV1Z6SWpwYklrTnZiWEJ2Ym1WdWRDSXNJbkpsY1hWcGNtVWlMQ0pTWlc1a1pYSkdiRzkzSWl3aVRXRjBaWEpwWVd3aUxDSlNaVzVrWlhKRGIyMXdiMjVsYm5RaUxDSmpZeUlzSWtOc1lYTnpJaXdpYm1GdFpTSXNJbVY0ZEdWdVpITWlMQ0psWkdsMGIzSWlMQ0pEUTE5RlJFbFVUMUlpTENKbGVHVmpkWFJsU1c1RlpHbDBUVzlrWlNJc0ltUnBjMkZzYkc5M1RYVnNkR2x3YkdVaUxDSndjbTl3WlhKMGFXVnpJaXdpWDIxaGRHVnlhV0ZzY3lJc0ltUmxabUYxYkhRaUxDSjBlWEJsSWl3aWMyaGhjbVZrVFdGMFpYSnBZV3h6SWl3aVoyVjBJaXdpYzJWMElpd2lkbUZzSWl3aVgyRmpkR2wyWVhSbFRXRjBaWEpwWVd3aUxDSmthWE53YkdGNVRtRnRaU0lzSW1GdWFXMWhkR0ZpYkdVaUxDSmpkRzl5SWl3aVgzWmxjblJ6UkdseWRIa2lMQ0pmYldGMFpYSnBZV3dpTENKZllYTnpaVzFpYkdWeUlpd2lYM0psYzJWMFFYTnpaVzFpYkdWeUlpd2ljMlYwVm1WeWRITkVhWEowZVNJc0lrRnpjMlZ0WW14bGNpSXNJbWx1YVhRaUxDSmZkWEJrWVhSbFEyOXNiM0lpTENKZlgzQnlaV3h2WVdRaUxDSnZia1Z1WVdKc1pTSXNJbTV2WkdVaUxDSmZjbVZ1WkdWeVEyOXRjRzl1Wlc1MElpd2laVzVoWW14bFpDSXNJbTl1SWl3aVRtOWtaU0lzSWtWMlpXNTBWSGx3WlNJc0lsTkpXa1ZmUTBoQlRrZEZSQ0lzSWw5dmJrNXZaR1ZUYVhwbFJHbHlkSGtpTENKQlRrTklUMUpmUTBoQlRrZEZSQ0lzSWw5eVpXNWtaWEpHYkdGbklpd2lSa3hCUjE5U1JVNUVSVklpTENKR1RFRkhYMVZRUkVGVVJWOVNSVTVFUlZKZlJFRlVRU0lzSWtaTVFVZGZUMUJCUTBsVVdWOURUMHhQVWlJc0ltOXVSR2x6WVdKc1pTSXNJbTltWmlJc0ltUnBjMkZpYkdWU1pXNWtaWElpTENKdmJrUmxjM1J5YjNraUxDSnRZWFJsY21saGJITWlMQ0pwSWl3aWJHVnVaM1JvSWl3aWNHOXZiQ0lzSW0xaGRHVnlhV0ZzSWl3aWNIVjBJaXdpWVhOelpXMWliR1Z5SWl3aWJXRnlhMFp2Y2xWd1pHRjBaVkpsYm1SbGNrUmhkR0VpTENKZmIyNHpSRTV2WkdWRGFHRnVaMlZrSWl3aVgyTmhibEpsYm1SbGNpSXNJbDlsYm1GaWJHVmtJaXdpWDJGamRHbDJaVWx1U0dsbGNtRnlZMmg1SWl3aVpXNWhZbXhsSWl3aWJXRnlhMFp2Y2xKbGJtUmxjaUlzSW1kbGRFMWhkR1Z5YVdGc0lpd2lhVzVrWlhnaUxDSnBibk4wWVc1MGFXRjBaV1FpTENKblpYUkpibk4wWVc1MGFXRjBaV1JOWVhSbGNtbGhiQ0lzSW5ObGRFMWhkR1Z5YVdGc0lpd2labTl5WTJVaUxDSjFjR1JoZEdWRGIyeHZjaUlzSWw5amFHVmphMEpoWTNSb0lpd2ljbVZ1WkdWeVpYSWlMQ0pqZFd4c2FXNW5UV0Z6YXlJc0ltZGxkRWhoYzJnaUxDSmZabXgxYzJnaUxDSm5aWFJFWldacGJtVWlMQ0pmWkhWdGJYbE9iMlJsSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJanM3UVVGNVFrRTdPenM3T3p0QlFVVkJMRWxCUVUxQkxGbEJRVmxETEZGQlFWRXNaVUZCVWl4RFFVRnNRaXhETEVOQk0wSkJPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJORUpCTEVsQlFVMURMR0ZCUVdGRUxGRkJRVkVzZVVKQlFWSXNRMEZCYmtJN1FVRkRRU3hKUVVGTlJTeFhRVUZYUml4UlFVRlJMQ3RDUVVGU0xFTkJRV3BDT3p0QlFVVkJPenM3T3pzN096czdRVUZUUVN4SlFVRkpSeXhyUWtGQmEwSkRMRWRCUVVkRExFdEJRVWdzUTBGQlV6dEJRVU16UWtNc1ZVRkJUU3hwUWtGRWNVSTdRVUZGTTBKRExHRkJRVk5TTEZOQlJtdENPenRCUVVrelFsTXNXVUZCVVVNc1lVRkJZVHRCUVVOcVFrTXNNa0pCUVcxQ0xFbEJSRVk3UVVGRmFrSkRMREJDUVVGclFqdEJRVVpFTEV0QlNrMDdPMEZCVXpOQ1F5eG5Ra0ZCV1R0QlFVTlNReXh2UWtGQldUdEJRVU5TUXl4eFFrRkJVeXhGUVVSRU8wRkJSVkpETEd0Q1FVRk5ZanRCUVVaRkxGTkJSRW83TzBGQlRWSTdPenM3TzBGQlMwRmpMSGxDUVVGcFFqdEJRVU5pUXl4bFFVUmhMR2xDUVVOT08wRkJRMGdzZFVKQlFVOHNTMEZCUzBvc1ZVRkJXanRCUVVOSUxHRkJTRms3UVVGSllrc3NaVUZLWVN4bFFVbFNReXhIUVVwUkxFVkJTVWc3UVVGRFRpeHhRa0ZCUzA0c1ZVRkJUQ3hIUVVGclFrMHNSMEZCYkVJN1FVRkRRU3h4UWtGQlMwTXNhVUpCUVV3c1EwRkJkVUlzU1VGQmRrSTdRVUZEU0N4aFFWQlpPenRCUVZGaVRDeHJRa0ZCVFN4RFFVRkRZaXhSUVVGRUxFTkJVazg3UVVGVFltMUNMSGxDUVVGaExGZEJWRUU3UVVGVllrTXNkMEpCUVZrN1FVRldRenRCUVZoVUxFdEJWR1U3TzBGQmEwTXpRa01zVVVGc1F6SkNMR3RDUVd0RGJrSTdRVUZEU2l4aFFVRkxReXhYUVVGTUxFZEJRVzFDTEVsQlFXNUNPMEZCUTBFc1lVRkJTME1zVTBGQlRDeEhRVUZwUWl4SlFVRnFRanRCUVVOQkxHRkJRVXRETEZWQlFVd3NSMEZCYTBJc1NVRkJiRUk3UVVGRFNDeExRWFJETUVJN1FVRjNRek5DUXl4dFFrRjRRekpDTERaQ1FYZERVanRCUVVObUxHRkJRVXRETEdGQlFVd3NRMEZCYlVJc1NVRkJia0k3UVVGRFFVTXNORUpCUVZWRExFbEJRVllzUTBGQlpTeEpRVUZtT3p0QlFVVkJMR0ZCUVV0RExGbEJRVXc3UVVGRFNDeExRVGRETUVJN1FVRXJRek5DUXl4aFFTOURNa0lzZFVKQkswTmtPMEZCUTFRc1lVRkJTMHdzWlVGQlREdEJRVU5JTEV0QmFrUXdRanRCUVcxRU0wSk5MRmxCYmtReVFpeHpRa0Z0UkdZN1FVRkRVaXhaUVVGSkxFdEJRVXRETEVsQlFVd3NRMEZCVlVNc1owSkJRV1FzUlVGQlowTTdRVUZETlVJc2FVSkJRVXRFTEVsQlFVd3NRMEZCVlVNc1owSkJRVllzUTBGQk1rSkRMRTlCUVROQ0xFZEJRWEZETEV0QlFYSkRPMEZCUTBnN1FVRkRSQ3hoUVVGTFJpeEpRVUZNTEVOQlFWVkRMR2RDUVVGV0xFZEJRVFpDTEVsQlFUZENPenRCUVVWQkxHRkJRVXRFTEVsQlFVd3NRMEZCVlVjc1JVRkJWaXhEUVVGaGFrTXNSMEZCUjJ0RExFbEJRVWdzUTBGQlVVTXNVMEZCVWl4RFFVRnJRa01zV1VGQkwwSXNSVUZCTmtNc1MwRkJTME1zWjBKQlFXeEVMRVZCUVc5RkxFbEJRWEJGTzBGQlEwRXNZVUZCUzFBc1NVRkJUQ3hEUVVGVlJ5eEZRVUZXTEVOQlFXRnFReXhIUVVGSGEwTXNTVUZCU0N4RFFVRlJReXhUUVVGU0xFTkJRV3RDUnl4alFVRXZRaXhGUVVFclF5eExRVUZMUkN4blFrRkJjRVFzUlVGQmMwVXNTVUZCZEVVN08wRkJSVUVzWVVGQlMxQXNTVUZCVEN4RFFVRlZVeXhYUVVGV0xFbEJRWGxDTVVNc1YwRkJWekpETEZkQlFWZ3NSMEZCZVVJelF5eFhRVUZYTkVNc2RVSkJRWEJETEVkQlFUaEVOVU1zVjBGQlZ6WkRMR3RDUVVGc1J6dEJRVU5JTEV0Qk4wUXdRanRCUVN0RU0wSkRMR0ZCTDBReVFpeDFRa0VyUkdRN1FVRkRWQ3hoUVVGTFlpeEpRVUZNTEVOQlFWVkRMR2RDUVVGV0xFZEJRVFpDTEVsQlFUZENPMEZCUTBFc1lVRkJTMFFzU1VGQlRDeERRVUZWWXl4SFFVRldMRU5CUVdNMVF5eEhRVUZIYTBNc1NVRkJTQ3hEUVVGUlF5eFRRVUZTTEVOQlFXdENReXhaUVVGb1F5eEZRVUU0UXl4TFFVRkxReXhuUWtGQmJrUXNSVUZCY1VVc1NVRkJja1U3UVVGRFFTeGhRVUZMVUN4SlFVRk1MRU5CUVZWakxFZEJRVllzUTBGQll6VkRMRWRCUVVkclF5eEpRVUZJTEVOQlFWRkRMRk5CUVZJc1EwRkJhMEpITEdOQlFXaERMRVZCUVdkRUxFdEJRVXRFTEdkQ1FVRnlSQ3hGUVVGMVJTeEpRVUYyUlR0QlFVTkJMR0ZCUVV0UkxHRkJRVXc3UVVGRFNDeExRWEJGTUVJN1FVRnpSVE5DUXl4aFFYUkZNa0lzZFVKQmMwVmtPMEZCUTFRc1dVRkJTVU1zV1VGQldTeExRVUZMZEVNc1ZVRkJja0k3UVVGRFFTeGhRVUZMTEVsQlFVbDFReXhKUVVGSkxFTkJRV0lzUlVGQlowSkJMRWxCUVVsRUxGVkJRVlZGTEUxQlFUbENMRVZCUVhORFJDeEhRVUYwUXl4RlFVRXlRenRCUVVOMlEyaEVMR1ZCUVVkclJDeEpRVUZJTEVOQlFWRkRMRkZCUVZJc1EwRkJhVUpETEVkQlFXcENMRU5CUVhGQ1RDeFZRVUZWUXl4RFFVRldMRU5CUVhKQ08wRkJRMGc3UVVGRFJFUXNhMEpCUVZWRkxFMUJRVllzUjBGQmJVSXNRMEZCYmtJN08wRkJSVUZxUkN4WFFVRkhhMFFzU1VGQlNDeERRVUZSUnl4VFFVRlNMRU5CUVd0Q1JDeEhRVUZzUWl4RFFVRnpRaXhMUVVGTE9VSXNWVUZCTTBJN1FVRkRTQ3hMUVRsRk1FSTdRVUZuUmpOQ1JTeHBRa0ZvUmpKQ0xESkNRV2RHVmp0QlFVTmlMR0ZCUVV0S0xGZEJRVXdzUjBGQmJVSXNTVUZCYmtJN1FVRkRRU3hoUVVGTGEwTXNkVUpCUVV3c1EwRkJOa0lzU1VGQk4wSTdRVUZEU0N4TFFXNUdNRUk3UVVGeFJqTkNha0lzYjBKQmNrWXlRaXc0UWtGeFJsQTdRVUZEYUVJc1lVRkJTMklzWVVGQlREdEJRVU5JTEV0QmRrWXdRanRCUVhsR00wSXJRaXh2UWtGNlJqSkNMRGhDUVhsR1VEdEJRVU5vUWl4aFFVRkxMMElzWVVGQlREdEJRVU5JTEV0Qk0wWXdRanRCUVRaR00wSm5ReXhqUVRkR01rSXNkMEpCTmtaaU8wRkJRMVk3UVVGRFFTeGxRVUZQTEV0QlFVdERMRkZCUVV3c1NVRkJhVUlzUzBGQlN6TkNMRWxCUVV3c1EwRkJWVFJDTEd0Q1FVRnNRenRCUVVOSUxFdEJhRWN3UWp0QlFXdEhNMEpLTERKQ1FXeEhNa0lzYlVOQmEwZEdTeXhOUVd4SFJTeEZRV3RIVFR0QlFVTTNRaXhaUVVGSlFTeFZRVUZWTEV0QlFVdElMRlZCUVV3c1JVRkJaQ3hGUVVGcFF6dEJRVU0zUWl4cFFrRkJTekZDTEVsQlFVd3NRMEZCVlZNc1YwRkJWaXhKUVVGNVFqRkRMRmRCUVZjMFF5eDFRa0ZCY0VNN1FVRkRTQ3hUUVVaRUxFMUJSMHNzU1VGQlNTeERRVUZEYTBJc1RVRkJUQ3hGUVVGaE8wRkJRMlFzYVVKQlFVczNRaXhKUVVGTUxFTkJRVlZUTEZkQlFWWXNTVUZCZVVJc1EwRkJRekZETEZkQlFWYzBReXgxUWtGQmNrTTdRVUZEU0R0QlFVTktMRXRCZWtjd1FqdEJRVEpITTBKdFFpeHBRa0V6UnpKQ0xIbENRVEpIV2tRc1RVRXpSMWtzUlVFeVIwbzdRVUZEYmtJc1dVRkJTVUVzVlVGQlZTeExRVUZMU0N4VlFVRk1MRVZCUVdRc1JVRkJhVU03UVVGRE4wSXNhVUpCUVVzeFFpeEpRVUZNTEVOQlFWVlRMRmRCUVZZc1NVRkJlVUl4UXl4WFFVRlhNa01zVjBGQmNFTTdRVUZEU0N4VFFVWkVMRTFCUjBzc1NVRkJTU3hEUVVGRGJVSXNUVUZCVEN4RlFVRmhPMEZCUTJRc2FVSkJRVXMzUWl4SlFVRk1MRU5CUVZWVExGZEJRVllzU1VGQmVVSXNRMEZCUXpGRExGZEJRVmN5UXl4WFFVRnlRenRCUVVOSU8wRkJRMG9zUzBGc1NEQkNPMEZCYjBnelFrc3NhVUpCY0VneVFpd3lRa0Z2U0ZZN1FVRkRZaXhoUVVGTFppeEpRVUZNTEVOQlFWVlRMRmRCUVZZc1NVRkJlVUlzUlVGQlJURkRMRmRCUVZjeVF5eFhRVUZZTEVkQlFYbENNME1zVjBGQlZ6UkRMSFZDUVVGMFF5eERRVUY2UWp0QlFVTklMRXRCZEVnd1FqczdPMEZCZDBnelFqczdPenM3T3p0QlFVOUJiMElzWlVFdlNESkNMSFZDUVN0SVpFTXNTMEV2U0dNc1JVRXJTRkE3UVVGRGFFSXNXVUZCU1VFc1VVRkJVU3hEUVVGU0xFbEJRV0ZCTEZOQlFWTXNTMEZCUzNKRUxGVkJRVXdzUTBGQlowSjNReXhOUVVFeFF5eEZRVUZyUkR0QlFVTTVReXh0UWtGQlR5eEpRVUZRTzBGQlEwZzdPMEZCUlVRc1dVRkJTVVVzVjBGQlZ5eExRVUZMTVVNc1ZVRkJUQ3hEUVVGblFuRkVMRXRCUVdoQ0xFTkJRV1k3UVVGRFFTeFpRVUZKTEVOQlFVTllMRkZCUVV3c1JVRkJaU3hQUVVGUExFbEJRVkE3TzBGQlJXWXNXVUZCU1Zrc1pVRkJaV3BGTEZOQlFWTnJSU3gxUWtGQlZDeERRVUZwUTJJc1VVRkJha01zUlVGQk1rTXNTVUZCTTBNc1EwRkJia0k3UVVGRFFTeFpRVUZKV1N4cFFrRkJhVUphTEZGQlFYSkNMRVZCUVN0Q08wRkJRek5DTEdsQ1FVRkxZeXhYUVVGTUxFTkJRV2xDU0N4TFFVRnFRaXhGUVVGM1FrTXNXVUZCZUVJN1FVRkRTRHM3UVVGRlJDeGxRVUZQTEV0QlFVdDBSQ3hWUVVGTUxFTkJRV2RDY1VRc1MwRkJhRUlzUTBGQlVEdEJRVU5JTEV0Qk4wa3dRanM3TzBGQkswa3pRanM3T3pzN096dEJRVTlCUnl4bFFYUktNa0lzZFVKQmMwcGtTQ3hMUVhSS1l5eEZRWE5LVUZnc1VVRjBTazhzUlVGelNrYzdRVUZETVVJc1lVRkJTekZETEZWQlFVd3NRMEZCWjBKeFJDeExRVUZvUWl4SlFVRjVRbGdzVVVGQmVrSTdRVUZEUVN4WlFVRkpRU3hSUVVGS0xFVkJRV003UVVGRFZpeHBRa0ZCUzBjc2RVSkJRVXdzUTBGQk5rSXNTVUZCTjBJN1FVRkRTRHRCUVVOS0xFdEJNMG93UWp0QlFUWktNMEowUXl4eFFrRTNTakpDTERaQ1FUWktVbXRFTEV0Qk4wcFJMRVZCTmtwRUxFTkJRM3BDTEVOQk9Vb3dRanRCUVdkTE0wSjJReXhuUWtGb1N6SkNMREJDUVdkTFdEdEJRVU5hTEZsQlFVa3NTMEZCUzB3c1ZVRkJUQ3hEUVVGblFqWkRMRmRCUVhCQ0xFVkJRV2xETzBGQlF6ZENMR2xDUVVGTE4wTXNWVUZCVEN4RFFVRm5RalpETEZkQlFXaENMRU5CUVRSQ0xFbEJRVFZDTzBGQlEwZzdRVUZEU2l4TFFYQkxNRUk3UVVGelN6TkNReXhsUVhSTE1rSXNkVUpCYzB0a1F5eFJRWFJMWXl4RlFYTkxTa01zVjBGMFMwa3NSVUZ6UzFNN1FVRkRhRU1zV1VGQlNXNUNMRmRCUVZjc1MwRkJTM1pETEdWQlFVd3NRMEZCY1VJc1EwRkJja0lzUTBGQlpqdEJRVU5CTEZsQlFVdDFReXhaUVVGWlFTeFRRVUZUYjBJc1QwRkJWQ3hQUVVGMVFrWXNVMEZCVTJ4Q0xGRkJRVlFzUTBGQmEwSnZRaXhQUVVGc1FpeEZRVUZ3UXl4SlFVTkJSaXhUUVVGVFF5eFhRVUZVTEV0QlFYbENRU3hYUVVRM1FpeEZRVU13UXp0QlFVTjBRMFFzY1VKQlFWTkhMRTFCUVZRN08wRkJSVUZJTEhGQ1FVRlRka01zU1VGQlZDeEhRVUZuUW5GQ0xGTkJRVk56UWl4VFFVRlVMRU5CUVcxQ0xHTkJRVzVDTEVsQlFYRkRMRXRCUVVzelF5eEpRVUV4UXl4SFFVRnBSSFZETEZOQlFWTkxMRlZCUVRGRk8wRkJRMEZNTEhGQ1FVRlRiRUlzVVVGQlZDeEhRVUZ2UWtFc1VVRkJjRUk3UVVGRFFXdENMSEZDUVVGVFF5eFhRVUZVTEVkQlFYVkNRU3hYUVVGMlFqdEJRVU5JTzBGQlEwbzdRVUZvVERCQ0xFTkJRVlFzUTBGQmRFSTdPMEZCYlV4QmRFVXNSMEZCUjBRc1pVRkJTQ3hIUVVGeFFqUkZMRTlCUVU5RExFOUJRVkFzUjBGQmFVSTNSU3hsUVVGMFF5SXNJbVpwYkdVaU9pSkRRMUpsYm1SbGNrTnZiWEJ2Ym1WdWRDNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzRnUTI5d2VYSnBaMmgwSUNoaktTQXlNREUzTFRJd01UZ2dXR2xoYldWdUlGbGhhbWtnVTI5bWRIZGhjbVVnUTI4dUxDQk1kR1F1WEc1Y2JpQm9kSFJ3Y3pvdkwzZDNkeTVqYjJOdmN5NWpiMjB2WEc1Y2JpQlFaWEp0YVhOemFXOXVJR2x6SUdobGNtVmllU0JuY21GdWRHVmtMQ0JtY21WbElHOW1JR05vWVhKblpTd2dkRzhnWVc1NUlIQmxjbk52YmlCdlluUmhhVzVwYm1jZ1lTQmpiM0I1WEc0Z2IyWWdkR2hwY3lCemIyWjBkMkZ5WlNCaGJtUWdZWE56YjJOcFlYUmxaQ0JsYm1kcGJtVWdjMjkxY21ObElHTnZaR1VnS0hSb1pTQmNJbE52Wm5SM1lYSmxYQ0lwTENCaElHeHBiV2wwWldRc1hHNGdkMjl5YkdSM2FXUmxMQ0J5YjNsaGJIUjVMV1p5WldVc0lHNXZiaTFoYzNOcFoyNWhZbXhsTENCeVpYWnZZMkZpYkdVZ1lXNWtJRzV2YmkxbGVHTnNkWE5wZG1VZ2JHbGpaVzV6WlZ4dUlIUnZJSFZ6WlNCRGIyTnZjeUJEY21WaGRHOXlJSE52YkdWc2VTQjBieUJrWlhabGJHOXdJR2RoYldWeklHOXVJSGx2ZFhJZ2RHRnlaMlYwSUhCc1lYUm1iM0p0Y3k0Z1dXOTFJSE5vWVd4c1hHNGdibTkwSUhWelpTQkRiMk52Y3lCRGNtVmhkRzl5SUhOdlpuUjNZWEpsSUdadmNpQmtaWFpsYkc5d2FXNW5JRzkwYUdWeUlITnZablIzWVhKbElHOXlJSFJ2YjJ4eklIUm9ZWFFuYzF4dUlIVnpaV1FnWm05eUlHUmxkbVZzYjNCcGJtY2daMkZ0WlhNdUlGbHZkU0JoY21VZ2JtOTBJR2R5WVc1MFpXUWdkRzhnY0hWaWJHbHphQ3dnWkdsemRISnBZblYwWlN4Y2JpQnpkV0pzYVdObGJuTmxMQ0JoYm1RdmIzSWdjMlZzYkNCamIzQnBaWE1nYjJZZ1EyOWpiM01nUTNKbFlYUnZjaTVjYmx4dUlGUm9aU0J6YjJaMGQyRnlaU0J2Y2lCMGIyOXNjeUJwYmlCMGFHbHpJRXhwWTJWdWMyVWdRV2R5WldWdFpXNTBJR0Z5WlNCc2FXTmxibk5sWkN3Z2JtOTBJSE52YkdRdVhHNGdXR2xoYldWdUlGbGhhbWtnVTI5bWRIZGhjbVVnUTI4dUxDQk1kR1F1SUhKbGMyVnlkbVZ6SUdGc2JDQnlhV2RvZEhNZ2JtOTBJR1Y0Y0hKbGMzTnNlU0JuY21GdWRHVmtJSFJ2SUhsdmRTNWNibHh1SUZSSVJTQlRUMFpVVjBGU1JTQkpVeUJRVWs5V1NVUkZSQ0JjSWtGVElFbFRYQ0lzSUZkSlZFaFBWVlFnVjBGU1VrRk9WRmtnVDBZZ1FVNVpJRXRKVGtRc0lFVllVRkpGVTFNZ1QxSmNiaUJKVFZCTVNVVkVMQ0JKVGtOTVZVUkpUa2NnUWxWVUlFNVBWQ0JNU1UxSlZFVkVJRlJQSUZSSVJTQlhRVkpTUVU1VVNVVlRJRTlHSUUxRlVrTklRVTVVUVVKSlRFbFVXU3hjYmlCR1NWUk9SVk5USUVaUFVpQkJJRkJCVWxSSlExVk1RVklnVUZWU1VFOVRSU0JCVGtRZ1RrOU9TVTVHVWtsT1IwVk5SVTVVTGlCSlRpQk9UeUJGVmtWT1ZDQlRTRUZNVENCVVNFVmNiaUJCVlZSSVQxSlRJRTlTSUVOUFVGbFNTVWRJVkNCSVQweEVSVkpUSUVKRklFeEpRVUpNUlNCR1QxSWdRVTVaSUVOTVFVbE5MQ0JFUVUxQlIwVlRJRTlTSUU5VVNFVlNYRzRnVEVsQlFrbE1TVlJaTENCWFNFVlVTRVZTSUVsT0lFRk9JRUZEVkVsUFRpQlBSaUJEVDA1VVVrRkRWQ3dnVkU5U1ZDQlBVaUJQVkVoRlVsZEpVMFVzSUVGU1NWTkpUa2NnUmxKUFRTeGNiaUJQVlZRZ1QwWWdUMUlnU1U0Z1EwOU9Ua1ZEVkVsUFRpQlhTVlJJSUZSSVJTQlRUMFpVVjBGU1JTQlBVaUJVU0VVZ1ZWTkZJRTlTSUU5VVNFVlNJRVJGUVV4SlRrZFRJRWxPWEc0Z1ZFaEZJRk5QUmxSWFFWSkZMbHh1SUNvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3ZYRzVjYm1sdGNHOXlkQ0JCYzNObGJXSnNaWElnWm5KdmJTQW5MaTR2Y21WdVpHVnlaWEl2WVhOelpXMWliR1Z5Snp0Y2JseHVZMjl1YzNRZ1EyOXRjRzl1Wlc1MElEMGdjbVZ4ZFdseVpTZ25MaTlEUTBOdmJYQnZibVZ1ZENjcE8xeHVZMjl1YzNRZ1VtVnVaR1Z5Um14dmR5QTlJSEpsY1hWcGNtVW9KeTR1TDNKbGJtUmxjbVZ5TDNKbGJtUmxjaTFtYkc5M0p5azdYRzVqYjI1emRDQk5ZWFJsY21saGJDQTlJSEpsY1hWcGNtVW9KeTR1TDJGemMyVjBjeTl0WVhSbGNtbGhiQzlEUTAxaGRHVnlhV0ZzSnlrN1hHNWNiaThxS2x4dUlDb2dJU05sYmx4dUlDb2dRbUZ6WlNCamJHRnpjeUJtYjNJZ1kyOXRjRzl1Wlc1MGN5QjNhR2xqYUNCemRYQndiM0owY3lCeVpXNWtaWEpwYm1jZ1ptVmhkSFZ5WlhNdVhHNGdLaUFoSTNwb1hHNGdLaURtaVlEbW5Jbm1sSy9taklIbXVMTG1uNVBubW9UbnU0VGt1N2JubW9UbG43cm5zYnRjYmlBcVhHNGdLaUJBWTJ4aGMzTWdVbVZ1WkdWeVEyOXRjRzl1Wlc1MFhHNGdLaUJBWlhoMFpXNWtjeUJEYjIxd2IyNWxiblJjYmlBcUwxeHViR1YwSUZKbGJtUmxja052YlhCdmJtVnVkQ0E5SUdOakxrTnNZWE56S0h0Y2JpQWdJQ0J1WVcxbE9pQW5VbVZ1WkdWeVEyOXRjRzl1Wlc1MEp5eGNiaUFnSUNCbGVIUmxibVJ6T2lCRGIyMXdiMjVsYm5Rc1hHNWNiaUFnSUNCbFpHbDBiM0k2SUVORFgwVkVTVlJQVWlBbUppQjdYRzRnSUNBZ0lDQWdJR1Y0WldOMWRHVkpia1ZrYVhSTmIyUmxPaUIwY25WbExGeHVJQ0FnSUNBZ0lDQmthWE5oYkd4dmQwMTFiSFJwY0d4bE9pQjBjblZsWEc0Z0lDQWdmU3hjYmx4dUlDQWdJSEJ5YjNCbGNuUnBaWE02SUh0Y2JpQWdJQ0FnSUNBZ1gyMWhkR1Z5YVdGc2N6b2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZERvZ1cxMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUJOWVhSbGNtbGhiQ3hjYmlBZ0lDQWdJQ0FnZlN4Y2JseHVJQ0FnSUNBZ0lDQXZLaXBjYmlBZ0lDQWdJQ0FnSUNvZ0lTTmxiaUJVYUdVZ2JXRjBaWEpwWVd4eklIVnpaV1FnWW5rZ2RHaHBjeUJ5Wlc1a1pYSWdZMjl0Y0c5dVpXNTBMbHh1SUNBZ0lDQWdJQ0FnS2lBaEkzcG9JT2E0c3VhZmsrZTdoT1M3dHVTOXYrZVVxT2VhaE9hZGtPaTBxT09BZ2x4dUlDQWdJQ0FnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMXROWVhSbGNtbGhiRjE5SUhOb1lYSmxaRTFoZEdWeWFXRnNjMXh1SUNBZ0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUNBZ2MyaGhjbVZrVFdGMFpYSnBZV3h6T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JuWlhRZ0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dFlYUmxjbWxoYkhNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjMlYwSUNoMllXd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXRZWFJsY21saGJITWdQU0IyWVd3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWVdOMGFYWmhkR1ZOWVhSbGNtbGhiQ2gwY25WbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQmJUV0YwWlhKcFlXeGRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHbHpjR3hoZVU1aGJXVTZJQ2ROWVhSbGNtbGhiSE1uTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZVzVwYldGMFlXSnNaVG9nWm1Gc2MyVmNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzRnSUNBZ1hHNGdJQ0FnWTNSdmNpQW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM1psY25SelJHbHlkSGtnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXRZWFJsY21saGJDQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJGemMyVnRZbXhsY2lBOUlHNTFiR3c3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJRjl5WlhObGRFRnpjMlZ0WW14bGNpQW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlYwVm1WeWRITkVhWEowZVNoMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnUVhOelpXMWliR1Z5TG1sdWFYUW9kR2hwY3lrN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmRYQmtZWFJsUTI5c2IzSW9LVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdYMTl3Y21Wc2IyRmtJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY21WelpYUkJjM05sYldKc1pYSW9LVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdiMjVGYm1GaWJHVWdLQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1dWIyUmxMbDl5Wlc1a1pYSkRiMjF3YjI1bGJuUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Ym05a1pTNWZjbVZ1WkdWeVEyOXRjRzl1Wlc1MExtVnVZV0pzWldRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjBhR2x6TG01dlpHVXVYM0psYm1SbGNrTnZiWEJ2Ym1WdWRDQTlJSFJvYVhNN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1dWIyUmxMbTl1S0dOakxrNXZaR1V1UlhabGJuUlVlWEJsTGxOSldrVmZRMGhCVGtkRlJDd2dkR2hwY3k1ZmIyNU9iMlJsVTJsNlpVUnBjblI1TENCMGFHbHpLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXViMlJsTG05dUtHTmpMazV2WkdVdVJYWmxiblJVZVhCbExrRk9RMGhQVWw5RFNFRk9SMFZFTENCMGFHbHpMbDl2Yms1dlpHVlRhWHBsUkdseWRIa3NJSFJvYVhNcE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdWJtOWtaUzVmY21WdVpHVnlSbXhoWnlCOFBTQlNaVzVrWlhKR2JHOTNMa1pNUVVkZlVrVk9SRVZTSUh3Z1VtVnVaR1Z5Um14dmR5NUdURUZIWDFWUVJFRlVSVjlTUlU1RVJWSmZSRUZVUVNCOElGSmxibVJsY2tac2IzY3VSa3hCUjE5UFVFRkRTVlJaWDBOUFRFOVNPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQnZia1JwYzJGaWJHVWdLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbTV2WkdVdVgzSmxibVJsY2tOdmJYQnZibVZ1ZENBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVibTlrWlM1dlptWW9ZMk11VG05a1pTNUZkbVZ1ZEZSNWNHVXVVMGxhUlY5RFNFRk9SMFZFTENCMGFHbHpMbDl2Yms1dlpHVlRhWHBsUkdseWRIa3NJSFJvYVhNcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG01dlpHVXViMlptS0dOakxrNXZaR1V1UlhabGJuUlVlWEJsTGtGT1EwaFBVbDlEU0VGT1IwVkVMQ0IwYUdsekxsOXZiazV2WkdWVGFYcGxSR2x5ZEhrc0lIUm9hWE1wTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVJwYzJGaWJHVlNaVzVrWlhJb0tUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2IyNUVaWE4wY205NUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnYkdWMElHMWhkR1Z5YVdGc2N5QTlJSFJvYVhNdVgyMWhkR1Z5YVdGc2N6dGNiaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0J0WVhSbGNtbGhiSE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOakxuQnZiMnd1YldGMFpYSnBZV3d1Y0hWMEtHMWhkR1Z5YVdGc2MxdHBYU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2JXRjBaWEpwWVd4ekxteGxibWQwYUNBOUlEQTdYRzVjYmlBZ0lDQWdJQ0FnWTJNdWNHOXZiQzVoYzNObGJXSnNaWEl1Y0hWMEtIUm9hWE11WDJGemMyVnRZbXhsY2lrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUhObGRGWmxjblJ6UkdseWRIa2dLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDkyWlhKMGMwUnBjblI1SUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXRZWEpyUm05eVZYQmtZWFJsVW1WdVpHVnlSR0YwWVNoMGNuVmxLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdYMjl1VG05a1pWTnBlbVZFYVhKMGVTQW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlYwVm1WeWRITkVhWEowZVNncE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCZmIyNHpSRTV2WkdWRGFHRnVaMlZrSUNncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpYUldaWEowYzBScGNuUjVLQ2s3WEc0Z0lDQWdmU3hjYmlBZ0lDQmNiaUFnSUNCZlkyRnVVbVZ1WkdWeUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1YyaGxiaUIwYUdVZ2JtOWtaU0JwY3lCaFkzUnBkbUYwWldRc0lHbDBJSGRwYkd3Z1pYaGxZM1YwWlNCdmJrVnVZV0pzWlNCaGJtUWdkR2hsSUhKbGJtUmxjbVpzWVdjZ2QybHNiQ0JoYkhOdklHSmxJSEpsYzJWMExseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWlc1aFlteGxaQ0FtSmlCMGFHbHpMbTV2WkdVdVgyRmpkR2wyWlVsdVNHbGxjbUZ5WTJoNU8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCdFlYSnJSbTl5VlhCa1lYUmxVbVZ1WkdWeVJHRjBZU0FvWlc1aFlteGxLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaGxibUZpYkdVZ0ppWWdkR2hwY3k1ZlkyRnVVbVZ1WkdWeUtDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Ym05a1pTNWZjbVZ1WkdWeVJteGhaeUI4UFNCU1pXNWtaWEpHYkc5M0xrWk1RVWRmVlZCRVFWUkZYMUpGVGtSRlVsOUVRVlJCTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tDRmxibUZpYkdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVibTlrWlM1ZmNtVnVaR1Z5Um14aFp5QW1QU0IrVW1WdVpHVnlSbXh2ZHk1R1RFRkhYMVZRUkVGVVJWOVNSVTVFUlZKZlJFRlVRVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0J0WVhKclJtOXlVbVZ1WkdWeUlDaGxibUZpYkdVcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0dWdVlXSnNaU0FtSmlCMGFHbHpMbDlqWVc1U1pXNWtaWElvS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXViMlJsTGw5eVpXNWtaWEpHYkdGbklIdzlJRkpsYm1SbGNrWnNiM2N1Umt4QlIxOVNSVTVFUlZJN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlNCcFppQW9JV1Z1WVdKc1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV1YjJSbExsOXlaVzVrWlhKR2JHRm5JQ1k5SUg1U1pXNWtaWEpHYkc5M0xrWk1RVWRmVWtWT1JFVlNPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYmx4dUlDQWdJR1JwYzJGaWJHVlNaVzVrWlhJZ0tDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtNXZaR1V1WDNKbGJtUmxja1pzWVdjZ0pqMGdmaWhTWlc1a1pYSkdiRzkzTGtaTVFVZGZVa1ZPUkVWU0lId2dVbVZ1WkdWeVJteHZkeTVHVEVGSFgxVlFSRUZVUlY5U1JVNUVSVkpmUkVGVVFTazdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1IyVjBJSFJvWlNCdFlYUmxjbWxoYkNCaWVTQnBibVJsZUM1Y2JpQWdJQ0FnS2lBaEkzcG9JT2FndWVhTnJ1YU1oK1d1bXVlMG91VzhsZWlPdCtXUGx1YWRrT2kwcUZ4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnWjJWMFRXRjBaWEpwWVd4Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnYVc1a1pYZ2dYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdUV0YwWlhKcFlXeDlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1oyVjBUV0YwWlhKcFlXd2dLR2x1WkdWNEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNocGJtUmxlQ0E4SURBZ2ZId2dhVzVrWlhnZ1BqMGdkR2hwY3k1ZmJXRjBaWEpwWVd4ekxteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JzWlhRZ2JXRjBaWEpwWVd3Z1BTQjBhR2x6TGw5dFlYUmxjbWxoYkhOYmFXNWtaWGhkTzF4dUlDQWdJQ0FnSUNCcFppQW9JVzFoZEdWeWFXRnNLU0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lHeGxkQ0JwYm5OMFlXNTBhV0YwWldRZ1BTQk5ZWFJsY21saGJDNW5aWFJKYm5OMFlXNTBhV0YwWldSTllYUmxjbWxoYkNodFlYUmxjbWxoYkN3Z2RHaHBjeWs3WEc0Z0lDQWdJQ0FnSUdsbUlDaHBibk4wWVc1MGFXRjBaV1FnSVQwOUlHMWhkR1Z5YVdGc0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEUxaGRHVnlhV0ZzS0dsdVpHVjRMQ0JwYm5OMFlXNTBhV0YwWldRcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMWhkR1Z5YVdGc2MxdHBibVJsZUYwN1hHNGdJQ0FnZlN4Y2JpQWdJQ0JjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdUlGTmxkQ0IwYUdVZ2JXRjBaWEpwWVd3Z1lua2dhVzVrWlhndVhHNGdJQ0FnSUNvZ0lTTjZhQ0Rtb0xubWphN21qSWZscnBybnRLTGx2SlhvcnI3bnZhN21uWkRvdEtoY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUhObGRFMWhkR1Z5YVdGc1hHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUdsdVpHVjRJRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUV0YwWlhKcFlXeDlJRzFoZEdWeWFXRnNJRnh1SUNBZ0lDQXFMMXh1SUNBZ0lITmxkRTFoZEdWeWFXRnNJQ2hwYm1SbGVDd2diV0YwWlhKcFlXd3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZiV0YwWlhKcFlXeHpXMmx1WkdWNFhTQTlJRzFoZEdWeWFXRnNPMXh1SUNBZ0lDQWdJQ0JwWmlBb2JXRjBaWEpwWVd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViV0Z5YTBadmNsVndaR0YwWlZKbGJtUmxja1JoZEdFb2RISjFaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWDJGamRHbDJZWFJsVFdGMFpYSnBZV3dnS0dadmNtTmxLU0I3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJRjkxY0dSaGRHVkRiMnh2Y2lBb0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDloYzNObGJXSnNaWEl1ZFhCa1lYUmxRMjlzYjNJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMkZ6YzJWdFlteGxjaTUxY0dSaGRHVkRiMnh2Y2loMGFHbHpLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JmWTJobFkydENZV04wYUNBb2NtVnVaR1Z5WlhJc0lHTjFiR3hwYm1kTllYTnJLU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQnRZWFJsY21saGJDQTlJSFJvYVhNdWMyaGhjbVZrVFdGMFpYSnBZV3h6V3pCZE8xeHVJQ0FnSUNBZ0lDQnBaaUFvS0cxaGRHVnlhV0ZzSUNZbUlHMWhkR1Z5YVdGc0xtZGxkRWhoYzJnb0tTQWhQVDBnY21WdVpHVnlaWEl1YldGMFpYSnBZV3d1WjJWMFNHRnphQ2dwS1NCOGZDQmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGJtUmxjbVZ5TG1OMWJHeHBibWROWVhOcklDRTlQU0JqZFd4c2FXNW5UV0Z6YXlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WdVpHVnlaWEl1WDJac2RYTm9LQ2s3WEc0Z0lDQWdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXNWtaWEpsY2k1dWIyUmxJRDBnYldGMFpYSnBZV3d1WjJWMFJHVm1hVzVsS0NkRFExOVZVMFZmVFU5RVJVd25LU0EvSUhSb2FYTXVibTlrWlNBNklISmxibVJsY21WeUxsOWtkVzF0ZVU1dlpHVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXNWtaWEpsY2k1dFlYUmxjbWxoYkNBOUlHMWhkR1Z5YVdGc08xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WdVpHVnlaWEl1WTNWc2JHbHVaMDFoYzJzZ1BTQmpkV3hzYVc1blRXRnphenRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYm4wcE8xeHVYRzVqWXk1U1pXNWtaWEpEYjIxd2IyNWxiblFnUFNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUZKbGJtUmxja052YlhCdmJtVnVkRHRjYmlKZGZRPT0iXX0=