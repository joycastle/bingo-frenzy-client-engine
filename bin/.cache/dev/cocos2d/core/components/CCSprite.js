(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCSprite.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var misc = require('../utils/misc');
        var NodeEvent = require('../CCNode').EventType;
        var RenderComponent = require('./CCRenderComponent');
        var BlendFunc = require('../utils/blend-func');
        var RenderFlow = require('../renderer/render-flow');
        var Material = require('../assets/material/CCMaterial');
        var SpriteType = cc.Enum({
            SIMPLE: 0,
            SLICED: 1,
            TILED: 2,
            FILLED: 3,
            MESH: 4
        });
        var FillType = cc.Enum({
            HORIZONTAL: 0,
            VERTICAL: 1,
            RADIAL: 2
        });
        var SizeMode = cc.Enum({
            CUSTOM: 0,
            TRIMMED: 1,
            RAW: 2
        });
        var State = cc.Enum({
            NORMAL: 0,
            GRAY: 1
        });
        var Sprite = cc.Class({
            name: 'cc.Sprite',
            extends: RenderComponent,
            mixins: [BlendFunc],
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.renderers/Sprite',
                help: 'i18n:COMPONENT.help_url.sprite',
                inspector: 'packages://inspector/inspectors/comps/sprite.js'
            },
            ctor: function ctor() {
                if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
                    this._activateMaterial = this._activateMaterialCanvas;
                } else {
                    this._activateMaterial = this._activateMaterialWebgl;
                }
            },
            properties: {
                _spriteFrame: {
                    default: null,
                    type: cc.SpriteFrame
                },
                _type: SpriteType.SIMPLE,
                _sizeMode: SizeMode.TRIMMED,
                _fillType: 0,
                _fillCenter: cc.v2(0, 0),
                _fillStart: 0,
                _fillRange: 0,
                _isTrimmedMode: true,
                _atlas: {
                    default: null,
                    type: cc.SpriteAtlas,
                    tooltip: CC_DEV && 'i18n:COMPONENT.sprite.atlas',
                    editorOnly: true,
                    visible: true,
                    animatable: false
                },
                spriteFrame: {
                    get: function get() {
                        return this._spriteFrame;
                    },
                    set: function set(value, force) {
                        var lastSprite = this._spriteFrame;
                        if (CC_EDITOR) {
                            if (!force && (lastSprite && lastSprite._uuid) === (value && value._uuid)) {
                                return;
                            }
                        } else {
                            if (lastSprite === value) {
                                return;
                            }
                        }
                        this._spriteFrame = value;
                        this.markForUpdateRenderData(false);
                        this._applySpriteFrame(lastSprite);
                        if (CC_EDITOR) {
                            this.node.emit('spriteframe-changed', this);
                        }
                    },
                    type: cc.SpriteFrame
                },
                type: {
                    get: function get() {
                        return this._type;
                    },
                    set: function set(value) {
                        if (this._type !== value) {
                            this._type = value;
                            this._resetAssembler();
                        }
                    },
                    type: SpriteType,
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.sprite.type'
                },
                fillType: {
                    get: function get() {
                        return this._fillType;
                    },
                    set: function set(value) {
                        if (value !== this._fillType) {
                            this._fillType = value;
                            this._resetAssembler();
                        }
                    },
                    type: FillType,
                    tooltip: CC_DEV && 'i18n:COMPONENT.sprite.fill_type'
                },
                fillCenter: {
                    get: function get() {
                        return this._fillCenter;
                    },
                    set: function set(value) {
                        this._fillCenter.x = value.x;
                        this._fillCenter.y = value.y;
                        if (this._type === SpriteType.FILLED) {
                            this.setVertsDirty();
                        }
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.sprite.fill_center'
                },
                fillStart: {
                    get: function get() {
                        return this._fillStart;
                    },
                    set: function set(value) {
                        this._fillStart = misc.clampf(value, -1, 1);
                        if (this._type === SpriteType.FILLED) {
                            this.setVertsDirty();
                        }
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.sprite.fill_start'
                },
                fillRange: {
                    get: function get() {
                        return this._fillRange;
                    },
                    set: function set(value) {
                        this._fillRange = misc.clampf(value, -1, 1);
                        if (this._type === SpriteType.FILLED) {
                            this.setVertsDirty();
                        }
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.sprite.fill_range'
                },
                trim: {
                    get: function get() {
                        return this._isTrimmedMode;
                    },
                    set: function set(value) {
                        if (this._isTrimmedMode !== value) {
                            this._isTrimmedMode = value;
                            if (this._type === SpriteType.SIMPLE || this._type === SpriteType.MESH) {
                                this.setVertsDirty();
                            }
                        }
                    },
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.sprite.trim'
                },
                sizeMode: {
                    get: function get() {
                        return this._sizeMode;
                    },
                    set: function set(value) {
                        this._sizeMode = value;
                        if (value !== SizeMode.CUSTOM) {
                            this._applySpriteSize();
                        }
                    },
                    animatable: false,
                    type: SizeMode,
                    tooltip: CC_DEV && 'i18n:COMPONENT.sprite.size_mode'
                }
            },
            statics: {
                FillType: FillType,
                Type: SpriteType,
                SizeMode: SizeMode,
                State: State
            },
            setVisible: function setVisible(visible) {
                this.enabled = visible;
            },
            setState: function setState() {
            },
            getState: function getState() {
            },
            onEnable: function onEnable() {
                this._super();
                if (!this._spriteFrame || !this._spriteFrame.textureLoaded()) {
                    this.disableRender();
                    if (this._spriteFrame) {
                        this._spriteFrame.once('load', this._onTextureLoaded, this);
                        this._spriteFrame.ensureLoadTexture();
                    }
                } else {
                    this._activateMaterial();
                }
            },
            _on3DNodeChanged: function _on3DNodeChanged() {
                this._resetAssembler();
            },
            _activateMaterialCanvas: function _activateMaterialCanvas() {
                this.setVertsDirty();
                this.markForUpdateRenderData(true);
                this.markForRender(true);
            },
            _activateMaterialWebgl: function _activateMaterialWebgl() {
                var spriteFrame = this._spriteFrame;
                if (!spriteFrame || !spriteFrame.textureLoaded()) {
                    this.disableRender();
                    return;
                }
                var material = this.sharedMaterials[0];
                if (!material) {
                    material = Material.getInstantiatedBuiltinMaterial('2d-sprite', this);
                } else {
                    material = Material.getInstantiatedMaterial(material, this);
                }
                material.setProperty('texture', spriteFrame.getTexture());
                this.setVertsDirty();
                this.setMaterial(0, material);
                this.markForRender(true);
            },
            _applyAtlas: CC_EDITOR && function (spriteFrame) {
                if (spriteFrame && spriteFrame._atlasUuid) {
                    var self = this;
                    cc.AssetLibrary.loadAsset(spriteFrame._atlasUuid, function (err, asset) {
                        self._atlas = asset;
                    });
                } else {
                    this._atlas = null;
                }
            },
            _canRender: function _canRender() {
                if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
                    if (!this._enabled)
                        return false;
                } else {
                    if (!this._enabled || !this.sharedMaterials[0] || !this.node._activeInHierarchy)
                        return false;
                }
                var spriteFrame = this._spriteFrame;
                if (!spriteFrame || !spriteFrame.textureLoaded()) {
                    return false;
                }
                return true;
            },
            _applySpriteSize: function _applySpriteSize() {
                if (this._spriteFrame) {
                    if (SizeMode.RAW === this._sizeMode) {
                        var size = this._spriteFrame._originalSize;
                        this.node.setContentSize(size);
                    } else if (SizeMode.TRIMMED === this._sizeMode) {
                        var rect = this._spriteFrame._rect;
                        this.node.setContentSize(rect.width, rect.height);
                    }
                    this.setVertsDirty();
                    this._activateMaterial();
                }
            },
            _onTextureLoaded: function _onTextureLoaded() {
                if (!this.isValid) {
                    return;
                }
                this._applySpriteSize();
            },
            _applySpriteFrame: function _applySpriteFrame(oldFrame) {
                if (oldFrame && !oldFrame.textureLoaded()) {
                    oldFrame.off('load', this._onTextureLoaded, this);
                }
                var spriteFrame = this._spriteFrame;
                if (spriteFrame) {
                    if (spriteFrame.textureLoaded()) {
                        this._applySpriteSize();
                    } else {
                        this.markForRender(false);
                        spriteFrame.once('load', this._onTextureLoaded, this);
                        spriteFrame.ensureLoadTexture();
                    }
                } else {
                    this.markForRender(false);
                }
                if (CC_EDITOR) {
                    this._applyAtlas(spriteFrame);
                }
            },
            _resized: CC_EDITOR && function () {
                if (this._spriteFrame) {
                    var actualSize = this.node.getContentSize();
                    var expectedW = actualSize.width;
                    var expectedH = actualSize.height;
                    if (this._sizeMode === SizeMode.RAW) {
                        var size = this._spriteFrame.getOriginalSize();
                        expectedW = size.width;
                        expectedH = size.height;
                    } else if (this._sizeMode === SizeMode.TRIMMED) {
                        var rect = this._spriteFrame.getRect();
                        expectedW = rect.width;
                        expectedH = rect.height;
                    }
                    if (expectedW !== actualSize.width || expectedH !== actualSize.height) {
                        this._sizeMode = SizeMode.CUSTOM;
                    }
                }
            }
        });
        if (CC_EDITOR) {
            Sprite.prototype.__superPreload = cc.RenderComponent.prototype.__preload;
            Sprite.prototype.__preload = function () {
                if (this.__superPreload)
                    this.__superPreload();
                this.node.on(NodeEvent.SIZE_CHANGED, this._resized, this);
            };
            Sprite.prototype.__superOnDestroy = cc.Component.prototype.onDestroy;
            Sprite.prototype.onDestroy = function () {
                if (this.__superOnDestroy)
                    this.__superOnDestroy();
                this.node.off(NodeEvent.SIZE_CHANGED, this._resized, this);
            };
        }
        cc.Sprite = module.exports = Sprite;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,