(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCToggleGroup.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var ToggleGroup = cc.Class({
            name: 'cc.ToggleGroup',
            extends: cc.Component,
            ctor: function ctor() {
                this._toggleItems = [];
            },
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.ui/ToggleGroup (Legacy)',
                help: 'i18n:COMPONENT.help_url.toggleGroup'
            },
            properties: {
                allowSwitchOff: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.toggle_group.allowSwitchOff',
                    default: false
                },
                toggleItems: {
                    get: function get() {
                        return this._toggleItems;
                    }
                }
            },
            updateToggles: function updateToggles(toggle) {
                if (!this.enabledInHierarchy)
                    return;
                this._toggleItems.forEach(function (item) {
                    if (toggle.isChecked) {
                        if (item !== toggle && item.isChecked && item.enabled) {
                            item._hideCheckMark();
                        }
                    }
                });
            },
            addToggle: function addToggle(toggle) {
                var index = this._toggleItems.indexOf(toggle);
                if (index === -1) {
                    this._toggleItems.push(toggle);
                }
                this._allowOnlyOneToggleChecked();
            },
            removeToggle: function removeToggle(toggle) {
                var index = this._toggleItems.indexOf(toggle);
                if (index > -1) {
                    this._toggleItems.splice(index, 1);
                }
                this._makeAtLeastOneToggleChecked();
            },
            _allowOnlyOneToggleChecked: function _allowOnlyOneToggleChecked() {
                var isChecked = false;
                this._toggleItems.forEach(function (item) {
                    if (isChecked && item.enabled) {
                        item._hideCheckMark();
                    }
                    if (item.isChecked && item.enabled) {
                        isChecked = true;
                    }
                });
                return isChecked;
            },
            _makeAtLeastOneToggleChecked: function _makeAtLeastOneToggleChecked() {
                var isChecked = this._allowOnlyOneToggleChecked();
                if (!isChecked && !this.allowSwitchOff) {
                    if (this._toggleItems.length > 0) {
                        this._toggleItems[0].isChecked = true;
                    }
                }
            },
            start: function start() {
                this._makeAtLeastOneToggleChecked();
            }
        });
        var js = require('../platform/js');
        var showed = false;
        js.get(cc, 'ToggleGroup', function () {
            if (!showed) {
                cc.logID(1405, 'cc.ToggleGroup', 'cc.ToggleContainer');
                showed = true;
            }
            return ToggleGroup;
        });
        module.exports = ToggleGroup;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,