(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCBlockInputEvents.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var BlockEvents = [
            'touchstart',
            'touchmove',
            'touchend',
            'mousedown',
            'mousemove',
            'mouseup',
            'mouseenter',
            'mouseleave',
            'mousewheel'
        ];
        function stopPropagation(event) {
            event.stopPropagation();
        }
        var BlockInputEvents = cc.Class({
            name: 'cc.BlockInputEvents',
            extends: require('./CCComponent'),
            editor: {
                menu: 'i18n:MAIN_MENU.component.ui/Block Input Events',
                inspector: 'packages://inspector/inspectors/comps/block-input-events.js',
                help: 'i18n:COMPONENT.help_url.block_input_events'
            },
            onEnable: function onEnable() {
                for (var i = 0; i < BlockEvents.length; i++) {
                    this.node.on(BlockEvents[i], stopPropagation, this);
                }
            },
            onDisable: function onDisable() {
                for (var i = 0; i < BlockEvents.length; i++) {
                    this.node.off(BlockEvents[i], stopPropagation, this);
                }
            }
        });
        cc.BlockInputEvents = module.exports = BlockInputEvents;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,