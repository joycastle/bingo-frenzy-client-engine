(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCComponent.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var CCObject = require('../platform/CCObject');
        var js = require('../platform/js');
        var idGenerater = new (require('../platform/id-generater'))('Comp');
        var IsOnEnableCalled = CCObject.Flags.IsOnEnableCalled;
        var IsOnLoadCalled = CCObject.Flags.IsOnLoadCalled;
        var Component = cc.Class({
            name: 'cc.Component',
            extends: CCObject,
            ctor: CC_EDITOR ? function () {
                if (window._Scene && _Scene.AssetsWatcher) {
                    _Scene.AssetsWatcher.initComponent(this);
                }
                this._id = Editor.Utils.UuidUtils.uuid();
                this.__eventTargets = [];
            } : function () {
                this._id = idGenerater.getNewId();
                this.__eventTargets = [];
            },
            properties: {
                node: {
                    default: null,
                    visible: false
                },
                name: {
                    get: function get() {
                        if (this._name) {
                            return this._name;
                        }
                        var className = cc.js.getClassName(this);
                        var trimLeft = className.lastIndexOf('.');
                        if (trimLeft >= 0) {
                            className = className.slice(trimLeft + 1);
                        }
                        return this.node.name + '<' + className + '>';
                    },
                    set: function set(value) {
                        this._name = value;
                    },
                    visible: false
                },
                uuid: {
                    get: function get() {
                        return this._id;
                    },
                    visible: false
                },
                __scriptAsset: CC_EDITOR && {
                    get: function get() {
                    },
                    displayName: 'Script',
                    type: cc._Script,
                    tooltip: CC_DEV && 'i18n:INSPECTOR.component.script'
                },
                _enabled: true,
                enabled: {
                    get: function get() {
                        return this._enabled;
                    },
                    set: function set(value) {
                        if (this._enabled !== value) {
                            this._enabled = value;
                            if (this.node._activeInHierarchy) {
                                var compScheduler = cc.director._compScheduler;
                                if (value) {
                                    compScheduler.enableComp(this);
                                } else {
                                    compScheduler.disableComp(this);
                                }
                            }
                        }
                    },
                    visible: false,
                    animatable: true
                },
                enabledInHierarchy: {
                    get: function get() {
                        return this._enabled && this.node._activeInHierarchy;
                    },
                    visible: false
                },
                _isOnLoadCalled: {
                    get: function get() {
                        return this._objFlags & IsOnLoadCalled;
                    }
                }
            },
            update: null,
            lateUpdate: null,
            __preload: null,
            onLoad: null,
            start: null,
            onEnable: null,
            onDisable: null,
            onDestroy: null,
            onFocusInEditor: null,
            onLostFocusInEditor: null,
            resetInEditor: null,
            addComponent: function addComponent(typeOrClassName) {
                return this.node.addComponent(typeOrClassName);
            },
            getComponent: function getComponent(typeOrClassName) {
                return this.node.getComponent(typeOrClassName);
            },
            getComponents: function getComponents(typeOrClassName) {
                return this.node.getComponents(typeOrClassName);
            },
            getComponentInChildren: function getComponentInChildren(typeOrClassName) {
                return this.node.getComponentInChildren(typeOrClassName);
            },
            getComponentsInChildren: function getComponentsInChildren(typeOrClassName) {
                return this.node.getComponentsInChildren(typeOrClassName);
            },
            _getLocalBounds: null,
            onRestore: null,
            destroy: function destroy() {
                if (CC_EDITOR) {
                    var depend = this.node._getDependComponent(this);
                    if (depend) {
                        return cc.errorID(3626, cc.js.getClassName(this), cc.js.getClassName(depend));
                    }
                }
                if (this._super()) {
                    if (this._enabled && this.node._activeInHierarchy) {
                        cc.director._compScheduler.disableComp(this);
                    }
                }
            },
            _onPreDestroy: function _onPreDestroy() {
                this.unscheduleAllCallbacks();
                var eventTargets = this.__eventTargets;
                for (var i = eventTargets.length - 1; i >= 0; --i) {
                    var target = eventTargets[i];
                    target && target.targetOff(this);
                }
                eventTargets.length = 0;
                if (CC_EDITOR && !CC_TEST) {
                    _Scene.AssetsWatcher.stop(this);
                }
                cc.director._nodeActivator.destroyComp(this);
                this.node._removeComponent(this);
            },
            _instantiate: function _instantiate(cloned) {
                if (!cloned) {
                    cloned = cc.instantiate._clone(this, this);
                }
                cloned.node = null;
                return cloned;
            },
            schedule: function schedule(callback, interval, repeat, delay) {
                cc.assertID(callback, 1619);
                cc.assertID(interval >= 0, 1620);
                interval = interval || 0;
                repeat = isNaN(repeat) ? cc.macro.REPEAT_FOREVER : repeat;
                delay = delay || 0;
                var scheduler = cc.director.getScheduler();
                var paused = scheduler.isTargetPaused(this);
                scheduler.schedule(callback, this, interval, repeat, delay, paused);
            },
            scheduleOnce: function scheduleOnce(callback, delay) {
                this.schedule(callback, 0, 0, delay);
            },
            unschedule: function unschedule(callback_fn) {
                if (!callback_fn)
                    return;
                cc.director.getScheduler().unschedule(callback_fn, this);
            },
            unscheduleAllCallbacks: function unscheduleAllCallbacks() {
                cc.director.getScheduler().unscheduleAllForTarget(this);
            }
        });
        Component._requireComponent = null;
        Component._executionOrder = 0;
        if (CC_EDITOR || CC_TEST) {
            Component._executeInEditMode = false;
            Component._playOnFocus = false;
            Component._disallowMultiple = null;
            Component._help = '';
            js.value(Component, '_inspector', '', true);
            js.value(Component, '_icon', '', true);
            cc._componentMenuItems = [];
            Component._addMenuItem = function (cls, path, priority) {
                cc._componentMenuItems.push({
                    component: cls,
                    menuPath: path,
                    priority: priority
                });
            };
        }
        js.value(Component, '_registerEditorProps', function (cls, props) {
            var reqComp = props.requireComponent;
            if (reqComp) {
                cls._requireComponent = reqComp;
            }
            var order = props.executionOrder;
            if (order && typeof order === 'number') {
                cls._executionOrder = order;
            }
            if (CC_EDITOR || CC_TEST) {
                var name = cc.js.getClassName(cls);
                for (var key in props) {
                    var val = props[key];
                    switch (key) {
                    case 'executeInEditMode':
                        cls._executeInEditMode = !!val;
                        break;
                    case 'playOnFocus':
                        if (val) {
                            var willExecuteInEditMode = 'executeInEditMode' in props ? props.executeInEditMode : cls._executeInEditMode;
                            if (willExecuteInEditMode) {
                                cls._playOnFocus = true;
                            } else {
                                cc.warnID(3601, name);
                            }
                        }
                        break;
                    case 'inspector':
                        js.value(cls, '_inspector', val, true);
                        break;
                    case 'icon':
                        js.value(cls, '_icon', val, true);
                        break;
                    case 'menu':
                        Component._addMenuItem(cls, val, props.menuPriority);
                        break;
                    case 'disallowMultiple':
                        cls._disallowMultiple = cls;
                        break;
                    case 'requireComponent':
                    case 'executionOrder':
                        break;
                    case 'help':
                        cls._help = val;
                        break;
                    default:
                        cc.warnID(3602, key, name);
                        break;
                    }
                }
            }
        });
        Component.prototype.__scriptUuid = '';
        cc.Component = module.exports = Component;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDQ29tcG9uZW50LmpzIiwiL1VzZXJzL2dhb3lhbmcvV29ya1NwYWNlL2pveWNhc3RsZS9iaW5nby9jbGllbnQvYmluZ28vZW5naW5lL2NvY29zMmQvY29yZS9jb21wb25lbnRzL0NDQ29tcG9uZW50LmpzIl0sIm5hbWVzIjpbIkNDT2JqZWN0IiwicmVxdWlyZSIsImpzIiwiaWRHZW5lcmF0ZXIiLCJJc09uRW5hYmxlQ2FsbGVkIiwiRmxhZ3MiLCJJc09uTG9hZENhbGxlZCIsIkNvbXBvbmVudCIsImNjIiwiQ2xhc3MiLCJuYW1lIiwiZXh0ZW5kcyIsImN0b3IiLCJDQ19FRElUT1IiLCJ3aW5kb3ciLCJfU2NlbmUiLCJBc3NldHNXYXRjaGVyIiwiaW5pdENvbXBvbmVudCIsIl9pZCIsIkVkaXRvciIsIlV0aWxzIiwiVXVpZFV0aWxzIiwidXVpZCIsIl9fZXZlbnRUYXJnZXRzIiwiZ2V0TmV3SWQiLCJwcm9wZXJ0aWVzIiwibm9kZSIsImRlZmF1bHQiLCJ2aXNpYmxlIiwiZ2V0IiwiX25hbWUiLCJjbGFzc05hbWUiLCJnZXRDbGFzc05hbWUiLCJ0cmltTGVmdCIsImxhc3RJbmRleE9mIiwic2xpY2UiLCJzZXQiLCJ2YWx1ZSIsIl9fc2NyaXB0QXNzZXQiLCJkaXNwbGF5TmFtZSIsInR5cGUiLCJfU2NyaXB0IiwidG9vbHRpcCIsIkNDX0RFViIsIl9lbmFibGVkIiwiZW5hYmxlZCIsIl9hY3RpdmVJbkhpZXJhcmNoeSIsImNvbXBTY2hlZHVsZXIiLCJkaXJlY3RvciIsIl9jb21wU2NoZWR1bGVyIiwiZW5hYmxlQ29tcCIsImRpc2FibGVDb21wIiwiYW5pbWF0YWJsZSIsImVuYWJsZWRJbkhpZXJhcmNoeSIsIl9pc09uTG9hZENhbGxlZCIsIl9vYmpGbGFncyIsInVwZGF0ZSIsImxhdGVVcGRhdGUiLCJfX3ByZWxvYWQiLCJvbkxvYWQiLCJzdGFydCIsIm9uRW5hYmxlIiwib25EaXNhYmxlIiwib25EZXN0cm95Iiwib25Gb2N1c0luRWRpdG9yIiwib25Mb3N0Rm9jdXNJbkVkaXRvciIsInJlc2V0SW5FZGl0b3IiLCJhZGRDb21wb25lbnQiLCJ0eXBlT3JDbGFzc05hbWUiLCJnZXRDb21wb25lbnQiLCJnZXRDb21wb25lbnRzIiwiZ2V0Q29tcG9uZW50SW5DaGlsZHJlbiIsImdldENvbXBvbmVudHNJbkNoaWxkcmVuIiwiX2dldExvY2FsQm91bmRzIiwib25SZXN0b3JlIiwiZGVzdHJveSIsImRlcGVuZCIsIl9nZXREZXBlbmRDb21wb25lbnQiLCJlcnJvcklEIiwiX3N1cGVyIiwiX29uUHJlRGVzdHJveSIsInVuc2NoZWR1bGVBbGxDYWxsYmFja3MiLCJldmVudFRhcmdldHMiLCJpIiwibGVuZ3RoIiwidGFyZ2V0IiwidGFyZ2V0T2ZmIiwiQ0NfVEVTVCIsInN0b3AiLCJfbm9kZUFjdGl2YXRvciIsImRlc3Ryb3lDb21wIiwiX3JlbW92ZUNvbXBvbmVudCIsIl9pbnN0YW50aWF0ZSIsImNsb25lZCIsImluc3RhbnRpYXRlIiwiX2Nsb25lIiwic2NoZWR1bGUiLCJjYWxsYmFjayIsImludGVydmFsIiwicmVwZWF0IiwiZGVsYXkiLCJhc3NlcnRJRCIsImlzTmFOIiwibWFjcm8iLCJSRVBFQVRfRk9SRVZFUiIsInNjaGVkdWxlciIsImdldFNjaGVkdWxlciIsInBhdXNlZCIsImlzVGFyZ2V0UGF1c2VkIiwic2NoZWR1bGVPbmNlIiwidW5zY2hlZHVsZSIsImNhbGxiYWNrX2ZuIiwidW5zY2hlZHVsZUFsbEZvclRhcmdldCIsIl9yZXF1aXJlQ29tcG9uZW50IiwiX2V4ZWN1dGlvbk9yZGVyIiwiX2V4ZWN1dGVJbkVkaXRNb2RlIiwiX3BsYXlPbkZvY3VzIiwiX2Rpc2FsbG93TXVsdGlwbGUiLCJfaGVscCIsIl9jb21wb25lbnRNZW51SXRlbXMiLCJfYWRkTWVudUl0ZW0iLCJjbHMiLCJwYXRoIiwicHJpb3JpdHkiLCJwdXNoIiwiY29tcG9uZW50IiwibWVudVBhdGgiLCJwcm9wcyIsInJlcUNvbXAiLCJyZXF1aXJlQ29tcG9uZW50Iiwib3JkZXIiLCJleGVjdXRpb25PcmRlciIsImtleSIsInZhbCIsIndpbGxFeGVjdXRlSW5FZGl0TW9kZSIsImV4ZWN1dGVJbkVkaXRNb2RlIiwid2FybklEIiwibWVudVByaW9yaXR5IiwicHJvdG90eXBlIiwiX19zY3JpcHRVdWlkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjtJQUFBLElBQUEsT0FBQSxHQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUEsSUFBQSxPQUFBLE9BQUEsS0FBQSxXQUFBOzs7Ozs7Ozs7Ozs7O1FBMEJBLElBQUlBLFFBQUFBLEdBQVdDLE9BQUFBLENBQVEsc0JBQVJBLENBQWY7UUFDQSxJQUFJQyxFQUFBQSxHQUFLRCxPQUFBQSxDQUFRLGdCQUFSQSxDQUFUO1FBQ0EsSUFBSUUsV0FBQUEsR0FBYyxJQUFLRixDQUFBQSxPQUFBQSxDQUFRLDBCQUFSQSxFQUFMLENBQTBDLE1BQTFDLENBQWxCO1FBRUEsSUFBSUcsZ0JBQUFBLEdBQW1CSixRQUFBQSxDQUFTSyxLQUFUTCxDQUFlSSxnQkFBdEM7UUFDQSxJQUFJRSxjQUFBQSxHQUFpQk4sUUFBQUEsQ0FBU0ssS0FBVEwsQ0FBZU0sY0FBcEM7UUFnQkEsSUFBSUMsU0FBQUEsR0FBWUMsRUFBQUEsQ0FBR0MsS0FBSEQsQ0FBUztBQUFBLFlBQ3JCRSxJQUFBQSxFQUFNLGNBRGU7QUFBQSxZQUVyQkMsT0FBQUEsRUFBU1gsUUFGWTtBQUFBLFlBSXJCWSxJQUFBQSxFQUFNQyxTQUFBQSxHQUFZLFlBQVk7QUFBQSxnQkFDMUIsSUFBSUMsTUFBQUEsQ0FBT0MsTUFBUEQsSUFBaUJDLE1BQUFBLENBQU9DLGFBQTVCLEVBQTJDO0FBQUEsb0JBQ3ZDRCxNQUFBQSxDQUFPQyxhQUFQRCxDQUFxQkUsYUFBckJGLENBQW1DLElBQW5DQSxFQUR1QztBQUFBLGlCQURqQjtBQUFBLGdCQUkxQixLQUFLRyxHQUFMLEdBQVdDLE1BQUFBLENBQU9DLEtBQVBELENBQWFFLFNBQWJGLENBQXVCRyxJQUF2QkgsRUFBWCxDQUowQjtBQUFBLGdCQVkxQixLQUFLSSxjQUFMLEdB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Q0FBT0MsT0FBUEQsR0FBaUJySSxTQUFoQ0MiLCJmaWxlIjoiQ0NDb21wb25lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAxMy0yMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiAgd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbnZhciBDQ09iamVjdCA9IHJlcXVpcmUoJy4uL3BsYXRmb3JtL0NDT2JqZWN0Jyk7XG52YXIganMgPSByZXF1aXJlKCcuLi9wbGF0Zm9ybS9qcycpO1xudmFyIGlkR2VuZXJhdGVyID0gbmV3IChyZXF1aXJlKCcuLi9wbGF0Zm9ybS9pZC1nZW5lcmF0ZXInKSkoJ0NvbXAnKTtcblxudmFyIElzT25FbmFibGVDYWxsZWQgPSBDQ09iamVjdC5GbGFncy5Jc09uRW5hYmxlQ2FsbGVkO1xudmFyIElzT25Mb2FkQ2FsbGVkID0gQ0NPYmplY3QuRmxhZ3MuSXNPbkxvYWRDYWxsZWQ7XG5cbi8qKlxuICogISNlblxuICogQmFzZSBjbGFzcyBmb3IgZXZlcnl0aGluZyBhdHRhY2hlZCB0byBOb2RlKEVudGl0eSkuPGJyLz5cbiAqIDxici8+XG4gKiBOT1RFOiBOb3QgYWxsb3dlZCB0byB1c2UgY29uc3RydWN0aW9uIHBhcmFtZXRlcnMgZm9yIENvbXBvbmVudCdzIHN1YmNsYXNzZXMsXG4gKiAgICAgICBiZWNhdXNlIENvbXBvbmVudCBpcyBjcmVhdGVkIGJ5IHRoZSBlbmdpbmUuXG4gKiAhI3poXG4gKiDmiYDmnInpmYTliqDliLDoioLngrnnmoTln7rnsbvjgII8YnIvPlxuICogPGJyLz5cbiAqIOazqOaEj++8muS4jeWFgeiuuOS9v+eUqOe7hOS7tueahOWtkOexu+aehOmAoOWPguaVsO+8jOWboOS4uue7hOS7tuaYr+eUseW8leaTjuWIm+W7uueahOOAglxuICpcbiAqIEBjbGFzcyBDb21wb25lbnRcbiAqIEBleHRlbmRzIE9iamVjdFxuICovXG52YXIgQ29tcG9uZW50ID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5Db21wb25lbnQnLFxuICAgIGV4dGVuZHM6IENDT2JqZWN0LFxuXG4gICAgY3RvcjogQ0NfRURJVE9SID8gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAod2luZG93Ll9TY2VuZSAmJiBfU2NlbmUuQXNzZXRzV2F0Y2hlcikge1xuICAgICAgICAgICAgX1NjZW5lLkFzc2V0c1dhdGNoZXIuaW5pdENvbXBvbmVudCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pZCA9IEVkaXRvci5VdGlscy5VdWlkVXRpbHMudXVpZCgpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZWdpc3RlciBhbGwgcmVsYXRlZCBFdmVudFRhcmdldHMsXG4gICAgICAgICAqIGFsbCBldmVudCBjYWxsYmFja3Mgd2lsbCBiZSByZW1vdmVkIGluIF9vblByZURlc3Ryb3lcbiAgICAgICAgICogQHByb3BlcnR5IHtBcnJheX0gX19ldmVudFRhcmdldHNcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX19ldmVudFRhcmdldHMgPSBbXTtcbiAgICB9IDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9pZCA9IGlkR2VuZXJhdGVyLmdldE5ld0lkKCk7XG5cbiAgICAgICAgdGhpcy5fX2V2ZW50VGFyZ2V0cyA9IFtdO1xuICAgIH0sXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIFRoZSBub2RlIHRoaXMgY29tcG9uZW50IGlzIGF0dGFjaGVkIHRvLiBBIGNvbXBvbmVudCBpcyBhbHdheXMgYXR0YWNoZWQgdG8gYSBub2RlLlxuICAgICAgICAgKiAhI3poIOivpee7hOS7tuiiq+mZhOWKoOWIsOeahOiKgueCueOAgue7hOS7tuaAu+S8mumZhOWKoOWIsOS4gOS4quiKgueCueOAglxuICAgICAgICAgKiBAcHJvcGVydHkgbm9kZVxuICAgICAgICAgKiBAdHlwZSB7Tm9kZX1cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogY2MubG9nKGNvbXAubm9kZSk7XG4gICAgICAgICAqL1xuICAgICAgICBub2RlOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBnZXQgKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9uYW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgY2xhc3NOYW1lID0gY2MuanMuZ2V0Q2xhc3NOYW1lKHRoaXMpO1xuICAgICAgICAgICAgICAgIHZhciB0cmltTGVmdCA9IGNsYXNzTmFtZS5sYXN0SW5kZXhPZignLicpO1xuICAgICAgICAgICAgICAgIGlmICh0cmltTGVmdCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5zbGljZSh0cmltTGVmdCArIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ub2RlLm5hbWUgKyAnPCcgKyBjbGFzc05hbWUgKyAnPic7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0ICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX25hbWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2aXNpYmxlOiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIFRoZSB1dWlkIGZvciBlZGl0b3IuXG4gICAgICAgICAqICEjemgg57uE5Lu255qEIHV1aWTvvIznlKjkuo7nvJbovpHlmajjgIJcbiAgICAgICAgICogQHByb3BlcnR5IHV1aWRcbiAgICAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgICAgICogQHJlYWRPbmx5XG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIGNjLmxvZyhjb21wLnV1aWQpO1xuICAgICAgICAgKi9cbiAgICAgICAgdXVpZDoge1xuICAgICAgICAgICAgZ2V0ICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICBfX3NjcmlwdEFzc2V0OiBDQ19FRElUT1IgJiYge1xuICAgICAgICAgICAgZ2V0ICgpIHt9LFxuICAgICAgICAgICAgLy9zZXQgKHZhbHVlKSB7XG4gICAgICAgICAgICAvLyAgICBpZiAodGhpcy5fX3NjcmlwdFV1aWQgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgaWYgKHZhbHVlICYmIEVkaXRvci5VdGlscy5VdWlkVXRpbHMuaXNVdWlkKHZhbHVlLl91dWlkKSkge1xuICAgICAgICAgICAgLy8gICAgICAgICAgICB2YXIgY2xhc3NJZCA9IEVkaXRvci5VdGlscy5VdWlkVXRpbHMuY29tcHJlc3NVdWlkKHZhbHVlLl91dWlkKTtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgdmFyIE5ld0NvbXAgPSBjYy5qcy5fZ2V0Q2xhc3NCeUlkKGNsYXNzSWQpO1xuICAgICAgICAgICAgLy8gICAgICAgICAgICBpZiAoanMuaXNDaGlsZENsYXNzT2YoTmV3Q29tcCwgY2MuQ29tcG9uZW50KSkge1xuICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgY2Mud2FybignU29ycnksIHJlcGxhY2luZyBjb21wb25lbnQgc2NyaXB0IGlzIG5vdCB5ZXQgaW1wbGVtZW50ZWQuJyk7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAvL0VkaXRvci5JcGMuc2VuZFRvV2lucygncmVsb2FkOndpbmRvdy1zY3JpcHRzJywgRWRpdG9yLl9TYW5kYm94LmNvbXBpbGVkKTtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgIGNjLmVycm9yKCdDYW4gbm90IGZpbmQgYSBjb21wb25lbnQgaW4gdGhlIHNjcmlwdCB3aGljaCB1dWlkIGlzIFwiJXNcIi4nLCB2YWx1ZS5fdXVpZCk7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vICAgICAgICB9XG4gICAgICAgICAgICAvLyAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgIGNjLmVycm9yKCdJbnZhbGlkIFNjcmlwdCcpO1xuICAgICAgICAgICAgLy8gICAgICAgIH1cbiAgICAgICAgICAgIC8vICAgIH1cbiAgICAgICAgICAgIC8vfSxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnU2NyaXB0JyxcbiAgICAgICAgICAgIHR5cGU6IGNjLl9TY3JpcHQsXG4gICAgICAgICAgICB0b29sdGlwOiBDQ19ERVYgJiYgJ2kxOG46SU5TUEVDVE9SLmNvbXBvbmVudC5zY3JpcHQnXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwcm9wZXJ0eSBfZW5hYmxlZFxuICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIF9lbmFibGVkOiB0cnVlLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIGluZGljYXRlcyB3aGV0aGVyIHRoaXMgY29tcG9uZW50IGlzIGVuYWJsZWQgb3Igbm90LlxuICAgICAgICAgKiAhI3poIOihqOekuuivpee7hOS7tuiHqui6q+aYr+WQpuWQr+eUqOOAglxuICAgICAgICAgKiBAcHJvcGVydHkgZW5hYmxlZFxuICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiBjb21wLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgKiBjYy5sb2coY29tcC5lbmFibGVkKTtcbiAgICAgICAgICovXG4gICAgICAgIGVuYWJsZWQ6IHtcbiAgICAgICAgICAgIGdldCAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VuYWJsZWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0ICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9lbmFibGVkICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbmFibGVkID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm5vZGUuX2FjdGl2ZUluSGllcmFyY2h5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29tcFNjaGVkdWxlciA9IGNjLmRpcmVjdG9yLl9jb21wU2NoZWR1bGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcFNjaGVkdWxlci5lbmFibGVDb21wKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcFNjaGVkdWxlci5kaXNhYmxlQ29tcCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGFuaW1hdGFibGU6IHRydWVcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBpbmRpY2F0ZXMgd2hldGhlciB0aGlzIGNvbXBvbmVudCBpcyBlbmFibGVkIGFuZCBpdHMgbm9kZSBpcyBhbHNvIGFjdGl2ZSBpbiB0aGUgaGllcmFyY2h5LlxuICAgICAgICAgKiAhI3poIOihqOekuuivpee7hOS7tuaYr+WQpuiiq+WQr+eUqOW5tuS4lOaJgOWcqOeahOiKgueCueS5n+WkhOS6jua/gOa0u+eKtuaAgeOAglxuICAgICAgICAgKiBAcHJvcGVydHkgZW5hYmxlZEluSGllcmFyY2h5XG4gICAgICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogY2MubG9nKGNvbXAuZW5hYmxlZEluSGllcmFyY2h5KTtcbiAgICAgICAgICovXG4gICAgICAgIGVuYWJsZWRJbkhpZXJhcmNoeToge1xuICAgICAgICAgICAgZ2V0ICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZW5hYmxlZCAmJiB0aGlzLm5vZGUuX2FjdGl2ZUluSGllcmFyY2h5O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gUmV0dXJucyBhIHZhbHVlIHdoaWNoIHVzZWQgdG8gaW5kaWNhdGUgdGhlIG9uTG9hZCBnZXQgY2FsbGVkIG9yIG5vdC5cbiAgICAgICAgICogISN6aCDov5Tlm57kuIDkuKrlgLznlKjmnaXliKTmlq0gb25Mb2FkIOaYr+WQpuiiq+iwg+eUqOi/h++8jOS4jeetieS6jiAwIOaXtuiwg+eUqOi/h++8jOetieS6jiAwIOaXtuacquiwg+eUqOOAglxuICAgICAgICAgKiBAcHJvcGVydHkgX2lzT25Mb2FkQ2FsbGVkXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiBjYy5sb2codGhpcy5faXNPbkxvYWRDYWxsZWQgPiAwKTtcbiAgICAgICAgICovXG4gICAgICAgIF9pc09uTG9hZENhbGxlZDoge1xuICAgICAgICAgICAgZ2V0ICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fb2JqRmxhZ3MgJiBJc09uTG9hZENhbGxlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9LFxuXG4gICAgLy8gTElGRUNZQ0xFIE1FVEhPRFNcblxuICAgIC8vIEZpcmViYWxsIHByb3ZpZGVzIGxpZmVjeWNsZSBtZXRob2RzIHRoYXQgeW91IGNhbiBzcGVjaWZ5IHRvIGhvb2sgaW50byB0aGlzIHByb2Nlc3MuXG4gICAgLy8gV2UgcHJvdmlkZSBQcmUgbWV0aG9kcywgd2hpY2ggYXJlIGNhbGxlZCByaWdodCBiZWZvcmUgc29tZXRoaW5nIGhhcHBlbnMsIGFuZCBQb3N0IG1ldGhvZHMgd2hpY2ggYXJlIGNhbGxlZCByaWdodCBhZnRlciBzb21ldGhpbmcgaGFwcGVucy5cblxuICAgIC8qKlxuICAgICAqICEjZW4gVXBkYXRlIGlzIGNhbGxlZCBldmVyeSBmcmFtZSwgaWYgdGhlIENvbXBvbmVudCBpcyBlbmFibGVkLjxici8+XG4gICAgICogVGhpcyBpcyBhIGxpZmVjeWNsZSBtZXRob2QuIEl0IG1heSBub3QgYmUgaW1wbGVtZW50ZWQgaW4gdGhlIHN1cGVyIGNsYXNzLiBZb3UgY2FuIG9ubHkgY2FsbCBpdHMgc3VwZXIgY2xhc3MgbWV0aG9kIGluc2lkZSBpdC4gSXQgc2hvdWxkIG5vdCBiZSBjYWxsZWQgbWFudWFsbHkgZWxzZXdoZXJlLlxuICAgICAqICEjemgg5aaC5p6c6K+l57uE5Lu25ZCv55So77yM5YiZ5q+P5bin6LCD55SoIHVwZGF0ZeOAgjxici8+XG4gICAgICog6K+l5pa55rOV5Li655Sf5ZG95ZGo5pyf5pa55rOV77yM54i257G75pyq5b+F5Lya5pyJ5a6e546w44CC5bm25LiU5L2g5Y+q6IO95Zyo6K+l5pa55rOV5YaF6YOo6LCD55So54i257G755qE5a6e546w77yM5LiN5Y+v5Zyo5YW25a6D5Zyw5pa555u05o6l6LCD55So6K+l5pa55rOV44CCXG4gICAgICogQG1ldGhvZCB1cGRhdGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZHQgLSB0aGUgZGVsdGEgdGltZSBpbiBzZWNvbmRzIGl0IHRvb2sgdG8gY29tcGxldGUgdGhlIGxhc3QgZnJhbWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgdXBkYXRlOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogISNlbiBMYXRlVXBkYXRlIGlzIGNhbGxlZCBldmVyeSBmcmFtZSwgaWYgdGhlIENvbXBvbmVudCBpcyBlbmFibGVkLjxici8+XG4gICAgICogVGhpcyBpcyBhIGxpZmVjeWNsZSBtZXRob2QuIEl0IG1heSBub3QgYmUgaW1wbGVtZW50ZWQgaW4gdGhlIHN1cGVyIGNsYXNzLiBZb3UgY2FuIG9ubHkgY2FsbCBpdHMgc3VwZXIgY2xhc3MgbWV0aG9kIGluc2lkZSBpdC4gSXQgc2hvdWxkIG5vdCBiZSBjYWxsZWQgbWFudWFsbHkgZWxzZXdoZXJlLlxuICAgICAqICEjemgg5aaC5p6c6K+l57uE5Lu25ZCv55So77yM5YiZ5q+P5bin6LCD55SoIExhdGVVcGRhdGXjgII8YnIvPlxuICAgICAqIOivpeaWueazleS4uueUn+WRveWRqOacn+aWueazle+8jOeItuexu+acquW/heS8muacieWunueOsOOAguW5tuS4lOS9oOWPquiDveWcqOivpeaWueazleWGhemDqOiwg+eUqOeItuexu+eahOWunueOsO+8jOS4jeWPr+WcqOWFtuWug+WcsOaWueebtOaOpeiwg+eUqOivpeaWueazleOAglxuICAgICAqIEBtZXRob2QgbGF0ZVVwZGF0ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBsYXRlVXBkYXRlOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogYF9fcHJlbG9hZGAgaXMgY2FsbGVkIGJlZm9yZSBldmVyeSBvbkxvYWQuXG4gICAgICogSXQgaXMgdXNlZCB0byBpbml0aWFsaXplIHRoZSBidWlsdGluIGNvbXBvbmVudHMgaW50ZXJuYWxseSxcbiAgICAgKiB0byBhdm9pZCBjaGVja2luZyB3aGV0aGVyIG9uTG9hZCBpcyBjYWxsZWQgYmVmb3JlIGV2ZXJ5IHB1YmxpYyBtZXRob2QgY2FsbHMuXG4gICAgICogVGhpcyBtZXRob2Qgc2hvdWxkIGJlIHJlbW92ZWQgaWYgc2NyaXB0IHByaW9yaXR5IGlzIHN1cHBvcnRlZC5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgX19wcmVsb2FkXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfX3ByZWxvYWQ6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogV2hlbiBhdHRhY2hpbmcgdG8gYW4gYWN0aXZlIG5vZGUgb3IgaXRzIG5vZGUgZmlyc3QgYWN0aXZhdGVkLlxuICAgICAqIG9uTG9hZCBpcyBhbHdheXMgY2FsbGVkIGJlZm9yZSBhbnkgc3RhcnQgZnVuY3Rpb25zLCB0aGlzIGFsbG93cyB5b3UgdG8gb3JkZXIgaW5pdGlhbGl6YXRpb24gb2Ygc2NyaXB0cy48YnIvPlxuICAgICAqIFRoaXMgaXMgYSBsaWZlY3ljbGUgbWV0aG9kLiBJdCBtYXkgbm90IGJlIGltcGxlbWVudGVkIGluIHRoZSBzdXBlciBjbGFzcy4gWW91IGNhbiBvbmx5IGNhbGwgaXRzIHN1cGVyIGNsYXNzIG1ldGhvZCBpbnNpZGUgaXQuIEl0IHNob3VsZCBub3QgYmUgY2FsbGVkIG1hbnVhbGx5IGVsc2V3aGVyZS5cbiAgICAgKiAhI3poXG4gICAgICog5b2T6ZmE5Yqg5Yiw5LiA5Liq5r+A5rS755qE6IqC54K55LiK5oiW6ICF5YW26IqC54K556ys5LiA5qyh5r+A5rS75pe25YCZ6LCD55So44CCb25Mb2FkIOaAu+aYr+S8muWcqOS7u+S9lSBzdGFydCDmlrnms5XosIPnlKjliY3miafooYzvvIzov5nog73nlKjkuo7lronmjpLohJrmnKznmoTliJ3lp4vljJbpobrluo/jgII8YnIvPlxuICAgICAqIOivpeaWueazleS4uueUn+WRveWRqOacn+aWueazle+8jOeItuexu+acquW/heS8muacieWunueOsOOAguW5tuS4lOS9oOWPquiDveWcqOivpeaWueazleWGhemDqOiwg+eUqOeItuexu+eahOWunueOsO+8jOS4jeWPr+WcqOWFtuWug+WcsOaWueebtOaOpeiwg+eUqOivpeaWueazleOAglxuICAgICAqIEBtZXRob2Qgb25Mb2FkXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIG9uTG9hZDogbnVsbCxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBDYWxsZWQgYmVmb3JlIGFsbCBzY3JpcHRzJyB1cGRhdGUgaWYgdGhlIENvbXBvbmVudCBpcyBlbmFibGVkIHRoZSBmaXJzdCB0aW1lLlxuICAgICAqIFVzdWFsbHkgdXNlZCB0byBpbml0aWFsaXplIHNvbWUgbG9naWMgd2hpY2ggbmVlZCB0byBiZSBjYWxsZWQgYWZ0ZXIgYWxsIGNvbXBvbmVudHMnIGBvbmxvYWRgIG1ldGhvZHMgY2FsbGVkLjxici8+XG4gICAgICogVGhpcyBpcyBhIGxpZmVjeWNsZSBtZXRob2QuIEl0IG1heSBub3QgYmUgaW1wbGVtZW50ZWQgaW4gdGhlIHN1cGVyIGNsYXNzLiBZb3UgY2FuIG9ubHkgY2FsbCBpdHMgc3VwZXIgY2xhc3MgbWV0aG9kIGluc2lkZSBpdC4gSXQgc2hvdWxkIG5vdCBiZSBjYWxsZWQgbWFudWFsbHkgZWxzZXdoZXJlLlxuICAgICAqICEjemhcbiAgICAgKiDlpoLmnpzor6Xnu4Tku7bnrKzkuIDmrKHlkK/nlKjvvIzliJnlnKjmiYDmnInnu4Tku7bnmoQgdXBkYXRlIOS5i+WJjeiwg+eUqOOAgumAmuW4uOeUqOS6jumcgOimgeWcqOaJgOaciee7hOS7tueahCBvbkxvYWQg5Yid5aeL5YyW5a6M5q+V5ZCO5omn6KGM55qE6YC76L6R44CCPGJyLz5cbiAgICAgKiDor6Xmlrnms5XkuLrnlJ/lkb3lkajmnJ/mlrnms5XvvIzniLbnsbvmnKrlv4XkvJrmnInlrp7njrDjgILlubbkuJTkvaDlj6rog73lnKjor6Xmlrnms5XlhoXpg6josIPnlKjniLbnsbvnmoTlrp7njrDvvIzkuI3lj6/lnKjlhbblroPlnLDmlrnnm7TmjqXosIPnlKjor6Xmlrnms5XjgIJcbiAgICAgKiBAbWV0aG9kIHN0YXJ0XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHN0YXJ0OiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogISNlbiBDYWxsZWQgd2hlbiB0aGlzIGNvbXBvbmVudCBiZWNvbWVzIGVuYWJsZWQgYW5kIGl0cyBub2RlIGlzIGFjdGl2ZS48YnIvPlxuICAgICAqIFRoaXMgaXMgYSBsaWZlY3ljbGUgbWV0aG9kLiBJdCBtYXkgbm90IGJlIGltcGxlbWVudGVkIGluIHRoZSBzdXBlciBjbGFzcy4gWW91IGNhbiBvbmx5IGNhbGwgaXRzIHN1cGVyIGNsYXNzIG1ldGhvZCBpbnNpZGUgaXQuIEl0IHNob3VsZCBub3QgYmUgY2FsbGVkIG1hbnVhbGx5IGVsc2V3aGVyZS5cbiAgICAgKiAhI3poIOW9k+ivpee7hOS7tuiiq+WQr+eUqO+8jOW5tuS4lOWug+eahOiKgueCueS5n+a/gOa0u+aXtuOAgjxici8+XG4gICAgICog6K+l5pa55rOV5Li655Sf5ZG95ZGo5pyf5pa55rOV77yM54i257G75pyq5b+F5Lya5pyJ5a6e546w44CC5bm25LiU5L2g5Y+q6IO95Zyo6K+l5pa55rOV5YaF6YOo6LCD55So54i257G755qE5a6e546w77yM5LiN5Y+v5Zyo5YW25a6D5Zyw5pa555u05o6l6LCD55So6K+l5pa55rOV44CCXG4gICAgICogQG1ldGhvZCBvbkVuYWJsZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBvbkVuYWJsZTogbnVsbCxcblxuICAgIC8qKlxuICAgICAqICEjZW4gQ2FsbGVkIHdoZW4gdGhpcyBjb21wb25lbnQgYmVjb21lcyBkaXNhYmxlZCBvciBpdHMgbm9kZSBiZWNvbWVzIGluYWN0aXZlLjxici8+XG4gICAgICogVGhpcyBpcyBhIGxpZmVjeWNsZSBtZXRob2QuIEl0IG1heSBub3QgYmUgaW1wbGVtZW50ZWQgaW4gdGhlIHN1cGVyIGNsYXNzLiBZb3UgY2FuIG9ubHkgY2FsbCBpdHMgc3VwZXIgY2xhc3MgbWV0aG9kIGluc2lkZSBpdC4gSXQgc2hvdWxkIG5vdCBiZSBjYWxsZWQgbWFudWFsbHkgZWxzZXdoZXJlLlxuICAgICAqICEjemgg5b2T6K+l57uE5Lu26KKr56aB55So5oiW6IqC54K55Y+Y5Li65peg5pWI5pe26LCD55So44CCPGJyLz5cbiAgICAgKiDor6Xmlrnms5XkuLrnlJ/lkb3lkajmnJ/mlrnms5XvvIzniLbnsbvmnKrlv4XkvJrmnInlrp7njrDjgILlubbkuJTkvaDlj6rog73lnKjor6Xmlrnms5XlhoXpg6josIPnlKjniLbnsbvnmoTlrp7njrDvvIzkuI3lj6/lnKjlhbblroPlnLDmlrnnm7TmjqXosIPnlKjor6Xmlrnms5XjgIJcbiAgICAgKiBAbWV0aG9kIG9uRGlzYWJsZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBvbkRpc2FibGU6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIENhbGxlZCB3aGVuIHRoaXMgY29tcG9uZW50IHdpbGwgYmUgZGVzdHJveWVkLjxici8+XG4gICAgICogVGhpcyBpcyBhIGxpZmVjeWNsZSBtZXRob2QuIEl0IG1heSBub3QgYmUgaW1wbGVtZW50ZWQgaW4gdGhlIHN1cGVyIGNsYXNzLiBZb3UgY2FuIG9ubHkgY2FsbCBpdHMgc3VwZXIgY2xhc3MgbWV0aG9kIGluc2lkZSBpdC4gSXQgc2hvdWxkIG5vdCBiZSBjYWxsZWQgbWFudWFsbHkgZWxzZXdoZXJlLlxuICAgICAqICEjemgg5b2T6K+l57uE5Lu26KKr6ZSA5q+B5pe26LCD55SoPGJyLz5cbiAgICAgKiDor6Xmlrnms5XkuLrnlJ/lkb3lkajmnJ/mlrnms5XvvIzniLbnsbvmnKrlv4XkvJrmnInlrp7njrDjgILlubbkuJTkvaDlj6rog73lnKjor6Xmlrnms5XlhoXpg6josIPnlKjniLbnsbvnmoTlrp7njrDvvIzkuI3lj6/lnKjlhbblroPlnLDmlrnnm7TmjqXosIPnlKjor6Xmlrnms5XjgIJcbiAgICAgKiBAbWV0aG9kIG9uRGVzdHJveVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBvbkRlc3Ryb3k6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIG9uRm9jdXNJbkVkaXRvclxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBvbkZvY3VzSW5FZGl0b3I6IG51bGwsXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBvbkxvc3RGb2N1c0luRWRpdG9yXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIG9uTG9zdEZvY3VzSW5FZGl0b3I6IG51bGwsXG4gICAgLyoqXG4gICAgICogISNlbiBDYWxsZWQgdG8gaW5pdGlhbGl6ZSB0aGUgY29tcG9uZW50IG9yIG5vZGXigJlzIHByb3BlcnRpZXMgd2hlbiBhZGRpbmcgdGhlIGNvbXBvbmVudCB0aGUgZmlyc3QgdGltZSBvciB3aGVuIHRoZSBSZXNldCBjb21tYW5kIGlzIHVzZWQuIFRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWQgaW4gZWRpdG9yLlxuICAgICAqICEjemgg55So5p2l5Yid5aeL5YyW57uE5Lu25oiW6IqC54K555qE5LiA5Lqb5bGe5oCn77yM5b2T6K+l57uE5Lu26KKr56ys5LiA5qyh5re75Yqg5Yiw6IqC54K55LiK5oiW55So5oi354K55Ye75LqG5a6D55qEIFJlc2V0IOiPnOWNleaXtuiwg+eUqOOAgui/meS4quWbnuiwg+WPquS8muWcqOe8lui+keWZqOS4i+iwg+eUqOOAglxuICAgICAqIEBtZXRob2QgcmVzZXRJbkVkaXRvclxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICByZXNldEluRWRpdG9yOiBudWxsLFxuXG4gICAgLy8gUFVCTElDXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIEFkZHMgYSBjb21wb25lbnQgY2xhc3MgdG8gdGhlIG5vZGUuIFlvdSBjYW4gYWxzbyBhZGQgY29tcG9uZW50IHRvIG5vZGUgYnkgcGFzc2luZyBpbiB0aGUgbmFtZSBvZiB0aGUgc2NyaXB0LlxuICAgICAqICEjemgg5ZCR6IqC54K55re75Yqg5LiA5Liq57uE5Lu257G777yM5L2g6L+Y5Y+v5Lul6YCa6L+H5Lyg5YWl6ISa5pys55qE5ZCN56ew5p2l5re75Yqg57uE5Lu244CCXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGFkZENvbXBvbmVudFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258U3RyaW5nfSB0eXBlT3JDbGFzc05hbWUgLSB0aGUgY29uc3RydWN0b3Igb3IgdGhlIGNsYXNzIG5hbWUgb2YgdGhlIGNvbXBvbmVudCB0byBhZGRcbiAgICAgKiBAcmV0dXJuIHtDb21wb25lbnR9IC0gdGhlIG5ld2x5IGFkZGVkIGNvbXBvbmVudFxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIHNwcml0ZSA9IG5vZGUuYWRkQ29tcG9uZW50KGNjLlNwcml0ZSk7XG4gICAgICogdmFyIHRlc3QgPSBub2RlLmFkZENvbXBvbmVudChcIlRlc3RcIik7XG4gICAgICogQHR5cGVzY3JpcHRcbiAgICAgKiBhZGRDb21wb25lbnQ8VCBleHRlbmRzIENvbXBvbmVudD4odHlwZToge25ldygpOiBUfSk6IFRcbiAgICAgKiBhZGRDb21wb25lbnQoY2xhc3NOYW1lOiBzdHJpbmcpOiBhbnlcbiAgICAgKi9cbiAgICBhZGRDb21wb25lbnQgKHR5cGVPckNsYXNzTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5ub2RlLmFkZENvbXBvbmVudCh0eXBlT3JDbGFzc05hbWUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogUmV0dXJucyB0aGUgY29tcG9uZW50IG9mIHN1cHBsaWVkIHR5cGUgaWYgdGhlIG5vZGUgaGFzIG9uZSBhdHRhY2hlZCwgbnVsbCBpZiBpdCBkb2Vzbid0Ljxici8+XG4gICAgICogWW91IGNhbiBhbHNvIGdldCBjb21wb25lbnQgaW4gdGhlIG5vZGUgYnkgcGFzc2luZyBpbiB0aGUgbmFtZSBvZiB0aGUgc2NyaXB0LlxuICAgICAqICEjemhcbiAgICAgKiDojrflj5boioLngrnkuIrmjIflrprnsbvlnovnmoTnu4Tku7bvvIzlpoLmnpzoioLngrnmnInpmYTliqDmjIflrprnsbvlnovnmoTnu4Tku7bvvIzliJnov5Tlm57vvIzlpoLmnpzmsqHmnInliJnkuLrnqbrjgII8YnIvPlxuICAgICAqIOS8oOWFpeWPguaVsOS5n+WPr+S7peaYr+iEmuacrOeahOWQjeensOOAglxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRDb21wb25lbnRcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gdHlwZU9yQ2xhc3NOYW1lXG4gICAgICogQHJldHVybiB7Q29tcG9uZW50fVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHNwcml0ZSBjb21wb25lbnQuXG4gICAgICogdmFyIHNwcml0ZSA9IG5vZGUuZ2V0Q29tcG9uZW50KGNjLlNwcml0ZSk7XG4gICAgICogLy8gZ2V0IGN1c3RvbSB0ZXN0IGNhbHNzLlxuICAgICAqIHZhciB0ZXN0ID0gbm9kZS5nZXRDb21wb25lbnQoXCJUZXN0XCIpO1xuICAgICAqIEB0eXBlc2NyaXB0XG4gICAgICogZ2V0Q29tcG9uZW50PFQgZXh0ZW5kcyBDb21wb25lbnQ+KHR5cGU6IHtwcm90b3R5cGU6IFR9KTogVFxuICAgICAqIGdldENvbXBvbmVudChjbGFzc05hbWU6IHN0cmluZyk6IGFueVxuICAgICAqL1xuICAgIGdldENvbXBvbmVudCAodHlwZU9yQ2xhc3NOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KHR5cGVPckNsYXNzTmFtZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gUmV0dXJucyBhbGwgY29tcG9uZW50cyBvZiBzdXBwbGllZCBUeXBlIGluIHRoZSBub2RlLlxuICAgICAqICEjemgg6L+U5Zue6IqC54K55LiK5oyH5a6a57G75Z6L55qE5omA5pyJ57uE5Lu244CCXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldENvbXBvbmVudHNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gdHlwZU9yQ2xhc3NOYW1lXG4gICAgICogQHJldHVybiB7Q29tcG9uZW50W119XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgc3ByaXRlcyA9IG5vZGUuZ2V0Q29tcG9uZW50cyhjYy5TcHJpdGUpO1xuICAgICAqIHZhciB0ZXN0cyA9IG5vZGUuZ2V0Q29tcG9uZW50cyhcIlRlc3RcIik7XG4gICAgICogQHR5cGVzY3JpcHRcbiAgICAgKiBnZXRDb21wb25lbnRzPFQgZXh0ZW5kcyBDb21wb25lbnQ+KHR5cGU6IHtwcm90b3R5cGU6IFR9KTogVFtdXG4gICAgICogZ2V0Q29tcG9uZW50cyhjbGFzc05hbWU6IHN0cmluZyk6IGFueVtdXG4gICAgICovXG4gICAgZ2V0Q29tcG9uZW50cyAodHlwZU9yQ2xhc3NOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50cyh0eXBlT3JDbGFzc05hbWUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFJldHVybnMgdGhlIGNvbXBvbmVudCBvZiBzdXBwbGllZCB0eXBlIGluIGFueSBvZiBpdHMgY2hpbGRyZW4gdXNpbmcgZGVwdGggZmlyc3Qgc2VhcmNoLlxuICAgICAqICEjemgg6YCS5b2S5p+l5om+5omA5pyJ5a2Q6IqC54K55Lit56ys5LiA5Liq5Yy56YWN5oyH5a6a57G75Z6L55qE57uE5Lu244CCXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldENvbXBvbmVudEluQ2hpbGRyZW5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gdHlwZU9yQ2xhc3NOYW1lXG4gICAgICogQHJldHVybnMge0NvbXBvbmVudH1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBzcHJpdGUgPSBub2RlLmdldENvbXBvbmVudEluQ2hpbGRyZW4oY2MuU3ByaXRlKTtcbiAgICAgKiB2YXIgVGVzdCA9IG5vZGUuZ2V0Q29tcG9uZW50SW5DaGlsZHJlbihcIlRlc3RcIik7XG4gICAgICogQHR5cGVzY3JpcHRcbiAgICAgKiBnZXRDb21wb25lbnRJbkNoaWxkcmVuPFQgZXh0ZW5kcyBDb21wb25lbnQ+KHR5cGU6IHtwcm90b3R5cGU6IFR9KTogVFxuICAgICAqIGdldENvbXBvbmVudEluQ2hpbGRyZW4oY2xhc3NOYW1lOiBzdHJpbmcpOiBhbnlcbiAgICAgKi9cbiAgICBnZXRDb21wb25lbnRJbkNoaWxkcmVuICh0eXBlT3JDbGFzc05hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZS5nZXRDb21wb25lbnRJbkNoaWxkcmVuKHR5cGVPckNsYXNzTmFtZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gUmV0dXJucyB0aGUgY29tcG9uZW50cyBvZiBzdXBwbGllZCB0eXBlIGluIHNlbGYgb3IgYW55IG9mIGl0cyBjaGlsZHJlbiB1c2luZyBkZXB0aCBmaXJzdCBzZWFyY2guXG4gICAgICogISN6aCDpgJLlvZLmn6Xmib7oh6rouqvmiJbmiYDmnInlrZDoioLngrnkuK3mjIflrprnsbvlnovnmoTnu4Tku7ZcbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0Q29tcG9uZW50c0luQ2hpbGRyZW5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gdHlwZU9yQ2xhc3NOYW1lXG4gICAgICogQHJldHVybnMge0NvbXBvbmVudFtdfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIHNwcml0ZXMgPSBub2RlLmdldENvbXBvbmVudHNJbkNoaWxkcmVuKGNjLlNwcml0ZSk7XG4gICAgICogdmFyIHRlc3RzID0gbm9kZS5nZXRDb21wb25lbnRzSW5DaGlsZHJlbihcIlRlc3RcIik7XG4gICAgICogQHR5cGVzY3JpcHRcbiAgICAgKiBnZXRDb21wb25lbnRzSW5DaGlsZHJlbjxUIGV4dGVuZHMgQ29tcG9uZW50Pih0eXBlOiB7cHJvdG90eXBlOiBUfSk6IFRbXVxuICAgICAqIGdldENvbXBvbmVudHNJbkNoaWxkcmVuKGNsYXNzTmFtZTogc3RyaW5nKTogYW55W11cbiAgICAgKi9cbiAgICBnZXRDb21wb25lbnRzSW5DaGlsZHJlbiAodHlwZU9yQ2xhc3NOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50c0luQ2hpbGRyZW4odHlwZU9yQ2xhc3NOYW1lKTtcbiAgICB9LFxuXG4gICAgLy8gVklSVFVBTFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIElmIHRoZSBjb21wb25lbnQncyBib3VuZGluZyBib3ggaXMgZGlmZmVyZW50IGZyb20gdGhlIG5vZGUncywgeW91IGNhbiBpbXBsZW1lbnQgdGhpcyBtZXRob2QgdG8gc3VwcGx5XG4gICAgICogYSBjdXN0b20gYXhpcyBhbGlnbmVkIGJvdW5kaW5nIGJveCAoQUFCQiksIHNvIHRoZSBlZGl0b3IncyBzY2VuZSB2aWV3IGNhbiBwZXJmb3JtIGhpdCB0ZXN0IHByb3Blcmx5LlxuICAgICAqICEjemhcbiAgICAgKiDlpoLmnpznu4Tku7bnmoTljIXlm7Tnm5LkuI7oioLngrnkuI3lkIzvvIzmgqjlj6/ku6Xlrp7njrDor6Xmlrnms5Xku6Xmj5Dkvpvoh6rlrprkuYnnmoTovbTlkJHlr7npvZDnmoTljIXlm7Tnm5LvvIhBQUJC77yJ77yMXG4gICAgICog5Lul5L6/57yW6L6R5Zmo55qE5Zy65pmv6KeG5Zu+5Y+v5Lul5q2j56Gu5Zyw5omn6KGM54K56YCJ5rWL6K+V44CCXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIF9nZXRMb2NhbEJvdW5kc1xuICAgICAqIEBwYXJhbSB7UmVjdH0gb3V0X3JlY3QgLSB0aGUgUmVjdCB0byByZWNlaXZlIHRoZSBib3VuZGluZyBib3hcbiAgICAgKi9cbiAgICBfZ2V0TG9jYWxCb3VuZHM6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogb25SZXN0b3JlIGlzIGNhbGxlZCBhZnRlciB0aGUgdXNlciBjbGlja3MgdGhlIFJlc2V0IGl0ZW0gaW4gdGhlIEluc3BlY3RvcidzIGNvbnRleHQgbWVudSBvciBwZXJmb3Jtc1xuICAgICAqIGFuIHVuZG8gb3BlcmF0aW9uIG9uIHRoaXMgY29tcG9uZW50Ljxici8+XG4gICAgICogPGJyLz5cbiAgICAgKiBJZiB0aGUgY29tcG9uZW50IGNvbnRhaW5zIHRoZSBcImludGVybmFsIHN0YXRlXCIsIHNob3J0IGZvciBcInRlbXBvcmFyeSBtZW1iZXIgdmFyaWFibGVzIHdoaWNoIG5vdCBpbmNsdWRlZDxici8+XG4gICAgICogaW4gaXRzIENDQ2xhc3MgcHJvcGVydGllc1wiLCB0aGVuIHlvdSBtYXkgbmVlZCB0byBpbXBsZW1lbnQgdGhpcyBmdW5jdGlvbi48YnIvPlxuICAgICAqIDxici8+XG4gICAgICogVGhlIGVkaXRvciB3aWxsIGNhbGwgdGhlIGdldHNldCBhY2Nlc3NvcnMgb2YgeW91ciBjb21wb25lbnQgdG8gcmVjb3JkL3Jlc3RvcmUgdGhlIGNvbXBvbmVudCdzIHN0YXRlPGJyLz5cbiAgICAgKiBmb3IgdW5kby9yZWRvIG9wZXJhdGlvbi4gSG93ZXZlciwgaW4gZXh0cmVtZSBjYXNlcywgaXQgbWF5IG5vdCB3b3JrcyB3ZWxsLiBUaGVuIHlvdSBzaG91bGQgaW1wbGVtZW50PGJyLz5cbiAgICAgKiB0aGlzIGZ1bmN0aW9uIHRvIG1hbnVhbGx5IHN5bmNocm9uaXplIHlvdXIgY29tcG9uZW50J3MgXCJpbnRlcm5hbCBzdGF0ZXNcIiB3aXRoIGl0cyBwdWJsaWMgcHJvcGVydGllcy48YnIvPlxuICAgICAqIE9uY2UgeW91IGltcGxlbWVudCB0aGlzIGZ1bmN0aW9uLCBhbGwgdGhlIGdldHNldCBhY2Nlc3NvcnMgb2YgeW91ciBjb21wb25lbnQgd2lsbCBub3QgYmUgY2FsbGVkIHdoZW48YnIvPlxuICAgICAqIHRoZSB1c2VyIHBlcmZvcm1zIGFuIHVuZG8vcmVkbyBvcGVyYXRpb24uIFdoaWNoIG1lYW5zIHRoYXQgb25seSB0aGUgcHJvcGVydGllcyB3aXRoIGRlZmF1bHQgdmFsdWU8YnIvPlxuICAgICAqIHdpbGwgYmUgcmVjb3JkZWQgb3IgcmVzdG9yZWQgYnkgZWRpdG9yLjxici8+XG4gICAgICogPGJyLz5cbiAgICAgKiBTaW1pbGFybHksIHRoZSBlZGl0b3IgbWF5IGZhaWxlZCB0byByZXNldCB5b3VyIGNvbXBvbmVudCBjb3JyZWN0bHkgaW4gZXh0cmVtZSBjYXNlcy4gVGhlbiBpZiB5b3UgbmVlZDxici8+XG4gICAgICogdG8gc3VwcG9ydCB0aGUgcmVzZXQgbWVudSwgeW91IHNob3VsZCBtYW51YWxseSBzeW5jaHJvbml6ZSB5b3VyIGNvbXBvbmVudCdzIFwiaW50ZXJuYWwgc3RhdGVzXCIgd2l0aCBpdHM8YnIvPlxuICAgICAqIHByb3BlcnRpZXMgaW4gdGhpcyBmdW5jdGlvbi4gT25jZSB5b3UgaW1wbGVtZW50IHRoaXMgZnVuY3Rpb24sIGFsbCB0aGUgZ2V0c2V0IGFjY2Vzc29ycyBvZiB5b3VyIGNvbXBvbmVudDxici8+XG4gICAgICogd2lsbCBub3QgYmUgY2FsbGVkIGR1cmluZyByZXNldCBvcGVyYXRpb24uIFdoaWNoIG1lYW5zIHRoYXQgb25seSB0aGUgcHJvcGVydGllcyB3aXRoIGRlZmF1bHQgdmFsdWU8YnIvPlxuICAgICAqIHdpbGwgYmUgcmVzZXQgYnkgZWRpdG9yLlxuICAgICAqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZCBpbiBlZGl0b3IgbW9kZS5cbiAgICAgKiAhI3poXG4gICAgICogb25SZXN0b3JlIOaYr+eUqOaIt+WcqOajgOafpeWZqOiPnOWNleeCueWHuyBSZXNldCDml7bvvIzlr7nmraTnu4Tku7bmiafooYzmkqTmtojmk43kvZzlkI7osIPnlKjnmoTjgII8YnIvPlxuICAgICAqIDxici8+XG4gICAgICog5aaC5p6c57uE5Lu25YyF5ZCr5LqG4oCc5YaF6YOo54q25oCB4oCd77yI5LiN5ZyoIENDQ2xhc3Mg5bGe5oCn5Lit5a6a5LmJ55qE5Li05pe25oiQ5ZGY5Y+Y6YeP77yJ77yM6YKj5LmI5L2g5Y+v6IO96ZyA6KaB5a6e546w6K+l5pa55rOV44CCPGJyLz5cbiAgICAgKiA8YnIvPlxuICAgICAqIOe8lui+keWZqOaJp+ihjOaSpOmUgC/ph43lgZrmk43kvZzml7bvvIzlsIbosIPnlKjnu4Tku7bnmoQgZ2V0IHNldCDmnaXlvZXliLblkozov5jljp/nu4Tku7bnmoTnirbmgIHjgIJcbiAgICAgKiDnhLbogIzvvIzlnKjmnoHnq6/nmoTmg4XlhrXkuIvvvIzlroPlj6/og73ml6Dms5Xoia/lpb3ov5DkvZzjgII8YnIvPlxuICAgICAqIOmCo+S5iOS9oOWwseW6lOivpeWunueOsOi/meS4quaWueazle+8jOaJi+WKqOagueaNrue7hOS7tueahOWxnuaAp+WQjOatpeKAnOWGhemDqOeKtuaAgeKAneOAglxuICAgICAqIOS4gOaXpuS9oOWunueOsOi/meS4quaWueazle+8jOW9k+eUqOaIt+aSpOmUgOaIlumHjeWBmuaXtu+8jOe7hOS7tueahOaJgOaciSBnZXQgc2V0IOmDveS4jeS8muWGjeiiq+iwg+eUqOOAglxuICAgICAqIOi/meaEj+WRs+edgOS7heS7heaMh+WumuS6hum7mOiupOWAvOeahOWxnuaAp+Wwhuiiq+e8lui+keWZqOiusOW9leWSjOi/mOWOn+OAgjxici8+XG4gICAgICogPGJyLz5cbiAgICAgKiDlkIzmoLfnmoTvvIznvJbovpHlj6/og73ml6Dms5XlnKjmnoHnq6/mg4XlhrXkuIvmraPnoa7lnLDph43nva7mgqjnmoTnu4Tku7bjgII8YnIvPlxuICAgICAqIOS6juaYr+WmguaenOS9oOmcgOimgeaUr+aMgee7hOS7tumHjee9ruiPnOWNle+8jOS9oOmcgOimgeWcqOivpeaWueazleS4reaJi+W3peWQjOatpee7hOS7tuWxnuaAp+WIsOKAnOWGhemDqOeKtuaAgeKAneOAgjxici8+XG4gICAgICog5LiA5pem5L2g5a6e546w6L+Z5Liq5pa55rOV77yM57uE5Lu255qE5omA5pyJIGdldCBzZXQg6YO95LiN5Lya5Zyo6YeN572u5pON5L2c5pe26KKr6LCD55So44CCXG4gICAgICog6L+Z5oSP5ZGz552A5LuF5LuF5oyH5a6a5LqG6buY6K6k5YC855qE5bGe5oCn5bCG6KKr57yW6L6R5Zmo6YeN572u44CCXG4gICAgICogPGJyLz5cbiAgICAgKiDmraTmlrnms5Xku4XlnKjnvJbovpHlmajkuIvkvJrooqvosIPnlKjjgIJcbiAgICAgKiBAbWV0aG9kIG9uUmVzdG9yZVxuICAgICAqL1xuICAgIG9uUmVzdG9yZTogbnVsbCxcblxuICAgIC8vIE9WRVJSSURFXG5cbiAgICBkZXN0cm95ICgpIHtcbiAgICAgICAgaWYgKENDX0VESVRPUikge1xuICAgICAgICAgICAgdmFyIGRlcGVuZCA9IHRoaXMubm9kZS5fZ2V0RGVwZW5kQ29tcG9uZW50KHRoaXMpO1xuICAgICAgICAgICAgaWYgKGRlcGVuZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYy5lcnJvcklEKDM2MjYsXG4gICAgICAgICAgICAgICAgICAgIGNjLmpzLmdldENsYXNzTmFtZSh0aGlzKSwgY2MuanMuZ2V0Q2xhc3NOYW1lKGRlcGVuZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9zdXBlcigpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fZW5hYmxlZCAmJiB0aGlzLm5vZGUuX2FjdGl2ZUluSGllcmFyY2h5KSB7XG4gICAgICAgICAgICAgICAgY2MuZGlyZWN0b3IuX2NvbXBTY2hlZHVsZXIuZGlzYWJsZUNvbXAodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX29uUHJlRGVzdHJveSAoKSB7XG4gICAgICAgIC8vIFNjaGVkdWxlc1xuICAgICAgICB0aGlzLnVuc2NoZWR1bGVBbGxDYWxsYmFja3MoKTtcblxuICAgICAgICAvLyBSZW1vdmUgYWxsIGxpc3RlbmVyc1xuICAgICAgICB2YXIgZXZlbnRUYXJnZXRzID0gdGhpcy5fX2V2ZW50VGFyZ2V0cztcbiAgICAgICAgZm9yICh2YXIgaSA9IGV2ZW50VGFyZ2V0cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgdmFyIHRhcmdldCA9IGV2ZW50VGFyZ2V0c1tpXTtcbiAgICAgICAgICAgIHRhcmdldCAmJiB0YXJnZXQudGFyZ2V0T2ZmKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGV2ZW50VGFyZ2V0cy5sZW5ndGggPSAwO1xuXG4gICAgICAgIC8vXG4gICAgICAgIGlmIChDQ19FRElUT1IgJiYgIUNDX1RFU1QpIHtcbiAgICAgICAgICAgIF9TY2VuZS5Bc3NldHNXYXRjaGVyLnN0b3AodGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBvbkRlc3Ryb3lcbiAgICAgICAgY2MuZGlyZWN0b3IuX25vZGVBY3RpdmF0b3IuZGVzdHJveUNvbXAodGhpcyk7XG5cbiAgICAgICAgLy8gZG8gcmVtb3ZlIGNvbXBvbmVudFxuICAgICAgICB0aGlzLm5vZGUuX3JlbW92ZUNvbXBvbmVudCh0aGlzKTtcbiAgICB9LFxuXG4gICAgX2luc3RhbnRpYXRlIChjbG9uZWQpIHtcbiAgICAgICAgaWYgKCFjbG9uZWQpIHtcbiAgICAgICAgICAgIGNsb25lZCA9IGNjLmluc3RhbnRpYXRlLl9jbG9uZSh0aGlzLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBjbG9uZWQubm9kZSA9IG51bGw7XG4gICAgICAgIHJldHVybiBjbG9uZWQ7XG4gICAgfSxcblxuLy8gU2NoZWR1bGVyXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogU2NoZWR1bGVzIGEgY3VzdG9tIHNlbGVjdG9yLjxici8+XG4gICAgICogSWYgdGhlIHNlbGVjdG9yIGlzIGFscmVhZHkgc2NoZWR1bGVkLCB0aGVuIHRoZSBpbnRlcnZhbCBwYXJhbWV0ZXIgd2lsbCBiZSB1cGRhdGVkIHdpdGhvdXQgc2NoZWR1bGluZyBpdCBhZ2Fpbi5cbiAgICAgKiAhI3poXG4gICAgICog6LCD5bqm5LiA5Liq6Ieq5a6a5LmJ55qE5Zue6LCD5Ye95pWw44CCPGJyLz5cbiAgICAgKiDlpoLmnpzlm57osIPlh73mlbDlt7LosIPluqbvvIzpgqPkuYjlsIbkuI3kvJrph43lpI3osIPluqblroPvvIzlj6rkvJrmm7TmlrDml7bpl7Tpl7TpmpTlj4LmlbDjgIJcbiAgICAgKiBAbWV0aG9kIHNjaGVkdWxlXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtpbnRlcnZhbD0wXSAgVGljayBpbnRlcnZhbCBpbiBzZWNvbmRzLiAwIG1lYW5zIHRpY2sgZXZlcnkgZnJhbWUuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtyZXBlYXQ9Y2MubWFjcm8uUkVQRUFUX0ZPUkVWRVJdICAgIFRoZSBzZWxlY3RvciB3aWxsIGJlIGV4ZWN1dGVkIChyZXBlYXQgKyAxKSB0aW1lcywgeW91IGNhbiB1c2UgY2MubWFjcm8uUkVQRUFUX0ZPUkVWRVIgZm9yIHRpY2sgaW5maW5pdGVseS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2RlbGF5PTBdICAgICBUaGUgYW1vdW50IG9mIHRpbWUgdGhhdCB0aGUgZmlyc3QgdGljayB3aWxsIHdhaXQgYmVmb3JlIGV4ZWN1dGlvbi4gVW5pdDogc1xuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIHRpbWVDYWxsYmFjayA9IGZ1bmN0aW9uIChkdCkge1xuICAgICAqICAgY2MubG9nKFwidGltZTogXCIgKyBkdCk7XG4gICAgICogfVxuICAgICAqIHRoaXMuc2NoZWR1bGUodGltZUNhbGxiYWNrLCAxKTtcbiAgICAgKi9cbiAgICBzY2hlZHVsZSAoY2FsbGJhY2ssIGludGVydmFsLCByZXBlYXQsIGRlbGF5KSB7XG4gICAgICAgIGNjLmFzc2VydElEKGNhbGxiYWNrLCAxNjE5KTtcbiAgICAgICAgY2MuYXNzZXJ0SUQoaW50ZXJ2YWwgPj0gMCwgMTYyMCk7XG5cbiAgICAgICAgaW50ZXJ2YWwgPSBpbnRlcnZhbCB8fCAwO1xuICAgICAgICByZXBlYXQgPSBpc05hTihyZXBlYXQpID8gY2MubWFjcm8uUkVQRUFUX0ZPUkVWRVIgOiByZXBlYXQ7XG4gICAgICAgIGRlbGF5ID0gZGVsYXkgfHwgMDtcblxuICAgICAgICB2YXIgc2NoZWR1bGVyID0gY2MuZGlyZWN0b3IuZ2V0U2NoZWR1bGVyKCk7XG5cbiAgICAgICAgLy8gc2hvdWxkIG5vdCB1c2UgZW5hYmxlZEluSGllcmFyY2h5IHRvIGp1ZGdlIHdoZXRoZXIgcGF1c2VkLFxuICAgICAgICAvLyBiZWNhdXNlIGVuYWJsZWRJbkhpZXJhcmNoeSBpcyBhc3NpZ25lZCBhZnRlciBvbkVuYWJsZS5cbiAgICAgICAgLy8gQWN0dWFsbHksIGlmIG5vdCB5ZXQgc2NoZWR1bGVkLCByZXN1bWVUYXJnZXQvcGF1c2VUYXJnZXQgaGFzIG5vIGVmZmVjdCBvbiBjb21wb25lbnQsXG4gICAgICAgIC8vIHRoZXJlZm9yZSB0aGVyZSBpcyBubyB3YXkgdG8gZ3VhcmFudGVlIHRoZSBwYXVzZWQgc3RhdGUgb3RoZXIgdGhhbiBpc1RhcmdldFBhdXNlZC5cbiAgICAgICAgdmFyIHBhdXNlZCA9IHNjaGVkdWxlci5pc1RhcmdldFBhdXNlZCh0aGlzKTtcblxuICAgICAgICBzY2hlZHVsZXIuc2NoZWR1bGUoY2FsbGJhY2ssIHRoaXMsIGludGVydmFsLCByZXBlYXQsIGRlbGF5LCBwYXVzZWQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFNjaGVkdWxlcyBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgcnVucyBvbmx5IG9uY2UsIHdpdGggYSBkZWxheSBvZiAwIG9yIGxhcmdlci5cbiAgICAgKiAhI3poIOiwg+W6puS4gOS4quWPqui/kOihjOS4gOasoeeahOWbnuiwg+WHveaVsO+8jOWPr+S7peaMh+WumiAwIOiuqeWbnuiwg+WHveaVsOWcqOS4i+S4gOW4p+eri+WNs+aJp+ihjOaIluiAheWcqOS4gOWumueahOW7tuaXtuS5i+WQjuaJp+ihjOOAglxuICAgICAqIEBtZXRob2Qgc2NoZWR1bGVPbmNlXG4gICAgICogQHNlZSBjYy5Ob2RlI3NjaGVkdWxlXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgIEEgZnVuY3Rpb24gd3JhcHBlZCBhcyBhIHNlbGVjdG9yXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtkZWxheT0wXSAgVGhlIGFtb3VudCBvZiB0aW1lIHRoYXQgdGhlIGZpcnN0IHRpY2sgd2lsbCB3YWl0IGJlZm9yZSBleGVjdXRpb24uIFVuaXQ6IHNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciB0aW1lQ2FsbGJhY2sgPSBmdW5jdGlvbiAoZHQpIHtcbiAgICAgKiAgIGNjLmxvZyhcInRpbWU6IFwiICsgZHQpO1xuICAgICAqIH1cbiAgICAgKiB0aGlzLnNjaGVkdWxlT25jZSh0aW1lQ2FsbGJhY2ssIDIpO1xuICAgICAqL1xuICAgIHNjaGVkdWxlT25jZSAoY2FsbGJhY2ssIGRlbGF5KSB7XG4gICAgICAgIHRoaXMuc2NoZWR1bGUoY2FsbGJhY2ssIDAsIDAsIGRlbGF5KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBVbnNjaGVkdWxlcyBhIGN1c3RvbSBjYWxsYmFjayBmdW5jdGlvbi5cbiAgICAgKiAhI3poIOWPlua2iOiwg+W6puS4gOS4quiHquWumuS5ieeahOWbnuiwg+WHveaVsOOAglxuICAgICAqIEBtZXRob2QgdW5zY2hlZHVsZVxuICAgICAqIEBzZWUgY2MuTm9kZSNzY2hlZHVsZVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrX2ZuICBBIGZ1bmN0aW9uIHdyYXBwZWQgYXMgYSBzZWxlY3RvclxuICAgICAqIEBleGFtcGxlXG4gICAgICogdGhpcy51bnNjaGVkdWxlKF9jYWxsYmFjayk7XG4gICAgICovXG4gICAgdW5zY2hlZHVsZSAoY2FsbGJhY2tfZm4pIHtcbiAgICAgICAgaWYgKCFjYWxsYmFja19mbilcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBjYy5kaXJlY3Rvci5nZXRTY2hlZHVsZXIoKS51bnNjaGVkdWxlKGNhbGxiYWNrX2ZuLCB0aGlzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIHVuc2NoZWR1bGUgYWxsIHNjaGVkdWxlZCBjYWxsYmFjayBmdW5jdGlvbnM6IGN1c3RvbSBjYWxsYmFjayBmdW5jdGlvbnMsIGFuZCB0aGUgJ3VwZGF0ZScgY2FsbGJhY2sgZnVuY3Rpb24uPGJyLz5cbiAgICAgKiBBY3Rpb25zIGFyZSBub3QgYWZmZWN0ZWQgYnkgdGhpcyBtZXRob2QuXG4gICAgICogISN6aCDlj5bmtojosIPluqbmiYDmnInlt7LosIPluqbnmoTlm57osIPlh73mlbDvvJrlrprliLbnmoTlm57osIPlh73mlbDku6Xlj4ogJ3VwZGF0ZScg5Zue6LCD5Ye95pWw44CC5Yqo5L2c5LiN5Y+X5q2k5pa55rOV5b2x5ZON44CCXG4gICAgICogQG1ldGhvZCB1bnNjaGVkdWxlQWxsQ2FsbGJhY2tzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB0aGlzLnVuc2NoZWR1bGVBbGxDYWxsYmFja3MoKTtcbiAgICAgKi9cbiAgICB1bnNjaGVkdWxlQWxsQ2FsbGJhY2tzICgpIHtcbiAgICAgICAgY2MuZGlyZWN0b3IuZ2V0U2NoZWR1bGVyKCkudW5zY2hlZHVsZUFsbEZvclRhcmdldCh0aGlzKTtcbiAgICB9LFxufSk7XG5cbkNvbXBvbmVudC5fcmVxdWlyZUNvbXBvbmVudCA9IG51bGw7XG5Db21wb25lbnQuX2V4ZWN1dGlvbk9yZGVyID0gMDtcblxuaWYgKENDX0VESVRPUiB8fCBDQ19URVNUKSB7XG5cbiAgICAvLyBJTkhFUklUQUJMRSBTVEFUSUMgTUVNQkVSU1xuXG4gICAgQ29tcG9uZW50Ll9leGVjdXRlSW5FZGl0TW9kZSA9IGZhbHNlO1xuICAgIENvbXBvbmVudC5fcGxheU9uRm9jdXMgPSBmYWxzZTtcbiAgICBDb21wb25lbnQuX2Rpc2FsbG93TXVsdGlwbGUgPSBudWxsO1xuICAgIENvbXBvbmVudC5faGVscCA9ICcnO1xuXG4gICAgLy8gTk9OLUlOSEVSSVRFRCBTVEFUSUMgTUVNQkVSU1xuICAgIC8vIChUeXBlU2NyaXB0IDIuMyB3aWxsIHN0aWxsIGluaGVyaXQgdGhlbSwgc28gYWx3YXlzIGNoZWNrIGhhc093blByb3BlcnR5IGJlZm9yZSB1c2luZylcblxuICAgIGpzLnZhbHVlKENvbXBvbmVudCwgJ19pbnNwZWN0b3InLCAnJywgdHJ1ZSk7XG4gICAganMudmFsdWUoQ29tcG9uZW50LCAnX2ljb24nLCAnJywgdHJ1ZSk7XG5cbiAgICAvLyBDT01QT05FTlQgSEVMUEVSU1xuXG4gICAgY2MuX2NvbXBvbmVudE1lbnVJdGVtcyA9IFtdO1xuXG4gICAgQ29tcG9uZW50Ll9hZGRNZW51SXRlbSA9IGZ1bmN0aW9uIChjbHMsIHBhdGgsIHByaW9yaXR5KSB7XG4gICAgICAgIGNjLl9jb21wb25lbnRNZW51SXRlbXMucHVzaCh7XG4gICAgICAgICAgICBjb21wb25lbnQ6IGNscyxcbiAgICAgICAgICAgIG1lbnVQYXRoOiBwYXRoLFxuICAgICAgICAgICAgcHJpb3JpdHk6IHByaW9yaXR5XG4gICAgICAgIH0pO1xuICAgIH07XG59XG5cbi8vIHdlIG1ha2UgdGhpcyBub24tZW51bWVyYWJsZSwgdG8gcHJldmVudCBpbmhlcml0ZWQgYnkgc3ViIGNsYXNzZXMuXG5qcy52YWx1ZShDb21wb25lbnQsICdfcmVnaXN0ZXJFZGl0b3JQcm9wcycsIGZ1bmN0aW9uIChjbHMsIHByb3BzKSB7XG4gICAgdmFyIHJlcUNvbXAgPSBwcm9wcy5yZXF1aXJlQ29tcG9uZW50O1xuICAgIGlmIChyZXFDb21wKSB7XG4gICAgICAgIGNscy5fcmVxdWlyZUNvbXBvbmVudCA9IHJlcUNvbXA7XG4gICAgfVxuICAgIHZhciBvcmRlciA9IHByb3BzLmV4ZWN1dGlvbk9yZGVyO1xuICAgIGlmIChvcmRlciAmJiB0eXBlb2Ygb3JkZXIgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNscy5fZXhlY3V0aW9uT3JkZXIgPSBvcmRlcjtcbiAgICB9XG4gICAgaWYgKENDX0VESVRPUiB8fCBDQ19URVNUKSB7XG4gICAgICAgIHZhciBuYW1lID0gY2MuanMuZ2V0Q2xhc3NOYW1lKGNscyk7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgICAgICAgdmFyIHZhbCA9IHByb3BzW2tleV07XG4gICAgICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2V4ZWN1dGVJbkVkaXRNb2RlJzpcbiAgICAgICAgICAgICAgICAgICAgY2xzLl9leGVjdXRlSW5FZGl0TW9kZSA9ICEhdmFsO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ3BsYXlPbkZvY3VzJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdpbGxFeGVjdXRlSW5FZGl0TW9kZSA9ICgnZXhlY3V0ZUluRWRpdE1vZGUnIGluIHByb3BzKSA/IHByb3BzLmV4ZWN1dGVJbkVkaXRNb2RlIDogY2xzLl9leGVjdXRlSW5FZGl0TW9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3aWxsRXhlY3V0ZUluRWRpdE1vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbHMuX3BsYXlPbkZvY3VzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNjLndhcm5JRCgzNjAxLCBuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2luc3BlY3Rvcic6XG4gICAgICAgICAgICAgICAgICAgIGpzLnZhbHVlKGNscywgJ19pbnNwZWN0b3InLCB2YWwsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2ljb24nOlxuICAgICAgICAgICAgICAgICAgICBqcy52YWx1ZShjbHMsICdfaWNvbicsIHZhbCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnbWVudSc6XG4gICAgICAgICAgICAgICAgICAgIENvbXBvbmVudC5fYWRkTWVudUl0ZW0oY2xzLCB2YWwsIHByb3BzLm1lbnVQcmlvcml0eSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnZGlzYWxsb3dNdWx0aXBsZSc6XG4gICAgICAgICAgICAgICAgICAgIGNscy5fZGlzYWxsb3dNdWx0aXBsZSA9IGNscztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdyZXF1aXJlQ29tcG9uZW50JzpcbiAgICAgICAgICAgICAgICBjYXNlICdleGVjdXRpb25PcmRlcic6XG4gICAgICAgICAgICAgICAgICAgIC8vIHNraXAgaGVyZVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2hlbHAnOlxuICAgICAgICAgICAgICAgICAgICBjbHMuX2hlbHAgPSB2YWw7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgY2Mud2FybklEKDM2MDIsIGtleSwgbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSk7XG5cbkNvbXBvbmVudC5wcm90b3R5cGUuX19zY3JpcHRVdWlkID0gJyc7XG5cbmNjLkNvbXBvbmVudCA9IG1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAxMy0yMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiAgd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbnZhciBDQ09iamVjdCA9IHJlcXVpcmUoJy4uL3BsYXRmb3JtL0NDT2JqZWN0Jyk7XG52YXIganMgPSByZXF1aXJlKCcuLi9wbGF0Zm9ybS9qcycpO1xudmFyIGlkR2VuZXJhdGVyID0gbmV3IChyZXF1aXJlKCcuLi9wbGF0Zm9ybS9pZC1nZW5lcmF0ZXInKSkoJ0NvbXAnKTtcblxudmFyIElzT25FbmFibGVDYWxsZWQgPSBDQ09iamVjdC5GbGFncy5Jc09uRW5hYmxlQ2FsbGVkO1xudmFyIElzT25Mb2FkQ2FsbGVkID0gQ0NPYmplY3QuRmxhZ3MuSXNPbkxvYWRDYWxsZWQ7XG5cbi8qKlxuICogISNlblxuICogQmFzZSBjbGFzcyBmb3IgZXZlcnl0aGluZyBhdHRhY2hlZCB0byBOb2RlKEVudGl0eSkuPGJyLz5cbiAqIDxici8+XG4gKiBOT1RFOiBOb3QgYWxsb3dlZCB0byB1c2UgY29uc3RydWN0aW9uIHBhcmFtZXRlcnMgZm9yIENvbXBvbmVudCdzIHN1YmNsYXNzZXMsXG4gKiAgICAgICBiZWNhdXNlIENvbXBvbmVudCBpcyBjcmVhdGVkIGJ5IHRoZSBlbmdpbmUuXG4gKiAhI3poXG4gKiDmiYDmnInpmYTliqDliLDoioLngrnnmoTln7rnsbvjgII8YnIvPlxuICogPGJyLz5cbiAqIOazqOaEj++8muS4jeWFgeiuuOS9v+eUqOe7hOS7tueahOWtkOexu+aehOmAoOWPguaVsO+8jOWboOS4uue7hOS7tuaYr+eUseW8leaTjuWIm+W7uueahOOAglxuICpcbiAqIEBjbGFzcyBDb21wb25lbnRcbiAqIEBleHRlbmRzIE9iamVjdFxuICovXG52YXIgQ29tcG9uZW50ID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5Db21wb25lbnQnLFxuICAgIGV4dGVuZHM6IENDT2JqZWN0LFxuXG4gICAgY3RvcjogQ0NfRURJVE9SID8gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAod2luZG93Ll9TY2VuZSAmJiBfU2NlbmUuQXNzZXRzV2F0Y2hlcikge1xuICAgICAgICAgICAgX1NjZW5lLkFzc2V0c1dhdGNoZXIuaW5pdENvbXBvbmVudCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pZCA9IEVkaXRvci5VdGlscy5VdWlkVXRpbHMudXVpZCgpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZWdpc3RlciBhbGwgcmVsYXRlZCBFdmVudFRhcmdldHMsXG4gICAgICAgICAqIGFsbCBldmVudCBjYWxsYmFja3Mgd2lsbCBiZSByZW1vdmVkIGluIF9vblByZURlc3Ryb3lcbiAgICAgICAgICogQHByb3BlcnR5IHtBcnJheX0gX19ldmVudFRhcmdldHNcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX19ldmVudFRhcmdldHMgPSBbXTtcbiAgICB9IDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9pZCA9IGlkR2VuZXJhdGVyLmdldE5ld0lkKCk7XG5cbiAgICAgICAgdGhpcy5fX2V2ZW50VGFyZ2V0cyA9IFtdO1xuICAgIH0sXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIFRoZSBub2RlIHRoaXMgY29tcG9uZW50IGlzIGF0dGFjaGVkIHRvLiBBIGNvbXBvbmVudCBpcyBhbHdheXMgYXR0YWNoZWQgdG8gYSBub2RlLlxuICAgICAgICAgKiAhI3poIOivpee7hOS7tuiiq+mZhOWKoOWIsOeahOiKgueCueOAgue7hOS7tuaAu+S8mumZhOWKoOWIsOS4gOS4quiKgueCueOAglxuICAgICAgICAgKiBAcHJvcGVydHkgbm9kZVxuICAgICAgICAgKiBAdHlwZSB7Tm9kZX1cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogY2MubG9nKGNvbXAubm9kZSk7XG4gICAgICAgICAqL1xuICAgICAgICBub2RlOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGNsYXNzTmFtZSA9IGNjLmpzLmdldENsYXNzTmFtZSh0aGlzKTtcbiAgICAgICAgICAgICAgICB2YXIgdHJpbUxlZnQgPSBjbGFzc05hbWUubGFzdEluZGV4T2YoJy4nKTtcbiAgICAgICAgICAgICAgICBpZiAodHJpbUxlZnQgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUuc2xpY2UodHJpbUxlZnQgKyAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubm9kZS5uYW1lICsgJzwnICsgY2xhc3NOYW1lICsgJz4nO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbmFtZSA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBUaGUgdXVpZCBmb3IgZWRpdG9yLlxuICAgICAgICAgKiAhI3poIOe7hOS7tueahCB1dWlk77yM55So5LqO57yW6L6R5Zmo44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSB1dWlkXG4gICAgICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiBjYy5sb2coY29tcC51dWlkKTtcbiAgICAgICAgICovXG4gICAgICAgIHV1aWQ6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9pZDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgX19zY3JpcHRBc3NldDogQ0NfRURJVE9SICYmIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge30sXG5cbiAgICAgICAgICAgIC8vc2V0ICh2YWx1ZSkge1xuICAgICAgICAgICAgLy8gICAgaWYgKHRoaXMuX19zY3JpcHRVdWlkICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgLy8gICAgICAgIGlmICh2YWx1ZSAmJiBFZGl0b3IuVXRpbHMuVXVpZFV0aWxzLmlzVXVpZCh2YWx1ZS5fdXVpZCkpIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgdmFyIGNsYXNzSWQgPSBFZGl0b3IuVXRpbHMuVXVpZFV0aWxzLmNvbXByZXNzVXVpZCh2YWx1ZS5fdXVpZCk7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgIHZhciBOZXdDb21wID0gY2MuanMuX2dldENsYXNzQnlJZChjbGFzc0lkKTtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgaWYgKGpzLmlzQ2hpbGRDbGFzc09mKE5ld0NvbXAsIGNjLkNvbXBvbmVudCkpIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgIGNjLndhcm4oJ1NvcnJ5LCByZXBsYWNpbmcgY29tcG9uZW50IHNjcmlwdCBpcyBub3QgeWV0IGltcGxlbWVudGVkLicpO1xuICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgLy9FZGl0b3IuSXBjLnNlbmRUb1dpbnMoJ3JlbG9hZDp3aW5kb3ctc2NyaXB0cycsIEVkaXRvci5fU2FuZGJveC5jb21waWxlZCk7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICBjYy5lcnJvcignQ2FuIG5vdCBmaW5kIGEgY29tcG9uZW50IGluIHRoZSBzY3JpcHQgd2hpY2ggdXVpZCBpcyBcIiVzXCIuJywgdmFsdWUuX3V1aWQpO1xuICAgICAgICAgICAgLy8gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyAgICAgICAgfVxuICAgICAgICAgICAgLy8gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gICAgICAgICAgICBjYy5lcnJvcignSW52YWxpZCBTY3JpcHQnKTtcbiAgICAgICAgICAgIC8vICAgICAgICB9XG4gICAgICAgICAgICAvLyAgICB9XG4gICAgICAgICAgICAvL30sXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogJ1NjcmlwdCcsXG4gICAgICAgICAgICB0eXBlOiBjYy5fU2NyaXB0LFxuICAgICAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOklOU1BFQ1RPUi5jb21wb25lbnQuc2NyaXB0J1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcHJvcGVydHkgX2VuYWJsZWRcbiAgICAgICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICBfZW5hYmxlZDogdHJ1ZSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBpbmRpY2F0ZXMgd2hldGhlciB0aGlzIGNvbXBvbmVudCBpcyBlbmFibGVkIG9yIG5vdC5cbiAgICAgICAgICogISN6aCDooajnpLror6Xnu4Tku7boh6rouqvmmK/lkKblkK/nlKjjgIJcbiAgICAgICAgICogQHByb3BlcnR5IGVuYWJsZWRcbiAgICAgICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogY29tcC5lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICogY2MubG9nKGNvbXAuZW5hYmxlZCk7XG4gICAgICAgICAqL1xuICAgICAgICBlbmFibGVkOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZW5hYmxlZDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9lbmFibGVkICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbmFibGVkID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm5vZGUuX2FjdGl2ZUluSGllcmFyY2h5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29tcFNjaGVkdWxlciA9IGNjLmRpcmVjdG9yLl9jb21wU2NoZWR1bGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcFNjaGVkdWxlci5lbmFibGVDb21wKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wU2NoZWR1bGVyLmRpc2FibGVDb21wKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICAgICAgICBhbmltYXRhYmxlOiB0cnVlXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gaW5kaWNhdGVzIHdoZXRoZXIgdGhpcyBjb21wb25lbnQgaXMgZW5hYmxlZCBhbmQgaXRzIG5vZGUgaXMgYWxzbyBhY3RpdmUgaW4gdGhlIGhpZXJhcmNoeS5cbiAgICAgICAgICogISN6aCDooajnpLror6Xnu4Tku7bmmK/lkKbooqvlkK/nlKjlubbkuJTmiYDlnKjnmoToioLngrnkuZ/lpITkuo7mv4DmtLvnirbmgIHjgIJcbiAgICAgICAgICogQHByb3BlcnR5IGVuYWJsZWRJbkhpZXJhcmNoeVxuICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgICAgICogQHJlYWRPbmx5XG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIGNjLmxvZyhjb21wLmVuYWJsZWRJbkhpZXJhcmNoeSk7XG4gICAgICAgICAqL1xuICAgICAgICBlbmFibGVkSW5IaWVyYXJjaHk6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9lbmFibGVkICYmIHRoaXMubm9kZS5fYWN0aXZlSW5IaWVyYXJjaHk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB2aXNpYmxlOiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIFJldHVybnMgYSB2YWx1ZSB3aGljaCB1c2VkIHRvIGluZGljYXRlIHRoZSBvbkxvYWQgZ2V0IGNhbGxlZCBvciBub3QuXG4gICAgICAgICAqICEjemgg6L+U5Zue5LiA5Liq5YC855So5p2l5Yik5patIG9uTG9hZCDmmK/lkKbooqvosIPnlKjov4fvvIzkuI3nrYnkuo4gMCDml7bosIPnlKjov4fvvIznrYnkuo4gMCDml7bmnKrosIPnlKjjgIJcbiAgICAgICAgICogQHByb3BlcnR5IF9pc09uTG9hZENhbGxlZFxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogY2MubG9nKHRoaXMuX2lzT25Mb2FkQ2FsbGVkID4gMCk7XG4gICAgICAgICAqL1xuICAgICAgICBfaXNPbkxvYWRDYWxsZWQ6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9vYmpGbGFncyAmIElzT25Mb2FkQ2FsbGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8vIExJRkVDWUNMRSBNRVRIT0RTXG5cbiAgICAvLyBGaXJlYmFsbCBwcm92aWRlcyBsaWZlY3ljbGUgbWV0aG9kcyB0aGF0IHlvdSBjYW4gc3BlY2lmeSB0byBob29rIGludG8gdGhpcyBwcm9jZXNzLlxuICAgIC8vIFdlIHByb3ZpZGUgUHJlIG1ldGhvZHMsIHdoaWNoIGFyZSBjYWxsZWQgcmlnaHQgYmVmb3JlIHNvbWV0aGluZyBoYXBwZW5zLCBhbmQgUG9zdCBtZXRob2RzIHdoaWNoIGFyZSBjYWxsZWQgcmlnaHQgYWZ0ZXIgc29tZXRoaW5nIGhhcHBlbnMuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFVwZGF0ZSBpcyBjYWxsZWQgZXZlcnkgZnJhbWUsIGlmIHRoZSBDb21wb25lbnQgaXMgZW5hYmxlZC48YnIvPlxuICAgICAqIFRoaXMgaXMgYSBsaWZlY3ljbGUgbWV0aG9kLiBJdCBtYXkgbm90IGJlIGltcGxlbWVudGVkIGluIHRoZSBzdXBlciBjbGFzcy4gWW91IGNhbiBvbmx5IGNhbGwgaXRzIHN1cGVyIGNsYXNzIG1ldGhvZCBpbnNpZGUgaXQuIEl0IHNob3VsZCBub3QgYmUgY2FsbGVkIG1hbnVhbGx5IGVsc2V3aGVyZS5cbiAgICAgKiAhI3poIOWmguaenOivpee7hOS7tuWQr+eUqO+8jOWImeavj+W4p+iwg+eUqCB1cGRhdGXjgII8YnIvPlxuICAgICAqIOivpeaWueazleS4uueUn+WRveWRqOacn+aWueazle+8jOeItuexu+acquW/heS8muacieWunueOsOOAguW5tuS4lOS9oOWPquiDveWcqOivpeaWueazleWGhemDqOiwg+eUqOeItuexu+eahOWunueOsO+8jOS4jeWPr+WcqOWFtuWug+WcsOaWueebtOaOpeiwg+eUqOivpeaWueazleOAglxuICAgICAqIEBtZXRob2QgdXBkYXRlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGR0IC0gdGhlIGRlbHRhIHRpbWUgaW4gc2Vjb25kcyBpdCB0b29rIHRvIGNvbXBsZXRlIHRoZSBsYXN0IGZyYW1lXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHVwZGF0ZTogbnVsbCxcblxuICAgIC8qKlxuICAgICAqICEjZW4gTGF0ZVVwZGF0ZSBpcyBjYWxsZWQgZXZlcnkgZnJhbWUsIGlmIHRoZSBDb21wb25lbnQgaXMgZW5hYmxlZC48YnIvPlxuICAgICAqIFRoaXMgaXMgYSBsaWZlY3ljbGUgbWV0aG9kLiBJdCBtYXkgbm90IGJlIGltcGxlbWVudGVkIGluIHRoZSBzdXBlciBjbGFzcy4gWW91IGNhbiBvbmx5IGNhbGwgaXRzIHN1cGVyIGNsYXNzIG1ldGhvZCBpbnNpZGUgaXQuIEl0IHNob3VsZCBub3QgYmUgY2FsbGVkIG1hbnVhbGx5IGVsc2V3aGVyZS5cbiAgICAgKiAhI3poIOWmguaenOivpee7hOS7tuWQr+eUqO+8jOWImeavj+W4p+iwg+eUqCBMYXRlVXBkYXRl44CCPGJyLz5cbiAgICAgKiDor6Xmlrnms5XkuLrnlJ/lkb3lkajmnJ/mlrnms5XvvIzniLbnsbvmnKrlv4XkvJrmnInlrp7njrDjgILlubbkuJTkvaDlj6rog73lnKjor6Xmlrnms5XlhoXpg6josIPnlKjniLbnsbvnmoTlrp7njrDvvIzkuI3lj6/lnKjlhbblroPlnLDmlrnnm7TmjqXosIPnlKjor6Xmlrnms5XjgIJcbiAgICAgKiBAbWV0aG9kIGxhdGVVcGRhdGVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgbGF0ZVVwZGF0ZTogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIGBfX3ByZWxvYWRgIGlzIGNhbGxlZCBiZWZvcmUgZXZlcnkgb25Mb2FkLlxuICAgICAqIEl0IGlzIHVzZWQgdG8gaW5pdGlhbGl6ZSB0aGUgYnVpbHRpbiBjb21wb25lbnRzIGludGVybmFsbHksXG4gICAgICogdG8gYXZvaWQgY2hlY2tpbmcgd2hldGhlciBvbkxvYWQgaXMgY2FsbGVkIGJlZm9yZSBldmVyeSBwdWJsaWMgbWV0aG9kIGNhbGxzLlxuICAgICAqIFRoaXMgbWV0aG9kIHNob3VsZCBiZSByZW1vdmVkIGlmIHNjcmlwdCBwcmlvcml0eSBpcyBzdXBwb3J0ZWQuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIF9fcHJlbG9hZFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX19wcmVsb2FkOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIFdoZW4gYXR0YWNoaW5nIHRvIGFuIGFjdGl2ZSBub2RlIG9yIGl0cyBub2RlIGZpcnN0IGFjdGl2YXRlZC5cbiAgICAgKiBvbkxvYWQgaXMgYWx3YXlzIGNhbGxlZCBiZWZvcmUgYW55IHN0YXJ0IGZ1bmN0aW9ucywgdGhpcyBhbGxvd3MgeW91IHRvIG9yZGVyIGluaXRpYWxpemF0aW9uIG9mIHNjcmlwdHMuPGJyLz5cbiAgICAgKiBUaGlzIGlzIGEgbGlmZWN5Y2xlIG1ldGhvZC4gSXQgbWF5IG5vdCBiZSBpbXBsZW1lbnRlZCBpbiB0aGUgc3VwZXIgY2xhc3MuIFlvdSBjYW4gb25seSBjYWxsIGl0cyBzdXBlciBjbGFzcyBtZXRob2QgaW5zaWRlIGl0LiBJdCBzaG91bGQgbm90IGJlIGNhbGxlZCBtYW51YWxseSBlbHNld2hlcmUuXG4gICAgICogISN6aFxuICAgICAqIOW9k+mZhOWKoOWIsOS4gOS4qua/gOa0u+eahOiKgueCueS4iuaIluiAheWFtuiKgueCueesrOS4gOasoea/gOa0u+aXtuWAmeiwg+eUqOOAgm9uTG9hZCDmgLvmmK/kvJrlnKjku7vkvZUgc3RhcnQg5pa55rOV6LCD55So5YmN5omn6KGM77yM6L+Z6IO955So5LqO5a6J5o6S6ISa5pys55qE5Yid5aeL5YyW6aG65bqP44CCPGJyLz5cbiAgICAgKiDor6Xmlrnms5XkuLrnlJ/lkb3lkajmnJ/mlrnms5XvvIzniLbnsbvmnKrlv4XkvJrmnInlrp7njrDjgILlubbkuJTkvaDlj6rog73lnKjor6Xmlrnms5XlhoXpg6josIPnlKjniLbnsbvnmoTlrp7njrDvvIzkuI3lj6/lnKjlhbblroPlnLDmlrnnm7TmjqXosIPnlKjor6Xmlrnms5XjgIJcbiAgICAgKiBAbWV0aG9kIG9uTG9hZFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBvbkxvYWQ6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogQ2FsbGVkIGJlZm9yZSBhbGwgc2NyaXB0cycgdXBkYXRlIGlmIHRoZSBDb21wb25lbnQgaXMgZW5hYmxlZCB0aGUgZmlyc3QgdGltZS5cbiAgICAgKiBVc3VhbGx5IHVzZWQgdG8gaW5pdGlhbGl6ZSBzb21lIGxvZ2ljIHdoaWNoIG5lZWQgdG8gYmUgY2FsbGVkIGFmdGVyIGFsbCBjb21wb25lbnRzJyBgb25sb2FkYCBtZXRob2RzIGNhbGxlZC48YnIvPlxuICAgICAqIFRoaXMgaXMgYSBsaWZlY3ljbGUgbWV0aG9kLiBJdCBtYXkgbm90IGJlIGltcGxlbWVudGVkIGluIHRoZSBzdXBlciBjbGFzcy4gWW91IGNhbiBvbmx5IGNhbGwgaXRzIHN1cGVyIGNsYXNzIG1ldGhvZCBpbnNpZGUgaXQuIEl0IHNob3VsZCBub3QgYmUgY2FsbGVkIG1hbnVhbGx5IGVsc2V3aGVyZS5cbiAgICAgKiAhI3poXG4gICAgICog5aaC5p6c6K+l57uE5Lu256ys5LiA5qyh5ZCv55So77yM5YiZ5Zyo5omA5pyJ57uE5Lu255qEIHVwZGF0ZSDkuYvliY3osIPnlKjjgILpgJrluLjnlKjkuo7pnIDopoHlnKjmiYDmnInnu4Tku7bnmoQgb25Mb2FkIOWIneWni+WMluWujOavleWQjuaJp+ihjOeahOmAu+i+keOAgjxici8+XG4gICAgICog6K+l5pa55rOV5Li655Sf5ZG95ZGo5pyf5pa55rOV77yM54i257G75pyq5b+F5Lya5pyJ5a6e546w44CC5bm25LiU5L2g5Y+q6IO95Zyo6K+l5pa55rOV5YaF6YOo6LCD55So54i257G755qE5a6e546w77yM5LiN5Y+v5Zyo5YW25a6D5Zyw5pa555u05o6l6LCD55So6K+l5pa55rOV44CCXG4gICAgICogQG1ldGhvZCBzdGFydFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBzdGFydDogbnVsbCxcblxuICAgIC8qKlxuICAgICAqICEjZW4gQ2FsbGVkIHdoZW4gdGhpcyBjb21wb25lbnQgYmVjb21lcyBlbmFibGVkIGFuZCBpdHMgbm9kZSBpcyBhY3RpdmUuPGJyLz5cbiAgICAgKiBUaGlzIGlzIGEgbGlmZWN5Y2xlIG1ldGhvZC4gSXQgbWF5IG5vdCBiZSBpbXBsZW1lbnRlZCBpbiB0aGUgc3VwZXIgY2xhc3MuIFlvdSBjYW4gb25seSBjYWxsIGl0cyBzdXBlciBjbGFzcyBtZXRob2QgaW5zaWRlIGl0LiBJdCBzaG91bGQgbm90IGJlIGNhbGxlZCBtYW51YWxseSBlbHNld2hlcmUuXG4gICAgICogISN6aCDlvZPor6Xnu4Tku7booqvlkK/nlKjvvIzlubbkuJTlroPnmoToioLngrnkuZ/mv4DmtLvml7bjgII8YnIvPlxuICAgICAqIOivpeaWueazleS4uueUn+WRveWRqOacn+aWueazle+8jOeItuexu+acquW/heS8muacieWunueOsOOAguW5tuS4lOS9oOWPquiDveWcqOivpeaWueazleWGhemDqOiwg+eUqOeItuexu+eahOWunueOsO+8jOS4jeWPr+WcqOWFtuWug+WcsOaWueebtOaOpeiwg+eUqOivpeaWueazleOAglxuICAgICAqIEBtZXRob2Qgb25FbmFibGVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgb25FbmFibGU6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIENhbGxlZCB3aGVuIHRoaXMgY29tcG9uZW50IGJlY29tZXMgZGlzYWJsZWQgb3IgaXRzIG5vZGUgYmVjb21lcyBpbmFjdGl2ZS48YnIvPlxuICAgICAqIFRoaXMgaXMgYSBsaWZlY3ljbGUgbWV0aG9kLiBJdCBtYXkgbm90IGJlIGltcGxlbWVudGVkIGluIHRoZSBzdXBlciBjbGFzcy4gWW91IGNhbiBvbmx5IGNhbGwgaXRzIHN1cGVyIGNsYXNzIG1ldGhvZCBpbnNpZGUgaXQuIEl0IHNob3VsZCBub3QgYmUgY2FsbGVkIG1hbnVhbGx5IGVsc2V3aGVyZS5cbiAgICAgKiAhI3poIOW9k+ivpee7hOS7tuiiq+emgeeUqOaIluiKgueCueWPmOS4uuaXoOaViOaXtuiwg+eUqOOAgjxici8+XG4gICAgICog6K+l5pa55rOV5Li655Sf5ZG95ZGo5pyf5pa55rOV77yM54i257G75pyq5b+F5Lya5pyJ5a6e546w44CC5bm25LiU5L2g5Y+q6IO95Zyo6K+l5pa55rOV5YaF6YOo6LCD55So54i257G755qE5a6e546w77yM5LiN5Y+v5Zyo5YW25a6D5Zyw5pa555u05o6l6LCD55So6K+l5pa55rOV44CCXG4gICAgICogQG1ldGhvZCBvbkRpc2FibGVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgb25EaXNhYmxlOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogISNlbiBDYWxsZWQgd2hlbiB0aGlzIGNvbXBvbmVudCB3aWxsIGJlIGRlc3Ryb3llZC48YnIvPlxuICAgICAqIFRoaXMgaXMgYSBsaWZlY3ljbGUgbWV0aG9kLiBJdCBtYXkgbm90IGJlIGltcGxlbWVudGVkIGluIHRoZSBzdXBlciBjbGFzcy4gWW91IGNhbiBvbmx5IGNhbGwgaXRzIHN1cGVyIGNsYXNzIG1ldGhvZCBpbnNpZGUgaXQuIEl0IHNob3VsZCBub3QgYmUgY2FsbGVkIG1hbnVhbGx5IGVsc2V3aGVyZS5cbiAgICAgKiAhI3poIOW9k+ivpee7hOS7tuiiq+mUgOavgeaXtuiwg+eUqDxici8+XG4gICAgICog6K+l5pa55rOV5Li655Sf5ZG95ZGo5pyf5pa55rOV77yM54i257G75pyq5b+F5Lya5pyJ5a6e546w44CC5bm25LiU5L2g5Y+q6IO95Zyo6K+l5pa55rOV5YaF6YOo6LCD55So54i257G755qE5a6e546w77yM5LiN5Y+v5Zyo5YW25a6D5Zyw5pa555u05o6l6LCD55So6K+l5pa55rOV44CCXG4gICAgICogQG1ldGhvZCBvbkRlc3Ryb3lcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgb25EZXN0cm95OiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBvbkZvY3VzSW5FZGl0b3JcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgb25Gb2N1c0luRWRpdG9yOiBudWxsLFxuICAgIC8qKlxuICAgICAqIEBtZXRob2Qgb25Mb3N0Rm9jdXNJbkVkaXRvclxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBvbkxvc3RGb2N1c0luRWRpdG9yOiBudWxsLFxuICAgIC8qKlxuICAgICAqICEjZW4gQ2FsbGVkIHRvIGluaXRpYWxpemUgdGhlIGNvbXBvbmVudCBvciBub2Rl4oCZcyBwcm9wZXJ0aWVzIHdoZW4gYWRkaW5nIHRoZSBjb21wb25lbnQgdGhlIGZpcnN0IHRpbWUgb3Igd2hlbiB0aGUgUmVzZXQgY29tbWFuZCBpcyB1c2VkLiBUaGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkIGluIGVkaXRvci5cbiAgICAgKiAhI3poIOeUqOadpeWIneWni+WMlue7hOS7tuaIluiKgueCueeahOS4gOS6m+WxnuaAp++8jOW9k+ivpee7hOS7tuiiq+esrOS4gOasoea3u+WKoOWIsOiKgueCueS4iuaIlueUqOaIt+eCueWHu+S6huWug+eahCBSZXNldCDoj5zljZXml7bosIPnlKjjgILov5nkuKrlm57osIPlj6rkvJrlnKjnvJbovpHlmajkuIvosIPnlKjjgIJcbiAgICAgKiBAbWV0aG9kIHJlc2V0SW5FZGl0b3JcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcmVzZXRJbkVkaXRvcjogbnVsbCxcblxuICAgIC8vIFBVQkxJQ1xuXG4gICAgLyoqXG4gICAgICogISNlbiBBZGRzIGEgY29tcG9uZW50IGNsYXNzIHRvIHRoZSBub2RlLiBZb3UgY2FuIGFsc28gYWRkIGNvbXBvbmVudCB0byBub2RlIGJ5IHBhc3NpbmcgaW4gdGhlIG5hbWUgb2YgdGhlIHNjcmlwdC5cbiAgICAgKiAhI3poIOWQkeiKgueCuea3u+WKoOS4gOS4que7hOS7tuexu++8jOS9oOi/mOWPr+S7pemAmui/h+S8oOWFpeiEmuacrOeahOWQjeensOadpea3u+WKoOe7hOS7tuOAglxuICAgICAqXG4gICAgICogQG1ldGhvZCBhZGRDb21wb25lbnRcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gdHlwZU9yQ2xhc3NOYW1lIC0gdGhlIGNvbnN0cnVjdG9yIG9yIHRoZSBjbGFzcyBuYW1lIG9mIHRoZSBjb21wb25lbnQgdG8gYWRkXG4gICAgICogQHJldHVybiB7Q29tcG9uZW50fSAtIHRoZSBuZXdseSBhZGRlZCBjb21wb25lbnRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBzcHJpdGUgPSBub2RlLmFkZENvbXBvbmVudChjYy5TcHJpdGUpO1xuICAgICAqIHZhciB0ZXN0ID0gbm9kZS5hZGRDb21wb25lbnQoXCJUZXN0XCIpO1xuICAgICAqIEB0eXBlc2NyaXB0XG4gICAgICogYWRkQ29tcG9uZW50PFQgZXh0ZW5kcyBDb21wb25lbnQ+KHR5cGU6IHtuZXcoKTogVH0pOiBUXG4gICAgICogYWRkQ29tcG9uZW50KGNsYXNzTmFtZTogc3RyaW5nKTogYW55XG4gICAgICovXG4gICAgYWRkQ29tcG9uZW50OiBmdW5jdGlvbiBhZGRDb21wb25lbnQodHlwZU9yQ2xhc3NOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGUuYWRkQ29tcG9uZW50KHR5cGVPckNsYXNzTmFtZSk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIFJldHVybnMgdGhlIGNvbXBvbmVudCBvZiBzdXBwbGllZCB0eXBlIGlmIHRoZSBub2RlIGhhcyBvbmUgYXR0YWNoZWQsIG51bGwgaWYgaXQgZG9lc24ndC48YnIvPlxuICAgICAqIFlvdSBjYW4gYWxzbyBnZXQgY29tcG9uZW50IGluIHRoZSBub2RlIGJ5IHBhc3NpbmcgaW4gdGhlIG5hbWUgb2YgdGhlIHNjcmlwdC5cbiAgICAgKiAhI3poXG4gICAgICog6I635Y+W6IqC54K55LiK5oyH5a6a57G75Z6L55qE57uE5Lu277yM5aaC5p6c6IqC54K55pyJ6ZmE5Yqg5oyH5a6a57G75Z6L55qE57uE5Lu277yM5YiZ6L+U5Zue77yM5aaC5p6c5rKh5pyJ5YiZ5Li656m644CCPGJyLz5cbiAgICAgKiDkvKDlhaXlj4LmlbDkuZ/lj6/ku6XmmK/ohJrmnKznmoTlkI3np7DjgIJcbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0Q29tcG9uZW50XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IHR5cGVPckNsYXNzTmFtZVxuICAgICAqIEByZXR1cm4ge0NvbXBvbmVudH1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGdldCBzcHJpdGUgY29tcG9uZW50LlxuICAgICAqIHZhciBzcHJpdGUgPSBub2RlLmdldENvbXBvbmVudChjYy5TcHJpdGUpO1xuICAgICAqIC8vIGdldCBjdXN0b20gdGVzdCBjYWxzcy5cbiAgICAgKiB2YXIgdGVzdCA9IG5vZGUuZ2V0Q29tcG9uZW50KFwiVGVzdFwiKTtcbiAgICAgKiBAdHlwZXNjcmlwdFxuICAgICAqIGdldENvbXBvbmVudDxUIGV4dGVuZHMgQ29tcG9uZW50Pih0eXBlOiB7cHJvdG90eXBlOiBUfSk6IFRcbiAgICAgKiBnZXRDb21wb25lbnQoY2xhc3NOYW1lOiBzdHJpbmcpOiBhbnlcbiAgICAgKi9cbiAgICBnZXRDb21wb25lbnQ6IGZ1bmN0aW9uIGdldENvbXBvbmVudCh0eXBlT3JDbGFzc05hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZS5nZXRDb21wb25lbnQodHlwZU9yQ2xhc3NOYW1lKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFJldHVybnMgYWxsIGNvbXBvbmVudHMgb2Ygc3VwcGxpZWQgVHlwZSBpbiB0aGUgbm9kZS5cbiAgICAgKiAhI3poIOi/lOWbnuiKgueCueS4iuaMh+Wumuexu+Wei+eahOaJgOaciee7hOS7tuOAglxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRDb21wb25lbnRzXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IHR5cGVPckNsYXNzTmFtZVxuICAgICAqIEByZXR1cm4ge0NvbXBvbmVudFtdfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIHNwcml0ZXMgPSBub2RlLmdldENvbXBvbmVudHMoY2MuU3ByaXRlKTtcbiAgICAgKiB2YXIgdGVzdHMgPSBub2RlLmdldENvbXBvbmVudHMoXCJUZXN0XCIpO1xuICAgICAqIEB0eXBlc2NyaXB0XG4gICAgICogZ2V0Q29tcG9uZW50czxUIGV4dGVuZHMgQ29tcG9uZW50Pih0eXBlOiB7cHJvdG90eXBlOiBUfSk6IFRbXVxuICAgICAqIGdldENvbXBvbmVudHMoY2xhc3NOYW1lOiBzdHJpbmcpOiBhbnlbXVxuICAgICAqL1xuICAgIGdldENvbXBvbmVudHM6IGZ1bmN0aW9uIGdldENvbXBvbmVudHModHlwZU9yQ2xhc3NOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50cyh0eXBlT3JDbGFzc05hbWUpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqICEjZW4gUmV0dXJucyB0aGUgY29tcG9uZW50IG9mIHN1cHBsaWVkIHR5cGUgaW4gYW55IG9mIGl0cyBjaGlsZHJlbiB1c2luZyBkZXB0aCBmaXJzdCBzZWFyY2guXG4gICAgICogISN6aCDpgJLlvZLmn6Xmib7miYDmnInlrZDoioLngrnkuK3nrKzkuIDkuKrljLnphY3mjIflrprnsbvlnovnmoTnu4Tku7bjgIJcbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0Q29tcG9uZW50SW5DaGlsZHJlblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258U3RyaW5nfSB0eXBlT3JDbGFzc05hbWVcbiAgICAgKiBAcmV0dXJucyB7Q29tcG9uZW50fVxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIHNwcml0ZSA9IG5vZGUuZ2V0Q29tcG9uZW50SW5DaGlsZHJlbihjYy5TcHJpdGUpO1xuICAgICAqIHZhciBUZXN0ID0gbm9kZS5nZXRDb21wb25lbnRJbkNoaWxkcmVuKFwiVGVzdFwiKTtcbiAgICAgKiBAdHlwZXNjcmlwdFxuICAgICAqIGdldENvbXBvbmVudEluQ2hpbGRyZW48VCBleHRlbmRzIENvbXBvbmVudD4odHlwZToge3Byb3RvdHlwZTogVH0pOiBUXG4gICAgICogZ2V0Q29tcG9uZW50SW5DaGlsZHJlbihjbGFzc05hbWU6IHN0cmluZyk6IGFueVxuICAgICAqL1xuICAgIGdldENvbXBvbmVudEluQ2hpbGRyZW46IGZ1bmN0aW9uIGdldENvbXBvbmVudEluQ2hpbGRyZW4odHlwZU9yQ2xhc3NOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50SW5DaGlsZHJlbih0eXBlT3JDbGFzc05hbWUpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqICEjZW4gUmV0dXJucyB0aGUgY29tcG9uZW50cyBvZiBzdXBwbGllZCB0eXBlIGluIHNlbGYgb3IgYW55IG9mIGl0cyBjaGlsZHJlbiB1c2luZyBkZXB0aCBmaXJzdCBzZWFyY2guXG4gICAgICogISN6aCDpgJLlvZLmn6Xmib7oh6rouqvmiJbmiYDmnInlrZDoioLngrnkuK3mjIflrprnsbvlnovnmoTnu4Tku7ZcbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0Q29tcG9uZW50c0luQ2hpbGRyZW5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gdHlwZU9yQ2xhc3NOYW1lXG4gICAgICogQHJldHVybnMge0NvbXBvbmVudFtdfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIHNwcml0ZXMgPSBub2RlLmdldENvbXBvbmVudHNJbkNoaWxkcmVuKGNjLlNwcml0ZSk7XG4gICAgICogdmFyIHRlc3RzID0gbm9kZS5nZXRDb21wb25lbnRzSW5DaGlsZHJlbihcIlRlc3RcIik7XG4gICAgICogQHR5cGVzY3JpcHRcbiAgICAgKiBnZXRDb21wb25lbnRzSW5DaGlsZHJlbjxUIGV4dGVuZHMgQ29tcG9uZW50Pih0eXBlOiB7cHJvdG90eXBlOiBUfSk6IFRbXVxuICAgICAqIGdldENvbXBvbmVudHNJbkNoaWxkcmVuKGNsYXNzTmFtZTogc3RyaW5nKTogYW55W11cbiAgICAgKi9cbiAgICBnZXRDb21wb25lbnRzSW5DaGlsZHJlbjogZnVuY3Rpb24gZ2V0Q29tcG9uZW50c0luQ2hpbGRyZW4odHlwZU9yQ2xhc3NOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50c0luQ2hpbGRyZW4odHlwZU9yQ2xhc3NOYW1lKTtcbiAgICB9LFxuXG5cbiAgICAvLyBWSVJUVUFMXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogSWYgdGhlIGNvbXBvbmVudCdzIGJvdW5kaW5nIGJveCBpcyBkaWZmZXJlbnQgZnJvbSB0aGUgbm9kZSdzLCB5b3UgY2FuIGltcGxlbWVudCB0aGlzIG1ldGhvZCB0byBzdXBwbHlcbiAgICAgKiBhIGN1c3RvbSBheGlzIGFsaWduZWQgYm91bmRpbmcgYm94IChBQUJCKSwgc28gdGhlIGVkaXRvcidzIHNjZW5lIHZpZXcgY2FuIHBlcmZvcm0gaGl0IHRlc3QgcHJvcGVybHkuXG4gICAgICogISN6aFxuICAgICAqIOWmguaenOe7hOS7tueahOWMheWbtOebkuS4juiKgueCueS4jeWQjO+8jOaCqOWPr+S7peWunueOsOivpeaWueazleS7peaPkOS+m+iHquWumuS5ieeahOi9tOWQkeWvuem9kOeahOWMheWbtOebku+8iEFBQkLvvInvvIxcbiAgICAgKiDku6Xkvr/nvJbovpHlmajnmoTlnLrmma/op4blm77lj6/ku6XmraPnoa7lnLDmiafooYzngrnpgInmtYvor5XjgIJcbiAgICAgKlxuICAgICAqIEBtZXRob2QgX2dldExvY2FsQm91bmRzXG4gICAgICogQHBhcmFtIHtSZWN0fSBvdXRfcmVjdCAtIHRoZSBSZWN0IHRvIHJlY2VpdmUgdGhlIGJvdW5kaW5nIGJveFxuICAgICAqL1xuICAgIF9nZXRMb2NhbEJvdW5kczogbnVsbCxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBvblJlc3RvcmUgaXMgY2FsbGVkIGFmdGVyIHRoZSB1c2VyIGNsaWNrcyB0aGUgUmVzZXQgaXRlbSBpbiB0aGUgSW5zcGVjdG9yJ3MgY29udGV4dCBtZW51IG9yIHBlcmZvcm1zXG4gICAgICogYW4gdW5kbyBvcGVyYXRpb24gb24gdGhpcyBjb21wb25lbnQuPGJyLz5cbiAgICAgKiA8YnIvPlxuICAgICAqIElmIHRoZSBjb21wb25lbnQgY29udGFpbnMgdGhlIFwiaW50ZXJuYWwgc3RhdGVcIiwgc2hvcnQgZm9yIFwidGVtcG9yYXJ5IG1lbWJlciB2YXJpYWJsZXMgd2hpY2ggbm90IGluY2x1ZGVkPGJyLz5cbiAgICAgKiBpbiBpdHMgQ0NDbGFzcyBwcm9wZXJ0aWVzXCIsIHRoZW4geW91IG1heSBuZWVkIHRvIGltcGxlbWVudCB0aGlzIGZ1bmN0aW9uLjxici8+XG4gICAgICogPGJyLz5cbiAgICAgKiBUaGUgZWRpdG9yIHdpbGwgY2FsbCB0aGUgZ2V0c2V0IGFjY2Vzc29ycyBvZiB5b3VyIGNvbXBvbmVudCB0byByZWNvcmQvcmVzdG9yZSB0aGUgY29tcG9uZW50J3Mgc3RhdGU8YnIvPlxuICAgICAqIGZvciB1bmRvL3JlZG8gb3BlcmF0aW9uLiBIb3dldmVyLCBpbiBleHRyZW1lIGNhc2VzLCBpdCBtYXkgbm90IHdvcmtzIHdlbGwuIFRoZW4geW91IHNob3VsZCBpbXBsZW1lbnQ8YnIvPlxuICAgICAqIHRoaXMgZnVuY3Rpb24gdG8gbWFudWFsbHkgc3luY2hyb25pemUgeW91ciBjb21wb25lbnQncyBcImludGVybmFsIHN0YXRlc1wiIHdpdGggaXRzIHB1YmxpYyBwcm9wZXJ0aWVzLjxici8+XG4gICAgICogT25jZSB5b3UgaW1wbGVtZW50IHRoaXMgZnVuY3Rpb24sIGFsbCB0aGUgZ2V0c2V0IGFjY2Vzc29ycyBvZiB5b3VyIGNvbXBvbmVudCB3aWxsIG5vdCBiZSBjYWxsZWQgd2hlbjxici8+XG4gICAgICogdGhlIHVzZXIgcGVyZm9ybXMgYW4gdW5kby9yZWRvIG9wZXJhdGlvbi4gV2hpY2ggbWVhbnMgdGhhdCBvbmx5IHRoZSBwcm9wZXJ0aWVzIHdpdGggZGVmYXVsdCB2YWx1ZTxici8+XG4gICAgICogd2lsbCBiZSByZWNvcmRlZCBvciByZXN0b3JlZCBieSBlZGl0b3IuPGJyLz5cbiAgICAgKiA8YnIvPlxuICAgICAqIFNpbWlsYXJseSwgdGhlIGVkaXRvciBtYXkgZmFpbGVkIHRvIHJlc2V0IHlvdXIgY29tcG9uZW50IGNvcnJlY3RseSBpbiBleHRyZW1lIGNhc2VzLiBUaGVuIGlmIHlvdSBuZWVkPGJyLz5cbiAgICAgKiB0byBzdXBwb3J0IHRoZSByZXNldCBtZW51LCB5b3Ugc2hvdWxkIG1hbnVhbGx5IHN5bmNocm9uaXplIHlvdXIgY29tcG9uZW50J3MgXCJpbnRlcm5hbCBzdGF0ZXNcIiB3aXRoIGl0czxici8+XG4gICAgICogcHJvcGVydGllcyBpbiB0aGlzIGZ1bmN0aW9uLiBPbmNlIHlvdSBpbXBsZW1lbnQgdGhpcyBmdW5jdGlvbiwgYWxsIHRoZSBnZXRzZXQgYWNjZXNzb3JzIG9mIHlvdXIgY29tcG9uZW50PGJyLz5cbiAgICAgKiB3aWxsIG5vdCBiZSBjYWxsZWQgZHVyaW5nIHJlc2V0IG9wZXJhdGlvbi4gV2hpY2ggbWVhbnMgdGhhdCBvbmx5IHRoZSBwcm9wZXJ0aWVzIHdpdGggZGVmYXVsdCB2YWx1ZTxici8+XG4gICAgICogd2lsbCBiZSByZXNldCBieSBlZGl0b3IuXG4gICAgICpcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkIGluIGVkaXRvciBtb2RlLlxuICAgICAqICEjemhcbiAgICAgKiBvblJlc3RvcmUg5piv55So5oi35Zyo5qOA5p+l5Zmo6I+c5Y2V54K55Ye7IFJlc2V0IOaXtu+8jOWvueatpOe7hOS7tuaJp+ihjOaSpOa2iOaTjeS9nOWQjuiwg+eUqOeahOOAgjxici8+XG4gICAgICogPGJyLz5cbiAgICAgKiDlpoLmnpznu4Tku7bljIXlkKvkuobigJzlhoXpg6jnirbmgIHigJ3vvIjkuI3lnKggQ0NDbGFzcyDlsZ7mgKfkuK3lrprkuYnnmoTkuLTml7bmiJDlkZjlj5jph4/vvInvvIzpgqPkuYjkvaDlj6/og73pnIDopoHlrp7njrDor6Xmlrnms5XjgII8YnIvPlxuICAgICAqIDxici8+XG4gICAgICog57yW6L6R5Zmo5omn6KGM5pKk6ZSAL+mHjeWBmuaTjeS9nOaXtu+8jOWwhuiwg+eUqOe7hOS7tueahCBnZXQgc2V0IOadpeW9leWItuWSjOi/mOWOn+e7hOS7tueahOeKtuaAgeOAglxuICAgICAqIOeEtuiAjO+8jOWcqOaegeerr+eahOaDheWGteS4i++8jOWug+WPr+iDveaXoOazleiJr+Wlvei/kOS9nOOAgjxici8+XG4gICAgICog6YKj5LmI5L2g5bCx5bqU6K+l5a6e546w6L+Z5Liq5pa55rOV77yM5omL5Yqo5qC55o2u57uE5Lu255qE5bGe5oCn5ZCM5q2l4oCc5YaF6YOo54q25oCB4oCd44CCXG4gICAgICog5LiA5pem5L2g5a6e546w6L+Z5Liq5pa55rOV77yM5b2T55So5oi35pKk6ZSA5oiW6YeN5YGa5pe277yM57uE5Lu255qE5omA5pyJIGdldCBzZXQg6YO95LiN5Lya5YaN6KKr6LCD55So44CCXG4gICAgICog6L+Z5oSP5ZGz552A5LuF5LuF5oyH5a6a5LqG6buY6K6k5YC855qE5bGe5oCn5bCG6KKr57yW6L6R5Zmo6K6w5b2V5ZKM6L+Y5Y6f44CCPGJyLz5cbiAgICAgKiA8YnIvPlxuICAgICAqIOWQjOagt+eahO+8jOe8lui+keWPr+iDveaXoOazleWcqOaegeerr+aDheWGteS4i+ato+ehruWcsOmHjee9ruaCqOeahOe7hOS7tuOAgjxici8+XG4gICAgICog5LqO5piv5aaC5p6c5L2g6ZyA6KaB5pSv5oyB57uE5Lu26YeN572u6I+c5Y2V77yM5L2g6ZyA6KaB5Zyo6K+l5pa55rOV5Lit5omL5bel5ZCM5q2l57uE5Lu25bGe5oCn5Yiw4oCc5YaF6YOo54q25oCB4oCd44CCPGJyLz5cbiAgICAgKiDkuIDml6bkvaDlrp7njrDov5nkuKrmlrnms5XvvIznu4Tku7bnmoTmiYDmnIkgZ2V0IHNldCDpg73kuI3kvJrlnKjph43nva7mk43kvZzml7booqvosIPnlKjjgIJcbiAgICAgKiDov5nmhI/lkbPnnYDku4Xku4XmjIflrprkuobpu5jorqTlgLznmoTlsZ7mgKflsIbooqvnvJbovpHlmajph43nva7jgIJcbiAgICAgKiA8YnIvPlxuICAgICAqIOatpOaWueazleS7heWcqOe8lui+keWZqOS4i+S8muiiq+iwg+eUqOOAglxuICAgICAqIEBtZXRob2Qgb25SZXN0b3JlXG4gICAgICovXG4gICAgb25SZXN0b3JlOiBudWxsLFxuXG4gICAgLy8gT1ZFUlJJREVcblxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmIChDQ19FRElUT1IpIHtcbiAgICAgICAgICAgIHZhciBkZXBlbmQgPSB0aGlzLm5vZGUuX2dldERlcGVuZENvbXBvbmVudCh0aGlzKTtcbiAgICAgICAgICAgIGlmIChkZXBlbmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2MuZXJyb3JJRCgzNjI2LCBjYy5qcy5nZXRDbGFzc05hbWUodGhpcyksIGNjLmpzLmdldENsYXNzTmFtZShkZXBlbmQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fc3VwZXIoKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2VuYWJsZWQgJiYgdGhpcy5ub2RlLl9hY3RpdmVJbkhpZXJhcmNoeSkge1xuICAgICAgICAgICAgICAgIGNjLmRpcmVjdG9yLl9jb21wU2NoZWR1bGVyLmRpc2FibGVDb21wKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBfb25QcmVEZXN0cm95OiBmdW5jdGlvbiBfb25QcmVEZXN0cm95KCkge1xuICAgICAgICAvLyBTY2hlZHVsZXNcbiAgICAgICAgdGhpcy51bnNjaGVkdWxlQWxsQ2FsbGJhY2tzKCk7XG5cbiAgICAgICAgLy8gUmVtb3ZlIGFsbCBsaXN0ZW5lcnNcbiAgICAgICAgdmFyIGV2ZW50VGFyZ2V0cyA9IHRoaXMuX19ldmVudFRhcmdldHM7XG4gICAgICAgIGZvciAodmFyIGkgPSBldmVudFRhcmdldHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSBldmVudFRhcmdldHNbaV07XG4gICAgICAgICAgICB0YXJnZXQgJiYgdGFyZ2V0LnRhcmdldE9mZih0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBldmVudFRhcmdldHMubGVuZ3RoID0gMDtcblxuICAgICAgICAvL1xuICAgICAgICBpZiAoQ0NfRURJVE9SICYmICFDQ19URVNUKSB7XG4gICAgICAgICAgICBfU2NlbmUuQXNzZXRzV2F0Y2hlci5zdG9wKHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gb25EZXN0cm95XG4gICAgICAgIGNjLmRpcmVjdG9yLl9ub2RlQWN0aXZhdG9yLmRlc3Ryb3lDb21wKHRoaXMpO1xuXG4gICAgICAgIC8vIGRvIHJlbW92ZSBjb21wb25lbnRcbiAgICAgICAgdGhpcy5ub2RlLl9yZW1vdmVDb21wb25lbnQodGhpcyk7XG4gICAgfSxcbiAgICBfaW5zdGFudGlhdGU6IGZ1bmN0aW9uIF9pbnN0YW50aWF0ZShjbG9uZWQpIHtcbiAgICAgICAgaWYgKCFjbG9uZWQpIHtcbiAgICAgICAgICAgIGNsb25lZCA9IGNjLmluc3RhbnRpYXRlLl9jbG9uZSh0aGlzLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBjbG9uZWQubm9kZSA9IG51bGw7XG4gICAgICAgIHJldHVybiBjbG9uZWQ7XG4gICAgfSxcblxuXG4gICAgLy8gU2NoZWR1bGVyXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogU2NoZWR1bGVzIGEgY3VzdG9tIHNlbGVjdG9yLjxici8+XG4gICAgICogSWYgdGhlIHNlbGVjdG9yIGlzIGFscmVhZHkgc2NoZWR1bGVkLCB0aGVuIHRoZSBpbnRlcnZhbCBwYXJhbWV0ZXIgd2lsbCBiZSB1cGRhdGVkIHdpdGhvdXQgc2NoZWR1bGluZyBpdCBhZ2Fpbi5cbiAgICAgKiAhI3poXG4gICAgICog6LCD5bqm5LiA5Liq6Ieq5a6a5LmJ55qE5Zue6LCD5Ye95pWw44CCPGJyLz5cbiAgICAgKiDlpoLmnpzlm57osIPlh73mlbDlt7LosIPluqbvvIzpgqPkuYjlsIbkuI3kvJrph43lpI3osIPluqblroPvvIzlj6rkvJrmm7TmlrDml7bpl7Tpl7TpmpTlj4LmlbDjgIJcbiAgICAgKiBAbWV0aG9kIHNjaGVkdWxlXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtpbnRlcnZhbD0wXSAgVGljayBpbnRlcnZhbCBpbiBzZWNvbmRzLiAwIG1lYW5zIHRpY2sgZXZlcnkgZnJhbWUuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtyZXBlYXQ9Y2MubWFjcm8uUkVQRUFUX0ZPUkVWRVJdICAgIFRoZSBzZWxlY3RvciB3aWxsIGJlIGV4ZWN1dGVkIChyZXBlYXQgKyAxKSB0aW1lcywgeW91IGNhbiB1c2UgY2MubWFjcm8uUkVQRUFUX0ZPUkVWRVIgZm9yIHRpY2sgaW5maW5pdGVseS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2RlbGF5PTBdICAgICBUaGUgYW1vdW50IG9mIHRpbWUgdGhhdCB0aGUgZmlyc3QgdGljayB3aWxsIHdhaXQgYmVmb3JlIGV4ZWN1dGlvbi4gVW5pdDogc1xuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIHRpbWVDYWxsYmFjayA9IGZ1bmN0aW9uIChkdCkge1xuICAgICAqICAgY2MubG9nKFwidGltZTogXCIgKyBkdCk7XG4gICAgICogfVxuICAgICAqIHRoaXMuc2NoZWR1bGUodGltZUNhbGxiYWNrLCAxKTtcbiAgICAgKi9cbiAgICBzY2hlZHVsZTogZnVuY3Rpb24gc2NoZWR1bGUoY2FsbGJhY2ssIGludGVydmFsLCByZXBlYXQsIGRlbGF5KSB7XG4gICAgICAgIGNjLmFzc2VydElEKGNhbGxiYWNrLCAxNjE5KTtcbiAgICAgICAgY2MuYXNzZXJ0SUQoaW50ZXJ2YWwgPj0gMCwgMTYyMCk7XG5cbiAgICAgICAgaW50ZXJ2YWwgPSBpbnRlcnZhbCB8fCAwO1xuICAgICAgICByZXBlYXQgPSBpc05hTihyZXBlYXQpID8gY2MubWFjcm8uUkVQRUFUX0ZPUkVWRVIgOiByZXBlYXQ7XG4gICAgICAgIGRlbGF5ID0gZGVsYXkgfHwgMDtcblxuICAgICAgICB2YXIgc2NoZWR1bGVyID0gY2MuZGlyZWN0b3IuZ2V0U2NoZWR1bGVyKCk7XG5cbiAgICAgICAgLy8gc2hvdWxkIG5vdCB1c2UgZW5hYmxlZEluSGllcmFyY2h5IHRvIGp1ZGdlIHdoZXRoZXIgcGF1c2VkLFxuICAgICAgICAvLyBiZWNhdXNlIGVuYWJsZWRJbkhpZXJhcmNoeSBpcyBhc3NpZ25lZCBhZnRlciBvbkVuYWJsZS5cbiAgICAgICAgLy8gQWN0dWFsbHksIGlmIG5vdCB5ZXQgc2NoZWR1bGVkLCByZXN1bWVUYXJnZXQvcGF1c2VUYXJnZXQgaGFzIG5vIGVmZmVjdCBvbiBjb21wb25lbnQsXG4gICAgICAgIC8vIHRoZXJlZm9yZSB0aGVyZSBpcyBubyB3YXkgdG8gZ3VhcmFudGVlIHRoZSBwYXVzZWQgc3RhdGUgb3RoZXIgdGhhbiBpc1RhcmdldFBhdXNlZC5cbiAgICAgICAgdmFyIHBhdXNlZCA9IHNjaGVkdWxlci5pc1RhcmdldFBhdXNlZCh0aGlzKTtcblxuICAgICAgICBzY2hlZHVsZXIuc2NoZWR1bGUoY2FsbGJhY2ssIHRoaXMsIGludGVydmFsLCByZXBlYXQsIGRlbGF5LCBwYXVzZWQpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqICEjZW4gU2NoZWR1bGVzIGEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBydW5zIG9ubHkgb25jZSwgd2l0aCBhIGRlbGF5IG9mIDAgb3IgbGFyZ2VyLlxuICAgICAqICEjemgg6LCD5bqm5LiA5Liq5Y+q6L+Q6KGM5LiA5qyh55qE5Zue6LCD5Ye95pWw77yM5Y+v5Lul5oyH5a6aIDAg6K6p5Zue6LCD5Ye95pWw5Zyo5LiL5LiA5bin56uL5Y2z5omn6KGM5oiW6ICF5Zyo5LiA5a6a55qE5bu25pe25LmL5ZCO5omn6KGM44CCXG4gICAgICogQG1ldGhvZCBzY2hlZHVsZU9uY2VcbiAgICAgKiBAc2VlIGNjLk5vZGUjc2NoZWR1bGVcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAgQSBmdW5jdGlvbiB3cmFwcGVkIGFzIGEgc2VsZWN0b3JcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2RlbGF5PTBdICBUaGUgYW1vdW50IG9mIHRpbWUgdGhhdCB0aGUgZmlyc3QgdGljayB3aWxsIHdhaXQgYmVmb3JlIGV4ZWN1dGlvbi4gVW5pdDogc1xuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIHRpbWVDYWxsYmFjayA9IGZ1bmN0aW9uIChkdCkge1xuICAgICAqICAgY2MubG9nKFwidGltZTogXCIgKyBkdCk7XG4gICAgICogfVxuICAgICAqIHRoaXMuc2NoZWR1bGVPbmNlKHRpbWVDYWxsYmFjaywgMik7XG4gICAgICovXG4gICAgc2NoZWR1bGVPbmNlOiBmdW5jdGlvbiBzY2hlZHVsZU9uY2UoY2FsbGJhY2ssIGRlbGF5KSB7XG4gICAgICAgIHRoaXMuc2NoZWR1bGUoY2FsbGJhY2ssIDAsIDAsIGRlbGF5KTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFVuc2NoZWR1bGVzIGEgY3VzdG9tIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAqICEjemgg5Y+W5raI6LCD5bqm5LiA5Liq6Ieq5a6a5LmJ55qE5Zue6LCD5Ye95pWw44CCXG4gICAgICogQG1ldGhvZCB1bnNjaGVkdWxlXG4gICAgICogQHNlZSBjYy5Ob2RlI3NjaGVkdWxlXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tfZm4gIEEgZnVuY3Rpb24gd3JhcHBlZCBhcyBhIHNlbGVjdG9yXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB0aGlzLnVuc2NoZWR1bGUoX2NhbGxiYWNrKTtcbiAgICAgKi9cbiAgICB1bnNjaGVkdWxlOiBmdW5jdGlvbiB1bnNjaGVkdWxlKGNhbGxiYWNrX2ZuKSB7XG4gICAgICAgIGlmICghY2FsbGJhY2tfZm4pIHJldHVybjtcblxuICAgICAgICBjYy5kaXJlY3Rvci5nZXRTY2hlZHVsZXIoKS51bnNjaGVkdWxlKGNhbGxiYWNrX2ZuLCB0aGlzKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogdW5zY2hlZHVsZSBhbGwgc2NoZWR1bGVkIGNhbGxiYWNrIGZ1bmN0aW9uczogY3VzdG9tIGNhbGxiYWNrIGZ1bmN0aW9ucywgYW5kIHRoZSAndXBkYXRlJyBjYWxsYmFjayBmdW5jdGlvbi48YnIvPlxuICAgICAqIEFjdGlvbnMgYXJlIG5vdCBhZmZlY3RlZCBieSB0aGlzIG1ldGhvZC5cbiAgICAgKiAhI3poIOWPlua2iOiwg+W6puaJgOacieW3suiwg+W6pueahOWbnuiwg+WHveaVsO+8muWumuWItueahOWbnuiwg+WHveaVsOS7peWPiiAndXBkYXRlJyDlm57osIPlh73mlbDjgILliqjkvZzkuI3lj5fmraTmlrnms5XlvbHlk43jgIJcbiAgICAgKiBAbWV0aG9kIHVuc2NoZWR1bGVBbGxDYWxsYmFja3NcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHRoaXMudW5zY2hlZHVsZUFsbENhbGxiYWNrcygpO1xuICAgICAqL1xuICAgIHVuc2NoZWR1bGVBbGxDYWxsYmFja3M6IGZ1bmN0aW9uIHVuc2NoZWR1bGVBbGxDYWxsYmFja3MoKSB7XG4gICAgICAgIGNjLmRpcmVjdG9yLmdldFNjaGVkdWxlcigpLnVuc2NoZWR1bGVBbGxGb3JUYXJnZXQodGhpcyk7XG4gICAgfVxufSk7XG5cbkNvbXBvbmVudC5fcmVxdWlyZUNvbXBvbmVudCA9IG51bGw7XG5Db21wb25lbnQuX2V4ZWN1dGlvbk9yZGVyID0gMDtcblxuaWYgKENDX0VESVRPUiB8fCBDQ19URVNUKSB7XG5cbiAgICAvLyBJTkhFUklUQUJMRSBTVEFUSUMgTUVNQkVSU1xuXG4gICAgQ29tcG9uZW50Ll9leGVjdXRlSW5FZGl0TW9kZSA9IGZhbHNlO1xuICAgIENvbXBvbmVudC5fcGxheU9uRm9jdXMgPSBmYWxzZTtcbiAgICBDb21wb25lbnQuX2Rpc2FsbG93TXVsdGlwbGUgPSBudWxsO1xuICAgIENvbXBvbmVudC5faGVscCA9ICcnO1xuXG4gICAgLy8gTk9OLUlOSEVSSVRFRCBTVEFUSUMgTUVNQkVSU1xuICAgIC8vIChUeXBlU2NyaXB0IDIuMyB3aWxsIHN0aWxsIGluaGVyaXQgdGhlbSwgc28gYWx3YXlzIGNoZWNrIGhhc093blByb3BlcnR5IGJlZm9yZSB1c2luZylcblxuICAgIGpzLnZhbHVlKENvbXBvbmVudCwgJ19pbnNwZWN0b3InLCAnJywgdHJ1ZSk7XG4gICAganMudmFsdWUoQ29tcG9uZW50LCAnX2ljb24nLCAnJywgdHJ1ZSk7XG5cbiAgICAvLyBDT01QT05FTlQgSEVMUEVSU1xuXG4gICAgY2MuX2NvbXBvbmVudE1lbnVJdGVtcyA9IFtdO1xuXG4gICAgQ29tcG9uZW50Ll9hZGRNZW51SXRlbSA9IGZ1bmN0aW9uIChjbHMsIHBhdGgsIHByaW9yaXR5KSB7XG4gICAgICAgIGNjLl9jb21wb25lbnRNZW51SXRlbXMucHVzaCh7XG4gICAgICAgICAgICBjb21wb25lbnQ6IGNscyxcbiAgICAgICAgICAgIG1lbnVQYXRoOiBwYXRoLFxuICAgICAgICAgICAgcHJpb3JpdHk6IHByaW9yaXR5XG4gICAgICAgIH0pO1xuICAgIH07XG59XG5cbi8vIHdlIG1ha2UgdGhpcyBub24tZW51bWVyYWJsZSwgdG8gcHJldmVudCBpbmhlcml0ZWQgYnkgc3ViIGNsYXNzZXMuXG5qcy52YWx1ZShDb21wb25lbnQsICdfcmVnaXN0ZXJFZGl0b3JQcm9wcycsIGZ1bmN0aW9uIChjbHMsIHByb3BzKSB7XG4gICAgdmFyIHJlcUNvbXAgPSBwcm9wcy5yZXF1aXJlQ29tcG9uZW50O1xuICAgIGlmIChyZXFDb21wKSB7XG4gICAgICAgIGNscy5fcmVxdWlyZUNvbXBvbmVudCA9IHJlcUNvbXA7XG4gICAgfVxuICAgIHZhciBvcmRlciA9IHByb3BzLmV4ZWN1dGlvbk9yZGVyO1xuICAgIGlmIChvcmRlciAmJiB0eXBlb2Ygb3JkZXIgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNscy5fZXhlY3V0aW9uT3JkZXIgPSBvcmRlcjtcbiAgICB9XG4gICAgaWYgKENDX0VESVRPUiB8fCBDQ19URVNUKSB7XG4gICAgICAgIHZhciBuYW1lID0gY2MuanMuZ2V0Q2xhc3NOYW1lKGNscyk7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgICAgICAgdmFyIHZhbCA9IHByb3BzW2tleV07XG4gICAgICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2V4ZWN1dGVJbkVkaXRNb2RlJzpcbiAgICAgICAgICAgICAgICAgICAgY2xzLl9leGVjdXRlSW5FZGl0TW9kZSA9ICEhdmFsO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ3BsYXlPbkZvY3VzJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdpbGxFeGVjdXRlSW5FZGl0TW9kZSA9ICdleGVjdXRlSW5FZGl0TW9kZScgaW4gcHJvcHMgPyBwcm9wcy5leGVjdXRlSW5FZGl0TW9kZSA6IGNscy5fZXhlY3V0ZUluRWRpdE1vZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAod2lsbEV4ZWN1dGVJbkVkaXRNb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xzLl9wbGF5T25Gb2N1cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNjLndhcm5JRCgzNjAxLCBuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2luc3BlY3Rvcic6XG4gICAgICAgICAgICAgICAgICAgIGpzLnZhbHVlKGNscywgJ19pbnNwZWN0b3InLCB2YWwsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2ljb24nOlxuICAgICAgICAgICAgICAgICAgICBqcy52YWx1ZShjbHMsICdfaWNvbicsIHZhbCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnbWVudSc6XG4gICAgICAgICAgICAgICAgICAgIENvbXBvbmVudC5fYWRkTWVudUl0ZW0oY2xzLCB2YWwsIHByb3BzLm1lbnVQcmlvcml0eSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnZGlzYWxsb3dNdWx0aXBsZSc6XG4gICAgICAgICAgICAgICAgICAgIGNscy5fZGlzYWxsb3dNdWx0aXBsZSA9IGNscztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdyZXF1aXJlQ29tcG9uZW50JzpcbiAgICAgICAgICAgICAgICBjYXNlICdleGVjdXRpb25PcmRlcic6XG4gICAgICAgICAgICAgICAgICAgIC8vIHNraXAgaGVyZVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2hlbHAnOlxuICAgICAgICAgICAgICAgICAgICBjbHMuX2hlbHAgPSB2YWw7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgY2Mud2FybklEKDM2MDIsIGtleSwgbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSk7XG5cbkNvbXBvbmVudC5wcm90b3R5cGUuX19zY3JpcHRVdWlkID0gJyc7XG5cbmNjLkNvbXBvbmVudCA9IG1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtORFEyOXRjRzl1Wlc1MExtcHpJbDBzSW01aGJXVnpJanBiSWtORFQySnFaV04wSWl3aWNtVnhkV2x5WlNJc0ltcHpJaXdpYVdSSFpXNWxjbUYwWlhJaUxDSkpjMDl1Ulc1aFlteGxRMkZzYkdWa0lpd2lSbXhoWjNNaUxDSkpjMDl1VEc5aFpFTmhiR3hsWkNJc0lrTnZiWEJ2Ym1WdWRDSXNJbU5qSWl3aVEyeGhjM01pTENKdVlXMWxJaXdpWlhoMFpXNWtjeUlzSW1OMGIzSWlMQ0pEUTE5RlJFbFVUMUlpTENKM2FXNWtiM2NpTENKZlUyTmxibVVpTENKQmMzTmxkSE5YWVhSamFHVnlJaXdpYVc1cGRFTnZiWEJ2Ym1WdWRDSXNJbDlwWkNJc0lrVmthWFJ2Y2lJc0lsVjBhV3h6SWl3aVZYVnBaRlYwYVd4eklpd2lkWFZwWkNJc0lsOWZaWFpsYm5SVVlYSm5aWFJ6SWl3aVoyVjBUbVYzU1dRaUxDSndjbTl3WlhKMGFXVnpJaXdpYm05a1pTSXNJbVJsWm1GMWJIUWlMQ0oyYVhOcFlteGxJaXdpWjJWMElpd2lYMjVoYldVaUxDSmpiR0Z6YzA1aGJXVWlMQ0puWlhSRGJHRnpjMDVoYldVaUxDSjBjbWx0VEdWbWRDSXNJbXhoYzNSSmJtUmxlRTltSWl3aWMyeHBZMlVpTENKelpYUWlMQ0oyWVd4MVpTSXNJbDlmYzJOeWFYQjBRWE56WlhRaUxDSmthWE53YkdGNVRtRnRaU0lzSW5SNWNHVWlMQ0pmVTJOeWFYQjBJaXdpZEc5dmJIUnBjQ0lzSWtORFgwUkZWaUlzSWw5bGJtRmliR1ZrSWl3aVpXNWhZbXhsWkNJc0lsOWhZM1JwZG1WSmJraHBaWEpoY21Ob2VTSXNJbU52YlhCVFkyaGxaSFZzWlhJaUxDSmthWEpsWTNSdmNpSXNJbDlqYjIxd1UyTm9aV1IxYkdWeUlpd2laVzVoWW14bFEyOXRjQ0lzSW1ScGMyRmliR1ZEYjIxd0lpd2lZVzVwYldGMFlXSnNaU0lzSW1WdVlXSnNaV1JKYmtocFpYSmhjbU5vZVNJc0lsOXBjMDl1VEc5aFpFTmhiR3hsWkNJc0lsOXZZbXBHYkdGbmN5SXNJblZ3WkdGMFpTSXNJbXhoZEdWVmNHUmhkR1VpTENKZlgzQnlaV3h2WVdRaUxDSnZia3h2WVdRaUxDSnpkR0Z5ZENJc0ltOXVSVzVoWW14bElpd2liMjVFYVhOaFlteGxJaXdpYjI1RVpYTjBjbTk1SWl3aWIyNUdiMk4xYzBsdVJXUnBkRzl5SWl3aWIyNU1iM04wUm05amRYTkpia1ZrYVhSdmNpSXNJbkpsYzJWMFNXNUZaR2wwYjNJaUxDSmhaR1JEYjIxd2IyNWxiblFpTENKMGVYQmxUM0pEYkdGemMwNWhiV1VpTENKblpYUkRiMjF3YjI1bGJuUWlMQ0puWlhSRGIyMXdiMjVsYm5Seklpd2laMlYwUTI5dGNHOXVaVzUwU1c1RGFHbHNaSEpsYmlJc0ltZGxkRU52YlhCdmJtVnVkSE5KYmtOb2FXeGtjbVZ1SWl3aVgyZGxkRXh2WTJGc1FtOTFibVJ6SWl3aWIyNVNaWE4wYjNKbElpd2laR1Z6ZEhKdmVTSXNJbVJsY0dWdVpDSXNJbDluWlhSRVpYQmxibVJEYjIxd2IyNWxiblFpTENKbGNuSnZja2xFSWl3aVgzTjFjR1Z5SWl3aVgyOXVVSEpsUkdWemRISnZlU0lzSW5WdWMyTm9aV1IxYkdWQmJHeERZV3hzWW1GamEzTWlMQ0psZG1WdWRGUmhjbWRsZEhNaUxDSnBJaXdpYkdWdVozUm9JaXdpZEdGeVoyVjBJaXdpZEdGeVoyVjBUMlptSWl3aVEwTmZWRVZUVkNJc0luTjBiM0FpTENKZmJtOWtaVUZqZEdsMllYUnZjaUlzSW1SbGMzUnliM2xEYjIxd0lpd2lYM0psYlc5MlpVTnZiWEJ2Ym1WdWRDSXNJbDlwYm5OMFlXNTBhV0YwWlNJc0ltTnNiMjVsWkNJc0ltbHVjM1JoYm5ScFlYUmxJaXdpWDJOc2IyNWxJaXdpYzJOb1pXUjFiR1VpTENKallXeHNZbUZqYXlJc0ltbHVkR1Z5ZG1Gc0lpd2ljbVZ3WldGMElpd2laR1ZzWVhraUxDSmhjM05sY25SSlJDSXNJbWx6VG1GT0lpd2liV0ZqY204aUxDSlNSVkJGUVZSZlJrOVNSVlpGVWlJc0luTmphR1ZrZFd4bGNpSXNJbWRsZEZOamFHVmtkV3hsY2lJc0luQmhkWE5sWkNJc0ltbHpWR0Z5WjJWMFVHRjFjMlZrSWl3aWMyTm9aV1IxYkdWUGJtTmxJaXdpZFc1elkyaGxaSFZzWlNJc0ltTmhiR3hpWVdOclgyWnVJaXdpZFc1elkyaGxaSFZzWlVGc2JFWnZjbFJoY21kbGRDSXNJbDl5WlhGMWFYSmxRMjl0Y0c5dVpXNTBJaXdpWDJWNFpXTjFkR2x2Yms5eVpHVnlJaXdpWDJWNFpXTjFkR1ZKYmtWa2FYUk5iMlJsSWl3aVgzQnNZWGxQYmtadlkzVnpJaXdpWDJScGMyRnNiRzkzVFhWc2RHbHdiR1VpTENKZmFHVnNjQ0lzSWw5amIyMXdiMjVsYm5STlpXNTFTWFJsYlhNaUxDSmZZV1JrVFdWdWRVbDBaVzBpTENKamJITWlMQ0p3WVhSb0lpd2ljSEpwYjNKcGRIa2lMQ0p3ZFhOb0lpd2lZMjl0Y0c5dVpXNTBJaXdpYldWdWRWQmhkR2dpTENKd2NtOXdjeUlzSW5KbGNVTnZiWEFpTENKeVpYRjFhWEpsUTI5dGNHOXVaVzUwSWl3aWIzSmtaWElpTENKbGVHVmpkWFJwYjI1UGNtUmxjaUlzSW10bGVTSXNJblpoYkNJc0luZHBiR3hGZUdWamRYUmxTVzVGWkdsMFRXOWtaU0lzSW1WNFpXTjFkR1ZKYmtWa2FYUk5iMlJsSWl3aWQyRnlia2xFSWl3aWJXVnVkVkJ5YVc5eWFYUjVJaXdpY0hKdmRHOTBlWEJsSWl3aVgxOXpZM0pwY0hSVmRXbGtJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVFd1FrRXNTVUZCU1VFc1YwRkJWME1zVVVGQlVTeHpRa0ZCVWl4RFFVRm1PMEZCUTBFc1NVRkJTVU1zUzBGQlMwUXNVVUZCVVN4blFrRkJVaXhEUVVGVU8wRkJRMEVzU1VGQlNVVXNZMEZCWXl4TFFVRkxSaXhSUVVGUkxEQkNRVUZTTEVOQlFVd3NSVUZCTUVNc1RVRkJNVU1zUTBGQmJFSTdPMEZCUlVFc1NVRkJTVWNzYlVKQlFXMUNTaXhUUVVGVFN5eExRVUZVTEVOQlFXVkVMR2RDUVVGMFF6dEJRVU5CTEVsQlFVbEZMR2xDUVVGcFFrNHNVMEZCVTBzc1MwRkJWQ3hEUVVGbFF5eGpRVUZ3UXpzN1FVRkZRVHM3T3pzN096czdPenM3T3pzN1FVRmpRU3hKUVVGSlF5eFpRVUZaUXl4SFFVRkhReXhMUVVGSUxFTkJRVk03UVVGRGNrSkRMRlZCUVUwc1kwRkVaVHRCUVVWeVFrTXNZVUZCVTFnc1VVRkdXVHM3UVVGSmNrSlpMRlZCUVUxRExGbEJRVmtzV1VGQldUdEJRVU14UWl4WlFVRkpReXhQUVVGUFF5eE5RVUZRTEVsQlFXbENRU3hQUVVGUFF5eGhRVUUxUWl4RlFVRXlRenRCUVVOMlEwUXNiVUpCUVU5RExHRkJRVkFzUTBGQmNVSkRMR0ZCUVhKQ0xFTkJRVzFETEVsQlFXNURPMEZCUTBnN1FVRkRSQ3hoUVVGTFF5eEhRVUZNTEVkQlFWZERMRTlCUVU5RExFdEJRVkFzUTBGQllVTXNVMEZCWWl4RFFVRjFRa01zU1VGQmRrSXNSVUZCV0RzN1FVRkZRVHM3T3pzN08wRkJUVUVzWVVGQlMwTXNZMEZCVEN4SFFVRnpRaXhGUVVGMFFqdEJRVU5JTEV0Qllrc3NSMEZoUml4WlFVRlpPMEZCUTFvc1lVRkJTMHdzUjBGQlRDeEhRVUZYWml4WlFVRlpjVUlzVVVGQldpeEZRVUZZT3p0QlFVVkJMR0ZCUVV0RUxHTkJRVXdzUjBGQmMwSXNSVUZCZEVJN1FVRkRTQ3hMUVhKQ2IwSTdPMEZCZFVKeVFrVXNaMEpCUVZrN1FVRkRVanM3T3pzN096czdRVUZSUVVNc1kwRkJUVHRCUVVOR1F5eHhRa0ZCVXl4SlFVUlFPMEZCUlVaRExIRkNRVUZUTzBGQlJsQXNVMEZVUlRzN1FVRmpVbXhDTEdOQlFVMDdRVUZEUm0xQ0xHVkJSRVVzYVVKQlEwczdRVUZEU0N4dlFrRkJTU3hMUVVGTFF5eExRVUZVTEVWQlFXZENPMEZCUTFvc01rSkJRVThzUzBGQlMwRXNTMEZCV2p0QlFVTklPMEZCUTBRc2IwSkJRVWxETEZsQlFWbDJRaXhIUVVGSFRpeEZRVUZJTEVOQlFVMDRRaXhaUVVGT0xFTkJRVzFDTEVsQlFXNUNMRU5CUVdoQ08wRkJRMEVzYjBKQlFVbERMRmRCUVZkR0xGVkJRVlZITEZkQlFWWXNRMEZCYzBJc1IwRkJkRUlzUTBGQlpqdEJRVU5CTEc5Q1FVRkpSQ3haUVVGWkxFTkJRV2hDTEVWQlFXMUNPMEZCUTJaR0xHZERRVUZaUVN4VlFVRlZTU3hMUVVGV0xFTkJRV2RDUml4WFFVRlhMRU5CUVROQ0xFTkJRVm83UVVGRFNEdEJRVU5FTEhWQ1FVRlBMRXRCUVV0UUxFbEJRVXdzUTBGQlZXaENMRWxCUVZZc1IwRkJhVUlzUjBGQmFrSXNSMEZCZFVKeFFpeFRRVUYyUWl4SFFVRnRReXhIUVVFeFF6dEJRVU5JTEdGQldFTTdRVUZaUmtzc1pVRmFSU3hsUVZsSFF5eExRVnBJTEVWQldWVTdRVUZEVWl4eFFrRkJTMUFzUzBGQlRDeEhRVUZoVHl4TFFVRmlPMEZCUTBnc1lVRmtRenM3UVVGbFJsUXNjVUpCUVZNN1FVRm1VQ3hUUVdSRk96dEJRV2REVWpzN096czdPenM3TzBGQlUwRk9MR05CUVUwN1FVRkRSazhzWlVGRVJTeHBRa0ZEU3p0QlFVTklMSFZDUVVGUExFdEJRVXRZTEVkQlFWbzdRVUZEU0N4aFFVaERPenRCUVVsR1ZTeHhRa0ZCVXp0QlFVcFFMRk5CZWtORk96dEJRV2RFVWxVc2RVSkJRV1Y2UWl4aFFVRmhPMEZCUTNoQ1owSXNaVUZFZDBJc2FVSkJRMnBDTEVOQlFVVXNRMEZFWlRzN1FVRkZlRUk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEZWTEhsQ1FVRmhMRkZCY0VKWE8wRkJjVUo0UWtNc2EwSkJRVTFvUXl4SFFVRkhhVU1zVDBGeVFtVTdRVUZ6UW5oQ1F5eHhRa0ZCVTBNc1ZVRkJWVHRCUVhSQ1N5eFRRV2hFY0VJN08wRkJlVVZTT3pzN096dEJRVXRCUXl4clFrRkJWU3hKUVRsRlJqczdRVUZuUmxJN096czdPenM3T3pzN1FVRlZRVU1zYVVKQlFWTTdRVUZEVEdoQ0xHVkJSRXNzYVVKQlEwVTdRVUZEU0N4MVFrRkJUeXhMUVVGTFpTeFJRVUZhTzBGQlEwZ3NZVUZJU1R0QlFVbE1VaXhsUVVwTExHVkJTVUZETEV0QlNrRXNSVUZKVHp0QlFVTlNMRzlDUVVGSkxFdEJRVXRQTEZGQlFVd3NTMEZCYTBKUUxFdEJRWFJDTEVWQlFUWkNPMEZCUTNwQ0xIbENRVUZMVHl4UlFVRk1MRWRCUVdkQ1VDeExRVUZvUWp0QlFVTkJMSGRDUVVGSkxFdEJRVXRZTEVsQlFVd3NRMEZCVlc5Q0xHdENRVUZrTEVWQlFXdERPMEZCUXpsQ0xEUkNRVUZKUXl4blFrRkJaMEoyUXl4SFFVRkhkME1zVVVGQlNDeERRVUZaUXl4alFVRm9RenRCUVVOQkxEUkNRVUZKV2l4TFFVRktMRVZCUVZjN1FVRkRVRlVzTUVOQlFXTkhMRlZCUVdRc1EwRkJlVUlzU1VGQmVrSTdRVUZEU0N4NVFrRkdSQ3hOUVVkTE8wRkJRMFJJTERCRFFVRmpTU3hYUVVGa0xFTkJRVEJDTEVsQlFURkNPMEZCUTBnN1FVRkRTanRCUVVOS08wRkJRMG9zWVVGcVFrazdPMEZCYTBKTWRrSXNjVUpCUVZNc1MwRnNRa283UVVGdFFreDNRaXgzUWtGQldUdEJRVzVDVUN4VFFURkdSRHM3UVVGblNGSTdPenM3T3pzN096dEJRVk5CUXl3MFFrRkJiMEk3UVVGRGFFSjRRaXhsUVVSblFpeHBRa0ZEVkR0QlFVTklMSFZDUVVGUExFdEJRVXRsTEZGQlFVd3NTVUZCYVVJc1MwRkJTMnhDTEVsQlFVd3NRMEZCVlc5Q0xHdENRVUZzUXp0QlFVTklMR0ZCU0dVN08wRkJTV2hDYkVJc2NVSkJRVk03UVVGS1R5eFRRWHBJV2pzN1FVRm5TVkk3T3pzN096czdPenRCUVZOQk1FSXNlVUpCUVdsQ08wRkJRMko2UWl4bFFVUmhMR2xDUVVOT08wRkJRMGdzZFVKQlFVOHNTMEZCU3pCQ0xGTkJRVXdzUjBGQmFVSnFSQ3hqUVVGNFFqdEJRVU5JTzBGQlNGazdRVUY2U1ZRc1MwRjJRbE03TzBGQmRVdHlRanM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPenM3T3pzN096czdRVUZUUVd0RUxGbEJRVkVzU1VGeVRHRTdPMEZCZFV4eVFqczdPenM3T3pzN1FVRlJRVU1zWjBKQlFWa3NTVUV2VEZNN08wRkJhVTF5UWpzN096czdPenM3TzBGQlUwRkRMR1ZCUVZjc1NVRXhUVlU3TzBGQk5FMXlRanM3T3pzN096czdPenM3UVVGWFFVTXNXVUZCVVN4SlFYWk9ZVHM3UVVGNVRuSkNPenM3T3pzN096czdPenRCUVZkQlF5eFhRVUZQTEVsQmNFOWpPenRCUVhOUGNrSTdPenM3T3pzN08wRkJVVUZETEdOQlFWVXNTVUU1VDFjN08wRkJaMUJ5UWpzN096czdPenM3UVVGUlFVTXNaVUZCVnl4SlFYaFFWVHM3UVVFd1VISkNPenM3T3pzN096dEJRVkZCUXl4bFFVRlhMRWxCYkZGVk96dEJRVzlSY2tJN096czdRVUZKUVVNc2NVSkJRV2xDTEVsQmVGRkpPMEZCZVZGeVFqczdPenRCUVVsQlF5eDVRa0ZCY1VJc1NVRTNVVUU3UVVFNFVYSkNPenM3T3pzN1FVRk5RVU1zYlVKQlFXVXNTVUZ3VWswN08wRkJjMUp5UWpzN1FVRkZRVHM3T3pzN096czdPenM3T3pzN1FVRmpRVU1zWjBKQmRGTnhRaXgzUWtGelUxQkRMR1ZCZEZOUExFVkJjMU5WTzBGQlF6TkNMR1ZCUVU4c1MwRkJTekZETEVsQlFVd3NRMEZCVlhsRExGbEJRVllzUTBGQmRVSkRMR1ZCUVhaQ0xFTkJRVkE3UVVGRFNDeExRWGhUYjBJN096dEJRVEJUY2tJN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJiMEpCUXl4blFrRTVWSEZDTEhkQ1FUaFVVRVFzWlVFNVZFOHNSVUU0VkZVN1FVRkRNMElzWlVGQlR5eExRVUZMTVVNc1NVRkJUQ3hEUVVGVk1rTXNXVUZCVml4RFFVRjFRa1FzWlVGQmRrSXNRMEZCVUR0QlFVTklMRXRCYUZWdlFqczdPMEZCYTFWeVFqczdPenM3T3pzN096czdPenM3UVVGalFVVXNhVUpCYUZaeFFpeDVRa0ZuVms1R0xHVkJhRlpOTEVWQloxWlhPMEZCUXpWQ0xHVkJRVThzUzBGQlN6RkRMRWxCUVV3c1EwRkJWVFJETEdGQlFWWXNRMEZCZDBKR0xHVkJRWGhDTEVOQlFWQTdRVUZEU0N4TFFXeFdiMEk3T3p0QlFXOVdja0k3T3pzN096czdPenM3T3pzN08wRkJZMEZITERCQ1FXeFhjVUlzYTBOQmExZEhTQ3hsUVd4WFNDeEZRV3RYYjBJN1FVRkRja01zWlVGQlR5eExRVUZMTVVNc1NVRkJUQ3hEUVVGVk5rTXNjMEpCUVZZc1EwRkJhVU5JTEdWQlFXcERMRU5CUVZBN1FVRkRTQ3hMUVhCWGIwSTdPenRCUVhOWGNrSTdPenM3T3pzN096czdPenM3TzBGQlkwRkpMREpDUVhCWWNVSXNiVU5CYjFoSlNpeGxRWEJZU2l4RlFXOVljVUk3UVVGRGRFTXNaVUZCVHl4TFFVRkxNVU1zU1VGQlRDeERRVUZWT0VNc2RVSkJRVllzUTBGQmEwTktMR1ZCUVd4RExFTkJRVkE3UVVGRFNDeExRWFJZYjBJN096dEJRWGRZY2tJN08wRkJSVUU3T3pzN096czdPenM3TzBGQlYwRkxMSEZDUVVGcFFpeEpRWEpaU1RzN1FVRjFXWEpDT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRWGxEUVVNc1pVRkJWeXhKUVdoaVZUczdRVUZyWW5KQ096dEJRVVZCUXl4WFFYQmljVUlzY1VKQmIySldPMEZCUTFBc1dVRkJTVGxFTEZOQlFVb3NSVUZCWlR0QlFVTllMR2RDUVVGSkswUXNVMEZCVXl4TFFVRkxiRVFzU1VGQlRDeERRVUZWYlVRc2JVSkJRVllzUTBGQk9FSXNTVUZCT1VJc1EwRkJZanRCUVVOQkxHZENRVUZKUkN4TlFVRktMRVZCUVZrN1FVRkRVaXgxUWtGQlQzQkZMRWRCUVVkelJTeFBRVUZJTEVOQlFWY3NTVUZCV0N4RlFVTklkRVVzUjBGQlIwNHNSVUZCU0N4RFFVRk5PRUlzV1VGQlRpeERRVUZ0UWl4SlFVRnVRaXhEUVVSSExFVkJRM1ZDZUVJc1IwRkJSMDRzUlVGQlNDeERRVUZOT0VJc1dVRkJUaXhEUVVGdFFqUkRMRTFCUVc1Q0xFTkJSSFpDTEVOQlFWQTdRVUZGU0R0QlFVTktPMEZCUTBRc1dVRkJTU3hMUVVGTFJ5eE5RVUZNTEVWQlFVb3NSVUZCYlVJN1FVRkRaaXhuUWtGQlNTeExRVUZMYmtNc1VVRkJUQ3hKUVVGcFFpeExRVUZMYkVJc1NVRkJUQ3hEUVVGVmIwSXNhMEpCUVM5Q0xFVkJRVzFFTzBGQlF5OURkRU1zYlVKQlFVZDNReXhSUVVGSUxFTkJRVmxETEdOQlFWb3NRMEZCTWtKRkxGZEJRVE5DTEVOQlFYVkRMRWxCUVhaRE8wRkJRMGc3UVVGRFNqdEJRVU5LTEV0QmFtTnZRanRCUVcxamNrSTJRaXhwUWtGdVkzRkNMREpDUVcxalNqdEJRVU5pTzBGQlEwRXNZVUZCUzBNc2MwSkJRVXc3TzBGQlJVRTdRVUZEUVN4WlFVRkpReXhsUVVGbExFdEJRVXN6UkN4alFVRjRRanRCUVVOQkxHRkJRVXNzU1VGQlNUUkVMRWxCUVVsRUxHRkJRV0ZGTEUxQlFXSXNSMEZCYzBJc1EwRkJia01zUlVGQmMwTkVMRXRCUVVzc1EwRkJNME1zUlVGQk9FTXNSVUZCUlVFc1EwRkJhRVFzUlVGQmJVUTdRVUZETDBNc1owSkJRVWxGTEZOQlFWTklMR0ZCUVdGRExFTkJRV0lzUTBGQllqdEJRVU5CUlN4elFrRkJWVUVzVDBGQlQwTXNVMEZCVUN4RFFVRnBRaXhKUVVGcVFpeERRVUZXTzBGQlEwZzdRVUZEUkVvc2NVSkJRV0ZGTEUxQlFXSXNSMEZCYzBJc1EwRkJkRUk3TzBGQlJVRTdRVUZEUVN4WlFVRkpka1VzWVVGQllTeERRVUZETUVVc1QwRkJiRUlzUlVGQk1rSTdRVUZEZGtKNFJTeHRRa0ZCVDBNc1lVRkJVQ3hEUVVGeFFuZEZMRWxCUVhKQ0xFTkJRVEJDTEVsQlFURkNPMEZCUTBnN08wRkJSVVE3UVVGRFFXaEdMRmRCUVVkM1F5eFJRVUZJTEVOQlFWbDVReXhqUVVGYUxFTkJRVEpDUXl4WFFVRXpRaXhEUVVGMVF5eEpRVUYyUXpzN1FVRkZRVHRCUVVOQkxHRkJRVXRvUlN4SlFVRk1MRU5CUVZWcFJTeG5Ra0ZCVml4RFFVRXlRaXhKUVVFelFqdEJRVU5JTEV0QmVtUnZRanRCUVRKa2NrSkRMR2RDUVROa2NVSXNkMEpCTW1SUVF5eE5RVE5rVHl4RlFUSmtRenRCUVVOc1FpeFpRVUZKTEVOQlFVTkJMRTFCUVV3c1JVRkJZVHRCUVVOVVFTeHhRa0ZCVTNKR0xFZEJRVWR6Uml4WFFVRklMRU5CUVdWRExFMUJRV1lzUTBGQmMwSXNTVUZCZEVJc1JVRkJORUlzU1VGQk5VSXNRMEZCVkR0QlFVTklPMEZCUTBSR0xHVkJRVTl1UlN4SlFVRlFMRWRCUVdNc1NVRkJaRHRCUVVOQkxHVkJRVTl0UlN4TlFVRlFPMEZCUTBnc1MwRnFaVzlDT3pzN1FVRnRaWHBDT3p0QlFVVkpPenM3T3pzN096czdPenM3T3pzN096czdRVUZyUWtGSExGbEJkbVp4UWl4dlFrRjFabGhETEZGQmRtWlhMRVZCZFdaRVF5eFJRWFptUXl4RlFYVm1VME1zVFVGMlpsUXNSVUYxWm1sQ1F5eExRWFptYWtJc1JVRjFabmRDTzBGQlEzcEROVVlzVjBGQlJ6WkdMRkZCUVVnc1EwRkJXVW9zVVVGQldpeEZRVUZ6UWl4SlFVRjBRanRCUVVOQmVrWXNWMEZCUnpaR0xGRkJRVWdzUTBGQldVZ3NXVUZCV1N4RFFVRjRRaXhGUVVFeVFpeEpRVUV6UWpzN1FVRkZRVUVzYlVKQlFWZEJMRmxCUVZrc1EwRkJka0k3UVVGRFFVTXNhVUpCUVZOSExFMUJRVTFJTEUxQlFVNHNTVUZCWjBJelJpeEhRVUZISzBZc1MwRkJTQ3hEUVVGVFF5eGpRVUY2UWl4SFFVRXdRMHdzVFVGQmJrUTdRVUZEUVVNc1owSkJRVkZCTEZOQlFWTXNRMEZCYWtJN08wRkJSVUVzV1VGQlNVc3NXVUZCV1dwSExFZEJRVWQzUXl4UlFVRklMRU5CUVZrd1JDeFpRVUZhTEVWQlFXaENPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNXVUZCU1VNc1UwRkJVMFlzVlVGQlZVY3NZMEZCVml4RFFVRjVRaXhKUVVGNlFpeERRVUZpT3p0QlFVVkJTQ3hyUWtGQlZWUXNVVUZCVml4RFFVRnRRa01zVVVGQmJrSXNSVUZCTmtJc1NVRkJOMElzUlVGQmJVTkRMRkZCUVc1RExFVkJRVFpEUXl4TlFVRTNReXhGUVVGeFJFTXNTMEZCY2tRc1JVRkJORVJQTEUxQlFUVkVPMEZCUTBnc1MwRjRaMEp2UWpzN08wRkJNR2RDY2tJN096czdPenM3T3pzN096czdRVUZoUVVVc1owSkJkbWhDY1VJc2QwSkJkV2hDVUZvc1VVRjJhRUpQTEVWQmRXaENSMGNzUzBGMmFFSklMRVZCZFdoQ1ZUdEJRVU16UWl4aFFVRkxTaXhSUVVGTUxFTkJRV05ETEZGQlFXUXNSVUZCZDBJc1EwRkJlRUlzUlVGQk1rSXNRMEZCTTBJc1JVRkJPRUpITEV0QlFUbENPMEZCUTBnc1MwRjZhRUp2UWpzN08wRkJNbWhDY2tJN096czdPenM3T3p0QlFWTkJWU3hqUVhCcFFuRkNMSE5DUVc5cFFsUkRMRmRCY0dsQ1V5eEZRVzlwUWtrN1FVRkRja0lzV1VGQlNTeERRVUZEUVN4WFFVRk1MRVZCUTBrN08wRkJSVXAyUnl4WFFVRkhkME1zVVVGQlNDeERRVUZaTUVRc1dVRkJXaXhIUVVFeVFra3NWVUZCTTBJc1EwRkJjME5ETEZkQlFYUkRMRVZCUVcxRUxFbEJRVzVFTzBGQlEwZ3NTMEY2YVVKdlFqczdPMEZCTW1sQ2NrSTdPenM3T3pzN096dEJRVk5CT1VJc01FSkJjR3BDY1VJc2IwTkJiMnBDU3p0QlFVTjBRbnBGTEZkQlFVZDNReXhSUVVGSUxFTkJRVmt3UkN4WlFVRmFMRWRCUVRKQ1RTeHpRa0ZCTTBJc1EwRkJhMFFzU1VGQmJFUTdRVUZEU0R0QlFYUnFRbTlDTEVOQlFWUXNRMEZCYUVJN08wRkJlV3BDUVhwSExGVkJRVlV3Unl4cFFrRkJWaXhIUVVFNFFpeEpRVUU1UWp0QlFVTkJNVWNzVlVGQlZUSkhMR1ZCUVZZc1IwRkJORUlzUTBGQk5VSTdPMEZCUlVFc1NVRkJTWEpITEdGQlFXRXdSU3hQUVVGcVFpeEZRVUV3UWpzN1FVRkZkRUk3TzBGQlJVRm9SaXhqUVVGVk5FY3NhMEpCUVZZc1IwRkJLMElzUzBGQkwwSTdRVUZEUVRWSExHTkJRVlUyUnl4WlFVRldMRWRCUVhsQ0xFdEJRWHBDTzBGQlEwRTNSeXhqUVVGVk9FY3NhVUpCUVZZc1IwRkJPRUlzU1VGQk9VSTdRVUZEUVRsSExHTkJRVlVyUnl4TFFVRldMRWRCUVd0Q0xFVkJRV3hDT3p0QlFVVkJPMEZCUTBFN08wRkJSVUZ3U0N4UFFVRkhiVU1zUzBGQlNDeERRVUZUT1VJc1UwRkJWQ3hGUVVGdlFpeFpRVUZ3UWl4RlFVRnJReXhGUVVGc1F5eEZRVUZ6UXl4SlFVRjBRenRCUVVOQlRDeFBRVUZIYlVNc1MwRkJTQ3hEUVVGVE9VSXNVMEZCVkN4RlFVRnZRaXhQUVVGd1FpeEZRVUUyUWl4RlFVRTNRaXhGUVVGcFF5eEpRVUZxUXpzN1FVRkZRVHM3UVVGRlFVTXNUMEZCUnl0SExHMUNRVUZJTEVkQlFYbENMRVZCUVhwQ096dEJRVVZCYUVnc1kwRkJWV2xJTEZsQlFWWXNSMEZCZVVJc1ZVRkJWVU1zUjBGQlZpeEZRVUZsUXl4SlFVRm1MRVZCUVhGQ1F5eFJRVUZ5UWl4RlFVRXJRanRCUVVOd1JHNUlMRmRCUVVjclJ5eHRRa0ZCU0N4RFFVRjFRa3NzU1VGQmRrSXNRMEZCTkVJN1FVRkRlRUpETEhWQ1FVRlhTaXhIUVVSaE8wRkJSWGhDU3l4elFrRkJWVW9zU1VGR1l6dEJRVWQ0UWtNc2MwSkJRVlZCTzBGQlNHTXNVMEZCTlVJN1FVRkxTQ3hMUVU1RU8wRkJUMGc3TzBGQlJVUTdRVUZEUVhwSUxFZEJRVWR0UXl4TFFVRklMRU5CUVZNNVFpeFRRVUZVTEVWQlFXOUNMSE5DUVVGd1FpeEZRVUUwUXl4VlFVRlZhMGdzUjBGQlZpeEZRVUZsVFN4TFFVRm1MRVZCUVhOQ08wRkJRemxFTEZGQlFVbERMRlZCUVZWRUxFMUJRVTFGTEdkQ1FVRndRanRCUVVOQkxGRkJRVWxFTEU5QlFVb3NSVUZCWVR0QlFVTlVVQ3haUVVGSlVpeHBRa0ZCU2l4SFFVRjNRbVVzVDBGQmVFSTdRVUZEU0R0QlFVTkVMRkZCUVVsRkxGRkJRVkZJTEUxQlFVMUpMR05CUVd4Q08wRkJRMEVzVVVGQlNVUXNVMEZCVXl4UFFVRlBRU3hMUVVGUUxFdEJRV2xDTEZGQlFUbENMRVZCUVhkRE8wRkJRM0JEVkN4WlFVRkpVQ3hsUVVGS0xFZEJRWE5DWjBJc1MwRkJkRUk3UVVGRFNEdEJRVU5FTEZGQlFVbHlTQ3hoUVVGaE1FVXNUMEZCYWtJc1JVRkJNRUk3UVVGRGRFSXNXVUZCU1RkRkxFOUJRVTlHTEVkQlFVZE9MRVZCUVVnc1EwRkJUVGhDTEZsQlFVNHNRMEZCYlVKNVJpeEhRVUZ1UWl4RFFVRllPMEZCUTBFc1lVRkJTeXhKUVVGSlZ5eEhRVUZVTEVsQlFXZENUQ3hMUVVGb1FpeEZRVUYxUWp0QlFVTnVRaXhuUWtGQlNVMHNUVUZCVFU0c1RVRkJUVXNzUjBGQlRpeERRVUZXTzBGQlEwRXNiMEpCUVZGQkxFZEJRVkk3UVVGRFNTeHhRa0ZCU3l4dFFrRkJURHRCUVVOSldDeDNRa0ZCU1U0c2EwSkJRVW9zUjBGQmVVSXNRMEZCUXl4RFFVRkRhMElzUjBGQk0wSTdRVUZEUVRzN1FVRkZTaXh4UWtGQlN5eGhRVUZNTzBGQlEwa3NkMEpCUVVsQkxFZEJRVW9zUlVGQlV6dEJRVU5NTERSQ1FVRkpReXgzUWtGQmVVSXNkVUpCUVhWQ1VDeExRVUY0UWl4SFFVRnBRMEVzVFVGQlRWRXNhVUpCUVhaRExFZEJRVEpFWkN4SlFVRkpUaXhyUWtGQk0wWTdRVUZEUVN3MFFrRkJTVzFDTEhGQ1FVRktMRVZCUVRKQ08wRkJRM1pDWWl4blEwRkJTVXdzV1VGQlNpeEhRVUZ0UWl4SlFVRnVRanRCUVVOSUxIbENRVVpFTEUxQlIwczdRVUZEUkRWSExDdENRVUZIWjBrc1RVRkJTQ3hEUVVGVkxFbEJRVllzUlVGQlowSTVTQ3hKUVVGb1FqdEJRVU5JTzBGQlEwbzdRVUZEUkRzN1FVRkZTaXh4UWtGQlN5eFhRVUZNTzBGQlEwbFNMSFZDUVVGSGJVTXNTMEZCU0N4RFFVRlRiMFlzUjBGQlZDeEZRVUZqTEZsQlFXUXNSVUZCTkVKWkxFZEJRVFZDTEVWQlFXbERMRWxCUVdwRE8wRkJRMEU3TzBGQlJVb3NjVUpCUVVzc1RVRkJURHRCUVVOSmJra3NkVUpCUVVkdFF5eExRVUZJTEVOQlFWTnZSaXhIUVVGVUxFVkJRV01zVDBGQlpDeEZRVUYxUWxrc1IwRkJka0lzUlVGQk5FSXNTVUZCTlVJN1FVRkRRVHM3UVVGRlNpeHhRa0ZCU3l4TlFVRk1PMEZCUTBrNVNDdzRRa0ZCVldsSUxGbEJRVllzUTBGQmRVSkRMRWRCUVhaQ0xFVkJRVFJDV1N4SFFVRTFRaXhGUVVGcFEwNHNUVUZCVFZVc1dVRkJka003UVVGRFFUczdRVUZGU2l4eFFrRkJTeXhyUWtGQlREdEJRVU5KYUVJc2QwSkJRVWxLTEdsQ1FVRktMRWRCUVhkQ1NTeEhRVUY0UWp0QlFVTkJPenRCUVVWS0xIRkNRVUZMTEd0Q1FVRk1PMEZCUTBFc2NVSkJRVXNzWjBKQlFVdzdRVUZEU1R0QlFVTkJPenRCUVVWS0xIRkNRVUZMTEUxQlFVdzdRVUZEU1VFc2QwSkJRVWxJTEV0QlFVb3NSMEZCV1dVc1IwRkJXanRCUVVOQk96dEJRVVZLTzBGQlEwazNTQ3gxUWtGQlIyZEpMRTFCUVVnc1EwRkJWU3hKUVVGV0xFVkJRV2RDU2l4SFFVRm9RaXhGUVVGeFFqRklMRWxCUVhKQ08wRkJRMEU3UVVFMVExSTdRVUU0UTBnN1FVRkRTanRCUVVOS0xFTkJOMFJFT3p0QlFTdEVRVWdzVlVGQlZXMUpMRk5CUVZZc1EwRkJiMEpETEZsQlFYQkNMRWRCUVcxRExFVkJRVzVET3p0QlFVVkJia2tzUjBGQlIwUXNVMEZCU0N4SFFVRmxjVWtzVDBGQlQwTXNUMEZCVUN4SFFVRnBRblJKTEZOQlFXaERJaXdpWm1sc1pTSTZJa05EUTI5dGNHOXVaVzUwTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQkRiM0I1Y21sbmFIUWdLR01wSURJd01UTXRNakF4TmlCRGFIVnJiMjVuSUZSbFkyaHViMnh2WjJsbGN5QkpibU11WEc0Z1EyOXdlWEpwWjJoMElDaGpLU0F5TURFM0xUSXdNVGdnV0dsaGJXVnVJRmxoYW1rZ1UyOW1kSGRoY21VZ1EyOHVMQ0JNZEdRdVhHNWNiaUJvZEhSd2N6b3ZMM2QzZHk1amIyTnZjeTVqYjIwdlhHNWNiaUJRWlhKdGFYTnphVzl1SUdseklHaGxjbVZpZVNCbmNtRnVkR1ZrTENCbWNtVmxJRzltSUdOb1lYSm5aU3dnZEc4Z1lXNTVJSEJsY25OdmJpQnZZblJoYVc1cGJtY2dZU0JqYjNCNVhHNGdiMllnZEdocGN5QnpiMlowZDJGeVpTQmhibVFnWVhOemIyTnBZWFJsWkNCbGJtZHBibVVnYzI5MWNtTmxJR052WkdVZ0tIUm9aU0JjSWxOdlpuUjNZWEpsWENJcExDQmhJR3hwYldsMFpXUXNYRzRnSUhkdmNteGtkMmxrWlN3Z2NtOTVZV3gwZVMxbWNtVmxMQ0J1YjI0dFlYTnphV2R1WVdKc1pTd2djbVYyYjJOaFlteGxJR0Z1WkNCdWIyNHRaWGhqYkhWemFYWmxJR3hwWTJWdWMyVmNiaUIwYnlCMWMyVWdRMjlqYjNNZ1EzSmxZWFJ2Y2lCemIyeGxiSGtnZEc4Z1pHVjJaV3h2Y0NCbllXMWxjeUJ2YmlCNWIzVnlJSFJoY21kbGRDQndiR0YwWm05eWJYTXVJRmx2ZFNCemFHRnNiRnh1SUNCdWIzUWdkWE5sSUVOdlkyOXpJRU55WldGMGIzSWdjMjltZEhkaGNtVWdabTl5SUdSbGRtVnNiM0JwYm1jZ2IzUm9aWElnYzI5bWRIZGhjbVVnYjNJZ2RHOXZiSE1nZEdoaGRDZHpYRzRnSUhWelpXUWdabTl5SUdSbGRtVnNiM0JwYm1jZ1oyRnRaWE11SUZsdmRTQmhjbVVnYm05MElHZHlZVzUwWldRZ2RHOGdjSFZpYkdsemFDd2daR2x6ZEhKcFluVjBaU3hjYmlBZ2MzVmliR2xqWlc1elpTd2dZVzVrTDI5eUlITmxiR3dnWTI5d2FXVnpJRzltSUVOdlkyOXpJRU55WldGMGIzSXVYRzVjYmlCVWFHVWdjMjltZEhkaGNtVWdiM0lnZEc5dmJITWdhVzRnZEdocGN5Qk1hV05sYm5ObElFRm5jbVZsYldWdWRDQmhjbVVnYkdsalpXNXpaV1FzSUc1dmRDQnpiMnhrTGx4dUlGaHBZVzFsYmlCWllXcHBJRk52Wm5SM1lYSmxJRU52TGl3Z1RIUmtMaUJ5WlhObGNuWmxjeUJoYkd3Z2NtbG5hSFJ6SUc1dmRDQmxlSEJ5WlhOemJIa2daM0poYm5SbFpDQjBieUI1YjNVdVhHNWNiaUJVU0VVZ1UwOUdWRmRCVWtVZ1NWTWdVRkpQVmtsRVJVUWdYQ0pCVXlCSlUxd2lMQ0JYU1ZSSVQxVlVJRmRCVWxKQlRsUlpJRTlHSUVGT1dTQkxTVTVFTENCRldGQlNSVk5USUU5U1hHNGdTVTFRVEVsRlJDd2dTVTVEVEZWRVNVNUhJRUpWVkNCT1QxUWdURWxOU1ZSRlJDQlVUeUJVU0VVZ1YwRlNVa0ZPVkVsRlV5QlBSaUJOUlZKRFNFRk9WRUZDU1V4SlZGa3NYRzRnUmtsVVRrVlRVeUJHVDFJZ1FTQlFRVkpVU1VOVlRFRlNJRkJWVWxCUFUwVWdRVTVFSUU1UFRrbE9SbEpKVGtkRlRVVk9WQzRnU1U0Z1RrOGdSVlpGVGxRZ1UwaEJURXdnVkVoRlhHNGdRVlZVU0U5U1V5QlBVaUJEVDFCWlVrbEhTRlFnU0U5TVJFVlNVeUJDUlNCTVNVRkNURVVnUms5U0lFRk9XU0JEVEVGSlRTd2dSRUZOUVVkRlV5QlBVaUJQVkVoRlVseHVJRXhKUVVKSlRFbFVXU3dnVjBoRlZFaEZVaUJKVGlCQlRpQkJRMVJKVDA0Z1QwWWdRMDlPVkZKQlExUXNJRlJQVWxRZ1QxSWdUMVJJUlZKWFNWTkZMQ0JCVWtsVFNVNUhJRVpTVDAwc1hHNGdUMVZVSUU5R0lFOVNJRWxPSUVOUFRrNUZRMVJKVDA0Z1YwbFVTQ0JVU0VVZ1UwOUdWRmRCVWtVZ1QxSWdWRWhGSUZWVFJTQlBVaUJQVkVoRlVpQkVSVUZNU1U1SFV5QkpUbHh1SUZSSVJTQlRUMFpVVjBGU1JTNWNiaUFxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUwxeHVYRzUyWVhJZ1EwTlBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMaTl3YkdGMFptOXliUzlEUTA5aWFtVmpkQ2NwTzF4dWRtRnlJR3B6SUQwZ2NtVnhkV2x5WlNnbkxpNHZjR3hoZEdadmNtMHZhbk1uS1R0Y2JuWmhjaUJwWkVkbGJtVnlZWFJsY2lBOUlHNWxkeUFvY21WeGRXbHlaU2duTGk0dmNHeGhkR1p2Y20wdmFXUXRaMlZ1WlhKaGRHVnlKeWtwS0NkRGIyMXdKeWs3WEc1Y2JuWmhjaUJKYzA5dVJXNWhZbXhsUTJGc2JHVmtJRDBnUTBOUFltcGxZM1F1Um14aFozTXVTWE5QYmtWdVlXSnNaVU5oYkd4bFpEdGNiblpoY2lCSmMwOXVURzloWkVOaGJHeGxaQ0E5SUVORFQySnFaV04wTGtac1lXZHpMa2x6VDI1TWIyRmtRMkZzYkdWa08xeHVYRzR2S2lwY2JpQXFJQ0VqWlc1Y2JpQXFJRUpoYzJVZ1kyeGhjM01nWm05eUlHVjJaWEo1ZEdocGJtY2dZWFIwWVdOb1pXUWdkRzhnVG05a1pTaEZiblJwZEhrcExqeGljaTgrWEc0Z0tpQThZbkl2UGx4dUlDb2dUazlVUlRvZ1RtOTBJR0ZzYkc5M1pXUWdkRzhnZFhObElHTnZibk4wY25WamRHbHZiaUJ3WVhKaGJXVjBaWEp6SUdadmNpQkRiMjF3YjI1bGJuUW5jeUJ6ZFdKamJHRnpjMlZ6TEZ4dUlDb2dJQ0FnSUNBZ1ltVmpZWFZ6WlNCRGIyMXdiMjVsYm5RZ2FYTWdZM0psWVhSbFpDQmllU0IwYUdVZ1pXNW5hVzVsTGx4dUlDb2dJU042YUZ4dUlDb2c1b21BNXB5SjZabUU1WXFnNVlpdzZJcUM1NEs1NTVxRTVaKzY1N0c3NDRDQ1BHSnlMejVjYmlBcUlEeGljaTgrWEc0Z0tpRG1zNmptaEkvdnZKcmt1STNsaFlIb3Jyamt2Yi9ubEtqbnU0VGt1N2JubW9UbHJaRG5zYnZtbm9UcGdLRGxqNExtbGJEdnZJemxtNkRrdUxybnU0VGt1N2JtbUsvbmxMSGx2SlhtazQ3bGlKdmx1N3JubW9UamdJSmNiaUFxWEc0Z0tpQkFZMnhoYzNNZ1EyOXRjRzl1Wlc1MFhHNGdLaUJBWlhoMFpXNWtjeUJQWW1wbFkzUmNiaUFxTDF4dWRtRnlJRU52YlhCdmJtVnVkQ0E5SUdOakxrTnNZWE56S0h0Y2JpQWdJQ0J1WVcxbE9pQW5ZMk11UTI5dGNHOXVaVzUwSnl4Y2JpQWdJQ0JsZUhSbGJtUnpPaUJEUTA5aWFtVmpkQ3hjYmx4dUlDQWdJR04wYjNJNklFTkRYMFZFU1ZSUFVpQS9JR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSGRwYm1SdmR5NWZVMk5sYm1VZ0ppWWdYMU5qWlc1bExrRnpjMlYwYzFkaGRHTm9aWElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRjlUWTJWdVpTNUJjM05sZEhOWFlYUmphR1Z5TG1sdWFYUkRiMjF3YjI1bGJuUW9kR2hwY3lrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmFXUWdQU0JGWkdsMGIzSXVWWFJwYkhNdVZYVnBaRlYwYVd4ekxuVjFhV1FvS1R0Y2JseHVJQ0FnSUNBZ0lDQXZLaXBjYmlBZ0lDQWdJQ0FnSUNvZ1VtVm5hWE4wWlhJZ1lXeHNJSEpsYkdGMFpXUWdSWFpsYm5SVVlYSm5aWFJ6TEZ4dUlDQWdJQ0FnSUNBZ0tpQmhiR3dnWlhabGJuUWdZMkZzYkdKaFkydHpJSGRwYkd3Z1ltVWdjbVZ0YjNabFpDQnBiaUJmYjI1UWNtVkVaWE4wY205NVhHNGdJQ0FnSUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3UVhKeVlYbDlJRjlmWlhabGJuUlVZWEpuWlhSelhHNGdJQ0FnSUNBZ0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBZ0lDQWdJQ0FxTDF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlmWlhabGJuUlVZWEpuWlhSeklEMGdXMTA3WEc0Z0lDQWdmU0E2SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmFXUWdQU0JwWkVkbGJtVnlZWFJsY2k1blpYUk9aWGRKWkNncE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVgxOWxkbVZ1ZEZSaGNtZGxkSE1nUFNCYlhUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2NISnZjR1Z5ZEdsbGN6b2dlMXh1SUNBZ0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBZ0lDb2dJU05sYmlCVWFHVWdibTlrWlNCMGFHbHpJR052YlhCdmJtVnVkQ0JwY3lCaGRIUmhZMmhsWkNCMGJ5NGdRU0JqYjIxd2IyNWxiblFnYVhNZ1lXeDNZWGx6SUdGMGRHRmphR1ZrSUhSdklHRWdibTlrWlM1Y2JpQWdJQ0FnSUNBZ0lDb2dJU042YUNEb3I2WG51NFRrdTdib29xdnBtWVRsaXFEbGlMRG5tb1RvaW9MbmdybmpnSUxudTRUa3U3Ym1nTHZrdkpycG1ZVGxpcURsaUxEa3VJRGt1S3JvaW9MbmdybmpnSUpjYmlBZ0lDQWdJQ0FnSUNvZ1FIQnliM0JsY25SNUlHNXZaR1ZjYmlBZ0lDQWdJQ0FnSUNvZ1FIUjVjR1VnZTA1dlpHVjlYRzRnSUNBZ0lDQWdJQ0FxSUVCbGVHRnRjR3hsWEc0Z0lDQWdJQ0FnSUNBcUlHTmpMbXh2WnloamIyMXdMbTV2WkdVcE8xeHVJQ0FnSUNBZ0lDQWdLaTljYmlBZ0lDQWdJQ0FnYm05a1pUb2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZERvZ2JuVnNiQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIWnBjMmxpYkdVNklHWmhiSE5sWEc0Z0lDQWdJQ0FnSUgwc1hHNWNiaUFnSUNBZ0lDQWdibUZ0WlRvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWjJWMElDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmYm1GdFpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZibUZ0WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR05zWVhOelRtRnRaU0E5SUdOakxtcHpMbWRsZEVOc1lYTnpUbUZ0WlNoMGFHbHpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2RISnBiVXhsWm5RZ1BTQmpiR0Z6YzA1aGJXVXViR0Z6ZEVsdVpHVjRUMllvSnk0bktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhKcGJVeGxablFnUGowZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVZ1BTQmpiR0Z6YzA1aGJXVXVjMnhwWTJVb2RISnBiVXhsWm5RZ0t5QXhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJtOWtaUzV1WVcxbElDc2dKenduSUNzZ1kyeGhjM05PWVcxbElDc2dKejRuTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxkQ0FvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXVZVzFsSUQwZ2RtRnNkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RtbHphV0pzWlRvZ1ptRnNjMlZjYmlBZ0lDQWdJQ0FnZlN4Y2JseHVJQ0FnSUNBZ0lDQXZLaXBjYmlBZ0lDQWdJQ0FnSUNvZ0lTTmxiaUJVYUdVZ2RYVnBaQ0JtYjNJZ1pXUnBkRzl5TGx4dUlDQWdJQ0FnSUNBZ0tpQWhJM3BvSU9lN2hPUzd0dWVhaENCMWRXbGs3N3lNNTVTbzVMcU81N3lXNkw2UjVabW80NENDWEc0Z0lDQWdJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQjFkV2xrWEc0Z0lDQWdJQ0FnSUNBcUlFQjBlWEJsSUh0VGRISnBibWQ5WEc0Z0lDQWdJQ0FnSUNBcUlFQnlaV0ZrVDI1c2VWeHVJQ0FnSUNBZ0lDQWdLaUJBWlhoaGJYQnNaVnh1SUNBZ0lDQWdJQ0FnS2lCall5NXNiMmNvWTI5dGNDNTFkV2xrS1R0Y2JpQWdJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQWdJSFYxYVdRNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdkbGRDQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgybGtPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhacGMybGliR1U2SUdaaGJITmxYRzRnSUNBZ0lDQWdJSDBzWEc1Y2JpQWdJQ0FnSUNBZ1gxOXpZM0pwY0hSQmMzTmxkRG9nUTBOZlJVUkpWRTlTSUNZbUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdkbGRDQW9LU0I3ZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2YzJWMElDaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z0lDQWdhV1lnS0hSb2FYTXVYMTl6WTNKcGNIUlZkV2xrSUNFOVBTQjJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z0lDQWdJQ0FnSUdsbUlDaDJZV3gxWlNBbUppQkZaR2wwYjNJdVZYUnBiSE11VlhWcFpGVjBhV3h6TG1selZYVnBaQ2gyWVd4MVpTNWZkWFZwWkNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdOc1lYTnpTV1FnUFNCRlpHbDBiM0l1VlhScGJITXVWWFZwWkZWMGFXeHpMbU52YlhCeVpYTnpWWFZwWkNoMllXeDFaUzVmZFhWcFpDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QWdJQ0FnSUNBZ0lDQWdJSFpoY2lCT1pYZERiMjF3SUQwZ1kyTXVhbk11WDJkbGRFTnNZWE56UW5sSlpDaGpiR0Z6YzBsa0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dwekxtbHpRMmhwYkdSRGJHRnpjMDltS0U1bGQwTnZiWEFzSUdOakxrTnZiWEJ2Ym1WdWRDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmpMbmRoY200b0oxTnZjbko1TENCeVpYQnNZV05wYm1jZ1kyOXRjRzl1Wlc1MElITmpjbWx3ZENCcGN5QnViM1FnZVdWMElHbHRjR3hsYldWdWRHVmtMaWNwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeTlGWkdsMGIzSXVTWEJqTG5ObGJtUlViMWRwYm5Nb0ozSmxiRzloWkRwM2FXNWtiM2N0YzJOeWFYQjBjeWNzSUVWa2FYUnZjaTVmVTJGdVpHSnZlQzVqYjIxd2FXeGxaQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZeTVsY25KdmNpZ25RMkZ1SUc1dmRDQm1hVzVrSUdFZ1kyOXRjRzl1Wlc1MElHbHVJSFJvWlNCelkzSnBjSFFnZDJocFkyZ2dkWFZwWkNCcGN5QmNJaVZ6WENJdUp5d2dkbUZzZFdVdVgzVjFhV1FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z0lDQWdJQ0FnSUNBZ0lDQmpZeTVsY25KdmNpZ25TVzUyWVd4cFpDQlRZM0pwY0hRbktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkwzMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCa2FYTndiR0Y1VG1GdFpUb2dKMU5qY21sd2RDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUJqWXk1ZlUyTnlhWEIwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkRzl2YkhScGNEb2dRME5mUkVWV0lDWW1JQ2RwTVRodU9rbE9VMUJGUTFSUFVpNWpiMjF3YjI1bGJuUXVjMk55YVhCMEoxeHVJQ0FnSUNBZ0lDQjlMRnh1WEc0Z0lDQWdJQ0FnSUM4cUtseHVJQ0FnSUNBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnWDJWdVlXSnNaV1JjYmlBZ0lDQWdJQ0FnSUNvZ1FIUjVjR1VnZTBKdmIyeGxZVzU5WEc0Z0lDQWdJQ0FnSUNBcUlFQndjbWwyWVhSbFhHNGdJQ0FnSUNBZ0lDQXFMMXh1SUNBZ0lDQWdJQ0JmWlc1aFlteGxaRG9nZEhKMVpTeGNibHh1SUNBZ0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBZ0lDb2dJU05sYmlCcGJtUnBZMkYwWlhNZ2QyaGxkR2hsY2lCMGFHbHpJR052YlhCdmJtVnVkQ0JwY3lCbGJtRmliR1ZrSUc5eUlHNXZkQzVjYmlBZ0lDQWdJQ0FnSUNvZ0lTTjZhQ0Rvb2FqbnBMcm9yNlhudTRUa3U3Ym9oNnJvdXF2bW1LL2xrS2Jsa0svbmxLampnSUpjYmlBZ0lDQWdJQ0FnSUNvZ1FIQnliM0JsY25SNUlHVnVZV0pzWldSY2JpQWdJQ0FnSUNBZ0lDb2dRSFI1Y0dVZ2UwSnZiMnhsWVc1OVhHNGdJQ0FnSUNBZ0lDQXFJRUJrWldaaGRXeDBJSFJ5ZFdWY2JpQWdJQ0FnSUNBZ0lDb2dRR1Y0WVcxd2JHVmNiaUFnSUNBZ0lDQWdJQ29nWTI5dGNDNWxibUZpYkdWa0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDb2dZMk11Ykc5bktHTnZiWEF1Wlc1aFlteGxaQ2s3WEc0Z0lDQWdJQ0FnSUNBcUwxeHVJQ0FnSUNBZ0lDQmxibUZpYkdWa09pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCblpYUWdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWxibUZpYkdWa08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sZENBb2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1ZlpXNWhZbXhsWkNBaFBUMGdkbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZaVzVoWW14bFpDQTlJSFpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV1YjJSbExsOWhZM1JwZG1WSmJraHBaWEpoY21Ob2VTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdOdmJYQlRZMmhsWkhWc1pYSWdQU0JqWXk1a2FYSmxZM1J2Y2k1ZlkyOXRjRk5qYUdWa2RXeGxjanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiWEJUWTJobFpIVnNaWEl1Wlc1aFlteGxRMjl0Y0NoMGFHbHpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052YlhCVFkyaGxaSFZzWlhJdVpHbHpZV0pzWlVOdmJYQW9kR2hwY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RtbHphV0pzWlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmhibWx0WVhSaFlteGxPaUIwY25WbFhHNGdJQ0FnSUNBZ0lIMHNYRzVjYmlBZ0lDQWdJQ0FnTHlvcVhHNGdJQ0FnSUNBZ0lDQXFJQ0VqWlc0Z2FXNWthV05oZEdWeklIZG9aWFJvWlhJZ2RHaHBjeUJqYjIxd2IyNWxiblFnYVhNZ1pXNWhZbXhsWkNCaGJtUWdhWFJ6SUc1dlpHVWdhWE1nWVd4emJ5QmhZM1JwZG1VZ2FXNGdkR2hsSUdocFpYSmhjbU5vZVM1Y2JpQWdJQ0FnSUNBZ0lDb2dJU042YUNEb29ham5wTHJvcjZYbnU0VGt1N2JtbUsvbGtLYm9vcXZsa0svbmxLamx1YmJrdUpUbWlZRGxuS2pubW9Ub2lvTG5ncm5rdVovbHBJVGt1bzdtdjREbXRMdm5pcmJtZ0lIamdJSmNiaUFnSUNBZ0lDQWdJQ29nUUhCeWIzQmxjblI1SUdWdVlXSnNaV1JKYmtocFpYSmhjbU5vZVZ4dUlDQWdJQ0FnSUNBZ0tpQkFkSGx3WlNCN1FtOXZiR1ZoYm4xY2JpQWdJQ0FnSUNBZ0lDb2dRSEpsWVdSUGJteDVYRzRnSUNBZ0lDQWdJQ0FxSUVCbGVHRnRjR3hsWEc0Z0lDQWdJQ0FnSUNBcUlHTmpMbXh2WnloamIyMXdMbVZ1WVdKc1pXUkpia2hwWlhKaGNtTm9lU2s3WEc0Z0lDQWdJQ0FnSUNBcUwxeHVJQ0FnSUNBZ0lDQmxibUZpYkdWa1NXNUlhV1Z5WVhKamFIazZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHZGxkQ0FvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMlZ1WVdKc1pXUWdKaVlnZEdocGN5NXViMlJsTGw5aFkzUnBkbVZKYmtocFpYSmhjbU5vZVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjJhWE5wWW14bE9pQm1ZV3h6WlZ4dUlDQWdJQ0FnSUNCOUxGeHVYRzRnSUNBZ0lDQWdJQzhxS2x4dUlDQWdJQ0FnSUNBZ0tpQWhJMlZ1SUZKbGRIVnlibk1nWVNCMllXeDFaU0IzYUdsamFDQjFjMlZrSUhSdklHbHVaR2xqWVhSbElIUm9aU0J2Ymt4dllXUWdaMlYwSUdOaGJHeGxaQ0J2Y2lCdWIzUXVYRzRnSUNBZ0lDQWdJQ0FxSUNFamVtZ2c2TCtVNVp1ZTVMaUE1TGlxNVlDODU1U281cDJsNVlpazVwYXRJRzl1VEc5aFpDRG1tSy9sa0tib29xdm9zSVBubEtqb3Y0ZnZ2SXprdUkzbnJZbmt1bzRnTUNEbWw3Ym9zSVBubEtqb3Y0ZnZ2SXpucllua3VvNGdNQ0RtbDdibW5Lcm9zSVBubEtqamdJSmNiaUFnSUNBZ0lDQWdJQ29nUUhCeWIzQmxjblI1SUY5cGMwOXVURzloWkVOaGJHeGxaRnh1SUNBZ0lDQWdJQ0FnS2lCQWRIbHdaU0I3VG5WdFltVnlmVnh1SUNBZ0lDQWdJQ0FnS2lCQWNtVmhaRTl1YkhsY2JpQWdJQ0FnSUNBZ0lDb2dRR1Y0WVcxd2JHVmNiaUFnSUNBZ0lDQWdJQ29nWTJNdWJHOW5LSFJvYVhNdVgybHpUMjVNYjJGa1EyRnNiR1ZrSUQ0Z01DazdYRzRnSUNBZ0lDQWdJQ0FxTDF4dUlDQWdJQ0FnSUNCZmFYTlBia3h2WVdSRFlXeHNaV1E2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2RsZENBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDI5aWFrWnNZV2R6SUNZZ1NYTlBia3h2WVdSRFlXeHNaV1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzh2SUV4SlJrVkRXVU5NUlNCTlJWUklUMFJUWEc1Y2JpQWdJQ0F2THlCR2FYSmxZbUZzYkNCd2NtOTJhV1JsY3lCc2FXWmxZM2xqYkdVZ2JXVjBhRzlrY3lCMGFHRjBJSGx2ZFNCallXNGdjM0JsWTJsbWVTQjBieUJvYjI5cklHbHVkRzhnZEdocGN5QndjbTlqWlhOekxseHVJQ0FnSUM4dklGZGxJSEJ5YjNacFpHVWdVSEpsSUcxbGRHaHZaSE1zSUhkb2FXTm9JR0Z5WlNCallXeHNaV1FnY21sbmFIUWdZbVZtYjNKbElITnZiV1YwYUdsdVp5Qm9ZWEJ3Wlc1ekxDQmhibVFnVUc5emRDQnRaWFJvYjJSeklIZG9hV05vSUdGeVpTQmpZV3hzWldRZ2NtbG5hSFFnWVdaMFpYSWdjMjl0WlhSb2FXNW5JR2hoY0hCbGJuTXVYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdUlGVndaR0YwWlNCcGN5QmpZV3hzWldRZ1pYWmxjbmtnWm5KaGJXVXNJR2xtSUhSb1pTQkRiMjF3YjI1bGJuUWdhWE1nWlc1aFlteGxaQzQ4WW5JdlBseHVJQ0FnSUNBcUlGUm9hWE1nYVhNZ1lTQnNhV1psWTNsamJHVWdiV1YwYUc5a0xpQkpkQ0J0WVhrZ2JtOTBJR0psSUdsdGNHeGxiV1Z1ZEdWa0lHbHVJSFJvWlNCemRYQmxjaUJqYkdGemN5NGdXVzkxSUdOaGJpQnZibXg1SUdOaGJHd2dhWFJ6SUhOMWNHVnlJR05zWVhOeklHMWxkR2h2WkNCcGJuTnBaR1VnYVhRdUlFbDBJSE5vYjNWc1pDQnViM1FnWW1VZ1kyRnNiR1ZrSUcxaGJuVmhiR3g1SUdWc2MyVjNhR1Z5WlM1Y2JpQWdJQ0FnS2lBaEkzcG9JT1dtZ3VhZW5PaXZwZWU3aE9TN3R1V1FyK2VVcU8rOGpPV0ltZWF2aitXNHAraXdnK2VVcUNCMWNHUmhkR1hqZ0lJOFluSXZQbHh1SUNBZ0lDQXFJT2l2cGVhV3VlYXpsZVM0dXVlVW4rV1J2ZVdScU9hY24rYVd1ZWF6bGUrOGpPZUl0dWV4dSthY3F1Vy9oZVM4bXVhY2llV3VudWVPc09PQWd1VzV0dVM0bE9TOW9PV1BxdWlEdmVXY3FPaXZwZWFXdWVhemxlV0doZW1EcU9pd2crZVVxT2VJdHVleHUrZWFoT1d1bnVlT3NPKzhqT1M0amVXUHIrV2NxT1dGdHVXdWcrV2NzT2FXdWVlYnRPYU9wZWl3ZytlVXFPaXZwZWFXdWVhemxlT0FnbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdkWEJrWVhSbFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUdSMElDMGdkR2hsSUdSbGJIUmhJSFJwYldVZ2FXNGdjMlZqYjI1a2N5QnBkQ0IwYjI5cklIUnZJR052YlhCc1pYUmxJSFJvWlNCc1lYTjBJR1p5WVcxbFhHNGdJQ0FnSUNvZ1FIQnliM1JsWTNSbFpGeHVJQ0FnSUNBcUwxeHVJQ0FnSUhWd1pHRjBaVG9nYm5Wc2JDeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1RHRjBaVlZ3WkdGMFpTQnBjeUJqWVd4c1pXUWdaWFpsY25rZ1puSmhiV1VzSUdsbUlIUm9aU0JEYjIxd2IyNWxiblFnYVhNZ1pXNWhZbXhsWkM0OFluSXZQbHh1SUNBZ0lDQXFJRlJvYVhNZ2FYTWdZU0JzYVdabFkzbGpiR1VnYldWMGFHOWtMaUJKZENCdFlYa2dibTkwSUdKbElHbHRjR3hsYldWdWRHVmtJR2x1SUhSb1pTQnpkWEJsY2lCamJHRnpjeTRnV1c5MUlHTmhiaUJ2Ym14NUlHTmhiR3dnYVhSeklITjFjR1Z5SUdOc1lYTnpJRzFsZEdodlpDQnBibk5wWkdVZ2FYUXVJRWwwSUhOb2IzVnNaQ0J1YjNRZ1ltVWdZMkZzYkdWa0lHMWhiblZoYkd4NUlHVnNjMlYzYUdWeVpTNWNiaUFnSUNBZ0tpQWhJM3BvSU9XbWd1YWVuT2l2cGVlN2hPUzd0dVdRcitlVXFPKzhqT1dJbWVhdmorVzRwK2l3ZytlVXFDQk1ZWFJsVlhCa1lYUmw0NENDUEdKeUx6NWNiaUFnSUNBZ0tpRG9yNlhtbHJubXM1WGt1THJubEovbGtiM2xrYWptbkovbWxybm1zNVh2dkl6bmlMYm5zYnZtbktybHY0WGt2SnJtbklubHJwN25qckRqZ0lMbHViYmt1SlRrdmFEbGo2cm9nNzNsbktqb3I2WG1scm5tczVYbGhvWHBnNmpvc0lQbmxLam5pTGJuc2J2bm1vVGxycDduanJEdnZJemt1STNsajYvbG5LamxoYmJscm9QbG5MRG1scm5ubTdUbWpxWG9zSVBubEtqb3I2WG1scm5tczVYamdJSmNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lHeGhkR1ZWY0dSaGRHVmNiaUFnSUNBZ0tpQkFjSEp2ZEdWamRHVmtYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2JHRjBaVlZ3WkdGMFpUb2diblZzYkN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlHQmZYM0J5Wld4dllXUmdJR2x6SUdOaGJHeGxaQ0JpWldadmNtVWdaWFpsY25rZ2IyNU1iMkZrTGx4dUlDQWdJQ0FxSUVsMElHbHpJSFZ6WldRZ2RHOGdhVzVwZEdsaGJHbDZaU0IwYUdVZ1luVnBiSFJwYmlCamIyMXdiMjVsYm5SeklHbHVkR1Z5Ym1Gc2JIa3NYRzRnSUNBZ0lDb2dkRzhnWVhadmFXUWdZMmhsWTJ0cGJtY2dkMmhsZEdobGNpQnZia3h2WVdRZ2FYTWdZMkZzYkdWa0lHSmxabTl5WlNCbGRtVnllU0J3ZFdKc2FXTWdiV1YwYUc5a0lHTmhiR3h6TGx4dUlDQWdJQ0FxSUZSb2FYTWdiV1YwYUc5a0lITm9iM1ZzWkNCaVpTQnlaVzF2ZG1Wa0lHbG1JSE5qY21sd2RDQndjbWx2Y21sMGVTQnBjeUJ6ZFhCd2IzSjBaV1F1WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBYldWMGFHOWtJRjlmY0hKbGJHOWhaRnh1SUNBZ0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1gxOXdjbVZzYjJGa09pQnVkV3hzTEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxibHh1SUNBZ0lDQXFJRmRvWlc0Z1lYUjBZV05vYVc1bklIUnZJR0Z1SUdGamRHbDJaU0J1YjJSbElHOXlJR2wwY3lCdWIyUmxJR1pwY25OMElHRmpkR2wyWVhSbFpDNWNiaUFnSUNBZ0tpQnZia3h2WVdRZ2FYTWdZV3gzWVhseklHTmhiR3hsWkNCaVpXWnZjbVVnWVc1NUlITjBZWEowSUdaMWJtTjBhVzl1Y3l3Z2RHaHBjeUJoYkd4dmQzTWdlVzkxSUhSdklHOXlaR1Z5SUdsdWFYUnBZV3hwZW1GMGFXOXVJRzltSUhOamNtbHdkSE11UEdKeUx6NWNiaUFnSUNBZ0tpQlVhR2x6SUdseklHRWdiR2xtWldONVkyeGxJRzFsZEdodlpDNGdTWFFnYldGNUlHNXZkQ0JpWlNCcGJYQnNaVzFsYm5SbFpDQnBiaUIwYUdVZ2MzVndaWElnWTJ4aGMzTXVJRmx2ZFNCallXNGdiMjVzZVNCallXeHNJR2wwY3lCemRYQmxjaUJqYkdGemN5QnRaWFJvYjJRZ2FXNXphV1JsSUdsMExpQkpkQ0J6YUc5MWJHUWdibTkwSUdKbElHTmhiR3hsWkNCdFlXNTFZV3hzZVNCbGJITmxkMmhsY21VdVhHNGdJQ0FnSUNvZ0lTTjZhRnh1SUNBZ0lDQXFJT1c5ayttWmhPV0tvT1dJc09TNGdPUzRxdWEvZ09hMHUrZWFoT2lLZ3VlQ3VlUzRpdWFJbHVpQWhlV0Z0dWlLZ3VlQ3VlZXNyT1M0Z09hc29lYS9nT2EwdSthWHR1V0FtZWl3ZytlVXFPT0FnbTl1VEc5aFpDRG1nTHZtbUsva3ZKcmxuS2prdTd2a3ZaVWdjM1JoY25RZzVwYTU1ck9WNkxDRDU1U281WW1ONW9tbjZLR003N3lNNkwrWjZJTzk1NVNvNUxxTzVhNko1bzZTNklTYTVweXM1NXFFNVlpZDVhZUw1WXlXNmFHNjVicVA0NENDUEdKeUx6NWNiaUFnSUNBZ0tpRG9yNlhtbHJubXM1WGt1THJubEovbGtiM2xrYWptbkovbWxybm1zNVh2dkl6bmlMYm5zYnZtbktybHY0WGt2SnJtbklubHJwN25qckRqZ0lMbHViYmt1SlRrdmFEbGo2cm9nNzNsbktqb3I2WG1scm5tczVYbGhvWHBnNmpvc0lQbmxLam5pTGJuc2J2bm1vVGxycDduanJEdnZJemt1STNsajYvbG5LamxoYmJscm9QbG5MRG1scm5ubTdUbWpxWG9zSVBubEtqb3I2WG1scm5tczVYamdJSmNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lHOXVURzloWkZ4dUlDQWdJQ0FxSUVCd2NtOTBaV04wWldSY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J2Ymt4dllXUTZJRzUxYkd3c1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1WEc0Z0lDQWdJQ29nUTJGc2JHVmtJR0psWm05eVpTQmhiR3dnYzJOeWFYQjBjeWNnZFhCa1lYUmxJR2xtSUhSb1pTQkRiMjF3YjI1bGJuUWdhWE1nWlc1aFlteGxaQ0IwYUdVZ1ptbHljM1FnZEdsdFpTNWNiaUFnSUNBZ0tpQlZjM1ZoYkd4NUlIVnpaV1FnZEc4Z2FXNXBkR2xoYkdsNlpTQnpiMjFsSUd4dloybGpJSGRvYVdOb0lHNWxaV1FnZEc4Z1ltVWdZMkZzYkdWa0lHRm1kR1Z5SUdGc2JDQmpiMjF3YjI1bGJuUnpKeUJnYjI1c2IyRmtZQ0J0WlhSb2IyUnpJR05oYkd4bFpDNDhZbkl2UGx4dUlDQWdJQ0FxSUZSb2FYTWdhWE1nWVNCc2FXWmxZM2xqYkdVZ2JXVjBhRzlrTGlCSmRDQnRZWGtnYm05MElHSmxJR2x0Y0d4bGJXVnVkR1ZrSUdsdUlIUm9aU0J6ZFhCbGNpQmpiR0Z6Y3k0Z1dXOTFJR05oYmlCdmJteDVJR05oYkd3Z2FYUnpJSE4xY0dWeUlHTnNZWE56SUcxbGRHaHZaQ0JwYm5OcFpHVWdhWFF1SUVsMElITm9iM1ZzWkNCdWIzUWdZbVVnWTJGc2JHVmtJRzFoYm5WaGJHeDVJR1ZzYzJWM2FHVnlaUzVjYmlBZ0lDQWdLaUFoSTNwb1hHNGdJQ0FnSUNvZzVhYUM1cDZjNksrbDU3dUU1THUyNTZ5czVMaUE1cXloNVpDdjU1U283N3lNNVlpWjVaeW81b21BNXB5SjU3dUU1THUyNTVxRUlIVndaR0YwWlNEa3VZdmxpWTNvc0lQbmxLampnSUxwZ0pybHVMam5sS2prdW83cG5JRG9wb0hsbktqbWlZRG1uSW5udTRUa3U3Ym5tb1FnYjI1TWIyRmtJT1dJbmVXbmkrV01sdVd1ak9hdmxlV1FqdWFKcCtpaGpPZWFoT21BdStpK2tlT0FnanhpY2k4K1hHNGdJQ0FnSUNvZzZLK2w1cGE1NXJPVjVMaTY1NVNmNVpHOTVaR281cHlmNXBhNTVyT1Y3N3lNNTRpMjU3Rzc1cHlxNWIrRjVMeWE1cHlKNWE2ZTU0Nnc0NENDNWJtMjVMaVU1TDJnNVkrcTZJTzk1WnlvNksrbDVwYTU1ck9WNVlhRjZZT282TENENTVTbzU0aTI1N0c3NTVxRTVhNmU1NDZ3Nzd5TTVMaU41WSt2NVp5bzVZVzI1YTZENVp5dzVwYTU1NXUwNW82bDZMQ0Q1NVNvNksrbDVwYTU1ck9WNDRDQ1hHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCemRHRnlkRnh1SUNBZ0lDQXFJRUJ3Y205MFpXTjBaV1JjYmlBZ0lDQWdLaTljYmlBZ0lDQnpkR0Z5ZERvZ2JuVnNiQ3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdRMkZzYkdWa0lIZG9aVzRnZEdocGN5QmpiMjF3YjI1bGJuUWdZbVZqYjIxbGN5QmxibUZpYkdWa0lHRnVaQ0JwZEhNZ2JtOWtaU0JwY3lCaFkzUnBkbVV1UEdKeUx6NWNiaUFnSUNBZ0tpQlVhR2x6SUdseklHRWdiR2xtWldONVkyeGxJRzFsZEdodlpDNGdTWFFnYldGNUlHNXZkQ0JpWlNCcGJYQnNaVzFsYm5SbFpDQnBiaUIwYUdVZ2MzVndaWElnWTJ4aGMzTXVJRmx2ZFNCallXNGdiMjVzZVNCallXeHNJR2wwY3lCemRYQmxjaUJqYkdGemN5QnRaWFJvYjJRZ2FXNXphV1JsSUdsMExpQkpkQ0J6YUc5MWJHUWdibTkwSUdKbElHTmhiR3hsWkNCdFlXNTFZV3hzZVNCbGJITmxkMmhsY21VdVhHNGdJQ0FnSUNvZ0lTTjZhQ0RsdlpQb3I2WG51NFRrdTdib29xdmxrSy9ubEtqdnZJemx1YmJrdUpUbHJvUG5tb1RvaW9Mbmdybmt1Wi9tdjREbXRMdm1sN2JqZ0lJOFluSXZQbHh1SUNBZ0lDQXFJT2l2cGVhV3VlYXpsZVM0dXVlVW4rV1J2ZVdScU9hY24rYVd1ZWF6bGUrOGpPZUl0dWV4dSthY3F1Vy9oZVM4bXVhY2llV3VudWVPc09PQWd1VzV0dVM0bE9TOW9PV1BxdWlEdmVXY3FPaXZwZWFXdWVhemxlV0doZW1EcU9pd2crZVVxT2VJdHVleHUrZWFoT1d1bnVlT3NPKzhqT1M0amVXUHIrV2NxT1dGdHVXdWcrV2NzT2FXdWVlYnRPYU9wZWl3ZytlVXFPaXZwZWFXdWVhemxlT0FnbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdiMjVGYm1GaWJHVmNiaUFnSUNBZ0tpQkFjSEp2ZEdWamRHVmtYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2IyNUZibUZpYkdVNklHNTFiR3dzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRU5oYkd4bFpDQjNhR1Z1SUhSb2FYTWdZMjl0Y0c5dVpXNTBJR0psWTI5dFpYTWdaR2x6WVdKc1pXUWdiM0lnYVhSeklHNXZaR1VnWW1WamIyMWxjeUJwYm1GamRHbDJaUzQ4WW5JdlBseHVJQ0FnSUNBcUlGUm9hWE1nYVhNZ1lTQnNhV1psWTNsamJHVWdiV1YwYUc5a0xpQkpkQ0J0WVhrZ2JtOTBJR0psSUdsdGNHeGxiV1Z1ZEdWa0lHbHVJSFJvWlNCemRYQmxjaUJqYkdGemN5NGdXVzkxSUdOaGJpQnZibXg1SUdOaGJHd2dhWFJ6SUhOMWNHVnlJR05zWVhOeklHMWxkR2h2WkNCcGJuTnBaR1VnYVhRdUlFbDBJSE5vYjNWc1pDQnViM1FnWW1VZ1kyRnNiR1ZrSUcxaGJuVmhiR3g1SUdWc2MyVjNhR1Z5WlM1Y2JpQWdJQ0FnS2lBaEkzcG9JT1c5aytpdnBlZTdoT1M3dHVpaXErZW1nZWVVcU9hSWx1aUtndWVDdWVXUG1PUzR1dWFYb09hVmlPYVh0dWl3ZytlVXFPT0FnanhpY2k4K1hHNGdJQ0FnSUNvZzZLK2w1cGE1NXJPVjVMaTY1NVNmNVpHOTVaR281cHlmNXBhNTVyT1Y3N3lNNTRpMjU3Rzc1cHlxNWIrRjVMeWE1cHlKNWE2ZTU0Nnc0NENDNWJtMjVMaVU1TDJnNVkrcTZJTzk1WnlvNksrbDVwYTU1ck9WNVlhRjZZT282TENENTVTbzU0aTI1N0c3NTVxRTVhNmU1NDZ3Nzd5TTVMaU41WSt2NVp5bzVZVzI1YTZENVp5dzVwYTU1NXUwNW82bDZMQ0Q1NVNvNksrbDVwYTU1ck9WNDRDQ1hHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCdmJrUnBjMkZpYkdWY2JpQWdJQ0FnS2lCQWNISnZkR1ZqZEdWa1hHNGdJQ0FnSUNvdlhHNGdJQ0FnYjI1RWFYTmhZbXhsT2lCdWRXeHNMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQkRZV3hzWldRZ2QyaGxiaUIwYUdseklHTnZiWEJ2Ym1WdWRDQjNhV3hzSUdKbElHUmxjM1J5YjNsbFpDNDhZbkl2UGx4dUlDQWdJQ0FxSUZSb2FYTWdhWE1nWVNCc2FXWmxZM2xqYkdVZ2JXVjBhRzlrTGlCSmRDQnRZWGtnYm05MElHSmxJR2x0Y0d4bGJXVnVkR1ZrSUdsdUlIUm9aU0J6ZFhCbGNpQmpiR0Z6Y3k0Z1dXOTFJR05oYmlCdmJteDVJR05oYkd3Z2FYUnpJSE4xY0dWeUlHTnNZWE56SUcxbGRHaHZaQ0JwYm5OcFpHVWdhWFF1SUVsMElITm9iM1ZzWkNCdWIzUWdZbVVnWTJGc2JHVmtJRzFoYm5WaGJHeDVJR1ZzYzJWM2FHVnlaUzVjYmlBZ0lDQWdLaUFoSTNwb0lPVzlrK2l2cGVlN2hPUzd0dWlpcSttVWdPYXZnZWFYdHVpd2crZVVxRHhpY2k4K1hHNGdJQ0FnSUNvZzZLK2w1cGE1NXJPVjVMaTY1NVNmNVpHOTVaR281cHlmNXBhNTVyT1Y3N3lNNTRpMjU3Rzc1cHlxNWIrRjVMeWE1cHlKNWE2ZTU0Nnc0NENDNWJtMjVMaVU1TDJnNVkrcTZJTzk1WnlvNksrbDVwYTU1ck9WNVlhRjZZT282TENENTVTbzU0aTI1N0c3NTVxRTVhNmU1NDZ3Nzd5TTVMaU41WSt2NVp5bzVZVzI1YTZENVp5dzVwYTU1NXUwNW82bDZMQ0Q1NVNvNksrbDVwYTU1ck9WNDRDQ1hHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCdmJrUmxjM1J5YjNsY2JpQWdJQ0FnS2lCQWNISnZkR1ZqZEdWa1hHNGdJQ0FnSUNvdlhHNGdJQ0FnYjI1RVpYTjBjbTk1T2lCdWRXeHNMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0J2YmtadlkzVnpTVzVGWkdsMGIzSmNiaUFnSUNBZ0tpQkFjSEp2ZEdWamRHVmtYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2IyNUdiMk4xYzBsdVJXUnBkRzl5T2lCdWRXeHNMRnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdiMjVNYjNOMFJtOWpkWE5KYmtWa2FYUnZjbHh1SUNBZ0lDQXFJRUJ3Y205MFpXTjBaV1JjYmlBZ0lDQWdLaTljYmlBZ0lDQnZia3h2YzNSR2IyTjFjMGx1UldScGRHOXlPaUJ1ZFd4c0xGeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnUTJGc2JHVmtJSFJ2SUdsdWFYUnBZV3hwZW1VZ2RHaGxJR052YlhCdmJtVnVkQ0J2Y2lCdWIyUmw0b0NaY3lCd2NtOXdaWEowYVdWeklIZG9aVzRnWVdSa2FXNW5JSFJvWlNCamIyMXdiMjVsYm5RZ2RHaGxJR1pwY25OMElIUnBiV1VnYjNJZ2QyaGxiaUIwYUdVZ1VtVnpaWFFnWTI5dGJXRnVaQ0JwY3lCMWMyVmtMaUJVYUdseklHWjFibU4wYVc5dUlHbHpJRzl1YkhrZ1kyRnNiR1ZrSUdsdUlHVmthWFJ2Y2k1Y2JpQWdJQ0FnS2lBaEkzcG9JT2VVcU9hZHBlV0luZVduaStXTWx1ZTdoT1M3dHVhSWx1aUtndWVDdWVlYWhPUzRnT1M2bStXeG51YUFwKys4ak9XOWsraXZwZWU3aE9TN3R1aWlxK2Vzck9TNGdPYXNvZWEzdStXS29PV0lzT2lLZ3VlQ3VlUzRpdWFJbHVlVXFPYUl0K2VDdWVXSHUrUzZodVd1ZytlYWhDQlNaWE5sZENEb2o1emxqWlhtbDdib3NJUG5sS2pqZ0lMb3Y1bmt1S3JsbTU3b3NJUGxqNnJrdkpybG5Lam52SmJvdnBIbG1hamt1SXZvc0lQbmxLampnSUpjYmlBZ0lDQWdLaUJBYldWMGFHOWtJSEpsYzJWMFNXNUZaR2wwYjNKY2JpQWdJQ0FnS2lCQWNISnZkR1ZqZEdWa1hHNGdJQ0FnSUNvdlhHNGdJQ0FnY21WelpYUkpia1ZrYVhSdmNqb2diblZzYkN4Y2JseHVJQ0FnSUM4dklGQlZRa3hKUTF4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJCWkdSeklHRWdZMjl0Y0c5dVpXNTBJR05zWVhOeklIUnZJSFJvWlNCdWIyUmxMaUJaYjNVZ1kyRnVJR0ZzYzI4Z1lXUmtJR052YlhCdmJtVnVkQ0IwYnlCdWIyUmxJR0o1SUhCaGMzTnBibWNnYVc0Z2RHaGxJRzVoYldVZ2IyWWdkR2hsSUhOamNtbHdkQzVjYmlBZ0lDQWdLaUFoSTNwb0lPV1FrZWlLZ3VlQ3VlYTN1K1dLb09TNGdPUzRxdWU3aE9TN3R1ZXh1Kys4ak9TOW9PaS9tT1dQcitTN3BlbUFtdWkvaCtTOG9PV0ZwZWlFbXVhY3JPZWFoT1dRamVlbnNPYWRwZWEzdStXS29PZTdoT1M3dHVPQWdseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCaFpHUkRiMjF3YjI1bGJuUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZGTjBjbWx1WjMwZ2RIbHdaVTl5UTJ4aGMzTk9ZVzFsSUMwZ2RHaGxJR052Ym5OMGNuVmpkRzl5SUc5eUlIUm9aU0JqYkdGemN5QnVZVzFsSUc5bUlIUm9aU0JqYjIxd2IyNWxiblFnZEc4Z1lXUmtYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdRMjl0Y0c5dVpXNTBmU0F0SUhSb1pTQnVaWGRzZVNCaFpHUmxaQ0JqYjIxd2IyNWxiblJjYmlBZ0lDQWdLaUJBWlhoaGJYQnNaVnh1SUNBZ0lDQXFJSFpoY2lCemNISnBkR1VnUFNCdWIyUmxMbUZrWkVOdmJYQnZibVZ1ZENoall5NVRjSEpwZEdVcE8xeHVJQ0FnSUNBcUlIWmhjaUIwWlhOMElEMGdibTlrWlM1aFpHUkRiMjF3YjI1bGJuUW9YQ0pVWlhOMFhDSXBPMXh1SUNBZ0lDQXFJRUIwZVhCbGMyTnlhWEIwWEc0Z0lDQWdJQ29nWVdSa1EyOXRjRzl1Wlc1MFBGUWdaWGgwWlc1a2N5QkRiMjF3YjI1bGJuUStLSFI1Y0dVNklIdHVaWGNvS1RvZ1ZIMHBPaUJVWEc0Z0lDQWdJQ29nWVdSa1EyOXRjRzl1Wlc1MEtHTnNZWE56VG1GdFpUb2djM1J5YVc1bktUb2dZVzU1WEc0Z0lDQWdJQ292WEc0Z0lDQWdZV1JrUTI5dGNHOXVaVzUwSUNoMGVYQmxUM0pEYkdGemMwNWhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVibTlrWlM1aFpHUkRiMjF3YjI1bGJuUW9kSGx3WlU5eVEyeGhjM05PWVcxbEtUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmx4dUlDQWdJQ0FxSUZKbGRIVnlibk1nZEdobElHTnZiWEJ2Ym1WdWRDQnZaaUJ6ZFhCd2JHbGxaQ0IwZVhCbElHbG1JSFJvWlNCdWIyUmxJR2hoY3lCdmJtVWdZWFIwWVdOb1pXUXNJRzUxYkd3Z2FXWWdhWFFnWkc5bGMyNG5kQzQ4WW5JdlBseHVJQ0FnSUNBcUlGbHZkU0JqWVc0Z1lXeHpieUJuWlhRZ1kyOXRjRzl1Wlc1MElHbHVJSFJvWlNCdWIyUmxJR0o1SUhCaGMzTnBibWNnYVc0Z2RHaGxJRzVoYldVZ2IyWWdkR2hsSUhOamNtbHdkQzVjYmlBZ0lDQWdLaUFoSTNwb1hHNGdJQ0FnSUNvZzZJNjM1WStXNklxQzU0SzU1TGlLNW95SDVhNmE1N0c3NVo2TDU1cUU1N3VFNUx1Mjc3eU01YWFDNXA2YzZJcUM1NEs1NXB5SjZabUU1WXFnNW95SDVhNmE1N0c3NVo2TDU1cUU1N3VFNUx1Mjc3eU01WWlaNkwrVTVadWU3N3lNNWFhQzVwNmM1cktoNXB5SjVZaVo1TGk2NTZtNjQ0Q0NQR0p5THo1Y2JpQWdJQ0FnS2lEa3ZLRGxoYVhsajRMbWxiRGt1Wi9sajYva3U2WG1tSy9vaEpybW5Lem5tb1Rsa0kzbnA3RGpnSUpjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdaMlYwUTI5dGNHOXVaVzUwWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibnhUZEhKcGJtZDlJSFI1Y0dWUGNrTnNZWE56VG1GdFpWeHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UwTnZiWEJ2Ym1WdWRIMWNiaUFnSUNBZ0tpQkFaWGhoYlhCc1pWeHVJQ0FnSUNBcUlDOHZJR2RsZENCemNISnBkR1VnWTI5dGNHOXVaVzUwTGx4dUlDQWdJQ0FxSUhaaGNpQnpjSEpwZEdVZ1BTQnViMlJsTG1kbGRFTnZiWEJ2Ym1WdWRDaGpZeTVUY0hKcGRHVXBPMXh1SUNBZ0lDQXFJQzh2SUdkbGRDQmpkWE4wYjIwZ2RHVnpkQ0JqWVd4emN5NWNiaUFnSUNBZ0tpQjJZWElnZEdWemRDQTlJRzV2WkdVdVoyVjBRMjl0Y0c5dVpXNTBLRndpVkdWemRGd2lLVHRjYmlBZ0lDQWdLaUJBZEhsd1pYTmpjbWx3ZEZ4dUlDQWdJQ0FxSUdkbGRFTnZiWEJ2Ym1WdWREeFVJR1Y0ZEdWdVpITWdRMjl0Y0c5dVpXNTBQaWgwZVhCbE9pQjdjSEp2ZEc5MGVYQmxPaUJVZlNrNklGUmNiaUFnSUNBZ0tpQm5aWFJEYjIxd2IyNWxiblFvWTJ4aGMzTk9ZVzFsT2lCemRISnBibWNwT2lCaGJubGNiaUFnSUNBZ0tpOWNiaUFnSUNCblpYUkRiMjF3YjI1bGJuUWdLSFI1Y0dWUGNrTnNZWE56VG1GdFpTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dWIyUmxMbWRsZEVOdmJYQnZibVZ1ZENoMGVYQmxUM0pEYkdGemMwNWhiV1VwTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRkpsZEhWeWJuTWdZV3hzSUdOdmJYQnZibVZ1ZEhNZ2IyWWdjM1Z3Y0d4cFpXUWdWSGx3WlNCcGJpQjBhR1VnYm05a1pTNWNiaUFnSUNBZ0tpQWhJM3BvSU9pL2xPV2JudWlLZ3VlQ3VlUzRpdWFNaCtXdW11ZXh1K1dlaStlYWhPYUpnT2FjaWVlN2hPUzd0dU9BZ2x4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0JuWlhSRGIyMXdiMjVsYm5SelhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym54VGRISnBibWQ5SUhSNWNHVlBja05zWVhOelRtRnRaVnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlME52YlhCdmJtVnVkRnRkZlZ4dUlDQWdJQ0FxSUVCbGVHRnRjR3hsWEc0Z0lDQWdJQ29nZG1GeUlITndjbWwwWlhNZ1BTQnViMlJsTG1kbGRFTnZiWEJ2Ym1WdWRITW9ZMk11VTNCeWFYUmxLVHRjYmlBZ0lDQWdLaUIyWVhJZ2RHVnpkSE1nUFNCdWIyUmxMbWRsZEVOdmJYQnZibVZ1ZEhNb1hDSlVaWE4wWENJcE8xeHVJQ0FnSUNBcUlFQjBlWEJsYzJOeWFYQjBYRzRnSUNBZ0lDb2daMlYwUTI5dGNHOXVaVzUwY3p4VUlHVjRkR1Z1WkhNZ1EyOXRjRzl1Wlc1MFBpaDBlWEJsT2lCN2NISnZkRzkwZVhCbE9pQlVmU2s2SUZSYlhWeHVJQ0FnSUNBcUlHZGxkRU52YlhCdmJtVnVkSE1vWTJ4aGMzTk9ZVzFsT2lCemRISnBibWNwT2lCaGJubGJYVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHZGxkRU52YlhCdmJtVnVkSE1nS0hSNWNHVlBja05zWVhOelRtRnRaU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXViMlJsTG1kbGRFTnZiWEJ2Ym1WdWRITW9kSGx3WlU5eVEyeGhjM05PWVcxbEtUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCU1pYUjFjbTV6SUhSb1pTQmpiMjF3YjI1bGJuUWdiMllnYzNWd2NHeHBaV1FnZEhsd1pTQnBiaUJoYm5rZ2IyWWdhWFJ6SUdOb2FXeGtjbVZ1SUhWemFXNW5JR1JsY0hSb0lHWnBjbk4wSUhObFlYSmphQzVjYmlBZ0lDQWdLaUFoSTNwb0lPbUFrdVc5a3VhZnBlYUp2dWFKZ09hY2llV3RrT2lLZ3VlQ3VlUzRyZWVzck9TNGdPUzRxdVdNdWVtRmplYU1oK1d1bXVleHUrV2VpK2VhaE9lN2hPUzd0dU9BZ2x4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0JuWlhSRGIyMXdiMjVsYm5SSmJrTm9hV3hrY21WdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym54VGRISnBibWQ5SUhSNWNHVlBja05zWVhOelRtRnRaVnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJSHREYjIxd2IyNWxiblI5WEc0Z0lDQWdJQ29nUUdWNFlXMXdiR1ZjYmlBZ0lDQWdLaUIyWVhJZ2MzQnlhWFJsSUQwZ2JtOWtaUzVuWlhSRGIyMXdiMjVsYm5SSmJrTm9hV3hrY21WdUtHTmpMbE53Y21sMFpTazdYRzRnSUNBZ0lDb2dkbUZ5SUZSbGMzUWdQU0J1YjJSbExtZGxkRU52YlhCdmJtVnVkRWx1UTJocGJHUnlaVzRvWENKVVpYTjBYQ0lwTzF4dUlDQWdJQ0FxSUVCMGVYQmxjMk55YVhCMFhHNGdJQ0FnSUNvZ1oyVjBRMjl0Y0c5dVpXNTBTVzVEYUdsc1pISmxianhVSUdWNGRHVnVaSE1nUTI5dGNHOXVaVzUwUGloMGVYQmxPaUI3Y0hKdmRHOTBlWEJsT2lCVWZTazZJRlJjYmlBZ0lDQWdLaUJuWlhSRGIyMXdiMjVsYm5SSmJrTm9hV3hrY21WdUtHTnNZWE56VG1GdFpUb2djM1J5YVc1bktUb2dZVzU1WEc0Z0lDQWdJQ292WEc0Z0lDQWdaMlYwUTI5dGNHOXVaVzUwU1c1RGFHbHNaSEpsYmlBb2RIbHdaVTl5UTJ4aGMzTk9ZVzFsS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTV2WkdVdVoyVjBRMjl0Y0c5dVpXNTBTVzVEYUdsc1pISmxiaWgwZVhCbFQzSkRiR0Z6YzA1aGJXVXBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdUlGSmxkSFZ5Ym5NZ2RHaGxJR052YlhCdmJtVnVkSE1nYjJZZ2MzVndjR3hwWldRZ2RIbHdaU0JwYmlCelpXeG1JRzl5SUdGdWVTQnZaaUJwZEhNZ1kyaHBiR1J5Wlc0Z2RYTnBibWNnWkdWd2RHZ2dabWx5YzNRZ2MyVmhjbU5vTGx4dUlDQWdJQ0FxSUNFamVtZ2c2WUNTNWIyUzVwK2w1b20rNkllcTZMcXI1b2lXNW9tQTVweUo1YTJRNklxQzU0SzU1TGl0NW95SDVhNmE1N0c3NVo2TDU1cUU1N3VFNUx1MlhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUdkbGRFTnZiWEJ2Ym1WdWRITkpia05vYVd4a2NtVnVYRzRnSUNBZ0lDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJueFRkSEpwYm1kOUlIUjVjR1ZQY2tOc1lYTnpUbUZ0WlZ4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUh0RGIyMXdiMjVsYm5SYlhYMWNiaUFnSUNBZ0tpQkFaWGhoYlhCc1pWeHVJQ0FnSUNBcUlIWmhjaUJ6Y0hKcGRHVnpJRDBnYm05a1pTNW5aWFJEYjIxd2IyNWxiblJ6U1c1RGFHbHNaSEpsYmloall5NVRjSEpwZEdVcE8xeHVJQ0FnSUNBcUlIWmhjaUIwWlhOMGN5QTlJRzV2WkdVdVoyVjBRMjl0Y0c5dVpXNTBjMGx1UTJocGJHUnlaVzRvWENKVVpYTjBYQ0lwTzF4dUlDQWdJQ0FxSUVCMGVYQmxjMk55YVhCMFhHNGdJQ0FnSUNvZ1oyVjBRMjl0Y0c5dVpXNTBjMGx1UTJocGJHUnlaVzQ4VkNCbGVIUmxibVJ6SUVOdmJYQnZibVZ1ZEQ0b2RIbHdaVG9nZTNCeWIzUnZkSGx3WlRvZ1ZIMHBPaUJVVzExY2JpQWdJQ0FnS2lCblpYUkRiMjF3YjI1bGJuUnpTVzVEYUdsc1pISmxiaWhqYkdGemMwNWhiV1U2SUhOMGNtbHVaeWs2SUdGdWVWdGRYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1oyVjBRMjl0Y0c5dVpXNTBjMGx1UTJocGJHUnlaVzRnS0hSNWNHVlBja05zWVhOelRtRnRaU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXViMlJsTG1kbGRFTnZiWEJ2Ym1WdWRITkpia05vYVd4a2NtVnVLSFI1Y0dWUGNrTnNZWE56VG1GdFpTazdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHZJRlpKVWxSVlFVeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc1Y2JpQWdJQ0FnS2lCSlppQjBhR1VnWTI5dGNHOXVaVzUwSjNNZ1ltOTFibVJwYm1jZ1ltOTRJR2x6SUdScFptWmxjbVZ1ZENCbWNtOXRJSFJvWlNCdWIyUmxKM01zSUhsdmRTQmpZVzRnYVcxd2JHVnRaVzUwSUhSb2FYTWdiV1YwYUc5a0lIUnZJSE4xY0hCc2VWeHVJQ0FnSUNBcUlHRWdZM1Z6ZEc5dElHRjRhWE1nWVd4cFoyNWxaQ0JpYjNWdVpHbHVaeUJpYjNnZ0tFRkJRa0lwTENCemJ5QjBhR1VnWldScGRHOXlKM01nYzJObGJtVWdkbWxsZHlCallXNGdjR1Z5Wm05eWJTQm9hWFFnZEdWemRDQndjbTl3WlhKc2VTNWNiaUFnSUNBZ0tpQWhJM3BvWEc0Z0lDQWdJQ29nNWFhQzVwNmM1N3VFNUx1MjU1cUU1WXlGNVp1MDU1dVM1TGlPNklxQzU0SzU1TGlONVpDTTc3eU01b0tvNVkrdjVMdWw1YTZlNTQ2dzZLK2w1cGE1NXJPVjVMdWw1bytRNUw2YjZJZXE1YTZhNUxtSjU1cUU2TDIwNVpDUjVhKzU2YjJRNTVxRTVZeUY1WnUwNTV1Uzc3eUlRVUZDUXUrOGllKzhqRnh1SUNBZ0lDQXFJT1M3cGVTK3YrZThsdWkra2VXWnFPZWFoT1djdXVhWnIraW5odVdidnVXUHIrUzdwZWF0bytlaHJ1V2NzT2FKcCtpaGpPZUN1ZW1BaWVhMWkraXZsZU9BZ2x4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0JmWjJWMFRHOWpZV3hDYjNWdVpITmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxZM1I5SUc5MWRGOXlaV04wSUMwZ2RHaGxJRkpsWTNRZ2RHOGdjbVZqWldsMlpTQjBhR1VnWW05MWJtUnBibWNnWW05NFhHNGdJQ0FnSUNvdlhHNGdJQ0FnWDJkbGRFeHZZMkZzUW05MWJtUnpPaUJ1ZFd4c0xGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmx4dUlDQWdJQ0FxSUc5dVVtVnpkRzl5WlNCcGN5QmpZV3hzWldRZ1lXWjBaWElnZEdobElIVnpaWElnWTJ4cFkydHpJSFJvWlNCU1pYTmxkQ0JwZEdWdElHbHVJSFJvWlNCSmJuTndaV04wYjNJbmN5QmpiMjUwWlhoMElHMWxiblVnYjNJZ2NHVnlabTl5YlhOY2JpQWdJQ0FnS2lCaGJpQjFibVJ2SUc5d1pYSmhkR2x2YmlCdmJpQjBhR2x6SUdOdmJYQnZibVZ1ZEM0OFluSXZQbHh1SUNBZ0lDQXFJRHhpY2k4K1hHNGdJQ0FnSUNvZ1NXWWdkR2hsSUdOdmJYQnZibVZ1ZENCamIyNTBZV2x1Y3lCMGFHVWdYQ0pwYm5SbGNtNWhiQ0J6ZEdGMFpWd2lMQ0J6YUc5eWRDQm1iM0lnWENKMFpXMXdiM0poY25rZ2JXVnRZbVZ5SUhaaGNtbGhZbXhsY3lCM2FHbGphQ0J1YjNRZ2FXNWpiSFZrWldROFluSXZQbHh1SUNBZ0lDQXFJR2x1SUdsMGN5QkRRME5zWVhOeklIQnliM0JsY25ScFpYTmNJaXdnZEdobGJpQjViM1VnYldGNUlHNWxaV1FnZEc4Z2FXMXdiR1Z0Wlc1MElIUm9hWE1nWm5WdVkzUnBiMjR1UEdKeUx6NWNiaUFnSUNBZ0tpQThZbkl2UGx4dUlDQWdJQ0FxSUZSb1pTQmxaR2wwYjNJZ2QybHNiQ0JqWVd4c0lIUm9aU0JuWlhSelpYUWdZV05qWlhOemIzSnpJRzltSUhsdmRYSWdZMjl0Y0c5dVpXNTBJSFJ2SUhKbFkyOXlaQzl5WlhOMGIzSmxJSFJvWlNCamIyMXdiMjVsYm5RbmN5QnpkR0YwWlR4aWNpOCtYRzRnSUNBZ0lDb2dabTl5SUhWdVpHOHZjbVZrYnlCdmNHVnlZWFJwYjI0dUlFaHZkMlYyWlhJc0lHbHVJR1Y0ZEhKbGJXVWdZMkZ6WlhNc0lHbDBJRzFoZVNCdWIzUWdkMjl5YTNNZ2QyVnNiQzRnVkdobGJpQjViM1VnYzJodmRXeGtJR2x0Y0d4bGJXVnVkRHhpY2k4K1hHNGdJQ0FnSUNvZ2RHaHBjeUJtZFc1amRHbHZiaUIwYnlCdFlXNTFZV3hzZVNCemVXNWphSEp2Ym1sNlpTQjViM1Z5SUdOdmJYQnZibVZ1ZENkeklGd2lhVzUwWlhKdVlXd2djM1JoZEdWelhDSWdkMmwwYUNCcGRITWdjSFZpYkdsaklIQnliM0JsY25ScFpYTXVQR0p5THo1Y2JpQWdJQ0FnS2lCUGJtTmxJSGx2ZFNCcGJYQnNaVzFsYm5RZ2RHaHBjeUJtZFc1amRHbHZiaXdnWVd4c0lIUm9aU0JuWlhSelpYUWdZV05qWlhOemIzSnpJRzltSUhsdmRYSWdZMjl0Y0c5dVpXNTBJSGRwYkd3Z2JtOTBJR0psSUdOaGJHeGxaQ0IzYUdWdVBHSnlMejVjYmlBZ0lDQWdLaUIwYUdVZ2RYTmxjaUJ3WlhKbWIzSnRjeUJoYmlCMWJtUnZMM0psWkc4Z2IzQmxjbUYwYVc5dUxpQlhhR2xqYUNCdFpXRnVjeUIwYUdGMElHOXViSGtnZEdobElIQnliM0JsY25ScFpYTWdkMmwwYUNCa1pXWmhkV3gwSUhaaGJIVmxQR0p5THo1Y2JpQWdJQ0FnS2lCM2FXeHNJR0psSUhKbFkyOXlaR1ZrSUc5eUlISmxjM1J2Y21Wa0lHSjVJR1ZrYVhSdmNpNDhZbkl2UGx4dUlDQWdJQ0FxSUR4aWNpOCtYRzRnSUNBZ0lDb2dVMmx0YVd4aGNteDVMQ0IwYUdVZ1pXUnBkRzl5SUcxaGVTQm1ZV2xzWldRZ2RHOGdjbVZ6WlhRZ2VXOTFjaUJqYjIxd2IyNWxiblFnWTI5eWNtVmpkR3g1SUdsdUlHVjRkSEpsYldVZ1kyRnpaWE11SUZSb1pXNGdhV1lnZVc5MUlHNWxaV1E4WW5JdlBseHVJQ0FnSUNBcUlIUnZJSE4xY0hCdmNuUWdkR2hsSUhKbGMyVjBJRzFsYm5Vc0lIbHZkU0J6YUc5MWJHUWdiV0Z1ZFdGc2JIa2djM2x1WTJoeWIyNXBlbVVnZVc5MWNpQmpiMjF3YjI1bGJuUW5jeUJjSW1sdWRHVnlibUZzSUhOMFlYUmxjMXdpSUhkcGRHZ2dhWFJ6UEdKeUx6NWNiaUFnSUNBZ0tpQndjbTl3WlhKMGFXVnpJR2x1SUhSb2FYTWdablZ1WTNScGIyNHVJRTl1WTJVZ2VXOTFJR2x0Y0d4bGJXVnVkQ0IwYUdseklHWjFibU4wYVc5dUxDQmhiR3dnZEdobElHZGxkSE5sZENCaFkyTmxjM052Y25NZ2IyWWdlVzkxY2lCamIyMXdiMjVsYm5ROFluSXZQbHh1SUNBZ0lDQXFJSGRwYkd3Z2JtOTBJR0psSUdOaGJHeGxaQ0JrZFhKcGJtY2djbVZ6WlhRZ2IzQmxjbUYwYVc5dUxpQlhhR2xqYUNCdFpXRnVjeUIwYUdGMElHOXViSGtnZEdobElIQnliM0JsY25ScFpYTWdkMmwwYUNCa1pXWmhkV3gwSUhaaGJIVmxQR0p5THo1Y2JpQWdJQ0FnS2lCM2FXeHNJR0psSUhKbGMyVjBJR0o1SUdWa2FYUnZjaTVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRlJvYVhNZ1puVnVZM1JwYjI0Z2FYTWdiMjVzZVNCallXeHNaV1FnYVc0Z1pXUnBkRzl5SUcxdlpHVXVYRzRnSUNBZ0lDb2dJU042YUZ4dUlDQWdJQ0FxSUc5dVVtVnpkRzl5WlNEbW1LL25sS2ptaUxmbG5Lam1vNERtbjZYbG1ham9qNXpsalpYbmdybmxoN3NnVW1WelpYUWc1cGUyNzd5TTVhKzU1cTJrNTd1RTVMdTI1b21uNktHTTVwS2s1cmFJNXBPTjVMMmM1WkNPNkxDRDU1U281NXFFNDRDQ1BHSnlMejVjYmlBZ0lDQWdLaUE4WW5JdlBseHVJQ0FnSUNBcUlPV21ndWFlbk9lN2hPUzd0dVdNaGVXUXErUzZodUtBbk9XR2hlbURxT2VLdHVhQWdlS0FuZSs4aU9TNGplV2NxQ0JEUTBOc1lYTnpJT1d4bnVhQXArUzRyZVd1bXVTNWllZWFoT1M0dE9hWHR1YUlrT1dSbU9XUG1PbUhqKys4aWUrOGpPbUNvK1M1aU9TOW9PV1ByK2lEdmVtY2dPaW1nZVd1bnVlT3NPaXZwZWFXdWVhemxlT0FnanhpY2k4K1hHNGdJQ0FnSUNvZ1BHSnlMejVjYmlBZ0lDQWdLaURudkpib3ZwSGxtYWptaWFmb29Zem1rcVRwbElBdjZZZU41WUdhNXBPTjVMMmM1cGUyNzd5TTViQ0c2TENENTVTbzU3dUU1THUyNTVxRUlHZGxkQ0J6WlhRZzVwMmw1YjJWNVlpMjVaS002TCtZNVk2ZjU3dUU1THUyNTVxRTU0cTI1b0NCNDRDQ1hHNGdJQ0FnSUNvZzU0UzI2SUNNNzd5TTVaeW81cDZCNTZ1djU1cUU1b09GNVlhMTVMaUw3N3lNNWE2RDVZK3Y2SU85NXBlZzVyT1Y2SW12NWFXOTZMK1E1TDJjNDRDQ1BHSnlMejVjYmlBZ0lDQWdLaURwZ3FQa3VZamt2YURsc0xIbHVwVG9yNlhscnA3bmpyRG92NW5rdUtybWxybm1zNVh2dkl6bWlZdmxpcWptb0xubWphN251NFRrdTdibm1vVGxzWjdtZ0tmbGtJem1yYVhpZ0p6bGhvWHBnNmpuaXJibWdJSGlnSjNqZ0lKY2JpQWdJQ0FnS2lEa3VJRG1sNmJrdmFEbHJwN25qckRvdjVua3VLcm1scm5tczVYdnZJemx2WlBubEtqbWlMZm1rcVRwbElEbWlKYnBoNDNsZ1pybWw3YnZ2SXpudTRUa3U3Ym5tb1RtaVlEbW5Ja2daMlYwSUhObGRDRHBnNzNrdUkza3ZKcmxobzNvb3F2b3NJUG5sS2pqZ0lKY2JpQWdJQ0FnS2lEb3Y1bm1oSS9sa2JQbm5ZRGt1NFhrdTRYbWpJZmxycHJrdW9icHU1am9ycVRsZ0x6bm1vVGxzWjdtZ0tmbHNJYm9vcXZudkpib3ZwSGxtYWpvcnJEbHZaWGxrb3pvdjVqbGpwL2pnSUk4WW5JdlBseHVJQ0FnSUNBcUlEeGljaTgrWEc0Z0lDQWdJQ29nNVpDTTVxQzM1NXFFNzd5TTU3eVc2TDZSNVkrdjZJTzk1cGVnNXJPVjVaeW81cDZCNTZ1djVvT0Y1WWExNUxpTDVxMmo1Nkd1NVp5dzZZZU41NzJ1NW9LbzU1cUU1N3VFNUx1MjQ0Q0NQR0p5THo1Y2JpQWdJQ0FnS2lEa3VvN21tSy9scG9MbW5wemt2YURwbklEb3BvSG1sSy9taklIbnU0VGt1N2JwaDQzbnZhN29qNXpsalpYdnZJemt2YURwbklEb3BvSGxuS2pvcjZYbWxybm1zNVhrdUszbWlZdmx0Nlhsa0l6bXJhWG51NFRrdTdibHNaN21nS2ZsaUxEaWdKemxob1hwZzZqbmlyYm1nSUhpZ0ozamdJSThZbkl2UGx4dUlDQWdJQ0FxSU9TNGdPYVhwdVM5b09XdW51ZU9zT2kvbWVTNHF1YVd1ZWF6bGUrOGpPZTdoT1M3dHVlYWhPYUpnT2FjaVNCblpYUWdjMlYwSU9tRHZlUzRqZVM4bXVXY3FPbUhqZWU5cnVhVGplUzluT2FYdHVpaXEraXdnK2VVcU9PQWdseHVJQ0FnSUNBcUlPaS9tZWFFaitXUnMrZWRnT1M3aGVTN2hlYU1oK1d1bXVTNmh1bTdtT2l1cE9XQXZPZWFoT1d4bnVhQXArV3dodWlpcStlOGx1aStrZVdacU9tSGplZTlydU9BZ2x4dUlDQWdJQ0FxSUR4aWNpOCtYRzRnSUNBZ0lDb2c1cTJrNXBhNTVyT1Y1THVGNVp5bzU3eVc2TDZSNVptbzVMaUw1THlhNktLcjZMQ0Q1NVNvNDRDQ1hHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCdmJsSmxjM1J2Y21WY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J2YmxKbGMzUnZjbVU2SUc1MWJHd3NYRzVjYmlBZ0lDQXZMeUJQVmtWU1VrbEVSVnh1WEc0Z0lDQWdaR1Z6ZEhKdmVTQW9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaERRMTlGUkVsVVQxSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJrWlhCbGJtUWdQU0IwYUdsekxtNXZaR1V1WDJkbGRFUmxjR1Z1WkVOdmJYQnZibVZ1ZENoMGFHbHpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hrWlhCbGJtUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMk11WlhKeWIzSkpSQ2d6TmpJMkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWXk1cWN5NW5aWFJEYkdGemMwNWhiV1VvZEdocGN5a3NJR05qTG1wekxtZGxkRU5zWVhOelRtRnRaU2hrWlhCbGJtUXBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmYzNWd1pYSW9LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYMlZ1WVdKc1pXUWdKaVlnZEdocGN5NXViMlJsTGw5aFkzUnBkbVZKYmtocFpYSmhjbU5vZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmpMbVJwY21WamRHOXlMbDlqYjIxd1UyTm9aV1IxYkdWeUxtUnBjMkZpYkdWRGIyMXdLSFJvYVhNcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUY5dmJsQnlaVVJsYzNSeWIza2dLQ2tnZTF4dUlDQWdJQ0FnSUNBdkx5QlRZMmhsWkhWc1pYTmNiaUFnSUNBZ0lDQWdkR2hwY3k1MWJuTmphR1ZrZFd4bFFXeHNRMkZzYkdKaFkydHpLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdVbVZ0YjNabElHRnNiQ0JzYVhOMFpXNWxjbk5jYmlBZ0lDQWdJQ0FnZG1GeUlHVjJaVzUwVkdGeVoyVjBjeUE5SUhSb2FYTXVYMTlsZG1WdWRGUmhjbWRsZEhNN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0JsZG1WdWRGUmhjbWRsZEhNdWJHVnVaM1JvSUMwZ01Uc2dhU0ErUFNBd095QXRMV2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMFlYSm5aWFFnUFNCbGRtVnVkRlJoY21kbGRITmJhVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBZWEpuWlhRZ0ppWWdkR0Z5WjJWMExuUmhjbWRsZEU5bVppaDBhR2x6S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxkbVZ1ZEZSaGNtZGxkSE11YkdWdVozUm9JRDBnTUR0Y2JseHVJQ0FnSUNBZ0lDQXZMMXh1SUNBZ0lDQWdJQ0JwWmlBb1EwTmZSVVJKVkU5U0lDWW1JQ0ZEUTE5VVJWTlVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZVMk5sYm1VdVFYTnpaWFJ6VjJGMFkyaGxjaTV6ZEc5d0tIUm9hWE1wTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnYjI1RVpYTjBjbTk1WEc0Z0lDQWdJQ0FnSUdOakxtUnBjbVZqZEc5eUxsOXViMlJsUVdOMGFYWmhkRzl5TG1SbGMzUnliM2xEYjIxd0tIUm9hWE1wTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJR1J2SUhKbGJXOTJaU0JqYjIxd2IyNWxiblJjYmlBZ0lDQWdJQ0FnZEdocGN5NXViMlJsTGw5eVpXMXZkbVZEYjIxd2IyNWxiblFvZEdocGN5azdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lGOXBibk4wWVc1MGFXRjBaU0FvWTJ4dmJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hZMnh2Ym1Wa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamJHOXVaV1FnUFNCall5NXBibk4wWVc1MGFXRjBaUzVmWTJ4dmJtVW9kR2hwY3l3Z2RHaHBjeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1kyeHZibVZrTG01dlpHVWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyeHZibVZrTzF4dUlDQWdJSDBzWEc1Y2JpOHZJRk5qYUdWa2RXeGxjbHh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJseHVJQ0FnSUNBcUlGTmphR1ZrZFd4bGN5QmhJR04xYzNSdmJTQnpaV3hsWTNSdmNpNDhZbkl2UGx4dUlDQWdJQ0FxSUVsbUlIUm9aU0J6Wld4bFkzUnZjaUJwY3lCaGJISmxZV1I1SUhOamFHVmtkV3hsWkN3Z2RHaGxiaUIwYUdVZ2FXNTBaWEoyWVd3Z2NHRnlZVzFsZEdWeUlIZHBiR3dnWW1VZ2RYQmtZWFJsWkNCM2FYUm9iM1YwSUhOamFHVmtkV3hwYm1jZ2FYUWdZV2RoYVc0dVhHNGdJQ0FnSUNvZ0lTTjZhRnh1SUNBZ0lDQXFJT2l3ZytXNnB1UzRnT1M0cXVpSHF1V3VtdVM1aWVlYWhPV2JudWl3ZytXSHZlYVZzT09BZ2p4aWNpOCtYRzRnSUNBZ0lDb2c1YWFDNXA2YzVadWU2TENENVllOTVwV3c1YmV5NkxDRDVicW03N3lNNllLajVMbUk1YkNHNUxpTjVMeWE2WWVONWFTTjZMQ0Q1YnFtNWE2RDc3eU01WStxNUx5YTVwdTA1cGF3NXBlMjZaZTA2WmUwNlpxVTVZK0M1cFd3NDRDQ1hHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCelkyaGxaSFZzWlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Wm5WdVkzUnBiMjU5SUdOaGJHeGlZV05ySUZSb1pTQmpZV3hzWW1GamF5Qm1kVzVqZEdsdmJseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCYmFXNTBaWEoyWVd3OU1GMGdJRlJwWTJzZ2FXNTBaWEoyWVd3Z2FXNGdjMlZqYjI1a2N5NGdNQ0J0WldGdWN5QjBhV05ySUdWMlpYSjVJR1p5WVcxbExseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCYmNtVndaV0YwUFdOakxtMWhZM0p2TGxKRlVFVkJWRjlHVDFKRlZrVlNYU0FnSUNCVWFHVWdjMlZzWldOMGIzSWdkMmxzYkNCaVpTQmxlR1ZqZFhSbFpDQW9jbVZ3WldGMElDc2dNU2tnZEdsdFpYTXNJSGx2ZFNCallXNGdkWE5sSUdOakxtMWhZM0p2TGxKRlVFVkJWRjlHVDFKRlZrVlNJR1p2Y2lCMGFXTnJJR2x1Wm1sdWFYUmxiSGt1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJRnRrWld4aGVUMHdYU0FnSUNBZ1ZHaGxJR0Z0YjNWdWRDQnZaaUIwYVcxbElIUm9ZWFFnZEdobElHWnBjbk4wSUhScFkyc2dkMmxzYkNCM1lXbDBJR0psWm05eVpTQmxlR1ZqZFhScGIyNHVJRlZ1YVhRNklITmNiaUFnSUNBZ0tpQkFaWGhoYlhCc1pWeHVJQ0FnSUNBcUlIWmhjaUIwYVcxbFEyRnNiR0poWTJzZ1BTQm1kVzVqZEdsdmJpQW9aSFFwSUh0Y2JpQWdJQ0FnS2lBZ0lHTmpMbXh2WnloY0luUnBiV1U2SUZ3aUlDc2daSFFwTzF4dUlDQWdJQ0FxSUgxY2JpQWdJQ0FnS2lCMGFHbHpMbk5qYUdWa2RXeGxLSFJwYldWRFlXeHNZbUZqYXl3Z01TazdYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MyTm9aV1IxYkdVZ0tHTmhiR3hpWVdOckxDQnBiblJsY25aaGJDd2djbVZ3WldGMExDQmtaV3hoZVNrZ2UxeHVJQ0FnSUNBZ0lDQmpZeTVoYzNObGNuUkpSQ2hqWVd4c1ltRmpheXdnTVRZeE9TazdYRzRnSUNBZ0lDQWdJR05qTG1GemMyVnlkRWxFS0dsdWRHVnlkbUZzSUQ0OUlEQXNJREUyTWpBcE8xeHVYRzRnSUNBZ0lDQWdJR2x1ZEdWeWRtRnNJRDBnYVc1MFpYSjJZV3dnZkh3Z01EdGNiaUFnSUNBZ0lDQWdjbVZ3WldGMElEMGdhWE5PWVU0b2NtVndaV0YwS1NBL0lHTmpMbTFoWTNKdkxsSkZVRVZCVkY5R1QxSkZWa1ZTSURvZ2NtVndaV0YwTzF4dUlDQWdJQ0FnSUNCa1pXeGhlU0E5SUdSbGJHRjVJSHg4SURBN1hHNWNiaUFnSUNBZ0lDQWdkbUZ5SUhOamFHVmtkV3hsY2lBOUlHTmpMbVJwY21WamRHOXlMbWRsZEZOamFHVmtkV3hsY2lncE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUhOb2IzVnNaQ0J1YjNRZ2RYTmxJR1Z1WVdKc1pXUkpia2hwWlhKaGNtTm9lU0IwYnlCcWRXUm5aU0IzYUdWMGFHVnlJSEJoZFhObFpDeGNiaUFnSUNBZ0lDQWdMeThnWW1WallYVnpaU0JsYm1GaWJHVmtTVzVJYVdWeVlYSmphSGtnYVhNZ1lYTnphV2R1WldRZ1lXWjBaWElnYjI1RmJtRmliR1V1WEc0Z0lDQWdJQ0FnSUM4dklFRmpkSFZoYkd4NUxDQnBaaUJ1YjNRZ2VXVjBJSE5qYUdWa2RXeGxaQ3dnY21WemRXMWxWR0Z5WjJWMEwzQmhkWE5sVkdGeVoyVjBJR2hoY3lCdWJ5QmxabVpsWTNRZ2IyNGdZMjl0Y0c5dVpXNTBMRnh1SUNBZ0lDQWdJQ0F2THlCMGFHVnlaV1p2Y21VZ2RHaGxjbVVnYVhNZ2JtOGdkMkY1SUhSdklHZDFZWEpoYm5SbFpTQjBhR1VnY0dGMWMyVmtJSE4wWVhSbElHOTBhR1Z5SUhSb1lXNGdhWE5VWVhKblpYUlFZWFZ6WldRdVhHNGdJQ0FnSUNBZ0lIWmhjaUJ3WVhWelpXUWdQU0J6WTJobFpIVnNaWEl1YVhOVVlYSm5aWFJRWVhWelpXUW9kR2hwY3lrN1hHNWNiaUFnSUNBZ0lDQWdjMk5vWldSMWJHVnlMbk5qYUdWa2RXeGxLR05oYkd4aVlXTnJMQ0IwYUdsekxDQnBiblJsY25aaGJDd2djbVZ3WldGMExDQmtaV3hoZVN3Z2NHRjFjMlZrS1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJUWTJobFpIVnNaWE1nWVNCallXeHNZbUZqYXlCbWRXNWpkR2x2YmlCMGFHRjBJSEoxYm5NZ2IyNXNlU0J2Ym1ObExDQjNhWFJvSUdFZ1pHVnNZWGtnYjJZZ01DQnZjaUJzWVhKblpYSXVYRzRnSUNBZ0lDb2dJU042YUNEb3NJUGx1cWJrdUlEa3VLcmxqNnJvdjVEb29Zemt1SURtcktIbm1vVGxtNTdvc0lQbGg3M21sYkR2dkl6bGo2L2t1NlhtaklmbHJwb2dNQ0RvcnFubG01N29zSVBsaDczbWxiRGxuS2prdUl2a3VJRGx1S2ZucTR2bGpiUG1pYWZvb1l6bWlKYm9nSVhsbktqa3VJRGxycHJubW9UbHU3Ym1sN2JrdVl2bGtJN21pYWZvb1l6amdJSmNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lITmphR1ZrZFd4bFQyNWpaVnh1SUNBZ0lDQXFJRUJ6WldVZ1kyTXVUbTlrWlNOelkyaGxaSFZzWlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Wm5WdVkzUnBiMjU5SUdOaGJHeGlZV05ySUNCQklHWjFibU4wYVc5dUlIZHlZWEJ3WldRZ1lYTWdZU0J6Wld4bFkzUnZjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQmJaR1ZzWVhrOU1GMGdJRlJvWlNCaGJXOTFiblFnYjJZZ2RHbHRaU0IwYUdGMElIUm9aU0JtYVhKemRDQjBhV05ySUhkcGJHd2dkMkZwZENCaVpXWnZjbVVnWlhobFkzVjBhVzl1TGlCVmJtbDBPaUJ6WEc0Z0lDQWdJQ29nUUdWNFlXMXdiR1ZjYmlBZ0lDQWdLaUIyWVhJZ2RHbHRaVU5oYkd4aVlXTnJJRDBnWm5WdVkzUnBiMjRnS0dSMEtTQjdYRzRnSUNBZ0lDb2dJQ0JqWXk1c2IyY29YQ0owYVcxbE9pQmNJaUFySUdSMEtUdGNiaUFnSUNBZ0tpQjlYRzRnSUNBZ0lDb2dkR2hwY3k1elkyaGxaSFZzWlU5dVkyVW9kR2x0WlVOaGJHeGlZV05yTENBeUtUdGNiaUFnSUNBZ0tpOWNiaUFnSUNCelkyaGxaSFZzWlU5dVkyVWdLR05oYkd4aVlXTnJMQ0JrWld4aGVTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmphR1ZrZFd4bEtHTmhiR3hpWVdOckxDQXdMQ0F3TENCa1pXeGhlU2s3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdWVzV6WTJobFpIVnNaWE1nWVNCamRYTjBiMjBnWTJGc2JHSmhZMnNnWm5WdVkzUnBiMjR1WEc0Z0lDQWdJQ29nSVNONmFDRGxqNWJtdG9qb3NJUGx1cWJrdUlEa3VLcm9oNnJscnBya3VZbm5tb1RsbTU3b3NJUGxoNzNtbGJEamdJSmNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lIVnVjMk5vWldSMWJHVmNiaUFnSUNBZ0tpQkFjMlZsSUdOakxrNXZaR1VqYzJOb1pXUjFiR1ZjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMloxYm1OMGFXOXVmU0JqWVd4c1ltRmphMTltYmlBZ1FTQm1kVzVqZEdsdmJpQjNjbUZ3Y0dWa0lHRnpJR0VnYzJWc1pXTjBiM0pjYmlBZ0lDQWdLaUJBWlhoaGJYQnNaVnh1SUNBZ0lDQXFJSFJvYVhNdWRXNXpZMmhsWkhWc1pTaGZZMkZzYkdKaFkyc3BPMXh1SUNBZ0lDQXFMMXh1SUNBZ0lIVnVjMk5vWldSMWJHVWdLR05oYkd4aVlXTnJYMlp1S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doWTJGc2JHSmhZMnRmWm00cFhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzVjYmlBZ0lDQWdJQ0FnWTJNdVpHbHlaV04wYjNJdVoyVjBVMk5vWldSMWJHVnlLQ2t1ZFc1elkyaGxaSFZzWlNoallXeHNZbUZqYTE5bWJpd2dkR2hwY3lrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzVjYmlBZ0lDQWdLaUIxYm5OamFHVmtkV3hsSUdGc2JDQnpZMmhsWkhWc1pXUWdZMkZzYkdKaFkyc2dablZ1WTNScGIyNXpPaUJqZFhOMGIyMGdZMkZzYkdKaFkyc2dablZ1WTNScGIyNXpMQ0JoYm1RZ2RHaGxJQ2QxY0dSaGRHVW5JR05oYkd4aVlXTnJJR1oxYm1OMGFXOXVManhpY2k4K1hHNGdJQ0FnSUNvZ1FXTjBhVzl1Y3lCaGNtVWdibTkwSUdGbVptVmpkR1ZrSUdKNUlIUm9hWE1nYldWMGFHOWtMbHh1SUNBZ0lDQXFJQ0VqZW1nZzVZK1c1cmFJNkxDRDVicW01b21BNXB5SjViZXk2TENENWJxbTU1cUU1WnVlNkxDRDVZZTk1cFd3Nzd5YTVhNmE1WWkyNTVxRTVadWU2TENENVllOTVwV3c1THVsNVkrS0lDZDFjR1JoZEdVbklPV2JudWl3ZytXSHZlYVZzT09BZ3VXS3FPUzluT1M0amVXUGwrYXRwT2FXdWVhemxlVzlzZVdUamVPQWdseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ2RXNXpZMmhsWkhWc1pVRnNiRU5oYkd4aVlXTnJjMXh1SUNBZ0lDQXFJRUJsZUdGdGNHeGxYRzRnSUNBZ0lDb2dkR2hwY3k1MWJuTmphR1ZrZFd4bFFXeHNRMkZzYkdKaFkydHpLQ2s3WEc0Z0lDQWdJQ292WEc0Z0lDQWdkVzV6WTJobFpIVnNaVUZzYkVOaGJHeGlZV05yY3lBb0tTQjdYRzRnSUNBZ0lDQWdJR05qTG1ScGNtVmpkRzl5TG1kbGRGTmphR1ZrZFd4bGNpZ3BMblZ1YzJOb1pXUjFiR1ZCYkd4R2IzSlVZWEpuWlhRb2RHaHBjeWs3WEc0Z0lDQWdmU3hjYm4wcE8xeHVYRzVEYjIxd2IyNWxiblF1WDNKbGNYVnBjbVZEYjIxd2IyNWxiblFnUFNCdWRXeHNPMXh1UTI5dGNHOXVaVzUwTGw5bGVHVmpkWFJwYjI1UGNtUmxjaUE5SURBN1hHNWNibWxtSUNoRFExOUZSRWxVVDFJZ2ZId2dRME5mVkVWVFZDa2dlMXh1WEc0Z0lDQWdMeThnU1U1SVJWSkpWRUZDVEVVZ1UxUkJWRWxESUUxRlRVSkZVbE5jYmx4dUlDQWdJRU52YlhCdmJtVnVkQzVmWlhobFkzVjBaVWx1UldScGRFMXZaR1VnUFNCbVlXeHpaVHRjYmlBZ0lDQkRiMjF3YjI1bGJuUXVYM0JzWVhsUGJrWnZZM1Z6SUQwZ1ptRnNjMlU3WEc0Z0lDQWdRMjl0Y0c5dVpXNTBMbDlrYVhOaGJHeHZkMDExYkhScGNHeGxJRDBnYm5Wc2JEdGNiaUFnSUNCRGIyMXdiMjVsYm5RdVgyaGxiSEFnUFNBbkp6dGNibHh1SUNBZ0lDOHZJRTVQVGkxSlRraEZVa2xVUlVRZ1UxUkJWRWxESUUxRlRVSkZVbE5jYmlBZ0lDQXZMeUFvVkhsd1pWTmpjbWx3ZENBeUxqTWdkMmxzYkNCemRHbHNiQ0JwYm1obGNtbDBJSFJvWlcwc0lITnZJR0ZzZDJGNWN5QmphR1ZqYXlCb1lYTlBkMjVRY205d1pYSjBlU0JpWldadmNtVWdkWE5wYm1jcFhHNWNiaUFnSUNCcWN5NTJZV3gxWlNoRGIyMXdiMjVsYm5Rc0lDZGZhVzV6Y0dWamRHOXlKeXdnSnljc0lIUnlkV1VwTzF4dUlDQWdJR3B6TG5aaGJIVmxLRU52YlhCdmJtVnVkQ3dnSjE5cFkyOXVKeXdnSnljc0lIUnlkV1VwTzF4dVhHNGdJQ0FnTHk4Z1EwOU5VRTlPUlU1VUlFaEZURkJGVWxOY2JseHVJQ0FnSUdOakxsOWpiMjF3YjI1bGJuUk5aVzUxU1hSbGJYTWdQU0JiWFR0Y2JseHVJQ0FnSUVOdmJYQnZibVZ1ZEM1ZllXUmtUV1Z1ZFVsMFpXMGdQU0JtZFc1amRHbHZiaUFvWTJ4ekxDQndZWFJvTENCd2NtbHZjbWwwZVNrZ2UxeHVJQ0FnSUNBZ0lDQmpZeTVmWTI5dGNHOXVaVzUwVFdWdWRVbDBaVzF6TG5CMWMyZ29lMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXRjRzl1Wlc1ME9pQmpiSE1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQnRaVzUxVUdGMGFEb2djR0YwYUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJ5YVc5eWFYUjVPaUJ3Y21sdmNtbDBlVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5TzF4dWZWeHVYRzR2THlCM1pTQnRZV3RsSUhSb2FYTWdibTl1TFdWdWRXMWxjbUZpYkdVc0lIUnZJSEJ5WlhabGJuUWdhVzVvWlhKcGRHVmtJR0o1SUhOMVlpQmpiR0Z6YzJWekxseHVhbk11ZG1Gc2RXVW9RMjl0Y0c5dVpXNTBMQ0FuWDNKbFoybHpkR1Z5UldScGRHOXlVSEp2Y0hNbkxDQm1kVzVqZEdsdmJpQW9ZMnh6TENCd2NtOXdjeWtnZTF4dUlDQWdJSFpoY2lCeVpYRkRiMjF3SUQwZ2NISnZjSE11Y21WeGRXbHlaVU52YlhCdmJtVnVkRHRjYmlBZ0lDQnBaaUFvY21WeFEyOXRjQ2tnZTF4dUlDQWdJQ0FnSUNCamJITXVYM0psY1hWcGNtVkRiMjF3YjI1bGJuUWdQU0J5WlhGRGIyMXdPMXh1SUNBZ0lIMWNiaUFnSUNCMllYSWdiM0prWlhJZ1BTQndjbTl3Y3k1bGVHVmpkWFJwYjI1UGNtUmxjanRjYmlBZ0lDQnBaaUFvYjNKa1pYSWdKaVlnZEhsd1pXOW1JRzl5WkdWeUlEMDlQU0FuYm5WdFltVnlKeWtnZTF4dUlDQWdJQ0FnSUNCamJITXVYMlY0WldOMWRHbHZiazl5WkdWeUlEMGdiM0prWlhJN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoRFExOUZSRWxVVDFJZ2ZId2dRME5mVkVWVFZDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2JtRnRaU0E5SUdOakxtcHpMbWRsZEVOc1lYTnpUbUZ0WlNoamJITXBPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJyWlhrZ2FXNGdjSEp2Y0hNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQjJZV3dnUFNCd2NtOXdjMXRyWlhsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNkcGRHTm9JQ2hyWlhrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkbGVHVmpkWFJsU1c1RlpHbDBUVzlrWlNjNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05zY3k1ZlpYaGxZM1YwWlVsdVJXUnBkRTF2WkdVZ1BTQWhJWFpoYkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkd2JHRjVUMjVHYjJOMWN5YzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDJZV3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQjNhV3hzUlhobFkzVjBaVWx1UldScGRFMXZaR1VnUFNBb0oyVjRaV04xZEdWSmJrVmthWFJOYjJSbEp5QnBiaUJ3Y205d2N5a2dQeUJ3Y205d2N5NWxlR1ZqZFhSbFNXNUZaR2wwVFc5a1pTQTZJR05zY3k1ZlpYaGxZM1YwWlVsdVJXUnBkRTF2WkdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kMmxzYkVWNFpXTjFkR1ZKYmtWa2FYUk5iMlJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMnh6TGw5d2JHRjVUMjVHYjJOMWN5QTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCall5NTNZWEp1U1VRb016WXdNU3dnYm1GdFpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkcGJuTndaV04wYjNJbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JxY3k1MllXeDFaU2hqYkhNc0lDZGZhVzV6Y0dWamRHOXlKeXdnZG1Gc0xDQjBjblZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkcFkyOXVKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FuTXVkbUZzZFdVb1kyeHpMQ0FuWDJsamIyNG5MQ0IyWVd3c0lIUnlkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjIxbGJuVW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCRGIyMXdiMjVsYm5RdVgyRmtaRTFsYm5WSmRHVnRLR05zY3l3Z2RtRnNMQ0J3Y205d2N5NXRaVzUxVUhKcGIzSnBkSGtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjJScGMyRnNiRzkzVFhWc2RHbHdiR1VuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiSE11WDJScGMyRnNiRzkzVFhWc2RHbHdiR1VnUFNCamJITTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5jbVZ4ZFdseVpVTnZiWEJ2Ym1WdWRDYzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBblpYaGxZM1YwYVc5dVQzSmtaWEluT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJ6YTJsd0lHaGxjbVZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2RvWld4d0p6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJ4ekxsOW9aV3h3SUQwZ2RtRnNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmpMbmRoY201SlJDZ3pOakF5TENCclpYa3NJRzVoYldVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JuMHBPMXh1WEc1RGIyMXdiMjVsYm5RdWNISnZkRzkwZVhCbExsOWZjMk55YVhCMFZYVnBaQ0E5SUNjbk8xeHVYRzVqWXk1RGIyMXdiMjVsYm5RZ1BTQnRiMlIxYkdVdVpYaHdiM0owY3lBOUlFTnZiWEJ2Ym1WdWREdGNiaUpkZlE9PSJdfQ==