(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCLayout.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var NodeEvent = require('../CCNode').EventType;
        var Type = cc.Enum({
            NONE: 0,
            HORIZONTAL: 1,
            VERTICAL: 2,
            GRID: 3
        });
        var ResizeMode = cc.Enum({
            NONE: 0,
            CONTAINER: 1,
            CHILDREN: 2
        });
        var AxisDirection = cc.Enum({
            HORIZONTAL: 0,
            VERTICAL: 1
        });
        var VerticalDirection = cc.Enum({
            BOTTOM_TO_TOP: 0,
            TOP_TO_BOTTOM: 1
        });
        var HorizontalDirection = cc.Enum({
            LEFT_TO_RIGHT: 0,
            RIGHT_TO_LEFT: 1
        });
        var Layout = cc.Class({
            name: 'cc.Layout',
            extends: require('./CCComponent'),
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.ui/Layout',
                help: 'i18n:COMPONENT.help_url.layout',
                inspector: 'packages://inspector/inspectors/comps/cclayout.js',
                executeInEditMode: true
            },
            properties: {
                _layoutSize: cc.size(300, 200),
                _layoutDirty: {
                    default: true,
                    serializable: false
                },
                _resize: ResizeMode.NONE,
                _N$layoutType: Type.NONE,
                type: {
                    type: Type,
                    get: function get() {
                        return this._N$layoutType;
                    },
                    set: function set(value) {
                        this._N$layoutType = value;
                        if (CC_EDITOR && this.type !== Type.NONE && this._resize === ResizeMode.CONTAINER && !cc.engine.isPlaying) {
                            var reLayouted = _Scene.DetectConflict.checkConflict_Layout(this);
                            if (reLayouted) {
                                return;
                            }
                        }
                        this._doLayoutDirty();
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.layout.layout_type',
                    animatable: false
                },
                resizeMode: {
                    type: ResizeMode,
                    tooltip: CC_DEV && 'i18n:COMPONENT.layout.resize_mode',
                    animatable: false,
                    get: function get() {
                        return this._resize;
                    },
                    set: function set(value) {
                        if (this.type === Type.NONE && value === ResizeMode.CHILDREN) {
                            return;
                        }
                        this._resize = value;
                        if (CC_EDITOR && value === ResizeMode.CONTAINER && !cc.engine.isPlaying) {
                            var reLayouted = _Scene.DetectConflict.checkConflict_Layout(this);
                            if (reLayouted) {
                                return;
                            }
                        }
                        this._doLayoutDirty();
                    }
                },
                cellSize: {
                    default: cc.size(40, 40),
                    tooltip: CC_DEV && 'i18n:COMPONENT.layout.cell_size',
                    type: cc.Size,
                    notify: function notify() {
                        this._doLayoutDirty();
                    }
                },
                startAxis: {
                    default: AxisDirection.HORIZONTAL,
                    tooltip: CC_DEV && 'i18n:COMPONENT.layout.start_axis',
                    type: AxisDirection,
                    notify: function notify() {
                        if (CC_EDITOR && this._resize === ResizeMode.CONTAINER && !cc.engine.isPlaying) {
                            var reLayouted = _Scene.DetectConflict.checkConflict_Layout(this);
                            if (reLayouted) {
                                return;
                            }
                        }
                        this._doLayoutDirty();
                    },
                    animatable: false
                },
                _N$padding: { default: 0 },
                paddingLeft: {
                    default: 0,
                    tooltip: CC_DEV && 'i18n:COMPONENT.layout.padding_left',
                    notify: function notify() {
                        this._doLayoutDirty();
                    }
                },
                paddingRight: {
                    default: 0,
                    tooltip: CC_DEV && 'i18n:COMPONENT.layout.padding_right',
                    notify: function notify() {
                        this._doLayoutDirty();
                    }
                },
                paddingTop: {
                    default: 0,
                    tooltip: CC_DEV && 'i18n:COMPONENT.layout.padding_top',
                    notify: function notify() {
                        this._doLayoutDirty();
                    }
                },
                paddingBottom: {
                    default: 0,
                    tooltip: CC_DEV && 'i18n:COMPONENT.layout.padding_bottom',
                    notify: function notify() {
                        this._doLayoutDirty();
                    }
                },
                spacingX: {
                    default: 0,
                    notify: function notify() {
                        this._doLayoutDirty();
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.layout.space_x'
                },
                spacingY: {
                    default: 0,
                    notify: function notify() {
                        this._doLayoutDirty();
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.layout.space_y'
                },
                verticalDirection: {
                    default: VerticalDirection.TOP_TO_BOTTOM,
                    type: VerticalDirection,
                    notify: function notify() {
                        this._doLayoutDirty();
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.layout.vertical_direction',
                    animatable: false
                },
                horizontalDirection: {
                    default: HorizontalDirection.LEFT_TO_RIGHT,
                    type: HorizontalDirection,
                    notify: function notify() {
                        this._doLayoutDirty();
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.layout.horizontal_direction',
                    animatable: false
                },
                affectedByScale: {
                    default: false,
                    notify: function notify() {
                        this._doLayoutDirty();
                    },
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.layout.affected_by_scale'
                }
            },
            statics: {
                Type: Type,
                VerticalDirection: VerticalDirection,
                HorizontalDirection: HorizontalDirection,
                ResizeMode: ResizeMode,
                AxisDirection: AxisDirection
            },
            _migratePaddingData: function _migratePaddingData() {
                this.paddingLeft = this._N$padding;
                this.paddingRight = this._N$padding;
                this.paddingTop = this._N$padding;
                this.paddingBottom = this._N$padding;
                this._N$padding = 0;
            },
            onEnable: function onEnable() {
                this._addEventListeners();
                if (this.node.getContentSize().equals(cc.size(0, 0))) {
                    this.node.setContentSize(this._layoutSize);
                }
                if (this._N$padding !== 0) {
                    this._migratePaddingData();
                }
                this._doLayoutDirty();
            },
            onDisable: function onDisable() {
                this._removeEventListeners();
            },
            _doLayoutDirty: function _doLayoutDirty() {
                this._layoutDirty = true;
            },
            _doScaleDirty: function _doScaleDirty() {
                this._layoutDirty = this._layoutDirty || this.affectedByScale;
            },
            _addEventListeners: function _addEventListeners() {
                cc.director.on(cc.Director.EVENT_AFTER_UPDATE, this.updateLayout, this);
                this.node.on(NodeEvent.SIZE_CHANGED, this._resized, this);
                this.node.on(NodeEvent.ANCHOR_CHANGED, this._doLayoutDirty, this);
                this.node.on(NodeEvent.CHILD_ADDED, this._childAdded, this);
                this.node.on(NodeEvent.CHILD_REMOVED, this._childRemoved, this);
                this.node.on(NodeEvent.CHILD_REORDER, this._doLayoutDirty, this);
                this._addChildrenEventListeners();
            },
            _removeEventListeners: function _removeEventListeners() {
                cc.director.off(cc.Director.EVENT_AFTER_UPDATE, this.updateLayout, this);
                this.node.off(NodeEvent.SIZE_CHANGED, this._resized, this);
                this.node.off(NodeEvent.ANCHOR_CHANGED, this._doLayoutDirty, this);
                this.node.off(NodeEvent.CHILD_ADDED, this._childAdded, this);
                this.node.off(NodeEvent.CHILD_REMOVED, this._childRemoved, this);
                this.node.off(NodeEvent.CHILD_REORDER, this._doLayoutDirty, this);
                this._removeChildrenEventListeners();
            },
            _addChildrenEventListeners: function _addChildrenEventListeners() {
                var children = this.node.children;
                for (var i = 0; i < children.length; ++i) {
                    var child = children[i];
                    child.on(NodeEvent.SCALE_CHANGED, this._doScaleDirty, this);
                    child.on(NodeEvent.SIZE_CHANGED, this._doLayoutDirty, this);
                    child.on(NodeEvent.POSITION_CHANGED, this._doLayoutDirty, this);
                    child.on(NodeEvent.ANCHOR_CHANGED, this._doLayoutDirty, this);
                    child.on('active-in-hierarchy-changed', this._doLayoutDirty, this);
                }
            },
            _removeChildrenEventListeners: function _removeChildrenEventListeners() {
                var children = this.node.children;
                for (var i = 0; i < children.length; ++i) {
                    var child = children[i];
                    child.off(NodeEvent.SCALE_CHANGED, this._doScaleDirty, this);
                    child.off(NodeEvent.SIZE_CHANGED, this._doLayoutDirty, this);
                    child.off(NodeEvent.POSITION_CHANGED, this._doLayoutDirty, this);
                    child.off(NodeEvent.ANCHOR_CHANGED, this._doLayoutDirty, this);
                    child.off('active-in-hierarchy-changed', this._doLayoutDirty, this);
                }
            },
            _childAdded: function _childAdded(child) {
                child.on(NodeEvent.SCALE_CHANGED, this._doScaleDirty, this);
                child.on(NodeEvent.SIZE_CHANGED, this._doLayoutDirty, this);
                child.on(NodeEvent.POSITION_CHANGED, this._doLayoutDirty, this);
                child.on(NodeEvent.ANCHOR_CHANGED, this._doLayoutDirty, this);
                child.on('active-in-hierarchy-changed', this._doLayoutDirty, this);
                this._doLayoutDirty();
            },
            _childRemoved: function _childRemoved(child) {
                child.off(NodeEvent.SCALE_CHANGED, this._doScaleDirty, this);
                child.off(NodeEvent.SIZE_CHANGED, this._doLayoutDirty, this);
                child.off(NodeEvent.POSITION_CHANGED, this._doLayoutDirty, this);
                child.off(NodeEvent.ANCHOR_CHANGED, this._doLayoutDirty, this);
                child.off('active-in-hierarchy-changed', this._doLayoutDirty, this);
                this._doLayoutDirty();
            },
            _resized: function _resized() {
                this._layoutSize = this.node.getContentSize();
                this._doLayoutDirty();
            },
            _doLayoutHorizontally: function _doLayoutHorizontally(baseWidth, rowBreak, fnPositionY, applyChildren) {
                var layoutAnchor = this.node.getAnchorPoint();
                var children = this.node.children;
                var sign = 1;
                var paddingX = this.paddingLeft;
                var leftBoundaryOfLayout = -layoutAnchor.x * baseWidth;
                if (this.horizontalDirection === HorizontalDirection.RIGHT_TO_LEFT) {
                    sign = -1;
                    leftBoundaryOfLayout = (1 - layoutAnchor.x) * baseWidth;
                    paddingX = this.paddingRight;
                }
                var nextX = leftBoundaryOfLayout + sign * paddingX - sign * this.spacingX;
                var rowMaxHeight = 0;
                var tempMaxHeight = 0;
                var secondMaxHeight = 0;
                var row = 0;
                var containerResizeBoundary = 0;
                var maxHeightChildAnchorY = 0;
                var activeChildCount = 0;
                for (var i = 0; i < children.length; ++i) {
                    var child = children[i];
                    if (child.activeInHierarchy) {
                        activeChildCount++;
                    }
                }
                var newChildWidth = this.cellSize.width;
                if (this.type !== Type.GRID && this.resizeMode === ResizeMode.CHILDREN) {
                    newChildWidth = (baseWidth - (this.paddingLeft + this.paddingRight) - (activeChildCount - 1) * this.spacingX) / activeChildCount;
                }
                for (var i = 0; i < children.length; ++i) {
                    var child = children[i];
                    var childScaleX = this._getUsedScaleValue(child.scaleX);
                    var childScaleY = this._getUsedScaleValue(child.scaleY);
                    if (!child.activeInHierarchy) {
                        continue;
                    }
                    if (this._resize === ResizeMode.CHILDREN) {
                        child.width = newChildWidth / childScaleX;
                        if (this.type === Type.GRID) {
                            child.height = this.cellSize.height / childScaleY;
                        }
                    }
                    var anchorX = child.anchorX;
                    var childBoundingBoxWidth = child.width * childScaleX;
                    var childBoundingBoxHeight = child.height * childScaleY;
                    if (secondMaxHeight > tempMaxHeight) {
                        tempMaxHeight = secondMaxHeight;
                    }
                    if (childBoundingBoxHeight >= tempMaxHeight) {
                        secondMaxHeight = tempMaxHeight;
                        tempMaxHeight = childBoundingBoxHeight;
                        maxHeightChildAnchorY = child.getAnchorPoint().y;
                    }
                    if (this.horizontalDirection === HorizontalDirection.RIGHT_TO_LEFT) {
                        anchorX = 1 - child.anchorX;
                    }
                    nextX = nextX + sign * anchorX * childBoundingBoxWidth + sign * this.spacingX;
                    var rightBoundaryOfChild = sign * (1 - anchorX) * childBoundingBoxWidth;
                    if (rowBreak) {
                        var rowBreakBoundary = nextX + rightBoundaryOfChild + sign * (sign > 0 ? this.paddingRight : this.paddingLeft);
                        var leftToRightRowBreak = this.horizontalDirection === HorizontalDirection.LEFT_TO_RIGHT && rowBreakBoundary > (1 - layoutAnchor.x) * baseWidth;
                        var rightToLeftRowBreak = this.horizontalDirection === HorizontalDirection.RIGHT_TO_LEFT && rowBreakBoundary < -layoutAnchor.x * baseWidth;
                        if (leftToRightRowBreak || rightToLeftRowBreak) {
                            if (childBoundingBoxHeight >= tempMaxHeight) {
                                if (secondMaxHeight === 0) {
                                    secondMaxHeight = tempMaxHeight;
                                }
                                rowMaxHeight += secondMaxHeight;
                                secondMaxHeight = tempMaxHeight;
                            } else {
                                rowMaxHeight += tempMaxHeight;
                                secondMaxHeight = childBoundingBoxHeight;
                                tempMaxHeight = 0;
                            }
                            nextX = leftBoundaryOfLayout + sign * (paddingX + anchorX * childBoundingBoxWidth);
                            row++;
                        }
                    }
                    var finalPositionY = fnPositionY(child, rowMaxHeight, row);
                    if (baseWidth >= childBoundingBoxWidth + this.paddingLeft + this.paddingRight) {
                        if (applyChildren) {
                            child.setPosition(cc.v2(nextX, finalPositionY));
                        }
                    }
                    var signX = 1;
                    var tempFinalPositionY;
                    var topMarign = tempMaxHeight === 0 ? childBoundingBoxHeight : tempMaxHeight;
                    if (this.verticalDirection === VerticalDirection.TOP_TO_BOTTOM) {
                        containerResizeBoundary = containerResizeBoundary || this.node._contentSize.height;
                        signX = -1;
                        tempFinalPositionY = finalPositionY + signX * (topMarign * maxHeightChildAnchorY + this.paddingBottom);
                        if (tempFinalPositionY < containerResizeBoundary) {
                            containerResizeBoundary = tempFinalPositionY;
                        }
                    } else {
                        containerResizeBoundary = containerResizeBoundary || -this.node._contentSize.height;
                        tempFinalPositionY = finalPositionY + signX * (topMarign * maxHeightChildAnchorY + this.paddingTop);
                        if (tempFinalPositionY > containerResizeBoundary) {
                            containerResizeBoundary = tempFinalPositionY;
                        }
                    }
                    nextX += rightBoundaryOfChild;
                }
                return containerResizeBoundary;
            },
            _getVerticalBaseHeight: function _getVerticalBaseHeight(children) {
                var newHeight = 0;
                var activeChildCount = 0;
                if (this.resizeMode === ResizeMode.CONTAINER) {
                    for (var i = 0; i < children.length; ++i) {
                        var child = children[i];
                        if (child.activeInHierarchy) {
                            activeChildCount++;
                            newHeight += child.height * this._getUsedScaleValue(child.scaleY);
                        }
                    }
                    newHeight += (activeChildCount - 1) * this.spacingY + this.paddingBottom + this.paddingTop;
                } else {
                    newHeight = this.node.getContentSize().height;
                }
                return newHeight;
            },
            _doLayoutVertically: function _doLayoutVertically(baseHeight, columnBreak, fnPositionX, applyChildren) {
                var layoutAnchor = this.node.getAnchorPoint();
                var children = this.node.children;
                var sign = 1;
                var paddingY = this.paddingBottom;
                var bottomBoundaryOfLayout = -layoutAnchor.y * baseHeight;
                if (this.verticalDirection === VerticalDirection.TOP_TO_BOTTOM) {
                    sign = -1;
                    bottomBoundaryOfLayout = (1 - layoutAnchor.y) * baseHeight;
                    paddingY = this.paddingTop;
                }
                var nextY = bottomBoundaryOfLayout + sign * paddingY - sign * this.spacingY;
                var columnMaxWidth = 0;
                var tempMaxWidth = 0;
                var secondMaxWidth = 0;
                var column = 0;
                var containerResizeBoundary = 0;
                var maxWidthChildAnchorX = 0;
                var activeChildCount = 0;
                for (var i = 0; i < children.length; ++i) {
                    var child = children[i];
                    if (child.activeInHierarchy) {
                        activeChildCount++;
                    }
                }
                var newChildHeight = this.cellSize.height;
                if (this.type !== Type.GRID && this.resizeMode === ResizeMode.CHILDREN) {
                    newChildHeight = (baseHeight - (this.paddingTop + this.paddingBottom) - (activeChildCount - 1) * this.spacingY) / activeChildCount;
                }
                for (var i = 0; i < children.length; ++i) {
                    var child = children[i];
                    var childScaleX = this._getUsedScaleValue(child.scaleX);
                    var childScaleY = this._getUsedScaleValue(child.scaleY);
                    if (!child.activeInHierarchy) {
                        continue;
                    }
                    if (this.resizeMode === ResizeMode.CHILDREN) {
                        child.height = newChildHeight / childScaleY;
                        if (this.type === Type.GRID) {
                            child.width = this.cellSize.width / childScaleX;
                        }
                    }
                    var anchorY = child.anchorY;
                    var childBoundingBoxWidth = child.width * childScaleX;
                    var childBoundingBoxHeight = child.height * childScaleY;
                    if (secondMaxWidth > tempMaxWidth) {
                        tempMaxWidth = secondMaxWidth;
                    }
                    if (childBoundingBoxWidth >= tempMaxWidth) {
                        secondMaxWidth = tempMaxWidth;
                        tempMaxWidth = childBoundingBoxWidth;
                        maxWidthChildAnchorX = child.getAnchorPoint().x;
                    }
                    if (this.verticalDirection === VerticalDirection.TOP_TO_BOTTOM) {
                        anchorY = 1 - child.anchorY;
                    }
                    nextY = nextY + sign * anchorY * childBoundingBoxHeight + sign * this.spacingY;
                    var topBoundaryOfChild = sign * (1 - anchorY) * childBoundingBoxHeight;
                    if (columnBreak) {
                        var columnBreakBoundary = nextY + topBoundaryOfChild + sign * (sign > 0 ? this.paddingTop : this.paddingBottom);
                        var bottomToTopColumnBreak = this.verticalDirection === VerticalDirection.BOTTOM_TO_TOP && columnBreakBoundary > (1 - layoutAnchor.y) * baseHeight;
                        var topToBottomColumnBreak = this.verticalDirection === VerticalDirection.TOP_TO_BOTTOM && columnBreakBoundary < -layoutAnchor.y * baseHeight;
                        if (bottomToTopColumnBreak || topToBottomColumnBreak) {
                            if (childBoundingBoxWidth >= tempMaxWidth) {
                                if (secondMaxWidth === 0) {
                                    secondMaxWidth = tempMaxWidth;
                                }
                                columnMaxWidth += secondMaxWidth;
                                secondMaxWidth = tempMaxWidth;
                            } else {
                                columnMaxWidth += tempMaxWidth;
                                secondMaxWidth = childBoundingBoxWidth;
                                tempMaxWidth = 0;
                            }
                            nextY = bottomBoundaryOfLayout + sign * (paddingY + anchorY * childBoundingBoxHeight);
                            column++;
                        }
                    }
                    var finalPositionX = fnPositionX(child, columnMaxWidth, column);
                    if (baseHeight >= childBoundingBoxHeight + (this.paddingTop + this.paddingBottom)) {
                        if (applyChildren) {
                            child.setPosition(cc.v2(finalPositionX, nextY));
                        }
                    }
                    var signX = 1;
                    var tempFinalPositionX;
                    var rightMarign = tempMaxWidth === 0 ? childBoundingBoxWidth : tempMaxWidth;
                    if (this.horizontalDirection === HorizontalDirection.RIGHT_TO_LEFT) {
                        signX = -1;
                        containerResizeBoundary = containerResizeBoundary || this.node._contentSize.width;
                        tempFinalPositionX = finalPositionX + signX * (rightMarign * maxWidthChildAnchorX + this.paddingLeft);
                        if (tempFinalPositionX < containerResizeBoundary) {
                            containerResizeBoundary = tempFinalPositionX;
                        }
                    } else {
                        containerResizeBoundary = containerResizeBoundary || -this.node._contentSize.width;
                        tempFinalPositionX = finalPositionX + signX * (rightMarign * maxWidthChildAnchorX + this.paddingRight);
                        if (tempFinalPositionX > containerResizeBoundary) {
                            containerResizeBoundary = tempFinalPositionX;
                        }
                    }
                    nextY += topBoundaryOfChild;
                }
                return containerResizeBoundary;
            },
            _doLayoutBasic: function _doLayoutBasic() {
                var children = this.node.children;
                var allChildrenBoundingBox = null;
                for (var i = 0; i < children.length; ++i) {
                    var child = children[i];
                    if (child.activeInHierarchy) {
                        if (!allChildrenBoundingBox) {
                            allChildrenBoundingBox = child.getBoundingBoxToWorld();
                        } else {
                            allChildrenBoundingBox.union(allChildrenBoundingBox, child.getBoundingBoxToWorld());
                        }
                    }
                }
                if (allChildrenBoundingBox) {
                    var leftBottomSpace = this.node.convertToNodeSpaceAR(cc.v2(allChildrenBoundingBox.x, allChildrenBoundingBox.y));
                    leftBottomSpace = cc.v2(leftBottomSpace.x - this.paddingLeft, leftBottomSpace.y - this.paddingBottom);
                    var rightTopSpace = this.node.convertToNodeSpaceAR(cc.v2(allChildrenBoundingBox.xMax, allChildrenBoundingBox.yMax));
                    rightTopSpace = cc.v2(rightTopSpace.x + this.paddingRight, rightTopSpace.y + this.paddingTop);
                    var newSize = rightTopSpace.sub(leftBottomSpace);
                    newSize = cc.size(parseFloat(newSize.x.toFixed(2)), parseFloat(newSize.y.toFixed(2)));
                    if (newSize.width !== 0) {
                        var newAnchorX = -leftBottomSpace.x / newSize.width;
                        this.node.anchorX = parseFloat(newAnchorX.toFixed(2));
                    }
                    if (newSize.height !== 0) {
                        var newAnchorY = -leftBottomSpace.y / newSize.height;
                        this.node.anchorY = parseFloat(newAnchorY.toFixed(2));
                    }
                    this.node.setContentSize(newSize);
                }
            },
            _doLayoutGridAxisHorizontal: function _doLayoutGridAxisHorizontal(layoutAnchor, layoutSize) {
                var baseWidth = layoutSize.width;
                var sign = 1;
                var bottomBoundaryOfLayout = -layoutAnchor.y * layoutSize.height;
                var paddingY = this.paddingBottom;
                if (this.verticalDirection === VerticalDirection.TOP_TO_BOTTOM) {
                    sign = -1;
                    bottomBoundaryOfLayout = (1 - layoutAnchor.y) * layoutSize.height;
                    paddingY = this.paddingTop;
                }
                var fnPositionY = function (child, topOffset, row) {
                    return bottomBoundaryOfLayout + sign * (topOffset + child.anchorY * child.height * this._getUsedScaleValue(child.scaleY) + paddingY + row * this.spacingY);
                }.bind(this);
                var newHeight = 0;
                if (this.resizeMode === ResizeMode.CONTAINER) {
                    var boundary = this._doLayoutHorizontally(baseWidth, true, fnPositionY, false);
                    newHeight = bottomBoundaryOfLayout - boundary;
                    if (newHeight < 0) {
                        newHeight *= -1;
                    }
                    bottomBoundaryOfLayout = -layoutAnchor.y * newHeight;
                    if (this.verticalDirection === VerticalDirection.TOP_TO_BOTTOM) {
                        sign = -1;
                        bottomBoundaryOfLayout = (1 - layoutAnchor.y) * newHeight;
                    }
                }
                this._doLayoutHorizontally(baseWidth, true, fnPositionY, true);
                if (this.resizeMode === ResizeMode.CONTAINER) {
                    this.node.setContentSize(baseWidth, newHeight);
                }
            },
            _doLayoutGridAxisVertical: function _doLayoutGridAxisVertical(layoutAnchor, layoutSize) {
                var baseHeight = layoutSize.height;
                var sign = 1;
                var leftBoundaryOfLayout = -layoutAnchor.x * layoutSize.width;
                var paddingX = this.paddingLeft;
                if (this.horizontalDirection === HorizontalDirection.RIGHT_TO_LEFT) {
                    sign = -1;
                    leftBoundaryOfLayout = (1 - layoutAnchor.x) * layoutSize.width;
                    paddingX = this.paddingRight;
                }
                var fnPositionX = function (child, leftOffset, column) {
                    return leftBoundaryOfLayout + sign * (leftOffset + child.anchorX * child.width * this._getUsedScaleValue(child.scaleX) + paddingX + column * this.spacingX);
                }.bind(this);
                var newWidth = 0;
                if (this.resizeMode === ResizeMode.CONTAINER) {
                    var boundary = this._doLayoutVertically(baseHeight, true, fnPositionX, false);
                    newWidth = leftBoundaryOfLayout - boundary;
                    if (newWidth < 0) {
                        newWidth *= -1;
                    }
                    leftBoundaryOfLayout = -layoutAnchor.x * newWidth;
                    if (this.horizontalDirection === HorizontalDirection.RIGHT_TO_LEFT) {
                        sign = -1;
                        leftBoundaryOfLayout = (1 - layoutAnchor.x) * newWidth;
                    }
                }
                this._doLayoutVertically(baseHeight, true, fnPositionX, true);
                if (this.resizeMode === ResizeMode.CONTAINER) {
                    this.node.setContentSize(newWidth, baseHeight);
                }
            },
            _doLayoutGrid: function _doLayoutGrid() {
                var layoutAnchor = this.node.getAnchorPoint();
                var layoutSize = this.node.getContentSize();
                if (this.startAxis === AxisDirection.HORIZONTAL) {
                    this._doLayoutGridAxisHorizontal(layoutAnchor, layoutSize);
                } else if (this.startAxis === AxisDirection.VERTICAL) {
                    this._doLayoutGridAxisVertical(layoutAnchor, layoutSize);
                }
            },
            _getHorizontalBaseWidth: function _getHorizontalBaseWidth(children) {
                var newWidth = 0;
                var activeChildCount = 0;
                if (this.resizeMode === ResizeMode.CONTAINER) {
                    for (var i = 0; i < children.length; ++i) {
                        var child = children[i];
                        if (child.activeInHierarchy) {
                            activeChildCount++;
                            newWidth += child.width * this._getUsedScaleValue(child.scaleX);
                        }
                    }
                    newWidth += (activeChildCount - 1) * this.spacingX + this.paddingLeft + this.paddingRight;
                } else {
                    newWidth = this.node.getContentSize().width;
                }
                return newWidth;
            },
            _doLayout: function _doLayout() {
                if (this.type === Type.HORIZONTAL) {
                    var newWidth = this._getHorizontalBaseWidth(this.node.children);
                    var fnPositionY = function fnPositionY(child) {
                        return child.y;
                    };
                    this._doLayoutHorizontally(newWidth, false, fnPositionY, true);
                    this.node.width = newWidth;
                } else if (this.type === Type.VERTICAL) {
                    var newHeight = this._getVerticalBaseHeight(this.node.children);
                    var fnPositionX = function fnPositionX(child) {
                        return child.x;
                    };
                    this._doLayoutVertically(newHeight, false, fnPositionX, true);
                    this.node.height = newHeight;
                } else if (this.type === Type.NONE) {
                    if (this.resizeMode === ResizeMode.CONTAINER) {
                        this._doLayoutBasic();
                    }
                } else if (this.type === Type.GRID) {
                    this._doLayoutGrid();
                }
            },
            _getUsedScaleValue: function _getUsedScaleValue(value) {
                return this.affectedByScale ? Math.abs(value) : 1;
            },
            updateLayout: function updateLayout() {
                if (this._layoutDirty && this.node.children.length > 0) {
                    this._doLayout();
                    this._layoutDirty = false;
                }
            }
        });
        Object.defineProperty(Layout.prototype, 'padding', {
            get: function get() {
                cc.warnID(4100);
                return this.paddingLeft;
            },
            set: function set(value) {
                this._N$padding = value;
                this._migratePaddingData();
                this._doLayoutDirty();
            }
        });
        cc.Layout = module.exports = Layout;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,