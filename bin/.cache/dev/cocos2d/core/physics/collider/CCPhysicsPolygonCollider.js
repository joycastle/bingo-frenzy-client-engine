(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/physics/collider/CCPhysicsPolygonCollider.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var PTM_RATIO = require('../CCPhysicsTypes').PTM_RATIO;
        var PolygonSeparator = require('../CCPolygonSeparator');
        var PhysicsPolygonCollider = cc.Class({
            name: 'cc.PhysicsPolygonCollider',
            extends: cc.PhysicsCollider,
            mixins: [cc.Collider.Polygon],
            editor: {
                menu: CC_EDITOR && 'i18n:MAIN_MENU.component.physics/Collider/Polygon',
                inspector: CC_EDITOR && 'packages://inspector/inspectors/comps/physics/points-base-collider.js',
                requireComponent: cc.RigidBody
            },
            _createShape: function _createShape(scale) {
                var shapes = [];
                var points = this.points;
                if (points.length > 0 && points[0].equals(points[points.length - 1])) {
                    points.length -= 1;
                }
                var polys = PolygonSeparator.ConvexPartition(points);
                var offset = this.offset;
                for (var i = 0; i < polys.length; i++) {
                    var poly = polys[i];
                    var shape = null, vertices = [];
                    var firstVertice = null;
                    for (var j = 0, l = poly.length; j < l; j++) {
                        if (!shape) {
                            shape = new b2.PolygonShape();
                        }
                        var p = poly[j];
                        var x = (p.x + offset.x) / PTM_RATIO * scale.x;
                        var y = (p.y + offset.y) / PTM_RATIO * scale.y;
                        var v = new b2.Vec2(x, y);
                        vertices.push(v);
                        if (!firstVertice) {
                            firstVertice = v;
                        }
                        if (vertices.length === b2.maxPolygonVertices) {
                            shape.Set(vertices, vertices.length);
                            shapes.push(shape);
                            shape = null;
                            if (j < l - 1) {
                                vertices = [
                                    firstVertice,
                                    vertices[vertices.length - 1]
                                ];
                            }
                        }
                    }
                    if (shape) {
                        shape.Set(vertices, vertices.length);
                        shapes.push(shape);
                    }
                }
                return shapes;
            }
        });
        cc.PhysicsPolygonCollider = module.exports = PhysicsPolygonCollider;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDUGh5c2ljc1BvbHlnb25Db2xsaWRlci5qcyIsIi9Vc2Vycy9nYW95YW5nL1dvcmtTcGFjZS9qb3ljYXN0bGUvYmluZ28vY2xpZW50L2JpbmdvL2VuZ2luZS9jb2NvczJkL2NvcmUvcGh5c2ljcy9jb2xsaWRlci9DQ1BoeXNpY3NQb2x5Z29uQ29sbGlkZXIuanMiXSwibmFtZXMiOlsiUFRNX1JBVElPIiwicmVxdWlyZSIsIlBvbHlnb25TZXBhcmF0b3IiLCJQaHlzaWNzUG9seWdvbkNvbGxpZGVyIiwiY2MiLCJDbGFzcyIsIm5hbWUiLCJleHRlbmRzIiwiUGh5c2ljc0NvbGxpZGVyIiwibWl4aW5zIiwiQ29sbGlkZXIiLCJQb2x5Z29uIiwiZWRpdG9yIiwibWVudSIsIkNDX0VESVRPUiIsImluc3BlY3RvciIsInJlcXVpcmVDb21wb25lbnQiLCJSaWdpZEJvZHkiLCJfY3JlYXRlU2hhcGUiLCJzY2FsZSIsInNoYXBlcyIsInBvaW50cyIsImxlbmd0aCIsImVxdWFscyIsInBvbHlzIiwiQ29udmV4UGFydGl0aW9uIiwib2Zmc2V0IiwiaSIsInBvbHkiLCJzaGFwZSIsInZlcnRpY2VzIiwiZmlyc3RWZXJ0aWNlIiwiaiIsImwiLCJiMiIsIlBvbHlnb25TaGFwZSIsInAiLCJ4IiwieSIsInYiLCJWZWMyIiwicHVzaCIsIm1heFBvbHlnb25WZXJ0aWNlcyIsIlNldCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7SUFBQSxJQUFBLE9BQUEsR0FBQSxPQUFBLE9BQUEsS0FBQSxXQUFBLElBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQTs7Ozs7Ozs7Ozs7OztRQTBCQSxJQUFJQSxTQUFBQSxHQUFZQyxPQUFBQSxDQUFRLG1CQUFSQSxFQUE2QkQsU0FBN0M7UUFDQSxJQUFJRSxnQkFBQUEsR0FBbUJELE9BQUFBLENBQVEsdUJBQVJBLENBQXZCO1FBT0EsSUFBSUUsc0JBQUFBLEdBQXlCQyxFQUFBQSxDQUFHQyxLQUFIRCxDQUFTO0FBQUEsWUFDbENFLElB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O0FBQUEsd0JBY3pDLElBQUlELFFBQUFBLENBQVNSLE1BQVRRLEtBQW9CSSxFQUFBQSxDQUFHUSxrQkFBM0IsRUFBK0M7QUFBQSw0QkFDM0NiLEtBQUFBLENBQU1jLEdBQU5kLENBQVVDLFFBQVZELEVBQW9CQyxRQUFBQSxDQUFTUixNQUE3Qk8sRUFEMkM7QUFBQSw0QkFFM0NULE1BQUFBLENBQU9xQixJQUFQckIsQ0FBWVMsS0FBWlQsRUFGMkM7QUFBQSw0QkFJM0NTLEtBQUFBLEdBQVEsSUFBUkEsQ0FKMkM7QUFBQSw0QkFNM0MsSUFBSUcsQ0FBQUEsR0FBSUMsQ0FBQUEsR0FBSSxDQUFaLEVBQWU7QUFBQSxnQ0FDWEgsUUFBQUEsR0FBVztBQUFBLG9DQUFDQyxZQUFEO0FBQUEsb0NBQWVELFFBQUFBLENBQVNBLFFBQUFBLENBQVNSLE1BQVRRLEdBQWtCLENBQTNCQSxDQUFmO0FBQUEsaUNBQVhBLENBRFc7QUFBQSw2QkFONEI7QUFBQSx5QkFkTjtBQUFBLHFCQU5WO0FBQUEsb0JBZ0NuQyxJQUFJRCxLQUFKLEVBQVc7QUFBQSx3QkFDUEEsS0FBQUEsQ0FBTWMsR0FBTmQsQ0FBVUMsUUFBVkQsRUFBb0JDLFFBQUFBLENBQVNSLE1BQTdCTyxFQURPO0FBQUEsd0JBRVBULE1BQUFBLENBQU9xQixJQUFQckIsQ0FBWVMsS0FBWlQsRUFGTztBQUFBLHFCQWhDd0I7QUFBQSxpQkFiWjtBQUFBLGdCQW1EM0IsT0FBT0EsTUFBUCxDQW5EMkI7QUFBQSxhQVhHO0FBQUEsU0FBVGhCLENBQTdCO1FBa0VBQSxFQUFBQSxDQUFHRCxzQkFBSEMsR0FBNEJ3QyxNQUFBQSxDQUFPQyxPQUFQRCxHQUFpQnpDLHNCQUE3Q0MiLCJmaWxlIjoiQ0NQaHlzaWNzUG9seWdvbkNvbGxpZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxNiBDaHVrb25nIFRlY2hub2xvZ2llcyBJbmMuXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXG4gIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxuICBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcbiAgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXG5cbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuIFxudmFyIFBUTV9SQVRJTyA9IHJlcXVpcmUoJy4uL0NDUGh5c2ljc1R5cGVzJykuUFRNX1JBVElPO1xudmFyIFBvbHlnb25TZXBhcmF0b3IgPSByZXF1aXJlKCcuLi9DQ1BvbHlnb25TZXBhcmF0b3InKTtcblxuLyoqXG4gKiBAY2xhc3MgUGh5c2ljc1BvbHlnb25Db2xsaWRlclxuICogQGV4dGVuZHMgUGh5c2ljc0NvbGxpZGVyXG4gKiBAdXNlcyBDb2xsaWRlci5Qb2x5Z29uXG4gKi9cbnZhciBQaHlzaWNzUG9seWdvbkNvbGxpZGVyID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5QaHlzaWNzUG9seWdvbkNvbGxpZGVyJyxcbiAgICBleHRlbmRzOiBjYy5QaHlzaWNzQ29sbGlkZXIsXG4gICAgbWl4aW5zOiBbY2MuQ29sbGlkZXIuUG9seWdvbl0sXG5cbiAgICBlZGl0b3I6IHtcbiAgICAgICAgbWVudTogQ0NfRURJVE9SICYmICdpMThuOk1BSU5fTUVOVS5jb21wb25lbnQucGh5c2ljcy9Db2xsaWRlci9Qb2x5Z29uJyxcbiAgICAgICAgaW5zcGVjdG9yOiBDQ19FRElUT1IgJiYgJ3BhY2thZ2VzOi8vaW5zcGVjdG9yL2luc3BlY3RvcnMvY29tcHMvcGh5c2ljcy9wb2ludHMtYmFzZS1jb2xsaWRlci5qcycsXG4gICAgICAgIHJlcXVpcmVDb21wb25lbnQ6IGNjLlJpZ2lkQm9keVxuICAgIH0sXG5cbiAgICBfY3JlYXRlU2hhcGU6IGZ1bmN0aW9uIChzY2FsZSkge1xuICAgICAgICB2YXIgc2hhcGVzID0gW107XG5cbiAgICAgICAgdmFyIHBvaW50cyA9IHRoaXMucG9pbnRzO1xuICAgICAgICBcbiAgICAgICAgLy8gY2hlY2sgaWYgbGFzdCBwb2ludCBlcXVhbCB0byBmaXJzdCBwb2ludFxuICAgICAgICBpZiAocG9pbnRzLmxlbmd0aCA+IDAgJiYgcG9pbnRzWzBdLmVxdWFscyhwb2ludHNbcG9pbnRzLmxlbmd0aCAtIDFdKSkge1xuICAgICAgICAgICAgcG9pbnRzLmxlbmd0aCAtPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBvbHlzID0gUG9seWdvblNlcGFyYXRvci5Db252ZXhQYXJ0aXRpb24ocG9pbnRzKTtcbiAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9seXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwb2x5ID0gcG9seXNbaV07XG5cbiAgICAgICAgICAgIHZhciBzaGFwZSA9IG51bGwsIHZlcnRpY2VzID0gW107XG4gICAgICAgICAgICB2YXIgZmlyc3RWZXJ0aWNlID0gbnVsbDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGwgPSBwb2x5Lmxlbmd0aDsgaiA8IGw7IGorKykge1xuICAgICAgICAgICAgICAgIGlmICghc2hhcGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hhcGUgPSBuZXcgYjIuUG9seWdvblNoYXBlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBwID0gcG9seVtqXTtcbiAgICAgICAgICAgICAgICB2YXIgeCA9IChwLnggKyBvZmZzZXQueCkvUFRNX1JBVElPKnNjYWxlLng7XG4gICAgICAgICAgICAgICAgdmFyIHkgPSAocC55ICsgb2Zmc2V0LnkpL1BUTV9SQVRJTypzY2FsZS55O1xuICAgICAgICAgICAgICAgIHZhciB2ID0gbmV3IGIyLlZlYzIoeCwgeSk7XG4gICAgICAgICAgICAgICAgdmVydGljZXMucHVzaCggdiApO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFmaXJzdFZlcnRpY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RWZXJ0aWNlID0gdjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodmVydGljZXMubGVuZ3RoID09PSBiMi5tYXhQb2x5Z29uVmVydGljZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hhcGUuU2V0KHZlcnRpY2VzLCB2ZXJ0aWNlcy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBzaGFwZXMucHVzaChzaGFwZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgc2hhcGUgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChqIDwgbCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2VzID0gW2ZpcnN0VmVydGljZSwgdmVydGljZXNbdmVydGljZXMubGVuZ3RoIC0gMV1dO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2hhcGUpIHtcbiAgICAgICAgICAgICAgICBzaGFwZS5TZXQodmVydGljZXMsIHZlcnRpY2VzLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgc2hhcGVzLnB1c2goc2hhcGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNoYXBlcztcbiAgICB9XG59KTtcblxuY2MuUGh5c2ljc1BvbHlnb25Db2xsaWRlciA9IG1vZHVsZS5leHBvcnRzID0gUGh5c2ljc1BvbHlnb25Db2xsaWRlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxNiBDaHVrb25nIFRlY2hub2xvZ2llcyBJbmMuXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXG4gIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxuICBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcbiAgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXG5cbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG52YXIgUFRNX1JBVElPID0gcmVxdWlyZSgnLi4vQ0NQaHlzaWNzVHlwZXMnKS5QVE1fUkFUSU87XG52YXIgUG9seWdvblNlcGFyYXRvciA9IHJlcXVpcmUoJy4uL0NDUG9seWdvblNlcGFyYXRvcicpO1xuXG4vKipcbiAqIEBjbGFzcyBQaHlzaWNzUG9seWdvbkNvbGxpZGVyXG4gKiBAZXh0ZW5kcyBQaHlzaWNzQ29sbGlkZXJcbiAqIEB1c2VzIENvbGxpZGVyLlBvbHlnb25cbiAqL1xudmFyIFBoeXNpY3NQb2x5Z29uQ29sbGlkZXIgPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLlBoeXNpY3NQb2x5Z29uQ29sbGlkZXInLFxuICAgIGV4dGVuZHM6IGNjLlBoeXNpY3NDb2xsaWRlcixcbiAgICBtaXhpbnM6IFtjYy5Db2xsaWRlci5Qb2x5Z29uXSxcblxuICAgIGVkaXRvcjoge1xuICAgICAgICBtZW51OiBDQ19FRElUT1IgJiYgJ2kxOG46TUFJTl9NRU5VLmNvbXBvbmVudC5waHlzaWNzL0NvbGxpZGVyL1BvbHlnb24nLFxuICAgICAgICBpbnNwZWN0b3I6IENDX0VESVRPUiAmJiAncGFja2FnZXM6Ly9pbnNwZWN0b3IvaW5zcGVjdG9ycy9jb21wcy9waHlzaWNzL3BvaW50cy1iYXNlLWNvbGxpZGVyLmpzJyxcbiAgICAgICAgcmVxdWlyZUNvbXBvbmVudDogY2MuUmlnaWRCb2R5XG4gICAgfSxcblxuICAgIF9jcmVhdGVTaGFwZTogZnVuY3Rpb24gX2NyZWF0ZVNoYXBlKHNjYWxlKSB7XG4gICAgICAgIHZhciBzaGFwZXMgPSBbXTtcblxuICAgICAgICB2YXIgcG9pbnRzID0gdGhpcy5wb2ludHM7XG5cbiAgICAgICAgLy8gY2hlY2sgaWYgbGFzdCBwb2ludCBlcXVhbCB0byBmaXJzdCBwb2ludFxuICAgICAgICBpZiAocG9pbnRzLmxlbmd0aCA+IDAgJiYgcG9pbnRzWzBdLmVxdWFscyhwb2ludHNbcG9pbnRzLmxlbmd0aCAtIDFdKSkge1xuICAgICAgICAgICAgcG9pbnRzLmxlbmd0aCAtPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBvbHlzID0gUG9seWdvblNlcGFyYXRvci5Db252ZXhQYXJ0aXRpb24ocG9pbnRzKTtcbiAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9seXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwb2x5ID0gcG9seXNbaV07XG5cbiAgICAgICAgICAgIHZhciBzaGFwZSA9IG51bGwsXG4gICAgICAgICAgICAgICAgdmVydGljZXMgPSBbXTtcbiAgICAgICAgICAgIHZhciBmaXJzdFZlcnRpY2UgPSBudWxsO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgbCA9IHBvbHkubGVuZ3RoOyBqIDwgbDsgaisrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzaGFwZSkge1xuICAgICAgICAgICAgICAgICAgICBzaGFwZSA9IG5ldyBiMi5Qb2x5Z29uU2hhcGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHAgPSBwb2x5W2pdO1xuICAgICAgICAgICAgICAgIHZhciB4ID0gKHAueCArIG9mZnNldC54KSAvIFBUTV9SQVRJTyAqIHNjYWxlLng7XG4gICAgICAgICAgICAgICAgdmFyIHkgPSAocC55ICsgb2Zmc2V0LnkpIC8gUFRNX1JBVElPICogc2NhbGUueTtcbiAgICAgICAgICAgICAgICB2YXIgdiA9IG5ldyBiMi5WZWMyKHgsIHkpO1xuICAgICAgICAgICAgICAgIHZlcnRpY2VzLnB1c2godik7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWZpcnN0VmVydGljZSkge1xuICAgICAgICAgICAgICAgICAgICBmaXJzdFZlcnRpY2UgPSB2O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh2ZXJ0aWNlcy5sZW5ndGggPT09IGIyLm1heFBvbHlnb25WZXJ0aWNlcykge1xuICAgICAgICAgICAgICAgICAgICBzaGFwZS5TZXQodmVydGljZXMsIHZlcnRpY2VzLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIHNoYXBlcy5wdXNoKHNoYXBlKTtcblxuICAgICAgICAgICAgICAgICAgICBzaGFwZSA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGogPCBsIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljZXMgPSBbZmlyc3RWZXJ0aWNlLCB2ZXJ0aWNlc1t2ZXJ0aWNlcy5sZW5ndGggLSAxXV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzaGFwZSkge1xuICAgICAgICAgICAgICAgIHNoYXBlLlNldCh2ZXJ0aWNlcywgdmVydGljZXMubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBzaGFwZXMucHVzaChzaGFwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2hhcGVzO1xuICAgIH1cbn0pO1xuXG5jYy5QaHlzaWNzUG9seWdvbkNvbGxpZGVyID0gbW9kdWxlLmV4cG9ydHMgPSBQaHlzaWNzUG9seWdvbkNvbGxpZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtORFVHaDVjMmxqYzFCdmJIbG5iMjVEYjJ4c2FXUmxjaTVxY3lKZExDSnVZVzFsY3lJNld5SlFWRTFmVWtGVVNVOGlMQ0p5WlhGMWFYSmxJaXdpVUc5c2VXZHZibE5sY0dGeVlYUnZjaUlzSWxCb2VYTnBZM05RYjJ4NVoyOXVRMjlzYkdsa1pYSWlMQ0pqWXlJc0lrTnNZWE56SWl3aWJtRnRaU0lzSW1WNGRHVnVaSE1pTENKUWFIbHphV056UTI5c2JHbGtaWElpTENKdGFYaHBibk1pTENKRGIyeHNhV1JsY2lJc0lsQnZiSGxuYjI0aUxDSmxaR2wwYjNJaUxDSnRaVzUxSWl3aVEwTmZSVVJKVkU5U0lpd2lhVzV6Y0dWamRHOXlJaXdpY21WeGRXbHlaVU52YlhCdmJtVnVkQ0lzSWxKcFoybGtRbTlrZVNJc0lsOWpjbVZoZEdWVGFHRndaU0lzSW5OallXeGxJaXdpYzJoaGNHVnpJaXdpY0c5cGJuUnpJaXdpYkdWdVozUm9JaXdpWlhGMVlXeHpJaXdpY0c5c2VYTWlMQ0pEYjI1MlpYaFFZWEowYVhScGIyNGlMQ0p2Wm1aelpYUWlMQ0pwSWl3aWNHOXNlU0lzSW5Ob1lYQmxJaXdpZG1WeWRHbGpaWE1pTENKbWFYSnpkRlpsY25ScFkyVWlMQ0pxSWl3aWJDSXNJbUl5SWl3aVVHOXNlV2R2YmxOb1lYQmxJaXdpY0NJc0luZ2lMQ0o1SWl3aWRpSXNJbFpsWXpJaUxDSndkWE5vSWl3aWJXRjRVRzlzZVdkdmJsWmxjblJwWTJWeklpd2lVMlYwSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJanM3UVVGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRXdRa0VzU1VGQlNVRXNXVUZCV1VNc1VVRkJVU3h0UWtGQlVpeEZRVUUyUWtRc1UwRkJOME03UVVGRFFTeEpRVUZKUlN4dFFrRkJiVUpFTEZGQlFWRXNkVUpCUVZJc1EwRkJka0k3TzBGQlJVRTdPenM3TzBGQlMwRXNTVUZCU1VVc2VVSkJRWGxDUXl4SFFVRkhReXhMUVVGSUxFTkJRVk03UVVGRGJFTkRMRlZCUVUwc01rSkJSRFJDTzBGQlJXeERReXhoUVVGVFNDeEhRVUZIU1N4bFFVWnpRanRCUVVkc1EwTXNXVUZCVVN4RFFVRkRUQ3hIUVVGSFRTeFJRVUZJTEVOQlFWbERMRTlCUVdJc1EwRklNRUk3TzBGQlMyeERReXhaUVVGUk8wRkJRMHBETEdOQlFVMURMR0ZCUVdFc2JVUkJSR1k3UVVGRlNrTXNiVUpCUVZkRUxHRkJRV0VzZFVWQlJuQkNPMEZCUjBwRkxEQkNRVUZyUWxvc1IwRkJSMkU3UVVGSWFrSXNTMEZNTUVJN08wRkJWMnhEUXl4clFrRkJZeXh6UWtGQlZVTXNTMEZCVml4RlFVRnBRanRCUVVNelFpeFpRVUZKUXl4VFFVRlRMRVZCUVdJN08wRkJSVUVzV1VGQlNVTXNVMEZCVXl4TFFVRkxRU3hOUVVGc1FqczdRVUZGUVR0QlFVTkJMRmxCUVVsQkxFOUJRVTlETEUxQlFWQXNSMEZCWjBJc1EwRkJhRUlzU1VGQmNVSkVMRTlCUVU4c1EwRkJVQ3hGUVVGVlJTeE5RVUZXTEVOQlFXbENSaXhQUVVGUFFTeFBRVUZQUXl4TlFVRlFMRWRCUVdkQ0xFTkJRWFpDTEVOQlFXcENMRU5CUVhwQ0xFVkJRWE5GTzBGQlEyeEZSQ3h0UWtGQlQwTXNUVUZCVUN4SlFVRnBRaXhEUVVGcVFqdEJRVU5JT3p0QlFVVkVMRmxCUVVsRkxGRkJRVkYwUWl4cFFrRkJhVUoxUWl4bFFVRnFRaXhEUVVGcFEwb3NUVUZCYWtNc1EwRkJXanRCUVVOQkxGbEJRVWxMTEZOQlFWTXNTMEZCUzBFc1RVRkJiRUk3TzBGQlJVRXNZVUZCU3l4SlFVRkpReXhKUVVGSkxFTkJRV0lzUlVGQlowSkJMRWxCUVVsSUxFMUJRVTFHTEUxQlFURkNMRVZCUVd0RFN5eEhRVUZzUXl4RlFVRjFRenRCUVVOdVF5eG5Ra0ZCU1VNc1QwRkJUMG9zVFVGQlRVY3NRMEZCVGl4RFFVRllPenRCUVVWQkxHZENRVUZKUlN4UlFVRlJMRWxCUVZvN1FVRkJRU3huUWtGQmEwSkRMRmRCUVZjc1JVRkJOMEk3UVVGRFFTeG5Ra0ZCU1VNc1pVRkJaU3hKUVVGdVFqczdRVUZGUVN4cFFrRkJTeXhKUVVGSlF5eEpRVUZKTEVOQlFWSXNSVUZCVjBNc1NVRkJTVXdzUzBGQlMwNHNUVUZCZWtJc1JVRkJhVU5WTEVsQlFVbERMRU5CUVhKRExFVkJRWGREUkN4SFFVRjRReXhGUVVFMlF6dEJRVU42UXl4dlFrRkJTU3hEUVVGRFNDeExRVUZNTEVWQlFWazdRVUZEVWtFc05FSkJRVkVzU1VGQlNVc3NSMEZCUjBNc1dVRkJVQ3hGUVVGU08wRkJRMGc3UVVGRFJDeHZRa0ZCU1VNc1NVRkJTVklzUzBGQlMwa3NRMEZCVEN4RFFVRlNPMEZCUTBFc2IwSkJRVWxMTEVsQlFVa3NRMEZCUTBRc1JVRkJSVU1zUTBGQlJpeEhRVUZOV0N4UFFVRlBWeXhEUVVGa0xFbEJRV2xDY2tNc1UwRkJha0lzUjBGQk1rSnRRaXhOUVVGTmEwSXNRMEZCZWtNN1FVRkRRU3h2UWtGQlNVTXNTVUZCU1N4RFFVRkRSaXhGUVVGRlJTeERRVUZHTEVkQlFVMWFMRTlCUVU5WkxFTkJRV1FzU1VGQmFVSjBReXhUUVVGcVFpeEhRVUV5UW0xQ0xFMUJRVTF0UWl4RFFVRjZRenRCUVVOQkxHOUNRVUZKUXl4SlFVRkpMRWxCUVVsTUxFZEJRVWROTEVsQlFWQXNRMEZCV1Vnc1EwRkJXaXhGUVVGbFF5eERRVUZtTEVOQlFWSTdRVUZEUVZJc2VVSkJRVk5YTEVsQlFWUXNRMEZCWlVZc1EwRkJaanM3UVVGRlFTeHZRa0ZCU1N4RFFVRkRVaXhaUVVGTUxFVkJRVzFDTzBGQlEyWkJMRzFEUVVGbFVTeERRVUZtTzBGQlEwZzdPMEZCUlVRc2IwSkJRVWxVTEZOQlFWTlNMRTFCUVZRc1MwRkJiMEpaTEVkQlFVZFJMR3RDUVVFelFpeEZRVUVyUXp0QlFVTXpRMklzTUVKQlFVMWpMRWRCUVU0c1EwRkJWV0lzVVVGQlZpeEZRVUZ2UWtFc1UwRkJVMUlzVFVGQk4wSTdRVUZEUVVZc01rSkJRVTl4UWl4SlFVRlFMRU5CUVZsYUxFdEJRVm83TzBGQlJVRkJMRFJDUVVGUkxFbEJRVkk3TzBGQlJVRXNkMEpCUVVsSExFbEJRVWxETEVsQlFVa3NRMEZCV2l4RlFVRmxPMEZCUTFoSUxHMURRVUZYTEVOQlFVTkRMRmxCUVVRc1JVRkJaVVFzVTBGQlUwRXNVMEZCVTFJc1RVRkJWQ3hIUVVGclFpeERRVUV6UWl4RFFVRm1MRU5CUVZnN1FVRkRTRHRCUVVOS08wRkJRMG83TzBGQlJVUXNaMEpCUVVsUExFdEJRVW9zUlVGQlZ6dEJRVU5RUVN4elFrRkJUV01zUjBGQlRpeERRVUZWWWl4UlFVRldMRVZCUVc5Q1FTeFRRVUZUVWl4TlFVRTNRanRCUVVOQlJpeDFRa0ZCVDNGQ0xFbEJRVkFzUTBGQldWb3NTMEZCV2p0QlFVTklPMEZCUTBvN08wRkJSVVFzWlVGQlQxUXNUVUZCVUR0QlFVTklPMEZCTDBScFF5eERRVUZVTEVOQlFUZENPenRCUVd0RlFXaENMRWRCUVVkRUxITkNRVUZJTEVkQlFUUkNlVU1zVDBGQlQwTXNUMEZCVUN4SFFVRnBRakZETEhOQ1FVRTNReUlzSW1acGJHVWlPaUpEUTFCb2VYTnBZM05RYjJ4NVoyOXVRMjlzYkdsa1pYSXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUVOdmNIbHlhV2RvZENBb1l5a2dNakF4TXkweU1ERTJJRU5vZFd0dmJtY2dWR1ZqYUc1dmJHOW5hV1Z6SUVsdVl5NWNiaUJEYjNCNWNtbG5hSFFnS0dNcElESXdNVGN0TWpBeE9DQllhV0Z0Wlc0Z1dXRnFhU0JUYjJaMGQyRnlaU0JEYnk0c0lFeDBaQzVjYmx4dUlHaDBkSEJ6T2k4dmQzZDNMbU52WTI5ekxtTnZiUzljYmx4dUlGQmxjbTFwYzNOcGIyNGdhWE1nYUdWeVpXSjVJR2R5WVc1MFpXUXNJR1p5WldVZ2IyWWdZMmhoY21kbExDQjBieUJoYm5rZ2NHVnljMjl1SUc5aWRHRnBibWx1WnlCaElHTnZjSGxjYmlCdlppQjBhR2x6SUhOdlpuUjNZWEpsSUdGdVpDQmhjM052WTJsaGRHVmtJR1Z1WjJsdVpTQnpiM1Z5WTJVZ1kyOWtaU0FvZEdobElGd2lVMjltZEhkaGNtVmNJaWtzSUdFZ2JHbHRhWFJsWkN4Y2JpQWdkMjl5YkdSM2FXUmxMQ0J5YjNsaGJIUjVMV1p5WldVc0lHNXZiaTFoYzNOcFoyNWhZbXhsTENCeVpYWnZZMkZpYkdVZ1lXNWtJRzV2YmkxbGVHTnNkWE5wZG1VZ2JHbGpaVzV6WlZ4dUlIUnZJSFZ6WlNCRGIyTnZjeUJEY21WaGRHOXlJSE52YkdWc2VTQjBieUJrWlhabGJHOXdJR2RoYldWeklHOXVJSGx2ZFhJZ2RHRnlaMlYwSUhCc1lYUm1iM0p0Y3k0Z1dXOTFJSE5vWVd4c1hHNGdJRzV2ZENCMWMyVWdRMjlqYjNNZ1EzSmxZWFJ2Y2lCemIyWjBkMkZ5WlNCbWIzSWdaR1YyWld4dmNHbHVaeUJ2ZEdobGNpQnpiMlowZDJGeVpTQnZjaUIwYjI5c2N5QjBhR0YwSjNOY2JpQWdkWE5sWkNCbWIzSWdaR1YyWld4dmNHbHVaeUJuWVcxbGN5NGdXVzkxSUdGeVpTQnViM1FnWjNKaGJuUmxaQ0IwYnlCd2RXSnNhWE5vTENCa2FYTjBjbWxpZFhSbExGeHVJQ0J6ZFdKc2FXTmxibk5sTENCaGJtUXZiM0lnYzJWc2JDQmpiM0JwWlhNZ2IyWWdRMjlqYjNNZ1EzSmxZWFJ2Y2k1Y2JseHVJRlJvWlNCemIyWjBkMkZ5WlNCdmNpQjBiMjlzY3lCcGJpQjBhR2x6SUV4cFkyVnVjMlVnUVdkeVpXVnRaVzUwSUdGeVpTQnNhV05sYm5ObFpDd2dibTkwSUhOdmJHUXVYRzRnV0dsaGJXVnVJRmxoYW1rZ1UyOW1kSGRoY21VZ1EyOHVMQ0JNZEdRdUlISmxjMlZ5ZG1WeklHRnNiQ0J5YVdkb2RITWdibTkwSUdWNGNISmxjM05zZVNCbmNtRnVkR1ZrSUhSdklIbHZkUzVjYmx4dUlGUklSU0JUVDBaVVYwRlNSU0JKVXlCUVVrOVdTVVJGUkNCY0lrRlRJRWxUWENJc0lGZEpWRWhQVlZRZ1YwRlNVa0ZPVkZrZ1QwWWdRVTVaSUV0SlRrUXNJRVZZVUZKRlUxTWdUMUpjYmlCSlRWQk1TVVZFTENCSlRrTk1WVVJKVGtjZ1FsVlVJRTVQVkNCTVNVMUpWRVZFSUZSUElGUklSU0JYUVZKU1FVNVVTVVZUSUU5R0lFMUZVa05JUVU1VVFVSkpURWxVV1N4Y2JpQkdTVlJPUlZOVElFWlBVaUJCSUZCQlVsUkpRMVZNUVZJZ1VGVlNVRTlUUlNCQlRrUWdUazlPU1U1R1VrbE9SMFZOUlU1VUxpQkpUaUJPVHlCRlZrVk9WQ0JUU0VGTVRDQlVTRVZjYmlCQlZWUklUMUpUSUU5U0lFTlBVRmxTU1VkSVZDQklUMHhFUlZKVElFSkZJRXhKUVVKTVJTQkdUMUlnUVU1WklFTk1RVWxOTENCRVFVMUJSMFZUSUU5U0lFOVVTRVZTWEc0Z1RFbEJRa2xNU1ZSWkxDQlhTRVZVU0VWU0lFbE9JRUZPSUVGRFZFbFBUaUJQUmlCRFQwNVVVa0ZEVkN3Z1ZFOVNWQ0JQVWlCUFZFaEZVbGRKVTBVc0lFRlNTVk5KVGtjZ1JsSlBUU3hjYmlCUFZWUWdUMFlnVDFJZ1NVNGdRMDlPVGtWRFZFbFBUaUJYU1ZSSUlGUklSU0JUVDBaVVYwRlNSU0JQVWlCVVNFVWdWVk5GSUU5U0lFOVVTRVZTSUVSRlFVeEpUa2RUSUVsT1hHNGdWRWhGSUZOUFJsUlhRVkpGTGx4dUlDb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW92WEc0Z1hHNTJZWElnVUZSTlgxSkJWRWxQSUQwZ2NtVnhkV2x5WlNnbkxpNHZRME5RYUhsemFXTnpWSGx3WlhNbktTNVFWRTFmVWtGVVNVODdYRzUyWVhJZ1VHOXNlV2R2YmxObGNHRnlZWFJ2Y2lBOUlISmxjWFZwY21Vb0p5NHVMME5EVUc5c2VXZHZibE5sY0dGeVlYUnZjaWNwTzF4dVhHNHZLaXBjYmlBcUlFQmpiR0Z6Y3lCUWFIbHphV056VUc5c2VXZHZia052Ykd4cFpHVnlYRzRnS2lCQVpYaDBaVzVrY3lCUWFIbHphV056UTI5c2JHbGtaWEpjYmlBcUlFQjFjMlZ6SUVOdmJHeHBaR1Z5TGxCdmJIbG5iMjVjYmlBcUwxeHVkbUZ5SUZCb2VYTnBZM05RYjJ4NVoyOXVRMjlzYkdsa1pYSWdQU0JqWXk1RGJHRnpjeWg3WEc0Z0lDQWdibUZ0WlRvZ0oyTmpMbEJvZVhOcFkzTlFiMng1WjI5dVEyOXNiR2xrWlhJbkxGeHVJQ0FnSUdWNGRHVnVaSE02SUdOakxsQm9lWE5wWTNORGIyeHNhV1JsY2l4Y2JpQWdJQ0J0YVhocGJuTTZJRnRqWXk1RGIyeHNhV1JsY2k1UWIyeDVaMjl1WFN4Y2JseHVJQ0FnSUdWa2FYUnZjam9nZTF4dUlDQWdJQ0FnSUNCdFpXNTFPaUJEUTE5RlJFbFVUMUlnSmlZZ0oya3hPRzQ2VFVGSlRsOU5SVTVWTG1OdmJYQnZibVZ1ZEM1d2FIbHphV056TDBOdmJHeHBaR1Z5TDFCdmJIbG5iMjRuTEZ4dUlDQWdJQ0FnSUNCcGJuTndaV04wYjNJNklFTkRYMFZFU1ZSUFVpQW1KaUFuY0dGamEyRm5aWE02THk5cGJuTndaV04wYjNJdmFXNXpjR1ZqZEc5eWN5OWpiMjF3Y3k5d2FIbHphV056TDNCdmFXNTBjeTFpWVhObExXTnZiR3hwWkdWeUxtcHpKeXhjYmlBZ0lDQWdJQ0FnY21WeGRXbHlaVU52YlhCdmJtVnVkRG9nWTJNdVVtbG5hV1JDYjJSNVhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUY5amNtVmhkR1ZUYUdGd1pUb2dablZ1WTNScGIyNGdLSE5qWVd4bEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCemFHRndaWE1nUFNCYlhUdGNibHh1SUNBZ0lDQWdJQ0IyWVhJZ2NHOXBiblJ6SUQwZ2RHaHBjeTV3YjJsdWRITTdYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0F2THlCamFHVmpheUJwWmlCc1lYTjBJSEJ2YVc1MElHVnhkV0ZzSUhSdklHWnBjbk4wSUhCdmFXNTBYRzRnSUNBZ0lDQWdJR2xtSUNod2IybHVkSE11YkdWdVozUm9JRDRnTUNBbUppQndiMmx1ZEhOYk1GMHVaWEYxWVd4ektIQnZhVzUwYzF0d2IybHVkSE11YkdWdVozUm9JQzBnTVYwcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCd2IybHVkSE11YkdWdVozUm9JQzA5SURFN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0IyWVhJZ2NHOXNlWE1nUFNCUWIyeDVaMjl1VTJWd1lYSmhkRzl5TGtOdmJuWmxlRkJoY25ScGRHbHZiaWh3YjJsdWRITXBPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2IyWm1jMlYwSUQwZ2RHaHBjeTV2Wm1aelpYUTdYRzVjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCd2IyeDVjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIQnZiSGtnUFNCd2IyeDVjMXRwWFR0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlITm9ZWEJsSUQwZ2JuVnNiQ3dnZG1WeWRHbGpaWE1nUFNCYlhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQm1hWEp6ZEZabGNuUnBZMlVnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJxSUQwZ01Dd2diQ0E5SUhCdmJIa3ViR1Z1WjNSb095QnFJRHdnYkRzZ2Fpc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnphR0Z3WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YUdGd1pTQTlJRzVsZHlCaU1pNVFiMng1WjI5dVUyaGhjR1VvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEFnUFNCd2IyeDVXMnBkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQjRJRDBnS0hBdWVDQXJJRzltWm5ObGRDNTRLUzlRVkUxZlVrRlVTVThxYzJOaGJHVXVlRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2VTQTlJQ2h3TG5rZ0t5QnZabVp6WlhRdWVTa3ZVRlJOWDFKQlZFbFBLbk5qWVd4bExuazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhZZ1BTQnVaWGNnWWpJdVZtVmpNaWg0TENCNUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJaWEowYVdObGN5NXdkWE5vS0NCMklDazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXWnBjbk4wVm1WeWRHbGpaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1hWEp6ZEZabGNuUnBZMlVnUFNCMk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMlpYSjBhV05sY3k1c1pXNW5kR2dnUFQwOUlHSXlMbTFoZUZCdmJIbG5iMjVXWlhKMGFXTmxjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphR0Z3WlM1VFpYUW9kbVZ5ZEdsalpYTXNJSFpsY25ScFkyVnpMbXhsYm1kMGFDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOb1lYQmxjeTV3ZFhOb0tITm9ZWEJsS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YUdGd1pTQTlJRzUxYkd3N1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHb2dQQ0JzSUMwZ01Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbVZ5ZEdsalpYTWdQU0JiWm1seWMzUldaWEowYVdObExDQjJaWEowYVdObGMxdDJaWEowYVdObGN5NXNaVzVuZEdnZ0xTQXhYVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHphR0Z3WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITm9ZWEJsTGxObGRDaDJaWEowYVdObGN5d2dkbVZ5ZEdsalpYTXViR1Z1WjNSb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphR0Z3WlhNdWNIVnphQ2h6YUdGd1pTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMmhoY0dWek8xeHVJQ0FnSUgxY2JuMHBPMXh1WEc1all5NVFhSGx6YVdOelVHOXNlV2R2YmtOdmJHeHBaR1Z5SUQwZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCUWFIbHphV056VUc5c2VXZHZia052Ykd4cFpHVnlPMXh1SWwxOSJdfQ==