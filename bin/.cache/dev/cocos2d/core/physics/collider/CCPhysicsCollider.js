(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/physics/collider/CCPhysicsCollider.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var PTM_RATIO = require('../CCPhysicsTypes').PTM_RATIO;
        var getWorldScale = require('../utils').getWorldScale;
        var PhysicsCollider = cc.Class({
            name: 'cc.PhysicsCollider',
            extends: cc.Collider,
            ctor: function ctor() {
                this._fixtures = [];
                this._shapes = [];
                this._inited = false;
                this._rect = cc.rect();
            },
            properties: {
                _density: 1,
                _sensor: false,
                _friction: 0.2,
                _restitution: 0,
                density: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.density',
                    get: function get() {
                        return this._density;
                    },
                    set: function set(value) {
                        this._density = value;
                    }
                },
                sensor: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.sensor',
                    get: function get() {
                        return this._sensor;
                    },
                    set: function set(value) {
                        this._sensor = value;
                    }
                },
                friction: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.friction',
                    get: function get() {
                        return this._friction;
                    },
                    set: function set(value) {
                        this._friction = value;
                    }
                },
                restitution: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.restitution',
                    get: function get() {
                        return this._restitution;
                    },
                    set: function set(value) {
                        this._restitution = value;
                    }
                },
                body: {
                    default: null,
                    type: cc.RigidBody,
                    visible: false
                }
            },
            onDisable: function onDisable() {
                this._destroy();
            },
            onEnable: function onEnable() {
                this._init();
            },
            start: function start() {
                this._init();
            },
            _getFixtureIndex: function _getFixtureIndex(fixture) {
                return this._fixtures.indexOf(fixture);
            },
            _init: function _init() {
                cc.director.getPhysicsManager().pushDelayEvent(this, '__init', []);
            },
            _destroy: function _destroy() {
                cc.director.getPhysicsManager().pushDelayEvent(this, '__destroy', []);
            },
            __init: function __init() {
                if (this._inited)
                    return;
                var body = this.body || this.getComponent(cc.RigidBody);
                if (!body)
                    return;
                var innerBody = body._getBody();
                if (!innerBody)
                    return;
                var node = body.node;
                var scale = getWorldScale(node);
                this._scale = scale;
                var shapes = scale.x === 0 && scale.y === 0 ? [] : this._createShape(scale);
                if (!(shapes instanceof Array)) {
                    shapes = [shapes];
                }
                var categoryBits = 1 << node.groupIndex;
                var maskBits = 0;
                var bits = cc.game.collisionMatrix[node.groupIndex];
                for (var i = 0; i < bits.length; i++) {
                    if (!bits[i])
                        continue;
                    maskBits |= 1 << i;
                }
                var filter = {
                    categoryBits: categoryBits,
                    maskBits: maskBits,
                    groupIndex: 0
                };
                var manager = cc.director.getPhysicsManager();
                for (var _i = 0; _i < shapes.length; _i++) {
                    var shape = shapes[_i];
                    var fixDef = new b2.FixtureDef();
                    fixDef.density = this.density;
                    fixDef.isSensor = this.sensor;
                    fixDef.friction = this.friction;
                    fixDef.restitution = this.restitution;
                    fixDef.shape = shape;
                    fixDef.filter = filter;
                    var fixture = innerBody.CreateFixture(fixDef);
                    fixture.collider = this;
                    if (body.enabledContactListener) {
                        manager._registerContactFixture(fixture);
                    }
                    this._shapes.push(shape);
                    this._fixtures.push(fixture);
                }
                this.body = body;
                this._inited = true;
            },
            __destroy: function __destroy() {
                if (!this._inited)
                    return;
                var fixtures = this._fixtures;
                var body = this.body._getBody();
                var manager = cc.director.getPhysicsManager();
                for (var i = fixtures.length - 1; i >= 0; i--) {
                    var fixture = fixtures[i];
                    fixture.collider = null;
                    manager._unregisterContactFixture(fixture);
                    if (body) {
                        body.DestroyFixture(fixture);
                    }
                }
                this.body = null;
                this._fixtures.length = 0;
                this._shapes.length = 0;
                this._inited = false;
            },
            _createShape: function _createShape() {
            },
            apply: function apply() {
                this._destroy();
                this._init();
            },
            getAABB: function getAABB() {
                var MAX = 10000000;
                var minX = MAX, minY = MAX;
                var maxX = -MAX, maxY = -MAX;
                var fixtures = this._fixtures;
                for (var i = 0; i < fixtures.length; i++) {
                    var fixture = fixtures[i];
                    var count = fixture.GetShape().GetChildCount();
                    for (var j = 0; j < count; j++) {
                        var aabb = fixture.GetAABB(j);
                        if (aabb.lowerBound.x < minX)
                            minX = aabb.lowerBound.x;
                        if (aabb.lowerBound.y < minY)
                            minY = aabb.lowerBound.y;
                        if (aabb.upperBound.x > maxX)
                            maxX = aabb.upperBound.x;
                        if (aabb.upperBound.y > maxY)
                            maxY = aabb.upperBound.y;
                    }
                }
                minX *= PTM_RATIO;
                minY *= PTM_RATIO;
                maxX *= PTM_RATIO;
                maxY *= PTM_RATIO;
                var r = this._rect;
                r.x = minX;
                r.y = minY;
                r.width = maxX - minX;
                r.height = maxY - minY;
                return r;
            }
        });
        cc.PhysicsCollider = module.exports = PhysicsCollider;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,