(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/physics/collider/CCPhysicsBoxCollider.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var PTM_RATIO = require('../CCPhysicsTypes').PTM_RATIO;
        var PhysicsBoxCollider = cc.Class({
            name: 'cc.PhysicsBoxCollider',
            extends: cc.PhysicsCollider,
            mixins: [cc.Collider.Box],
            editor: {
                menu: CC_EDITOR && 'i18n:MAIN_MENU.component.physics/Collider/Box',
                requireComponent: cc.RigidBody
            },
            _createShape: function _createShape(scale) {
                var scaleX = Math.abs(scale.x);
                var scaleY = Math.abs(scale.y);
                var width = this.size.width / 2 / PTM_RATIO * scaleX;
                var height = this.size.height / 2 / PTM_RATIO * scaleY;
                var offsetX = this.offset.x / PTM_RATIO * scaleX;
                var offsetY = this.offset.y / PTM_RATIO * scaleY;
                var shape = new b2.PolygonShape();
                shape.SetAsBox(width, height, new b2.Vec2(offsetX, offsetY), 0);
                return shape;
            }
        });
        cc.PhysicsBoxCollider = module.exports = PhysicsBoxCollider;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDUGh5c2ljc0JveENvbGxpZGVyLmpzIiwiL1VzZXJzL2dhb3lhbmcvV29ya1NwYWNlL2pveWNhc3RsZS9iaW5nby9jbGllbnQvYmluZ28vZW5naW5lL2NvY29zMmQvY29yZS9waHlzaWNzL2NvbGxpZGVyL0NDUGh5c2ljc0JveENvbGxpZGVyLmpzIl0sIm5hbWVzIjpbIlBUTV9SQVRJTyIsInJlcXVpcmUiLCJQaHlzaWNzQm94Q29sbGlkZXIiLCJjYyIsIkNsYXNzIiwibmFtZSIsImV4dGVuZHMiLCJQaHlzaWNzQ29sbGlkZXIiLCJtaXhpbnMiLCJDb2xsaWRlciIsIkJveCIsImVkaXRvciIsIm1lbnUiLCJDQ19FRElUT1IiLCJyZXF1aXJlQ29tcG9uZW50IiwiUmlnaWRCb2R5IiwiX2NyZWF0ZVNoYXBlIiwic2NhbGUiLCJzY2FsZVgiLCJNYXRoIiwiYWJzIiwieCIsInNjYWxlWSIsInkiLCJ3aWR0aCIsInNpemUiLCJoZWlnaHQiLCJvZmZzZXRYIiwib2Zmc2V0Iiwib2Zmc2V0WSIsInNoYXBlIiwiYjIiLCJQb2x5Z29uU2hhcGUiLCJTZXRBc0JveCIsIlZlYzIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiO0lBQUEsSUFBQSxPQUFBLEdBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQSxJQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUE7Ozs7Ozs7Ozs7Ozs7UUEwQkEsSUFBSUEsU0FBQUEsR0FBWUMsT0FBQUEsQ0FBUSxtQkFBUkEsRUFBNkJELFNBQTdDO1FBT0EsSUFBSUUsa0JBQUFBLEdBQXFCQyxFQUFBQSxDQUFHQyxLQUFIRCxDQUFTO0FBQUEsWUFDOUJFLElBQUFBLEVBQU0sdUJBRHdCO0FBQUEsWUFFOUJDLE9BQUFBLEVBQVNILEVBQUFBLENBQUdJLGVBRmtCO0FBQUEsWUFHOUJDLE1BQUFBLEVBQVEsQ0FBQ0wsRUFBQUEsQ0FBR00sUUFBSE4sQ0FBWU8sR0FBYixDQUhzQjtBQUFBLFlBSzlCQyxNQUFBQSxFQUFRO0FBQUEsZ0JBQ0pDLElBQUFBLEVBQU1DLFNBQUFBLElBQWEsK0NBRGY7QUFBQSxnQkFFSkMsZ0JBQUFBLEVBQWtCWCxFQUFBQSxDQUFHWSxTQUZqQjtBQUFBLGFBTHNCO0FBQUEsWUFVOUJDLFlBQUFBLEVBQWMsU0FBQSxZQUFBLENBQVVDLEtBQVYsRUFBaUI7QUFBQSxnQkFDM0IsSUFBSUMsTUFBQUEsR0FBU0MsSUFBQUEsQ0FBS0MsR0FBTEQsQ0FBU0YsS0FBQUEsQ0FBTUksQ0FBZkYsQ0FBYixDQUQyQjtBQUFBLGdCQUUzQixJQUFJRyxNQUFBQSxHQUFTSCxJQUFBQSxDQUFLQyxHQUFMRCxDQUFTRixLQUFBQSxDQUFNTSxDQUFmSixDQUFiLENBRjJCO0FBQUEsZ0JBRzNCLElBQUlLLEtBQUFBLEdBQVEsS0FBS0MsSUFBTCxDQUFVRCxLQUFWLEdBQWdCLENBQWhCLEdBQWtCeEIsU0FBbEIsR0FBOEJrQixNQUExQyxDQUgyQjtBQUFBLGdCQUkzQixJQUFJUSxNQUFBQSxHQUFTLEtBQUtELElBQUwsQ0FBVUMsTUFBVixHQUFpQixDQUFqQixHQUFtQjFCLFNBQW5CLEdBQStCc0IsTUFBNUMsQ0FKMkI7QUFBQSxnQkFLM0IsSUFBSUssT0FBQUEsR0FBVSxLQUFLQyxNQUFMLENBQVlQLENBQVosR0FBY3JCLFNBQWQsR0FBeUJrQixNQUF2QyxDQUwyQjtBQUFBLGdCQU0zQixJQUFJVyxPQUFBQSxHQUFVLEtBQUtELE1BQUwsQ0FBWUwsQ0FBWixHQUFjdkIsU0FBZCxHQUF5QnNCLE1BQXZDLENBTjJCO0FBQUEsZ0JBUTNCLElBQUlRLEtBQUFBLEdBQVEsSUFBSUMsRUFBQUEsQ0FBR0MsWUFBUCxFQUFaLENBUjJCO0FBQUEsZ0JBUzNCRixLQUFBQSxDQUFNRyxRQUFOSCxDQUFlTixLQUFmTSxFQUFzQkosTUFBdEJJLEVBQThCLElBQUlDLEVBQUFBLENBQUdHLElBQVAsQ0FBWVAsT0FBWixFQUFxQkUsT0FBckIsQ0FBOUJDLEVBQTZELENBQTdEQSxFQVQyQjtBQUFBLGdCQVUzQixPQUFPQSxLQUFQLENBVjJCO0FBQUEsYUFWRDtBQUFBLFNBQVQzQixDQUF6QjtRQXdCQUEsRUFBQUEsQ0FBR0Qsa0JBQUhDLEdBQXdCZ0MsTUFBQUEsQ0FBT0MsT0FBUEQsR0FBaUJqQyxrQkFBekNDIiwiZmlsZSI6IkNDUGh5c2ljc0JveENvbGxpZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxNiBDaHVrb25nIFRlY2hub2xvZ2llcyBJbmMuXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXG4gIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxuICBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcbiAgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXG5cbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG52YXIgUFRNX1JBVElPID0gcmVxdWlyZSgnLi4vQ0NQaHlzaWNzVHlwZXMnKS5QVE1fUkFUSU87XG5cbi8qKlxuICogQGNsYXNzIFBoeXNpY3NCb3hDb2xsaWRlclxuICogQGV4dGVuZHMgUGh5c2ljc0NvbGxpZGVyXG4gKiBAdXNlcyBDb2xsaWRlci5Cb3hcbiAqL1xudmFyIFBoeXNpY3NCb3hDb2xsaWRlciA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuUGh5c2ljc0JveENvbGxpZGVyJyxcbiAgICBleHRlbmRzOiBjYy5QaHlzaWNzQ29sbGlkZXIsXG4gICAgbWl4aW5zOiBbY2MuQ29sbGlkZXIuQm94XSxcblxuICAgIGVkaXRvcjoge1xuICAgICAgICBtZW51OiBDQ19FRElUT1IgJiYgJ2kxOG46TUFJTl9NRU5VLmNvbXBvbmVudC5waHlzaWNzL0NvbGxpZGVyL0JveCcsXG4gICAgICAgIHJlcXVpcmVDb21wb25lbnQ6IGNjLlJpZ2lkQm9keVxuICAgIH0sXG5cbiAgICBfY3JlYXRlU2hhcGU6IGZ1bmN0aW9uIChzY2FsZSkge1xuICAgICAgICB2YXIgc2NhbGVYID0gTWF0aC5hYnMoc2NhbGUueCk7XG4gICAgICAgIHZhciBzY2FsZVkgPSBNYXRoLmFicyhzY2FsZS55KTtcbiAgICAgICAgdmFyIHdpZHRoID0gdGhpcy5zaXplLndpZHRoLzIvUFRNX1JBVElPICogc2NhbGVYO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gdGhpcy5zaXplLmhlaWdodC8yL1BUTV9SQVRJTyAqIHNjYWxlWTtcbiAgICAgICAgdmFyIG9mZnNldFggPSB0aGlzLm9mZnNldC54L1BUTV9SQVRJTyAqc2NhbGVYO1xuICAgICAgICB2YXIgb2Zmc2V0WSA9IHRoaXMub2Zmc2V0LnkvUFRNX1JBVElPICpzY2FsZVk7XG5cbiAgICAgICAgdmFyIHNoYXBlID0gbmV3IGIyLlBvbHlnb25TaGFwZSgpO1xuICAgICAgICBzaGFwZS5TZXRBc0JveCh3aWR0aCwgaGVpZ2h0LCBuZXcgYjIuVmVjMihvZmZzZXRYLCBvZmZzZXRZKSwgMCk7XG4gICAgICAgIHJldHVybiBzaGFwZTtcbiAgICB9XG59KTtcblxuY2MuUGh5c2ljc0JveENvbGxpZGVyID0gbW9kdWxlLmV4cG9ydHMgPSBQaHlzaWNzQm94Q29sbGlkZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gQ29weXJpZ2h0IChjKSAyMDEzLTIwMTYgQ2h1a29uZyBUZWNobm9sb2dpZXMgSW5jLlxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxuXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xuXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxuICB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcbiAgbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xuICB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXG4gIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxuXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxudmFyIFBUTV9SQVRJTyA9IHJlcXVpcmUoJy4uL0NDUGh5c2ljc1R5cGVzJykuUFRNX1JBVElPO1xuXG4vKipcbiAqIEBjbGFzcyBQaHlzaWNzQm94Q29sbGlkZXJcbiAqIEBleHRlbmRzIFBoeXNpY3NDb2xsaWRlclxuICogQHVzZXMgQ29sbGlkZXIuQm94XG4gKi9cbnZhciBQaHlzaWNzQm94Q29sbGlkZXIgPSBjYy5DbGFzcyh7XG4gIG5hbWU6ICdjYy5QaHlzaWNzQm94Q29sbGlkZXInLFxuICBleHRlbmRzOiBjYy5QaHlzaWNzQ29sbGlkZXIsXG4gIG1peGluczogW2NjLkNvbGxpZGVyLkJveF0sXG5cbiAgZWRpdG9yOiB7XG4gICAgbWVudTogQ0NfRURJVE9SICYmICdpMThuOk1BSU5fTUVOVS5jb21wb25lbnQucGh5c2ljcy9Db2xsaWRlci9Cb3gnLFxuICAgIHJlcXVpcmVDb21wb25lbnQ6IGNjLlJpZ2lkQm9keVxuICB9LFxuXG4gIF9jcmVhdGVTaGFwZTogZnVuY3Rpb24gX2NyZWF0ZVNoYXBlKHNjYWxlKSB7XG4gICAgdmFyIHNjYWxlWCA9IE1hdGguYWJzKHNjYWxlLngpO1xuICAgIHZhciBzY2FsZVkgPSBNYXRoLmFicyhzY2FsZS55KTtcbiAgICB2YXIgd2lkdGggPSB0aGlzLnNpemUud2lkdGggLyAyIC8gUFRNX1JBVElPICogc2NhbGVYO1xuICAgIHZhciBoZWlnaHQgPSB0aGlzLnNpemUuaGVpZ2h0IC8gMiAvIFBUTV9SQVRJTyAqIHNjYWxlWTtcbiAgICB2YXIgb2Zmc2V0WCA9IHRoaXMub2Zmc2V0LnggLyBQVE1fUkFUSU8gKiBzY2FsZVg7XG4gICAgdmFyIG9mZnNldFkgPSB0aGlzLm9mZnNldC55IC8gUFRNX1JBVElPICogc2NhbGVZO1xuXG4gICAgdmFyIHNoYXBlID0gbmV3IGIyLlBvbHlnb25TaGFwZSgpO1xuICAgIHNoYXBlLlNldEFzQm94KHdpZHRoLCBoZWlnaHQsIG5ldyBiMi5WZWMyKG9mZnNldFgsIG9mZnNldFkpLCAwKTtcbiAgICByZXR1cm4gc2hhcGU7XG4gIH1cbn0pO1xuXG5jYy5QaHlzaWNzQm94Q29sbGlkZXIgPSBtb2R1bGUuZXhwb3J0cyA9IFBoeXNpY3NCb3hDb2xsaWRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrTkRVR2g1YzJsamMwSnZlRU52Ykd4cFpHVnlMbXB6SWwwc0ltNWhiV1Z6SWpwYklsQlVUVjlTUVZSSlR5SXNJbkpsY1hWcGNtVWlMQ0pRYUhsemFXTnpRbTk0UTI5c2JHbGtaWElpTENKall5SXNJa05zWVhOeklpd2libUZ0WlNJc0ltVjRkR1Z1WkhNaUxDSlFhSGx6YVdOelEyOXNiR2xrWlhJaUxDSnRhWGhwYm5NaUxDSkRiMnhzYVdSbGNpSXNJa0p2ZUNJc0ltVmthWFJ2Y2lJc0ltMWxiblVpTENKRFExOUZSRWxVVDFJaUxDSnlaWEYxYVhKbFEyOXRjRzl1Wlc1MElpd2lVbWxuYVdSQ2IyUjVJaXdpWDJOeVpXRjBaVk5vWVhCbElpd2ljMk5oYkdVaUxDSnpZMkZzWlZnaUxDSk5ZWFJvSWl3aVlXSnpJaXdpZUNJc0luTmpZV3hsV1NJc0lua2lMQ0ozYVdSMGFDSXNJbk5wZW1VaUxDSm9aV2xuYUhRaUxDSnZabVp6WlhSWUlpd2liMlptYzJWMElpd2liMlptYzJWMFdTSXNJbk5vWVhCbElpd2lZaklpTENKUWIyeDVaMjl1VTJoaGNHVWlMQ0pUWlhSQmMwSnZlQ0lzSWxabFl6SWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaU96dEJRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUVRCQ1FTeEpRVUZKUVN4WlFVRlpReXhSUVVGUkxHMUNRVUZTTEVWQlFUWkNSQ3hUUVVFM1F6czdRVUZGUVRzN096czdRVUZMUVN4SlFVRkpSU3h4UWtGQmNVSkRMRWRCUVVkRExFdEJRVWdzUTBGQlV6dEJRVU01UWtNc1VVRkJUU3gxUWtGRWQwSTdRVUZGT1VKRExGZEJRVk5JTEVkQlFVZEpMR1ZCUm10Q08wRkJSemxDUXl4VlFVRlJMRU5CUVVOTUxFZEJRVWROTEZGQlFVZ3NRMEZCV1VNc1IwRkJZaXhEUVVoelFqczdRVUZMT1VKRExGVkJRVkU3UVVGRFNrTXNWVUZCVFVNc1lVRkJZU3dyUTBGRVpqdEJRVVZLUXl4elFrRkJhMEpZTEVkQlFVZFpPMEZCUm1wQ0xFZEJUSE5DT3p0QlFWVTVRa01zWjBKQlFXTXNjMEpCUVZWRExFdEJRVllzUlVGQmFVSTdRVUZETTBJc1VVRkJTVU1zVTBGQlUwTXNTMEZCUzBNc1IwRkJUQ3hEUVVGVFNDeE5RVUZOU1N4RFFVRm1MRU5CUVdJN1FVRkRRU3hSUVVGSlF5eFRRVUZUU0N4TFFVRkxReXhIUVVGTUxFTkJRVk5JTEUxQlFVMU5MRU5CUVdZc1EwRkJZanRCUVVOQkxGRkJRVWxETEZGQlFWRXNTMEZCUzBNc1NVRkJUQ3hEUVVGVlJDeExRVUZXTEVkQlFXZENMRU5CUVdoQ0xFZEJRV3RDZUVJc1UwRkJiRUlzUjBGQk9FSnJRaXhOUVVFeFF6dEJRVU5CTEZGQlFVbFJMRk5CUVZNc1MwRkJTMFFzU1VGQlRDeERRVUZWUXl4TlFVRldMRWRCUVdsQ0xFTkJRV3BDTEVkQlFXMUNNVUlzVTBGQmJrSXNSMEZCSzBKelFpeE5RVUUxUXp0QlFVTkJMRkZCUVVsTExGVkJRVlVzUzBGQlMwTXNUVUZCVEN4RFFVRlpVQ3hEUVVGYUxFZEJRV055UWl4VFFVRmtMRWRCUVhsQ2EwSXNUVUZCZGtNN1FVRkRRU3hSUVVGSlZ5eFZRVUZWTEV0QlFVdEVMRTFCUVV3c1EwRkJXVXdzUTBGQldpeEhRVUZqZGtJc1UwRkJaQ3hIUVVGNVFuTkNMRTFCUVhaRE96dEJRVVZCTEZGQlFVbFJMRkZCUVZFc1NVRkJTVU1zUjBGQlIwTXNXVUZCVUN4RlFVRmFPMEZCUTBGR0xGVkJRVTFITEZGQlFVNHNRMEZCWlZRc1MwRkJaaXhGUVVGelFrVXNUVUZCZEVJc1JVRkJPRUlzU1VGQlNVc3NSMEZCUjBjc1NVRkJVQ3hEUVVGWlVDeFBRVUZhTEVWQlFYRkNSU3hQUVVGeVFpeERRVUU1UWl4RlFVRTJSQ3hEUVVFM1JEdEJRVU5CTEZkQlFVOURMRXRCUVZBN1FVRkRTRHRCUVhKQ05rSXNRMEZCVkN4RFFVRjZRanM3UVVGM1FrRXpRaXhIUVVGSFJDeHJRa0ZCU0N4SFFVRjNRbWxETEU5QlFVOURMRTlCUVZBc1IwRkJhVUpzUXl4clFrRkJla01pTENKbWFXeGxJam9pUTBOUWFIbHphV056UW05NFEyOXNiR2xrWlhJdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVJRU52Y0hseWFXZG9kQ0FvWXlrZ01qQXhNeTB5TURFMklFTm9kV3R2Ym1jZ1ZHVmphRzV2Ykc5bmFXVnpJRWx1WXk1Y2JpQkRiM0I1Y21sbmFIUWdLR01wSURJd01UY3RNakF4T0NCWWFXRnRaVzRnV1dGcWFTQlRiMlowZDJGeVpTQkRieTRzSUV4MFpDNWNibHh1SUdoMGRIQnpPaTh2ZDNkM0xtTnZZMjl6TG1OdmJTOWNibHh1SUZCbGNtMXBjM05wYjI0Z2FYTWdhR1Z5WldKNUlHZHlZVzUwWldRc0lHWnlaV1VnYjJZZ1kyaGhjbWRsTENCMGJ5QmhibmtnY0dWeWMyOXVJRzlpZEdGcGJtbHVaeUJoSUdOdmNIbGNiaUJ2WmlCMGFHbHpJSE52Wm5SM1lYSmxJR0Z1WkNCaGMzTnZZMmxoZEdWa0lHVnVaMmx1WlNCemIzVnlZMlVnWTI5a1pTQW9kR2hsSUZ3aVUyOW1kSGRoY21WY0lpa3NJR0VnYkdsdGFYUmxaQ3hjYmlBZ2QyOXliR1IzYVdSbExDQnliM2xoYkhSNUxXWnlaV1VzSUc1dmJpMWhjM05wWjI1aFlteGxMQ0J5WlhadlkyRmliR1VnWVc1a0lHNXZiaTFsZUdOc2RYTnBkbVVnYkdsalpXNXpaVnh1SUhSdklIVnpaU0JEYjJOdmN5QkRjbVZoZEc5eUlITnZiR1ZzZVNCMGJ5QmtaWFpsYkc5d0lHZGhiV1Z6SUc5dUlIbHZkWElnZEdGeVoyVjBJSEJzWVhSbWIzSnRjeTRnV1c5MUlITm9ZV3hzWEc0Z0lHNXZkQ0IxYzJVZ1EyOWpiM01nUTNKbFlYUnZjaUJ6YjJaMGQyRnlaU0JtYjNJZ1pHVjJaV3h2Y0dsdVp5QnZkR2hsY2lCemIyWjBkMkZ5WlNCdmNpQjBiMjlzY3lCMGFHRjBKM05jYmlBZ2RYTmxaQ0JtYjNJZ1pHVjJaV3h2Y0dsdVp5Qm5ZVzFsY3k0Z1dXOTFJR0Z5WlNCdWIzUWdaM0poYm5SbFpDQjBieUJ3ZFdKc2FYTm9MQ0JrYVhOMGNtbGlkWFJsTEZ4dUlDQnpkV0pzYVdObGJuTmxMQ0JoYm1RdmIzSWdjMlZzYkNCamIzQnBaWE1nYjJZZ1EyOWpiM01nUTNKbFlYUnZjaTVjYmx4dUlGUm9aU0J6YjJaMGQyRnlaU0J2Y2lCMGIyOXNjeUJwYmlCMGFHbHpJRXhwWTJWdWMyVWdRV2R5WldWdFpXNTBJR0Z5WlNCc2FXTmxibk5sWkN3Z2JtOTBJSE52YkdRdVhHNGdXR2xoYldWdUlGbGhhbWtnVTI5bWRIZGhjbVVnUTI4dUxDQk1kR1F1SUhKbGMyVnlkbVZ6SUdGc2JDQnlhV2RvZEhNZ2JtOTBJR1Y0Y0hKbGMzTnNlU0JuY21GdWRHVmtJSFJ2SUhsdmRTNWNibHh1SUZSSVJTQlRUMFpVVjBGU1JTQkpVeUJRVWs5V1NVUkZSQ0JjSWtGVElFbFRYQ0lzSUZkSlZFaFBWVlFnVjBGU1VrRk9WRmtnVDBZZ1FVNVpJRXRKVGtRc0lFVllVRkpGVTFNZ1QxSmNiaUJKVFZCTVNVVkVMQ0JKVGtOTVZVUkpUa2NnUWxWVUlFNVBWQ0JNU1UxSlZFVkVJRlJQSUZSSVJTQlhRVkpTUVU1VVNVVlRJRTlHSUUxRlVrTklRVTVVUVVKSlRFbFVXU3hjYmlCR1NWUk9SVk5USUVaUFVpQkJJRkJCVWxSSlExVk1RVklnVUZWU1VFOVRSU0JCVGtRZ1RrOU9TVTVHVWtsT1IwVk5SVTVVTGlCSlRpQk9UeUJGVmtWT1ZDQlRTRUZNVENCVVNFVmNiaUJCVlZSSVQxSlRJRTlTSUVOUFVGbFNTVWRJVkNCSVQweEVSVkpUSUVKRklFeEpRVUpNUlNCR1QxSWdRVTVaSUVOTVFVbE5MQ0JFUVUxQlIwVlRJRTlTSUU5VVNFVlNYRzRnVEVsQlFrbE1TVlJaTENCWFNFVlVTRVZTSUVsT0lFRk9JRUZEVkVsUFRpQlBSaUJEVDA1VVVrRkRWQ3dnVkU5U1ZDQlBVaUJQVkVoRlVsZEpVMFVzSUVGU1NWTkpUa2NnUmxKUFRTeGNiaUJQVlZRZ1QwWWdUMUlnU1U0Z1EwOU9Ua1ZEVkVsUFRpQlhTVlJJSUZSSVJTQlRUMFpVVjBGU1JTQlBVaUJVU0VVZ1ZWTkZJRTlTSUU5VVNFVlNJRVJGUVV4SlRrZFRJRWxPWEc0Z1ZFaEZJRk5QUmxSWFFWSkZMbHh1SUNvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3ZYRzVjYm5aaGNpQlFWRTFmVWtGVVNVOGdQU0J5WlhGMWFYSmxLQ2N1TGk5RFExQm9lWE5wWTNOVWVYQmxjeWNwTGxCVVRWOVNRVlJKVHp0Y2JseHVMeW9xWEc0Z0tpQkFZMnhoYzNNZ1VHaDVjMmxqYzBKdmVFTnZiR3hwWkdWeVhHNGdLaUJBWlhoMFpXNWtjeUJRYUhsemFXTnpRMjlzYkdsa1pYSmNiaUFxSUVCMWMyVnpJRU52Ykd4cFpHVnlMa0p2ZUZ4dUlDb3ZYRzUyWVhJZ1VHaDVjMmxqYzBKdmVFTnZiR3hwWkdWeUlEMGdZMk11UTJ4aGMzTW9lMXh1SUNBZ0lHNWhiV1U2SUNkall5NVFhSGx6YVdOelFtOTRRMjlzYkdsa1pYSW5MRnh1SUNBZ0lHVjRkR1Z1WkhNNklHTmpMbEJvZVhOcFkzTkRiMnhzYVdSbGNpeGNiaUFnSUNCdGFYaHBibk02SUZ0all5NURiMnhzYVdSbGNpNUNiM2hkTEZ4dVhHNGdJQ0FnWldScGRHOXlPaUI3WEc0Z0lDQWdJQ0FnSUcxbGJuVTZJRU5EWDBWRVNWUlBVaUFtSmlBbmFURTRianBOUVVsT1gwMUZUbFV1WTI5dGNHOXVaVzUwTG5Cb2VYTnBZM012UTI5c2JHbGtaWEl2UW05NEp5eGNiaUFnSUNBZ0lDQWdjbVZ4ZFdseVpVTnZiWEJ2Ym1WdWREb2dZMk11VW1sbmFXUkNiMlI1WEc0Z0lDQWdmU3hjYmx4dUlDQWdJRjlqY21WaGRHVlRhR0Z3WlRvZ1puVnVZM1JwYjI0Z0tITmpZV3hsS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ6WTJGc1pWZ2dQU0JOWVhSb0xtRmljeWh6WTJGc1pTNTRLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlITmpZV3hsV1NBOUlFMWhkR2d1WVdKektITmpZV3hsTG5rcE8xeHVJQ0FnSUNBZ0lDQjJZWElnZDJsa2RHZ2dQU0IwYUdsekxuTnBlbVV1ZDJsa2RHZ3ZNaTlRVkUxZlVrRlVTVThnS2lCelkyRnNaVmc3WEc0Z0lDQWdJQ0FnSUhaaGNpQm9aV2xuYUhRZ1BTQjBhR2x6TG5OcGVtVXVhR1ZwWjJoMEx6SXZVRlJOWDFKQlZFbFBJQ29nYzJOaGJHVlpPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2IyWm1jMlYwV0NBOUlIUm9hWE11YjJabWMyVjBMbmd2VUZSTlgxSkJWRWxQSUNwelkyRnNaVmc3WEc0Z0lDQWdJQ0FnSUhaaGNpQnZabVp6WlhSWklEMGdkR2hwY3k1dlptWnpaWFF1ZVM5UVZFMWZVa0ZVU1U4Z0tuTmpZV3hsV1R0Y2JseHVJQ0FnSUNBZ0lDQjJZWElnYzJoaGNHVWdQU0J1WlhjZ1lqSXVVRzlzZVdkdmJsTm9ZWEJsS0NrN1hHNGdJQ0FnSUNBZ0lITm9ZWEJsTGxObGRFRnpRbTk0S0hkcFpIUm9MQ0JvWldsbmFIUXNJRzVsZHlCaU1pNVdaV015S0c5bVpuTmxkRmdzSUc5bVpuTmxkRmtwTENBd0tUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITm9ZWEJsTzF4dUlDQWdJSDFjYm4wcE8xeHVYRzVqWXk1UWFIbHphV056UW05NFEyOXNiR2xrWlhJZ1BTQnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGQm9lWE5wWTNOQ2IzaERiMnhzYVdSbGNqdGNiaUpkZlE9PSJdfQ==