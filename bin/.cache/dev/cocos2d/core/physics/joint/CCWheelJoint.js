(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/physics/joint/CCWheelJoint.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var PTM_RATIO = require('../CCPhysicsTypes').PTM_RATIO;
        var ANGLE_TO_PHYSICS_ANGLE = require('../CCPhysicsTypes').ANGLE_TO_PHYSICS_ANGLE;
        var WheelJoint = cc.Class({
            name: 'cc.WheelJoint',
            extends: cc.Joint,
            editor: CC_EDITOR && {
                inspector: 'packages://inspector/inspectors/comps/physics/joint.js',
                menu: 'i18n:MAIN_MENU.component.physics/Joint/Wheel'
            },
            properties: {
                _maxMotorTorque: 0,
                _motorSpeed: 0,
                _enableMotor: false,
                _frequency: 2,
                _dampingRatio: 0.7,
                localAxisA: {
                    default: cc.v2(1, 0),
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.localAxisA'
                },
                maxMotorTorque: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.maxMotorTorque',
                    get: function get() {
                        return this._maxMotorTorque;
                    },
                    set: function set(value) {
                        this._maxMotorTorque = value;
                        if (this._joint) {
                            this._joint.SetMaxMotorTorque(value);
                        }
                    }
                },
                motorSpeed: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.motorSpeed',
                    get: function get() {
                        return this._motorSpeed;
                    },
                    set: function set(value) {
                        this._motorSpeed = value;
                        if (this._joint) {
                            this._joint.SetMotorSpeed(value * ANGLE_TO_PHYSICS_ANGLE);
                        }
                    }
                },
                enableMotor: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.enableMotor',
                    get: function get() {
                        return this._enableMotor;
                    },
                    set: function set(value) {
                        this._enableMotor = value;
                        if (this._joint) {
                            this._joint.EnableMotor(value);
                        }
                    }
                },
                frequency: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.frequency',
                    get: function get() {
                        return this._frequency;
                    },
                    set: function set(value) {
                        this._frequency = value;
                        if (this._joint) {
                            this._joint.SetFrequency(value);
                        }
                    }
                },
                dampingRatio: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.dampingRatio',
                    get: function get() {
                        return this._dampingRatio;
                    },
                    set: function set(value) {
                        this._dampingRatio = value;
                        if (this._joint) {
                            this._joint.SetDampingRatio(value);
                        }
                    }
                }
            },
            _createJointDef: function _createJointDef() {
                var def = new b2.WheelJointDef();
                def.localAnchorA = new b2.Vec2(this.anchor.x / PTM_RATIO, this.anchor.y / PTM_RATIO);
                def.localAnchorB = new b2.Vec2(this.connectedAnchor.x / PTM_RATIO, this.connectedAnchor.y / PTM_RATIO);
                def.localAxisA = new b2.Vec2(this.localAxisA.x, this.localAxisA.y);
                def.maxMotorTorque = this.maxMotorTorque;
                def.motorSpeed = this.motorSpeed * ANGLE_TO_PHYSICS_ANGLE;
                def.enableMotor = this.enableMotor;
                def.dampingRatio = this.dampingRatio;
                def.frequencyHz = this.frequency;
                return def;
            }
        });
        cc.WheelJoint = module.exports = WheelJoint;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDV2hlZWxKb2ludC5qcyIsIi9Vc2Vycy9nYW95YW5nL1dvcmtTcGFjZS9qb3ljYXN0bGUvYmluZ28vY2xpZW50L2JpbmdvL2VuZ2luZS9jb2NvczJkL2NvcmUvcGh5c2ljcy9qb2ludC9DQ1doZWVsSm9pbnQuanMiXSwibmFtZXMiOlsiUFRNX1JBVElPIiwicmVxdWlyZSIsIkFOR0xFX1RPX1BIWVNJQ1NfQU5HTEUiLCJXaGVlbEpvaW50IiwiY2MiLCJDbGFzcyIsIm5hbWUiLCJleHRlbmRzIiwiSm9pbnQiLCJlZGl0b3IiLCJDQ19FRElUT1IiLCJpbnNwZWN0b3IiLCJtZW51IiwicHJvcGVydGllcyIsIl9tYXhNb3RvclRvcnF1ZSIsIl9tb3RvclNwZWVkIiwiX2VuYWJsZU1vdG9yIiwiX2ZyZXF1ZW5jeSIsIl9kYW1waW5nUmF0aW8iLCJsb2NhbEF4aXNBIiwiZGVmYXVsdCIsInYyIiwidG9vbHRpcCIsIkNDX0RFViIsIm1heE1vdG9yVG9ycXVlIiwiZ2V0Iiwic2V0IiwidmFsdWUiLCJfam9pbnQiLCJTZXRNYXhNb3RvclRvcnF1ZSIsIm1vdG9yU3BlZWQiLCJTZXRNb3RvclNwZWVkIiwiZW5hYmxlTW90b3IiLCJFbmFibGVNb3RvciIsImZyZXF1ZW5jeSIsIlNldEZyZXF1ZW5jeSIsImRhbXBpbmdSYXRpbyIsIlNldERhbXBpbmdSYXRpbyIsIl9jcmVhdGVKb2ludERlZiIsImRlZiIsImIyIiwiV2hlZWxKb2ludERlZiIsImxvY2FsQW5jaG9yQSIsIlZlYzIiLCJhbmNob3IiLCJ4IiwieSIsImxvY2FsQW5jaG9yQiIsImNvbm5lY3RlZEFuY2hvciIsImZyZXF1ZW5jeUh6IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjtJQUFBLElBQUEsT0FBQSxHQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUEsSUFBQSxPQUFBLE9BQUEsS0FBQSxXQUFBOzs7Ozs7Ozs7Ozs7O1FBMEJBLElBQUlBLFNBQUFBLEdBQVlDLE9BQUFBLENBQVEsbUJBQVJBLEVB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QUFKUixHQUFtQixJQUFJQyxFQUFBQSxDQUFHRyxJQUFQLENBQVksS0FBS0ssZUFBTCxDQUFxQkgsQ0FBckIsR0FBdUI3QyxTQUFuQyxFQUE4QyxLQUFLZ0QsZUFBTCxDQUFxQkYsQ0FBckIsR0FBdUI5QyxTQUFyRSxDQUFuQnVDLENBSHlCO0FBQUEsZ0JBS3pCQSxHQUFBQSxDQUFJcEIsVUFBSm9CLEdBQWlCLElBQUlDLEVBQUFBLENBQUdHLElBQVAsQ0FBWSxLQUFLeEIsVUFBTCxDQUFnQjBCLENBQTVCLEVBQStCLEtBQUsxQixVQUFMLENBQWdCMkIsQ0FBL0MsQ0FBakJQLENBTHlCO0FBQUEsZ0JBT3pCQSxHQUFBQSxDQUFJZixjQUFKZSxHQUFxQixLQUFLZixjQUExQmUsQ0FQeUI7QUFBQSxnQkFRekJBLEdBQUFBLENBQUlULFVBQUpTLEdBQWlCLEtBQUtULFVBQUwsR0FBa0I1QixzQkFBbkNxQyxDQVJ5QjtBQUFBLGdCQVN6QkEsR0FBQUEsQ0FBSVAsV0FBSk8sR0FBa0IsS0FBS1AsV0FBdkJPLENBVHlCO0FBQUEsZ0JBV3pCQSxHQUFBQSxDQUFJSCxZQUFKRyxHQUFtQixLQUFLSCxZQUF4QkcsQ0FYeUI7QUFBQSxnQkFZekJBLEdBQUFBLENBQUlVLFdBQUpWLEdBQWtCLEtBQUtMLFNBQXZCSyxDQVp5QjtBQUFBLGdCQWN6QixPQUFPQSxHQUFQLENBZHlCO0FBQUEsYUF4SVA7QUFBQSxTQUFUbkMsQ0FBakI7UUEwSkFBLEVBQUFBLENBQUdELFVBQUhDLEdBQWdCOEMsTUFBQUEsQ0FBT0MsT0FBUEQsR0FBaUIvQyxVQUFqQ0MiLCJmaWxlIjoiQ0NXaGVlbEpvaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxNiBDaHVrb25nIFRlY2hub2xvZ2llcyBJbmMuXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXG4gIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxuICBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcbiAgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXG5cbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG52YXIgUFRNX1JBVElPID0gcmVxdWlyZSgnLi4vQ0NQaHlzaWNzVHlwZXMnKS5QVE1fUkFUSU87XG52YXIgQU5HTEVfVE9fUEhZU0lDU19BTkdMRSA9IHJlcXVpcmUoJy4uL0NDUGh5c2ljc1R5cGVzJykuQU5HTEVfVE9fUEhZU0lDU19BTkdMRTtcblxuLyoqXG4gKiAhI2VuXG4gKiBBIHdoZWVsIGpvaW50LiBUaGlzIGpvaW50IHByb3ZpZGVzIHR3byBkZWdyZWVzIG9mIGZyZWVkb206IHRyYW5zbGF0aW9uXG4gKiBhbG9uZyBhbiBheGlzIGZpeGVkIGluIGJvZHlBIGFuZCByb3RhdGlvbiBpbiB0aGUgcGxhbmUuIFlvdSBjYW4gdXNlIGEgam9pbnQgbW90b3IgdG8gZHJpdmVcbiAqIHRoZSByb3RhdGlvbiBvciB0byBtb2RlbCByb3RhdGlvbmFsIGZyaWN0aW9uLlxuICogVGhpcyBqb2ludCBpcyBkZXNpZ25lZCBmb3IgdmVoaWNsZSBzdXNwZW5zaW9ucy5cbiAqICEjemhcbiAqIOi9ruWtkOWFs+iKguaPkOS+m+S4pOS4que7tOW6pueahOiHqueUseW6pu+8muaXi+i9rOWSjOayv+edgOaMh+WumuaWueWQkeS4iuS9jee9rueahOenu+WKqOOAglxuICog5L2g5Y+v5Lul6YCa6L+H5byA5ZCv5YWz6IqC6ams6L6+5p2l5L2/55So6ams6L6+6amx5Yqo5Yia5L2T55qE5peL6L2s44CCXG4gKiDova7nu4TlhbPoioLmmK/kuJPpl6jkuLrmnLrliqjovabnsbvlnovorr7orqHnmoTjgIJcbiAqIEBjbGFzcyBXaGVlbEpvaW50XG4gKiBAZXh0ZW5kcyBKb2ludFxuICovXG52YXIgV2hlZWxKb2ludCA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuV2hlZWxKb2ludCcsXG4gICAgZXh0ZW5kczogY2MuSm9pbnQsXG4gICAgXG4gICAgZWRpdG9yOiBDQ19FRElUT1IgJiYge1xuICAgICAgICBpbnNwZWN0b3I6ICdwYWNrYWdlczovL2luc3BlY3Rvci9pbnNwZWN0b3JzL2NvbXBzL3BoeXNpY3Mvam9pbnQuanMnLFxuICAgICAgICBtZW51OiAnaTE4bjpNQUlOX01FTlUuY29tcG9uZW50LnBoeXNpY3MvSm9pbnQvV2hlZWwnLFxuICAgIH0sXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIF9tYXhNb3RvclRvcnF1ZTogMCxcbiAgICAgICAgX21vdG9yU3BlZWQ6IDAsXG4gICAgICAgIF9lbmFibGVNb3RvcjogZmFsc2UsXG4gICAgICAgIFxuICAgICAgICBfZnJlcXVlbmN5OiAyLFxuICAgICAgICBfZGFtcGluZ1JhdGlvOiAwLjcsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW5cbiAgICAgICAgICogVGhlIGxvY2FsIGpvaW50IGF4aXMgcmVsYXRpdmUgdG8gcmlnaWRib2R5LlxuICAgICAgICAgKiAhI3poXG4gICAgICAgICAqIOaMh+WumuWImuS9k+WPr+S7peenu+WKqOeahOaWueWQkeOAglxuICAgICAgICAgKiBAcHJvcGVydHkge1ZlYzJ9IGxvY2FsQXhpc0FcbiAgICAgICAgICogQGRlZmF1bHQgY2MudjIoMSwgMClcbiAgICAgICAgICovXG4gICAgICAgIGxvY2FsQXhpc0E6IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IGNjLnYyKDEsIDApLFxuICAgICAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC5waHlzaWNzLnBoeXNpY3NfY29sbGlkZXIubG9jYWxBeGlzQSdcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlblxuICAgICAgICAgKiBUaGUgbWF4aXVtIHRvcnF1ZSBjYW4gYmUgYXBwbGllZCB0byByaWdpZGJvZHkgdG8gcmVhcmNoIHRoZSB0YXJnZXQgbW90b3Igc3BlZWQuXG4gICAgICAgICAqICEjemhcbiAgICAgICAgICog5Y+v5Lul5pa95Yqg5Yiw5Yia5L2T55qE5pyA5aSn5omt55+p44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBtYXhNb3RvclRvcnF1ZVxuICAgICAgICAgKiBAZGVmYXVsdCAwXG4gICAgICAgICAqL1xuICAgICAgICBtYXhNb3RvclRvcnF1ZToge1xuICAgICAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC5waHlzaWNzLnBoeXNpY3NfY29sbGlkZXIubWF4TW90b3JUb3JxdWUnLCAgICAgICAgICAgIFxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21heE1vdG9yVG9ycXVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWF4TW90b3JUb3JxdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fam9pbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fam9pbnQuU2V0TWF4TW90b3JUb3JxdWUodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlblxuICAgICAgICAgKiBUaGUgZXhwZWN0ZWQgbW90b3Igc3BlZWQuXG4gICAgICAgICAqICEjemhcbiAgICAgICAgICog5pyf5pyb55qE6ams6L6+6YCf5bqm44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBtb3RvclNwZWVkXG4gICAgICAgICAqIEBkZWZhdWx0IDBcbiAgICAgICAgICovXG4gICAgICAgIG1vdG9yU3BlZWQ6IHtcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQucGh5c2ljcy5waHlzaWNzX2NvbGxpZGVyLm1vdG9yU3BlZWQnLFxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vdG9yU3BlZWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb3RvclNwZWVkID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2pvaW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2pvaW50LlNldE1vdG9yU3BlZWQodmFsdWUgKiBBTkdMRV9UT19QSFlTSUNTX0FOR0xFKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW5cbiAgICAgICAgICogRW5hYmxlIGpvaW50IG1vdG9yP1xuICAgICAgICAgKiAhI3poXG4gICAgICAgICAqIOaYr+WQpuW8gOWQr+WFs+iKgumprOi+vu+8n1xuICAgICAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGVuYWJsZU1vdG9yXG4gICAgICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICBlbmFibGVNb3Rvcjoge1xuICAgICAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC5waHlzaWNzLnBoeXNpY3NfY29sbGlkZXIuZW5hYmxlTW90b3InLCAgICAgICAgICAgIFxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VuYWJsZU1vdG9yO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW5hYmxlTW90b3IgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fam9pbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fam9pbnQuRW5hYmxlTW90b3IodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlblxuICAgICAgICAgKiBUaGUgc3ByaW5nIGZyZXF1ZW5jeS5cbiAgICAgICAgICogISN6aFxuICAgICAgICAgKiDlvLnmgKfns7vmlbDjgIJcbiAgICAgICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGZyZXF1ZW5jeVxuICAgICAgICAgKiBAZGVmYXVsdCAwXG4gICAgICAgICAqL1xuICAgICAgICBmcmVxdWVuY3k6IHtcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQucGh5c2ljcy5waHlzaWNzX2NvbGxpZGVyLmZyZXF1ZW5jeScsXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZnJlcXVlbmN5O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZnJlcXVlbmN5ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2pvaW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2pvaW50LlNldEZyZXF1ZW5jeSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuXG4gICAgICAgICAqIFRoZSBkYW1waW5nIHJhdGlvLlxuICAgICAgICAgKiAhI3poXG4gICAgICAgICAqIOmYu+WwvO+8jOihqOekuuWFs+iKguWPmOW9ouWQju+8jOaBouWkjeWIsOWIneWni+eKtuaAgeWPl+WIsOeahOmYu+WKm+OAglxuICAgICAgICAgKiBAcHJvcGVydHkge051bWJlcn0gZGFtcGluZ1JhdGlvXG4gICAgICAgICAqIEBkZWZhdWx0IDBcbiAgICAgICAgICovXG4gICAgICAgIGRhbXBpbmdSYXRpbzoge1xuICAgICAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC5waHlzaWNzLnBoeXNpY3NfY29sbGlkZXIuZGFtcGluZ1JhdGlvJywgICAgICAgICAgICBcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kYW1waW5nUmF0aW87XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kYW1waW5nUmF0aW8gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fam9pbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fam9pbnQuU2V0RGFtcGluZ1JhdGlvKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX2NyZWF0ZUpvaW50RGVmOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkZWYgPSBuZXcgYjIuV2hlZWxKb2ludERlZigpO1xuICAgICAgICBkZWYubG9jYWxBbmNob3JBID0gbmV3IGIyLlZlYzIodGhpcy5hbmNob3IueC9QVE1fUkFUSU8sIHRoaXMuYW5jaG9yLnkvUFRNX1JBVElPKTtcbiAgICAgICAgZGVmLmxvY2FsQW5jaG9yQiA9IG5ldyBiMi5WZWMyKHRoaXMuY29ubmVjdGVkQW5jaG9yLngvUFRNX1JBVElPLCB0aGlzLmNvbm5lY3RlZEFuY2hvci55L1BUTV9SQVRJTyk7XG4gICAgICAgIFxuICAgICAgICBkZWYubG9jYWxBeGlzQSA9IG5ldyBiMi5WZWMyKHRoaXMubG9jYWxBeGlzQS54LCB0aGlzLmxvY2FsQXhpc0EueSk7XG4gICAgICAgIFxuICAgICAgICBkZWYubWF4TW90b3JUb3JxdWUgPSB0aGlzLm1heE1vdG9yVG9ycXVlO1xuICAgICAgICBkZWYubW90b3JTcGVlZCA9IHRoaXMubW90b3JTcGVlZCAqIEFOR0xFX1RPX1BIWVNJQ1NfQU5HTEU7XG4gICAgICAgIGRlZi5lbmFibGVNb3RvciA9IHRoaXMuZW5hYmxlTW90b3I7XG5cbiAgICAgICAgZGVmLmRhbXBpbmdSYXRpbyA9IHRoaXMuZGFtcGluZ1JhdGlvO1xuICAgICAgICBkZWYuZnJlcXVlbmN5SHogPSB0aGlzLmZyZXF1ZW5jeTtcblxuICAgICAgICByZXR1cm4gZGVmO1xuICAgIH1cbn0pO1xuXG5jYy5XaGVlbEpvaW50ID0gbW9kdWxlLmV4cG9ydHMgPSBXaGVlbEpvaW50O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAxMy0yMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiAgd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbnZhciBQVE1fUkFUSU8gPSByZXF1aXJlKCcuLi9DQ1BoeXNpY3NUeXBlcycpLlBUTV9SQVRJTztcbnZhciBBTkdMRV9UT19QSFlTSUNTX0FOR0xFID0gcmVxdWlyZSgnLi4vQ0NQaHlzaWNzVHlwZXMnKS5BTkdMRV9UT19QSFlTSUNTX0FOR0xFO1xuXG4vKipcbiAqICEjZW5cbiAqIEEgd2hlZWwgam9pbnQuIFRoaXMgam9pbnQgcHJvdmlkZXMgdHdvIGRlZ3JlZXMgb2YgZnJlZWRvbTogdHJhbnNsYXRpb25cbiAqIGFsb25nIGFuIGF4aXMgZml4ZWQgaW4gYm9keUEgYW5kIHJvdGF0aW9uIGluIHRoZSBwbGFuZS4gWW91IGNhbiB1c2UgYSBqb2ludCBtb3RvciB0byBkcml2ZVxuICogdGhlIHJvdGF0aW9uIG9yIHRvIG1vZGVsIHJvdGF0aW9uYWwgZnJpY3Rpb24uXG4gKiBUaGlzIGpvaW50IGlzIGRlc2lnbmVkIGZvciB2ZWhpY2xlIHN1c3BlbnNpb25zLlxuICogISN6aFxuICog6L2u5a2Q5YWz6IqC5o+Q5L6b5Lik5Liq57u05bqm55qE6Ieq55Sx5bqm77ya5peL6L2s5ZKM5rK/552A5oyH5a6a5pa55ZCR5LiK5L2N572u55qE56e75Yqo44CCXG4gKiDkvaDlj6/ku6XpgJrov4flvIDlkK/lhbPoioLpqazovr7mnaXkvb/nlKjpqazovr7pqbHliqjliJrkvZPnmoTml4vovazjgIJcbiAqIOi9rue7hOWFs+iKguaYr+S4k+mXqOS4uuacuuWKqOi9puexu+Wei+iuvuiuoeeahOOAglxuICogQGNsYXNzIFdoZWVsSm9pbnRcbiAqIEBleHRlbmRzIEpvaW50XG4gKi9cbnZhciBXaGVlbEpvaW50ID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5XaGVlbEpvaW50JyxcbiAgICBleHRlbmRzOiBjYy5Kb2ludCxcblxuICAgIGVkaXRvcjogQ0NfRURJVE9SICYmIHtcbiAgICAgICAgaW5zcGVjdG9yOiAncGFja2FnZXM6Ly9pbnNwZWN0b3IvaW5zcGVjdG9ycy9jb21wcy9waHlzaWNzL2pvaW50LmpzJyxcbiAgICAgICAgbWVudTogJ2kxOG46TUFJTl9NRU5VLmNvbXBvbmVudC5waHlzaWNzL0pvaW50L1doZWVsJ1xuICAgIH0sXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIF9tYXhNb3RvclRvcnF1ZTogMCxcbiAgICAgICAgX21vdG9yU3BlZWQ6IDAsXG4gICAgICAgIF9lbmFibGVNb3RvcjogZmFsc2UsXG5cbiAgICAgICAgX2ZyZXF1ZW5jeTogMixcbiAgICAgICAgX2RhbXBpbmdSYXRpbzogMC43LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuXG4gICAgICAgICAqIFRoZSBsb2NhbCBqb2ludCBheGlzIHJlbGF0aXZlIHRvIHJpZ2lkYm9keS5cbiAgICAgICAgICogISN6aFxuICAgICAgICAgKiDmjIflrprliJrkvZPlj6/ku6Xnp7vliqjnmoTmlrnlkJHjgIJcbiAgICAgICAgICogQHByb3BlcnR5IHtWZWMyfSBsb2NhbEF4aXNBXG4gICAgICAgICAqIEBkZWZhdWx0IGNjLnYyKDEsIDApXG4gICAgICAgICAqL1xuICAgICAgICBsb2NhbEF4aXNBOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBjYy52MigxLCAwKSxcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQucGh5c2ljcy5waHlzaWNzX2NvbGxpZGVyLmxvY2FsQXhpc0EnXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW5cbiAgICAgICAgICogVGhlIG1heGl1bSB0b3JxdWUgY2FuIGJlIGFwcGxpZWQgdG8gcmlnaWRib2R5IHRvIHJlYXJjaCB0aGUgdGFyZ2V0IG1vdG9yIHNwZWVkLlxuICAgICAgICAgKiAhI3poXG4gICAgICAgICAqIOWPr+S7peaWveWKoOWIsOWImuS9k+eahOacgOWkp+aJreefqeOAglxuICAgICAgICAgKiBAcHJvcGVydHkge051bWJlcn0gbWF4TW90b3JUb3JxdWVcbiAgICAgICAgICogQGRlZmF1bHQgMFxuICAgICAgICAgKi9cbiAgICAgICAgbWF4TW90b3JUb3JxdWU6IHtcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQucGh5c2ljcy5waHlzaWNzX2NvbGxpZGVyLm1heE1vdG9yVG9ycXVlJyxcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYXhNb3RvclRvcnF1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21heE1vdG9yVG9ycXVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2pvaW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2pvaW50LlNldE1heE1vdG9yVG9ycXVlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW5cbiAgICAgICAgICogVGhlIGV4cGVjdGVkIG1vdG9yIHNwZWVkLlxuICAgICAgICAgKiAhI3poXG4gICAgICAgICAqIOacn+acm+eahOmprOi+vumAn+W6puOAglxuICAgICAgICAgKiBAcHJvcGVydHkge051bWJlcn0gbW90b3JTcGVlZFxuICAgICAgICAgKiBAZGVmYXVsdCAwXG4gICAgICAgICAqL1xuICAgICAgICBtb3RvclNwZWVkOiB7XG4gICAgICAgICAgICB0b29sdGlwOiBDQ19ERVYgJiYgJ2kxOG46Q09NUE9ORU5ULnBoeXNpY3MucGh5c2ljc19jb2xsaWRlci5tb3RvclNwZWVkJyxcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb3RvclNwZWVkO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW90b3JTcGVlZCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9qb2ludCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9qb2ludC5TZXRNb3RvclNwZWVkKHZhbHVlICogQU5HTEVfVE9fUEhZU0lDU19BTkdMRSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuXG4gICAgICAgICAqIEVuYWJsZSBqb2ludCBtb3Rvcj9cbiAgICAgICAgICogISN6aFxuICAgICAgICAgKiDmmK/lkKblvIDlkK/lhbPoioLpqazovr7vvJ9cbiAgICAgICAgICogQHByb3BlcnR5IHtCb29sZWFufSBlbmFibGVNb3RvclxuICAgICAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAgICAgKi9cbiAgICAgICAgZW5hYmxlTW90b3I6IHtcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQucGh5c2ljcy5waHlzaWNzX2NvbGxpZGVyLmVuYWJsZU1vdG9yJyxcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9lbmFibGVNb3RvcjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VuYWJsZU1vdG9yID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2pvaW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2pvaW50LkVuYWJsZU1vdG9yKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW5cbiAgICAgICAgICogVGhlIHNwcmluZyBmcmVxdWVuY3kuXG4gICAgICAgICAqICEjemhcbiAgICAgICAgICog5by55oCn57O75pWw44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBmcmVxdWVuY3lcbiAgICAgICAgICogQGRlZmF1bHQgMFxuICAgICAgICAgKi9cbiAgICAgICAgZnJlcXVlbmN5OiB7XG4gICAgICAgICAgICB0b29sdGlwOiBDQ19ERVYgJiYgJ2kxOG46Q09NUE9ORU5ULnBoeXNpY3MucGh5c2ljc19jb2xsaWRlci5mcmVxdWVuY3knLFxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ZyZXF1ZW5jeTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZyZXF1ZW5jeSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9qb2ludCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9qb2ludC5TZXRGcmVxdWVuY3kodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlblxuICAgICAgICAgKiBUaGUgZGFtcGluZyByYXRpby5cbiAgICAgICAgICogISN6aFxuICAgICAgICAgKiDpmLvlsLzvvIzooajnpLrlhbPoioLlj5jlvaLlkI7vvIzmgaLlpI3liLDliJ3lp4vnirbmgIHlj5fliLDnmoTpmLvlipvjgIJcbiAgICAgICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGRhbXBpbmdSYXRpb1xuICAgICAgICAgKiBAZGVmYXVsdCAwXG4gICAgICAgICAqL1xuICAgICAgICBkYW1waW5nUmF0aW86IHtcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQucGh5c2ljcy5waHlzaWNzX2NvbGxpZGVyLmRhbXBpbmdSYXRpbycsXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZGFtcGluZ1JhdGlvO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGFtcGluZ1JhdGlvID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2pvaW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2pvaW50LlNldERhbXBpbmdSYXRpbyh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9jcmVhdGVKb2ludERlZjogZnVuY3Rpb24gX2NyZWF0ZUpvaW50RGVmKCkge1xuICAgICAgICB2YXIgZGVmID0gbmV3IGIyLldoZWVsSm9pbnREZWYoKTtcbiAgICAgICAgZGVmLmxvY2FsQW5jaG9yQSA9IG5ldyBiMi5WZWMyKHRoaXMuYW5jaG9yLnggLyBQVE1fUkFUSU8sIHRoaXMuYW5jaG9yLnkgLyBQVE1fUkFUSU8pO1xuICAgICAgICBkZWYubG9jYWxBbmNob3JCID0gbmV3IGIyLlZlYzIodGhpcy5jb25uZWN0ZWRBbmNob3IueCAvIFBUTV9SQVRJTywgdGhpcy5jb25uZWN0ZWRBbmNob3IueSAvIFBUTV9SQVRJTyk7XG5cbiAgICAgICAgZGVmLmxvY2FsQXhpc0EgPSBuZXcgYjIuVmVjMih0aGlzLmxvY2FsQXhpc0EueCwgdGhpcy5sb2NhbEF4aXNBLnkpO1xuXG4gICAgICAgIGRlZi5tYXhNb3RvclRvcnF1ZSA9IHRoaXMubWF4TW90b3JUb3JxdWU7XG4gICAgICAgIGRlZi5tb3RvclNwZWVkID0gdGhpcy5tb3RvclNwZWVkICogQU5HTEVfVE9fUEhZU0lDU19BTkdMRTtcbiAgICAgICAgZGVmLmVuYWJsZU1vdG9yID0gdGhpcy5lbmFibGVNb3RvcjtcblxuICAgICAgICBkZWYuZGFtcGluZ1JhdGlvID0gdGhpcy5kYW1waW5nUmF0aW87XG4gICAgICAgIGRlZi5mcmVxdWVuY3lIeiA9IHRoaXMuZnJlcXVlbmN5O1xuXG4gICAgICAgIHJldHVybiBkZWY7XG4gICAgfVxufSk7XG5cbmNjLldoZWVsSm9pbnQgPSBtb2R1bGUuZXhwb3J0cyA9IFdoZWVsSm9pbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa05EVjJobFpXeEtiMmx1ZEM1cWN5SmRMQ0p1WVcxbGN5STZXeUpRVkUxZlVrRlVTVThpTENKeVpYRjFhWEpsSWl3aVFVNUhURVZmVkU5ZlVFaFpVMGxEVTE5QlRrZE1SU0lzSWxkb1pXVnNTbTlwYm5RaUxDSmpZeUlzSWtOc1lYTnpJaXdpYm1GdFpTSXNJbVY0ZEdWdVpITWlMQ0pLYjJsdWRDSXNJbVZrYVhSdmNpSXNJa05EWDBWRVNWUlBVaUlzSW1sdWMzQmxZM1J2Y2lJc0ltMWxiblVpTENKd2NtOXdaWEowYVdWeklpd2lYMjFoZUUxdmRHOXlWRzl5Y1hWbElpd2lYMjF2ZEc5eVUzQmxaV1FpTENKZlpXNWhZbXhsVFc5MGIzSWlMQ0pmWm5KbGNYVmxibU41SWl3aVgyUmhiWEJwYm1kU1lYUnBieUlzSW14dlkyRnNRWGhwYzBFaUxDSmtaV1poZFd4MElpd2lkaklpTENKMGIyOXNkR2x3SWl3aVEwTmZSRVZXSWl3aWJXRjRUVzkwYjNKVWIzSnhkV1VpTENKblpYUWlMQ0p6WlhRaUxDSjJZV3gxWlNJc0lsOXFiMmx1ZENJc0lsTmxkRTFoZUUxdmRHOXlWRzl5Y1hWbElpd2liVzkwYjNKVGNHVmxaQ0lzSWxObGRFMXZkRzl5VTNCbFpXUWlMQ0psYm1GaWJHVk5iM1J2Y2lJc0lrVnVZV0pzWlUxdmRHOXlJaXdpWm5KbGNYVmxibU41SWl3aVUyVjBSbkpsY1hWbGJtTjVJaXdpWkdGdGNHbHVaMUpoZEdsdklpd2lVMlYwUkdGdGNHbHVaMUpoZEdsdklpd2lYMk55WldGMFpVcHZhVzUwUkdWbUlpd2laR1ZtSWl3aVlqSWlMQ0pYYUdWbGJFcHZhVzUwUkdWbUlpd2liRzlqWVd4QmJtTm9iM0pCSWl3aVZtVmpNaUlzSW1GdVkyaHZjaUlzSW5naUxDSjVJaXdpYkc5allXeEJibU5vYjNKQ0lpd2lZMjl1Ym1WamRHVmtRVzVqYUc5eUlpd2labkpsY1hWbGJtTjVTSG9pTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFUQkNRU3hKUVVGSlFTeFpRVUZaUXl4UlFVRlJMRzFDUVVGU0xFVkJRVFpDUkN4VFFVRTNRenRCUVVOQkxFbEJRVWxGTEhsQ1FVRjVRa1FzVVVGQlVTeHRRa0ZCVWl4RlFVRTJRa01zYzBKQlFURkVPenRCUVVWQk96czdPenM3T3pzN096czdPMEZCWVVFc1NVRkJTVU1zWVVGQllVTXNSMEZCUjBNc1MwRkJTQ3hEUVVGVE8wRkJRM1JDUXl4VlFVRk5MR1ZCUkdkQ08wRkJSWFJDUXl4aFFVRlRTQ3hIUVVGSFNTeExRVVpWT3p0QlFVbDBRa01zV1VGQlVVTXNZVUZCWVR0QlFVTnFRa01zYlVKQlFWY3NkMFJCUkUwN1FVRkZha0pETEdOQlFVMDdRVUZHVnl4TFFVcERPenRCUVZOMFFrTXNaMEpCUVZrN1FVRkRVa01zZVVKQlFXbENMRU5CUkZRN1FVRkZVa01zY1VKQlFXRXNRMEZHVER0QlFVZFNReXh6UWtGQll5eExRVWhPT3p0QlFVdFNReXh2UWtGQldTeERRVXhLTzBGQlRWSkRMSFZDUVVGbExFZEJUbEE3TzBGQlVWSTdPenM3T3pzN08wRkJVVUZETEc5Q1FVRlpPMEZCUTFKRExIRkNRVUZUYUVJc1IwRkJSMmxDTEVWQlFVZ3NRMEZCVFN4RFFVRk9MRVZCUVZNc1EwRkJWQ3hEUVVSRU8wRkJSVkpETEhGQ1FVRlRReXhWUVVGVk8wRkJSbGdzVTBGb1FrbzdPMEZCY1VKU096czdPenM3T3p0QlFWRkJReXgzUWtGQlowSTdRVUZEV2tZc2NVSkJRVk5ETEZWQlFWVXNkMFJCUkZBN1FVRkZXa1VzYVVKQlFVc3NaVUZCV1R0QlFVTmlMSFZDUVVGUExFdEJRVXRZTEdWQlFWbzdRVUZEU0N4aFFVcFhPMEZCUzFwWkxHbENRVUZMTEdGQlFWVkRMRXRCUVZZc1JVRkJhVUk3UVVGRGJFSXNjVUpCUVV0aUxHVkJRVXdzUjBGQmRVSmhMRXRCUVhaQ08wRkJRMEVzYjBKQlFVa3NTMEZCUzBNc1RVRkJWQ3hGUVVGcFFqdEJRVU5pTEhsQ1FVRkxRU3hOUVVGTUxFTkJRVmxETEdsQ1FVRmFMRU5CUVRoQ1JpeExRVUU1UWp0QlFVTklPMEZCUTBvN1FVRldWeXhUUVRkQ1VqczdRVUV3UTFJN096czdPenM3TzBGQlVVRkhMRzlDUVVGWk8wRkJRMUpTTEhGQ1FVRlRReXhWUVVGVkxHOUVRVVJZTzBGQlJWSkZMR2xDUVVGTExHVkJRVms3UVVGRFlpeDFRa0ZCVHl4TFFVRkxWaXhYUVVGYU8wRkJRMGdzWVVGS1R6dEJRVXRTVnl4cFFrRkJTeXhoUVVGVlF5eExRVUZXTEVWQlFXbENPMEZCUTJ4Q0xIRkNRVUZMV2l4WFFVRk1MRWRCUVcxQ1dTeExRVUZ1UWp0QlFVTkJMRzlDUVVGSkxFdEJRVXRETEUxQlFWUXNSVUZCYVVJN1FVRkRZaXg1UWtGQlMwRXNUVUZCVEN4RFFVRlpSeXhoUVVGYUxFTkJRVEJDU2l4UlFVRlJla0lzYzBKQlFXeERPMEZCUTBnN1FVRkRTanRCUVZaUExGTkJiRVJLT3p0QlFTdEVVanM3T3pzN096czdRVUZSUVRoQ0xIRkNRVUZoTzBGQlExUldMSEZDUVVGVFF5eFZRVUZWTEhGRVFVUldPMEZCUlZSRkxHbENRVUZMTEdWQlFWazdRVUZEWWl4MVFrRkJUeXhMUVVGTFZDeFpRVUZhTzBGQlEwZ3NZVUZLVVR0QlFVdFVWU3hwUWtGQlN5eGhRVUZWUXl4TFFVRldMRVZCUVdsQ08wRkJRMnhDTEhGQ1FVRkxXQ3haUVVGTUxFZEJRVzlDVnl4TFFVRndRanRCUVVOQkxHOUNRVUZKTEV0QlFVdERMRTFCUVZRc1JVRkJhVUk3UVVGRFlpeDVRa0ZCUzBFc1RVRkJUQ3hEUVVGWlN5eFhRVUZhTEVOQlFYZENUaXhMUVVGNFFqdEJRVU5JTzBGQlEwbzdRVUZXVVN4VFFYWkZURHM3UVVGdlJsSTdPenM3T3pzN08wRkJVVUZQTEcxQ1FVRlhPMEZCUTFCYUxIRkNRVUZUUXl4VlFVRlZMRzFFUVVSYU8wRkJSVkJGTEdsQ1FVRkxMR1ZCUVZrN1FVRkRZaXgxUWtGQlR5eExRVUZMVWl4VlFVRmFPMEZCUTBnc1lVRktUVHRCUVV0UVV5eHBRa0ZCU3l4aFFVRlZReXhMUVVGV0xFVkJRV2xDTzBGQlEyeENMSEZDUVVGTFZpeFZRVUZNTEVkQlFXdENWU3hMUVVGc1FqdEJRVU5CTEc5Q1FVRkpMRXRCUVV0RExFMUJRVlFzUlVGQmFVSTdRVUZEWWl4NVFrRkJTMEVzVFVGQlRDeERRVUZaVHl4WlFVRmFMRU5CUVhsQ1VpeExRVUY2UWp0QlFVTklPMEZCUTBvN1FVRldUU3hUUVRWR1NEczdRVUY1UjFJN096czdPenM3TzBGQlVVRlRMSE5DUVVGak8wRkJRMVprTEhGQ1FVRlRReXhWUVVGVkxITkVRVVJVTzBGQlJWWkZMR2xDUVVGTExHVkJRVms3UVVGRFlpeDFRa0ZCVHl4TFFVRkxVQ3hoUVVGYU8wRkJRMGdzWVVGS1V6dEJRVXRXVVN4cFFrRkJTeXhoUVVGVlF5eExRVUZXTEVWQlFXbENPMEZCUTJ4Q0xIRkNRVUZMVkN4aFFVRk1MRWRCUVhGQ1V5eExRVUZ5UWp0QlFVTkJMRzlDUVVGSkxFdEJRVXRETEUxQlFWUXNSVUZCYVVJN1FVRkRZaXg1UWtGQlMwRXNUVUZCVEN4RFFVRlpVeXhsUVVGYUxFTkJRVFJDVml4TFFVRTFRanRCUVVOSU8wRkJRMG83UVVGV1V6dEJRV3BJVGl4TFFWUlZPenRCUVhkSmRFSlhMSEZDUVVGcFFpd3lRa0ZCV1R0QlFVTjZRaXhaUVVGSlF5eE5RVUZOTEVsQlFVbERMRWRCUVVkRExHRkJRVkFzUlVGQlZqdEJRVU5CUml4WlFVRkpSeXhaUVVGS0xFZEJRVzFDTEVsQlFVbEdMRWRCUVVkSExFbEJRVkFzUTBGQldTeExRVUZMUXl4TlFVRk1MRU5CUVZsRExFTkJRVm9zUjBGQll6ZERMRk5CUVRGQ0xFVkJRWEZETEV0QlFVczBReXhOUVVGTUxFTkJRVmxGTEVOQlFWb3NSMEZCWXpsRExGTkJRVzVFTEVOQlFXNUNPMEZCUTBGMVF5eFpRVUZKVVN4WlFVRktMRWRCUVcxQ0xFbEJRVWxRTEVkQlFVZEhMRWxCUVZBc1EwRkJXU3hMUVVGTFN5eGxRVUZNTEVOQlFYRkNTQ3hEUVVGeVFpeEhRVUYxUWpkRExGTkJRVzVETEVWQlFUaERMRXRCUVV0blJDeGxRVUZNTEVOQlFYRkNSaXhEUVVGeVFpeEhRVUYxUWpsRExGTkJRWEpGTEVOQlFXNUNPenRCUVVWQmRVTXNXVUZCU1hCQ0xGVkJRVW9zUjBGQmFVSXNTVUZCU1hGQ0xFZEJRVWRITEVsQlFWQXNRMEZCV1N4TFFVRkxlRUlzVlVGQlRDeERRVUZuUWpCQ0xFTkJRVFZDTEVWQlFTdENMRXRCUVVzeFFpeFZRVUZNTEVOQlFXZENNa0lzUTBGQkwwTXNRMEZCYWtJN08wRkJSVUZRTEZsQlFVbG1MR05CUVVvc1IwRkJjVUlzUzBGQlMwRXNZMEZCTVVJN1FVRkRRV1VzV1VGQlNWUXNWVUZCU2l4SFFVRnBRaXhMUVVGTFFTeFZRVUZNTEVkQlFXdENOVUlzYzBKQlFXNURPMEZCUTBGeFF5eFpRVUZKVUN4WFFVRktMRWRCUVd0Q0xFdEJRVXRCTEZkQlFYWkNPenRCUVVWQlR5eFpRVUZKU0N4WlFVRktMRWRCUVcxQ0xFdEJRVXRCTEZsQlFYaENPMEZCUTBGSExGbEJRVWxWTEZkQlFVb3NSMEZCYTBJc1MwRkJTMllzVTBGQmRrSTdPMEZCUlVFc1pVRkJUMHNzUjBGQlVEdEJRVU5JTzBGQmRrcHhRaXhEUVVGVUxFTkJRV3BDT3p0QlFUQktRVzVETEVkQlFVZEVMRlZCUVVnc1IwRkJaMElyUXl4UFFVRlBReXhQUVVGUUxFZEJRV2xDYUVRc1ZVRkJha01pTENKbWFXeGxJam9pUTBOWGFHVmxiRXB2YVc1MExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUJEYjNCNWNtbG5hSFFnS0dNcElESXdNVE10TWpBeE5pQkRhSFZyYjI1bklGUmxZMmh1YjJ4dloybGxjeUJKYm1NdVhHNGdRMjl3ZVhKcFoyaDBJQ2hqS1NBeU1ERTNMVEl3TVRnZ1dHbGhiV1Z1SUZsaGFta2dVMjltZEhkaGNtVWdRMjh1TENCTWRHUXVYRzVjYmlCb2RIUndjem92TDNkM2R5NWpiMk52Y3k1amIyMHZYRzVjYmlCUVpYSnRhWE56YVc5dUlHbHpJR2hsY21WaWVTQm5jbUZ1ZEdWa0xDQm1jbVZsSUc5bUlHTm9ZWEpuWlN3Z2RHOGdZVzU1SUhCbGNuTnZiaUJ2WW5SaGFXNXBibWNnWVNCamIzQjVYRzRnYjJZZ2RHaHBjeUJ6YjJaMGQyRnlaU0JoYm1RZ1lYTnpiMk5wWVhSbFpDQmxibWRwYm1VZ2MyOTFjbU5sSUdOdlpHVWdLSFJvWlNCY0lsTnZablIzWVhKbFhDSXBMQ0JoSUd4cGJXbDBaV1FzWEc0Z0lIZHZjbXhrZDJsa1pTd2djbTk1WVd4MGVTMW1jbVZsTENCdWIyNHRZWE56YVdkdVlXSnNaU3dnY21WMmIyTmhZbXhsSUdGdVpDQnViMjR0WlhoamJIVnphWFpsSUd4cFkyVnVjMlZjYmlCMGJ5QjFjMlVnUTI5amIzTWdRM0psWVhSdmNpQnpiMnhsYkhrZ2RHOGdaR1YyWld4dmNDQm5ZVzFsY3lCdmJpQjViM1Z5SUhSaGNtZGxkQ0J3YkdGMFptOXliWE11SUZsdmRTQnphR0ZzYkZ4dUlDQnViM1FnZFhObElFTnZZMjl6SUVOeVpXRjBiM0lnYzI5bWRIZGhjbVVnWm05eUlHUmxkbVZzYjNCcGJtY2diM1JvWlhJZ2MyOW1kSGRoY21VZ2IzSWdkRzl2YkhNZ2RHaGhkQ2R6WEc0Z0lIVnpaV1FnWm05eUlHUmxkbVZzYjNCcGJtY2daMkZ0WlhNdUlGbHZkU0JoY21VZ2JtOTBJR2R5WVc1MFpXUWdkRzhnY0hWaWJHbHphQ3dnWkdsemRISnBZblYwWlN4Y2JpQWdjM1ZpYkdsalpXNXpaU3dnWVc1a0wyOXlJSE5sYkd3Z1kyOXdhV1Z6SUc5bUlFTnZZMjl6SUVOeVpXRjBiM0l1WEc1Y2JpQlVhR1VnYzI5bWRIZGhjbVVnYjNJZ2RHOXZiSE1nYVc0Z2RHaHBjeUJNYVdObGJuTmxJRUZuY21WbGJXVnVkQ0JoY21VZ2JHbGpaVzV6WldRc0lHNXZkQ0J6YjJ4a0xseHVJRmhwWVcxbGJpQlpZV3BwSUZOdlpuUjNZWEpsSUVOdkxpd2dUSFJrTGlCeVpYTmxjblpsY3lCaGJHd2djbWxuYUhSeklHNXZkQ0JsZUhCeVpYTnpiSGtnWjNKaGJuUmxaQ0IwYnlCNWIzVXVYRzVjYmlCVVNFVWdVMDlHVkZkQlVrVWdTVk1nVUZKUFZrbEVSVVFnWENKQlV5QkpVMXdpTENCWFNWUklUMVZVSUZkQlVsSkJUbFJaSUU5R0lFRk9XU0JMU1U1RUxDQkZXRkJTUlZOVElFOVNYRzRnU1UxUVRFbEZSQ3dnU1U1RFRGVkVTVTVISUVKVlZDQk9UMVFnVEVsTlNWUkZSQ0JVVHlCVVNFVWdWMEZTVWtGT1ZFbEZVeUJQUmlCTlJWSkRTRUZPVkVGQ1NVeEpWRmtzWEc0Z1JrbFVUa1ZUVXlCR1QxSWdRU0JRUVZKVVNVTlZURUZTSUZCVlVsQlBVMFVnUVU1RUlFNVBUa2xPUmxKSlRrZEZUVVZPVkM0Z1NVNGdUazhnUlZaRlRsUWdVMGhCVEV3Z1ZFaEZYRzRnUVZWVVNFOVNVeUJQVWlCRFQxQlpVa2xIU0ZRZ1NFOU1SRVZTVXlCQ1JTQk1TVUZDVEVVZ1JrOVNJRUZPV1NCRFRFRkpUU3dnUkVGTlFVZEZVeUJQVWlCUFZFaEZVbHh1SUV4SlFVSkpURWxVV1N3Z1YwaEZWRWhGVWlCSlRpQkJUaUJCUTFSSlQwNGdUMFlnUTA5T1ZGSkJRMVFzSUZSUFVsUWdUMUlnVDFSSVJWSlhTVk5GTENCQlVrbFRTVTVISUVaU1QwMHNYRzRnVDFWVUlFOUdJRTlTSUVsT0lFTlBUazVGUTFSSlQwNGdWMGxVU0NCVVNFVWdVMDlHVkZkQlVrVWdUMUlnVkVoRklGVlRSU0JQVWlCUFZFaEZVaUJFUlVGTVNVNUhVeUJKVGx4dUlGUklSU0JUVDBaVVYwRlNSUzVjYmlBcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FMMXh1WEc1MllYSWdVRlJOWDFKQlZFbFBJRDBnY21WeGRXbHlaU2duTGk0dlEwTlFhSGx6YVdOelZIbHdaWE1uS1M1UVZFMWZVa0ZVU1U4N1hHNTJZWElnUVU1SFRFVmZWRTlmVUVoWlUwbERVMTlCVGtkTVJTQTlJSEpsY1hWcGNtVW9KeTR1TDBORFVHaDVjMmxqYzFSNWNHVnpKeWt1UVU1SFRFVmZWRTlmVUVoWlUwbERVMTlCVGtkTVJUdGNibHh1THlvcVhHNGdLaUFoSTJWdVhHNGdLaUJCSUhkb1pXVnNJR3B2YVc1MExpQlVhR2x6SUdwdmFXNTBJSEJ5YjNacFpHVnpJSFIzYnlCa1pXZHlaV1Z6SUc5bUlHWnlaV1ZrYjIwNklIUnlZVzV6YkdGMGFXOXVYRzRnS2lCaGJHOXVaeUJoYmlCaGVHbHpJR1pwZUdWa0lHbHVJR0p2WkhsQklHRnVaQ0J5YjNSaGRHbHZiaUJwYmlCMGFHVWdjR3hoYm1VdUlGbHZkU0JqWVc0Z2RYTmxJR0VnYW05cGJuUWdiVzkwYjNJZ2RHOGdaSEpwZG1WY2JpQXFJSFJvWlNCeWIzUmhkR2x2YmlCdmNpQjBieUJ0YjJSbGJDQnliM1JoZEdsdmJtRnNJR1p5YVdOMGFXOXVMbHh1SUNvZ1ZHaHBjeUJxYjJsdWRDQnBjeUJrWlhOcFoyNWxaQ0JtYjNJZ2RtVm9hV05zWlNCemRYTndaVzV6YVc5dWN5NWNiaUFxSUNFamVtaGNiaUFxSU9pOXJ1V3RrT1dGcytpS2d1YVBrT1MrbStTNHBPUzRxdWU3dE9XNnB1ZWFoT2lIcXVlVXNlVzZwdSs4bXVhWGkraTlyT1dTak9heXYrZWRnT2FNaCtXdW11YVd1ZVdRa2VTNGl1UzlqZWU5cnVlYWhPZW51K1dLcU9PQWdseHVJQ29nNUwyZzVZK3Y1THVsNllDYTZMK0g1YnlBNVpDdjVZV3o2SXFDNmFtczZMNis1cDJsNUwyLzU1U282YW1zNkw2KzZhbXg1WXFvNVlpYTVMMlQ1NXFFNXBlTDZMMnM0NENDWEc0Z0tpRG92YTdudTRUbGhiUG9pb0xtbUsva3VKUHBsNmprdUxybW5McmxpcWpvdmFibnNidmxub3ZvcnI3b3JxSG5tb1RqZ0lKY2JpQXFJRUJqYkdGemN5QlhhR1ZsYkVwdmFXNTBYRzRnS2lCQVpYaDBaVzVrY3lCS2IybHVkRnh1SUNvdlhHNTJZWElnVjJobFpXeEtiMmx1ZENBOUlHTmpMa05zWVhOektIdGNiaUFnSUNCdVlXMWxPaUFuWTJNdVYyaGxaV3hLYjJsdWRDY3NYRzRnSUNBZ1pYaDBaVzVrY3pvZ1kyTXVTbTlwYm5Rc1hHNGdJQ0FnWEc0Z0lDQWdaV1JwZEc5eU9pQkRRMTlGUkVsVVQxSWdKaVlnZTF4dUlDQWdJQ0FnSUNCcGJuTndaV04wYjNJNklDZHdZV05yWVdkbGN6b3ZMMmx1YzNCbFkzUnZjaTlwYm5Od1pXTjBiM0p6TDJOdmJYQnpMM0JvZVhOcFkzTXZhbTlwYm5RdWFuTW5MRnh1SUNBZ0lDQWdJQ0J0Wlc1MU9pQW5hVEU0YmpwTlFVbE9YMDFGVGxVdVkyOXRjRzl1Wlc1MExuQm9lWE5wWTNNdlNtOXBiblF2VjJobFpXd25MRnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQndjbTl3WlhKMGFXVnpPaUI3WEc0Z0lDQWdJQ0FnSUY5dFlYaE5iM1J2Y2xSdmNuRjFaVG9nTUN4Y2JpQWdJQ0FnSUNBZ1gyMXZkRzl5VTNCbFpXUTZJREFzWEc0Z0lDQWdJQ0FnSUY5bGJtRmliR1ZOYjNSdmNqb2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQmZabkpsY1hWbGJtTjVPaUF5TEZ4dUlDQWdJQ0FnSUNCZlpHRnRjR2x1WjFKaGRHbHZPaUF3TGpjc1hHNWNiaUFnSUNBZ0lDQWdMeW9xWEc0Z0lDQWdJQ0FnSUNBcUlDRWpaVzVjYmlBZ0lDQWdJQ0FnSUNvZ1ZHaGxJR3h2WTJGc0lHcHZhVzUwSUdGNGFYTWdjbVZzWVhScGRtVWdkRzhnY21sbmFXUmliMlI1TGx4dUlDQWdJQ0FnSUNBZ0tpQWhJM3BvWEc0Z0lDQWdJQ0FnSUNBcUlPYU1oK1d1bXVXSW11UzlrK1dQcitTN3BlZW51K1dLcU9lYWhPYVd1ZVdRa2VPQWdseHVJQ0FnSUNBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnZTFabFl6SjlJR3h2WTJGc1FYaHBjMEZjYmlBZ0lDQWdJQ0FnSUNvZ1FHUmxabUYxYkhRZ1kyTXVkaklvTVN3Z01DbGNiaUFnSUNBZ0lDQWdJQ292WEc0Z0lDQWdJQ0FnSUd4dlkyRnNRWGhwYzBFNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2SUdOakxuWXlLREVzSURBcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEc5dmJIUnBjRG9nUTBOZlJFVldJQ1ltSUNkcE1UaHVPa05QVFZCUFRrVk9WQzV3YUhsemFXTnpMbkJvZVhOcFkzTmZZMjlzYkdsa1pYSXViRzlqWVd4QmVHbHpRU2RjYmlBZ0lDQWdJQ0FnZlN4Y2JseHVJQ0FnSUNBZ0lDQXZLaXBjYmlBZ0lDQWdJQ0FnSUNvZ0lTTmxibHh1SUNBZ0lDQWdJQ0FnS2lCVWFHVWdiV0Y0YVhWdElIUnZjbkYxWlNCallXNGdZbVVnWVhCd2JHbGxaQ0IwYnlCeWFXZHBaR0p2WkhrZ2RHOGdjbVZoY21Ob0lIUm9aU0IwWVhKblpYUWdiVzkwYjNJZ2MzQmxaV1F1WEc0Z0lDQWdJQ0FnSUNBcUlDRWplbWhjYmlBZ0lDQWdJQ0FnSUNvZzVZK3Y1THVsNXBhOTVZcWc1WWl3NVlpYTVMMlQ1NXFFNXB5QTVhU241b210NTUrcDQ0Q0NYRzRnSUNBZ0lDQWdJQ0FxSUVCd2NtOXdaWEowZVNCN1RuVnRZbVZ5ZlNCdFlYaE5iM1J2Y2xSdmNuRjFaVnh1SUNBZ0lDQWdJQ0FnS2lCQVpHVm1ZWFZzZENBd1hHNGdJQ0FnSUNBZ0lDQXFMMXh1SUNBZ0lDQWdJQ0J0WVhoTmIzUnZjbFJ2Y25GMVpUb2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHOXZiSFJwY0RvZ1EwTmZSRVZXSUNZbUlDZHBNVGh1T2tOUFRWQlBUa1ZPVkM1d2FIbHphV056TG5Cb2VYTnBZM05mWTI5c2JHbGtaWEl1YldGNFRXOTBiM0pVYjNKeGRXVW5MQ0FnSUNBZ0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNBZ0lDQWdaMlYwT2lCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDIxaGVFMXZkRzl5Vkc5eWNYVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhObGREb2dablZ1WTNScGIyNGdLSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmJXRjRUVzkwYjNKVWIzSnhkV1VnUFNCMllXeDFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmYW05cGJuUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYW05cGJuUXVVMlYwVFdGNFRXOTBiM0pVYjNKeGRXVW9kbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTeGNibHh1SUNBZ0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBZ0lDb2dJU05sYmx4dUlDQWdJQ0FnSUNBZ0tpQlVhR1VnWlhod1pXTjBaV1FnYlc5MGIzSWdjM0JsWldRdVhHNGdJQ0FnSUNBZ0lDQXFJQ0VqZW1oY2JpQWdJQ0FnSUNBZ0lDb2c1cHlmNXB5YjU1cUU2YW1zNkw2KzZZQ2Y1YnFtNDRDQ1hHNGdJQ0FnSUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3VG5WdFltVnlmU0J0YjNSdmNsTndaV1ZrWEc0Z0lDQWdJQ0FnSUNBcUlFQmtaV1poZFd4MElEQmNiaUFnSUNBZ0lDQWdJQ292WEc0Z0lDQWdJQ0FnSUcxdmRHOXlVM0JsWldRNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSdmIyeDBhWEE2SUVORFgwUkZWaUFtSmlBbmFURTRianBEVDAxUVQwNUZUbFF1Y0doNWMybGpjeTV3YUhsemFXTnpYMk52Ykd4cFpHVnlMbTF2ZEc5eVUzQmxaV1FuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaMlYwT2lCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDIxdmRHOXlVM0JsWldRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjMlYwT2lCbWRXNWpkR2x2YmlBb2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl0YjNSdmNsTndaV1ZrSUQwZ2RtRnNkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDJwdmFXNTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJwdmFXNTBMbE5sZEUxdmRHOXlVM0JsWldRb2RtRnNkV1VnS2lCQlRrZE1SVjlVVDE5UVNGbFRTVU5UWDBGT1IweEZLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBzWEc1Y2JpQWdJQ0FnSUNBZ0x5b3FYRzRnSUNBZ0lDQWdJQ0FxSUNFalpXNWNiaUFnSUNBZ0lDQWdJQ29nUlc1aFlteGxJR3B2YVc1MElHMXZkRzl5UDF4dUlDQWdJQ0FnSUNBZ0tpQWhJM3BvWEc0Z0lDQWdJQ0FnSUNBcUlPYVlyK1dRcHVXOGdPV1FyK1dGcytpS2d1bXByT2krdnUrOG4xeHVJQ0FnSUNBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnZTBKdmIyeGxZVzU5SUdWdVlXSnNaVTF2ZEc5eVhHNGdJQ0FnSUNBZ0lDQXFJRUJrWldaaGRXeDBJR1poYkhObFhHNGdJQ0FnSUNBZ0lDQXFMMXh1SUNBZ0lDQWdJQ0JsYm1GaWJHVk5iM1J2Y2pvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEc5dmJIUnBjRG9nUTBOZlJFVldJQ1ltSUNkcE1UaHVPa05QVFZCUFRrVk9WQzV3YUhsemFXTnpMbkJvZVhOcFkzTmZZMjlzYkdsa1pYSXVaVzVoWW14bFRXOTBiM0luTENBZ0lDQWdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQWdJQ0FnWjJWME9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyVnVZV0pzWlUxdmRHOXlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhObGREb2dablZ1WTNScGIyNGdLSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlpXNWhZbXhsVFc5MGIzSWdQU0IyWVd4MVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZhbTlwYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZhbTlwYm5RdVJXNWhZbXhsVFc5MGIzSW9kbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTeGNibHh1SUNBZ0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBZ0lDb2dJU05sYmx4dUlDQWdJQ0FnSUNBZ0tpQlVhR1VnYzNCeWFXNW5JR1p5WlhGMVpXNWplUzVjYmlBZ0lDQWdJQ0FnSUNvZ0lTTjZhRnh1SUNBZ0lDQWdJQ0FnS2lEbHZMbm1nS2Zuczd2bWxiRGpnSUpjYmlBZ0lDQWdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIdE9kVzFpWlhKOUlHWnlaWEYxWlc1amVWeHVJQ0FnSUNBZ0lDQWdLaUJBWkdWbVlYVnNkQ0F3WEc0Z0lDQWdJQ0FnSUNBcUwxeHVJQ0FnSUNBZ0lDQm1jbVZ4ZFdWdVkzazZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnZiMngwYVhBNklFTkRYMFJGVmlBbUppQW5hVEU0YmpwRFQwMVFUMDVGVGxRdWNHaDVjMmxqY3k1d2FIbHphV056WDJOdmJHeHBaR1Z5TG1aeVpYRjFaVzVqZVNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JuWlhRNklHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlpuSmxjWFZsYm1ONU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sZERvZ1puVnVZM1JwYjI0Z0tIWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWm5KbGNYVmxibU41SUQwZ2RtRnNkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDJwdmFXNTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJwdmFXNTBMbE5sZEVaeVpYRjFaVzVqZVNoMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5TEZ4dVhHNGdJQ0FnSUNBZ0lDOHFLbHh1SUNBZ0lDQWdJQ0FnS2lBaEkyVnVYRzRnSUNBZ0lDQWdJQ0FxSUZSb1pTQmtZVzF3YVc1bklISmhkR2x2TGx4dUlDQWdJQ0FnSUNBZ0tpQWhJM3BvWEc0Z0lDQWdJQ0FnSUNBcUlPbVl1K1d3dk8rOGpPaWhxT2VrdXVXRnMraUtndVdQbU9XOW91V1FqdSs4ak9hQm91V2tqZVdJc09XSW5lV25pK2VLdHVhQWdlV1BsK1dJc09lYWhPbVl1K1dLbStPQWdseHVJQ0FnSUNBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnZTA1MWJXSmxjbjBnWkdGdGNHbHVaMUpoZEdsdlhHNGdJQ0FnSUNBZ0lDQXFJRUJrWldaaGRXeDBJREJjYmlBZ0lDQWdJQ0FnSUNvdlhHNGdJQ0FnSUNBZ0lHUmhiWEJwYm1kU1lYUnBiem9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkRzl2YkhScGNEb2dRME5mUkVWV0lDWW1JQ2RwTVRodU9rTlBUVkJQVGtWT1ZDNXdhSGx6YVdOekxuQm9lWE5wWTNOZlkyOXNiR2xrWlhJdVpHRnRjR2x1WjFKaGRHbHZKeXdnSUNBZ0lDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ0lDQWdJR2RsZERvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5a1lXMXdhVzVuVW1GMGFXODdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWME9pQm1kVzVqZEdsdmJpQW9kbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5a1lXMXdhVzVuVW1GMGFXOGdQU0IyWVd4MVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZhbTlwYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZhbTlwYm5RdVUyVjBSR0Z0Y0dsdVoxSmhkR2x2S0haaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdYMk55WldGMFpVcHZhVzUwUkdWbU9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmtaV1lnUFNCdVpYY2dZakl1VjJobFpXeEtiMmx1ZEVSbFppZ3BPMXh1SUNBZ0lDQWdJQ0JrWldZdWJHOWpZV3hCYm1Ob2IzSkJJRDBnYm1WM0lHSXlMbFpsWXpJb2RHaHBjeTVoYm1Ob2IzSXVlQzlRVkUxZlVrRlVTVThzSUhSb2FYTXVZVzVqYUc5eUxua3ZVRlJOWDFKQlZFbFBLVHRjYmlBZ0lDQWdJQ0FnWkdWbUxteHZZMkZzUVc1amFHOXlRaUE5SUc1bGR5QmlNaTVXWldNeUtIUm9hWE11WTI5dWJtVmpkR1ZrUVc1amFHOXlMbmd2VUZSTlgxSkJWRWxQTENCMGFHbHpMbU52Ym01bFkzUmxaRUZ1WTJodmNpNTVMMUJVVFY5U1FWUkpUeWs3WEc0Z0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNCa1pXWXViRzlqWVd4QmVHbHpRU0E5SUc1bGR5QmlNaTVXWldNeUtIUm9hWE11Ykc5allXeEJlR2x6UVM1NExDQjBhR2x6TG14dlkyRnNRWGhwYzBFdWVTazdYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0JrWldZdWJXRjRUVzkwYjNKVWIzSnhkV1VnUFNCMGFHbHpMbTFoZUUxdmRHOXlWRzl5Y1hWbE8xeHVJQ0FnSUNBZ0lDQmtaV1l1Ylc5MGIzSlRjR1ZsWkNBOUlIUm9hWE11Ylc5MGIzSlRjR1ZsWkNBcUlFRk9SMHhGWDFSUFgxQklXVk5KUTFOZlFVNUhURVU3WEc0Z0lDQWdJQ0FnSUdSbFppNWxibUZpYkdWTmIzUnZjaUE5SUhSb2FYTXVaVzVoWW14bFRXOTBiM0k3WEc1Y2JpQWdJQ0FnSUNBZ1pHVm1MbVJoYlhCcGJtZFNZWFJwYnlBOUlIUm9hWE11WkdGdGNHbHVaMUpoZEdsdk8xeHVJQ0FnSUNBZ0lDQmtaV1l1Wm5KbGNYVmxibU41U0hvZ1BTQjBhR2x6TG1aeVpYRjFaVzVqZVR0Y2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1pHVm1PMXh1SUNBZ0lIMWNibjBwTzF4dVhHNWpZeTVYYUdWbGJFcHZhVzUwSUQwZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCWGFHVmxiRXB2YVc1ME8xeHVJbDE5Il19