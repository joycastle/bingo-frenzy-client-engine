(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/physics/joint/CCRopeJoint.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var PTM_RATIO = require('../CCPhysicsTypes').PTM_RATIO;
        var RopeJoint = cc.Class({
            name: 'cc.RopeJoint',
            extends: cc.Joint,
            editor: CC_EDITOR && {
                inspector: 'packages://inspector/inspectors/comps/physics/joint.js',
                menu: 'i18n:MAIN_MENU.component.physics/Joint/Rope'
            },
            properties: {
                _maxLength: 1,
                maxLength: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.maxLength',
                    get: function get() {
                        return this._maxLength;
                    },
                    set: function set(value) {
                        this._maxLength = value;
                        if (this._joint) {
                            this._joint.SetMaxLength(value);
                        }
                    }
                }
            },
            _createJointDef: function _createJointDef() {
                var def = new b2.RopeJointDef();
                def.localAnchorA = new b2.Vec2(this.anchor.x / PTM_RATIO, this.anchor.y / PTM_RATIO);
                def.localAnchorB = new b2.Vec2(this.connectedAnchor.x / PTM_RATIO, this.connectedAnchor.y / PTM_RATIO);
                def.maxLength = this.maxLength / PTM_RATIO;
                return def;
            }
        });
        cc.RopeJoint = module.exports = RopeJoint;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,