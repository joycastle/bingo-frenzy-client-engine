(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/physics/joint/CCJoint.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var PTM_RATIO = require('../CCPhysicsTypes').PTM_RATIO;
        var Joint = cc.Class({
            name: 'cc.Joint',
            extends: cc.Component,
            editor: { requireComponent: cc.RigidBody },
            properties: {
                anchor: {
                    default: cc.v2(0, 0),
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.anchor'
                },
                connectedAnchor: {
                    default: cc.v2(0, 0),
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.connectedAnchor'
                },
                connectedBody: {
                    default: null,
                    type: cc.RigidBody,
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.connectedBody'
                },
                collideConnected: {
                    default: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.collideConnected'
                }
            },
            onDisable: function onDisable() {
                this._destroy();
            },
            onEnable: function onEnable() {
                this._init();
            },
            start: function start() {
                this._init();
            },
            apply: function apply() {
                this._destroy();
                this._init();
            },
            getWorldAnchor: function getWorldAnchor() {
                if (this._joint) {
                    var anchor = this._joint.GetAnchorA();
                    return cc.v2(anchor.x * PTM_RATIO, anchor.y * PTM_RATIO);
                }
                return cc.Vec2.ZERO;
            },
            getWorldConnectedAnchor: function getWorldConnectedAnchor() {
                if (this._joint) {
                    var anchor = this._joint.GetAnchorB();
                    return cc.v2(anchor.x * PTM_RATIO, anchor.y * PTM_RATIO);
                }
                return cc.Vec2.ZERO;
            },
            getReactionForce: function getReactionForce(timeStep) {
                var out = cc.v2();
                if (this._joint) {
                    return this._joint.GetReactionForce(timeStep, out);
                }
                return out;
            },
            getReactionTorque: function getReactionTorque(timeStep) {
                if (this._joint) {
                    return this._joint.GetReactionTorque(timeStep);
                }
                return 0;
            },
            _init: function _init() {
                cc.director.getPhysicsManager().pushDelayEvent(this, '__init', []);
            },
            _destroy: function _destroy() {
                cc.director.getPhysicsManager().pushDelayEvent(this, '__destroy', []);
            },
            __init: function __init() {
                if (this._inited)
                    return;
                this.body = this.getComponent(cc.RigidBody);
                if (this._isValid()) {
                    var def = this._createJointDef();
                    if (!def)
                        return;
                    def.bodyA = this.body._getBody();
                    def.bodyB = this.connectedBody._getBody();
                    def.collideConnected = this.collideConnected;
                    cc.director.getPhysicsManager()._addJoint(this, def);
                    this._inited = true;
                }
            },
            __destroy: function __destroy() {
                if (!this._inited)
                    return;
                cc.director.getPhysicsManager()._removeJoint(this);
                this._joint = null;
                this._inited = false;
            },
            _createJointDef: function _createJointDef() {
                return null;
            },
            _isValid: function _isValid() {
                return this.body && this.body._getBody() && this.connectedBody && this.connectedBody._getBody();
            }
        });
        cc.Joint = module.exports = Joint;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,