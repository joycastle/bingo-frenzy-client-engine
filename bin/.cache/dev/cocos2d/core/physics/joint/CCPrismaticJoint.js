(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/physics/joint/CCPrismaticJoint.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var PTM_RATIO = require('../CCPhysicsTypes').PTM_RATIO;
        var ANGLE_TO_PHYSICS_ANGLE = require('../CCPhysicsTypes').ANGLE_TO_PHYSICS_ANGLE;
        var PrismaticJoint = cc.Class({
            name: 'cc.PrismaticJoint',
            extends: cc.Joint,
            editor: CC_EDITOR && {
                inspector: 'packages://inspector/inspectors/comps/physics/joint.js',
                menu: 'i18n:MAIN_MENU.component.physics/Joint/PrismaticJoint'
            },
            properties: {
                localAxisA: {
                    default: cc.v2(1, 0),
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.localAxisA'
                },
                referenceAngle: {
                    default: 0,
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.referenceAngle'
                },
                enableLimit: {
                    default: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.enableLimit'
                },
                enableMotor: {
                    default: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.enableMotor'
                },
                lowerLimit: {
                    default: 0,
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.lowerLimit'
                },
                upperLimit: {
                    default: 0,
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.upperLimit'
                },
                _maxMotorForce: 0,
                _motorSpeed: 0,
                maxMotorForce: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.maxMotorForce',
                    get: function get() {
                        return this._maxMotorForce;
                    },
                    set: function set(value) {
                        this._maxMotorForce = value;
                        if (this._joint) {
                            this._joint.SetMaxMotorForce(value);
                        }
                    }
                },
                motorSpeed: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.motorSpeed',
                    get: function get() {
                        return this._motorSpeed;
                    },
                    set: function set(value) {
                        this._motorSpeed = value;
                        if (this._joint) {
                            this._joint.SetMotorSpeed(value);
                        }
                    }
                }
            },
            _createJointDef: function _createJointDef() {
                var def = new b2.PrismaticJointDef();
                def.localAnchorA = new b2.Vec2(this.anchor.x / PTM_RATIO, this.anchor.y / PTM_RATIO);
                def.localAnchorB = new b2.Vec2(this.connectedAnchor.x / PTM_RATIO, this.connectedAnchor.y / PTM_RATIO);
                def.localAxisA = new b2.Vec2(this.localAxisA.x, this.localAxisA.y);
                def.referenceAngle = this.referenceAngle * ANGLE_TO_PHYSICS_ANGLE;
                def.enableLimit = this.enableLimit;
                def.lowerTranslation = this.lowerLimit / PTM_RATIO;
                def.upperTranslation = this.upperLimit / PTM_RATIO;
                def.enableMotor = this.enableMotor;
                def.maxMotorForce = this.maxMotorForce;
                def.motorSpeed = this.motorSpeed;
                return def;
            }
        });
        cc.PrismaticJoint = module.exports = PrismaticJoint;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,