(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/physics/joint/CCMouseJoint.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var PTM_RATIO = require('../CCPhysicsTypes').PTM_RATIO;
        var tempB2Vec2 = new b2.Vec2();
        var MouseJoint = cc.Class({
            name: 'cc.MouseJoint',
            extends: cc.Joint,
            editor: CC_EDITOR && {
                inspector: 'packages://inspector/inspectors/comps/physics/joint.js',
                menu: 'i18n:MAIN_MENU.component.physics/Joint/Mouse'
            },
            properties: {
                _target: 1,
                _frequency: 5,
                _dampingRatio: 0.7,
                _maxForce: 0,
                connectedBody: {
                    default: null,
                    type: cc.RigidBody,
                    visible: false,
                    override: true
                },
                collideConnected: {
                    default: true,
                    visible: false,
                    override: true
                },
                anchor: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.anchor',
                    default: cc.v2(0, 0),
                    override: true,
                    visible: false
                },
                connectedAnchor: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.connectedAnchor',
                    default: cc.v2(0, 0),
                    override: true,
                    visible: false
                },
                mouseRegion: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.mouseRegion',
                    default: null,
                    type: cc.Node
                },
                target: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.target',
                    visible: false,
                    get: function get() {
                        return this._target;
                    },
                    set: function set(value) {
                        this._target = value;
                        if (this._joint) {
                            tempB2Vec2.x = value.x / PTM_RATIO;
                            tempB2Vec2.y = value.y / PTM_RATIO;
                            this._joint.SetTarget(tempB2Vec2);
                        }
                    }
                },
                frequency: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.frequency',
                    get: function get() {
                        return this._frequency;
                    },
                    set: function set(value) {
                        this._frequency = value;
                        if (this._joint) {
                            this._joint.SetFrequency(value);
                        }
                    }
                },
                dampingRatio: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.dampingRatio',
                    get: function get() {
                        return this._dampingRatio;
                    },
                    set: function set(value) {
                        this._dampingRatio = value;
                        if (this._joint) {
                            this._joint.SetDampingRatio(value);
                        }
                    }
                },
                maxForce: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.maxForce',
                    visible: false,
                    get: function get() {
                        return this._maxForce;
                    },
                    set: function set(value) {
                        this._maxForce = value;
                        if (this._joint) {
                            this._joint.SetMaxForce(value);
                        }
                    }
                }
            },
            onLoad: function onLoad() {
                var mouseRegion = this.mouseRegion || this.node;
                mouseRegion.on(cc.Node.EventType.TOUCH_START, this.onTouchBegan, this);
                mouseRegion.on(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove, this);
                mouseRegion.on(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);
                mouseRegion.on(cc.Node.EventType.TOUCH_CANCEL, this.onTouchEnd, this);
            },
            onEnable: function onEnable() {
            },
            start: function start() {
            },
            onTouchBegan: function onTouchBegan(event) {
                var manager = cc.director.getPhysicsManager();
                var target = this._pressPoint = event.touch.getLocation();
                if (cc.Camera && cc.Camera.main) {
                    target = cc.Camera.main.getScreenToWorldPoint(target);
                }
                var collider = manager.testPoint(target);
                if (!collider)
                    return;
                var body = this.connectedBody = collider.body;
                body.awake = true;
                this.maxForce = 1000 * this.connectedBody.getMass();
                this.target = target;
                this._init();
            },
            onTouchMove: function onTouchMove(event) {
                this._pressPoint = event.touch.getLocation();
            },
            onTouchEnd: function onTouchEnd(event) {
                this._destroy();
                this._pressPoint = null;
            },
            _createJointDef: function _createJointDef() {
                var def = new b2.MouseJointDef();
                tempB2Vec2.x = this.target.x / PTM_RATIO;
                tempB2Vec2.y = this.target.y / PTM_RATIO;
                def.target = tempB2Vec2;
                def.maxForce = this.maxForce;
                def.dampingRatio = this.dampingRatio;
                def.frequencyHz = this.frequency;
                return def;
            },
            update: function update() {
                if (!this._pressPoint || !this._isValid()) {
                    return;
                }
                var camera = cc.Camera.findCamera(this.node);
                if (camera) {
                    this.target = camera.getScreenToWorldPoint(this._pressPoint);
                } else {
                    this.target = this._pressPoint;
                }
            }
        });
        cc.MouseJoint = module.exports = MouseJoint;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,