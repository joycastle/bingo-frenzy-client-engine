(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/physics/joint/CCMotorJoint.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var PTM_RATIO = require('../CCPhysicsTypes').PTM_RATIO;
        var ANGLE_TO_PHYSICS_ANGLE = require('../CCPhysicsTypes').ANGLE_TO_PHYSICS_ANGLE;
        var MotorJoint = cc.Class({
            name: 'cc.MotorJoint',
            extends: cc.Joint,
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.physics/Joint/Motor',
                inspector: 'packages://inspector/inspectors/comps/physics/joint.js'
            },
            properties: {
                _linearOffset: cc.v2(0, 0),
                _angularOffset: 0,
                _maxForce: 1,
                _maxTorque: 1,
                _correctionFactor: 0.3,
                anchor: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.anchor',
                    default: cc.v2(0, 0),
                    override: true,
                    visible: false
                },
                connectedAnchor: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.connectedAnchor',
                    default: cc.v2(0, 0),
                    override: true,
                    visible: false
                },
                linearOffset: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.linearOffset',
                    get: function get() {
                        return this._linearOffset;
                    },
                    set: function set(value) {
                        this._linearOffset = value;
                        if (this._joint) {
                            this._joint.SetLinearOffset(new b2.Vec2(value.x / PTM_RATIO, value.y / PTM_RATIO));
                        }
                    }
                },
                angularOffset: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.angularOffset',
                    get: function get() {
                        return this._angularOffset;
                    },
                    set: function set(value) {
                        this._angularOffset = value;
                        if (this._joint) {
                            this._joint.SetAngularOffset(value);
                        }
                    }
                },
                maxForce: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.maxForce',
                    get: function get() {
                        return this._maxForce;
                    },
                    set: function set(value) {
                        this._maxForce = value;
                        if (this._joint) {
                            this._joint.SetMaxForce(value);
                        }
                    }
                },
                maxTorque: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.maxTorque',
                    get: function get() {
                        return this._maxTorque;
                    },
                    set: function set(value) {
                        this._maxTorque = value;
                        if (this._joint) {
                            this._joint.SetMaxTorque(value);
                        }
                    }
                },
                correctionFactor: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.correctionFactor',
                    get: function get() {
                        return this._correctionFactor;
                    },
                    set: function set(value) {
                        this._correctionFactor = value;
                        if (this._joint) {
                            this._joint.SetCorrectionFactor(value);
                        }
                    }
                }
            },
            _createJointDef: function _createJointDef() {
                var def = new b2.MotorJointDef();
                def.linearOffset = new b2.Vec2(this.linearOffset.x / PTM_RATIO, this.linearOffset.y / PTM_RATIO);
                def.angularOffset = this.angularOffset * ANGLE_TO_PHYSICS_ANGLE;
                def.maxForce = this.maxForce;
                def.maxTorque = this.maxTorque;
                def.correctionFactor = this.correctionFactor;
                return def;
            }
        });
        cc.MotorJoint = module.exports = MotorJoint;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,