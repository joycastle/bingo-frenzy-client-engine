(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/physics/CCRigidBody.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var NodeEvent = require('../CCNode').EventType;
        var PTM_RATIO = require('./CCPhysicsTypes').PTM_RATIO;
        var ANGLE_TO_PHYSICS_ANGLE = require('./CCPhysicsTypes').ANGLE_TO_PHYSICS_ANGLE;
        var PHYSICS_ANGLE_TO_ANGLE = require('./CCPhysicsTypes').PHYSICS_ANGLE_TO_ANGLE;
        var getWorldRotation = require('./utils').getWorldRotation;
        var BodyType = require('./CCPhysicsTypes').BodyType;
        var tempb2Vec21 = new b2.Vec2();
        var tempb2Vec22 = new b2.Vec2();
        var VEC2_ZERO = cc.Vec2.ZERO;
        var RigidBody = cc.Class({
            name: 'cc.RigidBody',
            extends: cc.Component,
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.physics/Rigid Body',
                disallowMultiple: true
            },
            properties: {
                _type: BodyType.Dynamic,
                _allowSleep: true,
                _gravityScale: 1,
                _linearDamping: 0,
                _angularDamping: 0,
                _linearVelocity: cc.v2(0, 0),
                _angularVelocity: 0,
                _fixedRotation: false,
                enabled: {
                    get: function get() {
                        return this._enabled;
                    },
                    set: function set() {
                        cc.warnID(8200);
                    },
                    visible: false,
                    override: true
                },
                enabledContactListener: {
                    default: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.rigidbody.enabledContactListener'
                },
                bullet: {
                    default: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.rigidbody.bullet'
                },
                type: {
                    type: BodyType,
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.rigidbody.type',
                    get: function get() {
                        return this._type;
                    },
                    set: function set(value) {
                        this._type = value;
                        if (this._b2Body) {
                            if (value === BodyType.Animated) {
                                this._b2Body.SetType(BodyType.Kinematic);
                            } else {
                                this._b2Body.SetType(value);
                            }
                        }
                    }
                },
                allowSleep: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.rigidbody.allowSleep',
                    get: function get() {
                        if (this._b2Body) {
                            return this._b2Body.IsSleepingAllowed();
                        }
                        return this._allowSleep;
                    },
                    set: function set(value) {
                        this._allowSleep = value;
                        if (this._b2Body) {
                            this._b2Body.SetSleepingAllowed(value);
                        }
                    }
                },
                gravityScale: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.rigidbody.gravityScale',
                    get: function get() {
                        return this._gravityScale;
                    },
                    set: function set(value) {
                        this._gravityScale = value;
                        if (this._b2Body) {
                            this._b2Body.SetGravityScale(value);
                        }
                    }
                },
                linearDamping: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.rigidbody.linearDamping',
                    get: function get() {
                        return this._linearDamping;
                    },
                    set: function set(value) {
                        this._linearDamping = value;
                        if (this._b2Body) {
                            this._b2Body.SetLinearDamping(this._linearDamping);
                        }
                    }
                },
                angularDamping: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.rigidbody.angularDamping',
                    get: function get() {
                        return this._angularDamping;
                    },
                    set: function set(value) {
                        this._angularDamping = value;
                        if (this._b2Body) {
                            this._b2Body.SetAngularDamping(value);
                        }
                    }
                },
                linearVelocity: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.rigidbody.linearVelocity',
                    type: cc.Vec2,
                    get: function get() {
                        var lv = this._linearVelocity;
                        if (this._b2Body) {
                            var velocity = this._b2Body.GetLinearVelocity();
                            lv.x = velocity.x * PTM_RATIO;
                            lv.y = velocity.y * PTM_RATIO;
                        }
                        return lv;
                    },
                    set: function set(value) {
                        this._linearVelocity = value;
                        var b2body = this._b2Body;
                        if (b2body) {
                            var temp = b2body.m_linearVelocity;
                            temp.Set(value.x / PTM_RATIO, value.y / PTM_RATIO);
                            b2body.SetLinearVelocity(temp);
                        }
                    }
                },
                angularVelocity: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.rigidbody.angularVelocity',
                    get: function get() {
                        if (this._b2Body) {
                            return this._b2Body.GetAngularVelocity() * PHYSICS_ANGLE_TO_ANGLE;
                        }
                        return this._angularVelocity;
                    },
                    set: function set(value) {
                        this._angularVelocity = value;
                        if (this._b2Body) {
                            this._b2Body.SetAngularVelocity(value * ANGLE_TO_PHYSICS_ANGLE);
                        }
                    }
                },
                fixedRotation: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.rigidbody.fixedRotation',
                    get: function get() {
                        return this._fixedRotation;
                    },
                    set: function set(value) {
                        this._fixedRotation = value;
                        if (this._b2Body) {
                            this._b2Body.SetFixedRotation(value);
                        }
                    }
                },
                awake: {
                    visible: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.rigidbody.awake',
                    get: function get() {
                        return this._b2Body ? this._b2Body.IsAwake() : false;
                    },
                    set: function set(value) {
                        if (this._b2Body) {
                            this._b2Body.SetAwake(value);
                        }
                    }
                },
                awakeOnLoad: {
                    default: true,
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.rigidbody.awakeOnLoad',
                    animatable: false
                },
                active: {
                    visible: false,
                    get: function get() {
                        return this._b2Body ? this._b2Body.IsActive() : false;
                    },
                    set: function set(value) {
                        if (this._b2Body) {
                            this._b2Body.SetActive(value);
                        }
                    }
                }
            },
            getLocalPoint: function getLocalPoint(worldPoint, out) {
                out = out || cc.v2();
                if (this._b2Body) {
                    tempb2Vec21.Set(worldPoint.x / PTM_RATIO, worldPoint.y / PTM_RATIO);
                    var pos = this._b2Body.GetLocalPoint(tempb2Vec21, out);
                    out.x = pos.x * PTM_RATIO;
                    out.y = pos.y * PTM_RATIO;
                }
                return out;
            },
            getWorldPoint: function getWorldPoint(localPoint, out) {
                out = out || cc.v2();
                if (this._b2Body) {
                    tempb2Vec21.Set(localPoint.x / PTM_RATIO, localPoint.y / PTM_RATIO);
                    var pos = this._b2Body.GetWorldPoint(tempb2Vec21, out);
                    out.x = pos.x * PTM_RATIO;
                    out.y = pos.y * PTM_RATIO;
                }
                return out;
            },
            getWorldVector: function getWorldVector(localVector, out) {
                out = out || cc.v2();
                if (this._b2Body) {
                    tempb2Vec21.Set(localVector.x / PTM_RATIO, localVector.y / PTM_RATIO);
                    var vector = this._b2Body.GetWorldVector(tempb2Vec21, out);
                    out.x = vector.x * PTM_RATIO;
                    out.y = vector.y * PTM_RATIO;
                }
                return out;
            },
            getLocalVector: function getLocalVector(worldVector, out) {
                out = out || cc.v2();
                if (this._b2Body) {
                    tempb2Vec21.Set(worldVector.x / PTM_RATIO, worldVector.y / PTM_RATIO);
                    var vector = this._b2Body.GetLocalVector(tempb2Vec21, out);
                    out.x = vector.x * PTM_RATIO;
                    out.y = vector.y * PTM_RATIO;
                }
                return out;
            },
            getWorldPosition: function getWorldPosition(out) {
                out = out || cc.v2();
                if (this._b2Body) {
                    var pos = this._b2Body.GetPosition();
                    out.x = pos.x * PTM_RATIO;
                    out.y = pos.y * PTM_RATIO;
                }
                return out;
            },
            getWorldRotation: function getWorldRotation() {
                if (this._b2Body) {
                    return this._b2Body.GetAngle() * PHYSICS_ANGLE_TO_ANGLE;
                }
                return 0;
            },
            getLocalCenter: function getLocalCenter(out) {
                out = out || cc.v2();
                if (this._b2Body) {
                    var pos = this._b2Body.GetLocalCenter();
                    out.x = pos.x * PTM_RATIO;
                    out.y = pos.y * PTM_RATIO;
                }
                return out;
            },
            getWorldCenter: function getWorldCenter(out) {
                out = out || cc.v2();
                if (this._b2Body) {
                    var pos = this._b2Body.GetWorldCenter();
                    out.x = pos.x * PTM_RATIO;
                    out.y = pos.y * PTM_RATIO;
                }
                return out;
            },
            getLinearVelocityFromWorldPoint: function getLinearVelocityFromWorldPoint(worldPoint, out) {
                out = out || cc.v2();
                if (this._b2Body) {
                    tempb2Vec21.Set(worldPoint.x / PTM_RATIO, worldPoint.y / PTM_RATIO);
                    var velocity = this._b2Body.GetLinearVelocityFromWorldPoint(tempb2Vec21, out);
                    out.x = velocity.x * PTM_RATIO;
                    out.y = velocity.y * PTM_RATIO;
                }
                return out;
            },
            getMass: function getMass() {
                return this._b2Body ? this._b2Body.GetMass() : 0;
            },
            getInertia: function getInertia() {
                return this._b2Body ? this._b2Body.GetInertia() * PTM_RATIO * PTM_RATIO : 0;
            },
            getJointList: function getJointList() {
                if (!this._b2Body)
                    return [];
                var joints = [];
                var list = this._b2Body.GetJointList();
                if (!list)
                    return [];
                joints.push(list.joint._joint);
                var prev = list.prev;
                while (prev) {
                    joints.push(prev.joint._joint);
                    prev = prev.prev;
                }
                var next = list.next;
                while (next) {
                    joints.push(next.joint._joint);
                    next = next.next;
                }
                return joints;
            },
            applyForce: function applyForce(force, point, wake) {
                if (this._b2Body) {
                    tempb2Vec21.Set(force.x / PTM_RATIO, force.y / PTM_RATIO);
                    tempb2Vec22.Set(point.x / PTM_RATIO, point.y / PTM_RATIO);
                    this._b2Body.ApplyForce(tempb2Vec21, tempb2Vec22, wake);
                }
            },
            applyForceToCenter: function applyForceToCenter(force, wake) {
                if (this._b2Body) {
                    tempb2Vec21.Set(force.x / PTM_RATIO, force.y / PTM_RATIO);
                    this._b2Body.ApplyForceToCenter(tempb2Vec21, wake);
                }
            },
            applyTorque: function applyTorque(torque, wake) {
                if (this._b2Body) {
                    this._b2Body.ApplyTorque(torque / PTM_RATIO, wake);
                }
            },
            applyLinearImpulse: function applyLinearImpulse(impulse, point, wake) {
                if (this._b2Body) {
                    tempb2Vec21.Set(impulse.x / PTM_RATIO, impulse.y / PTM_RATIO);
                    tempb2Vec22.Set(point.x / PTM_RATIO, point.y / PTM_RATIO);
                    this._b2Body.ApplyLinearImpulse(tempb2Vec21, tempb2Vec22, wake);
                }
            },
            applyAngularImpulse: function applyAngularImpulse(impulse, wake) {
                if (this._b2Body) {
                    this._b2Body.ApplyAngularImpulse(impulse / PTM_RATIO / PTM_RATIO, wake);
                }
            },
            syncPosition: function syncPosition(enableAnimated) {
                var b2body = this._b2Body;
                if (!b2body)
                    return;
                var pos = this.node.convertToWorldSpaceAR(VEC2_ZERO);
                var temp;
                if (this.type === BodyType.Animated) {
                    temp = b2body.GetLinearVelocity();
                } else {
                    temp = b2body.GetPosition();
                }
                temp.x = pos.x / PTM_RATIO;
                temp.y = pos.y / PTM_RATIO;
                if (this.type === BodyType.Animated && enableAnimated) {
                    var b2Pos = b2body.GetPosition();
                    var timeStep = cc.game.config['frameRate'];
                    temp.x = (temp.x - b2Pos.x) * timeStep;
                    temp.y = (temp.y - b2Pos.y) * timeStep;
                    b2body.SetAwake(true);
                    b2body.SetLinearVelocity(temp);
                } else {
                    b2body.SetTransformVec(temp, b2body.GetAngle());
                }
            },
            syncRotation: function syncRotation(enableAnimated) {
                var b2body = this._b2Body;
                if (!b2body)
                    return;
                var rotation = ANGLE_TO_PHYSICS_ANGLE * getWorldRotation(this.node);
                if (this.type === BodyType.Animated && enableAnimated) {
                    var b2Rotation = b2body.GetAngle();
                    var timeStep = cc.game.config['frameRate'];
                    b2body.SetAwake(true);
                    b2body.SetAngularVelocity((rotation - b2Rotation) * timeStep);
                } else {
                    b2body.SetTransformVec(b2body.GetPosition(), rotation);
                }
            },
            resetVelocity: function resetVelocity() {
                var b2body = this._b2Body;
                if (!b2body)
                    return;
                var temp = b2body.m_linearVelocity;
                temp.Set(0, 0);
                b2body.SetLinearVelocity(temp);
                b2body.SetAngularVelocity(0);
            },
            onEnable: function onEnable() {
                this._init();
            },
            onDisable: function onDisable() {
                this._destroy();
            },
            _registerNodeEvents: function _registerNodeEvents() {
                var node = this.node;
                node.on(NodeEvent.POSITION_CHANGED, this._onNodePositionChanged, this);
                node.on(NodeEvent.ROTATION_CHANGED, this._onNodeRotationChanged, this);
                node.on(NodeEvent.SCALE_CHANGED, this._onNodeScaleChanged, this);
            },
            _unregisterNodeEvents: function _unregisterNodeEvents() {
                var node = this.node;
                node.off(NodeEvent.POSITION_CHANGED, this._onNodePositionChanged, this);
                node.off(NodeEvent.ROTATION_CHANGED, this._onNodeRotationChanged, this);
                node.off(NodeEvent.SCALE_CHANGED, this._onNodeScaleChanged, this);
            },
            _onNodePositionChanged: function _onNodePositionChanged() {
                this.syncPosition(true);
            },
            _onNodeRotationChanged: function _onNodeRotationChanged(event) {
                this.syncRotation(true);
            },
            _onNodeScaleChanged: function _onNodeScaleChanged(event) {
                if (this._b2Body) {
                    var colliders = this.getComponents(cc.PhysicsCollider);
                    for (var i = 0; i < colliders.length; i++) {
                        colliders[i].apply();
                    }
                }
            },
            _init: function _init() {
                cc.director.getPhysicsManager().pushDelayEvent(this, '__init', []);
            },
            _destroy: function _destroy() {
                cc.director.getPhysicsManager().pushDelayEvent(this, '__destroy', []);
            },
            __init: function __init() {
                if (this._inited)
                    return;
                this._registerNodeEvents();
                var bodyDef = new b2.BodyDef();
                if (this.type === BodyType.Animated) {
                    bodyDef.type = BodyType.Kinematic;
                } else {
                    bodyDef.type = this.type;
                }
                bodyDef.allowSleep = this.allowSleep;
                bodyDef.gravityScale = this.gravityScale;
                bodyDef.linearDamping = this.linearDamping;
                bodyDef.angularDamping = this.angularDamping;
                var linearVelocity = this.linearVelocity;
                bodyDef.linearVelocity = new b2.Vec2(linearVelocity.x / PTM_RATIO, linearVelocity.y / PTM_RATIO);
                bodyDef.angularVelocity = this.angularVelocity * ANGLE_TO_PHYSICS_ANGLE;
                bodyDef.fixedRotation = this.fixedRotation;
                bodyDef.bullet = this.bullet;
                var node = this.node;
                var pos = node.convertToWorldSpaceAR(VEC2_ZERO);
                bodyDef.position = new b2.Vec2(pos.x / PTM_RATIO, pos.y / PTM_RATIO);
                bodyDef.angle = -(Math.PI / 180) * getWorldRotation(node);
                bodyDef.awake = this.awakeOnLoad;
                cc.director.getPhysicsManager()._addBody(this, bodyDef);
                this._inited = true;
            },
            __destroy: function __destroy() {
                if (!this._inited)
                    return;
                cc.director.getPhysicsManager()._removeBody(this);
                this._unregisterNodeEvents();
                this._inited = false;
            },
            _getBody: function _getBody() {
                return this._b2Body;
            }
        });
        cc.RigidBody = module.exports = RigidBody;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,