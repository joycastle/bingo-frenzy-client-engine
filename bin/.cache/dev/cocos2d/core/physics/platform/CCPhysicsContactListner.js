(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/physics/platform/CCPhysicsContactListner.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        function PhysicsContactListener() {
            this._contactFixtures = [];
        }
        PhysicsContactListener.prototype.setBeginContact = function (cb) {
            this._BeginContact = cb;
        };
        PhysicsContactListener.prototype.setEndContact = function (cb) {
            this._EndContact = cb;
        };
        PhysicsContactListener.prototype.setPreSolve = function (cb) {
            this._PreSolve = cb;
        };
        PhysicsContactListener.prototype.setPostSolve = function (cb) {
            this._PostSolve = cb;
        };
        PhysicsContactListener.prototype.BeginContact = function (contact) {
            if (!this._BeginContact)
                return;
            var fixtureA = contact.GetFixtureA();
            var fixtureB = contact.GetFixtureB();
            var fixtures = this._contactFixtures;
            contact._shouldReport = false;
            if (fixtures.indexOf(fixtureA) !== -1 || fixtures.indexOf(fixtureB) !== -1) {
                contact._shouldReport = true;
                this._BeginContact(contact);
            }
        };
        PhysicsContactListener.prototype.EndContact = function (contact) {
            if (this._EndContact && contact._shouldReport) {
                contact._shouldReport = false;
                this._EndContact(contact);
            }
        };
        PhysicsContactListener.prototype.PreSolve = function (contact, oldManifold) {
            if (this._PreSolve && contact._shouldReport) {
                this._PreSolve(contact, oldManifold);
            }
        };
        PhysicsContactListener.prototype.PostSolve = function (contact, impulse) {
            if (this._PostSolve && contact._shouldReport) {
                this._PostSolve(contact, impulse);
            }
        };
        PhysicsContactListener.prototype.registerContactFixture = function (fixture) {
            this._contactFixtures.push(fixture);
        };
        PhysicsContactListener.prototype.unregisterContactFixture = function (fixture) {
            cc.js.array.remove(this._contactFixtures, fixture);
        };
        cc.PhysicsContactListener = module.exports = PhysicsContactListener;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDUGh5c2ljc0NvbnRhY3RMaXN0bmVyLmpzIiwiL1VzZXJzL1NoYXJlZC9iaW5nb19mcmVuenkvZW5naW5lL2NvY29zMmQvY29yZS9waHlzaWNzL3BsYXRmb3JtL0NDUGh5c2ljc0NvbnRhY3RMaXN0bmVyLmpzIl0sIm5hbWVzIjpbIlBoeXNpY3NDb250YWN0TGlzdGVuZXIiLCJfY29udGFjdEZpeHR1cmVzIiwicHJvdG90eXBlIiwic2V0QmVnaW5Db250YWN0IiwiY2IiLCJfQmVnaW5Db250YWN0Iiwic2V0RW5kQ29udGFjdCIsIl9FbmRDb250YWN0Iiwic2V0UHJlU29sdmUiLCJfUHJlU29sdmUiLCJzZXRQb3N0U29sdmUiLCJfUG9zdFNvbHZlIiwiQmVnaW5Db250YWN0IiwiY29udGFjdCIsImZpeHR1cmVBIiwiR2V0Rml4dHVyZUEiLCJmaXh0dXJlQiIsIkdldEZpeHR1cmVCIiwiZml4dHVyZXMiLCJfc2hvdWxkUmVwb3J0IiwiaW5kZXhPZiIsIkVuZENvbnRhY3QiLCJQcmVTb2x2ZSIsIm9sZE1hbmlmb2xkIiwiUG9zdFNvbHZlIiwiaW1wdWxzZSIsInJlZ2lzdGVyQ29udGFjdEZpeHR1cmUiLCJmaXh0dXJlIiwicHVzaCIsInVucmVnaXN0ZXJDb250YWN0Rml4dHVyZSIsImNjIiwianMiLCJhcnJheSIsInJlbW92ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7SUFBQSxJQUFBLE9BQUEsR0FBQSxPQUFBLE9BQUEsS0FBQSxXQUFBLElBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQTs7Ozs7Ozs7Ozs7OztRQTBCQSxTQUFTQSxzQkFBVCxHQUFtQztBQUFBLFlBQy9CLEtBQUtDLGdCQUFMLEdBQXdCLEVBQXhCLENBRCtCO0FBQUE7UUFJbkNELHNCQUFBQSxDQUF1QkUsU0FBdkJGLENBQWlDRyxlQUFqQ0gsR0FBbUQsVUFBVUksRUFBVixFQUFjO0FBQUEsWUFDN0QsS0FBS0MsYUFBTCxHQUFxQkQsRUFBckIsQ0FENkQ7QUFBQSxTQUFqRUo7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M0VHLEVBQUFBLENBQUdDLEVBQUhELENBQU1FLEtBQU5GLENBQVlHLE1BQVpILENBQW1CLEtBQUs3QixnQkFBeEI2QixFQUEwQ0gsT0FBMUNHLEVBRDJFO0FBQUEsU0FBL0U5QjtRQUlBOEIsRUFBQUEsQ0FBRzlCLHNCQUFIOEIsR0FBNEJJLE1BQUFBLENBQU9DLE9BQVBELEdBQWlCbEMsc0JBQTdDOEIiLCJmaWxlIjoiQ0NQaHlzaWNzQ29udGFjdExpc3RuZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxuXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xuXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxuIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxuIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXG4gc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXG5cbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5cbmZ1bmN0aW9uIFBoeXNpY3NDb250YWN0TGlzdGVuZXIgKCkge1xuICAgIHRoaXMuX2NvbnRhY3RGaXh0dXJlcyA9IFtdO1xufVxuXG5QaHlzaWNzQ29udGFjdExpc3RlbmVyLnByb3RvdHlwZS5zZXRCZWdpbkNvbnRhY3QgPSBmdW5jdGlvbiAoY2IpIHtcbiAgICB0aGlzLl9CZWdpbkNvbnRhY3QgPSBjYjtcbn07XG5cblBoeXNpY3NDb250YWN0TGlzdGVuZXIucHJvdG90eXBlLnNldEVuZENvbnRhY3QgPSBmdW5jdGlvbiAoY2IpIHtcbiAgICB0aGlzLl9FbmRDb250YWN0ID0gY2I7XG59O1xuXG5QaHlzaWNzQ29udGFjdExpc3RlbmVyLnByb3RvdHlwZS5zZXRQcmVTb2x2ZSA9IGZ1bmN0aW9uIChjYikge1xuICAgIHRoaXMuX1ByZVNvbHZlID0gY2I7XG59O1xuXG5QaHlzaWNzQ29udGFjdExpc3RlbmVyLnByb3RvdHlwZS5zZXRQb3N0U29sdmUgPSBmdW5jdGlvbiAoY2IpIHtcbiAgICB0aGlzLl9Qb3N0U29sdmUgPSBjYjtcbn07XG5cblBoeXNpY3NDb250YWN0TGlzdGVuZXIucHJvdG90eXBlLkJlZ2luQ29udGFjdCA9IGZ1bmN0aW9uIChjb250YWN0KSB7XG4gICAgaWYgKCF0aGlzLl9CZWdpbkNvbnRhY3QpIHJldHVybjtcblxuICAgIHZhciBmaXh0dXJlQSA9IGNvbnRhY3QuR2V0Rml4dHVyZUEoKTtcbiAgICB2YXIgZml4dHVyZUIgPSBjb250YWN0LkdldEZpeHR1cmVCKCk7XG4gICAgdmFyIGZpeHR1cmVzID0gdGhpcy5fY29udGFjdEZpeHR1cmVzO1xuICAgIFxuICAgIGNvbnRhY3QuX3Nob3VsZFJlcG9ydCA9IGZhbHNlO1xuICAgIFxuICAgIGlmIChmaXh0dXJlcy5pbmRleE9mKGZpeHR1cmVBKSAhPT0gLTEgfHwgZml4dHVyZXMuaW5kZXhPZihmaXh0dXJlQikgIT09IC0xKSB7XG4gICAgICAgIGNvbnRhY3QuX3Nob3VsZFJlcG9ydCA9IHRydWU7IC8vIGZvciBxdWljayBjaGVjayB3aGV0aGVyIHRoaXMgY29udGFjdCBzaG91bGQgcmVwb3J0XG4gICAgICAgIHRoaXMuX0JlZ2luQ29udGFjdChjb250YWN0KTtcbiAgICB9XG59O1xuXG5QaHlzaWNzQ29udGFjdExpc3RlbmVyLnByb3RvdHlwZS5FbmRDb250YWN0ID0gZnVuY3Rpb24gKGNvbnRhY3QpIHtcbiAgICBpZiAodGhpcy5fRW5kQ29udGFjdCAmJiBjb250YWN0Ll9zaG91bGRSZXBvcnQpIHtcbiAgICAgICAgY29udGFjdC5fc2hvdWxkUmVwb3J0ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX0VuZENvbnRhY3QoY29udGFjdCk7XG4gICAgfVxufTtcblxuUGh5c2ljc0NvbnRhY3RMaXN0ZW5lci5wcm90b3R5cGUuUHJlU29sdmUgPSBmdW5jdGlvbiAoY29udGFjdCwgb2xkTWFuaWZvbGQpIHtcbiAgICBpZiAodGhpcy5fUHJlU29sdmUgJiYgY29udGFjdC5fc2hvdWxkUmVwb3J0KSB7XG4gICAgICAgIHRoaXMuX1ByZVNvbHZlKGNvbnRhY3QsIG9sZE1hbmlmb2xkKTtcbiAgICB9XG59O1xuXG5QaHlzaWNzQ29udGFjdExpc3RlbmVyLnByb3RvdHlwZS5Qb3N0U29sdmUgPSBmdW5jdGlvbiAoY29udGFjdCwgaW1wdWxzZSkge1xuICAgIGlmICh0aGlzLl9Qb3N0U29sdmUgJiYgY29udGFjdC5fc2hvdWxkUmVwb3J0KSB7XG4gICAgICAgIHRoaXMuX1Bvc3RTb2x2ZShjb250YWN0LCBpbXB1bHNlKTtcbiAgICB9XG59O1xuXG5QaHlzaWNzQ29udGFjdExpc3RlbmVyLnByb3RvdHlwZS5yZWdpc3RlckNvbnRhY3RGaXh0dXJlID0gZnVuY3Rpb24gKGZpeHR1cmUpIHtcbiAgICB0aGlzLl9jb250YWN0Rml4dHVyZXMucHVzaChmaXh0dXJlKTtcbn07XG5cblBoeXNpY3NDb250YWN0TGlzdGVuZXIucHJvdG90eXBlLnVucmVnaXN0ZXJDb250YWN0Rml4dHVyZSA9IGZ1bmN0aW9uIChmaXh0dXJlKSB7XG4gICAgY2MuanMuYXJyYXkucmVtb3ZlKHRoaXMuX2NvbnRhY3RGaXh0dXJlcywgZml4dHVyZSk7XG59O1xuXG5jYy5QaHlzaWNzQ29udGFjdExpc3RlbmVyID0gbW9kdWxlLmV4cG9ydHMgPSBQaHlzaWNzQ29udGFjdExpc3RlbmVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXG4gd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xuIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcbiBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmZ1bmN0aW9uIFBoeXNpY3NDb250YWN0TGlzdGVuZXIoKSB7XG4gICAgdGhpcy5fY29udGFjdEZpeHR1cmVzID0gW107XG59XG5cblBoeXNpY3NDb250YWN0TGlzdGVuZXIucHJvdG90eXBlLnNldEJlZ2luQ29udGFjdCA9IGZ1bmN0aW9uIChjYikge1xuICAgIHRoaXMuX0JlZ2luQ29udGFjdCA9IGNiO1xufTtcblxuUGh5c2ljc0NvbnRhY3RMaXN0ZW5lci5wcm90b3R5cGUuc2V0RW5kQ29udGFjdCA9IGZ1bmN0aW9uIChjYikge1xuICAgIHRoaXMuX0VuZENvbnRhY3QgPSBjYjtcbn07XG5cblBoeXNpY3NDb250YWN0TGlzdGVuZXIucHJvdG90eXBlLnNldFByZVNvbHZlID0gZnVuY3Rpb24gKGNiKSB7XG4gICAgdGhpcy5fUHJlU29sdmUgPSBjYjtcbn07XG5cblBoeXNpY3NDb250YWN0TGlzdGVuZXIucHJvdG90eXBlLnNldFBvc3RTb2x2ZSA9IGZ1bmN0aW9uIChjYikge1xuICAgIHRoaXMuX1Bvc3RTb2x2ZSA9IGNiO1xufTtcblxuUGh5c2ljc0NvbnRhY3RMaXN0ZW5lci5wcm90b3R5cGUuQmVnaW5Db250YWN0ID0gZnVuY3Rpb24gKGNvbnRhY3QpIHtcbiAgICBpZiAoIXRoaXMuX0JlZ2luQ29udGFjdCkgcmV0dXJuO1xuXG4gICAgdmFyIGZpeHR1cmVBID0gY29udGFjdC5HZXRGaXh0dXJlQSgpO1xuICAgIHZhciBmaXh0dXJlQiA9IGNvbnRhY3QuR2V0Rml4dHVyZUIoKTtcbiAgICB2YXIgZml4dHVyZXMgPSB0aGlzLl9jb250YWN0Rml4dHVyZXM7XG5cbiAgICBjb250YWN0Ll9zaG91bGRSZXBvcnQgPSBmYWxzZTtcblxuICAgIGlmIChmaXh0dXJlcy5pbmRleE9mKGZpeHR1cmVBKSAhPT0gLTEgfHwgZml4dHVyZXMuaW5kZXhPZihmaXh0dXJlQikgIT09IC0xKSB7XG4gICAgICAgIGNvbnRhY3QuX3Nob3VsZFJlcG9ydCA9IHRydWU7IC8vIGZvciBxdWljayBjaGVjayB3aGV0aGVyIHRoaXMgY29udGFjdCBzaG91bGQgcmVwb3J0XG4gICAgICAgIHRoaXMuX0JlZ2luQ29udGFjdChjb250YWN0KTtcbiAgICB9XG59O1xuXG5QaHlzaWNzQ29udGFjdExpc3RlbmVyLnByb3RvdHlwZS5FbmRDb250YWN0ID0gZnVuY3Rpb24gKGNvbnRhY3QpIHtcbiAgICBpZiAodGhpcy5fRW5kQ29udGFjdCAmJiBjb250YWN0Ll9zaG91bGRSZXBvcnQpIHtcbiAgICAgICAgY29udGFjdC5fc2hvdWxkUmVwb3J0ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX0VuZENvbnRhY3QoY29udGFjdCk7XG4gICAgfVxufTtcblxuUGh5c2ljc0NvbnRhY3RMaXN0ZW5lci5wcm90b3R5cGUuUHJlU29sdmUgPSBmdW5jdGlvbiAoY29udGFjdCwgb2xkTWFuaWZvbGQpIHtcbiAgICBpZiAodGhpcy5fUHJlU29sdmUgJiYgY29udGFjdC5fc2hvdWxkUmVwb3J0KSB7XG4gICAgICAgIHRoaXMuX1ByZVNvbHZlKGNvbnRhY3QsIG9sZE1hbmlmb2xkKTtcbiAgICB9XG59O1xuXG5QaHlzaWNzQ29udGFjdExpc3RlbmVyLnByb3RvdHlwZS5Qb3N0U29sdmUgPSBmdW5jdGlvbiAoY29udGFjdCwgaW1wdWxzZSkge1xuICAgIGlmICh0aGlzLl9Qb3N0U29sdmUgJiYgY29udGFjdC5fc2hvdWxkUmVwb3J0KSB7XG4gICAgICAgIHRoaXMuX1Bvc3RTb2x2ZShjb250YWN0LCBpbXB1bHNlKTtcbiAgICB9XG59O1xuXG5QaHlzaWNzQ29udGFjdExpc3RlbmVyLnByb3RvdHlwZS5yZWdpc3RlckNvbnRhY3RGaXh0dXJlID0gZnVuY3Rpb24gKGZpeHR1cmUpIHtcbiAgICB0aGlzLl9jb250YWN0Rml4dHVyZXMucHVzaChmaXh0dXJlKTtcbn07XG5cblBoeXNpY3NDb250YWN0TGlzdGVuZXIucHJvdG90eXBlLnVucmVnaXN0ZXJDb250YWN0Rml4dHVyZSA9IGZ1bmN0aW9uIChmaXh0dXJlKSB7XG4gICAgY2MuanMuYXJyYXkucmVtb3ZlKHRoaXMuX2NvbnRhY3RGaXh0dXJlcywgZml4dHVyZSk7XG59O1xuXG5jYy5QaHlzaWNzQ29udGFjdExpc3RlbmVyID0gbW9kdWxlLmV4cG9ydHMgPSBQaHlzaWNzQ29udGFjdExpc3RlbmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtORFVHaDVjMmxqYzBOdmJuUmhZM1JNYVhOMGJtVnlMbXB6SWwwc0ltNWhiV1Z6SWpwYklsQm9lWE5wWTNORGIyNTBZV04wVEdsemRHVnVaWElpTENKZlkyOXVkR0ZqZEVacGVIUjFjbVZ6SWl3aWNISnZkRzkwZVhCbElpd2ljMlYwUW1WbmFXNURiMjUwWVdOMElpd2lZMklpTENKZlFtVm5hVzVEYjI1MFlXTjBJaXdpYzJWMFJXNWtRMjl1ZEdGamRDSXNJbDlGYm1SRGIyNTBZV04wSWl3aWMyVjBVSEpsVTI5c2RtVWlMQ0pmVUhKbFUyOXNkbVVpTENKelpYUlFiM04wVTI5c2RtVWlMQ0pmVUc5emRGTnZiSFpsSWl3aVFtVm5hVzVEYjI1MFlXTjBJaXdpWTI5dWRHRmpkQ0lzSW1acGVIUjFjbVZCSWl3aVIyVjBSbWw0ZEhWeVpVRWlMQ0ptYVhoMGRYSmxRaUlzSWtkbGRFWnBlSFIxY21WQ0lpd2labWw0ZEhWeVpYTWlMQ0pmYzJodmRXeGtVbVZ3YjNKMElpd2lhVzVrWlhoUFppSXNJa1Z1WkVOdmJuUmhZM1FpTENKUWNtVlRiMngyWlNJc0ltOXNaRTFoYm1sbWIyeGtJaXdpVUc5emRGTnZiSFpsSWl3aWFXMXdkV3h6WlNJc0luSmxaMmx6ZEdWeVEyOXVkR0ZqZEVacGVIUjFjbVVpTENKbWFYaDBkWEpsSWl3aWNIVnphQ0lzSW5WdWNtVm5hWE4wWlhKRGIyNTBZV04wUm1sNGRIVnlaU0lzSW1Oaklpd2lhbk1pTENKaGNuSmhlU0lzSW5KbGJXOTJaU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVFd1FrRXNVMEZCVTBFc2MwSkJRVlFzUjBGQmJVTTdRVUZETDBJc1UwRkJTME1zWjBKQlFVd3NSMEZCZDBJc1JVRkJlRUk3UVVGRFNEczdRVUZGUkVRc2RVSkJRWFZDUlN4VFFVRjJRaXhEUVVGcFEwTXNaVUZCYWtNc1IwRkJiVVFzVlVGQlZVTXNSVUZCVml4RlFVRmpPMEZCUXpkRUxGTkJRVXRETEdGQlFVd3NSMEZCY1VKRUxFVkJRWEpDTzBGQlEwZ3NRMEZHUkRzN1FVRkpRVW9zZFVKQlFYVkNSU3hUUVVGMlFpeERRVUZwUTBrc1lVRkJha01zUjBGQmFVUXNWVUZCVlVZc1JVRkJWaXhGUVVGak8wRkJRek5FTEZOQlFVdEhMRmRCUVV3c1IwRkJiVUpJTEVWQlFXNUNPMEZCUTBnc1EwRkdSRHM3UVVGSlFVb3NkVUpCUVhWQ1JTeFRRVUYyUWl4RFFVRnBRMDBzVjBGQmFrTXNSMEZCSzBNc1ZVRkJWVW9zUlVGQlZpeEZRVUZqTzBGQlEzcEVMRk5CUVV0TExGTkJRVXdzUjBGQmFVSk1MRVZCUVdwQ08wRkJRMGdzUTBGR1JEczdRVUZKUVVvc2RVSkJRWFZDUlN4VFFVRjJRaXhEUVVGcFExRXNXVUZCYWtNc1IwRkJaMFFzVlVGQlZVNHNSVUZCVml4RlFVRmpPMEZCUXpGRUxGTkJRVXRQTEZWQlFVd3NSMEZCYTBKUUxFVkJRV3hDTzBGQlEwZ3NRMEZHUkRzN1FVRkpRVW9zZFVKQlFYVkNSU3hUUVVGMlFpeERRVUZwUTFVc1dVRkJha01zUjBGQlowUXNWVUZCVlVNc1QwRkJWaXhGUVVGdFFqdEJRVU12UkN4UlFVRkpMRU5CUVVNc1MwRkJTMUlzWVVGQlZpeEZRVUY1UWpzN1FVRkZla0lzVVVGQlNWTXNWMEZCVjBRc1VVRkJVVVVzVjBGQlVpeEZRVUZtTzBGQlEwRXNVVUZCU1VNc1YwRkJWMGdzVVVGQlVVa3NWMEZCVWl4RlFVRm1PMEZCUTBFc1VVRkJTVU1zVjBGQlZ5eExRVUZMYWtJc1owSkJRWEJDT3p0QlFVVkJXU3haUVVGUlRTeGhRVUZTTEVkQlFYZENMRXRCUVhoQ096dEJRVVZCTEZGQlFVbEVMRk5CUVZORkxFOUJRVlFzUTBGQmFVSk9MRkZCUVdwQ0xFMUJRU3RDTEVOQlFVTXNRMEZCYUVNc1NVRkJjVU5KTEZOQlFWTkZMRTlCUVZRc1EwRkJhVUpLTEZGQlFXcENMRTFCUVN0Q0xFTkJRVU1zUTBGQmVrVXNSVUZCTkVVN1FVRkRlRVZJTEdkQ1FVRlJUU3hoUVVGU0xFZEJRWGRDTEVsQlFYaENMRU5CUkhkRkxFTkJRekZETzBGQlF6bENMR0ZCUVV0a0xHRkJRVXdzUTBGQmJVSlJMRTlCUVc1Q08wRkJRMGc3UVVGRFNpeERRV0pFT3p0QlFXVkJZaXgxUWtGQmRVSkZMRk5CUVhaQ0xFTkJRV2xEYlVJc1ZVRkJha01zUjBGQk9FTXNWVUZCVlZJc1QwRkJWaXhGUVVGdFFqdEJRVU0zUkN4UlFVRkpMRXRCUVV0T0xGZEJRVXdzU1VGQmIwSk5MRkZCUVZGTkxHRkJRV2hETEVWQlFTdERPMEZCUXpORFRpeG5Ra0ZCVVUwc1lVRkJVaXhIUVVGM1FpeExRVUY0UWp0QlFVTkJMR0ZCUVV0YUxGZEJRVXdzUTBGQmFVSk5MRTlCUVdwQ08wRkJRMGc3UVVGRFNpeERRVXhFT3p0QlFVOUJZaXgxUWtGQmRVSkZMRk5CUVhaQ0xFTkJRV2xEYjBJc1VVRkJha01zUjBGQk5FTXNWVUZCVlZRc1QwRkJWaXhGUVVGdFFsVXNWMEZCYmtJc1JVRkJaME03UVVGRGVFVXNVVUZCU1N4TFFVRkxaQ3hUUVVGTUxFbEJRV3RDU1N4UlFVRlJUU3hoUVVFNVFpeEZRVUUyUXp0QlFVTjZReXhoUVVGTFZpeFRRVUZNTEVOQlFXVkpMRTlCUVdZc1JVRkJkMEpWTEZkQlFYaENPMEZCUTBnN1FVRkRTaXhEUVVwRU96dEJRVTFCZGtJc2RVSkJRWFZDUlN4VFFVRjJRaXhEUVVGcFEzTkNMRk5CUVdwRExFZEJRVFpETEZWQlFWVllMRTlCUVZZc1JVRkJiVUpaTEU5QlFXNUNMRVZCUVRSQ08wRkJRM0pGTEZGQlFVa3NTMEZCUzJRc1ZVRkJUQ3hKUVVGdFFrVXNVVUZCVVUwc1lVRkJMMElzUlVGQk9FTTdRVUZETVVNc1lVRkJTMUlzVlVGQlRDeERRVUZuUWtVc1QwRkJhRUlzUlVGQmVVSlpMRTlCUVhwQ08wRkJRMGc3UVVGRFNpeERRVXBFT3p0QlFVMUJla0lzZFVKQlFYVkNSU3hUUVVGMlFpeERRVUZwUTNkQ0xITkNRVUZxUXl4SFFVRXdSQ3hWUVVGVlF5eFBRVUZXTEVWQlFXMUNPMEZCUTNwRkxGTkJRVXN4UWl4blFrRkJUQ3hEUVVGelFqSkNMRWxCUVhSQ0xFTkJRVEpDUkN4UFFVRXpRanRCUVVOSUxFTkJSa1E3TzBGQlNVRXpRaXgxUWtGQmRVSkZMRk5CUVhaQ0xFTkJRV2xETWtJc2QwSkJRV3BETEVkQlFUUkVMRlZCUVZWR0xFOUJRVllzUlVGQmJVSTdRVUZETTBWSExFOUJRVWRETEVWQlFVZ3NRMEZCVFVNc1MwRkJUaXhEUVVGWlF5eE5RVUZhTEVOQlFXMUNMRXRCUVV0b1F5eG5Ra0ZCZUVJc1JVRkJNRU13UWl4UFFVRXhRenRCUVVOSUxFTkJSa1E3TzBGQlNVRkhMRWRCUVVjNVFpeHpRa0ZCU0N4SFFVRTBRbXRETEU5QlFVOURMRTlCUVZBc1IwRkJhVUp1UXl4elFrRkJOME1pTENKbWFXeGxJam9pUTBOUWFIbHphV056UTI5dWRHRmpkRXhwYzNSdVpYSXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUVOdmNIbHlhV2RvZENBb1l5a2dNakF4TnkweU1ERTRJRmhwWVcxbGJpQlpZV3BwSUZOdlpuUjNZWEpsSUVOdkxpd2dUSFJrTGx4dVhHNGdhSFIwY0hNNkx5OTNkM2N1WTI5amIzTXVZMjl0TDF4dVhHNGdVR1Z5YldsemMybHZiaUJwY3lCb1pYSmxZbmtnWjNKaGJuUmxaQ3dnWm5KbFpTQnZaaUJqYUdGeVoyVXNJSFJ2SUdGdWVTQndaWEp6YjI0Z2IySjBZV2x1YVc1bklHRWdZMjl3ZVZ4dUlHOW1JSFJvYVhNZ2MyOW1kSGRoY21VZ1lXNWtJR0Z6YzI5amFXRjBaV1FnWlc1bmFXNWxJSE52ZFhKalpTQmpiMlJsSUNoMGFHVWdYQ0pUYjJaMGQyRnlaVndpS1N3Z1lTQnNhVzFwZEdWa0xGeHVJSGR2Y214a2QybGtaU3dnY205NVlXeDBlUzFtY21WbExDQnViMjR0WVhOemFXZHVZV0pzWlN3Z2NtVjJiMk5oWW14bElHRnVaQ0J1YjI0dFpYaGpiSFZ6YVhabElHeHBZMlZ1YzJWY2JpQjBieUIxYzJVZ1EyOWpiM01nUTNKbFlYUnZjaUJ6YjJ4bGJIa2dkRzhnWkdWMlpXeHZjQ0JuWVcxbGN5QnZiaUI1YjNWeUlIUmhjbWRsZENCd2JHRjBabTl5YlhNdUlGbHZkU0J6YUdGc2JGeHVJRzV2ZENCMWMyVWdRMjlqYjNNZ1EzSmxZWFJ2Y2lCemIyWjBkMkZ5WlNCbWIzSWdaR1YyWld4dmNHbHVaeUJ2ZEdobGNpQnpiMlowZDJGeVpTQnZjaUIwYjI5c2N5QjBhR0YwSjNOY2JpQjFjMlZrSUdadmNpQmtaWFpsYkc5d2FXNW5JR2RoYldWekxpQlpiM1VnWVhKbElHNXZkQ0JuY21GdWRHVmtJSFJ2SUhCMVlteHBjMmdzSUdScGMzUnlhV0oxZEdVc1hHNGdjM1ZpYkdsalpXNXpaU3dnWVc1a0wyOXlJSE5sYkd3Z1kyOXdhV1Z6SUc5bUlFTnZZMjl6SUVOeVpXRjBiM0l1WEc1Y2JpQlVhR1VnYzI5bWRIZGhjbVVnYjNJZ2RHOXZiSE1nYVc0Z2RHaHBjeUJNYVdObGJuTmxJRUZuY21WbGJXVnVkQ0JoY21VZ2JHbGpaVzV6WldRc0lHNXZkQ0J6YjJ4a0xseHVJRmhwWVcxbGJpQlpZV3BwSUZOdlpuUjNZWEpsSUVOdkxpd2dUSFJrTGlCeVpYTmxjblpsY3lCaGJHd2djbWxuYUhSeklHNXZkQ0JsZUhCeVpYTnpiSGtnWjNKaGJuUmxaQ0IwYnlCNWIzVXVYRzVjYmlCVVNFVWdVMDlHVkZkQlVrVWdTVk1nVUZKUFZrbEVSVVFnWENKQlV5QkpVMXdpTENCWFNWUklUMVZVSUZkQlVsSkJUbFJaSUU5R0lFRk9XU0JMU1U1RUxDQkZXRkJTUlZOVElFOVNYRzRnU1UxUVRFbEZSQ3dnU1U1RFRGVkVTVTVISUVKVlZDQk9UMVFnVEVsTlNWUkZSQ0JVVHlCVVNFVWdWMEZTVWtGT1ZFbEZVeUJQUmlCTlJWSkRTRUZPVkVGQ1NVeEpWRmtzWEc0Z1JrbFVUa1ZUVXlCR1QxSWdRU0JRUVZKVVNVTlZURUZTSUZCVlVsQlBVMFVnUVU1RUlFNVBUa2xPUmxKSlRrZEZUVVZPVkM0Z1NVNGdUazhnUlZaRlRsUWdVMGhCVEV3Z1ZFaEZYRzRnUVZWVVNFOVNVeUJQVWlCRFQxQlpVa2xIU0ZRZ1NFOU1SRVZTVXlCQ1JTQk1TVUZDVEVVZ1JrOVNJRUZPV1NCRFRFRkpUU3dnUkVGTlFVZEZVeUJQVWlCUFZFaEZVbHh1SUV4SlFVSkpURWxVV1N3Z1YwaEZWRWhGVWlCSlRpQkJUaUJCUTFSSlQwNGdUMFlnUTA5T1ZGSkJRMVFzSUZSUFVsUWdUMUlnVDFSSVJWSlhTVk5GTENCQlVrbFRTVTVISUVaU1QwMHNYRzRnVDFWVUlFOUdJRTlTSUVsT0lFTlBUazVGUTFSSlQwNGdWMGxVU0NCVVNFVWdVMDlHVkZkQlVrVWdUMUlnVkVoRklGVlRSU0JQVWlCUFZFaEZVaUJFUlVGTVNVNUhVeUJKVGx4dUlGUklSU0JUVDBaVVYwRlNSUzVjYmlBcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FMMXh1WEc1Y2JtWjFibU4wYVc5dUlGQm9lWE5wWTNORGIyNTBZV04wVEdsemRHVnVaWElnS0NrZ2UxeHVJQ0FnSUhSb2FYTXVYMk52Ym5SaFkzUkdhWGgwZFhKbGN5QTlJRnRkTzF4dWZWeHVYRzVRYUhsemFXTnpRMjl1ZEdGamRFeHBjM1JsYm1WeUxuQnliM1J2ZEhsd1pTNXpaWFJDWldkcGJrTnZiblJoWTNRZ1BTQm1kVzVqZEdsdmJpQW9ZMklwSUh0Y2JpQWdJQ0IwYUdsekxsOUNaV2RwYmtOdmJuUmhZM1FnUFNCallqdGNibjA3WEc1Y2JsQm9lWE5wWTNORGIyNTBZV04wVEdsemRHVnVaWEl1Y0hKdmRHOTBlWEJsTG5ObGRFVnVaRU52Ym5SaFkzUWdQU0JtZFc1amRHbHZiaUFvWTJJcElIdGNiaUFnSUNCMGFHbHpMbDlGYm1SRGIyNTBZV04wSUQwZ1kySTdYRzU5TzF4dVhHNVFhSGx6YVdOelEyOXVkR0ZqZEV4cGMzUmxibVZ5TG5CeWIzUnZkSGx3WlM1elpYUlFjbVZUYjJ4MlpTQTlJR1oxYm1OMGFXOXVJQ2hqWWlrZ2UxeHVJQ0FnSUhSb2FYTXVYMUJ5WlZOdmJIWmxJRDBnWTJJN1hHNTlPMXh1WEc1UWFIbHphV056UTI5dWRHRmpkRXhwYzNSbGJtVnlMbkJ5YjNSdmRIbHdaUzV6WlhSUWIzTjBVMjlzZG1VZ1BTQm1kVzVqZEdsdmJpQW9ZMklwSUh0Y2JpQWdJQ0IwYUdsekxsOVFiM04wVTI5c2RtVWdQU0JqWWp0Y2JuMDdYRzVjYmxCb2VYTnBZM05EYjI1MFlXTjBUR2x6ZEdWdVpYSXVjSEp2ZEc5MGVYQmxMa0psWjJsdVEyOXVkR0ZqZENBOUlHWjFibU4wYVc5dUlDaGpiMjUwWVdOMEtTQjdYRzRnSUNBZ2FXWWdLQ0YwYUdsekxsOUNaV2RwYmtOdmJuUmhZM1FwSUhKbGRIVnlianRjYmx4dUlDQWdJSFpoY2lCbWFYaDBkWEpsUVNBOUlHTnZiblJoWTNRdVIyVjBSbWw0ZEhWeVpVRW9LVHRjYmlBZ0lDQjJZWElnWm1sNGRIVnlaVUlnUFNCamIyNTBZV04wTGtkbGRFWnBlSFIxY21WQ0tDazdYRzRnSUNBZ2RtRnlJR1pwZUhSMWNtVnpJRDBnZEdocGN5NWZZMjl1ZEdGamRFWnBlSFIxY21Wek8xeHVJQ0FnSUZ4dUlDQWdJR052Ym5SaFkzUXVYM05vYjNWc1pGSmxjRzl5ZENBOUlHWmhiSE5sTzF4dUlDQWdJRnh1SUNBZ0lHbG1JQ2htYVhoMGRYSmxjeTVwYm1SbGVFOW1LR1pwZUhSMWNtVkJLU0FoUFQwZ0xURWdmSHdnWm1sNGRIVnlaWE11YVc1a1pYaFBaaWhtYVhoMGRYSmxRaWtnSVQwOUlDMHhLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuUmhZM1F1WDNOb2IzVnNaRkpsY0c5eWRDQTlJSFJ5ZFdVN0lDOHZJR1p2Y2lCeGRXbGpheUJqYUdWamF5QjNhR1YwYUdWeUlIUm9hWE1nWTI5dWRHRmpkQ0J6YUc5MWJHUWdjbVZ3YjNKMFhHNGdJQ0FnSUNBZ0lIUm9hWE11WDBKbFoybHVRMjl1ZEdGamRDaGpiMjUwWVdOMEtUdGNiaUFnSUNCOVhHNTlPMXh1WEc1UWFIbHphV056UTI5dWRHRmpkRXhwYzNSbGJtVnlMbkJ5YjNSdmRIbHdaUzVGYm1SRGIyNTBZV04wSUQwZ1puVnVZM1JwYjI0Z0tHTnZiblJoWTNRcElIdGNiaUFnSUNCcFppQW9kR2hwY3k1ZlJXNWtRMjl1ZEdGamRDQW1KaUJqYjI1MFlXTjBMbDl6YUc5MWJHUlNaWEJ2Y25RcElIdGNiaUFnSUNBZ0lDQWdZMjl1ZEdGamRDNWZjMmh2ZFd4a1VtVndiM0owSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMFZ1WkVOdmJuUmhZM1FvWTI5dWRHRmpkQ2s3WEc0Z0lDQWdmVnh1ZlR0Y2JseHVVR2g1YzJsamMwTnZiblJoWTNSTWFYTjBaVzVsY2k1d2NtOTBiM1I1Y0dVdVVISmxVMjlzZG1VZ1BTQm1kVzVqZEdsdmJpQW9ZMjl1ZEdGamRDd2diMnhrVFdGdWFXWnZiR1FwSUh0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVmVUhKbFUyOXNkbVVnSmlZZ1kyOXVkR0ZqZEM1ZmMyaHZkV3hrVW1Wd2IzSjBLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMUJ5WlZOdmJIWmxLR052Ym5SaFkzUXNJRzlzWkUxaGJtbG1iMnhrS1R0Y2JpQWdJQ0I5WEc1OU8xeHVYRzVRYUhsemFXTnpRMjl1ZEdGamRFeHBjM1JsYm1WeUxuQnliM1J2ZEhsd1pTNVFiM04wVTI5c2RtVWdQU0JtZFc1amRHbHZiaUFvWTI5dWRHRmpkQ3dnYVcxd2RXeHpaU2tnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbDlRYjNOMFUyOXNkbVVnSmlZZ1kyOXVkR0ZqZEM1ZmMyaHZkV3hrVW1Wd2IzSjBLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMUJ2YzNSVGIyeDJaU2hqYjI1MFlXTjBMQ0JwYlhCMWJITmxLVHRjYmlBZ0lDQjlYRzU5TzF4dVhHNVFhSGx6YVdOelEyOXVkR0ZqZEV4cGMzUmxibVZ5TG5CeWIzUnZkSGx3WlM1eVpXZHBjM1JsY2tOdmJuUmhZM1JHYVhoMGRYSmxJRDBnWm5WdVkzUnBiMjRnS0dacGVIUjFjbVVwSUh0Y2JpQWdJQ0IwYUdsekxsOWpiMjUwWVdOMFJtbDRkSFZ5WlhNdWNIVnphQ2htYVhoMGRYSmxLVHRjYm4wN1hHNWNibEJvZVhOcFkzTkRiMjUwWVdOMFRHbHpkR1Z1WlhJdWNISnZkRzkwZVhCbExuVnVjbVZuYVhOMFpYSkRiMjUwWVdOMFJtbDRkSFZ5WlNBOUlHWjFibU4wYVc5dUlDaG1hWGgwZFhKbEtTQjdYRzRnSUNBZ1kyTXVhbk11WVhKeVlYa3VjbVZ0YjNabEtIUm9hWE11WDJOdmJuUmhZM1JHYVhoMGRYSmxjeXdnWm1sNGRIVnlaU2s3WEc1OU8xeHVYRzVqWXk1UWFIbHphV056UTI5dWRHRmpkRXhwYzNSbGJtVnlJRDBnYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0JRYUhsemFXTnpRMjl1ZEdGamRFeHBjM1JsYm1WeU8xeHVJbDE5Il19