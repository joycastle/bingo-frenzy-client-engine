(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/physics/platform/CCPhysicsAABBQueryCallback.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var BodyType = require('../CCPhysicsTypes').BodyType;
        function PhysicsAABBQueryCallback() {
            this._point = new b2.Vec2();
            this._isPoint = false;
            this._fixtures = [];
        }
        PhysicsAABBQueryCallback.prototype.init = function (point) {
            if (point) {
                this._isPoint = true;
                this._point.x = point.x;
                this._point.y = point.y;
            } else {
                this._isPoint = false;
            }
            this._fixtures.length = 0;
        };
        PhysicsAABBQueryCallback.prototype.ReportFixture = function (fixture) {
            var body = fixture.GetBody();
            if (body.GetType() === BodyType.Dynamic) {
                if (this._isPoint) {
                    if (fixture.TestPoint(this._point)) {
                        this._fixtures.push(fixture);
                        return false;
                    }
                } else {
                    this._fixtures.push(fixture);
                }
            }
            return true;
        };
        PhysicsAABBQueryCallback.prototype.getFixture = function () {
            return this._fixtures[0];
        };
        PhysicsAABBQueryCallback.prototype.getFixtures = function () {
            return this._fixtures;
        };
        cc.PhysicsAABBQueryCallback = module.exports = PhysicsAABBQueryCallback;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,