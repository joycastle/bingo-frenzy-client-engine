(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/physics/CCPhysicsTypes.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var ContactType = {
            BEGIN_CONTACT: 'begin-contact',
            END_CONTACT: 'end-contact',
            PRE_SOLVE: 'pre-solve',
            POST_SOLVE: 'post-solve'
        };
        var BodyType = cc.Enum({
            Static: 0,
            Kinematic: 1,
            Dynamic: 2,
            Animated: 3
        });
        cc.RigidBodyType = BodyType;
        var RayCastType = cc.Enum({
            Closest: 0,
            Any: 1,
            AllClosest: 2,
            All: 3
        });
        cc.RayCastType = RayCastType;
        module.exports = {
            BodyType: BodyType,
            ContactType: ContactType,
            RayCastType: RayCastType,
            DrawBits: b2.DrawFlags,
            PTM_RATIO: 32,
            ANGLE_TO_PHYSICS_ANGLE: -Math.PI / 180,
            PHYSICS_ANGLE_TO_ANGLE: -180 / Math.PI
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,