(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/physics/index.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        require('./box2d-adapter');
        require('./CCPhysicsManager');
        require('./CCRigidBody');
        require('./CCPhysicsContact');
        require('./collider/CCPhysicsCollider');
        require('./collider/CCPhysicsChainCollider');
        require('./collider/CCPhysicsCircleCollider');
        require('./collider/CCPhysicsBoxCollider');
        require('./collider/CCPhysicsPolygonCollider');
        require('./joint/CCJoint');
        require('./joint/CCDistanceJoint');
        require('./joint/CCRevoluteJoint');
        require('./joint/CCMouseJoint');
        require('./joint/CCMotorJoint');
        require('./joint/CCPrismaticJoint');
        require('./joint/CCWeldJoint');
        require('./joint/CCWheelJoint');
        require('./joint/CCRopeJoint');
        require('./platform/CCPhysicsContactListner');
        require('./platform/CCPhysicsAABBQueryCallback');
        require('./platform/CCPhysicsRayCastCallback');
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,