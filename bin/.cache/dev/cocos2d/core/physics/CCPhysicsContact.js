(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/physics/CCPhysicsContact.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var PTM_RATIO = require('./CCPhysicsTypes').PTM_RATIO;
        var ContactType = require('./CCPhysicsTypes').ContactType;
        var pools = [];
        var pointCache = [
            cc.v2(),
            cc.v2()
        ];
        var b2worldmanifold = new b2.WorldManifold();
        var worldmanifold = {
            points: [],
            separations: [],
            normal: cc.v2()
        };
        function ManifoldPoint() {
            this.localPoint = cc.v2();
            this.normalImpulse = 0;
            this.tangentImpulse = 0;
        }
        var manifoldPointCache = [
            new ManifoldPoint(),
            new ManifoldPoint()
        ];
        var b2manifold = new b2.Manifold();
        var manifold = {
            type: 0,
            localPoint: cc.v2(),
            localNormal: cc.v2(),
            points: []
        };
        var impulse = {
            normalImpulses: [],
            tangentImpulses: []
        };
        function PhysicsContact() {
        }
        PhysicsContact.prototype.init = function (b2contact) {
            this.colliderA = b2contact.GetFixtureA().collider;
            this.colliderB = b2contact.GetFixtureB().collider;
            this.disabled = false;
            this.disabledOnce = false;
            this._impulse = null;
            this._inverted = false;
            this._b2contact = b2contact;
            b2contact._contact = this;
        };
        PhysicsContact.prototype.reset = function () {
            this.setTangentSpeed(0);
            this.resetFriction();
            this.resetRestitution();
            this.colliderA = null;
            this.colliderB = null;
            this.disabled = false;
            this._impulse = null;
            this._b2contact._contact = null;
            this._b2contact = null;
        };
        PhysicsContact.prototype.getWorldManifold = function () {
            var points = worldmanifold.points;
            var separations = worldmanifold.separations;
            var normal = worldmanifold.normal;
            this._b2contact.GetWorldManifold(b2worldmanifold);
            var b2points = b2worldmanifold.points;
            var b2separations = b2worldmanifold.separations;
            var count = this._b2contact.GetManifold().pointCount;
            points.length = separations.length = count;
            for (var i = 0; i < count; i++) {
                var p = pointCache[i];
                p.x = b2points[i].x * PTM_RATIO;
                p.y = b2points[i].y * PTM_RATIO;
                points[i] = p;
                separations[i] = b2separations[i] * PTM_RATIO;
            }
            normal.x = b2worldmanifold.normal.x;
            normal.y = b2worldmanifold.normal.y;
            if (this._inverted) {
                normal.x *= -1;
                normal.y *= -1;
            }
            return worldmanifold;
        };
        PhysicsContact.prototype.getManifold = function () {
            var points = manifold.points;
            var localNormal = manifold.localNormal;
            var localPoint = manifold.localPoint;
            var b2manifold = this._b2contact.GetManifold();
            var b2points = b2manifold.points;
            var count = points.length = b2manifold.pointCount;
            for (var i = 0; i < count; i++) {
                var p = manifoldPointCache[i];
                var b2p = b2points[i];
                p.localPoint.x = b2p.localPoint.x * PTM_RATIO;
                p.localPoint.Y = b2p.localPoint.Y * PTM_RATIO;
                p.normalImpulse = b2p.normalImpulse * PTM_RATIO;
                p.tangentImpulse = b2p.tangentImpulse;
                points[i] = p;
            }
            localPoint.x = b2manifold.localPoint.x * PTM_RATIO;
            localPoint.y = b2manifold.localPoint.y * PTM_RATIO;
            localNormal.x = b2manifold.localNormal.x;
            localNormal.y = b2manifold.localNormal.y;
            manifold.type = b2manifold.type;
            if (this._inverted) {
                localNormal.x *= -1;
                localNormal.y *= -1;
            }
            return manifold;
        };
        PhysicsContact.prototype.getImpulse = function () {
            var b2impulse = this._impulse;
            if (!b2impulse)
                return null;
            var normalImpulses = impulse.normalImpulses;
            var tangentImpulses = impulse.tangentImpulses;
            var count = b2impulse.count;
            for (var i = 0; i < count; i++) {
                normalImpulses[i] = b2impulse.normalImpulses[i] * PTM_RATIO;
                tangentImpulses[i] = b2impulse.tangentImpulses[i];
            }
            tangentImpulses.length = normalImpulses.length = count;
            return impulse;
        };
        PhysicsContact.prototype.emit = function (contactType) {
            var func;
            switch (contactType) {
            case ContactType.BEGIN_CONTACT:
                func = 'onBeginContact';
                break;
            case ContactType.END_CONTACT:
                func = 'onEndContact';
                break;
            case ContactType.PRE_SOLVE:
                func = 'onPreSolve';
                break;
            case ContactType.POST_SOLVE:
                func = 'onPostSolve';
                break;
            }
            var colliderA = this.colliderA;
            var colliderB = this.colliderB;
            var bodyA = colliderA.body;
            var bodyB = colliderB.body;
            var comps;
            var i, l, comp;
            if (bodyA.enabledContactListener) {
                comps = bodyA.node._components;
                this._inverted = false;
                for (i = 0, l = comps.length; i < l; i++) {
                    comp = comps[i];
                    if (comp[func]) {
                        comp[func](this, colliderA, colliderB);
                    }
                }
            }
            if (bodyB.enabledContactListener) {
                comps = bodyB.node._components;
                this._inverted = true;
                for (i = 0, l = comps.length; i < l; i++) {
                    comp = comps[i];
                    if (comp[func]) {
                        comp[func](this, colliderB, colliderA);
                    }
                }
            }
            if (this.disabled || this.disabledOnce) {
                this.setEnabled(false);
                this.disabledOnce = false;
            }
        };
        PhysicsContact.get = function (b2contact) {
            var c;
            if (pools.length === 0) {
                c = new cc.PhysicsContact();
            } else {
                c = pools.pop();
            }
            c.init(b2contact);
            return c;
        };
        PhysicsContact.put = function (b2contact) {
            var c = b2contact._contact;
            if (!c)
                return;
            pools.push(c);
            c.reset();
        };
        var _p = PhysicsContact.prototype;
        _p.setEnabled = function (value) {
            this._b2contact.SetEnabled(value);
        };
        _p.isTouching = function () {
            return this._b2contact.IsTouching();
        };
        _p.setTangentSpeed = function (value) {
            this._b2contact.SetTangentSpeed(value / PTM_RATIO);
        };
        _p.getTangentSpeed = function () {
            return this._b2contact.GetTangentSpeed() * PTM_RATIO;
        };
        _p.setFriction = function (value) {
            this._b2contact.SetFriction(value);
        };
        _p.getFriction = function () {
            return this._b2contact.GetFriction();
        };
        _p.resetFriction = function () {
            return this._b2contact.ResetFriction();
        };
        _p.setRestitution = function (value) {
            this._b2contact.SetRestitution(value);
        };
        _p.getRestitution = function () {
            return this._b2contact.GetRestitution();
        };
        _p.resetRestitution = function () {
            return this._b2contact.ResetRestitution();
        };
        PhysicsContact.ContactType = ContactType;
        cc.PhysicsContact = module.exports = PhysicsContact;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,