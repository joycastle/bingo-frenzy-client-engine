(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/load-pipeline/audio-downloader.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var sys = require('../platform/CCSys');
        var debug = require('../CCDebug');
        var __audioSupport = sys.__audioSupport;
        var formatSupport = __audioSupport.format;
        var context = __audioSupport.context;
        function loadDomAudio(item, callback) {
            var dom = document.createElement('audio');
            dom.src = item.url;
            var clearEvent = function clearEvent() {
                clearTimeout(timer);
                dom.removeEventListener('canplaythrough', success, false);
                dom.removeEventListener('error', failure, false);
                if (__audioSupport.USE_LOADER_EVENT)
                    dom.removeEventListener(__audioSupport.USE_LOADER_EVENT, success, false);
            };
            var timer = setTimeout(function () {
                if (dom.readyState === 0)
                    failure();
                else
                    success();
            }, 8000);
            var success = function success() {
                clearEvent();
                callback(null, dom);
            };
            var failure = function failure() {
                clearEvent();
                var message = 'load audio failure - ' + item.url;
                cc.log(message);
                callback(message);
            };
            dom.addEventListener('canplaythrough', success, false);
            dom.addEventListener('error', failure, false);
            if (__audioSupport.USE_LOADER_EVENT)
                dom.addEventListener(__audioSupport.USE_LOADER_EVENT, success, false);
        }
        function loadWebAudio(item, callback) {
            if (!context)
                callback(new Error(debug.getError(4926)));
            var request = cc.loader.getXMLHttpRequest();
            request.open('GET', item.url, true);
            request.responseType = 'arraybuffer';
            request.onload = function () {
                context['decodeAudioData'](request.response, function (buffer) {
                    callback(null, buffer);
                }, function () {
                    callback('decode error - ' + item.id, null);
                });
            };
            request.onerror = function () {
                callback('request error - ' + item.id, null);
            };
            request.send();
        }
        function downloadAudio(item, callback) {
            if (formatSupport.length === 0) {
                return new Error(debug.getError(4927));
            }
            var loader;
            if (!__audioSupport.WEB_AUDIO) {
                loader = loadDomAudio;
            } else {
                var loadByDeserializedAudio = item._owner instanceof cc.AudioClip;
                if (loadByDeserializedAudio) {
                    loader = item._owner.loadMode === cc.AudioClip.LoadMode.WEB_AUDIO ? loadWebAudio : loadDomAudio;
                } else {
                    loader = item.urlParam && item.urlParam['useDom'] ? loadDomAudio : loadWebAudio;
                }
            }
            loader(item, callback);
        }
        module.exports = downloadAudio;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,