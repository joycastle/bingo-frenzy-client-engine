(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/load-pipeline/text-downloader.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var urlAppendTimestamp = require('./utils').urlAppendTimestamp;
        module.exports = function (item, callback) {
            var url = item.url;
            url = urlAppendTimestamp(url);
            var xhr = cc.loader.getXMLHttpRequest(), errInfo = 'Load text file failed: ' + url;
            xhr.open('GET', url, true);
            if (xhr.overrideMimeType)
                xhr.overrideMimeType('text/plain; charset=utf-8');
            xhr.onload = function () {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200 || xhr.status === 0) {
                        callback(null, xhr.responseText);
                    } else {
                        callback({
                            status: xhr.status,
                            errorMessage: errInfo + '(wrong status)'
                        });
                    }
                } else {
                    callback({
                        status: xhr.status,
                        errorMessage: errInfo + '(wrong readyState)'
                    });
                }
            };
            xhr.onerror = function () {
                callback({
                    status: xhr.status,
                    errorMessage: errInfo + '(error)'
                });
            };
            xhr.ontimeout = function () {
                callback({
                    status: xhr.status,
                    errorMessage: errInfo + '(time out)'
                });
            };
            xhr.send(null);
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,