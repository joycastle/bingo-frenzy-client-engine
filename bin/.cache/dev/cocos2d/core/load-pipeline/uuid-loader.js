(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/load-pipeline/uuid-loader.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var MissingClass = CC_EDITOR && Editor.require('app://editor/page/scene-utils/missing-class-reporter').MissingClass;
        var js = require('../platform/js');
        var debug = require('../CCDebug');
        require('../platform/deserialize');
        var LoadingItems = require('./loading-items');
        function isSceneObj(json) {
            var SCENE_ID = 'cc.Scene';
            var PREFAB_ID = 'cc.Prefab';
            return json && (json[0] && json[0].__type__ === SCENE_ID || json[1] && json[1].__type__ === SCENE_ID || json[0] && json[0].__type__ === PREFAB_ID);
        }
        function parseDepends(item, asset, tdInfo, deferredLoadRawAssetsInRuntime) {
            var uuidList = tdInfo.uuidList;
            var objList = tdInfo.uuidObjList;
            var propList = tdInfo.uuidPropList;
            var stillUseUrl = tdInfo._stillUseUrl;
            var depends;
            var i, dependUuid;
            var dependKeys = item.dependKeys = [];
            if (deferredLoadRawAssetsInRuntime) {
                depends = [];
                for (i = 0; i < uuidList.length; i++) {
                    dependUuid = uuidList[i];
                    var obj = objList[i];
                    var prop = propList[i];
                    var info = cc.AssetLibrary._getAssetInfoInRuntime(dependUuid);
                    if (info.raw) {
                        var url = info.url;
                        obj[prop] = url;
                        dependKeys.push(url);
                    } else {
                        depends.push({
                            type: 'uuid',
                            uuid: dependUuid,
                            deferredLoadRaw: true,
                            _owner: obj,
                            _ownerProp: prop,
                            _stillUseUrl: stillUseUrl[i]
                        });
                    }
                }
            } else {
                depends = new Array(uuidList.length);
                for (i = 0; i < uuidList.length; i++) {
                    dependUuid = uuidList[i];
                    depends[i] = {
                        type: 'uuid',
                        uuid: dependUuid,
                        _owner: objList[i],
                        _ownerProp: propList[i],
                        _stillUseUrl: stillUseUrl[i]
                    };
                }
                if (asset._native && !asset.constructor.preventPreloadNativeObject) {
                    depends.push({
                        url: asset.nativeUrl,
                        _owner: asset,
                        _ownerProp: '_nativeAsset'
                    });
                }
            }
            return depends;
        }
        function loadDepends(pipeline, item, asset, depends, callback) {
            item.content = asset;
            var dependKeys = item.dependKeys;
            pipeline.flowInDeps(item, depends, function (errors, items) {
                var item, missingAssetReporter;
                var itemsMap = items.map;
                for (var src in itemsMap) {
                    item = itemsMap[src];
                    if (item.uuid && item.content) {
                        item.content._uuid = item.uuid;
                    }
                }
                function loadCallback(item) {
                    var value = item.content;
                    if (this._stillUseUrl) {
                        value = value && cc.RawAsset.wasRawAssetType(value.constructor) ? value.nativeUrl : item.rawUrl;
                    }
                    if (this._ownerProp === '_nativeAsset') {
                        this._owner.url = item.url;
                    }
                    this._owner[this._ownerProp] = value;
                    if (item.uuid !== asset._uuid && dependKeys.indexOf(item.id) < 0) {
                        dependKeys.push(item.id);
                    }
                }
                for (var i = 0; i < depends.length; i++) {
                    var dep = depends[i];
                    var dependSrc = dep.uuid;
                    var dependUrl = dep.url;
                    var dependObj = dep._owner;
                    var dependProp = dep._ownerProp;
                    item = itemsMap[dependUrl];
                    if (!item) {
                        continue;
                    }
                    var loadCallbackCtx = dep;
                    if (item.complete || item.content) {
                        if (item.error) {
                            if (CC_EDITOR && item.error.errorCode === 'db.NOTFOUND') {
                                if (!missingAssetReporter) {
                                    var MissingObjectReporter = Editor.require('app://editor/page/scene-utils/missing-object-reporter');
                                    missingAssetReporter = new MissingObjectReporter(asset);
                                }
                                missingAssetReporter.stashByOwner(dependObj, dependProp, Editor.serialize.asAsset(dependSrc));
                            } else {
                                cc._throw(item.error.message || item.error.errorMessage || item.error);
                            }
                        } else {
                            loadCallback.call(loadCallbackCtx, item);
                        }
                    } else {
                        var queue = LoadingItems.getQueue(item);
                        var list = queue._callbackTable[dependSrc];
                        if (list) {
                            list.unshift(loadCallback, loadCallbackCtx);
                        } else {
                            queue.addListener(dependSrc, loadCallback, loadCallbackCtx);
                        }
                    }
                }
                if (CC_EDITOR && missingAssetReporter) {
                    missingAssetReporter.reportByOwner();
                    callback(null, asset);
                } else {
                    if (!errors && asset.onLoad) {
                        try {
                            asset.onLoad();
                        } catch (e) {
                            cc._throw(e);
                        }
                    }
                    callback(errors, asset);
                }
            });
        }
        function canDeferredLoad(asset, item, isScene) {
            if (CC_EDITOR) {
                return false;
            }
            var res = item.deferredLoadRaw;
            if (res) {
                if (asset instanceof cc.Asset && asset.constructor.preventDeferredLoadDependents) {
                    res = false;
                }
            } else if (isScene) {
                if (asset instanceof cc.SceneAsset || asset instanceof cc.Prefab) {
                    res = asset.asyncLoadAssets;
                }
            }
            return res;
        }
        function loadUuid(item, callback) {
            var json;
            if (typeof item.content === 'string') {
                try {
                    json = JSON.parse(item.content);
                } catch (e) {
                    return new Error(debug.getError(4923, item.id, e.stack));
                }
            } else if (_typeof(item.content) === 'object') {
                json = item.content;
            } else {
                return new Error(debug.getError(4924));
            }
            var classFinder, missingClass;
            var isScene = isSceneObj(json);
            if (isScene) {
                if (CC_EDITOR) {
                    missingClass = MissingClass;
                    classFinder = function classFinder(type, data, owner, propName) {
                        var res = missingClass.classFinder(type, data, owner, propName);
                        if (res) {
                            return res;
                        }
                        return cc._MissingScript.getMissingWrapper(type, data);
                    };
                    classFinder.onDereferenced = missingClass.classFinder.onDereferenced;
                } else {
                    classFinder = cc._MissingScript.safeFindClass;
                }
            } else {
                classFinder = function classFinder(id) {
                    var cls = js._getClassById(id);
                    if (cls) {
                        return cls;
                    }
                    cc.warnID(4903, id);
                    return Object;
                };
            }
            var tdInfo = cc.deserialize.Details.pool.get();
            var asset;
            try {
                asset = cc.deserialize(json, tdInfo, {
                    classFinder: classFinder,
                    target: item.existingAsset,
                    customEnv: item
                });
            } catch (e) {
                cc.deserialize.Details.pool.put(tdInfo);
                var err = CC_JSB || CC_RUNTIME ? e + '\n' + e.stack : e.stack;
                return new Error(debug.getError(4925, item.id, err));
            }
            asset._uuid = item.uuid;
            asset.url = asset.nativeUrl;
            if (CC_EDITOR && missingClass) {
                missingClass.reportMissingClass(asset);
                missingClass.reset();
            }
            var deferredLoad = canDeferredLoad(asset, item, isScene);
            var depends = parseDepends(item, asset, tdInfo, deferredLoad);
            cc.deserialize.Details.pool.put(tdInfo);
            if (depends.length === 0) {
                if (asset.onLoad)
                    asset.onLoad();
                return callback(null, asset);
            }
            loadDepends(this.pipeline, item, asset, depends, callback);
        }
        module.exports = loadUuid;
        loadUuid.isSceneObj = isSceneObj;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV1aWQtbG9hZGVyLmpzIiwiL1VzZXJzL1NoYXJlZC9iaW5nb19mcmVuenkvZW5naW5lL2NvY29zMmQvY29yZS9sb2FkLXBpcGVsaW5lL3V1aWQtbG9hZGVyLmpzIl0sIm5hbWVzIjpbIk1pc3NpbmdDbGFzcyIsIkNDX0VESVRPUiIsIkVkaXRvciIsInJlcXVpcmUiLCJqcyIsImRlYnVnIiwiTG9hZGluZ0l0ZW1zIiwiaXNTY2VuZU9iaiIsImpzb24iLCJTQ0VORV9JRCIsIlBSRUZBQl9JRCIsIl9fdHlwZV9fIiwicGFyc2VEZXBlbmRzIiwiaXRlbSIsImFzc2V0IiwidGRJbmZvIiwiZGVmZXJyZWRMb2FkUmF3QXNzZXRzSW5SdW50aW1lIiwidXVpZExpc3QiLCJvYmpMaXN0IiwidXVpZE9iakxpc3QiLCJwcm9wTGlzdCIsInV1aWRQcm9wTGlzdCIsInN0aWxsVXNlVXJsIiwiX3N0aWxsVXNlVXJsIiwiZGVwZW5kcyIsImkiLCJkZXBlbmRVdWlkIiwiZGVwZW5kS2V5cyIsImxlbmd0aCIsIm9iaiIsInByb3AiLCJpbmZvIiwiY2MiLCJBc3NldExpYnJhcnkiLCJfZ2V0QXNzZXRJbmZvSW5SdW50aW1lIiwicmF3IiwidXJsIiwicHVzaCIsInR5cGUiLCJ1dWlkIiwiZGVmZXJyZWRMb2FkUmF3IiwiX293bmVyIiwiX293bmVyUHJvcCIsIkFycmF5IiwiX25hdGl2ZSIsImNvbnN0cnVjdG9yIiwicHJldmVudFByZWxvYWROYXRpdmVPYmplY3QiLCJuYXRpdmVVcmwiLCJsb2FkRGVwZW5kcyIsInBpcGVsaW5lIiwiY2FsbGJhY2siLCJjb250ZW50IiwiZmxvd0luRGVwcyIsImVycm9ycyIsIml0ZW1zIiwibWlzc2luZ0Fzc2V0UmVwb3J0ZXIiLCJpdGVtc01hcCIsIm1hcCIsInNyYyIsIl91dWlkIiwibG9hZENhbGxiYWNrIiwidmFsdWUiLCJSYXdBc3NldCIsIndhc1Jhd0Fzc2V0VHlwZSIsInJhd1VybCIsImluZGV4T2YiLCJpZCIsImRlcCIsImRlcGVuZFNyYyIsImRlcGVuZFVybCIsImRlcGVuZE9iaiIsImRlcGVuZFByb3AiLCJsb2FkQ2FsbGJhY2tDdHgiLCJjb21wbGV0ZSIsImVycm9yIiwiZXJyb3JDb2RlIiwiTWlzc2luZ09iamVjdFJlcG9ydGVyIiwic3Rhc2hCeU93bmVyIiwic2VyaWFsaXplIiwiYXNBc3NldCIsIl90aHJvdyIsIm1lc3NhZ2UiLCJlcnJvck1lc3NhZ2UiLCJjYWxsIiwicXVldWUiLCJnZXRRdWV1ZSIsImxpc3QiLCJfY2FsbGJhY2tUYWJsZSIsInVuc2hpZnQiLCJhZGRMaXN0ZW5lciIsInJlcG9ydEJ5T3duZXIiLCJvbkxvYWQiLCJlIiwiY2FuRGVmZXJyZWRMb2FkIiwiaXNTY2VuZSIsInJlcyIsIkFzc2V0IiwicHJldmVudERlZmVycmVkTG9hZERlcGVuZGVudHMiLCJTY2VuZUFzc2V0IiwiUHJlZmFiIiwiYXN5bmNMb2FkQXNzZXRzIiwibG9hZFV1aWQiLCJKU09OIiwicGFyc2UiLCJFcnJvciIsImdldEVycm9yIiwic3RhY2siLCJjbGFzc0ZpbmRlciIsIm1pc3NpbmdDbGFzcyIsImRhdGEiLCJvd25lciIsInByb3BOYW1lIiwiX01pc3NpbmdTY3JpcHQiLCJnZXRNaXNzaW5nV3JhcHBlciIsIm9uRGVyZWZlcmVuY2VkIiwic2FmZUZpbmRDbGFzcyIsImNscyIsIl9nZXRDbGFzc0J5SWQiLCJ3YXJuSUQiLCJPYmplY3QiLCJkZXNlcmlhbGl6ZSIsIkRldGFpbHMiLCJwb29sIiwiZ2V0IiwidGFyZ2V0IiwiZXhpc3RpbmdBc3NldCIsImN1c3RvbUVudiIsInB1dCIsImVyciIsIkNDX0pTQiIsIkNDX1JVTlRJTUUiLCJyZXBvcnRNaXNzaW5nQ2xhc3MiLCJyZXNldCIsImRlZmVycmVkTG9hZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7OztJQUFBLElBQUEsVUFBQSxHQUFBLHNEQUFBOzs7Ozs7Ozs7Ozs7Ozs7O1FBMEJBLElBQU1BLFlBQUFBLEdBQWVDLFNBQUFBLElBQWFDLE1BQUFBLENBQU9DLE9BQVBE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QUEsWUF5RS9Cb0IsRUFBQUEsQ0FBR3dGLFdBQUh4RixDQUFleUYsT0FBZnpGLENBQXVCMEYsSUFBdkIxRixDQUE0QitGLEdBQTVCL0YsQ0FBZ0NqQixNQUFoQ2lCLEVBekUrQjtBQUFBLFlBMkUvQixJQUFJUixPQUFBQSxDQUFRSSxNQUFSSixLQUFtQixDQUF2QixFQUEwQjtBQUFBLGdCQUN0QixJQUFJVixLQUFBQSxDQUFNNkUsTUFBVjtBQUFBLG9CQUFrQjdFLEtBQUFBLENBQU02RSxNQUFON0UsR0FESTtBQUFBLGdCQUV0QixPQUFPb0MsUUFBQUEsQ0FBUyxJQUFUQSxFQUFlcEMsS0FBZm9DLENBQVAsQ0FGc0I7QUFBQSxhQTNFSztBQUFBLFlBK0UvQkYsV0FBQUEsQ0FBWSxLQUFLQyxRQUFqQkQsRUFBMkJuQyxJQUEzQm1DLEVBQWlDbEMsS0FBakNrQyxFQUF3Q3hCLE9BQXhDd0IsRUFBaURFLFFBQWpERixFQS9FK0I7QUFBQTtRQWtGbkNzRixNQUFBQSxDQUFPQyxPQUFQRCxHQUFpQmpDLFFBQWpCaUM7UUFDQWpDLFFBQUFBLENBQVM5RixVQUFUOEYsR0FBc0I5RixVQUF0QjhGIiwiZmlsZSI6InV1aWQtbG9hZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxNiBDaHVrb25nIFRlY2hub2xvZ2llcyBJbmMuXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXG4gIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxuICBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcbiAgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXG5cbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5jb25zdCBNaXNzaW5nQ2xhc3MgPSBDQ19FRElUT1IgJiYgRWRpdG9yLnJlcXVpcmUoJ2FwcDovL2VkaXRvci9wYWdlL3NjZW5lLXV0aWxzL21pc3NpbmctY2xhc3MtcmVwb3J0ZXInKS5NaXNzaW5nQ2xhc3M7XG5jb25zdCBqcyA9IHJlcXVpcmUoJy4uL3BsYXRmb3JtL2pzJyk7XG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoJy4uL0NDRGVidWcnKTtcbnJlcXVpcmUoJy4uL3BsYXRmb3JtL2Rlc2VyaWFsaXplJyk7XG5jb25zdCBMb2FkaW5nSXRlbXMgPSByZXF1aXJlKCcuL2xvYWRpbmctaXRlbXMnKTtcblxuZnVuY3Rpb24gaXNTY2VuZU9iaiAoanNvbikge1xuICAgIHZhciBTQ0VORV9JRCA9ICdjYy5TY2VuZSc7XG4gICAgdmFyIFBSRUZBQl9JRCA9ICdjYy5QcmVmYWInO1xuICAgIHJldHVybiBqc29uICYmIChcbiAgICAgICAgICAgICAgIChqc29uWzBdICYmIGpzb25bMF0uX190eXBlX18gPT09IFNDRU5FX0lEKSB8fFxuICAgICAgICAgICAgICAgKGpzb25bMV0gJiYganNvblsxXS5fX3R5cGVfXyA9PT0gU0NFTkVfSUQpIHx8XG4gICAgICAgICAgICAgICAoanNvblswXSAmJiBqc29uWzBdLl9fdHlwZV9fID09PSBQUkVGQUJfSUQpXG4gICAgICAgICAgICk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRGVwZW5kcyAoaXRlbSwgYXNzZXQsIHRkSW5mbywgZGVmZXJyZWRMb2FkUmF3QXNzZXRzSW5SdW50aW1lKSB7XG4gICAgdmFyIHV1aWRMaXN0ID0gdGRJbmZvLnV1aWRMaXN0O1xuICAgIHZhciBvYmpMaXN0ID0gdGRJbmZvLnV1aWRPYmpMaXN0O1xuICAgIHZhciBwcm9wTGlzdCA9IHRkSW5mby51dWlkUHJvcExpc3Q7XG4gICAgdmFyIHN0aWxsVXNlVXJsID0gdGRJbmZvLl9zdGlsbFVzZVVybDtcbiAgICB2YXIgZGVwZW5kcztcbiAgICB2YXIgaSwgZGVwZW5kVXVpZDtcbiAgICAvLyBjYWNoZSBkZXBlbmRlbmNpZXMgZm9yIGF1dG8gcmVsZWFzZVxuICAgIHZhciBkZXBlbmRLZXlzID0gaXRlbS5kZXBlbmRLZXlzID0gW107XG5cbiAgICBpZiAoZGVmZXJyZWRMb2FkUmF3QXNzZXRzSW5SdW50aW1lKSB7XG4gICAgICAgIGRlcGVuZHMgPSBbXTtcbiAgICAgICAgLy8gcGFyc2UgZGVwZW5kcyBhc3NldHNcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHV1aWRMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBkZXBlbmRVdWlkID0gdXVpZExpc3RbaV07XG4gICAgICAgICAgICB2YXIgb2JqID0gb2JqTGlzdFtpXTtcbiAgICAgICAgICAgIHZhciBwcm9wID0gcHJvcExpc3RbaV07XG4gICAgICAgICAgICB2YXIgaW5mbyA9IGNjLkFzc2V0TGlicmFyeS5fZ2V0QXNzZXRJbmZvSW5SdW50aW1lKGRlcGVuZFV1aWQpO1xuICAgICAgICAgICAgaWYgKGluZm8ucmF3KSB7XG4gICAgICAgICAgICAgICAgLy8gc2tpcCBwcmVsb2FkaW5nIHJhdyBhc3NldHNcbiAgICAgICAgICAgICAgICB2YXIgdXJsID0gaW5mby51cmw7XG4gICAgICAgICAgICAgICAgb2JqW3Byb3BdID0gdXJsO1xuICAgICAgICAgICAgICAgIGRlcGVuZEtleXMucHVzaCh1cmwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZGVjbGFyZSBkZXBlbmRzIGFzc2V0c1xuICAgICAgICAgICAgICAgIGRlcGVuZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICd1dWlkJyxcbiAgICAgICAgICAgICAgICAgICAgdXVpZDogZGVwZW5kVXVpZCxcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWRMb2FkUmF3OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBfb3duZXI6IG9iaixcbiAgICAgICAgICAgICAgICAgICAgX293bmVyUHJvcDogcHJvcCxcbiAgICAgICAgICAgICAgICAgICAgX3N0aWxsVXNlVXJsOiBzdGlsbFVzZVVybFtpXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBkZXBlbmRzID0gbmV3IEFycmF5KHV1aWRMaXN0Lmxlbmd0aCk7XG5cbiAgICAgICAgLy8gZGVjbGFyZSBkZXBlbmRzIGFzc2V0c1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdXVpZExpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGRlcGVuZFV1aWQgPSB1dWlkTGlzdFtpXTtcbiAgICAgICAgICAgIGRlcGVuZHNbaV0gPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3V1aWQnLFxuICAgICAgICAgICAgICAgIHV1aWQ6IGRlcGVuZFV1aWQsXG4gICAgICAgICAgICAgICAgX293bmVyOiBvYmpMaXN0W2ldLFxuICAgICAgICAgICAgICAgIF9vd25lclByb3A6IHByb3BMaXN0W2ldLFxuICAgICAgICAgICAgICAgIF9zdGlsbFVzZVVybDogc3RpbGxVc2VVcmxbaV1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBsb2FkIG5hdGl2ZSBvYmplY3QgKEltYWdlL0F1ZGlvKSBhcyBkZXBlbmRzXG4gICAgICAgIGlmIChhc3NldC5fbmF0aXZlICYmICFhc3NldC5jb25zdHJ1Y3Rvci5wcmV2ZW50UHJlbG9hZE5hdGl2ZU9iamVjdCkge1xuICAgICAgICAgICAgZGVwZW5kcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB1cmw6IGFzc2V0Lm5hdGl2ZVVybCxcbiAgICAgICAgICAgICAgICBfb3duZXI6IGFzc2V0LFxuICAgICAgICAgICAgICAgIF9vd25lclByb3A6ICdfbmF0aXZlQXNzZXQnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGVwZW5kcztcbn1cblxuZnVuY3Rpb24gbG9hZERlcGVuZHMgKHBpcGVsaW5lLCBpdGVtLCBhc3NldCwgZGVwZW5kcywgY2FsbGJhY2spIHtcbiAgICAvLyBQcmVkZWZpbmUgY29udGVudCBmb3IgZGVwZW5kZW5jaWVzIHVzYWdlXG4gICAgaXRlbS5jb250ZW50ID0gYXNzZXQ7XG4gICAgdmFyIGRlcGVuZEtleXMgPSBpdGVtLmRlcGVuZEtleXM7XG4gICAgcGlwZWxpbmUuZmxvd0luRGVwcyhpdGVtLCBkZXBlbmRzLCBmdW5jdGlvbiAoZXJyb3JzLCBpdGVtcykge1xuICAgICAgICB2YXIgaXRlbSwgbWlzc2luZ0Fzc2V0UmVwb3J0ZXI7XG4gICAgICAgIHZhciBpdGVtc01hcCA9IGl0ZW1zLm1hcDtcbiAgICAgICAgZm9yICh2YXIgc3JjIGluIGl0ZW1zTWFwKSB7XG4gICAgICAgICAgICBpdGVtID0gaXRlbXNNYXBbc3JjXTtcbiAgICAgICAgICAgIGlmIChpdGVtLnV1aWQgJiYgaXRlbS5jb250ZW50KSB7XG4gICAgICAgICAgICAgICAgaXRlbS5jb250ZW50Ll91dWlkID0gaXRlbS51dWlkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbG9hZENhbGxiYWNrIChpdGVtKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBpdGVtLmNvbnRlbnQ7XG4gICAgICAgICAgICBpZiAodGhpcy5fc3RpbGxVc2VVcmwpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9ICh2YWx1ZSAmJiBjYy5SYXdBc3NldC53YXNSYXdBc3NldFR5cGUodmFsdWUuY29uc3RydWN0b3IpKSA/IHZhbHVlLm5hdGl2ZVVybCA6IGl0ZW0ucmF3VXJsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX293bmVyUHJvcCA9PT0gJ19uYXRpdmVBc3NldCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vd25lci51cmwgPSBpdGVtLnVybDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX293bmVyW3RoaXMuX293bmVyUHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIGlmIChpdGVtLnV1aWQgIT09IGFzc2V0Ll91dWlkICYmIGRlcGVuZEtleXMuaW5kZXhPZihpdGVtLmlkKSA8IDApIHtcbiAgICAgICAgICAgICAgICBkZXBlbmRLZXlzLnB1c2goaXRlbS5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGVwZW5kcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGRlcCA9IGRlcGVuZHNbaV07XG4gICAgICAgICAgICB2YXIgZGVwZW5kU3JjID0gZGVwLnV1aWQ7XG4gICAgICAgICAgICB2YXIgZGVwZW5kVXJsID0gZGVwLnVybDtcbiAgICAgICAgICAgIHZhciBkZXBlbmRPYmogPSBkZXAuX293bmVyO1xuICAgICAgICAgICAgdmFyIGRlcGVuZFByb3AgPSBkZXAuX293bmVyUHJvcDtcbiAgICAgICAgICAgIGl0ZW0gPSBpdGVtc01hcFtkZXBlbmRVcmxdO1xuICAgICAgICAgICAgaWYgKCFpdGVtKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBsb2FkQ2FsbGJhY2tDdHggPSBkZXA7XG5cbiAgICAgICAgICAgIGlmIChpdGVtLmNvbXBsZXRlIHx8IGl0ZW0uY29udGVudCkge1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChDQ19FRElUT1IgJiYgaXRlbS5lcnJvci5lcnJvckNvZGUgPT09ICdkYi5OT1RGT1VORCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbWlzc2luZ0Fzc2V0UmVwb3J0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgTWlzc2luZ09iamVjdFJlcG9ydGVyID0gRWRpdG9yLnJlcXVpcmUoJ2FwcDovL2VkaXRvci9wYWdlL3NjZW5lLXV0aWxzL21pc3Npbmctb2JqZWN0LXJlcG9ydGVyJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlzc2luZ0Fzc2V0UmVwb3J0ZXIgPSBuZXcgTWlzc2luZ09iamVjdFJlcG9ydGVyKGFzc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1pc3NpbmdBc3NldFJlcG9ydGVyLnN0YXNoQnlPd25lcihkZXBlbmRPYmosIGRlcGVuZFByb3AsIEVkaXRvci5zZXJpYWxpemUuYXNBc3NldChkZXBlbmRTcmMpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNjLl90aHJvdyhpdGVtLmVycm9yLm1lc3NhZ2UgfHwgaXRlbS5lcnJvci5lcnJvck1lc3NhZ2UgfHwgaXRlbS5lcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxvYWRDYWxsYmFjay5jYWxsKGxvYWRDYWxsYmFja0N0eCwgaXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gaXRlbSB3YXMgcmVtb3ZlZCBmcm9tIGNhY2hlLCBidXQgcmVhZHkgaW4gcGlwZWxpbmUgYWN0dWFsbHlcbiAgICAgICAgICAgICAgICB2YXIgcXVldWUgPSBMb2FkaW5nSXRlbXMuZ2V0UXVldWUoaXRlbSk7XG4gICAgICAgICAgICAgICAgLy8gSGFjayB0byBnZXQgYSBiZXR0ZXIgYmVoYXZpb3JcbiAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IHF1ZXVlLl9jYWxsYmFja1RhYmxlW2RlcGVuZFNyY107XG4gICAgICAgICAgICAgICAgaWYgKGxpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdC51bnNoaWZ0KGxvYWRDYWxsYmFjaywgbG9hZENhbGxiYWNrQ3R4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlLmFkZExpc3RlbmVyKGRlcGVuZFNyYywgbG9hZENhbGxiYWNrLCBsb2FkQ2FsbGJhY2tDdHgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBFbWl0IGRlcGVuZGVuY3kgZXJyb3JzIGluIHJ1bnRpbWUsIGJ1dCBub3QgaW4gZWRpdG9yLFxuICAgICAgICAvLyBiZWNhdXNlIGVkaXRvciBuZWVkIHRvIG9wZW4gdGhlIHNjZW5lIC8gcHJlZmFiIHRvIGxldCB1c2VyIGZpeCBtaXNzaW5nIGFzc2V0IGlzc3Vlc1xuICAgICAgICBpZiAoQ0NfRURJVE9SICYmIG1pc3NpbmdBc3NldFJlcG9ydGVyKSB7XG4gICAgICAgICAgICBtaXNzaW5nQXNzZXRSZXBvcnRlci5yZXBvcnRCeU93bmVyKCk7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBhc3NldCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWVycm9ycyAmJiBhc3NldC5vbkxvYWQpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBhc3NldC5vbkxvYWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2MuX3Rocm93KGUpO1xuICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWxsYmFjayhlcnJvcnMsIGFzc2V0KTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG4vLyBjYW4gZGVmZXJyZWQgbG9hZCByYXcgYXNzZXRzIGluIHJ1bnRpbWVcbmZ1bmN0aW9uIGNhbkRlZmVycmVkTG9hZCAoYXNzZXQsIGl0ZW0sIGlzU2NlbmUpIHtcbiAgICBpZiAoQ0NfRURJVE9SKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIHJlcyA9IGl0ZW0uZGVmZXJyZWRMb2FkUmF3O1xuICAgIGlmIChyZXMpIHtcbiAgICAgICAgLy8gY2hlY2sgaWYgYXNzZXQgc3VwcG9ydCBkZWZlcnJlZFxuICAgICAgICBpZiAoKGFzc2V0IGluc3RhbmNlb2YgY2MuQXNzZXQpICYmIGFzc2V0LmNvbnN0cnVjdG9yLnByZXZlbnREZWZlcnJlZExvYWREZXBlbmRlbnRzKSB7XG4gICAgICAgICAgICByZXMgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChpc1NjZW5lKSB7XG4gICAgICAgIGlmIChhc3NldCBpbnN0YW5jZW9mIGNjLlNjZW5lQXNzZXQgfHwgYXNzZXQgaW5zdGFuY2VvZiBjYy5QcmVmYWIpIHtcbiAgICAgICAgICAgIHJlcyA9IGFzc2V0LmFzeW5jTG9hZEFzc2V0cztcbiAgICAgICAgICAgIC8vaWYgKHJlcykge1xuICAgICAgICAgICAgLy8gICAgY2MubG9nKCdkZWZlcnJlZCBsb2FkIHJhdyBhc3NldHMgZm9yICcgKyBpdGVtLmlkKTtcbiAgICAgICAgICAgIC8vfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIGxvYWRVdWlkIChpdGVtLCBjYWxsYmFjaykge1xuICAgIHZhciBqc29uO1xuICAgIGlmICh0eXBlb2YgaXRlbS5jb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAganNvbiA9IEpTT04ucGFyc2UoaXRlbS5jb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihkZWJ1Zy5nZXRFcnJvcig0OTIzLCBpdGVtLmlkLCBlLnN0YWNrKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGl0ZW0uY29udGVudCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAganNvbiA9IGl0ZW0uY29udGVudDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoZGVidWcuZ2V0RXJyb3IoNDkyNCkpO1xuICAgIH1cblxuICAgIHZhciBjbGFzc0ZpbmRlciwgbWlzc2luZ0NsYXNzO1xuICAgIHZhciBpc1NjZW5lID0gaXNTY2VuZU9iaihqc29uKTtcbiAgICBpZiAoaXNTY2VuZSkge1xuICAgICAgICBpZiAoQ0NfRURJVE9SKSB7XG4gICAgICAgICAgICBtaXNzaW5nQ2xhc3MgPSBNaXNzaW5nQ2xhc3M7XG4gICAgICAgICAgICBjbGFzc0ZpbmRlciA9IGZ1bmN0aW9uICh0eXBlLCBkYXRhLCBvd25lciwgcHJvcE5hbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gbWlzc2luZ0NsYXNzLmNsYXNzRmluZGVyKHR5cGUsIGRhdGEsIG93bmVyLCBwcm9wTmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY2MuX01pc3NpbmdTY3JpcHQuZ2V0TWlzc2luZ1dyYXBwZXIodHlwZSwgZGF0YSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2xhc3NGaW5kZXIub25EZXJlZmVyZW5jZWQgPSBtaXNzaW5nQ2xhc3MuY2xhc3NGaW5kZXIub25EZXJlZmVyZW5jZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjbGFzc0ZpbmRlciA9IGNjLl9NaXNzaW5nU2NyaXB0LnNhZmVGaW5kQ2xhc3M7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNsYXNzRmluZGVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgICB2YXIgY2xzID0ganMuX2dldENsYXNzQnlJZChpZCk7XG4gICAgICAgICAgICBpZiAoY2xzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNscztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNjLndhcm5JRCg0OTAzLCBpZCk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciB0ZEluZm8gPSBjYy5kZXNlcmlhbGl6ZS5EZXRhaWxzLnBvb2wuZ2V0KCk7XG5cbiAgICB2YXIgYXNzZXQ7XG4gICAgdHJ5IHtcbiAgICAgICAgYXNzZXQgPSBjYy5kZXNlcmlhbGl6ZShqc29uLCB0ZEluZm8sIHtcbiAgICAgICAgICAgIGNsYXNzRmluZGVyOiBjbGFzc0ZpbmRlcixcbiAgICAgICAgICAgIHRhcmdldDogaXRlbS5leGlzdGluZ0Fzc2V0LFxuICAgICAgICAgICAgY3VzdG9tRW52OiBpdGVtXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBjYy5kZXNlcmlhbGl6ZS5EZXRhaWxzLnBvb2wucHV0KHRkSW5mbyk7XG4gICAgICAgIHZhciBlcnIgPSBDQ19KU0IgfHwgQ0NfUlVOVElNRSA/IChlICsgJ1xcbicgKyBlLnN0YWNrKSA6IGUuc3RhY2s7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoZGVidWcuZ2V0RXJyb3IoNDkyNSwgaXRlbS5pZCwgZXJyKSk7XG4gICAgfVxuXG4gICAgYXNzZXQuX3V1aWQgPSBpdGVtLnV1aWQ7XG4gICAgYXNzZXQudXJsID0gYXNzZXQubmF0aXZlVXJsO1xuXG4gICAgaWYgKENDX0VESVRPUiAmJiBtaXNzaW5nQ2xhc3MpIHtcbiAgICAgICAgbWlzc2luZ0NsYXNzLnJlcG9ydE1pc3NpbmdDbGFzcyhhc3NldCk7XG4gICAgICAgIG1pc3NpbmdDbGFzcy5yZXNldCgpO1xuICAgIH1cblxuICAgIHZhciBkZWZlcnJlZExvYWQgPSBjYW5EZWZlcnJlZExvYWQoYXNzZXQsIGl0ZW0sIGlzU2NlbmUpO1xuICAgIHZhciBkZXBlbmRzID0gcGFyc2VEZXBlbmRzKGl0ZW0sIGFzc2V0LCB0ZEluZm8sIGRlZmVycmVkTG9hZCk7XG5cbiAgICBjYy5kZXNlcmlhbGl6ZS5EZXRhaWxzLnBvb2wucHV0KHRkSW5mbyk7XG5cbiAgICBpZiAoZGVwZW5kcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaWYgKGFzc2V0Lm9uTG9hZCkgYXNzZXQub25Mb2FkKCk7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBhc3NldCk7XG4gICAgfVxuICAgIGxvYWREZXBlbmRzKHRoaXMucGlwZWxpbmUsIGl0ZW0sIGFzc2V0LCBkZXBlbmRzLCBjYWxsYmFjayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbG9hZFV1aWQ7XG5sb2FkVXVpZC5pc1NjZW5lT2JqID0gaXNTY2VuZU9iajtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAxMy0yMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiAgd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbnZhciBNaXNzaW5nQ2xhc3MgPSBDQ19FRElUT1IgJiYgRWRpdG9yLnJlcXVpcmUoJ2FwcDovL2VkaXRvci9wYWdlL3NjZW5lLXV0aWxzL21pc3NpbmctY2xhc3MtcmVwb3J0ZXInKS5NaXNzaW5nQ2xhc3M7XG52YXIganMgPSByZXF1aXJlKCcuLi9wbGF0Zm9ybS9qcycpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnLi4vQ0NEZWJ1ZycpO1xucmVxdWlyZSgnLi4vcGxhdGZvcm0vZGVzZXJpYWxpemUnKTtcbnZhciBMb2FkaW5nSXRlbXMgPSByZXF1aXJlKCcuL2xvYWRpbmctaXRlbXMnKTtcblxuZnVuY3Rpb24gaXNTY2VuZU9iaihqc29uKSB7XG4gICAgdmFyIFNDRU5FX0lEID0gJ2NjLlNjZW5lJztcbiAgICB2YXIgUFJFRkFCX0lEID0gJ2NjLlByZWZhYic7XG4gICAgcmV0dXJuIGpzb24gJiYgKGpzb25bMF0gJiYganNvblswXS5fX3R5cGVfXyA9PT0gU0NFTkVfSUQgfHwganNvblsxXSAmJiBqc29uWzFdLl9fdHlwZV9fID09PSBTQ0VORV9JRCB8fCBqc29uWzBdICYmIGpzb25bMF0uX190eXBlX18gPT09IFBSRUZBQl9JRCk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRGVwZW5kcyhpdGVtLCBhc3NldCwgdGRJbmZvLCBkZWZlcnJlZExvYWRSYXdBc3NldHNJblJ1bnRpbWUpIHtcbiAgICB2YXIgdXVpZExpc3QgPSB0ZEluZm8udXVpZExpc3Q7XG4gICAgdmFyIG9iakxpc3QgPSB0ZEluZm8udXVpZE9iakxpc3Q7XG4gICAgdmFyIHByb3BMaXN0ID0gdGRJbmZvLnV1aWRQcm9wTGlzdDtcbiAgICB2YXIgc3RpbGxVc2VVcmwgPSB0ZEluZm8uX3N0aWxsVXNlVXJsO1xuICAgIHZhciBkZXBlbmRzO1xuICAgIHZhciBpLCBkZXBlbmRVdWlkO1xuICAgIC8vIGNhY2hlIGRlcGVuZGVuY2llcyBmb3IgYXV0byByZWxlYXNlXG4gICAgdmFyIGRlcGVuZEtleXMgPSBpdGVtLmRlcGVuZEtleXMgPSBbXTtcblxuICAgIGlmIChkZWZlcnJlZExvYWRSYXdBc3NldHNJblJ1bnRpbWUpIHtcbiAgICAgICAgZGVwZW5kcyA9IFtdO1xuICAgICAgICAvLyBwYXJzZSBkZXBlbmRzIGFzc2V0c1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdXVpZExpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGRlcGVuZFV1aWQgPSB1dWlkTGlzdFtpXTtcbiAgICAgICAgICAgIHZhciBvYmogPSBvYmpMaXN0W2ldO1xuICAgICAgICAgICAgdmFyIHByb3AgPSBwcm9wTGlzdFtpXTtcbiAgICAgICAgICAgIHZhciBpbmZvID0gY2MuQXNzZXRMaWJyYXJ5Ll9nZXRBc3NldEluZm9JblJ1bnRpbWUoZGVwZW5kVXVpZCk7XG4gICAgICAgICAgICBpZiAoaW5mby5yYXcpIHtcbiAgICAgICAgICAgICAgICAvLyBza2lwIHByZWxvYWRpbmcgcmF3IGFzc2V0c1xuICAgICAgICAgICAgICAgIHZhciB1cmwgPSBpbmZvLnVybDtcbiAgICAgICAgICAgICAgICBvYmpbcHJvcF0gPSB1cmw7XG4gICAgICAgICAgICAgICAgZGVwZW5kS2V5cy5wdXNoKHVybCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGRlY2xhcmUgZGVwZW5kcyBhc3NldHNcbiAgICAgICAgICAgICAgICBkZXBlbmRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAndXVpZCcsXG4gICAgICAgICAgICAgICAgICAgIHV1aWQ6IGRlcGVuZFV1aWQsXG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkTG9hZFJhdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgX293bmVyOiBvYmosXG4gICAgICAgICAgICAgICAgICAgIF9vd25lclByb3A6IHByb3AsXG4gICAgICAgICAgICAgICAgICAgIF9zdGlsbFVzZVVybDogc3RpbGxVc2VVcmxbaV1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGRlcGVuZHMgPSBuZXcgQXJyYXkodXVpZExpc3QubGVuZ3RoKTtcblxuICAgICAgICAvLyBkZWNsYXJlIGRlcGVuZHMgYXNzZXRzXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB1dWlkTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZGVwZW5kVXVpZCA9IHV1aWRMaXN0W2ldO1xuICAgICAgICAgICAgZGVwZW5kc1tpXSA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAndXVpZCcsXG4gICAgICAgICAgICAgICAgdXVpZDogZGVwZW5kVXVpZCxcbiAgICAgICAgICAgICAgICBfb3duZXI6IG9iakxpc3RbaV0sXG4gICAgICAgICAgICAgICAgX293bmVyUHJvcDogcHJvcExpc3RbaV0sXG4gICAgICAgICAgICAgICAgX3N0aWxsVXNlVXJsOiBzdGlsbFVzZVVybFtpXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGxvYWQgbmF0aXZlIG9iamVjdCAoSW1hZ2UvQXVkaW8pIGFzIGRlcGVuZHNcbiAgICAgICAgaWYgKGFzc2V0Ll9uYXRpdmUgJiYgIWFzc2V0LmNvbnN0cnVjdG9yLnByZXZlbnRQcmVsb2FkTmF0aXZlT2JqZWN0KSB7XG4gICAgICAgICAgICBkZXBlbmRzLnB1c2goe1xuICAgICAgICAgICAgICAgIHVybDogYXNzZXQubmF0aXZlVXJsLFxuICAgICAgICAgICAgICAgIF9vd25lcjogYXNzZXQsXG4gICAgICAgICAgICAgICAgX293bmVyUHJvcDogJ19uYXRpdmVBc3NldCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlcGVuZHM7XG59XG5cbmZ1bmN0aW9uIGxvYWREZXBlbmRzKHBpcGVsaW5lLCBpdGVtLCBhc3NldCwgZGVwZW5kcywgY2FsbGJhY2spIHtcbiAgICAvLyBQcmVkZWZpbmUgY29udGVudCBmb3IgZGVwZW5kZW5jaWVzIHVzYWdlXG4gICAgaXRlbS5jb250ZW50ID0gYXNzZXQ7XG4gICAgdmFyIGRlcGVuZEtleXMgPSBpdGVtLmRlcGVuZEtleXM7XG4gICAgcGlwZWxpbmUuZmxvd0luRGVwcyhpdGVtLCBkZXBlbmRzLCBmdW5jdGlvbiAoZXJyb3JzLCBpdGVtcykge1xuICAgICAgICB2YXIgaXRlbSwgbWlzc2luZ0Fzc2V0UmVwb3J0ZXI7XG4gICAgICAgIHZhciBpdGVtc01hcCA9IGl0ZW1zLm1hcDtcbiAgICAgICAgZm9yICh2YXIgc3JjIGluIGl0ZW1zTWFwKSB7XG4gICAgICAgICAgICBpdGVtID0gaXRlbXNNYXBbc3JjXTtcbiAgICAgICAgICAgIGlmIChpdGVtLnV1aWQgJiYgaXRlbS5jb250ZW50KSB7XG4gICAgICAgICAgICAgICAgaXRlbS5jb250ZW50Ll91dWlkID0gaXRlbS51dWlkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbG9hZENhbGxiYWNrKGl0ZW0pIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGl0ZW0uY29udGVudDtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zdGlsbFVzZVVybCkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgJiYgY2MuUmF3QXNzZXQud2FzUmF3QXNzZXRUeXBlKHZhbHVlLmNvbnN0cnVjdG9yKSA/IHZhbHVlLm5hdGl2ZVVybCA6IGl0ZW0ucmF3VXJsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX293bmVyUHJvcCA9PT0gJ19uYXRpdmVBc3NldCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vd25lci51cmwgPSBpdGVtLnVybDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX293bmVyW3RoaXMuX293bmVyUHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIGlmIChpdGVtLnV1aWQgIT09IGFzc2V0Ll91dWlkICYmIGRlcGVuZEtleXMuaW5kZXhPZihpdGVtLmlkKSA8IDApIHtcbiAgICAgICAgICAgICAgICBkZXBlbmRLZXlzLnB1c2goaXRlbS5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlcGVuZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBkZXAgPSBkZXBlbmRzW2ldO1xuICAgICAgICAgICAgdmFyIGRlcGVuZFNyYyA9IGRlcC51dWlkO1xuICAgICAgICAgICAgdmFyIGRlcGVuZFVybCA9IGRlcC51cmw7XG4gICAgICAgICAgICB2YXIgZGVwZW5kT2JqID0gZGVwLl9vd25lcjtcbiAgICAgICAgICAgIHZhciBkZXBlbmRQcm9wID0gZGVwLl9vd25lclByb3A7XG4gICAgICAgICAgICBpdGVtID0gaXRlbXNNYXBbZGVwZW5kVXJsXTtcbiAgICAgICAgICAgIGlmICghaXRlbSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbG9hZENhbGxiYWNrQ3R4ID0gZGVwO1xuXG4gICAgICAgICAgICBpZiAoaXRlbS5jb21wbGV0ZSB8fCBpdGVtLmNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoQ0NfRURJVE9SICYmIGl0ZW0uZXJyb3IuZXJyb3JDb2RlID09PSAnZGIuTk9URk9VTkQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1pc3NpbmdBc3NldFJlcG9ydGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIE1pc3NpbmdPYmplY3RSZXBvcnRlciA9IEVkaXRvci5yZXF1aXJlKCdhcHA6Ly9lZGl0b3IvcGFnZS9zY2VuZS11dGlscy9taXNzaW5nLW9iamVjdC1yZXBvcnRlcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pc3NpbmdBc3NldFJlcG9ydGVyID0gbmV3IE1pc3NpbmdPYmplY3RSZXBvcnRlcihhc3NldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBtaXNzaW5nQXNzZXRSZXBvcnRlci5zdGFzaEJ5T3duZXIoZGVwZW5kT2JqLCBkZXBlbmRQcm9wLCBFZGl0b3Iuc2VyaWFsaXplLmFzQXNzZXQoZGVwZW5kU3JjKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYy5fdGhyb3coaXRlbS5lcnJvci5tZXNzYWdlIHx8IGl0ZW0uZXJyb3IuZXJyb3JNZXNzYWdlIHx8IGl0ZW0uZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbG9hZENhbGxiYWNrLmNhbGwobG9hZENhbGxiYWNrQ3R4LCBpdGVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGl0ZW0gd2FzIHJlbW92ZWQgZnJvbSBjYWNoZSwgYnV0IHJlYWR5IGluIHBpcGVsaW5lIGFjdHVhbGx5XG4gICAgICAgICAgICAgICAgdmFyIHF1ZXVlID0gTG9hZGluZ0l0ZW1zLmdldFF1ZXVlKGl0ZW0pO1xuICAgICAgICAgICAgICAgIC8vIEhhY2sgdG8gZ2V0IGEgYmV0dGVyIGJlaGF2aW9yXG4gICAgICAgICAgICAgICAgdmFyIGxpc3QgPSBxdWV1ZS5fY2FsbGJhY2tUYWJsZVtkZXBlbmRTcmNdO1xuICAgICAgICAgICAgICAgIGlmIChsaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3QudW5zaGlmdChsb2FkQ2FsbGJhY2ssIGxvYWRDYWxsYmFja0N0eCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcXVldWUuYWRkTGlzdGVuZXIoZGVwZW5kU3JjLCBsb2FkQ2FsbGJhY2ssIGxvYWRDYWxsYmFja0N0eCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEVtaXQgZGVwZW5kZW5jeSBlcnJvcnMgaW4gcnVudGltZSwgYnV0IG5vdCBpbiBlZGl0b3IsXG4gICAgICAgIC8vIGJlY2F1c2UgZWRpdG9yIG5lZWQgdG8gb3BlbiB0aGUgc2NlbmUgLyBwcmVmYWIgdG8gbGV0IHVzZXIgZml4IG1pc3NpbmcgYXNzZXQgaXNzdWVzXG4gICAgICAgIGlmIChDQ19FRElUT1IgJiYgbWlzc2luZ0Fzc2V0UmVwb3J0ZXIpIHtcbiAgICAgICAgICAgIG1pc3NpbmdBc3NldFJlcG9ydGVyLnJlcG9ydEJ5T3duZXIoKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGFzc2V0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghZXJyb3JzICYmIGFzc2V0Lm9uTG9hZCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0Lm9uTG9hZCgpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2MuX3Rocm93KGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxiYWNrKGVycm9ycywgYXNzZXQpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbi8vIGNhbiBkZWZlcnJlZCBsb2FkIHJhdyBhc3NldHMgaW4gcnVudGltZVxuZnVuY3Rpb24gY2FuRGVmZXJyZWRMb2FkKGFzc2V0LCBpdGVtLCBpc1NjZW5lKSB7XG4gICAgaWYgKENDX0VESVRPUikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciByZXMgPSBpdGVtLmRlZmVycmVkTG9hZFJhdztcbiAgICBpZiAocmVzKSB7XG4gICAgICAgIC8vIGNoZWNrIGlmIGFzc2V0IHN1cHBvcnQgZGVmZXJyZWRcbiAgICAgICAgaWYgKGFzc2V0IGluc3RhbmNlb2YgY2MuQXNzZXQgJiYgYXNzZXQuY29uc3RydWN0b3IucHJldmVudERlZmVycmVkTG9hZERlcGVuZGVudHMpIHtcbiAgICAgICAgICAgIHJlcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1NjZW5lKSB7XG4gICAgICAgIGlmIChhc3NldCBpbnN0YW5jZW9mIGNjLlNjZW5lQXNzZXQgfHwgYXNzZXQgaW5zdGFuY2VvZiBjYy5QcmVmYWIpIHtcbiAgICAgICAgICAgIHJlcyA9IGFzc2V0LmFzeW5jTG9hZEFzc2V0cztcbiAgICAgICAgICAgIC8vaWYgKHJlcykge1xuICAgICAgICAgICAgLy8gICAgY2MubG9nKCdkZWZlcnJlZCBsb2FkIHJhdyBhc3NldHMgZm9yICcgKyBpdGVtLmlkKTtcbiAgICAgICAgICAgIC8vfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIGxvYWRVdWlkKGl0ZW0sIGNhbGxiYWNrKSB7XG4gICAgdmFyIGpzb247XG4gICAgaWYgKHR5cGVvZiBpdGVtLmNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBqc29uID0gSlNPTi5wYXJzZShpdGVtLmNvbnRlbnQpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKGRlYnVnLmdldEVycm9yKDQ5MjMsIGl0ZW0uaWQsIGUuc3RhY2spKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoX3R5cGVvZihpdGVtLmNvbnRlbnQpID09PSAnb2JqZWN0Jykge1xuICAgICAgICBqc29uID0gaXRlbS5jb250ZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoZGVidWcuZ2V0RXJyb3IoNDkyNCkpO1xuICAgIH1cblxuICAgIHZhciBjbGFzc0ZpbmRlciwgbWlzc2luZ0NsYXNzO1xuICAgIHZhciBpc1NjZW5lID0gaXNTY2VuZU9iaihqc29uKTtcbiAgICBpZiAoaXNTY2VuZSkge1xuICAgICAgICBpZiAoQ0NfRURJVE9SKSB7XG4gICAgICAgICAgICBtaXNzaW5nQ2xhc3MgPSBNaXNzaW5nQ2xhc3M7XG4gICAgICAgICAgICBjbGFzc0ZpbmRlciA9IGZ1bmN0aW9uIGNsYXNzRmluZGVyKHR5cGUsIGRhdGEsIG93bmVyLCBwcm9wTmFtZSkge1xuICAgICAgICAgICAgICAgIHZhciByZXMgPSBtaXNzaW5nQ2xhc3MuY2xhc3NGaW5kZXIodHlwZSwgZGF0YSwgb3duZXIsIHByb3BOYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjYy5fTWlzc2luZ1NjcmlwdC5nZXRNaXNzaW5nV3JhcHBlcih0eXBlLCBkYXRhKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjbGFzc0ZpbmRlci5vbkRlcmVmZXJlbmNlZCA9IG1pc3NpbmdDbGFzcy5jbGFzc0ZpbmRlci5vbkRlcmVmZXJlbmNlZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNsYXNzRmluZGVyID0gY2MuX01pc3NpbmdTY3JpcHQuc2FmZUZpbmRDbGFzcztcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNsYXNzRmluZGVyID0gZnVuY3Rpb24gY2xhc3NGaW5kZXIoaWQpIHtcbiAgICAgICAgICAgIHZhciBjbHMgPSBqcy5fZ2V0Q2xhc3NCeUlkKGlkKTtcbiAgICAgICAgICAgIGlmIChjbHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2Mud2FybklEKDQ5MDMsIGlkKTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Q7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIHRkSW5mbyA9IGNjLmRlc2VyaWFsaXplLkRldGFpbHMucG9vbC5nZXQoKTtcblxuICAgIHZhciBhc3NldDtcbiAgICB0cnkge1xuICAgICAgICBhc3NldCA9IGNjLmRlc2VyaWFsaXplKGpzb24sIHRkSW5mbywge1xuICAgICAgICAgICAgY2xhc3NGaW5kZXI6IGNsYXNzRmluZGVyLFxuICAgICAgICAgICAgdGFyZ2V0OiBpdGVtLmV4aXN0aW5nQXNzZXQsXG4gICAgICAgICAgICBjdXN0b21FbnY6IGl0ZW1cbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYy5kZXNlcmlhbGl6ZS5EZXRhaWxzLnBvb2wucHV0KHRkSW5mbyk7XG4gICAgICAgIHZhciBlcnIgPSBDQ19KU0IgfHwgQ0NfUlVOVElNRSA/IGUgKyAnXFxuJyArIGUuc3RhY2sgOiBlLnN0YWNrO1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKGRlYnVnLmdldEVycm9yKDQ5MjUsIGl0ZW0uaWQsIGVycikpO1xuICAgIH1cblxuICAgIGFzc2V0Ll91dWlkID0gaXRlbS51dWlkO1xuICAgIGFzc2V0LnVybCA9IGFzc2V0Lm5hdGl2ZVVybDtcblxuICAgIGlmIChDQ19FRElUT1IgJiYgbWlzc2luZ0NsYXNzKSB7XG4gICAgICAgIG1pc3NpbmdDbGFzcy5yZXBvcnRNaXNzaW5nQ2xhc3MoYXNzZXQpO1xuICAgICAgICBtaXNzaW5nQ2xhc3MucmVzZXQoKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmZXJyZWRMb2FkID0gY2FuRGVmZXJyZWRMb2FkKGFzc2V0LCBpdGVtLCBpc1NjZW5lKTtcbiAgICB2YXIgZGVwZW5kcyA9IHBhcnNlRGVwZW5kcyhpdGVtLCBhc3NldCwgdGRJbmZvLCBkZWZlcnJlZExvYWQpO1xuXG4gICAgY2MuZGVzZXJpYWxpemUuRGV0YWlscy5wb29sLnB1dCh0ZEluZm8pO1xuXG4gICAgaWYgKGRlcGVuZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGlmIChhc3NldC5vbkxvYWQpIGFzc2V0Lm9uTG9hZCgpO1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgYXNzZXQpO1xuICAgIH1cbiAgICBsb2FkRGVwZW5kcyh0aGlzLnBpcGVsaW5lLCBpdGVtLCBhc3NldCwgZGVwZW5kcywgY2FsbGJhY2spO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxvYWRVdWlkO1xubG9hZFV1aWQuaXNTY2VuZU9iaiA9IGlzU2NlbmVPYmo7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJblYxYVdRdGJHOWhaR1Z5TG1weklsMHNJbTVoYldWeklqcGJJazFwYzNOcGJtZERiR0Z6Y3lJc0lrTkRYMFZFU1ZSUFVpSXNJa1ZrYVhSdmNpSXNJbkpsY1hWcGNtVWlMQ0pxY3lJc0ltUmxZblZuSWl3aVRHOWhaR2x1WjBsMFpXMXpJaXdpYVhOVFkyVnVaVTlpYWlJc0ltcHpiMjRpTENKVFEwVk9SVjlKUkNJc0lsQlNSVVpCUWw5SlJDSXNJbDlmZEhsd1pWOWZJaXdpY0dGeWMyVkVaWEJsYm1Seklpd2lhWFJsYlNJc0ltRnpjMlYwSWl3aWRHUkpibVp2SWl3aVpHVm1aWEp5WldSTWIyRmtVbUYzUVhOelpYUnpTVzVTZFc1MGFXMWxJaXdpZFhWcFpFeHBjM1FpTENKdlltcE1hWE4wSWl3aWRYVnBaRTlpYWt4cGMzUWlMQ0p3Y205d1RHbHpkQ0lzSW5WMWFXUlFjbTl3VEdsemRDSXNJbk4wYVd4c1ZYTmxWWEpzSWl3aVgzTjBhV3hzVlhObFZYSnNJaXdpWkdWd1pXNWtjeUlzSW1raUxDSmtaWEJsYm1SVmRXbGtJaXdpWkdWd1pXNWtTMlY1Y3lJc0lteGxibWQwYUNJc0ltOWlhaUlzSW5CeWIzQWlMQ0pwYm1adklpd2lZMk1pTENKQmMzTmxkRXhwWW5KaGNua2lMQ0pmWjJWMFFYTnpaWFJKYm1adlNXNVNkVzUwYVcxbElpd2ljbUYzSWl3aWRYSnNJaXdpY0hWemFDSXNJblI1Y0dVaUxDSjFkV2xrSWl3aVpHVm1aWEp5WldSTWIyRmtVbUYzSWl3aVgyOTNibVZ5SWl3aVgyOTNibVZ5VUhKdmNDSXNJa0Z5Y21GNUlpd2lYMjVoZEdsMlpTSXNJbU52Ym5OMGNuVmpkRzl5SWl3aWNISmxkbVZ1ZEZCeVpXeHZZV1JPWVhScGRtVlBZbXBsWTNRaUxDSnVZWFJwZG1WVmNtd2lMQ0pzYjJGa1JHVndaVzVrY3lJc0luQnBjR1ZzYVc1bElpd2lZMkZzYkdKaFkyc2lMQ0pqYjI1MFpXNTBJaXdpWm14dmQwbHVSR1Z3Y3lJc0ltVnljbTl5Y3lJc0ltbDBaVzF6SWl3aWJXbHpjMmx1WjBGemMyVjBVbVZ3YjNKMFpYSWlMQ0pwZEdWdGMwMWhjQ0lzSW0xaGNDSXNJbk55WXlJc0lsOTFkV2xrSWl3aWJHOWhaRU5oYkd4aVlXTnJJaXdpZG1Gc2RXVWlMQ0pTWVhkQmMzTmxkQ0lzSW5kaGMxSmhkMEZ6YzJWMFZIbHdaU0lzSW5KaGQxVnliQ0lzSW1sdVpHVjRUMllpTENKcFpDSXNJbVJsY0NJc0ltUmxjR1Z1WkZOeVl5SXNJbVJsY0dWdVpGVnliQ0lzSW1SbGNHVnVaRTlpYWlJc0ltUmxjR1Z1WkZCeWIzQWlMQ0pzYjJGa1EyRnNiR0poWTJ0RGRIZ2lMQ0pqYjIxd2JHVjBaU0lzSW1WeWNtOXlJaXdpWlhKeWIzSkRiMlJsSWl3aVRXbHpjMmx1WjA5aWFtVmpkRkpsY0c5eWRHVnlJaXdpYzNSaGMyaENlVTkzYm1WeUlpd2ljMlZ5YVdGc2FYcGxJaXdpWVhOQmMzTmxkQ0lzSWw5MGFISnZkeUlzSW0xbGMzTmhaMlVpTENKbGNuSnZjazFsYzNOaFoyVWlMQ0pqWVd4c0lpd2ljWFZsZFdVaUxDSm5aWFJSZFdWMVpTSXNJbXhwYzNRaUxDSmZZMkZzYkdKaFkydFVZV0pzWlNJc0luVnVjMmhwWm5RaUxDSmhaR1JNYVhOMFpXNWxjaUlzSW5KbGNHOXlkRUo1VDNkdVpYSWlMQ0p2Ymt4dllXUWlMQ0psSWl3aVkyRnVSR1ZtWlhKeVpXUk1iMkZrSWl3aWFYTlRZMlZ1WlNJc0luSmxjeUlzSWtGemMyVjBJaXdpY0hKbGRtVnVkRVJsWm1WeWNtVmtURzloWkVSbGNHVnVaR1Z1ZEhNaUxDSlRZMlZ1WlVGemMyVjBJaXdpVUhKbFptRmlJaXdpWVhONWJtTk1iMkZrUVhOelpYUnpJaXdpYkc5aFpGVjFhV1FpTENKS1UwOU9JaXdpY0dGeWMyVWlMQ0pGY25KdmNpSXNJbWRsZEVWeWNtOXlJaXdpYzNSaFkyc2lMQ0pqYkdGemMwWnBibVJsY2lJc0ltMXBjM05wYm1kRGJHRnpjeUlzSW1SaGRHRWlMQ0p2ZDI1bGNpSXNJbkJ5YjNCT1lXMWxJaXdpWDAxcGMzTnBibWRUWTNKcGNIUWlMQ0puWlhSTmFYTnphVzVuVjNKaGNIQmxjaUlzSW05dVJHVnlaV1psY21WdVkyVmtJaXdpYzJGbVpVWnBibVJEYkdGemN5SXNJbU5zY3lJc0lsOW5aWFJEYkdGemMwSjVTV1FpTENKM1lYSnVTVVFpTENKUFltcGxZM1FpTENKa1pYTmxjbWxoYkdsNlpTSXNJa1JsZEdGcGJITWlMQ0p3YjI5c0lpd2laMlYwSWl3aWRHRnlaMlYwSWl3aVpYaHBjM1JwYm1kQmMzTmxkQ0lzSW1OMWMzUnZiVVZ1ZGlJc0luQjFkQ0lzSW1WeWNpSXNJa05EWDBwVFFpSXNJa05EWDFKVlRsUkpUVVVpTENKeVpYQnZjblJOYVhOemFXNW5RMnhoYzNNaUxDSnlaWE5sZENJc0ltUmxabVZ5Y21Wa1RHOWhaQ0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3UVVGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRXdRa0VzU1VGQlRVRXNaVUZCWlVNc1lVRkJZVU1zVDBGQlQwTXNUMEZCVUN4RFFVRmxMSE5FUVVGbUxFVkJRWFZGU0N4WlFVRjZSenRCUVVOQkxFbEJRVTFKTEV0QlFVdEVMRkZCUVZFc1owSkJRVklzUTBGQldEdEJRVU5CTEVsQlFVMUZMRkZCUVZGR0xGRkJRVkVzV1VGQlVpeERRVUZrTzBGQlEwRkJMRkZCUVZFc2VVSkJRVkk3UVVGRFFTeEpRVUZOUnl4bFFVRmxTQ3hSUVVGUkxHbENRVUZTTEVOQlFYSkNPenRCUVVWQkxGTkJRVk5KTEZWQlFWUXNRMEZCY1VKRExFbEJRWEpDTEVWQlFUSkNPMEZCUTNaQ0xGRkJRVWxETEZkQlFWY3NWVUZCWmp0QlFVTkJMRkZCUVVsRExGbEJRVmtzVjBGQmFFSTdRVUZEUVN4WFFVRlBSaXhUUVVOTFFTeExRVUZMTEVOQlFVd3NTMEZCVjBFc1MwRkJTeXhEUVVGTUxFVkJRVkZITEZGQlFWSXNTMEZCY1VKR0xGRkJRV3BETEVsQlEwTkVMRXRCUVVzc1EwRkJUQ3hMUVVGWFFTeExRVUZMTEVOQlFVd3NSVUZCVVVjc1VVRkJVaXhMUVVGeFFrWXNVVUZFYWtNc1NVRkZRMFFzUzBGQlN5eERRVUZNTEV0QlFWZEJMRXRCUVVzc1EwRkJUQ3hGUVVGUlJ5eFJRVUZTTEV0QlFYRkNSQ3hUUVVoeVF5eERRVUZRTzBGQlMwZzdPMEZCUlVRc1UwRkJVMFVzV1VGQlZDeERRVUYxUWtNc1NVRkJka0lzUlVGQk5rSkRMRXRCUVRkQ0xFVkJRVzlEUXl4TlFVRndReXhGUVVFMFEwTXNPRUpCUVRWRExFVkJRVFJGTzBGQlEzaEZMRkZCUVVsRExGZEJRVmRHTEU5QlFVOUZMRkZCUVhSQ08wRkJRMEVzVVVGQlNVTXNWVUZCVlVnc1QwRkJUMGtzVjBGQmNrSTdRVUZEUVN4UlFVRkpReXhYUVVGWFRDeFBRVUZQVFN4WlFVRjBRanRCUVVOQkxGRkJRVWxETEdOQlFXTlFMRTlCUVU5UkxGbEJRWHBDTzBGQlEwRXNVVUZCU1VNc1QwRkJTanRCUVVOQkxGRkJRVWxETEVOQlFVb3NSVUZCVDBNc1ZVRkJVRHRCUVVOQk8wRkJRMEVzVVVGQlNVTXNZVUZCWVdRc1MwRkJTMk1zVlVGQlRDeEhRVUZyUWl4RlFVRnVRenM3UVVGRlFTeFJRVUZKV0N3NFFrRkJTaXhGUVVGdlF6dEJRVU5vUTFFc2EwSkJRVlVzUlVGQlZqdEJRVU5CTzBGQlEwRXNZVUZCUzBNc1NVRkJTU3hEUVVGVUxFVkJRVmxCTEVsQlFVbFNMRk5CUVZOWExFMUJRWHBDTEVWQlFXbERTQ3hIUVVGcVF5eEZRVUZ6UXp0QlFVTnNRME1zZVVKQlFXRlVMRk5CUVZOUkxFTkJRVlFzUTBGQllqdEJRVU5CTEdkQ1FVRkpTU3hOUVVGTldDeFJRVUZSVHl4RFFVRlNMRU5CUVZZN1FVRkRRU3huUWtGQlNVc3NUMEZCVDFZc1UwRkJVMHNzUTBGQlZDeERRVUZZTzBGQlEwRXNaMEpCUVVsTkxFOUJRVTlETEVkQlFVZERMRmxCUVVnc1EwRkJaMEpETEhOQ1FVRm9RaXhEUVVGMVExSXNWVUZCZGtNc1EwRkJXRHRCUVVOQkxHZENRVUZKU3l4TFFVRkxTU3hIUVVGVUxFVkJRV003UVVGRFZqdEJRVU5CTEc5Q1FVRkpReXhOUVVGTlRDeExRVUZMU3l4SFFVRm1PMEZCUTBGUUxHOUNRVUZKUXl4SlFVRktMRWxCUVZsTkxFZEJRVm83UVVGRFFWUXNNa0pCUVZkVkxFbEJRVmdzUTBGQlowSkVMRWRCUVdoQ08wRkJRMGdzWVVGTVJDeE5RVTFMTzBGQlEwUTdRVUZEUVZvc2QwSkJRVkZoTEVsQlFWSXNRMEZCWVR0QlFVTlVReXd3UWtGQlRTeE5RVVJITzBGQlJWUkRMREJDUVVGTllpeFZRVVpITzBGQlIxUmpMSEZEUVVGcFFpeEpRVWhTTzBGQlNWUkRMRFJDUVVGUldpeEhRVXBETzBGQlMxUmhMR2REUVVGWldpeEpRVXhJTzBGQlRWUlFMR3REUVVGalJDeFpRVUZaUnl4RFFVRmFPMEZCVGt3c2FVSkJRV0k3UVVGUlNEdEJRVU5LTzBGQlEwb3NTMEV4UWtRc1RVRXlRa3M3UVVGRFJFUXNhMEpCUVZVc1NVRkJTVzFDTEV0QlFVb3NRMEZCVlRGQ0xGTkJRVk5YTEUxQlFXNUNMRU5CUVZZN08wRkJSVUU3UVVGRFFTeGhRVUZMU0N4SlFVRkpMRU5CUVZRc1JVRkJXVUVzU1VGQlNWSXNVMEZCVTFjc1RVRkJla0lzUlVGQmFVTklMRWRCUVdwRExFVkJRWE5ETzBGQlEyeERReXg1UWtGQllWUXNVMEZCVTFFc1EwRkJWQ3hEUVVGaU8wRkJRMEZFTEc5Q1FVRlJReXhEUVVGU0xFbEJRV0U3UVVGRFZHRXNjMEpCUVUwc1RVRkVSenRCUVVWVVF5eHpRa0ZCVFdJc1ZVRkdSenRCUVVkVVpTeDNRa0ZCVVhaQ0xGRkJRVkZQTEVOQlFWSXNRMEZJUXp0QlFVbFVhVUlzTkVKQlFWbDBRaXhUUVVGVFN5eERRVUZVTEVOQlNrZzdRVUZMVkVZc09FSkJRV05FTEZsQlFWbEhMRU5CUVZvN1FVRk1UQ3hoUVVGaU8wRkJUMGc3TzBGQlJVUTdRVUZEUVN4WlFVRkpXQ3hOUVVGTk9FSXNUMEZCVGl4SlFVRnBRaXhEUVVGRE9VSXNUVUZCVFN0Q0xGZEJRVTRzUTBGQmEwSkRMREJDUVVGNFF5eEZRVUZ2UlR0QlFVTm9SWFJDTEc5Q1FVRlJZU3hKUVVGU0xFTkJRV0U3UVVGRFZFUXNjVUpCUVV0MFFpeE5RVUZOYVVNc1UwRkVSanRCUVVWVVRpeDNRa0ZCVVROQ0xFdEJSa003UVVGSFZEUkNMRFJDUVVGWk8wRkJTRWdzWVVGQllqdEJRVXRJTzBGQlEwbzdPMEZCUlVRc1YwRkJUMnhDTEU5QlFWQTdRVUZEU0RzN1FVRkZSQ3hUUVVGVGQwSXNWMEZCVkN4RFFVRnpRa01zVVVGQmRFSXNSVUZCWjBOd1F5eEpRVUZvUXl4RlFVRnpRME1zUzBGQmRFTXNSVUZCTmtOVkxFOUJRVGRETEVWQlFYTkVNRUlzVVVGQmRFUXNSVUZCWjBVN1FVRkROVVE3UVVGRFFYSkRMRk5CUVV0elF5eFBRVUZNTEVkQlFXVnlReXhMUVVGbU8wRkJRMEVzVVVGQlNXRXNZVUZCWVdRc1MwRkJTMk1zVlVGQmRFSTdRVUZEUVhOQ0xHRkJRVk5ITEZWQlFWUXNRMEZCYjBKMlF5eEpRVUZ3UWl4RlFVRXdRbGNzVDBGQk1VSXNSVUZCYlVNc1ZVRkJWVFpDTEUxQlFWWXNSVUZCYTBKRExFdEJRV3hDTEVWQlFYbENPMEZCUTNoRUxGbEJRVWw2UXl4SlFVRktMRVZCUVZVd1F5eHZRa0ZCVmp0QlFVTkJMRmxCUVVsRExGZEJRVmRHTEUxQlFVMUhMRWRCUVhKQ08wRkJRMEVzWVVGQlN5eEpRVUZKUXl4SFFVRlVMRWxCUVdkQ1JpeFJRVUZvUWl4RlFVRXdRanRCUVVOMFFqTkRMRzFDUVVGUE1rTXNVMEZCVTBVc1IwRkJWQ3hEUVVGUU8wRkJRMEVzWjBKQlFVazNReXhMUVVGTE1FSXNTVUZCVEN4SlFVRmhNVUlzUzBGQlMzTkRMRTlCUVhSQ0xFVkJRU3RDTzBGQlF6TkNkRU1zY1VKQlFVdHpReXhQUVVGTUxFTkJRV0ZSTEV0QlFXSXNSMEZCY1VJNVF5eExRVUZMTUVJc1NVRkJNVUk3UVVGRFNEdEJRVU5LT3p0QlFVVkVMR2xDUVVGVGNVSXNXVUZCVkN4RFFVRjFRaTlETEVsQlFYWkNMRVZCUVRaQ08wRkJRM3BDTEdkQ1FVRkpaMFFzVVVGQlVXaEVMRXRCUVV0elF5eFBRVUZxUWp0QlFVTkJMR2RDUVVGSkxFdEJRVXMxUWl4WlFVRlVMRVZCUVhWQ08wRkJRMjVDYzBNc2QwSkJRVk5CTEZOQlFWTTNRaXhIUVVGSE9FSXNVVUZCU0N4RFFVRlpReXhsUVVGYUxFTkJRVFJDUml4TlFVRk5hRUlzVjBGQmJFTXNRMEZCVml4SFFVRTBSR2RDTEUxQlFVMWtMRk5CUVd4RkxFZEJRVGhGYkVNc1MwRkJTMjFFTEUxQlFUTkdPMEZCUTBnN1FVRkRSQ3huUWtGQlNTeExRVUZMZEVJc1ZVRkJUQ3hMUVVGdlFpeGpRVUY0UWl4RlFVRjNRenRCUVVOd1F5eHhRa0ZCUzBRc1RVRkJUQ3hEUVVGWlRDeEhRVUZhTEVkQlFXdENka0lzUzBGQlMzVkNMRWRCUVhaQ08wRkJRMGc3UVVGRFJDeHBRa0ZCUzBzc1RVRkJUQ3hEUVVGWkxFdEJRVXRETEZWQlFXcENMRWxCUVN0Q2JVSXNTMEZCTDBJN1FVRkRRU3huUWtGQlNXaEVMRXRCUVVzd1FpeEpRVUZNTEV0QlFXTjZRaXhOUVVGTk5rTXNTMEZCY0VJc1NVRkJOa0pvUXl4WFFVRlhjME1zVDBGQldDeERRVUZ0UW5CRUxFdEJRVXR4UkN4RlFVRjRRaXhKUVVFNFFpeERRVUV2UkN4RlFVRnJSVHRCUVVNNVJIWkRMREpDUVVGWFZTeEpRVUZZTEVOQlFXZENlRUlzUzBGQlMzRkVMRVZCUVhKQ08wRkJRMGc3UVVGRFNqczdRVUZGUkN4aFFVRkxMRWxCUVVsNlF5eEpRVUZKTEVOQlFXSXNSVUZCWjBKQkxFbEJRVWxFTEZGQlFWRkpMRTFCUVRWQ0xFVkJRVzlEU0N4SFFVRndReXhGUVVGNVF6dEJRVU55UXl4blFrRkJTVEJETEUxQlFVMHpReXhSUVVGUlF5eERRVUZTTEVOQlFWWTdRVUZEUVN4blFrRkJTVEpETEZsQlFWbEVMRWxCUVVrMVFpeEpRVUZ3UWp0QlFVTkJMR2RDUVVGSk9FSXNXVUZCV1VZc1NVRkJTUzlDTEVkQlFYQkNPMEZCUTBFc1owSkJRVWxyUXl4WlFVRlpTQ3hKUVVGSk1VSXNUVUZCY0VJN1FVRkRRU3huUWtGQlNUaENMR0ZCUVdGS0xFbEJRVWw2UWl4VlFVRnlRanRCUVVOQk4wSXNiVUpCUVU4eVF5eFRRVUZUWVN4VFFVRlVMRU5CUVZBN1FVRkRRU3huUWtGQlNTeERRVUZEZUVRc1NVRkJUQ3hGUVVGWE8wRkJRMUE3UVVGRFNEczdRVUZGUkN4blFrRkJTVEpFTEd0Q1FVRnJRa3dzUjBGQmRFSTdPMEZCUlVFc1owSkJRVWwwUkN4TFFVRkxORVFzVVVGQlRDeEpRVUZwUWpWRUxFdEJRVXR6UXl4UFFVRXhRaXhGUVVGdFF6dEJRVU12UWl4dlFrRkJTWFJETEV0QlFVczJSQ3hMUVVGVUxFVkJRV2RDTzBGQlExb3NkMEpCUVVsNlJTeGhRVUZoV1N4TFFVRkxOa1FzUzBGQlRDeERRVUZYUXl4VFFVRllMRXRCUVhsQ0xHRkJRVEZETEVWQlFYbEVPMEZCUTNKRUxEUkNRVUZKTEVOQlFVTndRaXh2UWtGQlRDeEZRVUV5UWp0QlFVTjJRaXhuUTBGQlNYRkNMSGRDUVVGM1FqRkZMRTlCUVU5RExFOUJRVkFzUTBGQlpTeDFSRUZCWml4RFFVRTFRanRCUVVOQmIwUXNiVVJCUVhWQ0xFbEJRVWx4UWl4eFFrRkJTaXhEUVVFd1FqbEVMRXRCUVRGQ0xFTkJRWFpDTzBGQlEwZzdRVUZEUkhsRExEWkRRVUZ4UW5OQ0xGbEJRWEpDTEVOQlFXdERVQ3hUUVVGc1F5eEZRVUUyUTBNc1ZVRkJOME1zUlVGQmVVUnlSU3hQUVVGUE5FVXNVMEZCVUN4RFFVRnBRa01zVDBGQmFrSXNRMEZCZVVKWUxGTkJRWHBDTEVOQlFYcEVPMEZCUTBnc2NVSkJUa1FzVFVGUFN6dEJRVU5FY0VNc01rSkJRVWRuUkN4TlFVRklMRU5CUVZWdVJTeExRVUZMTmtRc1MwRkJUQ3hEUVVGWFR5eFBRVUZZTEVsQlFYTkNjRVVzUzBGQlN6WkVMRXRCUVV3c1EwRkJWMUVzV1VGQmFrTXNTVUZCYVVSeVJTeExRVUZMTmtRc1MwRkJhRVU3UVVGRFNEdEJRVU5LTEdsQ1FWaEVMRTFCV1VzN1FVRkRSR1FzYVVOQlFXRjFRaXhKUVVGaUxFTkJRV3RDV0N4bFFVRnNRaXhGUVVGdFF6TkVMRWxCUVc1RE8wRkJRMGc3UVVGRFNpeGhRV2hDUkN4TlFXbENTenRCUVVORU8wRkJRMEVzYjBKQlFVbDFSU3hSUVVGUk9VVXNZVUZCWVN0RkxGRkJRV0lzUTBGQmMwSjRSU3hKUVVGMFFpeERRVUZhTzBGQlEwRTdRVUZEUVN4dlFrRkJTWGxGTEU5QlFVOUdMRTFCUVUxSExHTkJRVTRzUTBGQmNVSnVRaXhUUVVGeVFpeERRVUZZTzBGQlEwRXNiMEpCUVVsclFpeEpRVUZLTEVWQlFWVTdRVUZEVGtFc2VVSkJRVXRGTEU5QlFVd3NRMEZCWVRWQ0xGbEJRV0lzUlVGQk1rSlpMR1ZCUVROQ08wRkJRMGdzYVVKQlJrUXNUVUZIU3p0QlFVTkVXU3d3UWtGQlRVc3NWMEZCVGl4RFFVRnJRbkpDTEZOQlFXeENMRVZCUVRaQ1VpeFpRVUUzUWl4RlFVRXlRMWtzWlVGQk0wTTdRVUZEU0R0QlFVTktPMEZCUTBvN1FVRkRSRHRCUVVOQk8wRkJRMEVzV1VGQlNYWkZMR0ZCUVdGelJDeHZRa0ZCYWtJc1JVRkJkVU03UVVGRGJrTkJMR2xEUVVGeFFtMURMR0ZCUVhKQ08wRkJRMEY0UXl4eFFrRkJVeXhKUVVGVUxFVkJRV1Z3UXl4TFFVRm1PMEZCUTBnc1UwRklSQ3hOUVVsTE8wRkJRMFFzWjBKQlFVa3NRMEZCUTNWRExFMUJRVVFzU1VGQlYzWkRMRTFCUVUwMlJTeE5RVUZ5UWl4RlFVRTJRanRCUVVONlFpeHZRa0ZCU1R0QlFVTkJOMFVzTUVKQlFVMDJSU3hOUVVGT08wRkJRMGdzYVVKQlJrUXNRMEZIUVN4UFFVRlBReXhEUVVGUUxFVkJRVlU3UVVGRFRqVkVMSFZDUVVGSFowUXNUVUZCU0N4RFFVRlZXU3hEUVVGV08wRkJRMGc3UVVGRFNqdEJRVU5FTVVNc2NVSkJRVk5ITEUxQlFWUXNSVUZCYVVKMlF5eExRVUZxUWp0QlFVTklPMEZCUTBvc1MwRndSa1E3UVVGeFJrZzdPMEZCUlVRN1FVRkRRU3hUUVVGVEswVXNaVUZCVkN4RFFVRXdRaTlGTEV0QlFURkNMRVZCUVdsRFJDeEpRVUZxUXl4RlFVRjFRMmxHTEU5QlFYWkRMRVZCUVdkRU8wRkJRelZETEZGQlFVazNSaXhUUVVGS0xFVkJRV1U3UVVGRFdDeGxRVUZQTEV0QlFWQTdRVUZEU0R0QlFVTkVMRkZCUVVrNFJpeE5RVUZOYkVZc1MwRkJTekpDTEdWQlFXWTdRVUZEUVN4UlFVRkpkVVFzUjBGQlNpeEZRVUZUTzBGQlEwdzdRVUZEUVN4WlFVRkxha1lzYVVKQlFXbENhMElzUjBGQlIyZEZMRXRCUVhKQ0xFbEJRU3RDYkVZc1RVRkJUU3RDTEZkQlFVNHNRMEZCYTBKdlJDdzJRa0ZCY2tRc1JVRkJiMFk3UVVGRGFFWkdMR3RDUVVGTkxFdEJRVTQ3UVVGRFNEdEJRVU5LTEV0QlRFUXNUVUZOU3l4SlFVRkpSQ3hQUVVGS0xFVkJRV0U3UVVGRFpDeFpRVUZKYUVZc2FVSkJRV2xDYTBJc1IwRkJSMnRGTEZWQlFYQkNMRWxCUVd0RGNFWXNhVUpCUVdsQ2EwSXNSMEZCUjIxRkxFMUJRVEZFTEVWQlFXdEZPMEZCUXpsRVNpeHJRa0ZCVFdwR0xFMUJRVTF6Uml4bFFVRmFPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMGc3UVVGRFNqdEJRVU5FTEZkQlFVOU1MRWRCUVZBN1FVRkRTRHM3UVVGRlJDeFRRVUZUVFN4UlFVRlVMRU5CUVcxQ2VFWXNTVUZCYmtJc1JVRkJlVUp4UXl4UlFVRjZRaXhGUVVGdFF6dEJRVU12UWl4UlFVRkpNVU1zU1VGQlNqdEJRVU5CTEZGQlFVa3NUMEZCVDBzc1MwRkJTM05ETEU5QlFWb3NTMEZCZDBJc1VVRkJOVUlzUlVGQmMwTTdRVUZEYkVNc1dVRkJTVHRCUVVOQk0wTXNiVUpCUVU4NFJpeExRVUZMUXl4TFFVRk1MRU5CUVZjeFJpeExRVUZMYzBNc1QwRkJhRUlzUTBGQlVEdEJRVU5JTEZOQlJrUXNRMEZIUVN4UFFVRlBlVU1zUTBGQlVDeEZRVUZWTzBGQlEwNHNiVUpCUVU4c1NVRkJTVmtzUzBGQlNpeERRVUZWYmtjc1RVRkJUVzlITEZGQlFVNHNRMEZCWlN4SlFVRm1MRVZCUVhGQ05VWXNTMEZCUzNGRUxFVkJRVEZDTEVWQlFUaENNRUlzUlVGQlJXTXNTMEZCYUVNc1EwRkJWaXhEUVVGUU8wRkJRMGc3UVVGRFNpeExRVkJFTEUxQlVVc3NTVUZCU1N4UlFVRlBOMFlzUzBGQlMzTkRMRTlCUVZvc1RVRkJkMElzVVVGQk5VSXNSVUZCYzBNN1FVRkRka016UXl4bFFVRlBTeXhMUVVGTGMwTXNUMEZCV2p0QlFVTklMRXRCUmtrc1RVRkhRVHRCUVVORUxHVkJRVThzU1VGQlNYRkVMRXRCUVVvc1EwRkJWVzVITEUxQlFVMXZSeXhSUVVGT0xFTkJRV1VzU1VGQlppeERRVUZXTEVOQlFWQTdRVUZEU0RzN1FVRkZSQ3hSUVVGSlJTeFhRVUZLTEVWQlFXbENReXhaUVVGcVFqdEJRVU5CTEZGQlFVbGtMRlZCUVZWMlJpeFhRVUZYUXl4SlFVRllMRU5CUVdRN1FVRkRRU3hSUVVGSmMwWXNUMEZCU2l4RlFVRmhPMEZCUTFRc1dVRkJTVGRHTEZOQlFVb3NSVUZCWlR0QlFVTllNa2NzTWtKQlFXVTFSeXhaUVVGbU8wRkJRMEV5Unl3d1FrRkJZeXh4UWtGQlZYSkZMRWxCUVZZc1JVRkJaMEoxUlN4SlFVRm9RaXhGUVVGelFrTXNTMEZCZEVJc1JVRkJOa0pETEZGQlFUZENMRVZCUVhWRE8wRkJRMnBFTEc5Q1FVRkphRUlzVFVGQlRXRXNZVUZCWVVRc1YwRkJZaXhEUVVGNVFuSkZMRWxCUVhwQ0xFVkJRU3RDZFVVc1NVRkJMMElzUlVGQmNVTkRMRXRCUVhKRExFVkJRVFJEUXl4UlFVRTFReXhEUVVGV08wRkJRMEVzYjBKQlFVbG9RaXhIUVVGS0xFVkJRVk03UVVGRFRDd3lRa0ZCVDBFc1IwRkJVRHRCUVVOSU8wRkJRMFFzZFVKQlFVOHZSQ3hIUVVGSFowWXNZMEZCU0N4RFFVRnJRa01zYVVKQlFXeENMRU5CUVc5RE0wVXNTVUZCY0VNc1JVRkJNRU4xUlN4SlFVRXhReXhEUVVGUU8wRkJRMGdzWVVGT1JEdEJRVTlCUml4M1FrRkJXVThzWTBGQldpeEhRVUUyUWs0c1lVRkJZVVFzVjBGQllpeERRVUY1UWs4c1kwRkJkRVE3UVVGRFNDeFRRVlpFTEUxQlYwczdRVUZEUkZBc01FSkJRV016UlN4SFFVRkhaMFlzWTBGQlNDeERRVUZyUWtjc1lVRkJhRU03UVVGRFNEdEJRVU5LTEV0QlprUXNUVUZuUWtzN1FVRkRSRklzYzBKQlFXTXNjVUpCUVZWNlF5eEZRVUZXTEVWQlFXTTdRVUZEZUVJc1owSkJRVWxyUkN4TlFVRk5hRWdzUjBGQlIybElMR0ZCUVVnc1EwRkJhVUp1UkN4RlFVRnFRaXhEUVVGV08wRkJRMEVzWjBKQlFVbHJSQ3hIUVVGS0xFVkJRVk03UVVGRFRDeDFRa0ZCVDBFc1IwRkJVRHRCUVVOSU8wRkJRMFJ3Uml4bFFVRkhjMFlzVFVGQlNDeERRVUZWTEVsQlFWWXNSVUZCWjBKd1JDeEZRVUZvUWp0QlFVTkJMRzFDUVVGUGNVUXNUVUZCVUR0QlFVTklMRk5CVUVRN1FVRlJTRHM3UVVGRlJDeFJRVUZKZUVjc1UwRkJVMmxDTEVkQlFVZDNSaXhYUVVGSUxFTkJRV1ZETEU5QlFXWXNRMEZCZFVKRExFbEJRWFpDTEVOQlFUUkNReXhIUVVFMVFpeEZRVUZpT3p0QlFVVkJMRkZCUVVrM1J5eExRVUZLTzBGQlEwRXNVVUZCU1R0QlFVTkJRU3huUWtGQlVXdENMRWRCUVVkM1JpeFhRVUZJTEVOQlFXVm9TQ3hKUVVGbUxFVkJRWEZDVHl4TlFVRnlRaXhGUVVFMlFqdEJRVU5xUXpSR0xIbENRVUZoUVN4WFFVUnZRanRCUVVWcVEybENMRzlDUVVGUkwwY3NTMEZCUzJkSUxHRkJSbTlDTzBGQlIycERReXgxUWtGQlYycElPMEZCU0hOQ0xGTkJRVGRDTEVOQlFWSTdRVUZMU0N4TFFVNUVMRU5CVDBFc1QwRkJUeXRGTEVOQlFWQXNSVUZCVlR0QlFVTk9OVVFzVjBGQlIzZEdMRmRCUVVnc1EwRkJaVU1zVDBGQlppeERRVUYxUWtNc1NVRkJka0lzUTBGQk5FSkxMRWRCUVRWQ0xFTkJRV2REYUVnc1RVRkJhRU03UVVGRFFTeFpRVUZKYVVnc1RVRkJUVU1zVlVGQlZVTXNWVUZCVml4SFFVRjNRblJETEVsQlFVa3NTVUZCU2l4SFFVRlhRU3hGUVVGRll5eExRVUZ5UXl4SFFVRTRRMlFzUlVGQlJXTXNTMEZCTVVRN1FVRkRRU3hsUVVGUExFbEJRVWxHTEV0QlFVb3NRMEZCVlc1SExFMUJRVTF2Unl4UlFVRk9MRU5CUVdVc1NVRkJaaXhGUVVGeFFqVkdMRXRCUVV0eFJDeEZRVUV4UWl4RlFVRTRRamhFTEVkQlFUbENMRU5CUVZZc1EwRkJVRHRCUVVOSU96dEJRVVZFYkVnc1ZVRkJUVFpETEV0QlFVNHNSMEZCWXpsRExFdEJRVXN3UWl4SlFVRnVRanRCUVVOQmVrSXNWVUZCVFhOQ0xFZEJRVTRzUjBGQldYUkNMRTFCUVUxcFF5eFRRVUZzUWpzN1FVRkZRU3hSUVVGSk9VTXNZVUZCWVRKSExGbEJRV3BDTEVWQlFTdENPMEZCUXpOQ1FTeHhRa0ZCWVhWQ0xHdENRVUZpTEVOQlFXZERja2dzUzBGQmFFTTdRVUZEUVRoR0xIRkNRVUZoZDBJc1MwRkJZanRCUVVOSU96dEJRVVZFTEZGQlFVbERMR1ZCUVdWNFF5eG5Ra0ZCWjBJdlJTeExRVUZvUWl4RlFVRjFRa1FzU1VGQmRrSXNSVUZCTmtKcFJpeFBRVUUzUWl4RFFVRnVRanRCUVVOQkxGRkJRVWwwUlN4VlFVRlZXaXhoUVVGaFF5eEpRVUZpTEVWQlFXMUNReXhMUVVGdVFpeEZRVUV3UWtNc1RVRkJNVUlzUlVGQmEwTnpTQ3haUVVGc1F5eERRVUZrT3p0QlFVVkJja2NzVDBGQlIzZEdMRmRCUVVnc1EwRkJaVU1zVDBGQlppeERRVUYxUWtNc1NVRkJka0lzUTBGQk5FSkxMRWRCUVRWQ0xFTkJRV2REYUVnc1RVRkJhRU03TzBGQlJVRXNVVUZCU1ZNc1VVRkJVVWtzVFVGQlVpeExRVUZ0UWl4RFFVRjJRaXhGUVVFd1FqdEJRVU4wUWl4WlFVRkpaQ3hOUVVGTk5rVXNUVUZCVml4RlFVRnJRamRGTEUxQlFVMDJSU3hOUVVGT08wRkJRMnhDTEdWQlFVOTZReXhUUVVGVExFbEJRVlFzUlVGQlpYQkRMRXRCUVdZc1EwRkJVRHRCUVVOSU8wRkJRMFJyUXl4blFrRkJXU3hMUVVGTFF5eFJRVUZxUWl4RlFVRXlRbkJETEVsQlFUTkNMRVZCUVdsRFF5eExRVUZxUXl4RlFVRjNRMVVzVDBGQmVFTXNSVUZCYVVRd1FpeFJRVUZxUkR0QlFVTklPenRCUVVWRWIwWXNUMEZCVDBNc1QwRkJVQ3hIUVVGcFFteERMRkZCUVdwQ08wRkJRMEZCTEZOQlFWTTVSaXhWUVVGVUxFZEJRWE5DUVN4VlFVRjBRaUlzSW1acGJHVWlPaUoxZFdsa0xXeHZZV1JsY2k1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdRMjl3ZVhKcFoyaDBJQ2hqS1NBeU1ERXpMVEl3TVRZZ1EyaDFhMjl1WnlCVVpXTm9ibTlzYjJkcFpYTWdTVzVqTGx4dUlFTnZjSGx5YVdkb2RDQW9ZeWtnTWpBeE55MHlNREU0SUZocFlXMWxiaUJaWVdwcElGTnZablIzWVhKbElFTnZMaXdnVEhSa0xseHVYRzRnYUhSMGNITTZMeTkzZDNjdVkyOWpiM011WTI5dEwxeHVYRzRnVUdWeWJXbHpjMmx2YmlCcGN5Qm9aWEpsWW5rZ1ozSmhiblJsWkN3Z1puSmxaU0J2WmlCamFHRnlaMlVzSUhSdklHRnVlU0J3WlhKemIyNGdiMkowWVdsdWFXNW5JR0VnWTI5d2VWeHVJRzltSUhSb2FYTWdjMjltZEhkaGNtVWdZVzVrSUdGemMyOWphV0YwWldRZ1pXNW5hVzVsSUhOdmRYSmpaU0JqYjJSbElDaDBhR1VnWENKVGIyWjBkMkZ5WlZ3aUtTd2dZU0JzYVcxcGRHVmtMRnh1SUNCM2IzSnNaSGRwWkdVc0lISnZlV0ZzZEhrdFpuSmxaU3dnYm05dUxXRnpjMmxuYm1GaWJHVXNJSEpsZG05allXSnNaU0JoYm1RZ2JtOXVMV1Y0WTJ4MWMybDJaU0JzYVdObGJuTmxYRzRnZEc4Z2RYTmxJRU52WTI5eklFTnlaV0YwYjNJZ2MyOXNaV3g1SUhSdklHUmxkbVZzYjNBZ1oyRnRaWE1nYjI0Z2VXOTFjaUIwWVhKblpYUWdjR3hoZEdadmNtMXpMaUJaYjNVZ2MyaGhiR3hjYmlBZ2JtOTBJSFZ6WlNCRGIyTnZjeUJEY21WaGRHOXlJSE52Wm5SM1lYSmxJR1p2Y2lCa1pYWmxiRzl3YVc1bklHOTBhR1Z5SUhOdlpuUjNZWEpsSUc5eUlIUnZiMnh6SUhSb1lYUW5jMXh1SUNCMWMyVmtJR1p2Y2lCa1pYWmxiRzl3YVc1bklHZGhiV1Z6TGlCWmIzVWdZWEpsSUc1dmRDQm5jbUZ1ZEdWa0lIUnZJSEIxWW14cGMyZ3NJR1JwYzNSeWFXSjFkR1VzWEc0Z0lITjFZbXhwWTJWdWMyVXNJR0Z1WkM5dmNpQnpaV3hzSUdOdmNHbGxjeUJ2WmlCRGIyTnZjeUJEY21WaGRHOXlMbHh1WEc0Z1ZHaGxJSE52Wm5SM1lYSmxJRzl5SUhSdmIyeHpJR2x1SUhSb2FYTWdUR2xqWlc1elpTQkJaM0psWlcxbGJuUWdZWEpsSUd4cFkyVnVjMlZrTENCdWIzUWdjMjlzWkM1Y2JpQllhV0Z0Wlc0Z1dXRnFhU0JUYjJaMGQyRnlaU0JEYnk0c0lFeDBaQzRnY21WelpYSjJaWE1nWVd4c0lISnBaMmgwY3lCdWIzUWdaWGh3Y21WemMyeDVJR2R5WVc1MFpXUWdkRzhnZVc5MUxseHVYRzRnVkVoRklGTlBSbFJYUVZKRklFbFRJRkJTVDFaSlJFVkVJRndpUVZNZ1NWTmNJaXdnVjBsVVNFOVZWQ0JYUVZKU1FVNVVXU0JQUmlCQlRsa2dTMGxPUkN3Z1JWaFFVa1ZUVXlCUFVseHVJRWxOVUV4SlJVUXNJRWxPUTB4VlJFbE9SeUJDVlZRZ1RrOVVJRXhKVFVsVVJVUWdWRThnVkVoRklGZEJVbEpCVGxSSlJWTWdUMFlnVFVWU1EwaEJUbFJCUWtsTVNWUlpMRnh1SUVaSlZFNUZVMU1nUms5U0lFRWdVRUZTVkVsRFZVeEJVaUJRVlZKUVQxTkZJRUZPUkNCT1QwNUpUa1pTU1U1SFJVMUZUbFF1SUVsT0lFNVBJRVZXUlU1VUlGTklRVXhNSUZSSVJWeHVJRUZWVkVoUFVsTWdUMUlnUTA5UVdWSkpSMGhVSUVoUFRFUkZVbE1nUWtVZ1RFbEJRa3hGSUVaUFVpQkJUbGtnUTB4QlNVMHNJRVJCVFVGSFJWTWdUMUlnVDFSSVJWSmNiaUJNU1VGQ1NVeEpWRmtzSUZkSVJWUklSVklnU1U0Z1FVNGdRVU5VU1U5T0lFOUdJRU5QVGxSU1FVTlVMQ0JVVDFKVUlFOVNJRTlVU0VWU1YwbFRSU3dnUVZKSlUwbE9SeUJHVWs5TkxGeHVJRTlWVkNCUFJpQlBVaUJKVGlCRFQwNU9SVU5VU1U5T0lGZEpWRWdnVkVoRklGTlBSbFJYUVZKRklFOVNJRlJJUlNCVlUwVWdUMUlnVDFSSVJWSWdSRVZCVEVsT1IxTWdTVTVjYmlCVVNFVWdVMDlHVkZkQlVrVXVYRzRnS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpOWNibHh1WTI5dWMzUWdUV2x6YzJsdVowTnNZWE56SUQwZ1EwTmZSVVJKVkU5U0lDWW1JRVZrYVhSdmNpNXlaWEYxYVhKbEtDZGhjSEE2THk5bFpHbDBiM0l2Y0dGblpTOXpZMlZ1WlMxMWRHbHNjeTl0YVhOemFXNW5MV05zWVhOekxYSmxjRzl5ZEdWeUp5a3VUV2x6YzJsdVowTnNZWE56TzF4dVkyOXVjM1FnYW5NZ1BTQnlaWEYxYVhKbEtDY3VMaTl3YkdGMFptOXliUzlxY3ljcE8xeHVZMjl1YzNRZ1pHVmlkV2NnUFNCeVpYRjFhWEpsS0NjdUxpOURRMFJsWW5Wbkp5azdYRzV5WlhGMWFYSmxLQ2N1TGk5d2JHRjBabTl5YlM5a1pYTmxjbWxoYkdsNlpTY3BPMXh1WTI5dWMzUWdURzloWkdsdVowbDBaVzF6SUQwZ2NtVnhkV2x5WlNnbkxpOXNiMkZrYVc1bkxXbDBaVzF6SnlrN1hHNWNibVoxYm1OMGFXOXVJR2x6VTJObGJtVlBZbW9nS0dwemIyNHBJSHRjYmlBZ0lDQjJZWElnVTBORlRrVmZTVVFnUFNBblkyTXVVMk5sYm1Vbk8xeHVJQ0FnSUhaaGNpQlFVa1ZHUVVKZlNVUWdQU0FuWTJNdVVISmxabUZpSnp0Y2JpQWdJQ0J5WlhSMWNtNGdhbk52YmlBbUppQW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9hbk52Ymxzd1hTQW1KaUJxYzI5dVd6QmRMbDlmZEhsd1pWOWZJRDA5UFNCVFEwVk9SVjlKUkNrZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDaHFjMjl1V3pGZElDWW1JR3B6YjI1Yk1WMHVYMTkwZVhCbFgxOGdQVDA5SUZORFJVNUZYMGxFS1NCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tHcHpiMjViTUYwZ0ppWWdhbk52Ymxzd1hTNWZYM1I1Y0dWZlh5QTlQVDBnVUZKRlJrRkNYMGxFS1Z4dUlDQWdJQ0FnSUNBZ0lDQXBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQndZWEp6WlVSbGNHVnVaSE1nS0dsMFpXMHNJR0Z6YzJWMExDQjBaRWx1Wm04c0lHUmxabVZ5Y21Wa1RHOWhaRkpoZDBGemMyVjBjMGx1VW5WdWRHbHRaU2tnZTF4dUlDQWdJSFpoY2lCMWRXbGtUR2x6ZENBOUlIUmtTVzVtYnk1MWRXbGtUR2x6ZER0Y2JpQWdJQ0IyWVhJZ2IySnFUR2x6ZENBOUlIUmtTVzVtYnk1MWRXbGtUMkpxVEdsemREdGNiaUFnSUNCMllYSWdjSEp2Y0V4cGMzUWdQU0IwWkVsdVptOHVkWFZwWkZCeWIzQk1hWE4wTzF4dUlDQWdJSFpoY2lCemRHbHNiRlZ6WlZWeWJDQTlJSFJrU1c1bWJ5NWZjM1JwYkd4VmMyVlZjbXc3WEc0Z0lDQWdkbUZ5SUdSbGNHVnVaSE03WEc0Z0lDQWdkbUZ5SUdrc0lHUmxjR1Z1WkZWMWFXUTdYRzRnSUNBZ0x5OGdZMkZqYUdVZ1pHVndaVzVrWlc1amFXVnpJR1p2Y2lCaGRYUnZJSEpsYkdWaGMyVmNiaUFnSUNCMllYSWdaR1Z3Wlc1a1MyVjVjeUE5SUdsMFpXMHVaR1Z3Wlc1a1MyVjVjeUE5SUZ0ZE8xeHVYRzRnSUNBZ2FXWWdLR1JsWm1WeWNtVmtURzloWkZKaGQwRnpjMlYwYzBsdVVuVnVkR2x0WlNrZ2UxeHVJQ0FnSUNBZ0lDQmtaWEJsYm1SeklEMGdXMTA3WEc0Z0lDQWdJQ0FnSUM4dklIQmhjbk5sSUdSbGNHVnVaSE1nWVhOelpYUnpYRzRnSUNBZ0lDQWdJR1p2Y2lBb2FTQTlJREE3SUdrZ1BDQjFkV2xrVEdsemRDNXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaR1Z3Wlc1a1ZYVnBaQ0E5SUhWMWFXUk1hWE4wVzJsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHOWlhaUE5SUc5aWFreHBjM1JiYVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2NISnZjQ0E5SUhCeWIzQk1hWE4wVzJsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHbHVabThnUFNCall5NUJjM05sZEV4cFluSmhjbmt1WDJkbGRFRnpjMlYwU1c1bWIwbHVVblZ1ZEdsdFpTaGtaWEJsYm1SVmRXbGtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwYm1adkxuSmhkeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklITnJhWEFnY0hKbGJHOWhaR2x1WnlCeVlYY2dZWE56WlhSelhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSFZ5YkNBOUlHbHVabTh1ZFhKc08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOWlhbHR3Y205d1hTQTlJSFZ5YkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pYQmxibVJMWlhsekxuQjFjMmdvZFhKc0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR1JsWTJ4aGNtVWdaR1Z3Wlc1a2N5QmhjM05sZEhOY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pYQmxibVJ6TG5CMWMyZ29lMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFuZFhWcFpDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWMWFXUTZJR1JsY0dWdVpGVjFhV1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxabVZ5Y21Wa1RHOWhaRkpoZHpvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gyOTNibVZ5T2lCdlltb3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5dmQyNWxjbEJ5YjNBNklIQnliM0FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOXpkR2xzYkZWelpWVnliRG9nYzNScGJHeFZjMlZWY214YmFWMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnWkdWd1pXNWtjeUE5SUc1bGR5QkJjbkpoZVNoMWRXbGtUR2x6ZEM1c1pXNW5kR2dwTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJR1JsWTJ4aGNtVWdaR1Z3Wlc1a2N5QmhjM05sZEhOY2JpQWdJQ0FnSUNBZ1ptOXlJQ2hwSUQwZ01Ec2dhU0E4SUhWMWFXUk1hWE4wTG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCa1pYQmxibVJWZFdsa0lEMGdkWFZwWkV4cGMzUmJhVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaWEJsYm1SelcybGRJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ2QxZFdsa0p5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFkV2xrT2lCa1pYQmxibVJWZFdsa0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOXZkMjVsY2pvZ2IySnFUR2x6ZEZ0cFhTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZiM2R1WlhKUWNtOXdPaUJ3Y205d1RHbHpkRnRwWFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmMzUnBiR3hWYzJWVmNtdzZJSE4wYVd4c1ZYTmxWWEpzVzJsZFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnYkc5aFpDQnVZWFJwZG1VZ2IySnFaV04wSUNoSmJXRm5aUzlCZFdScGJ5a2dZWE1nWkdWd1pXNWtjMXh1SUNBZ0lDQWdJQ0JwWmlBb1lYTnpaWFF1WDI1aGRHbDJaU0FtSmlBaFlYTnpaWFF1WTI5dWMzUnlkV04wYjNJdWNISmxkbVZ1ZEZCeVpXeHZZV1JPWVhScGRtVlBZbXBsWTNRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbGNHVnVaSE11Y0hWemFDaDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkWEpzT2lCaGMzTmxkQzV1WVhScGRtVlZjbXdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDI5M2JtVnlPaUJoYzNObGRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZiM2R1WlhKUWNtOXdPaUFuWDI1aGRHbDJaVUZ6YzJWMEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUdSbGNHVnVaSE03WEc1OVhHNWNibVoxYm1OMGFXOXVJR3h2WVdSRVpYQmxibVJ6SUNod2FYQmxiR2x1WlN3Z2FYUmxiU3dnWVhOelpYUXNJR1JsY0dWdVpITXNJR05oYkd4aVlXTnJLU0I3WEc0Z0lDQWdMeThnVUhKbFpHVm1hVzVsSUdOdmJuUmxiblFnWm05eUlHUmxjR1Z1WkdWdVkybGxjeUIxYzJGblpWeHVJQ0FnSUdsMFpXMHVZMjl1ZEdWdWRDQTlJR0Z6YzJWME8xeHVJQ0FnSUhaaGNpQmtaWEJsYm1STFpYbHpJRDBnYVhSbGJTNWtaWEJsYm1STFpYbHpPMXh1SUNBZ0lIQnBjR1ZzYVc1bExtWnNiM2RKYmtSbGNITW9hWFJsYlN3Z1pHVndaVzVrY3l3Z1puVnVZM1JwYjI0Z0tHVnljbTl5Y3l3Z2FYUmxiWE1wSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR2wwWlcwc0lHMXBjM05wYm1kQmMzTmxkRkpsY0c5eWRHVnlPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2FYUmxiWE5OWVhBZ1BTQnBkR1Z0Y3k1dFlYQTdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJSE55WXlCcGJpQnBkR1Z0YzAxaGNDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FYUmxiU0E5SUdsMFpXMXpUV0Z3VzNOeVkxMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hWFJsYlM1MWRXbGtJQ1ltSUdsMFpXMHVZMjl1ZEdWdWRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2wwWlcwdVkyOXVkR1Z1ZEM1ZmRYVnBaQ0E5SUdsMFpXMHVkWFZwWkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHeHZZV1JEWVd4c1ltRmpheUFvYVhSbGJTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSFpoYkhWbElEMGdhWFJsYlM1amIyNTBaVzUwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYM04wYVd4c1ZYTmxWWEpzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1VnUFNBb2RtRnNkV1VnSmlZZ1kyTXVVbUYzUVhOelpYUXVkMkZ6VW1GM1FYTnpaWFJVZVhCbEtIWmhiSFZsTG1OdmJuTjBjblZqZEc5eUtTa2dQeUIyWVd4MVpTNXVZWFJwZG1WVmNtd2dPaUJwZEdWdExuSmhkMVZ5YkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOXZkMjVsY2xCeWIzQWdQVDA5SUNkZmJtRjBhWFpsUVhOelpYUW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiM2R1WlhJdWRYSnNJRDBnYVhSbGJTNTFjbXc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl2ZDI1bGNsdDBhR2x6TGw5dmQyNWxjbEJ5YjNCZElEMGdkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FYUmxiUzUxZFdsa0lDRTlQU0JoYzNObGRDNWZkWFZwWkNBbUppQmtaWEJsYm1STFpYbHpMbWx1WkdWNFQyWW9hWFJsYlM1cFpDa2dQQ0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVndaVzVrUzJWNWN5NXdkWE5vS0dsMFpXMHVhV1FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHUmxjR1Z1WkhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJrWlhBZ1BTQmtaWEJsYm1SelcybGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1JsY0dWdVpGTnlZeUE5SUdSbGNDNTFkV2xrTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdSbGNHVnVaRlZ5YkNBOUlHUmxjQzUxY213N1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1pHVndaVzVrVDJKcUlEMGdaR1Z3TGw5dmQyNWxjanRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJrWlhCbGJtUlFjbTl3SUQwZ1pHVndMbDl2ZDI1bGNsQnliM0E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBkR1Z0SUQwZ2FYUmxiWE5OWVhCYlpHVndaVzVrVlhKc1hUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hhWFJsYlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJwYm5WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2JHOWhaRU5oYkd4aVlXTnJRM1I0SUQwZ1pHVndPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVhSbGJTNWpiMjF3YkdWMFpTQjhmQ0JwZEdWdExtTnZiblJsYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVhSbGJTNWxjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1EwTmZSVVJKVkU5U0lDWW1JR2wwWlcwdVpYSnliM0l1WlhKeWIzSkRiMlJsSUQwOVBTQW5aR0l1VGs5VVJrOVZUa1FuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JVzFwYzNOcGJtZEJjM05sZEZKbGNHOXlkR1Z5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUUxcGMzTnBibWRQWW1wbFkzUlNaWEJ2Y25SbGNpQTlJRVZrYVhSdmNpNXlaWEYxYVhKbEtDZGhjSEE2THk5bFpHbDBiM0l2Y0dGblpTOXpZMlZ1WlMxMWRHbHNjeTl0YVhOemFXNW5MVzlpYW1WamRDMXlaWEJ2Y25SbGNpY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxcGMzTnBibWRCYzNObGRGSmxjRzl5ZEdWeUlEMGdibVYzSUUxcGMzTnBibWRQWW1wbFkzUlNaWEJ2Y25SbGNpaGhjM05sZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdGFYTnphVzVuUVhOelpYUlNaWEJ2Y25SbGNpNXpkR0Z6YUVKNVQzZHVaWElvWkdWd1pXNWtUMkpxTENCa1pYQmxibVJRY205d0xDQkZaR2wwYjNJdWMyVnlhV0ZzYVhwbExtRnpRWE56WlhRb1pHVndaVzVrVTNKaktTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCall5NWZkR2h5YjNjb2FYUmxiUzVsY25KdmNpNXRaWE56WVdkbElIeDhJR2wwWlcwdVpYSnliM0l1WlhKeWIzSk5aWE56WVdkbElIeDhJR2wwWlcwdVpYSnliM0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzYjJGa1EyRnNiR0poWTJzdVkyRnNiQ2hzYjJGa1EyRnNiR0poWTJ0RGRIZ3NJR2wwWlcwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR2wwWlcwZ2QyRnpJSEpsYlc5MlpXUWdabkp2YlNCallXTm9aU3dnWW5WMElISmxZV1I1SUdsdUlIQnBjR1ZzYVc1bElHRmpkSFZoYkd4NVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEYxWlhWbElEMGdURzloWkdsdVowbDBaVzF6TG1kbGRGRjFaWFZsS0dsMFpXMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUVoaFkyc2dkRzhnWjJWMElHRWdZbVYwZEdWeUlHSmxhR0YyYVc5eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR3hwYzNRZ1BTQnhkV1YxWlM1ZlkyRnNiR0poWTJ0VVlXSnNaVnRrWlhCbGJtUlRjbU5kTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHNhWE4wS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hwYzNRdWRXNXphR2xtZENoc2IyRmtRMkZzYkdKaFkyc3NJR3h2WVdSRFlXeHNZbUZqYTBOMGVDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J4ZFdWMVpTNWhaR1JNYVhOMFpXNWxjaWhrWlhCbGJtUlRjbU1zSUd4dllXUkRZV3hzWW1GamF5d2diRzloWkVOaGJHeGlZV05yUTNSNEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdMeThnUlcxcGRDQmtaWEJsYm1SbGJtTjVJR1Z5Y205eWN5QnBiaUJ5ZFc1MGFXMWxMQ0JpZFhRZ2JtOTBJR2x1SUdWa2FYUnZjaXhjYmlBZ0lDQWdJQ0FnTHk4Z1ltVmpZWFZ6WlNCbFpHbDBiM0lnYm1WbFpDQjBieUJ2Y0dWdUlIUm9aU0J6WTJWdVpTQXZJSEJ5WldaaFlpQjBieUJzWlhRZ2RYTmxjaUJtYVhnZ2JXbHpjMmx1WnlCaGMzTmxkQ0JwYzNOMVpYTmNiaUFnSUNBZ0lDQWdhV1lnS0VORFgwVkVTVlJQVWlBbUppQnRhWE56YVc1blFYTnpaWFJTWlhCdmNuUmxjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiV2x6YzJsdVowRnpjMlYwVW1Wd2IzSjBaWEl1Y21Wd2IzSjBRbmxQZDI1bGNpZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnNiR0poWTJzb2JuVnNiQ3dnWVhOelpYUXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZsY25KdmNuTWdKaVlnWVhOelpYUXViMjVNYjJGa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWE56WlhRdWIyNU1iMkZrS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOakxsOTBhSEp2ZHlobEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGc2JHSmhZMnNvWlhKeWIzSnpMQ0JoYzNObGRDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYm4xY2JseHVMeThnWTJGdUlHUmxabVZ5Y21Wa0lHeHZZV1FnY21GM0lHRnpjMlYwY3lCcGJpQnlkVzUwYVcxbFhHNW1kVzVqZEdsdmJpQmpZVzVFWldabGNuSmxaRXh2WVdRZ0tHRnpjMlYwTENCcGRHVnRMQ0JwYzFOalpXNWxLU0I3WEc0Z0lDQWdhV1lnS0VORFgwVkVTVlJQVWlrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdmVnh1SUNBZ0lIWmhjaUJ5WlhNZ1BTQnBkR1Z0TG1SbFptVnljbVZrVEc5aFpGSmhkenRjYmlBZ0lDQnBaaUFvY21WektTQjdYRzRnSUNBZ0lDQWdJQzh2SUdOb1pXTnJJR2xtSUdGemMyVjBJSE4xY0hCdmNuUWdaR1ZtWlhKeVpXUmNiaUFnSUNBZ0lDQWdhV1lnS0NoaGMzTmxkQ0JwYm5OMFlXNWpaVzltSUdOakxrRnpjMlYwS1NBbUppQmhjM05sZEM1amIyNXpkSEoxWTNSdmNpNXdjbVYyWlc1MFJHVm1aWEp5WldSTWIyRmtSR1Z3Wlc1a1pXNTBjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6SUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdaV3h6WlNCcFppQW9hWE5UWTJWdVpTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1lYTnpaWFFnYVc1emRHRnVZMlZ2WmlCall5NVRZMlZ1WlVGemMyVjBJSHg4SUdGemMyVjBJR2x1YzNSaGJtTmxiMllnWTJNdVVISmxabUZpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhNZ1BTQmhjM05sZEM1aGMzbHVZMHh2WVdSQmMzTmxkSE03WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMMmxtSUNoeVpYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJQ0FnSUdOakxteHZaeWduWkdWbVpYSnlaV1FnYkc5aFpDQnlZWGNnWVhOelpYUnpJR1p2Y2lBbklDc2dhWFJsYlM1cFpDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkwzMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnY21Wek8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCc2IyRmtWWFZwWkNBb2FYUmxiU3dnWTJGc2JHSmhZMnNwSUh0Y2JpQWdJQ0IyWVhJZ2FuTnZianRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR2wwWlcwdVkyOXVkR1Z1ZENBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdwemIyNGdQU0JLVTA5T0xuQmhjbk5sS0dsMFpXMHVZMjl1ZEdWdWRDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnUlhKeWIzSW9aR1ZpZFdjdVoyVjBSWEp5YjNJb05Ea3lNeXdnYVhSbGJTNXBaQ3dnWlM1emRHRmpheWtwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJR1ZzYzJVZ2FXWWdLSFI1Y0dWdlppQnBkR1Z0TG1OdmJuUmxiblFnUFQwOUlDZHZZbXBsWTNRbktTQjdYRzRnSUNBZ0lDQWdJR3B6YjI0Z1BTQnBkR1Z0TG1OdmJuUmxiblE3WEc0Z0lDQWdmVnh1SUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lFVnljbTl5S0dSbFluVm5MbWRsZEVWeWNtOXlLRFE1TWpRcEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCMllYSWdZMnhoYzNOR2FXNWtaWElzSUcxcGMzTnBibWREYkdGemN6dGNiaUFnSUNCMllYSWdhWE5UWTJWdVpTQTlJR2x6VTJObGJtVlBZbW9vYW5OdmJpazdYRzRnSUNBZ2FXWWdLR2x6VTJObGJtVXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tFTkRYMFZFU1ZSUFVpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JXbHpjMmx1WjBOc1lYTnpJRDBnVFdsemMybHVaME5zWVhOek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJ4aGMzTkdhVzVrWlhJZ1BTQm1kVzVqZEdsdmJpQW9kSGx3WlN3Z1pHRjBZU3dnYjNkdVpYSXNJSEJ5YjNCT1lXMWxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlISmxjeUE5SUcxcGMzTnBibWREYkdGemN5NWpiR0Z6YzBacGJtUmxjaWgwZVhCbExDQmtZWFJoTENCdmQyNWxjaXdnY0hKdmNFNWhiV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlaWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISmxjenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR05qTGw5TmFYTnphVzVuVTJOeWFYQjBMbWRsZEUxcGMzTnBibWRYY21Gd2NHVnlLSFI1Y0dVc0lHUmhkR0VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56Um1sdVpHVnlMbTl1UkdWeVpXWmxjbVZ1WTJWa0lEMGdiV2x6YzJsdVowTnNZWE56TG1Oc1lYTnpSbWx1WkdWeUxtOXVSR1Z5WldabGNtVnVZMlZrTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNOR2FXNWtaWElnUFNCall5NWZUV2x6YzJsdVoxTmpjbWx3ZEM1ellXWmxSbWx1WkVOc1lYTnpPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCamJHRnpjMFpwYm1SbGNpQTlJR1oxYm1OMGFXOXVJQ2hwWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHTnNjeUE5SUdwekxsOW5aWFJEYkdGemMwSjVTV1FvYVdRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTnNjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJqYkhNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZeTUzWVhKdVNVUW9ORGt3TXl3Z2FXUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUU5aWFtVmpkRHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ2RHUkpibVp2SUQwZ1kyTXVaR1Z6WlhKcFlXeHBlbVV1UkdWMFlXbHNjeTV3YjI5c0xtZGxkQ2dwTzF4dVhHNGdJQ0FnZG1GeUlHRnpjMlYwTzF4dUlDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lHRnpjMlYwSUQwZ1kyTXVaR1Z6WlhKcFlXeHBlbVVvYW5OdmJpd2dkR1JKYm1adkxDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMFpwYm1SbGNqb2dZMnhoYzNOR2FXNWtaWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBZWEpuWlhRNklHbDBaVzB1WlhocGMzUnBibWRCYzNObGRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUdOMWMzUnZiVVZ1ZGpvZ2FYUmxiVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQWdJQ0FnWTJNdVpHVnpaWEpwWVd4cGVtVXVSR1YwWVdsc2N5NXdiMjlzTG5CMWRDaDBaRWx1Wm04cE8xeHVJQ0FnSUNBZ0lDQjJZWElnWlhKeUlEMGdRME5mU2xOQ0lIeDhJRU5EWDFKVlRsUkpUVVVnUHlBb1pTQXJJQ2RjWEc0bklDc2daUzV6ZEdGamF5a2dPaUJsTG5OMFlXTnJPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUVWeWNtOXlLR1JsWW5WbkxtZGxkRVZ5Y205eUtEUTVNalVzSUdsMFpXMHVhV1FzSUdWeWNpa3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHRnpjMlYwTGw5MWRXbGtJRDBnYVhSbGJTNTFkV2xrTzF4dUlDQWdJR0Z6YzJWMExuVnliQ0E5SUdGemMyVjBMbTVoZEdsMlpWVnliRHRjYmx4dUlDQWdJR2xtSUNoRFExOUZSRWxVVDFJZ0ppWWdiV2x6YzJsdVowTnNZWE56S1NCN1hHNGdJQ0FnSUNBZ0lHMXBjM05wYm1kRGJHRnpjeTV5WlhCdmNuUk5hWE56YVc1blEyeGhjM01vWVhOelpYUXBPMXh1SUNBZ0lDQWdJQ0J0YVhOemFXNW5RMnhoYzNNdWNtVnpaWFFvS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ1pHVm1aWEp5WldSTWIyRmtJRDBnWTJGdVJHVm1aWEp5WldSTWIyRmtLR0Z6YzJWMExDQnBkR1Z0TENCcGMxTmpaVzVsS1R0Y2JpQWdJQ0IyWVhJZ1pHVndaVzVrY3lBOUlIQmhjbk5sUkdWd1pXNWtjeWhwZEdWdExDQmhjM05sZEN3Z2RHUkpibVp2TENCa1pXWmxjbkpsWkV4dllXUXBPMXh1WEc0Z0lDQWdZMk11WkdWelpYSnBZV3hwZW1VdVJHVjBZV2xzY3k1d2IyOXNMbkIxZENoMFpFbHVabThwTzF4dVhHNGdJQ0FnYVdZZ0tHUmxjR1Z1WkhNdWJHVnVaM1JvSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaGhjM05sZEM1dmJreHZZV1FwSUdGemMyVjBMbTl1VEc5aFpDZ3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMkZzYkdKaFkyc29iblZzYkN3Z1lYTnpaWFFwTzF4dUlDQWdJSDFjYmlBZ0lDQnNiMkZrUkdWd1pXNWtjeWgwYUdsekxuQnBjR1ZzYVc1bExDQnBkR1Z0TENCaGMzTmxkQ3dnWkdWd1pXNWtjeXdnWTJGc2JHSmhZMnNwTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR3h2WVdSVmRXbGtPMXh1Ykc5aFpGVjFhV1F1YVhOVFkyVnVaVTlpYWlBOUlHbHpVMk5sYm1WUFltbzdYRzRpWFgwPSJdfQ==