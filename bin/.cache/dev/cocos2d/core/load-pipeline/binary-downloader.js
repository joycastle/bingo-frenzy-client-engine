(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/load-pipeline/binary-downloader.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        function downloadBinary(item, callback) {
            var url = item.url;
            var xhr = cc.loader.getXMLHttpRequest(), errInfo = 'Load binary data failed: ' + url + '';
            xhr.open('GET', url, true);
            xhr.responseType = 'arraybuffer';
            xhr.onload = function () {
                var arrayBuffer = xhr.response;
                if (arrayBuffer) {
                    var result = new Uint8Array(arrayBuffer);
                    callback(null, result);
                } else {
                    callback({
                        status: xhr.status,
                        errorMessage: errInfo + '(no response)'
                    });
                }
            };
            xhr.onerror = function () {
                callback({
                    status: xhr.status,
                    errorMessage: errInfo + '(error)'
                });
            };
            xhr.ontimeout = function () {
                callback({
                    status: xhr.status,
                    errorMessage: errInfo + '(time out)'
                });
            };
            xhr.send(null);
        }
        module.exports = downloadBinary;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,