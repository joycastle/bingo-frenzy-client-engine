(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/load-pipeline/pipeline.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('../platform/js');
        var LoadingItems = require('./loading-items');
        var ItemState = LoadingItems.ItemState;
        function flow(pipe, item) {
            var pipeId = pipe.id;
            var itemState = item.states[pipeId];
            var next = pipe.next;
            var pipeline = pipe.pipeline;
            if (item.error || itemState === ItemState.WORKING || itemState === ItemState.ERROR) {
                return;
            } else if (itemState === ItemState.COMPLETE) {
                if (next) {
                    flow(next, item);
                } else {
                    pipeline.flowOut(item);
                }
            } else {
                item.states[pipeId] = ItemState.WORKING;
                var result = pipe.handle(item, function (err, result) {
                    if (err) {
                        item.error = err;
                        item.states[pipeId] = ItemState.ERROR;
                        pipeline.flowOut(item);
                    } else {
                        if (result) {
                            item.content = result;
                        }
                        item.states[pipeId] = ItemState.COMPLETE;
                        if (next) {
                            flow(next, item);
                        } else {
                            pipeline.flowOut(item);
                        }
                    }
                });
                if (result instanceof Error) {
                    item.error = result;
                    item.states[pipeId] = ItemState.ERROR;
                    pipeline.flowOut(item);
                } else if (result !== undefined) {
                    if (result !== null) {
                        item.content = result;
                    }
                    item.states[pipeId] = ItemState.COMPLETE;
                    if (next) {
                        flow(next, item);
                    } else {
                        pipeline.flowOut(item);
                    }
                }
            }
        }
        var Pipeline = function Pipeline(pipes) {
            this._pipes = pipes;
            this._cache = js.createMap(true);
            for (var i = 0; i < pipes.length; ++i) {
                var pipe = pipes[i];
                if (!pipe.handle || !pipe.id) {
                    continue;
                }
                pipe.pipeline = this;
                pipe.next = i < pipes.length - 1 ? pipes[i + 1] : null;
            }
        };
        Pipeline.ItemState = ItemState;
        var proto = Pipeline.prototype;
        proto.insertPipe = function (pipe, index) {
            if (!pipe.handle || !pipe.id || index > this._pipes.length) {
                cc.warnID(4921);
                return;
            }
            if (this._pipes.indexOf(pipe) > 0) {
                cc.warnID(4922);
                return;
            }
            pipe.pipeline = this;
            var nextPipe = null;
            if (index < this._pipes.length) {
                nextPipe = this._pipes[index];
            }
            var previousPipe = null;
            if (index > 0) {
                previousPipe = this._pipes[index - 1];
            }
            if (previousPipe) {
                previousPipe.next = pipe;
            }
            pipe.next = nextPipe;
            this._pipes.splice(index, 0, pipe);
        };
        proto.insertPipeAfter = function (refPipe, newPipe) {
            var index = this._pipes.indexOf(refPipe);
            if (index < 0) {
                return;
            }
            this.insertPipe(newPipe, index + 1);
        };
        proto.appendPipe = function (pipe) {
            if (!pipe.handle || !pipe.id) {
                return;
            }
            pipe.pipeline = this;
            pipe.next = null;
            if (this._pipes.length > 0) {
                this._pipes[this._pipes.length - 1].next = pipe;
            }
            this._pipes.push(pipe);
        };
        proto.flowIn = function (items) {
            var i, pipe = this._pipes[0], item;
            if (pipe) {
                for (i = 0; i < items.length; i++) {
                    item = items[i];
                    this._cache[item.id] = item;
                }
                for (i = 0; i < items.length; i++) {
                    item = items[i];
                    flow(pipe, item);
                }
            } else {
                for (i = 0; i < items.length; i++) {
                    this.flowOut(items[i]);
                }
            }
        };
        proto.flowInDeps = function (owner, urlList, callback) {
            var deps = LoadingItems.create(this, function (errors, items) {
                callback(errors, items);
                items.destroy();
            });
            return deps.append(urlList, owner);
        };
        proto.flowOut = function (item) {
            if (item.error) {
                delete this._cache[item.id];
            } else if (!this._cache[item.id]) {
                this._cache[item.id] = item;
            }
            item.complete = true;
            LoadingItems.itemComplete(item);
        };
        proto.copyItemStates = function (srcItem, dstItems) {
            if (!(dstItems instanceof Array)) {
                dstItems.states = srcItem.states;
                return;
            }
            for (var i = 0; i < dstItems.length; ++i) {
                dstItems[i].states = srcItem.states;
            }
        };
        proto.getItem = function (id) {
            var item = this._cache[id];
            if (!item)
                return item;
            if (item.alias)
                item = item.alias;
            return item;
        };
        proto.removeItem = function (id) {
            var removed = this._cache[id];
            if (removed && removed.complete) {
                delete this._cache[id];
            }
            return removed;
        };
        proto.clear = function () {
            for (var id in this._cache) {
                var item = this._cache[id];
                delete this._cache[id];
                if (!item.complete) {
                    item.error = new Error('Canceled manually');
                    this.flowOut(item);
                }
            }
        };
        cc.Pipeline = module.exports = Pipeline;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,