(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/load-pipeline/downloader.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('../platform/js');
        var debug = require('../CCDebug');
        require('../utils/CCPath');
        var Pipeline = require('./pipeline');
        var PackDownloader = require('./pack-downloader');
        var downloadBinary = require('./binary-downloader');
        var downloadText = require('./text-downloader');
        var urlAppendTimestamp = require('./utils').urlAppendTimestamp;
        var downloadAudio;
        if (!CC_EDITOR || !Editor.isMainProcess) {
            downloadAudio = require('./audio-downloader');
        } else {
            downloadAudio = null;
        }
        function skip() {
            return null;
        }
        function downloadScript(item, callback, isAsync) {
            var url = item.url, d = document, s = document.createElement('script');
            if (window.location.protocol !== 'file:') {
                s.crossOrigin = 'anonymous';
            }
            s.async = isAsync;
            s.src = urlAppendTimestamp(url);
            function loadHandler() {
                s.parentNode.removeChild(s);
                s.removeEventListener('load', loadHandler, false);
                s.removeEventListener('error', errorHandler, false);
                callback(null, url);
            }
            function errorHandler() {
                s.parentNode.removeChild(s);
                s.removeEventListener('load', loadHandler, false);
                s.removeEventListener('error', errorHandler, false);
                callback(new Error(debug.getError(4928, url)));
            }
            s.addEventListener('load', loadHandler, false);
            s.addEventListener('error', errorHandler, false);
            d.body.appendChild(s);
        }
        function downloadImage(item, callback, isCrossOrigin, img) {
            if (isCrossOrigin === undefined) {
                isCrossOrigin = true;
            }
            var url = urlAppendTimestamp(item.url);
            img = img || new Image();
            if (isCrossOrigin && window.location.protocol !== 'file:') {
                img.crossOrigin = 'anonymous';
            } else {
                img.crossOrigin = null;
            }
            if (img.complete && img.naturalWidth > 0 && img.src === url) {
                return img;
            } else {
                var loadCallback = function loadCallback() {
                    img.removeEventListener('load', loadCallback);
                    img.removeEventListener('error', errorCallback);
                    img.id = item.id;
                    callback(null, img);
                };
                var errorCallback = function errorCallback() {
                    img.removeEventListener('load', loadCallback);
                    img.removeEventListener('error', errorCallback);
                    if (window.location.protocol !== 'https:' && img.crossOrigin && img.crossOrigin.toLowerCase() === 'anonymous') {
                        downloadImage(item, callback, false, img);
                    } else {
                        callback(new Error(debug.getError(4930, url)));
                    }
                };
                img.addEventListener('load', loadCallback);
                img.addEventListener('error', errorCallback);
                img.src = url;
            }
        }
        function downloadUuid(item, callback) {
            var result = PackDownloader.load(item, callback);
            if (result === undefined) {
                return this.extMap['json'](item, callback);
            }
            return result || undefined;
        }
        var defaultMap = {
            'js': downloadScript,
            'png': downloadImage,
            'jpg': downloadImage,
            'bmp': downloadImage,
            'jpeg': downloadImage,
            'gif': downloadImage,
            'ico': downloadImage,
            'tiff': downloadImage,
            'webp': downloadImage,
            'image': downloadImage,
            'pvr': downloadBinary,
            'pkm': downloadBinary,
            'mp3': downloadAudio,
            'ogg': downloadAudio,
            'wav': downloadAudio,
            'm4a': downloadAudio,
            'txt': downloadText,
            'xml': downloadText,
            'vsh': downloadText,
            'fsh': downloadText,
            'atlas': downloadText,
            'tmx': downloadText,
            'tsx': downloadText,
            'json': downloadText,
            'ExportJson': downloadText,
            'plist': downloadText,
            'fnt': downloadText,
            'font': skip,
            'eot': skip,
            'ttf': skip,
            'woff': skip,
            'svg': skip,
            'ttc': skip,
            'uuid': downloadUuid,
            'binary': downloadBinary,
            'bin': downloadBinary,
            'dbbin': downloadBinary,
            'default': downloadText
        };
        var ID = 'Downloader';
        var Downloader = function Downloader(extMap) {
            this.id = ID;
            this.async = true;
            this.pipeline = null;
            this._curConcurrent = 0;
            this._loadQueue = [];
            this._subpackages = {};
            this.extMap = js.mixin(extMap, defaultMap);
        };
        Downloader.ID = ID;
        Downloader.PackDownloader = PackDownloader;
        Downloader.prototype.addHandlers = function (extMap) {
            js.mixin(this.extMap, extMap);
        };
        Downloader.prototype._handleLoadQueue = function () {
            while (this._curConcurrent < cc.macro.DOWNLOAD_MAX_CONCURRENT) {
                var nextOne = this._loadQueue.shift();
                if (!nextOne) {
                    break;
                }
                var syncRet = this.handle(nextOne.item, nextOne.callback);
                if (syncRet !== undefined) {
                    if (syncRet instanceof Error) {
                        nextOne.callback(syncRet);
                    } else {
                        nextOne.callback(null, syncRet);
                    }
                }
            }
        };
        Downloader.prototype.handle = function (item, callback) {
            var self = this;
            var downloadFunc = this.extMap[item.type] || this.extMap['default'];
            var syncRet = undefined;
            if (this._curConcurrent < cc.macro.DOWNLOAD_MAX_CONCURRENT) {
                this._curConcurrent++;
                syncRet = downloadFunc.call(this, item, function (err, result) {
                    self._curConcurrent = Math.max(0, self._curConcurrent - 1);
                    self._handleLoadQueue();
                    callback && callback(err, result);
                });
                if (syncRet !== undefined) {
                    this._curConcurrent = Math.max(0, this._curConcurrent - 1);
                    this._handleLoadQueue();
                    return syncRet;
                }
            } else if (item.ignoreMaxConcurrency) {
                syncRet = downloadFunc.call(this, item, callback);
                if (syncRet !== undefined) {
                    return syncRet;
                }
            } else {
                this._loadQueue.push({
                    item: item,
                    callback: callback
                });
            }
        };
        Downloader.prototype.loadSubpackage = function (name, completeCallback) {
            var pac = this._subpackages[name];
            if (pac) {
                if (pac.loaded) {
                    if (completeCallback)
                        completeCallback();
                } else {
                    downloadScript({ url: pac.path + 'index.js' }, function (err) {
                        if (!err) {
                            pac.loaded = true;
                        }
                        if (completeCallback)
                            completeCallback(err);
                    });
                }
            } else if (completeCallback) {
                completeCallback(new Error('Can\'t find subpackage ' + name));
            }
        };
        Pipeline.Downloader = module.exports = Downloader;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,