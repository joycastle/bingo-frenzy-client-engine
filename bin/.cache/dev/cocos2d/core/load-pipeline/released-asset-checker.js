(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/load-pipeline/released-asset-checker.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        if (CC_DEBUG) {
            var ReleasedAssetChecker = function ReleasedAssetChecker() {
                this._releasedKeys = js.createMap(true);
                this._dirty = false;
            };
            var getItemDesc = function getItemDesc(item) {
                if (item.uuid) {
                    if (!tmpInfo) {
                        tmpInfo = {
                            path: '',
                            type: null
                        };
                    }
                    if (cc.loader._assetTables.assets._getInfo_DEBUG(item.uuid, tmpInfo)) {
                        tmpInfo.path = 'resources/' + tmpInfo.path;
                        return '"' + tmpInfo.path + '" (type: ' + js.getClassName(tmpInfo.type) + ', uuid: ' + item.uuid + ')';
                    } else {
                        return '"' + item.rawUrl + '" (' + item.uuid + ')';
                    }
                } else {
                    return '"' + item.rawUrl + '"';
                }
            };
            var doCheckCouldRelease = function doCheckCouldRelease(releasedKey, refOwnerItem, caches) {
                var loadedAgain = caches[releasedKey];
                if (!loadedAgain) {
                    cc.log('"' + releasedKey + '" was released but maybe still referenced by ' + getItemDesc(refOwnerItem));
                }
            };
            var js = require('../platform/js');
            ReleasedAssetChecker.prototype.setReleased = function (item, releasedKey) {
                this._releasedKeys[releasedKey] = true;
                this._dirty = true;
            };
            var tmpInfo = null;
            ReleasedAssetChecker.prototype.checkCouldRelease = function (caches) {
                if (!this._dirty) {
                    return;
                }
                this._dirty = false;
                var released = this._releasedKeys;
                for (var id in caches) {
                    var item = caches[id];
                    if (item.alias) {
                        item = item.alias;
                    }
                    var depends = item.dependKeys;
                    if (depends) {
                        for (var i = 0; i < depends.length; ++i) {
                            var depend = depends[i];
                            if (released[depend]) {
                                doCheckCouldRelease(depend, item, caches);
                                delete released[depend];
                            }
                        }
                    }
                }
                js.clear(released);
            };
            module.exports = ReleasedAssetChecker;
        }
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,