(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/load-pipeline/asset-table.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var pushToMap = require('../utils/misc').pushToMap;
        var js = require('../platform/js');
        function Entry(uuid, type, path) {
            this.uuid = uuid;
            this.type = type;
            this.path = path;
        }
        function AssetTable() {
            this._pathToUuid = js.createMap(true);
            this._pathToUuidTree = {};
        }
        function isMatchByWord(path, test) {
            if (path.length > test.length) {
                var nextAscii = path.charCodeAt(test.length);
                return nextAscii === 46 || nextAscii === 47;
            }
            return true;
        }
        var proto = AssetTable.prototype;
        proto.getUuid = function (path, type) {
            path = cc.url.normalize(path);
            var item = this._pathToUuid[path];
            if (item) {
                if (Array.isArray(item)) {
                    if (type) {
                        for (var i = 0; i < item.length; i++) {
                            var entry = item[i];
                            if (js.isChildClassOf(entry.type, type)) {
                                return entry.uuid;
                            }
                        }
                        if (CC_DEBUG && js.isChildClassOf(type, cc.SpriteFrame)) {
                            for (var _i = 0; _i < item.length; _i++) {
                                var _entry = item[_i];
                                if (js.isChildClassOf(_entry.type, cc.SpriteAtlas)) {
                                    cc.errorID(4932, path);
                                    break;
                                }
                            }
                        }
                    } else {
                        return item[0].uuid;
                    }
                } else if (!type || js.isChildClassOf(item.type, type)) {
                    return item.uuid;
                } else if (CC_DEBUG && js.isChildClassOf(type, cc.SpriteFrame) && js.isChildClassOf(item.type, cc.SpriteAtlas)) {
                    cc.errorID(4932, path);
                }
            }
            return '';
        };
        proto.getUuidArray = function (path, type, out_urls) {
            path = cc.url.normalize(path);
            if (path[path.length - 1] === '/') {
                path = path.slice(0, -1);
            }
            var uuids = [];
            var isChildClassOf = js.isChildClassOf;
            var _foundAtlasUrl;
            var currItem = this._pathToUuidTree;
            path.split('/').forEach(function (o) {
                return currItem = currItem[o];
            });
            var fn = function fn(item) {
                if (item instanceof Entry) {
                    var entry = item;
                    if (!type || isChildClassOf(entry.type, type)) {
                        uuids.push(entry.uuid);
                        if (out_urls) {
                            out_urls.push(entry.p);
                        }
                    } else if (CC_DEBUG && entry.type === cc.SpriteAtlas) {
                        _foundAtlasUrl = entry.p;
                    }
                } else {
                    for (var p in item) {
                        fn(item[p]);
                    }
                }
            };
            fn(currItem);
            if (CC_DEBUG && uuids.length === 0 && _foundAtlasUrl && js.isChildClassOf(type, cc.SpriteFrame)) {
                cc.errorID(4932, _foundAtlasUrl);
            }
            return uuids;
        };
        proto.add = function (path, uuid, type, isMainAsset) {
            path = path.substring(0, path.length - cc.path.extname(path).length);
            var newEntry = new Entry(uuid, type, path);
            pushToMap(this._pathToUuid, path, newEntry, isMainAsset);
            var currItem = this._pathToUuidTree;
            path.split('/').forEach(function (o, i, arr) {
                if (i < arr.length - 1) {
                    currItem[o] = currItem[o] || {};
                    currItem = currItem[o];
                } else {
                    var exists = currItem[o];
                    if (exists) {
                        if (Array.isArray(exists)) {
                            if (isMainAsset) {
                                exists.push(exists[0]);
                                exists[0] = newEntry;
                            } else {
                                exists.push(newEntry);
                            }
                        } else {
                            currItem[o] = isMainAsset ? [
                                newEntry,
                                exists
                            ] : [
                                exists,
                                newEntry
                            ];
                        }
                    } else {
                        currItem[o] = newEntry;
                    }
                }
            });
        };
        proto._getInfo_DEBUG = CC_DEBUG && function (uuid, out_info) {
            var path2uuid = this._pathToUuid;
            var paths = Object.keys(path2uuid);
            for (var p = 0; p < paths.length; ++p) {
                var path = paths[p];
                var item = path2uuid[path];
                if (Array.isArray(item)) {
                    for (var i = 0; i < item.length; i++) {
                        var entry = item[i];
                        if (entry.uuid === uuid) {
                            out_info.path = path;
                            out_info.type = entry.type;
                            return true;
                        }
                    }
                } else if (item.uuid === uuid) {
                    out_info.path = path;
                    out_info.type = item.type;
                    return true;
                }
            }
            return false;
        };
        proto.reset = function () {
            this._pathToUuid = js.createMap(true);
            this._pathToUuidTree = {};
        };
        module.exports = AssetTable;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,