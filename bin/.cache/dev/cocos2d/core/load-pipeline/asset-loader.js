(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/load-pipeline/asset-loader.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        require('../utils/CCPath');
        var debug = require('../CCDebug');
        var Pipeline = require('./pipeline');
        var LoadingItems = require('./loading-items');
        var ID = 'AssetLoader';
        var AssetLoader = function AssetLoader(extMap) {
            this.id = ID;
            this.async = true;
            this.pipeline = null;
        };
        AssetLoader.ID = ID;
        var reusedArray = [];
        AssetLoader.prototype.handle = function (item, callback) {
            var uuid = item.uuid;
            if (!uuid) {
                return item.content || null;
            }
            var self = this;
            cc.AssetLibrary.queryAssetInfo(uuid, function (error, url, isRawAsset) {
                if (error) {
                    callback(error);
                } else {
                    item.url = item.rawUrl = url;
                    item.isRawAsset = isRawAsset;
                    if (isRawAsset) {
                        var ext = cc.path.extname(url).toLowerCase();
                        if (!ext) {
                            callback(new Error(debug.getError(4931, uuid, url)));
                            return;
                        }
                        ext = ext.substr(1);
                        var queue = LoadingItems.getQueue(item);
                        reusedArray[0] = {
                            queueId: item.queueId,
                            id: url,
                            url: url,
                            type: ext,
                            error: null,
                            alias: item,
                            complete: true
                        };
                        if (CC_EDITOR) {
                            self.pipeline._cache[url] = reusedArray[0];
                        }
                        queue.append(reusedArray);
                        item.type = ext;
                        callback(null, item.content);
                    } else {
                        item.type = 'uuid';
                        callback(null, item.content);
                    }
                }
            });
        };
        Pipeline.AssetLoader = module.exports = AssetLoader;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,