(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/load-pipeline/loading-items.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var CallbacksInvoker = require('../platform/callbacks-invoker');
        require('../utils/CCPath');
        var js = require('../platform/js');
        var _qid = 0 | Math.random() * 998;
        var _queues = js.createMap(true);
        var _pool = [];
        var _POOL_MAX_LENGTH = 10;
        var ItemState = {
            WORKING: 1,
            COMPLETE: 2,
            ERROR: 3
        };
        var _queueDeps = js.createMap(true);
        function isIdValid(id) {
            var realId = id.url || id;
            return typeof realId === 'string';
        }
        function _parseUrlParam(url) {
            if (!url)
                return undefined;
            var split = url.split('?');
            if (!split || !split[0] || !split[1]) {
                return undefined;
            }
            var urlParam = {};
            var queries = split[1].split('&');
            queries.forEach(function (item) {
                var itemSplit = item.split('=');
                urlParam[itemSplit[0]] = itemSplit[1];
            });
            return urlParam;
        }
        function createItem(id, queueId) {
            var url = (typeof id === 'undefined' ? 'undefined' : _typeof(id)) === 'object' ? id.url : id;
            var result = {
                queueId: queueId,
                id: url,
                url: url,
                rawUrl: undefined,
                urlParam: _parseUrlParam(url),
                type: '',
                error: null,
                content: null,
                complete: false,
                states: {},
                deps: null
            };
            if ((typeof id === 'undefined' ? 'undefined' : _typeof(id)) === 'object') {
                js.mixin(result, id);
                if (id.skips) {
                    for (var i = 0; i < id.skips.length; i++) {
                        var skip = id.skips[i];
                        result.states[skip] = ItemState.COMPLETE;
                    }
                }
            }
            result.rawUrl = result.url;
            if (url && !result.type) {
                result.type = cc.path.extname(url).toLowerCase().substr(1);
            }
            return result;
        }
        var checkedIds = {};
        function checkCircleReference(owner, item, recursiveCall) {
            if (!owner || !item) {
                return false;
            }
            var result = false;
            checkedIds[item.id] = true;
            if (item.deps) {
                var i, deps = item.deps, subDep;
                for (i = 0; i < deps.length; i++) {
                    subDep = deps[i];
                    if (subDep.id === owner.id) {
                        result = true;
                        break;
                    } else if (checkedIds[subDep.id]) {
                        continue;
                    } else if (subDep.deps && checkCircleReference(owner, subDep, true)) {
                        result = true;
                        break;
                    }
                }
            }
            if (!recursiveCall) {
                checkedIds = {};
            }
            return result;
        }
        var LoadingItems = function LoadingItems(pipeline, urlList, onProgress, onComplete) {
            CallbacksInvoker.call(this);
            this._id = ++_qid;
            _queues[this._id] = this;
            this._pipeline = pipeline;
            this._errorUrls = js.createMap(true);
            this._appending = false;
            this._ownerQueue = null;
            this.onProgress = onProgress;
            this.onComplete = onComplete;
            this.map = js.createMap(true);
            this.completed = {};
            this.totalCount = 0;
            this.completedCount = 0;
            if (this._pipeline) {
                this.active = true;
            } else {
                this.active = false;
            }
            if (urlList) {
                if (urlList.length > 0) {
                    this.append(urlList);
                } else {
                    this.allComplete();
                }
            }
        };
        LoadingItems.ItemState = new cc.Enum(ItemState);
        LoadingItems.create = function (pipeline, urlList, onProgress, onComplete) {
            if (onProgress === undefined) {
                if (typeof urlList === 'function') {
                    onComplete = urlList;
                    urlList = onProgress = null;
                }
            } else if (onComplete === undefined) {
                if (typeof urlList === 'function') {
                    onComplete = onProgress;
                    onProgress = urlList;
                    urlList = null;
                } else {
                    onComplete = onProgress;
                    onProgress = null;
                }
            }
            var queue = new LoadingItems(pipeline, urlList, onProgress, onComplete);
            return queue;
        };
        LoadingItems.getQueue = function (item) {
            return item.queueId ? _queues[item.queueId] : null;
        };
        LoadingItems.itemComplete = function (item) {
            var queue = _queues[item.queueId];
            if (queue) {
                queue.itemComplete(item.id);
            }
        };
        LoadingItems.initQueueDeps = function (queue) {
            var dep = _queueDeps[queue._id];
            if (!dep) {
                dep = _queueDeps[queue._id] = {
                    completed: [],
                    completedMap: {},
                    deps: [],
                    depsMap: {}
                };
            } else {
                dep.completed.length = 0;
                dep.completedMap = {};
                dep.deps.length = 0;
                dep.depsMap = {};
            }
        };
        LoadingItems.registerQueueDep = function (owner, depId) {
            var queueId = owner.queueId || owner;
            if (!queueId) {
                return false;
            }
            var queueDepList = _queueDeps[queueId];
            if (queueDepList) {
                if (!queueDepList.depsMap[depId]) {
                    queueDepList.depsMap[depId] = true;
                    queueDepList.deps.push(depId);
                }
            } else if (owner.id) {
                for (var id in _queueDeps) {
                    var queue = _queueDeps[id];
                    if (queue.depsMap[owner.id]) {
                        if (!queue.depsMap[depId]) {
                            queue.deps.push(depId);
                            queue.depsMap[depId] = true;
                        }
                    }
                }
            }
        };
        LoadingItems.finishDep = function (depId) {
            for (var id in _queueDeps) {
                var queue = _queueDeps[id];
                if (queue.depsMap[depId] && !queue.completedMap[depId]) {
                    queue.completedMap[depId] = true;
                    queue.completed.push(depId);
                }
            }
        };
        var proto = LoadingItems.prototype;
        js.mixin(proto, CallbacksInvoker.prototype);
        proto.append = function (urlList, owner) {
            if (!this.active) {
                return [];
            }
            if (owner && !owner.deps) {
                owner.deps = [];
            }
            this._appending = true;
            var accepted = [], i, url, item;
            for (i = 0; i < urlList.length; ++i) {
                url = urlList[i];
                if (url.queueId && !this.map[url.id]) {
                    this.map[url.id] = url;
                    owner && owner.deps.push(url);
                    if (url.complete || checkCircleReference(owner, url)) {
                        this.totalCount++;
                        this.itemComplete(url.id);
                        continue;
                    } else {
                        var self = this;
                        var queue = _queues[url.queueId];
                        if (queue) {
                            this.totalCount++;
                            LoadingItems.registerQueueDep(owner || this._id, url.id);
                            queue.addListener(url.id, function (item) {
                                self.itemComplete(item.id);
                            });
                        }
                        continue;
                    }
                }
                if (isIdValid(url)) {
                    item = createItem(url, this._id);
                    var key = item.id;
                    if (!this.map[key]) {
                        this.map[key] = item;
                        this.totalCount++;
                        owner && owner.deps.push(item);
                        LoadingItems.registerQueueDep(owner || this._id, key);
                        accepted.push(item);
                    }
                }
            }
            this._appending = false;
            if (this.completedCount === this.totalCount) {
                this.allComplete();
            } else {
                this._pipeline.flowIn(accepted);
            }
            return accepted;
        };
        proto._childOnProgress = function (item) {
            if (this.onProgress) {
                var dep = _queueDeps[this._id];
                this.onProgress(dep ? dep.completed.length : this.completedCount, dep ? dep.deps.length : this.totalCount, item);
            }
        };
        proto.allComplete = function () {
            var errors = js.isEmptyObject(this._errorUrls) ? null : this._errorUrls;
            if (this.onComplete) {
                this.onComplete(errors, this);
            }
        };
        proto.isCompleted = function () {
            return this.completedCount >= this.totalCount;
        };
        proto.isItemCompleted = function (id) {
            return !!this.completed[id];
        };
        proto.exists = function (id) {
            return !!this.map[id];
        };
        proto.getContent = function (id) {
            var item = this.map[id];
            var ret = null;
            if (item) {
                if (item.content) {
                    ret = item.content;
                } else if (item.alias) {
                    ret = item.alias.content;
                }
            }
            return ret;
        };
        proto.getError = function (id) {
            var item = this.map[id];
            var ret = null;
            if (item) {
                if (item.error) {
                    ret = item.error;
                } else if (item.alias) {
                    ret = item.alias.error;
                }
            }
            return ret;
        };
        proto.addListener = CallbacksInvoker.prototype.on;
        proto.hasListener = CallbacksInvoker.prototype.hasEventListener;
        proto.removeListener = CallbacksInvoker.prototype.off;
        proto.removeAllListeners = CallbacksInvoker.prototype.removeAll;
        proto.removeItem = function (url) {
            var item = this.map[url];
            if (!item)
                return;
            if (!this.completed[item.alias || url])
                return;
            delete this.completed[url];
            delete this.map[url];
            if (item.alias) {
                delete this.completed[item.alias.id];
                delete this.map[item.alias.id];
            }
            this.completedCount--;
            this.totalCount--;
        };
        proto.itemComplete = function (id) {
            var item = this.map[id];
            if (!item) {
                return;
            }
            var errorListId = id in this._errorUrls;
            if (item.error instanceof Error || js.isString(item.error)) {
                this._errorUrls[id] = item.error;
            } else if (item.error) {
                js.mixin(this._errorUrls, item.error);
            } else if (!item.error && errorListId) {
                delete this._errorUrls[id];
            }
            this.completed[id] = item;
            this.completedCount++;
            LoadingItems.finishDep(item.id);
            if (this.onProgress) {
                var dep = _queueDeps[this._id];
                this.onProgress(dep ? dep.completed.length : this.completedCount, dep ? dep.deps.length : this.totalCount, item);
            }
            this.emit(id, item);
            this.removeAll(id);
            if (!this._appending && this.completedCount >= this.totalCount) {
                this.allComplete();
            }
        };
        proto.destroy = function () {
            this.active = false;
            this._appending = false;
            this._pipeline = null;
            this._ownerQueue = null;
            js.clear(this._errorUrls);
            this.onProgress = null;
            this.onComplete = null;
            this.map = js.createMap(true);
            this.completed = {};
            this.totalCount = 0;
            this.completedCount = 0;
            CallbacksInvoker.call(this);
            if (_queueDeps[this._id]) {
                _queueDeps[this._id].completed.length = 0;
                _queueDeps[this._id].completedMap = {};
                _queueDeps[this._id].deps.length = 0;
                _queueDeps[this._id].depsMap = {};
            }
            delete _queues[this._id];
            delete _queueDeps[this._id];
        };
        cc.LoadingItems = module.exports = LoadingItems;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,