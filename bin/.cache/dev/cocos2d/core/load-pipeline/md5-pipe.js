(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/load-pipeline/md5-pipe.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Pipeline = require('./pipeline');
        var ID = 'MD5Pipe';
        var UuidRegex = /.*[/\\][0-9a-fA-F]{2}[/\\]([0-9a-fA-F-]{8,})/;
        var MD5Pipe = function MD5Pipe(md5AssetsMap, md5NativeAssetsMap, libraryBase) {
            this.id = ID;
            this.async = false;
            this.pipeline = null;
            this.md5AssetsMap = md5AssetsMap;
            this.md5NativeAssetsMap = md5NativeAssetsMap;
            this.libraryBase = libraryBase;
        };
        MD5Pipe.ID = ID;
        MD5Pipe.prototype.handle = function (item) {
            item.url = this.transformURL(item.url);
            return null;
        };
        MD5Pipe.prototype.transformURL = function (url) {
            var isNativeAsset = !url.startsWith(this.libraryBase);
            var map = isNativeAsset ? this.md5NativeAssetsMap : this.md5AssetsMap;
            url = url.replace(UuidRegex, function (match, uuid) {
                var hashValue = map[uuid];
                return hashValue ? match + '.' + hashValue : match;
            });
            return url;
        };
        Pipeline.MD5Pipe = module.exports = MD5Pipe;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,