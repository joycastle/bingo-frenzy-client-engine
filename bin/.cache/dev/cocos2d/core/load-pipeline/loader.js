(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/load-pipeline/loader.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('../platform/js');
        var plistParser = require('../platform/CCSAXParser').plistParser;
        var Pipeline = require('./pipeline');
        var Texture2D = require('../assets/CCTexture2D');
        var loadUuid = require('./uuid-loader');
        var fontLoader = require('./font-loader');
        var _require = require('../platform/utils'), callInNextTick = _require.callInNextTick;
        function loadNothing() {
            return null;
        }
        function loadJSON(item) {
            if (typeof item.content !== 'string') {
                return new Error('JSON Loader: Input item doesn\'t contain string content');
            }
            try {
                var result = JSON.parse(item.content);
                return result;
            } catch (e) {
                return new Error('JSON Loader: Parse json [' + item.id + '] failed : ' + e);
            }
        }
        function loadImage(item) {
            var loadByDeserializedAsset = item._owner instanceof cc.Asset;
            if (loadByDeserializedAsset) {
                return null;
            }
            var image = item.content;
            if (cc.sys.platform !== cc.sys.FB_PLAYABLE_ADS && !(image instanceof Image)) {
                return new Error('Image Loader: Input item doesn\'t contain Image content');
            }
            var tex = item.texture || new Texture2D();
            tex._uuid = item.uuid;
            tex.url = item.url;
            tex._setRawAsset(item.rawUrl, false);
            tex._nativeAsset = image;
            return tex;
        }
        function loadAudioAsAsset(item) {
            var loadByDeserializedAsset = item._owner instanceof cc.Asset;
            if (loadByDeserializedAsset) {
                return null;
            }
            var audioClip = new cc.AudioClip();
            audioClip._setRawAsset(item.rawUrl, false);
            audioClip._nativeAsset = item.content;
            audioClip.url = item.url;
            return audioClip;
        }
        function loadPlist(item) {
            if (typeof item.content !== 'string') {
                return new Error('Plist Loader: Input item doesn\'t contain string content');
            }
            var result = plistParser.parse(item.content);
            if (result) {
                return result;
            } else {
                return new Error('Plist Loader: Parse [' + item.id + '] failed');
            }
        }
        function loadBinary(item) {
            if (item.load) {
                return item.load(item.content);
            } else {
                return null;
            }
        }
        var PVR_HEADER_LENGTH = 13;
        var PVR_MAGIC = 55727696;
        var PVR_HEADER_MAGIC = 0;
        var PVR_HEADER_FORMAT = 2;
        var PVR_HEADER_HEIGHT = 6;
        var PVR_HEADER_WIDTH = 7;
        var PVR_HEADER_MIPMAPCOUNT = 11;
        var PVR_HEADER_METADATA = 12;
        function loadPVRTex(item) {
            var buffer = item.content instanceof ArrayBuffer ? item.content : item.content.buffer;
            var header = new Int32Array(buffer, 0, PVR_HEADER_LENGTH);
            if (header[PVR_HEADER_MAGIC] != PVR_MAGIC) {
                return new Error('Invalid magic number in PVR header');
            }
            var width = header[PVR_HEADER_WIDTH];
            var height = header[PVR_HEADER_HEIGHT];
            var dataOffset = header[PVR_HEADER_METADATA] + 52;
            var pvrtcData = new Uint8Array(buffer, dataOffset);
            var pvrAsset = {
                _data: pvrtcData,
                _compressed: true,
                width: width,
                height: height
            };
            return pvrAsset;
        }
        var ETC_PKM_HEADER_SIZE = 16;
        var ETC_PKM_FORMAT_OFFSET = 6;
        var ETC_PKM_ENCODED_WIDTH_OFFSET = 8;
        var ETC_PKM_ENCODED_HEIGHT_OFFSET = 10;
        var ETC_PKM_WIDTH_OFFSET = 12;
        var ETC_PKM_HEIGHT_OFFSET = 14;
        var ETC1_RGB_NO_MIPMAPS = 0;
        var ETC2_RGB_NO_MIPMAPS = 1;
        var ETC2_RGBA_NO_MIPMAPS = 3;
        function readBEUint16(header, offset) {
            return header[offset] << 8 | header[offset + 1];
        }
        function loadPKMTex(item) {
            var buffer = item.content instanceof ArrayBuffer ? item.content : item.content.buffer;
            var header = new Uint8Array(buffer);
            var format = readBEUint16(header, ETC_PKM_FORMAT_OFFSET);
            if (format !== ETC1_RGB_NO_MIPMAPS && format !== ETC2_RGB_NO_MIPMAPS && format !== ETC2_RGBA_NO_MIPMAPS) {
                return new Error('Invalid magic number in ETC header');
            }
            var width = readBEUint16(header, ETC_PKM_WIDTH_OFFSET);
            var height = readBEUint16(header, ETC_PKM_HEIGHT_OFFSET);
            var encodedWidth = readBEUint16(header, ETC_PKM_ENCODED_WIDTH_OFFSET);
            var encodedHeight = readBEUint16(header, ETC_PKM_ENCODED_HEIGHT_OFFSET);
            var etcData = new Uint8Array(buffer, ETC_PKM_HEADER_SIZE);
            var etcAsset = {
                _data: etcData,
                _compressed: true,
                width: width,
                height: height
            };
            return etcAsset;
        }
        var defaultMap = {
            'png': loadImage,
            'jpg': loadImage,
            'bmp': loadImage,
            'jpeg': loadImage,
            'gif': loadImage,
            'ico': loadImage,
            'tiff': loadImage,
            'webp': loadImage,
            'image': loadImage,
            'pvr': loadPVRTex,
            'pkm': loadPKMTex,
            'mp3': loadAudioAsAsset,
            'ogg': loadAudioAsAsset,
            'wav': loadAudioAsAsset,
            'm4a': loadAudioAsAsset,
            'json': loadJSON,
            'ExportJson': loadJSON,
            'plist': loadPlist,
            'uuid': loadUuid,
            'prefab': loadUuid,
            'fire': loadUuid,
            'scene': loadUuid,
            'binary': loadBinary,
            'dbbin': loadBinary,
            'bin': loadBinary,
            'font': fontLoader.loadFont,
            'eot': fontLoader.loadFont,
            'ttf': fontLoader.loadFont,
            'woff': fontLoader.loadFont,
            'svg': fontLoader.loadFont,
            'ttc': fontLoader.loadFont,
            'default': loadNothing
        };
        var ID = 'Loader';
        var Loader = function Loader(extMap) {
            this.id = ID;
            this.async = true;
            this.pipeline = null;
            this._loadQueue = [];
            this._frameTime = null;
            this._logicTime = null;
            this._idleTime = 0;
            this._isLoading = false;
            this.extMap = js.mixin(extMap, defaultMap);
        };
        Loader.ID = ID;
        Loader.prototype.addHandlers = function (extMap) {
            this.extMap = js.mixin(this.extMap, extMap);
        };
        Loader.prototype._handleLoadQueue = function () {
            var self = this;
            if (!this._frameTime || !this._logicTime) {
                this._frameTime = 1000 / cc.game.getFrameRate();
                this._logicTime = this._frameTime * cc.macro.LOAD_PERCENT_BY_FRAME;
            }
            if (this._loadQueue.length <= 0) {
                if (!this._idleTime) {
                    this._idleTime = Date.now();
                }
                if (Date.now() - this._idleTime > 5000) {
                    this._isLoading = false;
                } else {
                    callInNextTick(function () {
                        self._handleLoadQueue();
                    });
                }
            } else {
                this._idleTime = null;
                var startTime = Date.now();
                while (this._loadQueue.length > 0) {
                    var nextOne = this._loadQueue.shift();
                    if (!nextOne) {
                        break;
                    }
                    var loadFunc = this.extMap[nextOne.item.type] || this.extMap['default'];
                    var syncRet = loadFunc.call(this, nextOne.item, nextOne.callback);
                    if (syncRet !== undefined) {
                        if (syncRet instanceof Error) {
                            nextOne.callback(syncRet);
                        } else {
                            nextOne.callback(null, syncRet);
                        }
                    }
                    if (Date.now() - startTime > this._logicTime) {
                        break;
                    }
                }
                var sleepTime = Math.max(0, this._frameTime - (Date.now() - startTime));
                setTimeout(function () {
                    self._handleLoadQueue();
                }, sleepTime);
            }
        };
        Loader.prototype.handle = function (item, callback) {
            if (CC_EDITOR) {
                var loadFunc = this.extMap[item.type] || this.extMap['default'];
                return loadFunc.call(this, item, callback);
            } else {
                this._loadQueue.push({
                    item: item,
                    callback: callback
                });
                if (this._isLoading) {
                    return;
                }
                this._isLoading = true;
                var self = this;
                callInNextTick(function () {
                    self._handleLoadQueue();
                });
            }
        };
        Pipeline.Loader = module.exports = Loader;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,