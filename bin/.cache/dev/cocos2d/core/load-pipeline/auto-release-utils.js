(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/load-pipeline/auto-release-utils.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var js = require('../platform/js');
        function parseDepends(key, parsed) {
            var item = cc.loader.getItem(key);
            if (item) {
                var depends = item.dependKeys;
                if (depends) {
                    for (var i = 0; i < depends.length; i++) {
                        var depend = depends[i];
                        if (!parsed[depend]) {
                            parsed[depend] = true;
                            parseDepends(depend, parsed);
                        }
                    }
                }
            }
        }
        function visitAsset(asset, excludeMap) {
            if (!asset._uuid) {
                return;
            }
            var key = cc.loader._getReferenceKey(asset);
            if (!excludeMap[key]) {
                excludeMap[key] = true;
                parseDepends(key, excludeMap);
            }
        }
        function visitComponent(comp, excludeMap) {
            var props = Object.getOwnPropertyNames(comp);
            for (var i = 0; i < props.length; i++) {
                var value = comp[props[i]];
                if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value) {
                    if (Array.isArray(value)) {
                        for (var j = 0; j < value.length; j++) {
                            var val = value[j];
                            if (val instanceof cc.RawAsset) {
                                visitAsset(val, excludeMap);
                            }
                        }
                    } else if (!value.constructor || value.constructor === Object) {
                        var keys = Object.getOwnPropertyNames(value);
                        for (var _j = 0; _j < keys.length; _j++) {
                            var _val = value[keys[_j]];
                            if (_val instanceof cc.RawAsset) {
                                visitAsset(_val, excludeMap);
                            }
                        }
                    } else if (value instanceof cc.RawAsset) {
                        visitAsset(value, excludeMap);
                    }
                }
            }
        }
        function visitNode(node, excludeMap) {
            for (var i = 0; i < node._components.length; i++) {
                visitComponent(node._components[i], excludeMap);
            }
            for (var _i = 0; _i < node._children.length; _i++) {
                visitNode(node._children[_i], excludeMap);
            }
        }
        module.exports = {
            autoRelease: function autoRelease(oldSceneAssets, nextSceneAssets, persistNodes) {
                var releaseSettings = cc.loader._autoReleaseSetting;
                var excludeMap = js.createMap();
                if (nextSceneAssets) {
                    for (var i = 0; i < nextSceneAssets.length; i++) {
                        excludeMap[nextSceneAssets[i]] = true;
                    }
                }
                for (var _i2 = 0; _i2 < persistNodes.length; _i2++) {
                    visitNode(persistNodes[_i2], excludeMap);
                }
                if (oldSceneAssets) {
                    for (var _i3 = 0; _i3 < oldSceneAssets.length; _i3++) {
                        var key = oldSceneAssets[_i3];
                        if (releaseSettings[key] !== false && !excludeMap[key]) {
                            cc.loader.release(key);
                        }
                    }
                }
                var keys = Object.keys(releaseSettings);
                for (var _i4 = 0; _i4 < keys.length; _i4++) {
                    var _key = keys[_i4];
                    if (releaseSettings[_key] === true && !excludeMap[_key]) {
                        cc.loader.release(_key);
                    }
                }
            },
            getDependsRecursively: function getDependsRecursively(key) {
                var depends = {};
                parseDepends(key, depends);
                return Object.keys(depends);
            }
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,