(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/event-manager/CCEvent.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = cc.js;
        require('../event/event');
        var EventMouse = function EventMouse(eventType, bubbles) {
            cc.Event.call(this, cc.Event.MOUSE, bubbles);
            this._eventType = eventType;
            this._button = 0;
            this._x = 0;
            this._y = 0;
            this._prevX = 0;
            this._prevY = 0;
            this._scrollX = 0;
            this._scrollY = 0;
        };
        js.extend(EventMouse, cc.Event);
        var proto = EventMouse.prototype;
        proto.setScrollData = function (scrollX, scrollY) {
            this._scrollX = scrollX;
            this._scrollY = scrollY;
        };
        proto.getScrollX = function () {
            return this._scrollX;
        };
        proto.getScrollY = function () {
            return this._scrollY;
        };
        proto.setLocation = function (x, y) {
            this._x = x;
            this._y = y;
        };
        proto.getLocation = function () {
            return cc.v2(this._x, this._y);
        };
        proto.getLocationInView = function () {
            return cc.v2(this._x, cc.view._designResolutionSize.height - this._y);
        };
        proto._setPrevCursor = function (x, y) {
            this._prevX = x;
            this._prevY = y;
        };
        proto.getPreviousLocation = function () {
            return cc.v2(this._prevX, this._prevY);
        };
        proto.getDelta = function () {
            return cc.v2(this._x - this._prevX, this._y - this._prevY);
        };
        proto.getDeltaX = function () {
            return this._x - this._prevX;
        };
        proto.getDeltaY = function () {
            return this._y - this._prevY;
        };
        proto.setButton = function (button) {
            this._button = button;
        };
        proto.getButton = function () {
            return this._button;
        };
        proto.getLocationX = function () {
            return this._x;
        };
        proto.getLocationY = function () {
            return this._y;
        };
        EventMouse.NONE = 0;
        EventMouse.DOWN = 1;
        EventMouse.UP = 2;
        EventMouse.MOVE = 3;
        EventMouse.SCROLL = 4;
        EventMouse.BUTTON_LEFT = 0;
        EventMouse.BUTTON_RIGHT = 2;
        EventMouse.BUTTON_MIDDLE = 1;
        EventMouse.BUTTON_4 = 3;
        EventMouse.BUTTON_5 = 4;
        EventMouse.BUTTON_6 = 5;
        EventMouse.BUTTON_7 = 6;
        EventMouse.BUTTON_8 = 7;
        var EventTouch = function EventTouch(touchArr, bubbles) {
            cc.Event.call(this, cc.Event.TOUCH, bubbles);
            this._eventCode = 0;
            this._touches = touchArr || [];
            this.touch = null;
            this.currentTouch = null;
        };
        js.extend(EventTouch, cc.Event);
        proto = EventTouch.prototype;
        proto.getEventCode = function () {
            return this._eventCode;
        };
        proto.getTouches = function () {
            return this._touches;
        };
        proto._setEventCode = function (eventCode) {
            this._eventCode = eventCode;
        };
        proto._setTouches = function (touches) {
            this._touches = touches;
        };
        proto.setLocation = function (x, y) {
            this.touch && this.touch.setTouchInfo(this.touch.getID(), x, y);
        };
        proto.getLocation = function () {
            return this.touch ? this.touch.getLocation() : cc.v2();
        };
        proto.getLocationInView = function () {
            return this.touch ? this.touch.getLocationInView() : cc.v2();
        };
        proto.getPreviousLocation = function () {
            return this.touch ? this.touch.getPreviousLocation() : cc.v2();
        };
        proto.getStartLocation = function () {
            return this.touch ? this.touch.getStartLocation() : cc.v2();
        };
        proto.getID = function () {
            return this.touch ? this.touch.getID() : null;
        };
        proto.getDelta = function () {
            return this.touch ? this.touch.getDelta() : cc.v2();
        };
        proto.getDeltaX = function () {
            return this.touch ? this.touch.getDelta().x : 0;
        };
        proto.getDeltaY = function () {
            return this.touch ? this.touch.getDelta().y : 0;
        };
        proto.getLocationX = function () {
            return this.touch ? this.touch.getLocationX() : 0;
        };
        proto.getLocationY = function () {
            return this.touch ? this.touch.getLocationY() : 0;
        };
        EventTouch.MAX_TOUCHES = 5;
        EventTouch.BEGAN = 0;
        EventTouch.MOVED = 1;
        EventTouch.ENDED = 2;
        EventTouch.CANCELED = 3;
        var EventAcceleration = function EventAcceleration(acc, bubbles) {
            cc.Event.call(this, cc.Event.ACCELERATION, bubbles);
            this.acc = acc;
        };
        js.extend(EventAcceleration, cc.Event);
        var EventKeyboard = function EventKeyboard(keyCode, isPressed, bubbles) {
            cc.Event.call(this, cc.Event.KEYBOARD, bubbles);
            this.keyCode = keyCode;
            this.isPressed = isPressed;
        };
        js.extend(EventKeyboard, cc.Event);
        cc.Event.EventMouse = EventMouse;
        cc.Event.EventTouch = EventTouch;
        cc.Event.EventAcceleration = EventAcceleration;
        cc.Event.EventKeyboard = EventKeyboard;
        module.exports = cc.Event;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,