(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/event-manager/CCTouch.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        cc.Touch = function (x, y, id) {
            this._lastModified = 0;
            this.setTouchInfo(id, x, y);
        };
        cc.Touch.prototype = {
            constructor: cc.Touch,
            getLocation: function getLocation() {
                return cc.v2(this._point.x, this._point.y);
            },
            getLocationX: function getLocationX() {
                return this._point.x;
            },
            getLocationY: function getLocationY() {
                return this._point.y;
            },
            getPreviousLocation: function getPreviousLocation() {
                return cc.v2(this._prevPoint.x, this._prevPoint.y);
            },
            getStartLocation: function getStartLocation() {
                return cc.v2(this._startPoint.x, this._startPoint.y);
            },
            getDelta: function getDelta() {
                return this._point.sub(this._prevPoint);
            },
            getLocationInView: function getLocationInView() {
                return cc.v2(this._point.x, cc.view._designResolutionSize.height - this._point.y);
            },
            getPreviousLocationInView: function getPreviousLocationInView() {
                return cc.v2(this._prevPoint.x, cc.view._designResolutionSize.height - this._prevPoint.y);
            },
            getStartLocationInView: function getStartLocationInView() {
                return cc.v2(this._startPoint.x, cc.view._designResolutionSize.height - this._startPoint.y);
            },
            getID: function getID() {
                return this._id;
            },
            setTouchInfo: function setTouchInfo(id, x, y) {
                this._prevPoint = this._point;
                this._point = cc.v2(x || 0, y || 0);
                this._id = id;
                if (!this._startPointCaptured) {
                    this._startPoint = cc.v2(this._point);
                    cc.view._convertPointWithScale(this._startPoint);
                    this._startPointCaptured = true;
                }
            },
            _setPoint: function _setPoint(x, y) {
                if (y === undefined) {
                    this._point.x = x.x;
                    this._point.y = x.y;
                } else {
                    this._point.x = x;
                    this._point.y = y;
                }
            },
            _setPrevPoint: function _setPrevPoint(x, y) {
                if (y === undefined)
                    this._prevPoint = cc.v2(x.x, x.y);
                else
                    this._prevPoint = cc.v2(x || 0, y || 0);
            }
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,