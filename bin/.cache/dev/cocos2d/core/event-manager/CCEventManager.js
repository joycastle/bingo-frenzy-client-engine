(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/event-manager/CCEventManager.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('../platform/js');
        require('./CCEventListener');
        var ListenerID = cc.EventListener.ListenerID;
        var _EventListenerVector = function _EventListenerVector() {
            this._fixedListeners = [];
            this._sceneGraphListeners = [];
            this.gt0Index = 0;
        };
        _EventListenerVector.prototype = {
            constructor: _EventListenerVector,
            size: function size() {
                return this._fixedListeners.length + this._sceneGraphListeners.length;
            },
            empty: function empty() {
                return this._fixedListeners.length === 0 && this._sceneGraphListeners.length === 0;
            },
            push: function push(listener) {
                if (listener._getFixedPriority() === 0)
                    this._sceneGraphListeners.push(listener);
                else
                    this._fixedListeners.push(listener);
            },
            clearSceneGraphListeners: function clearSceneGraphListeners() {
                this._sceneGraphListeners.length = 0;
            },
            clearFixedListeners: function clearFixedListeners() {
                this._fixedListeners.length = 0;
            },
            clear: function clear() {
                this._sceneGraphListeners.length = 0;
                this._fixedListeners.length = 0;
            },
            getFixedPriorityListeners: function getFixedPriorityListeners() {
                return this._fixedListeners;
            },
            getSceneGraphPriorityListeners: function getSceneGraphPriorityListeners() {
                return this._sceneGraphListeners;
            }
        };
        var __getListenerID = function __getListenerID(event) {
            var eventType = cc.Event, type = event.type;
            if (type === eventType.ACCELERATION)
                return ListenerID.ACCELERATION;
            if (type === eventType.KEYBOARD)
                return ListenerID.KEYBOARD;
            if (type.startsWith(eventType.MOUSE))
                return ListenerID.MOUSE;
            if (type.startsWith(eventType.TOUCH)) {
                cc.logID(2000);
            }
            return '';
        };
        var eventManager = {
            DIRTY_NONE: 0,
            DIRTY_FIXED_PRIORITY: 1 << 0,
            DIRTY_SCENE_GRAPH_PRIORITY: 1 << 1,
            DIRTY_ALL: 3,
            _listenersMap: {},
            _priorityDirtyFlagMap: {},
            _nodeListenersMap: {},
            _toAddedListeners: [],
            _toRemovedListeners: [],
            _dirtyListeners: {},
            _inDispatch: 0,
            _isEnabled: false,
            _internalCustomListenerIDs: [],
            _setDirtyForNode: function _setDirtyForNode(node) {
                var selListeners = this._nodeListenersMap[node._id];
                if (selListeners !== undefined) {
                    for (var j = 0, len = selListeners.length; j < len; j++) {
                        var selListener = selListeners[j];
                        var listenerID = selListener._getListenerID();
                        if (this._dirtyListeners[listenerID] == null)
                            this._dirtyListeners[listenerID] = true;
                    }
                }
                if (node.getChildren) {
                    var _children = node.getChildren();
                    for (var i = 0, len = _children ? _children.length : 0; i < len; i++) {
                        this._setDirtyForNode(_children[i]);
                    }
                }
            },
            pauseTarget: function pauseTarget(node, recursive) {
                if (!(node instanceof cc._BaseNode)) {
                    cc.warnID(3506);
                    return;
                }
                var listeners = this._nodeListenersMap[node._id], i, len;
                if (listeners) {
                    for (i = 0, len = listeners.length; i < len; i++) {
                        listeners[i]._setPaused(true);
                    }
                }
                if (recursive === true) {
                    var locChildren = node.getChildren();
                    for (i = 0, len = locChildren ? locChildren.length : 0; i < len; i++) {
                        this.pauseTarget(locChildren[i], true);
                    }
                }
            },
            resumeTarget: function resumeTarget(node, recursive) {
                if (!(node instanceof cc._BaseNode)) {
                    cc.warnID(3506);
                    return;
                }
                var listeners = this._nodeListenersMap[node._id], i, len;
                if (listeners) {
                    for (i = 0, len = listeners.length; i < len; i++) {
                        listeners[i]._setPaused(false);
                    }
                }
                this._setDirtyForNode(node);
                if (recursive === true && node.getChildren) {
                    var locChildren = node.getChildren();
                    for (i = 0, len = locChildren ? locChildren.length : 0; i < len; i++) {
                        this.resumeTarget(locChildren[i], true);
                    }
                }
            },
            _addListener: function _addListener(listener) {
                if (this._inDispatch === 0)
                    this._forceAddEventListener(listener);
                else
                    this._toAddedListeners.push(listener);
            },
            _forceAddEventListener: function _forceAddEventListener(listener) {
                var listenerID = listener._getListenerID();
                var listeners = this._listenersMap[listenerID];
                if (!listeners) {
                    listeners = new _EventListenerVector();
                    this._listenersMap[listenerID] = listeners;
                }
                listeners.push(listener);
                if (listener._getFixedPriority() === 0) {
                    this._setDirty(listenerID, this.DIRTY_SCENE_GRAPH_PRIORITY);
                    var node = listener._getSceneGraphPriority();
                    if (node === null)
                        cc.logID(3507);
                    this._associateNodeAndEventListener(node, listener);
                    if (node.activeInHierarchy)
                        this.resumeTarget(node);
                } else
                    this._setDirty(listenerID, this.DIRTY_FIXED_PRIORITY);
            },
            _getListeners: function _getListeners(listenerID) {
                return this._listenersMap[listenerID];
            },
            _updateDirtyFlagForSceneGraph: function _updateDirtyFlagForSceneGraph() {
                var locDirtyListeners = this._dirtyListeners;
                for (var selKey in locDirtyListeners) {
                    this._setDirty(selKey, this.DIRTY_SCENE_GRAPH_PRIORITY);
                }
                this._dirtyListeners = {};
            },
            _removeAllListenersInVector: function _removeAllListenersInVector(listenerVector) {
                if (!listenerVector)
                    return;
                var selListener;
                for (var i = listenerVector.length - 1; i >= 0; i--) {
                    selListener = listenerVector[i];
                    selListener._setRegistered(false);
                    if (selListener._getSceneGraphPriority() != null) {
                        this._dissociateNodeAndEventListener(selListener._getSceneGraphPriority(), selListener);
                        selListener._setSceneGraphPriority(null);
                    }
                    if (this._inDispatch === 0)
                        cc.js.array.removeAt(listenerVector, i);
                }
            },
            _removeListenersForListenerID: function _removeListenersForListenerID(listenerID) {
                var listeners = this._listenersMap[listenerID], i;
                if (listeners) {
                    var fixedPriorityListeners = listeners.getFixedPriorityListeners();
                    var sceneGraphPriorityListeners = listeners.getSceneGraphPriorityListeners();
                    this._removeAllListenersInVector(sceneGraphPriorityListeners);
                    this._removeAllListenersInVector(fixedPriorityListeners);
                    delete this._priorityDirtyFlagMap[listenerID];
                    if (!this._inDispatch) {
                        listeners.clear();
                        delete this._listenersMap[listenerID];
                    }
                }
                var locToAddedListeners = this._toAddedListeners, listener;
                for (i = locToAddedListeners.length - 1; i >= 0; i--) {
                    listener = locToAddedListeners[i];
                    if (listener && listener._getListenerID() === listenerID)
                        cc.js.array.removeAt(locToAddedListeners, i);
                }
            },
            _sortEventListeners: function _sortEventListeners(listenerID) {
                var dirtyFlag = this.DIRTY_NONE, locFlagMap = this._priorityDirtyFlagMap;
                if (locFlagMap[listenerID])
                    dirtyFlag = locFlagMap[listenerID];
                if (dirtyFlag !== this.DIRTY_NONE) {
                    locFlagMap[listenerID] = this.DIRTY_NONE;
                    if (dirtyFlag & this.DIRTY_FIXED_PRIORITY)
                        this._sortListenersOfFixedPriority(listenerID);
                    if (dirtyFlag & this.DIRTY_SCENE_GRAPH_PRIORITY) {
                        var rootEntity = cc.director.getScene();
                        if (rootEntity)
                            this._sortListenersOfSceneGraphPriority(listenerID);
                    }
                }
            },
            _sortListenersOfSceneGraphPriority: function _sortListenersOfSceneGraphPriority(listenerID) {
                var listeners = this._getListeners(listenerID);
                if (!listeners)
                    return;
                var sceneGraphListener = listeners.getSceneGraphPriorityListeners();
                if (!sceneGraphListener || sceneGraphListener.length === 0)
                    return;
                listeners.getSceneGraphPriorityListeners().sort(this._sortEventListenersOfSceneGraphPriorityDes);
            },
            _sortEventListenersOfSceneGraphPriorityDes: function _sortEventListenersOfSceneGraphPriorityDes(l1, l2) {
                var node1 = l1._getSceneGraphPriority(), node2 = l2._getSceneGraphPriority();
                if (!l2 || !node2 || !node2._activeInHierarchy || node2._parent === null)
                    return -1;
                else if (!l1 || !node1 || !node1._activeInHierarchy || node1._parent === null)
                    return 1;
                var p1 = node1, p2 = node2, ex = false;
                while (p1._parent._id !== p2._parent._id) {
                    p1 = p1._parent._parent === null ? (ex = true) && node2 : p1._parent;
                    p2 = p2._parent._parent === null ? (ex = true) && node1 : p2._parent;
                }
                if (p1._id === p2._id) {
                    if (p1._id === node2._id)
                        return -1;
                    if (p1._id === node1._id)
                        return 1;
                }
                return ex ? p1._localZOrder - p2._localZOrder : p2._localZOrder - p1._localZOrder;
            },
            _sortListenersOfFixedPriority: function _sortListenersOfFixedPriority(listenerID) {
                var listeners = this._listenersMap[listenerID];
                if (!listeners)
                    return;
                var fixedListeners = listeners.getFixedPriorityListeners();
                if (!fixedListeners || fixedListeners.length === 0)
                    return;
                fixedListeners.sort(this._sortListenersOfFixedPriorityAsc);
                var index = 0;
                for (var len = fixedListeners.length; index < len;) {
                    if (fixedListeners[index]._getFixedPriority() >= 0)
                        break;
                    ++index;
                }
                listeners.gt0Index = index;
            },
            _sortListenersOfFixedPriorityAsc: function _sortListenersOfFixedPriorityAsc(l1, l2) {
                return l1._getFixedPriority() - l2._getFixedPriority();
            },
            _onUpdateListeners: function _onUpdateListeners(listeners) {
                var fixedPriorityListeners = listeners.getFixedPriorityListeners();
                var sceneGraphPriorityListeners = listeners.getSceneGraphPriorityListeners();
                var i, selListener, idx, toRemovedListeners = this._toRemovedListeners;
                if (sceneGraphPriorityListeners) {
                    for (i = sceneGraphPriorityListeners.length - 1; i >= 0; i--) {
                        selListener = sceneGraphPriorityListeners[i];
                        if (!selListener._isRegistered()) {
                            cc.js.array.removeAt(sceneGraphPriorityListeners, i);
                            idx = toRemovedListeners.indexOf(selListener);
                            if (idx !== -1)
                                toRemovedListeners.splice(idx, 1);
                        }
                    }
                }
                if (fixedPriorityListeners) {
                    for (i = fixedPriorityListeners.length - 1; i >= 0; i--) {
                        selListener = fixedPriorityListeners[i];
                        if (!selListener._isRegistered()) {
                            cc.js.array.removeAt(fixedPriorityListeners, i);
                            idx = toRemovedListeners.indexOf(selListener);
                            if (idx !== -1)
                                toRemovedListeners.splice(idx, 1);
                        }
                    }
                }
                if (sceneGraphPriorityListeners && sceneGraphPriorityListeners.length === 0)
                    listeners.clearSceneGraphListeners();
                if (fixedPriorityListeners && fixedPriorityListeners.length === 0)
                    listeners.clearFixedListeners();
            },
            frameUpdateListeners: function frameUpdateListeners() {
                var locListenersMap = this._listenersMap, locPriorityDirtyFlagMap = this._priorityDirtyFlagMap;
                for (var selKey in locListenersMap) {
                    if (locListenersMap[selKey].empty()) {
                        delete locPriorityDirtyFlagMap[selKey];
                        delete locListenersMap[selKey];
                    }
                }
                var locToAddedListeners = this._toAddedListeners;
                if (locToAddedListeners.length !== 0) {
                    for (var i = 0, len = locToAddedListeners.length; i < len; i++) {
                        this._forceAddEventListener(locToAddedListeners[i]);
                    }
                    locToAddedListeners.length = 0;
                }
                if (this._toRemovedListeners.length !== 0) {
                    this._cleanToRemovedListeners();
                }
            },
            _updateTouchListeners: function _updateTouchListeners(event) {
                var locInDispatch = this._inDispatch;
                cc.assertID(locInDispatch > 0, 3508);
                if (locInDispatch > 1)
                    return;
                var listeners;
                listeners = this._listenersMap[ListenerID.TOUCH_ONE_BY_ONE];
                if (listeners) {
                    this._onUpdateListeners(listeners);
                }
                listeners = this._listenersMap[ListenerID.TOUCH_ALL_AT_ONCE];
                if (listeners) {
                    this._onUpdateListeners(listeners);
                }
                cc.assertID(locInDispatch === 1, 3509);
                var locToAddedListeners = this._toAddedListeners;
                if (locToAddedListeners.length !== 0) {
                    for (var i = 0, len = locToAddedListeners.length; i < len; i++) {
                        this._forceAddEventListener(locToAddedListeners[i]);
                    }
                    this._toAddedListeners.length = 0;
                }
                if (this._toRemovedListeners.length !== 0) {
                    this._cleanToRemovedListeners();
                }
            },
            _cleanToRemovedListeners: function _cleanToRemovedListeners() {
                var toRemovedListeners = this._toRemovedListeners;
                for (var i = 0; i < toRemovedListeners.length; i++) {
                    var selListener = toRemovedListeners[i];
                    var listeners = this._listenersMap[selListener._getListenerID()];
                    if (!listeners)
                        continue;
                    var idx, fixedPriorityListeners = listeners.getFixedPriorityListeners(), sceneGraphPriorityListeners = listeners.getSceneGraphPriorityListeners();
                    if (sceneGraphPriorityListeners) {
                        idx = sceneGraphPriorityListeners.indexOf(selListener);
                        if (idx !== -1) {
                            sceneGraphPriorityListeners.splice(idx, 1);
                        }
                    }
                    if (fixedPriorityListeners) {
                        idx = fixedPriorityListeners.indexOf(selListener);
                        if (idx !== -1) {
                            fixedPriorityListeners.splice(idx, 1);
                        }
                    }
                }
                toRemovedListeners.length = 0;
            },
            _onTouchEventCallback: function _onTouchEventCallback(listener, argsObj) {
                if (!listener._isRegistered())
                    return false;
                var event = argsObj.event, selTouch = event.currentTouch;
                event.currentTarget = listener._node;
                var isClaimed = false, removedIdx;
                var getCode = event.getEventCode(), EventTouch = cc.Event.EventTouch;
                if (getCode === EventTouch.BEGAN) {
                    if (listener.onTouchBegan) {
                        isClaimed = listener.onTouchBegan(selTouch, event);
                        if (isClaimed && listener._registered)
                            listener._claimedTouches.push(selTouch);
                    }
                } else if (listener._claimedTouches.length > 0 && (removedIdx = listener._claimedTouches.indexOf(selTouch)) !== -1) {
                    isClaimed = true;
                    if (getCode === EventTouch.MOVED && listener.onTouchMoved) {
                        listener.onTouchMoved(selTouch, event);
                    } else if (getCode === EventTouch.ENDED) {
                        if (listener.onTouchEnded)
                            listener.onTouchEnded(selTouch, event);
                        if (listener._registered)
                            listener._claimedTouches.splice(removedIdx, 1);
                    } else if (getCode === EventTouch.CANCELLED) {
                        if (listener.onTouchCancelled)
                            listener.onTouchCancelled(selTouch, event);
                        if (listener._registered)
                            listener._claimedTouches.splice(removedIdx, 1);
                    }
                }
                if (event.isStopped()) {
                    eventManager._updateTouchListeners(event);
                    return true;
                }
                if (isClaimed && listener.swallowTouches) {
                    if (argsObj.needsMutableSet)
                        argsObj.touches.splice(selTouch, 1);
                    return true;
                }
                return false;
            },
            _dispatchTouchEvent: function _dispatchTouchEvent(event) {
                this._sortEventListeners(ListenerID.TOUCH_ONE_BY_ONE);
                this._sortEventListeners(ListenerID.TOUCH_ALL_AT_ONCE);
                var oneByOneListeners = this._getListeners(ListenerID.TOUCH_ONE_BY_ONE);
                var allAtOnceListeners = this._getListeners(ListenerID.TOUCH_ALL_AT_ONCE);
                if (null === oneByOneListeners && null === allAtOnceListeners)
                    return;
                var originalTouches = event.getTouches(), mutableTouches = cc.js.array.copy(originalTouches);
                var oneByOneArgsObj = {
                    event: event,
                    needsMutableSet: oneByOneListeners && allAtOnceListeners,
                    touches: mutableTouches,
                    selTouch: null
                };
                if (oneByOneListeners) {
                    for (var i = 0; i < originalTouches.length; i++) {
                        event.currentTouch = originalTouches[i];
                        event._propagationStopped = event._propagationImmediateStopped = false;
                        this._dispatchEventToListeners(oneByOneListeners, this._onTouchEventCallback, oneByOneArgsObj);
                    }
                }
                if (allAtOnceListeners && mutableTouches.length > 0) {
                    this._dispatchEventToListeners(allAtOnceListeners, this._onTouchesEventCallback, {
                        event: event,
                        touches: mutableTouches
                    });
                    if (event.isStopped())
                        return;
                }
                this._updateTouchListeners(event);
            },
            _onTouchesEventCallback: function _onTouchesEventCallback(listener, callbackParams) {
                if (!listener._registered)
                    return false;
                var EventTouch = cc.Event.EventTouch, event = callbackParams.event, touches = callbackParams.touches, getCode = event.getEventCode();
                event.currentTarget = listener._node;
                if (getCode === EventTouch.BEGAN && listener.onTouchesBegan)
                    listener.onTouchesBegan(touches, event);
                else if (getCode === EventTouch.MOVED && listener.onTouchesMoved)
                    listener.onTouchesMoved(touches, event);
                else if (getCode === EventTouch.ENDED && listener.onTouchesEnded)
                    listener.onTouchesEnded(touches, event);
                else if (getCode === EventTouch.CANCELLED && listener.onTouchesCancelled)
                    listener.onTouchesCancelled(touches, event);
                if (event.isStopped()) {
                    eventManager._updateTouchListeners(event);
                    return true;
                }
                return false;
            },
            _associateNodeAndEventListener: function _associateNodeAndEventListener(node, listener) {
                var listeners = this._nodeListenersMap[node._id];
                if (!listeners) {
                    listeners = [];
                    this._nodeListenersMap[node._id] = listeners;
                }
                listeners.push(listener);
            },
            _dissociateNodeAndEventListener: function _dissociateNodeAndEventListener(node, listener) {
                var listeners = this._nodeListenersMap[node._id];
                if (listeners) {
                    cc.js.array.remove(listeners, listener);
                    if (listeners.length === 0)
                        delete this._nodeListenersMap[node._id];
                }
            },
            _dispatchEventToListeners: function _dispatchEventToListeners(listeners, onEvent, eventOrArgs) {
                var shouldStopPropagation = false;
                var fixedPriorityListeners = listeners.getFixedPriorityListeners();
                var sceneGraphPriorityListeners = listeners.getSceneGraphPriorityListeners();
                var i = 0, j, selListener;
                if (fixedPriorityListeners) {
                    if (fixedPriorityListeners.length !== 0) {
                        for (; i < listeners.gt0Index; ++i) {
                            selListener = fixedPriorityListeners[i];
                            if (selListener.isEnabled() && !selListener._isPaused() && selListener._isRegistered() && onEvent(selListener, eventOrArgs)) {
                                shouldStopPropagation = true;
                                break;
                            }
                        }
                    }
                }
                if (sceneGraphPriorityListeners && !shouldStopPropagation) {
                    for (j = 0; j < sceneGraphPriorityListeners.length; j++) {
                        selListener = sceneGraphPriorityListeners[j];
                        if (selListener.isEnabled() && !selListener._isPaused() && selListener._isRegistered() && onEvent(selListener, eventOrArgs)) {
                            shouldStopPropagation = true;
                            break;
                        }
                    }
                }
                if (fixedPriorityListeners && !shouldStopPropagation) {
                    for (; i < fixedPriorityListeners.length; ++i) {
                        selListener = fixedPriorityListeners[i];
                        if (selListener.isEnabled() && !selListener._isPaused() && selListener._isRegistered() && onEvent(selListener, eventOrArgs)) {
                            shouldStopPropagation = true;
                            break;
                        }
                    }
                }
            },
            _setDirty: function _setDirty(listenerID, flag) {
                var locDirtyFlagMap = this._priorityDirtyFlagMap;
                if (locDirtyFlagMap[listenerID] == null)
                    locDirtyFlagMap[listenerID] = flag;
                else
                    locDirtyFlagMap[listenerID] = flag | locDirtyFlagMap[listenerID];
            },
            _sortNumberAsc: function _sortNumberAsc(a, b) {
                return a - b;
            },
            hasEventListener: function hasEventListener(listenerID) {
                return !!this._getListeners(listenerID);
            },
            addListener: function addListener(listener, nodeOrPriority) {
                cc.assertID(listener && nodeOrPriority, 3503);
                if (!(cc.js.isNumber(nodeOrPriority) || nodeOrPriority instanceof cc._BaseNode)) {
                    cc.warnID(3506);
                    return;
                }
                if (!(listener instanceof cc.EventListener)) {
                    cc.assertID(!cc.js.isNumber(nodeOrPriority), 3504);
                    listener = cc.EventListener.create(listener);
                } else {
                    if (listener._isRegistered()) {
                        cc.logID(3505);
                        return;
                    }
                }
                if (!listener.checkAvailable())
                    return;
                if (cc.js.isNumber(nodeOrPriority)) {
                    if (nodeOrPriority === 0) {
                        cc.logID(3500);
                        return;
                    }
                    listener._setSceneGraphPriority(null);
                    listener._setFixedPriority(nodeOrPriority);
                    listener._setRegistered(true);
                    listener._setPaused(false);
                    this._addListener(listener);
                } else {
                    listener._setSceneGraphPriority(nodeOrPriority);
                    listener._setFixedPriority(0);
                    listener._setRegistered(true);
                    this._addListener(listener);
                }
                return listener;
            },
            addCustomListener: function addCustomListener(eventName, callback) {
                var listener = new cc.EventListener.create({
                    event: cc.EventListener.CUSTOM,
                    eventName: eventName,
                    callback: callback
                });
                this.addListener(listener, 1);
                return listener;
            },
            removeListener: function removeListener(listener) {
                if (listener == null)
                    return;
                var isFound, locListener = this._listenersMap;
                for (var selKey in locListener) {
                    var listeners = locListener[selKey];
                    var fixedPriorityListeners = listeners.getFixedPriorityListeners(), sceneGraphPriorityListeners = listeners.getSceneGraphPriorityListeners();
                    isFound = this._removeListenerInVector(sceneGraphPriorityListeners, listener);
                    if (isFound) {
                        this._setDirty(listener._getListenerID(), this.DIRTY_SCENE_GRAPH_PRIORITY);
                    } else {
                        isFound = this._removeListenerInVector(fixedPriorityListeners, listener);
                        if (isFound)
                            this._setDirty(listener._getListenerID(), this.DIRTY_FIXED_PRIORITY);
                    }
                    if (listeners.empty()) {
                        delete this._priorityDirtyFlagMap[listener._getListenerID()];
                        delete locListener[selKey];
                    }
                    if (isFound)
                        break;
                }
                if (!isFound) {
                    var locToAddedListeners = this._toAddedListeners;
                    for (var i = locToAddedListeners.length - 1; i >= 0; i--) {
                        var selListener = locToAddedListeners[i];
                        if (selListener === listener) {
                            cc.js.array.removeAt(locToAddedListeners, i);
                            selListener._setRegistered(false);
                            break;
                        }
                    }
                }
            },
            _removeListenerInCallback: function _removeListenerInCallback(listeners, callback) {
                if (listeners == null)
                    return false;
                for (var i = listeners.length - 1; i >= 0; i--) {
                    var selListener = listeners[i];
                    if (selListener._onCustomEvent === callback || selListener._onEvent === callback) {
                        selListener._setRegistered(false);
                        if (selListener._getSceneGraphPriority() != null) {
                            this._dissociateNodeAndEventListener(selListener._getSceneGraphPriority(), selListener);
                            selListener._setSceneGraphPriority(null);
                        }
                        if (this._inDispatch === 0)
                            cc.js.array.removeAt(listeners, i);
                        else
                            this._toRemovedListeners.push(selListener);
                        return true;
                    }
                }
                return false;
            },
            _removeListenerInVector: function _removeListenerInVector(listeners, listener) {
                if (listeners == null)
                    return false;
                for (var i = listeners.length - 1; i >= 0; i--) {
                    var selListener = listeners[i];
                    if (selListener === listener) {
                        selListener._setRegistered(false);
                        if (selListener._getSceneGraphPriority() != null) {
                            this._dissociateNodeAndEventListener(selListener._getSceneGraphPriority(), selListener);
                            selListener._setSceneGraphPriority(null);
                        }
                        if (this._inDispatch === 0)
                            cc.js.array.removeAt(listeners, i);
                        else
                            this._toRemovedListeners.push(selListener);
                        return true;
                    }
                }
                return false;
            },
            removeListeners: function removeListeners(listenerType, recursive) {
                var i, _t = this;
                if (!(cc.js.isNumber(listenerType) || listenerType instanceof cc._BaseNode)) {
                    cc.warnID(3506);
                    return;
                }
                if (listenerType._id !== undefined) {
                    var listeners = _t._nodeListenersMap[listenerType._id], i;
                    if (listeners) {
                        var listenersCopy = cc.js.array.copy(listeners);
                        for (i = 0; i < listenersCopy.length; i++) {
                            _t.removeListener(listenersCopy[i]);
                        }
                        delete _t._nodeListenersMap[listenerType._id];
                    }
                    var locToAddedListeners = _t._toAddedListeners;
                    for (i = 0; i < locToAddedListeners.length;) {
                        var listener = locToAddedListeners[i];
                        if (listener._getSceneGraphPriority() === listenerType) {
                            listener._setSceneGraphPriority(null);
                            listener._setRegistered(false);
                            locToAddedListeners.splice(i, 1);
                        } else
                            ++i;
                    }
                    if (recursive === true) {
                        var locChildren = listenerType.getChildren(), len;
                        for (i = 0, len = locChildren.length; i < len; i++) {
                            _t.removeListeners(locChildren[i], true);
                        }
                    }
                } else {
                    if (listenerType === cc.EventListener.TOUCH_ONE_BY_ONE)
                        _t._removeListenersForListenerID(ListenerID.TOUCH_ONE_BY_ONE);
                    else if (listenerType === cc.EventListener.TOUCH_ALL_AT_ONCE)
                        _t._removeListenersForListenerID(ListenerID.TOUCH_ALL_AT_ONCE);
                    else if (listenerType === cc.EventListener.MOUSE)
                        _t._removeListenersForListenerID(ListenerID.MOUSE);
                    else if (listenerType === cc.EventListener.ACCELERATION)
                        _t._removeListenersForListenerID(ListenerID.ACCELERATION);
                    else if (listenerType === cc.EventListener.KEYBOARD)
                        _t._removeListenersForListenerID(ListenerID.KEYBOARD);
                    else
                        cc.logID(3501);
                }
            },
            removeCustomListeners: function removeCustomListeners(customEventName) {
                this._removeListenersForListenerID(customEventName);
            },
            removeAllListeners: function removeAllListeners() {
                var locListeners = this._listenersMap, locInternalCustomEventIDs = this._internalCustomListenerIDs;
                for (var selKey in locListeners) {
                    if (locInternalCustomEventIDs.indexOf(selKey) === -1)
                        this._removeListenersForListenerID(selKey);
                }
            },
            setPriority: function setPriority(listener, fixedPriority) {
                if (listener == null)
                    return;
                var locListeners = this._listenersMap;
                for (var selKey in locListeners) {
                    var selListeners = locListeners[selKey];
                    var fixedPriorityListeners = selListeners.getFixedPriorityListeners();
                    if (fixedPriorityListeners) {
                        var found = fixedPriorityListeners.indexOf(listener);
                        if (found !== -1) {
                            if (listener._getSceneGraphPriority() != null)
                                cc.logID(3502);
                            if (listener._getFixedPriority() !== fixedPriority) {
                                listener._setFixedPriority(fixedPriority);
                                this._setDirty(listener._getListenerID(), this.DIRTY_FIXED_PRIORITY);
                            }
                            return;
                        }
                    }
                }
            },
            setEnabled: function setEnabled(enabled) {
                this._isEnabled = enabled;
            },
            isEnabled: function isEnabled() {
                return this._isEnabled;
            },
            dispatchEvent: function dispatchEvent(event) {
                if (!this._isEnabled)
                    return;
                this._updateDirtyFlagForSceneGraph();
                this._inDispatch++;
                if (!event || !event.getType) {
                    cc.errorID(3511);
                    return;
                }
                if (event.getType().startsWith(cc.Event.TOUCH)) {
                    this._dispatchTouchEvent(event);
                    this._inDispatch--;
                    return;
                }
                var listenerID = __getListenerID(event);
                this._sortEventListeners(listenerID);
                var selListeners = this._listenersMap[listenerID];
                if (selListeners != null) {
                    this._dispatchEventToListeners(selListeners, this._onListenerCallback, event);
                    this._onUpdateListeners(selListeners);
                }
                this._inDispatch--;
            },
            _onListenerCallback: function _onListenerCallback(listener, event) {
                event.currentTarget = listener._target;
                listener._onEvent(event);
                return event.isStopped();
            },
            dispatchCustomEvent: function dispatchCustomEvent(eventName, optionalUserData) {
                var ev = new cc.Event.EventCustom(eventName);
                ev.setUserData(optionalUserData);
                this.dispatchEvent(ev);
            }
        };
        js.get(cc, 'eventManager', function () {
            cc.warnID(1405, 'cc.eventManager', 'cc.EventTarget or cc.systemEvent');
            return eventManager;
        });
        module.exports = eventManager;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,