(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/requiring-frame.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var requiringFrames = [];
        cc._RF = {
            push: function push(module, uuid, script) {
                if (script === undefined) {
                    script = uuid;
                    uuid = '';
                }
                requiringFrames.push({
                    uuid: uuid,
                    script: script,
                    module: module,
                    exports: module.exports,
                    beh: null
                });
            },
            pop: function pop() {
                var frameInfo = requiringFrames.pop();
                var module = frameInfo.module;
                var exports = module.exports;
                if (exports === frameInfo.exports) {
                    for (var anyKey in exports) {
                        return;
                    }
                    module.exports = exports = frameInfo.cls;
                }
            },
            peek: function peek() {
                return requiringFrames[requiringFrames.length - 1];
            }
        };
        if (CC_EDITOR) {
            cc._RF.reset = function () {
                requiringFrames = [];
            };
        }
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,