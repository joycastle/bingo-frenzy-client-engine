(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/CCSAXParser.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('../platform/js');
        cc.SAXParser = function () {
            if (!(CC_EDITOR && Editor.isMainProcess) && window.DOMParser) {
                this._isSupportDOMParser = true;
                this._parser = new DOMParser();
            } else {
                this._isSupportDOMParser = false;
                this._parser = null;
            }
        };
        cc.SAXParser.prototype = {
            constructor: cc.SAXParser,
            parse: function parse(xmlTxt) {
                return this._parseXML(xmlTxt);
            },
            _parseXML: function _parseXML(textxml) {
                var xmlDoc;
                if (this._isSupportDOMParser) {
                    xmlDoc = this._parser.parseFromString(textxml, 'text/xml');
                } else {
                    xmlDoc = new ActiveXObject('Microsoft.XMLDOM');
                    xmlDoc.async = 'false';
                    xmlDoc.loadXML(textxml);
                }
                return xmlDoc;
            }
        };
        cc.PlistParser = function () {
            cc.SAXParser.call(this);
        };
        js.extend(cc.PlistParser, cc.SAXParser);
        js.mixin(cc.PlistParser.prototype, {
            parse: function parse(xmlTxt) {
                var xmlDoc = this._parseXML(xmlTxt);
                var plist = xmlDoc.documentElement;
                if (plist.tagName !== 'plist') {
                    cc.warnID(5100);
                    return {};
                }
                var node = null;
                for (var i = 0, len = plist.childNodes.length; i < len; i++) {
                    node = plist.childNodes[i];
                    if (node.nodeType === 1)
                        break;
                }
                xmlDoc = null;
                return this._parseNode(node);
            },
            _parseNode: function _parseNode(node) {
                var data = null, tagName = node.tagName;
                if (tagName === 'dict') {
                    data = this._parseDict(node);
                } else if (tagName === 'array') {
                    data = this._parseArray(node);
                } else if (tagName === 'string') {
                    if (node.childNodes.length === 1)
                        data = node.firstChild.nodeValue;
                    else {
                        data = '';
                        for (var i = 0; i < node.childNodes.length; i++) {
                            data += node.childNodes[i].nodeValue;
                        }
                    }
                } else if (tagName === 'false') {
                    data = false;
                } else if (tagName === 'true') {
                    data = true;
                } else if (tagName === 'real') {
                    data = parseFloat(node.firstChild.nodeValue);
                } else if (tagName === 'integer') {
                    data = parseInt(node.firstChild.nodeValue, 10);
                }
                return data;
            },
            _parseArray: function _parseArray(node) {
                var data = [];
                for (var i = 0, len = node.childNodes.length; i < len; i++) {
                    var child = node.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    data.push(this._parseNode(child));
                }
                return data;
            },
            _parseDict: function _parseDict(node) {
                var data = {};
                var key = null;
                for (var i = 0, len = node.childNodes.length; i < len; i++) {
                    var child = node.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    if (child.tagName === 'key')
                        key = child.firstChild.nodeValue;
                    else
                        data[key] = this._parseNode(child);
                }
                return data;
            }
        });
        cc.saxParser = new cc.SAXParser();
        cc.plistParser = new cc.PlistParser();
        module.exports = {
            saxParser: cc.saxParser,
            plistParser: cc.plistParser
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,