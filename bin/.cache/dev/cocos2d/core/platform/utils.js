(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/utils.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var js = require('./js');
        module.exports = {
            contains: function contains(refNode, otherNode) {
                if (typeof refNode.contains == 'function') {
                    return refNode.contains(otherNode);
                } else if (typeof refNode.compareDocumentPosition == 'function') {
                    return !!(refNode.compareDocumentPosition(otherNode) & 16);
                } else {
                    var node = otherNode.parentNode;
                    if (node) {
                        do {
                            if (node === refNode) {
                                return true;
                            } else {
                                node = node.parentNode;
                            }
                        } while (node !== null);
                    }
                    return false;
                }
            },
            isDomNode: (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && (typeof Node === 'function' ? function (obj) {
                return obj instanceof Node;
            } : function (obj) {
                return obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && typeof obj.nodeType === 'number' && typeof obj.nodeName === 'string';
            }),
            callInNextTick: CC_EDITOR ? function (callback, p1, p2) {
                if (callback) {
                    process.nextTick(function () {
                        callback(p1, p2);
                    });
                }
            } : function (callback, p1, p2) {
                if (callback) {
                    setTimeout(function () {
                        callback(p1, p2);
                    }, 0);
                }
            }
        };
        if (CC_DEV) {
            module.exports.isPlainEmptyObj_DEV = function (obj) {
                if (!obj || obj.constructor !== Object) {
                    return false;
                }
                return js.isEmptyObject(obj);
            };
            module.exports.cloneable_DEV = function (obj) {
                return obj && typeof obj.clone === 'function' && (obj.constructor && obj.constructor.prototype.hasOwnProperty('clone') || obj.hasOwnProperty('clone'));
            };
        }
        if (CC_TEST) {
            if (typeof Editor === 'undefined') {
                window.Editor = {
                    UuidUtils: {
                        NonUuidMark: '.',
                        uuid: function uuid() {
                            return '' + (new Date().getTime() + Math.random());
                        }
                    }
                };
            }
        }
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,