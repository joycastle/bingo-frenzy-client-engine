(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/callbacks-invoker.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('./js');
        var fastRemoveAt = js.array.fastRemoveAt;
        function empty() {
        }
        function CallbackInfo() {
            this.callback = empty;
            this.target = undefined;
            this.once = false;
        }
        CallbackInfo.prototype.set = function (callback, target, once) {
            this.callback = callback;
            this.target = target;
            this.once = !!once;
        };
        var callbackInfoPool = new js.Pool(function (info) {
            info.callback = empty;
            info.target = undefined;
            info.once = false;
            return true;
        }, 32);
        callbackInfoPool.get = function () {
            return this._get() || new CallbackInfo();
        };
        function CallbackList() {
            this.callbackInfos = [];
            this.isInvoking = false;
            this.containCanceled = false;
        }
        var proto = CallbackList.prototype;
        proto.removeByCallback = function (cb) {
            for (var i = 0; i < this.callbackInfos.length; ++i) {
                var info = this.callbackInfos[i];
                if (info && info.callback === cb) {
                    callbackInfoPool.put(info);
                    fastRemoveAt(this.callbackInfos, i);
                    --i;
                }
            }
        };
        proto.removeByTarget = function (target) {
            for (var i = 0; i < this.callbackInfos.length; ++i) {
                var info = this.callbackInfos[i];
                if (info && info.target === target) {
                    callbackInfoPool.put(info);
                    fastRemoveAt(this.callbackInfos, i);
                    --i;
                }
            }
        };
        proto.cancel = function (index) {
            var info = this.callbackInfos[index];
            if (info) {
                callbackInfoPool.put(info);
                this.callbackInfos[index] = null;
            }
            this.containCanceled = true;
        };
        proto.cancelAll = function () {
            for (var i = 0; i < this.callbackInfos.length; i++) {
                var info = this.callbackInfos[i];
                if (info) {
                    callbackInfoPool.put(info);
                    this.callbackInfos[i] = null;
                }
            }
            this.containCanceled = true;
        };
        proto.purgeCanceled = function () {
            for (var i = this.callbackInfos.length - 1; i >= 0; --i) {
                var info = this.callbackInfos[i];
                if (!info) {
                    fastRemoveAt(this.callbackInfos, i);
                }
            }
            this.containCanceled = false;
        };
        proto.clear = function () {
            this.cancelAll();
            this.callbackInfos.length = 0;
            this.isInvoking = false;
            this.containCanceled = false;
        };
        var MAX_SIZE = 16;
        var callbackListPool = new js.Pool(function (info) {
            info.callback = empty;
            info.target = undefined;
            info.once = false;
            return true;
        }, MAX_SIZE);
        callbackListPool.get = function () {
            return this._get() || new CallbackList();
        };
        function CallbacksInvoker() {
            this._callbackTable = js.createMap(true);
        }
        proto = CallbacksInvoker.prototype;
        proto.on = function (key, callback, target, once) {
            var list = this._callbackTable[key];
            if (!list) {
                list = this._callbackTable[key] = callbackListPool.get();
            }
            var info = callbackInfoPool.get();
            info.set(callback, target, once);
            list.callbackInfos.push(info);
        };
        proto.hasEventListener = function (key, callback, target) {
            var list = this._callbackTable[key];
            if (!list) {
                return false;
            }
            var infos = list.callbackInfos;
            if (!callback) {
                if (list.isInvoking) {
                    for (var i = 0; i < infos.length; ++i) {
                        if (infos[i]) {
                            return true;
                        }
                    }
                    return false;
                } else {
                    return infos.length > 0;
                }
            }
            for (var _i = 0; _i < infos.length; ++_i) {
                var info = infos[_i];
                if (info && info.callback === callback && info.target === target) {
                    return true;
                }
            }
            return false;
        };
        proto.removeAll = function (keyOrTarget) {
            if (typeof keyOrTarget === 'string') {
                var list = this._callbackTable[keyOrTarget];
                if (list) {
                    if (list.isInvoking) {
                        list.cancelAll();
                    } else {
                        list.clear();
                        callbackListPool.put(list);
                        delete this._callbackTable[keyOrTarget];
                    }
                }
            } else if (keyOrTarget) {
                for (var key in this._callbackTable) {
                    var _list = this._callbackTable[key];
                    if (_list.isInvoking) {
                        var infos = _list.callbackInfos;
                        for (var i = 0; i < infos.length; ++i) {
                            var info = infos[i];
                            if (info && info.target === keyOrTarget) {
                                _list.cancel(i);
                            }
                        }
                    } else {
                        _list.removeByTarget(keyOrTarget);
                    }
                }
            }
        };
        proto.off = function (key, callback, target) {
            var list = this._callbackTable[key];
            if (list) {
                var infos = list.callbackInfos;
                for (var i = 0; i < infos.length; ++i) {
                    var info = infos[i];
                    if (info && info.callback === callback && info.target === target) {
                        if (list.isInvoking) {
                            list.cancel(i);
                        } else {
                            fastRemoveAt(infos, i);
                            callbackInfoPool.put(info);
                        }
                        break;
                    }
                }
            }
        };
        proto.emit = function (key, arg1, arg2, arg3, arg4, arg5) {
            var list = this._callbackTable[key];
            if (list) {
                var rootInvoker = !list.isInvoking;
                list.isInvoking = true;
                var infos = list.callbackInfos;
                for (var i = 0, len = infos.length; i < len; ++i) {
                    var info = infos[i];
                    if (info) {
                        var target = info.target;
                        var callback = info.callback;
                        if (info.once) {
                            this.off(key, callback, target);
                        }
                        if (target) {
                            callback.call(target, arg1, arg2, arg3, arg4, arg5);
                        } else {
                            callback(arg1, arg2, arg3, arg4, arg5);
                        }
                    }
                }
                if (rootInvoker) {
                    list.isInvoking = false;
                    if (list.containCanceled) {
                        list.purgeCanceled();
                    }
                }
            }
        };
        if (CC_TEST) {
            cc._Test.CallbacksInvoker = CallbacksInvoker;
        }
        module.exports = CallbacksInvoker;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,