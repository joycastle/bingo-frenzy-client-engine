(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/instantiate-jit.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var CCObject = require('./CCObject');
        var Destroyed = CCObject.Flags.Destroyed;
        var PersistentMask = CCObject.Flags.PersistentMask;
        var Attr = require('./attribute');
        var js = require('./js');
        var CCClass = require('./CCClass');
        var Compiler = require('./compiler');
        var DEFAULT = Attr.DELIMETER + 'default';
        var IDENTIFIER_RE = CCClass.IDENTIFIER_RE;
        var escapeForJS = CCClass.escapeForJS;
        var VAR = 'var ';
        var LOCAL_OBJ = 'o';
        var LOCAL_TEMP_OBJ = 't';
        var LOCAL_ARRAY = 'a';
        var LINE_INDEX_OF_NEW_OBJ = 0;
        var DEFAULT_MODULE_CACHE = {
            'cc.Node': 'cc.Node',
            'cc.Sprite': 'cc.Sprite',
            'cc.Label': 'cc.Label',
            'cc.Button': 'cc.Button',
            'cc.Widget': 'cc.Widget',
            'cc.Animation': 'cc.Animation',
            'cc.ClickEvent': false,
            'cc.PrefabInfo': false
        };
        try {
            !Float32Array.name && (Float32Array.name = 'Float32Array');
            !Float64Array.name && (Float64Array.name = 'Float64Array');
            !Int8Array.name && (Int8Array.name = 'Int8Array');
            !Int16Array.name && (Int16Array.name = 'Int16Array');
            !Int32Array.name && (Int32Array.name = 'Int32Array');
            !Uint8Array.name && (Uint8Array.name = 'Uint8Array');
            !Uint16Array.name && (Uint16Array.name = 'Uint16Array');
            !Uint32Array.name && (Uint32Array.name = 'Uint32Array');
        } catch (e) {
        }
        function getTypedArrayName(constructor) {
            if (constructor === Float32Array) {
                return 'Float32Array';
            } else if (constructor === Float64Array) {
                return 'Float64Array';
            } else if (constructor === Int8Array) {
                return 'Int8Array';
            } else if (constructor === Int16Array) {
                return 'Int16Array';
            } else if (constructor === Int32Array) {
                return 'Int32Array';
            } else if (constructor === Uint8Array) {
                return 'Uint8Array';
            } else if (constructor === Uint16Array) {
                return 'Uint16Array';
            } else if (constructor === Uint32Array) {
                return 'Uint32Array';
            } else {
                throw new Error('Unknown TypedArray could not be instantiated: ' + constructor);
            }
        }
        function Declaration(varName, expression) {
            this.varName = varName;
            this.expression = expression;
        }
        Declaration.prototype.toString = function () {
            return VAR + this.varName + '=' + this.expression + ';';
        };
        function mergeDeclaration(statement, expression) {
            if (expression instanceof Declaration) {
                return new Declaration(expression.varName, statement + expression.expression);
            } else {
                return statement + expression;
            }
        }
        function writeAssignment(codeArray, statement, expression) {
            if (Array.isArray(expression)) {
                expression[0] = mergeDeclaration(statement, expression[0]);
                codeArray.push(expression);
            } else {
                codeArray.push(mergeDeclaration(statement, expression) + ';');
            }
        }
        function Assignments(targetExpression) {
            this._exps = [];
            this._targetExp = targetExpression;
        }
        Assignments.prototype.append = function (key, expression) {
            this._exps.push([
                key,
                expression
            ]);
        };
        Assignments.prototype.writeCode = function (codeArray) {
            var targetVar;
            if (this._exps.length > 1) {
                codeArray.push(LOCAL_TEMP_OBJ + '=' + this._targetExp + ';');
                targetVar = LOCAL_TEMP_OBJ;
            } else if (this._exps.length === 1) {
                targetVar = this._targetExp;
            } else {
                return;
            }
            for (var i = 0; i < this._exps.length; i++) {
                var pair = this._exps[i];
                writeAssignment(codeArray, targetVar + getPropAccessor(pair[0]) + '=', pair[1]);
            }
        };
        Assignments.pool = new js.Pool(function (obj) {
            obj._exps.length = 0;
            obj._targetExp = null;
        }, 1);
        Assignments.pool.get = function (targetExpression) {
            var cache = this._get() || new Assignments();
            cache._targetExp = targetExpression;
            return cache;
        };
        function equalsToDefault(def, value) {
            if (typeof def === 'function') {
                try {
                    def = def();
                } catch (e) {
                    return false;
                }
            }
            if (def === value) {
                return true;
            }
            if (def && value) {
                if (def instanceof cc.ValueType && def.equals(value)) {
                    return true;
                }
                if (Array.isArray(def) && Array.isArray(value) || def.constructor === Object && value.constructor === Object) {
                    try {
                        return Array.isArray(def) && Array.isArray(value) && def.length === 0 && value.length === 0;
                    } catch (e) {
                    }
                }
            }
            return false;
        }
        function getPropAccessor(key) {
            return IDENTIFIER_RE.test(key) ? '.' + key : '[' + escapeForJS(key) + ']';
        }
        function Parser(obj, parent) {
            this.parent = parent;
            this.objsToClear_iN$t = [];
            this.codeArray = [];
            this.objs = [];
            this.funcs = [];
            this.funcModuleCache = js.createMap();
            js.mixin(this.funcModuleCache, DEFAULT_MODULE_CACHE);
            this.globalVariables = [];
            this.globalVariableId = 0;
            this.localVariableId = 0;
            this.codeArray.push(VAR + LOCAL_OBJ + ',' + LOCAL_TEMP_OBJ + ';', 'if(R){', LOCAL_OBJ + '=R;', '}else{', LOCAL_OBJ + '=R=new ' + this.getFuncModule(obj.constructor, true) + '();', '}');
            js.value(obj, '_iN$t', { globalVar: 'R' }, true);
            this.objsToClear_iN$t.push(obj);
            this.enumerateObject(this.codeArray, obj);
            var globalVariablesDeclaration;
            if (this.globalVariables.length > 0) {
                globalVariablesDeclaration = VAR + this.globalVariables.join(',') + ';';
            }
            var code = Compiler.flattenCodeArray([
                'return (function(R){',
                globalVariablesDeclaration || [],
                this.codeArray,
                'return o;',
                '})'
            ]);
            this.result = Function('O', 'F', code)(this.objs, this.funcs);
            for (var i = 0, len = this.objsToClear_iN$t.length; i < len; ++i) {
                this.objsToClear_iN$t[i]._iN$t = null;
            }
            this.objsToClear_iN$t.length = 0;
        }
        var proto = Parser.prototype;
        proto.getFuncModule = function (func, usedInNew) {
            var clsName = js.getClassName(func);
            if (clsName) {
                var cache = this.funcModuleCache[clsName];
                if (cache) {
                    return cache;
                } else if (cache === undefined) {
                    var clsNameIsModule = clsName.indexOf('.') !== -1;
                    if (clsNameIsModule) {
                        try {
                            clsNameIsModule = func === Function('return ' + clsName)();
                            if (clsNameIsModule) {
                                this.funcModuleCache[clsName] = clsName;
                                return clsName;
                            }
                        } catch (e) {
                        }
                    }
                }
            }
            var index = this.funcs.indexOf(func);
            if (index < 0) {
                index = this.funcs.length;
                this.funcs.push(func);
            }
            var res = 'F[' + index + ']';
            if (usedInNew) {
                res = '(' + res + ')';
            }
            this.funcModuleCache[clsName] = res;
            return res;
        };
        proto.getObjRef = function (obj) {
            var index = this.objs.indexOf(obj);
            if (index < 0) {
                index = this.objs.length;
                this.objs.push(obj);
            }
            return 'O[' + index + ']';
        };
        proto.setValueType = function (codeArray, defaultValue, srcValue, targetExpression) {
            var assignments = Assignments.pool.get(targetExpression);
            var fastDefinedProps = defaultValue.constructor.__props__;
            if (!fastDefinedProps) {
                fastDefinedProps = Object.keys(defaultValue);
            }
            for (var i = 0; i < fastDefinedProps.length; i++) {
                var propName = fastDefinedProps[i];
                var prop = srcValue[propName];
                if (defaultValue[propName] === prop) {
                    continue;
                }
                var expression = this.enumerateField(srcValue, propName, prop);
                assignments.append(propName, expression);
            }
            assignments.writeCode(codeArray);
            Assignments.pool.put(assignments);
        };
        proto.enumerateCCClass = function (codeArray, obj, klass) {
            var props = klass.__values__;
            var attrs = Attr.getClassAttrs(klass);
            for (var p = 0; p < props.length; p++) {
                var key = props[p];
                var val = obj[key];
                var defaultValue = attrs[key + DEFAULT];
                if (equalsToDefault(defaultValue, val)) {
                    continue;
                }
                if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object' && val instanceof cc.ValueType) {
                    defaultValue = CCClass.getDefault(defaultValue);
                    if (defaultValue && defaultValue.constructor === val.constructor) {
                        var targetExpression = LOCAL_OBJ + getPropAccessor(key);
                        this.setValueType(codeArray, defaultValue, val, targetExpression);
                        continue;
                    }
                }
                this.setObjProp(codeArray, obj, key, val);
            }
        };
        proto.instantiateArray = function (value) {
            if (value.length === 0) {
                return '[]';
            }
            var arrayVar = LOCAL_ARRAY + ++this.localVariableId;
            var declaration = new Declaration(arrayVar, 'new Array(' + value.length + ')');
            var codeArray = [declaration];
            js.value(value, '_iN$t', {
                globalVar: '',
                source: codeArray
            }, true);
            this.objsToClear_iN$t.push(value);
            for (var i = 0; i < value.length; ++i) {
                var statement = arrayVar + '[' + i + ']=';
                var expression = this.enumerateField(value, i, value[i]);
                writeAssignment(codeArray, statement, expression);
            }
            return codeArray;
        };
        proto.instantiateTypedArray = function (value) {
            var type = value.constructor.name || getTypedArrayName(value.constructor);
            if (value.length === 0) {
                return 'new ' + type;
            }
            var arrayVar = LOCAL_ARRAY + ++this.localVariableId;
            var declaration = new Declaration(arrayVar, 'new ' + type + '(' + value.length + ')');
            var codeArray = [declaration];
            value._iN$t = {
                globalVar: '',
                source: codeArray
            };
            this.objsToClear_iN$t.push(value);
            for (var i = 0; i < value.length; ++i) {
                if (value[i] !== 0) {
                    var statement = arrayVar + '[' + i + ']=';
                    writeAssignment(codeArray, statement, value[i]);
                }
            }
            return codeArray;
        };
        proto.enumerateField = function (obj, key, value) {
            if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value) {
                var _iN$t = value._iN$t;
                if (_iN$t) {
                    var globalVar = _iN$t.globalVar;
                    if (!globalVar) {
                        globalVar = _iN$t.globalVar = 'v' + ++this.globalVariableId;
                        this.globalVariables.push(globalVar);
                        var line = _iN$t.source[LINE_INDEX_OF_NEW_OBJ];
                        _iN$t.source[LINE_INDEX_OF_NEW_OBJ] = mergeDeclaration(globalVar + '=', line);
                    }
                    return globalVar;
                } else if (ArrayBuffer.isView(value)) {
                    return this.instantiateTypedArray(value);
                } else if (Array.isArray(value)) {
                    return this.instantiateArray(value);
                } else {
                    return this.instantiateObj(value);
                }
            } else if (typeof value === 'function') {
                return this.getFuncModule(value);
            } else if (typeof value === 'string') {
                return escapeForJS(value);
            } else {
                if (key === '_objFlags' && obj instanceof CCObject) {
                    value &= PersistentMask;
                }
                return value;
            }
        };
        proto.setObjProp = function (codeArray, obj, key, value) {
            var statement = LOCAL_OBJ + getPropAccessor(key) + '=';
            var expression = this.enumerateField(obj, key, value);
            writeAssignment(codeArray, statement, expression);
        };
        proto.enumerateObject = function (codeArray, obj) {
            var klass = obj.constructor;
            if (cc.Class._isCCClass(klass)) {
                this.enumerateCCClass(codeArray, obj, klass);
            } else {
                for (var key in obj) {
                    if (!obj.hasOwnProperty(key) || key.charCodeAt(0) === 95 && key.charCodeAt(1) === 95 && key !== '__type__') {
                        continue;
                    }
                    var value = obj[key];
                    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value && value === obj._iN$t) {
                        continue;
                    }
                    this.setObjProp(codeArray, obj, key, value);
                }
            }
        };
        proto.instantiateObj = function (obj) {
            if (obj instanceof cc.ValueType) {
                return CCClass.getNewValueTypeCode(obj);
            }
            if (obj instanceof cc.Asset) {
                return this.getObjRef(obj);
            }
            if (obj._objFlags & Destroyed) {
                return null;
            }
            var createCode;
            var ctor = obj.constructor;
            if (cc.Class._isCCClass(ctor)) {
                if (this.parent) {
                    if (this.parent instanceof cc.Component) {
                        if (obj instanceof cc._BaseNode || obj instanceof cc.Component) {
                            return this.getObjRef(obj);
                        }
                    } else if (this.parent instanceof cc._BaseNode) {
                        if (obj instanceof cc._BaseNode) {
                            if (!obj.isChildOf(this.parent)) {
                                return this.getObjRef(obj);
                            }
                        } else if (obj instanceof cc.Component) {
                            if (!obj.node.isChildOf(this.parent)) {
                                return this.getObjRef(obj);
                            }
                        }
                    }
                }
                createCode = new Declaration(LOCAL_OBJ, 'new ' + this.getFuncModule(ctor, true) + '()');
            } else if (ctor === Object) {
                createCode = new Declaration(LOCAL_OBJ, '{}');
            } else if (!ctor) {
                createCode = new Declaration(LOCAL_OBJ, 'Object.create(null)');
            } else {
                return this.getObjRef(obj);
            }
            var codeArray = [createCode];
            js.value(obj, '_iN$t', {
                globalVar: '',
                source: codeArray
            }, true);
            this.objsToClear_iN$t.push(obj);
            this.enumerateObject(codeArray, obj);
            return [
                '(function(){',
                codeArray,
                'return o;})();'
            ];
        };
        function compile(node) {
            var root = node instanceof cc._BaseNode && node;
            var parser = new Parser(node, root);
            return parser.result;
        }
        module.exports = {
            compile: compile,
            equalsToDefault: equalsToDefault
        };
        if (CC_TEST) {
            cc._Test.IntantiateJit = module.exports;
        }
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,