(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/CCInputManager.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var macro = require('./CCMacro');
        var sys = require('./CCSys');
        var eventManager = require('../event-manager');
        var TOUCH_TIMEOUT = macro.TOUCH_TIMEOUT;
        var _vec2 = cc.v2();
        var inputManager = {
            _mousePressed: false,
            _isRegisterEvent: false,
            _preTouchPoint: cc.v2(0, 0),
            _prevMousePoint: cc.v2(0, 0),
            _preTouchPool: [],
            _preTouchPoolPointer: 0,
            _touches: [],
            _touchesIntegerDict: {},
            _indexBitsUsed: 0,
            _maxTouches: 8,
            _accelEnabled: false,
            _accelInterval: 1 / 5,
            _accelMinus: 1,
            _accelCurTime: 0,
            _acceleration: null,
            _accelDeviceEvent: null,
            _canvasBoundingRect: {
                left: 0,
                top: 0,
                adjustedLeft: 0,
                adjustedTop: 0,
                width: 0,
                height: 0
            },
            _getUnUsedIndex: function _getUnUsedIndex() {
                var temp = this._indexBitsUsed;
                var now = cc.sys.now();
                for (var i = 0; i < this._maxTouches; i++) {
                    if (!(temp & 1)) {
                        this._indexBitsUsed |= 1 << i;
                        return i;
                    } else {
                        var touch = this._touches[i];
                        if (now - touch._lastModified > TOUCH_TIMEOUT) {
                            this._removeUsedIndexBit(i);
                            delete this._touchesIntegerDict[touch.getID()];
                            return i;
                        }
                    }
                    temp >>= 1;
                }
                return -1;
            },
            _removeUsedIndexBit: function _removeUsedIndexBit(index) {
                if (index < 0 || index >= this._maxTouches)
                    return;
                var temp = 1 << index;
                temp = ~temp;
                this._indexBitsUsed &= temp;
            },
            _glView: null,
            _updateCanvasBoundingRect: function _updateCanvasBoundingRect() {
                var element = cc.game.canvas;
                var canvasBoundingRect = this._canvasBoundingRect;
                var docElem = document.documentElement;
                var leftOffset = window.pageXOffset - docElem.clientLeft;
                var topOffset = window.pageYOffset - docElem.clientTop;
                if (element.getBoundingClientRect) {
                    var box = element.getBoundingClientRect();
                    canvasBoundingRect.left = box.left + leftOffset;
                    canvasBoundingRect.top = box.top + topOffset;
                    canvasBoundingRect.width = box.width;
                    canvasBoundingRect.height = box.height;
                } else if (element instanceof HTMLCanvasElement) {
                    canvasBoundingRect.left = leftOffset;
                    canvasBoundingRect.top = topOffset;
                    canvasBoundingRect.width = element.width;
                    canvasBoundingRect.height = element.height;
                } else {
                    canvasBoundingRect.left = leftOffset;
                    canvasBoundingRect.top = topOffset;
                    canvasBoundingRect.width = parseInt(element.style.width);
                    canvasBoundingRect.height = parseInt(element.style.height);
                }
            },
            handleTouchesBegin: function handleTouchesBegin(touches) {
                var selTouch = void 0, index = void 0, curTouch = void 0, touchID = void 0, handleTouches = [], locTouchIntDict = this._touchesIntegerDict, now = sys.now();
                for (var i = 0, len = touches.length; i < len; i++) {
                    selTouch = touches[i];
                    touchID = selTouch.getID();
                    index = locTouchIntDict[touchID];
                    if (index == null) {
                        var unusedIndex = this._getUnUsedIndex();
                        if (unusedIndex === -1) {
                            cc.logID(2300, unusedIndex);
                            continue;
                        }
                        curTouch = this._touches[unusedIndex] = new cc.Touch(selTouch._point.x, selTouch._point.y, selTouch.getID());
                        curTouch._lastModified = now;
                        curTouch._setPrevPoint(selTouch._prevPoint);
                        locTouchIntDict[touchID] = unusedIndex;
                        handleTouches.push(curTouch);
                    }
                }
                if (handleTouches.length > 0) {
                    this._glView._convertTouchesWithScale(handleTouches);
                    var touchEvent = new cc.Event.EventTouch(handleTouches);
                    touchEvent._eventCode = cc.Event.EventTouch.BEGAN;
                    eventManager.dispatchEvent(touchEvent);
                }
            },
            handleTouchesMove: function handleTouchesMove(touches) {
                var selTouch = void 0, index = void 0, touchID = void 0, handleTouches = [], locTouches = this._touches, now = sys.now();
                for (var i = 0, len = touches.length; i < len; i++) {
                    selTouch = touches[i];
                    touchID = selTouch.getID();
                    index = this._touchesIntegerDict[touchID];
                    if (index == null) {
                        continue;
                    }
                    if (locTouches[index]) {
                        locTouches[index]._setPoint(selTouch._point);
                        locTouches[index]._setPrevPoint(selTouch._prevPoint);
                        locTouches[index]._lastModified = now;
                        handleTouches.push(locTouches[index]);
                    }
                }
                if (handleTouches.length > 0) {
                    this._glView._convertTouchesWithScale(handleTouches);
                    var touchEvent = new cc.Event.EventTouch(handleTouches);
                    touchEvent._eventCode = cc.Event.EventTouch.MOVED;
                    eventManager.dispatchEvent(touchEvent);
                }
            },
            handleTouchesEnd: function handleTouchesEnd(touches) {
                var handleTouches = this.getSetOfTouchesEndOrCancel(touches);
                if (handleTouches.length > 0) {
                    this._glView._convertTouchesWithScale(handleTouches);
                    var touchEvent = new cc.Event.EventTouch(handleTouches);
                    touchEvent._eventCode = cc.Event.EventTouch.ENDED;
                    eventManager.dispatchEvent(touchEvent);
                }
                this._preTouchPool.length = 0;
            },
            handleTouchesCancel: function handleTouchesCancel(touches) {
                var handleTouches = this.getSetOfTouchesEndOrCancel(touches);
                if (handleTouches.length > 0) {
                    this._glView._convertTouchesWithScale(handleTouches);
                    var touchEvent = new cc.Event.EventTouch(handleTouches);
                    touchEvent._eventCode = cc.Event.EventTouch.CANCELLED;
                    eventManager.dispatchEvent(touchEvent);
                }
                this._preTouchPool.length = 0;
            },
            getSetOfTouchesEndOrCancel: function getSetOfTouchesEndOrCancel(touches) {
                var selTouch = void 0, index = void 0, touchID = void 0, handleTouches = [], locTouches = this._touches, locTouchesIntDict = this._touchesIntegerDict;
                for (var i = 0, len = touches.length; i < len; i++) {
                    selTouch = touches[i];
                    touchID = selTouch.getID();
                    index = locTouchesIntDict[touchID];
                    if (index == null) {
                        continue;
                    }
                    if (locTouches[index]) {
                        locTouches[index]._setPoint(selTouch._point);
                        locTouches[index]._setPrevPoint(selTouch._prevPoint);
                        handleTouches.push(locTouches[index]);
                        this._removeUsedIndexBit(index);
                        delete locTouchesIntDict[touchID];
                    }
                }
                return handleTouches;
            },
            getPreTouch: function getPreTouch(touch) {
                var preTouch = null;
                var locPreTouchPool = this._preTouchPool;
                var id = touch.getID();
                for (var i = locPreTouchPool.length - 1; i >= 0; i--) {
                    if (locPreTouchPool[i].getID() === id) {
                        preTouch = locPreTouchPool[i];
                        break;
                    }
                }
                if (!preTouch)
                    preTouch = touch;
                return preTouch;
            },
            setPreTouch: function setPreTouch(touch) {
                var find = false;
                var locPreTouchPool = this._preTouchPool;
                var id = touch.getID();
                for (var i = locPreTouchPool.length - 1; i >= 0; i--) {
                    if (locPreTouchPool[i].getID() === id) {
                        locPreTouchPool[i] = touch;
                        find = true;
                        break;
                    }
                }
                if (!find) {
                    if (locPreTouchPool.length <= 50) {
                        locPreTouchPool.push(touch);
                    } else {
                        locPreTouchPool[this._preTouchPoolPointer] = touch;
                        this._preTouchPoolPointer = (this._preTouchPoolPointer + 1) % 50;
                    }
                }
            },
            getTouchByXY: function getTouchByXY(tx, ty, pos) {
                var locPreTouch = this._preTouchPoint;
                var location = this._glView.convertToLocationInView(tx, ty, pos);
                var touch = new cc.Touch(location.x, location.y, 0);
                touch._setPrevPoint(locPreTouch.x, locPreTouch.y);
                locPreTouch.x = location.x;
                locPreTouch.y = location.y;
                return touch;
            },
            getMouseEvent: function getMouseEvent(location, pos, eventType) {
                var locPreMouse = this._prevMousePoint;
                var mouseEvent = new cc.Event.EventMouse(eventType);
                mouseEvent._setPrevCursor(locPreMouse.x, locPreMouse.y);
                locPreMouse.x = location.x;
                locPreMouse.y = location.y;
                this._glView._convertMouseToLocationInView(locPreMouse, pos);
                mouseEvent.setLocation(locPreMouse.x, locPreMouse.y);
                return mouseEvent;
            },
            getPointByEvent: function getPointByEvent(event, pos) {
                if (event.pageX != null)
                    return {
                        x: event.pageX,
                        y: event.pageY
                    };
                pos.left -= document.body.scrollLeft;
                pos.top -= document.body.scrollTop;
                return {
                    x: event.clientX,
                    y: event.clientY
                };
            },
            getTouchesByEvent: function getTouchesByEvent(event, pos) {
                var touchArr = [], locView = this._glView;
                var touch_event = void 0, touch = void 0, preLocation = void 0;
                var locPreTouch = this._preTouchPoint;
                var length = event.changedTouches.length;
                for (var i = 0; i < length; i++) {
                    touch_event = event.changedTouches[i];
                    if (touch_event) {
                        var location = void 0;
                        if (sys.BROWSER_TYPE_FIREFOX === sys.browserType)
                            location = locView.convertToLocationInView(touch_event.pageX, touch_event.pageY, pos, _vec2);
                        else
                            location = locView.convertToLocationInView(touch_event.clientX, touch_event.clientY, pos, _vec2);
                        if (touch_event.identifier != null) {
                            touch = new cc.Touch(location.x, location.y, touch_event.identifier);
                            preLocation = this.getPreTouch(touch).getLocation();
                            touch._setPrevPoint(preLocation.x, preLocation.y);
                            this.setPreTouch(touch);
                        } else {
                            touch = new cc.Touch(location.x, location.y);
                            touch._setPrevPoint(locPreTouch.x, locPreTouch.y);
                        }
                        locPreTouch.x = location.x;
                        locPreTouch.y = location.y;
                        touchArr.push(touch);
                    }
                }
                return touchArr;
            },
            registerSystemEvent: function registerSystemEvent(element) {
                if (this._isRegisterEvent)
                    return;
                this._glView = cc.view;
                var selfPointer = this;
                var canvasBoundingRect = this._canvasBoundingRect;
                window.addEventListener('resize', this._updateCanvasBoundingRect.bind(this));
                var prohibition = sys.isMobile;
                var supportMouse = 'mouse' in sys.capabilities;
                var supportTouches = 'touches' in sys.capabilities;
                if (supportMouse) {
                    if (!prohibition) {
                        window.addEventListener('mousedown', function () {
                            selfPointer._mousePressed = true;
                        }, false);
                        window.addEventListener('mouseup', function (event) {
                            if (!selfPointer._mousePressed)
                                return;
                            selfPointer._mousePressed = false;
                            var location = selfPointer.getPointByEvent(event, canvasBoundingRect);
                            if (!cc.rect(canvasBoundingRect.left, canvasBoundingRect.top, canvasBoundingRect.width, canvasBoundingRect.height).contains(location)) {
                                selfPointer.handleTouchesEnd([selfPointer.getTouchByXY(location.x, location.y, canvasBoundingRect)]);
                                var mouseEvent = selfPointer.getMouseEvent(location, canvasBoundingRect, cc.Event.EventMouse.UP);
                                mouseEvent.setButton(event.button);
                                eventManager.dispatchEvent(mouseEvent);
                            }
                        }, false);
                    }
                    var EventMouse = cc.Event.EventMouse;
                    var _mouseEventsOnElement = [
                        !prohibition && [
                            'mousedown',
                            EventMouse.DOWN,
                            function (event, mouseEvent, location, canvasBoundingRect) {
                                selfPointer._mousePressed = true;
                                selfPointer.handleTouchesBegin([selfPointer.getTouchByXY(location.x, location.y, canvasBoundingRect)]);
                                element.focus();
                            }
                        ],
                        !prohibition && [
                            'mouseup',
                            EventMouse.UP,
                            function (event, mouseEvent, location, canvasBoundingRect) {
                                selfPointer._mousePressed = false;
                                selfPointer.handleTouchesEnd([selfPointer.getTouchByXY(location.x, location.y, canvasBoundingRect)]);
                            }
                        ],
                        !prohibition && [
                            'mousemove',
                            EventMouse.MOVE,
                            function (event, mouseEvent, location, canvasBoundingRect) {
                                selfPointer.handleTouchesMove([selfPointer.getTouchByXY(location.x, location.y, canvasBoundingRect)]);
                                if (!selfPointer._mousePressed) {
                                    mouseEvent.setButton(null);
                                }
                            }
                        ],
                        [
                            'mousewheel',
                            EventMouse.SCROLL,
                            function (event, mouseEvent) {
                                mouseEvent.setScrollData(0, event.wheelDelta);
                            }
                        ],
                        [
                            'DOMMouseScroll',
                            EventMouse.SCROLL,
                            function (event, mouseEvent) {
                                mouseEvent.setScrollData(0, event.detail * -120);
                            }
                        ]
                    ];
                    for (var i = 0; i < _mouseEventsOnElement.length; ++i) {
                        var entry = _mouseEventsOnElement[i];
                        if (entry) {
                            (function () {
                                var name = entry[0];
                                var type = entry[1];
                                var handler = entry[2];
                                element.addEventListener(name, function (event) {
                                    var location = selfPointer.getPointByEvent(event, canvasBoundingRect);
                                    var mouseEvent = selfPointer.getMouseEvent(location, canvasBoundingRect, type);
                                    mouseEvent.setButton(event.button);
                                    handler(event, mouseEvent, location, canvasBoundingRect);
                                    eventManager.dispatchEvent(mouseEvent);
                                    event.stopPropagation();
                                    event.preventDefault();
                                }, false);
                            }());
                        }
                    }
                }
                if (window.navigator.msPointerEnabled) {
                    var _pointerEventsMap = {
                        'MSPointerDown': selfPointer.handleTouchesBegin,
                        'MSPointerMove': selfPointer.handleTouchesMove,
                        'MSPointerUp': selfPointer.handleTouchesEnd,
                        'MSPointerCancel': selfPointer.handleTouchesCancel
                    };
                    var _loop = function _loop(eventName) {
                        var touchEvent = _pointerEventsMap[eventName];
                        element.addEventListener(eventName, function (event) {
                            var documentElement = document.documentElement;
                            canvasBoundingRect.adjustedLeft = canvasBoundingRect.left - documentElement.scrollLeft;
                            canvasBoundingRect.adjustedTop = canvasBoundingRect.top - documentElement.scrollTop;
                            touchEvent.call(selfPointer, [selfPointer.getTouchByXY(event.clientX, event.clientY, canvasBoundingRect)]);
                            event.stopPropagation();
                        }, false);
                    };
                    for (var eventName in _pointerEventsMap) {
                        _loop(eventName);
                    }
                }
                if (supportTouches) {
                    var _touchEventsMap = {
                        'touchstart': function touchstart(touchesToHandle) {
                            selfPointer.handleTouchesBegin(touchesToHandle);
                            element.focus();
                        },
                        'touchmove': function touchmove(touchesToHandle) {
                            selfPointer.handleTouchesMove(touchesToHandle);
                        },
                        'touchend': function touchend(touchesToHandle) {
                            selfPointer.handleTouchesEnd(touchesToHandle);
                        },
                        'touchcancel': function touchcancel(touchesToHandle) {
                            selfPointer.handleTouchesCancel(touchesToHandle);
                        }
                    };
                    var registerTouchEvent = function registerTouchEvent(eventName) {
                        var handler = _touchEventsMap[eventName];
                        element.addEventListener(eventName, function (event) {
                            if (!event.changedTouches)
                                return;
                            var body = document.body;
                            canvasBoundingRect.adjustedLeft = canvasBoundingRect.left - (body.scrollLeft || 0);
                            canvasBoundingRect.adjustedTop = canvasBoundingRect.top - (body.scrollTop || 0);
                            handler(selfPointer.getTouchesByEvent(event, canvasBoundingRect));
                            event.stopPropagation();
                            event.preventDefault();
                        }, false);
                    };
                    for (var eventName in _touchEventsMap) {
                        registerTouchEvent(eventName);
                    }
                }
                this._registerKeyboardEvent();
                this._isRegisterEvent = true;
            },
            _registerKeyboardEvent: function _registerKeyboardEvent() {
            },
            _registerAccelerometerEvent: function _registerAccelerometerEvent() {
            },
            update: function update(dt) {
                if (this._accelCurTime > this._accelInterval) {
                    this._accelCurTime -= this._accelInterval;
                    eventManager.dispatchEvent(new cc.Event.EventAcceleration(this._acceleration));
                }
                this._accelCurTime += dt;
            }
        };
        module.exports = _cc.inputManager = inputManager;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDSW5wdXRNYW5hZ2VyLmpzIiwiL1VzZXJzL1NoYXJlZC9iaW5nb19mcmVuenkvZW5naW5lL2NvY29zMmQvY29yZS9wbGF0Zm9ybS9DQ0lucHV0TWFuYWdlci5qcyJdLCJuYW1lcyI6WyJtYWNybyIsInJlcXVpcmUiLCJzeXMiLCJldmVudE1hbmFnZXIiLCJUT1VDSF9USU1FT1VUIiwiX3ZlYzIiLCJjYyIsInYyIiwiaW5wdXRNYW5hZ2VyIiwiX21vdXNlUHJlc3NlZCIsIl9pc1JlZ2lzdGVyRXZlbnQiLCJfcHJlVG91Y2hQb2ludCIsIl9wcmV2TW91c2VQb2ludCIsIl9wcmVUb3VjaFBvb2wiLCJfcHJlVG91Y2hQb29sUG9pbnRlciIsIl90b3VjaGVzIiwiX3RvdWNoZXNJbnRlZ2VyRGljdCIsIl9pbmRleEJpdHNVc2VkIiwiX21heFRvdWNoZXMiLCJfYWNjZWxFbmFibGVkIiwiX2FjY2VsSW50ZXJ2YWwiLCJfYWNjZWxNaW51cyIsIl9hY2NlbEN1clRpbWUiLCJfYWNjZWxlcmF0aW9uIiwiX2FjY2VsRGV2aWNlRXZlbnQiLCJfY2FudmFzQm91bmRpbmdSZWN0IiwibGVmdCIsInRvcCIsImFkanVzdGVkTGVmdCIsImFkanVzdGVkVG9wIiwid2lkdGgiLCJoZWlnaHQiLCJfZ2V0VW5Vc2VkSW5kZXgiLCJ0ZW1wIiwibm93IiwiaSIsInRvdWNoIiwiX2xhc3RNb2RpZmllZCIsIl9yZW1vdmVVc2VkSW5kZXhCaXQiLCJnZXRJRCIsImluZGV4IiwiX2dsVmlldyIsIl91cGRhdGVDYW52YXNCb3VuZGluZ1JlY3QiLCJlbGVtZW50IiwiZ2FtZSIsImNhbnZhcyIsImNhbnZhc0JvdW5kaW5nUmVjdCIsImRvY0VsZW0iLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsImxlZnRPZmZzZXQiLCJ3aW5kb3ciLCJwYWdlWE9mZnNldCIsImNsaWVudExlZnQiLCJ0b3BPZmZzZXQiLCJwYWdlWU9mZnNldCIsImNsaWVudFRvcCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImJveCIsIkhUTUxDYW52YXNFbGVtZW50IiwicGFyc2VJbnQiLCJzdHlsZSIsImhhbmRsZVRvdWNoZXNCZWdpbiIsInRvdWNoZXMiLCJzZWxUb3VjaCIsImN1clRvdWNoIiwidG91Y2hJRCIsImhhbmRsZVRvdWNoZXMiLCJsb2NUb3VjaEludERpY3QiLCJsZW4iLCJsZW5ndGgiLCJ1bnVzZWRJbmRleCIsImxvZ0lEIiwiVG91Y2giLCJfcG9pbnQiLCJ4IiwieSIsIl9zZXRQcmV2UG9pbnQiLCJfcHJldlBvaW50IiwicHVzaCIsIl9jb252ZXJ0VG91Y2hlc1dpdGhTY2FsZSIsInRvdWNoRXZlbnQiLCJFdmVudCIsIkV2ZW50VG91Y2giLCJfZXZlbnRDb2RlIiwiQkVHQU4iLCJkaXNwYXRjaEV2ZW50IiwiaGFuZGxlVG91Y2hlc01vdmUiLCJsb2NUb3VjaGVzIiwiX3NldFBvaW50IiwiTU9WRUQiLCJoYW5kbGVUb3VjaGVzRW5kIiwiZ2V0U2V0T2ZUb3VjaGVzRW5kT3JDYW5jZWwiLCJFTkRFRCIsImhhbmRsZVRvdWNoZXNDYW5jZWwiLCJDQU5DRUxMRUQiLCJsb2NUb3VjaGVzSW50RGljdCIsImdldFByZVRvdWNoIiwicHJlVG91Y2giLCJsb2NQcmVUb3VjaFBvb2wiLCJpZCIsInNldFByZVRvdWNoIiwiZmluZCIsImdldFRvdWNoQnlYWSIsInR4IiwidHkiLCJwb3MiLCJsb2NQcmVUb3VjaCIsImxvY2F0aW9uIiwiY29udmVydFRvTG9jYXRpb25JblZpZXciLCJnZXRNb3VzZUV2ZW50IiwiZXZlbnRUeXBlIiwibG9jUHJlTW91c2UiLCJtb3VzZUV2ZW50IiwiRXZlbnRNb3VzZSIsIl9zZXRQcmV2Q3Vyc29yIiwiX2NvbnZlcnRNb3VzZVRvTG9jYXRpb25JblZpZXciLCJzZXRMb2NhdGlvbiIsImdldFBvaW50QnlFdmVudCIsImV2ZW50IiwicGFnZVgiLCJwYWdlWSIsImJvZHkiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwiY2xpZW50WCIsImNsaWVudFkiLCJnZXRUb3VjaGVzQnlFdmVudCIsInRvdWNoQXJyIiwibG9jVmlldyIsInRvdWNoX2V2ZW50IiwicHJlTG9jYXRpb24iLCJjaGFuZ2VkVG91Y2hlcyIsIkJST1dTRVJfVFlQRV9GSVJFRk9YIiwiYnJvd3NlclR5cGUiLCJpZGVudGlmaWVyIiwiZ2V0TG9jYXRpb24iLCJyZWdpc3RlclN5c3RlbUV2ZW50IiwidmlldyIsInNlbGZQb2ludGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImJpbmQiLCJwcm9oaWJpdGlvbiIsImlzTW9iaWxlIiwic3VwcG9ydE1vdXNlIiwiY2FwYWJpbGl0aWVzIiwic3VwcG9ydFRvdWNoZXMiLCJyZWN0IiwiY29udGFpbnMiLCJVUCIsInNldEJ1dHRvbiIsImJ1dHRvbiIsIl9tb3VzZUV2ZW50c09uRWxlbWVudCIsIkRPV04iLCJmb2N1cyIsIk1PVkUiLCJTQ1JPTEwiLCJzZXRTY3JvbGxEYXRhIiwid2hlZWxEZWx0YSIsImRldGFpbCIsImVudHJ5IiwibmFtZSIsInR5cGUiLCJoYW5kbGVyIiwic3RvcFByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJuYXZpZ2F0b3IiLCJtc1BvaW50ZXJFbmFibGVkIiwiX3BvaW50ZXJFdmVudHNNYXAiLCJldmVudE5hbWUiLCJjYWxsIiwiX3RvdWNoRXZlbnRzTWFwIiwidG91Y2hlc1RvSGFuZGxlIiwicmVnaXN0ZXJUb3VjaEV2ZW50IiwiX3JlZ2lzdGVyS2V5Ym9hcmRFdmVudCIsIl9yZWdpc3RlckFjY2VsZXJvbWV0ZXJFdmVudCIsInVwZGF0ZSIsImR0IiwiRXZlbnRBY2NlbGVyYXRpb24iLCJtb2R1bGUiLCJleHBvcnRzIiwiX2NjIl0sIm1hcHBpbmdzIjoiO0lBQUEsSUFBQSxPQUFBLEdBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQSxJQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUE7Ozs7Ozs7Ozs7Ozs7UUEwQkEsSUFBTUEsS0FBQUEsR0FBUUMsT0FBQUEsQ0FBUSxXQUFSQSxDQUFkO1FBQ0EsSUFBTUMsR0FBQUEsR0FBTUQsT0FBQUEsQ0FBUSxTQUFSQSxDQUFaO1FB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QSxDQUFJN0ssWUFBSjZLLEdBQW1CN0ssWUFBcEMySyIsImZpbGUiOiJDQ0lucHV0TWFuYWdlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gQ29weXJpZ2h0IChjKSAyMDExLTIwMTIgY29jb3MyZC14Lm9yZ1xuIENvcHlyaWdodCAoYykgMjAxMy0yMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHA6Ly93d3cuY29jb3MyZC14Lm9yZ1xuXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cbiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuY29uc3QgbWFjcm8gPSByZXF1aXJlKCcuL0NDTWFjcm8nKTtcbmNvbnN0IHN5cyA9IHJlcXVpcmUoJy4vQ0NTeXMnKTtcbmNvbnN0IGV2ZW50TWFuYWdlciA9IHJlcXVpcmUoJy4uL2V2ZW50LW1hbmFnZXInKTtcblxuY29uc3QgVE9VQ0hfVElNRU9VVCA9IG1hY3JvLlRPVUNIX1RJTUVPVVQ7XG5cbmxldCBfdmVjMiA9IGNjLnYyKCk7XG5cbi8qKlxuICogIFRoaXMgY2xhc3MgbWFuYWdlcyBhbGwgZXZlbnRzIG9mIGlucHV0LiBpbmNsdWRlOiB0b3VjaCwgbW91c2UsIGFjY2VsZXJvbWV0ZXIsIGtleWJvYXJkXG4gKi9cbmxldCBpbnB1dE1hbmFnZXIgPSB7XG4gICAgX21vdXNlUHJlc3NlZDogZmFsc2UsXG5cbiAgICBfaXNSZWdpc3RlckV2ZW50OiBmYWxzZSxcblxuICAgIF9wcmVUb3VjaFBvaW50OiBjYy52MigwLDApLFxuICAgIF9wcmV2TW91c2VQb2ludDogY2MudjIoMCwwKSxcblxuICAgIF9wcmVUb3VjaFBvb2w6IFtdLFxuICAgIF9wcmVUb3VjaFBvb2xQb2ludGVyOiAwLFxuXG4gICAgX3RvdWNoZXM6IFtdLFxuICAgIF90b3VjaGVzSW50ZWdlckRpY3Q6e30sXG5cbiAgICBfaW5kZXhCaXRzVXNlZDogMCxcbiAgICBfbWF4VG91Y2hlczogOCxcblxuICAgIF9hY2NlbEVuYWJsZWQ6IGZhbHNlLFxuICAgIF9hY2NlbEludGVydmFsOiAxLzUsXG4gICAgX2FjY2VsTWludXM6IDEsXG4gICAgX2FjY2VsQ3VyVGltZTogMCxcbiAgICBfYWNjZWxlcmF0aW9uOiBudWxsLFxuICAgIF9hY2NlbERldmljZUV2ZW50OiBudWxsLFxuXG4gICAgX2NhbnZhc0JvdW5kaW5nUmVjdDoge1xuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGFkanVzdGVkTGVmdDogMCxcbiAgICAgICAgYWRqdXN0ZWRUb3A6IDAsXG4gICAgICAgIHdpZHRoOiAwLFxuICAgICAgICBoZWlnaHQ6IDAsXG4gICAgfSxcblxuICAgIF9nZXRVblVzZWRJbmRleCAoKSB7XG4gICAgICAgIGxldCB0ZW1wID0gdGhpcy5faW5kZXhCaXRzVXNlZDtcbiAgICAgICAgbGV0IG5vdyA9IGNjLnN5cy5ub3coKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21heFRvdWNoZXM7IGkrKykge1xuICAgICAgICAgICAgaWYgKCEodGVtcCAmIDB4MDAwMDAwMDEpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faW5kZXhCaXRzVXNlZCB8PSAoMSA8PCBpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCB0b3VjaCA9IHRoaXMuX3RvdWNoZXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKG5vdyAtIHRvdWNoLl9sYXN0TW9kaWZpZWQgPiBUT1VDSF9USU1FT1VUKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZVVzZWRJbmRleEJpdChpKTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3RvdWNoZXNJbnRlZ2VyRGljdFt0b3VjaC5nZXRJRCgpXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGVtcCA+Pj0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFsbCBiaXRzIGFyZSB1c2VkXG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9LFxuXG4gICAgX3JlbW92ZVVzZWRJbmRleEJpdCAoaW5kZXgpIHtcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLl9tYXhUb3VjaGVzKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGxldCB0ZW1wID0gMSA8PCBpbmRleDtcbiAgICAgICAgdGVtcCA9IH50ZW1wO1xuICAgICAgICB0aGlzLl9pbmRleEJpdHNVc2VkICY9IHRlbXA7XG4gICAgfSxcblxuICAgIF9nbFZpZXc6IG51bGwsXG5cbiAgICBfdXBkYXRlQ2FudmFzQm91bmRpbmdSZWN0ICgpIHtcbiAgICAgICAgbGV0IGVsZW1lbnQgPSBjYy5nYW1lLmNhbnZhcztcbiAgICAgICAgbGV0IGNhbnZhc0JvdW5kaW5nUmVjdCA9IHRoaXMuX2NhbnZhc0JvdW5kaW5nUmVjdDtcblxuICAgICAgICBsZXQgZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgbGV0IGxlZnRPZmZzZXQgPSB3aW5kb3cucGFnZVhPZmZzZXQgLSBkb2NFbGVtLmNsaWVudExlZnQ7XG4gICAgICAgIGxldCB0b3BPZmZzZXQgPSB3aW5kb3cucGFnZVlPZmZzZXQgLSBkb2NFbGVtLmNsaWVudFRvcDtcbiAgICAgICAgaWYgKGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KSB7XG4gICAgICAgICAgICBsZXQgYm94ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIGNhbnZhc0JvdW5kaW5nUmVjdC5sZWZ0ID0gYm94LmxlZnQgKyBsZWZ0T2Zmc2V0O1xuICAgICAgICAgICAgY2FudmFzQm91bmRpbmdSZWN0LnRvcCA9IGJveC50b3AgKyB0b3BPZmZzZXQ7XG4gICAgICAgICAgICBjYW52YXNCb3VuZGluZ1JlY3Qud2lkdGggPSBib3gud2lkdGg7XG4gICAgICAgICAgICBjYW52YXNCb3VuZGluZ1JlY3QuaGVpZ2h0ID0gYm94LmhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChlbGVtZW50IGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGNhbnZhc0JvdW5kaW5nUmVjdC5sZWZ0ID0gbGVmdE9mZnNldDtcbiAgICAgICAgICAgIGNhbnZhc0JvdW5kaW5nUmVjdC50b3AgPSB0b3BPZmZzZXQ7XG4gICAgICAgICAgICBjYW52YXNCb3VuZGluZ1JlY3Qud2lkdGggPSBlbGVtZW50LndpZHRoO1xuICAgICAgICAgICAgY2FudmFzQm91bmRpbmdSZWN0LmhlaWdodCA9IGVsZW1lbnQuaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2FudmFzQm91bmRpbmdSZWN0LmxlZnQgPSBsZWZ0T2Zmc2V0O1xuICAgICAgICAgICAgY2FudmFzQm91bmRpbmdSZWN0LnRvcCA9IHRvcE9mZnNldDtcbiAgICAgICAgICAgIGNhbnZhc0JvdW5kaW5nUmVjdC53aWR0aCA9IHBhcnNlSW50KGVsZW1lbnQuc3R5bGUud2lkdGgpO1xuICAgICAgICAgICAgY2FudmFzQm91bmRpbmdSZWN0LmhlaWdodCA9IHBhcnNlSW50KGVsZW1lbnQuc3R5bGUuaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIGhhbmRsZVRvdWNoZXNCZWdpblxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHRvdWNoZXNcbiAgICAgKi9cbiAgICBoYW5kbGVUb3VjaGVzQmVnaW4gKHRvdWNoZXMpIHtcbiAgICAgICAgbGV0IHNlbFRvdWNoLCBpbmRleCwgY3VyVG91Y2gsIHRvdWNoSUQsXG4gICAgICAgICAgICBoYW5kbGVUb3VjaGVzID0gW10sIGxvY1RvdWNoSW50RGljdCA9IHRoaXMuX3RvdWNoZXNJbnRlZ2VyRGljdCxcbiAgICAgICAgICAgIG5vdyA9IHN5cy5ub3coKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRvdWNoZXMubGVuZ3RoOyBpIDwgbGVuOyBpICsrKSB7XG4gICAgICAgICAgICBzZWxUb3VjaCA9IHRvdWNoZXNbaV07XG4gICAgICAgICAgICB0b3VjaElEID0gc2VsVG91Y2guZ2V0SUQoKTtcbiAgICAgICAgICAgIGluZGV4ID0gbG9jVG91Y2hJbnREaWN0W3RvdWNoSURdO1xuXG4gICAgICAgICAgICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGxldCB1bnVzZWRJbmRleCA9IHRoaXMuX2dldFVuVXNlZEluZGV4KCk7XG4gICAgICAgICAgICAgICAgaWYgKHVudXNlZEluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBjYy5sb2dJRCgyMzAwLCB1bnVzZWRJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL2N1clRvdWNoID0gdGhpcy5fdG91Y2hlc1t1bnVzZWRJbmRleF0gPSBzZWxUb3VjaDtcbiAgICAgICAgICAgICAgICBjdXJUb3VjaCA9IHRoaXMuX3RvdWNoZXNbdW51c2VkSW5kZXhdID0gbmV3IGNjLlRvdWNoKHNlbFRvdWNoLl9wb2ludC54LCBzZWxUb3VjaC5fcG9pbnQueSwgc2VsVG91Y2guZ2V0SUQoKSk7XG4gICAgICAgICAgICAgICAgY3VyVG91Y2guX2xhc3RNb2RpZmllZCA9IG5vdztcbiAgICAgICAgICAgICAgICBjdXJUb3VjaC5fc2V0UHJldlBvaW50KHNlbFRvdWNoLl9wcmV2UG9pbnQpO1xuICAgICAgICAgICAgICAgIGxvY1RvdWNoSW50RGljdFt0b3VjaElEXSA9IHVudXNlZEluZGV4O1xuICAgICAgICAgICAgICAgIGhhbmRsZVRvdWNoZXMucHVzaChjdXJUb3VjaCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhbmRsZVRvdWNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fZ2xWaWV3Ll9jb252ZXJ0VG91Y2hlc1dpdGhTY2FsZShoYW5kbGVUb3VjaGVzKTtcbiAgICAgICAgICAgIGxldCB0b3VjaEV2ZW50ID0gbmV3IGNjLkV2ZW50LkV2ZW50VG91Y2goaGFuZGxlVG91Y2hlcyk7XG4gICAgICAgICAgICB0b3VjaEV2ZW50Ll9ldmVudENvZGUgPSBjYy5FdmVudC5FdmVudFRvdWNoLkJFR0FOO1xuICAgICAgICAgICAgZXZlbnRNYW5hZ2VyLmRpc3BhdGNoRXZlbnQodG91Y2hFdmVudCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBoYW5kbGVUb3VjaGVzTW92ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHRvdWNoZXNcbiAgICAgKi9cbiAgICBoYW5kbGVUb3VjaGVzTW92ZSAodG91Y2hlcykge1xuICAgICAgICBsZXQgc2VsVG91Y2gsIGluZGV4LCB0b3VjaElELFxuICAgICAgICAgICAgaGFuZGxlVG91Y2hlcyA9IFtdLCBsb2NUb3VjaGVzID0gdGhpcy5fdG91Y2hlcyxcbiAgICAgICAgICAgIG5vdyA9IHN5cy5ub3coKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRvdWNoZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHNlbFRvdWNoID0gdG91Y2hlc1tpXTtcbiAgICAgICAgICAgIHRvdWNoSUQgPSBzZWxUb3VjaC5nZXRJRCgpO1xuICAgICAgICAgICAgaW5kZXggPSB0aGlzLl90b3VjaGVzSW50ZWdlckRpY3RbdG91Y2hJRF07XG5cbiAgICAgICAgICAgIGlmIChpbmRleCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy9jYy5sb2coXCJpZiB0aGUgaW5kZXggZG9lc24ndCBleGlzdCwgaXQgaXMgYW4gZXJyb3JcIik7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobG9jVG91Y2hlc1tpbmRleF0pIHtcbiAgICAgICAgICAgICAgICBsb2NUb3VjaGVzW2luZGV4XS5fc2V0UG9pbnQoc2VsVG91Y2guX3BvaW50KTtcbiAgICAgICAgICAgICAgICBsb2NUb3VjaGVzW2luZGV4XS5fc2V0UHJldlBvaW50KHNlbFRvdWNoLl9wcmV2UG9pbnQpO1xuICAgICAgICAgICAgICAgIGxvY1RvdWNoZXNbaW5kZXhdLl9sYXN0TW9kaWZpZWQgPSBub3c7XG4gICAgICAgICAgICAgICAgaGFuZGxlVG91Y2hlcy5wdXNoKGxvY1RvdWNoZXNbaW5kZXhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFuZGxlVG91Y2hlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLl9nbFZpZXcuX2NvbnZlcnRUb3VjaGVzV2l0aFNjYWxlKGhhbmRsZVRvdWNoZXMpO1xuICAgICAgICAgICAgbGV0IHRvdWNoRXZlbnQgPSBuZXcgY2MuRXZlbnQuRXZlbnRUb3VjaChoYW5kbGVUb3VjaGVzKTtcbiAgICAgICAgICAgIHRvdWNoRXZlbnQuX2V2ZW50Q29kZSA9IGNjLkV2ZW50LkV2ZW50VG91Y2guTU9WRUQ7XG4gICAgICAgICAgICBldmVudE1hbmFnZXIuZGlzcGF0Y2hFdmVudCh0b3VjaEV2ZW50KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIGhhbmRsZVRvdWNoZXNFbmRcbiAgICAgKiBAcGFyYW0ge0FycmF5fSB0b3VjaGVzXG4gICAgICovXG4gICAgaGFuZGxlVG91Y2hlc0VuZCAodG91Y2hlcykge1xuICAgICAgICBsZXQgaGFuZGxlVG91Y2hlcyA9IHRoaXMuZ2V0U2V0T2ZUb3VjaGVzRW5kT3JDYW5jZWwodG91Y2hlcyk7XG4gICAgICAgIGlmIChoYW5kbGVUb3VjaGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX2dsVmlldy5fY29udmVydFRvdWNoZXNXaXRoU2NhbGUoaGFuZGxlVG91Y2hlcyk7XG4gICAgICAgICAgICBsZXQgdG91Y2hFdmVudCA9IG5ldyBjYy5FdmVudC5FdmVudFRvdWNoKGhhbmRsZVRvdWNoZXMpO1xuICAgICAgICAgICAgdG91Y2hFdmVudC5fZXZlbnRDb2RlID0gY2MuRXZlbnQuRXZlbnRUb3VjaC5FTkRFRDtcbiAgICAgICAgICAgIGV2ZW50TWFuYWdlci5kaXNwYXRjaEV2ZW50KHRvdWNoRXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByZVRvdWNoUG9vbC5sZW5ndGggPSAwO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIGhhbmRsZVRvdWNoZXNDYW5jZWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fSB0b3VjaGVzXG4gICAgICovXG4gICAgaGFuZGxlVG91Y2hlc0NhbmNlbCAodG91Y2hlcykge1xuICAgICAgICBsZXQgaGFuZGxlVG91Y2hlcyA9IHRoaXMuZ2V0U2V0T2ZUb3VjaGVzRW5kT3JDYW5jZWwodG91Y2hlcyk7XG4gICAgICAgIGlmIChoYW5kbGVUb3VjaGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX2dsVmlldy5fY29udmVydFRvdWNoZXNXaXRoU2NhbGUoaGFuZGxlVG91Y2hlcyk7XG4gICAgICAgICAgICBsZXQgdG91Y2hFdmVudCA9IG5ldyBjYy5FdmVudC5FdmVudFRvdWNoKGhhbmRsZVRvdWNoZXMpO1xuICAgICAgICAgICAgdG91Y2hFdmVudC5fZXZlbnRDb2RlID0gY2MuRXZlbnQuRXZlbnRUb3VjaC5DQU5DRUxMRUQ7XG4gICAgICAgICAgICBldmVudE1hbmFnZXIuZGlzcGF0Y2hFdmVudCh0b3VjaEV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcmVUb3VjaFBvb2wubGVuZ3RoID0gMDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBnZXRTZXRPZlRvdWNoZXNFbmRPckNhbmNlbFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHRvdWNoZXNcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9XG4gICAgICovXG4gICAgZ2V0U2V0T2ZUb3VjaGVzRW5kT3JDYW5jZWwgKHRvdWNoZXMpIHtcbiAgICAgICAgbGV0IHNlbFRvdWNoLCBpbmRleCwgdG91Y2hJRCwgaGFuZGxlVG91Y2hlcyA9IFtdLCBsb2NUb3VjaGVzID0gdGhpcy5fdG91Y2hlcywgbG9jVG91Y2hlc0ludERpY3QgPSB0aGlzLl90b3VjaGVzSW50ZWdlckRpY3Q7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0b3VjaGVzLmxlbmd0aDsgaTwgbGVuOyBpICsrKSB7XG4gICAgICAgICAgICBzZWxUb3VjaCA9IHRvdWNoZXNbaV07XG4gICAgICAgICAgICB0b3VjaElEID0gc2VsVG91Y2guZ2V0SUQoKTtcbiAgICAgICAgICAgIGluZGV4ID0gbG9jVG91Y2hlc0ludERpY3RbdG91Y2hJRF07XG5cbiAgICAgICAgICAgIGlmIChpbmRleCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7ICAvL2NjLmxvZyhcImlmIHRoZSBpbmRleCBkb2Vzbid0IGV4aXN0LCBpdCBpcyBhbiBlcnJvclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsb2NUb3VjaGVzW2luZGV4XSkge1xuICAgICAgICAgICAgICAgIGxvY1RvdWNoZXNbaW5kZXhdLl9zZXRQb2ludChzZWxUb3VjaC5fcG9pbnQpO1xuICAgICAgICAgICAgICAgIGxvY1RvdWNoZXNbaW5kZXhdLl9zZXRQcmV2UG9pbnQoc2VsVG91Y2guX3ByZXZQb2ludCk7XG4gICAgICAgICAgICAgICAgaGFuZGxlVG91Y2hlcy5wdXNoKGxvY1RvdWNoZXNbaW5kZXhdKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVVc2VkSW5kZXhCaXQoaW5kZXgpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBsb2NUb3VjaGVzSW50RGljdFt0b3VjaElEXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGFuZGxlVG91Y2hlcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBnZXRQcmVUb3VjaFxuICAgICAqIEBwYXJhbSB7VG91Y2h9IHRvdWNoXG4gICAgICogQHJldHVybiB7VG91Y2h9XG4gICAgICovXG4gICAgZ2V0UHJlVG91Y2ggKHRvdWNoKSB7XG4gICAgICAgIGxldCBwcmVUb3VjaCA9IG51bGw7XG4gICAgICAgIGxldCBsb2NQcmVUb3VjaFBvb2wgPSB0aGlzLl9wcmVUb3VjaFBvb2w7XG4gICAgICAgIGxldCBpZCA9IHRvdWNoLmdldElEKCk7XG4gICAgICAgIGZvciAobGV0IGkgPSBsb2NQcmVUb3VjaFBvb2wubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGlmIChsb2NQcmVUb3VjaFBvb2xbaV0uZ2V0SUQoKSA9PT0gaWQpIHtcbiAgICAgICAgICAgICAgICBwcmVUb3VjaCA9IGxvY1ByZVRvdWNoUG9vbFtpXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXByZVRvdWNoKVxuICAgICAgICAgICAgcHJlVG91Y2ggPSB0b3VjaDtcbiAgICAgICAgcmV0dXJuIHByZVRvdWNoO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIHNldFByZVRvdWNoXG4gICAgICogQHBhcmFtIHtUb3VjaH0gdG91Y2hcbiAgICAgKi9cbiAgICBzZXRQcmVUb3VjaCAodG91Y2gpIHtcbiAgICAgICAgbGV0IGZpbmQgPSBmYWxzZTtcbiAgICAgICAgbGV0IGxvY1ByZVRvdWNoUG9vbCA9IHRoaXMuX3ByZVRvdWNoUG9vbDtcbiAgICAgICAgbGV0IGlkID0gdG91Y2guZ2V0SUQoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IGxvY1ByZVRvdWNoUG9vbC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgaWYgKGxvY1ByZVRvdWNoUG9vbFtpXS5nZXRJRCgpID09PSBpZCkge1xuICAgICAgICAgICAgICAgIGxvY1ByZVRvdWNoUG9vbFtpXSA9IHRvdWNoO1xuICAgICAgICAgICAgICAgIGZpbmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghZmluZCkge1xuICAgICAgICAgICAgaWYgKGxvY1ByZVRvdWNoUG9vbC5sZW5ndGggPD0gNTApIHtcbiAgICAgICAgICAgICAgICBsb2NQcmVUb3VjaFBvb2wucHVzaCh0b3VjaCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxvY1ByZVRvdWNoUG9vbFt0aGlzLl9wcmVUb3VjaFBvb2xQb2ludGVyXSA9IHRvdWNoO1xuICAgICAgICAgICAgICAgIHRoaXMuX3ByZVRvdWNoUG9vbFBvaW50ZXIgPSAodGhpcy5fcHJlVG91Y2hQb29sUG9pbnRlciArIDEpICUgNTA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBnZXRUb3VjaEJ5WFlcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdHhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdHlcbiAgICAgKiBAcGFyYW0ge1ZlYzJ9IHBvc1xuICAgICAqIEByZXR1cm4ge1RvdWNofVxuICAgICAqL1xuICAgIGdldFRvdWNoQnlYWSAodHgsIHR5LCBwb3MpIHtcbiAgICAgICAgbGV0IGxvY1ByZVRvdWNoID0gdGhpcy5fcHJlVG91Y2hQb2ludDtcbiAgICAgICAgbGV0IGxvY2F0aW9uID0gdGhpcy5fZ2xWaWV3LmNvbnZlcnRUb0xvY2F0aW9uSW5WaWV3KHR4LCB0eSwgcG9zKTtcbiAgICAgICAgbGV0IHRvdWNoID0gbmV3IGNjLlRvdWNoKGxvY2F0aW9uLngsIGxvY2F0aW9uLnksIDApO1xuICAgICAgICB0b3VjaC5fc2V0UHJldlBvaW50KGxvY1ByZVRvdWNoLngsIGxvY1ByZVRvdWNoLnkpO1xuICAgICAgICBsb2NQcmVUb3VjaC54ID0gbG9jYXRpb24ueDtcbiAgICAgICAgbG9jUHJlVG91Y2gueSA9IGxvY2F0aW9uLnk7XG4gICAgICAgIHJldHVybiB0b3VjaDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBnZXRNb3VzZUV2ZW50XG4gICAgICogQHBhcmFtIHtWZWMyfSBsb2NhdGlvblxuICAgICAqIEBwYXJhbSB7VmVjMn0gcG9zXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGV2ZW50VHlwZVxuICAgICAqIEByZXR1cm5zIHtFdmVudC5FdmVudE1vdXNlfVxuICAgICAqL1xuICAgIGdldE1vdXNlRXZlbnQgKGxvY2F0aW9uLCBwb3MsIGV2ZW50VHlwZSkge1xuICAgICAgICBsZXQgbG9jUHJlTW91c2UgPSB0aGlzLl9wcmV2TW91c2VQb2ludDtcbiAgICAgICAgbGV0IG1vdXNlRXZlbnQgPSBuZXcgY2MuRXZlbnQuRXZlbnRNb3VzZShldmVudFR5cGUpO1xuICAgICAgICBtb3VzZUV2ZW50Ll9zZXRQcmV2Q3Vyc29yKGxvY1ByZU1vdXNlLngsIGxvY1ByZU1vdXNlLnkpO1xuICAgICAgICBsb2NQcmVNb3VzZS54ID0gbG9jYXRpb24ueDtcbiAgICAgICAgbG9jUHJlTW91c2UueSA9IGxvY2F0aW9uLnk7XG4gICAgICAgIHRoaXMuX2dsVmlldy5fY29udmVydE1vdXNlVG9Mb2NhdGlvbkluVmlldyhsb2NQcmVNb3VzZSwgcG9zKTtcbiAgICAgICAgbW91c2VFdmVudC5zZXRMb2NhdGlvbihsb2NQcmVNb3VzZS54LCBsb2NQcmVNb3VzZS55KTtcbiAgICAgICAgcmV0dXJuIG1vdXNlRXZlbnQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZXRob2QgZ2V0UG9pbnRCeUV2ZW50XG4gICAgICogQHBhcmFtIHtUb3VjaH0gZXZlbnRcbiAgICAgKiBAcGFyYW0ge1ZlYzJ9IHBvc1xuICAgICAqIEByZXR1cm4ge1ZlYzJ9XG4gICAgICovXG4gICAgZ2V0UG9pbnRCeUV2ZW50IChldmVudCwgcG9zKSB7XG4gICAgICAgIGlmIChldmVudC5wYWdlWCAhPSBudWxsKSAgLy9ub3QgYXZhbGFibGUgaW4gPD0gSUU4XG4gICAgICAgICAgICByZXR1cm4ge3g6IGV2ZW50LnBhZ2VYLCB5OiBldmVudC5wYWdlWX07XG5cbiAgICAgICAgcG9zLmxlZnQgLT0gZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0O1xuICAgICAgICBwb3MudG9wIC09IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wO1xuXG4gICAgICAgIHJldHVybiB7eDogZXZlbnQuY2xpZW50WCwgeTogZXZlbnQuY2xpZW50WX07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZXRob2QgZ2V0VG91Y2hlc0J5RXZlbnRcbiAgICAgKiBAcGFyYW0ge1RvdWNofSBldmVudFxuICAgICAqIEBwYXJhbSB7VmVjMn0gcG9zXG4gICAgICogQHJldHVybnMge0FycmF5fVxuICAgICAqL1xuICAgIGdldFRvdWNoZXNCeUV2ZW50IChldmVudCwgcG9zKSB7XG4gICAgICAgIGxldCB0b3VjaEFyciA9IFtdLCBsb2NWaWV3ID0gdGhpcy5fZ2xWaWV3O1xuICAgICAgICBsZXQgdG91Y2hfZXZlbnQsIHRvdWNoLCBwcmVMb2NhdGlvbjtcbiAgICAgICAgbGV0IGxvY1ByZVRvdWNoID0gdGhpcy5fcHJlVG91Y2hQb2ludDtcblxuICAgICAgICBsZXQgbGVuZ3RoID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0b3VjaF9ldmVudCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzW2ldO1xuICAgICAgICAgICAgaWYgKHRvdWNoX2V2ZW50KSB7XG4gICAgICAgICAgICAgICAgbGV0IGxvY2F0aW9uO1xuICAgICAgICAgICAgICAgIGlmIChzeXMuQlJPV1NFUl9UWVBFX0ZJUkVGT1ggPT09IHN5cy5icm93c2VyVHlwZSlcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24gPSBsb2NWaWV3LmNvbnZlcnRUb0xvY2F0aW9uSW5WaWV3KHRvdWNoX2V2ZW50LnBhZ2VYLCB0b3VjaF9ldmVudC5wYWdlWSwgcG9zLCBfdmVjMik7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbiA9IGxvY1ZpZXcuY29udmVydFRvTG9jYXRpb25JblZpZXcodG91Y2hfZXZlbnQuY2xpZW50WCwgdG91Y2hfZXZlbnQuY2xpZW50WSwgcG9zLCBfdmVjMik7XG4gICAgICAgICAgICAgICAgaWYgKHRvdWNoX2V2ZW50LmlkZW50aWZpZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0b3VjaCA9IG5ldyBjYy5Ub3VjaChsb2NhdGlvbi54LCBsb2NhdGlvbi55LCB0b3VjaF9ldmVudC5pZGVudGlmaWVyKTtcbiAgICAgICAgICAgICAgICAgICAgLy91c2UgVG91Y2ggUG9vbFxuICAgICAgICAgICAgICAgICAgICBwcmVMb2NhdGlvbiA9IHRoaXMuZ2V0UHJlVG91Y2godG91Y2gpLmdldExvY2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHRvdWNoLl9zZXRQcmV2UG9pbnQocHJlTG9jYXRpb24ueCwgcHJlTG9jYXRpb24ueSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0UHJlVG91Y2godG91Y2gpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRvdWNoID0gbmV3IGNjLlRvdWNoKGxvY2F0aW9uLngsIGxvY2F0aW9uLnkpO1xuICAgICAgICAgICAgICAgICAgICB0b3VjaC5fc2V0UHJldlBvaW50KGxvY1ByZVRvdWNoLngsIGxvY1ByZVRvdWNoLnkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsb2NQcmVUb3VjaC54ID0gbG9jYXRpb24ueDtcbiAgICAgICAgICAgICAgICBsb2NQcmVUb3VjaC55ID0gbG9jYXRpb24ueTtcbiAgICAgICAgICAgICAgICB0b3VjaEFyci5wdXNoKHRvdWNoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG91Y2hBcnI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZXRob2QgcmVnaXN0ZXJTeXN0ZW1FdmVudFxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAgICAgKi9cbiAgICByZWdpc3RlclN5c3RlbUV2ZW50IChlbGVtZW50KSB7XG4gICAgICAgIGlmKHRoaXMuX2lzUmVnaXN0ZXJFdmVudCkgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMuX2dsVmlldyA9IGNjLnZpZXc7XG4gICAgICAgIGxldCBzZWxmUG9pbnRlciA9IHRoaXM7XG4gICAgICAgIGxldCBjYW52YXNCb3VuZGluZ1JlY3QgPSB0aGlzLl9jYW52YXNCb3VuZGluZ1JlY3Q7XG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuX3VwZGF0ZUNhbnZhc0JvdW5kaW5nUmVjdC5iaW5kKHRoaXMpKTtcblxuICAgICAgICBsZXQgcHJvaGliaXRpb24gPSBzeXMuaXNNb2JpbGU7XG4gICAgICAgIGxldCBzdXBwb3J0TW91c2UgPSAoJ21vdXNlJyBpbiBzeXMuY2FwYWJpbGl0aWVzKTtcbiAgICAgICAgbGV0IHN1cHBvcnRUb3VjaGVzID0gKCd0b3VjaGVzJyBpbiBzeXMuY2FwYWJpbGl0aWVzKTtcblxuICAgICAgICBpZiAoc3VwcG9ydE1vdXNlKSB7XG4gICAgICAgICAgICAvL0hBQ0tcbiAgICAgICAgICAgIC8vICAtIEF0IHRoZSBzYW1lIHRpbWUgdG8gdHJpZ2dlciB0aGUgb250b3VjaCBldmVudCBhbmQgb25tb3VzZSBldmVudFxuICAgICAgICAgICAgLy8gIC0gVGhlIGZ1bmN0aW9uIHdpbGwgZXhlY3V0ZSAyIHRpbWVzXG4gICAgICAgICAgICAvL1RoZSBrbm93biBicm93c2VyOlxuICAgICAgICAgICAgLy8gIGxpZWJpYW9cbiAgICAgICAgICAgIC8vICBtaXVpXG4gICAgICAgICAgICAvLyAgV0VDSEFUXG4gICAgICAgICAgICBpZiAoIXByb2hpYml0aW9uKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZlBvaW50ZXIuX21vdXNlUHJlc3NlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSwgZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxmUG9pbnRlci5fbW91c2VQcmVzc2VkKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgc2VsZlBvaW50ZXIuX21vdXNlUHJlc3NlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCBsb2NhdGlvbiA9IHNlbGZQb2ludGVyLmdldFBvaW50QnlFdmVudChldmVudCwgY2FudmFzQm91bmRpbmdSZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjYy5yZWN0KGNhbnZhc0JvdW5kaW5nUmVjdC5sZWZ0LCBjYW52YXNCb3VuZGluZ1JlY3QudG9wLCBjYW52YXNCb3VuZGluZ1JlY3Qud2lkdGgsIGNhbnZhc0JvdW5kaW5nUmVjdC5oZWlnaHQpLmNvbnRhaW5zKGxvY2F0aW9uKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmUG9pbnRlci5oYW5kbGVUb3VjaGVzRW5kKFtzZWxmUG9pbnRlci5nZXRUb3VjaEJ5WFkobG9jYXRpb24ueCwgbG9jYXRpb24ueSwgY2FudmFzQm91bmRpbmdSZWN0KV0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbW91c2VFdmVudCA9IHNlbGZQb2ludGVyLmdldE1vdXNlRXZlbnQobG9jYXRpb24sIGNhbnZhc0JvdW5kaW5nUmVjdCwgY2MuRXZlbnQuRXZlbnRNb3VzZS5VUCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3VzZUV2ZW50LnNldEJ1dHRvbihldmVudC5idXR0b24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRNYW5hZ2VyLmRpc3BhdGNoRXZlbnQobW91c2VFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHJlZ2lzdGVyIGNhbnZhcyBtb3VzZSBldmVudFxuICAgICAgICAgICAgbGV0IEV2ZW50TW91c2UgPSBjYy5FdmVudC5FdmVudE1vdXNlO1xuICAgICAgICAgICAgbGV0IF9tb3VzZUV2ZW50c09uRWxlbWVudCA9IFtcbiAgICAgICAgICAgICAgICAhcHJvaGliaXRpb24gJiYgW1wibW91c2Vkb3duXCIsIEV2ZW50TW91c2UuRE9XTiwgZnVuY3Rpb24gKGV2ZW50LCBtb3VzZUV2ZW50LCBsb2NhdGlvbiwgY2FudmFzQm91bmRpbmdSZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGZQb2ludGVyLl9tb3VzZVByZXNzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBzZWxmUG9pbnRlci5oYW5kbGVUb3VjaGVzQmVnaW4oW3NlbGZQb2ludGVyLmdldFRvdWNoQnlYWShsb2NhdGlvbi54LCBsb2NhdGlvbi55LCBjYW52YXNCb3VuZGluZ1JlY3QpXSk7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgICAgICAhcHJvaGliaXRpb24gJiYgW1wibW91c2V1cFwiLCBFdmVudE1vdXNlLlVQLCBmdW5jdGlvbiAoZXZlbnQsIG1vdXNlRXZlbnQsIGxvY2F0aW9uLCBjYW52YXNCb3VuZGluZ1JlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZlBvaW50ZXIuX21vdXNlUHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBzZWxmUG9pbnRlci5oYW5kbGVUb3VjaGVzRW5kKFtzZWxmUG9pbnRlci5nZXRUb3VjaEJ5WFkobG9jYXRpb24ueCwgbG9jYXRpb24ueSwgY2FudmFzQm91bmRpbmdSZWN0KV0pO1xuICAgICAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgICAgICFwcm9oaWJpdGlvbiAmJiBbXCJtb3VzZW1vdmVcIiwgRXZlbnRNb3VzZS5NT1ZFLCBmdW5jdGlvbiAoZXZlbnQsIG1vdXNlRXZlbnQsIGxvY2F0aW9uLCBjYW52YXNCb3VuZGluZ1JlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZlBvaW50ZXIuaGFuZGxlVG91Y2hlc01vdmUoW3NlbGZQb2ludGVyLmdldFRvdWNoQnlYWShsb2NhdGlvbi54LCBsb2NhdGlvbi55LCBjYW52YXNCb3VuZGluZ1JlY3QpXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc2VsZlBvaW50ZXIuX21vdXNlUHJlc3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW91c2VFdmVudC5zZXRCdXR0b24obnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgICAgICBbXCJtb3VzZXdoZWVsXCIsIEV2ZW50TW91c2UuU0NST0xMLCBmdW5jdGlvbiAoZXZlbnQsIG1vdXNlRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbW91c2VFdmVudC5zZXRTY3JvbGxEYXRhKDAsIGV2ZW50LndoZWVsRGVsdGEpO1xuICAgICAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgICAgIC8qIGZpcmVmb3ggZml4ICovXG4gICAgICAgICAgICAgICAgW1wiRE9NTW91c2VTY3JvbGxcIiwgRXZlbnRNb3VzZS5TQ1JPTEwsIGZ1bmN0aW9uIChldmVudCwgbW91c2VFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICBtb3VzZUV2ZW50LnNldFNjcm9sbERhdGEoMCwgZXZlbnQuZGV0YWlsICogLTEyMCk7XG4gICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IF9tb3VzZUV2ZW50c09uRWxlbWVudC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGxldCBlbnRyeSA9IF9tb3VzZUV2ZW50c09uRWxlbWVudFtpXTtcbiAgICAgICAgICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5hbWUgPSBlbnRyeVswXTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHR5cGUgPSBlbnRyeVsxXTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGhhbmRsZXIgPSBlbnRyeVsyXTtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxvY2F0aW9uID0gc2VsZlBvaW50ZXIuZ2V0UG9pbnRCeUV2ZW50KGV2ZW50LCBjYW52YXNCb3VuZGluZ1JlY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1vdXNlRXZlbnQgPSBzZWxmUG9pbnRlci5nZXRNb3VzZUV2ZW50KGxvY2F0aW9uLCBjYW52YXNCb3VuZGluZ1JlY3QsIHR5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW91c2VFdmVudC5zZXRCdXR0b24oZXZlbnQuYnV0dG9uKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlcihldmVudCwgbW91c2VFdmVudCwgbG9jYXRpb24sIGNhbnZhc0JvdW5kaW5nUmVjdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50TWFuYWdlci5kaXNwYXRjaEV2ZW50KG1vdXNlRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHdpbmRvdy5uYXZpZ2F0b3IubXNQb2ludGVyRW5hYmxlZCkge1xuICAgICAgICAgICAgbGV0IF9wb2ludGVyRXZlbnRzTWFwID0ge1xuICAgICAgICAgICAgICAgIFwiTVNQb2ludGVyRG93blwiICAgICA6IHNlbGZQb2ludGVyLmhhbmRsZVRvdWNoZXNCZWdpbixcbiAgICAgICAgICAgICAgICBcIk1TUG9pbnRlck1vdmVcIiAgICAgOiBzZWxmUG9pbnRlci5oYW5kbGVUb3VjaGVzTW92ZSxcbiAgICAgICAgICAgICAgICBcIk1TUG9pbnRlclVwXCIgICAgICAgOiBzZWxmUG9pbnRlci5oYW5kbGVUb3VjaGVzRW5kLFxuICAgICAgICAgICAgICAgIFwiTVNQb2ludGVyQ2FuY2VsXCIgICA6IHNlbGZQb2ludGVyLmhhbmRsZVRvdWNoZXNDYW5jZWxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmb3IgKGxldCBldmVudE5hbWUgaW4gX3BvaW50ZXJFdmVudHNNYXApIHtcbiAgICAgICAgICAgICAgICBsZXQgdG91Y2hFdmVudCA9IF9wb2ludGVyRXZlbnRzTWFwW2V2ZW50TmFtZV07XG4gICAgICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZnVuY3Rpb24gKGV2ZW50KXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgY2FudmFzQm91bmRpbmdSZWN0LmFkanVzdGVkTGVmdCA9IGNhbnZhc0JvdW5kaW5nUmVjdC5sZWZ0IC0gZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQ7XG4gICAgICAgICAgICAgICAgICAgIGNhbnZhc0JvdW5kaW5nUmVjdC5hZGp1c3RlZFRvcCA9IGNhbnZhc0JvdW5kaW5nUmVjdC50b3AgLSBkb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xuXG4gICAgICAgICAgICAgICAgICAgIHRvdWNoRXZlbnQuY2FsbChzZWxmUG9pbnRlciwgW3NlbGZQb2ludGVyLmdldFRvdWNoQnlYWShldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZLCBjYW52YXNCb3VuZGluZ1JlY3QpXSk7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vcmVnaXN0ZXIgdG91Y2ggZXZlbnRcbiAgICAgICAgaWYgKHN1cHBvcnRUb3VjaGVzKSB7XG4gICAgICAgICAgICBsZXQgX3RvdWNoRXZlbnRzTWFwID0ge1xuICAgICAgICAgICAgICAgIFwidG91Y2hzdGFydFwiOiBmdW5jdGlvbiAodG91Y2hlc1RvSGFuZGxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGZQb2ludGVyLmhhbmRsZVRvdWNoZXNCZWdpbih0b3VjaGVzVG9IYW5kbGUpO1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcInRvdWNobW92ZVwiOiBmdW5jdGlvbiAodG91Y2hlc1RvSGFuZGxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGZQb2ludGVyLmhhbmRsZVRvdWNoZXNNb3ZlKHRvdWNoZXNUb0hhbmRsZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcInRvdWNoZW5kXCI6IGZ1bmN0aW9uICh0b3VjaGVzVG9IYW5kbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZlBvaW50ZXIuaGFuZGxlVG91Y2hlc0VuZCh0b3VjaGVzVG9IYW5kbGUpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJ0b3VjaGNhbmNlbFwiOiBmdW5jdGlvbiAodG91Y2hlc1RvSGFuZGxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGZQb2ludGVyLmhhbmRsZVRvdWNoZXNDYW5jZWwodG91Y2hlc1RvSGFuZGxlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBsZXQgcmVnaXN0ZXJUb3VjaEV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgICAgICAgICAgIGxldCBoYW5kbGVyID0gX3RvdWNoRXZlbnRzTWFwW2V2ZW50TmFtZV07XG4gICAgICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgKGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZXZlbnQuY2hhbmdlZFRvdWNoZXMpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuXG4gICAgICAgICAgICAgICAgICAgIGNhbnZhc0JvdW5kaW5nUmVjdC5hZGp1c3RlZExlZnQgPSBjYW52YXNCb3VuZGluZ1JlY3QubGVmdCAtIChib2R5LnNjcm9sbExlZnQgfHwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGNhbnZhc0JvdW5kaW5nUmVjdC5hZGp1c3RlZFRvcCA9IGNhbnZhc0JvdW5kaW5nUmVjdC50b3AgLSAoYm9keS5zY3JvbGxUb3AgfHwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIoc2VsZlBvaW50ZXIuZ2V0VG91Y2hlc0J5RXZlbnQoZXZlbnQsIGNhbnZhc0JvdW5kaW5nUmVjdCkpO1xuICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9KSwgZmFsc2UpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvciAobGV0IGV2ZW50TmFtZSBpbiBfdG91Y2hFdmVudHNNYXApIHtcbiAgICAgICAgICAgICAgICByZWdpc3RlclRvdWNoRXZlbnQoZXZlbnROYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3JlZ2lzdGVyS2V5Ym9hcmRFdmVudCgpO1xuXG4gICAgICAgIHRoaXMuX2lzUmVnaXN0ZXJFdmVudCA9IHRydWU7XG4gICAgfSxcblxuICAgIF9yZWdpc3RlcktleWJvYXJkRXZlbnQgKCkge30sXG5cbiAgICBfcmVnaXN0ZXJBY2NlbGVyb21ldGVyRXZlbnQgKCkge30sXG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIHVwZGF0ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkdFxuICAgICAqL1xuICAgIHVwZGF0ZSAoZHQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FjY2VsQ3VyVGltZSA+IHRoaXMuX2FjY2VsSW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjY2VsQ3VyVGltZSAtPSB0aGlzLl9hY2NlbEludGVydmFsO1xuICAgICAgICAgICAgZXZlbnRNYW5hZ2VyLmRpc3BhdGNoRXZlbnQobmV3IGNjLkV2ZW50LkV2ZW50QWNjZWxlcmF0aW9uKHRoaXMuX2FjY2VsZXJhdGlvbikpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FjY2VsQ3VyVGltZSArPSBkdDtcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9jYy5pbnB1dE1hbmFnZXIgPSBpbnB1dE1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gQ29weXJpZ2h0IChjKSAyMDExLTIwMTIgY29jb3MyZC14Lm9yZ1xuIENvcHlyaWdodCAoYykgMjAxMy0yMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHA6Ly93d3cuY29jb3MyZC14Lm9yZ1xuXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cbiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxudmFyIG1hY3JvID0gcmVxdWlyZSgnLi9DQ01hY3JvJyk7XG52YXIgc3lzID0gcmVxdWlyZSgnLi9DQ1N5cycpO1xudmFyIGV2ZW50TWFuYWdlciA9IHJlcXVpcmUoJy4uL2V2ZW50LW1hbmFnZXInKTtcblxudmFyIFRPVUNIX1RJTUVPVVQgPSBtYWNyby5UT1VDSF9USU1FT1VUO1xuXG52YXIgX3ZlYzIgPSBjYy52MigpO1xuXG4vKipcbiAqICBUaGlzIGNsYXNzIG1hbmFnZXMgYWxsIGV2ZW50cyBvZiBpbnB1dC4gaW5jbHVkZTogdG91Y2gsIG1vdXNlLCBhY2NlbGVyb21ldGVyLCBrZXlib2FyZFxuICovXG52YXIgaW5wdXRNYW5hZ2VyID0ge1xuICAgIF9tb3VzZVByZXNzZWQ6IGZhbHNlLFxuXG4gICAgX2lzUmVnaXN0ZXJFdmVudDogZmFsc2UsXG5cbiAgICBfcHJlVG91Y2hQb2ludDogY2MudjIoMCwgMCksXG4gICAgX3ByZXZNb3VzZVBvaW50OiBjYy52MigwLCAwKSxcblxuICAgIF9wcmVUb3VjaFBvb2w6IFtdLFxuICAgIF9wcmVUb3VjaFBvb2xQb2ludGVyOiAwLFxuXG4gICAgX3RvdWNoZXM6IFtdLFxuICAgIF90b3VjaGVzSW50ZWdlckRpY3Q6IHt9LFxuXG4gICAgX2luZGV4Qml0c1VzZWQ6IDAsXG4gICAgX21heFRvdWNoZXM6IDgsXG5cbiAgICBfYWNjZWxFbmFibGVkOiBmYWxzZSxcbiAgICBfYWNjZWxJbnRlcnZhbDogMSAvIDUsXG4gICAgX2FjY2VsTWludXM6IDEsXG4gICAgX2FjY2VsQ3VyVGltZTogMCxcbiAgICBfYWNjZWxlcmF0aW9uOiBudWxsLFxuICAgIF9hY2NlbERldmljZUV2ZW50OiBudWxsLFxuXG4gICAgX2NhbnZhc0JvdW5kaW5nUmVjdDoge1xuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGFkanVzdGVkTGVmdDogMCxcbiAgICAgICAgYWRqdXN0ZWRUb3A6IDAsXG4gICAgICAgIHdpZHRoOiAwLFxuICAgICAgICBoZWlnaHQ6IDBcbiAgICB9LFxuXG4gICAgX2dldFVuVXNlZEluZGV4OiBmdW5jdGlvbiBfZ2V0VW5Vc2VkSW5kZXgoKSB7XG4gICAgICAgIHZhciB0ZW1wID0gdGhpcy5faW5kZXhCaXRzVXNlZDtcbiAgICAgICAgdmFyIG5vdyA9IGNjLnN5cy5ub3coKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX21heFRvdWNoZXM7IGkrKykge1xuICAgICAgICAgICAgaWYgKCEodGVtcCAmIDB4MDAwMDAwMDEpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faW5kZXhCaXRzVXNlZCB8PSAxIDw8IGk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciB0b3VjaCA9IHRoaXMuX3RvdWNoZXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKG5vdyAtIHRvdWNoLl9sYXN0TW9kaWZpZWQgPiBUT1VDSF9USU1FT1VUKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZVVzZWRJbmRleEJpdChpKTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3RvdWNoZXNJbnRlZ2VyRGljdFt0b3VjaC5nZXRJRCgpXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGVtcCA+Pj0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFsbCBiaXRzIGFyZSB1c2VkXG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9LFxuICAgIF9yZW1vdmVVc2VkSW5kZXhCaXQ6IGZ1bmN0aW9uIF9yZW1vdmVVc2VkSW5kZXhCaXQoaW5kZXgpIHtcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLl9tYXhUb3VjaGVzKSByZXR1cm47XG5cbiAgICAgICAgdmFyIHRlbXAgPSAxIDw8IGluZGV4O1xuICAgICAgICB0ZW1wID0gfnRlbXA7XG4gICAgICAgIHRoaXMuX2luZGV4Qml0c1VzZWQgJj0gdGVtcDtcbiAgICB9LFxuXG5cbiAgICBfZ2xWaWV3OiBudWxsLFxuXG4gICAgX3VwZGF0ZUNhbnZhc0JvdW5kaW5nUmVjdDogZnVuY3Rpb24gX3VwZGF0ZUNhbnZhc0JvdW5kaW5nUmVjdCgpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBjYy5nYW1lLmNhbnZhcztcbiAgICAgICAgdmFyIGNhbnZhc0JvdW5kaW5nUmVjdCA9IHRoaXMuX2NhbnZhc0JvdW5kaW5nUmVjdDtcblxuICAgICAgICB2YXIgZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgdmFyIGxlZnRPZmZzZXQgPSB3aW5kb3cucGFnZVhPZmZzZXQgLSBkb2NFbGVtLmNsaWVudExlZnQ7XG4gICAgICAgIHZhciB0b3BPZmZzZXQgPSB3aW5kb3cucGFnZVlPZmZzZXQgLSBkb2NFbGVtLmNsaWVudFRvcDtcbiAgICAgICAgaWYgKGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KSB7XG4gICAgICAgICAgICB2YXIgYm94ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIGNhbnZhc0JvdW5kaW5nUmVjdC5sZWZ0ID0gYm94LmxlZnQgKyBsZWZ0T2Zmc2V0O1xuICAgICAgICAgICAgY2FudmFzQm91bmRpbmdSZWN0LnRvcCA9IGJveC50b3AgKyB0b3BPZmZzZXQ7XG4gICAgICAgICAgICBjYW52YXNCb3VuZGluZ1JlY3Qud2lkdGggPSBib3gud2lkdGg7XG4gICAgICAgICAgICBjYW52YXNCb3VuZGluZ1JlY3QuaGVpZ2h0ID0gYm94LmhlaWdodDtcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50IGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGNhbnZhc0JvdW5kaW5nUmVjdC5sZWZ0ID0gbGVmdE9mZnNldDtcbiAgICAgICAgICAgIGNhbnZhc0JvdW5kaW5nUmVjdC50b3AgPSB0b3BPZmZzZXQ7XG4gICAgICAgICAgICBjYW52YXNCb3VuZGluZ1JlY3Qud2lkdGggPSBlbGVtZW50LndpZHRoO1xuICAgICAgICAgICAgY2FudmFzQm91bmRpbmdSZWN0LmhlaWdodCA9IGVsZW1lbnQuaGVpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FudmFzQm91bmRpbmdSZWN0LmxlZnQgPSBsZWZ0T2Zmc2V0O1xuICAgICAgICAgICAgY2FudmFzQm91bmRpbmdSZWN0LnRvcCA9IHRvcE9mZnNldDtcbiAgICAgICAgICAgIGNhbnZhc0JvdW5kaW5nUmVjdC53aWR0aCA9IHBhcnNlSW50KGVsZW1lbnQuc3R5bGUud2lkdGgpO1xuICAgICAgICAgICAgY2FudmFzQm91bmRpbmdSZWN0LmhlaWdodCA9IHBhcnNlSW50KGVsZW1lbnQuc3R5bGUuaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIEBtZXRob2QgaGFuZGxlVG91Y2hlc0JlZ2luXG4gICAgICogQHBhcmFtIHtBcnJheX0gdG91Y2hlc1xuICAgICAqL1xuICAgIGhhbmRsZVRvdWNoZXNCZWdpbjogZnVuY3Rpb24gaGFuZGxlVG91Y2hlc0JlZ2luKHRvdWNoZXMpIHtcbiAgICAgICAgdmFyIHNlbFRvdWNoID0gdm9pZCAwLFxuICAgICAgICAgICAgaW5kZXggPSB2b2lkIDAsXG4gICAgICAgICAgICBjdXJUb3VjaCA9IHZvaWQgMCxcbiAgICAgICAgICAgIHRvdWNoSUQgPSB2b2lkIDAsXG4gICAgICAgICAgICBoYW5kbGVUb3VjaGVzID0gW10sXG4gICAgICAgICAgICBsb2NUb3VjaEludERpY3QgPSB0aGlzLl90b3VjaGVzSW50ZWdlckRpY3QsXG4gICAgICAgICAgICBub3cgPSBzeXMubm93KCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0b3VjaGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBzZWxUb3VjaCA9IHRvdWNoZXNbaV07XG4gICAgICAgICAgICB0b3VjaElEID0gc2VsVG91Y2guZ2V0SUQoKTtcbiAgICAgICAgICAgIGluZGV4ID0gbG9jVG91Y2hJbnREaWN0W3RvdWNoSURdO1xuXG4gICAgICAgICAgICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHZhciB1bnVzZWRJbmRleCA9IHRoaXMuX2dldFVuVXNlZEluZGV4KCk7XG4gICAgICAgICAgICAgICAgaWYgKHVudXNlZEluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBjYy5sb2dJRCgyMzAwLCB1bnVzZWRJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL2N1clRvdWNoID0gdGhpcy5fdG91Y2hlc1t1bnVzZWRJbmRleF0gPSBzZWxUb3VjaDtcbiAgICAgICAgICAgICAgICBjdXJUb3VjaCA9IHRoaXMuX3RvdWNoZXNbdW51c2VkSW5kZXhdID0gbmV3IGNjLlRvdWNoKHNlbFRvdWNoLl9wb2ludC54LCBzZWxUb3VjaC5fcG9pbnQueSwgc2VsVG91Y2guZ2V0SUQoKSk7XG4gICAgICAgICAgICAgICAgY3VyVG91Y2guX2xhc3RNb2RpZmllZCA9IG5vdztcbiAgICAgICAgICAgICAgICBjdXJUb3VjaC5fc2V0UHJldlBvaW50KHNlbFRvdWNoLl9wcmV2UG9pbnQpO1xuICAgICAgICAgICAgICAgIGxvY1RvdWNoSW50RGljdFt0b3VjaElEXSA9IHVudXNlZEluZGV4O1xuICAgICAgICAgICAgICAgIGhhbmRsZVRvdWNoZXMucHVzaChjdXJUb3VjaCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhbmRsZVRvdWNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fZ2xWaWV3Ll9jb252ZXJ0VG91Y2hlc1dpdGhTY2FsZShoYW5kbGVUb3VjaGVzKTtcbiAgICAgICAgICAgIHZhciB0b3VjaEV2ZW50ID0gbmV3IGNjLkV2ZW50LkV2ZW50VG91Y2goaGFuZGxlVG91Y2hlcyk7XG4gICAgICAgICAgICB0b3VjaEV2ZW50Ll9ldmVudENvZGUgPSBjYy5FdmVudC5FdmVudFRvdWNoLkJFR0FOO1xuICAgICAgICAgICAgZXZlbnRNYW5hZ2VyLmRpc3BhdGNoRXZlbnQodG91Y2hFdmVudCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIGhhbmRsZVRvdWNoZXNNb3ZlXG4gICAgICogQHBhcmFtIHtBcnJheX0gdG91Y2hlc1xuICAgICAqL1xuICAgIGhhbmRsZVRvdWNoZXNNb3ZlOiBmdW5jdGlvbiBoYW5kbGVUb3VjaGVzTW92ZSh0b3VjaGVzKSB7XG4gICAgICAgIHZhciBzZWxUb3VjaCA9IHZvaWQgMCxcbiAgICAgICAgICAgIGluZGV4ID0gdm9pZCAwLFxuICAgICAgICAgICAgdG91Y2hJRCA9IHZvaWQgMCxcbiAgICAgICAgICAgIGhhbmRsZVRvdWNoZXMgPSBbXSxcbiAgICAgICAgICAgIGxvY1RvdWNoZXMgPSB0aGlzLl90b3VjaGVzLFxuICAgICAgICAgICAgbm93ID0gc3lzLm5vdygpO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdG91Y2hlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgc2VsVG91Y2ggPSB0b3VjaGVzW2ldO1xuICAgICAgICAgICAgdG91Y2hJRCA9IHNlbFRvdWNoLmdldElEKCk7XG4gICAgICAgICAgICBpbmRleCA9IHRoaXMuX3RvdWNoZXNJbnRlZ2VyRGljdFt0b3VjaElEXTtcblxuICAgICAgICAgICAgaWYgKGluZGV4ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvL2NjLmxvZyhcImlmIHRoZSBpbmRleCBkb2Vzbid0IGV4aXN0LCBpdCBpcyBhbiBlcnJvclwiKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsb2NUb3VjaGVzW2luZGV4XSkge1xuICAgICAgICAgICAgICAgIGxvY1RvdWNoZXNbaW5kZXhdLl9zZXRQb2ludChzZWxUb3VjaC5fcG9pbnQpO1xuICAgICAgICAgICAgICAgIGxvY1RvdWNoZXNbaW5kZXhdLl9zZXRQcmV2UG9pbnQoc2VsVG91Y2guX3ByZXZQb2ludCk7XG4gICAgICAgICAgICAgICAgbG9jVG91Y2hlc1tpbmRleF0uX2xhc3RNb2RpZmllZCA9IG5vdztcbiAgICAgICAgICAgICAgICBoYW5kbGVUb3VjaGVzLnB1c2gobG9jVG91Y2hlc1tpbmRleF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChoYW5kbGVUb3VjaGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX2dsVmlldy5fY29udmVydFRvdWNoZXNXaXRoU2NhbGUoaGFuZGxlVG91Y2hlcyk7XG4gICAgICAgICAgICB2YXIgdG91Y2hFdmVudCA9IG5ldyBjYy5FdmVudC5FdmVudFRvdWNoKGhhbmRsZVRvdWNoZXMpO1xuICAgICAgICAgICAgdG91Y2hFdmVudC5fZXZlbnRDb2RlID0gY2MuRXZlbnQuRXZlbnRUb3VjaC5NT1ZFRDtcbiAgICAgICAgICAgIGV2ZW50TWFuYWdlci5kaXNwYXRjaEV2ZW50KHRvdWNoRXZlbnQpO1xuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBoYW5kbGVUb3VjaGVzRW5kXG4gICAgICogQHBhcmFtIHtBcnJheX0gdG91Y2hlc1xuICAgICAqL1xuICAgIGhhbmRsZVRvdWNoZXNFbmQ6IGZ1bmN0aW9uIGhhbmRsZVRvdWNoZXNFbmQodG91Y2hlcykge1xuICAgICAgICB2YXIgaGFuZGxlVG91Y2hlcyA9IHRoaXMuZ2V0U2V0T2ZUb3VjaGVzRW5kT3JDYW5jZWwodG91Y2hlcyk7XG4gICAgICAgIGlmIChoYW5kbGVUb3VjaGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX2dsVmlldy5fY29udmVydFRvdWNoZXNXaXRoU2NhbGUoaGFuZGxlVG91Y2hlcyk7XG4gICAgICAgICAgICB2YXIgdG91Y2hFdmVudCA9IG5ldyBjYy5FdmVudC5FdmVudFRvdWNoKGhhbmRsZVRvdWNoZXMpO1xuICAgICAgICAgICAgdG91Y2hFdmVudC5fZXZlbnRDb2RlID0gY2MuRXZlbnQuRXZlbnRUb3VjaC5FTkRFRDtcbiAgICAgICAgICAgIGV2ZW50TWFuYWdlci5kaXNwYXRjaEV2ZW50KHRvdWNoRXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByZVRvdWNoUG9vbC5sZW5ndGggPSAwO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIEBtZXRob2QgaGFuZGxlVG91Y2hlc0NhbmNlbFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHRvdWNoZXNcbiAgICAgKi9cbiAgICBoYW5kbGVUb3VjaGVzQ2FuY2VsOiBmdW5jdGlvbiBoYW5kbGVUb3VjaGVzQ2FuY2VsKHRvdWNoZXMpIHtcbiAgICAgICAgdmFyIGhhbmRsZVRvdWNoZXMgPSB0aGlzLmdldFNldE9mVG91Y2hlc0VuZE9yQ2FuY2VsKHRvdWNoZXMpO1xuICAgICAgICBpZiAoaGFuZGxlVG91Y2hlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLl9nbFZpZXcuX2NvbnZlcnRUb3VjaGVzV2l0aFNjYWxlKGhhbmRsZVRvdWNoZXMpO1xuICAgICAgICAgICAgdmFyIHRvdWNoRXZlbnQgPSBuZXcgY2MuRXZlbnQuRXZlbnRUb3VjaChoYW5kbGVUb3VjaGVzKTtcbiAgICAgICAgICAgIHRvdWNoRXZlbnQuX2V2ZW50Q29kZSA9IGNjLkV2ZW50LkV2ZW50VG91Y2guQ0FOQ0VMTEVEO1xuICAgICAgICAgICAgZXZlbnRNYW5hZ2VyLmRpc3BhdGNoRXZlbnQodG91Y2hFdmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJlVG91Y2hQb29sLmxlbmd0aCA9IDA7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBnZXRTZXRPZlRvdWNoZXNFbmRPckNhbmNlbFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHRvdWNoZXNcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9XG4gICAgICovXG4gICAgZ2V0U2V0T2ZUb3VjaGVzRW5kT3JDYW5jZWw6IGZ1bmN0aW9uIGdldFNldE9mVG91Y2hlc0VuZE9yQ2FuY2VsKHRvdWNoZXMpIHtcbiAgICAgICAgdmFyIHNlbFRvdWNoID0gdm9pZCAwLFxuICAgICAgICAgICAgaW5kZXggPSB2b2lkIDAsXG4gICAgICAgICAgICB0b3VjaElEID0gdm9pZCAwLFxuICAgICAgICAgICAgaGFuZGxlVG91Y2hlcyA9IFtdLFxuICAgICAgICAgICAgbG9jVG91Y2hlcyA9IHRoaXMuX3RvdWNoZXMsXG4gICAgICAgICAgICBsb2NUb3VjaGVzSW50RGljdCA9IHRoaXMuX3RvdWNoZXNJbnRlZ2VyRGljdDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRvdWNoZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHNlbFRvdWNoID0gdG91Y2hlc1tpXTtcbiAgICAgICAgICAgIHRvdWNoSUQgPSBzZWxUb3VjaC5nZXRJRCgpO1xuICAgICAgICAgICAgaW5kZXggPSBsb2NUb3VjaGVzSW50RGljdFt0b3VjaElEXTtcblxuICAgICAgICAgICAgaWYgKGluZGV4ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTsgLy9jYy5sb2coXCJpZiB0aGUgaW5kZXggZG9lc24ndCBleGlzdCwgaXQgaXMgYW4gZXJyb3JcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobG9jVG91Y2hlc1tpbmRleF0pIHtcbiAgICAgICAgICAgICAgICBsb2NUb3VjaGVzW2luZGV4XS5fc2V0UG9pbnQoc2VsVG91Y2guX3BvaW50KTtcbiAgICAgICAgICAgICAgICBsb2NUb3VjaGVzW2luZGV4XS5fc2V0UHJldlBvaW50KHNlbFRvdWNoLl9wcmV2UG9pbnQpO1xuICAgICAgICAgICAgICAgIGhhbmRsZVRvdWNoZXMucHVzaChsb2NUb3VjaGVzW2luZGV4XSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlVXNlZEluZGV4Qml0KGluZGV4KTtcbiAgICAgICAgICAgICAgICBkZWxldGUgbG9jVG91Y2hlc0ludERpY3RbdG91Y2hJRF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhhbmRsZVRvdWNoZXM7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBnZXRQcmVUb3VjaFxuICAgICAqIEBwYXJhbSB7VG91Y2h9IHRvdWNoXG4gICAgICogQHJldHVybiB7VG91Y2h9XG4gICAgICovXG4gICAgZ2V0UHJlVG91Y2g6IGZ1bmN0aW9uIGdldFByZVRvdWNoKHRvdWNoKSB7XG4gICAgICAgIHZhciBwcmVUb3VjaCA9IG51bGw7XG4gICAgICAgIHZhciBsb2NQcmVUb3VjaFBvb2wgPSB0aGlzLl9wcmVUb3VjaFBvb2w7XG4gICAgICAgIHZhciBpZCA9IHRvdWNoLmdldElEKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSBsb2NQcmVUb3VjaFBvb2wubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGlmIChsb2NQcmVUb3VjaFBvb2xbaV0uZ2V0SUQoKSA9PT0gaWQpIHtcbiAgICAgICAgICAgICAgICBwcmVUb3VjaCA9IGxvY1ByZVRvdWNoUG9vbFtpXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXByZVRvdWNoKSBwcmVUb3VjaCA9IHRvdWNoO1xuICAgICAgICByZXR1cm4gcHJlVG91Y2g7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBzZXRQcmVUb3VjaFxuICAgICAqIEBwYXJhbSB7VG91Y2h9IHRvdWNoXG4gICAgICovXG4gICAgc2V0UHJlVG91Y2g6IGZ1bmN0aW9uIHNldFByZVRvdWNoKHRvdWNoKSB7XG4gICAgICAgIHZhciBmaW5kID0gZmFsc2U7XG4gICAgICAgIHZhciBsb2NQcmVUb3VjaFBvb2wgPSB0aGlzLl9wcmVUb3VjaFBvb2w7XG4gICAgICAgIHZhciBpZCA9IHRvdWNoLmdldElEKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSBsb2NQcmVUb3VjaFBvb2wubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGlmIChsb2NQcmVUb3VjaFBvb2xbaV0uZ2V0SUQoKSA9PT0gaWQpIHtcbiAgICAgICAgICAgICAgICBsb2NQcmVUb3VjaFBvb2xbaV0gPSB0b3VjaDtcbiAgICAgICAgICAgICAgICBmaW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZpbmQpIHtcbiAgICAgICAgICAgIGlmIChsb2NQcmVUb3VjaFBvb2wubGVuZ3RoIDw9IDUwKSB7XG4gICAgICAgICAgICAgICAgbG9jUHJlVG91Y2hQb29sLnB1c2godG91Y2gpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsb2NQcmVUb3VjaFBvb2xbdGhpcy5fcHJlVG91Y2hQb29sUG9pbnRlcl0gPSB0b3VjaDtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcmVUb3VjaFBvb2xQb2ludGVyID0gKHRoaXMuX3ByZVRvdWNoUG9vbFBvaW50ZXIgKyAxKSAlIDUwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBnZXRUb3VjaEJ5WFlcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdHhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdHlcbiAgICAgKiBAcGFyYW0ge1ZlYzJ9IHBvc1xuICAgICAqIEByZXR1cm4ge1RvdWNofVxuICAgICAqL1xuICAgIGdldFRvdWNoQnlYWTogZnVuY3Rpb24gZ2V0VG91Y2hCeVhZKHR4LCB0eSwgcG9zKSB7XG4gICAgICAgIHZhciBsb2NQcmVUb3VjaCA9IHRoaXMuX3ByZVRvdWNoUG9pbnQ7XG4gICAgICAgIHZhciBsb2NhdGlvbiA9IHRoaXMuX2dsVmlldy5jb252ZXJ0VG9Mb2NhdGlvbkluVmlldyh0eCwgdHksIHBvcyk7XG4gICAgICAgIHZhciB0b3VjaCA9IG5ldyBjYy5Ub3VjaChsb2NhdGlvbi54LCBsb2NhdGlvbi55LCAwKTtcbiAgICAgICAgdG91Y2guX3NldFByZXZQb2ludChsb2NQcmVUb3VjaC54LCBsb2NQcmVUb3VjaC55KTtcbiAgICAgICAgbG9jUHJlVG91Y2gueCA9IGxvY2F0aW9uLng7XG4gICAgICAgIGxvY1ByZVRvdWNoLnkgPSBsb2NhdGlvbi55O1xuICAgICAgICByZXR1cm4gdG91Y2g7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBnZXRNb3VzZUV2ZW50XG4gICAgICogQHBhcmFtIHtWZWMyfSBsb2NhdGlvblxuICAgICAqIEBwYXJhbSB7VmVjMn0gcG9zXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGV2ZW50VHlwZVxuICAgICAqIEByZXR1cm5zIHtFdmVudC5FdmVudE1vdXNlfVxuICAgICAqL1xuICAgIGdldE1vdXNlRXZlbnQ6IGZ1bmN0aW9uIGdldE1vdXNlRXZlbnQobG9jYXRpb24sIHBvcywgZXZlbnRUeXBlKSB7XG4gICAgICAgIHZhciBsb2NQcmVNb3VzZSA9IHRoaXMuX3ByZXZNb3VzZVBvaW50O1xuICAgICAgICB2YXIgbW91c2VFdmVudCA9IG5ldyBjYy5FdmVudC5FdmVudE1vdXNlKGV2ZW50VHlwZSk7XG4gICAgICAgIG1vdXNlRXZlbnQuX3NldFByZXZDdXJzb3IobG9jUHJlTW91c2UueCwgbG9jUHJlTW91c2UueSk7XG4gICAgICAgIGxvY1ByZU1vdXNlLnggPSBsb2NhdGlvbi54O1xuICAgICAgICBsb2NQcmVNb3VzZS55ID0gbG9jYXRpb24ueTtcbiAgICAgICAgdGhpcy5fZ2xWaWV3Ll9jb252ZXJ0TW91c2VUb0xvY2F0aW9uSW5WaWV3KGxvY1ByZU1vdXNlLCBwb3MpO1xuICAgICAgICBtb3VzZUV2ZW50LnNldExvY2F0aW9uKGxvY1ByZU1vdXNlLngsIGxvY1ByZU1vdXNlLnkpO1xuICAgICAgICByZXR1cm4gbW91c2VFdmVudDtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIGdldFBvaW50QnlFdmVudFxuICAgICAqIEBwYXJhbSB7VG91Y2h9IGV2ZW50XG4gICAgICogQHBhcmFtIHtWZWMyfSBwb3NcbiAgICAgKiBAcmV0dXJuIHtWZWMyfVxuICAgICAqL1xuICAgIGdldFBvaW50QnlFdmVudDogZnVuY3Rpb24gZ2V0UG9pbnRCeUV2ZW50KGV2ZW50LCBwb3MpIHtcbiAgICAgICAgaWYgKGV2ZW50LnBhZ2VYICE9IG51bGwpIC8vbm90IGF2YWxhYmxlIGluIDw9IElFOFxuICAgICAgICAgICAgcmV0dXJuIHsgeDogZXZlbnQucGFnZVgsIHk6IGV2ZW50LnBhZ2VZIH07XG5cbiAgICAgICAgcG9zLmxlZnQgLT0gZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0O1xuICAgICAgICBwb3MudG9wIC09IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wO1xuXG4gICAgICAgIHJldHVybiB7IHg6IGV2ZW50LmNsaWVudFgsIHk6IGV2ZW50LmNsaWVudFkgfTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIGdldFRvdWNoZXNCeUV2ZW50XG4gICAgICogQHBhcmFtIHtUb3VjaH0gZXZlbnRcbiAgICAgKiBAcGFyYW0ge1ZlYzJ9IHBvc1xuICAgICAqIEByZXR1cm5zIHtBcnJheX1cbiAgICAgKi9cbiAgICBnZXRUb3VjaGVzQnlFdmVudDogZnVuY3Rpb24gZ2V0VG91Y2hlc0J5RXZlbnQoZXZlbnQsIHBvcykge1xuICAgICAgICB2YXIgdG91Y2hBcnIgPSBbXSxcbiAgICAgICAgICAgIGxvY1ZpZXcgPSB0aGlzLl9nbFZpZXc7XG4gICAgICAgIHZhciB0b3VjaF9ldmVudCA9IHZvaWQgMCxcbiAgICAgICAgICAgIHRvdWNoID0gdm9pZCAwLFxuICAgICAgICAgICAgcHJlTG9jYXRpb24gPSB2b2lkIDA7XG4gICAgICAgIHZhciBsb2NQcmVUb3VjaCA9IHRoaXMuX3ByZVRvdWNoUG9pbnQ7XG5cbiAgICAgICAgdmFyIGxlbmd0aCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdG91Y2hfZXZlbnQgPSBldmVudC5jaGFuZ2VkVG91Y2hlc1tpXTtcbiAgICAgICAgICAgIGlmICh0b3VjaF9ldmVudCkge1xuICAgICAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBpZiAoc3lzLkJST1dTRVJfVFlQRV9GSVJFRk9YID09PSBzeXMuYnJvd3NlclR5cGUpIGxvY2F0aW9uID0gbG9jVmlldy5jb252ZXJ0VG9Mb2NhdGlvbkluVmlldyh0b3VjaF9ldmVudC5wYWdlWCwgdG91Y2hfZXZlbnQucGFnZVksIHBvcywgX3ZlYzIpO2Vsc2UgbG9jYXRpb24gPSBsb2NWaWV3LmNvbnZlcnRUb0xvY2F0aW9uSW5WaWV3KHRvdWNoX2V2ZW50LmNsaWVudFgsIHRvdWNoX2V2ZW50LmNsaWVudFksIHBvcywgX3ZlYzIpO1xuICAgICAgICAgICAgICAgIGlmICh0b3VjaF9ldmVudC5pZGVudGlmaWVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdG91Y2ggPSBuZXcgY2MuVG91Y2gobG9jYXRpb24ueCwgbG9jYXRpb24ueSwgdG91Y2hfZXZlbnQuaWRlbnRpZmllcik7XG4gICAgICAgICAgICAgICAgICAgIC8vdXNlIFRvdWNoIFBvb2xcbiAgICAgICAgICAgICAgICAgICAgcHJlTG9jYXRpb24gPSB0aGlzLmdldFByZVRvdWNoKHRvdWNoKS5nZXRMb2NhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB0b3VjaC5fc2V0UHJldlBvaW50KHByZUxvY2F0aW9uLngsIHByZUxvY2F0aW9uLnkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFByZVRvdWNoKHRvdWNoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0b3VjaCA9IG5ldyBjYy5Ub3VjaChsb2NhdGlvbi54LCBsb2NhdGlvbi55KTtcbiAgICAgICAgICAgICAgICAgICAgdG91Y2guX3NldFByZXZQb2ludChsb2NQcmVUb3VjaC54LCBsb2NQcmVUb3VjaC55KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbG9jUHJlVG91Y2gueCA9IGxvY2F0aW9uLng7XG4gICAgICAgICAgICAgICAgbG9jUHJlVG91Y2gueSA9IGxvY2F0aW9uLnk7XG4gICAgICAgICAgICAgICAgdG91Y2hBcnIucHVzaCh0b3VjaCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdWNoQXJyO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIEBtZXRob2QgcmVnaXN0ZXJTeXN0ZW1FdmVudFxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAgICAgKi9cbiAgICByZWdpc3RlclN5c3RlbUV2ZW50OiBmdW5jdGlvbiByZWdpc3RlclN5c3RlbUV2ZW50KGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzUmVnaXN0ZXJFdmVudCkgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMuX2dsVmlldyA9IGNjLnZpZXc7XG4gICAgICAgIHZhciBzZWxmUG9pbnRlciA9IHRoaXM7XG4gICAgICAgIHZhciBjYW52YXNCb3VuZGluZ1JlY3QgPSB0aGlzLl9jYW52YXNCb3VuZGluZ1JlY3Q7XG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuX3VwZGF0ZUNhbnZhc0JvdW5kaW5nUmVjdC5iaW5kKHRoaXMpKTtcblxuICAgICAgICB2YXIgcHJvaGliaXRpb24gPSBzeXMuaXNNb2JpbGU7XG4gICAgICAgIHZhciBzdXBwb3J0TW91c2UgPSAnbW91c2UnIGluIHN5cy5jYXBhYmlsaXRpZXM7XG4gICAgICAgIHZhciBzdXBwb3J0VG91Y2hlcyA9ICd0b3VjaGVzJyBpbiBzeXMuY2FwYWJpbGl0aWVzO1xuXG4gICAgICAgIGlmIChzdXBwb3J0TW91c2UpIHtcbiAgICAgICAgICAgIC8vSEFDS1xuICAgICAgICAgICAgLy8gIC0gQXQgdGhlIHNhbWUgdGltZSB0byB0cmlnZ2VyIHRoZSBvbnRvdWNoIGV2ZW50IGFuZCBvbm1vdXNlIGV2ZW50XG4gICAgICAgICAgICAvLyAgLSBUaGUgZnVuY3Rpb24gd2lsbCBleGVjdXRlIDIgdGltZXNcbiAgICAgICAgICAgIC8vVGhlIGtub3duIGJyb3dzZXI6XG4gICAgICAgICAgICAvLyAgbGllYmlhb1xuICAgICAgICAgICAgLy8gIG1pdWlcbiAgICAgICAgICAgIC8vICBXRUNIQVRcbiAgICAgICAgICAgIGlmICghcHJvaGliaXRpb24pIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmUG9pbnRlci5fbW91c2VQcmVzc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9LCBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGZQb2ludGVyLl9tb3VzZVByZXNzZWQpIHJldHVybjtcblxuICAgICAgICAgICAgICAgICAgICBzZWxmUG9pbnRlci5fbW91c2VQcmVzc2VkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gc2VsZlBvaW50ZXIuZ2V0UG9pbnRCeUV2ZW50KGV2ZW50LCBjYW52YXNCb3VuZGluZ1JlY3QpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNjLnJlY3QoY2FudmFzQm91bmRpbmdSZWN0LmxlZnQsIGNhbnZhc0JvdW5kaW5nUmVjdC50b3AsIGNhbnZhc0JvdW5kaW5nUmVjdC53aWR0aCwgY2FudmFzQm91bmRpbmdSZWN0LmhlaWdodCkuY29udGFpbnMobG9jYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmUG9pbnRlci5oYW5kbGVUb3VjaGVzRW5kKFtzZWxmUG9pbnRlci5nZXRUb3VjaEJ5WFkobG9jYXRpb24ueCwgbG9jYXRpb24ueSwgY2FudmFzQm91bmRpbmdSZWN0KV0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbW91c2VFdmVudCA9IHNlbGZQb2ludGVyLmdldE1vdXNlRXZlbnQobG9jYXRpb24sIGNhbnZhc0JvdW5kaW5nUmVjdCwgY2MuRXZlbnQuRXZlbnRNb3VzZS5VUCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3VzZUV2ZW50LnNldEJ1dHRvbihldmVudC5idXR0b24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRNYW5hZ2VyLmRpc3BhdGNoRXZlbnQobW91c2VFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHJlZ2lzdGVyIGNhbnZhcyBtb3VzZSBldmVudFxuICAgICAgICAgICAgdmFyIEV2ZW50TW91c2UgPSBjYy5FdmVudC5FdmVudE1vdXNlO1xuICAgICAgICAgICAgdmFyIF9tb3VzZUV2ZW50c09uRWxlbWVudCA9IFshcHJvaGliaXRpb24gJiYgW1wibW91c2Vkb3duXCIsIEV2ZW50TW91c2UuRE9XTiwgZnVuY3Rpb24gKGV2ZW50LCBtb3VzZUV2ZW50LCBsb2NhdGlvbiwgY2FudmFzQm91bmRpbmdSZWN0KSB7XG4gICAgICAgICAgICAgICAgc2VsZlBvaW50ZXIuX21vdXNlUHJlc3NlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgc2VsZlBvaW50ZXIuaGFuZGxlVG91Y2hlc0JlZ2luKFtzZWxmUG9pbnRlci5nZXRUb3VjaEJ5WFkobG9jYXRpb24ueCwgbG9jYXRpb24ueSwgY2FudmFzQm91bmRpbmdSZWN0KV0pO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICAgIH1dLCAhcHJvaGliaXRpb24gJiYgW1wibW91c2V1cFwiLCBFdmVudE1vdXNlLlVQLCBmdW5jdGlvbiAoZXZlbnQsIG1vdXNlRXZlbnQsIGxvY2F0aW9uLCBjYW52YXNCb3VuZGluZ1JlY3QpIHtcbiAgICAgICAgICAgICAgICBzZWxmUG9pbnRlci5fbW91c2VQcmVzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgc2VsZlBvaW50ZXIuaGFuZGxlVG91Y2hlc0VuZChbc2VsZlBvaW50ZXIuZ2V0VG91Y2hCeVhZKGxvY2F0aW9uLngsIGxvY2F0aW9uLnksIGNhbnZhc0JvdW5kaW5nUmVjdCldKTtcbiAgICAgICAgICAgIH1dLCAhcHJvaGliaXRpb24gJiYgW1wibW91c2Vtb3ZlXCIsIEV2ZW50TW91c2UuTU9WRSwgZnVuY3Rpb24gKGV2ZW50LCBtb3VzZUV2ZW50LCBsb2NhdGlvbiwgY2FudmFzQm91bmRpbmdSZWN0KSB7XG4gICAgICAgICAgICAgICAgc2VsZlBvaW50ZXIuaGFuZGxlVG91Y2hlc01vdmUoW3NlbGZQb2ludGVyLmdldFRvdWNoQnlYWShsb2NhdGlvbi54LCBsb2NhdGlvbi55LCBjYW52YXNCb3VuZGluZ1JlY3QpXSk7XG4gICAgICAgICAgICAgICAgaWYgKCFzZWxmUG9pbnRlci5fbW91c2VQcmVzc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vdXNlRXZlbnQuc2V0QnV0dG9uKG51bGwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1dLCBbXCJtb3VzZXdoZWVsXCIsIEV2ZW50TW91c2UuU0NST0xMLCBmdW5jdGlvbiAoZXZlbnQsIG1vdXNlRXZlbnQpIHtcbiAgICAgICAgICAgICAgICBtb3VzZUV2ZW50LnNldFNjcm9sbERhdGEoMCwgZXZlbnQud2hlZWxEZWx0YSk7XG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIC8qIGZpcmVmb3ggZml4ICovXG4gICAgICAgICAgICBbXCJET01Nb3VzZVNjcm9sbFwiLCBFdmVudE1vdXNlLlNDUk9MTCwgZnVuY3Rpb24gKGV2ZW50LCBtb3VzZUV2ZW50KSB7XG4gICAgICAgICAgICAgICAgbW91c2VFdmVudC5zZXRTY3JvbGxEYXRhKDAsIGV2ZW50LmRldGFpbCAqIC0xMjApO1xuICAgICAgICAgICAgfV1dO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfbW91c2VFdmVudHNPbkVsZW1lbnQubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgZW50cnkgPSBfbW91c2VFdmVudHNPbkVsZW1lbnRbaV07XG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IGVudHJ5WzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBlbnRyeVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYW5kbGVyID0gZW50cnlbMl07XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIobmFtZSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gc2VsZlBvaW50ZXIuZ2V0UG9pbnRCeUV2ZW50KGV2ZW50LCBjYW52YXNCb3VuZGluZ1JlY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtb3VzZUV2ZW50ID0gc2VsZlBvaW50ZXIuZ2V0TW91c2VFdmVudChsb2NhdGlvbiwgY2FudmFzQm91bmRpbmdSZWN0LCB0eXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3VzZUV2ZW50LnNldEJ1dHRvbihldmVudC5idXR0b24pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlcihldmVudCwgbW91c2VFdmVudCwgbG9jYXRpb24sIGNhbnZhc0JvdW5kaW5nUmVjdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudE1hbmFnZXIuZGlzcGF0Y2hFdmVudChtb3VzZUV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3aW5kb3cubmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWQpIHtcbiAgICAgICAgICAgIHZhciBfcG9pbnRlckV2ZW50c01hcCA9IHtcbiAgICAgICAgICAgICAgICBcIk1TUG9pbnRlckRvd25cIjogc2VsZlBvaW50ZXIuaGFuZGxlVG91Y2hlc0JlZ2luLFxuICAgICAgICAgICAgICAgIFwiTVNQb2ludGVyTW92ZVwiOiBzZWxmUG9pbnRlci5oYW5kbGVUb3VjaGVzTW92ZSxcbiAgICAgICAgICAgICAgICBcIk1TUG9pbnRlclVwXCI6IHNlbGZQb2ludGVyLmhhbmRsZVRvdWNoZXNFbmQsXG4gICAgICAgICAgICAgICAgXCJNU1BvaW50ZXJDYW5jZWxcIjogc2VsZlBvaW50ZXIuaGFuZGxlVG91Y2hlc0NhbmNlbFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoZXZlbnROYW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRvdWNoRXZlbnQgPSBfcG9pbnRlckV2ZW50c01hcFtldmVudE5hbWVdO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICBjYW52YXNCb3VuZGluZ1JlY3QuYWRqdXN0ZWRMZWZ0ID0gY2FudmFzQm91bmRpbmdSZWN0LmxlZnQgLSBkb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdDtcbiAgICAgICAgICAgICAgICAgICAgY2FudmFzQm91bmRpbmdSZWN0LmFkanVzdGVkVG9wID0gY2FudmFzQm91bmRpbmdSZWN0LnRvcCAtIGRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7XG5cbiAgICAgICAgICAgICAgICAgICAgdG91Y2hFdmVudC5jYWxsKHNlbGZQb2ludGVyLCBbc2VsZlBvaW50ZXIuZ2V0VG91Y2hCeVhZKGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFksIGNhbnZhc0JvdW5kaW5nUmVjdCldKTtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZm9yICh2YXIgZXZlbnROYW1lIGluIF9wb2ludGVyRXZlbnRzTWFwKSB7XG4gICAgICAgICAgICAgICAgX2xvb3AoZXZlbnROYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vcmVnaXN0ZXIgdG91Y2ggZXZlbnRcbiAgICAgICAgaWYgKHN1cHBvcnRUb3VjaGVzKSB7XG4gICAgICAgICAgICB2YXIgX3RvdWNoRXZlbnRzTWFwID0ge1xuICAgICAgICAgICAgICAgIFwidG91Y2hzdGFydFwiOiBmdW5jdGlvbiB0b3VjaHN0YXJ0KHRvdWNoZXNUb0hhbmRsZSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmUG9pbnRlci5oYW5kbGVUb3VjaGVzQmVnaW4odG91Y2hlc1RvSGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJ0b3VjaG1vdmVcIjogZnVuY3Rpb24gdG91Y2htb3ZlKHRvdWNoZXNUb0hhbmRsZSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmUG9pbnRlci5oYW5kbGVUb3VjaGVzTW92ZSh0b3VjaGVzVG9IYW5kbGUpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJ0b3VjaGVuZFwiOiBmdW5jdGlvbiB0b3VjaGVuZCh0b3VjaGVzVG9IYW5kbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZlBvaW50ZXIuaGFuZGxlVG91Y2hlc0VuZCh0b3VjaGVzVG9IYW5kbGUpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJ0b3VjaGNhbmNlbFwiOiBmdW5jdGlvbiB0b3VjaGNhbmNlbCh0b3VjaGVzVG9IYW5kbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZlBvaW50ZXIuaGFuZGxlVG91Y2hlc0NhbmNlbCh0b3VjaGVzVG9IYW5kbGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciByZWdpc3RlclRvdWNoRXZlbnQgPSBmdW5jdGlvbiByZWdpc3RlclRvdWNoRXZlbnQoZXZlbnROYW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSBfdG91Y2hFdmVudHNNYXBbZXZlbnROYW1lXTtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFldmVudC5jaGFuZ2VkVG91Y2hlcykgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FudmFzQm91bmRpbmdSZWN0LmFkanVzdGVkTGVmdCA9IGNhbnZhc0JvdW5kaW5nUmVjdC5sZWZ0IC0gKGJvZHkuc2Nyb2xsTGVmdCB8fCAwKTtcbiAgICAgICAgICAgICAgICAgICAgY2FudmFzQm91bmRpbmdSZWN0LmFkanVzdGVkVG9wID0gY2FudmFzQm91bmRpbmdSZWN0LnRvcCAtIChib2R5LnNjcm9sbFRvcCB8fCAwKTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcihzZWxmUG9pbnRlci5nZXRUb3VjaGVzQnlFdmVudChldmVudCwgY2FudmFzQm91bmRpbmdSZWN0KSk7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmb3IgKHZhciBldmVudE5hbWUgaW4gX3RvdWNoRXZlbnRzTWFwKSB7XG4gICAgICAgICAgICAgICAgcmVnaXN0ZXJUb3VjaEV2ZW50KGV2ZW50TmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9yZWdpc3RlcktleWJvYXJkRXZlbnQoKTtcblxuICAgICAgICB0aGlzLl9pc1JlZ2lzdGVyRXZlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgX3JlZ2lzdGVyS2V5Ym9hcmRFdmVudDogZnVuY3Rpb24gX3JlZ2lzdGVyS2V5Ym9hcmRFdmVudCgpIHt9LFxuICAgIF9yZWdpc3RlckFjY2VsZXJvbWV0ZXJFdmVudDogZnVuY3Rpb24gX3JlZ2lzdGVyQWNjZWxlcm9tZXRlckV2ZW50KCkge30sXG5cblxuICAgIC8qKlxuICAgICAqIEBtZXRob2QgdXBkYXRlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGR0XG4gICAgICovXG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoZHQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FjY2VsQ3VyVGltZSA+IHRoaXMuX2FjY2VsSW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjY2VsQ3VyVGltZSAtPSB0aGlzLl9hY2NlbEludGVydmFsO1xuICAgICAgICAgICAgZXZlbnRNYW5hZ2VyLmRpc3BhdGNoRXZlbnQobmV3IGNjLkV2ZW50LkV2ZW50QWNjZWxlcmF0aW9uKHRoaXMuX2FjY2VsZXJhdGlvbikpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FjY2VsQ3VyVGltZSArPSBkdDtcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9jYy5pbnB1dE1hbmFnZXIgPSBpbnB1dE1hbmFnZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa05EU1c1d2RYUk5ZVzVoWjJWeUxtcHpJbDBzSW01aGJXVnpJanBiSW0xaFkzSnZJaXdpY21WeGRXbHlaU0lzSW5ONWN5SXNJbVYyWlc1MFRXRnVZV2RsY2lJc0lsUlBWVU5JWDFSSlRVVlBWVlFpTENKZmRtVmpNaUlzSW1Oaklpd2lkaklpTENKcGJuQjFkRTFoYm1GblpYSWlMQ0pmYlc5MWMyVlFjbVZ6YzJWa0lpd2lYMmx6VW1WbmFYTjBaWEpGZG1WdWRDSXNJbDl3Y21WVWIzVmphRkJ2YVc1MElpd2lYM0J5WlhaTmIzVnpaVkJ2YVc1MElpd2lYM0J5WlZSdmRXTm9VRzl2YkNJc0lsOXdjbVZVYjNWamFGQnZiMnhRYjJsdWRHVnlJaXdpWDNSdmRXTm9aWE1pTENKZmRHOTFZMmhsYzBsdWRHVm5aWEpFYVdOMElpd2lYMmx1WkdWNFFtbDBjMVZ6WldRaUxDSmZiV0Y0Vkc5MVkyaGxjeUlzSWw5aFkyTmxiRVZ1WVdKc1pXUWlMQ0pmWVdOalpXeEpiblJsY25aaGJDSXNJbDloWTJObGJFMXBiblZ6SWl3aVgyRmpZMlZzUTNWeVZHbHRaU0lzSWw5aFkyTmxiR1Z5WVhScGIyNGlMQ0pmWVdOalpXeEVaWFpwWTJWRmRtVnVkQ0lzSWw5allXNTJZWE5DYjNWdVpHbHVaMUpsWTNRaUxDSnNaV1owSWl3aWRHOXdJaXdpWVdScWRYTjBaV1JNWldaMElpd2lZV1JxZFhOMFpXUlViM0FpTENKM2FXUjBhQ0lzSW1obGFXZG9kQ0lzSWw5blpYUlZibFZ6WldSSmJtUmxlQ0lzSW5SbGJYQWlMQ0p1YjNjaUxDSnBJaXdpZEc5MVkyZ2lMQ0pmYkdGemRFMXZaR2xtYVdWa0lpd2lYM0psYlc5MlpWVnpaV1JKYm1SbGVFSnBkQ0lzSW1kbGRFbEVJaXdpYVc1a1pYZ2lMQ0pmWjJ4V2FXVjNJaXdpWDNWd1pHRjBaVU5oYm5aaGMwSnZkVzVrYVc1blVtVmpkQ0lzSW1Wc1pXMWxiblFpTENKbllXMWxJaXdpWTJGdWRtRnpJaXdpWTJGdWRtRnpRbTkxYm1ScGJtZFNaV04wSWl3aVpHOWpSV3hsYlNJc0ltUnZZM1Z0Wlc1MElpd2laRzlqZFcxbGJuUkZiR1Z0Wlc1MElpd2liR1ZtZEU5bVpuTmxkQ0lzSW5kcGJtUnZkeUlzSW5CaFoyVllUMlptYzJWMElpd2lZMnhwWlc1MFRHVm1kQ0lzSW5SdmNFOW1abk5sZENJc0luQmhaMlZaVDJabWMyVjBJaXdpWTJ4cFpXNTBWRzl3SWl3aVoyVjBRbTkxYm1ScGJtZERiR2xsYm5SU1pXTjBJaXdpWW05NElpd2lTRlJOVEVOaGJuWmhjMFZzWlcxbGJuUWlMQ0p3WVhKelpVbHVkQ0lzSW5OMGVXeGxJaXdpYUdGdVpHeGxWRzkxWTJobGMwSmxaMmx1SWl3aWRHOTFZMmhsY3lJc0luTmxiRlJ2ZFdOb0lpd2lZM1Z5Vkc5MVkyZ2lMQ0owYjNWamFFbEVJaXdpYUdGdVpHeGxWRzkxWTJobGN5SXNJbXh2WTFSdmRXTm9TVzUwUkdsamRDSXNJbXhsYmlJc0lteGxibWQwYUNJc0luVnVkWE5sWkVsdVpHVjRJaXdpYkc5blNVUWlMQ0pVYjNWamFDSXNJbDl3YjJsdWRDSXNJbmdpTENKNUlpd2lYM05sZEZCeVpYWlFiMmx1ZENJc0lsOXdjbVYyVUc5cGJuUWlMQ0p3ZFhOb0lpd2lYMk52Ym5abGNuUlViM1ZqYUdWelYybDBhRk5qWVd4bElpd2lkRzkxWTJoRmRtVnVkQ0lzSWtWMlpXNTBJaXdpUlhabGJuUlViM1ZqYUNJc0lsOWxkbVZ1ZEVOdlpHVWlMQ0pDUlVkQlRpSXNJbVJwYzNCaGRHTm9SWFpsYm5RaUxDSm9ZVzVrYkdWVWIzVmphR1Z6VFc5MlpTSXNJbXh2WTFSdmRXTm9aWE1pTENKZmMyVjBVRzlwYm5RaUxDSk5UMVpGUkNJc0ltaGhibVJzWlZSdmRXTm9aWE5GYm1RaUxDSm5aWFJUWlhSUFpsUnZkV05vWlhORmJtUlBja05oYm1ObGJDSXNJa1ZPUkVWRUlpd2lhR0Z1Wkd4bFZHOTFZMmhsYzBOaGJtTmxiQ0lzSWtOQlRrTkZURXhGUkNJc0lteHZZMVJ2ZFdOb1pYTkpiblJFYVdOMElpd2laMlYwVUhKbFZHOTFZMmdpTENKd2NtVlViM1ZqYUNJc0lteHZZMUJ5WlZSdmRXTm9VRzl2YkNJc0ltbGtJaXdpYzJWMFVISmxWRzkxWTJnaUxDSm1hVzVrSWl3aVoyVjBWRzkxWTJoQ2VWaFpJaXdpZEhnaUxDSjBlU0lzSW5CdmN5SXNJbXh2WTFCeVpWUnZkV05vSWl3aWJHOWpZWFJwYjI0aUxDSmpiMjUyWlhKMFZHOU1iMk5oZEdsdmJrbHVWbWxsZHlJc0ltZGxkRTF2ZFhObFJYWmxiblFpTENKbGRtVnVkRlI1Y0dVaUxDSnNiMk5RY21WTmIzVnpaU0lzSW0xdmRYTmxSWFpsYm5RaUxDSkZkbVZ1ZEUxdmRYTmxJaXdpWDNObGRGQnlaWFpEZFhKemIzSWlMQ0pmWTI5dWRtVnlkRTF2ZFhObFZHOU1iMk5oZEdsdmJrbHVWbWxsZHlJc0luTmxkRXh2WTJGMGFXOXVJaXdpWjJWMFVHOXBiblJDZVVWMlpXNTBJaXdpWlhabGJuUWlMQ0p3WVdkbFdDSXNJbkJoWjJWWklpd2lZbTlrZVNJc0luTmpjbTlzYkV4bFpuUWlMQ0p6WTNKdmJHeFViM0FpTENKamJHbGxiblJZSWl3aVkyeHBaVzUwV1NJc0ltZGxkRlJ2ZFdOb1pYTkNlVVYyWlc1MElpd2lkRzkxWTJoQmNuSWlMQ0pzYjJOV2FXVjNJaXdpZEc5MVkyaGZaWFpsYm5RaUxDSndjbVZNYjJOaGRHbHZiaUlzSW1Ob1lXNW5aV1JVYjNWamFHVnpJaXdpUWxKUFYxTkZVbDlVV1ZCRlgwWkpVa1ZHVDFnaUxDSmljbTkzYzJWeVZIbHdaU0lzSW1sa1pXNTBhV1pwWlhJaUxDSm5aWFJNYjJOaGRHbHZiaUlzSW5KbFoybHpkR1Z5VTNsemRHVnRSWFpsYm5RaUxDSjJhV1YzSWl3aWMyVnNabEJ2YVc1MFpYSWlMQ0poWkdSRmRtVnVkRXhwYzNSbGJtVnlJaXdpWW1sdVpDSXNJbkJ5YjJocFltbDBhVzl1SWl3aWFYTk5iMkpwYkdVaUxDSnpkWEJ3YjNKMFRXOTFjMlVpTENKallYQmhZbWxzYVhScFpYTWlMQ0p6ZFhCd2IzSjBWRzkxWTJobGN5SXNJbkpsWTNRaUxDSmpiMjUwWVdsdWN5SXNJbFZRSWl3aWMyVjBRblYwZEc5dUlpd2lZblYwZEc5dUlpd2lYMjF2ZFhObFJYWmxiblJ6VDI1RmJHVnRaVzUwSWl3aVJFOVhUaUlzSW1adlkzVnpJaXdpVFU5V1JTSXNJbE5EVWs5TVRDSXNJbk5sZEZOamNtOXNiRVJoZEdFaUxDSjNhR1ZsYkVSbGJIUmhJaXdpWkdWMFlXbHNJaXdpWlc1MGNua2lMQ0p1WVcxbElpd2lkSGx3WlNJc0ltaGhibVJzWlhJaUxDSnpkRzl3VUhKdmNHRm5ZWFJwYjI0aUxDSndjbVYyWlc1MFJHVm1ZWFZzZENJc0ltNWhkbWxuWVhSdmNpSXNJbTF6VUc5cGJuUmxja1Z1WVdKc1pXUWlMQ0pmY0c5cGJuUmxja1YyWlc1MGMwMWhjQ0lzSW1WMlpXNTBUbUZ0WlNJc0ltTmhiR3dpTENKZmRHOTFZMmhGZG1WdWRITk5ZWEFpTENKMGIzVmphR1Z6Vkc5SVlXNWtiR1VpTENKeVpXZHBjM1JsY2xSdmRXTm9SWFpsYm5RaUxDSmZjbVZuYVhOMFpYSkxaWGxpYjJGeVpFVjJaVzUwSWl3aVgzSmxaMmx6ZEdWeVFXTmpaV3hsY205dFpYUmxja1YyWlc1MElpd2lkWEJrWVhSbElpd2laSFFpTENKRmRtVnVkRUZqWTJWc1pYSmhkR2x2YmlJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSmZZMk1pWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQk1FSkJMRWxCUVUxQkxGRkJRVkZETEZGQlFWRXNWMEZCVWl4RFFVRmtPMEZCUTBFc1NVRkJUVU1zVFVGQlRVUXNVVUZCVVN4VFFVRlNMRU5CUVZvN1FVRkRRU3hKUVVGTlJTeGxRVUZsUml4UlFVRlJMR3RDUVVGU0xFTkJRWEpDT3p0QlFVVkJMRWxCUVUxSExHZENRVUZuUWtvc1RVRkJUVWtzWVVGQk5VSTdPMEZCUlVFc1NVRkJTVU1zVVVGQlVVTXNSMEZCUjBNc1JVRkJTQ3hGUVVGYU96dEJRVVZCT3pzN1FVRkhRU3hKUVVGSlF5eGxRVUZsTzBGQlEyWkRMRzFDUVVGbExFdEJSRUU3TzBGQlIyWkRMSE5DUVVGclFpeExRVWhJT3p0QlFVdG1ReXh2UWtGQlowSk1MRWRCUVVkRExFVkJRVWdzUTBGQlRTeERRVUZPTEVWQlFWRXNRMEZCVWl4RFFVeEVPMEZCVFdaTExIRkNRVUZwUWs0c1IwRkJSME1zUlVGQlNDeERRVUZOTEVOQlFVNHNSVUZCVVN4RFFVRlNMRU5CVGtZN08wRkJVV1pOTEcxQ1FVRmxMRVZCVWtFN1FVRlRaa01zTUVKQlFYTkNMRU5CVkZBN08wRkJWMlpETEdOQlFWVXNSVUZZU3p0QlFWbG1ReXg1UWtGQmIwSXNSVUZhVERzN1FVRmpaa01zYjBKQlFXZENMRU5CWkVRN1FVRmxaa01zYVVKQlFXRXNRMEZtUlRzN1FVRnBRbVpETEcxQ1FVRmxMRXRCYWtKQk8wRkJhMEptUXl4dlFrRkJaMElzU1VGQlJTeERRV3hDU0R0QlFXMUNaa01zYVVKQlFXRXNRMEZ1UWtVN1FVRnZRbVpETEcxQ1FVRmxMRU5CY0VKQk8wRkJjVUptUXl4dFFrRkJaU3hKUVhKQ1FUdEJRWE5DWmtNc2RVSkJRVzFDTEVsQmRFSktPenRCUVhkQ1prTXNlVUpCUVhGQ08wRkJRMnBDUXl4alFVRk5MRU5CUkZjN1FVRkZha0pETEdGQlFVc3NRMEZHV1R0QlFVZHFRa01zYzBKQlFXTXNRMEZJUnp0QlFVbHFRa01zY1VKQlFXRXNRMEZLU1R0QlFVdHFRa01zWlVGQlR5eERRVXhWTzBGQlRXcENReXhuUWtGQlVUdEJRVTVUTEV0QmVFSk9PenRCUVdsRFprTXNiVUpCYWtObExEWkNRV2xEU1R0QlFVTm1MRmxCUVVsRExFOUJRVThzUzBGQlMyaENMR05CUVdoQ08wRkJRMEVzV1VGQlNXbENMRTFCUVUwMVFpeEhRVUZIU2l4SFFVRklMRU5CUVU5blF5eEhRVUZRTEVWQlFWWTdPMEZCUlVFc1lVRkJTeXhKUVVGSlF5eEpRVUZKTEVOQlFXSXNSVUZCWjBKQkxFbEJRVWtzUzBGQlMycENMRmRCUVhwQ0xFVkJRWE5EYVVJc1IwRkJkRU1zUlVGQk1rTTdRVUZEZGtNc1owSkJRVWtzUlVGQlJVWXNUMEZCVHl4VlFVRlVMRU5CUVVvc1JVRkJNRUk3UVVGRGRFSXNjVUpCUVV0b1FpeGpRVUZNTEVsQlFYZENMRXRCUVV0clFpeERRVUUzUWp0QlFVTkJMSFZDUVVGUFFTeERRVUZRTzBGQlEwZ3NZVUZJUkN4TlFVbExPMEZCUTBRc2IwSkJRVWxETEZGQlFWRXNTMEZCUzNKQ0xGRkJRVXdzUTBGQlkyOUNMRU5CUVdRc1EwRkJXanRCUVVOQkxHOUNRVUZKUkN4TlFVRk5SU3hOUVVGTlF5eGhRVUZhTEVkQlFUUkNha01zWVVGQmFFTXNSVUZCSzBNN1FVRkRNME1zZVVKQlFVdHJReXh0UWtGQlRDeERRVUY1UWtnc1EwRkJla0k3UVVGRFFTd3lRa0ZCVHl4TFFVRkxia0lzYlVKQlFVd3NRMEZCZVVKdlFpeE5RVUZOUnl4TFFVRk9MRVZCUVhwQ0xFTkJRVkE3UVVGRFFTd3lRa0ZCVDBvc1EwRkJVRHRCUVVOSU8wRkJRMG83UVVGRFJFWXNjVUpCUVZNc1EwRkJWRHRCUVVOSU96dEJRVVZFTzBGQlEwRXNaVUZCVHl4RFFVRkRMRU5CUVZJN1FVRkRTQ3hMUVhaRVl6dEJRWGxFWmtzc2RVSkJla1JsTEN0Q1FYbEVUVVVzUzBGNlJFNHNSVUY1UkdFN1FVRkRlRUlzV1VGQlNVRXNVVUZCVVN4RFFVRlNMRWxCUVdGQkxGTkJRVk1zUzBGQlMzUkNMRmRCUVM5Q0xFVkJRMGs3TzBGQlJVb3NXVUZCU1dVc1QwRkJUeXhMUVVGTFR5eExRVUZvUWp0QlFVTkJVQ3hsUVVGUExFTkJRVU5CTEVsQlFWSTdRVUZEUVN4aFFVRkxhRUlzWTBGQlRDeEpRVUYxUW1kQ0xFbEJRWFpDTzBGQlEwZ3NTMEZvUldNN096dEJRV3RGWmxFc1lVRkJVeXhKUVd4RlRUczdRVUZ2UldaRExEWkNRWEJGWlN4MVEwRnZSV003UVVGRGVrSXNXVUZCU1VNc1ZVRkJWWEpETEVkQlFVZHpReXhKUVVGSUxFTkJRVkZETEUxQlFYUkNPMEZCUTBFc1dVRkJTVU1zY1VKQlFYRkNMRXRCUVV0eVFpeHRRa0ZCT1VJN08wRkJSVUVzV1VGQlNYTkNMRlZCUVZWRExGTkJRVk5ETEdWQlFYWkNPMEZCUTBFc1dVRkJTVU1zWVVGQllVTXNUMEZCVDBNc1YwRkJVQ3hIUVVGeFFrd3NVVUZCVVUwc1ZVRkJPVU03UVVGRFFTeFpRVUZKUXl4WlFVRlpTQ3hQUVVGUFNTeFhRVUZRTEVkQlFYRkNVaXhSUVVGUlV5eFRRVUUzUXp0QlFVTkJMRmxCUVVsaUxGRkJRVkZqTEhGQ1FVRmFMRVZCUVcxRE8wRkJReTlDTEdkQ1FVRkpReXhOUVVGTlppeFJRVUZSWXl4eFFrRkJVaXhGUVVGV08wRkJRMEZZTEN0Q1FVRnRRbkJDTEVsQlFXNUNMRWRCUVRCQ1owTXNTVUZCU1doRExFbEJRVW9zUjBGQlYzZENMRlZCUVhKRE8wRkJRMEZLTEN0Q1FVRnRRbTVDTEVkQlFXNUNMRWRCUVhsQ0swSXNTVUZCU1M5Q0xFZEJRVW9zUjBGQlZUSkNMRk5CUVc1RE8wRkJRMEZTTEN0Q1FVRnRRbWhDTEV0QlFXNUNMRWRCUVRKQ05FSXNTVUZCU1RWQ0xFdEJRUzlDTzBGQlEwRm5RaXdyUWtGQmJVSm1MRTFCUVc1Q0xFZEJRVFJDTWtJc1NVRkJTVE5DTEUxQlFXaERPMEZCUTBnc1UwRk9SQ3hOUVU5TExFbEJRVWxaTEcxQ1FVRnRRbWRDTEdsQ1FVRjJRaXhGUVVFd1F6dEJRVU16UTJJc0swSkJRVzFDY0VJc1NVRkJia0lzUjBGQk1FSjNRaXhWUVVFeFFqdEJRVU5CU2l3clFrRkJiVUp1UWl4SFFVRnVRaXhIUVVGNVFqSkNMRk5CUVhwQ08wRkJRMEZTTEN0Q1FVRnRRbWhDTEV0QlFXNUNMRWRCUVRKQ1lTeFJRVUZSWWl4TFFVRnVRenRCUVVOQlowSXNLMEpCUVcxQ1ppeE5RVUZ1UWl4SFFVRTBRbGtzVVVGQlVWb3NUVUZCY0VNN1FVRkRTQ3hUUVV4SkxFMUJUVUU3UVVGRFJHVXNLMEpCUVcxQ2NFSXNTVUZCYmtJc1IwRkJNRUozUWl4VlFVRXhRanRCUVVOQlNpd3JRa0ZCYlVKdVFpeEhRVUZ1UWl4SFFVRjVRakpDTEZOQlFYcENPMEZCUTBGU0xDdENRVUZ0UW1oQ0xFdEJRVzVDTEVkQlFUSkNPRUlzVTBGQlUycENMRkZCUVZGclFpeExRVUZTTEVOQlFXTXZRaXhMUVVGMlFpeERRVUV6UWp0QlFVTkJaMElzSzBKQlFXMUNaaXhOUVVGdVFpeEhRVUUwUWpaQ0xGTkJRVk5xUWl4UlFVRlJhMElzUzBGQlVpeERRVUZqT1VJc1RVRkJka0lzUTBGQk5VSTdRVUZEU0R0QlFVTktMRXRCT1Vaak96czdRVUZuUjJZN096czdRVUZKUVN0Q0xITkNRWEJIWlN3NFFrRnZSMHRETEU5QmNFZE1MRVZCYjBkak8wRkJRM3BDTEZsQlFVbERMR2xDUVVGS08wRkJRVUVzV1VGQlkzaENMR05CUVdRN1FVRkJRU3haUVVGeFFubENMR2xDUVVGeVFqdEJRVUZCTEZsQlFTdENReXhuUWtGQkwwSTdRVUZCUVN4WlFVTkpReXhuUWtGQlowSXNSVUZFY0VJN1FVRkJRU3haUVVOM1FrTXNhMEpCUVd0Q0xFdEJRVXR3UkN4dFFrRkVMME03UVVGQlFTeFpRVVZKYTBJc1RVRkJUV2hETEVsQlFVbG5ReXhIUVVGS0xFVkJSbFk3UVVGSFFTeGhRVUZMTEVsQlFVbERMRWxCUVVrc1EwRkJVaXhGUVVGWGEwTXNUVUZCVFU0c1VVRkJVVThzVFVGQk9VSXNSVUZCYzBOdVF5eEpRVUZKYTBNc1IwRkJNVU1zUlVGQkswTnNReXhIUVVFdlF5eEZRVUZ4UkR0QlFVTnFSRFpDTEhWQ1FVRlhSQ3hSUVVGUk5VSXNRMEZCVWl4RFFVRllPMEZCUTBFclFpeHpRa0ZCVlVZc1UwRkJVM3BDTEV0QlFWUXNSVUZCVmp0QlFVTkJReXh2UWtGQlVUUkNMR2RDUVVGblFrWXNUMEZCYUVJc1EwRkJVanM3UVVGRlFTeG5Ra0ZCU1RGQ0xGTkJRVk1zU1VGQllpeEZRVUZ0UWp0QlFVTm1MRzlDUVVGSkswSXNZMEZCWXl4TFFVRkxka01zWlVGQlRDeEZRVUZzUWp0QlFVTkJMRzlDUVVGSmRVTXNaMEpCUVdkQ0xFTkJRVU1zUTBGQmNrSXNSVUZCZDBJN1FVRkRjRUpxUlN4MVFrRkJSMnRGTEV0QlFVZ3NRMEZCVXl4SlFVRlVMRVZCUVdWRUxGZEJRV1k3UVVGRFFUdEJRVU5JTzBGQlEwUTdRVUZEUVU0c01rSkJRVmNzUzBGQlMyeEVMRkZCUVV3c1EwRkJZM2RFTEZkQlFXUXNTVUZCTmtJc1NVRkJTV3BGTEVkQlFVZHRSU3hMUVVGUUxFTkJRV0ZVTEZOQlFWTlZMRTFCUVZRc1EwRkJaMEpETEVOQlFUZENMRVZCUVdkRFdDeFRRVUZUVlN4TlFVRlVMRU5CUVdkQ1JTeERRVUZvUkN4RlFVRnRSRm9zVTBGQlUzcENMRXRCUVZRc1JVRkJia1FzUTBGQmVFTTdRVUZEUVRCQ0xIbENRVUZUTlVJc1lVRkJWQ3hIUVVGNVFrZ3NSMEZCZWtJN1FVRkRRU3RDTEhsQ1FVRlRXU3hoUVVGVUxFTkJRWFZDWWl4VFFVRlRZeXhWUVVGb1F6dEJRVU5CVml4blEwRkJaMEpHTEU5QlFXaENMRWxCUVRKQ1N5eFhRVUV6UWp0QlFVTkJTaXc0UWtGQlkxa3NTVUZCWkN4RFFVRnRRbVFzVVVGQmJrSTdRVUZEU0R0QlFVTktPMEZCUTBRc1dVRkJTVVVzWTBGQlkwY3NUVUZCWkN4SFFVRjFRaXhEUVVFelFpeEZRVUU0UWp0QlFVTXhRaXhwUWtGQlN6ZENMRTlCUVV3c1EwRkJZWFZETEhkQ1FVRmlMRU5CUVhORFlpeGhRVUYwUXp0QlFVTkJMR2RDUVVGSll5eGhRVUZoTEVsQlFVa3pSU3hIUVVGSE5FVXNTMEZCU0N4RFFVRlRReXhWUVVGaUxFTkJRWGRDYUVJc1lVRkJlRUlzUTBGQmFrSTdRVUZEUVdNc2RVSkJRVmRITEZWQlFWZ3NSMEZCZDBJNVJTeEhRVUZITkVVc1MwRkJTQ3hEUVVGVFF5eFZRVUZVTEVOQlFXOUNSU3hMUVVFMVF6dEJRVU5CYkVZc2VVSkJRV0Z0Uml4aFFVRmlMRU5CUVRKQ1RDeFZRVUV6UWp0QlFVTklPMEZCUTBvc1MwRnFTV003T3p0QlFXMUpaanM3T3p0QlFVbEJUU3h4UWtGMlNXVXNOa0pCZFVsSmVFSXNUMEYyU1Vvc1JVRjFTV0U3UVVGRGVFSXNXVUZCU1VNc2FVSkJRVW83UVVGQlFTeFpRVUZqZUVJc1kwRkJaRHRCUVVGQkxGbEJRWEZDTUVJc1owSkJRWEpDTzBGQlFVRXNXVUZEU1VNc1owSkJRV2RDTEVWQlJIQkNPMEZCUVVFc1dVRkRkMEp4UWl4aFFVRmhMRXRCUVV0NlJTeFJRVVF4UXp0QlFVRkJMRmxCUlVsdFFpeE5RVUZOYUVNc1NVRkJTV2RETEVkQlFVb3NSVUZHVmp0QlFVZEJMR0ZCUVVzc1NVRkJTVU1zU1VGQlNTeERRVUZTTEVWQlFWZHJReXhOUVVGTlRpeFJRVUZSVHl4TlFVRTVRaXhGUVVGelEyNURMRWxCUVVsclF5eEhRVUV4UXl4RlFVRXJRMnhETEVkQlFTOURMRVZCUVc5RU8wRkJRMmhFTmtJc2RVSkJRVmRFTEZGQlFWRTFRaXhEUVVGU0xFTkJRVmc3UVVGRFFTdENMSE5DUVVGVlJpeFRRVUZUZWtJc1MwRkJWQ3hGUVVGV08wRkJRMEZETEc5Q1FVRlJMRXRCUVV0NFFpeHRRa0ZCVEN4RFFVRjVRbXRFTEU5QlFYcENMRU5CUVZJN08wRkJSVUVzWjBKQlFVa3hRaXhUUVVGVExFbEJRV0lzUlVGQmJVSTdRVUZEWmp0QlFVTkJPMEZCUTBnN1FVRkRSQ3huUWtGQlNXZEVMRmRCUVZkb1JDeExRVUZZTEVOQlFVb3NSVUZCZFVJN1FVRkRia0puUkN3eVFrRkJWMmhFTEV0QlFWZ3NSVUZCYTBKcFJDeFRRVUZzUWl4RFFVRTBRbnBDTEZOQlFWTlZMRTFCUVhKRE8wRkJRMEZqTERKQ1FVRlhhRVFzUzBGQldDeEZRVUZyUW5GRExHRkJRV3hDTEVOQlFXZERZaXhUUVVGVFl5eFZRVUY2UXp0QlFVTkJWU3d5UWtGQlYyaEVMRXRCUVZnc1JVRkJhMEpJTEdGQlFXeENMRWRCUVd0RFNDeEhRVUZzUXp0QlFVTkJhVU1zT0VKQlFXTlpMRWxCUVdRc1EwRkJiVUpUTEZkQlFWZG9SQ3hMUVVGWUxFTkJRVzVDTzBGQlEwZzdRVUZEU2p0QlFVTkVMRmxCUVVreVFpeGpRVUZqUnl4TlFVRmtMRWRCUVhWQ0xFTkJRVE5DTEVWQlFUaENPMEZCUXpGQ0xHbENRVUZMTjBJc1QwRkJUQ3hEUVVGaGRVTXNkMEpCUVdJc1EwRkJjME5pTEdGQlFYUkRPMEZCUTBFc1owSkJRVWxqTEdGQlFXRXNTVUZCU1RORkxFZEJRVWMwUlN4TFFVRklMRU5CUVZORExGVkJRV0lzUTBGQmQwSm9RaXhoUVVGNFFpeERRVUZxUWp0QlFVTkJZeXgxUWtGQlYwY3NWVUZCV0N4SFFVRjNRamxGTEVkQlFVYzBSU3hMUVVGSUxFTkJRVk5ETEZWQlFWUXNRMEZCYjBKUExFdEJRVFZETzBGQlEwRjJSaXg1UWtGQllXMUdMR0ZCUVdJc1EwRkJNa0pNTEZWQlFUTkNPMEZCUTBnN1FVRkRTaXhMUVdwTFl6czdPMEZCYlV0bU96czdPMEZCU1VGVkxHOUNRWFpMWlN3MFFrRjFTMGMxUWl4UFFYWkxTQ3hGUVhWTFdUdEJRVU4yUWl4WlFVRkpTU3huUWtGQlowSXNTMEZCUzNsQ0xEQkNRVUZNTEVOQlFXZEROMElzVDBGQmFFTXNRMEZCY0VJN1FVRkRRU3haUVVGSlNTeGpRVUZqUnl4TlFVRmtMRWRCUVhWQ0xFTkJRVE5DTEVWQlFUaENPMEZCUXpGQ0xHbENRVUZMTjBJc1QwRkJUQ3hEUVVGaGRVTXNkMEpCUVdJc1EwRkJjME5pTEdGQlFYUkRPMEZCUTBFc1owSkJRVWxqTEdGQlFXRXNTVUZCU1RORkxFZEJRVWMwUlN4TFFVRklMRU5CUVZORExGVkJRV0lzUTBGQmQwSm9RaXhoUVVGNFFpeERRVUZxUWp0QlFVTkJZeXgxUWtGQlYwY3NWVUZCV0N4SFFVRjNRamxGTEVkQlFVYzBSU3hMUVVGSUxFTkJRVk5ETEZWQlFWUXNRMEZCYjBKVkxFdEJRVFZETzBGQlEwRXhSaXg1UWtGQllXMUdMR0ZCUVdJc1EwRkJNa0pNTEZWQlFUTkNPMEZCUTBnN1FVRkRSQ3hoUVVGTGNFVXNZVUZCVEN4RFFVRnRRbmxFTEUxQlFXNUNMRWRCUVRSQ0xFTkJRVFZDTzBGQlEwZ3NTMEZvVEdNN096dEJRV3RNWmpzN096dEJRVWxCZDBJc2RVSkJkRXhsTEN0Q1FYTk1UUzlDTEU5QmRFeE9MRVZCYzB4bE8wRkJRekZDTEZsQlFVbEpMR2RDUVVGblFpeExRVUZMZVVJc01FSkJRVXdzUTBGQlowTTNRaXhQUVVGb1F5eERRVUZ3UWp0QlFVTkJMRmxCUVVsSkxHTkJRV05ITEUxQlFXUXNSMEZCZFVJc1EwRkJNMElzUlVGQk9FSTdRVUZETVVJc2FVSkJRVXMzUWl4UFFVRk1MRU5CUVdGMVF5eDNRa0ZCWWl4RFFVRnpRMklzWVVGQmRFTTdRVUZEUVN4blFrRkJTV01zWVVGQllTeEpRVUZKTTBVc1IwRkJSelJGTEV0QlFVZ3NRMEZCVTBNc1ZVRkJZaXhEUVVGM1FtaENMR0ZCUVhoQ0xFTkJRV3BDTzBGQlEwRmpMSFZDUVVGWFJ5eFZRVUZZTEVkQlFYZENPVVVzUjBGQlJ6UkZMRXRCUVVnc1EwRkJVME1zVlVGQlZDeERRVUZ2UWxrc1UwRkJOVU03UVVGRFFUVkdMSGxDUVVGaGJVWXNZVUZCWWl4RFFVRXlRa3dzVlVGQk0wSTdRVUZEU0R0QlFVTkVMR0ZCUVV0d1JTeGhRVUZNTEVOQlFXMUNlVVFzVFVGQmJrSXNSMEZCTkVJc1EwRkJOVUk3UVVGRFNDeExRUzlNWXpzN08wRkJhVTFtT3pzN096dEJRVXRCYzBJc09FSkJkRTFsTEhORFFYTk5ZVGRDTEU5QmRFMWlMRVZCYzAxelFqdEJRVU5xUXl4WlFVRkpReXhwUWtGQlNqdEJRVUZCTEZsQlFXTjRRaXhqUVVGa08wRkJRVUVzV1VGQmNVSXdRaXhuUWtGQmNrSTdRVUZCUVN4WlFVRTRRa01zWjBKQlFXZENMRVZCUVRsRE8wRkJRVUVzV1VGQmEwUnhRaXhoUVVGaExFdEJRVXQ2UlN4UlFVRndSVHRCUVVGQkxGbEJRVGhGYVVZc2IwSkJRVzlDTEV0QlFVdG9SaXh0UWtGQmRrYzdRVUZEUVN4aFFVRkxMRWxCUVVsdFFpeEpRVUZKTEVOQlFWSXNSVUZCVjJ0RExFMUJRVTFPTEZGQlFWRlBMRTFCUVRsQ0xFVkJRWE5EYmtNc1NVRkJSMnRETEVkQlFYcERMRVZCUVRoRGJFTXNSMEZCT1VNc1JVRkJiMFE3UVVGRGFFUTJRaXgxUWtGQlYwUXNVVUZCVVRWQ0xFTkJRVklzUTBGQldEdEJRVU5CSzBJc2MwSkJRVlZHTEZOQlFWTjZRaXhMUVVGVUxFVkJRVlk3UVVGRFFVTXNiMEpCUVZGM1JDeHJRa0ZCYTBJNVFpeFBRVUZzUWl4RFFVRlNPenRCUVVWQkxHZENRVUZKTVVJc1UwRkJVeXhKUVVGaUxFVkJRVzFDTzBGQlEyWXNlVUpCUkdVc1EwRkRTanRCUVVOa08wRkJRMFFzWjBKQlFVbG5SQ3hYUVVGWGFFUXNTMEZCV0N4RFFVRktMRVZCUVhWQ08wRkJRMjVDWjBRc01rSkJRVmRvUkN4TFFVRllMRVZCUVd0Q2FVUXNVMEZCYkVJc1EwRkJORUo2UWl4VFFVRlRWU3hOUVVGeVF6dEJRVU5CWXl3eVFrRkJWMmhFTEV0QlFWZ3NSVUZCYTBKeFF5eGhRVUZzUWl4RFFVRm5RMklzVTBGQlUyTXNWVUZCZWtNN1FVRkRRVmdzT0VKQlFXTlpMRWxCUVdRc1EwRkJiVUpUTEZkQlFWZG9SQ3hMUVVGWUxFTkJRVzVDTzBGQlEwRXNjVUpCUVV0R0xHMUNRVUZNTEVOQlFYbENSU3hMUVVGNlFqdEJRVU5CTEhWQ1FVRlBkMFFzYTBKQlFXdENPVUlzVDBGQmJFSXNRMEZCVUR0QlFVTklPMEZCUTBvN1FVRkRSQ3hsUVVGUFF5eGhRVUZRTzBGQlEwZ3NTMEY2VG1NN096dEJRVEpPWmpzN096czdRVUZMUVRoQ0xHVkJhRTlsTEhWQ1FXZFBSamRFTEV0QmFFOUZMRVZCWjA5TE8wRkJRMmhDTEZsQlFVazRSQ3hYUVVGWExFbEJRV1k3UVVGRFFTeFpRVUZKUXl4clFrRkJhMElzUzBGQlMzUkdMR0ZCUVROQ08wRkJRMEVzV1VGQlNYVkdMRXRCUVV0b1JTeE5RVUZOUnl4TFFVRk9MRVZCUVZRN1FVRkRRU3hoUVVGTExFbEJRVWxLTEVsQlFVbG5SU3huUWtGQlowSTNRaXhOUVVGb1FpeEhRVUY1UWl4RFFVRjBReXhGUVVGNVEyNURMRXRCUVVzc1EwRkJPVU1zUlVGQmFVUkJMRWRCUVdwRUxFVkJRWE5FTzBGQlEyeEVMR2RDUVVGSlowVXNaMEpCUVdkQ2FFVXNRMEZCYUVJc1JVRkJiVUpKTEV0QlFXNUNMRTlCUVN0Q05rUXNSVUZCYmtNc1JVRkJkVU03UVVGRGJrTkdMREpDUVVGWFF5eG5Ra0ZCWjBKb1JTeERRVUZvUWl4RFFVRllPMEZCUTBFN1FVRkRTRHRCUVVOS08wRkJRMFFzV1VGQlNTeERRVUZESzBRc1VVRkJUQ3hGUVVOSlFTeFhRVUZYT1VRc1MwRkJXRHRCUVVOS0xHVkJRVTg0UkN4UlFVRlFPMEZCUTBnc1MwRTNUMk03T3p0QlFTdFBaanM3T3p0QlFVbEJSeXhsUVc1UVpTeDFRa0Z0VUVacVJTeExRVzVRUlN4RlFXMVFTenRCUVVOb1FpeFpRVUZKYTBVc1QwRkJUeXhMUVVGWU8wRkJRMEVzV1VGQlNVZ3NhMEpCUVd0Q0xFdEJRVXQwUml4aFFVRXpRanRCUVVOQkxGbEJRVWwxUml4TFFVRkxhRVVzVFVGQlRVY3NTMEZCVGl4RlFVRlVPMEZCUTBFc1lVRkJTeXhKUVVGSlNpeEpRVUZKWjBVc1owSkJRV2RDTjBJc1RVRkJhRUlzUjBGQmVVSXNRMEZCZEVNc1JVRkJlVU51UXl4TFFVRkxMRU5CUVRsRExFVkJRV2xFUVN4SFFVRnFSQ3hGUVVGelJEdEJRVU5zUkN4blFrRkJTV2RGTEdkQ1FVRm5RbWhGTEVOQlFXaENMRVZCUVcxQ1NTeExRVUZ1UWl4UFFVRXJRalpFTEVWQlFXNURMRVZCUVhWRE8wRkJRMjVEUkN4blEwRkJaMEpvUlN4RFFVRm9RaXhKUVVGeFFrTXNTMEZCY2tJN1FVRkRRV3RGTEhWQ1FVRlBMRWxCUVZBN1FVRkRRVHRCUVVOSU8wRkJRMG83UVVGRFJDeFpRVUZKTEVOQlFVTkJMRWxCUVV3c1JVRkJWenRCUVVOUUxHZENRVUZKU0N4blFrRkJaMEkzUWl4TlFVRm9RaXhKUVVFd1FpeEZRVUU1UWl4RlFVRnJRenRCUVVNNVFqWkNMR2REUVVGblFuQkNMRWxCUVdoQ0xFTkJRWEZDTTBNc1MwRkJja0k3UVVGRFNDeGhRVVpFTEUxQlJVODdRVUZEU0N0RUxHZERRVUZuUWl4TFFVRkxja1lzYjBKQlFYSkNMRWxCUVRaRGMwSXNTMEZCTjBNN1FVRkRRU3h4UWtGQlMzUkNMRzlDUVVGTUxFZEJRVFJDTEVOQlFVTXNTMEZCUzBFc2IwSkJRVXdzUjBGQk5FSXNRMEZCTjBJc1NVRkJhME1zUlVGQk9VUTdRVUZEU0R0QlFVTktPMEZCUTBvc1MwRjBVV003T3p0QlFYZFJaanM3T3pzN096dEJRVTlCZVVZc1owSkJMMUZsTEhkQ1FTdFJSRU1zUlVFdlVVTXNSVUVyVVVkRExFVkJMMUZJTEVWQksxRlBReXhIUVM5UlVDeEZRU3RSV1R0QlFVTjJRaXhaUVVGSlF5eGpRVUZqTEV0QlFVdG9SeXhqUVVGMlFqdEJRVU5CTEZsQlFVbHBSeXhYUVVGWExFdEJRVXR1UlN4UFFVRk1MRU5CUVdGdlJTeDFRa0ZCWWl4RFFVRnhRMHdzUlVGQmNrTXNSVUZCZVVORExFVkJRWHBETEVWQlFUWkRReXhIUVVFM1F5eERRVUZtTzBGQlEwRXNXVUZCU1hSRkxGRkJRVkVzU1VGQlNUbENMRWRCUVVkdFJTeExRVUZRTEVOQlFXRnRReXhUUVVGVGFrTXNRMEZCZEVJc1JVRkJlVUpwUXl4VFFVRlRhRU1zUTBGQmJFTXNSVUZCY1VNc1EwRkJja01zUTBGQldqdEJRVU5CZUVNc1kwRkJUWGxETEdGQlFVNHNRMEZCYjBJNFFpeFpRVUZaYUVNc1EwRkJhRU1zUlVGQmJVTm5ReXhaUVVGWkwwSXNRMEZCTDBNN1FVRkRRU3RDTEc5Q1FVRlphRU1zUTBGQldpeEhRVUZuUW1sRExGTkJRVk5xUXl4RFFVRjZRanRCUVVOQlowTXNiMEpCUVZrdlFpeERRVUZhTEVkQlFXZENaME1zVTBGQlUyaERMRU5CUVhwQ08wRkJRMEVzWlVGQlQzaERMRXRCUVZBN1FVRkRTQ3hMUVhaU1l6czdPMEZCZVZKbU96czdPenM3TzBGQlQwRXdSU3hwUWtGb1UyVXNlVUpCWjFOQlJpeFJRV2hUUVN4RlFXZFRWVVlzUjBGb1UxWXNSVUZuVTJWTExGTkJhRk5tTEVWQloxTXdRanRCUVVOeVF5eFpRVUZKUXl4alFVRmpMRXRCUVV0d1J5eGxRVUYyUWp0QlFVTkJMRmxCUVVseFJ5eGhRVUZoTEVsQlFVa3pSeXhIUVVGSE5FVXNTMEZCU0N4RFFVRlRaME1zVlVGQllpeERRVUYzUWtnc1UwRkJlRUlzUTBGQmFrSTdRVUZEUVVVc2JVSkJRVmRGTEdOQlFWZ3NRMEZCTUVKSUxGbEJRVmx5UXl4RFFVRjBReXhGUVVGNVEzRkRMRmxCUVZsd1F5eERRVUZ5UkR0QlFVTkJiME1zYjBKQlFWbHlReXhEUVVGYUxFZEJRV2RDYVVNc1UwRkJVMnBETEVOQlFYcENPMEZCUTBGeFF5eHZRa0ZCV1hCRExFTkJRVm9zUjBGQlowSm5ReXhUUVVGVGFFTXNRMEZCZWtJN1FVRkRRU3hoUVVGTGJrTXNUMEZCVEN4RFFVRmhNa1VzTmtKQlFXSXNRMEZCTWtOS0xGZEJRVE5ETEVWQlFYZEVUaXhIUVVGNFJEdEJRVU5CVHl4dFFrRkJWMGtzVjBGQldDeERRVUYxUWt3c1dVRkJXWEpETEVOQlFXNURMRVZCUVhORGNVTXNXVUZCV1hCRExFTkJRV3hFTzBGQlEwRXNaVUZCVDNGRExGVkJRVkE3UVVGRFNDeExRWHBUWXpzN08wRkJNbE5tT3pzN096czdRVUZOUVVzc2JVSkJhbFJsTERKQ1FXbFVSVU1zUzBGcVZFWXNSVUZwVkZOaUxFZEJhbFJVTEVWQmFWUmpPMEZCUTNwQ0xGbEJRVWxoTEUxQlFVMURMRXRCUVU0c1NVRkJaU3hKUVVGdVFpeEZRVUV3UWp0QlFVTjBRaXh0UWtGQlR5eEZRVUZETjBNc1IwRkJSelJETEUxQlFVMURMRXRCUVZZc1JVRkJhVUkxUXl4SFFVRkhNa01zVFVGQlRVVXNTMEZCTVVJc1JVRkJVRHM3UVVGRlNtWXNXVUZCU1doR0xFbEJRVW9zU1VGQldYTkNMRk5CUVZNd1JTeEpRVUZVTEVOQlFXTkRMRlZCUVRGQ08wRkJRMEZxUWl4WlFVRkpMMFVzUjBGQlNpeEpRVUZYY1VJc1UwRkJVekJGTEVsQlFWUXNRMEZCWTBVc1UwRkJla0k3TzBGQlJVRXNaVUZCVHl4RlFVRkRha1FzUjBGQlJ6UkRMRTFCUVUxTkxFOUJRVllzUlVGQmJVSnFSQ3hIUVVGSE1rTXNUVUZCVFU4c1QwRkJOVUlzUlVGQlVEdEJRVU5JTEV0QmVsUmpPenM3UVVFeVZHWTdPenM3T3p0QlFVMUJReXh4UWtGcVZXVXNOa0pCYVZWSlVpeExRV3BWU2l4RlFXbFZWMklzUjBGcVZWZ3NSVUZwVldkQ08wRkJRek5DTEZsQlFVbHpRaXhYUVVGWExFVkJRV1k3UVVGQlFTeFpRVUZ0UWtNc1ZVRkJWU3hMUVVGTGVFWXNUMEZCYkVNN1FVRkRRU3haUVVGSmVVWXNiMEpCUVVvN1FVRkJRU3haUVVGcFFqbEdMR05CUVdwQ08wRkJRVUVzV1VGQmQwSXJSaXh2UWtGQmVFSTdRVUZEUVN4WlFVRkplRUlzWTBGQll5eExRVUZMYUVjc1kwRkJka0k3TzBGQlJVRXNXVUZCU1RKRUxGTkJRVk5wUkN4TlFVRk5ZU3hqUVVGT0xFTkJRWEZDT1VRc1RVRkJiRU03UVVGRFFTeGhRVUZMTEVsQlFVbHVReXhKUVVGSkxFTkJRV0lzUlVGQlowSkJMRWxCUVVsdFF5eE5RVUZ3UWl4RlFVRTBRbTVETEVkQlFUVkNMRVZCUVdsRE8wRkJRemRDSzBZc01FSkJRV05ZTEUxQlFVMWhMR05CUVU0c1EwRkJjVUpxUnl4RFFVRnlRaXhEUVVGa08wRkJRMEVzWjBKQlFVa3JSaXhYUVVGS0xFVkJRV2xDTzBGQlEySXNiMEpCUVVsMFFpeHBRa0ZCU2p0QlFVTkJMRzlDUVVGSk1VY3NTVUZCU1cxSkxHOUNRVUZLTEV0QlFUWkNia2tzU1VGQlNXOUpMRmRCUVhKRExFVkJRMGt4UWl4WFFVRlhjVUlzVVVGQlVYQkNMSFZDUVVGU0xFTkJRV2REY1VJc1dVRkJXVllzUzBGQk5VTXNSVUZCYlVSVkxGbEJRVmxVTEV0QlFTOUVMRVZCUVhORlppeEhRVUYwUlN4RlFVRXlSWEpITEV0QlFUTkZMRU5CUVZnc1EwRkVTaXhMUVVkSmRVY3NWMEZCVjNGQ0xGRkJRVkZ3UWl4MVFrRkJVaXhEUVVGblEzRkNMRmxCUVZsTUxFOUJRVFZETEVWQlFYRkVTeXhaUVVGWlNpeFBRVUZxUlN4RlFVRXdSWEJDTEVkQlFURkZMRVZCUVN0RmNrY3NTMEZCTDBVc1EwRkJXRHRCUVVOS0xHOUNRVUZKTmtnc1dVRkJXVXNzVlVGQldpeEpRVUV3UWl4SlFVRTVRaXhGUVVGdlF6dEJRVU5vUTI1SExEUkNRVUZSTEVsQlFVazVRaXhIUVVGSGJVVXNTMEZCVUN4RFFVRmhiVU1zVTBGQlUycERMRU5CUVhSQ0xFVkJRWGxDYVVNc1UwRkJVMmhETEVOQlFXeERMRVZCUVhGRGMwUXNXVUZCV1Vzc1ZVRkJha1FzUTBGQlVqdEJRVU5CTzBGQlEwRktMR3REUVVGakxFdEJRVXRzUXl4WFFVRk1MRU5CUVdsQ04wUXNTMEZCYWtJc1JVRkJkMEp2Unl4WFFVRjRRaXhGUVVGa08wRkJRMEZ3Unl3d1FrRkJUWGxETEdGQlFVNHNRMEZCYjBKelJDeFpRVUZaZUVRc1EwRkJhRU1zUlVGQmJVTjNSQ3haUVVGWmRrUXNRMEZCTDBNN1FVRkRRU3g1UWtGQlMzbENMRmRCUVV3c1EwRkJhVUpxUlN4TFFVRnFRanRCUVVOSUxHbENRVTVFTEUxQlRVODdRVUZEU0VFc05FSkJRVkVzU1VGQlNUbENMRWRCUVVkdFJTeExRVUZRTEVOQlFXRnRReXhUUVVGVGFrTXNRMEZCZEVJc1JVRkJlVUpwUXl4VFFVRlRhRU1zUTBGQmJFTXNRMEZCVWp0QlFVTkJlRU1zTUVKQlFVMTVReXhoUVVGT0xFTkJRVzlDT0VJc1dVRkJXV2hETEVOQlFXaERMRVZCUVcxRFowTXNXVUZCV1M5Q0xFTkJRUzlETzBGQlEwZzdRVUZEUkN0Q0xEUkNRVUZaYUVNc1EwRkJXaXhIUVVGblFtbERMRk5CUVZOcVF5eERRVUY2UWp0QlFVTkJaME1zTkVKQlFWa3ZRaXhEUVVGYUxFZEJRV2RDWjBNc1UwRkJVMmhETEVOQlFYcENPMEZCUTBGdlJDeDVRa0ZCVTJwRUxFbEJRVlFzUTBGQll6TkRMRXRCUVdRN1FVRkRTRHRCUVVOS08wRkJRMFFzWlVGQlR6UkdMRkZCUVZBN1FVRkRTQ3hMUVM5V1l6czdPMEZCYVZkbU96czdPMEZCU1VGVExIVkNRWEpYWlN3clFrRnhWMDA1Uml4UFFYSlhUaXhGUVhGWFpUdEJRVU14UWl4WlFVRkhMRXRCUVV0cVF5eG5Ra0ZCVWl4RlFVRXdRanM3UVVGRk1VSXNZVUZCU3l0Q0xFOUJRVXdzUjBGQlpXNURMRWRCUVVkdlNTeEpRVUZzUWp0QlFVTkJMRmxCUVVsRExHTkJRV01zU1VGQmJFSTdRVUZEUVN4WlFVRkpOMFlzY1VKQlFYRkNMRXRCUVV0eVFpeHRRa0ZCT1VJN08wRkJSVUV3UWl4bFFVRlBlVVlzWjBKQlFWQXNRMEZCZDBJc1VVRkJlRUlzUlVGQmEwTXNTMEZCUzJ4SExIbENRVUZNTEVOQlFTdENiVWNzU1VGQkwwSXNRMEZCYjBNc1NVRkJjRU1zUTBGQmJFTTdPMEZCUlVFc1dVRkJTVU1zWTBGQll6VkpMRWxCUVVrMlNTeFJRVUYwUWp0QlFVTkJMRmxCUVVsRExHVkJRV2RDTEZkQlFWYzVTU3hKUVVGSkswa3NXVUZCYmtNN1FVRkRRU3haUVVGSlF5eHBRa0ZCYTBJc1lVRkJZV2hLTEVsQlFVa3JTU3haUVVGMlF6czdRVUZGUVN4WlFVRkpSQ3haUVVGS0xFVkJRV3RDTzBGQlEyUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeG5Ra0ZCU1N4RFFVRkRSaXhYUVVGTUxFVkJRV3RDTzBGQlEyUXpSaXgxUWtGQlQzbEdMR2RDUVVGUUxFTkJRWGRDTEZkQlFYaENMRVZCUVhGRExGbEJRVms3UVVGRE4wTkVMR2REUVVGWmJFa3NZVUZCV2l4SFFVRTBRaXhKUVVFMVFqdEJRVU5JTEdsQ1FVWkVMRVZCUlVjc1MwRkdTRHM3UVVGSlFUQkRMSFZDUVVGUGVVWXNaMEpCUVZBc1EwRkJkMElzVTBGQmVFSXNSVUZCYlVNc1ZVRkJWWEpDTEV0QlFWWXNSVUZCYVVJN1FVRkRhRVFzZDBKQlFVa3NRMEZCUTI5Q0xGbEJRVmxzU1N4aFFVRnFRaXhGUVVOSk96dEJRVVZLYTBrc1owTkJRVmxzU1N4aFFVRmFMRWRCUVRSQ0xFdEJRVFZDT3p0QlFVVkJMSGRDUVVGSmJVY3NWMEZCVnl0Q0xGbEJRVmx5UWl4bFFVRmFMRU5CUVRSQ1F5eExRVUUxUWl4RlFVRnRRM3BGTEd0Q1FVRnVReXhEUVVGbU8wRkJRMEVzZDBKQlFVa3NRMEZCUTNoRExFZEJRVWMyU1N4SlFVRklMRU5CUVZGeVJ5eHRRa0ZCYlVKd1FpeEpRVUV6UWl4RlFVRnBRMjlDTEcxQ1FVRnRRbTVDTEVkQlFYQkVMRVZCUVhsRWJVSXNiVUpCUVcxQ2FFSXNTMEZCTlVVc1JVRkJiVVpuUWl4dFFrRkJiVUptTEUxQlFYUkhMRVZCUVRoSGNVZ3NVVUZCT1Vjc1EwRkJkVWg0UXl4UlFVRjJTQ3hEUVVGTUxFVkJRWE5KTzBGQlEyeEpLMElzYjBOQlFWbG9SQ3huUWtGQldpeERRVUUyUWl4RFFVRkRaMFFzV1VGQldYQkRMRmxCUVZvc1EwRkJlVUpMTEZOQlFWTnFReXhEUVVGc1F5eEZRVUZ4UTJsRExGTkJRVk5vUXl4RFFVRTVReXhGUVVGcFJEbENMR3RDUVVGcVJDeERRVUZFTEVOQlFUZENPenRCUVVWQkxEUkNRVUZKYlVVc1lVRkJZVEJDTEZsQlFWazNRaXhoUVVGYUxFTkJRVEJDUml4UlFVRXhRaXhGUVVGdlF6bEVMR3RDUVVGd1F5eEZRVUYzUkhoRExFZEJRVWMwUlN4TFFVRklMRU5CUVZOblF5eFZRVUZVTEVOQlFXOUNiVU1zUlVGQk5VVXNRMEZCYWtJN1FVRkRRWEJETEcxRFFVRlhjVU1zVTBGQldDeERRVUZ4UWk5Q0xFMUJRVTFuUXl4TlFVRXpRanRCUVVOQmNFb3NjVU5CUVdGdFJpeGhRVUZpTEVOQlFUSkNNa0lzVlVGQk0wSTdRVUZEU0R0QlFVTktMR2xDUVdSRUxFVkJZMGNzUzBGa1NEdEJRV1ZJT3p0QlFVVkVPMEZCUTBFc1owSkJRVWxETEdGQlFXRTFSeXhIUVVGSE5FVXNTMEZCU0N4RFFVRlRaME1zVlVGQk1VSTdRVUZEUVN4blFrRkJTWE5ETEhkQ1FVRjNRaXhEUVVONFFpeERRVUZEVml4WFFVRkVMRWxCUVdkQ0xFTkJRVU1zVjBGQlJDeEZRVUZqTlVJc1YwRkJWM1ZETEVsQlFYcENMRVZCUVN0Q0xGVkJRVlZzUXl4TFFVRldMRVZCUVdsQ1RpeFZRVUZxUWl4RlFVRTJRa3dzVVVGQk4wSXNSVUZCZFVNNVJDeHJRa0ZCZGtNc1JVRkJNa1E3UVVGRGRFYzJSaXcwUWtGQldXeEpMR0ZCUVZvc1IwRkJORUlzU1VGQk5VSTdRVUZEUVd0SkxEUkNRVUZaTjBVc2EwSkJRVm9zUTBGQkswSXNRMEZCUXpaRkxGbEJRVmx3UXl4WlFVRmFMRU5CUVhsQ1N5eFRRVUZUYWtNc1EwRkJiRU1zUlVGQmNVTnBReXhUUVVGVGFFTXNRMEZCT1VNc1JVRkJhVVE1UWl4clFrRkJha1FzUTBGQlJDeERRVUV2UWp0QlFVTkJTQ3gzUWtGQlVTdEhMRXRCUVZJN1FVRkRTQ3hoUVVwbExFTkJSRkVzUlVGTmVFSXNRMEZCUTFvc1YwRkJSQ3hKUVVGblFpeERRVUZETEZOQlFVUXNSVUZCV1RWQ0xGZEJRVmR0UXl4RlFVRjJRaXhGUVVFeVFpeFZRVUZWT1VJc1MwRkJWaXhGUVVGcFFrNHNWVUZCYWtJc1JVRkJOa0pNTEZGQlFUZENMRVZCUVhWRE9VUXNhMEpCUVhaRExFVkJRVEpFTzBGQlEyeEhOa1lzTkVKQlFWbHNTU3hoUVVGYUxFZEJRVFJDTEV0QlFUVkNPMEZCUTBGclNTdzBRa0ZCV1doRUxHZENRVUZhTEVOQlFUWkNMRU5CUVVOblJDeFpRVUZaY0VNc1dVRkJXaXhEUVVGNVFrc3NVMEZCVTJwRExFTkJRV3hETEVWQlFYRkRhVU1zVTBGQlUyaERMRU5CUVRsRExFVkJRV2xFT1VJc2EwSkJRV3BFTEVOQlFVUXNRMEZCTjBJN1FVRkRTQ3hoUVVobExFTkJUbEVzUlVGVmVFSXNRMEZCUTJkSExGZEJRVVFzU1VGQlowSXNRMEZCUXl4WFFVRkVMRVZCUVdNMVFpeFhRVUZYZVVNc1NVRkJla0lzUlVGQkswSXNWVUZCVlhCRExFdEJRVllzUlVGQmFVSk9MRlZCUVdwQ0xFVkJRVFpDVEN4UlFVRTNRaXhGUVVGMVF6bEVMR3RDUVVGMlF5eEZRVUV5UkR0QlFVTjBSelpHTERSQ1FVRlpjRVFzYVVKQlFWb3NRMEZCT0VJc1EwRkJRMjlFTEZsQlFWbHdReXhaUVVGYUxFTkJRWGxDU3l4VFFVRlRha01zUTBGQmJFTXNSVUZCY1VOcFF5eFRRVUZUYUVNc1EwRkJPVU1zUlVGQmFVUTVRaXhyUWtGQmFrUXNRMEZCUkN4RFFVRTVRanRCUVVOQkxHOUNRVUZKTEVOQlFVTTJSaXhaUVVGWmJFa3NZVUZCYWtJc1JVRkJaME03UVVGRE5VSjNSeXdyUWtGQlYzRkRMRk5CUVZnc1EwRkJjVUlzU1VGQmNrSTdRVUZEU0R0QlFVTktMR0ZCVEdVc1EwRldVU3hGUVdkQ2VFSXNRMEZCUXl4WlFVRkVMRVZCUVdWd1F5eFhRVUZYTUVNc1RVRkJNVUlzUlVGQmEwTXNWVUZCVlhKRExFdEJRVllzUlVGQmFVSk9MRlZCUVdwQ0xFVkJRVFpDTzBGQlF6TkVRU3d5UWtGQlZ6UkRMR0ZCUVZnc1EwRkJlVUlzUTBGQmVrSXNSVUZCTkVKMFF5eE5RVUZOZFVNc1ZVRkJiRU03UVVGRFNDeGhRVVpFTEVOQmFFSjNRanRCUVcxQ2VFSTdRVUZEUVN4aFFVRkRMR2RDUVVGRUxFVkJRVzFDTlVNc1YwRkJWekJETEUxQlFUbENMRVZCUVhORExGVkJRVlZ5UXl4TFFVRldMRVZCUVdsQ1RpeFZRVUZxUWl4RlFVRTJRanRCUVVNdlJFRXNNa0pCUVZjMFF5eGhRVUZZTEVOQlFYbENMRU5CUVhwQ0xFVkJRVFJDZEVNc1RVRkJUWGRETEUxQlFVNHNSMEZCWlN4RFFVRkRMRWRCUVRWRE8wRkJRMGdzWVVGR1JDeERRWEJDZDBJc1EwRkJOVUk3UVVGM1FrRXNhVUpCUVVzc1NVRkJTVFZJTEVsQlFVa3NRMEZCWWl4RlFVRm5Ra0VzU1VGQlNYRklMSE5DUVVGelFteEdMRTFCUVRGRExFVkJRV3RFTEVWQlFVVnVReXhEUVVGd1JDeEZRVUYxUkR0QlFVTnVSQ3h2UWtGQlNUWklMRkZCUVZGU0xITkNRVUZ6UW5KSUxFTkJRWFJDTEVOQlFWbzdRVUZEUVN4dlFrRkJTVFpJTEV0QlFVb3NSVUZCVnp0QlFVRkJPMEZCUTFBc05FSkJRVWxETEU5QlFVOUVMRTFCUVUwc1EwRkJUaXhEUVVGWU8wRkJRMEVzTkVKQlFVbEZMRTlCUVU5R0xFMUJRVTBzUTBGQlRpeERRVUZZTzBGQlEwRXNORUpCUVVsSExGVkJRVlZJTEUxQlFVMHNRMEZCVGl4RFFVRmtPMEZCUTBGeVNDeG5RMEZCVVdsSExHZENRVUZTTEVOQlFYbENjVUlzU1VGQmVrSXNSVUZCSzBJc1ZVRkJWVEZETEV0QlFWWXNSVUZCYVVJN1FVRkROVU1zWjBOQlFVbFlMRmRCUVZjclFpeFpRVUZaY2tJc1pVRkJXaXhEUVVFMFFrTXNTMEZCTlVJc1JVRkJiVU42UlN4clFrRkJia01zUTBGQlpqdEJRVU5CTEdkRFFVRkpiVVVzWVVGQllUQkNMRmxCUVZrM1FpeGhRVUZhTEVOQlFUQkNSaXhSUVVFeFFpeEZRVUZ2UXpsRUxHdENRVUZ3UXl4RlFVRjNSRzlJTEVsQlFYaEVMRU5CUVdwQ08wRkJRMEZxUkN4MVEwRkJWM0ZETEZOQlFWZ3NRMEZCY1VJdlFpeE5RVUZOWjBNc1RVRkJNMEk3TzBGQlJVRlpMRzlEUVVGUk5VTXNTMEZCVWl4RlFVRmxUaXhWUVVGbUxFVkJRVEpDVEN4UlFVRXpRaXhGUVVGeFF6bEVMR3RDUVVGeVF6czdRVUZGUVRORExIbERRVUZoYlVZc1lVRkJZaXhEUVVFeVFqSkNMRlZCUVROQ08wRkJRMEZOTEd0RFFVRk5Oa01zWlVGQlRqdEJRVU5CTjBNc2EwTkJRVTA0UXl4alFVRk9PMEZCUTBnc2VVSkJWa1FzUlVGVlJ5eExRVlpJTzBGQlNrODdRVUZsVmp0QlFVTktPMEZCUTBvN08wRkJSVVFzV1VGQlNXeElMRTlCUVU5dFNDeFRRVUZRTEVOQlFXbENReXhuUWtGQmNrSXNSVUZCZFVNN1FVRkRia01zWjBKQlFVbERMRzlDUVVGdlFqdEJRVU53UWl4cFEwRkJjMEkzUWl4WlFVRlpOMFVzYTBKQlJHUTdRVUZGY0VJc2FVTkJRWE5DTmtVc1dVRkJXWEJFTEdsQ1FVWmtPMEZCUjNCQ0xDdENRVUZ6UW05RUxGbEJRVmxvUkN4blFrRklaRHRCUVVsd1FpeHRRMEZCYzBKblJDeFpRVUZaTjBNN1FVRktaQ3hoUVVGNFFqczdRVUZFYlVNc2RVTkJUekZDTWtVc1UwRlFNRUk3UVVGUkwwSXNiMEpCUVVsNFJpeGhRVUZoZFVZc2EwSkJRV3RDUXl4VFFVRnNRaXhEUVVGcVFqdEJRVU5CT1Vnc2QwSkJRVkZwUnl4blFrRkJVaXhEUVVGNVFqWkNMRk5CUVhwQ0xFVkJRVzlETEZWQlFWVnNSQ3hMUVVGV0xFVkJRV2RDTzBGQlEyaEVMSGRDUVVGSmRFVXNhMEpCUVd0Q1JDeFRRVUZUUXl4bFFVRXZRanRCUVVOQlNDeDFRMEZCYlVKc1FpeFpRVUZ1UWl4SFFVRnJRMnRDTEcxQ1FVRnRRbkJDTEVsQlFXNUNMRWRCUVRCQ2RVSXNaMEpCUVdkQ01FVXNWVUZCTlVVN1FVRkRRVGRGTEhWRFFVRnRRbXBDTEZkQlFXNUNMRWRCUVdsRGFVSXNiVUpCUVcxQ2JrSXNSMEZCYmtJc1IwRkJlVUp6UWl4blFrRkJaMEl5UlN4VFFVRXhSVHM3UVVGRlFUTkRMQ3RDUVVGWGVVWXNTVUZCV0N4RFFVRm5RaTlDTEZkQlFXaENMRVZCUVRaQ0xFTkJRVU5CTEZsQlFWbHdReXhaUVVGYUxFTkJRWGxDWjBJc1RVRkJUVTBzVDBGQkwwSXNSVUZCZDBOT0xFMUJRVTFQTEU5QlFUbERMRVZCUVhWRWFFWXNhMEpCUVhaRUxFTkJRVVFzUTBGQk4wSTdRVUZEUVhsRkxEQkNRVUZOTmtNc1pVRkJUanRCUVVOSUxHbENRVkJFTEVWQlQwY3NTMEZRU0R0QlFWUXJRanM3UVVGUGJrTXNhVUpCUVVzc1NVRkJTVXNzVTBGQlZDeEpRVUZ6UWtRc2FVSkJRWFJDTEVWQlFYbERPMEZCUVVFc2MwSkJRV2hEUXl4VFFVRm5RenRCUVZWNFF6dEJRVU5LT3p0QlFVVkVPMEZCUTBFc1dVRkJTWFpDTEdOQlFVb3NSVUZCYjBJN1FVRkRhRUlzWjBKQlFVbDVRaXhyUWtGQmEwSTdRVUZEYkVJc09FSkJRV01zYjBKQlFWVkRMR1ZCUVZZc1JVRkJNa0k3UVVGRGNrTnFReXhuUTBGQldUZEZMR3RDUVVGYUxFTkJRU3RDT0Vjc1pVRkJMMEk3UVVGRFFXcEpMRFJDUVVGUkswY3NTMEZCVWp0QlFVTklMR2xDUVVwcFFqdEJRVXRzUWl3MlFrRkJZU3h0UWtGQlZXdENMR1ZCUVZZc1JVRkJNa0k3UVVGRGNFTnFReXhuUTBGQldYQkVMR2xDUVVGYUxFTkJRVGhDY1VZc1pVRkJPVUk3UVVGRFNDeHBRa0ZRYVVJN1FVRlJiRUlzTkVKQlFWa3NhMEpCUVZWQkxHVkJRVllzUlVGQk1rSTdRVUZEYmtOcVF5eG5RMEZCV1doRUxHZENRVUZhTEVOQlFUWkNhVVlzWlVGQk4wSTdRVUZEU0N4cFFrRldhVUk3UVVGWGJFSXNLMEpCUVdVc2NVSkJRVlZCTEdWQlFWWXNSVUZCTWtJN1FVRkRkRU5xUXl4blEwRkJXVGRETEcxQ1FVRmFMRU5CUVdkRE9FVXNaVUZCYUVNN1FVRkRTRHRCUVdKcFFpeGhRVUYwUWpzN1FVRm5Ra0VzWjBKQlFVbERMSEZDUVVGeFFpeFRRVUZ5UWtFc2EwSkJRWEZDTEVOQlFWVktMRk5CUVZZc1JVRkJjVUk3UVVGRE1VTXNiMEpCUVVsT0xGVkJRVlZSTEdkQ1FVRm5Ra1lzVTBGQmFFSXNRMEZCWkR0QlFVTkJPVWdzZDBKQlFWRnBSeXhuUWtGQlVpeERRVUY1UWpaQ0xGTkJRWHBDTEVWQlFYRkRMRlZCUVZOc1JDeExRVUZVTEVWQlFXZENPMEZCUTJwRUxIZENRVUZKTEVOQlFVTkJMRTFCUVUxaExHTkJRVmdzUlVGQk1rSTdRVUZETTBJc2QwSkJRVWxXTEU5QlFVOHhSU3hUUVVGVE1FVXNTVUZCY0VJN08wRkJSVUUxUlN4MVEwRkJiVUpzUWl4WlFVRnVRaXhIUVVGclEydENMRzFDUVVGdFFuQkNMRWxCUVc1Q0xFbEJRVEpDWjBjc1MwRkJTME1zVlVGQlRDeEpRVUZ0UWl4RFFVRTVReXhEUVVGc1F6dEJRVU5CTjBVc2RVTkJRVzFDYWtJc1YwRkJia0lzUjBGQmFVTnBRaXh0UWtGQmJVSnVRaXhIUVVGdVFpeEpRVUV3UWl0R0xFdEJRVXRGTEZOQlFVd3NTVUZCYTBJc1EwRkJOVU1zUTBGQmFrTTdRVUZEUVhWRExEUkNRVUZSZUVJc1dVRkJXVm9zYVVKQlFWb3NRMEZCT0VKU0xFdEJRVGxDTEVWQlFYRkRla1VzYTBKQlFYSkRMRU5CUVZJN1FVRkRRWGxGTERCQ1FVRk5Oa01zWlVGQlRqdEJRVU5CTjBNc01FSkJRVTA0UXl4alFVRk9PMEZCUTBnc2FVSkJWRVFzUlVGVFNTeExRVlJLTzBGQlZVZ3NZVUZhUkR0QlFXRkJMR2xDUVVGTExFbEJRVWxKTEZOQlFWUXNTVUZCYzBKRkxHVkJRWFJDTEVWQlFYVkRPMEZCUTI1RFJTeHRRMEZCYlVKS0xGTkJRVzVDTzBGQlEwZzdRVUZEU2pzN1FVRkZSQ3hoUVVGTFN5eHpRa0ZCVERzN1FVRkZRU3hoUVVGTGNFc3NaMEpCUVV3c1IwRkJkMElzU1VGQmVFSTdRVUZEU0N4TFFURm1ZenRCUVRSbVptOUxMREJDUVRWbVpTeHZRMEUwWmxjc1EwRkJSU3hEUVRWbVlqdEJRVGhtWmtNc0swSkJPV1psTEhsRFFUaG1aMElzUTBGQlJTeERRVGxtYkVJN096dEJRV2RuUW1ZN096czdRVUZKUVVNc1ZVRndaMEpsTEd0Q1FXOW5RbEJETEVWQmNHZENUeXhGUVc5blFrZzdRVUZEVWl4WlFVRkpMRXRCUVVzelNpeGhRVUZNTEVkQlFYRkNMRXRCUVV0R0xHTkJRVGxDTEVWQlFUaERPMEZCUXpGRExHbENRVUZMUlN4aFFVRk1MRWxCUVhOQ0xFdEJRVXRHTEdOQlFUTkNPMEZCUTBGcVFpeDVRa0ZCWVcxR0xHRkJRV0lzUTBGQk1rSXNTVUZCU1doR0xFZEJRVWMwUlN4TFFVRklMRU5CUVZOblJ5eHBRa0ZCWWl4RFFVRXJRaXhMUVVGTE0wb3NZVUZCY0VNc1EwRkJNMEk3UVVGRFNEdEJRVU5FTEdGQlFVdEVMR0ZCUVV3c1NVRkJjMEl5U2l4RlFVRjBRanRCUVVOSU8wRkJNV2RDWXl4RFFVRnVRanM3UVVFMlowSkJSU3hQUVVGUFF5eFBRVUZRTEVkQlFXbENReXhKUVVGSk4wc3NXVUZCU2l4SFFVRnRRa0VzV1VGQmNFTWlMQ0ptYVd4bElqb2lRME5KYm5CMWRFMWhibUZuWlhJdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVJRU52Y0hseWFXZG9kQ0FvWXlrZ01qQXhNUzB5TURFeUlHTnZZMjl6TW1RdGVDNXZjbWRjYmlCRGIzQjVjbWxuYUhRZ0tHTXBJREl3TVRNdE1qQXhOaUJEYUhWcmIyNW5JRlJsWTJodWIyeHZaMmxsY3lCSmJtTXVYRzRnUTI5d2VYSnBaMmgwSUNoaktTQXlNREUzTFRJd01UZ2dXR2xoYldWdUlGbGhhbWtnVTI5bWRIZGhjbVVnUTI4dUxDQk1kR1F1WEc1Y2JpQm9kSFJ3T2k4dmQzZDNMbU52WTI5ek1tUXRlQzV2Y21kY2JseHVJRkJsY20xcGMzTnBiMjRnYVhNZ2FHVnlaV0o1SUdkeVlXNTBaV1FzSUdaeVpXVWdiMllnWTJoaGNtZGxMQ0IwYnlCaGJua2djR1Z5YzI5dUlHOWlkR0ZwYm1sdVp5QmhJR052Y0hsY2JpQnZaaUIwYUdseklITnZablIzWVhKbElHRnVaQ0JoYzNOdlkybGhkR1ZrSUdSdlkzVnRaVzUwWVhScGIyNGdabWxzWlhNZ0tIUm9aU0JjSWxOdlpuUjNZWEpsWENJcExDQjBieUJrWldGc1hHNGdhVzRnZEdobElGTnZablIzWVhKbElIZHBkR2h2ZFhRZ2NtVnpkSEpwWTNScGIyNHNJR2x1WTJ4MVpHbHVaeUIzYVhSb2IzVjBJR3hwYldsMFlYUnBiMjRnZEdobElISnBaMmgwYzF4dUlIUnZJSFZ6WlN3Z1kyOXdlU3dnYlc5a2FXWjVMQ0J0WlhKblpTd2djSFZpYkdsemFDd2daR2x6ZEhKcFluVjBaU3dnYzNWaWJHbGpaVzV6WlN3Z1lXNWtMMjl5SUhObGJHeGNiaUJqYjNCcFpYTWdiMllnZEdobElGTnZablIzWVhKbExDQmhibVFnZEc4Z2NHVnliV2wwSUhCbGNuTnZibk1nZEc4Z2QyaHZiU0IwYUdVZ1UyOW1kSGRoY21VZ2FYTmNiaUJtZFhKdWFYTm9aV1FnZEc4Z1pHOGdjMjhzSUhOMVltcGxZM1FnZEc4Z2RHaGxJR1p2Ykd4dmQybHVaeUJqYjI1a2FYUnBiMjV6T2x4dVhHNGdWR2hsSUdGaWIzWmxJR052Y0hseWFXZG9kQ0J1YjNScFkyVWdZVzVrSUhSb2FYTWdjR1Z5YldsemMybHZiaUJ1YjNScFkyVWdjMmhoYkd3Z1ltVWdhVzVqYkhWa1pXUWdhVzVjYmlCaGJHd2dZMjl3YVdWeklHOXlJSE4xWW5OMFlXNTBhV0ZzSUhCdmNuUnBiMjV6SUc5bUlIUm9aU0JUYjJaMGQyRnlaUzVjYmx4dUlGUklSU0JUVDBaVVYwRlNSU0JKVXlCUVVrOVdTVVJGUkNCY0lrRlRJRWxUWENJc0lGZEpWRWhQVlZRZ1YwRlNVa0ZPVkZrZ1QwWWdRVTVaSUV0SlRrUXNJRVZZVUZKRlUxTWdUMUpjYmlCSlRWQk1TVVZFTENCSlRrTk1WVVJKVGtjZ1FsVlVJRTVQVkNCTVNVMUpWRVZFSUZSUElGUklSU0JYUVZKU1FVNVVTVVZUSUU5R0lFMUZVa05JUVU1VVFVSkpURWxVV1N4Y2JpQkdTVlJPUlZOVElFWlBVaUJCSUZCQlVsUkpRMVZNUVZJZ1VGVlNVRTlUUlNCQlRrUWdUazlPU1U1R1VrbE9SMFZOUlU1VUxpQkpUaUJPVHlCRlZrVk9WQ0JUU0VGTVRDQlVTRVZjYmlCQlZWUklUMUpUSUU5U0lFTlBVRmxTU1VkSVZDQklUMHhFUlZKVElFSkZJRXhKUVVKTVJTQkdUMUlnUVU1WklFTk1RVWxOTENCRVFVMUJSMFZUSUU5U0lFOVVTRVZTWEc0Z1RFbEJRa2xNU1ZSWkxDQlhTRVZVU0VWU0lFbE9JRUZPSUVGRFZFbFBUaUJQUmlCRFQwNVVVa0ZEVkN3Z1ZFOVNWQ0JQVWlCUFZFaEZVbGRKVTBVc0lFRlNTVk5KVGtjZ1JsSlBUU3hjYmlCUFZWUWdUMFlnVDFJZ1NVNGdRMDlPVGtWRFZFbFBUaUJYU1ZSSUlGUklSU0JUVDBaVVYwRlNSU0JQVWlCVVNFVWdWVk5GSUU5U0lFOVVTRVZTSUVSRlFVeEpUa2RUSUVsT1hHNGdWRWhGSUZOUFJsUlhRVkpGTGx4dUlDb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW92WEc1Y2JtTnZibk4wSUcxaFkzSnZJRDBnY21WeGRXbHlaU2duTGk5RFEwMWhZM0p2SnlrN1hHNWpiMjV6ZENCemVYTWdQU0J5WlhGMWFYSmxLQ2N1TDBORFUzbHpKeWs3WEc1amIyNXpkQ0JsZG1WdWRFMWhibUZuWlhJZ1BTQnlaWEYxYVhKbEtDY3VMaTlsZG1WdWRDMXRZVzVoWjJWeUp5azdYRzVjYm1OdmJuTjBJRlJQVlVOSVgxUkpUVVZQVlZRZ1BTQnRZV055Ynk1VVQxVkRTRjlVU1UxRlQxVlVPMXh1WEc1c1pYUWdYM1psWXpJZ1BTQmpZeTUyTWlncE8xeHVYRzR2S2lwY2JpQXFJQ0JVYUdseklHTnNZWE56SUcxaGJtRm5aWE1nWVd4c0lHVjJaVzUwY3lCdlppQnBibkIxZEM0Z2FXNWpiSFZrWlRvZ2RHOTFZMmdzSUcxdmRYTmxMQ0JoWTJObGJHVnliMjFsZEdWeUxDQnJaWGxpYjJGeVpGeHVJQ292WEc1c1pYUWdhVzV3ZFhSTllXNWhaMlZ5SUQwZ2UxeHVJQ0FnSUY5dGIzVnpaVkJ5WlhOelpXUTZJR1poYkhObExGeHVYRzRnSUNBZ1gybHpVbVZuYVhOMFpYSkZkbVZ1ZERvZ1ptRnNjMlVzWEc1Y2JpQWdJQ0JmY0hKbFZHOTFZMmhRYjJsdWREb2dZMk11ZGpJb01Dd3dLU3hjYmlBZ0lDQmZjSEpsZGsxdmRYTmxVRzlwYm5RNklHTmpMbll5S0RBc01Da3NYRzVjYmlBZ0lDQmZjSEpsVkc5MVkyaFFiMjlzT2lCYlhTeGNiaUFnSUNCZmNISmxWRzkxWTJoUWIyOXNVRzlwYm5SbGNqb2dNQ3hjYmx4dUlDQWdJRjkwYjNWamFHVnpPaUJiWFN4Y2JpQWdJQ0JmZEc5MVkyaGxjMGx1ZEdWblpYSkVhV04wT250OUxGeHVYRzRnSUNBZ1gybHVaR1Y0UW1sMGMxVnpaV1E2SURBc1hHNGdJQ0FnWDIxaGVGUnZkV05vWlhNNklEZ3NYRzVjYmlBZ0lDQmZZV05qWld4RmJtRmliR1ZrT2lCbVlXeHpaU3hjYmlBZ0lDQmZZV05qWld4SmJuUmxjblpoYkRvZ01TODFMRnh1SUNBZ0lGOWhZMk5sYkUxcGJuVnpPaUF4TEZ4dUlDQWdJRjloWTJObGJFTjFjbFJwYldVNklEQXNYRzRnSUNBZ1gyRmpZMlZzWlhKaGRHbHZiam9nYm5Wc2JDeGNiaUFnSUNCZllXTmpaV3hFWlhacFkyVkZkbVZ1ZERvZ2JuVnNiQ3hjYmx4dUlDQWdJRjlqWVc1MllYTkNiM1Z1WkdsdVoxSmxZM1E2SUh0Y2JpQWdJQ0FnSUNBZ2JHVm1kRG9nTUN4Y2JpQWdJQ0FnSUNBZ2RHOXdPaUF3TEZ4dUlDQWdJQ0FnSUNCaFpHcDFjM1JsWkV4bFpuUTZJREFzWEc0Z0lDQWdJQ0FnSUdGa2FuVnpkR1ZrVkc5d09pQXdMRnh1SUNBZ0lDQWdJQ0IzYVdSMGFEb2dNQ3hjYmlBZ0lDQWdJQ0FnYUdWcFoyaDBPaUF3TEZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JmWjJWMFZXNVZjMlZrU1c1a1pYZ2dLQ2tnZTF4dUlDQWdJQ0FnSUNCc1pYUWdkR1Z0Y0NBOUlIUm9hWE11WDJsdVpHVjRRbWwwYzFWelpXUTdYRzRnSUNBZ0lDQWdJR3hsZENCdWIzY2dQU0JqWXk1emVYTXVibTkzS0NrN1hHNWNiaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0IwYUdsekxsOXRZWGhVYjNWamFHVnpPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hLSFJsYlhBZ0ppQXdlREF3TURBd01EQXhLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMmx1WkdWNFFtbDBjMVZ6WldRZ2ZEMGdLREVnUER3Z2FTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZEc5MVkyZ2dQU0IwYUdsekxsOTBiM1ZqYUdWelcybGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodWIzY2dMU0IwYjNWamFDNWZiR0Z6ZEUxdlpHbG1hV1ZrSUQ0Z1ZFOVZRMGhmVkVsTlJVOVZWQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5eVpXMXZkbVZWYzJWa1NXNWtaWGhDYVhRb2FTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbGJHVjBaU0IwYUdsekxsOTBiM1ZqYUdWelNXNTBaV2RsY2tScFkzUmJkRzkxWTJndVoyVjBTVVFvS1YwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhSbGJYQWdQajQ5SURFN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0F2THlCaGJHd2dZbWwwY3lCaGNtVWdkWE5sWkZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnTFRFN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUY5eVpXMXZkbVZWYzJWa1NXNWtaWGhDYVhRZ0tHbHVaR1Y0S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hwYm1SbGVDQThJREFnZkh3Z2FXNWtaWGdnUGowZ2RHaHBjeTVmYldGNFZHOTFZMmhsY3lsY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNibHh1SUNBZ0lDQWdJQ0JzWlhRZ2RHVnRjQ0E5SURFZ1BEd2dhVzVrWlhnN1hHNGdJQ0FnSUNBZ0lIUmxiWEFnUFNCK2RHVnRjRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZhVzVrWlhoQ2FYUnpWWE5sWkNBbVBTQjBaVzF3TzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JmWjJ4V2FXVjNPaUJ1ZFd4c0xGeHVYRzRnSUNBZ1gzVndaR0YwWlVOaGJuWmhjMEp2ZFc1a2FXNW5VbVZqZENBb0tTQjdYRzRnSUNBZ0lDQWdJR3hsZENCbGJHVnRaVzUwSUQwZ1kyTXVaMkZ0WlM1allXNTJZWE03WEc0Z0lDQWdJQ0FnSUd4bGRDQmpZVzUyWVhOQ2IzVnVaR2x1WjFKbFkzUWdQU0IwYUdsekxsOWpZVzUyWVhOQ2IzVnVaR2x1WjFKbFkzUTdYRzVjYmlBZ0lDQWdJQ0FnYkdWMElHUnZZMFZzWlcwZ1BTQmtiMk4xYldWdWRDNWtiMk4xYldWdWRFVnNaVzFsYm5RN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JzWldaMFQyWm1jMlYwSUQwZ2QybHVaRzkzTG5CaFoyVllUMlptYzJWMElDMGdaRzlqUld4bGJTNWpiR2xsYm5STVpXWjBPMXh1SUNBZ0lDQWdJQ0JzWlhRZ2RHOXdUMlptYzJWMElEMGdkMmx1Wkc5M0xuQmhaMlZaVDJabWMyVjBJQzBnWkc5alJXeGxiUzVqYkdsbGJuUlViM0E3WEc0Z0lDQWdJQ0FnSUdsbUlDaGxiR1Z0Wlc1MExtZGxkRUp2ZFc1a2FXNW5RMnhwWlc1MFVtVmpkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdKdmVDQTlJR1ZzWlcxbGJuUXVaMlYwUW05MWJtUnBibWREYkdsbGJuUlNaV04wS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVc1MllYTkNiM1Z1WkdsdVoxSmxZM1F1YkdWbWRDQTlJR0p2ZUM1c1pXWjBJQ3NnYkdWbWRFOW1abk5sZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYm5aaGMwSnZkVzVrYVc1blVtVmpkQzUwYjNBZ1BTQmliM2d1ZEc5d0lDc2dkRzl3VDJabWMyVjBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnVkbUZ6UW05MWJtUnBibWRTWldOMExuZHBaSFJvSUQwZ1ltOTRMbmRwWkhSb08xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGdWRtRnpRbTkxYm1ScGJtZFNaV04wTG1obGFXZG9kQ0E5SUdKdmVDNW9aV2xuYUhRN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlNCcFppQW9aV3hsYldWdWRDQnBibk4wWVc1alpXOW1JRWhVVFV4RFlXNTJZWE5GYkdWdFpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZVzUyWVhOQ2IzVnVaR2x1WjFKbFkzUXViR1ZtZENBOUlHeGxablJQWm1aelpYUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCallXNTJZWE5DYjNWdVpHbHVaMUpsWTNRdWRHOXdJRDBnZEc5d1QyWm1jMlYwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ1ZG1GelFtOTFibVJwYm1kU1pXTjBMbmRwWkhSb0lEMGdaV3hsYldWdWRDNTNhV1IwYUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYm5aaGMwSnZkVzVrYVc1blVtVmpkQzVvWldsbmFIUWdQU0JsYkdWdFpXNTBMbWhsYVdkb2REdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGJuWmhjMEp2ZFc1a2FXNW5VbVZqZEM1c1pXWjBJRDBnYkdWbWRFOW1abk5sZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYm5aaGMwSnZkVzVrYVc1blVtVmpkQzUwYjNBZ1BTQjBiM0JQWm1aelpYUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCallXNTJZWE5DYjNWdVpHbHVaMUpsWTNRdWQybGtkR2dnUFNCd1lYSnpaVWx1ZENobGJHVnRaVzUwTG5OMGVXeGxMbmRwWkhSb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGJuWmhjMEp2ZFc1a2FXNW5VbVZqZEM1b1pXbG5hSFFnUFNCd1lYSnpaVWx1ZENobGJHVnRaVzUwTG5OMGVXeGxMbWhsYVdkb2RDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0JvWVc1a2JHVlViM1ZqYUdWelFtVm5hVzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMEZ5Y21GNWZTQjBiM1ZqYUdWelhHNGdJQ0FnSUNvdlhHNGdJQ0FnYUdGdVpHeGxWRzkxWTJobGMwSmxaMmx1SUNoMGIzVmphR1Z6S1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J6Wld4VWIzVmphQ3dnYVc1a1pYZ3NJR04xY2xSdmRXTm9MQ0IwYjNWamFFbEVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FHRnVaR3hsVkc5MVkyaGxjeUE5SUZ0ZExDQnNiMk5VYjNWamFFbHVkRVJwWTNRZ1BTQjBhR2x6TGw5MGIzVmphR1Z6U1c1MFpXZGxja1JwWTNRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1YjNjZ1BTQnplWE11Ym05M0tDazdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd0xDQnNaVzRnUFNCMGIzVmphR1Z6TG14bGJtZDBhRHNnYVNBOElHeGxianNnYVNBckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVnNWRzkxWTJnZ1BTQjBiM1ZqYUdWelcybGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHOTFZMmhKUkNBOUlITmxiRlJ2ZFdOb0xtZGxkRWxFS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwYm1SbGVDQTlJR3h2WTFSdmRXTm9TVzUwUkdsamRGdDBiM1ZqYUVsRVhUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2x1WkdWNElEMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZFc1MWMyVmtTVzVrWlhnZ1BTQjBhR2x6TGw5blpYUlZibFZ6WldSSmJtUmxlQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDFiblZ6WldSSmJtUmxlQ0E5UFQwZ0xURXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyTXViRzluU1VRb01qTXdNQ3dnZFc1MWMyVmtTVzVrWlhncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MGFXNTFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk5amRYSlViM1ZqYUNBOUlIUm9hWE11WDNSdmRXTm9aWE5iZFc1MWMyVmtTVzVrWlhoZElEMGdjMlZzVkc5MVkyZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZM1Z5Vkc5MVkyZ2dQU0IwYUdsekxsOTBiM1ZqYUdWelczVnVkWE5sWkVsdVpHVjRYU0E5SUc1bGR5QmpZeTVVYjNWamFDaHpaV3hVYjNWamFDNWZjRzlwYm5RdWVDd2djMlZzVkc5MVkyZ3VYM0J2YVc1MExua3NJSE5sYkZSdmRXTm9MbWRsZEVsRUtDa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR04xY2xSdmRXTm9MbDlzWVhOMFRXOWthV1pwWldRZ1BTQnViM2M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTNWeVZHOTFZMmd1WDNObGRGQnlaWFpRYjJsdWRDaHpaV3hVYjNWamFDNWZjSEpsZGxCdmFXNTBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzYjJOVWIzVmphRWx1ZEVScFkzUmJkRzkxWTJoSlJGMGdQU0IxYm5WelpXUkpibVJsZUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1lXNWtiR1ZVYjNWamFHVnpMbkIxYzJnb1kzVnlWRzkxWTJncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2hvWVc1a2JHVlViM1ZqYUdWekxteGxibWQwYUNBK0lEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJkc1ZtbGxkeTVmWTI5dWRtVnlkRlJ2ZFdOb1pYTlhhWFJvVTJOaGJHVW9hR0Z1Wkd4bFZHOTFZMmhsY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RHOTFZMmhGZG1WdWRDQTlJRzVsZHlCall5NUZkbVZ1ZEM1RmRtVnVkRlJ2ZFdOb0tHaGhibVJzWlZSdmRXTm9aWE1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkRzkxWTJoRmRtVnVkQzVmWlhabGJuUkRiMlJsSUQwZ1kyTXVSWFpsYm5RdVJYWmxiblJVYjNWamFDNUNSVWRCVGp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1YyWlc1MFRXRnVZV2RsY2k1a2FYTndZWFJqYUVWMlpXNTBLSFJ2ZFdOb1JYWmxiblFwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ2FHRnVaR3hsVkc5MVkyaGxjMDF2ZG1WY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTBGeWNtRjVmU0IwYjNWamFHVnpYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FHRnVaR3hsVkc5MVkyaGxjMDF2ZG1VZ0tIUnZkV05vWlhNcElIdGNiaUFnSUNBZ0lDQWdiR1YwSUhObGJGUnZkV05vTENCcGJtUmxlQ3dnZEc5MVkyaEpSQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHaGhibVJzWlZSdmRXTm9aWE1nUFNCYlhTd2diRzlqVkc5MVkyaGxjeUE5SUhSb2FYTXVYM1J2ZFdOb1pYTXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdWIzY2dQU0J6ZVhNdWJtOTNLQ2s3WEc0Z0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdMQ0JzWlc0Z1BTQjBiM1ZqYUdWekxteGxibWQwYURzZ2FTQThJR3hsYmpzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaV3hVYjNWamFDQTlJSFJ2ZFdOb1pYTmJhVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBiM1ZqYUVsRUlEMGdjMlZzVkc5MVkyZ3VaMlYwU1VRb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsdVpHVjRJRDBnZEdocGN5NWZkRzkxWTJobGMwbHVkR1ZuWlhKRWFXTjBXM1J2ZFdOb1NVUmRPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVc1a1pYZ2dQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2WTJNdWJHOW5LRndpYVdZZ2RHaGxJR2x1WkdWNElHUnZaWE51SjNRZ1pYaHBjM1FzSUdsMElHbHpJR0Z1SUdWeWNtOXlYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR3h2WTFSdmRXTm9aWE5iYVc1a1pYaGRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkc5alZHOTFZMmhsYzF0cGJtUmxlRjB1WDNObGRGQnZhVzUwS0hObGJGUnZkV05vTGw5d2IybHVkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkc5alZHOTFZMmhsYzF0cGJtUmxlRjB1WDNObGRGQnlaWFpRYjJsdWRDaHpaV3hVYjNWamFDNWZjSEpsZGxCdmFXNTBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzYjJOVWIzVmphR1Z6VzJsdVpHVjRYUzVmYkdGemRFMXZaR2xtYVdWa0lEMGdibTkzTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdoaGJtUnNaVlJ2ZFdOb1pYTXVjSFZ6YUNoc2IyTlViM1ZqYUdWelcybHVaR1Y0WFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLR2hoYm1Sc1pWUnZkV05vWlhNdWJHVnVaM1JvSUQ0Z01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWjJ4V2FXVjNMbDlqYjI1MlpYSjBWRzkxWTJobGMxZHBkR2hUWTJGc1pTaG9ZVzVrYkdWVWIzVmphR1Z6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMGIzVmphRVYyWlc1MElEMGdibVYzSUdOakxrVjJaVzUwTGtWMlpXNTBWRzkxWTJnb2FHRnVaR3hsVkc5MVkyaGxjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBiM1ZqYUVWMlpXNTBMbDlsZG1WdWRFTnZaR1VnUFNCall5NUZkbVZ1ZEM1RmRtVnVkRlJ2ZFdOb0xrMVBWa1ZFTzF4dUlDQWdJQ0FnSUNBZ0lDQWdaWFpsYm5STllXNWhaMlZ5TG1ScGMzQmhkR05vUlhabGJuUW9kRzkxWTJoRmRtVnVkQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCb1lXNWtiR1ZVYjNWamFHVnpSVzVrWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRCY25KaGVYMGdkRzkxWTJobGMxeHVJQ0FnSUNBcUwxeHVJQ0FnSUdoaGJtUnNaVlJ2ZFdOb1pYTkZibVFnS0hSdmRXTm9aWE1wSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJR2hoYm1Sc1pWUnZkV05vWlhNZ1BTQjBhR2x6TG1kbGRGTmxkRTltVkc5MVkyaGxjMFZ1WkU5eVEyRnVZMlZzS0hSdmRXTm9aWE1wTzF4dUlDQWdJQ0FnSUNCcFppQW9hR0Z1Wkd4bFZHOTFZMmhsY3k1c1pXNW5kR2dnUGlBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDluYkZacFpYY3VYMk52Ym5abGNuUlViM1ZqYUdWelYybDBhRk5qWVd4bEtHaGhibVJzWlZSdmRXTm9aWE1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhSdmRXTm9SWFpsYm5RZ1BTQnVaWGNnWTJNdVJYWmxiblF1UlhabGJuUlViM1ZqYUNob1lXNWtiR1ZVYjNWamFHVnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnZkV05vUlhabGJuUXVYMlYyWlc1MFEyOWtaU0E5SUdOakxrVjJaVzUwTGtWMlpXNTBWRzkxWTJndVJVNUVSVVE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxkbVZ1ZEUxaGJtRm5aWEl1WkdsemNHRjBZMmhGZG1WdWRDaDBiM1ZqYUVWMlpXNTBLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGFHbHpMbDl3Y21WVWIzVmphRkJ2YjJ3dWJHVnVaM1JvSUQwZ01EdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQm9ZVzVrYkdWVWIzVmphR1Z6UTJGdVkyVnNYRzRnSUNBZ0lDb2dRSEJoY21GdElIdEJjbkpoZVgwZ2RHOTFZMmhsYzF4dUlDQWdJQ0FxTDF4dUlDQWdJR2hoYm1Sc1pWUnZkV05vWlhORFlXNWpaV3dnS0hSdmRXTm9aWE1wSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJR2hoYm1Sc1pWUnZkV05vWlhNZ1BTQjBhR2x6TG1kbGRGTmxkRTltVkc5MVkyaGxjMFZ1WkU5eVEyRnVZMlZzS0hSdmRXTm9aWE1wTzF4dUlDQWdJQ0FnSUNCcFppQW9hR0Z1Wkd4bFZHOTFZMmhsY3k1c1pXNW5kR2dnUGlBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDluYkZacFpYY3VYMk52Ym5abGNuUlViM1ZqYUdWelYybDBhRk5qWVd4bEtHaGhibVJzWlZSdmRXTm9aWE1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhSdmRXTm9SWFpsYm5RZ1BTQnVaWGNnWTJNdVJYWmxiblF1UlhabGJuUlViM1ZqYUNob1lXNWtiR1ZVYjNWamFHVnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnZkV05vUlhabGJuUXVYMlYyWlc1MFEyOWtaU0E5SUdOakxrVjJaVzUwTGtWMlpXNTBWRzkxWTJndVEwRk9RMFZNVEVWRU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWlhabGJuUk5ZVzVoWjJWeUxtUnBjM0JoZEdOb1JYWmxiblFvZEc5MVkyaEZkbVZ1ZENrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmNISmxWRzkxWTJoUWIyOXNMbXhsYm1kMGFDQTlJREE3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnWjJWMFUyVjBUMlpVYjNWamFHVnpSVzVrVDNKRFlXNWpaV3hjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMEZ5Y21GNWZTQjBiM1ZqYUdWelhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ2UwRnljbUY1ZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJR2RsZEZObGRFOW1WRzkxWTJobGMwVnVaRTl5UTJGdVkyVnNJQ2gwYjNWamFHVnpLU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQnpaV3hVYjNWamFDd2dhVzVrWlhnc0lIUnZkV05vU1VRc0lHaGhibVJzWlZSdmRXTm9aWE1nUFNCYlhTd2diRzlqVkc5MVkyaGxjeUE5SUhSb2FYTXVYM1J2ZFdOb1pYTXNJR3h2WTFSdmRXTm9aWE5KYm5SRWFXTjBJRDBnZEdocGN5NWZkRzkxWTJobGMwbHVkR1ZuWlhKRWFXTjBPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Dd2diR1Z1SUQwZ2RHOTFZMmhsY3k1c1pXNW5kR2c3SUdrOElHeGxianNnYVNBckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVnNWRzkxWTJnZ1BTQjBiM1ZqYUdWelcybGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHOTFZMmhKUkNBOUlITmxiRlJ2ZFdOb0xtZGxkRWxFS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwYm1SbGVDQTlJR3h2WTFSdmRXTm9aWE5KYm5SRWFXTjBXM1J2ZFdOb1NVUmRPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVc1a1pYZ2dQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5ScGJuVmxPeUFnTHk5all5NXNiMmNvWENKcFppQjBhR1VnYVc1a1pYZ2daRzlsYzI0bmRDQmxlR2x6ZEN3Z2FYUWdhWE1nWVc0Z1pYSnliM0pjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYkc5alZHOTFZMmhsYzF0cGJtUmxlRjBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2IyTlViM1ZqYUdWelcybHVaR1Y0WFM1ZmMyVjBVRzlwYm5Rb2MyVnNWRzkxWTJndVgzQnZhVzUwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2IyTlViM1ZqYUdWelcybHVaR1Y0WFM1ZmMyVjBVSEpsZGxCdmFXNTBLSE5sYkZSdmRXTm9MbDl3Y21WMlVHOXBiblFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdoaGJtUnNaVlJ2ZFdOb1pYTXVjSFZ6YUNoc2IyTlViM1ZqYUdWelcybHVaR1Y0WFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmY21WdGIzWmxWWE5sWkVsdVpHVjRRbWwwS0dsdVpHVjRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWld4bGRHVWdiRzlqVkc5MVkyaGxjMGx1ZEVScFkzUmJkRzkxWTJoSlJGMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHaGhibVJzWlZSdmRXTm9aWE03WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnWjJWMFVISmxWRzkxWTJoY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFSdmRXTm9mU0IwYjNWamFGeHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UxUnZkV05vZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJR2RsZEZCeVpWUnZkV05vSUNoMGIzVmphQ2tnZTF4dUlDQWdJQ0FnSUNCc1pYUWdjSEpsVkc5MVkyZ2dQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQnNaWFFnYkc5alVISmxWRzkxWTJoUWIyOXNJRDBnZEdocGN5NWZjSEpsVkc5MVkyaFFiMjlzTzF4dUlDQWdJQ0FnSUNCc1pYUWdhV1FnUFNCMGIzVmphQzVuWlhSSlJDZ3BPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ2JHOWpVSEpsVkc5MVkyaFFiMjlzTG14bGJtZDBhQ0F0SURFN0lHa2dQajBnTURzZ2FTMHRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYkc5alVISmxWRzkxWTJoUWIyOXNXMmxkTG1kbGRFbEVLQ2tnUFQwOUlHbGtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0hKbFZHOTFZMmdnUFNCc2IyTlFjbVZVYjNWamFGQnZiMnhiYVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tDRndjbVZVYjNWamFDbGNiaUFnSUNBZ0lDQWdJQ0FnSUhCeVpWUnZkV05vSUQwZ2RHOTFZMmc3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ3Y21WVWIzVmphRHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0J6WlhSUWNtVlViM1ZqYUZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Vkc5MVkyaDlJSFJ2ZFdOb1hHNGdJQ0FnSUNvdlhHNGdJQ0FnYzJWMFVISmxWRzkxWTJnZ0tIUnZkV05vS1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JtYVc1a0lEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JzYjJOUWNtVlViM1ZqYUZCdmIyd2dQU0IwYUdsekxsOXdjbVZVYjNWamFGQnZiMnc3WEc0Z0lDQWdJQ0FnSUd4bGRDQnBaQ0E5SUhSdmRXTm9MbWRsZEVsRUtDazdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNCc2IyTlFjbVZVYjNWamFGQnZiMnd1YkdWdVozUm9JQzBnTVRzZ2FTQStQU0F3T3lCcExTMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hzYjJOUWNtVlViM1ZqYUZCdmIyeGJhVjB1WjJWMFNVUW9LU0E5UFQwZ2FXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzYjJOUWNtVlViM1ZqYUZCdmIyeGJhVjBnUFNCMGIzVmphRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVc1a0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb0lXWnBibVFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoc2IyTlFjbVZVYjNWamFGQnZiMnd1YkdWdVozUm9JRHc5SURVd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiRzlqVUhKbFZHOTFZMmhRYjI5c0xuQjFjMmdvZEc5MVkyZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2IyTlFjbVZVYjNWamFGQnZiMnhiZEdocGN5NWZjSEpsVkc5MVkyaFFiMjlzVUc5cGJuUmxjbDBnUFNCMGIzVmphRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXdjbVZVYjNWamFGQnZiMnhRYjJsdWRHVnlJRDBnS0hSb2FYTXVYM0J5WlZSdmRXTm9VRzl2YkZCdmFXNTBaWElnS3lBeEtTQWxJRFV3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnWjJWMFZHOTFZMmhDZVZoWlhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUhSNFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUhSNVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0V1pXTXlmU0J3YjNOY2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0VWIzVmphSDFjYmlBZ0lDQWdLaTljYmlBZ0lDQm5aWFJVYjNWamFFSjVXRmtnS0hSNExDQjBlU3dnY0c5ektTQjdYRzRnSUNBZ0lDQWdJR3hsZENCc2IyTlFjbVZVYjNWamFDQTlJSFJvYVhNdVgzQnlaVlJ2ZFdOb1VHOXBiblE3WEc0Z0lDQWdJQ0FnSUd4bGRDQnNiMk5oZEdsdmJpQTlJSFJvYVhNdVgyZHNWbWxsZHk1amIyNTJaWEowVkc5TWIyTmhkR2x2YmtsdVZtbGxkeWgwZUN3Z2RIa3NJSEJ2Y3lrN1hHNGdJQ0FnSUNBZ0lHeGxkQ0IwYjNWamFDQTlJRzVsZHlCall5NVViM1ZqYUNoc2IyTmhkR2x2Ymk1NExDQnNiMk5oZEdsdmJpNTVMQ0F3S1R0Y2JpQWdJQ0FnSUNBZ2RHOTFZMmd1WDNObGRGQnlaWFpRYjJsdWRDaHNiMk5RY21WVWIzVmphQzU0TENCc2IyTlFjbVZVYjNWamFDNTVLVHRjYmlBZ0lDQWdJQ0FnYkc5alVISmxWRzkxWTJndWVDQTlJR3h2WTJGMGFXOXVMbmc3WEc0Z0lDQWdJQ0FnSUd4dlkxQnlaVlJ2ZFdOb0xua2dQU0JzYjJOaGRHbHZiaTU1TzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEc5MVkyZzdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdaMlYwVFc5MWMyVkZkbVZ1ZEZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Vm1Wak1uMGdiRzlqWVhScGIyNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UxWmxZeko5SUhCdmMxeHVJQ0FnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCbGRtVnVkRlI1Y0dWY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCN1JYWmxiblF1UlhabGJuUk5iM1Z6WlgxY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JuWlhSTmIzVnpaVVYyWlc1MElDaHNiMk5oZEdsdmJpd2djRzl6TENCbGRtVnVkRlI1Y0dVcElIdGNiaUFnSUNBZ0lDQWdiR1YwSUd4dlkxQnlaVTF2ZFhObElEMGdkR2hwY3k1ZmNISmxkazF2ZFhObFVHOXBiblE3WEc0Z0lDQWdJQ0FnSUd4bGRDQnRiM1Z6WlVWMlpXNTBJRDBnYm1WM0lHTmpMa1YyWlc1MExrVjJaVzUwVFc5MWMyVW9aWFpsYm5SVWVYQmxLVHRjYmlBZ0lDQWdJQ0FnYlc5MWMyVkZkbVZ1ZEM1ZmMyVjBVSEpsZGtOMWNuTnZjaWhzYjJOUWNtVk5iM1Z6WlM1NExDQnNiMk5RY21WTmIzVnpaUzU1S1R0Y2JpQWdJQ0FnSUNBZ2JHOWpVSEpsVFc5MWMyVXVlQ0E5SUd4dlkyRjBhVzl1TG5nN1hHNGdJQ0FnSUNBZ0lHeHZZMUJ5WlUxdmRYTmxMbmtnUFNCc2IyTmhkR2x2Ymk1NU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5bmJGWnBaWGN1WDJOdmJuWmxjblJOYjNWelpWUnZURzlqWVhScGIyNUpibFpwWlhjb2JHOWpVSEpsVFc5MWMyVXNJSEJ2Y3lrN1hHNGdJQ0FnSUNBZ0lHMXZkWE5sUlhabGJuUXVjMlYwVEc5allYUnBiMjRvYkc5alVISmxUVzkxYzJVdWVDd2diRzlqVUhKbFRXOTFjMlV1ZVNrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdGIzVnpaVVYyWlc1ME8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lHZGxkRkJ2YVc1MFFubEZkbVZ1ZEZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Vkc5MVkyaDlJR1YyWlc1MFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0V1pXTXlmU0J3YjNOY2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0V1pXTXlmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHZGxkRkJ2YVc1MFFubEZkbVZ1ZENBb1pYWmxiblFzSUhCdmN5a2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1pYWmxiblF1Y0dGblpWZ2dJVDBnYm5Wc2JDa2dJQzh2Ym05MElHRjJZV3hoWW14bElHbHVJRHc5SUVsRk9GeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSHQ0T2lCbGRtVnVkQzV3WVdkbFdDd2dlVG9nWlhabGJuUXVjR0ZuWlZsOU8xeHVYRzRnSUNBZ0lDQWdJSEJ2Y3k1c1pXWjBJQzA5SUdSdlkzVnRaVzUwTG1KdlpIa3VjMk55YjJ4c1RHVm1kRHRjYmlBZ0lDQWdJQ0FnY0c5ekxuUnZjQ0F0UFNCa2IyTjFiV1Z1ZEM1aWIyUjVMbk5qY205c2JGUnZjRHRjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZTNnNklHVjJaVzUwTG1Oc2FXVnVkRmdzSUhrNklHVjJaVzUwTG1Oc2FXVnVkRmw5TzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUdkbGRGUnZkV05vWlhOQ2VVVjJaVzUwWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRVYjNWamFIMGdaWFpsYm5SY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFabFl6SjlJSEJ2YzF4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUh0QmNuSmhlWDFjYmlBZ0lDQWdLaTljYmlBZ0lDQm5aWFJVYjNWamFHVnpRbmxGZG1WdWRDQW9aWFpsYm5Rc0lIQnZjeWtnZTF4dUlDQWdJQ0FnSUNCc1pYUWdkRzkxWTJoQmNuSWdQU0JiWFN3Z2JHOWpWbWxsZHlBOUlIUm9hWE11WDJkc1ZtbGxkenRjYmlBZ0lDQWdJQ0FnYkdWMElIUnZkV05vWDJWMlpXNTBMQ0IwYjNWamFDd2djSEpsVEc5allYUnBiMjQ3WEc0Z0lDQWdJQ0FnSUd4bGRDQnNiMk5RY21WVWIzVmphQ0E5SUhSb2FYTXVYM0J5WlZSdmRXTm9VRzlwYm5RN1hHNWNiaUFnSUNBZ0lDQWdiR1YwSUd4bGJtZDBhQ0E5SUdWMlpXNTBMbU5vWVc1blpXUlViM1ZqYUdWekxteGxibWQwYUR0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQnNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkRzkxWTJoZlpYWmxiblFnUFNCbGRtVnVkQzVqYUdGdVoyVmtWRzkxWTJobGMxdHBYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYjNWamFGOWxkbVZ1ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JzYjJOaGRHbHZianRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MzbHpMa0pTVDFkVFJWSmZWRmxRUlY5R1NWSkZSazlZSUQwOVBTQnplWE11WW5KdmQzTmxjbFI1Y0dVcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3h2WTJGMGFXOXVJRDBnYkc5alZtbGxkeTVqYjI1MlpYSjBWRzlNYjJOaGRHbHZia2x1Vm1sbGR5aDBiM1ZqYUY5bGRtVnVkQzV3WVdkbFdDd2dkRzkxWTJoZlpYWmxiblF1Y0dGblpWa3NJSEJ2Y3l3Z1gzWmxZeklwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkc5allYUnBiMjRnUFNCc2IyTldhV1YzTG1OdmJuWmxjblJVYjB4dlkyRjBhVzl1U1c1V2FXVjNLSFJ2ZFdOb1gyVjJaVzUwTG1Oc2FXVnVkRmdzSUhSdmRXTm9YMlYyWlc1MExtTnNhV1Z1ZEZrc0lIQnZjeXdnWDNabFl6SXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGIzVmphRjlsZG1WdWRDNXBaR1Z1ZEdsbWFXVnlJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHOTFZMmdnUFNCdVpYY2dZMk11Vkc5MVkyZ29iRzlqWVhScGIyNHVlQ3dnYkc5allYUnBiMjR1ZVN3Z2RHOTFZMmhmWlhabGJuUXVhV1JsYm5ScFptbGxjaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZkWE5sSUZSdmRXTm9JRkJ2YjJ4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEpsVEc5allYUnBiMjRnUFNCMGFHbHpMbWRsZEZCeVpWUnZkV05vS0hSdmRXTm9LUzVuWlhSTWIyTmhkR2x2YmlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYjNWamFDNWZjMlYwVUhKbGRsQnZhVzUwS0hCeVpVeHZZMkYwYVc5dUxuZ3NJSEJ5WlV4dlkyRjBhVzl1TG5rcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxkRkJ5WlZSdmRXTm9LSFJ2ZFdOb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYjNWamFDQTlJRzVsZHlCall5NVViM1ZqYUNoc2IyTmhkR2x2Ymk1NExDQnNiMk5oZEdsdmJpNTVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHOTFZMmd1WDNObGRGQnlaWFpRYjJsdWRDaHNiMk5RY21WVWIzVmphQzU0TENCc2IyTlFjbVZVYjNWamFDNTVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkc5alVISmxWRzkxWTJndWVDQTlJR3h2WTJGMGFXOXVMbmc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkc5alVISmxWRzkxWTJndWVTQTlJR3h2WTJGMGFXOXVMbms3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEc5MVkyaEJjbkl1Y0hWemFDaDBiM1ZqYUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSdmRXTm9RWEp5TzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUhKbFoybHpkR1Z5VTNsemRHVnRSWFpsYm5SY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTBoVVRVeEZiR1Z0Wlc1MGZTQmxiR1Z0Wlc1MFhHNGdJQ0FnSUNvdlhHNGdJQ0FnY21WbmFYTjBaWEpUZVhOMFpXMUZkbVZ1ZENBb1pXeGxiV1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQnBaaWgwYUdsekxsOXBjMUpsWjJsemRHVnlSWFpsYm5RcElISmxkSFZ5Ymp0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TGw5bmJGWnBaWGNnUFNCall5NTJhV1YzTzF4dUlDQWdJQ0FnSUNCc1pYUWdjMlZzWmxCdmFXNTBaWElnUFNCMGFHbHpPMXh1SUNBZ0lDQWdJQ0JzWlhRZ1kyRnVkbUZ6UW05MWJtUnBibWRTWldOMElEMGdkR2hwY3k1ZlkyRnVkbUZ6UW05MWJtUnBibWRTWldOME8xeHVYRzRnSUNBZ0lDQWdJSGRwYm1SdmR5NWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZHlaWE5wZW1VbkxDQjBhR2x6TGw5MWNHUmhkR1ZEWVc1MllYTkNiM1Z1WkdsdVoxSmxZM1F1WW1sdVpDaDBhR2x6S1NrN1hHNWNiaUFnSUNBZ0lDQWdiR1YwSUhCeWIyaHBZbWwwYVc5dUlEMGdjM2x6TG1selRXOWlhV3hsTzF4dUlDQWdJQ0FnSUNCc1pYUWdjM1Z3Y0c5eWRFMXZkWE5sSUQwZ0tDZHRiM1Z6WlNjZ2FXNGdjM2x6TG1OaGNHRmlhV3hwZEdsbGN5azdYRzRnSUNBZ0lDQWdJR3hsZENCemRYQndiM0owVkc5MVkyaGxjeUE5SUNnbmRHOTFZMmhsY3ljZ2FXNGdjM2x6TG1OaGNHRmlhV3hwZEdsbGN5azdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tITjFjSEJ2Y25STmIzVnpaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeTlJUVVOTFhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlBZ0xTQkJkQ0IwYUdVZ2MyRnRaU0IwYVcxbElIUnZJSFJ5YVdkblpYSWdkR2hsSUc5dWRHOTFZMmdnWlhabGJuUWdZVzVrSUc5dWJXOTFjMlVnWlhabGJuUmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklDQXRJRlJvWlNCbWRXNWpkR2x2YmlCM2FXeHNJR1Y0WldOMWRHVWdNaUIwYVcxbGMxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk5VWFHVWdhMjV2ZDI0Z1luSnZkM05sY2pwY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUNCc2FXVmlhV0Z2WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUFnYldsMWFWeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z0lGZEZRMGhCVkZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGd2NtOW9hV0pwZEdsdmJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRwYm1SdmR5NWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZHRiM1Z6WldSdmQyNG5MQ0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sYkdaUWIybHVkR1Z5TGw5dGIzVnpaVkJ5WlhOelpXUWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNJR1poYkhObEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRwYm1SdmR5NWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZHRiM1Z6WlhWd0p5d2dablZ1WTNScGIyNGdLR1YyWlc1MEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hjMlZzWmxCdmFXNTBaWEl1WDIxdmRYTmxVSEpsYzNObFpDbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGJHWlFiMmx1ZEdWeUxsOXRiM1Z6WlZCeVpYTnpaV1FnUFNCbVlXeHpaVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYkc5allYUnBiMjRnUFNCelpXeG1VRzlwYm5SbGNpNW5aWFJRYjJsdWRFSjVSWFpsYm5Rb1pYWmxiblFzSUdOaGJuWmhjMEp2ZFc1a2FXNW5VbVZqZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFkyTXVjbVZqZENoallXNTJZWE5DYjNWdVpHbHVaMUpsWTNRdWJHVm1kQ3dnWTJGdWRtRnpRbTkxYm1ScGJtZFNaV04wTG5SdmNDd2dZMkZ1ZG1GelFtOTFibVJwYm1kU1pXTjBMbmRwWkhSb0xDQmpZVzUyWVhOQ2IzVnVaR2x1WjFKbFkzUXVhR1ZwWjJoMEtTNWpiMjUwWVdsdWN5aHNiMk5oZEdsdmJpa3BlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlZzWmxCdmFXNTBaWEl1YUdGdVpHeGxWRzkxWTJobGMwVnVaQ2hiYzJWc1psQnZhVzUwWlhJdVoyVjBWRzkxWTJoQ2VWaFpLR3h2WTJGMGFXOXVMbmdzSUd4dlkyRjBhVzl1TG5rc0lHTmhiblpoYzBKdmRXNWthVzVuVW1WamRDbGRLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHMXZkWE5sUlhabGJuUWdQU0J6Wld4bVVHOXBiblJsY2k1blpYUk5iM1Z6WlVWMlpXNTBLR3h2WTJGMGFXOXVMQ0JqWVc1MllYTkNiM1Z1WkdsdVoxSmxZM1FzSUdOakxrVjJaVzUwTGtWMlpXNTBUVzkxYzJVdVZWQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiVzkxYzJWRmRtVnVkQzV6WlhSQ2RYUjBiMjRvWlhabGJuUXVZblYwZEc5dUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVjJaVzUwVFdGdVlXZGxjaTVrYVhOd1lYUmphRVYyWlc1MEtHMXZkWE5sUlhabGJuUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTd2dabUZzYzJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCeVpXZHBjM1JsY2lCallXNTJZWE1nYlc5MWMyVWdaWFpsYm5SY2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCRmRtVnVkRTF2ZFhObElEMGdZMk11UlhabGJuUXVSWFpsYm5STmIzVnpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JmYlc5MWMyVkZkbVZ1ZEhOUGJrVnNaVzFsYm5RZ1BTQmJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJWEJ5YjJocFltbDBhVzl1SUNZbUlGdGNJbTF2ZFhObFpHOTNibHdpTENCRmRtVnVkRTF2ZFhObExrUlBWMDRzSUdaMWJtTjBhVzl1SUNobGRtVnVkQ3dnYlc5MWMyVkZkbVZ1ZEN3Z2JHOWpZWFJwYjI0c0lHTmhiblpoYzBKdmRXNWthVzVuVW1WamRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpXeG1VRzlwYm5SbGNpNWZiVzkxYzJWUWNtVnpjMlZrSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVnNabEJ2YVc1MFpYSXVhR0Z1Wkd4bFZHOTFZMmhsYzBKbFoybHVLRnR6Wld4bVVHOXBiblJsY2k1blpYUlViM1ZqYUVKNVdGa29iRzlqWVhScGIyNHVlQ3dnYkc5allYUnBiMjR1ZVN3Z1kyRnVkbUZ6UW05MWJtUnBibWRTWldOMEtWMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJHVnRaVzUwTG1adlkzVnpLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlYwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lYQnliMmhwWW1sMGFXOXVJQ1ltSUZ0Y0ltMXZkWE5sZFhCY0lpd2dSWFpsYm5STmIzVnpaUzVWVUN3Z1puVnVZM1JwYjI0Z0tHVjJaVzUwTENCdGIzVnpaVVYyWlc1MExDQnNiMk5oZEdsdmJpd2dZMkZ1ZG1GelFtOTFibVJwYm1kU1pXTjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxiR1pRYjJsdWRHVnlMbDl0YjNWelpWQnlaWE56WldRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlZzWmxCdmFXNTBaWEl1YUdGdVpHeGxWRzkxWTJobGMwVnVaQ2hiYzJWc1psQnZhVzUwWlhJdVoyVjBWRzkxWTJoQ2VWaFpLR3h2WTJGMGFXOXVMbmdzSUd4dlkyRjBhVzl1TG5rc0lHTmhiblpoYzBKdmRXNWthVzVuVW1WamRDbGRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBaGNISnZhR2xpYVhScGIyNGdKaVlnVzF3aWJXOTFjMlZ0YjNabFhDSXNJRVYyWlc1MFRXOTFjMlV1VFU5V1JTd2dablZ1WTNScGIyNGdLR1YyWlc1MExDQnRiM1Z6WlVWMlpXNTBMQ0JzYjJOaGRHbHZiaXdnWTJGdWRtRnpRbTkxYm1ScGJtZFNaV04wS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sYkdaUWIybHVkR1Z5TG1oaGJtUnNaVlJ2ZFdOb1pYTk5iM1psS0Z0elpXeG1VRzlwYm5SbGNpNW5aWFJVYjNWamFFSjVXRmtvYkc5allYUnBiMjR1ZUN3Z2JHOWpZWFJwYjI0dWVTd2dZMkZ1ZG1GelFtOTFibVJwYm1kU1pXTjBLVjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhObGJHWlFiMmx1ZEdWeUxsOXRiM1Z6WlZCeVpYTnpaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxdmRYTmxSWFpsYm5RdWMyVjBRblYwZEc5dUtHNTFiR3dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVjBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVzF3aWJXOTFjMlYzYUdWbGJGd2lMQ0JGZG1WdWRFMXZkWE5sTGxORFVrOU1UQ3dnWm5WdVkzUnBiMjRnS0dWMlpXNTBMQ0J0YjNWelpVVjJaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzF2ZFhObFJYWmxiblF1YzJWMFUyTnliMnhzUkdGMFlTZ3dMQ0JsZG1WdWRDNTNhR1ZsYkVSbGJIUmhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQm1hWEpsWm05NElHWnBlQ0FxTDF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ0Y0lrUlBUVTF2ZFhObFUyTnliMnhzWENJc0lFVjJaVzUwVFc5MWMyVXVVME5TVDB4TUxDQm1kVzVqZEdsdmJpQW9aWFpsYm5Rc0lHMXZkWE5sUlhabGJuUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXOTFjMlZGZG1WdWRDNXpaWFJUWTNKdmJHeEVZWFJoS0RBc0lHVjJaVzUwTG1SbGRHRnBiQ0FxSUMweE1qQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFkWEc0Z0lDQWdJQ0FnSUNBZ0lDQmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQmZiVzkxYzJWRmRtVnVkSE5QYmtWc1pXMWxiblF1YkdWdVozUm9PeUFySzJrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWlc1MGNua2dQU0JmYlc5MWMyVkZkbVZ1ZEhOUGJrVnNaVzFsYm5SYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dWdWRISjVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J1WVcxbElEMGdaVzUwY25sYk1GMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQjBlWEJsSUQwZ1pXNTBjbmxiTVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCb1lXNWtiR1Z5SUQwZ1pXNTBjbmxiTWwwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzWlcxbGJuUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpaHVZVzFsTENCbWRXNWpkR2x2YmlBb1pYWmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnNiMk5oZEdsdmJpQTlJSE5sYkdaUWIybHVkR1Z5TG1kbGRGQnZhVzUwUW5sRmRtVnVkQ2hsZG1WdWRDd2dZMkZ1ZG1GelFtOTFibVJwYm1kU1pXTjBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdGIzVnpaVVYyWlc1MElEMGdjMlZzWmxCdmFXNTBaWEl1WjJWMFRXOTFjMlZGZG1WdWRDaHNiMk5oZEdsdmJpd2dZMkZ1ZG1GelFtOTFibVJwYm1kU1pXTjBMQ0IwZVhCbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMXZkWE5sUlhabGJuUXVjMlYwUW5WMGRHOXVLR1YyWlc1MExtSjFkSFJ2YmlrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHaGhibVJzWlhJb1pYWmxiblFzSUcxdmRYTmxSWFpsYm5Rc0lHeHZZMkYwYVc5dUxDQmpZVzUyWVhOQ2IzVnVaR2x1WjFKbFkzUXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsZG1WdWRFMWhibUZuWlhJdVpHbHpjR0YwWTJoRmRtVnVkQ2h0YjNWelpVVjJaVzUwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWMlpXNTBMbk4wYjNCUWNtOXdZV2RoZEdsdmJpZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaWFpsYm5RdWNISmxkbVZ1ZEVSbFptRjFiSFFvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3dnWm1Gc2MyVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUlDaDNhVzVrYjNjdWJtRjJhV2RoZEc5eUxtMXpVRzlwYm5SbGNrVnVZV0pzWldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmZjRzlwYm5SbGNrVjJaVzUwYzAxaGNDQTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JjSWsxVFVHOXBiblJsY2tSdmQyNWNJaUFnSUNBZ09pQnpaV3htVUc5cGJuUmxjaTVvWVc1a2JHVlViM1ZqYUdWelFtVm5hVzRzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWENKTlUxQnZhVzUwWlhKTmIzWmxYQ0lnSUNBZ0lEb2djMlZzWmxCdmFXNTBaWEl1YUdGdVpHeGxWRzkxWTJobGMwMXZkbVVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWENKTlUxQnZhVzUwWlhKVmNGd2lJQ0FnSUNBZ0lEb2djMlZzWmxCdmFXNTBaWEl1YUdGdVpHeGxWRzkxWTJobGMwVnVaQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JjSWsxVFVHOXBiblJsY2tOaGJtTmxiRndpSUNBZ09pQnpaV3htVUc5cGJuUmxjaTVvWVc1a2JHVlViM1ZqYUdWelEyRnVZMlZzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ1pYWmxiblJPWVcxbElHbHVJRjl3YjJsdWRHVnlSWFpsYm5SelRXRndLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIUnZkV05vUlhabGJuUWdQU0JmY0c5cGJuUmxja1YyWlc1MGMwMWhjRnRsZG1WdWRFNWhiV1ZkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc1pXMWxiblF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWhsZG1WdWRFNWhiV1VzSUdaMWJtTjBhVzl1SUNobGRtVnVkQ2w3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JrYjJOMWJXVnVkRVZzWlcxbGJuUWdQU0JrYjJOMWJXVnVkQzVrYjJOMWJXVnVkRVZzWlcxbGJuUTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGJuWmhjMEp2ZFc1a2FXNW5VbVZqZEM1aFpHcDFjM1JsWkV4bFpuUWdQU0JqWVc1MllYTkNiM1Z1WkdsdVoxSmxZM1F1YkdWbWRDQXRJR1J2WTNWdFpXNTBSV3hsYldWdWRDNXpZM0p2Ykd4TVpXWjBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallXNTJZWE5DYjNWdVpHbHVaMUpsWTNRdVlXUnFkWE4wWldSVWIzQWdQU0JqWVc1MllYTkNiM1Z1WkdsdVoxSmxZM1F1ZEc5d0lDMGdaRzlqZFcxbGJuUkZiR1Z0Wlc1MExuTmpjbTlzYkZSdmNEdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGIzVmphRVYyWlc1MExtTmhiR3dvYzJWc1psQnZhVzUwWlhJc0lGdHpaV3htVUc5cGJuUmxjaTVuWlhSVWIzVmphRUo1V0Zrb1pYWmxiblF1WTJ4cFpXNTBXQ3dnWlhabGJuUXVZMnhwWlc1MFdTd2dZMkZ1ZG1GelFtOTFibVJwYm1kU1pXTjBLVjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxkbVZ1ZEM1emRHOXdVSEp2Y0dGbllYUnBiMjRvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxDQm1ZV3h6WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQXZMM0psWjJsemRHVnlJSFJ2ZFdOb0lHVjJaVzUwWEc0Z0lDQWdJQ0FnSUdsbUlDaHpkWEJ3YjNKMFZHOTFZMmhsY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElGOTBiM1ZqYUVWMlpXNTBjMDFoY0NBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmNJblJ2ZFdOb2MzUmhjblJjSWpvZ1puVnVZM1JwYjI0Z0tIUnZkV05vWlhOVWIwaGhibVJzWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Wld4bVVHOXBiblJsY2k1b1lXNWtiR1ZVYjNWamFHVnpRbVZuYVc0b2RHOTFZMmhsYzFSdlNHRnVaR3hsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3hsYldWdWRDNW1iMk4xY3lncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYQ0owYjNWamFHMXZkbVZjSWpvZ1puVnVZM1JwYjI0Z0tIUnZkV05vWlhOVWIwaGhibVJzWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Wld4bVVHOXBiblJsY2k1b1lXNWtiR1ZVYjNWamFHVnpUVzkyWlNoMGIzVmphR1Z6Vkc5SVlXNWtiR1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hDSjBiM1ZqYUdWdVpGd2lPaUJtZFc1amRHbHZiaUFvZEc5MVkyaGxjMVJ2U0dGdVpHeGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxiR1pRYjJsdWRHVnlMbWhoYm1Sc1pWUnZkV05vWlhORmJtUW9kRzkxWTJobGMxUnZTR0Z1Wkd4bEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRndpZEc5MVkyaGpZVzVqWld4Y0lqb2dablZ1WTNScGIyNGdLSFJ2ZFdOb1pYTlViMGhoYm1Sc1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpXeG1VRzlwYm5SbGNpNW9ZVzVrYkdWVWIzVmphR1Z6UTJGdVkyVnNLSFJ2ZFdOb1pYTlViMGhoYm1Sc1pTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSEpsWjJsemRHVnlWRzkxWTJoRmRtVnVkQ0E5SUdaMWJtTjBhVzl1SUNobGRtVnVkRTVoYldVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYUdGdVpHeGxjaUE5SUY5MGIzVmphRVYyWlc1MGMwMWhjRnRsZG1WdWRFNWhiV1ZkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc1pXMWxiblF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWhsZG1WdWRFNWhiV1VzSUNobWRXNWpkR2x2YmlobGRtVnVkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdWMlpXNTBMbU5vWVc1blpXUlViM1ZqYUdWektTQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCaWIyUjVJRDBnWkc5amRXMWxiblF1WW05a2VUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallXNTJZWE5DYjNWdVpHbHVaMUpsWTNRdVlXUnFkWE4wWldSTVpXWjBJRDBnWTJGdWRtRnpRbTkxYm1ScGJtZFNaV04wTG14bFpuUWdMU0FvWW05a2VTNXpZM0p2Ykd4TVpXWjBJSHg4SURBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVc1MllYTkNiM1Z1WkdsdVoxSmxZM1F1WVdScWRYTjBaV1JVYjNBZ1BTQmpZVzUyWVhOQ2IzVnVaR2x1WjFKbFkzUXVkRzl3SUMwZ0tHSnZaSGt1YzJOeWIyeHNWRzl3SUh4OElEQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1lXNWtiR1Z5S0hObGJHWlFiMmx1ZEdWeUxtZGxkRlJ2ZFdOb1pYTkNlVVYyWlc1MEtHVjJaVzUwTENCallXNTJZWE5DYjNWdVpHbHVaMUpsWTNRcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlhabGJuUXVjM1J2Y0ZCeWIzQmhaMkYwYVc5dUtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWMlpXNTBMbkJ5WlhabGJuUkVaV1poZFd4MEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2tzSUdaaGJITmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLR3hsZENCbGRtVnVkRTVoYldVZ2FXNGdYM1J2ZFdOb1JYWmxiblJ6VFdGd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZuYVhOMFpYSlViM1ZqYUVWMlpXNTBLR1YyWlc1MFRtRnRaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbDl5WldkcGMzUmxja3RsZVdKdllYSmtSWFpsYm5Rb0tUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxsOXBjMUpsWjJsemRHVnlSWFpsYm5RZ1BTQjBjblZsTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JmY21WbmFYTjBaWEpMWlhsaWIyRnlaRVYyWlc1MElDZ3BJSHQ5TEZ4dVhHNGdJQ0FnWDNKbFoybHpkR1Z5UVdOalpXeGxjbTl0WlhSbGNrVjJaVzUwSUNncElIdDlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0IxY0dSaGRHVmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ1pIUmNiaUFnSUNBZ0tpOWNiaUFnSUNCMWNHUmhkR1VnS0dSMEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDloWTJObGJFTjFjbFJwYldVZ1BpQjBhR2x6TGw5aFkyTmxiRWx1ZEdWeWRtRnNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5aFkyTmxiRU4xY2xScGJXVWdMVDBnZEdocGN5NWZZV05qWld4SmJuUmxjblpoYkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1YyWlc1MFRXRnVZV2RsY2k1a2FYTndZWFJqYUVWMlpXNTBLRzVsZHlCall5NUZkbVZ1ZEM1RmRtVnVkRUZqWTJWc1pYSmhkR2x2YmloMGFHbHpMbDloWTJObGJHVnlZWFJwYjI0cEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYUdsekxsOWhZMk5sYkVOMWNsUnBiV1VnS3owZ1pIUTdYRzRnSUNBZ2ZWeHVmVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCZlkyTXVhVzV3ZFhSTllXNWhaMlZ5SUQwZ2FXNXdkWFJOWVc1aFoyVnlPMXh1SWwxOSJdfQ==