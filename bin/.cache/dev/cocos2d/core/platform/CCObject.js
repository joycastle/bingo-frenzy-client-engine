(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/CCObject.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var js = require('./js');
        var CCClass = require('./CCClass');
        var Destroyed = 1 << 0;
        var RealDestroyed = 1 << 1;
        var ToDestroy = 1 << 2;
        var DontSave = 1 << 3;
        var EditorOnly = 1 << 4;
        var Dirty = 1 << 5;
        var DontDestroy = 1 << 6;
        var Destroying = 1 << 7;
        var Deactivating = 1 << 8;
        var LockedInEditor = 1 << 9;
        var HideInHierarchy = 1 << 10;
        var IsOnEnableCalled = 1 << 11;
        var IsEditorOnEnableCalled = 1 << 12;
        var IsPreloadStarted = 1 << 13;
        var IsOnLoadCalled = 1 << 14;
        var IsOnLoadStarted = 1 << 15;
        var IsStartCalled = 1 << 16;
        var IsRotationLocked = 1 << 17;
        var IsScaleLocked = 1 << 18;
        var IsAnchorLocked = 1 << 19;
        var IsSizeLocked = 1 << 20;
        var IsPositionLocked = 1 << 21;
        var PersistentMask = ~(ToDestroy | Dirty | Destroying | DontDestroy | Deactivating | IsPreloadStarted | IsOnLoadStarted | IsOnLoadCalled | IsStartCalled | IsOnEnableCalled | IsEditorOnEnableCalled | IsRotationLocked | IsScaleLocked | IsAnchorLocked | IsSizeLocked | IsPositionLocked);
        function CCObject() {
            this._name = '';
            this._objFlags = 0;
        }
        CCClass.fastDefine('cc.Object', CCObject, {
            _name: '',
            _objFlags: 0
        });
        js.value(CCObject, 'Flags', {
            Destroyed: Destroyed,
            DontSave: DontSave,
            EditorOnly: EditorOnly,
            Dirty: Dirty,
            DontDestroy: DontDestroy,
            PersistentMask: PersistentMask,
            Destroying: Destroying,
            Deactivating: Deactivating,
            LockedInEditor: LockedInEditor,
            HideInHierarchy: HideInHierarchy,
            IsPreloadStarted: IsPreloadStarted,
            IsOnLoadStarted: IsOnLoadStarted,
            IsOnLoadCalled: IsOnLoadCalled,
            IsOnEnableCalled: IsOnEnableCalled,
            IsStartCalled: IsStartCalled,
            IsEditorOnEnableCalled: IsEditorOnEnableCalled,
            IsPositionLocked: IsPositionLocked,
            IsRotationLocked: IsRotationLocked,
            IsScaleLocked: IsScaleLocked,
            IsAnchorLocked: IsAnchorLocked,
            IsSizeLocked: IsSizeLocked
        });
        var objectsToDestroy = [];
        function deferredDestroy() {
            var deleteCount = objectsToDestroy.length;
            for (var i = 0; i < deleteCount; ++i) {
                var obj = objectsToDestroy[i];
                if (!(obj._objFlags & Destroyed)) {
                    obj._destroyImmediate();
                }
            }
            if (deleteCount === objectsToDestroy.length) {
                objectsToDestroy.length = 0;
            } else {
                objectsToDestroy.splice(0, deleteCount);
            }
            if (CC_EDITOR) {
                deferredDestroyTimer = null;
            }
        }
        js.value(CCObject, '_deferredDestroy', deferredDestroy);
        if (CC_EDITOR) {
            js.value(CCObject, '_clearDeferredDestroyTimer', function () {
                if (deferredDestroyTimer !== null) {
                    clearImmediate(deferredDestroyTimer);
                    deferredDestroyTimer = null;
                }
            });
        }
        var prototype = CCObject.prototype;
        js.getset(prototype, 'name', function () {
            return this._name;
        }, function (value) {
            this._name = value;
        }, true);
        js.get(prototype, 'isValid', function () {
            return !(this._objFlags & Destroyed);
        }, true);
        if (CC_EDITOR || CC_TEST) {
            js.get(prototype, 'isRealValid', function () {
                return !(this._objFlags & RealDestroyed);
            });
        }
        var deferredDestroyTimer = null;
        prototype.destroy = function () {
            if (this._objFlags & Destroyed) {
                cc.warnID(5000);
                return false;
            }
            if (this._objFlags & ToDestroy) {
                return false;
            }
            this._objFlags |= ToDestroy;
            objectsToDestroy.push(this);
            if (CC_EDITOR && deferredDestroyTimer === null && cc.engine && !cc.engine._isUpdating) {
                deferredDestroyTimer = setImmediate(deferredDestroy);
            }
            return true;
        };
        if (CC_EDITOR || CC_TEST) {
            prototype.realDestroyInEditor = function () {
                if (!(this._objFlags & Destroyed)) {
                    cc.warnID(5001);
                    return;
                }
                if (this._objFlags & RealDestroyed) {
                    cc.warnID(5000);
                    return;
                }
                this._destruct();
                this._objFlags |= RealDestroyed;
            };
        }
        function compileDestruct(obj, ctor) {
            var shouldSkipId = obj instanceof cc._BaseNode || obj instanceof cc.Component;
            var idToSkip = shouldSkipId ? '_id' : null;
            var key, propsToReset = {};
            for (key in obj) {
                if (obj.hasOwnProperty(key)) {
                    if (key === idToSkip) {
                        continue;
                    }
                    switch (_typeof(obj[key])) {
                    case 'string':
                        propsToReset[key] = '';
                        break;
                    case 'object':
                    case 'function':
                        propsToReset[key] = null;
                        break;
                    }
                }
            }
            if (cc.Class._isCCClass(ctor)) {
                var attrs = cc.Class.Attr.getClassAttrs(ctor);
                var propList = ctor.__props__;
                for (var i = 0; i < propList.length; i++) {
                    key = propList[i];
                    var attrKey = key + cc.Class.Attr.DELIMETER + 'default';
                    if (attrKey in attrs) {
                        if (shouldSkipId && key === '_id') {
                            continue;
                        }
                        switch (_typeof(attrs[attrKey])) {
                        case 'string':
                            propsToReset[key] = '';
                            break;
                        case 'object':
                        case 'function':
                            propsToReset[key] = null;
                            break;
                        case 'undefined':
                            propsToReset[key] = undefined;
                            break;
                        }
                    }
                }
            }
            if (CC_SUPPORT_JIT) {
                var func = '';
                for (key in propsToReset) {
                    var statement;
                    if (CCClass.IDENTIFIER_RE.test(key)) {
                        statement = 'o.' + key + '=';
                    } else {
                        statement = 'o[' + CCClass.escapeForJS(key) + ']=';
                    }
                    var val = propsToReset[key];
                    if (val === '') {
                        val = '""';
                    }
                    func += statement + val + ';\n';
                }
                return Function('o', func);
            } else {
                return function (o) {
                    for (var key in propsToReset) {
                        o[key] = propsToReset[key];
                    }
                };
            }
        }
        prototype._destruct = function () {
            var ctor = this.constructor;
            var destruct = ctor.__destruct__;
            if (!destruct) {
                destruct = compileDestruct(this, ctor);
                js.value(ctor, '__destruct__', destruct, true);
            }
            destruct(this);
        };
        prototype._onPreDestroy = null;
        prototype._destroyImmediate = function () {
            if (this._objFlags & Destroyed) {
                cc.errorID(5000);
                return;
            }
            if (this._onPreDestroy) {
                this._onPreDestroy();
            }
            if ((CC_TEST ? Function('return !CC_EDITOR')() : !CC_EDITOR) || cc.engine._isPlaying) {
                this._destruct();
            }
            this._objFlags |= Destroyed;
        };
        if (CC_EDITOR) {
            prototype._serialize = null;
        }
        prototype._deserialize = null;
        cc.isValid = function (value, strictMode) {
            if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
                return !!value && !(value._objFlags & (strictMode ? Destroyed | ToDestroy : Destroyed));
            } else {
                return typeof value !== 'undefined';
            }
        };
        if (CC_EDITOR || CC_TEST) {
            js.value(CCObject, '_willDestroy', function (obj) {
                return !(obj._objFlags & Destroyed) && (obj._objFlags & ToDestroy) > 0;
            });
            js.value(CCObject, '_cancelDestroy', function (obj) {
                obj._objFlags &= ~ToDestroy;
                js.array.fastRemove(objectsToDestroy, obj);
            });
        }
        cc.Object = module.exports = CCObject;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,