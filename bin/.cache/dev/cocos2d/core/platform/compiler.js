(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/compiler.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        function deepFlatten(strList, array) {
            for (var i = 0; i < array.length; i++) {
                var item = array[i];
                if (Array.isArray(item)) {
                    deepFlatten(strList, item);
                } else {
                    strList.push(item);
                }
            }
        }
        function flattenCodeArray(array) {
            var separator = CC_DEV ? '\n' : '';
            var strList = [];
            deepFlatten(strList, array);
            return strList.join(separator);
        }
        module.exports = { flattenCodeArray: flattenCodeArray };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,