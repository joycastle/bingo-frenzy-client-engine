(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/attribute.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var js = require('./js');
        var isPlainEmptyObj = require('./utils').isPlainEmptyObj_DEV;
        var DELIMETER = '$_$';
        function createAttrsSingle(owner, superAttrs) {
            var attrs = superAttrs ? Object.create(superAttrs) : {};
            js.value(owner, '__attrs__', attrs);
            return attrs;
        }
        function createAttrs(subclass) {
            if (typeof subclass !== 'function') {
                var instance = subclass;
                return createAttrsSingle(instance, getClassAttrs(instance.constructor));
            }
            var superClass;
            var chains = cc.Class.getInheritanceChain(subclass);
            for (var i = chains.length - 1; i >= 0; i--) {
                var cls = chains[i];
                var attrs = cls.hasOwnProperty('__attrs__') && cls.__attrs__;
                if (!attrs) {
                    superClass = chains[i + 1];
                    createAttrsSingle(cls, superClass && superClass.__attrs__);
                }
            }
            superClass = chains[0];
            createAttrsSingle(subclass, superClass && superClass.__attrs__);
            return subclass.__attrs__;
        }
        function attr(ctor, propName, newAttrs) {
            var attrs = getClassAttrs(ctor);
            if (!CC_DEV || typeof newAttrs === 'undefined') {
                var prefix = propName + DELIMETER;
                var ret = {};
                for (var key in attrs) {
                    if (key.startsWith(prefix)) {
                        ret[key.slice(prefix.length)] = attrs[key];
                    }
                }
                return ret;
            } else if (CC_DEV && (typeof newAttrs === 'undefined' ? 'undefined' : _typeof(newAttrs)) === 'object') {
                cc.warn('`cc.Class.attr(obj, prop, { key: value });` is deprecated, use `cc.Class.Attr.setClassAttr(obj, prop, \'key\', value);` instead please.');
                for (var _key in newAttrs) {
                    attrs[propName + DELIMETER + _key] = newAttrs[_key];
                }
            }
        }
        function getClassAttrs(ctor) {
            return ctor.hasOwnProperty('__attrs__') && ctor.__attrs__ || createAttrs(ctor);
        }
        function setClassAttr(ctor, propName, key, value) {
            getClassAttrs(ctor)[propName + DELIMETER + key] = value;
        }
        function PrimitiveType(name, def) {
            this.name = name;
            this.default = def;
        }
        PrimitiveType.prototype.toString = function () {
            return this.name;
        };
        cc.Integer = new PrimitiveType('Integer', 0);
        cc.Float = new PrimitiveType('Float', 0);
        if (CC_EDITOR) {
            js.get(cc, 'Number', function () {
                cc.warnID(3603);
                return cc.Float;
            });
        }
        cc.Boolean = new PrimitiveType('Boolean', false);
        cc.String = new PrimitiveType('String', '');
        function getTypeChecker(type, attrName) {
            return function (constructor, mainPropName) {
                var propInfo = '"' + js.getClassName(constructor) + '.' + mainPropName + '"';
                var mainPropAttrs = attr(constructor, mainPropName);
                if (!mainPropAttrs.saveUrlAsAsset) {
                    var mainPropAttrsType = mainPropAttrs.type;
                    if (mainPropAttrsType === cc.Integer || mainPropAttrsType === cc.Float) {
                        mainPropAttrsType = 'Number';
                    } else if (mainPropAttrsType === cc.String || mainPropAttrsType === cc.Boolean) {
                        mainPropAttrsType = '' + mainPropAttrsType;
                    }
                    if (mainPropAttrsType !== type) {
                        cc.warnID(3604, propInfo);
                        return;
                    }
                }
                if (!mainPropAttrs.hasOwnProperty('default')) {
                    return;
                }
                var defaultVal = mainPropAttrs.default;
                if (typeof defaultVal === 'undefined') {
                    return;
                }
                var isContainer = Array.isArray(defaultVal) || isPlainEmptyObj(defaultVal);
                if (isContainer) {
                    return;
                }
                var defaultType = typeof defaultVal === 'undefined' ? 'undefined' : _typeof(defaultVal);
                var type_lowerCase = type.toLowerCase();
                if (defaultType === type_lowerCase) {
                    if (!mainPropAttrs.saveUrlAsAsset) {
                        if (type_lowerCase === 'object') {
                            if (defaultVal && !(defaultVal instanceof mainPropAttrs.ctor)) {
                                cc.warnID(3605, propInfo, js.getClassName(mainPropAttrs.ctor));
                            } else {
                                return;
                            }
                        } else if (type !== 'Number') {
                            cc.warnID(3606, attrName, propInfo, type);
                        }
                    }
                } else if (defaultType !== 'function') {
                    if (type === cc.String && defaultVal == null) {
                        if (!js.isChildClassOf(mainPropAttrs.ctor, cc.RawAsset)) {
                            cc.warnID(3607, propInfo);
                        }
                    } else {
                        cc.warnID(3611, attrName, propInfo, defaultType);
                    }
                } else {
                    return;
                }
                delete mainPropAttrs.type;
            };
        }
        function getObjTypeChecker(typeCtor) {
            return function (classCtor, mainPropName) {
                getTypeChecker('Object', 'type')(classCtor, mainPropName);
                var defaultDef = getClassAttrs(classCtor)[mainPropName + DELIMETER + 'default'];
                var defaultVal = require('./CCClass').getDefault(defaultDef);
                if (!Array.isArray(defaultVal) && js.isChildClassOf(typeCtor, cc.ValueType)) {
                    var typename = js.getClassName(typeCtor);
                    var info = cc.js.formatStr('No need to specify the "type" of "%s.%s" because %s is a child class of ValueType.', js.getClassName(classCtor), mainPropName, typename);
                    if (defaultDef) {
                        cc.log(info);
                    } else {
                        cc.warnID(3612, info, typename, js.getClassName(classCtor), mainPropName, typename);
                    }
                }
            };
        }
        module.exports = {
            PrimitiveType: PrimitiveType,
            attr: attr,
            getClassAttrs: getClassAttrs,
            setClassAttr: setClassAttr,
            DELIMETER: DELIMETER,
            getTypeChecker_ET: (CC_EDITOR && !Editor.isBuilder || CC_TEST) && getTypeChecker,
            getObjTypeChecker_ET: (CC_EDITOR && !Editor.isBuilder || CC_TEST) && getObjTypeChecker,
            ScriptUuid: {}
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,