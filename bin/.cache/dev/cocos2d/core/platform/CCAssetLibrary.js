(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/CCAssetLibrary.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Asset = require('../assets/CCAsset');
        var callInNextTick = require('./utils').callInNextTick;
        var Loader = require('../load-pipeline/CCLoader');
        var AssetTable = require('../load-pipeline/asset-table');
        var PackDownloader = require('../load-pipeline/pack-downloader');
        var AutoReleaseUtils = require('../load-pipeline/auto-release-utils');
        var decodeUuid = require('../utils/decode-uuid');
        var MD5Pipe = require('../load-pipeline/md5-pipe');
        var SubPackPipe = require('../load-pipeline/subpackage-pipe');
        var js = require('./js');
        var _libraryBase = '';
        var _rawAssetsBase = '';
        var _uuidToRawAsset = js.createMap(true);
        function isScene(asset) {
            return asset && (asset.constructor === cc.SceneAsset || asset instanceof cc.Scene);
        }
        function RawAssetEntry(url, type) {
            this.url = url;
            this.type = type;
        }
        var AssetLibrary = {
            loadAsset: function loadAsset(uuid, callback, options) {
                if (typeof uuid !== 'string') {
                    return callInNextTick(callback, new Error('[AssetLibrary] uuid must be string'), null);
                }
                var item = {
                    uuid: uuid,
                    type: 'uuid'
                };
                if (options && options.existingAsset) {
                    item.existingAsset = options.existingAsset;
                }
                Loader.load(item, function (error, asset) {
                    if (error || !asset) {
                        var errorInfo = typeof error === 'string' ? error : error ? error.message || error.errorMessage || JSON.stringify(error) : 'Unknown error';
                        error = new Error('[AssetLibrary] loading JSON or dependencies failed:' + errorInfo);
                    } else {
                        if (asset.constructor === cc.SceneAsset) {
                            if (CC_EDITOR && !asset.scene) {
                                Editor.error('Sorry, the scene data of "%s" is corrupted!', uuid);
                            } else {
                                var key = cc.loader._getReferenceKey(uuid);
                                asset.scene.dependAssets = AutoReleaseUtils.getDependsRecursively(key);
                            }
                        }
                        if (CC_EDITOR || isScene(asset)) {
                            var id = cc.loader._getReferenceKey(uuid);
                            Loader.removeItem(id);
                        }
                    }
                    if (callback) {
                        callback(error, asset);
                    }
                });
            },
            getLibUrlNoExt: function getLibUrlNoExt(uuid, inRawAssetsDir) {
                if (CC_BUILD) {
                    uuid = decodeUuid(uuid);
                }
                var base = CC_BUILD && inRawAssetsDir ? _rawAssetsBase + 'assets/' : _libraryBase;
                return base + uuid.slice(0, 2) + '/' + uuid;
            },
            _queryAssetInfoInEditor: function _queryAssetInfoInEditor(uuid, callback) {
                if (CC_EDITOR) {
                    Editor.Ipc.sendToMain('scene:query-asset-info-by-uuid', uuid, function (err, info) {
                        if (info) {
                            Editor.Utils.UuidCache.cache(info.url, uuid);
                            var ctor = Editor.assets[info.type];
                            if (ctor) {
                                var isRawAsset = !js.isChildClassOf(ctor, Asset);
                                callback(null, info.url, isRawAsset, ctor);
                            } else {
                                callback(new Error('Can not find asset type ' + info.type));
                            }
                        } else {
                            var error = new Error('Can not get asset url by uuid "' + uuid + '", the asset may be deleted.');
                            error.errorCode = 'db.NOTFOUND';
                            callback(error);
                        }
                    }, -1);
                }
            },
            _getAssetInfoInRuntime: function _getAssetInfoInRuntime(uuid, result) {
                result = result || {
                    url: null,
                    raw: false
                };
                var info = _uuidToRawAsset[uuid];
                if (info && !js.isChildClassOf(info.type, cc.Asset)) {
                    result.url = _rawAssetsBase + info.url;
                    result.raw = true;
                } else {
                    result.url = this.getLibUrlNoExt(uuid) + '.json';
                    result.raw = false;
                }
                return result;
            },
            _uuidInSettings: function _uuidInSettings(uuid) {
                return uuid in _uuidToRawAsset;
            },
            queryAssetInfo: function queryAssetInfo(uuid, callback) {
                if (CC_EDITOR && !CC_TEST) {
                    this._queryAssetInfoInEditor(uuid, callback);
                } else {
                    var info = this._getAssetInfoInRuntime(uuid);
                    callback(null, info.url, info.raw);
                }
            },
            parseUuidInEditor: function parseUuidInEditor(url) {
                if (CC_EDITOR) {
                    var uuid = '';
                    var isImported = url.startsWith(_libraryBase);
                    if (isImported) {
                        var dir = cc.path.dirname(url);
                        var dirBasename = cc.path.basename(dir);
                        var isAssetUrl = dirBasename.length === 2;
                        if (isAssetUrl) {
                            uuid = cc.path.basename(url);
                            var index = uuid.indexOf('.');
                            if (index !== -1) {
                                uuid = uuid.slice(0, index);
                            }
                        } else {
                            uuid = dirBasename;
                        }
                    }
                    return uuid;
                }
            },
            loadJson: function loadJson(json, callback) {
                var randomUuid = '' + (new Date().getTime() + Math.random());
                var item = {
                    uuid: randomUuid,
                    type: 'uuid',
                    content: json,
                    skips: [
                        Loader.assetLoader.id,
                        Loader.downloader.id
                    ]
                };
                Loader.load(item, function (error, asset) {
                    if (error) {
                        error = new Error('[AssetLibrary] loading JSON or dependencies failed: ' + error.message);
                    } else {
                        if (asset.constructor === cc.SceneAsset) {
                            var key = cc.loader._getReferenceKey(randomUuid);
                            asset.scene.dependAssets = AutoReleaseUtils.getDependsRecursively(key);
                        }
                        if (CC_EDITOR || isScene(asset)) {
                            var id = cc.loader._getReferenceKey(randomUuid);
                            Loader.removeItem(id);
                        }
                    }
                    asset._uuid = '';
                    if (callback) {
                        callback(error, asset);
                    }
                });
            },
            getAssetByUuid: function getAssetByUuid(uuid) {
                return AssetLibrary._uuidToAsset[uuid] || null;
            },
            init: function init(options) {
                if (CC_EDITOR && _libraryBase) {
                    cc.errorID(6402);
                    return;
                }
                var libraryPath = options.libraryPath;
                libraryPath = libraryPath.replace(/\\/g, '/');
                _libraryBase = cc.path.stripSep(libraryPath) + '/';
                _rawAssetsBase = options.rawAssetsBase;
                if (options.subpackages) {
                    var subPackPipe = new SubPackPipe(options.subpackages);
                    cc.loader.insertPipeAfter(cc.loader.assetLoader, subPackPipe);
                    cc.loader.subPackPipe = subPackPipe;
                }
                var md5AssetsMap = options.md5AssetsMap;
                if (md5AssetsMap && md5AssetsMap.import) {
                    var i = 0, uuid = 0;
                    var md5ImportMap = js.createMap(true);
                    var md5Entries = md5AssetsMap.import;
                    for (i = 0; i < md5Entries.length; i += 2) {
                        uuid = decodeUuid(md5Entries[i]);
                        md5ImportMap[uuid] = md5Entries[i + 1];
                    }
                    var md5RawAssetsMap = js.createMap(true);
                    md5Entries = md5AssetsMap['raw-assets'];
                    for (i = 0; i < md5Entries.length; i += 2) {
                        uuid = decodeUuid(md5Entries[i]);
                        md5RawAssetsMap[uuid] = md5Entries[i + 1];
                    }
                    var md5Pipe = new MD5Pipe(md5ImportMap, md5RawAssetsMap, _libraryBase);
                    cc.loader.insertPipeAfter(cc.loader.assetLoader, md5Pipe);
                    cc.loader.md5Pipe = md5Pipe;
                }
                var assetTables = Loader._assetTables;
                for (var mount in assetTables) {
                    assetTables[mount].reset();
                }
                var rawAssets = options.rawAssets;
                if (rawAssets) {
                    for (var mountPoint in rawAssets) {
                        var assets = rawAssets[mountPoint];
                        for (var uuid in assets) {
                            var info = assets[uuid];
                            var url = info[0];
                            var typeId = info[1];
                            var type = cc.js._getClassById(typeId);
                            if (!type) {
                                cc.error('Cannot get', typeId);
                                continue;
                            }
                            _uuidToRawAsset[uuid] = new RawAssetEntry(mountPoint + '/' + url, type);
                            var ext = cc.path.extname(url);
                            if (ext) {
                                url = url.slice(0, -ext.length);
                            }
                            var isSubAsset = info[2] === 1;
                            if (!assetTables[mountPoint]) {
                                assetTables[mountPoint] = new AssetTable();
                            }
                            assetTables[mountPoint].add(url, uuid, type, !isSubAsset);
                        }
                    }
                }
                if (options.packedAssets) {
                    PackDownloader.initPacks(options.packedAssets);
                }
                cc.url._init(options.mountPaths && options.mountPaths.assets || _rawAssetsBase + 'assets');
            }
        };
        AssetLibrary._uuidToAsset = {};
        var _builtins = {
            effect: {},
            material: {}
        };
        var _builtinDeps = {};
        function loadBuiltins(name, type, cb) {
            var dirname = name + 's';
            var builtin = _builtins[name] = {};
            var internalMountPath = 'internal';
            if (CC_PREVIEW && CC_JSB) {
                internalMountPath = 'temp/internal';
            }
            cc.loader.loadResDir(dirname, type, internalMountPath, function () {
            }, function (err, assets) {
                if (err) {
                    cc.error(err);
                } else {
                    for (var i = 0; i < assets.length; i++) {
                        var asset = assets[i];
                        var deps = cc.loader.getDependsRecursively(asset);
                        deps.forEach(function (uuid) {
                            return _builtinDeps[uuid] = true;
                        });
                        builtin['' + asset.name] = asset;
                    }
                }
                cb();
            });
        }
        AssetLibrary._loadBuiltins = function (cb) {
            if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
                return cb && cb();
            }
            loadBuiltins('effect', cc.EffectAsset, function () {
                loadBuiltins('material', cc.Material, cb);
            });
        };
        AssetLibrary.getBuiltin = function (type, name) {
            return _builtins[type][name];
        };
        AssetLibrary.getBuiltins = function (type) {
            if (!type)
                return _builtins;
            return _builtins[type];
        };
        AssetLibrary.resetBuiltins = function () {
            _builtins = {
                effect: {},
                material: {}
            };
            _builtinDeps = {};
        };
        AssetLibrary.getBuiltinDeps = function () {
            return _builtinDeps;
        };
        module.exports = cc.AssetLibrary = AssetLibrary;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,