(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/CCVisibleRect.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        cc.visibleRect = {
            topLeft: cc.v2(0, 0),
            topRight: cc.v2(0, 0),
            top: cc.v2(0, 0),
            bottomLeft: cc.v2(0, 0),
            bottomRight: cc.v2(0, 0),
            bottom: cc.v2(0, 0),
            center: cc.v2(0, 0),
            left: cc.v2(0, 0),
            right: cc.v2(0, 0),
            width: 0,
            height: 0,
            init: function init(visibleRect) {
                var w = this.width = visibleRect.width;
                var h = this.height = visibleRect.height;
                var l = visibleRect.x, b = visibleRect.y, t = b + h, r = l + w;
                this.topLeft.x = l;
                this.topLeft.y = t;
                this.topRight.x = r;
                this.topRight.y = t;
                this.top.x = l + w / 2;
                this.top.y = t;
                this.bottomLeft.x = l;
                this.bottomLeft.y = b;
                this.bottomRight.x = r;
                this.bottomRight.y = b;
                this.bottom.x = l + w / 2;
                this.bottom.y = b;
                this.center.x = l + w / 2;
                this.center.y = b + h / 2;
                this.left.x = l;
                this.left.y = b + h / 2;
                this.right.x = r;
                this.right.y = b + h / 2;
            }
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,