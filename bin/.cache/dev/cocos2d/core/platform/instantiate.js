(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/instantiate.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var CCObject = require('./CCObject');
        var CCValueType = require('../value-types/value-type');
        var Destroyed = CCObject.Flags.Destroyed;
        var PersistentMask = CCObject.Flags.PersistentMask;
        var _isDomNode = require('./utils').isDomNode;
        var js = require('./js');
        function instantiate(original, internal_force) {
            if (!internal_force) {
                if ((typeof original === 'undefined' ? 'undefined' : _typeof(original)) !== 'object' || Array.isArray(original)) {
                    if (CC_DEV) {
                        cc.errorID(6900);
                    }
                    return null;
                }
                if (!original) {
                    if (CC_DEV) {
                        cc.errorID(6901);
                    }
                    return null;
                }
                if (!cc.isValid(original)) {
                    if (CC_DEV) {
                        cc.errorID(6902);
                    }
                    return null;
                }
                if (CC_DEV && original instanceof cc.Component) {
                    cc.warn('Should not instantiate a single cc.Component directly, you must instantiate the entire node.');
                }
            }
            var clone;
            if (original instanceof CCObject) {
                if (original._instantiate) {
                    cc.game._isCloning = true;
                    clone = original._instantiate();
                    cc.game._isCloning = false;
                    return clone;
                } else if (original instanceof cc.Asset) {
                    if (CC_DEV) {
                        cc.errorID(6903);
                    }
                    return null;
                }
            }
            cc.game._isCloning = true;
            clone = doInstantiate(original);
            cc.game._isCloning = false;
            return clone;
        }
        var objsToClearTmpVar = [];
        function doInstantiate(obj, parent) {
            if (Array.isArray(obj)) {
                if (CC_DEV) {
                    cc.errorID(6904);
                }
                return null;
            }
            if (_isDomNode && _isDomNode(obj)) {
                if (CC_DEV) {
                    cc.errorID(6905);
                }
                return null;
            }
            var clone;
            if (obj._iN$t) {
                clone = obj._iN$t;
            } else if (obj.constructor) {
                var klass = obj.constructor;
                clone = new klass();
            } else {
                clone = Object.create(null);
            }
            enumerateObject(obj, clone, parent);
            for (var i = 0, len = objsToClearTmpVar.length; i < len; ++i) {
                objsToClearTmpVar[i]._iN$t = null;
            }
            objsToClearTmpVar.length = 0;
            return clone;
        }
        function enumerateCCClass(klass, obj, clone, parent) {
            var props = klass.__values__;
            for (var p = 0; p < props.length; p++) {
                var key = props[p];
                var value = obj[key];
                if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value) {
                    var initValue = clone[key];
                    if (initValue instanceof CCValueType && initValue.constructor === value.constructor) {
                        initValue.set(value);
                    } else {
                        clone[key] = value._iN$t || instantiateObj(value, parent);
                    }
                } else {
                    clone[key] = value;
                }
            }
        }
        function enumerateObject(obj, clone, parent) {
            js.value(obj, '_iN$t', clone, true);
            objsToClearTmpVar.push(obj);
            var klass = obj.constructor;
            if (cc.Class._isCCClass(klass)) {
                enumerateCCClass(klass, obj, clone, parent);
            } else {
                for (var key in obj) {
                    if (!obj.hasOwnProperty(key) || key.charCodeAt(0) === 95 && key.charCodeAt(1) === 95 && key !== '__type__') {
                        continue;
                    }
                    var value = obj[key];
                    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value) {
                        if (value === clone) {
                            continue;
                        }
                        clone[key] = value._iN$t || instantiateObj(value, parent);
                    } else {
                        clone[key] = value;
                    }
                }
            }
            if (obj instanceof CCObject) {
                clone._objFlags &= PersistentMask;
            }
        }
        function instantiateObj(obj, parent) {
            if (obj instanceof CCValueType) {
                return obj.clone();
            }
            if (obj instanceof cc.Asset) {
                return obj;
            }
            var clone;
            if (ArrayBuffer.isView(obj)) {
                var len = obj.length;
                clone = new obj.constructor(len);
                obj._iN$t = clone;
                objsToClearTmpVar.push(obj);
                for (var i = 0; i < len; ++i) {
                    clone[i] = obj[i];
                }
                return clone;
            }
            if (Array.isArray(obj)) {
                var _len = obj.length;
                clone = new Array(_len);
                js.value(obj, '_iN$t', clone, true);
                objsToClearTmpVar.push(obj);
                for (var _i = 0; _i < _len; ++_i) {
                    var value = obj[_i];
                    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value) {
                        clone[_i] = value._iN$t || instantiateObj(value, parent);
                    } else {
                        clone[_i] = value;
                    }
                }
                return clone;
            } else if (obj._objFlags & Destroyed) {
                return null;
            }
            var ctor = obj.constructor;
            if (cc.Class._isCCClass(ctor)) {
                if (parent) {
                    if (parent instanceof cc.Component) {
                        if (obj instanceof cc._BaseNode || obj instanceof cc.Component) {
                            return obj;
                        }
                    } else if (parent instanceof cc._BaseNode) {
                        if (obj instanceof cc._BaseNode) {
                            if (!obj.isChildOf(parent)) {
                                return obj;
                            }
                        } else if (obj instanceof cc.Component) {
                            if (!obj.node.isChildOf(parent)) {
                                return obj;
                            }
                        }
                    }
                }
                clone = new ctor();
            } else if (ctor === Object) {
                clone = {};
            } else if (!ctor) {
                clone = Object.create(null);
            } else {
                return obj;
            }
            enumerateObject(obj, clone, parent);
            return clone;
        }
        instantiate._clone = doInstantiate;
        cc.instantiate = instantiate;
        module.exports = instantiate;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,