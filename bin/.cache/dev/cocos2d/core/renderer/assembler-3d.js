(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/assembler-3d.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _vertexFormat = require('./webgl/vertex-format');
        var vec3 = cc.vmath.vec3;
        var vec3_temps = [];
        for (var i = 0; i < 4; i++) {
            vec3_temps.push(vec3.create());
        }
        var Assembler3D = {
            floatsPerVert: 6,
            uvOffset: 3,
            colorOffset: 5,
            getBuffer: function getBuffer(renderer) {
                return renderer._meshBuffer3D;
            },
            getVfmt: function getVfmt() {
                return _vertexFormat.vfmt3D;
            },
            updateWorldVerts: function updateWorldVerts(comp) {
                var matrix = comp.node._worldMatrix;
                var local = this._local;
                var world = this._renderData.vDatas[0];
                vec3.set(vec3_temps[0], local[0], local[1], 0);
                vec3.set(vec3_temps[1], local[2], local[1], 0);
                vec3.set(vec3_temps[2], local[0], local[3], 0);
                vec3.set(vec3_temps[3], local[2], local[3], 0);
                var floatsPerVert = this.floatsPerVert;
                for (var _i = 0; _i < 4; _i++) {
                    var vertex = vec3_temps[_i];
                    vec3.transformMat4(vertex, vertex, matrix);
                    var dstOffset = floatsPerVert * _i;
                    world[dstOffset] = vertex.x;
                    world[dstOffset + 1] = vertex.y;
                    world[dstOffset + 2] = vertex.z;
                }
            }
        };
        cc.Assembler3D = Assembler3D;
        exports.default = Assembler3D;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,