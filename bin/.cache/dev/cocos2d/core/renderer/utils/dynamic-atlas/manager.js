(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/utils/dynamic-atlas/manager.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Atlas = require('./atlas');
        var _atlases = [];
        var _atlasIndex = -1;
        var _maxAtlasCount = 5;
        var _textureSize = 2048;
        var _minFrameSize = 8;
        var _maxFrameSize = 512;
        var _textureBleeding = true;
        var _debugNode = null;
        function newAtlas() {
            var atlas = _atlases[++_atlasIndex];
            if (!atlas) {
                atlas = new Atlas(_textureSize, _textureSize);
                _atlases.push(atlas);
            }
            return atlas;
        }
        function beforeSceneLoad() {
            dynamicAtlasManager.reset();
        }
        var _enabled = false;
        var dynamicAtlasManager = {
            Atlas: Atlas,
            get enabled() {
                return _enabled;
            },
            set enabled(value) {
                if (_enabled === value)
                    return;
                if (value) {
                    this.reset();
                    cc.director.on(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, beforeSceneLoad);
                } else {
                    cc.director.off(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, beforeSceneLoad);
                }
                _enabled = value;
            },
            get maxAtlasCount() {
                return _maxAtlasCount;
            },
            set maxAtlasCount(value) {
                _maxAtlasCount = value;
            },
            get textureBleeding() {
                return _textureBleeding;
            },
            set textureBleeding(enable) {
                _textureBleeding = enable;
            },
            get textureSize() {
                return _textureSize;
            },
            set textureSize(value) {
                _textureSize = value;
            },
            get maxFrameSize() {
                return _maxFrameSize;
            },
            set maxFrameSize(value) {
                _maxFrameSize = value;
            },
            get minFrameSize() {
                return _minFrameSize;
            },
            set minFrameSize(value) {
                _minFrameSize = value;
            },
            insertSpriteFrame: function insertSpriteFrame(spriteFrame) {
                if (CC_EDITOR)
                    return null;
                if (!_enabled || _atlasIndex === _maxAtlasCount || !spriteFrame || spriteFrame._original)
                    return null;
                if (!spriteFrame._texture.packable)
                    return null;
                var atlas = _atlases[_atlasIndex];
                if (!atlas) {
                    atlas = newAtlas();
                }
                var frame = atlas.insertSpriteFrame(spriteFrame);
                if (!frame && _atlasIndex !== _maxAtlasCount) {
                    atlas = newAtlas();
                    return atlas.insertSpriteFrame(spriteFrame);
                }
                return frame;
            },
            reset: function reset() {
                for (var i = 0, l = _atlases.length; i < l; i++) {
                    _atlases[i].destroy();
                }
                _atlases.length = 0;
                _atlasIndex = -1;
            },
            deleteAtlasTexture: function deleteAtlasTexture(spriteFrame) {
                if (!spriteFrame._original)
                    return;
                var texture = spriteFrame._original._texture;
                if (texture) {
                    for (var i = 0, l = _atlases.length; i < l; i++) {
                        _atlases[i].deleteInnerTexture(texture);
                    }
                }
            },
            showDebug: CC_DEV && function (show) {
                if (show) {
                    if (!_debugNode || !_debugNode.isValid) {
                        var width = cc.visibleRect.width;
                        var height = cc.visibleRect.height;
                        _debugNode = new cc.Node('DYNAMIC_ATLAS_DEBUG_NODE');
                        _debugNode.width = width;
                        _debugNode.height = height;
                        _debugNode.x = width / 2;
                        _debugNode.y = height / 2;
                        _debugNode.zIndex = cc.macro.MAX_ZINDEX;
                        _debugNode.parent = cc.director.getScene();
                        _debugNode.groupIndex = cc.Node.BuiltinGroupIndex.DEBUG;
                        cc.Camera._setupDebugCamera();
                        var scroll = _debugNode.addComponent(cc.ScrollView);
                        var content = new cc.Node('CONTENT');
                        var layout = content.addComponent(cc.Layout);
                        layout.type = cc.Layout.Type.VERTICAL;
                        layout.resizeMode = cc.Layout.ResizeMode.CONTAINER;
                        content.parent = _debugNode;
                        content.width = _textureSize;
                        content.anchorY = 1;
                        content.x = _textureSize;
                        scroll.content = content;
                        for (var i = 0; i <= _atlasIndex; i++) {
                            var node = new cc.Node('ATLAS');
                            var texture = _atlases[i]._texture;
                            var spriteFrame = new cc.SpriteFrame();
                            spriteFrame.setTexture(_atlases[i]._texture);
                            var sprite = node.addComponent(cc.Sprite);
                            sprite.spriteFrame = spriteFrame;
                            node.parent = content;
                        }
                    }
                } else {
                    if (_debugNode) {
                        _debugNode.parent = null;
                        _debugNode = null;
                    }
                }
            },
            update: function update() {
                if (!this.enabled)
                    return;
                for (var i = 0; i <= _atlasIndex; i++) {
                    _atlases[i].update();
                }
            }
        };
        module.exports = cc.dynamicAtlasManager = dynamicAtlasManager;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,