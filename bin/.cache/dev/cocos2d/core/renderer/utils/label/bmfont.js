(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/utils/label/bmfont.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _assembler2d = require('../../assembler-2d');
        var _assembler2d2 = _interopRequireDefault(_assembler2d);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var textUtils = require('../../../utils/text-utils');
        var macro = require('../../../platform/CCMacro');
        var Label = require('../../../components/CCLabel');
        var Overflow = Label.Overflow;
        var shareLabelInfo = require('../utils').shareLabelInfo;
        var LetterInfo = function LetterInfo() {
            this.char = '';
            this.valid = true;
            this.x = 0;
            this.y = 0;
            this.line = 0;
            this.hash = '';
        };
        var _tmpRect = cc.rect();
        var _comp = null;
        var _horizontalKernings = [];
        var _lettersInfo = [];
        var _linesWidth = [];
        var _linesOffsetX = [];
        var _fntConfig = null;
        var _numberOfLines = 0;
        var _textDesiredHeight = 0;
        var _letterOffsetY = 0;
        var _tailoredTopY = 0;
        var _tailoredBottomY = 0;
        var _bmfontScale = 1;
        var _lineBreakWithoutSpaces = false;
        var _spriteFrame = null;
        var _lineSpacing = 0;
        var _contentSize = cc.size();
        var _string = '';
        var _fontSize = 0;
        var _originFontSize = 0;
        var _hAlign = 0;
        var _vAlign = 0;
        var _spacingX = 0;
        var _lineHeight = 0;
        var _overflow = 0;
        var _isWrapText = false;
        var _labelWidth = 0;
        var _labelHeight = 0;
        var _maxLineWidth = 0;
        var BmfontAssembler = function (_Assembler2D) {
            _inherits(BmfontAssembler, _Assembler2D);
            function BmfontAssembler() {
                _classCallCheck(this, BmfontAssembler);
                return _possibleConstructorReturn(this, (BmfontAssembler.__proto__ || Object.getPrototypeOf(BmfontAssembler)).apply(this, arguments));
            }
            _createClass(BmfontAssembler, [
                {
                    key: 'updateRenderData',
                    value: function updateRenderData(comp) {
                        if (!comp._vertsDirty)
                            return;
                        if (_comp === comp)
                            return;
                        _comp = comp;
                        this._reserveQuads(comp, comp.string.toString().length);
                        this._updateFontFamily(comp);
                        this._updateProperties(comp);
                        this._updateLabelInfo(comp);
                        this._updateContent();
                        this.updateWorldVerts(comp);
                        _comp._actualFontSize = _fontSize;
                        _comp.node.setContentSize(_contentSize);
                        _comp._vertsDirty = false;
                        _comp = null;
                        this._resetProperties();
                    }
                },
                {
                    key: '_updateFontScale',
                    value: function _updateFontScale() {
                        _bmfontScale = _fontSize / _originFontSize;
                    }
                },
                {
                    key: '_updateFontFamily',
                    value: function _updateFontFamily(comp) {
                        var fontAsset = comp.font;
                        _spriteFrame = fontAsset.spriteFrame;
                        _fntConfig = fontAsset._fntConfig;
                        shareLabelInfo.fontAtlas = fontAsset._fontDefDictionary;
                    }
                },
                {
                    key: '_updateLabelInfo',
                    value: function _updateLabelInfo() {
                        shareLabelInfo.hash = '';
                        shareLabelInfo.margin = 0;
                    }
                },
                {
                    key: '_updateProperties',
                    value: function _updateProperties(comp) {
                        _string = comp.string.toString();
                        _fontSize = comp.fontSize;
                        _originFontSize = _fntConfig ? _fntConfig.fontSize : comp.fontSize;
                        _hAlign = comp.horizontalAlign;
                        _vAlign = comp.verticalAlign;
                        _spacingX = comp.spacingX;
                        _overflow = comp.overflow;
                        _lineHeight = comp._lineHeight;
                        _contentSize.width = comp.node.width;
                        _contentSize.height = comp.node.height;
                        if (_overflow === Overflow.NONE) {
                            _isWrapText = false;
                            _contentSize.width += shareLabelInfo.margin * 2;
                            _contentSize.height += shareLabelInfo.margin * 2;
                        } else if (_overflow === Overflow.RESIZE_HEIGHT) {
                            _isWrapText = true;
                            _contentSize.height += shareLabelInfo.margin * 2;
                        } else {
                            _isWrapText = comp.enableWrapText;
                        }
                        shareLabelInfo.lineHeight = _lineHeight;
                        shareLabelInfo.fontSize = _fontSize;
                        this._setupBMFontOverflowMetrics();
                    }
                },
                {
                    key: '_resetProperties',
                    value: function _resetProperties() {
                        _fntConfig = null;
                        _spriteFrame = null;
                        shareLabelInfo.hash = '';
                        shareLabelInfo.margin = 0;
                    }
                },
                {
                    key: '_updateContent',
                    value: function _updateContent() {
                        this._updateFontScale();
                        this._computeHorizontalKerningForText();
                        this._alignText();
                    }
                },
                {
                    key: '_computeHorizontalKerningForText',
                    value: function _computeHorizontalKerningForText() {
                        var string = _string;
                        var stringLen = string.length;
                        var kerningDict = _fntConfig.kerningDict;
                        var horizontalKernings = _horizontalKernings;
                        var prev = -1;
                        for (var i = 0; i < stringLen; ++i) {
                            var key = string.charCodeAt(i);
                            var kerningAmount = kerningDict[prev << 16 | key & 65535] || 0;
                            if (i < stringLen - 1) {
                                horizontalKernings[i] = kerningAmount;
                            } else {
                                horizontalKernings[i] = 0;
                            }
                            prev = key;
                        }
                    }
                },
                {
                    key: '_multilineTextWrap',
                    value: function _multilineTextWrap(nextTokenFunc) {
                        var textLen = _string.length;
                        var lineIndex = 0;
                        var nextTokenX = 0;
                        var nextTokenY = 0;
                        var longestLine = 0;
                        var letterRight = 0;
                        var highestY = 0;
                        var lowestY = 0;
                        var letterDef = null;
                        var letterPosition = cc.v2(0, 0);
                        for (var index = 0; index < textLen;) {
                            var character = _string.charAt(index);
                            if (character === '\n') {
                                _linesWidth.push(letterRight);
                                letterRight = 0;
                                lineIndex++;
                                nextTokenX = 0;
                                nextTokenY -= _lineHeight * _bmfontScale + _lineSpacing;
                                this._recordPlaceholderInfo(index, character);
                                index++;
                                continue;
                            }
                            var tokenLen = nextTokenFunc(_string, index, textLen);
                            var tokenHighestY = highestY;
                            var tokenLowestY = lowestY;
                            var tokenRight = letterRight;
                            var nextLetterX = nextTokenX;
                            var newLine = false;
                            for (var tmp = 0; tmp < tokenLen; ++tmp) {
                                var letterIndex = index + tmp;
                                character = _string.charAt(letterIndex);
                                if (character === '\r') {
                                    this._recordPlaceholderInfo(letterIndex, character);
                                    continue;
                                }
                                letterDef = shareLabelInfo.fontAtlas.getLetterDefinitionForChar(character, shareLabelInfo);
                                if (!letterDef) {
                                    this._recordPlaceholderInfo(letterIndex, character);
                                    console.log('Can\'t find letter definition in texture atlas ' + _fntConfig.atlasName + ' for letter:' + character);
                                    continue;
                                }
                                var letterX = nextLetterX + letterDef.offsetX * _bmfontScale - shareLabelInfo.margin;
                                if (_isWrapText && _maxLineWidth > 0 && nextTokenX > 0 && letterX + letterDef.w * _bmfontScale > _maxLineWidth && !textUtils.isUnicodeSpace(character)) {
                                    _linesWidth.push(letterRight);
                                    letterRight = 0;
                                    lineIndex++;
                                    nextTokenX = 0;
                                    nextTokenY -= _lineHeight * _bmfontScale + _lineSpacing;
                                    newLine = true;
                                    break;
                                } else {
                                    letterPosition.x = letterX;
                                }
                                letterPosition.y = nextTokenY - letterDef.offsetY * _bmfontScale + shareLabelInfo.margin;
                                this._recordLetterInfo(letterPosition, character, letterIndex, lineIndex);
                                if (letterIndex + 1 < _horizontalKernings.length && letterIndex < textLen - 1) {
                                    nextLetterX += _horizontalKernings[letterIndex + 1];
                                }
                                nextLetterX += letterDef.xAdvance * _bmfontScale + _spacingX - shareLabelInfo.margin * 2;
                                tokenRight = letterPosition.x + letterDef.w * _bmfontScale - shareLabelInfo.margin;
                                if (tokenHighestY < letterPosition.y) {
                                    tokenHighestY = letterPosition.y;
                                }
                                if (tokenLowestY > letterPosition.y - letterDef.h * _bmfontScale) {
                                    tokenLowestY = letterPosition.y - letterDef.h * _bmfontScale;
                                }
                            }
                            if (newLine)
                                continue;
                            nextTokenX = nextLetterX;
                            letterRight = tokenRight;
                            if (highestY < tokenHighestY) {
                                highestY = tokenHighestY;
                            }
                            if (lowestY > tokenLowestY) {
                                lowestY = tokenLowestY;
                            }
                            if (longestLine < letterRight) {
                                longestLine = letterRight;
                            }
                            index += tokenLen;
                        }
                        _linesWidth.push(letterRight);
                        _numberOfLines = lineIndex + 1;
                        _textDesiredHeight = _numberOfLines * _lineHeight * _bmfontScale;
                        if (_numberOfLines > 1) {
                            _textDesiredHeight += (_numberOfLines - 1) * _lineSpacing;
                        }
                        _contentSize.width = _labelWidth;
                        _contentSize.height = _labelHeight;
                        if (_labelWidth <= 0) {
                            _contentSize.width = parseFloat(longestLine.toFixed(2)) + shareLabelInfo.margin * 2;
                        }
                        if (_labelHeight <= 0) {
                            _contentSize.height = parseFloat(_textDesiredHeight.toFixed(2)) + shareLabelInfo.margin * 2;
                        }
                        _tailoredTopY = _contentSize.height;
                        _tailoredBottomY = 0;
                        if (highestY > 0) {
                            _tailoredTopY = _contentSize.height + highestY;
                        }
                        if (lowestY < -_textDesiredHeight) {
                            _tailoredBottomY = _textDesiredHeight + lowestY;
                        }
                        return true;
                    }
                },
                {
                    key: '_getFirstCharLen',
                    value: function _getFirstCharLen() {
                        return 1;
                    }
                },
                {
                    key: '_getFirstWordLen',
                    value: function _getFirstWordLen(text, startIndex, textLen) {
                        var character = text.charAt(startIndex);
                        if (textUtils.isUnicodeCJK(character) || character === '\n' || textUtils.isUnicodeSpace(character)) {
                            return 1;
                        }
                        var len = 1;
                        var letterDef = shareLabelInfo.fontAtlas.getLetterDefinitionForChar(character, shareLabelInfo);
                        if (!letterDef) {
                            return len;
                        }
                        var nextLetterX = letterDef.xAdvance * _bmfontScale + _spacingX;
                        var letterX = void 0;
                        for (var index = startIndex + 1; index < textLen; ++index) {
                            character = text.charAt(index);
                            letterDef = shareLabelInfo.fontAtlas.getLetterDefinitionForChar(character, shareLabelInfo);
                            if (!letterDef) {
                                break;
                            }
                            letterX = nextLetterX + letterDef.offsetX * _bmfontScale;
                            if (letterX + letterDef.w * _bmfontScale > _maxLineWidth && !textUtils.isUnicodeSpace(character) && _maxLineWidth > 0) {
                                return len;
                            }
                            nextLetterX += letterDef.xAdvance * _bmfontScale + _spacingX;
                            if (character === '\n' || textUtils.isUnicodeSpace(character) || textUtils.isUnicodeCJK(character)) {
                                break;
                            }
                            len++;
                        }
                        return len;
                    }
                },
                {
                    key: '_multilineTextWrapByWord',
                    value: function _multilineTextWrapByWord() {
                        return this._multilineTextWrap(this._getFirstWordLen);
                    }
                },
                {
                    key: '_multilineTextWrapByChar',
                    value: function _multilineTextWrapByChar() {
                        return this._multilineTextWrap(this._getFirstCharLen);
                    }
                },
                {
                    key: '_recordPlaceholderInfo',
                    value: function _recordPlaceholderInfo(letterIndex, char) {
                        if (letterIndex >= _lettersInfo.length) {
                            var tmpInfo = new LetterInfo();
                            _lettersInfo.push(tmpInfo);
                        }
                        _lettersInfo[letterIndex].char = char;
                        _lettersInfo[letterIndex].hash = char.charCodeAt(0) + shareLabelInfo.hash;
                        _lettersInfo[letterIndex].valid = false;
                    }
                },
                {
                    key: '_recordLetterInfo',
                    value: function _recordLetterInfo(letterPosition, character, letterIndex, lineIndex) {
                        if (letterIndex >= _lettersInfo.length) {
                            var tmpInfo = new LetterInfo();
                            _lettersInfo.push(tmpInfo);
                        }
                        var char = character.charCodeAt(0);
                        var key = char + shareLabelInfo.hash;
                        _lettersInfo[letterIndex].line = lineIndex;
                        _lettersInfo[letterIndex].char = character;
                        _lettersInfo[letterIndex].hash = key;
                        _lettersInfo[letterIndex].valid = shareLabelInfo.fontAtlas.getLetter(key).valid;
                        _lettersInfo[letterIndex].x = letterPosition.x;
                        _lettersInfo[letterIndex].y = letterPosition.y;
                    }
                },
                {
                    key: '_alignText',
                    value: function _alignText() {
                        _textDesiredHeight = 0;
                        _linesWidth.length = 0;
                        if (!_lineBreakWithoutSpaces) {
                            this._multilineTextWrapByWord();
                        } else {
                            this._multilineTextWrapByChar();
                        }
                        this._computeAlignmentOffset();
                        if (_overflow === Overflow.SHRINK) {
                            if (_fontSize > 0 && this._isVerticalClamp()) {
                                this._shrinkLabelToContentSize(this._isVerticalClamp);
                            }
                        }
                        if (!this._updateQuads()) {
                            if (_overflow === Overflow.SHRINK) {
                                this._shrinkLabelToContentSize(this._isHorizontalClamp);
                            }
                        }
                    }
                },
                {
                    key: '_scaleFontSizeDown',
                    value: function _scaleFontSizeDown(fontSize) {
                        var shouldUpdateContent = true;
                        if (!fontSize) {
                            fontSize = 0.1;
                            shouldUpdateContent = false;
                        }
                        _fontSize = fontSize;
                        if (shouldUpdateContent) {
                            this._updateContent();
                        }
                    }
                },
                {
                    key: '_shrinkLabelToContentSize',
                    value: function _shrinkLabelToContentSize(lambda) {
                        var fontSize = _fontSize;
                        var left = 0, right = fontSize | 0, mid = 0;
                        while (left < right) {
                            mid = left + right + 1 >> 1;
                            var newFontSize = mid;
                            if (newFontSize <= 0) {
                                break;
                            }
                            _bmfontScale = newFontSize / _originFontSize;
                            if (!_lineBreakWithoutSpaces) {
                                this._multilineTextWrapByWord();
                            } else {
                                this._multilineTextWrapByChar();
                            }
                            this._computeAlignmentOffset();
                            if (lambda()) {
                                right = mid - 1;
                            } else {
                                left = mid;
                            }
                        }
                        var actualFontSize = left;
                        if (actualFontSize >= 0) {
                            this._scaleFontSizeDown(actualFontSize);
                        }
                    }
                },
                {
                    key: '_isVerticalClamp',
                    value: function _isVerticalClamp() {
                        if (_textDesiredHeight > _contentSize.height) {
                            return true;
                        } else {
                            return false;
                        }
                    }
                },
                {
                    key: '_isHorizontalClamp',
                    value: function _isHorizontalClamp() {
                        var letterClamp = false;
                        for (var ctr = 0, l = _string.length; ctr < l; ++ctr) {
                            var letterInfo = _lettersInfo[ctr];
                            if (letterInfo.valid) {
                                var letterDef = shareLabelInfo.fontAtlas.getLetter(letterInfo.hash);
                                var px = letterInfo.x + letterDef.w * _bmfontScale;
                                var lineIndex = letterInfo.line;
                                if (_labelWidth > 0) {
                                    if (!_isWrapText) {
                                        if (px > _contentSize.width) {
                                            letterClamp = true;
                                            break;
                                        }
                                    } else {
                                        var wordWidth = _linesWidth[lineIndex];
                                        if (wordWidth > _contentSize.width && (px > _contentSize.width || px < 0)) {
                                            letterClamp = true;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        return letterClamp;
                    }
                },
                {
                    key: '_isHorizontalClamped',
                    value: function _isHorizontalClamped(px, lineIndex) {
                        var wordWidth = _linesWidth[lineIndex];
                        var letterOverClamp = px > _contentSize.width || px < 0;
                        if (!_isWrapText) {
                            return letterOverClamp;
                        } else {
                            return wordWidth > _contentSize.width && letterOverClamp;
                        }
                    }
                },
                {
                    key: '_updateQuads',
                    value: function _updateQuads() {
                        var texture = shareLabelInfo.fontAtlas.getTexture();
                        var node = _comp.node;
                        this.verticesCount = this.indicesCount = 0;
                        this._renderData && (this._renderData.dataLength = 0);
                        var contentSize = _contentSize, appx = node._anchorPoint.x * contentSize.width, appy = node._anchorPoint.y * contentSize.height;
                        var ret = true;
                        for (var ctr = 0, l = _string.length; ctr < l; ++ctr) {
                            var letterInfo = _lettersInfo[ctr];
                            if (!letterInfo.valid)
                                continue;
                            var letterDef = shareLabelInfo.fontAtlas.getLetter(letterInfo.hash);
                            _tmpRect.height = letterDef.h;
                            _tmpRect.width = letterDef.w;
                            _tmpRect.x = letterDef.u;
                            _tmpRect.y = letterDef.v;
                            var py = letterInfo.y + _letterOffsetY;
                            if (_labelHeight > 0) {
                                if (py > _tailoredTopY) {
                                    var clipTop = py - _tailoredTopY;
                                    _tmpRect.y += clipTop;
                                    _tmpRect.height -= clipTop;
                                    py = py - clipTop;
                                }
                                if (py - letterDef.h * _bmfontScale < _tailoredBottomY && _overflow === Overflow.CLAMP) {
                                    _tmpRect.height = py < _tailoredBottomY ? 0 : py - _tailoredBottomY;
                                }
                            }
                            var lineIndex = letterInfo.line;
                            var px = letterInfo.x + letterDef.w / 2 * _bmfontScale + _linesOffsetX[lineIndex];
                            if (_labelWidth > 0) {
                                if (this._isHorizontalClamped(px, lineIndex)) {
                                    if (_overflow === Overflow.CLAMP) {
                                        _tmpRect.width = 0;
                                    } else if (_overflow === Overflow.SHRINK) {
                                        if (_contentSize.width > letterDef.w) {
                                            ret = false;
                                            break;
                                        } else {
                                            _tmpRect.width = 0;
                                        }
                                    }
                                }
                            }
                            if (_tmpRect.height > 0 && _tmpRect.width > 0) {
                                var isRotated = this._determineRect(_tmpRect);
                                var letterPositionX = letterInfo.x + _linesOffsetX[letterInfo.line];
                                this.appendQuad(_comp, texture, _tmpRect, isRotated, letterPositionX - appx, py - appy, _bmfontScale);
                            }
                        }
                        this._quadsUpdated(_comp);
                        return ret;
                    }
                },
                {
                    key: '_determineRect',
                    value: function _determineRect(tempRect) {
                        var isRotated = _spriteFrame.isRotated();
                        var originalSize = _spriteFrame._originalSize;
                        var rect = _spriteFrame._rect;
                        var offset = _spriteFrame._offset;
                        var trimmedLeft = offset.x + (originalSize.width - rect.width) / 2;
                        var trimmedTop = offset.y - (originalSize.height - rect.height) / 2;
                        if (!isRotated) {
                            tempRect.x += rect.x - trimmedLeft;
                            tempRect.y += rect.y + trimmedTop;
                        } else {
                            var originalX = tempRect.x;
                            tempRect.x = rect.x + rect.height - tempRect.y - tempRect.height - trimmedTop;
                            tempRect.y = originalX + rect.y - trimmedLeft;
                            if (tempRect.y < 0) {
                                tempRect.height = tempRect.height + trimmedTop;
                            }
                        }
                        return isRotated;
                    }
                },
                {
                    key: '_computeAlignmentOffset',
                    value: function _computeAlignmentOffset() {
                        _linesOffsetX.length = 0;
                        switch (_hAlign) {
                        case macro.TextAlignment.LEFT:
                            for (var i = 0; i < _numberOfLines; ++i) {
                                _linesOffsetX.push(0);
                            }
                            break;
                        case macro.TextAlignment.CENTER:
                            for (var _i = 0, l = _linesWidth.length; _i < l; _i++) {
                                _linesOffsetX.push((_contentSize.width - _linesWidth[_i]) / 2);
                            }
                            break;
                        case macro.TextAlignment.RIGHT:
                            for (var _i2 = 0, _l = _linesWidth.length; _i2 < _l; _i2++) {
                                _linesOffsetX.push(_contentSize.width - _linesWidth[_i2]);
                            }
                            break;
                        default:
                            break;
                        }
                        _letterOffsetY = _contentSize.height;
                        if (_vAlign !== macro.VerticalTextAlignment.TOP) {
                            var blank = _contentSize.height - _textDesiredHeight + (_lineHeight - _originFontSize) * _bmfontScale;
                            if (_vAlign === macro.VerticalTextAlignment.BOTTOM) {
                                _letterOffsetY -= blank;
                            } else {
                                _letterOffsetY -= blank / 2;
                            }
                        }
                    }
                },
                {
                    key: '_setupBMFontOverflowMetrics',
                    value: function _setupBMFontOverflowMetrics() {
                        var newWidth = _contentSize.width, newHeight = _contentSize.height;
                        if (_overflow === Overflow.RESIZE_HEIGHT) {
                            newHeight = 0;
                        }
                        if (_overflow === Overflow.NONE) {
                            newWidth = 0;
                            newHeight = 0;
                        }
                        _labelWidth = newWidth;
                        _labelHeight = newHeight;
                        _maxLineWidth = newWidth;
                    }
                },
                {
                    key: 'updateWorldVerts',
                    value: function updateWorldVerts() {
                    }
                },
                {
                    key: 'appendQuad',
                    value: function appendQuad(comp, texture, rect, rotated, x, y, scale) {
                    }
                },
                {
                    key: '_quadsUpdated',
                    value: function _quadsUpdated(comp) {
                    }
                },
                {
                    key: '_reserveQuads',
                    value: function _reserveQuads() {
                    }
                }
            ]);
            return BmfontAssembler;
        }(_assembler2d2.default);
        exports.default = BmfontAssembler;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,