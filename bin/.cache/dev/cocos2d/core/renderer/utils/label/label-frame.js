(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/utils/label/label-frame.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        function LabelFrame() {
            this._rect = null;
            this.uv = [];
            this._texture = null;
            this._original = null;
        }
        LabelFrame.prototype = {
            constructor: LabelFrame,
            getRect: function getRect() {
                return cc.rect(this._rect);
            },
            setRect: function setRect(rect) {
                this._rect = rect;
                if (this._texture)
                    this._calculateUV();
            },
            _setDynamicAtlasFrame: function _setDynamicAtlasFrame(frame) {
                if (!frame)
                    return;
                this._original = {
                    _texture: this._texture,
                    _x: this._rect.x,
                    _y: this._rect.y
                };
                this._texture = frame.texture;
                this._rect.x = frame.x;
                this._rect.y = frame.y;
                this._calculateUV();
            },
            _resetDynamicAtlasFrame: function _resetDynamicAtlasFrame() {
                if (!this._original)
                    return;
                this._rect.x = this._original._x;
                this._rect.y = this._original._y;
                this._texture = this._original._texture;
                this._original = null;
                this._calculateUV();
            },
            _refreshTexture: function _refreshTexture(texture) {
                this._texture = texture;
                this._rect = cc.rect(0, 0, texture.width, texture.height);
                this._calculateUV();
            },
            _calculateUV: function _calculateUV() {
                var rect = this._rect, texture = this._texture, uv = this.uv, texw = texture.width, texh = texture.height;
                var l = texw === 0 ? 0 : rect.x / texw;
                var r = texw === 0 ? 0 : (rect.x + rect.width) / texw;
                var b = texh === 0 ? 0 : (rect.y + rect.height) / texh;
                var t = texh === 0 ? 0 : rect.y / texh;
                uv[0] = l;
                uv[1] = b;
                uv[2] = r;
                uv[3] = b;
                uv[4] = l;
                uv[5] = t;
                uv[6] = r;
                uv[7] = t;
            }
        };
        module.exports = LabelFrame;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,