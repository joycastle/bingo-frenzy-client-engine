(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/canvas/Device.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Device = function Device(canvasEL) {
            var ctx;
            try {
                ctx = canvasEL.getContext('2d');
            } catch (err) {
                console.error(err);
                return;
            }
            this._canvas = canvasEL;
            this._ctx = ctx;
            this._caps = {};
            this._stats = { drawcalls: 0 };
            this._vx = this._vy = this._vw = this._vh = 0;
            this._sx = this._sy = this._sw = this._sh = 0;
        };
        Device.prototype._restoreTexture = function _restoreTexture(unit) {
        };
        Device.prototype.setViewport = function setViewport(x, y, w, h) {
            if (this._vx !== x || this._vy !== y || this._vw !== w || this._vh !== h) {
                this._vx = x;
                this._vy = y;
                this._vw = w;
                this._vh = h;
            }
        };
        Device.prototype.setScissor = function setScissor(x, y, w, h) {
            if (this._sx !== x || this._sy !== y || this._sw !== w || this._sh !== h) {
                this._sx = x;
                this._sy = y;
                this._sw = w;
                this._sh = h;
            }
        };
        Device.prototype.clear = function clear(color) {
            var ctx = this._ctx;
            ctx.clearRect(this._vx, this._vy, this._vw, this._vh);
            if (color && (color[0] !== 0 || color[1] !== 0 || color[2] !== 0)) {
                ctx.fillStyle = 'rgb(' + color[0] + ',' + color[1] + ',' + color[2] + ')';
                ctx.globalAlpha = color[3];
                ctx.fillRect(this._vx, this._vy, this._vw, this._vh);
            }
        };
        Device.prototype.resetDrawCalls = function () {
            this._stats.drawcalls = 0;
        };
        Device.prototype.getDrawCalls = function () {
            return this._stats.drawcalls;
        };
        module.exports = Device;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,