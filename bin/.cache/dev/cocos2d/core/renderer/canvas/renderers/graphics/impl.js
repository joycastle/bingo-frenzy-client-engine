(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/canvas/renderers/graphics/impl.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Helper = require('../../../../graphics/helper');
        var Types = require('../../../../graphics/types');
        var js = require('../../../../platform/js');
        var LineJoin = Types.LineJoin;
        var LineCap = Types.LineCap;
        function Impl() {
            this.cmds = [];
            this.style = {
                strokeStyle: 'black',
                fillStyle: 'white',
                lineCap: 'butt',
                lineJoin: 'miter',
                miterLimit: 10
            };
        }
        var _proto = Impl.prototype;
        js.mixin(_proto, {
            moveTo: function moveTo(x, y) {
                this.cmds.push([
                    'moveTo',
                    [
                        x,
                        y
                    ]
                ]);
            },
            lineTo: function lineTo(x, y) {
                this.cmds.push([
                    'lineTo',
                    [
                        x,
                        y
                    ]
                ]);
            },
            bezierCurveTo: function bezierCurveTo(c1x, c1y, c2x, c2y, x, y) {
                this.cmds.push([
                    'bezierCurveTo',
                    [
                        c1x,
                        c1y,
                        c2x,
                        c2y,
                        x,
                        y
                    ]
                ]);
            },
            quadraticCurveTo: function quadraticCurveTo(cx, cy, x, y) {
                this.cmds.push([
                    'quadraticCurveTo',
                    [
                        cx,
                        cy,
                        x,
                        y
                    ]
                ]);
            },
            arc: function arc(cx, cy, r, startAngle, endAngle, counterclockwise) {
                Helper.arc(this, cx, cy, r, startAngle, endAngle, counterclockwise);
            },
            ellipse: function ellipse(cx, cy, rx, ry) {
                Helper.ellipse(this, cx, cy, rx, ry);
            },
            circle: function circle(cx, cy, r) {
                Helper.ellipse(this, cx, cy, r, r);
            },
            rect: function rect(x, y, w, h) {
                this.moveTo(x, y);
                this.lineTo(x, y + h);
                this.lineTo(x + w, y + h);
                this.lineTo(x + w, y);
                this.close();
            },
            roundRect: function roundRect(x, y, w, h, r) {
                Helper.roundRect(this, x, y, w, h, r);
            },
            clear: function clear(comp, clean) {
                this.cmds.length = 0;
            },
            close: function close() {
                this.cmds.push([
                    'closePath',
                    []
                ]);
            },
            stroke: function stroke() {
                this.cmds.push([
                    'stroke',
                    []
                ]);
            },
            fill: function fill() {
                this.cmds.push([
                    'fill',
                    []
                ]);
            }
        });
        js.set(_proto, 'strokeColor', function (v) {
            var strokeStyle = 'rgba(' + (0 | v.r) + ',' + (0 | v.g) + ',' + (0 | v.b) + ',' + v.a / 255 + ')';
            this.cmds.push([
                'strokeStyle',
                strokeStyle
            ]);
            this.style.strokeStyle = strokeStyle;
        });
        js.set(_proto, 'fillColor', function (v) {
            var fillStyle = 'rgba(' + (0 | v.r) + ',' + (0 | v.g) + ',' + (0 | v.b) + ',' + v.a / 255 + ')';
            this.cmds.push([
                'fillStyle',
                fillStyle
            ]);
            this.style.fillStyle = fillStyle;
        });
        js.set(_proto, 'lineWidth', function (v) {
            this.cmds.push([
                'lineWidth',
                v
            ]);
            this.style.lineWidth = v;
        });
        js.set(_proto, 'lineCap', function (v) {
            var lineCap = 'butt';
            if (v === LineCap.BUTT) {
                lineCap = 'butt';
            } else if (v === LineCap.ROUND) {
                lineCap = 'round';
            } else if (v === LineCap.SQUARE) {
                lineCap = 'square';
            }
            this.cmds.push([
                'lineCap',
                lineCap
            ]);
            this.style.lineCap = lineCap;
        });
        js.set(_proto, 'lineJoin', function (v) {
            var lineJoin = 'bevel';
            if (v === LineJoin.BEVEL) {
                lineJoin = 'bevel';
            } else if (v === LineJoin.ROUND) {
                lineJoin = 'round';
            } else if (v === LineJoin.MITER) {
                lineJoin = 'miter';
            }
            this.cmds.push([
                'lineJoin',
                lineJoin
            ]);
            this.style.lineJoin = lineJoin;
        });
        js.set(_proto, 'miterLimit', function (v) {
            this.cmds.push([
                'miterLimit',
                v
            ]);
            this.style.miterLimit = v;
        });
        cc.Graphics._Impl = Impl;
        module.exports = Impl;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,