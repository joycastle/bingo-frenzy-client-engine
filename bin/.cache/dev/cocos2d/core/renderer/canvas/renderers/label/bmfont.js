(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/canvas/renderers/label/bmfont.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _bmfont = require('../../../utils/label/bmfont');
        var _bmfont2 = _interopRequireDefault(_bmfont);
        var _renderData = require('../render-data');
        var _renderData2 = _interopRequireDefault(_renderData);
        var _utils = require('../utils');
        var _utils2 = _interopRequireDefault(_utils);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var CanvasBmfontAssembler = function (_BmfontAssembler) {
            _inherits(CanvasBmfontAssembler, _BmfontAssembler);
            function CanvasBmfontAssembler() {
                _classCallCheck(this, CanvasBmfontAssembler);
                return _possibleConstructorReturn(this, (CanvasBmfontAssembler.__proto__ || Object.getPrototypeOf(CanvasBmfontAssembler)).apply(this, arguments));
            }
            _createClass(CanvasBmfontAssembler, [
                {
                    key: 'init',
                    value: function init() {
                        this._renderData = new _renderData2.default();
                    }
                },
                {
                    key: 'updateColor',
                    value: function updateColor() {
                    }
                },
                {
                    key: 'appendQuad',
                    value: function appendQuad(comp, texture, rect, rotated, x, y, scale) {
                        var renderData = this._renderData;
                        var dataOffset = renderData.dataLength;
                        renderData.dataLength += 2;
                        var verts = renderData.vertices;
                        var rectWidth = rect.width, rectHeight = rect.height;
                        var l = void 0, b = void 0, r = void 0, t = void 0;
                        if (!rotated) {
                            l = rect.x;
                            r = rect.x + rectWidth;
                            b = rect.y;
                            t = rect.y + rectHeight;
                            verts[dataOffset].u = l;
                            verts[dataOffset].v = b;
                            verts[dataOffset + 1].u = r;
                            verts[dataOffset + 1].v = t;
                        } else {
                            l = rect.x;
                            r = rect.x + rectHeight;
                            b = rect.y;
                            t = rect.y + rectWidth;
                            verts[dataOffset].u = l;
                            verts[dataOffset].v = t;
                            verts[dataOffset + 1].u = l;
                            verts[dataOffset + 1].v = b;
                        }
                        verts[dataOffset].x = x;
                        verts[dataOffset].y = y - rectHeight * scale;
                        verts[dataOffset + 1].x = x + rectWidth * scale;
                        verts[dataOffset + 1].y = y;
                    }
                },
                {
                    key: 'draw',
                    value: function draw(ctx, comp) {
                        var node = comp.node;
                        var matrix = node._worldMatrix;
                        var matrixm = matrix.m;
                        var a = matrixm[0], b = matrixm[1], c = matrixm[4], d = matrixm[5], tx = matrixm[12], ty = matrixm[13];
                        ctx.transform(a, b, c, d, tx, ty);
                        ctx.scale(1, -1);
                        _utils2.default.context.setGlobalAlpha(ctx, node.opacity / 255);
                        var tex = comp._frame._texture, verts = this._renderData.vertices;
                        var image = _utils2.default.getColorizedImage(tex, node._color);
                        for (var i = 0, l = verts.length; i < l; i += 2) {
                            var x = verts[i].x;
                            var y = verts[i].y;
                            var w = verts[i + 1].x - x;
                            var h = verts[i + 1].y - y;
                            y = -y - h;
                            var sx = verts[i].u;
                            var sy = verts[i].v;
                            var sw = verts[i + 1].u - sx;
                            var sh = verts[i + 1].v - sy;
                            ctx.drawImage(image, sx, sy, sw, sh, x, y, w, h);
                        }
                        return 1;
                    }
                }
            ]);
            return CanvasBmfontAssembler;
        }(_bmfont2.default);
        exports.default = CanvasBmfontAssembler;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,