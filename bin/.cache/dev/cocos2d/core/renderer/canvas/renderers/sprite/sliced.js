(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/canvas/renderers/sprite/sliced.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _assembler = require('../../../assembler');
        var _assembler2 = _interopRequireDefault(_assembler);
        var _renderData = require('../render-data');
        var _renderData2 = _interopRequireDefault(_renderData);
        var _simple = require('./simple');
        var _simple2 = _interopRequireDefault(_simple);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var utils = require('../utils');
        var CanvasSlicedSprite = function (_CanvasSimpleSprite) {
            _inherits(CanvasSlicedSprite, _CanvasSimpleSprite);
            function CanvasSlicedSprite() {
                _classCallCheck(this, CanvasSlicedSprite);
                return _possibleConstructorReturn(this, (CanvasSlicedSprite.__proto__ || Object.getPrototypeOf(CanvasSlicedSprite)).apply(this, arguments));
            }
            _createClass(CanvasSlicedSprite, [
                {
                    key: 'init',
                    value: function init() {
                        this._renderData = new _renderData2.default();
                        this._renderData.dataLength = 4;
                    }
                },
                {
                    key: 'updateUVs',
                    value: function updateUVs(sprite) {
                        var frame = sprite.spriteFrame;
                        var renderData = this._renderData;
                        var rect = frame._rect;
                        var leftWidth = frame.insetLeft;
                        var rightWidth = frame.insetRight;
                        var centerWidth = rect.width - leftWidth - rightWidth;
                        var topHeight = frame.insetTop;
                        var bottomHeight = frame.insetBottom;
                        var centerHeight = rect.height - topHeight - bottomHeight;
                        var verts = renderData.vertices;
                        if (frame._rotated) {
                            verts[0].u = rect.x;
                            verts[1].u = bottomHeight + rect.x;
                            verts[2].u = bottomHeight + centerHeight + rect.x;
                            verts[3].u = rect.x + rect.height;
                            verts[3].v = rect.y;
                            verts[2].v = leftWidth + rect.y;
                            verts[1].v = leftWidth + centerWidth + rect.y;
                            verts[0].v = rect.y + rect.width;
                        } else {
                            verts[0].u = rect.x;
                            verts[1].u = leftWidth + rect.x;
                            verts[2].u = leftWidth + centerWidth + rect.x;
                            verts[3].u = rect.x + rect.width;
                            verts[3].v = rect.y;
                            verts[2].v = topHeight + rect.y;
                            verts[1].v = topHeight + centerHeight + rect.y;
                            verts[0].v = rect.y + rect.height;
                        }
                    }
                },
                {
                    key: 'updateVerts',
                    value: function updateVerts(sprite) {
                        var renderData = this._renderData, verts = renderData.vertices, node = sprite.node, width = node.width, height = node.height, appx = node.anchorX * width, appy = node.anchorY * height;
                        var frame = sprite.spriteFrame;
                        var leftWidth = frame.insetLeft;
                        var rightWidth = frame.insetRight;
                        var topHeight = frame.insetTop;
                        var bottomHeight = frame.insetBottom;
                        var sizableWidth = width - leftWidth - rightWidth;
                        var sizableHeight = height - topHeight - bottomHeight;
                        var xScale = width / (leftWidth + rightWidth);
                        var yScale = height / (topHeight + bottomHeight);
                        xScale = isNaN(xScale) || xScale > 1 ? 1 : xScale;
                        yScale = isNaN(yScale) || yScale > 1 ? 1 : yScale;
                        sizableWidth = sizableWidth < 0 ? 0 : sizableWidth;
                        sizableHeight = sizableHeight < 0 ? 0 : sizableHeight;
                        if (frame._rotated) {
                            verts[0].y = -appx;
                            verts[0].x = -appy;
                            verts[1].y = rightWidth * xScale - appx;
                            verts[1].x = bottomHeight * yScale - appy;
                            verts[2].y = verts[1].y + sizableWidth;
                            verts[2].x = verts[1].x + sizableHeight;
                            verts[3].y = width - appx;
                            verts[3].x = height - appy;
                        } else {
                            verts[0].x = -appx;
                            verts[0].y = -appy;
                            verts[1].x = leftWidth * xScale - appx;
                            verts[1].y = bottomHeight * yScale - appy;
                            verts[2].x = verts[1].x + sizableWidth;
                            verts[2].y = verts[1].y + sizableHeight;
                            verts[3].x = width - appx;
                            verts[3].y = height - appy;
                        }
                        sprite._vertsDirty = false;
                    }
                },
                {
                    key: 'draw',
                    value: function draw(ctx, comp) {
                        var node = comp.node;
                        var frame = comp._spriteFrame;
                        var matrix = node._worldMatrix;
                        var matrixm = matrix.m;
                        var a = matrixm[0], b = matrixm[1], c = matrixm[4], d = matrixm[5], tx = matrixm[12], ty = matrixm[13];
                        ctx.transform(a, b, c, d, tx, ty);
                        ctx.scale(1, -1);
                        if (frame._rotated) {
                            ctx.rotate(-Math.PI / 2);
                        }
                        utils.context.setGlobalAlpha(ctx, node.opacity / 255);
                        var tex = frame._texture, verts = this._renderData.vertices;
                        var image = utils.getColorizedImage(tex, node._color);
                        var drawCall = 0;
                        var off = void 0, ld = void 0, rd = void 0, td = void 0, bd = void 0, x = void 0, y = void 0, w = void 0, h = void 0, sx = void 0, sy = void 0, sw = void 0, sh = void 0;
                        for (var r = 0; r < 3; ++r) {
                            bd = verts[r];
                            td = verts[r + 1];
                            for (var _c = 0; _c < 3; ++_c) {
                                ld = verts[_c];
                                rd = verts[_c + 1];
                                x = ld.x;
                                y = bd.y;
                                w = rd.x - x;
                                h = td.y - y;
                                y = -y - h;
                                sx = ld.u;
                                sy = td.v;
                                sw = rd.u - sx;
                                sh = bd.v - sy;
                                if (sw > 0 && sh > 0 && w > 0 && h > 0) {
                                    ctx.drawImage(image, sx, sy, sw, sh, x, y, w, h);
                                    drawCall++;
                                }
                            }
                        }
                        return drawCall;
                    }
                }
            ]);
            return CanvasSlicedSprite;
        }(_simple2.default);
        exports.default = CanvasSlicedSprite;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,