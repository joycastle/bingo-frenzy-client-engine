(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/canvas/renderers/label/ttf.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _ttf = require('../../../utils/label/ttf');
        var _ttf2 = _interopRequireDefault(_ttf);
        var _renderData = require('../render-data');
        var _renderData2 = _interopRequireDefault(_renderData);
        var _utils = require('../utils');
        var _utils2 = _interopRequireDefault(_utils);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var CanvasTTFAssembler = function (_TTFAssembler) {
            _inherits(CanvasTTFAssembler, _TTFAssembler);
            function CanvasTTFAssembler() {
                _classCallCheck(this, CanvasTTFAssembler);
                return _possibleConstructorReturn(this, (CanvasTTFAssembler.__proto__ || Object.getPrototypeOf(CanvasTTFAssembler)).apply(this, arguments));
            }
            _createClass(CanvasTTFAssembler, [
                {
                    key: 'init',
                    value: function init() {
                        this._renderData = new _renderData2.default();
                        this._renderData.dataLength = 2;
                    }
                },
                {
                    key: 'updateColor',
                    value: function updateColor() {
                    }
                },
                {
                    key: 'updateVerts',
                    value: function updateVerts(comp) {
                        var renderData = this._renderData;
                        var node = comp.node, width = node.width, height = node.height, appx = node.anchorX * width, appy = node.anchorY * height;
                        var verts = renderData.vertices;
                        verts[0].x = -appx;
                        verts[0].y = -appy;
                        verts[1].x = width - appx;
                        verts[1].y = height - appy;
                    }
                },
                {
                    key: '_updateTexture',
                    value: function _updateTexture(comp) {
                        _ttf2.default.prototype._updateTexture.call(this, comp);
                        var texture = comp._frame._texture;
                        _utils2.default.dropColorizedImage(texture, comp.node.color);
                    }
                },
                {
                    key: 'draw',
                    value: function draw(ctx, comp) {
                        var node = comp.node;
                        var matrix = node._worldMatrix;
                        var matrixm = matrix.m;
                        var a = matrixm[0], b = matrixm[1], c = matrixm[4], d = matrixm[5], tx = matrixm[12], ty = matrixm[13];
                        ctx.transform(a, b, c, d, tx, ty);
                        ctx.scale(1, -1);
                        _utils2.default.context.setGlobalAlpha(ctx, node.opacity / 255);
                        var tex = comp._frame._texture, verts = this._renderData.vertices;
                        var image = tex.getHtmlElementObj();
                        var x = verts[0].x;
                        var y = verts[0].y;
                        var w = verts[1].x - x;
                        var h = verts[1].y - y;
                        y = -y - h;
                        ctx.drawImage(image, x, y, w, h);
                        return 1;
                    }
                }
            ]);
            return CanvasTTFAssembler;
        }(_ttf2.default);
        exports.default = CanvasTTFAssembler;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,