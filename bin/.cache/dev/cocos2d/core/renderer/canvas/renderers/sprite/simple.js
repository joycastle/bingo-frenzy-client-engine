(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/canvas/renderers/sprite/simple.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _assembler = require('../../../assembler');
        var _assembler2 = _interopRequireDefault(_assembler);
        var _renderData = require('../render-data');
        var _renderData2 = _interopRequireDefault(_renderData);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var utils = require('../utils');
        var CanvasSimpleSprite = function (_Assembler) {
            _inherits(CanvasSimpleSprite, _Assembler);
            function CanvasSimpleSprite() {
                _classCallCheck(this, CanvasSimpleSprite);
                return _possibleConstructorReturn(this, (CanvasSimpleSprite.__proto__ || Object.getPrototypeOf(CanvasSimpleSprite)).apply(this, arguments));
            }
            _createClass(CanvasSimpleSprite, [
                {
                    key: 'init',
                    value: function init() {
                        this._renderData = new _renderData2.default();
                        this._renderData.dataLength = 2;
                    }
                },
                {
                    key: 'updateRenderData',
                    value: function updateRenderData(sprite) {
                        if (sprite._vertsDirty) {
                            this.updateUVs(sprite);
                            this.updateVerts(sprite);
                            sprite._vertsDirty = false;
                        }
                    }
                },
                {
                    key: 'updateUVs',
                    value: function updateUVs(sprite) {
                        var frame = sprite.spriteFrame;
                        var renderData = this._renderData;
                        var verts = renderData.vertices;
                        var rect = frame._rect;
                        if (frame._rotated) {
                            var l = rect.x;
                            var r = rect.width;
                            var b = rect.y;
                            var t = rect.height;
                            verts[0].u = l;
                            verts[0].v = b;
                            verts[1].u = t;
                            verts[1].v = r;
                        } else {
                            var _l = rect.x;
                            var _r = rect.width;
                            var _b = rect.y;
                            var _t = rect.height;
                            verts[0].u = _l;
                            verts[0].v = _b;
                            verts[1].u = _r;
                            verts[1].v = _t;
                        }
                    }
                },
                {
                    key: 'updateVerts',
                    value: function updateVerts(sprite) {
                        var renderData = this._renderData, node = sprite.node, verts = renderData.vertices, frame = sprite.spriteFrame, cw = node.width, ch = node.height, appx = node.anchorX * cw, appy = node.anchorY * ch, l = void 0, b = void 0, r = void 0, t = void 0;
                        if (sprite.trim) {
                            l = -appx;
                            b = -appy;
                            r = cw;
                            t = ch;
                        } else {
                            var ow = frame._originalSize.width, oh = frame._originalSize.height, rw = frame._rect.width, rh = frame._rect.height, offset = frame._offset, scaleX = cw / ow, scaleY = ch / oh;
                            var trimLeft = offset.x + (ow - rw) / 2;
                            var trimBottom = offset.y + (oh - rh) / 2;
                            l = trimLeft * scaleX - appx;
                            b = trimBottom * scaleY - appy;
                            r = cw;
                            t = ch;
                        }
                        if (frame._rotated) {
                            verts[0].y = l;
                            verts[0].x = b;
                            verts[1].y = r;
                            verts[1].x = t;
                        } else {
                            verts[0].x = l;
                            verts[0].y = b;
                            verts[1].x = r;
                            verts[1].y = t;
                        }
                        renderData.vertDirty = false;
                    }
                },
                {
                    key: 'draw',
                    value: function draw(ctx, comp) {
                        var node = comp.node;
                        var frame = comp._spriteFrame;
                        var matrix = node._worldMatrix;
                        var matrixm = matrix.m;
                        var a = matrixm[0], b = matrixm[1], c = matrixm[4], d = matrixm[5], tx = matrixm[12], ty = matrixm[13];
                        ctx.transform(a, b, c, d, tx, ty);
                        ctx.scale(1, -1);
                        if (frame._rotated) {
                            ctx.rotate(-Math.PI / 2);
                        }
                        utils.context.setGlobalAlpha(ctx, node.opacity / 255);
                        var tex = frame._texture, verts = this._renderData.vertices;
                        var image = utils.getColorizedImage(tex, node._color);
                        var x = verts[0].x;
                        var y = verts[0].y;
                        var w = verts[1].x;
                        var h = verts[1].y;
                        y = -y - h;
                        var sx = verts[0].u;
                        var sy = verts[0].v;
                        var sw = verts[1].u;
                        var sh = verts[1].v;
                        ctx.drawImage(image, sx, sy, sw, sh, x, y, w, h);
                        return 1;
                    }
                }
            ]);
            return CanvasSimpleSprite;
        }(_assembler2.default);
        exports.default = CanvasSimpleSprite;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,