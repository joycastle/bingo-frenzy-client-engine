(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/canvas/renderers/label/index.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _assembler = require('../../../assembler');
        var _assembler2 = _interopRequireDefault(_assembler);
        var _CCLabel = require('../../../../components/CCLabel');
        var _CCLabel2 = _interopRequireDefault(_CCLabel);
        var _ttf = require('./ttf');
        var _ttf2 = _interopRequireDefault(_ttf);
        var _bmfont = require('./bmfont');
        var _bmfont2 = _interopRequireDefault(_bmfont);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var canvasPool = {
            pool: [],
            get: function get() {
                var data = this.pool.pop();
                if (!data) {
                    var canvas = document.createElement('canvas');
                    var context = canvas.getContext('2d');
                    data = {
                        canvas: canvas,
                        context: context
                    };
                }
                return data;
            },
            put: function put(canvas) {
                if (this.pool.length >= 32) {
                    return;
                }
                this.pool.push(canvas);
            }
        };
        _CCLabel2.default._canvasPool = canvasPool;
        _assembler2.default.register(_CCLabel2.default, {
            getConstructor: function getConstructor(label) {
                var ctor = _ttf2.default;
                if (label.font instanceof cc.BitmapFont) {
                    ctor = _bmfont2.default;
                } else if (label.cacheMode === _CCLabel2.default.CacheMode.CHAR) {
                    cc.warn('sorry, canvas mode does not support CHAR mode currently!');
                }
                return ctor;
            },
            TTF: _ttf2.default,
            Bmfont: _bmfont2.default
        });
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,