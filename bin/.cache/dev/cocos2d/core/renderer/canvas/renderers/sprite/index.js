(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/canvas/renderers/sprite/index.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _assembler = require('../../../assembler');
        var _assembler2 = _interopRequireDefault(_assembler);
        var _CCSprite = require('../../../../components/CCSprite');
        var _simple = require('./simple');
        var _simple2 = _interopRequireDefault(_simple);
        var _sliced = require('./sliced');
        var _sliced2 = _interopRequireDefault(_sliced);
        var _tiled = require('./tiled');
        var _tiled2 = _interopRequireDefault(_tiled);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var ctor = {
            getConstructor: function getConstructor(sprite) {
                var ctor = _simple2.default;
                switch (sprite.type) {
                case _CCSprite.Type.SLICED:
                    ctor = _sliced2.default;
                    break;
                case _CCSprite.Type.TILED:
                    ctor = _tiled2.default;
                    break;
                }
                return ctor;
            },
            Simple: _simple2.default,
            Sliced: _sliced2.default,
            Tiled: _tiled2.default
        };
        _assembler2.default.register(cc.Sprite, ctor);
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIiwiL1VzZXJzL1NoYXJlZC9iaW5nb19mcmVuenkvZW5naW5lL2NvY29zMmQvY29yZS9yZW5kZXJlci9jYW52YXMvcmVuZGVyZXJzL3Nwcml0ZS9pbmRleC5qcyJdLCJuYW1lcyI6WyJjdG9yIiwiZ2V0Q29uc3RydWN0b3IiLCJzcHJpdGUiLCJTaW1wbGUiLCJ0eXBlIiwiVHlwZSIsIlNMSUNFRCIsIlNsaWNlZCIsIlRJTEVEIiwiVGlsZWQiLCJBc2VtYmxlciIsInJlZ2lzdGVyIiwiY2MiLCJTcHJpdGUiXSwibWFwcGluZ3MiOiI7SUFBQSxJQUFBLE9BQUEsR0FBQSxPQUFBLE9BQUEsS0FBQSxXQUFBLElBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQTs7OztRQUNBLE9BQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQTs7UUFFQSxPQUFBLGlCQUFBLENBQUEsT0FBQSxDQUFBLE9BQUEsRUFBQSxVQUFBLENBQUE7Ozs7Ozs7UUFIQSxJQUFBLFVBQUEsR0FBQSxPQUFBLENBQUEsb0JBQUEsQ0FBQTs7UUFDQSxJQUFBLFNBQUEsR0FBQSxPQUFBLENBQUEsaUNBQUEsQ0FBQTtRQUVBLElBQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxVQUFBLENBQUE7O1FBQ0EsSUFBQSxPQUFBLEdBQUEsT0FBQSxDQUFBLFVBQUEsQ0FBQTs7UUFDQSxJQUFBLE1BQUEsR0FBQSxPQUFBLENBQUEsU0FBQSxDQUFBOzs7OztRQUVBLElBQUlBLElBQUFBLEdBQU87QUFBQSxZQUNQQyxjQUFBQSxFQURPLFNBQUEsY0FBQSxDQUNRQyxNQURSLEVBQ2dCO0FBQUEsZ0JBQ25CLElBQUlGLElBQUFBLEdBQU9HLFFBQUFBLENBQUFBLE9BQVgsQ0FEbUI7QUFBQSxnQkFFbkIsUUFBUUQsTUFBQUEsQ0FBT0UsSUFBZjtBQUFBLGdCQUNJLEtBQUtDLFNBQUFBLENBQUFBLElBQUFBLENBQUtDLE1BQVY7QUFBQSxvQkFDSU4sSUFBQUEsR0FBT08sUUFBQUEsQ0FBQUEsT0FBUFAsQ0FESjtBQUFBLG9CQUVJLE1BSFI7QUFBQSxnQkFJSSxLQUFLSyxTQUFBQSxDQUFBQSxJQUFBQSxDQUFLRyxLQUFWO0FBQUEsb0JBQ0lSLElBQUFBLEdBQU9TLE9BQUFBLENBQUFBLE9BQVBULENBREo7QUFBQSxvQkFFSSxNQU5SO0FBQUEsaUJBRm1CO0FBQUEsZ0JBV25CLE9BQU9BLElBQVAsQ0FYbUI7QUFBQSxhQURoQjtBQUFBLFlBZVBHLE1BQUFBLEVBQUFBLFFBQUFBLENBQUFBLE9BZk87QUFBQSxZQWdCUEksTUFBQUEsRUFBQUEsUUFBQUEsQ0FBQUEsT0FoQk87QUFBQSxZQWlCUEUsS0FBQUEsRUFBQUEsT0FBQUEsQ0FBQUEsT0FqQk87QUFBQSxTQUFYO1FBb0JBQyxXQUFBQSxDQUFBQSxPQUFBQSxDQUFTQyxRQUFURCxDQUFrQkUsRUFBQUEsQ0FBR0MsTUFBckJILEVBQTZCVixJQUE3QlU7Ozs7V0F0QkE7QUFBQTs7V0FBQTtBQUFBIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFzZW1ibGVyIGZyb20gJy4uLy4uLy4uL2Fzc2VtYmxlcic7XG5pbXBvcnQgeyBUeXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vY29tcG9uZW50cy9DQ1Nwcml0ZSc7XG5cbmltcG9ydCBTaW1wbGUgZnJvbSBcIi4vc2ltcGxlXCI7XG5pbXBvcnQgU2xpY2VkIGZyb20gXCIuL3NsaWNlZFwiO1xuaW1wb3J0IFRpbGVkIGZyb20gXCIuL3RpbGVkXCI7XG5cbmxldCBjdG9yID0ge1xuICAgIGdldENvbnN0cnVjdG9yKHNwcml0ZSkge1xuICAgICAgICBsZXQgY3RvciA9IFNpbXBsZTtcbiAgICAgICAgc3dpdGNoIChzcHJpdGUudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBUeXBlLlNMSUNFRDpcbiAgICAgICAgICAgICAgICBjdG9yID0gU2xpY2VkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBUeXBlLlRJTEVEOlxuICAgICAgICAgICAgICAgIGN0b3IgPSBUaWxlZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjdG9yO1xuICAgIH0sXG5cbiAgICBTaW1wbGUsXG4gICAgU2xpY2VkLFxuICAgIFRpbGVkXG59O1xuXG5Bc2VtYmxlci5yZWdpc3RlcihjYy5TcHJpdGUsIGN0b3IpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2Fzc2VtYmxlciA9IHJlcXVpcmUoJy4uLy4uLy4uL2Fzc2VtYmxlcicpO1xuXG52YXIgX2Fzc2VtYmxlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3NlbWJsZXIpO1xuXG52YXIgX0NDU3ByaXRlID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vY29tcG9uZW50cy9DQ1Nwcml0ZScpO1xuXG52YXIgX3NpbXBsZSA9IHJlcXVpcmUoJy4vc2ltcGxlJyk7XG5cbnZhciBfc2ltcGxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NpbXBsZSk7XG5cbnZhciBfc2xpY2VkID0gcmVxdWlyZSgnLi9zbGljZWQnKTtcblxudmFyIF9zbGljZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2xpY2VkKTtcblxudmFyIF90aWxlZCA9IHJlcXVpcmUoJy4vdGlsZWQnKTtcblxudmFyIF90aWxlZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90aWxlZCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBjdG9yID0ge1xuICAgIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiBnZXRDb25zdHJ1Y3RvcihzcHJpdGUpIHtcbiAgICAgICAgdmFyIGN0b3IgPSBfc2ltcGxlMi5kZWZhdWx0O1xuICAgICAgICBzd2l0Y2ggKHNwcml0ZS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIF9DQ1Nwcml0ZS5UeXBlLlNMSUNFRDpcbiAgICAgICAgICAgICAgICBjdG9yID0gX3NsaWNlZDIuZGVmYXVsdDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgX0NDU3ByaXRlLlR5cGUuVElMRUQ6XG4gICAgICAgICAgICAgICAgY3RvciA9IF90aWxlZDIuZGVmYXVsdDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjdG9yO1xuICAgIH0sXG5cblxuICAgIFNpbXBsZTogX3NpbXBsZTIuZGVmYXVsdCxcbiAgICBTbGljZWQ6IF9zbGljZWQyLmRlZmF1bHQsXG4gICAgVGlsZWQ6IF90aWxlZDIuZGVmYXVsdFxufTtcblxuX2Fzc2VtYmxlcjIuZGVmYXVsdC5yZWdpc3RlcihjYy5TcHJpdGUsIGN0b3IpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1sdVpHVjRMbXB6SWwwc0ltNWhiV1Z6SWpwYkltTjBiM0lpTENKblpYUkRiMjV6ZEhKMVkzUnZjaUlzSW5Od2NtbDBaU0lzSWxOcGJYQnNaU0lzSW5SNWNHVWlMQ0pVZVhCbElpd2lVMHhKUTBWRUlpd2lVMnhwWTJWa0lpd2lWRWxNUlVRaUxDSlVhV3hsWkNJc0lrRnpaVzFpYkdWeUlpd2ljbVZuYVhOMFpYSWlMQ0pqWXlJc0lsTndjbWwwWlNKZExDSnRZWEJ3YVc1bmN5STZJanM3UVVGQlFUczdPenRCUVVOQk96dEJRVVZCT3pzN08wRkJRMEU3T3pzN1FVRkRRVHM3T3pzN08wRkJSVUVzU1VGQlNVRXNUMEZCVHp0QlFVTlFReXhyUWtGRVR5d3dRa0ZEVVVNc1RVRkVVaXhGUVVOblFqdEJRVU51UWl4WlFVRkpSaXhQUVVGUFJ5eG5Ra0ZCV0R0QlFVTkJMR2RDUVVGUlJDeFBRVUZQUlN4SlFVRm1PMEZCUTBrc2FVSkJRVXRETEdWQlFVdERMRTFCUVZZN1FVRkRTVTRzZFVKQlFVOVBMR2RDUVVGUU8wRkJRMEU3UVVGRFNpeHBRa0ZCUzBZc1pVRkJTMGNzUzBGQlZqdEJRVU5KVWl4MVFrRkJUMU1zWlVGQlVEdEJRVU5CTzBGQlRsSTdPMEZCVTBFc1pVRkJUMVFzU1VGQlVEdEJRVU5JTEV0QllrMDdPenRCUVdWUVJ5dzBRa0ZtVHp0QlFXZENVRWtzTkVKQmFFSlBPMEZCYVVKUVJUdEJRV3BDVHl4RFFVRllPenRCUVc5Q1FVTXNiMEpCUVZORExGRkJRVlFzUTBGQmEwSkRMRWRCUVVkRExFMUJRWEpDTEVWQlFUWkNZaXhKUVVFM1FpSXNJbVpwYkdVaU9pSnBibVJsZUM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQkJjMlZ0WW14bGNpQm1jbTl0SUNjdUxpOHVMaTh1TGk5aGMzTmxiV0pzWlhJbk8xeHVhVzF3YjNKMElIc2dWSGx3WlNCOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwyTnZiWEJ2Ym1WdWRITXZRME5UY0hKcGRHVW5PMXh1WEc1cGJYQnZjblFnVTJsdGNHeGxJR1p5YjIwZ1hDSXVMM05wYlhCc1pWd2lPMXh1YVcxd2IzSjBJRk5zYVdObFpDQm1jbTl0SUZ3aUxpOXpiR2xqWldSY0lqdGNibWx0Y0c5eWRDQlVhV3hsWkNCbWNtOXRJRndpTGk5MGFXeGxaRndpTzF4dVhHNXNaWFFnWTNSdmNpQTlJSHRjYmlBZ0lDQm5aWFJEYjI1emRISjFZM1J2Y2loemNISnBkR1VwSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJR04wYjNJZ1BTQlRhVzF3YkdVN1hHNGdJQ0FnSUNBZ0lITjNhWFJqYUNBb2MzQnlhWFJsTG5SNWNHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnVkhsd1pTNVRURWxEUlVRNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kzUnZjaUE5SUZOc2FXTmxaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdWSGx3WlM1VVNVeEZSRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqZEc5eUlEMGdWR2xzWldRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kzUnZjanRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdVMmx0Y0d4bExGeHVJQ0FnSUZOc2FXTmxaQ3hjYmlBZ0lDQlVhV3hsWkZ4dWZUdGNibHh1UVhObGJXSnNaWEl1Y21WbmFYTjBaWElvWTJNdVUzQnlhWFJsTENCamRHOXlLVHRjYmlKZGZRPT0iXX0=