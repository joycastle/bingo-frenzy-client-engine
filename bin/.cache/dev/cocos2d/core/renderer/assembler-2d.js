(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/assembler-2d.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _assembler = require('./assembler');
        var _assembler2 = _interopRequireDefault(_assembler);
        var _manager = require('./utils/dynamic-atlas/manager');
        var _manager2 = _interopRequireDefault(_manager);
        var _renderData = require('./webgl/render-data');
        var _renderData2 = _interopRequireDefault(_renderData);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var Assembler2D = function (_Assembler) {
            _inherits(Assembler2D, _Assembler);
            function Assembler2D() {
                _classCallCheck(this, Assembler2D);
                var _this = _possibleConstructorReturn(this, (Assembler2D.__proto__ || Object.getPrototypeOf(Assembler2D)).call(this));
                _this._renderData = new _renderData2.default();
                _this._renderData.init(_this);
                _this.initData();
                _this.initLocal();
                return _this;
            }
            _createClass(Assembler2D, [
                {
                    key: 'initData',
                    value: function initData() {
                        var data = this._renderData;
                        data.createQuadData(0, this.verticesFloats, this.indicesCount);
                    }
                },
                {
                    key: 'initLocal',
                    value: function initLocal() {
                        this._local = [];
                        this._local.length = 4;
                    }
                },
                {
                    key: 'updateColor',
                    value: function updateColor(comp, color) {
                        var uintVerts = this._renderData.uintVDatas[0];
                        if (!uintVerts)
                            return;
                        color = color || comp.node.color._val;
                        var floatsPerVert = this.floatsPerVert;
                        var colorOffset = this.colorOffset;
                        for (var i = colorOffset, l = uintVerts.length; i < l; i += floatsPerVert) {
                            uintVerts[i] = color;
                        }
                    }
                },
                {
                    key: 'getBuffer',
                    value: function getBuffer() {
                        return cc.renderer._handle._meshBuffer;
                    }
                },
                {
                    key: 'updateWorldVerts',
                    value: function updateWorldVerts(comp) {
                        var local = this._local;
                        var verts = this._renderData.vDatas[0];
                        var matrix = comp.node._worldMatrix;
                        var matrixm = matrix.m, a = matrixm[0], b = matrixm[1], c = matrixm[4], d = matrixm[5], tx = matrixm[12], ty = matrixm[13];
                        var vl = local[0], vr = local[2], vb = local[1], vt = local[3];
                        var justTranslate = a === 1 && b === 0 && c === 0 && d === 1;
                        if (justTranslate) {
                            verts[0] = vl + tx;
                            verts[1] = vb + ty;
                            verts[5] = vr + tx;
                            verts[6] = vb + ty;
                            verts[10] = vl + tx;
                            verts[11] = vt + ty;
                            verts[15] = vr + tx;
                            verts[16] = vt + ty;
                        } else {
                            var al = a * vl, ar = a * vr, bl = b * vl, br = b * vr, cb = c * vb, ct = c * vt, db = d * vb, dt = d * vt;
                            verts[0] = al + cb + tx;
                            verts[1] = bl + db + ty;
                            verts[5] = ar + cb + tx;
                            verts[6] = br + db + ty;
                            verts[10] = al + ct + tx;
                            verts[11] = bl + dt + ty;
                            verts[15] = ar + ct + tx;
                            verts[16] = br + dt + ty;
                        }
                    }
                },
                {
                    key: 'fillBuffers',
                    value: function fillBuffers(comp, renderer) {
                        if (renderer.worldMatDirty) {
                            this.updateWorldVerts(comp);
                        }
                        var renderData = this._renderData;
                        var vData = renderData.vDatas[0];
                        var iData = renderData.iDatas[0];
                        var buffer = this.getBuffer(renderer);
                        var offsetInfo = buffer.request(this.verticesCount, this.indicesCount);
                        var vertexOffset = offsetInfo.byteOffset >> 2, vbuf = buffer._vData;
                        if (vData.length + vertexOffset > vbuf.length) {
                            vbuf.set(vData.subarray(0, vbuf.length - vertexOffset), vertexOffset);
                        } else {
                            vbuf.set(vData, vertexOffset);
                        }
                        var ibuf = buffer._iData, indiceOffset = offsetInfo.indiceOffset, vertexId = offsetInfo.vertexOffset;
                        for (var i = 0, l = iData.length; i < l; i++) {
                            ibuf[indiceOffset++] = vertexId + iData[i];
                        }
                    }
                },
                {
                    key: 'packToDynamicAtlas',
                    value: function packToDynamicAtlas(comp, frame) {
                        if (frame && !CC_TEST) {
                            if (!frame._original && _manager2.default && frame._texture.packable) {
                                var packedFrame = _manager2.default.insertSpriteFrame(frame);
                                if (packedFrame) {
                                    frame._setDynamicAtlasFrame(packedFrame);
                                }
                            }
                            var material = comp.sharedMaterials[0];
                            if (!material)
                                return;
                            if (material.getProperty('texture') !== frame._texture) {
                                comp._vertsDirty = true;
                                comp._activateMaterial(true);
                            }
                        }
                    }
                },
                {
                    key: 'verticesFloats',
                    get: function get() {
                        return this.verticesCount * this.floatsPerVert;
                    }
                }
            ]);
            return Assembler2D;
        }(_assembler2.default);
        exports.default = Assembler2D;
        cc.js.addon(Assembler2D.prototype, {
            floatsPerVert: 5,
            verticesCount: 4,
            indicesCount: 6,
            uvOffset: 2,
            colorOffset: 4
        });
        cc.Assembler2D = Assembler2D;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2VtYmxlci0yZC5qcyIsIi9Vc2Vycy9nYW95YW5nL1dvcmtTcGFjZS9qb3ljYXN0bGUvYmluZ28vY2xpZW50L2JpbmdvL2VuZ2luZS9jb2NvczJkL2NvcmUvcmVuZGVyZXIvYXNzZW1ibGVyLTJkLmpzIl0sIm5hbWVzIjpbIkFzc2VtYmxlcjJEIiwiX3JlbmRlckRhdGEiLCJSZW5kZXJEYXRhIiwiaW5pdCIsImluaXREYXRhIiwiaW5pdExvY2FsIiwiZGF0YSIsImNyZWF0ZVF1YWREYXRhIiwidmVydGljZXNGbG9hdHMiLCJpbmRpY2VzQ291bnQiLCJfbG9jYWwiLCJsZW5ndGgiLCJjb21wIiwiY29sb3IiLCJ1aW50VmVydHMiLCJ1aW50VkRhdGFzIiwibm9kZSIsIl92YWwiLCJmbG9hdHNQZXJWZXJ0IiwiY29sb3JPZmZzZXQiLCJpIiwibCIsImNjIiwicmVuZGVyZXIiLCJfaGFuZGxlIiwiX21lc2hCdWZmZXIiLCJsb2NhbCIsInZlcnRzIiwidkRhdGFzIiwibWF0cml4IiwiX3dvcmxkTWF0cml4IiwibWF0cml4bSIsIm0iLCJhIiwiYiIsImMiLCJkIiwidHgiLCJ0eSIsInZsIiwidnIiLCJ2YiIsInZ0IiwianVzdFRyYW5zbGF0ZSIsImFsIiwiYXIiLCJibCIsImJyIiwiY2IiLCJjdCIsImRiIiwiZHQiLCJ3b3JsZE1hdERpcnR5IiwidXBkYXRlV29ybGRWZXJ0cyIsInJlbmRlckRhdGEiLCJ2RGF0YSIsImlEYXRhIiwiaURhdGFzIiwiYnVmZmVyIiwiZ2V0QnVmZmVyIiwib2Zmc2V0SW5mbyIsInJlcXVlc3QiLCJ2ZXJ0aWNlc0NvdW50IiwidmVydGV4T2Zmc2V0IiwiYnl0ZU9mZnNldCIsInZidWYiLCJfdkRhdGEiLCJzZXQiLCJzdWJhcnJheSIsImlidWYiLCJfaURhdGEiLCJpbmRpY2VPZmZzZXQiLCJ2ZXJ0ZXhJZCIsImZyYW1lIiwiQ0NfVEVTVCIsIl9vcmlnaW5hbCIsImR5bmFtaWNBdGxhc01hbmFnZXIiLCJfdGV4dHVyZSIsInBhY2thYmxlIiwicGFja2VkRnJhbWUiLCJpbnNlcnRTcHJpdGVGcmFtZSIsIl9zZXREeW5hbWljQXRsYXNGcmFtZSIsIm1hdGVyaWFsIiwic2hhcmVkTWF0ZXJpYWxzIiwiZ2V0UHJvcGVydHkiLCJfdmVydHNEaXJ0eSIsIl9hY3RpdmF0ZU1hdGVyaWFsIiwiQXNzZW1ibGVyIiwianMiLCJhZGRvbiIsInByb3RvdHlwZSIsInV2T2Zmc2V0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztRQUFBLElBQUEsVUFBQSxHQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUE7O1FBQ0EsSUFBQSxRQUFBLEdBQUEsT0FBQSxDQUFBLCtCQUFBLENBQUE7O1FBQ0EsSUFBQSxXQUFBLEdBQUEsT0FBQSxDQUFBLHFCQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7WUFFcUJBLFdBQUFBOztZQUNqQixTQUFBLFdBQUEsR0FBZTtBQUFBLGdCQUFBLGVBQUEsQ0FBQSxJQUFBLEVBQUEsV0FBQSxFQUFBO0FBQUEsZ0JBQUEsSUFBQSxLQUFBLEdBQUEsMEJBQUEsQ0FBQSxJQUFBLEVBQUEsQ0FBQSxXQUFBLENBQUEsU0FBQSxJQUFBLE1BQUEsQ0FBQSxjQUFBLENBQUEsV0FBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsQ0FBQTtBQUFBLGdCQUdYLEtBQUEsQ0FBS0MsV0FBTCxHQUFtQixJQUFJQyxZQUFBQSxDQUFBQSxPQUFKLEVBQW5CLENBSFc7QUFBQSxnQkFJWCxLQUFBLENBQUtELFdBQUwsQ0FBaUJFLElBQWpCLENBQUEsS0FBQSxFQUpXO0FBQUEsZ0JBTVgsS0FBQSxDQUFLQyxRQUFMLEdBTlc7QUFBQSxnQkFPWCxLQUFBLENBQUtDLFNBQUwsR0FQVztBQUFBLGdCQUFBLE9BQUEsS0FBQSxDQUFBO0FBQUE7Ozs7K0NBY0g7QUFBQSx3QkFDUixJQUFJQyxJQUFBQSxHQUFPLEtBQUtMLFdBQWhCLENBRFE7QUFBQSx3QkFFUkssSUFBQUEsQ0FB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QSxLQUFBO1FBQ0EsaUJBQUEsQ0FBQSxrQkFBQSxDQUFBLFVBQUEsRUFBQSxZQUFBO0FBQUEsNERBQUE7QUFBQSxTQUFBIiwiZmlsZSI6ImFzc2VtYmxlci0yZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBc3NlbWJsZXIgZnJvbSAnLi9hc3NlbWJsZXInO1xuaW1wb3J0IGR5bmFtaWNBdGxhc01hbmFnZXIgZnJvbSAnLi91dGlscy9keW5hbWljLWF0bGFzL21hbmFnZXInO1xuaW1wb3J0IFJlbmRlckRhdGEgZnJvbSAnLi93ZWJnbC9yZW5kZXItZGF0YSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFzc2VtYmxlcjJEIGV4dGVuZHMgQXNzZW1ibGVyIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5fcmVuZGVyRGF0YSA9IG5ldyBSZW5kZXJEYXRhKCk7XG4gICAgICAgIHRoaXMuX3JlbmRlckRhdGEuaW5pdCh0aGlzKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuaW5pdERhdGEoKTtcbiAgICAgICAgdGhpcy5pbml0TG9jYWwoKTtcbiAgICB9XG5cbiAgICBnZXQgdmVydGljZXNGbG9hdHMgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52ZXJ0aWNlc0NvdW50ICogdGhpcy5mbG9hdHNQZXJWZXJ0O1xuICAgIH1cblxuICAgIGluaXREYXRhICgpIHtcbiAgICAgICAgbGV0IGRhdGEgPSB0aGlzLl9yZW5kZXJEYXRhO1xuICAgICAgICBkYXRhLmNyZWF0ZVF1YWREYXRhKDAsIHRoaXMudmVydGljZXNGbG9hdHMsIHRoaXMuaW5kaWNlc0NvdW50KTtcbiAgICB9XG4gICAgaW5pdExvY2FsICgpIHtcbiAgICAgICAgdGhpcy5fbG9jYWwgPSBbXTtcbiAgICAgICAgdGhpcy5fbG9jYWwubGVuZ3RoID0gNDtcbiAgICB9XG5cbiAgICB1cGRhdGVDb2xvciAoY29tcCwgY29sb3IpIHtcbiAgICAgICAgbGV0IHVpbnRWZXJ0cyA9IHRoaXMuX3JlbmRlckRhdGEudWludFZEYXRhc1swXTtcbiAgICAgICAgaWYgKCF1aW50VmVydHMpIHJldHVybjtcbiAgICAgICAgY29sb3IgPSBjb2xvciB8fGNvbXAubm9kZS5jb2xvci5fdmFsO1xuICAgICAgICBsZXQgZmxvYXRzUGVyVmVydCA9IHRoaXMuZmxvYXRzUGVyVmVydDtcbiAgICAgICAgbGV0IGNvbG9yT2Zmc2V0ID0gdGhpcy5jb2xvck9mZnNldDtcbiAgICAgICAgZm9yIChsZXQgaSA9IGNvbG9yT2Zmc2V0LCBsID0gdWludFZlcnRzLmxlbmd0aDsgaSA8IGw7IGkgKz0gZmxvYXRzUGVyVmVydCkge1xuICAgICAgICAgICAgdWludFZlcnRzW2ldID0gY29sb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRCdWZmZXIgKCkge1xuICAgICAgICByZXR1cm4gY2MucmVuZGVyZXIuX2hhbmRsZS5fbWVzaEJ1ZmZlcjtcbiAgICB9XG5cbiAgICB1cGRhdGVXb3JsZFZlcnRzIChjb21wKSB7XG4gICAgICAgIGxldCBsb2NhbCA9IHRoaXMuX2xvY2FsO1xuICAgICAgICBsZXQgdmVydHMgPSB0aGlzLl9yZW5kZXJEYXRhLnZEYXRhc1swXTtcblxuICAgICAgICBsZXQgbWF0cml4ID0gY29tcC5ub2RlLl93b3JsZE1hdHJpeDtcbiAgICAgICAgbGV0IG1hdHJpeG0gPSBtYXRyaXgubSxcbiAgICAgICAgICAgIGEgPSBtYXRyaXhtWzBdLCBiID0gbWF0cml4bVsxXSwgYyA9IG1hdHJpeG1bNF0sIGQgPSBtYXRyaXhtWzVdLFxuICAgICAgICAgICAgdHggPSBtYXRyaXhtWzEyXSwgdHkgPSBtYXRyaXhtWzEzXTtcblxuICAgICAgICBsZXQgdmwgPSBsb2NhbFswXSwgdnIgPSBsb2NhbFsyXSxcbiAgICAgICAgICAgIHZiID0gbG9jYWxbMV0sIHZ0ID0gbG9jYWxbM107XG4gICAgICAgIFxuICAgICAgICBsZXQganVzdFRyYW5zbGF0ZSA9IGEgPT09IDEgJiYgYiA9PT0gMCAmJiBjID09PSAwICYmIGQgPT09IDE7XG5cbiAgICAgICAgaWYgKGp1c3RUcmFuc2xhdGUpIHtcbiAgICAgICAgICAgIC8vIGxlZnQgYm90dG9tXG4gICAgICAgICAgICB2ZXJ0c1swXSA9IHZsICsgdHg7XG4gICAgICAgICAgICB2ZXJ0c1sxXSA9IHZiICsgdHk7XG4gICAgICAgICAgICAvLyByaWdodCBib3R0b21cbiAgICAgICAgICAgIHZlcnRzWzVdID0gdnIgKyB0eDtcbiAgICAgICAgICAgIHZlcnRzWzZdID0gdmIgKyB0eTtcbiAgICAgICAgICAgIC8vIGxlZnQgdG9wXG4gICAgICAgICAgICB2ZXJ0c1sxMF0gPSB2bCArIHR4O1xuICAgICAgICAgICAgdmVydHNbMTFdID0gdnQgKyB0eTtcbiAgICAgICAgICAgIC8vIHJpZ2h0IHRvcFxuICAgICAgICAgICAgdmVydHNbMTVdID0gdnIgKyB0eDtcbiAgICAgICAgICAgIHZlcnRzWzE2XSA9IHZ0ICsgdHk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgYWwgPSBhICogdmwsIGFyID0gYSAqIHZyLFxuICAgICAgICAgICAgYmwgPSBiICogdmwsIGJyID0gYiAqIHZyLFxuICAgICAgICAgICAgY2IgPSBjICogdmIsIGN0ID0gYyAqIHZ0LFxuICAgICAgICAgICAgZGIgPSBkICogdmIsIGR0ID0gZCAqIHZ0O1xuXG4gICAgICAgICAgICAvLyBsZWZ0IGJvdHRvbVxuICAgICAgICAgICAgdmVydHNbMF0gPSBhbCArIGNiICsgdHg7XG4gICAgICAgICAgICB2ZXJ0c1sxXSA9IGJsICsgZGIgKyB0eTtcbiAgICAgICAgICAgIC8vIHJpZ2h0IGJvdHRvbVxuICAgICAgICAgICAgdmVydHNbNV0gPSBhciArIGNiICsgdHg7XG4gICAgICAgICAgICB2ZXJ0c1s2XSA9IGJyICsgZGIgKyB0eTtcbiAgICAgICAgICAgIC8vIGxlZnQgdG9wXG4gICAgICAgICAgICB2ZXJ0c1sxMF0gPSBhbCArIGN0ICsgdHg7XG4gICAgICAgICAgICB2ZXJ0c1sxMV0gPSBibCArIGR0ICsgdHk7XG4gICAgICAgICAgICAvLyByaWdodCB0b3BcbiAgICAgICAgICAgIHZlcnRzWzE1XSA9IGFyICsgY3QgKyB0eDtcbiAgICAgICAgICAgIHZlcnRzWzE2XSA9IGJyICsgZHQgKyB0eTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZpbGxCdWZmZXJzIChjb21wLCByZW5kZXJlcikge1xuICAgICAgICBpZiAocmVuZGVyZXIud29ybGRNYXREaXJ0eSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVXb3JsZFZlcnRzKGNvbXApO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlbmRlckRhdGEgPSB0aGlzLl9yZW5kZXJEYXRhO1xuICAgICAgICBsZXQgdkRhdGEgPSByZW5kZXJEYXRhLnZEYXRhc1swXTtcbiAgICAgICAgbGV0IGlEYXRhID0gcmVuZGVyRGF0YS5pRGF0YXNbMF07XG5cbiAgICAgICAgbGV0IGJ1ZmZlciA9IHRoaXMuZ2V0QnVmZmVyKHJlbmRlcmVyKTtcbiAgICAgICAgbGV0IG9mZnNldEluZm8gPSBidWZmZXIucmVxdWVzdCh0aGlzLnZlcnRpY2VzQ291bnQsIHRoaXMuaW5kaWNlc0NvdW50KTtcblxuICAgICAgICAvLyBidWZmZXIgZGF0YSBtYXkgYmUgcmVhbGxvYywgbmVlZCBnZXQgcmVmZXJlbmNlIGFmdGVyIHJlcXVlc3QuXG5cbiAgICAgICAgLy8gZmlsbCB2ZXJ0aWNlc1xuICAgICAgICBsZXQgdmVydGV4T2Zmc2V0ID0gb2Zmc2V0SW5mby5ieXRlT2Zmc2V0ID4+IDIsXG4gICAgICAgICAgICB2YnVmID0gYnVmZmVyLl92RGF0YTtcblxuICAgICAgICBpZiAodkRhdGEubGVuZ3RoICsgdmVydGV4T2Zmc2V0ID4gdmJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZidWYuc2V0KHZEYXRhLnN1YmFycmF5KDAsIHZidWYubGVuZ3RoIC0gdmVydGV4T2Zmc2V0KSwgdmVydGV4T2Zmc2V0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZidWYuc2V0KHZEYXRhLCB2ZXJ0ZXhPZmZzZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZmlsbCBpbmRpY2VzXG4gICAgICAgIGxldCBpYnVmID0gYnVmZmVyLl9pRGF0YSxcbiAgICAgICAgICAgIGluZGljZU9mZnNldCA9IG9mZnNldEluZm8uaW5kaWNlT2Zmc2V0LFxuICAgICAgICAgICAgdmVydGV4SWQgPSBvZmZzZXRJbmZvLnZlcnRleE9mZnNldDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBpRGF0YS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGlidWZbaW5kaWNlT2Zmc2V0KytdID0gdmVydGV4SWQgKyBpRGF0YVtpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHBhY2tUb0R5bmFtaWNBdGxhcyAoY29tcCwgZnJhbWUpIHtcbiAgICAgICAgLy8gVE9ETzogTWF0ZXJpYWwgQVBJIGRlc2lnbiBhbmQgZXhwb3J0IGZyb20gZWRpdG9yIGNvdWxkIGFmZmVjdCB0aGUgbWF0ZXJpYWwgYWN0aXZhdGlvbiBwcm9jZXNzXG4gICAgICAgIC8vIG5lZWQgdG8gdXBkYXRlIHRoZSBsb2dpYyBoZXJlXG4gICAgICAgIGlmIChmcmFtZSAmJiAhQ0NfVEVTVCkge1xuICAgICAgICAgICAgaWYgKCFmcmFtZS5fb3JpZ2luYWwgJiYgZHluYW1pY0F0bGFzTWFuYWdlciAmJiBmcmFtZS5fdGV4dHVyZS5wYWNrYWJsZSkge1xuICAgICAgICAgICAgICAgIGxldCBwYWNrZWRGcmFtZSA9IGR5bmFtaWNBdGxhc01hbmFnZXIuaW5zZXJ0U3ByaXRlRnJhbWUoZnJhbWUpO1xuICAgICAgICAgICAgICAgIGlmIChwYWNrZWRGcmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBmcmFtZS5fc2V0RHluYW1pY0F0bGFzRnJhbWUocGFja2VkRnJhbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBtYXRlcmlhbCA9IGNvbXAuc2hhcmVkTWF0ZXJpYWxzWzBdO1xuICAgICAgICAgICAgaWYgKCFtYXRlcmlhbCkgcmV0dXJuO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwuZ2V0UHJvcGVydHkoJ3RleHR1cmUnKSAhPT0gZnJhbWUuX3RleHR1cmUpIHtcbiAgICAgICAgICAgICAgICAvLyB0ZXh0dXJlIHdhcyBwYWNrZWQgdG8gZHluYW1pYyBhdGxhcywgc2hvdWxkIHVwZGF0ZSB1dnNcbiAgICAgICAgICAgICAgICBjb21wLl92ZXJ0c0RpcnR5ID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIGNvbXAuX2FjdGl2YXRlTWF0ZXJpYWwodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNjLmpzLmFkZG9uKEFzc2VtYmxlcjJELnByb3RvdHlwZSwge1xuICAgIGZsb2F0c1BlclZlcnQ6IDUsXG5cbiAgICB2ZXJ0aWNlc0NvdW50OiA0LFxuICAgIGluZGljZXNDb3VudDogNixcblxuICAgIHV2T2Zmc2V0OiAyLFxuICAgIGNvbG9yT2Zmc2V0OiA0LFxufSk7XG5cbmNjLkFzc2VtYmxlcjJEID0gQXNzZW1ibGVyMkQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9hc3NlbWJsZXIgPSByZXF1aXJlKCcuL2Fzc2VtYmxlcicpO1xuXG52YXIgX2Fzc2VtYmxlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3NlbWJsZXIpO1xuXG52YXIgX21hbmFnZXIgPSByZXF1aXJlKCcuL3V0aWxzL2R5bmFtaWMtYXRsYXMvbWFuYWdlcicpO1xuXG52YXIgX21hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWFuYWdlcik7XG5cbnZhciBfcmVuZGVyRGF0YSA9IHJlcXVpcmUoJy4vd2ViZ2wvcmVuZGVyLWRhdGEnKTtcblxudmFyIF9yZW5kZXJEYXRhMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlbmRlckRhdGEpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBBc3NlbWJsZXIyRCA9IGZ1bmN0aW9uIChfQXNzZW1ibGVyKSB7XG4gICAgX2luaGVyaXRzKEFzc2VtYmxlcjJELCBfQXNzZW1ibGVyKTtcblxuICAgIGZ1bmN0aW9uIEFzc2VtYmxlcjJEKCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXNzZW1ibGVyMkQpO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChBc3NlbWJsZXIyRC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEFzc2VtYmxlcjJEKSkuY2FsbCh0aGlzKSk7XG5cbiAgICAgICAgX3RoaXMuX3JlbmRlckRhdGEgPSBuZXcgX3JlbmRlckRhdGEyLmRlZmF1bHQoKTtcbiAgICAgICAgX3RoaXMuX3JlbmRlckRhdGEuaW5pdChfdGhpcyk7XG5cbiAgICAgICAgX3RoaXMuaW5pdERhdGEoKTtcbiAgICAgICAgX3RoaXMuaW5pdExvY2FsKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoQXNzZW1ibGVyMkQsIFt7XG4gICAgICAgIGtleTogJ2luaXREYXRhJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXREYXRhKCkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9yZW5kZXJEYXRhO1xuICAgICAgICAgICAgZGF0YS5jcmVhdGVRdWFkRGF0YSgwLCB0aGlzLnZlcnRpY2VzRmxvYXRzLCB0aGlzLmluZGljZXNDb3VudCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2luaXRMb2NhbCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0TG9jYWwoKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2NhbCA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbG9jYWwubGVuZ3RoID0gNDtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAndXBkYXRlQ29sb3InLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlQ29sb3IoY29tcCwgY29sb3IpIHtcbiAgICAgICAgICAgIHZhciB1aW50VmVydHMgPSB0aGlzLl9yZW5kZXJEYXRhLnVpbnRWRGF0YXNbMF07XG4gICAgICAgICAgICBpZiAoIXVpbnRWZXJ0cykgcmV0dXJuO1xuICAgICAgICAgICAgY29sb3IgPSBjb2xvciB8fCBjb21wLm5vZGUuY29sb3IuX3ZhbDtcbiAgICAgICAgICAgIHZhciBmbG9hdHNQZXJWZXJ0ID0gdGhpcy5mbG9hdHNQZXJWZXJ0O1xuICAgICAgICAgICAgdmFyIGNvbG9yT2Zmc2V0ID0gdGhpcy5jb2xvck9mZnNldDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBjb2xvck9mZnNldCwgbCA9IHVpbnRWZXJ0cy5sZW5ndGg7IGkgPCBsOyBpICs9IGZsb2F0c1BlclZlcnQpIHtcbiAgICAgICAgICAgICAgICB1aW50VmVydHNbaV0gPSBjb2xvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZ2V0QnVmZmVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEJ1ZmZlcigpIHtcbiAgICAgICAgICAgIHJldHVybiBjYy5yZW5kZXJlci5faGFuZGxlLl9tZXNoQnVmZmVyO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICd1cGRhdGVXb3JsZFZlcnRzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVdvcmxkVmVydHMoY29tcCkge1xuICAgICAgICAgICAgdmFyIGxvY2FsID0gdGhpcy5fbG9jYWw7XG4gICAgICAgICAgICB2YXIgdmVydHMgPSB0aGlzLl9yZW5kZXJEYXRhLnZEYXRhc1swXTtcblxuICAgICAgICAgICAgdmFyIG1hdHJpeCA9IGNvbXAubm9kZS5fd29ybGRNYXRyaXg7XG4gICAgICAgICAgICB2YXIgbWF0cml4bSA9IG1hdHJpeC5tLFxuICAgICAgICAgICAgICAgIGEgPSBtYXRyaXhtWzBdLFxuICAgICAgICAgICAgICAgIGIgPSBtYXRyaXhtWzFdLFxuICAgICAgICAgICAgICAgIGMgPSBtYXRyaXhtWzRdLFxuICAgICAgICAgICAgICAgIGQgPSBtYXRyaXhtWzVdLFxuICAgICAgICAgICAgICAgIHR4ID0gbWF0cml4bVsxMl0sXG4gICAgICAgICAgICAgICAgdHkgPSBtYXRyaXhtWzEzXTtcblxuICAgICAgICAgICAgdmFyIHZsID0gbG9jYWxbMF0sXG4gICAgICAgICAgICAgICAgdnIgPSBsb2NhbFsyXSxcbiAgICAgICAgICAgICAgICB2YiA9IGxvY2FsWzFdLFxuICAgICAgICAgICAgICAgIHZ0ID0gbG9jYWxbM107XG5cbiAgICAgICAgICAgIHZhciBqdXN0VHJhbnNsYXRlID0gYSA9PT0gMSAmJiBiID09PSAwICYmIGMgPT09IDAgJiYgZCA9PT0gMTtcblxuICAgICAgICAgICAgaWYgKGp1c3RUcmFuc2xhdGUpIHtcbiAgICAgICAgICAgICAgICAvLyBsZWZ0IGJvdHRvbVxuICAgICAgICAgICAgICAgIHZlcnRzWzBdID0gdmwgKyB0eDtcbiAgICAgICAgICAgICAgICB2ZXJ0c1sxXSA9IHZiICsgdHk7XG4gICAgICAgICAgICAgICAgLy8gcmlnaHQgYm90dG9tXG4gICAgICAgICAgICAgICAgdmVydHNbNV0gPSB2ciArIHR4O1xuICAgICAgICAgICAgICAgIHZlcnRzWzZdID0gdmIgKyB0eTtcbiAgICAgICAgICAgICAgICAvLyBsZWZ0IHRvcFxuICAgICAgICAgICAgICAgIHZlcnRzWzEwXSA9IHZsICsgdHg7XG4gICAgICAgICAgICAgICAgdmVydHNbMTFdID0gdnQgKyB0eTtcbiAgICAgICAgICAgICAgICAvLyByaWdodCB0b3BcbiAgICAgICAgICAgICAgICB2ZXJ0c1sxNV0gPSB2ciArIHR4O1xuICAgICAgICAgICAgICAgIHZlcnRzWzE2XSA9IHZ0ICsgdHk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBhbCA9IGEgKiB2bCxcbiAgICAgICAgICAgICAgICAgICAgYXIgPSBhICogdnIsXG4gICAgICAgICAgICAgICAgICAgIGJsID0gYiAqIHZsLFxuICAgICAgICAgICAgICAgICAgICBiciA9IGIgKiB2cixcbiAgICAgICAgICAgICAgICAgICAgY2IgPSBjICogdmIsXG4gICAgICAgICAgICAgICAgICAgIGN0ID0gYyAqIHZ0LFxuICAgICAgICAgICAgICAgICAgICBkYiA9IGQgKiB2YixcbiAgICAgICAgICAgICAgICAgICAgZHQgPSBkICogdnQ7XG5cbiAgICAgICAgICAgICAgICAvLyBsZWZ0IGJvdHRvbVxuICAgICAgICAgICAgICAgIHZlcnRzWzBdID0gYWwgKyBjYiArIHR4O1xuICAgICAgICAgICAgICAgIHZlcnRzWzFdID0gYmwgKyBkYiArIHR5O1xuICAgICAgICAgICAgICAgIC8vIHJpZ2h0IGJvdHRvbVxuICAgICAgICAgICAgICAgIHZlcnRzWzVdID0gYXIgKyBjYiArIHR4O1xuICAgICAgICAgICAgICAgIHZlcnRzWzZdID0gYnIgKyBkYiArIHR5O1xuICAgICAgICAgICAgICAgIC8vIGxlZnQgdG9wXG4gICAgICAgICAgICAgICAgdmVydHNbMTBdID0gYWwgKyBjdCArIHR4O1xuICAgICAgICAgICAgICAgIHZlcnRzWzExXSA9IGJsICsgZHQgKyB0eTtcbiAgICAgICAgICAgICAgICAvLyByaWdodCB0b3BcbiAgICAgICAgICAgICAgICB2ZXJ0c1sxNV0gPSBhciArIGN0ICsgdHg7XG4gICAgICAgICAgICAgICAgdmVydHNbMTZdID0gYnIgKyBkdCArIHR5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdmaWxsQnVmZmVycycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBmaWxsQnVmZmVycyhjb21wLCByZW5kZXJlcikge1xuICAgICAgICAgICAgaWYgKHJlbmRlcmVyLndvcmxkTWF0RGlydHkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVdvcmxkVmVydHMoY29tcCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciByZW5kZXJEYXRhID0gdGhpcy5fcmVuZGVyRGF0YTtcbiAgICAgICAgICAgIHZhciB2RGF0YSA9IHJlbmRlckRhdGEudkRhdGFzWzBdO1xuICAgICAgICAgICAgdmFyIGlEYXRhID0gcmVuZGVyRGF0YS5pRGF0YXNbMF07XG5cbiAgICAgICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmdldEJ1ZmZlcihyZW5kZXJlcik7XG4gICAgICAgICAgICB2YXIgb2Zmc2V0SW5mbyA9IGJ1ZmZlci5yZXF1ZXN0KHRoaXMudmVydGljZXNDb3VudCwgdGhpcy5pbmRpY2VzQ291bnQpO1xuXG4gICAgICAgICAgICAvLyBidWZmZXIgZGF0YSBtYXkgYmUgcmVhbGxvYywgbmVlZCBnZXQgcmVmZXJlbmNlIGFmdGVyIHJlcXVlc3QuXG5cbiAgICAgICAgICAgIC8vIGZpbGwgdmVydGljZXNcbiAgICAgICAgICAgIHZhciB2ZXJ0ZXhPZmZzZXQgPSBvZmZzZXRJbmZvLmJ5dGVPZmZzZXQgPj4gMixcbiAgICAgICAgICAgICAgICB2YnVmID0gYnVmZmVyLl92RGF0YTtcblxuICAgICAgICAgICAgaWYgKHZEYXRhLmxlbmd0aCArIHZlcnRleE9mZnNldCA+IHZidWYubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdmJ1Zi5zZXQodkRhdGEuc3ViYXJyYXkoMCwgdmJ1Zi5sZW5ndGggLSB2ZXJ0ZXhPZmZzZXQpLCB2ZXJ0ZXhPZmZzZXQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YnVmLnNldCh2RGF0YSwgdmVydGV4T2Zmc2V0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZmlsbCBpbmRpY2VzXG4gICAgICAgICAgICB2YXIgaWJ1ZiA9IGJ1ZmZlci5faURhdGEsXG4gICAgICAgICAgICAgICAgaW5kaWNlT2Zmc2V0ID0gb2Zmc2V0SW5mby5pbmRpY2VPZmZzZXQsXG4gICAgICAgICAgICAgICAgdmVydGV4SWQgPSBvZmZzZXRJbmZvLnZlcnRleE9mZnNldDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gaURhdGEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWJ1ZltpbmRpY2VPZmZzZXQrK10gPSB2ZXJ0ZXhJZCArIGlEYXRhW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdwYWNrVG9EeW5hbWljQXRsYXMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcGFja1RvRHluYW1pY0F0bGFzKGNvbXAsIGZyYW1lKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBNYXRlcmlhbCBBUEkgZGVzaWduIGFuZCBleHBvcnQgZnJvbSBlZGl0b3IgY291bGQgYWZmZWN0IHRoZSBtYXRlcmlhbCBhY3RpdmF0aW9uIHByb2Nlc3NcbiAgICAgICAgICAgIC8vIG5lZWQgdG8gdXBkYXRlIHRoZSBsb2dpYyBoZXJlXG4gICAgICAgICAgICBpZiAoZnJhbWUgJiYgIUNDX1RFU1QpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWZyYW1lLl9vcmlnaW5hbCAmJiBfbWFuYWdlcjIuZGVmYXVsdCAmJiBmcmFtZS5fdGV4dHVyZS5wYWNrYWJsZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFja2VkRnJhbWUgPSBfbWFuYWdlcjIuZGVmYXVsdC5pbnNlcnRTcHJpdGVGcmFtZShmcmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYWNrZWRGcmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWUuX3NldER5bmFtaWNBdGxhc0ZyYW1lKHBhY2tlZEZyYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbWF0ZXJpYWwgPSBjb21wLnNoYXJlZE1hdGVyaWFsc1swXTtcbiAgICAgICAgICAgICAgICBpZiAoIW1hdGVyaWFsKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICBpZiAobWF0ZXJpYWwuZ2V0UHJvcGVydHkoJ3RleHR1cmUnKSAhPT0gZnJhbWUuX3RleHR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGV4dHVyZSB3YXMgcGFja2VkIHRvIGR5bmFtaWMgYXRsYXMsIHNob3VsZCB1cGRhdGUgdXZzXG4gICAgICAgICAgICAgICAgICAgIGNvbXAuX3ZlcnRzRGlydHkgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbXAuX2FjdGl2YXRlTWF0ZXJpYWwodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICd2ZXJ0aWNlc0Zsb2F0cycsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmVydGljZXNDb3VudCAqIHRoaXMuZmxvYXRzUGVyVmVydDtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBBc3NlbWJsZXIyRDtcbn0oX2Fzc2VtYmxlcjIuZGVmYXVsdCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEFzc2VtYmxlcjJEO1xuXG5cbmNjLmpzLmFkZG9uKEFzc2VtYmxlcjJELnByb3RvdHlwZSwge1xuICAgIGZsb2F0c1BlclZlcnQ6IDUsXG5cbiAgICB2ZXJ0aWNlc0NvdW50OiA0LFxuICAgIGluZGljZXNDb3VudDogNixcblxuICAgIHV2T2Zmc2V0OiAyLFxuICAgIGNvbG9yT2Zmc2V0OiA0XG59KTtcblxuY2MuQXNzZW1ibGVyMkQgPSBBc3NlbWJsZXIyRDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1GemMyVnRZbXhsY2kweVpDNXFjeUpkTENKdVlXMWxjeUk2V3lKQmMzTmxiV0pzWlhJeVJDSXNJbDl5Wlc1a1pYSkVZWFJoSWl3aVVtVnVaR1Z5UkdGMFlTSXNJbWx1YVhRaUxDSnBibWwwUkdGMFlTSXNJbWx1YVhSTWIyTmhiQ0lzSW1SaGRHRWlMQ0pqY21WaGRHVlJkV0ZrUkdGMFlTSXNJblpsY25ScFkyVnpSbXh2WVhSeklpd2lhVzVrYVdObGMwTnZkVzUwSWl3aVgyeHZZMkZzSWl3aWJHVnVaM1JvSWl3aVkyOXRjQ0lzSW1OdmJHOXlJaXdpZFdsdWRGWmxjblJ6SWl3aWRXbHVkRlpFWVhSaGN5SXNJbTV2WkdVaUxDSmZkbUZzSWl3aVpteHZZWFJ6VUdWeVZtVnlkQ0lzSW1OdmJHOXlUMlptYzJWMElpd2lhU0lzSW13aUxDSmpZeUlzSW5KbGJtUmxjbVZ5SWl3aVgyaGhibVJzWlNJc0lsOXRaWE5vUW5WbVptVnlJaXdpYkc5allXd2lMQ0oyWlhKMGN5SXNJblpFWVhSaGN5SXNJbTFoZEhKcGVDSXNJbDkzYjNKc1pFMWhkSEpwZUNJc0ltMWhkSEpwZUcwaUxDSnRJaXdpWVNJc0ltSWlMQ0pqSWl3aVpDSXNJblI0SWl3aWRIa2lMQ0oyYkNJc0luWnlJaXdpZG1JaUxDSjJkQ0lzSW1wMWMzUlVjbUZ1YzJ4aGRHVWlMQ0poYkNJc0ltRnlJaXdpWW13aUxDSmljaUlzSW1OaUlpd2lZM1FpTENKa1lpSXNJbVIwSWl3aWQyOXliR1JOWVhSRWFYSjBlU0lzSW5Wd1pHRjBaVmR2Y214a1ZtVnlkSE1pTENKeVpXNWtaWEpFWVhSaElpd2lka1JoZEdFaUxDSnBSR0YwWVNJc0ltbEVZWFJoY3lJc0ltSjFabVpsY2lJc0ltZGxkRUoxWm1abGNpSXNJbTltWm5ObGRFbHVabThpTENKeVpYRjFaWE4wSWl3aWRtVnlkR2xqWlhORGIzVnVkQ0lzSW5abGNuUmxlRTltWm5ObGRDSXNJbUo1ZEdWUFptWnpaWFFpTENKMlluVm1JaXdpWDNaRVlYUmhJaXdpYzJWMElpd2ljM1ZpWVhKeVlYa2lMQ0pwWW5WbUlpd2lYMmxFWVhSaElpd2lhVzVrYVdObFQyWm1jMlYwSWl3aWRtVnlkR1Y0U1dRaUxDSm1jbUZ0WlNJc0lrTkRYMVJGVTFRaUxDSmZiM0pwWjJsdVlXd2lMQ0prZVc1aGJXbGpRWFJzWVhOTllXNWhaMlZ5SWl3aVgzUmxlSFIxY21VaUxDSndZV05yWVdKc1pTSXNJbkJoWTJ0bFpFWnlZVzFsSWl3aWFXNXpaWEowVTNCeWFYUmxSbkpoYldVaUxDSmZjMlYwUkhsdVlXMXBZMEYwYkdGelJuSmhiV1VpTENKdFlYUmxjbWxoYkNJc0luTm9ZWEpsWkUxaGRHVnlhV0ZzY3lJc0ltZGxkRkJ5YjNCbGNuUjVJaXdpWDNabGNuUnpSR2x5ZEhraUxDSmZZV04wYVhaaGRHVk5ZWFJsY21saGJDSXNJa0Z6YzJWdFlteGxjaUlzSW1weklpd2lZV1JrYjI0aUxDSndjbTkwYjNSNWNHVWlMQ0oxZGs5bVpuTmxkQ0pkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN08wRkJRVUU3T3pzN1FVRkRRVHM3T3p0QlFVTkJPenM3T3pzN096czdPenM3U1VGRmNVSkJMRmM3T3p0QlFVTnFRaXd5UWtGQlpUdEJRVUZCT3p0QlFVRkJPenRCUVVkWUxHTkJRVXRETEZkQlFVd3NSMEZCYlVJc1NVRkJTVU1zYjBKQlFVb3NSVUZCYmtJN1FVRkRRU3hqUVVGTFJDeFhRVUZNTEVOQlFXbENSU3hKUVVGcVFqczdRVUZGUVN4alFVRkxReXhSUVVGTU8wRkJRMEVzWTBGQlMwTXNVMEZCVER0QlFWQlhPMEZCVVdRN096czdiVU5CVFZjN1FVRkRVaXhuUWtGQlNVTXNUMEZCVHl4TFFVRkxUQ3hYUVVGb1FqdEJRVU5CU3l4cFFrRkJTME1zWTBGQlRDeERRVUZ2UWl4RFFVRndRaXhGUVVGMVFpeExRVUZMUXl4alFVRTFRaXhGUVVFMFF5eExRVUZMUXl4WlFVRnFSRHRCUVVOSU96czdiME5CUTFrN1FVRkRWQ3hwUWtGQlMwTXNUVUZCVEN4SFFVRmpMRVZCUVdRN1FVRkRRU3hwUWtGQlMwRXNUVUZCVEN4RFFVRlpReXhOUVVGYUxFZEJRWEZDTEVOQlFYSkNPMEZCUTBnN096dHZRMEZGV1VNc1NTeEZRVUZOUXl4TExFVkJRVTg3UVVGRGRFSXNaMEpCUVVsRExGbEJRVmtzUzBGQlMySXNWMEZCVEN4RFFVRnBRbU1zVlVGQmFrSXNRMEZCTkVJc1EwRkJOVUlzUTBGQmFFSTdRVUZEUVN4blFrRkJTU3hEUVVGRFJDeFRRVUZNTEVWQlFXZENPMEZCUTJoQ1JDeHZRa0ZCVVVFc1UwRkJVVVFzUzBGQlMwa3NTVUZCVEN4RFFVRlZTQ3hMUVVGV0xFTkJRV2RDU1N4SlFVRm9RenRCUVVOQkxHZENRVUZKUXl4blFrRkJaMElzUzBGQlMwRXNZVUZCZWtJN1FVRkRRU3huUWtGQlNVTXNZMEZCWXl4TFFVRkxRU3hYUVVGMlFqdEJRVU5CTEdsQ1FVRkxMRWxCUVVsRExFbEJRVWxFTEZkQlFWSXNSVUZCY1VKRkxFbEJRVWxRTEZWQlFWVklMRTFCUVhoRExFVkJRV2RFVXl4SlFVRkpReXhEUVVGd1JDeEZRVUYxUkVRc1MwRkJTMFlzWVVGQk5VUXNSVUZCTWtVN1FVRkRka1ZLTERCQ1FVRlZUU3hEUVVGV0xFbEJRV1ZRTEV0QlFXWTdRVUZEU0R0QlFVTktPenM3YjBOQlJWazdRVUZEVkN4dFFrRkJUMU1zUjBGQlIwTXNVVUZCU0N4RFFVRlpReXhQUVVGYUxFTkJRVzlDUXl4WFFVRXpRanRCUVVOSU96czdlVU5CUldsQ1lpeEpMRVZCUVUwN1FVRkRjRUlzWjBKQlFVbGpMRkZCUVZFc1MwRkJTMmhDTEUxQlFXcENPMEZCUTBFc1owSkJRVWxwUWl4UlFVRlJMRXRCUVVzeFFpeFhRVUZNTEVOQlFXbENNa0lzVFVGQmFrSXNRMEZCZDBJc1EwRkJlRUlzUTBGQldqczdRVUZGUVN4blFrRkJTVU1zVTBGQlUycENMRXRCUVV0SkxFbEJRVXdzUTBGQlZXTXNXVUZCZGtJN1FVRkRRU3huUWtGQlNVTXNWVUZCVlVZc1QwRkJUMGNzUTBGQmNrSTdRVUZCUVN4blFrRkRTVU1zU1VGQlNVWXNVVUZCVVN4RFFVRlNMRU5CUkZJN1FVRkJRU3huUWtGRGIwSkhMRWxCUVVsSUxGRkJRVkVzUTBGQlVpeERRVVI0UWp0QlFVRkJMR2RDUVVOdlEwa3NTVUZCU1Vvc1VVRkJVU3hEUVVGU0xFTkJSSGhETzBGQlFVRXNaMEpCUTI5RVN5eEpRVUZKVEN4UlFVRlJMRU5CUVZJc1EwRkVlRVE3UVVGQlFTeG5Ra0ZGU1Uwc1MwRkJTMDRzVVVGQlVTeEZRVUZTTEVOQlJsUTdRVUZCUVN4blFrRkZjMEpQTEV0QlFVdFFMRkZCUVZFc1JVRkJVaXhEUVVZelFqczdRVUZKUVN4blFrRkJTVkVzUzBGQlMySXNUVUZCVFN4RFFVRk9MRU5CUVZRN1FVRkJRU3huUWtGQmJVSmpMRXRCUVV0a0xFMUJRVTBzUTBGQlRpeERRVUY0UWp0QlFVRkJMR2RDUVVOSlpTeExRVUZMWml4TlFVRk5MRU5CUVU0c1EwRkVWRHRCUVVGQkxHZENRVU50UW1kQ0xFdEJRVXRvUWl4TlFVRk5MRU5CUVU0c1EwRkVlRUk3TzBGQlIwRXNaMEpCUVVscFFpeG5Ra0ZCWjBKV0xFMUJRVTBzUTBGQlRpeEpRVUZYUXl4TlFVRk5MRU5CUVdwQ0xFbEJRWE5DUXl4TlFVRk5MRU5CUVRWQ0xFbEJRV2xEUXl4TlFVRk5MRU5CUVRORU96dEJRVVZCTEdkQ1FVRkpUeXhoUVVGS0xFVkJRVzFDTzBGQlEyWTdRVUZEUVdoQ0xITkNRVUZOTEVOQlFVNHNTVUZCVjFrc1MwRkJTMFlzUlVGQmFFSTdRVUZEUVZZc2MwSkJRVTBzUTBGQlRpeEpRVUZYWXl4TFFVRkxTQ3hGUVVGb1FqdEJRVU5CTzBGQlEwRllMSE5DUVVGTkxFTkJRVTRzU1VGQlYyRXNTMEZCUzBnc1JVRkJhRUk3UVVGRFFWWXNjMEpCUVUwc1EwRkJUaXhKUVVGWFl5eExRVUZMU0N4RlFVRm9RanRCUVVOQk8wRkJRMEZZTEhOQ1FVRk5MRVZCUVU0c1NVRkJXVmtzUzBGQlMwWXNSVUZCYWtJN1FVRkRRVllzYzBKQlFVMHNSVUZCVGl4SlFVRlpaU3hMUVVGTFNpeEZRVUZxUWp0QlFVTkJPMEZCUTBGWUxITkNRVUZOTEVWQlFVNHNTVUZCV1dFc1MwRkJTMGdzUlVGQmFrSTdRVUZEUVZZc2MwSkJRVTBzUlVGQlRpeEpRVUZaWlN4TFFVRkxTaXhGUVVGcVFqdEJRVU5JTEdGQllrUXNUVUZoVHp0QlFVTklMRzlDUVVGSlRTeExRVUZMV0N4SlFVRkpUU3hGUVVGaU8wRkJRVUVzYjBKQlFXbENUU3hMUVVGTFdpeEpRVUZKVHl4RlFVRXhRanRCUVVGQkxHOUNRVU5CVFN4TFFVRkxXaXhKUVVGSlN5eEZRVVJVTzBGQlFVRXNiMEpCUTJGUkxFdEJRVXRpTEVsQlFVbE5MRVZCUkhSQ08wRkJRVUVzYjBKQlJVRlJMRXRCUVV0aUxFbEJRVWxOTEVWQlJsUTdRVUZCUVN4dlFrRkZZVkVzUzBGQlMyUXNTVUZCU1U4c1JVRkdkRUk3UVVGQlFTeHZRa0ZIUVZFc1MwRkJTMlFzU1VGQlNVc3NSVUZJVkR0QlFVRkJMRzlDUVVkaFZTeExRVUZMWml4SlFVRkpUU3hGUVVoMFFqczdRVUZMUVR0QlFVTkJaaXh6UWtGQlRTeERRVUZPTEVsQlFWZHBRaXhMUVVGTFNTeEZRVUZNTEVkQlFWVllMRVZCUVhKQ08wRkJRMEZXTEhOQ1FVRk5MRU5CUVU0c1NVRkJWMjFDTEV0QlFVdEpMRVZCUVV3c1IwRkJWVm9zUlVGQmNrSTdRVUZEUVR0QlFVTkJXQ3h6UWtGQlRTeERRVUZPTEVsQlFWZHJRaXhMUVVGTFJ5eEZRVUZNTEVkQlFWVllMRVZCUVhKQ08wRkJRMEZXTEhOQ1FVRk5MRU5CUVU0c1NVRkJWMjlDTEV0QlFVdEhMRVZCUVV3c1IwRkJWVm9zUlVGQmNrSTdRVUZEUVR0QlFVTkJXQ3h6UWtGQlRTeEZRVUZPTEVsQlFWbHBRaXhMUVVGTFN5eEZRVUZNTEVkQlFWVmFMRVZCUVhSQ08wRkJRMEZXTEhOQ1FVRk5MRVZCUVU0c1NVRkJXVzFDTEV0QlFVdExMRVZCUVV3c1IwRkJWV0lzUlVGQmRFSTdRVUZEUVR0QlFVTkJXQ3h6UWtGQlRTeEZRVUZPTEVsQlFWbHJRaXhMUVVGTFNTeEZRVUZNTEVkQlFWVmFMRVZCUVhSQ08wRkJRMEZXTEhOQ1FVRk5MRVZCUVU0c1NVRkJXVzlDTEV0QlFVdEpMRVZCUVV3c1IwRkJWV0lzUlVGQmRFSTdRVUZEU0R0QlFVTktPenM3YjBOQlJWa3hRaXhKTEVWQlFVMVhMRkVzUlVGQlZUdEJRVU42UWl4blFrRkJTVUVzVTBGQlV6WkNMR0ZCUVdJc1JVRkJORUk3UVVGRGVFSXNjVUpCUVV0RExHZENRVUZNTEVOQlFYTkNla01zU1VGQmRFSTdRVUZEU0RzN1FVRkZSQ3huUWtGQlNUQkRMR0ZCUVdFc1MwRkJTM0pFTEZkQlFYUkNPMEZCUTBFc1owSkJRVWx6UkN4UlFVRlJSQ3hYUVVGWE1VSXNUVUZCV0N4RFFVRnJRaXhEUVVGc1FpeERRVUZhTzBGQlEwRXNaMEpCUVVrMFFpeFJRVUZSUml4WFFVRlhSeXhOUVVGWUxFTkJRV3RDTEVOQlFXeENMRU5CUVZvN08wRkJSVUVzWjBKQlFVbERMRk5CUVZNc1MwRkJTME1zVTBGQlRDeERRVUZsY0VNc1VVRkJaaXhEUVVGaU8wRkJRMEVzWjBKQlFVbHhReXhoUVVGaFJpeFBRVUZQUnl4UFFVRlFMRU5CUVdVc1MwRkJTME1zWVVGQmNFSXNSVUZCYlVNc1MwRkJTM0pFTEZsQlFYaERMRU5CUVdwQ096dEJRVVZCT3p0QlFVVkJPMEZCUTBFc1owSkJRVWx6UkN4bFFVRmxTQ3hYUVVGWFNTeFZRVUZZTEVsQlFYbENMRU5CUVRWRE8wRkJRVUVzWjBKQlEwbERMRTlCUVU5UUxFOUJRVTlSTEUxQlJHeENPenRCUVVkQkxHZENRVUZKV0N4TlFVRk5OVU1zVFVGQlRpeEhRVUZsYjBRc1dVRkJaaXhIUVVFNFFrVXNTMEZCUzNSRUxFMUJRWFpETEVWQlFTdERPMEZCUXpORGMwUXNjVUpCUVV0RkxFZEJRVXdzUTBGQlUxb3NUVUZCVFdFc1VVRkJUaXhEUVVGbExFTkJRV1lzUlVGQmEwSklMRXRCUVV0MFJDeE5RVUZNTEVkQlFXTnZSQ3haUVVGb1F5eERRVUZVTEVWQlFYZEVRU3haUVVGNFJEdEJRVU5JTEdGQlJrUXNUVUZGVHp0QlFVTklSU3h4UWtGQlMwVXNSMEZCVEN4RFFVRlRXaXhMUVVGVUxFVkJRV2RDVVN4WlFVRm9RanRCUVVOSU96dEJRVVZFTzBGQlEwRXNaMEpCUVVsTkxFOUJRVTlZTEU5QlFVOVpMRTFCUVd4Q08wRkJRVUVzWjBKQlEwbERMR1ZCUVdWWUxGZEJRVmRYTEZsQlJEbENPMEZCUVVFc1owSkJSVWxETEZkQlFWZGFMRmRCUVZkSExGbEJSakZDTzBGQlIwRXNhVUpCUVVzc1NVRkJTVE5ETEVsQlFVa3NRMEZCVWl4RlFVRlhReXhKUVVGSmJVTXNUVUZCVFRkRExFMUJRVEZDTEVWQlFXdERVeXhKUVVGSlF5eERRVUYwUXl4RlFVRjVRMFFzUjBGQmVrTXNSVUZCT0VNN1FVRkRNVU5wUkN4eFFrRkJTMFVzWTBGQlRDeEpRVUYxUWtNc1YwRkJWMmhDTEUxQlFVMXdReXhEUVVGT0xFTkJRV3hETzBGQlEwZzdRVUZEU2pzN096SkRRVVZ0UWxJc1NTeEZRVUZOTmtRc1N5eEZRVUZQTzBGQlF6ZENPMEZCUTBFN1FVRkRRU3huUWtGQlNVRXNVMEZCVXl4RFFVRkRReXhQUVVGa0xFVkJRWFZDTzBGQlEyNUNMRzlDUVVGSkxFTkJRVU5FTEUxQlFVMUZMRk5CUVZBc1NVRkJiMEpETEdsQ1FVRndRaXhKUVVFeVEwZ3NUVUZCVFVrc1VVRkJUaXhEUVVGbFF5eFJRVUU1UkN4RlFVRjNSVHRCUVVOd1JTeDNRa0ZCU1VNc1kwRkJZMGdzYTBKQlFXOUNTU3hwUWtGQmNFSXNRMEZCYzBOUUxFdEJRWFJETEVOQlFXeENPMEZCUTBFc2QwSkJRVWxOTEZkQlFVb3NSVUZCYVVJN1FVRkRZazRzT0VKQlFVMVJMSEZDUVVGT0xFTkJRVFJDUml4WFFVRTFRanRCUVVOSU8wRkJRMG83UVVGRFJDeHZRa0ZCU1Vjc1YwRkJWM1JGTEV0QlFVdDFSU3hsUVVGTUxFTkJRWEZDTEVOQlFYSkNMRU5CUVdZN1FVRkRRU3h2UWtGQlNTeERRVUZEUkN4UlFVRk1MRVZCUVdVN08wRkJSV1lzYjBKQlFVbEJMRk5CUVZORkxGZEJRVlFzUTBGQmNVSXNVMEZCY2tJc1RVRkJiME5ZTEUxQlFVMUpMRkZCUVRsRExFVkJRWGRFTzBGQlEzQkVPMEZCUTBGcVJTeDVRa0ZCUzNsRkxGZEJRVXdzUjBGQmJVSXNTVUZCYmtJN08wRkJSVUY2UlN4NVFrRkJTekJGTEdsQ1FVRk1MRU5CUVhWQ0xFbEJRWFpDTzBGQlEwZzdRVUZEU2p0QlFVTktPenM3TkVKQmFrbHhRanRCUVVOc1FpeHRRa0ZCVHl4TFFVRkxlRUlzWVVGQlRDeEhRVUZ4UWl4TFFVRkxOVU1zWVVGQmFrTTdRVUZEU0RzN096dEZRV0p2UTNGRkxHMUNPenRyUWtGQmNFSjJSaXhYT3pzN1FVRXJTWEpDYzBJc1IwRkJSMnRGTEVWQlFVZ3NRMEZCVFVNc1MwRkJUaXhEUVVGWmVrWXNXVUZCV1RCR0xGTkJRWGhDTEVWQlFXMURPMEZCUXk5Q2VFVXNiVUpCUVdVc1EwRkVaMEk3TzBGQlJ5OUNORU1zYlVKQlFXVXNRMEZJWjBJN1FVRkpMMEp5UkN4clFrRkJZeXhEUVVwcFFqczdRVUZOTDBKclJpeGpRVUZWTEVOQlRuRkNPMEZCVHk5Q2VFVXNhVUpCUVdFN1FVRlFhMElzUTBGQmJrTTdPMEZCVlVGSExFZEJRVWQwUWl4WFFVRklMRWRCUVdsQ1FTeFhRVUZxUWlJc0ltWnBiR1VpT2lKaGMzTmxiV0pzWlhJdE1tUXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnUVhOelpXMWliR1Z5SUdaeWIyMGdKeTR2WVhOelpXMWliR1Z5Snp0Y2JtbHRjRzl5ZENCa2VXNWhiV2xqUVhSc1lYTk5ZVzVoWjJWeUlHWnliMjBnSnk0dmRYUnBiSE12WkhsdVlXMXBZeTFoZEd4aGN5OXRZVzVoWjJWeUp6dGNibWx0Y0c5eWRDQlNaVzVrWlhKRVlYUmhJR1p5YjIwZ0p5NHZkMlZpWjJ3dmNtVnVaR1Z5TFdSaGRHRW5PMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QkJjM05sYldKc1pYSXlSQ0JsZUhSbGJtUnpJRUZ6YzJWdFlteGxjaUI3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lnS0NrZ2UxeHVJQ0FnSUNBZ0lDQnpkWEJsY2lncE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzSmxibVJsY2tSaGRHRWdQU0J1WlhjZ1VtVnVaR1Z5UkdGMFlTZ3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXlaVzVrWlhKRVlYUmhMbWx1YVhRb2RHaHBjeWs3WEc0Z0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNCMGFHbHpMbWx1YVhSRVlYUmhLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhVzVwZEV4dlkyRnNLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdaMlYwSUhabGNuUnBZMlZ6Um14dllYUnpJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVkbVZ5ZEdsalpYTkRiM1Z1ZENBcUlIUm9hWE11Wm14dllYUnpVR1Z5Vm1WeWREdGNiaUFnSUNCOVhHNWNiaUFnSUNCcGJtbDBSR0YwWVNBb0tTQjdYRzRnSUNBZ0lDQWdJR3hsZENCa1lYUmhJRDBnZEdocGN5NWZjbVZ1WkdWeVJHRjBZVHRjYmlBZ0lDQWdJQ0FnWkdGMFlTNWpjbVZoZEdWUmRXRmtSR0YwWVNnd0xDQjBhR2x6TG5abGNuUnBZMlZ6Um14dllYUnpMQ0IwYUdsekxtbHVaR2xqWlhORGIzVnVkQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lHbHVhWFJNYjJOaGJDQW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMnh2WTJGc0lEMGdXMTA3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMnh2WTJGc0xteGxibWQwYUNBOUlEUTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RYQmtZWFJsUTI5c2IzSWdLR052YlhBc0lHTnZiRzl5S1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0IxYVc1MFZtVnlkSE1nUFNCMGFHbHpMbDl5Wlc1a1pYSkVZWFJoTG5WcGJuUldSR0YwWVhOYk1GMDdYRzRnSUNBZ0lDQWdJR2xtSUNnaGRXbHVkRlpsY25SektTQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lHTnZiRzl5SUQwZ1kyOXNiM0lnZkh4amIyMXdMbTV2WkdVdVkyOXNiM0l1WDNaaGJEdGNiaUFnSUNBZ0lDQWdiR1YwSUdac2IyRjBjMUJsY2xabGNuUWdQU0IwYUdsekxtWnNiMkYwYzFCbGNsWmxjblE3WEc0Z0lDQWdJQ0FnSUd4bGRDQmpiMnh2Y2s5bVpuTmxkQ0E5SUhSb2FYTXVZMjlzYjNKUFptWnpaWFE3WEc0Z0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQmpiMnh2Y2s5bVpuTmxkQ3dnYkNBOUlIVnBiblJXWlhKMGN5NXNaVzVuZEdnN0lHa2dQQ0JzT3lCcElDczlJR1pzYjJGMGMxQmxjbFpsY25RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhWcGJuUldaWEowYzF0cFhTQTlJR052Ykc5eU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1oyVjBRblZtWm1WeUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR05qTG5KbGJtUmxjbVZ5TGw5b1lXNWtiR1V1WDIxbGMyaENkV1ptWlhJN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZFhCa1lYUmxWMjl5YkdSV1pYSjBjeUFvWTI5dGNDa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2JHOWpZV3dnUFNCMGFHbHpMbDlzYjJOaGJEdGNiaUFnSUNBZ0lDQWdiR1YwSUhabGNuUnpJRDBnZEdocGN5NWZjbVZ1WkdWeVJHRjBZUzUyUkdGMFlYTmJNRjA3WEc1Y2JpQWdJQ0FnSUNBZ2JHVjBJRzFoZEhKcGVDQTlJR052YlhBdWJtOWtaUzVmZDI5eWJHUk5ZWFJ5YVhnN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J0WVhSeWFYaHRJRDBnYldGMGNtbDRMbTBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmhJRDBnYldGMGNtbDRiVnN3WFN3Z1lpQTlJRzFoZEhKcGVHMWJNVjBzSUdNZ1BTQnRZWFJ5YVhodFd6UmRMQ0JrSUQwZ2JXRjBjbWw0YlZzMVhTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhSNElEMGdiV0YwY21sNGJWc3hNbDBzSUhSNUlEMGdiV0YwY21sNGJWc3hNMTA3WEc1Y2JpQWdJQ0FnSUNBZ2JHVjBJSFpzSUQwZ2JHOWpZV3hiTUYwc0lIWnlJRDBnYkc5allXeGJNbDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZaUE5SUd4dlkyRnNXekZkTENCMmRDQTlJR3h2WTJGc1d6TmRPMXh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnYkdWMElHcDFjM1JVY21GdWMyeGhkR1VnUFNCaElEMDlQU0F4SUNZbUlHSWdQVDA5SURBZ0ppWWdZeUE5UFQwZ01DQW1KaUJrSUQwOVBTQXhPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaHFkWE4wVkhKaGJuTnNZWFJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCc1pXWjBJR0p2ZEhSdmJWeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1WeWRITmJNRjBnUFNCMmJDQXJJSFI0TzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbVZ5ZEhOYk1WMGdQU0IyWWlBcklIUjVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjbWxuYUhRZ1ltOTBkRzl0WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJaWEowYzFzMVhTQTlJSFp5SUNzZ2RIZzdYRzRnSUNBZ0lDQWdJQ0FnSUNCMlpYSjBjMXMyWFNBOUlIWmlJQ3NnZEhrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCc1pXWjBJSFJ2Y0Z4dUlDQWdJQ0FnSUNBZ0lDQWdkbVZ5ZEhOYk1UQmRJRDBnZG13Z0t5QjBlRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmxjblJ6V3pFeFhTQTlJSFowSUNzZ2RIazdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnlhV2RvZENCMGIzQmNiaUFnSUNBZ0lDQWdJQ0FnSUhabGNuUnpXekUxWFNBOUlIWnlJQ3NnZEhnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWlhKMGMxc3hObDBnUFNCMmRDQXJJSFI1TzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdGc0lEMGdZU0FxSUhac0xDQmhjaUE5SUdFZ0tpQjJjaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHSnNJRDBnWWlBcUlIWnNMQ0JpY2lBOUlHSWdLaUIyY2l4Y2JpQWdJQ0FnSUNBZ0lDQWdJR05pSUQwZ1l5QXFJSFppTENCamRDQTlJR01nS2lCMmRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUdSaUlEMGdaQ0FxSUhaaUxDQmtkQ0E5SUdRZ0tpQjJkRHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnYkdWbWRDQmliM1IwYjIxY2JpQWdJQ0FnSUNBZ0lDQWdJSFpsY25Seld6QmRJRDBnWVd3Z0t5QmpZaUFySUhSNE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1WeWRITmJNVjBnUFNCaWJDQXJJR1JpSUNzZ2RIazdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnlhV2RvZENCaWIzUjBiMjFjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmxjblJ6V3pWZElEMGdZWElnS3lCallpQXJJSFI0TzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbVZ5ZEhOYk5sMGdQU0JpY2lBcklHUmlJQ3NnZEhrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCc1pXWjBJSFJ2Y0Z4dUlDQWdJQ0FnSUNBZ0lDQWdkbVZ5ZEhOYk1UQmRJRDBnWVd3Z0t5QmpkQ0FySUhSNE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1WeWRITmJNVEZkSUQwZ1ltd2dLeUJrZENBcklIUjVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjbWxuYUhRZ2RHOXdYRzRnSUNBZ0lDQWdJQ0FnSUNCMlpYSjBjMXN4TlYwZ1BTQmhjaUFySUdOMElDc2dkSGc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJaWEowYzFzeE5sMGdQU0JpY2lBcklHUjBJQ3NnZEhrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCbWFXeHNRblZtWm1WeWN5QW9ZMjl0Y0N3Z2NtVnVaR1Z5WlhJcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hKbGJtUmxjbVZ5TG5kdmNteGtUV0YwUkdseWRIa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZFhCa1lYUmxWMjl5YkdSV1pYSjBjeWhqYjIxd0tUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUd4bGRDQnlaVzVrWlhKRVlYUmhJRDBnZEdocGN5NWZjbVZ1WkdWeVJHRjBZVHRjYmlBZ0lDQWdJQ0FnYkdWMElIWkVZWFJoSUQwZ2NtVnVaR1Z5UkdGMFlTNTJSR0YwWVhOYk1GMDdYRzRnSUNBZ0lDQWdJR3hsZENCcFJHRjBZU0E5SUhKbGJtUmxja1JoZEdFdWFVUmhkR0Z6V3pCZE8xeHVYRzRnSUNBZ0lDQWdJR3hsZENCaWRXWm1aWElnUFNCMGFHbHpMbWRsZEVKMVptWmxjaWh5Wlc1a1pYSmxjaWs3WEc0Z0lDQWdJQ0FnSUd4bGRDQnZabVp6WlhSSmJtWnZJRDBnWW5WbVptVnlMbkpsY1hWbGMzUW9kR2hwY3k1MlpYSjBhV05sYzBOdmRXNTBMQ0IwYUdsekxtbHVaR2xqWlhORGIzVnVkQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdZblZtWm1WeUlHUmhkR0VnYldGNUlHSmxJSEpsWVd4c2IyTXNJRzVsWldRZ1oyVjBJSEpsWm1WeVpXNWpaU0JoWm5SbGNpQnlaWEYxWlhOMExseHVYRzRnSUNBZ0lDQWdJQzh2SUdacGJHd2dkbVZ5ZEdsalpYTmNiaUFnSUNBZ0lDQWdiR1YwSUhabGNuUmxlRTltWm5ObGRDQTlJRzltWm5ObGRFbHVabTh1WW5sMFpVOW1abk5sZENBK1BpQXlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RtSjFaaUE5SUdKMVptWmxjaTVmZGtSaGRHRTdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tIWkVZWFJoTG14bGJtZDBhQ0FySUhabGNuUmxlRTltWm5ObGRDQStJSFppZFdZdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWW5WbUxuTmxkQ2gyUkdGMFlTNXpkV0poY25KaGVTZ3dMQ0IyWW5WbUxteGxibWQwYUNBdElIWmxjblJsZUU5bVpuTmxkQ2tzSUhabGNuUmxlRTltWm5ObGRDazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMlluVm1Mbk5sZENoMlJHRjBZU3dnZG1WeWRHVjRUMlptYzJWMEtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUM4dklHWnBiR3dnYVc1a2FXTmxjMXh1SUNBZ0lDQWdJQ0JzWlhRZ2FXSjFaaUE5SUdKMVptWmxjaTVmYVVSaGRHRXNYRzRnSUNBZ0lDQWdJQ0FnSUNCcGJtUnBZMlZQWm1aelpYUWdQU0J2Wm1aelpYUkpibVp2TG1sdVpHbGpaVTltWm5ObGRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUhabGNuUmxlRWxrSUQwZ2IyWm1jMlYwU1c1bWJ5NTJaWEowWlhoUFptWnpaWFE3WEc0Z0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdMQ0JzSUQwZ2FVUmhkR0V1YkdWdVozUm9PeUJwSUR3Z2JEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWW5WbVcybHVaR2xqWlU5bVpuTmxkQ3NyWFNBOUlIWmxjblJsZUVsa0lDc2dhVVJoZEdGYmFWMDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQndZV05yVkc5RWVXNWhiV2xqUVhSc1lYTWdLR052YlhBc0lHWnlZVzFsS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRlJQUkU4NklFMWhkR1Z5YVdGc0lFRlFTU0JrWlhOcFoyNGdZVzVrSUdWNGNHOXlkQ0JtY205dElHVmthWFJ2Y2lCamIzVnNaQ0JoWm1abFkzUWdkR2hsSUcxaGRHVnlhV0ZzSUdGamRHbDJZWFJwYjI0Z2NISnZZMlZ6YzF4dUlDQWdJQ0FnSUNBdkx5QnVaV1ZrSUhSdklIVndaR0YwWlNCMGFHVWdiRzluYVdNZ2FHVnlaVnh1SUNBZ0lDQWdJQ0JwWmlBb1puSmhiV1VnSmlZZ0lVTkRYMVJGVTFRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2habkpoYldVdVgyOXlhV2RwYm1Gc0lDWW1JR1I1Ym1GdGFXTkJkR3hoYzAxaGJtRm5aWElnSmlZZ1puSmhiV1V1WDNSbGVIUjFjbVV1Y0dGamEyRmliR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdjR0ZqYTJWa1JuSmhiV1VnUFNCa2VXNWhiV2xqUVhSc1lYTk5ZVzVoWjJWeUxtbHVjMlZ5ZEZOd2NtbDBaVVp5WVcxbEtHWnlZVzFsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jR0ZqYTJWa1JuSmhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabkpoYldVdVgzTmxkRVI1Ym1GdGFXTkJkR3hoYzBaeVlXMWxLSEJoWTJ0bFpFWnlZVzFsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYldGMFpYSnBZV3dnUFNCamIyMXdMbk5vWVhKbFpFMWhkR1Z5YVdGc2Mxc3dYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doYldGMFpYSnBZV3dwSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHMWhkR1Z5YVdGc0xtZGxkRkJ5YjNCbGNuUjVLQ2QwWlhoMGRYSmxKeWtnSVQwOUlHWnlZVzFsTGw5MFpYaDBkWEpsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkR1Y0ZEhWeVpTQjNZWE1nY0dGamEyVmtJSFJ2SUdSNWJtRnRhV01nWVhSc1lYTXNJSE5vYjNWc1pDQjFjR1JoZEdVZ2RYWnpYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl0Y0M1ZmRtVnlkSE5FYVhKMGVTQTlJSFJ5ZFdVN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjF3TGw5aFkzUnBkbUYwWlUxaGRHVnlhV0ZzS0hSeWRXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVmVnh1WEc1all5NXFjeTVoWkdSdmJpaEJjM05sYldKc1pYSXlSQzV3Y205MGIzUjVjR1VzSUh0Y2JpQWdJQ0JtYkc5aGRITlFaWEpXWlhKME9pQTFMRnh1WEc0Z0lDQWdkbVZ5ZEdsalpYTkRiM1Z1ZERvZ05DeGNiaUFnSUNCcGJtUnBZMlZ6UTI5MWJuUTZJRFlzWEc1Y2JpQWdJQ0IxZGs5bVpuTmxkRG9nTWl4Y2JpQWdJQ0JqYjJ4dmNrOW1abk5sZERvZ05DeGNibjBwTzF4dVhHNWpZeTVCYzNObGJXSnNaWEl5UkNBOUlFRnpjMlZ0WW14bGNqSkVPMXh1SWwxOSJdfQ==