(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/index.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _config = require('../../renderer/config');
        var _config2 = _interopRequireDefault(_config);
        var _gfx = require('../../renderer/gfx');
        var _gfx2 = _interopRequireDefault(_gfx);
        var _inputAssembler = require('../../renderer/core/input-assembler');
        var _inputAssembler2 = _interopRequireDefault(_inputAssembler);
        var _pass = require('../../renderer/core/pass');
        var _pass2 = _interopRequireDefault(_pass);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _initBuiltins(device) {
            var defaultTexture = new _gfx2.default.Texture2D(device, {
                images: [],
                width: 128,
                height: 128,
                wrapS: _gfx2.default.WRAP_REPEAT,
                wrapT: _gfx2.default.WRAP_REPEAT,
                format: _gfx2.default.TEXTURE_FMT_RGB8,
                mipmap: false
            });
            return {
                defaultTexture: defaultTexture,
                programTemplates: [],
                programChunks: {}
            };
        }
        cc.renderer = module.exports = {
            Texture2D: null,
            InputAssembler: _inputAssembler2.default,
            Pass: _pass2.default,
            renderEngine: null,
            canvas: null,
            device: null,
            scene: null,
            drawCalls: 0,
            _handle: null,
            _cameraNode: null,
            _camera: null,
            _forward: null,
            _flow: null,
            initWebGL: function initWebGL(canvas, opts) {
                require('./webgl/assemblers');
                var ModelBatcher = require('./webgl/model-batcher');
                this.Texture2D = _gfx2.default.Texture2D;
                this.canvas = canvas;
                this._flow = cc.RenderFlow;
                if (CC_JSB && CC_NATIVERENDERER) {
                    this.device = _gfx2.default.Device.getInstance();
                    this.scene = new renderer.Scene();
                    var builtins = _initBuiltins(this.device);
                    this._forward = new renderer.ForwardRenderer(this.device, builtins);
                    var nativeFlow = new renderer.RenderFlow(this.device, this.scene, this._forward);
                    this._flow.init(nativeFlow);
                } else {
                    var Scene = require('../../renderer/scene/scene');
                    var ForwardRenderer = require('../../renderer/renderers/forward-renderer');
                    this.device = new _gfx2.default.Device(canvas, opts);
                    this.scene = new Scene();
                    var _builtins = _initBuiltins(this.device);
                    this._forward = new ForwardRenderer(this.device, _builtins);
                    this._handle = new ModelBatcher(this.device, this.scene);
                    this._flow.init(this._handle, this._forward);
                }
                _config2.default.addStage('shadowcast');
                _config2.default.addStage('opaque');
                _config2.default.addStage('transparent');
            },
            initCanvas: function initCanvas(canvas) {
                var canvasRenderer = require('./canvas');
                var Texture2D = require('./canvas/Texture2D');
                var Device = require('./canvas/Device');
                this.Device = Device;
                this.Texture2D = Texture2D;
                this.canvas = canvas;
                this.device = new Device(canvas);
                this._camera = {
                    a: 1,
                    b: 0,
                    c: 0,
                    d: 1,
                    tx: 0,
                    ty: 0
                };
                this._handle = new canvasRenderer.RenderComponentHandle(this.device, this._camera);
                this._forward = new canvasRenderer.ForwardRenderer();
                this._flow = cc.RenderFlow;
                this._flow.init(this._handle, this._forward);
            },
            updateCameraViewport: function updateCameraViewport() {
                if (!CC_EDITOR && cc.director) {
                    var ecScene = cc.director.getScene();
                    if (ecScene)
                        ecScene.setScale(1, 1, 1);
                }
                if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
                    var vp = cc.view.getViewportRect();
                    this.device.setViewport(vp.x, vp.y, vp.width, vp.height);
                    this._camera.a = cc.view.getScaleX();
                    this._camera.d = cc.view.getScaleY();
                    this._camera.tx = vp.x;
                    this._camera.ty = vp.y + vp.height;
                }
            },
            render: function render(ecScene, dt) {
                this.device.resetDrawCalls();
                if (ecScene) {
                    this._flow.render(ecScene, dt);
                    this.drawCalls = this.device.getDrawCalls();
                }
            },
            clear: function clear() {
                this._handle.reset();
                this._forward.clear();
            }
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,