(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/quad-buffer.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var MeshBuffer = require('./mesh-buffer');
        var QuadBuffer = cc.Class({
            name: 'cc.QuadBuffer',
            extends: MeshBuffer,
            _fillQuadBuffer: function _fillQuadBuffer() {
                var count = this._initIDataCount / 6;
                var buffer = this._iData;
                for (var i = 0, idx = 0; i < count; i++) {
                    var vertextID = i * 4;
                    buffer[idx++] = vertextID;
                    buffer[idx++] = vertextID + 1;
                    buffer[idx++] = vertextID + 2;
                    buffer[idx++] = vertextID + 1;
                    buffer[idx++] = vertextID + 3;
                    buffer[idx++] = vertextID + 2;
                }
                var indicesData = new Uint16Array(this._iData.buffer, 0, count * 6);
                this._ib.update(0, indicesData);
            },
            uploadData: function uploadData() {
                if (this.byteOffset === 0 || !this._dirty) {
                    return;
                }
                var vertexsData = new Float32Array(this._vData.buffer, 0, this.byteOffset >> 2);
                this._vb.update(0, vertexsData);
                this._dirty = false;
            },
            switchBuffer: function switchBuffer() {
                this._super();
                var indicesData = new Uint16Array(this._iData.buffer, 0, this._initIDataCount);
                this._ib.update(0, indicesData);
            },
            _reallocBuffer: function _reallocBuffer() {
                this._reallocVData(true);
                this._reallocIData();
                this._fillQuadBuffer();
            }
        });
        cc.QuadBuffer = module.exports = QuadBuffer;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,