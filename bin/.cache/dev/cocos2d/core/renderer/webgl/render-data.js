(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/render-data.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = RenderData;
        var _flexBuffer = require('./flex-buffer');
        var _flexBuffer2 = _interopRequireDefault(_flexBuffer);
        var _vertexFormat = require('./vertex-format');
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function RenderData() {
            this.vDatas = [];
            this.uintVDatas = [];
            this.iDatas = [];
            this.meshCount = 0;
            this._infos = null;
            this._flexBuffer = null;
        }
        cc.js.mixin(RenderData.prototype, {
            init: function init(assembler) {
            },
            clear: function clear() {
                this.vDatas.length = 0;
                this.iDatas.length = 0;
                this.uintVDatas.length = 0;
                this.meshCount = 0;
                this._infos = null;
                if (this._flexBuffer) {
                    this._flexBuffer.reset();
                }
            },
            updateMesh: function updateMesh(index, vertices, indices) {
                this.vDatas[index] = vertices;
                this.uintVDatas[index] = new Uint32Array(vertices.buffer, 0, vertices.length);
                this.iDatas[index] = indices;
                this.meshCount = this.vDatas.length;
            },
            updateMeshRange: function updateMeshRange(verticesCount, indicesCount) {
            },
            createData: function createData(index, verticesFloats, indicesCount) {
                var vertices = new Float32Array(verticesFloats);
                var indices = new Uint16Array(indicesCount);
                this.updateMesh(index, vertices, indices);
            },
            createQuadData: function createQuadData(index, verticesFloats, indicesCount) {
                this.createData(index, verticesFloats, indicesCount);
                this.initQuadIndices(this.iDatas[index]);
            },
            createFlexData: function createFlexData(index, verticesFloats, indicesCount, vfmt) {
                vfmt = vfmt || _vertexFormat.vfmtPosUvColor;
                this._flexBuffer = new _flexBuffer2.default(this, index, verticesFloats, indicesCount, vfmt);
            },
            initQuadIndices: function initQuadIndices(indices) {
                var count = indices.length / 6;
                for (var i = 0, idx = 0; i < count; i++) {
                    var vertextID = i * 4;
                    indices[idx++] = vertextID;
                    indices[idx++] = vertextID + 1;
                    indices[idx++] = vertextID + 2;
                    indices[idx++] = vertextID + 1;
                    indices[idx++] = vertextID + 3;
                    indices[idx++] = vertextID + 2;
                }
            }
        });
        cc.RenderData = RenderData;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,