(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/mesh-buffer.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _gfx = require('../../../renderer/gfx');
        var _gfx2 = _interopRequireDefault(_gfx);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var MeshBuffer = cc.Class({
            name: 'cc.MeshBuffer',
            ctor: function ctor(batcher, vertexFormat) {
                this.init(batcher, vertexFormat);
            },
            init: function init(batcher, vertexFormat) {
                this.byteOffset = 0;
                this.indiceOffset = 0;
                this.vertexOffset = 0;
                this.indiceStart = 0;
                this._dirty = false;
                this._vertexFormat = vertexFormat;
                this._vertexBytes = this._vertexFormat._bytes;
                this._arrOffset = 0;
                this._vbArr = [];
                this._vb = new _gfx2.default.VertexBuffer(batcher._device, vertexFormat, _gfx2.default.USAGE_DYNAMIC, new ArrayBuffer(), 0);
                this._vbArr[0] = this._vb;
                this._ibArr = [];
                this._ib = new _gfx2.default.IndexBuffer(batcher._device, _gfx2.default.INDEX_FMT_UINT16, _gfx2.default.USAGE_STATIC, new ArrayBuffer(), 0);
                this._ibArr[0] = this._ib;
                this._vData = null;
                this._uintVData = null;
                this._iData = null;
                this._batcher = batcher;
                this._initVDataCount = 256 * vertexFormat._bytes;
                this._initIDataCount = 256 * 6;
                this._offsetInfo = {
                    byteOffset: 0,
                    vertexOffset: 0,
                    indiceOffset: 0
                };
                this._reallocBuffer();
            },
            uploadData: function uploadData() {
                if (this.byteOffset === 0 || !this._dirty) {
                    return;
                }
                var vertexsData = new Float32Array(this._vData.buffer, 0, this.byteOffset >> 2);
                var indicesData = new Uint16Array(this._iData.buffer, 0, this.indiceOffset);
                var vb = this._vb;
                vb.update(0, vertexsData);
                var ib = this._ib;
                ib.update(0, indicesData);
                this._dirty = false;
            },
            switchBuffer: function switchBuffer() {
                var offset = ++this._arrOffset;
                this.byteOffset = 0;
                this.vertexOffset = 0;
                this.indiceOffset = 0;
                this.indiceStart = 0;
                if (offset < this._vbArr.length) {
                    this._vb = this._vbArr[offset];
                    this._ib = this._ibArr[offset];
                } else {
                    this._vb = new _gfx2.default.VertexBuffer(this._batcher._device, this._vertexFormat, _gfx2.default.USAGE_DYNAMIC, new ArrayBuffer(), 0);
                    this._vbArr[offset] = this._vb;
                    this._ib = new _gfx2.default.IndexBuffer(this._batcher._device, _gfx2.default.INDEX_FMT_UINT16, _gfx2.default.USAGE_STATIC, new ArrayBuffer(), 0);
                    this._ibArr[offset] = this._ib;
                }
            },
            checkAndSwitchBuffer: function checkAndSwitchBuffer(vertexCount) {
                if (this.vertexOffset + vertexCount > 65535) {
                    this.uploadData();
                    this._batcher._flush();
                    this.switchBuffer();
                }
            },
            requestStatic: function requestStatic(vertexCount, indiceCount) {
                this.checkAndSwitchBuffer(vertexCount);
                var byteOffset = this.byteOffset + vertexCount * this._vertexBytes;
                var indiceOffset = this.indiceOffset + indiceCount;
                var byteLength = this._vData.byteLength;
                var indiceLength = this._iData.length;
                if (byteOffset > byteLength || indiceOffset > indiceLength) {
                    while (byteLength < byteOffset || indiceLength < indiceOffset) {
                        this._initVDataCount *= 2;
                        this._initIDataCount *= 2;
                        byteLength = this._initVDataCount * 4;
                        indiceLength = this._initIDataCount;
                    }
                    this._reallocBuffer();
                }
                this._updateOffset(vertexCount, indiceCount, byteOffset);
            },
            _updateOffset: function _updateOffset(vertexCount, indiceCount, byteOffset) {
                var offsetInfo = this._offsetInfo;
                offsetInfo.vertexOffset = this.vertexOffset;
                this.vertexOffset += vertexCount;
                offsetInfo.indiceOffset = this.indiceOffset;
                this.indiceOffset += indiceCount;
                offsetInfo.byteOffset = this.byteOffset;
                this.byteOffset = byteOffset;
                this._dirty = true;
            },
            request: function request(vertexCount, indiceCount) {
                if (this._batcher._buffer !== this) {
                    this._batcher._flush();
                    this._batcher._buffer = this;
                }
                this.requestStatic(vertexCount, indiceCount);
                return this._offsetInfo;
            },
            _reallocBuffer: function _reallocBuffer() {
                this._reallocVData(true);
                this._reallocIData(true);
            },
            _reallocVData: function _reallocVData(copyOldData) {
                var oldVData = void 0;
                if (this._vData) {
                    oldVData = new Uint8Array(this._vData.buffer);
                }
                this._vData = new Float32Array(this._initVDataCount);
                this._uintVData = new Uint32Array(this._vData.buffer);
                var newData = new Uint8Array(this._uintVData.buffer);
                if (oldVData && copyOldData) {
                    for (var i = 0, l = oldVData.length; i < l; i++) {
                        newData[i] = oldVData[i];
                    }
                }
            },
            _reallocIData: function _reallocIData(copyOldData) {
                var oldIData = this._iData;
                this._iData = new Uint16Array(this._initIDataCount);
                if (oldIData && copyOldData) {
                    var iData = this._iData;
                    for (var i = 0, l = oldIData.length; i < l; i++) {
                        iData[i] = oldIData[i];
                    }
                }
            },
            reset: function reset() {
                this._arrOffset = 0;
                this._vb = this._vbArr[0];
                this._ib = this._ibArr[0];
                this.byteOffset = 0;
                this.indiceOffset = 0;
                this.vertexOffset = 0;
                this.indiceStart = 0;
                this._dirty = false;
            },
            destroy: function destroy() {
                this.reset();
                for (var i = 0; i < this._vbArr.length; i++) {
                    var vb = this._vbArr[i];
                    vb.destroy();
                }
                this._vbArr = null;
                for (var _i = 0; _i < this._ibArr.length; _i++) {
                    var ib = this._ibArr[_i];
                    ib.destroy();
                }
                this._ibArr = null;
                this._ib = null;
                this._vb = null;
            },
            forwardIndiceStartToOffset: function forwardIndiceStartToOffset() {
                this.indiceStart = this.indiceOffset;
            }
        });
        cc.MeshBuffer = module.exports = MeshBuffer;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lc2gtYnVmZmVyLmpzIiwiL1VzZXJzL2dhb3lhbmcvV29ya1NwYWNlL2pveWNhc3RsZS9iaW5nby9jbGllbnQvYmluZ28vZW5naW5lL2NvY29zMmQvY29yZS9yZW5kZXJlci93ZWJnbC9tZXNoLWJ1ZmZlci5qcyJdLCJuYW1lcyI6WyJDbGFzcyIsImJhdGNoZXIiLCJ2ZXJ0ZXhGb3JtYXQiLCJNZXNoQnVmZmVyIiwiY2MiLCJuYW1lIiwiY3RvciIsImluaXQiLCJieXRlT2Zmc2V0IiwiaW5kaWNlT2Zmc2V0IiwidmVydGV4T2Zmc2V0IiwiaW5kaWNlU3RhcnQiLCJfZGlydHkiLCJfdmVydGV4Rm9ybWF0IiwiX3ZlcnRleEJ5dGVzIiwiX2J5dGVzIiwiX2Fyck9mZnNldCIsIl92YkFyciIsIl92YiIsImdmeCIsIlZlcnRleEJ1ZmZlciIsIl9kZXZpY2UiLCJVU0FHRV9EWU5BTUlDIiwiQXJyYXlCdWZmZXIiLCJfaWJBcnIiLCJfaWIiLCJJbmRleEJ1ZmZlciIsIklOREVYX0ZNVF9VSU5UMTYiLCJVU0FHRV9TVEFUSUMiLCJfdkRhdGEiLCJfdWludFZEYXRhIiwiX2lEYXRhIiwiX2JhdGNoZXIiLCJfaW5pdFZEYXRhQ291bnQiLCJfaW5pdElEYXRhQ291bnQiLCJfb2Zmc2V0SW5mbyIsIl9yZWFsbG9jQnVmZmVyIiwidXBsb2FkRGF0YSIsInZlcnRleHNEYXRhIiwiRmxvYXQzMkFycmF5IiwiYnVmZmVyIiwiaW5kaWNlc0RhdGEiLCJVaW50MTZBcnJheSIsInZiIiwidXBkYXRlIiwiaWIiLCJzd2l0Y2hCdWZmZXIiLCJvZmZzZXQiLCJsZW5ndGgiLCJjaGVja0FuZFN3aXRjaEJ1ZmZlciIsInZlcnRleENvdW50IiwiX2ZsdXNoIiwicmVxdWVzdFN0YXRpYyIsImluZGljZUNvdW50IiwiYnl0ZUxlbmd0aCIsImluZGljZUxlbmd0aCIsIl91cGRhdGVPZmZzZXQiLCJvZmZzZXRJbmZvIiwicmVxdWVzdCIsIl9idWZmZXIiLCJfcmVhbGxvY1ZEYXRhIiwiX3JlYWxsb2NJRGF0YSIsImNvcHlPbGREYXRhIiwib2xkVkRhdGEiLCJVaW50OEFycmF5IiwiVWludDMyQXJyYXkiLCJuZXdEYXRhIiwiaSIsImwiLCJvbGRJRGF0YSIsImlEYXRhIiwicmVzZXQiLCJkZXN0cm95IiwiZm9yd2FyZEluZGljZVN0YXJ0VG9PZmZzZXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiO0lBeUJBLElBQUEsT0FBQSxHQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUEsSUFBQSxPQUFBLE9BQUEsS0FBQSxXQUFBOzs7Ozs7UUFFb0JBLE9BQU0saUJBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxFQUFBLFVBQUEsQ0FBTkE7O0lBQU0sU0FFaEJDLFFBRmdCLENBRVBDLE9BRk8sRUFFTyxPQUZQLEVBRU8sTUFGUCxFQUVPO0FBQUEsUUFDZEQsSUFBU0MsQ0FBQUEsT0FBVEQsRUFBU0M7QUFBQUEsWUFBcEIsaUJBQUEsQ0FBQSxjQUFBLENBQUEsVUFBQSxFQUFBLE1BQUEsRUFBb0JBO0FBQUFBLFNBREs7QUFBQTtRQUpqQyxJQUFBLElBQUEsR0FBQSxPQUFBLENBQUEsdUJBQUEsQ0FBQTs7Ozs7UUFFQSxJQUFJQyxVQUFBQSxHQUFhQyxFQUFBQSxDQUFHSixLQUFISSxDQUFTO0FBQUEsWUFDdEJDLElBQUFBLEVBQU0sZUFEZ0I7QUFBQSxZQUV0QkMsSUFBQUEsRUFGc0IsU0FBQSxJQUFBLENBRWhCTCxPQUZnQixFQUVQQyxZQUZPLEVBRU87QUFBQSxnQkFDekIsS0FBS0ssSUFBTCxDQUFXTixPQUFYLEVBQW9CQyxZQUFwQixFQUR5QjtBQUFBLGFBRlA7QUFBQSxZQU10QkssSUFBQUEsRUFOc0IsU0FBQSxJQUFBLENBTWhCTixPQU5nQixFQU1QQyxZQU5PLEVBTU87QUFBQSxnQkFDekIsS0FBS00sVUFBTCxHQUFrQixDQUFsQixDQUR5QjtBQUFBLGdCQUV6QixLQUFLQyxZQUFMLEdBQW9CLENBQXBCLENBRnlCO0FBQUEsZ0JBR3pCLEtBQUtDLFlBQUwsR0FBb0IsQ0FBcEIsQ0FIeUI7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QUwsR0FBVyxJQUFYLENBZk87QUFBQSxhQWxOVztBQUFBLFlBb090QnVELDBCQUFBQSxFQXBPc0IsU0FBQSwwQkFBQSxHQW9PUTtBQUFBLGdCQUMxQixLQUFLOUQsV0FBTCxHQUFtQixLQUFLRixZQUF4QixDQUQwQjtBQUFBLGFBcE9SO0FBQUEsU0FBVEwsQ0FBakI7UUF5T0FBLEVBQUFBLENBQUdELFVBQUhDLEdBQWdCc0UsTUFBQUEsQ0FBT0MsT0FBUEQsR0FBaUJ2RSxVQUFqQ0MsQ0F2T2lDO0FBQUE7SUFGUCxJQU1oQkgsT0FOZ0IsRUFNUEM7QUFBQUEsUUFDWCxRQUFBLENBQUEsUUFBQSxDQUFBLE9BQUEsRUFBQSxTQUFBLEVBQUEsUUFBQSxFQURXQTtBQUFBQSxLQU5PLE1BU2xCO0FBQUEsUUFDQSxpQkFBQSxDQUFBLGtCQUFBLENBQUEsVUFBQSxFQUFBLFlBQUE7QUFBQSw0REFBQTtBQUFBLFNBQUEsRUFEQTtBQUFBIiwiZmlsZSI6Im1lc2gtYnVmZmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcbiBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxuXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IGdmeCBmcm9tICcuLi8uLi8uLi9yZW5kZXJlci9nZngnO1xuXG5sZXQgTWVzaEJ1ZmZlciA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuTWVzaEJ1ZmZlcicsXG4gICAgY3RvciAoYmF0Y2hlciwgdmVydGV4Rm9ybWF0KSB7XG4gICAgICAgIHRoaXMuaW5pdCAoYmF0Y2hlciwgdmVydGV4Rm9ybWF0KTtcbiAgICB9LFxuXG4gICAgaW5pdCAoYmF0Y2hlciwgdmVydGV4Rm9ybWF0KSB7XG4gICAgICAgIHRoaXMuYnl0ZU9mZnNldCA9IDA7XG4gICAgICAgIHRoaXMuaW5kaWNlT2Zmc2V0ID0gMDtcbiAgICAgICAgdGhpcy52ZXJ0ZXhPZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLmluZGljZVN0YXJ0ID0gMDtcblxuICAgICAgICB0aGlzLl9kaXJ0eSA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuX3ZlcnRleEZvcm1hdCA9IHZlcnRleEZvcm1hdDtcbiAgICAgICAgdGhpcy5fdmVydGV4Qnl0ZXMgPSB0aGlzLl92ZXJ0ZXhGb3JtYXQuX2J5dGVzO1xuXG4gICAgICAgIHRoaXMuX2Fyck9mZnNldCA9IDA7XG4gICAgICAgIHRoaXMuX3ZiQXJyID0gW107XG4gICAgICAgIHRoaXMuX3ZiID0gbmV3IGdmeC5WZXJ0ZXhCdWZmZXIoXG4gICAgICAgICAgICBiYXRjaGVyLl9kZXZpY2UsXG4gICAgICAgICAgICB2ZXJ0ZXhGb3JtYXQsXG4gICAgICAgICAgICBnZnguVVNBR0VfRFlOQU1JQyxcbiAgICAgICAgICAgIG5ldyBBcnJheUJ1ZmZlcigpLFxuICAgICAgICAgICAgMFxuICAgICAgICApO1xuICAgICAgICB0aGlzLl92YkFyclswXSA9IHRoaXMuX3ZiO1xuXG4gICAgICAgIHRoaXMuX2liQXJyID0gW107XG4gICAgICAgIHRoaXMuX2liID0gbmV3IGdmeC5JbmRleEJ1ZmZlcihcbiAgICAgICAgICAgIGJhdGNoZXIuX2RldmljZSxcbiAgICAgICAgICAgIGdmeC5JTkRFWF9GTVRfVUlOVDE2LFxuICAgICAgICAgICAgZ2Z4LlVTQUdFX1NUQVRJQyxcbiAgICAgICAgICAgIG5ldyBBcnJheUJ1ZmZlcigpLFxuICAgICAgICAgICAgMFxuICAgICAgICApO1xuICAgICAgICB0aGlzLl9pYkFyclswXSA9IHRoaXMuX2liO1xuXG4gICAgICAgIHRoaXMuX3ZEYXRhID0gbnVsbDtcbiAgICAgICAgdGhpcy5fdWludFZEYXRhID0gbnVsbDtcbiAgICAgICAgdGhpcy5faURhdGEgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuX2JhdGNoZXIgPSBiYXRjaGVyO1xuXG4gICAgICAgIHRoaXMuX2luaXRWRGF0YUNvdW50ID0gMjU2ICogdmVydGV4Rm9ybWF0Ll9ieXRlczsvLyBhY3R1YWxseSAyNTYgKiA0ICogKHZlcnRleEZvcm1hdC5fYnl0ZXMgLyA0KVxuICAgICAgICB0aGlzLl9pbml0SURhdGFDb3VudCA9IDI1NiAqIDY7XG4gICAgICAgIFxuICAgICAgICB0aGlzLl9vZmZzZXRJbmZvID0ge1xuICAgICAgICAgICAgYnl0ZU9mZnNldCA6IDAsXG4gICAgICAgICAgICB2ZXJ0ZXhPZmZzZXQgOiAwLFxuICAgICAgICAgICAgaW5kaWNlT2Zmc2V0IDogMFxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3JlYWxsb2NCdWZmZXIoKTtcbiAgICB9LFxuXG4gICAgdXBsb2FkRGF0YSAoKSB7XG4gICAgICAgIGlmICh0aGlzLmJ5dGVPZmZzZXQgPT09IDAgfHwgIXRoaXMuX2RpcnR5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1cGRhdGUgdmVydGV4dCBkYXRhXG4gICAgICAgIGxldCB2ZXJ0ZXhzRGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5fdkRhdGEuYnVmZmVyLCAwLCB0aGlzLmJ5dGVPZmZzZXQgPj4gMik7XG4gICAgICAgIGxldCBpbmRpY2VzRGF0YSA9IG5ldyBVaW50MTZBcnJheSh0aGlzLl9pRGF0YS5idWZmZXIsIDAsIHRoaXMuaW5kaWNlT2Zmc2V0KTtcblxuICAgICAgICBsZXQgdmIgPSB0aGlzLl92YjtcbiAgICAgICAgdmIudXBkYXRlKDAsIHZlcnRleHNEYXRhKTtcblxuICAgICAgICBsZXQgaWIgPSB0aGlzLl9pYjtcbiAgICAgICAgaWIudXBkYXRlKDAsIGluZGljZXNEYXRhKTtcblxuICAgICAgICB0aGlzLl9kaXJ0eSA9IGZhbHNlO1xuICAgIH0sXG5cbiAgICBzd2l0Y2hCdWZmZXIgKCkge1xuICAgICAgICBsZXQgb2Zmc2V0ID0gKyt0aGlzLl9hcnJPZmZzZXQ7XG5cbiAgICAgICAgdGhpcy5ieXRlT2Zmc2V0ID0gMDtcbiAgICAgICAgdGhpcy52ZXJ0ZXhPZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLmluZGljZU9mZnNldCA9IDA7XG4gICAgICAgIHRoaXMuaW5kaWNlU3RhcnQgPSAwO1xuXG4gICAgICAgIGlmIChvZmZzZXQgPCB0aGlzLl92YkFyci5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZiID0gdGhpcy5fdmJBcnJbb2Zmc2V0XTtcbiAgICAgICAgICAgIHRoaXMuX2liID0gdGhpcy5faWJBcnJbb2Zmc2V0XTtcbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgdGhpcy5fdmIgPSBuZXcgZ2Z4LlZlcnRleEJ1ZmZlcihcbiAgICAgICAgICAgICAgICB0aGlzLl9iYXRjaGVyLl9kZXZpY2UsXG4gICAgICAgICAgICAgICAgdGhpcy5fdmVydGV4Rm9ybWF0LFxuICAgICAgICAgICAgICAgIGdmeC5VU0FHRV9EWU5BTUlDLFxuICAgICAgICAgICAgICAgIG5ldyBBcnJheUJ1ZmZlcigpLFxuICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLl92YkFycltvZmZzZXRdID0gdGhpcy5fdmI7XG5cbiAgICAgICAgICAgIHRoaXMuX2liID0gbmV3IGdmeC5JbmRleEJ1ZmZlcihcbiAgICAgICAgICAgICAgICB0aGlzLl9iYXRjaGVyLl9kZXZpY2UsXG4gICAgICAgICAgICAgICAgZ2Z4LklOREVYX0ZNVF9VSU5UMTYsXG4gICAgICAgICAgICAgICAgZ2Z4LlVTQUdFX1NUQVRJQyxcbiAgICAgICAgICAgICAgICBuZXcgQXJyYXlCdWZmZXIoKSxcbiAgICAgICAgICAgICAgICAwXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5faWJBcnJbb2Zmc2V0XSA9IHRoaXMuX2liO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGNoZWNrQW5kU3dpdGNoQnVmZmVyICh2ZXJ0ZXhDb3VudCkge1xuICAgICAgICBpZiAodGhpcy52ZXJ0ZXhPZmZzZXQgKyB2ZXJ0ZXhDb3VudCA+IDY1NTM1KSB7XG4gICAgICAgICAgICB0aGlzLnVwbG9hZERhdGEoKTtcbiAgICAgICAgICAgIHRoaXMuX2JhdGNoZXIuX2ZsdXNoKCk7XG4gICAgICAgICAgICB0aGlzLnN3aXRjaEJ1ZmZlcigpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlcXVlc3RTdGF0aWMgKHZlcnRleENvdW50LCBpbmRpY2VDb3VudCkge1xuXG4gICAgICAgIHRoaXMuY2hlY2tBbmRTd2l0Y2hCdWZmZXIodmVydGV4Q291bnQpO1xuXG4gICAgICAgIGxldCBieXRlT2Zmc2V0ID0gdGhpcy5ieXRlT2Zmc2V0ICsgdmVydGV4Q291bnQgKiB0aGlzLl92ZXJ0ZXhCeXRlcztcbiAgICAgICAgbGV0IGluZGljZU9mZnNldCA9IHRoaXMuaW5kaWNlT2Zmc2V0ICsgaW5kaWNlQ291bnQ7XG5cbiAgICAgICAgbGV0IGJ5dGVMZW5ndGggPSB0aGlzLl92RGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICBsZXQgaW5kaWNlTGVuZ3RoID0gdGhpcy5faURhdGEubGVuZ3RoO1xuICAgICAgICBpZiAoYnl0ZU9mZnNldCA+IGJ5dGVMZW5ndGggfHwgaW5kaWNlT2Zmc2V0ID4gaW5kaWNlTGVuZ3RoKSB7XG4gICAgICAgICAgICB3aGlsZSAoYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgfHwgaW5kaWNlTGVuZ3RoIDwgaW5kaWNlT2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faW5pdFZEYXRhQ291bnQgKj0gMjtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbml0SURhdGFDb3VudCAqPSAyO1xuXG4gICAgICAgICAgICAgICAgYnl0ZUxlbmd0aCA9IHRoaXMuX2luaXRWRGF0YUNvdW50ICogNDtcbiAgICAgICAgICAgICAgICBpbmRpY2VMZW5ndGggPSB0aGlzLl9pbml0SURhdGFDb3VudDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fcmVhbGxvY0J1ZmZlcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3VwZGF0ZU9mZnNldCh2ZXJ0ZXhDb3VudCwgaW5kaWNlQ291bnQsIGJ5dGVPZmZzZXQpO1xuICAgIH0sXG5cbiAgICBfdXBkYXRlT2Zmc2V0ICh2ZXJ0ZXhDb3VudCwgaW5kaWNlQ291bnQsIGJ5dGVPZmZzZXQpIHtcbiAgICAgICAgbGV0IG9mZnNldEluZm8gPSB0aGlzLl9vZmZzZXRJbmZvO1xuICAgICAgICBvZmZzZXRJbmZvLnZlcnRleE9mZnNldCA9IHRoaXMudmVydGV4T2Zmc2V0O1xuICAgICAgICB0aGlzLnZlcnRleE9mZnNldCArPSB2ZXJ0ZXhDb3VudDtcblxuICAgICAgICBvZmZzZXRJbmZvLmluZGljZU9mZnNldCA9IHRoaXMuaW5kaWNlT2Zmc2V0O1xuICAgICAgICB0aGlzLmluZGljZU9mZnNldCArPSBpbmRpY2VDb3VudDtcblxuICAgICAgICBvZmZzZXRJbmZvLmJ5dGVPZmZzZXQgPSB0aGlzLmJ5dGVPZmZzZXQ7XG4gICAgICAgIHRoaXMuYnl0ZU9mZnNldCA9IGJ5dGVPZmZzZXQ7XG5cbiAgICAgICAgdGhpcy5fZGlydHkgPSB0cnVlO1xuICAgIH0sXG5cbiAgICByZXF1ZXN0ICh2ZXJ0ZXhDb3VudCwgaW5kaWNlQ291bnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2JhdGNoZXIuX2J1ZmZlciAhPT0gdGhpcykge1xuICAgICAgICAgICAgdGhpcy5fYmF0Y2hlci5fZmx1c2goKTtcbiAgICAgICAgICAgIHRoaXMuX2JhdGNoZXIuX2J1ZmZlciA9IHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlcXVlc3RTdGF0aWModmVydGV4Q291bnQsIGluZGljZUNvdW50KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29mZnNldEluZm87XG4gICAgfSxcbiAgICBcbiAgICBfcmVhbGxvY0J1ZmZlciAoKSB7XG4gICAgICAgIHRoaXMuX3JlYWxsb2NWRGF0YSh0cnVlKTtcbiAgICAgICAgdGhpcy5fcmVhbGxvY0lEYXRhKHRydWUpO1xuICAgIH0sXG5cbiAgICBfcmVhbGxvY1ZEYXRhIChjb3B5T2xkRGF0YSkge1xuICAgICAgICBsZXQgb2xkVkRhdGE7XG4gICAgICAgIGlmICh0aGlzLl92RGF0YSkge1xuICAgICAgICAgICAgb2xkVkRhdGEgPSBuZXcgVWludDhBcnJheSh0aGlzLl92RGF0YS5idWZmZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdkRhdGEgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMuX2luaXRWRGF0YUNvdW50KTtcbiAgICAgICAgdGhpcy5fdWludFZEYXRhID0gbmV3IFVpbnQzMkFycmF5KHRoaXMuX3ZEYXRhLmJ1ZmZlcik7XG5cbiAgICAgICAgbGV0IG5ld0RhdGEgPSBuZXcgVWludDhBcnJheSh0aGlzLl91aW50VkRhdGEuYnVmZmVyKTtcblxuICAgICAgICBpZiAob2xkVkRhdGEgJiYgY29weU9sZERhdGEpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gb2xkVkRhdGEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbmV3RGF0YVtpXSA9IG9sZFZEYXRhW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9yZWFsbG9jSURhdGEgKGNvcHlPbGREYXRhKSB7XG4gICAgICAgIGxldCBvbGRJRGF0YSA9IHRoaXMuX2lEYXRhO1xuXG4gICAgICAgIHRoaXMuX2lEYXRhID0gbmV3IFVpbnQxNkFycmF5KHRoaXMuX2luaXRJRGF0YUNvdW50KTtcblxuICAgICAgICBpZiAob2xkSURhdGEgJiYgY29weU9sZERhdGEpIHtcbiAgICAgICAgICAgIGxldCBpRGF0YSA9IHRoaXMuX2lEYXRhO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBvbGRJRGF0YS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpRGF0YVtpXSA9IG9sZElEYXRhW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlc2V0ICgpIHtcbiAgICAgICAgdGhpcy5fYXJyT2Zmc2V0ID0gMDtcbiAgICAgICAgdGhpcy5fdmIgPSB0aGlzLl92YkFyclswXTtcbiAgICAgICAgdGhpcy5faWIgPSB0aGlzLl9pYkFyclswXTtcblxuICAgICAgICB0aGlzLmJ5dGVPZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLmluZGljZU9mZnNldCA9IDA7XG4gICAgICAgIHRoaXMudmVydGV4T2Zmc2V0ID0gMDtcbiAgICAgICAgdGhpcy5pbmRpY2VTdGFydCA9IDA7XG5cbiAgICAgICAgdGhpcy5fZGlydHkgPSBmYWxzZTtcbiAgICB9LFxuXG4gICAgZGVzdHJveSAoKSB7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAgdGhpcy5fdmJBcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB2YiA9IHRoaXMuX3ZiQXJyW2ldO1xuICAgICAgICAgICAgdmIuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ZiQXJyID0gbnVsbDtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2liQXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgaWIgPSB0aGlzLl9pYkFycltpXTtcbiAgICAgICAgICAgIGliLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pYkFyciA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5faWIgPSBudWxsO1xuICAgICAgICB0aGlzLl92YiA9IG51bGw7XG4gICAgfSxcblxuICAgIGZvcndhcmRJbmRpY2VTdGFydFRvT2Zmc2V0ICgpIHtcbiAgICAgICAgdGhpcy5pbmRpY2VTdGFydCA9IHRoaXMuaW5kaWNlT2Zmc2V0O1xuICAgIH1cbn0pO1xuXG5jYy5NZXNoQnVmZmVyID0gbW9kdWxlLmV4cG9ydHMgPSBNZXNoQnVmZmVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2dmeCA9IHJlcXVpcmUoJy4uLy4uLy4uL3JlbmRlcmVyL2dmeCcpO1xuXG52YXIgX2dmeDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZngpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgTWVzaEJ1ZmZlciA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuTWVzaEJ1ZmZlcicsXG4gICAgY3RvcjogZnVuY3Rpb24gY3RvcihiYXRjaGVyLCB2ZXJ0ZXhGb3JtYXQpIHtcbiAgICAgICAgdGhpcy5pbml0KGJhdGNoZXIsIHZlcnRleEZvcm1hdCk7XG4gICAgfSxcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KGJhdGNoZXIsIHZlcnRleEZvcm1hdCkge1xuICAgICAgICB0aGlzLmJ5dGVPZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLmluZGljZU9mZnNldCA9IDA7XG4gICAgICAgIHRoaXMudmVydGV4T2Zmc2V0ID0gMDtcbiAgICAgICAgdGhpcy5pbmRpY2VTdGFydCA9IDA7XG5cbiAgICAgICAgdGhpcy5fZGlydHkgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLl92ZXJ0ZXhGb3JtYXQgPSB2ZXJ0ZXhGb3JtYXQ7XG4gICAgICAgIHRoaXMuX3ZlcnRleEJ5dGVzID0gdGhpcy5fdmVydGV4Rm9ybWF0Ll9ieXRlcztcblxuICAgICAgICB0aGlzLl9hcnJPZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLl92YkFyciA9IFtdO1xuICAgICAgICB0aGlzLl92YiA9IG5ldyBfZ2Z4Mi5kZWZhdWx0LlZlcnRleEJ1ZmZlcihiYXRjaGVyLl9kZXZpY2UsIHZlcnRleEZvcm1hdCwgX2dmeDIuZGVmYXVsdC5VU0FHRV9EWU5BTUlDLCBuZXcgQXJyYXlCdWZmZXIoKSwgMCk7XG4gICAgICAgIHRoaXMuX3ZiQXJyWzBdID0gdGhpcy5fdmI7XG5cbiAgICAgICAgdGhpcy5faWJBcnIgPSBbXTtcbiAgICAgICAgdGhpcy5faWIgPSBuZXcgX2dmeDIuZGVmYXVsdC5JbmRleEJ1ZmZlcihiYXRjaGVyLl9kZXZpY2UsIF9nZngyLmRlZmF1bHQuSU5ERVhfRk1UX1VJTlQxNiwgX2dmeDIuZGVmYXVsdC5VU0FHRV9TVEFUSUMsIG5ldyBBcnJheUJ1ZmZlcigpLCAwKTtcbiAgICAgICAgdGhpcy5faWJBcnJbMF0gPSB0aGlzLl9pYjtcblxuICAgICAgICB0aGlzLl92RGF0YSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3VpbnRWRGF0YSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2lEYXRhID0gbnVsbDtcblxuICAgICAgICB0aGlzLl9iYXRjaGVyID0gYmF0Y2hlcjtcblxuICAgICAgICB0aGlzLl9pbml0VkRhdGFDb3VudCA9IDI1NiAqIHZlcnRleEZvcm1hdC5fYnl0ZXM7IC8vIGFjdHVhbGx5IDI1NiAqIDQgKiAodmVydGV4Rm9ybWF0Ll9ieXRlcyAvIDQpXG4gICAgICAgIHRoaXMuX2luaXRJRGF0YUNvdW50ID0gMjU2ICogNjtcblxuICAgICAgICB0aGlzLl9vZmZzZXRJbmZvID0ge1xuICAgICAgICAgICAgYnl0ZU9mZnNldDogMCxcbiAgICAgICAgICAgIHZlcnRleE9mZnNldDogMCxcbiAgICAgICAgICAgIGluZGljZU9mZnNldDogMFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9yZWFsbG9jQnVmZmVyKCk7XG4gICAgfSxcbiAgICB1cGxvYWREYXRhOiBmdW5jdGlvbiB1cGxvYWREYXRhKCkge1xuICAgICAgICBpZiAodGhpcy5ieXRlT2Zmc2V0ID09PSAwIHx8ICF0aGlzLl9kaXJ0eSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlIHZlcnRleHQgZGF0YVxuICAgICAgICB2YXIgdmVydGV4c0RhdGEgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMuX3ZEYXRhLmJ1ZmZlciwgMCwgdGhpcy5ieXRlT2Zmc2V0ID4+IDIpO1xuICAgICAgICB2YXIgaW5kaWNlc0RhdGEgPSBuZXcgVWludDE2QXJyYXkodGhpcy5faURhdGEuYnVmZmVyLCAwLCB0aGlzLmluZGljZU9mZnNldCk7XG5cbiAgICAgICAgdmFyIHZiID0gdGhpcy5fdmI7XG4gICAgICAgIHZiLnVwZGF0ZSgwLCB2ZXJ0ZXhzRGF0YSk7XG5cbiAgICAgICAgdmFyIGliID0gdGhpcy5faWI7XG4gICAgICAgIGliLnVwZGF0ZSgwLCBpbmRpY2VzRGF0YSk7XG5cbiAgICAgICAgdGhpcy5fZGlydHkgPSBmYWxzZTtcbiAgICB9LFxuICAgIHN3aXRjaEJ1ZmZlcjogZnVuY3Rpb24gc3dpdGNoQnVmZmVyKCkge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gKyt0aGlzLl9hcnJPZmZzZXQ7XG5cbiAgICAgICAgdGhpcy5ieXRlT2Zmc2V0ID0gMDtcbiAgICAgICAgdGhpcy52ZXJ0ZXhPZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLmluZGljZU9mZnNldCA9IDA7XG4gICAgICAgIHRoaXMuaW5kaWNlU3RhcnQgPSAwO1xuXG4gICAgICAgIGlmIChvZmZzZXQgPCB0aGlzLl92YkFyci5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZiID0gdGhpcy5fdmJBcnJbb2Zmc2V0XTtcbiAgICAgICAgICAgIHRoaXMuX2liID0gdGhpcy5faWJBcnJbb2Zmc2V0XTtcbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgdGhpcy5fdmIgPSBuZXcgX2dmeDIuZGVmYXVsdC5WZXJ0ZXhCdWZmZXIodGhpcy5fYmF0Y2hlci5fZGV2aWNlLCB0aGlzLl92ZXJ0ZXhGb3JtYXQsIF9nZngyLmRlZmF1bHQuVVNBR0VfRFlOQU1JQywgbmV3IEFycmF5QnVmZmVyKCksIDApO1xuICAgICAgICAgICAgdGhpcy5fdmJBcnJbb2Zmc2V0XSA9IHRoaXMuX3ZiO1xuXG4gICAgICAgICAgICB0aGlzLl9pYiA9IG5ldyBfZ2Z4Mi5kZWZhdWx0LkluZGV4QnVmZmVyKHRoaXMuX2JhdGNoZXIuX2RldmljZSwgX2dmeDIuZGVmYXVsdC5JTkRFWF9GTVRfVUlOVDE2LCBfZ2Z4Mi5kZWZhdWx0LlVTQUdFX1NUQVRJQywgbmV3IEFycmF5QnVmZmVyKCksIDApO1xuICAgICAgICAgICAgdGhpcy5faWJBcnJbb2Zmc2V0XSA9IHRoaXMuX2liO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBjaGVja0FuZFN3aXRjaEJ1ZmZlcjogZnVuY3Rpb24gY2hlY2tBbmRTd2l0Y2hCdWZmZXIodmVydGV4Q291bnQpIHtcbiAgICAgICAgaWYgKHRoaXMudmVydGV4T2Zmc2V0ICsgdmVydGV4Q291bnQgPiA2NTUzNSkge1xuICAgICAgICAgICAgdGhpcy51cGxvYWREYXRhKCk7XG4gICAgICAgICAgICB0aGlzLl9iYXRjaGVyLl9mbHVzaCgpO1xuICAgICAgICAgICAgdGhpcy5zd2l0Y2hCdWZmZXIoKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgcmVxdWVzdFN0YXRpYzogZnVuY3Rpb24gcmVxdWVzdFN0YXRpYyh2ZXJ0ZXhDb3VudCwgaW5kaWNlQ291bnQpIHtcblxuICAgICAgICB0aGlzLmNoZWNrQW5kU3dpdGNoQnVmZmVyKHZlcnRleENvdW50KTtcblxuICAgICAgICB2YXIgYnl0ZU9mZnNldCA9IHRoaXMuYnl0ZU9mZnNldCArIHZlcnRleENvdW50ICogdGhpcy5fdmVydGV4Qnl0ZXM7XG4gICAgICAgIHZhciBpbmRpY2VPZmZzZXQgPSB0aGlzLmluZGljZU9mZnNldCArIGluZGljZUNvdW50O1xuXG4gICAgICAgIHZhciBieXRlTGVuZ3RoID0gdGhpcy5fdkRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgdmFyIGluZGljZUxlbmd0aCA9IHRoaXMuX2lEYXRhLmxlbmd0aDtcbiAgICAgICAgaWYgKGJ5dGVPZmZzZXQgPiBieXRlTGVuZ3RoIHx8IGluZGljZU9mZnNldCA+IGluZGljZUxlbmd0aCkge1xuICAgICAgICAgICAgd2hpbGUgKGJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0IHx8IGluZGljZUxlbmd0aCA8IGluZGljZU9mZnNldCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2luaXRWRGF0YUNvdW50ICo9IDI7XG4gICAgICAgICAgICAgICAgdGhpcy5faW5pdElEYXRhQ291bnQgKj0gMjtcblxuICAgICAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB0aGlzLl9pbml0VkRhdGFDb3VudCAqIDQ7XG4gICAgICAgICAgICAgICAgaW5kaWNlTGVuZ3RoID0gdGhpcy5faW5pdElEYXRhQ291bnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX3JlYWxsb2NCdWZmZXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl91cGRhdGVPZmZzZXQodmVydGV4Q291bnQsIGluZGljZUNvdW50LCBieXRlT2Zmc2V0KTtcbiAgICB9LFxuICAgIF91cGRhdGVPZmZzZXQ6IGZ1bmN0aW9uIF91cGRhdGVPZmZzZXQodmVydGV4Q291bnQsIGluZGljZUNvdW50LCBieXRlT2Zmc2V0KSB7XG4gICAgICAgIHZhciBvZmZzZXRJbmZvID0gdGhpcy5fb2Zmc2V0SW5mbztcbiAgICAgICAgb2Zmc2V0SW5mby52ZXJ0ZXhPZmZzZXQgPSB0aGlzLnZlcnRleE9mZnNldDtcbiAgICAgICAgdGhpcy52ZXJ0ZXhPZmZzZXQgKz0gdmVydGV4Q291bnQ7XG5cbiAgICAgICAgb2Zmc2V0SW5mby5pbmRpY2VPZmZzZXQgPSB0aGlzLmluZGljZU9mZnNldDtcbiAgICAgICAgdGhpcy5pbmRpY2VPZmZzZXQgKz0gaW5kaWNlQ291bnQ7XG5cbiAgICAgICAgb2Zmc2V0SW5mby5ieXRlT2Zmc2V0ID0gdGhpcy5ieXRlT2Zmc2V0O1xuICAgICAgICB0aGlzLmJ5dGVPZmZzZXQgPSBieXRlT2Zmc2V0O1xuXG4gICAgICAgIHRoaXMuX2RpcnR5ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHJlcXVlc3Q6IGZ1bmN0aW9uIHJlcXVlc3QodmVydGV4Q291bnQsIGluZGljZUNvdW50KSB7XG4gICAgICAgIGlmICh0aGlzLl9iYXRjaGVyLl9idWZmZXIgIT09IHRoaXMpIHtcbiAgICAgICAgICAgIHRoaXMuX2JhdGNoZXIuX2ZsdXNoKCk7XG4gICAgICAgICAgICB0aGlzLl9iYXRjaGVyLl9idWZmZXIgPSB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZXF1ZXN0U3RhdGljKHZlcnRleENvdW50LCBpbmRpY2VDb3VudCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9vZmZzZXRJbmZvO1xuICAgIH0sXG4gICAgX3JlYWxsb2NCdWZmZXI6IGZ1bmN0aW9uIF9yZWFsbG9jQnVmZmVyKCkge1xuICAgICAgICB0aGlzLl9yZWFsbG9jVkRhdGEodHJ1ZSk7XG4gICAgICAgIHRoaXMuX3JlYWxsb2NJRGF0YSh0cnVlKTtcbiAgICB9LFxuICAgIF9yZWFsbG9jVkRhdGE6IGZ1bmN0aW9uIF9yZWFsbG9jVkRhdGEoY29weU9sZERhdGEpIHtcbiAgICAgICAgdmFyIG9sZFZEYXRhID0gdm9pZCAwO1xuICAgICAgICBpZiAodGhpcy5fdkRhdGEpIHtcbiAgICAgICAgICAgIG9sZFZEYXRhID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5fdkRhdGEuYnVmZmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3ZEYXRhID0gbmV3IEZsb2F0MzJBcnJheSh0aGlzLl9pbml0VkRhdGFDb3VudCk7XG4gICAgICAgIHRoaXMuX3VpbnRWRGF0YSA9IG5ldyBVaW50MzJBcnJheSh0aGlzLl92RGF0YS5idWZmZXIpO1xuXG4gICAgICAgIHZhciBuZXdEYXRhID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5fdWludFZEYXRhLmJ1ZmZlcik7XG5cbiAgICAgICAgaWYgKG9sZFZEYXRhICYmIGNvcHlPbGREYXRhKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9sZFZEYXRhLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIG5ld0RhdGFbaV0gPSBvbGRWRGF0YVtpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgX3JlYWxsb2NJRGF0YTogZnVuY3Rpb24gX3JlYWxsb2NJRGF0YShjb3B5T2xkRGF0YSkge1xuICAgICAgICB2YXIgb2xkSURhdGEgPSB0aGlzLl9pRGF0YTtcblxuICAgICAgICB0aGlzLl9pRGF0YSA9IG5ldyBVaW50MTZBcnJheSh0aGlzLl9pbml0SURhdGFDb3VudCk7XG5cbiAgICAgICAgaWYgKG9sZElEYXRhICYmIGNvcHlPbGREYXRhKSB7XG4gICAgICAgICAgICB2YXIgaURhdGEgPSB0aGlzLl9pRGF0YTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2xkSURhdGEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaURhdGFbaV0gPSBvbGRJRGF0YVtpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgcmVzZXQ6IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgICB0aGlzLl9hcnJPZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLl92YiA9IHRoaXMuX3ZiQXJyWzBdO1xuICAgICAgICB0aGlzLl9pYiA9IHRoaXMuX2liQXJyWzBdO1xuXG4gICAgICAgIHRoaXMuYnl0ZU9mZnNldCA9IDA7XG4gICAgICAgIHRoaXMuaW5kaWNlT2Zmc2V0ID0gMDtcbiAgICAgICAgdGhpcy52ZXJ0ZXhPZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLmluZGljZVN0YXJ0ID0gMDtcblxuICAgICAgICB0aGlzLl9kaXJ0eSA9IGZhbHNlO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3ZiQXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdmIgPSB0aGlzLl92YkFycltpXTtcbiAgICAgICAgICAgIHZiLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl92YkFyciA9IG51bGw7XG5cbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHRoaXMuX2liQXJyLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGliID0gdGhpcy5faWJBcnJbX2ldO1xuICAgICAgICAgICAgaWIuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2liQXJyID0gbnVsbDtcblxuICAgICAgICB0aGlzLl9pYiA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ZiID0gbnVsbDtcbiAgICB9LFxuICAgIGZvcndhcmRJbmRpY2VTdGFydFRvT2Zmc2V0OiBmdW5jdGlvbiBmb3J3YXJkSW5kaWNlU3RhcnRUb09mZnNldCgpIHtcbiAgICAgICAgdGhpcy5pbmRpY2VTdGFydCA9IHRoaXMuaW5kaWNlT2Zmc2V0O1xuICAgIH1cbn0pOyAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cbiAgICBcbiAgICAgaHR0cHM6Ly93d3cuY29jb3MuY29tL1xuICAgIFxuICAgICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gICAgIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxuICAgICB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gICAgIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gICAgIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiAgICAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuICAgICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cbiAgICBcbiAgICAgVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiAgICAgWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cbiAgICBcbiAgICAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICAgICBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAgICAgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gICAgIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAgICAgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAgICAgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICAgICBUSEUgU09GVFdBUkUuXG4gICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmNjLk1lc2hCdWZmZXIgPSBtb2R1bGUuZXhwb3J0cyA9IE1lc2hCdWZmZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTFsYzJndFluVm1abVZ5TG1weklsMHNJbTVoYldWeklqcGJJazFsYzJoQ2RXWm1aWElpTENKall5SXNJa05zWVhOeklpd2libUZ0WlNJc0ltTjBiM0lpTENKaVlYUmphR1Z5SWl3aWRtVnlkR1Y0Um05eWJXRjBJaXdpYVc1cGRDSXNJbUo1ZEdWUFptWnpaWFFpTENKcGJtUnBZMlZQWm1aelpYUWlMQ0oyWlhKMFpYaFBabVp6WlhRaUxDSnBibVJwWTJWVGRHRnlkQ0lzSWw5a2FYSjBlU0lzSWw5MlpYSjBaWGhHYjNKdFlYUWlMQ0pmZG1WeWRHVjRRbmwwWlhNaUxDSmZZbmwwWlhNaUxDSmZZWEp5VDJabWMyVjBJaXdpWDNaaVFYSnlJaXdpWDNaaUlpd2laMlo0SWl3aVZtVnlkR1Y0UW5WbVptVnlJaXdpWDJSbGRtbGpaU0lzSWxWVFFVZEZYMFJaVGtGTlNVTWlMQ0pCY25KaGVVSjFabVpsY2lJc0lsOXBZa0Z5Y2lJc0lsOXBZaUlzSWtsdVpHVjRRblZtWm1WeUlpd2lTVTVFUlZoZlJrMVVYMVZKVGxReE5pSXNJbFZUUVVkRlgxTlVRVlJKUXlJc0lsOTJSR0YwWVNJc0lsOTFhVzUwVmtSaGRHRWlMQ0pmYVVSaGRHRWlMQ0pmWW1GMFkyaGxjaUlzSWw5cGJtbDBWa1JoZEdGRGIzVnVkQ0lzSWw5cGJtbDBTVVJoZEdGRGIzVnVkQ0lzSWw5dlptWnpaWFJKYm1adklpd2lYM0psWVd4c2IyTkNkV1ptWlhJaUxDSjFjR3h2WVdSRVlYUmhJaXdpZG1WeWRHVjRjMFJoZEdFaUxDSkdiRzloZERNeVFYSnlZWGtpTENKaWRXWm1aWElpTENKcGJtUnBZMlZ6UkdGMFlTSXNJbFZwYm5ReE5rRnljbUY1SWl3aWRtSWlMQ0oxY0dSaGRHVWlMQ0pwWWlJc0luTjNhWFJqYUVKMVptWmxjaUlzSW05bVpuTmxkQ0lzSW14bGJtZDBhQ0lzSW1Ob1pXTnJRVzVrVTNkcGRHTm9RblZtWm1WeUlpd2lkbVZ5ZEdWNFEyOTFiblFpTENKZlpteDFjMmdpTENKeVpYRjFaWE4wVTNSaGRHbGpJaXdpYVc1a2FXTmxRMjkxYm5RaUxDSmllWFJsVEdWdVozUm9JaXdpYVc1a2FXTmxUR1Z1WjNSb0lpd2lYM1Z3WkdGMFpVOW1abk5sZENJc0ltOW1abk5sZEVsdVptOGlMQ0p5WlhGMVpYTjBJaXdpWDJKMVptWmxjaUlzSWw5eVpXRnNiRzlqVmtSaGRHRWlMQ0pmY21WaGJHeHZZMGxFWVhSaElpd2lZMjl3ZVU5c1pFUmhkR0VpTENKdmJHUldSR0YwWVNJc0lsVnBiblE0UVhKeVlYa2lMQ0pWYVc1ME16SkJjbkpoZVNJc0ltNWxkMFJoZEdFaUxDSnBJaXdpYkNJc0ltOXNaRWxFWVhSaElpd2lhVVJoZEdFaUxDSnlaWE5sZENJc0ltUmxjM1J5YjNraUxDSm1iM0ozWVhKa1NXNWthV05sVTNSaGNuUlViMDltWm5ObGRDSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlYU3dpYldGd2NHbHVaM01pT2lJN08wRkJlVUpCT3pzN096czdRVUZGUVN4SlFVRkpRU3hoUVVGaFF5eEhRVUZIUXl4TFFVRklMRU5CUVZNN1FVRkRkRUpETEZWQlFVMHNaVUZFWjBJN1FVRkZkRUpETEZGQlJuTkNMR2RDUVVWb1FrTXNUMEZHWjBJc1JVRkZVRU1zV1VGR1R5eEZRVVZQTzBGQlEzcENMR0ZCUVV0RExFbEJRVXdzUTBGQlYwWXNUMEZCV0N4RlFVRnZRa01zV1VGQmNFSTdRVUZEU0N4TFFVcHhRanRCUVUxMFFrTXNVVUZPYzBJc1owSkJUV2hDUml4UFFVNW5RaXhGUVUxUVF5eFpRVTVQTEVWQlRVODdRVUZEZWtJc1lVRkJTMFVzVlVGQlRDeEhRVUZyUWl4RFFVRnNRanRCUVVOQkxHRkJRVXRETEZsQlFVd3NSMEZCYjBJc1EwRkJjRUk3UVVGRFFTeGhRVUZMUXl4WlFVRk1MRWRCUVc5Q0xFTkJRWEJDTzBGQlEwRXNZVUZCUzBNc1YwRkJUQ3hIUVVGdFFpeERRVUZ1UWpzN1FVRkZRU3hoUVVGTFF5eE5RVUZNTEVkQlFXTXNTMEZCWkRzN1FVRkZRU3hoUVVGTFF5eGhRVUZNTEVkQlFYRkNVQ3haUVVGeVFqdEJRVU5CTEdGQlFVdFJMRmxCUVV3c1IwRkJiMElzUzBGQlMwUXNZVUZCVEN4RFFVRnRRa1VzVFVGQmRrTTdPMEZCUlVFc1lVRkJTME1zVlVGQlRDeEhRVUZyUWl4RFFVRnNRanRCUVVOQkxHRkJRVXRETEUxQlFVd3NSMEZCWXl4RlFVRmtPMEZCUTBFc1lVRkJTME1zUjBGQlRDeEhRVUZYTEVsQlFVbERMR05CUVVsRExGbEJRVklzUTBGRFVHWXNVVUZCVVdkQ0xFOUJSRVFzUlVGRlVHWXNXVUZHVHl4RlFVZFFZU3hqUVVGSlJ5eGhRVWhITEVWQlNWQXNTVUZCU1VNc1YwRkJTaXhGUVVwUExFVkJTMUFzUTBGTVR5eERRVUZZTzBGQlQwRXNZVUZCUzA0c1RVRkJUQ3hEUVVGWkxFTkJRVm9zU1VGQmFVSXNTMEZCUzBNc1IwRkJkRUk3TzBGQlJVRXNZVUZCUzAwc1RVRkJUQ3hIUVVGakxFVkJRV1E3UVVGRFFTeGhRVUZMUXl4SFFVRk1MRWRCUVZjc1NVRkJTVTRzWTBGQlNVOHNWMEZCVWl4RFFVTlFja0lzVVVGQlVXZENMRTlCUkVRc1JVRkZVRVlzWTBGQlNWRXNaMEpCUmtjc1JVRkhVRklzWTBGQlNWTXNXVUZJUnl4RlFVbFFMRWxCUVVsTUxGZEJRVW9zUlVGS1R5eEZRVXRRTEVOQlRFOHNRMEZCV0R0QlFVOUJMR0ZCUVV0RExFMUJRVXdzUTBGQldTeERRVUZhTEVsQlFXbENMRXRCUVV0RExFZEJRWFJDT3p0QlFVVkJMR0ZCUVV0SkxFMUJRVXdzUjBGQll5eEpRVUZrTzBGQlEwRXNZVUZCUzBNc1ZVRkJUQ3hIUVVGclFpeEpRVUZzUWp0QlFVTkJMR0ZCUVV0RExFMUJRVXdzUjBGQll5eEpRVUZrT3p0QlFVVkJMR0ZCUVV0RExGRkJRVXdzUjBGQlowSXpRaXhQUVVGb1FqczdRVUZGUVN4aFFVRkxORUlzWlVGQlRDeEhRVUYxUWl4TlFVRk5NMElzWVVGQllWTXNUVUZCTVVNc1EwRjBRM2xDTEVOQmMwTjNRanRCUVVOcVJDeGhRVUZMYlVJc1pVRkJUQ3hIUVVGMVFpeE5RVUZOTEVOQlFUZENPenRCUVVWQkxHRkJRVXRETEZkQlFVd3NSMEZCYlVJN1FVRkRaak5DTEhkQ1FVRmhMRU5CUkVVN1FVRkZaa1VzTUVKQlFXVXNRMEZHUVR0QlFVZG1SQ3d3UWtGQlpUdEJRVWhCTEZOQlFXNUNPMEZCUzBFc1lVRkJTekpDTEdOQlFVdzdRVUZEU0N4TFFYSkVjVUk3UVVGMVJIUkNReXhqUVhaRWMwSXNkMEpCZFVSU08wRkJRMVlzV1VGQlNTeExRVUZMTjBJc1ZVRkJUQ3hMUVVGdlFpeERRVUZ3UWl4SlFVRjVRaXhEUVVGRExFdEJRVXRKTEUxQlFXNURMRVZCUVRKRE8wRkJRM1pETzBGQlEwZzdPMEZCUlVRN1FVRkRRU3haUVVGSk1FSXNZMEZCWXl4SlFVRkpReXhaUVVGS0xFTkJRV2xDTEV0QlFVdFdMRTFCUVV3c1EwRkJXVmNzVFVGQk4wSXNSVUZCY1VNc1EwRkJja01zUlVGQmQwTXNTMEZCUzJoRExGVkJRVXdzU1VGQmJVSXNRMEZCTTBRc1EwRkJiRUk3UVVGRFFTeFpRVUZKYVVNc1kwRkJZeXhKUVVGSlF5eFhRVUZLTEVOQlFXZENMRXRCUVV0WUxFMUJRVXdzUTBGQldWTXNUVUZCTlVJc1JVRkJiME1zUTBGQmNFTXNSVUZCZFVNc1MwRkJTeTlDTEZsQlFUVkRMRU5CUVd4Q096dEJRVVZCTEZsQlFVbHJReXhMUVVGTExFdEJRVXQ2UWl4SFFVRmtPMEZCUTBGNVFpeFhRVUZIUXl4TlFVRklMRU5CUVZVc1EwRkJWaXhGUVVGaFRpeFhRVUZpT3p0QlFVVkJMRmxCUVVsUExFdEJRVXNzUzBGQlMzQkNMRWRCUVdRN1FVRkRRVzlDTEZkQlFVZEVMRTFCUVVnc1EwRkJWU3hEUVVGV0xFVkJRV0ZJTEZkQlFXSTdPMEZCUlVFc1lVRkJTemRDTEUxQlFVd3NSMEZCWXl4TFFVRmtPMEZCUTBnc1MwRjJSWEZDTzBGQmVVVjBRbXRETEdkQ1FYcEZjMElzTUVKQmVVVk9PMEZCUTFvc1dVRkJTVU1zVTBGQlV5eEZRVUZGTEV0QlFVc3ZRaXhWUVVGd1FqczdRVUZGUVN4aFFVRkxVaXhWUVVGTUxFZEJRV3RDTEVOQlFXeENPMEZCUTBFc1lVRkJTMFVzV1VGQlRDeEhRVUZ2UWl4RFFVRndRanRCUVVOQkxHRkJRVXRFTEZsQlFVd3NSMEZCYjBJc1EwRkJjRUk3UVVGRFFTeGhRVUZMUlN4WFFVRk1MRWRCUVcxQ0xFTkJRVzVDT3p0QlFVVkJMRmxCUVVsdlF5eFRRVUZUTEV0QlFVczVRaXhOUVVGTUxFTkJRVmtyUWl4TlFVRjZRaXhGUVVGcFF6dEJRVU0zUWl4cFFrRkJTemxDTEVkQlFVd3NSMEZCVnl4TFFVRkxSQ3hOUVVGTUxFTkJRVms0UWl4TlFVRmFMRU5CUVZnN1FVRkRRU3hwUWtGQlMzUkNMRWRCUVV3c1IwRkJWeXhMUVVGTFJDeE5RVUZNTEVOQlFWbDFRaXhOUVVGYUxFTkJRVmc3UVVGRFNDeFRRVWhFTEUxQlIwODdPMEZCUlVnc2FVSkJRVXMzUWl4SFFVRk1MRWRCUVZjc1NVRkJTVU1zWTBGQlNVTXNXVUZCVWl4RFFVTlFMRXRCUVV0WkxGRkJRVXdzUTBGQlkxZ3NUMEZFVUN4RlFVVlFMRXRCUVV0U0xHRkJSa1VzUlVGSFVFMHNZMEZCU1Vjc1lVRklSeXhGUVVsUUxFbEJRVWxETEZkQlFVb3NSVUZLVHl4RlFVdFFMRU5CVEU4c1EwRkJXRHRCUVU5QkxHbENRVUZMVGl4TlFVRk1MRU5CUVZrNFFpeE5RVUZhTEVsQlFYTkNMRXRCUVVzM1FpeEhRVUV6UWpzN1FVRkZRU3hwUWtGQlMwOHNSMEZCVEN4SFFVRlhMRWxCUVVsT0xHTkJRVWxQTEZkQlFWSXNRMEZEVUN4TFFVRkxUU3hSUVVGTUxFTkJRV05ZTEU5QlJGQXNSVUZGVUVZc1kwRkJTVkVzWjBKQlJrY3NSVUZIVUZJc1kwRkJTVk1zV1VGSVJ5eEZRVWxRTEVsQlFVbE1MRmRCUVVvc1JVRktUeXhGUVV0UUxFTkJURThzUTBGQldEdEJRVTlCTEdsQ1FVRkxReXhOUVVGTUxFTkJRVmwxUWl4TlFVRmFMRWxCUVhOQ0xFdEJRVXQwUWl4SFFVRXpRanRCUVVOSU8wRkJRMG9zUzBGNFIzRkNPMEZCTUVkMFFuZENMSGRDUVRGSGMwSXNaME5CTUVkQlF5eFhRVEZIUVN4RlFUQkhZVHRCUVVNdlFpeFpRVUZKTEV0QlFVdDRReXhaUVVGTUxFZEJRVzlDZDBNc1YwRkJjRUlzUjBGQmEwTXNTMEZCZEVNc1JVRkJOa003UVVGRGVrTXNhVUpCUVV0aUxGVkJRVXc3UVVGRFFTeHBRa0ZCUzB3c1VVRkJUQ3hEUVVGamJVSXNUVUZCWkR0QlFVTkJMR2xDUVVGTFRDeFpRVUZNTzBGQlEwZzdRVUZEU2l4TFFXaEljVUk3UVVGclNIUkNUU3hwUWtGc1NITkNMSGxDUVd0SVVFWXNWMEZzU0U4c1JVRnJTRTFITEZkQmJFaE9MRVZCYTBodFFqczdRVUZGY2tNc1lVRkJTMG9zYjBKQlFVd3NRMEZCTUVKRExGZEJRVEZDT3p0QlFVVkJMRmxCUVVreFF5eGhRVUZoTEV0QlFVdEJMRlZCUVV3c1IwRkJhMEl3UXl4alFVRmpMRXRCUVV0d1F5eFpRVUYwUkR0QlFVTkJMRmxCUVVsTUxHVkJRV1VzUzBGQlMwRXNXVUZCVEN4SFFVRnZRalJETEZkQlFYWkRPenRCUVVWQkxGbEJRVWxETEdGQlFXRXNTMEZCUzNwQ0xFMUJRVXdzUTBGQldYbENMRlZCUVRkQ08wRkJRMEVzV1VGQlNVTXNaVUZCWlN4TFFVRkxlRUlzVFVGQlRDeERRVUZaYVVJc1RVRkJMMEk3UVVGRFFTeFpRVUZKZUVNc1lVRkJZVGhETEZWQlFXSXNTVUZCTWtJM1F5eGxRVUZsT0VNc1dVRkJPVU1zUlVGQk5FUTdRVUZEZUVRc2JVSkJRVTlFTEdGQlFXRTVReXhWUVVGaUxFbEJRVEpDSzBNc1pVRkJaVGxETEZsQlFXcEVMRVZCUVN0RU8wRkJRek5FTEhGQ1FVRkxkMElzWlVGQlRDeEpRVUYzUWl4RFFVRjRRanRCUVVOQkxIRkNRVUZMUXl4bFFVRk1MRWxCUVhkQ0xFTkJRWGhDT3p0QlFVVkJiMElzTmtKQlFXRXNTMEZCUzNKQ0xHVkJRVXdzUjBGQmRVSXNRMEZCY0VNN1FVRkRRWE5DTEN0Q1FVRmxMRXRCUVV0eVFpeGxRVUZ3UWp0QlFVTklPenRCUVVWRUxHbENRVUZMUlN4alFVRk1PMEZCUTBnN1FVRkRSQ3hoUVVGTGIwSXNZVUZCVEN4RFFVRnRRazRzVjBGQmJrSXNSVUZCWjBOSExGZEJRV2hETEVWQlFUWkROME1zVlVGQk4wTTdRVUZEU0N4TFFYWkpjVUk3UVVGNVNYUkNaMFFzYVVKQmVrbHpRaXg1UWtGNVNWQk9MRmRCZWtsUExFVkJlVWxOUnl4WFFYcEpUaXhGUVhsSmJVSTNReXhWUVhwSmJrSXNSVUY1U1N0Q08wRkJRMnBFTEZsQlFVbHBSQ3hoUVVGaExFdEJRVXQwUWl4WFFVRjBRanRCUVVOQmMwSXNiVUpCUVZjdlF5eFpRVUZZTEVkQlFUQkNMRXRCUVV0QkxGbEJRUzlDTzBGQlEwRXNZVUZCUzBFc1dVRkJUQ3hKUVVGeFFuZERMRmRCUVhKQ096dEJRVVZCVHl4dFFrRkJWMmhFTEZsQlFWZ3NSMEZCTUVJc1MwRkJTMEVzV1VGQkwwSTdRVUZEUVN4aFFVRkxRU3haUVVGTUxFbEJRWEZDTkVNc1YwRkJja0k3TzBGQlJVRkpMRzFDUVVGWGFrUXNWVUZCV0N4SFFVRjNRaXhMUVVGTFFTeFZRVUUzUWp0QlFVTkJMR0ZCUVV0QkxGVkJRVXdzUjBGQmEwSkJMRlZCUVd4Q096dEJRVVZCTEdGQlFVdEpMRTFCUVV3c1IwRkJZeXhKUVVGa08wRkJRMGdzUzBGeVNuRkNPMEZCZFVwMFFqaERMRmRCZGtwelFpeHRRa0YxU21KU0xGZEJka3BoTEVWQmRVcEJSeXhYUVhaS1FTeEZRWFZLWVR0QlFVTXZRaXhaUVVGSkxFdEJRVXR5UWl4UlFVRk1MRU5CUVdNeVFpeFBRVUZrTEV0QlFUQkNMRWxCUVRsQ0xFVkJRVzlETzBGQlEyaERMR2xDUVVGTE0wSXNVVUZCVEN4RFFVRmpiVUlzVFVGQlpEdEJRVU5CTEdsQ1FVRkxia0lzVVVGQlRDeERRVUZqTWtJc1QwRkJaQ3hIUVVGM1FpeEpRVUY0UWp0QlFVTklPenRCUVVWRUxHRkJRVXRRTEdGQlFVd3NRMEZCYlVKR0xGZEJRVzVDTEVWQlFXZERSeXhYUVVGb1F6dEJRVU5CTEdWQlFVOHNTMEZCUzJ4Q0xGZEJRVm83UVVGRFNDeExRUzlLY1VJN1FVRnBTM1JDUXl4clFrRnFTM05DTERSQ1FXbExTanRCUVVOa0xHRkJRVXQzUWl4aFFVRk1MRU5CUVcxQ0xFbEJRVzVDTzBGQlEwRXNZVUZCUzBNc1lVRkJUQ3hEUVVGdFFpeEpRVUZ1UWp0QlFVTklMRXRCY0V0eFFqdEJRWE5MZEVKRUxHbENRWFJMYzBJc2VVSkJjMHRRUlN4WFFYUkxUeXhGUVhOTFRUdEJRVU40UWl4WlFVRkpReXhwUWtGQlNqdEJRVU5CTEZsQlFVa3NTMEZCUzJ4RExFMUJRVlFzUlVGQmFVSTdRVUZEWW10RExIVkNRVUZYTEVsQlFVbERMRlZCUVVvc1EwRkJaU3hMUVVGTGJrTXNUVUZCVEN4RFFVRlpWeXhOUVVFelFpeERRVUZZTzBGQlEwZzdPMEZCUlVRc1lVRkJTMWdzVFVGQlRDeEhRVUZqTEVsQlFVbFZMRmxCUVVvc1EwRkJhVUlzUzBGQlMwNHNaVUZCZEVJc1EwRkJaRHRCUVVOQkxHRkJRVXRJTEZWQlFVd3NSMEZCYTBJc1NVRkJTVzFETEZkQlFVb3NRMEZCWjBJc1MwRkJTM0JETEUxQlFVd3NRMEZCV1Zjc1RVRkJOVUlzUTBGQmJFSTdPMEZCUlVFc1dVRkJTVEJDTEZWQlFWVXNTVUZCU1VZc1ZVRkJTaXhEUVVGbExFdEJRVXRzUXl4VlFVRk1MRU5CUVdkQ1ZTeE5RVUV2UWl4RFFVRmtPenRCUVVWQkxGbEJRVWwxUWl4WlFVRlpSQ3hYUVVGb1FpeEZRVUUyUWp0QlFVTjZRaXhwUWtGQlN5eEpRVUZKU3l4SlFVRkpMRU5CUVZJc1JVRkJWME1zU1VGQlNVd3NVMEZCVTJZc1RVRkJOMElzUlVGQmNVTnRRaXhKUVVGSlF5eERRVUY2UXl4RlFVRTBRMFFzUjBGQk5VTXNSVUZCYVVRN1FVRkROME5FTEhkQ1FVRlJReXhEUVVGU0xFbEJRV0ZLTEZOQlFWTkpMRU5CUVZRc1EwRkJZanRCUVVOSU8wRkJRMG83UVVGRFNpeExRWFJNY1VJN1FVRjNUSFJDVGl4cFFrRjRUSE5DTEhsQ1FYZE1VRU1zVjBGNFRFOHNSVUYzVEUwN1FVRkRlRUlzV1VGQlNVOHNWMEZCVnl4TFFVRkxkRU1zVFVGQmNFSTdPMEZCUlVFc1lVRkJTMEVzVFVGQlRDeEhRVUZqTEVsQlFVbFhMRmRCUVVvc1EwRkJaMElzUzBGQlMxSXNaVUZCY2tJc1EwRkJaRHM3UVVGRlFTeFpRVUZKYlVNc1dVRkJXVkFzVjBGQmFFSXNSVUZCTmtJN1FVRkRla0lzWjBKQlFVbFJMRkZCUVZFc1MwRkJTM1pETEUxQlFXcENPMEZCUTBFc2FVSkJRVXNzU1VGQlNXOURMRWxCUVVrc1EwRkJVaXhGUVVGWFF5eEpRVUZKUXl4VFFVRlRja0lzVFVGQk4wSXNSVUZCY1VOdFFpeEpRVUZKUXl4RFFVRjZReXhGUVVFMFEwUXNSMEZCTlVNc1JVRkJhVVE3UVVGRE4wTkhMSE5DUVVGTlNDeERRVUZPTEVsQlFWZEZMRk5CUVZOR0xFTkJRVlFzUTBGQldEdEJRVU5JTzBGQlEwbzdRVUZEU2l4TFFXNU5jVUk3UVVGeFRYUkNTU3hUUVhKTmMwSXNiVUpCY1UxaU8wRkJRMHdzWVVGQlMzWkVMRlZCUVV3c1IwRkJhMElzUTBGQmJFSTdRVUZEUVN4aFFVRkxSU3hIUVVGTUxFZEJRVmNzUzBGQlMwUXNUVUZCVEN4RFFVRlpMRU5CUVZvc1EwRkJXRHRCUVVOQkxHRkJRVXRSTEVkQlFVd3NSMEZCVnl4TFFVRkxSQ3hOUVVGTUxFTkJRVmtzUTBGQldpeERRVUZZT3p0QlFVVkJMR0ZCUVV0b1FpeFZRVUZNTEVkQlFXdENMRU5CUVd4Q08wRkJRMEVzWVVGQlMwTXNXVUZCVEN4SFFVRnZRaXhEUVVGd1FqdEJRVU5CTEdGQlFVdERMRmxCUVV3c1IwRkJiMElzUTBGQmNFSTdRVUZEUVN4aFFVRkxReXhYUVVGTUxFZEJRVzFDTEVOQlFXNUNPenRCUVVWQkxHRkJRVXRETEUxQlFVd3NSMEZCWXl4TFFVRmtPMEZCUTBnc1MwRm9UbkZDTzBGQmEwNTBRalJFTEZkQmJFNXpRaXh4UWtGclRsZzdRVUZEVUN4aFFVRkxSQ3hMUVVGTU8wRkJRMEVzWVVGQlN5eEpRVUZKU2l4SlFVRkpMRU5CUVdJc1JVRkJaMEpCTEVsQlFVc3NTMEZCUzJ4RUxFMUJRVXdzUTBGQldTdENMRTFCUVdwRExFVkJRWGxEYlVJc1IwRkJla01zUlVGQk9FTTdRVUZETVVNc1owSkJRVWw0UWl4TFFVRkxMRXRCUVVzeFFpeE5RVUZNTEVOQlFWbHJSQ3hEUVVGYUxFTkJRVlE3UVVGRFFYaENMR1ZCUVVjMlFpeFBRVUZJTzBGQlEwZzdRVUZEUkN4aFFVRkxka1FzVFVGQlRDeEhRVUZqTEVsQlFXUTdPMEZCUlVFc1lVRkJTeXhKUVVGSmEwUXNTMEZCU1N4RFFVRmlMRVZCUVdkQ1FTeExRVUZKTEV0QlFVc3pReXhOUVVGTUxFTkJRVmwzUWl4TlFVRm9ReXhGUVVGM1EyMUNMRWxCUVhoRExFVkJRVFpETzBGQlEzcERMR2RDUVVGSmRFSXNTMEZCU3l4TFFVRkxja0lzVFVGQlRDeERRVUZaTWtNc1JVRkJXaXhEUVVGVU8wRkJRMEYwUWl4bFFVRkhNa0lzVDBGQlNEdEJRVU5JTzBGQlEwUXNZVUZCUzJoRUxFMUJRVXdzUjBGQll5eEpRVUZrT3p0QlFVVkJMR0ZCUVV0RExFZEJRVXdzUjBGQlZ5eEpRVUZZTzBGQlEwRXNZVUZCUzFBc1IwRkJUQ3hIUVVGWExFbEJRVmc3UVVGRFNDeExRV3hQY1VJN1FVRnZUM1JDZFVRc09FSkJjRTl6UWl4M1EwRnZUMUU3UVVGRE1VSXNZVUZCU3psRUxGZEJRVXdzUjBGQmJVSXNTMEZCUzBZc1dVRkJlRUk3UVVGRFNEdEJRWFJQY1VJc1EwRkJWQ3hEUVVGcVFpeERMRU5CTTBKQk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQmIxRkJVaXhIUVVGSFJDeFZRVUZJTEVkQlFXZENNRVVzVDBGQlQwTXNUMEZCVUN4SFFVRnBRak5GTEZWQlFXcERJaXdpWm1sc1pTSTZJbTFsYzJndFluVm1abVZ5TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQkRiM0I1Y21sbmFIUWdLR01wSURJd01UY3RNakF4T0NCWWFXRnRaVzRnV1dGcWFTQlRiMlowZDJGeVpTQkRieTRzSUV4MFpDNWNibHh1SUdoMGRIQnpPaTh2ZDNkM0xtTnZZMjl6TG1OdmJTOWNibHh1SUZCbGNtMXBjM05wYjI0Z2FYTWdhR1Z5WldKNUlHZHlZVzUwWldRc0lHWnlaV1VnYjJZZ1kyaGhjbWRsTENCMGJ5QmhibmtnY0dWeWMyOXVJRzlpZEdGcGJtbHVaeUJoSUdOdmNIbGNiaUJ2WmlCMGFHbHpJSE52Wm5SM1lYSmxJR0Z1WkNCaGMzTnZZMmxoZEdWa0lHVnVaMmx1WlNCemIzVnlZMlVnWTI5a1pTQW9kR2hsSUZ3aVUyOW1kSGRoY21WY0lpa3NJR0VnYkdsdGFYUmxaQ3hjYmlCM2IzSnNaSGRwWkdVc0lISnZlV0ZzZEhrdFpuSmxaU3dnYm05dUxXRnpjMmxuYm1GaWJHVXNJSEpsZG05allXSnNaU0JoYm1RZ2JtOXVMV1Y0WTJ4MWMybDJaU0JzYVdObGJuTmxYRzRnZEc4Z2RYTmxJRU52WTI5eklFTnlaV0YwYjNJZ2MyOXNaV3g1SUhSdklHUmxkbVZzYjNBZ1oyRnRaWE1nYjI0Z2VXOTFjaUIwWVhKblpYUWdjR3hoZEdadmNtMXpMaUJaYjNVZ2MyaGhiR3hjYmlCdWIzUWdkWE5sSUVOdlkyOXpJRU55WldGMGIzSWdjMjltZEhkaGNtVWdabTl5SUdSbGRtVnNiM0JwYm1jZ2IzUm9aWElnYzI5bWRIZGhjbVVnYjNJZ2RHOXZiSE1nZEdoaGRDZHpYRzRnZFhObFpDQm1iM0lnWkdWMlpXeHZjR2x1WnlCbllXMWxjeTRnV1c5MUlHRnlaU0J1YjNRZ1ozSmhiblJsWkNCMGJ5QndkV0pzYVhOb0xDQmthWE4wY21saWRYUmxMRnh1SUhOMVlteHBZMlZ1YzJVc0lHRnVaQzl2Y2lCelpXeHNJR052Y0dsbGN5QnZaaUJEYjJOdmN5QkRjbVZoZEc5eUxseHVYRzRnVkdobElITnZablIzWVhKbElHOXlJSFJ2YjJ4eklHbHVJSFJvYVhNZ1RHbGpaVzV6WlNCQlozSmxaVzFsYm5RZ1lYSmxJR3hwWTJWdWMyVmtMQ0J1YjNRZ2MyOXNaQzVjYmlCWWFXRnRaVzRnV1dGcWFTQlRiMlowZDJGeVpTQkRieTRzSUV4MFpDNGdjbVZ6WlhKMlpYTWdZV3hzSUhKcFoyaDBjeUJ1YjNRZ1pYaHdjbVZ6YzJ4NUlHZHlZVzUwWldRZ2RHOGdlVzkxTGx4dVhHNGdWRWhGSUZOUFJsUlhRVkpGSUVsVElGQlNUMVpKUkVWRUlGd2lRVk1nU1ZOY0lpd2dWMGxVU0U5VlZDQlhRVkpTUVU1VVdTQlBSaUJCVGxrZ1MwbE9SQ3dnUlZoUVVrVlRVeUJQVWx4dUlFbE5VRXhKUlVRc0lFbE9RMHhWUkVsT1J5QkNWVlFnVGs5VUlFeEpUVWxVUlVRZ1ZFOGdWRWhGSUZkQlVsSkJUbFJKUlZNZ1QwWWdUVVZTUTBoQlRsUkJRa2xNU1ZSWkxGeHVJRVpKVkU1RlUxTWdSazlTSUVFZ1VFRlNWRWxEVlV4QlVpQlFWVkpRVDFORklFRk9SQ0JPVDA1SlRrWlNTVTVIUlUxRlRsUXVJRWxPSUU1UElFVldSVTVVSUZOSVFVeE1JRlJJUlZ4dUlFRlZWRWhQVWxNZ1QxSWdRMDlRV1ZKSlIwaFVJRWhQVEVSRlVsTWdRa1VnVEVsQlFreEZJRVpQVWlCQlRsa2dRMHhCU1Uwc0lFUkJUVUZIUlZNZ1QxSWdUMVJJUlZKY2JpQk1TVUZDU1V4SlZGa3NJRmRJUlZSSVJWSWdTVTRnUVU0Z1FVTlVTVTlPSUU5R0lFTlBUbFJTUVVOVUxDQlVUMUpVSUU5U0lFOVVTRVZTVjBsVFJTd2dRVkpKVTBsT1J5QkdVazlOTEZ4dUlFOVZWQ0JQUmlCUFVpQkpUaUJEVDA1T1JVTlVTVTlPSUZkSlZFZ2dWRWhGSUZOUFJsUlhRVkpGSUU5U0lGUklSU0JWVTBVZ1QxSWdUMVJJUlZJZ1JFVkJURWxPUjFNZ1NVNWNiaUJVU0VVZ1UwOUdWRmRCVWtVdVhHNGdLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2k5Y2JseHVhVzF3YjNKMElHZG1lQ0JtY205dElDY3VMaTh1TGk4dUxpOXlaVzVrWlhKbGNpOW5abmduTzF4dVhHNXNaWFFnVFdWemFFSjFabVpsY2lBOUlHTmpMa05zWVhOektIdGNiaUFnSUNCdVlXMWxPaUFuWTJNdVRXVnphRUoxWm1abGNpY3NYRzRnSUNBZ1kzUnZjaUFvWW1GMFkyaGxjaXdnZG1WeWRHVjRSbTl5YldGMEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWFXNXBkQ0FvWW1GMFkyaGxjaXdnZG1WeWRHVjRSbTl5YldGMEtUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2FXNXBkQ0FvWW1GMFkyaGxjaXdnZG1WeWRHVjRSbTl5YldGMEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVlubDBaVTltWm5ObGRDQTlJREE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhVzVrYVdObFQyWm1jMlYwSUQwZ01EdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MlpYSjBaWGhQWm1aelpYUWdQU0F3TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbWx1WkdsalpWTjBZWEowSUQwZ01EdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxsOWthWEowZVNBOUlHWmhiSE5sTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNabGNuUmxlRVp2Y20xaGRDQTlJSFpsY25SbGVFWnZjbTFoZER0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZG1WeWRHVjRRbmwwWlhNZ1BTQjBhR2x6TGw5MlpYSjBaWGhHYjNKdFlYUXVYMko1ZEdWek8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyRnljazltWm5ObGRDQTlJREE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM1ppUVhKeUlEMGdXMTA3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM1ppSUQwZ2JtVjNJR2RtZUM1V1pYSjBaWGhDZFdabVpYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCaVlYUmphR1Z5TGw5a1pYWnBZMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjJaWEowWlhoR2IzSnRZWFFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQm5abmd1VlZOQlIwVmZSRmxPUVUxSlF5eGNiaUFnSUNBZ0lDQWdJQ0FnSUc1bGR5QkJjbkpoZVVKMVptWmxjaWdwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdNRnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDkyWWtGeWNsc3dYU0E5SUhSb2FYTXVYM1ppTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDJsaVFYSnlJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJsaUlEMGdibVYzSUdkbWVDNUpibVJsZUVKMVptWmxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lHSmhkR05vWlhJdVgyUmxkbWxqWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2RtZUM1SlRrUkZXRjlHVFZSZlZVbE9WREUyTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaMlo0TGxWVFFVZEZYMU5VUVZSSlF5eGNiaUFnSUNBZ0lDQWdJQ0FnSUc1bGR5QkJjbkpoZVVKMVptWmxjaWdwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdNRnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlwWWtGeWNsc3dYU0E5SUhSb2FYTXVYMmxpTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNaRVlYUmhJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmRXbHVkRlpFWVhSaElEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYVVSaGRHRWdQU0J1ZFd4c08xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVgySmhkR05vWlhJZ1BTQmlZWFJqYUdWeU8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVgybHVhWFJXUkdGMFlVTnZkVzUwSUQwZ01qVTJJQ29nZG1WeWRHVjRSbTl5YldGMExsOWllWFJsY3pzdkx5QmhZM1IxWVd4c2VTQXlOVFlnS2lBMElDb2dLSFpsY25SbGVFWnZjbTFoZEM1ZllubDBaWE1nTHlBMEtWeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5cGJtbDBTVVJoZEdGRGIzVnVkQ0E5SURJMU5pQXFJRFk3WEc0Z0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNCMGFHbHpMbDl2Wm1aelpYUkpibVp2SUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWW5sMFpVOW1abk5sZENBNklEQXNYRzRnSUNBZ0lDQWdJQ0FnSUNCMlpYSjBaWGhQWm1aelpYUWdPaUF3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhVzVrYVdObFQyWm1jMlYwSURvZ01GeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzSmxZV3hzYjJOQ2RXWm1aWElvS1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnZFhCc2IyRmtSR0YwWVNBb0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbUo1ZEdWUFptWnpaWFFnUFQwOUlEQWdmSHdnSVhSb2FYTXVYMlJwY25SNUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQXZMeUIxY0dSaGRHVWdkbVZ5ZEdWNGRDQmtZWFJoWEc0Z0lDQWdJQ0FnSUd4bGRDQjJaWEowWlhoelJHRjBZU0E5SUc1bGR5QkdiRzloZERNeVFYSnlZWGtvZEdocGN5NWZka1JoZEdFdVluVm1abVZ5TENBd0xDQjBhR2x6TG1KNWRHVlBabVp6WlhRZ1BqNGdNaWs3WEc0Z0lDQWdJQ0FnSUd4bGRDQnBibVJwWTJWelJHRjBZU0E5SUc1bGR5QlZhVzUwTVRaQmNuSmhlU2gwYUdsekxsOXBSR0YwWVM1aWRXWm1aWElzSURBc0lIUm9hWE11YVc1a2FXTmxUMlptYzJWMEtUdGNibHh1SUNBZ0lDQWdJQ0JzWlhRZ2RtSWdQU0IwYUdsekxsOTJZanRjYmlBZ0lDQWdJQ0FnZG1JdWRYQmtZWFJsS0RBc0lIWmxjblJsZUhORVlYUmhLVHRjYmx4dUlDQWdJQ0FnSUNCc1pYUWdhV0lnUFNCMGFHbHpMbDlwWWp0Y2JpQWdJQ0FnSUNBZ2FXSXVkWEJrWVhSbEtEQXNJR2x1WkdsalpYTkVZWFJoS1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TGw5a2FYSjBlU0E5SUdaaGJITmxPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQnpkMmwwWTJoQ2RXWm1aWElnS0NrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnYjJabWMyVjBJRDBnS3l0MGFHbHpMbDloY25KUFptWnpaWFE3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVpZVhSbFQyWm1jMlYwSUQwZ01EdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MlpYSjBaWGhQWm1aelpYUWdQU0F3TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbWx1WkdsalpVOW1abk5sZENBOUlEQTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWFXNWthV05sVTNSaGNuUWdQU0F3TzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2h2Wm1aelpYUWdQQ0IwYUdsekxsOTJZa0Z5Y2k1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzWmlJRDBnZEdocGN5NWZkbUpCY25KYmIyWm1jMlYwWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgybGlJRDBnZEdocGN5NWZhV0pCY25KYmIyWm1jMlYwWFR0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZkbUlnUFNCdVpYY2daMlo0TGxabGNuUmxlRUoxWm1abGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5aVlYUmphR1Z5TGw5a1pYWnBZMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZkbVZ5ZEdWNFJtOXliV0YwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdkbWVDNVZVMEZIUlY5RVdVNUJUVWxETEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1bGR5QkJjbkpoZVVKMVptWmxjaWdwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURCY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5MllrRnljbHR2Wm1aelpYUmRJRDBnZEdocGN5NWZkbUk3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgybGlJRDBnYm1WM0lHZG1lQzVKYm1SbGVFSjFabVpsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlpWVhSamFHVnlMbDlrWlhacFkyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaMlo0TGtsT1JFVllYMFpOVkY5VlNVNVVNVFlzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWjJaNExsVlRRVWRGWDFOVVFWUkpReXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ1FYSnlZWGxDZFdabVpYSW9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYVdKQmNuSmJiMlptYzJWMFhTQTlJSFJvYVhNdVgybGlPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYmx4dUlDQWdJR05vWldOclFXNWtVM2RwZEdOb1FuVm1abVZ5SUNoMlpYSjBaWGhEYjNWdWRDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTUyWlhKMFpYaFBabVp6WlhRZ0t5QjJaWEowWlhoRGIzVnVkQ0ErSURZMU5UTTFLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5Wd2JHOWhaRVJoZEdFb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMkpoZEdOb1pYSXVYMlpzZFhOb0tDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk4zYVhSamFFSjFabVpsY2lncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lISmxjWFZsYzNSVGRHRjBhV01nS0habGNuUmxlRU52ZFc1MExDQnBibVJwWTJWRGIzVnVkQ2tnZTF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WTJobFkydEJibVJUZDJsMFkyaENkV1ptWlhJb2RtVnlkR1Y0UTI5MWJuUXBPMXh1WEc0Z0lDQWdJQ0FnSUd4bGRDQmllWFJsVDJabWMyVjBJRDBnZEdocGN5NWllWFJsVDJabWMyVjBJQ3NnZG1WeWRHVjRRMjkxYm5RZ0tpQjBhR2x6TGw5MlpYSjBaWGhDZVhSbGN6dGNiaUFnSUNBZ0lDQWdiR1YwSUdsdVpHbGpaVTltWm5ObGRDQTlJSFJvYVhNdWFXNWthV05sVDJabWMyVjBJQ3NnYVc1a2FXTmxRMjkxYm5RN1hHNWNiaUFnSUNBZ0lDQWdiR1YwSUdKNWRHVk1aVzVuZEdnZ1BTQjBhR2x6TGw5MlJHRjBZUzVpZVhSbFRHVnVaM1JvTzF4dUlDQWdJQ0FnSUNCc1pYUWdhVzVrYVdObFRHVnVaM1JvSUQwZ2RHaHBjeTVmYVVSaGRHRXViR1Z1WjNSb08xeHVJQ0FnSUNBZ0lDQnBaaUFvWW5sMFpVOW1abk5sZENBK0lHSjVkR1ZNWlc1bmRHZ2dmSHdnYVc1a2FXTmxUMlptYzJWMElENGdhVzVrYVdObFRHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IzYUdsc1pTQW9ZbmwwWlV4bGJtZDBhQ0E4SUdKNWRHVlBabVp6WlhRZ2ZId2dhVzVrYVdObFRHVnVaM1JvSUR3Z2FXNWthV05sVDJabWMyVjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZhVzVwZEZaRVlYUmhRMjkxYm5RZ0tqMGdNanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXBibWwwU1VSaGRHRkRiM1Z1ZENBcVBTQXlPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5sMFpVeGxibWQwYUNBOUlIUm9hWE11WDJsdWFYUldSR0YwWVVOdmRXNTBJQ29nTkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJtUnBZMlZNWlc1bmRHZ2dQU0IwYUdsekxsOXBibWwwU1VSaGRHRkRiM1Z1ZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmNtVmhiR3h2WTBKMVptWmxjaWdwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNWd1pHRjBaVTltWm5ObGRDaDJaWEowWlhoRGIzVnVkQ3dnYVc1a2FXTmxRMjkxYm5Rc0lHSjVkR1ZQWm1aelpYUXBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQmZkWEJrWVhSbFQyWm1jMlYwSUNoMlpYSjBaWGhEYjNWdWRDd2dhVzVrYVdObFEyOTFiblFzSUdKNWRHVlBabVp6WlhRcElIdGNiaUFnSUNBZ0lDQWdiR1YwSUc5bVpuTmxkRWx1Wm04Z1BTQjBhR2x6TGw5dlptWnpaWFJKYm1adk8xeHVJQ0FnSUNBZ0lDQnZabVp6WlhSSmJtWnZMblpsY25SbGVFOW1abk5sZENBOUlIUm9hWE11ZG1WeWRHVjRUMlptYzJWME8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5abGNuUmxlRTltWm5ObGRDQXJQU0IyWlhKMFpYaERiM1Z1ZER0Y2JseHVJQ0FnSUNBZ0lDQnZabVp6WlhSSmJtWnZMbWx1WkdsalpVOW1abk5sZENBOUlIUm9hWE11YVc1a2FXTmxUMlptYzJWME8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1sdVpHbGpaVTltWm5ObGRDQXJQU0JwYm1ScFkyVkRiM1Z1ZER0Y2JseHVJQ0FnSUNBZ0lDQnZabVp6WlhSSmJtWnZMbUo1ZEdWUFptWnpaWFFnUFNCMGFHbHpMbUo1ZEdWUFptWnpaWFE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZbmwwWlU5bVpuTmxkQ0E5SUdKNWRHVlBabVp6WlhRN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlpHbHlkSGtnUFNCMGNuVmxPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQnlaWEYxWlhOMElDaDJaWEowWlhoRGIzVnVkQ3dnYVc1a2FXTmxRMjkxYm5RcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYMkpoZEdOb1pYSXVYMkoxWm1abGNpQWhQVDBnZEdocGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWW1GMFkyaGxjaTVmWm14MWMyZ29LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJKaGRHTm9aWEl1WDJKMVptWmxjaUE5SUhSb2FYTTdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbkpsY1hWbGMzUlRkR0YwYVdNb2RtVnlkR1Y0UTI5MWJuUXNJR2x1WkdsalpVTnZkVzUwS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjltWm5ObGRFbHVabTg3WEc0Z0lDQWdmU3hjYmlBZ0lDQmNiaUFnSUNCZmNtVmhiR3h2WTBKMVptWmxjaUFvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNKbFlXeHNiMk5XUkdGMFlTaDBjblZsS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY21WaGJHeHZZMGxFWVhSaEtIUnlkV1VwTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JmY21WaGJHeHZZMVpFWVhSaElDaGpiM0I1VDJ4a1JHRjBZU2tnZTF4dUlDQWdJQ0FnSUNCc1pYUWdiMnhrVmtSaGRHRTdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDkyUkdGMFlTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2IyeGtWa1JoZEdFZ1BTQnVaWGNnVldsdWREaEJjbkpoZVNoMGFHbHpMbDkyUkdGMFlTNWlkV1ptWlhJcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWZka1JoZEdFZ1BTQnVaWGNnUm14dllYUXpNa0Z5Y21GNUtIUm9hWE11WDJsdWFYUldSR0YwWVVOdmRXNTBLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkV2x1ZEZaRVlYUmhJRDBnYm1WM0lGVnBiblF6TWtGeWNtRjVLSFJvYVhNdVgzWkVZWFJoTG1KMVptWmxjaWs3WEc1Y2JpQWdJQ0FnSUNBZ2JHVjBJRzVsZDBSaGRHRWdQU0J1WlhjZ1ZXbHVkRGhCY25KaGVTaDBhR2x6TGw5MWFXNTBWa1JoZEdFdVluVm1abVZ5S1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvYjJ4a1ZrUmhkR0VnSmlZZ1kyOXdlVTlzWkVSaGRHRXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3TENCc0lEMGdiMnhrVmtSaGRHRXViR1Z1WjNSb095QnBJRHdnYkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1WM1JHRjBZVnRwWFNBOUlHOXNaRlpFWVhSaFcybGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lGOXlaV0ZzYkc5alNVUmhkR0VnS0dOdmNIbFBiR1JFWVhSaEtTQjdYRzRnSUNBZ0lDQWdJR3hsZENCdmJHUkpSR0YwWVNBOUlIUm9hWE11WDJsRVlYUmhPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMmxFWVhSaElEMGdibVYzSUZWcGJuUXhOa0Z5Y21GNUtIUm9hWE11WDJsdWFYUkpSR0YwWVVOdmRXNTBLVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9iMnhrU1VSaGRHRWdKaVlnWTI5d2VVOXNaRVJoZEdFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBSR0YwWVNBOUlIUm9hWE11WDJsRVlYUmhPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREFzSUd3Z1BTQnZiR1JKUkdGMFlTNXNaVzVuZEdnN0lHa2dQQ0JzT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwUkdGMFlWdHBYU0E5SUc5c1pFbEVZWFJoVzJsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUhKbGMyVjBJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWVhKeVQyWm1jMlYwSUQwZ01EdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmRtSWdQU0IwYUdsekxsOTJZa0Z5Y2xzd1hUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmFXSWdQU0IwYUdsekxsOXBZa0Z5Y2xzd1hUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxtSjVkR1ZQWm1aelpYUWdQU0F3TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbWx1WkdsalpVOW1abk5sZENBOUlEQTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRtVnlkR1Y0VDJabWMyVjBJRDBnTUR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVwYm1ScFkyVlRkR0Z5ZENBOUlEQTdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWZaR2x5ZEhrZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWkdWemRISnZlU0FvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y21WelpYUW9LVHRjYmlBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENBZ2RHaHBjeTVmZG1KQmNuSXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMllpQTlJSFJvYVhNdVgzWmlRWEp5VzJsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1JdVpHVnpkSEp2ZVNncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzWmlRWEp5SUQwZ2JuVnNiRHRjYmx4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElIUm9hWE11WDJsaVFYSnlMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2FXSWdQU0IwYUdsekxsOXBZa0Z5Y2x0cFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsaUxtUmxjM1J5YjNrb0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYUdsekxsOXBZa0Z5Y2lBOUlHNTFiR3c3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYVdJZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDkyWWlBOUlHNTFiR3c3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJR1p2Y25kaGNtUkpibVJwWTJWVGRHRnlkRlJ2VDJabWMyVjBJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVwYm1ScFkyVlRkR0Z5ZENBOUlIUm9hWE11YVc1a2FXTmxUMlptYzJWME8xeHVJQ0FnSUgxY2JuMHBPMXh1WEc1all5NU5aWE5vUW5WbVptVnlJRDBnYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0JOWlhOb1FuVm1abVZ5TzF4dUlsMTkiXX0=