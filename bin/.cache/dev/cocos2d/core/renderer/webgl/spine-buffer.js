(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/spine-buffer.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var SpineBuffer = cc.Class({
            name: 'cc.SpineBuffer',
            extends: require('./mesh-buffer'),
            requestStatic: function requestStatic(vertexCount, indiceCount) {
                this.checkAndSwitchBuffer(vertexCount);
                var byteOffset = this.byteOffset + vertexCount * this._vertexBytes;
                var indiceOffset = this.indiceOffset + indiceCount;
                var byteLength = this._vData.byteLength;
                var indiceLength = this._iData.length;
                if (byteOffset > byteLength || indiceOffset > indiceLength) {
                    while (byteLength < byteOffset || indiceLength < indiceOffset) {
                        this._initVDataCount *= 2;
                        this._initIDataCount *= 2;
                        byteLength = this._initVDataCount * 4;
                        indiceLength = this._initIDataCount;
                    }
                    this._reallocBuffer();
                }
                var offsetInfo = this._offsetInfo;
                offsetInfo.vertexOffset = this.vertexOffset;
                offsetInfo.indiceOffset = this.indiceOffset;
                offsetInfo.byteOffset = this.byteOffset;
            },
            adjust: function adjust(vertexCount, indiceCount) {
                this.vertexOffset += vertexCount;
                this.indiceOffset += indiceCount;
                this.byteOffset = this.byteOffset + vertexCount * this._vertexBytes;
                this._dirty = true;
            }
        });
        cc.SpineBuffer = module.exports = SpineBuffer;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,