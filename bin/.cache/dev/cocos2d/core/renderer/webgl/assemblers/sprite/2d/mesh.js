(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/sprite/2d/mesh.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _assembler2d = require('../../../../assembler-2d');
        var _assembler2d2 = _interopRequireDefault(_assembler2d);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var MeshSpriteAssembler = function (_Assembler2D) {
            _inherits(MeshSpriteAssembler, _Assembler2D);
            function MeshSpriteAssembler() {
                _classCallCheck(this, MeshSpriteAssembler);
                return _possibleConstructorReturn(this, (MeshSpriteAssembler.__proto__ || Object.getPrototypeOf(MeshSpriteAssembler)).apply(this, arguments));
            }
            _createClass(MeshSpriteAssembler, [
                {
                    key: 'initData',
                    value: function initData(sprite) {
                        this._renderData.createFlexData(0, 4, 6, this.getVfmt());
                    }
                },
                {
                    key: 'updateRenderData',
                    value: function updateRenderData(sprite) {
                        this.packToDynamicAtlas(sprite, sprite._spriteFrame);
                        var frame = sprite.spriteFrame;
                        if (frame) {
                            var vertices = frame.vertices;
                            if (vertices) {
                                this.verticesCount = vertices.x.length;
                                this.indicesCount = vertices.triangles.length;
                                var renderData = this._renderData;
                                var flexBuffer = renderData._flexBuffer;
                                if (flexBuffer.reserve(this.verticesCount, this.indicesCount)) {
                                    this.updateColor(sprite);
                                    sprite._vertsDirty = true;
                                }
                                flexBuffer.used(this.verticesCount, this.indicesCount);
                                this.updateIndices(vertices.triangles);
                                if (sprite._vertsDirty) {
                                    this.updateUVs(sprite);
                                    this.updateVerts(sprite);
                                    this.updateWorldVerts(sprite);
                                    sprite._vertsDirty = false;
                                }
                            }
                        }
                    }
                },
                {
                    key: 'updateIndices',
                    value: function updateIndices(triangles) {
                        this._renderData.iDatas[0].set(triangles);
                    }
                },
                {
                    key: 'updateUVs',
                    value: function updateUVs(sprite) {
                        var vertices = sprite.spriteFrame.vertices, u = vertices.nu, v = vertices.nv;
                        var uvOffset = this.uvOffset;
                        var floatsPerVert = this.floatsPerVert;
                        var verts = this._renderData.vDatas[0];
                        for (var i = 0; i < u.length; i++) {
                            var dstOffset = floatsPerVert * i + uvOffset;
                            verts[dstOffset] = u[i];
                            verts[dstOffset + 1] = v[i];
                        }
                    }
                },
                {
                    key: 'updateVerts',
                    value: function updateVerts(sprite) {
                        var node = sprite.node, contentWidth = Math.abs(node.width), contentHeight = Math.abs(node.height), appx = node.anchorX * contentWidth, appy = node.anchorY * contentHeight;
                        var frame = sprite.spriteFrame, vertices = frame.vertices, x = vertices.x, y = vertices.y, originalWidth = frame._originalSize.width, originalHeight = frame._originalSize.height, rectWidth = frame._rect.width, rectHeight = frame._rect.height, offsetX = frame._offset.x, offsetY = frame._offset.y, trimX = offsetX + (originalWidth - rectWidth) / 2, trimY = offsetY + (originalHeight - rectHeight) / 2;
                        var scaleX = contentWidth / (sprite.trim ? rectWidth : originalWidth), scaleY = contentHeight / (sprite.trim ? rectHeight : originalHeight);
                        var local = this._local;
                        if (!sprite.trim) {
                            for (var i = 0, l = x.length; i < l; i++) {
                                var offset = i * 2;
                                local[offset] = x[i] * scaleX - appx;
                                local[offset + 1] = (originalHeight - y[i]) * scaleY - appy;
                            }
                        } else {
                            for (var _i = 0, _l = x.length; _i < _l; _i++) {
                                var _offset = _i * 2;
                                local[_offset] = (x[_i] - trimX) * scaleX - appx;
                                local[_offset + 1] = (originalHeight - y[_i] - trimY) * scaleY - appy;
                            }
                        }
                    }
                },
                {
                    key: 'updateWorldVerts',
                    value: function updateWorldVerts(sprite) {
                        var node = sprite.node;
                        var matrix = node._worldMatrix;
                        var matrixm = matrix.m;
                        var a = matrixm[0], b = matrixm[1], c = matrixm[4], d = matrixm[5], tx = matrixm[12], ty = matrixm[13];
                        var local = this._local;
                        var world = this._renderData.vDatas[0];
                        var floatsPerVert = this.floatsPerVert;
                        for (var i = 0, l = this.verticesCount; i < l; i++) {
                            var lx = local[i * 2];
                            var ly = local[i * 2 + 1];
                            world[floatsPerVert * i] = lx * a + ly * c + tx;
                            world[floatsPerVert * i + 1] = lx * b + ly * d + ty;
                        }
                    }
                }
            ]);
            return MeshSpriteAssembler;
        }(_assembler2d2.default);
        exports.default = MeshSpriteAssembler;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,