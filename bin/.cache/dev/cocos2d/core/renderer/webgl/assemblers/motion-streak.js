(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/motion-streak.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _assembler2d = require('../../assembler-2d');
        var _assembler2d2 = _interopRequireDefault(_assembler2d);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var MotionStreak = require('../../../components/CCMotionStreak');
        var RenderFlow = require('../../render-flow');
        function Point(point, dir) {
            this.point = point || cc.v2();
            this.dir = dir || cc.v2();
            this.distance = 0;
            this.time = 0;
        }
        Point.prototype.setPoint = function (x, y) {
            this.point.x = x;
            this.point.y = y;
        };
        Point.prototype.setDir = function (x, y) {
            this.dir.x = x;
            this.dir.y = y;
        };
        var _tangent = cc.v2();
        var _miter = cc.v2();
        var _normal = cc.v2();
        var _vec2 = cc.v2();
        function normal(out, dir) {
            out.x = -dir.y;
            out.y = dir.x;
            return out;
        }
        function computeMiter(miter, lineA, lineB, halfThick, maxMultiple) {
            lineA.add(lineB, _tangent);
            _tangent.normalizeSelf();
            miter.x = -_tangent.y;
            miter.y = _tangent.x;
            _vec2.x = -lineA.y;
            _vec2.y = lineA.x;
            var multiple = 1 / miter.dot(_vec2);
            if (maxMultiple) {
                multiple = Math.min(multiple, maxMultiple);
            }
            return halfThick * multiple;
        }
        var MotionStreakAssembler = function (_Assembler2D) {
            _inherits(MotionStreakAssembler, _Assembler2D);
            function MotionStreakAssembler() {
                _classCallCheck(this, MotionStreakAssembler);
                return _possibleConstructorReturn(this, (MotionStreakAssembler.__proto__ || Object.getPrototypeOf(MotionStreakAssembler)).apply(this, arguments));
            }
            _createClass(MotionStreakAssembler, [
                {
                    key: 'initData',
                    value: function initData() {
                        this._renderData.createFlexData(0, 16, (16 - 2) * 3);
                    }
                },
                {
                    key: 'update',
                    value: function update(comp, dt) {
                        if (CC_EDITOR && !comp.preview)
                            return;
                        var stroke = comp._stroke / 2;
                        var node = comp.node;
                        var matrix = node._worldMatrix.m;
                        var tx = matrix[12], ty = matrix[13];
                        var points = comp._points;
                        var cur = void 0;
                        if (points.length > 1) {
                            var difx = points[0].point.x - tx;
                            var dify = points[0].point.y - ty;
                            if (difx * difx + dify * dify < comp.minSeg) {
                                cur = points[0];
                            }
                        }
                        if (!cur) {
                            cur = new Point();
                            points.splice(0, 0, cur);
                        }
                        cur.setPoint(tx, ty);
                        cur.time = comp._fadeTime + dt;
                        var verticesCount = 0;
                        var indicesCount = 0;
                        if (points.length < 2) {
                            return;
                        }
                        var color = comp._color, cr = color.r, cg = color.g, cb = color.b, ca = color.a;
                        var prev = points[1];
                        prev.distance = cur.point.sub(prev.point, _vec2).mag();
                        _vec2.normalizeSelf();
                        prev.setDir(_vec2.x, _vec2.y);
                        cur.setDir(_vec2.x, _vec2.y);
                        var flexBuffer = this._renderData._flexBuffer;
                        flexBuffer.reserve(points.length * 2, (points.length - 1) * 6);
                        var vData = flexBuffer.vData;
                        var uintVData = flexBuffer.uintVData;
                        var vertsOffset = 5;
                        var fadeTime = comp._fadeTime;
                        var findLast = false;
                        for (var i = points.length - 1; i >= 0; i--) {
                            var p = points[i];
                            var point = p.point;
                            var dir = p.dir;
                            p.time -= dt;
                            if (p.time < 0) {
                                points.splice(i, 1);
                                continue;
                            }
                            var progress = p.time / fadeTime;
                            var next = points[i - 1];
                            if (!findLast) {
                                if (!next) {
                                    points.splice(i, 1);
                                    continue;
                                }
                                point.x = next.point.x - dir.x * progress;
                                point.y = next.point.y - dir.y * progress;
                            }
                            findLast = true;
                            normal(_normal, dir);
                            var da = progress * ca;
                            var c = (da << 24 >>> 0) + (cb << 16) + (cg << 8) + cr;
                            var offset = verticesCount * vertsOffset;
                            vData[offset] = point.x + _normal.x * stroke;
                            vData[offset + 1] = point.y + _normal.y * stroke;
                            vData[offset + 2] = 1;
                            vData[offset + 3] = progress;
                            uintVData[offset + 4] = c;
                            offset += vertsOffset;
                            vData[offset] = point.x - _normal.x * stroke;
                            vData[offset + 1] = point.y - _normal.y * stroke;
                            vData[offset + 2] = 0;
                            vData[offset + 3] = progress;
                            uintVData[offset + 4] = c;
                            verticesCount += 2;
                        }
                        indicesCount = verticesCount <= 2 ? 0 : (verticesCount - 2) * 3;
                        flexBuffer.used(verticesCount, indicesCount);
                    }
                },
                {
                    key: 'fillBuffers',
                    value: function fillBuffers(comp, renderer) {
                        var _renderData$_flexBuff = this._renderData._flexBuffer, vData = _renderData$_flexBuff.vData, usedVertices = _renderData$_flexBuff.usedVertices, usedIndices = _renderData$_flexBuff.usedIndices, usedVerticesFloats = _renderData$_flexBuff.usedVerticesFloats;
                        var buffer = renderer._meshBuffer;
                        var offsetInfo = buffer.request(usedVertices, usedIndices);
                        var vertexOffset = offsetInfo.byteOffset >> 2, vbuf = buffer._vData;
                        if (vData.length + vertexOffset > vbuf.length) {
                            vbuf.set(vData.subarray(0, usedVerticesFloats), vertexOffset);
                        } else {
                            vbuf.set(vData, vertexOffset);
                        }
                        var ibuf = buffer._iData, indiceOffset = offsetInfo.indiceOffset, vertexId = offsetInfo.vertexOffset;
                        for (var i = 0, l = usedVertices; i < l; i += 2) {
                            var start = vertexId + i;
                            ibuf[indiceOffset++] = start;
                            ibuf[indiceOffset++] = start + 2;
                            ibuf[indiceOffset++] = start + 1;
                            ibuf[indiceOffset++] = start + 1;
                            ibuf[indiceOffset++] = start + 2;
                            ibuf[indiceOffset++] = start + 3;
                        }
                        comp.node._renderFlag |= RenderFlow.FLAG_UPDATE_RENDER_DATA;
                    }
                }
            ]);
            return MotionStreakAssembler;
        }(_assembler2d2.default);
        exports.default = MotionStreakAssembler;
        MotionStreakAssembler.register(MotionStreak, MotionStreakAssembler);
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vdGlvbi1zdHJlYWsuanMiLCIvVXNlcnMvZ2FveWFuZy9Xb3JrU3BhY2Uvam95Y2FzdGxlL2JpbmdvL2NsaWVudC9iaW5nby9lbmdpbmUvY29jb3MyZC9jb3JlL3JlbmRlcmVyL3dlYmdsL2Fzc2VtYmxlcnMvbW90aW9uLXN0cmVhay5qcyJdLCJuYW1lcyI6WyJNb3Rpb25TdHJlYWsiLCJyZXF1aXJlIiwiUmVuZGVyRmxvdyIsIlBvaW50IiwicG9pbnQiLCJkaXIiLCJjYyIsInYyIiwiZGlzdGFuY2UiLCJ0aW1lIiwicHJvdG90eXBlIiwic2V0UG9pbnQiLCJ4IiwieSIsInNldERpciIsIl90YW5nZW50IiwiX21pdGVyIiwiX25vcm1hbCIsIl92ZWMyIiwibm9ybWFsIiwib3V0IiwiY29tcHV0ZU1pdGVyIiwibWl0ZXIiLCJsaW5lQSIsImxpbmVCIiwiaGFsZlRoaWNrIiwibWF4TXVsdGlwbGUiLCJhZGQiLCJub3JtYWxpemVTZWxmIiwibXVsdGlwbGUiLCJkb3QiLCJNYXRoIiwibWluIiwiTW90aW9uU3RyZWFrQXNzZW1ibGVyIiwiX3JlbmRlckRhdGEiLCJjcmVhdGVGbGV4RGF0YSIsImNvbXAiLCJkdCIsIkNDX0VESVRPUiIsInByZXZpZXciLCJzdHJva2UiLCJfc3Ryb2tlIiwibm9kZSIsIm1hdHJpeCIsIl93b3JsZE1hdHJpeCIsIm0iLCJ0eCIsInR5IiwicG9pbnRzIiwiX3BvaW50cyIsImN1ciIsImxlbmd0aCIsImRpZngiLCJkaWZ5IiwibWluU2VnIiwic3BsaWNlIiwiX2ZhZGVUaW1lIiwidmVydGljZXNDb3VudCIsImluZGljZXNDb3VudCIsImNvbG9yIiwiX2NvbG9yIiwiY3IiLCJyIiwiY2ciLCJnIiwiY2IiLCJiIiwiY2EiLCJhIiwicHJldiIsInN1YiIsIm1hZyIsImZsZXhCdWZmZXIiLCJfZmxleEJ1ZmZlciIsInJlc2VydmUiLCJ2RGF0YSIsInVpbnRWRGF0YSIsInZlcnRzT2Zmc2V0IiwiZmFkZVRpbWUiLCJmaW5kTGFzdCIsImkiLCJwIiwicHJvZ3Jlc3MiLCJuZXh0IiwiZGEiLCJjIiwib2Zmc2V0IiwidXNlZCIsInJlbmRlcmVyIiwidXNlZFZlcnRpY2VzIiwidXNlZEluZGljZXMiLCJ1c2VkVmVydGljZXNGbG9hdHMiLCJidWZmZXIiLCJfbWVzaEJ1ZmZlciIsIm9mZnNldEluZm8iLCJyZXF1ZXN0IiwidmVydGV4T2Zmc2V0IiwiYnl0ZU9mZnNldCIsInZidWYiLCJfdkRhdGEiLCJzZXQiLCJzdWJhcnJheSIsImlidWYiLCJfaURhdGEiLCJpbmRpY2VPZmZzZXQiLCJ2ZXJ0ZXhJZCIsImwiLCJzdGFydCIsIl9yZW5kZXJGbGFnIiwiRkxBR19VUERBVEVfUkVOREVSX0RBVEEiLCJBc3NlbWJsZXIyRCIsInJlZ2lzdGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztRQXlCQSxJQUFBLFlBQUEsR0FBQSxPQUFBLENBQUEsb0JBQUEsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztRQUVBLElBQU1BLFlBQUFBLEdBQWVDLE9BQUFBLENBQVEsb0NBQVJBLENBQXJCO1FBQ0EsSUFBTUMsVUFBQUEsR0FBYUQsT0FBQUEsQ0FBUSxtQkFBUkEsQ0FBbkI7UUFFQSxTQUFTRSxLQUFULENBQWdCQyxLQUFoQixFQUF1QkMsR0FBdkIsRUFBNEI7QUFBQSxZQUN4QixLQUFLRCxLQUFMLEdBQWFBLEtBQUFBLElBQVNFLEVBQUFBLENBQUdDLEVBQUhELEVBQXRCLENBRHdCO0FBQUEsWUFFeEIsS0FBS0QsR0FBTCxHQUFXQSxHQUFBQSxJQUFPQyxFQUFBQSxDQUFHQyxFQUFIRCxFQUFsQixDQUZ3QjtBQUFBLFlBR3hCLEtBQUtFLFFBQUwsR0FBZ0IsQ0FBaEIsQ0FId0I7QUFBQSxZQUl4QixLQUFLQyxJQUFMLEdBQVksQ0FBWixDQUp3QjtBQUFBO1FBTzVCTixLQUFBQSxDQUFNTyxTQUFOUCxDQUFnQlEsUUFBaEJSLEdBQTJCLFVBQVVTLENBQVYsRUFBYUMsQ0FBYixFQUFnQjtBQUFBLFlB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cUJBQTdDQSIsImZpbGUiOiJtb3Rpb24tc3RyZWFrLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcbiBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxuXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IEFzc2VtYmxlcjJEIGZyb20gJy4uLy4uL2Fzc2VtYmxlci0yZCc7XG5cbmNvbnN0IE1vdGlvblN0cmVhayA9IHJlcXVpcmUoJy4uLy4uLy4uL2NvbXBvbmVudHMvQ0NNb3Rpb25TdHJlYWsnKTtcbmNvbnN0IFJlbmRlckZsb3cgPSByZXF1aXJlKCcuLi8uLi9yZW5kZXItZmxvdycpO1xuXG5mdW5jdGlvbiBQb2ludCAocG9pbnQsIGRpcikge1xuICAgIHRoaXMucG9pbnQgPSBwb2ludCB8fCBjYy52MigpO1xuICAgIHRoaXMuZGlyID0gZGlyIHx8IGNjLnYyKCk7XG4gICAgdGhpcy5kaXN0YW5jZSA9IDA7XG4gICAgdGhpcy50aW1lID0gMDtcbn1cblxuUG9pbnQucHJvdG90eXBlLnNldFBvaW50ID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICB0aGlzLnBvaW50LnggPSB4O1xuICAgIHRoaXMucG9pbnQueSA9IHk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuc2V0RGlyID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICB0aGlzLmRpci54ID0geDtcbiAgICB0aGlzLmRpci55ID0geTtcbn07XG5cbmxldCBfdGFuZ2VudCA9IGNjLnYyKCk7XG5sZXQgX21pdGVyID0gY2MudjIoKTtcbmxldCBfbm9ybWFsID0gY2MudjIoKTtcbmxldCBfdmVjMiA9IGNjLnYyKCk7XG5cbmZ1bmN0aW9uIG5vcm1hbCAob3V0LCBkaXIpIHtcbiAgICAvL2dldCBwZXJwZW5kaWN1bGFyXG4gICAgb3V0LnggPSAtZGlyLnk7XG4gICAgb3V0LnkgPSBkaXIueDtcbiAgICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVNaXRlciAobWl0ZXIsIGxpbmVBLCBsaW5lQiwgaGFsZlRoaWNrLCBtYXhNdWx0aXBsZSkge1xuICAgIC8vZ2V0IHRhbmdlbnQgbGluZVxuICAgIGxpbmVBLmFkZChsaW5lQiwgX3RhbmdlbnQpO1xuICAgIF90YW5nZW50Lm5vcm1hbGl6ZVNlbGYoKTtcblxuICAgIC8vZ2V0IG1pdGVyIGFzIGEgdW5pdCB2ZWN0b3JcbiAgICBtaXRlci54ID0gLV90YW5nZW50Lnk7XG4gICAgbWl0ZXIueSA9IF90YW5nZW50Lng7XG4gICAgX3ZlYzIueCA9IC1saW5lQS55OyBcbiAgICBfdmVjMi55ID0gbGluZUEueDtcblxuICAgIC8vZ2V0IHRoZSBuZWNlc3NhcnkgbGVuZ3RoIG9mIG91ciBtaXRlclxuICAgIGxldCBtdWx0aXBsZSA9IDEgLyBtaXRlci5kb3QoX3ZlYzIpO1xuICAgIGlmIChtYXhNdWx0aXBsZSkge1xuICAgICAgICBtdWx0aXBsZSA9IE1hdGgubWluKG11bHRpcGxlLCBtYXhNdWx0aXBsZSk7XG4gICAgfVxuICAgIHJldHVybiBoYWxmVGhpY2sgKiBtdWx0aXBsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW90aW9uU3RyZWFrQXNzZW1ibGVyIGV4dGVuZHMgQXNzZW1ibGVyMkQge1xuICAgIGluaXREYXRhICgpIHtcbiAgICAgICAgdGhpcy5fcmVuZGVyRGF0YS5jcmVhdGVGbGV4RGF0YSgwLCAxNiwgKDE2IC0gMikgKiAzKTtcbiAgICB9XG5cbiAgICB1cGRhdGUgKGNvbXAsIGR0KSB7XG4gICAgICAgIGlmIChDQ19FRElUT1IgJiYgIWNvbXAucHJldmlldykgcmV0dXJuO1xuXG4gICAgICAgIGxldCBzdHJva2UgPSBjb21wLl9zdHJva2UgLyAyO1xuXG4gICAgICAgIGxldCBub2RlID0gY29tcC5ub2RlO1xuICAgICAgICBsZXQgbWF0cml4ID0gbm9kZS5fd29ybGRNYXRyaXgubTtcbiAgICAgICAgbGV0IHR4ID0gbWF0cml4WzEyXSwgdHkgPSBtYXRyaXhbMTNdO1xuXG4gICAgICAgIGxldCBwb2ludHMgPSBjb21wLl9wb2ludHM7XG5cbiAgICAgICAgbGV0IGN1cjtcbiAgICAgICAgaWYgKHBvaW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBsZXQgZGlmeCA9IHBvaW50c1swXS5wb2ludC54IC0gdHg7XG4gICAgICAgICAgICBsZXQgZGlmeSA9IHBvaW50c1swXS5wb2ludC55IC0gdHk7XG4gICAgICAgICAgICBpZiAoKGRpZngqZGlmeCArIGRpZnkqZGlmeSkgPCBjb21wLm1pblNlZykge1xuICAgICAgICAgICAgICAgIGN1ciA9IHBvaW50c1swXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghY3VyKSB7XG4gICAgICAgICAgICBjdXIgPSBuZXcgUG9pbnQoKTtcbiAgICAgICAgICAgIHBvaW50cy5zcGxpY2UoMCwgMCwgY3VyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1ci5zZXRQb2ludCh0eCwgdHkpO1xuICAgICAgICBjdXIudGltZSA9IGNvbXAuX2ZhZGVUaW1lICsgZHQ7XG4gICAgICAgIFxuICAgICAgICBsZXQgdmVydGljZXNDb3VudCA9IDA7XG4gICAgICAgIGxldCBpbmRpY2VzQ291bnQgPSAwO1xuXG4gICAgICAgIGlmIChwb2ludHMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGNvbG9yID0gY29tcC5fY29sb3IsXG4gICAgICAgICAgICBjciA9IGNvbG9yLnIsIGNnID0gY29sb3IuZywgY2IgPSBjb2xvci5iLCBjYSA9IGNvbG9yLmE7XG5cbiAgICAgICAgbGV0IHByZXYgPSBwb2ludHNbMV07XG4gICAgICAgIHByZXYuZGlzdGFuY2UgPSBjdXIucG9pbnQuc3ViKHByZXYucG9pbnQsIF92ZWMyKS5tYWcoKTtcbiAgICAgICAgX3ZlYzIubm9ybWFsaXplU2VsZigpO1xuICAgICAgICBwcmV2LnNldERpcihfdmVjMi54LCBfdmVjMi55KTtcbiAgICAgICAgY3VyLnNldERpcihfdmVjMi54LCBfdmVjMi55KTtcblxuICAgICAgICBsZXQgZmxleEJ1ZmZlciA9IHRoaXMuX3JlbmRlckRhdGEuX2ZsZXhCdWZmZXI7XG4gICAgICAgIGZsZXhCdWZmZXIucmVzZXJ2ZShwb2ludHMubGVuZ3RoKjIsIChwb2ludHMubGVuZ3RoLTEpKjYpO1xuICAgICAgICBsZXQgdkRhdGEgPSBmbGV4QnVmZmVyLnZEYXRhO1xuICAgICAgICBsZXQgdWludFZEYXRhID0gZmxleEJ1ZmZlci51aW50VkRhdGE7XG4gICAgICAgIGxldCB2ZXJ0c09mZnNldCA9IDU7XG5cbiAgICAgICAgbGV0IGZhZGVUaW1lID0gY29tcC5fZmFkZVRpbWU7XG4gICAgICAgIGxldCBmaW5kTGFzdCA9IGZhbHNlO1xuICAgICAgICBmb3IgKGxldCBpID0gcG9pbnRzLmxlbmd0aCAtIDE7IGkgPj0wIDsgaS0tKSB7XG4gICAgICAgICAgICBsZXQgcCA9IHBvaW50c1tpXTtcbiAgICAgICAgICAgIGxldCBwb2ludCA9IHAucG9pbnQ7XG4gICAgICAgICAgICBsZXQgZGlyID0gcC5kaXI7XG4gICAgICAgICAgICBwLnRpbWUgLT0gZHQ7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChwLnRpbWUgPCAwKSB7XG4gICAgICAgICAgICAgICAgcG9pbnRzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHByb2dyZXNzID0gcC50aW1lIC8gZmFkZVRpbWU7XG5cbiAgICAgICAgICAgIGxldCBuZXh0ID0gcG9pbnRzW2kgLSAxXTtcbiAgICAgICAgICAgIGlmICghZmluZExhc3QpIHtcbiAgICAgICAgICAgICAgICBpZiAoIW5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHBvaW50LnggPSBuZXh0LnBvaW50LnggLSBkaXIueCAqIHByb2dyZXNzO1xuICAgICAgICAgICAgICAgIHBvaW50LnkgPSBuZXh0LnBvaW50LnkgLSBkaXIueSAqIHByb2dyZXNzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluZExhc3QgPSB0cnVlO1xuXG4gICAgICAgICAgICBub3JtYWwoX25vcm1hbCwgZGlyKTtcblxuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgZGEgPSBwcm9ncmVzcypjYTtcbiAgICAgICAgICAgIGxldCBjID0gKChkYTw8MjQpID4+PiAwKSArIChjYjw8MTYpICsgKGNnPDw4KSArIGNyO1xuXG4gICAgICAgICAgICBsZXQgb2Zmc2V0ID0gdmVydGljZXNDb3VudCAqIHZlcnRzT2Zmc2V0O1xuXG4gICAgICAgICAgICB2RGF0YVtvZmZzZXRdID0gcG9pbnQueCArIF9ub3JtYWwueCAqIHN0cm9rZTtcbiAgICAgICAgICAgIHZEYXRhW29mZnNldCArIDFdID0gcG9pbnQueSArIF9ub3JtYWwueSAqIHN0cm9rZTtcbiAgICAgICAgICAgIHZEYXRhW29mZnNldCArIDJdID0gMTtcbiAgICAgICAgICAgIHZEYXRhW29mZnNldCArIDNdID0gcHJvZ3Jlc3M7XG4gICAgICAgICAgICB1aW50VkRhdGFbb2Zmc2V0ICsgNF0gPSBjO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBvZmZzZXQgKz0gdmVydHNPZmZzZXQ7XG5cbiAgICAgICAgICAgIHZEYXRhW29mZnNldF0gPSBwb2ludC54IC0gX25vcm1hbC54ICogc3Ryb2tlO1xuICAgICAgICAgICAgdkRhdGFbb2Zmc2V0ICsgMV0gPSBwb2ludC55IC0gX25vcm1hbC55ICogc3Ryb2tlO1xuICAgICAgICAgICAgdkRhdGFbb2Zmc2V0ICsgMl0gPSAwO1xuICAgICAgICAgICAgdkRhdGFbb2Zmc2V0ICsgM10gPSBwcm9ncmVzcztcbiAgICAgICAgICAgIHVpbnRWRGF0YVtvZmZzZXQgKyA0XSA9IGM7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZlcnRpY2VzQ291bnQgKz0gMjtcbiAgICAgICAgfVxuXG4gICAgICAgIGluZGljZXNDb3VudCA9IHZlcnRpY2VzQ291bnQgPD0gMiA/IDAgOiAodmVydGljZXNDb3VudCAtIDIpKjM7XG5cbiAgICAgICAgZmxleEJ1ZmZlci51c2VkKHZlcnRpY2VzQ291bnQsIGluZGljZXNDb3VudCk7XG4gICAgfVxuXG4gICAgZmlsbEJ1ZmZlcnMgKGNvbXAsIHJlbmRlcmVyKSB7XG4gICAgICAgIGxldCB7IHZEYXRhLCB1c2VkVmVydGljZXMsIHVzZWRJbmRpY2VzLCB1c2VkVmVydGljZXNGbG9hdHMgfSA9IHRoaXMuX3JlbmRlckRhdGEuX2ZsZXhCdWZmZXI7XG5cbiAgICAgICAgbGV0IGJ1ZmZlciA9IHJlbmRlcmVyLl9tZXNoQnVmZmVyO1xuICAgICAgICBsZXQgb2Zmc2V0SW5mbyA9IGJ1ZmZlci5yZXF1ZXN0KHVzZWRWZXJ0aWNlcywgdXNlZEluZGljZXMpO1xuXG4gICAgICAgIC8vIGJ1ZmZlciBkYXRhIG1heSBiZSByZWFsbG9jLCBuZWVkIGdldCByZWZlcmVuY2UgYWZ0ZXIgcmVxdWVzdC5cblxuICAgICAgICAvLyBmaWxsIHZlcnRpY2VzXG4gICAgICAgIGxldCB2ZXJ0ZXhPZmZzZXQgPSBvZmZzZXRJbmZvLmJ5dGVPZmZzZXQgPj4gMixcbiAgICAgICAgICAgIHZidWYgPSBidWZmZXIuX3ZEYXRhO1xuXG4gICAgICAgIGlmICh2RGF0YS5sZW5ndGggKyB2ZXJ0ZXhPZmZzZXQgPiB2YnVmLmxlbmd0aCkge1xuICAgICAgICAgICAgdmJ1Zi5zZXQodkRhdGEuc3ViYXJyYXkoMCwgdXNlZFZlcnRpY2VzRmxvYXRzKSwgdmVydGV4T2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZidWYuc2V0KHZEYXRhLCB2ZXJ0ZXhPZmZzZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZmlsbCBpbmRpY2VzXG4gICAgICAgIGxldCBpYnVmID0gYnVmZmVyLl9pRGF0YSxcbiAgICAgICAgICAgIGluZGljZU9mZnNldCA9IG9mZnNldEluZm8uaW5kaWNlT2Zmc2V0LFxuICAgICAgICAgICAgdmVydGV4SWQgPSBvZmZzZXRJbmZvLnZlcnRleE9mZnNldDtcblxuICAgICAgICAvLyBpbmRleCBidWZmZXJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSB1c2VkVmVydGljZXM7IGkgPCBsOyBpICs9IDIpIHtcbiAgICAgICAgICAgIGxldCBzdGFydCA9IHZlcnRleElkICsgaTtcbiAgICAgICAgICAgIGlidWZbaW5kaWNlT2Zmc2V0KytdID0gc3RhcnQ7XG4gICAgICAgICAgICBpYnVmW2luZGljZU9mZnNldCsrXSA9IHN0YXJ0ICsgMjtcbiAgICAgICAgICAgIGlidWZbaW5kaWNlT2Zmc2V0KytdID0gc3RhcnQgKyAxO1xuICAgICAgICAgICAgaWJ1ZltpbmRpY2VPZmZzZXQrK10gPSBzdGFydCArIDE7XG4gICAgICAgICAgICBpYnVmW2luZGljZU9mZnNldCsrXSA9IHN0YXJ0ICsgMjtcbiAgICAgICAgICAgIGlidWZbaW5kaWNlT2Zmc2V0KytdID0gc3RhcnQgKyAzO1xuICAgICAgICB9XG5cbiAgICAgICAgY29tcC5ub2RlLl9yZW5kZXJGbGFnIHw9IFJlbmRlckZsb3cuRkxBR19VUERBVEVfUkVOREVSX0RBVEE7XG4gICAgfVxufVxuXG5Nb3Rpb25TdHJlYWtBc3NlbWJsZXIucmVnaXN0ZXIoTW90aW9uU3RyZWFrLCBNb3Rpb25TdHJlYWtBc3NlbWJsZXIpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfYXNzZW1ibGVyMmQgPSByZXF1aXJlKCcuLi8uLi9hc3NlbWJsZXItMmQnKTtcblxudmFyIF9hc3NlbWJsZXIyZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3NlbWJsZXIyZCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH0gLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUSEUgU09GVFdBUkUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxudmFyIE1vdGlvblN0cmVhayA9IHJlcXVpcmUoJy4uLy4uLy4uL2NvbXBvbmVudHMvQ0NNb3Rpb25TdHJlYWsnKTtcbnZhciBSZW5kZXJGbG93ID0gcmVxdWlyZSgnLi4vLi4vcmVuZGVyLWZsb3cnKTtcblxuZnVuY3Rpb24gUG9pbnQocG9pbnQsIGRpcikge1xuICAgIHRoaXMucG9pbnQgPSBwb2ludCB8fCBjYy52MigpO1xuICAgIHRoaXMuZGlyID0gZGlyIHx8IGNjLnYyKCk7XG4gICAgdGhpcy5kaXN0YW5jZSA9IDA7XG4gICAgdGhpcy50aW1lID0gMDtcbn1cblxuUG9pbnQucHJvdG90eXBlLnNldFBvaW50ID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICB0aGlzLnBvaW50LnggPSB4O1xuICAgIHRoaXMucG9pbnQueSA9IHk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuc2V0RGlyID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICB0aGlzLmRpci54ID0geDtcbiAgICB0aGlzLmRpci55ID0geTtcbn07XG5cbnZhciBfdGFuZ2VudCA9IGNjLnYyKCk7XG52YXIgX21pdGVyID0gY2MudjIoKTtcbnZhciBfbm9ybWFsID0gY2MudjIoKTtcbnZhciBfdmVjMiA9IGNjLnYyKCk7XG5cbmZ1bmN0aW9uIG5vcm1hbChvdXQsIGRpcikge1xuICAgIC8vZ2V0IHBlcnBlbmRpY3VsYXJcbiAgICBvdXQueCA9IC1kaXIueTtcbiAgICBvdXQueSA9IGRpci54O1xuICAgIHJldHVybiBvdXQ7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVNaXRlcihtaXRlciwgbGluZUEsIGxpbmVCLCBoYWxmVGhpY2ssIG1heE11bHRpcGxlKSB7XG4gICAgLy9nZXQgdGFuZ2VudCBsaW5lXG4gICAgbGluZUEuYWRkKGxpbmVCLCBfdGFuZ2VudCk7XG4gICAgX3RhbmdlbnQubm9ybWFsaXplU2VsZigpO1xuXG4gICAgLy9nZXQgbWl0ZXIgYXMgYSB1bml0IHZlY3RvclxuICAgIG1pdGVyLnggPSAtX3RhbmdlbnQueTtcbiAgICBtaXRlci55ID0gX3RhbmdlbnQueDtcbiAgICBfdmVjMi54ID0gLWxpbmVBLnk7XG4gICAgX3ZlYzIueSA9IGxpbmVBLng7XG5cbiAgICAvL2dldCB0aGUgbmVjZXNzYXJ5IGxlbmd0aCBvZiBvdXIgbWl0ZXJcbiAgICB2YXIgbXVsdGlwbGUgPSAxIC8gbWl0ZXIuZG90KF92ZWMyKTtcbiAgICBpZiAobWF4TXVsdGlwbGUpIHtcbiAgICAgICAgbXVsdGlwbGUgPSBNYXRoLm1pbihtdWx0aXBsZSwgbWF4TXVsdGlwbGUpO1xuICAgIH1cbiAgICByZXR1cm4gaGFsZlRoaWNrICogbXVsdGlwbGU7XG59XG5cbnZhciBNb3Rpb25TdHJlYWtBc3NlbWJsZXIgPSBmdW5jdGlvbiAoX0Fzc2VtYmxlcjJEKSB7XG4gICAgX2luaGVyaXRzKE1vdGlvblN0cmVha0Fzc2VtYmxlciwgX0Fzc2VtYmxlcjJEKTtcblxuICAgIGZ1bmN0aW9uIE1vdGlvblN0cmVha0Fzc2VtYmxlcigpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vdGlvblN0cmVha0Fzc2VtYmxlcik7XG5cbiAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChNb3Rpb25TdHJlYWtBc3NlbWJsZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihNb3Rpb25TdHJlYWtBc3NlbWJsZXIpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTW90aW9uU3RyZWFrQXNzZW1ibGVyLCBbe1xuICAgICAgICBrZXk6ICdpbml0RGF0YScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0RGF0YSgpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlckRhdGEuY3JlYXRlRmxleERhdGEoMCwgMTYsICgxNiAtIDIpICogMyk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3VwZGF0ZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUoY29tcCwgZHQpIHtcbiAgICAgICAgICAgIGlmIChDQ19FRElUT1IgJiYgIWNvbXAucHJldmlldykgcmV0dXJuO1xuXG4gICAgICAgICAgICB2YXIgc3Ryb2tlID0gY29tcC5fc3Ryb2tlIC8gMjtcblxuICAgICAgICAgICAgdmFyIG5vZGUgPSBjb21wLm5vZGU7XG4gICAgICAgICAgICB2YXIgbWF0cml4ID0gbm9kZS5fd29ybGRNYXRyaXgubTtcbiAgICAgICAgICAgIHZhciB0eCA9IG1hdHJpeFsxMl0sXG4gICAgICAgICAgICAgICAgdHkgPSBtYXRyaXhbMTNdO1xuXG4gICAgICAgICAgICB2YXIgcG9pbnRzID0gY29tcC5fcG9pbnRzO1xuXG4gICAgICAgICAgICB2YXIgY3VyID0gdm9pZCAwO1xuICAgICAgICAgICAgaWYgKHBvaW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRpZnggPSBwb2ludHNbMF0ucG9pbnQueCAtIHR4O1xuICAgICAgICAgICAgICAgIHZhciBkaWZ5ID0gcG9pbnRzWzBdLnBvaW50LnkgLSB0eTtcbiAgICAgICAgICAgICAgICBpZiAoZGlmeCAqIGRpZnggKyBkaWZ5ICogZGlmeSA8IGNvbXAubWluU2VnKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1ciA9IHBvaW50c1swXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghY3VyKSB7XG4gICAgICAgICAgICAgICAgY3VyID0gbmV3IFBvaW50KCk7XG4gICAgICAgICAgICAgICAgcG9pbnRzLnNwbGljZSgwLCAwLCBjdXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjdXIuc2V0UG9pbnQodHgsIHR5KTtcbiAgICAgICAgICAgIGN1ci50aW1lID0gY29tcC5fZmFkZVRpbWUgKyBkdDtcblxuICAgICAgICAgICAgdmFyIHZlcnRpY2VzQ291bnQgPSAwO1xuICAgICAgICAgICAgdmFyIGluZGljZXNDb3VudCA9IDA7XG5cbiAgICAgICAgICAgIGlmIChwb2ludHMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGNvbG9yID0gY29tcC5fY29sb3IsXG4gICAgICAgICAgICAgICAgY3IgPSBjb2xvci5yLFxuICAgICAgICAgICAgICAgIGNnID0gY29sb3IuZyxcbiAgICAgICAgICAgICAgICBjYiA9IGNvbG9yLmIsXG4gICAgICAgICAgICAgICAgY2EgPSBjb2xvci5hO1xuXG4gICAgICAgICAgICB2YXIgcHJldiA9IHBvaW50c1sxXTtcbiAgICAgICAgICAgIHByZXYuZGlzdGFuY2UgPSBjdXIucG9pbnQuc3ViKHByZXYucG9pbnQsIF92ZWMyKS5tYWcoKTtcbiAgICAgICAgICAgIF92ZWMyLm5vcm1hbGl6ZVNlbGYoKTtcbiAgICAgICAgICAgIHByZXYuc2V0RGlyKF92ZWMyLngsIF92ZWMyLnkpO1xuICAgICAgICAgICAgY3VyLnNldERpcihfdmVjMi54LCBfdmVjMi55KTtcblxuICAgICAgICAgICAgdmFyIGZsZXhCdWZmZXIgPSB0aGlzLl9yZW5kZXJEYXRhLl9mbGV4QnVmZmVyO1xuICAgICAgICAgICAgZmxleEJ1ZmZlci5yZXNlcnZlKHBvaW50cy5sZW5ndGggKiAyLCAocG9pbnRzLmxlbmd0aCAtIDEpICogNik7XG4gICAgICAgICAgICB2YXIgdkRhdGEgPSBmbGV4QnVmZmVyLnZEYXRhO1xuICAgICAgICAgICAgdmFyIHVpbnRWRGF0YSA9IGZsZXhCdWZmZXIudWludFZEYXRhO1xuICAgICAgICAgICAgdmFyIHZlcnRzT2Zmc2V0ID0gNTtcblxuICAgICAgICAgICAgdmFyIGZhZGVUaW1lID0gY29tcC5fZmFkZVRpbWU7XG4gICAgICAgICAgICB2YXIgZmluZExhc3QgPSBmYWxzZTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBwb2ludHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICB2YXIgcCA9IHBvaW50c1tpXTtcbiAgICAgICAgICAgICAgICB2YXIgcG9pbnQgPSBwLnBvaW50O1xuICAgICAgICAgICAgICAgIHZhciBkaXIgPSBwLmRpcjtcbiAgICAgICAgICAgICAgICBwLnRpbWUgLT0gZHQ7XG5cbiAgICAgICAgICAgICAgICBpZiAocC50aW1lIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICBwb2ludHMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgcHJvZ3Jlc3MgPSBwLnRpbWUgLyBmYWRlVGltZTtcblxuICAgICAgICAgICAgICAgIHZhciBuZXh0ID0gcG9pbnRzW2kgLSAxXTtcbiAgICAgICAgICAgICAgICBpZiAoIWZpbmRMYXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghbmV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcG9pbnQueCA9IG5leHQucG9pbnQueCAtIGRpci54ICogcHJvZ3Jlc3M7XG4gICAgICAgICAgICAgICAgICAgIHBvaW50LnkgPSBuZXh0LnBvaW50LnkgLSBkaXIueSAqIHByb2dyZXNzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5kTGFzdCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBub3JtYWwoX25vcm1hbCwgZGlyKTtcblxuICAgICAgICAgICAgICAgIHZhciBkYSA9IHByb2dyZXNzICogY2E7XG4gICAgICAgICAgICAgICAgdmFyIGMgPSAoZGEgPDwgMjQgPj4+IDApICsgKGNiIDw8IDE2KSArIChjZyA8PCA4KSArIGNyO1xuXG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IHZlcnRpY2VzQ291bnQgKiB2ZXJ0c09mZnNldDtcblxuICAgICAgICAgICAgICAgIHZEYXRhW29mZnNldF0gPSBwb2ludC54ICsgX25vcm1hbC54ICogc3Ryb2tlO1xuICAgICAgICAgICAgICAgIHZEYXRhW29mZnNldCArIDFdID0gcG9pbnQueSArIF9ub3JtYWwueSAqIHN0cm9rZTtcbiAgICAgICAgICAgICAgICB2RGF0YVtvZmZzZXQgKyAyXSA9IDE7XG4gICAgICAgICAgICAgICAgdkRhdGFbb2Zmc2V0ICsgM10gPSBwcm9ncmVzcztcbiAgICAgICAgICAgICAgICB1aW50VkRhdGFbb2Zmc2V0ICsgNF0gPSBjO1xuXG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IHZlcnRzT2Zmc2V0O1xuXG4gICAgICAgICAgICAgICAgdkRhdGFbb2Zmc2V0XSA9IHBvaW50LnggLSBfbm9ybWFsLnggKiBzdHJva2U7XG4gICAgICAgICAgICAgICAgdkRhdGFbb2Zmc2V0ICsgMV0gPSBwb2ludC55IC0gX25vcm1hbC55ICogc3Ryb2tlO1xuICAgICAgICAgICAgICAgIHZEYXRhW29mZnNldCArIDJdID0gMDtcbiAgICAgICAgICAgICAgICB2RGF0YVtvZmZzZXQgKyAzXSA9IHByb2dyZXNzO1xuICAgICAgICAgICAgICAgIHVpbnRWRGF0YVtvZmZzZXQgKyA0XSA9IGM7XG5cbiAgICAgICAgICAgICAgICB2ZXJ0aWNlc0NvdW50ICs9IDI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGluZGljZXNDb3VudCA9IHZlcnRpY2VzQ291bnQgPD0gMiA/IDAgOiAodmVydGljZXNDb3VudCAtIDIpICogMztcblxuICAgICAgICAgICAgZmxleEJ1ZmZlci51c2VkKHZlcnRpY2VzQ291bnQsIGluZGljZXNDb3VudCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2ZpbGxCdWZmZXJzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZpbGxCdWZmZXJzKGNvbXAsIHJlbmRlcmVyKSB7XG4gICAgICAgICAgICB2YXIgX3JlbmRlckRhdGEkX2ZsZXhCdWZmID0gdGhpcy5fcmVuZGVyRGF0YS5fZmxleEJ1ZmZlcixcbiAgICAgICAgICAgICAgICB2RGF0YSA9IF9yZW5kZXJEYXRhJF9mbGV4QnVmZi52RGF0YSxcbiAgICAgICAgICAgICAgICB1c2VkVmVydGljZXMgPSBfcmVuZGVyRGF0YSRfZmxleEJ1ZmYudXNlZFZlcnRpY2VzLFxuICAgICAgICAgICAgICAgIHVzZWRJbmRpY2VzID0gX3JlbmRlckRhdGEkX2ZsZXhCdWZmLnVzZWRJbmRpY2VzLFxuICAgICAgICAgICAgICAgIHVzZWRWZXJ0aWNlc0Zsb2F0cyA9IF9yZW5kZXJEYXRhJF9mbGV4QnVmZi51c2VkVmVydGljZXNGbG9hdHM7XG5cblxuICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IHJlbmRlcmVyLl9tZXNoQnVmZmVyO1xuICAgICAgICAgICAgdmFyIG9mZnNldEluZm8gPSBidWZmZXIucmVxdWVzdCh1c2VkVmVydGljZXMsIHVzZWRJbmRpY2VzKTtcblxuICAgICAgICAgICAgLy8gYnVmZmVyIGRhdGEgbWF5IGJlIHJlYWxsb2MsIG5lZWQgZ2V0IHJlZmVyZW5jZSBhZnRlciByZXF1ZXN0LlxuXG4gICAgICAgICAgICAvLyBmaWxsIHZlcnRpY2VzXG4gICAgICAgICAgICB2YXIgdmVydGV4T2Zmc2V0ID0gb2Zmc2V0SW5mby5ieXRlT2Zmc2V0ID4+IDIsXG4gICAgICAgICAgICAgICAgdmJ1ZiA9IGJ1ZmZlci5fdkRhdGE7XG5cbiAgICAgICAgICAgIGlmICh2RGF0YS5sZW5ndGggKyB2ZXJ0ZXhPZmZzZXQgPiB2YnVmLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZidWYuc2V0KHZEYXRhLnN1YmFycmF5KDAsIHVzZWRWZXJ0aWNlc0Zsb2F0cyksIHZlcnRleE9mZnNldCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZidWYuc2V0KHZEYXRhLCB2ZXJ0ZXhPZmZzZXQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBmaWxsIGluZGljZXNcbiAgICAgICAgICAgIHZhciBpYnVmID0gYnVmZmVyLl9pRGF0YSxcbiAgICAgICAgICAgICAgICBpbmRpY2VPZmZzZXQgPSBvZmZzZXRJbmZvLmluZGljZU9mZnNldCxcbiAgICAgICAgICAgICAgICB2ZXJ0ZXhJZCA9IG9mZnNldEluZm8udmVydGV4T2Zmc2V0O1xuXG4gICAgICAgICAgICAvLyBpbmRleCBidWZmZXJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdXNlZFZlcnRpY2VzOyBpIDwgbDsgaSArPSAyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gdmVydGV4SWQgKyBpO1xuICAgICAgICAgICAgICAgIGlidWZbaW5kaWNlT2Zmc2V0KytdID0gc3RhcnQ7XG4gICAgICAgICAgICAgICAgaWJ1ZltpbmRpY2VPZmZzZXQrK10gPSBzdGFydCArIDI7XG4gICAgICAgICAgICAgICAgaWJ1ZltpbmRpY2VPZmZzZXQrK10gPSBzdGFydCArIDE7XG4gICAgICAgICAgICAgICAgaWJ1ZltpbmRpY2VPZmZzZXQrK10gPSBzdGFydCArIDE7XG4gICAgICAgICAgICAgICAgaWJ1ZltpbmRpY2VPZmZzZXQrK10gPSBzdGFydCArIDI7XG4gICAgICAgICAgICAgICAgaWJ1ZltpbmRpY2VPZmZzZXQrK10gPSBzdGFydCArIDM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbXAubm9kZS5fcmVuZGVyRmxhZyB8PSBSZW5kZXJGbG93LkZMQUdfVVBEQVRFX1JFTkRFUl9EQVRBO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIE1vdGlvblN0cmVha0Fzc2VtYmxlcjtcbn0oX2Fzc2VtYmxlcjJkMi5kZWZhdWx0KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gTW90aW9uU3RyZWFrQXNzZW1ibGVyO1xuXG5cbk1vdGlvblN0cmVha0Fzc2VtYmxlci5yZWdpc3RlcihNb3Rpb25TdHJlYWssIE1vdGlvblN0cmVha0Fzc2VtYmxlcik7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltMXZkR2x2YmkxemRISmxZV3N1YW5NaVhTd2libUZ0WlhNaU9sc2lUVzkwYVc5dVUzUnlaV0ZySWl3aWNtVnhkV2x5WlNJc0lsSmxibVJsY2tac2IzY2lMQ0pRYjJsdWRDSXNJbkJ2YVc1MElpd2laR2x5SWl3aVkyTWlMQ0oyTWlJc0ltUnBjM1JoYm1ObElpd2lkR2x0WlNJc0luQnliM1J2ZEhsd1pTSXNJbk5sZEZCdmFXNTBJaXdpZUNJc0lua2lMQ0p6WlhSRWFYSWlMQ0pmZEdGdVoyVnVkQ0lzSWw5dGFYUmxjaUlzSWw5dWIzSnRZV3dpTENKZmRtVmpNaUlzSW01dmNtMWhiQ0lzSW05MWRDSXNJbU52YlhCMWRHVk5hWFJsY2lJc0ltMXBkR1Z5SWl3aWJHbHVaVUVpTENKc2FXNWxRaUlzSW1oaGJHWlVhR2xqYXlJc0ltMWhlRTExYkhScGNHeGxJaXdpWVdSa0lpd2libTl5YldGc2FYcGxVMlZzWmlJc0ltMTFiSFJwY0d4bElpd2laRzkwSWl3aVRXRjBhQ0lzSW0xcGJpSXNJazF2ZEdsdmJsTjBjbVZoYTBGemMyVnRZbXhsY2lJc0lsOXlaVzVrWlhKRVlYUmhJaXdpWTNKbFlYUmxSbXhsZUVSaGRHRWlMQ0pqYjIxd0lpd2laSFFpTENKRFExOUZSRWxVVDFJaUxDSndjbVYyYVdWM0lpd2ljM1J5YjJ0bElpd2lYM04wY205clpTSXNJbTV2WkdVaUxDSnRZWFJ5YVhnaUxDSmZkMjl5YkdSTllYUnlhWGdpTENKdElpd2lkSGdpTENKMGVTSXNJbkJ2YVc1MGN5SXNJbDl3YjJsdWRITWlMQ0pqZFhJaUxDSnNaVzVuZEdnaUxDSmthV1o0SWl3aVpHbG1lU0lzSW0xcGJsTmxaeUlzSW5Od2JHbGpaU0lzSWw5bVlXUmxWR2x0WlNJc0luWmxjblJwWTJWelEyOTFiblFpTENKcGJtUnBZMlZ6UTI5MWJuUWlMQ0pqYjJ4dmNpSXNJbDlqYjJ4dmNpSXNJbU55SWl3aWNpSXNJbU5uSWl3aVp5SXNJbU5pSWl3aVlpSXNJbU5oSWl3aVlTSXNJbkJ5WlhZaUxDSnpkV0lpTENKdFlXY2lMQ0ptYkdWNFFuVm1abVZ5SWl3aVgyWnNaWGhDZFdabVpYSWlMQ0p5WlhObGNuWmxJaXdpZGtSaGRHRWlMQ0oxYVc1MFZrUmhkR0VpTENKMlpYSjBjMDltWm5ObGRDSXNJbVpoWkdWVWFXMWxJaXdpWm1sdVpFeGhjM1FpTENKcElpd2ljQ0lzSW5CeWIyZHlaWE56SWl3aWJtVjRkQ0lzSW1SaElpd2lZeUlzSW05bVpuTmxkQ0lzSW5WelpXUWlMQ0p5Wlc1a1pYSmxjaUlzSW5WelpXUldaWEowYVdObGN5SXNJblZ6WldSSmJtUnBZMlZ6SWl3aWRYTmxaRlpsY25ScFkyVnpSbXh2WVhSeklpd2lZblZtWm1WeUlpd2lYMjFsYzJoQ2RXWm1aWElpTENKdlptWnpaWFJKYm1adklpd2ljbVZ4ZFdWemRDSXNJblpsY25SbGVFOW1abk5sZENJc0ltSjVkR1ZQWm1aelpYUWlMQ0oyWW5WbUlpd2lYM1pFWVhSaElpd2ljMlYwSWl3aWMzVmlZWEp5WVhraUxDSnBZblZtSWl3aVgybEVZWFJoSWl3aWFXNWthV05sVDJabWMyVjBJaXdpZG1WeWRHVjRTV1FpTENKc0lpd2ljM1JoY25RaUxDSmZjbVZ1WkdWeVJteGhaeUlzSWtaTVFVZGZWVkJFUVZSRlgxSkZUa1JGVWw5RVFWUkJJaXdpUVhOelpXMWliR1Z5TWtRaUxDSnlaV2RwYzNSbGNpSmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3TzBGQmVVSkJPenM3T3pzN096czdPeXRsUVhwQ1FUczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFUSkNRU3hKUVVGTlFTeGxRVUZsUXl4UlFVRlJMRzlEUVVGU0xFTkJRWEpDTzBGQlEwRXNTVUZCVFVNc1lVRkJZVVFzVVVGQlVTeHRRa0ZCVWl4RFFVRnVRanM3UVVGRlFTeFRRVUZUUlN4TFFVRlVMRU5CUVdkQ1F5eExRVUZvUWl4RlFVRjFRa01zUjBGQmRrSXNSVUZCTkVJN1FVRkRlRUlzVTBGQlMwUXNTMEZCVEN4SFFVRmhRU3hUUVVGVFJTeEhRVUZIUXl4RlFVRklMRVZCUVhSQ08wRkJRMEVzVTBGQlMwWXNSMEZCVEN4SFFVRlhRU3hQUVVGUFF5eEhRVUZIUXl4RlFVRklMRVZCUVd4Q08wRkJRMEVzVTBGQlMwTXNVVUZCVEN4SFFVRm5RaXhEUVVGb1FqdEJRVU5CTEZOQlFVdERMRWxCUVV3c1IwRkJXU3hEUVVGYU8wRkJRMGc3TzBGQlJVUk9MRTFCUVUxUExGTkJRVTRzUTBGQlowSkRMRkZCUVdoQ0xFZEJRVEpDTEZWQlFWVkRMRU5CUVZZc1JVRkJZVU1zUTBGQllpeEZRVUZuUWp0QlFVTjJReXhUUVVGTFZDeExRVUZNTEVOQlFWZFJMRU5CUVZnc1IwRkJaVUVzUTBGQlpqdEJRVU5CTEZOQlFVdFNMRXRCUVV3c1EwRkJWMU1zUTBGQldDeEhRVUZsUVN4RFFVRm1PMEZCUTBnc1EwRklSRHM3UVVGTFFWWXNUVUZCVFU4c1UwRkJUaXhEUVVGblFra3NUVUZCYUVJc1IwRkJlVUlzVlVGQlZVWXNRMEZCVml4RlFVRmhReXhEUVVGaUxFVkJRV2RDTzBGQlEzSkRMRk5CUVV0U0xFZEJRVXdzUTBGQlUwOHNRMEZCVkN4SFFVRmhRU3hEUVVGaU8wRkJRMEVzVTBGQlMxQXNSMEZCVEN4RFFVRlRVU3hEUVVGVUxFZEJRV0ZCTEVOQlFXSTdRVUZEU0N4RFFVaEVPenRCUVV0QkxFbEJRVWxGTEZkQlFWZFVMRWRCUVVkRExFVkJRVWdzUlVGQlpqdEJRVU5CTEVsQlFVbFRMRk5CUVZOV0xFZEJRVWRETEVWQlFVZ3NSVUZCWWp0QlFVTkJMRWxCUVVsVkxGVkJRVlZZTEVkQlFVZERMRVZCUVVnc1JVRkJaRHRCUVVOQkxFbEJRVWxYTEZGQlFWRmFMRWRCUVVkRExFVkJRVWdzUlVGQldqczdRVUZGUVN4VFFVRlRXU3hOUVVGVUxFTkJRV2xDUXl4SFFVRnFRaXhGUVVGelFtWXNSMEZCZEVJc1JVRkJNa0k3UVVGRGRrSTdRVUZEUVdVc1VVRkJTVklzUTBGQlNpeEhRVUZSTEVOQlFVTlFMRWxCUVVsUkxFTkJRV0k3UVVGRFFVOHNVVUZCU1ZBc1EwRkJTaXhIUVVGUlVpeEpRVUZKVHl4RFFVRmFPMEZCUTBFc1YwRkJUMUVzUjBGQlVEdEJRVU5JT3p0QlFVVkVMRk5CUVZORExGbEJRVlFzUTBGQmRVSkRMRXRCUVhaQ0xFVkJRVGhDUXl4TFFVRTVRaXhGUVVGeFEwTXNTMEZCY2tNc1JVRkJORU5ETEZOQlFUVkRMRVZCUVhWRVF5eFhRVUYyUkN4RlFVRnZSVHRCUVVOb1JUdEJRVU5CU0N4VlFVRk5TU3hIUVVGT0xFTkJRVlZJTEV0QlFWWXNSVUZCYVVKVUxGRkJRV3BDTzBGQlEwRkJMR0ZCUVZOaExHRkJRVlE3TzBGQlJVRTdRVUZEUVU0c1ZVRkJUVllzUTBGQlRpeEhRVUZWTEVOQlFVTkhMRk5CUVZOR0xFTkJRWEJDTzBGQlEwRlRMRlZCUVUxVUxFTkJRVTRzUjBGQlZVVXNVMEZCVTBnc1EwRkJia0k3UVVGRFFVMHNWVUZCVFU0c1EwRkJUaXhIUVVGVkxFTkJRVU5YTEUxQlFVMVdMRU5CUVdwQ08wRkJRMEZMTEZWQlFVMU1MRU5CUVU0c1IwRkJWVlVzVFVGQlRWZ3NRMEZCYUVJN08wRkJSVUU3UVVGRFFTeFJRVUZKYVVJc1YwRkJWeXhKUVVGSlVDeE5RVUZOVVN4SFFVRk9MRU5CUVZWYUxFdEJRVllzUTBGQmJrSTdRVUZEUVN4UlFVRkpVU3hYUVVGS0xFVkJRV2xDTzBGQlEySkhMRzFDUVVGWFJTeExRVUZMUXl4SFFVRk1MRU5CUVZOSUxGRkJRVlFzUlVGQmJVSklMRmRCUVc1Q0xFTkJRVmc3UVVGRFNEdEJRVU5FTEZkQlFVOUVMRmxCUVZsSkxGRkJRVzVDTzBGQlEwZzdPMGxCUlc5Q1NTeHhRanM3T3pzN096czdPenM3YlVOQlEwdzdRVUZEVWl4cFFrRkJTME1zVjBGQlRDeERRVUZwUWtNc1kwRkJha0lzUTBGQlowTXNRMEZCYUVNc1JVRkJiVU1zUlVGQmJrTXNSVUZCZFVNc1EwRkJReXhMUVVGTExFTkJRVTRzU1VGQlZ5eERRVUZzUkR0QlFVTklPenM3SzBKQlJVOURMRWtzUlVGQlRVTXNSU3hGUVVGSk8wRkJRMlFzWjBKQlFVbERMR0ZCUVdFc1EwRkJRMFlzUzBGQlMwY3NUMEZCZGtJc1JVRkJaME03TzBGQlJXaERMR2RDUVVGSlF5eFRRVUZUU2l4TFFVRkxTeXhQUVVGTUxFZEJRV1VzUTBGQk5VSTdPMEZCUlVFc1owSkJRVWxETEU5QlFVOU9MRXRCUVV0TkxFbEJRV2hDTzBGQlEwRXNaMEpCUVVsRExGTkJRVk5FTEV0QlFVdEZMRmxCUVV3c1EwRkJhMEpETEVOQlFTOUNPMEZCUTBFc1owSkJRVWxETEV0QlFVdElMRTlCUVU4c1JVRkJVQ3hEUVVGVU8wRkJRVUVzWjBKQlFYRkNTU3hMUVVGTFNpeFBRVUZQTEVWQlFWQXNRMEZCTVVJN08wRkJSVUVzWjBKQlFVbExMRk5CUVZOYUxFdEJRVXRoTEU5QlFXeENPenRCUVVWQkxHZENRVUZKUXl4WlFVRktPMEZCUTBFc1owSkJRVWxHTEU5QlFVOUhMRTFCUVZBc1IwRkJaMElzUTBGQmNFSXNSVUZCZFVJN1FVRkRia0lzYjBKQlFVbERMRTlCUVU5S0xFOUJRVThzUTBGQlVDeEZRVUZWTlVNc1MwRkJWaXhEUVVGblFsRXNRMEZCYUVJc1IwRkJiMEpyUXl4RlFVRXZRanRCUVVOQkxHOUNRVUZKVHl4UFFVRlBUQ3hQUVVGUExFTkJRVkFzUlVGQlZUVkRMRXRCUVZZc1EwRkJaMEpUTEVOQlFXaENMRWRCUVc5Q2EwTXNSVUZCTDBJN1FVRkRRU3h2UWtGQlMwc3NUMEZCUzBFc1NVRkJUQ3hIUVVGWlF5eFBRVUZMUVN4SlFVRnNRaXhIUVVFd1FtcENMRXRCUVV0clFpeE5RVUZ1UXl4RlFVRXlRenRCUVVOMlEwb3NNRUpCUVUxR0xFOUJRVThzUTBGQlVDeERRVUZPTzBGQlEwZzdRVUZEU2pzN1FVRkZSQ3huUWtGQlNTeERRVUZEUlN4SFFVRk1MRVZCUVZVN1FVRkRUa0VzYzBKQlFVMHNTVUZCU1M5RExFdEJRVW9zUlVGQlRqdEJRVU5CTmtNc2RVSkJRVTlQTEUxQlFWQXNRMEZCWXl4RFFVRmtMRVZCUVdsQ0xFTkJRV3BDTEVWQlFXOUNUQ3hIUVVGd1FqdEJRVU5JT3p0QlFVVkVRU3huUWtGQlNYWkRMRkZCUVVvc1EwRkJZVzFETEVWQlFXSXNSVUZCYVVKRExFVkJRV3BDTzBGQlEwRkhMR2RDUVVGSmVrTXNTVUZCU2l4SFFVRlhNa0lzUzBGQlMyOUNMRk5CUVV3c1IwRkJhVUp1UWl4RlFVRTFRanM3UVVGRlFTeG5Ra0ZCU1c5Q0xHZENRVUZuUWl4RFFVRndRanRCUVVOQkxHZENRVUZKUXl4bFFVRmxMRU5CUVc1Q096dEJRVVZCTEdkQ1FVRkpWaXhQUVVGUFJ5eE5RVUZRTEVkQlFXZENMRU5CUVhCQ0xFVkJRWFZDTzBGQlEyNUNPMEZCUTBnN08wRkJSVVFzWjBKQlFVbFJMRkZCUVZGMlFpeExRVUZMZDBJc1RVRkJha0k3UVVGQlFTeG5Ra0ZEU1VNc1MwRkJTMFlzVFVGQlRVY3NRMEZFWmp0QlFVRkJMR2RDUVVOclFrTXNTMEZCUzBvc1RVRkJUVXNzUTBGRU4wSTdRVUZCUVN4blFrRkRaME5ETEV0QlFVdE9MRTFCUVUxUExFTkJSRE5ETzBGQlFVRXNaMEpCUXpoRFF5eExRVUZMVWl4TlFVRk5VeXhEUVVSNlJEczdRVUZIUVN4blFrRkJTVU1zVDBGQlQzSkNMRTlCUVU4c1EwRkJVQ3hEUVVGWU8wRkJRMEZ4UWl4cFFrRkJTemRFTEZGQlFVd3NSMEZCWjBJd1F5eEpRVUZKT1VNc1MwRkJTaXhEUVVGVmEwVXNSMEZCVml4RFFVRmpSQ3hMUVVGTGFrVXNTMEZCYmtJc1JVRkJNRUpqTEV0QlFURkNMRVZCUVdsRGNVUXNSMEZCYWtNc1JVRkJhRUk3UVVGRFFYSkVMR3RDUVVGTlZTeGhRVUZPTzBGQlEwRjVReXhwUWtGQlMzWkVMRTFCUVV3c1EwRkJXVWtzVFVGQlRVNHNRMEZCYkVJc1JVRkJjVUpOTEUxQlFVMU1MRU5CUVROQ08wRkJRMEZ4UXl4blFrRkJTWEJETEUxQlFVb3NRMEZCVjBrc1RVRkJUVTRzUTBGQmFrSXNSVUZCYjBKTkxFMUJRVTFNTEVOQlFURkNPenRCUVVWQkxHZENRVUZKTWtRc1lVRkJZU3hMUVVGTGRFTXNWMEZCVEN4RFFVRnBRblZETEZkQlFXeERPMEZCUTBGRUxIVkNRVUZYUlN4UFFVRllMRU5CUVcxQ01VSXNUMEZCVDBjc1RVRkJVQ3hIUVVGakxFTkJRV3BETEVWQlFXOURMRU5CUVVOSUxFOUJRVTlITEUxQlFWQXNSMEZCWXl4RFFVRm1MRWxCUVd0Q0xFTkJRWFJFTzBGQlEwRXNaMEpCUVVsM1FpeFJRVUZSU0N4WFFVRlhSeXhMUVVGMlFqdEJRVU5CTEdkQ1FVRkpReXhaUVVGWlNpeFhRVUZYU1N4VFFVRXpRanRCUVVOQkxHZENRVUZKUXl4alFVRmpMRU5CUVd4Q096dEJRVVZCTEdkQ1FVRkpReXhYUVVGWE1VTXNTMEZCUzI5Q0xGTkJRWEJDTzBGQlEwRXNaMEpCUVVsMVFpeFhRVUZYTEV0QlFXWTdRVUZEUVN4cFFrRkJTeXhKUVVGSlF5eEpRVUZKYUVNc1QwRkJUMGNzVFVGQlVDeEhRVUZuUWl4RFFVRTNRaXhGUVVGblF6WkNMRXRCUVVrc1EwRkJjRU1zUlVGQmQwTkJMRWRCUVhoRExFVkJRVFpETzBGQlEzcERMRzlDUVVGSlF5eEpRVUZKYWtNc1QwRkJUMmRETEVOQlFWQXNRMEZCVWp0QlFVTkJMRzlDUVVGSk5VVXNVVUZCVVRaRkxFVkJRVVUzUlN4TFFVRmtPMEZCUTBFc2IwSkJRVWxETEUxQlFVMDBSU3hGUVVGRk5VVXNSMEZCV2p0QlFVTkJORVVzYTBKQlFVVjRSU3hKUVVGR0xFbEJRVlUwUWl4RlFVRldPenRCUVVWQkxHOUNRVUZKTkVNc1JVRkJSWGhGTEVsQlFVWXNSMEZCVXl4RFFVRmlMRVZCUVdkQ08wRkJRMXAxUXl3eVFrRkJUMDhzVFVGQlVDeERRVUZqZVVJc1EwRkJaQ3hGUVVGcFFpeERRVUZxUWp0QlFVTkJPMEZCUTBnN08wRkJSVVFzYjBKQlFVbEZMRmRCUVZkRUxFVkJRVVY0UlN4SlFVRkdMRWRCUVZOeFJTeFJRVUY0UWpzN1FVRkZRU3h2UWtGQlNVc3NUMEZCVDI1RExFOUJRVTluUXl4SlFVRkpMRU5CUVZnc1EwRkJXRHRCUVVOQkxHOUNRVUZKTEVOQlFVTkVMRkZCUVV3c1JVRkJaVHRCUVVOWUxIZENRVUZKTEVOQlFVTkpMRWxCUVV3c1JVRkJWenRCUVVOUWJrTXNLMEpCUVU5UExFMUJRVkFzUTBGQlkzbENMRU5CUVdRc1JVRkJhVUlzUTBGQmFrSTdRVUZEUVR0QlFVTklPenRCUVVWRU5VVXNNRUpCUVUxUkxFTkJRVTRzUjBGQlZYVkZMRXRCUVVzdlJTeExRVUZNTEVOQlFWZFJMRU5CUVZnc1IwRkJaVkFzU1VGQlNVOHNRMEZCU2l4SFFVRlJjMFVzVVVGQmFrTTdRVUZEUVRsRkxEQkNRVUZOVXl4RFFVRk9MRWRCUVZWelJTeExRVUZMTDBVc1MwRkJUQ3hEUVVGWFV5eERRVUZZTEVkQlFXVlNMRWxCUVVsUkxFTkJRVW9zUjBGQlVYRkZMRkZCUVdwRE8wRkJRMGc3UVVGRFJFZ3NNa0pCUVZjc1NVRkJXRHM3UVVGRlFUVkVMSFZDUVVGUFJpeFBRVUZRTEVWQlFXZENXaXhIUVVGb1FqczdRVUZIUVN4dlFrRkJTU3RGTEV0QlFVdEdMRmRCUVZObUxFVkJRV3hDTzBGQlEwRXNiMEpCUVVsclFpeEpRVUZKTEVOQlFVVkVMRTFCUVVrc1JVRkJUQ3hMUVVGaExFTkJRV1FzUzBGQmIwSnVRaXhOUVVGSkxFVkJRWGhDTEV0QlFTdENSaXhOUVVGSkxFTkJRVzVETEVsQlFYZERSaXhGUVVGb1JEczdRVUZGUVN4dlFrRkJTWGxDTEZOQlFWTTNRaXhuUWtGQlowSnZRaXhYUVVFM1FqczdRVUZGUVVZc2MwSkJRVTFYTEUxQlFVNHNTVUZCWjBKc1JpeE5RVUZOVVN4RFFVRk9MRWRCUVZWTExGRkJRVkZNTEVOQlFWSXNSMEZCV1RSQ0xFMUJRWFJETzBGQlEwRnRReXh6UWtGQlRWY3NVMEZCVXl4RFFVRm1MRWxCUVc5Q2JFWXNUVUZCVFZNc1EwRkJUaXhIUVVGVlNTeFJRVUZSU2l4RFFVRlNMRWRCUVZreVFpeE5RVUV4UXp0QlFVTkJiVU1zYzBKQlFVMVhMRk5CUVZNc1EwRkJaaXhKUVVGdlFpeERRVUZ3UWp0QlFVTkJXQ3h6UWtGQlRWY3NVMEZCVXl4RFFVRm1MRWxCUVc5Q1NpeFJRVUZ3UWp0QlFVTkJUaXd3UWtGQlZWVXNVMEZCVXl4RFFVRnVRaXhKUVVGM1FrUXNRMEZCZUVJN08wRkJSVUZETERCQ1FVRlZWQ3hYUVVGV096dEJRVVZCUml4elFrRkJUVmNzVFVGQlRpeEpRVUZuUW14R0xFMUJRVTFSTEVOQlFVNHNSMEZCVlVzc1VVRkJVVXdzUTBGQlVpeEhRVUZaTkVJc1RVRkJkRU03UVVGRFFXMURMSE5DUVVGTlZ5eFRRVUZUTEVOQlFXWXNTVUZCYjBKc1JpeE5RVUZOVXl4RFFVRk9MRWRCUVZWSkxGRkJRVkZLTEVOQlFWSXNSMEZCV1RKQ0xFMUJRVEZETzBGQlEwRnRReXh6UWtGQlRWY3NVMEZCVXl4RFFVRm1MRWxCUVc5Q0xFTkJRWEJDTzBGQlEwRllMSE5DUVVGTlZ5eFRRVUZUTEVOQlFXWXNTVUZCYjBKS0xGRkJRWEJDTzBGQlEwRk9MREJDUVVGVlZTeFRRVUZUTEVOQlFXNUNMRWxCUVhkQ1JDeERRVUY0UWpzN1FVRkZRVFZDTEdsRFFVRnBRaXhEUVVGcVFqdEJRVU5JT3p0QlFVVkVReXd5UWtGQlpVUXNhVUpCUVdsQ0xFTkJRV3BDTEVkQlFYRkNMRU5CUVhKQ0xFZEJRWGxDTEVOQlFVTkJMR2RDUVVGblFpeERRVUZxUWl4SlFVRnZRaXhEUVVFMVJEczdRVUZGUVdVc2RVSkJRVmRsTEVsQlFWZ3NRMEZCWjBJNVFpeGhRVUZvUWl4RlFVRXJRa01zV1VGQkwwSTdRVUZEU0RzN08yOURRVVZaZEVJc1NTeEZRVUZOYjBRc1VTeEZRVUZWTzBGQlFVRXNkME5CUTNORExFdEJRVXQwUkN4WFFVRk1MRU5CUVdsQ2RVTXNWMEZFZGtRN1FVRkJRU3huUWtGRGJrSkZMRXRCUkcxQ0xIbENRVU51UWtFc1MwRkViVUk3UVVGQlFTeG5Ra0ZEV21Nc1dVRkVXU3g1UWtGRFdrRXNXVUZFV1R0QlFVRkJMR2RDUVVORlF5eFhRVVJHTEhsQ1FVTkZRU3hYUVVSR08wRkJRVUVzWjBKQlEyVkRMR3RDUVVSbUxIbENRVU5sUVN4clFrRkVaanM3TzBGQlIzcENMR2RDUVVGSlF5eFRRVUZUU2l4VFFVRlRTeXhYUVVGMFFqdEJRVU5CTEdkQ1FVRkpReXhoUVVGaFJpeFBRVUZQUnl4UFFVRlFMRU5CUVdWT0xGbEJRV1lzUlVGQk5rSkRMRmRCUVRkQ0xFTkJRV3BDT3p0QlFVVkJPenRCUVVWQk8wRkJRMEVzWjBKQlFVbE5MR1ZCUVdWR0xGZEJRVmRITEZWQlFWZ3NTVUZCZVVJc1EwRkJOVU03UVVGQlFTeG5Ra0ZEU1VNc1QwRkJUMDRzVDBGQlQwOHNUVUZFYkVJN08wRkJSMEVzWjBKQlFVbDRRaXhOUVVGTmVFSXNUVUZCVGl4SFFVRmxOa01zV1VGQlppeEhRVUU0UWtVc1MwRkJTeTlETEUxQlFYWkRMRVZCUVN0RE8wRkJRek5ESzBNc2NVSkJRVXRGTEVkQlFVd3NRMEZCVTNwQ0xFMUJRVTB3UWl4UlFVRk9MRU5CUVdVc1EwRkJaaXhGUVVGclFsWXNhMEpCUVd4Q0xFTkJRVlFzUlVGQlowUkxMRmxCUVdoRU8wRkJRMGdzWVVGR1JDeE5RVWRMTzBGQlEwUkZMSEZDUVVGTFJTeEhRVUZNTEVOQlFWTjZRaXhMUVVGVUxFVkJRV2RDY1VJc1dVRkJhRUk3UVVGRFNEczdRVUZGUkR0QlFVTkJMR2RDUVVGSlRTeFBRVUZQVml4UFFVRlBWeXhOUVVGc1FqdEJRVUZCTEdkQ1FVTkpReXhsUVVGbFZpeFhRVUZYVlN4WlFVUTVRanRCUVVGQkxHZENRVVZKUXl4WFFVRlhXQ3hYUVVGWFJTeFpRVVl4UWpzN1FVRkpRVHRCUVVOQkxHbENRVUZMTEVsQlFVbG9RaXhKUVVGSkxFTkJRVklzUlVGQlZ6QkNMRWxCUVVscVFpeFpRVUZ3UWl4RlFVRnJRMVFzU1VGQlNUQkNMRU5CUVhSRExFVkJRWGxETVVJc1MwRkJTeXhEUVVFNVF5eEZRVUZwUkR0QlFVTTNReXh2UWtGQlNUSkNMRkZCUVZGR0xGZEJRVmQ2UWl4RFFVRjJRanRCUVVOQmMwSXNjVUpCUVV0RkxHTkJRVXdzU1VGQmRVSkhMRXRCUVhaQ08wRkJRMEZNTEhGQ1FVRkxSU3hqUVVGTUxFbEJRWFZDUnl4UlFVRlJMRU5CUVM5Q08wRkJRMEZNTEhGQ1FVRkxSU3hqUVVGTUxFbEJRWFZDUnl4UlFVRlJMRU5CUVM5Q08wRkJRMEZNTEhGQ1FVRkxSU3hqUVVGTUxFbEJRWFZDUnl4UlFVRlJMRU5CUVM5Q08wRkJRMEZNTEhGQ1FVRkxSU3hqUVVGTUxFbEJRWFZDUnl4UlFVRlJMRU5CUVM5Q08wRkJRMEZNTEhGQ1FVRkxSU3hqUVVGTUxFbEJRWFZDUnl4UlFVRlJMRU5CUVM5Q08wRkJRMGc3TzBGQlJVUjJSU3hwUWtGQlMwMHNTVUZCVEN4RFFVRlZhMFVzVjBGQlZpeEpRVUY1UWpGSExGZEJRVmN5Unl4MVFrRkJjRU03UVVGRFNEczdPenRGUVhCS09FTkRMSEZDT3p0clFrRkJPVUkzUlN4eFFqczdPMEZCZFVweVFrRXNjMEpCUVhOQ09FVXNVVUZCZEVJc1EwRkJLMEl2Unl4WlFVRXZRaXhGUVVFMlEybERMSEZDUVVFM1F5SXNJbVpwYkdVaU9pSnRiM1JwYjI0dGMzUnlaV0ZyTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQkRiM0I1Y21sbmFIUWdLR01wSURJd01UY3RNakF4T0NCWWFXRnRaVzRnV1dGcWFTQlRiMlowZDJGeVpTQkRieTRzSUV4MFpDNWNibHh1SUdoMGRIQnpPaTh2ZDNkM0xtTnZZMjl6TG1OdmJTOWNibHh1SUZCbGNtMXBjM05wYjI0Z2FYTWdhR1Z5WldKNUlHZHlZVzUwWldRc0lHWnlaV1VnYjJZZ1kyaGhjbWRsTENCMGJ5QmhibmtnY0dWeWMyOXVJRzlpZEdGcGJtbHVaeUJoSUdOdmNIbGNiaUJ2WmlCMGFHbHpJSE52Wm5SM1lYSmxJR0Z1WkNCaGMzTnZZMmxoZEdWa0lHVnVaMmx1WlNCemIzVnlZMlVnWTI5a1pTQW9kR2hsSUZ3aVUyOW1kSGRoY21WY0lpa3NJR0VnYkdsdGFYUmxaQ3hjYmlCM2IzSnNaSGRwWkdVc0lISnZlV0ZzZEhrdFpuSmxaU3dnYm05dUxXRnpjMmxuYm1GaWJHVXNJSEpsZG05allXSnNaU0JoYm1RZ2JtOXVMV1Y0WTJ4MWMybDJaU0JzYVdObGJuTmxYRzRnZEc4Z2RYTmxJRU52WTI5eklFTnlaV0YwYjNJZ2MyOXNaV3g1SUhSdklHUmxkbVZzYjNBZ1oyRnRaWE1nYjI0Z2VXOTFjaUIwWVhKblpYUWdjR3hoZEdadmNtMXpMaUJaYjNVZ2MyaGhiR3hjYmlCdWIzUWdkWE5sSUVOdlkyOXpJRU55WldGMGIzSWdjMjltZEhkaGNtVWdabTl5SUdSbGRtVnNiM0JwYm1jZ2IzUm9aWElnYzI5bWRIZGhjbVVnYjNJZ2RHOXZiSE1nZEdoaGRDZHpYRzRnZFhObFpDQm1iM0lnWkdWMlpXeHZjR2x1WnlCbllXMWxjeTRnV1c5MUlHRnlaU0J1YjNRZ1ozSmhiblJsWkNCMGJ5QndkV0pzYVhOb0xDQmthWE4wY21saWRYUmxMRnh1SUhOMVlteHBZMlZ1YzJVc0lHRnVaQzl2Y2lCelpXeHNJR052Y0dsbGN5QnZaaUJEYjJOdmN5QkRjbVZoZEc5eUxseHVYRzRnVkdobElITnZablIzWVhKbElHOXlJSFJ2YjJ4eklHbHVJSFJvYVhNZ1RHbGpaVzV6WlNCQlozSmxaVzFsYm5RZ1lYSmxJR3hwWTJWdWMyVmtMQ0J1YjNRZ2MyOXNaQzVjYmlCWWFXRnRaVzRnV1dGcWFTQlRiMlowZDJGeVpTQkRieTRzSUV4MFpDNGdjbVZ6WlhKMlpYTWdZV3hzSUhKcFoyaDBjeUJ1YjNRZ1pYaHdjbVZ6YzJ4NUlHZHlZVzUwWldRZ2RHOGdlVzkxTGx4dVhHNGdWRWhGSUZOUFJsUlhRVkpGSUVsVElGQlNUMVpKUkVWRUlGd2lRVk1nU1ZOY0lpd2dWMGxVU0U5VlZDQlhRVkpTUVU1VVdTQlBSaUJCVGxrZ1MwbE9SQ3dnUlZoUVVrVlRVeUJQVWx4dUlFbE5VRXhKUlVRc0lFbE9RMHhWUkVsT1J5QkNWVlFnVGs5VUlFeEpUVWxVUlVRZ1ZFOGdWRWhGSUZkQlVsSkJUbFJKUlZNZ1QwWWdUVVZTUTBoQlRsUkJRa2xNU1ZSWkxGeHVJRVpKVkU1RlUxTWdSazlTSUVFZ1VFRlNWRWxEVlV4QlVpQlFWVkpRVDFORklFRk9SQ0JPVDA1SlRrWlNTVTVIUlUxRlRsUXVJRWxPSUU1UElFVldSVTVVSUZOSVFVeE1JRlJJUlZ4dUlFRlZWRWhQVWxNZ1QxSWdRMDlRV1ZKSlIwaFVJRWhQVEVSRlVsTWdRa1VnVEVsQlFreEZJRVpQVWlCQlRsa2dRMHhCU1Uwc0lFUkJUVUZIUlZNZ1QxSWdUMVJJUlZKY2JpQk1TVUZDU1V4SlZGa3NJRmRJUlZSSVJWSWdTVTRnUVU0Z1FVTlVTVTlPSUU5R0lFTlBUbFJTUVVOVUxDQlVUMUpVSUU5U0lFOVVTRVZTVjBsVFJTd2dRVkpKVTBsT1J5QkdVazlOTEZ4dUlFOVZWQ0JQUmlCUFVpQkpUaUJEVDA1T1JVTlVTVTlPSUZkSlZFZ2dWRWhGSUZOUFJsUlhRVkpGSUU5U0lGUklSU0JWVTBVZ1QxSWdUMVJJUlZJZ1JFVkJURWxPUjFNZ1NVNWNiaUJVU0VVZ1UwOUdWRmRCVWtVdVhHNGdLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2k5Y2JseHVhVzF3YjNKMElFRnpjMlZ0WW14bGNqSkVJR1p5YjIwZ0p5NHVMeTR1TDJGemMyVnRZbXhsY2kweVpDYzdYRzVjYm1OdmJuTjBJRTF2ZEdsdmJsTjBjbVZoYXlBOUlISmxjWFZwY21Vb0p5NHVMeTR1THk0dUwyTnZiWEJ2Ym1WdWRITXZRME5OYjNScGIyNVRkSEpsWVdzbktUdGNibU52Ym5OMElGSmxibVJsY2tac2IzY2dQU0J5WlhGMWFYSmxLQ2N1TGk4dUxpOXlaVzVrWlhJdFpteHZkeWNwTzF4dVhHNW1kVzVqZEdsdmJpQlFiMmx1ZENBb2NHOXBiblFzSUdScGNpa2dlMXh1SUNBZ0lIUm9hWE11Y0c5cGJuUWdQU0J3YjJsdWRDQjhmQ0JqWXk1Mk1pZ3BPMXh1SUNBZ0lIUm9hWE11WkdseUlEMGdaR2x5SUh4OElHTmpMbll5S0NrN1hHNGdJQ0FnZEdocGN5NWthWE4wWVc1alpTQTlJREE3WEc0Z0lDQWdkR2hwY3k1MGFXMWxJRDBnTUR0Y2JuMWNibHh1VUc5cGJuUXVjSEp2ZEc5MGVYQmxMbk5sZEZCdmFXNTBJRDBnWm5WdVkzUnBiMjRnS0hnc0lIa3BJSHRjYmlBZ0lDQjBhR2x6TG5CdmFXNTBMbmdnUFNCNE8xeHVJQ0FnSUhSb2FYTXVjRzlwYm5RdWVTQTlJSGs3WEc1OU8xeHVYRzVRYjJsdWRDNXdjbTkwYjNSNWNHVXVjMlYwUkdseUlEMGdablZ1WTNScGIyNGdLSGdzSUhrcElIdGNiaUFnSUNCMGFHbHpMbVJwY2k1NElEMGdlRHRjYmlBZ0lDQjBhR2x6TG1ScGNpNTVJRDBnZVR0Y2JuMDdYRzVjYm14bGRDQmZkR0Z1WjJWdWRDQTlJR05qTG5ZeUtDazdYRzVzWlhRZ1gyMXBkR1Z5SUQwZ1kyTXVkaklvS1R0Y2JteGxkQ0JmYm05eWJXRnNJRDBnWTJNdWRqSW9LVHRjYm14bGRDQmZkbVZqTWlBOUlHTmpMbll5S0NrN1hHNWNibVoxYm1OMGFXOXVJRzV2Y20xaGJDQW9iM1YwTENCa2FYSXBJSHRjYmlBZ0lDQXZMMmRsZENCd1pYSndaVzVrYVdOMWJHRnlYRzRnSUNBZ2IzVjBMbmdnUFNBdFpHbHlMbms3WEc0Z0lDQWdiM1YwTG5rZ1BTQmthWEl1ZUR0Y2JpQWdJQ0J5WlhSMWNtNGdiM1YwWEc1OVhHNWNibVoxYm1OMGFXOXVJR052YlhCMWRHVk5hWFJsY2lBb2JXbDBaWElzSUd4cGJtVkJMQ0JzYVc1bFFpd2dhR0ZzWmxSb2FXTnJMQ0J0WVhoTmRXeDBhWEJzWlNrZ2UxeHVJQ0FnSUM4dloyVjBJSFJoYm1kbGJuUWdiR2x1WlZ4dUlDQWdJR3hwYm1WQkxtRmtaQ2hzYVc1bFFpd2dYM1JoYm1kbGJuUXBPMXh1SUNBZ0lGOTBZVzVuWlc1MExtNXZjbTFoYkdsNlpWTmxiR1lvS1R0Y2JseHVJQ0FnSUM4dloyVjBJRzFwZEdWeUlHRnpJR0VnZFc1cGRDQjJaV04wYjNKY2JpQWdJQ0J0YVhSbGNpNTRJRDBnTFY5MFlXNW5aVzUwTG5rN1hHNGdJQ0FnYldsMFpYSXVlU0E5SUY5MFlXNW5aVzUwTG5nN1hHNGdJQ0FnWDNabFl6SXVlQ0E5SUMxc2FXNWxRUzU1T3lCY2JpQWdJQ0JmZG1Wak1pNTVJRDBnYkdsdVpVRXVlRHRjYmx4dUlDQWdJQzh2WjJWMElIUm9aU0J1WldObGMzTmhjbmtnYkdWdVozUm9JRzltSUc5MWNpQnRhWFJsY2x4dUlDQWdJR3hsZENCdGRXeDBhWEJzWlNBOUlERWdMeUJ0YVhSbGNpNWtiM1FvWDNabFl6SXBPMXh1SUNBZ0lHbG1JQ2h0WVhoTmRXeDBhWEJzWlNrZ2UxeHVJQ0FnSUNBZ0lDQnRkV3gwYVhCc1pTQTlJRTFoZEdndWJXbHVLRzExYkhScGNHeGxMQ0J0WVhoTmRXeDBhWEJzWlNrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQm9ZV3htVkdocFkyc2dLaUJ0ZFd4MGFYQnNaVHRjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nVFc5MGFXOXVVM1J5WldGclFYTnpaVzFpYkdWeUlHVjRkR1Z1WkhNZ1FYTnpaVzFpYkdWeU1rUWdlMXh1SUNBZ0lHbHVhWFJFWVhSaElDZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjbVZ1WkdWeVJHRjBZUzVqY21WaGRHVkdiR1Y0UkdGMFlTZ3dMQ0F4Tml3Z0tERTJJQzBnTWlrZ0tpQXpLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjFjR1JoZEdVZ0tHTnZiWEFzSUdSMEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoRFExOUZSRWxVVDFJZ0ppWWdJV052YlhBdWNISmxkbWxsZHlrZ2NtVjBkWEp1TzF4dVhHNGdJQ0FnSUNBZ0lHeGxkQ0J6ZEhKdmEyVWdQU0JqYjIxd0xsOXpkSEp2YTJVZ0x5QXlPMXh1WEc0Z0lDQWdJQ0FnSUd4bGRDQnViMlJsSUQwZ1kyOXRjQzV1YjJSbE8xeHVJQ0FnSUNBZ0lDQnNaWFFnYldGMGNtbDRJRDBnYm05a1pTNWZkMjl5YkdSTllYUnlhWGd1YlR0Y2JpQWdJQ0FnSUNBZ2JHVjBJSFI0SUQwZ2JXRjBjbWw0V3pFeVhTd2dkSGtnUFNCdFlYUnlhWGhiTVROZE8xeHVYRzRnSUNBZ0lDQWdJR3hsZENCd2IybHVkSE1nUFNCamIyMXdMbDl3YjJsdWRITTdYRzVjYmlBZ0lDQWdJQ0FnYkdWMElHTjFjanRjYmlBZ0lDQWdJQ0FnYVdZZ0tIQnZhVzUwY3k1c1pXNW5kR2dnUGlBeEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdaR2xtZUNBOUlIQnZhVzUwYzFzd1hTNXdiMmx1ZEM1NElDMGdkSGc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWkdsbWVTQTlJSEJ2YVc1MGMxc3dYUzV3YjJsdWRDNTVJQzBnZEhrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0tHUnBabmdxWkdsbWVDQXJJR1JwWm5rcVpHbG1lU2tnUENCamIyMXdMbTFwYmxObFp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR04xY2lBOUlIQnZhVzUwYzFzd1hUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtSUNnaFkzVnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpkWElnUFNCdVpYY2dVRzlwYm5Rb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhCdmFXNTBjeTV6Y0d4cFkyVW9NQ3dnTUN3Z1kzVnlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHTjFjaTV6WlhSUWIybHVkQ2gwZUN3Z2RIa3BPMXh1SUNBZ0lDQWdJQ0JqZFhJdWRHbHRaU0E5SUdOdmJYQXVYMlpoWkdWVWFXMWxJQ3NnWkhRN1hHNGdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQnNaWFFnZG1WeWRHbGpaWE5EYjNWdWRDQTlJREE3WEc0Z0lDQWdJQ0FnSUd4bGRDQnBibVJwWTJWelEyOTFiblFnUFNBd08xeHVYRzRnSUNBZ0lDQWdJR2xtSUNod2IybHVkSE11YkdWdVozUm9JRHdnTWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2JHVjBJR052Ykc5eUlEMGdZMjl0Y0M1ZlkyOXNiM0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpjaUE5SUdOdmJHOXlMbklzSUdObklEMGdZMjlzYjNJdVp5d2dZMklnUFNCamIyeHZjaTVpTENCallTQTlJR052Ykc5eUxtRTdYRzVjYmlBZ0lDQWdJQ0FnYkdWMElIQnlaWFlnUFNCd2IybHVkSE5iTVYwN1hHNGdJQ0FnSUNBZ0lIQnlaWFl1WkdsemRHRnVZMlVnUFNCamRYSXVjRzlwYm5RdWMzVmlLSEJ5WlhZdWNHOXBiblFzSUY5MlpXTXlLUzV0WVdjb0tUdGNiaUFnSUNBZ0lDQWdYM1psWXpJdWJtOXliV0ZzYVhwbFUyVnNaaWdwTzF4dUlDQWdJQ0FnSUNCd2NtVjJMbk5sZEVScGNpaGZkbVZqTWk1NExDQmZkbVZqTWk1NUtUdGNiaUFnSUNBZ0lDQWdZM1Z5TG5ObGRFUnBjaWhmZG1Wak1pNTRMQ0JmZG1Wak1pNTVLVHRjYmx4dUlDQWdJQ0FnSUNCc1pYUWdabXhsZUVKMVptWmxjaUE5SUhSb2FYTXVYM0psYm1SbGNrUmhkR0V1WDJac1pYaENkV1ptWlhJN1hHNGdJQ0FnSUNBZ0lHWnNaWGhDZFdabVpYSXVjbVZ6WlhKMlpTaHdiMmx1ZEhNdWJHVnVaM1JvS2pJc0lDaHdiMmx1ZEhNdWJHVnVaM1JvTFRFcEtqWXBPMXh1SUNBZ0lDQWdJQ0JzWlhRZ2RrUmhkR0VnUFNCbWJHVjRRblZtWm1WeUxuWkVZWFJoTzF4dUlDQWdJQ0FnSUNCc1pYUWdkV2x1ZEZaRVlYUmhJRDBnWm14bGVFSjFabVpsY2k1MWFXNTBWa1JoZEdFN1hHNGdJQ0FnSUNBZ0lHeGxkQ0IyWlhKMGMwOW1abk5sZENBOUlEVTdYRzVjYmlBZ0lDQWdJQ0FnYkdWMElHWmhaR1ZVYVcxbElEMGdZMjl0Y0M1ZlptRmtaVlJwYldVN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JtYVc1a1RHRnpkQ0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ2NHOXBiblJ6TG14bGJtZDBhQ0F0SURFN0lHa2dQajB3SURzZ2FTMHRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY0NBOUlIQnZhVzUwYzF0cFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQndiMmx1ZENBOUlIQXVjRzlwYm5RN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1pHbHlJRDBnY0M1a2FYSTdYRzRnSUNBZ0lDQWdJQ0FnSUNCd0xuUnBiV1VnTFQwZ1pIUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNod0xuUnBiV1VnUENBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjRzlwYm5SekxuTndiR2xqWlNocExDQXhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MGFXNTFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSEJ5YjJkeVpYTnpJRDBnY0M1MGFXMWxJQzhnWm1Ga1pWUnBiV1U3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdVpYaDBJRDBnY0c5cGJuUnpXMmtnTFNBeFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2habWx1WkV4aGMzUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXNWxlSFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjRzlwYm5SekxuTndiR2xqWlNocExDQXhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR2x1ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnZhVzUwTG5nZ1BTQnVaWGgwTG5CdmFXNTBMbmdnTFNCa2FYSXVlQ0FxSUhCeWIyZHlaWE56TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCdmFXNTBMbmtnUFNCdVpYaDBMbkJ2YVc1MExua2dMU0JrYVhJdWVTQXFJSEJ5YjJkeVpYTnpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWm1sdVpFeGhjM1FnUFNCMGNuVmxPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnViM0p0WVd3b1gyNXZjbTFoYkN3Z1pHbHlLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdaR0VnUFNCd2NtOW5jbVZ6Y3lwallUdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmpJRDBnS0Noa1lUdzhNalFwSUQ0K1BpQXdLU0FySUNoallqdzhNVFlwSUNzZ0tHTm5QRHc0S1NBcklHTnlPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYjJabWMyVjBJRDBnZG1WeWRHbGpaWE5EYjNWdWRDQXFJSFpsY25SelQyWm1jMlYwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyUkdGMFlWdHZabVp6WlhSZElEMGdjRzlwYm5RdWVDQXJJRjl1YjNKdFlXd3VlQ0FxSUhOMGNtOXJaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWkVZWFJoVzI5bVpuTmxkQ0FySURGZElEMGdjRzlwYm5RdWVTQXJJRjl1YjNKdFlXd3VlU0FxSUhOMGNtOXJaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWkVZWFJoVzI5bVpuTmxkQ0FySURKZElEMGdNVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWkVZWFJoVzI5bVpuTmxkQ0FySUROZElEMGdjSEp2WjNKbGMzTTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMWFXNTBWa1JoZEdGYmIyWm1jMlYwSUNzZ05GMGdQU0JqTzF4dUlDQWdJQ0FnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJQ0FnSUNCdlptWnpaWFFnS3owZ2RtVnlkSE5QWm1aelpYUTdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lIWkVZWFJoVzI5bVpuTmxkRjBnUFNCd2IybHVkQzU0SUMwZ1gyNXZjbTFoYkM1NElDb2djM1J5YjJ0bE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZGtSaGRHRmJiMlptYzJWMElDc2dNVjBnUFNCd2IybHVkQzU1SUMwZ1gyNXZjbTFoYkM1NUlDb2djM1J5YjJ0bE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZGtSaGRHRmJiMlptYzJWMElDc2dNbDBnUFNBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZGtSaGRHRmJiMlptYzJWMElDc2dNMTBnUFNCd2NtOW5jbVZ6Y3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFZwYm5SV1JHRjBZVnR2Wm1aelpYUWdLeUEwWFNBOUlHTTdYRzRnSUNBZ0lDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ0lDQWdJSFpsY25ScFkyVnpRMjkxYm5RZ0t6MGdNanRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHbHVaR2xqWlhORGIzVnVkQ0E5SUhabGNuUnBZMlZ6UTI5MWJuUWdQRDBnTWlBL0lEQWdPaUFvZG1WeWRHbGpaWE5EYjNWdWRDQXRJRElwS2pNN1hHNWNiaUFnSUNBZ0lDQWdabXhsZUVKMVptWmxjaTUxYzJWa0tIWmxjblJwWTJWelEyOTFiblFzSUdsdVpHbGpaWE5EYjNWdWRDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1ptbHNiRUoxWm1abGNuTWdLR052YlhBc0lISmxibVJsY21WeUtTQjdYRzRnSUNBZ0lDQWdJR3hsZENCN0lIWkVZWFJoTENCMWMyVmtWbVZ5ZEdsalpYTXNJSFZ6WldSSmJtUnBZMlZ6TENCMWMyVmtWbVZ5ZEdsalpYTkdiRzloZEhNZ2ZTQTlJSFJvYVhNdVgzSmxibVJsY2tSaGRHRXVYMlpzWlhoQ2RXWm1aWEk3WEc1Y2JpQWdJQ0FnSUNBZ2JHVjBJR0oxWm1abGNpQTlJSEpsYm1SbGNtVnlMbDl0WlhOb1FuVm1abVZ5TzF4dUlDQWdJQ0FnSUNCc1pYUWdiMlptYzJWMFNXNW1ieUE5SUdKMVptWmxjaTV5WlhGMVpYTjBLSFZ6WldSV1pYSjBhV05sY3l3Z2RYTmxaRWx1WkdsalpYTXBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklHSjFabVpsY2lCa1lYUmhJRzFoZVNCaVpTQnlaV0ZzYkc5akxDQnVaV1ZrSUdkbGRDQnlaV1psY21WdVkyVWdZV1owWlhJZ2NtVnhkV1Z6ZEM1Y2JseHVJQ0FnSUNBZ0lDQXZMeUJtYVd4c0lIWmxjblJwWTJWelhHNGdJQ0FnSUNBZ0lHeGxkQ0IyWlhKMFpYaFBabVp6WlhRZ1BTQnZabVp6WlhSSmJtWnZMbUo1ZEdWUFptWnpaWFFnUGo0Z01peGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaWRXWWdQU0JpZFdabVpYSXVYM1pFWVhSaE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoMlJHRjBZUzVzWlc1bmRHZ2dLeUIyWlhKMFpYaFBabVp6WlhRZ1BpQjJZblZtTG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUoxWmk1elpYUW9ka1JoZEdFdWMzVmlZWEp5WVhrb01Dd2dkWE5sWkZabGNuUnBZMlZ6Um14dllYUnpLU3dnZG1WeWRHVjRUMlptYzJWMEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaWRXWXVjMlYwS0haRVlYUmhMQ0IyWlhKMFpYaFBabVp6WlhRcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1ptbHNiQ0JwYm1ScFkyVnpYRzRnSUNBZ0lDQWdJR3hsZENCcFluVm1JRDBnWW5WbVptVnlMbDlwUkdGMFlTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdsdVpHbGpaVTltWm5ObGRDQTlJRzltWm5ObGRFbHVabTh1YVc1a2FXTmxUMlptYzJWMExGeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1WeWRHVjRTV1FnUFNCdlptWnpaWFJKYm1adkxuWmxjblJsZUU5bVpuTmxkRHRjYmx4dUlDQWdJQ0FnSUNBdkx5QnBibVJsZUNCaWRXWm1aWEpjYmlBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQXNJR3dnUFNCMWMyVmtWbVZ5ZEdsalpYTTdJR2tnUENCc095QnBJQ3M5SURJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnpkR0Z5ZENBOUlIWmxjblJsZUVsa0lDc2dhVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbGlkV1piYVc1a2FXTmxUMlptYzJWMEt5dGRJRDBnYzNSaGNuUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFluVm1XMmx1WkdsalpVOW1abk5sZENzclhTQTlJSE4wWVhKMElDc2dNanRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbGlkV1piYVc1a2FXTmxUMlptYzJWMEt5dGRJRDBnYzNSaGNuUWdLeUF4TzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV0oxWmx0cGJtUnBZMlZQWm1aelpYUXJLMTBnUFNCemRHRnlkQ0FySURFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWW5WbVcybHVaR2xqWlU5bVpuTmxkQ3NyWFNBOUlITjBZWEowSUNzZ01qdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsaWRXWmJhVzVrYVdObFQyWm1jMlYwS3l0ZElEMGdjM1JoY25RZ0t5QXpPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ1kyOXRjQzV1YjJSbExsOXlaVzVrWlhKR2JHRm5JSHc5SUZKbGJtUmxja1pzYjNjdVJreEJSMTlWVUVSQlZFVmZVa1ZPUkVWU1gwUkJWRUU3WEc0Z0lDQWdmVnh1ZlZ4dVhHNU5iM1JwYjI1VGRISmxZV3RCYzNObGJXSnNaWEl1Y21WbmFYTjBaWElvVFc5MGFXOXVVM1J5WldGckxDQk5iM1JwYjI1VGRISmxZV3RCYzNObGJXSnNaWElwTzF4dUlsMTkiXX0=