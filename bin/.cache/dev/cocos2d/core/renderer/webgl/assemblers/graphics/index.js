(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/graphics/index.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _assembler = require('../../../assembler');
        var _assembler2 = _interopRequireDefault(_assembler);
        var _inputAssembler = require('../../../../../renderer/core/input-assembler');
        var _inputAssembler2 = _interopRequireDefault(_inputAssembler);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var MeshBuffer = require('../../mesh-buffer');
        var vfmtPosColor = require('../../vertex-format').vfmtPosColor;
        var renderer = require('../../../index');
        var Graphics = require('../../../../graphics/graphics');
        var PointFlags = require('../../../../graphics/types').PointFlags;
        var LineJoin = Graphics.LineJoin;
        var LineCap = Graphics.LineCap;
        var Earcut = require('./earcut');
        var Impl = require('./impl');
        var MAX_VERTEX = 65535;
        var MAX_INDICE = MAX_VERTEX * 2;
        var PI = Math.PI;
        var min = Math.min;
        var max = Math.max;
        var ceil = Math.ceil;
        var acos = Math.acos;
        var cos = Math.cos;
        var sin = Math.sin;
        var atan2 = Math.atan2;
        function curveDivs(r, arc, tol) {
            var da = acos(r / (r + tol)) * 2;
            return max(2, ceil(arc / da));
        }
        function clamp(v, min, max) {
            if (v < min) {
                return min;
            } else if (v > max) {
                return max;
            }
            return v;
        }
        var GraphicsAssembler = function (_Assembler) {
            _inherits(GraphicsAssembler, _Assembler);
            function GraphicsAssembler(graphics) {
                _classCallCheck(this, GraphicsAssembler);
                var _this = _possibleConstructorReturn(this, (GraphicsAssembler.__proto__ || Object.getPrototypeOf(GraphicsAssembler)).call(this, graphics));
                _this._buffer = null;
                _this._buffers = [];
                _this._bufferOffset = 0;
                return _this;
            }
            _createClass(GraphicsAssembler, [
                {
                    key: 'getVfmt',
                    value: function getVfmt() {
                        return vfmtPosColor;
                    }
                },
                {
                    key: 'requestBuffer',
                    value: function requestBuffer() {
                        var buffer = {
                            indiceStart: 0,
                            vertexStart: 0
                        };
                        var meshbuffer = new MeshBuffer(renderer._handle, vfmtPosColor);
                        buffer.meshbuffer = meshbuffer;
                        var ia = new _inputAssembler2.default(meshbuffer._vb, meshbuffer._ib);
                        buffer.ia = ia;
                        this._buffers.push(buffer);
                        return buffer;
                    }
                },
                {
                    key: 'getBuffers',
                    value: function getBuffers() {
                        if (this._buffers.length === 0) {
                            this.requestBuffer();
                        }
                        return this._buffers;
                    }
                },
                {
                    key: 'clear',
                    value: function clear(clean) {
                        this._bufferOffset = 0;
                        var datas = this._buffers;
                        if (clean) {
                            for (var i = 0, l = datas.length; i < l; i++) {
                                var data = datas[i];
                                data.meshbuffer.destroy();
                                data.meshbuffer = null;
                            }
                            datas.length = 0;
                        } else {
                            for (var _i = 0, _l = datas.length; _i < _l; _i++) {
                                var _data = datas[_i];
                                _data.indiceStart = 0;
                                _data.vertexStart = 0;
                                var meshbuffer = _data.meshbuffer;
                                meshbuffer.reset();
                            }
                        }
                    }
                },
                {
                    key: 'fillBuffers',
                    value: function fillBuffers(graphics, renderer) {
                        renderer._flush();
                        renderer.node = graphics.node;
                        renderer.material = graphics.sharedMaterials[0];
                        var buffers = this.getBuffers();
                        for (var index = 0, length = buffers.length; index < length; index++) {
                            var buffer = buffers[index];
                            var meshbuffer = buffer.meshbuffer;
                            buffer.ia._count = buffer.indiceStart;
                            renderer._flushIA(buffer.ia);
                            meshbuffer.uploadData();
                        }
                    }
                },
                {
                    key: 'genBuffer',
                    value: function genBuffer(graphics, cverts) {
                        var buffers = this.getBuffers();
                        var buffer = buffers[this._bufferOffset];
                        var meshbuffer = buffer.meshbuffer;
                        var maxVertsCount = buffer.vertexStart + cverts;
                        if (maxVertsCount > MAX_VERTEX || maxVertsCount * 3 > MAX_INDICE) {
                            ++this._bufferOffset;
                            maxVertsCount = cverts;
                            if (this._bufferOffset < buffers.length) {
                                buffer = buffers[this._bufferOffset];
                            } else {
                                buffer = this.requestBuffer(graphics);
                                buffers[this._bufferOffset] = buffer;
                            }
                            meshbuffer = buffer.meshbuffer;
                        }
                        if (maxVertsCount > meshbuffer.vertexOffset) {
                            meshbuffer.requestStatic(cverts, cverts * 3);
                        }
                        this._buffer = buffer;
                        return buffer;
                    }
                },
                {
                    key: 'stroke',
                    value: function stroke(graphics) {
                        this._curColor = graphics._strokeColor._val;
                        this._flattenPaths(graphics._impl);
                        this._expandStroke(graphics);
                        graphics._impl._updatePathOffset = true;
                    }
                },
                {
                    key: 'fill',
                    value: function fill(graphics) {
                        this._curColor = graphics._fillColor._val;
                        this._expandFill(graphics);
                        graphics._impl._updatePathOffset = true;
                    }
                },
                {
                    key: '_expandStroke',
                    value: function _expandStroke(graphics) {
                        var w = graphics.lineWidth * 0.5, lineCap = graphics.lineCap, lineJoin = graphics.lineJoin, miterLimit = graphics.miterLimit;
                        var impl = graphics._impl;
                        var ncap = curveDivs(w, PI, impl._tessTol);
                        this._calculateJoins(impl, w, lineJoin, miterLimit);
                        var paths = impl._paths;
                        var cverts = 0;
                        for (var i = impl._pathOffset, l = impl._pathLength; i < l; i++) {
                            var path = paths[i];
                            var pointsLength = path.points.length;
                            if (lineJoin === LineJoin.ROUND)
                                cverts += (pointsLength + path.nbevel * (ncap + 2) + 1) * 2;
                            else
                                cverts += (pointsLength + path.nbevel * 5 + 1) * 2;
                            if (!path.closed) {
                                if (lineCap === LineCap.ROUND) {
                                    cverts += (ncap * 2 + 2) * 2;
                                } else {
                                    cverts += (3 + 3) * 2;
                                }
                            }
                        }
                        var buffer = this.genBuffer(graphics, cverts), meshbuffer = buffer.meshbuffer, vData = meshbuffer._vData, iData = meshbuffer._iData;
                        for (var _i2 = impl._pathOffset, _l2 = impl._pathLength; _i2 < _l2; _i2++) {
                            var _path = paths[_i2];
                            var pts = _path.points;
                            var _pointsLength = pts.length;
                            var offset = buffer.vertexStart;
                            var p0 = void 0, p1 = void 0;
                            var start = void 0, end = void 0, loop = void 0;
                            loop = _path.closed;
                            if (loop) {
                                p0 = pts[_pointsLength - 1];
                                p1 = pts[0];
                                start = 0;
                                end = _pointsLength;
                            } else {
                                p0 = pts[0];
                                p1 = pts[1];
                                start = 1;
                                end = _pointsLength - 1;
                            }
                            if (!loop) {
                                var dPos = p1.sub(p0);
                                dPos.normalizeSelf();
                                var dx = dPos.x;
                                var dy = dPos.y;
                                if (lineCap === LineCap.BUTT)
                                    this._buttCapStart(p0, dx, dy, w, 0);
                                else if (lineCap === LineCap.SQUARE)
                                    this._buttCapStart(p0, dx, dy, w, w);
                                else if (lineCap === LineCap.ROUND)
                                    this._roundCapStart(p0, dx, dy, w, ncap);
                            }
                            for (var j = start; j < end; ++j) {
                                if (lineJoin === LineJoin.ROUND) {
                                    this._roundJoin(p0, p1, w, w, ncap);
                                } else if ((p1.flags & (PointFlags.PT_BEVEL | PointFlags.PT_INNERBEVEL)) !== 0) {
                                    this._bevelJoin(p0, p1, w, w);
                                } else {
                                    this._vset(p1.x + p1.dmx * w, p1.y + p1.dmy * w);
                                    this._vset(p1.x - p1.dmx * w, p1.y - p1.dmy * w);
                                }
                                p0 = p1;
                                p1 = pts[j + 1];
                            }
                            if (loop) {
                                var vDataoOfset = offset * 3;
                                this._vset(vData[vDataoOfset], vData[vDataoOfset + 1]);
                                this._vset(vData[vDataoOfset + 3], vData[vDataoOfset + 4]);
                            } else {
                                var _dPos = p1.sub(p0);
                                _dPos.normalizeSelf();
                                var _dx = _dPos.x;
                                var _dy = _dPos.y;
                                if (lineCap === LineCap.BUTT)
                                    this._buttCapEnd(p1, _dx, _dy, w, 0);
                                else if (lineCap === LineCap.SQUARE)
                                    this._buttCapEnd(p1, _dx, _dy, w, w);
                                else if (lineCap === LineCap.ROUND)
                                    this._roundCapEnd(p1, _dx, _dy, w, ncap);
                            }
                            var indicesOffset = buffer.indiceStart;
                            for (var _start = offset + 2, _end = buffer.vertexStart; _start < _end; _start++) {
                                iData[indicesOffset++] = _start - 2;
                                iData[indicesOffset++] = _start - 1;
                                iData[indicesOffset++] = _start;
                            }
                            buffer.indiceStart = indicesOffset;
                        }
                    }
                },
                {
                    key: '_expandFill',
                    value: function _expandFill(graphics) {
                        var impl = graphics._impl;
                        var paths = impl._paths;
                        var cverts = 0;
                        for (var i = impl._pathOffset, l = impl._pathLength; i < l; i++) {
                            var path = paths[i];
                            var pointsLength = path.points.length;
                            cverts += pointsLength;
                        }
                        var buffer = this.genBuffer(graphics, cverts), meshbuffer = buffer.meshbuffer, vData = meshbuffer._vData, iData = meshbuffer._iData;
                        for (var _i3 = impl._pathOffset, _l3 = impl._pathLength; _i3 < _l3; _i3++) {
                            var _path2 = paths[_i3];
                            var pts = _path2.points;
                            var _pointsLength2 = pts.length;
                            if (_pointsLength2 === 0) {
                                continue;
                            }
                            var offset = buffer.vertexStart;
                            for (var j = 0; j < _pointsLength2; ++j) {
                                this._vset(pts[j].x, pts[j].y);
                            }
                            var indicesOffset = buffer.indiceStart;
                            if (_path2.complex) {
                                var earcutData = [];
                                for (var _j = offset, end = buffer.vertexStart; _j < end; _j++) {
                                    var vDataOffset = _j * 3;
                                    earcutData.push(vData[vDataOffset]);
                                    earcutData.push(vData[vDataOffset + 1]);
                                }
                                var newIndices = Earcut(earcutData, null, 2);
                                if (!newIndices || newIndices.length === 0) {
                                    continue;
                                }
                                for (var _j2 = 0, nIndices = newIndices.length; _j2 < nIndices; _j2++) {
                                    iData[indicesOffset++] = newIndices[_j2] + offset;
                                }
                            } else {
                                var first = offset;
                                for (var start = offset + 2, _end2 = buffer.vertexStart; start < _end2; start++) {
                                    iData[indicesOffset++] = first;
                                    iData[indicesOffset++] = start - 1;
                                    iData[indicesOffset++] = start;
                                }
                            }
                            buffer.indiceStart = indicesOffset;
                        }
                    }
                },
                {
                    key: '_calculateJoins',
                    value: function _calculateJoins(impl, w, lineJoin, miterLimit) {
                        var iw = 0;
                        if (w > 0) {
                            iw = 1 / w;
                        }
                        var paths = impl._paths;
                        for (var i = impl._pathOffset, l = impl._pathLength; i < l; i++) {
                            var path = paths[i];
                            var pts = path.points;
                            var ptsLength = pts.length;
                            var p0 = pts[ptsLength - 1];
                            var p1 = pts[0];
                            var nleft = 0;
                            path.nbevel = 0;
                            for (var j = 0; j < ptsLength; j++) {
                                var dmr2 = void 0, cross = void 0, limit = void 0;
                                var dlx0 = p0.dy;
                                var dly0 = -p0.dx;
                                var dlx1 = p1.dy;
                                var dly1 = -p1.dx;
                                p1.dmx = (dlx0 + dlx1) * 0.5;
                                p1.dmy = (dly0 + dly1) * 0.5;
                                dmr2 = p1.dmx * p1.dmx + p1.dmy * p1.dmy;
                                if (dmr2 > 0.000001) {
                                    var scale = 1 / dmr2;
                                    if (scale > 600) {
                                        scale = 600;
                                    }
                                    p1.dmx *= scale;
                                    p1.dmy *= scale;
                                }
                                cross = p1.dx * p0.dy - p0.dx * p1.dy;
                                if (cross > 0) {
                                    nleft++;
                                    p1.flags |= PointFlags.PT_LEFT;
                                }
                                limit = max(11, min(p0.len, p1.len) * iw);
                                if (dmr2 * limit * limit < 1) {
                                    p1.flags |= PointFlags.PT_INNERBEVEL;
                                }
                                if (p1.flags & PointFlags.PT_CORNER) {
                                    if (dmr2 * miterLimit * miterLimit < 1 || lineJoin === LineJoin.BEVEL || lineJoin === LineJoin.ROUND) {
                                        p1.flags |= PointFlags.PT_BEVEL;
                                    }
                                }
                                if ((p1.flags & (PointFlags.PT_BEVEL | PointFlags.PT_INNERBEVEL)) !== 0) {
                                    path.nbevel++;
                                }
                                p0 = p1;
                                p1 = pts[j + 1];
                            }
                        }
                    }
                },
                {
                    key: '_flattenPaths',
                    value: function _flattenPaths(impl) {
                        var paths = impl._paths;
                        for (var i = impl._pathOffset, l = impl._pathLength; i < l; i++) {
                            var path = paths[i];
                            var pts = path.points;
                            var p0 = pts[pts.length - 1];
                            var p1 = pts[0];
                            if (p0.equals(p1)) {
                                path.closed = true;
                                pts.pop();
                                p0 = pts[pts.length - 1];
                            }
                            for (var j = 0, size = pts.length; j < size; j++) {
                                var dPos = p1.sub(p0);
                                p0.len = dPos.mag();
                                if (dPos.x || dPos.y)
                                    dPos.normalizeSelf();
                                p0.dx = dPos.x;
                                p0.dy = dPos.y;
                                p0 = p1;
                                p1 = pts[j + 1];
                            }
                        }
                    }
                },
                {
                    key: '_chooseBevel',
                    value: function _chooseBevel(bevel, p0, p1, w) {
                        var x = p1.x;
                        var y = p1.y;
                        var x0 = void 0, y0 = void 0, x1 = void 0, y1 = void 0;
                        if (bevel !== 0) {
                            x0 = x + p0.dy * w;
                            y0 = y - p0.dx * w;
                            x1 = x + p1.dy * w;
                            y1 = y - p1.dx * w;
                        } else {
                            x0 = x1 = x + p1.dmx * w;
                            y0 = y1 = y + p1.dmy * w;
                        }
                        return [
                            x0,
                            y0,
                            x1,
                            y1
                        ];
                    }
                },
                {
                    key: '_buttCapStart',
                    value: function _buttCapStart(p, dx, dy, w, d) {
                        var px = p.x - dx * d;
                        var py = p.y - dy * d;
                        var dlx = dy;
                        var dly = -dx;
                        this._vset(px + dlx * w, py + dly * w);
                        this._vset(px - dlx * w, py - dly * w);
                    }
                },
                {
                    key: '_buttCapEnd',
                    value: function _buttCapEnd(p, dx, dy, w, d) {
                        var px = p.x + dx * d;
                        var py = p.y + dy * d;
                        var dlx = dy;
                        var dly = -dx;
                        this._vset(px + dlx * w, py + dly * w);
                        this._vset(px - dlx * w, py - dly * w);
                    }
                },
                {
                    key: '_roundCapStart',
                    value: function _roundCapStart(p, dx, dy, w, ncap) {
                        var px = p.x;
                        var py = p.y;
                        var dlx = dy;
                        var dly = -dx;
                        for (var i = 0; i < ncap; i++) {
                            var a = i / (ncap - 1) * PI;
                            var ax = cos(a) * w, ay = sin(a) * w;
                            this._vset(px - dlx * ax - dx * ay, py - dly * ax - dy * ay);
                            this._vset(px, py);
                        }
                        this._vset(px + dlx * w, py + dly * w);
                        this._vset(px - dlx * w, py - dly * w);
                    }
                },
                {
                    key: '_roundCapEnd',
                    value: function _roundCapEnd(p, dx, dy, w, ncap) {
                        var px = p.x;
                        var py = p.y;
                        var dlx = dy;
                        var dly = -dx;
                        this._vset(px + dlx * w, py + dly * w);
                        this._vset(px - dlx * w, py - dly * w);
                        for (var i = 0; i < ncap; i++) {
                            var a = i / (ncap - 1) * PI;
                            var ax = cos(a) * w, ay = sin(a) * w;
                            this._vset(px, py);
                            this._vset(px - dlx * ax + dx * ay, py - dly * ax + dy * ay);
                        }
                    }
                },
                {
                    key: '_roundJoin',
                    value: function _roundJoin(p0, p1, lw, rw, ncap) {
                        var dlx0 = p0.dy;
                        var dly0 = -p0.dx;
                        var dlx1 = p1.dy;
                        var dly1 = -p1.dx;
                        var p1x = p1.x;
                        var p1y = p1.y;
                        if ((p1.flags & PointFlags.PT_LEFT) !== 0) {
                            var out = this._chooseBevel(p1.flags & PointFlags.PT_INNERBEVEL, p0, p1, lw);
                            var lx0 = out[0];
                            var ly0 = out[1];
                            var lx1 = out[2];
                            var ly1 = out[3];
                            var a0 = atan2(-dly0, -dlx0);
                            var a1 = atan2(-dly1, -dlx1);
                            if (a1 > a0)
                                a1 -= PI * 2;
                            this._vset(lx0, ly0);
                            this._vset(p1x - dlx0 * rw, p1.y - dly0 * rw);
                            var n = clamp(ceil((a0 - a1) / PI) * ncap, 2, ncap);
                            for (var i = 0; i < n; i++) {
                                var u = i / (n - 1);
                                var a = a0 + u * (a1 - a0);
                                var rx = p1x + cos(a) * rw;
                                var ry = p1y + sin(a) * rw;
                                this._vset(p1x, p1y);
                                this._vset(rx, ry);
                            }
                            this._vset(lx1, ly1);
                            this._vset(p1x - dlx1 * rw, p1y - dly1 * rw);
                        } else {
                            var _out = this._chooseBevel(p1.flags & PointFlags.PT_INNERBEVEL, p0, p1, -rw);
                            var rx0 = _out[0];
                            var ry0 = _out[1];
                            var rx1 = _out[2];
                            var ry1 = _out[3];
                            var _a = atan2(dly0, dlx0);
                            var _a2 = atan2(dly1, dlx1);
                            if (_a2 < _a)
                                _a2 += PI * 2;
                            this._vset(p1x + dlx0 * rw, p1y + dly0 * rw);
                            this._vset(rx0, ry0);
                            var _n = clamp(ceil((_a2 - _a) / PI) * ncap, 2, ncap);
                            for (var _i4 = 0; _i4 < _n; _i4++) {
                                var _u = _i4 / (_n - 1);
                                var _a3 = _a + _u * (_a2 - _a);
                                var lx = p1x + cos(_a3) * lw;
                                var ly = p1y + sin(_a3) * lw;
                                this._vset(lx, ly);
                                this._vset(p1x, p1y);
                            }
                            this._vset(p1x + dlx1 * rw, p1y + dly1 * rw);
                            this._vset(rx1, ry1);
                        }
                    }
                },
                {
                    key: '_bevelJoin',
                    value: function _bevelJoin(p0, p1, lw, rw) {
                        var rx0 = void 0, ry0 = void 0, rx1 = void 0, ry1 = void 0;
                        var lx0 = void 0, ly0 = void 0, lx1 = void 0, ly1 = void 0;
                        var dlx0 = p0.dy;
                        var dly0 = -p0.dx;
                        var dlx1 = p1.dy;
                        var dly1 = -p1.dx;
                        if (p1.flags & PointFlags.PT_LEFT) {
                            var out = this._chooseBevel(p1.flags & PointFlags.PT_INNERBEVEL, p0, p1, lw);
                            lx0 = out[0];
                            ly0 = out[1];
                            lx1 = out[2];
                            ly1 = out[3];
                            this._vset(lx0, ly0);
                            this._vset(p1.x - dlx0 * rw, p1.y - dly0 * rw);
                            this._vset(lx1, ly1);
                            this._vset(p1.x - dlx1 * rw, p1.y - dly1 * rw);
                        } else {
                            var _out2 = this._chooseBevel(p1.flags & PointFlags.PT_INNERBEVEL, p0, p1, -rw);
                            rx0 = _out2[0];
                            ry0 = _out2[1];
                            rx1 = _out2[2];
                            ry1 = _out2[3];
                            this._vset(p1.x + dlx0 * lw, p1.y + dly0 * lw);
                            this._vset(rx0, ry0);
                            this._vset(p1.x + dlx1 * lw, p1.y + dly1 * lw);
                            this._vset(rx1, ry1);
                        }
                    }
                },
                {
                    key: '_vset',
                    value: function _vset(x, y) {
                        var buffer = this._buffer;
                        var meshbuffer = buffer.meshbuffer;
                        var dataOffset = buffer.vertexStart * 3;
                        var vData = meshbuffer._vData;
                        var uintVData = meshbuffer._uintVData;
                        vData[dataOffset] = x;
                        vData[dataOffset + 1] = y;
                        uintVData[dataOffset + 2] = this._curColor;
                        buffer.vertexStart++;
                        meshbuffer._dirty = true;
                    }
                }
            ]);
            return GraphicsAssembler;
        }(_assembler2.default);
        exports.default = GraphicsAssembler;
        _assembler2.default.register(cc.Graphics, GraphicsAssembler);
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,