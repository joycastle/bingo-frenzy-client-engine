(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/sprite/3d/sliced.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var Assembler3D = require('../../../../assembler-3d');
        var SlicedAssembler = require('../2d/sliced');
        var vec3 = cc.vmath.vec3;
        var vec3_temp_local = vec3.create();
        var vec3_temp_world = vec3.create();
        var SlicedAssembler3D = function (_SlicedAssembler) {
            _inherits(SlicedAssembler3D, _SlicedAssembler);
            function SlicedAssembler3D() {
                _classCallCheck(this, SlicedAssembler3D);
                return _possibleConstructorReturn(this, (SlicedAssembler3D.__proto__ || Object.getPrototypeOf(SlicedAssembler3D)).apply(this, arguments));
            }
            return SlicedAssembler3D;
        }(SlicedAssembler);
        exports.default = SlicedAssembler3D;
        cc.js.mixin(SlicedAssembler3D.prototype, Assembler3D, {
            updateWorldVerts: function updateWorldVerts(sprite) {
                var matrix = sprite.node._worldMatrix;
                var local = this._local;
                var world = this._renderData.vDatas[0];
                var floatsPerVert = this.floatsPerVert;
                for (var row = 0; row < 4; ++row) {
                    var localRowY = local[row * 2 + 1];
                    for (var col = 0; col < 4; ++col) {
                        var localColX = local[col * 2];
                        vec3.set(vec3_temp_local, localColX, localRowY, 0);
                        vec3.transformMat4(vec3_temp_world, vec3_temp_local, matrix);
                        var worldIndex = (row * 4 + col) * floatsPerVert;
                        world[worldIndex] = vec3_temp_world.x;
                        world[worldIndex + 1] = vec3_temp_world.y;
                        world[worldIndex + 2] = vec3_temp_world.z;
                    }
                }
            }
        });
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,