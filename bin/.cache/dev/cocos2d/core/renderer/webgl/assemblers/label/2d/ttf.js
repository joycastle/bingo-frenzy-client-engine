(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/label/2d/ttf.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _get = function get(object, property, receiver) {
            if (object === null)
                object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);
            if (desc === undefined) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                    return undefined;
                } else {
                    return get(parent, property, receiver);
                }
            } else if ('value' in desc) {
                return desc.value;
            } else {
                var getter = desc.get;
                if (getter === undefined) {
                    return undefined;
                }
                return getter.call(receiver);
            }
        };
        var _ttf = require('../../../../utils/label/ttf');
        var _ttf2 = _interopRequireDefault(_ttf);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var LabelShadow = require('../../../../../components/CCLabelShadow');
        var WHITE = cc.color(255, 255, 255, 255);
        var WebglTTFAssembler = function (_TTFAssembler) {
            _inherits(WebglTTFAssembler, _TTFAssembler);
            function WebglTTFAssembler() {
                _classCallCheck(this, WebglTTFAssembler);
                return _possibleConstructorReturn(this, (WebglTTFAssembler.__proto__ || Object.getPrototypeOf(WebglTTFAssembler)).apply(this, arguments));
            }
            _createClass(WebglTTFAssembler, [
                {
                    key: 'updateUVs',
                    value: function updateUVs(comp) {
                        var verts = this._renderData.vDatas[0];
                        var uv = comp._frame.uv;
                        var uvOffset = this.uvOffset;
                        var floatsPerVert = this.floatsPerVert;
                        for (var i = 0; i < 4; i++) {
                            var srcOffset = i * 2;
                            var dstOffset = floatsPerVert * i + uvOffset;
                            verts[dstOffset] = uv[srcOffset];
                            verts[dstOffset + 1] = uv[srcOffset + 1];
                        }
                    }
                },
                {
                    key: 'updateColor',
                    value: function updateColor(comp) {
                        WHITE._fastSetA(comp.node._color.a);
                        var color = WHITE._val;
                        _get(WebglTTFAssembler.prototype.__proto__ || Object.getPrototypeOf(WebglTTFAssembler.prototype), 'updateColor', this).call(this, comp, color);
                    }
                },
                {
                    key: 'updateVerts',
                    value: function updateVerts(comp) {
                        var node = comp.node, canvasWidth = comp._ttfTexture.width, canvasHeight = comp._ttfTexture.height, appx = node.anchorX * node.width, appy = node.anchorY * node.height;
                        var shadow = LabelShadow && comp.getComponent(LabelShadow);
                        if (shadow && shadow._enabled) {
                            var offsetX = (canvasWidth - node.width) / 2;
                            var offsetY = (canvasHeight - node.height) / 2;
                            var shadowOffset = shadow.offset;
                            if (-shadowOffset.x > offsetX) {
                                appx += canvasWidth - node.width;
                            } else if (offsetX > shadowOffset.x) {
                                appx += offsetX - shadowOffset.x;
                            } else {
                            }
                            if (-shadowOffset.y > offsetY) {
                                appy += canvasHeight - node.height;
                            } else if (offsetY > shadowOffset.y) {
                                appy += offsetY - shadowOffset.y;
                            } else {
                            }
                        }
                        var local = this._local;
                        local[0] = -appx;
                        local[1] = -appy;
                        local[2] = canvasWidth - appx;
                        local[3] = canvasHeight - appy;
                        this.updateUVs(comp);
                        this.updateWorldVerts(comp);
                    }
                }
            ]);
            return WebglTTFAssembler;
        }(_ttf2.default);
        exports.default = WebglTTFAssembler;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,