(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/label/2d/outline-bmfont.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _bmfont = require('../../../../utils/label/bmfont');
        var _bmfont2 = _interopRequireDefault(_bmfont);
        var _vertexFormat = require('../../../vertex-format');
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var _dataOffset = 0;
        var COLOR_INDEX = [
            2,
            3,
            0,
            1
        ];
        var WebglColorBmfontAssembler = function (_BmfontAssembler) {
            _inherits(WebglColorBmfontAssembler, _BmfontAssembler);
            function WebglColorBmfontAssembler() {
                var _ref;
                var _temp, _this, _ret;
                _classCallCheck(this, WebglColorBmfontAssembler);
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }
                return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = WebglColorBmfontAssembler.__proto__ || Object.getPrototypeOf(WebglColorBmfontAssembler)).call.apply(_ref, [this].concat(args))), _this), _this.floatsPerVert = 6, _temp), _possibleConstructorReturn(_this, _ret);
            }
            _createClass(WebglColorBmfontAssembler, [
                {
                    key: 'initData',
                    value: function initData() {
                        this._renderData.createFlexData(0, 4, 6, this.getVfmt());
                    }
                },
                {
                    key: 'updateColor',
                    value: function updateColor(comp) {
                        var uintVerts = this._renderData.uintVDatas[0];
                        if (!uintVerts)
                            return;
                        var color = comp.node.color;
                        var outlineColor = (comp._borderColor || cc.Color.BLACK)._val;
                        var floatsPerVert = this.floatsPerVert;
                        var colorOffset = this.colorOffset;
                        if (comp._gradient) {
                            comp._gradientColors.forEach(function (o) {
                                o._fastSetA(color.getA());
                            });
                            var j = 0;
                            for (var i = colorOffset, l = uintVerts.length; i < l; i += floatsPerVert) {
                                var c_i = j % 4;
                                uintVerts[i] = comp._gradientColors[COLOR_INDEX[c_i]]._val;
                                uintVerts[i + 1] = outlineColor;
                                j += 1;
                            }
                        } else {
                            for (var _i = colorOffset, _l = uintVerts.length; _i < _l; _i += floatsPerVert) {
                                uintVerts[_i] = color._val;
                                uintVerts[_i + 1] = outlineColor;
                            }
                        }
                    }
                },
                {
                    key: 'getBuffer',
                    value: function getBuffer() {
                        return cc.renderer._handle.getBuffer('mesh', this.getVfmt());
                    }
                },
                {
                    key: 'getVfmt',
                    value: function getVfmt() {
                        return _vertexFormat.vfmtPosUvTwoColor;
                    }
                },
                {
                    key: '_reserveQuads',
                    value: function _reserveQuads(comp, count) {
                        var verticesCount = count * 4;
                        var indicesCount = count * 6;
                        var flexBuffer = this._renderData._flexBuffer;
                        flexBuffer.reserve(verticesCount, indicesCount);
                        flexBuffer.used(verticesCount, indicesCount);
                        var iData = this._renderData.iDatas[0];
                        for (var i = 0, vid = 0, l = indicesCount; i < l; i += 6, vid += 4) {
                            iData[i] = vid;
                            iData[i + 1] = vid + 1;
                            iData[i + 2] = vid + 2;
                            iData[i + 3] = vid + 1;
                            iData[i + 4] = vid + 3;
                            iData[i + 5] = vid + 2;
                        }
                        _dataOffset = 0;
                    }
                },
                {
                    key: '_quadsUpdated',
                    value: function _quadsUpdated(comp) {
                        _dataOffset = 0;
                        var flexBuffer = this._renderData._flexBuffer;
                        flexBuffer.used(this.verticesCount, this.indicesCount);
                    }
                },
                {
                    key: '_getColor',
                    value: function _getColor(comp, i) {
                        if (comp._gradient && i !== undefined) {
                            return comp._gradientColors[COLOR_INDEX[i]]._val;
                        } else {
                            return comp.node._color._val;
                        }
                    }
                },
                {
                    key: '_getOutlineColor',
                    value: function _getOutlineColor(comp) {
                        return (comp._borderColor || cc.Color.BLACK)._val;
                    }
                },
                {
                    key: 'appendQuad',
                    value: function appendQuad(comp, texture, rect, rotated, x, y, scale) {
                        var renderData = this._renderData;
                        var verts = renderData.vDatas[0], uintVerts = renderData.uintVDatas[0];
                        this.verticesCount += 4;
                        this.indicesCount = this.verticesCount / 2 * 3;
                        var texw = texture.width, texh = texture.height, rectWidth = rect.width, rectHeight = rect.height, outlineColor = this._getOutlineColor(comp);
                        var l = void 0, b = void 0, r = void 0, t = void 0;
                        var floatsPerVert = this.floatsPerVert;
                        var uvDataOffset = _dataOffset + this.uvOffset;
                        if (!rotated) {
                            l = rect.x / texw;
                            r = (rect.x + rectWidth) / texw;
                            b = (rect.y + rectHeight) / texh;
                            t = rect.y / texh;
                            verts[uvDataOffset] = l;
                            verts[uvDataOffset + 1] = b;
                            uvDataOffset += floatsPerVert;
                            verts[uvDataOffset] = r;
                            verts[uvDataOffset + 1] = b;
                            uvDataOffset += floatsPerVert;
                            verts[uvDataOffset] = l;
                            verts[uvDataOffset + 1] = t;
                            uvDataOffset += floatsPerVert;
                            verts[uvDataOffset] = r;
                            verts[uvDataOffset + 1] = t;
                        } else {
                            l = rect.x / texw;
                            r = (rect.x + rectHeight) / texw;
                            b = (rect.y + rectWidth) / texh;
                            t = rect.y / texh;
                            verts[uvDataOffset] = l;
                            verts[uvDataOffset + 1] = t;
                            uvDataOffset += floatsPerVert;
                            verts[uvDataOffset] = l;
                            verts[uvDataOffset + 1] = b;
                            uvDataOffset += floatsPerVert;
                            verts[uvDataOffset] = r;
                            verts[uvDataOffset + 1] = t;
                            uvDataOffset += floatsPerVert;
                            verts[uvDataOffset] = r;
                            verts[uvDataOffset + 1] = b;
                        }
                        l = x;
                        r = x + rectWidth * scale;
                        b = y - rectHeight * scale;
                        t = y;
                        this.appendVerts(comp, _dataOffset, l, r, b, t);
                        var colorOffset = _dataOffset + this.colorOffset;
                        for (var i = 0; i < 4; i++) {
                            uintVerts[colorOffset] = this._getColor(comp, i);
                            uintVerts[colorOffset + 1] = outlineColor;
                            colorOffset += floatsPerVert;
                        }
                        _dataOffset += this.floatsPerVert * 4;
                    }
                },
                {
                    key: 'appendVerts',
                    value: function appendVerts(comp, offset, l, r, b, t) {
                        var local = this._local;
                        var floatsPerVert = this.floatsPerVert;
                        local[offset] = l;
                        local[offset + 1] = b;
                        offset += floatsPerVert;
                        local[offset] = r;
                        local[offset + 1] = b;
                        offset += floatsPerVert;
                        local[offset] = l;
                        local[offset + 1] = t;
                        offset += floatsPerVert;
                        local[offset] = r;
                        local[offset + 1] = t;
                    }
                },
                {
                    key: 'updateWorldVerts',
                    value: function updateWorldVerts(comp) {
                        var node = comp.node;
                        var matrix = node._worldMatrix;
                        var matrixm = matrix.m, a = matrixm[0], b = matrixm[1], c = matrixm[4], d = matrixm[5], tx = matrixm[12], ty = matrixm[13];
                        var local = this._local;
                        var world = this._renderData.vDatas[0];
                        var floatsPerVert = this.floatsPerVert;
                        for (var offset = 0; offset < local.length; offset += floatsPerVert) {
                            var x = local[offset];
                            var y = local[offset + 1];
                            world[offset] = x * a + y * c + tx;
                            world[offset + 1] = x * b + y * d + ty;
                        }
                    }
                }
            ]);
            return WebglColorBmfontAssembler;
        }(_bmfont2.default);
        exports.default = WebglColorBmfontAssembler;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,