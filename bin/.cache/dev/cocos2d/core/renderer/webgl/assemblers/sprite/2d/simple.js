(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/sprite/2d/simple.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _assembler2d = require('../../../../assembler-2d');
        var _assembler2d2 = _interopRequireDefault(_assembler2d);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var SimpleSpriteAssembler = function (_Assembler2D) {
            _inherits(SimpleSpriteAssembler, _Assembler2D);
            function SimpleSpriteAssembler() {
                _classCallCheck(this, SimpleSpriteAssembler);
                return _possibleConstructorReturn(this, (SimpleSpriteAssembler.__proto__ || Object.getPrototypeOf(SimpleSpriteAssembler)).apply(this, arguments));
            }
            _createClass(SimpleSpriteAssembler, [
                {
                    key: 'updateRenderData',
                    value: function updateRenderData(sprite) {
                        var frame = sprite._spriteFrame;
                        if (!frame)
                            return;
                        this.packToDynamicAtlas(sprite, frame);
                        if (sprite._vertsDirty) {
                            this.updateUVs(sprite);
                            this.updateVerts(sprite);
                            sprite._vertsDirty = false;
                        }
                    }
                },
                {
                    key: 'updateUVs',
                    value: function updateUVs(sprite) {
                        var uv = sprite._spriteFrame.uv;
                        var uvOffset = this.uvOffset;
                        var floatsPerVert = this.floatsPerVert;
                        var verts = this._renderData.vDatas[0];
                        for (var i = 0; i < 4; i++) {
                            var srcOffset = i * 2;
                            var dstOffset = floatsPerVert * i + uvOffset;
                            verts[dstOffset] = uv[srcOffset];
                            verts[dstOffset + 1] = uv[srcOffset + 1];
                        }
                    }
                },
                {
                    key: 'updateVerts',
                    value: function updateVerts(sprite) {
                        var node = sprite.node, cw = node.width, ch = node.height, appx = node.anchorX * cw, appy = node.anchorY * ch, l = void 0, b = void 0, r = void 0, t = void 0;
                        if (sprite.trim) {
                            l = -appx;
                            b = -appy;
                            r = cw - appx;
                            t = ch - appy;
                        } else {
                            var frame = sprite.spriteFrame, ow = frame._originalSize.width, oh = frame._originalSize.height, rw = frame._rect.width, rh = frame._rect.height, offset = frame._offset, scaleX = cw / ow, scaleY = ch / oh;
                            var trimLeft = offset.x + (ow - rw) / 2;
                            var trimRight = offset.x - (ow - rw) / 2;
                            var trimBottom = offset.y + (oh - rh) / 2;
                            var trimTop = offset.y - (oh - rh) / 2;
                            l = trimLeft * scaleX - appx;
                            b = trimBottom * scaleY - appy;
                            r = cw + trimRight * scaleX - appx;
                            t = ch + trimTop * scaleY - appy;
                        }
                        var local = this._local;
                        local[0] = l;
                        local[1] = b;
                        local[2] = r;
                        local[3] = t;
                        this.updateWorldVerts(sprite);
                    }
                }
            ]);
            return SimpleSpriteAssembler;
        }(_assembler2d2.default);
        exports.default = SimpleSpriteAssembler;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNpbXBsZS5qcyIsIi9Vc2Vycy9nYW95YW5nL1dvcmtTcGFjZS9qb3ljYXN0bGUvYmluZ28vY2xpZW50L2JpbmdvL2VuZ2luZS9jb2NvczJkL2NvcmUvcmVuZGVyZXIvd2ViZ2wvYXNzZW1ibGVycy9zcHJpdGUvMmQvc2ltcGxlLmpzIl0sIm5hbWVzIjpbIlNpbXBsZVNwcml0ZUFzc2VtYmxlciIsInNwcml0ZSIsImZyYW1lIiwiX3Nwcml0ZUZyYW1lIiwicGFja1RvRHluYW1pY0F0bGFzIiwiX3ZlcnRzRGlydHkiLCJ1cGRhdGVVVnMiLCJ1cGRhdGVWZXJ0cyIsInV2IiwidXZPZmZzZXQiLCJmbG9hdHNQZXJWZXJ0IiwidmVydHMiLCJfcmVuZGVyRGF0YSIsInZEYXRhcyIsImkiLCJzcmNPZmZzZXQiLCJkc3RPZmZzZXQiLCJub2RlIiwiY3ciLCJ3aWR0aCIsImNoIiwiaGVpZ2h0IiwiYXBweCIsImFuY2hvclgiLCJhcHB5IiwiYW5jaG9yWSIsImwiLCJiIiwiciIsInQiLCJ0cmltIiwic3ByaXRlRnJhbWUiLCJvdyIsIl9vcmlnaW5hbFNpemUiLCJvaCIsInJ3IiwiX3JlY3QiLCJyaCIsIm9mZnNldCIsIl9vZmZzZXQiLCJzY2FsZVgiLCJzY2FsZVkiLCJ0cmltTGVmdCIsIngiLCJ0cmltUmlnaHQiLCJ0cmltQm90dG9tIiwieSIsInRyaW1Ub3AiLCJsb2NhbCIsIl9sb2NhbCIsInVwZGF0ZVdvcmxkVmVydHMiLCJBc3NlbWJsZXIyRCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7UUF5QkEsSUFBQSxZQUFBLEdBQUEsT0FBQSxDQUFBLDBCQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7WUFFcUJBLHFCQUFBQTs7Ozs7Ozs7O3FEQUNDQyxRQUFRO0FBQUEsd0JBQ3RCLElBQUlDLEtBQUFBLEdBQVFELE1BQUFBLENBQU9FLFlBQW5CLENBRHNCO0FBQUEsd0JBRXRCLElBQUksQ0FBQ0QsS0FB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N0JpQjtBQUFBLHdCQThCakJBLEtBQUFBLENBQU0sQ0FBTkEsSUFBV3BCLENBQVhvQixDQTlCaUI7QUFBQSx3QkErQmpCQSxLQUFBQSxDQUFNLENBQU5BLElBQVduQixDQUFYbUIsQ0EvQmlCO0FBQUEsd0JBZ0NqQixLQUFLRSxnQkFBTCxDQUFzQmpELE1BQXRCLEVBaENpQjtBQUFBOzs7O1VBM0IwQmtELGFBQUFBLENBQUFBOzBCQUE5Qm5EIiwiZmlsZSI6InNpbXBsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXG4gd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xuIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcbiBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCBBc3NlbWJsZXIyRCBmcm9tICcuLi8uLi8uLi8uLi9hc3NlbWJsZXItMmQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaW1wbGVTcHJpdGVBc3NlbWJsZXIgZXh0ZW5kcyBBc3NlbWJsZXIyRCB7XG4gICAgdXBkYXRlUmVuZGVyRGF0YSAoc3ByaXRlKSB7XG4gICAgICAgIGxldCBmcmFtZSA9IHNwcml0ZS5fc3ByaXRlRnJhbWU7XG4gICAgICAgIGlmICghZnJhbWUpIHJldHVybjtcblxuICAgICAgICB0aGlzLnBhY2tUb0R5bmFtaWNBdGxhcyhzcHJpdGUsIGZyYW1lKTtcblxuICAgICAgICBpZiAoc3ByaXRlLl92ZXJ0c0RpcnR5KSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVVWcyhzcHJpdGUpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVWZXJ0cyhzcHJpdGUpO1xuICAgICAgICAgICAgc3ByaXRlLl92ZXJ0c0RpcnR5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVVVnMgKHNwcml0ZSkge1xuICAgICAgICBsZXQgdXYgPSBzcHJpdGUuX3Nwcml0ZUZyYW1lLnV2O1xuICAgICAgICBsZXQgdXZPZmZzZXQgPSB0aGlzLnV2T2Zmc2V0O1xuICAgICAgICBsZXQgZmxvYXRzUGVyVmVydCA9IHRoaXMuZmxvYXRzUGVyVmVydDtcbiAgICAgICAgbGV0IHZlcnRzID0gdGhpcy5fcmVuZGVyRGF0YS52RGF0YXNbMF07XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgc3JjT2Zmc2V0ID0gaSAqIDI7XG4gICAgICAgICAgICBsZXQgZHN0T2Zmc2V0ID0gZmxvYXRzUGVyVmVydCAqIGkgKyB1dk9mZnNldDtcbiAgICAgICAgICAgIHZlcnRzW2RzdE9mZnNldF0gPSB1dltzcmNPZmZzZXRdO1xuICAgICAgICAgICAgdmVydHNbZHN0T2Zmc2V0ICsgMV0gPSB1dltzcmNPZmZzZXQgKyAxXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZVZlcnRzIChzcHJpdGUpIHtcbiAgICAgICAgbGV0IG5vZGUgPSBzcHJpdGUubm9kZSxcbiAgICAgICAgICAgIGN3ID0gbm9kZS53aWR0aCwgY2ggPSBub2RlLmhlaWdodCxcbiAgICAgICAgICAgIGFwcHggPSBub2RlLmFuY2hvclggKiBjdywgYXBweSA9IG5vZGUuYW5jaG9yWSAqIGNoLFxuICAgICAgICAgICAgbCwgYiwgciwgdDtcbiAgICAgICAgaWYgKHNwcml0ZS50cmltKSB7XG4gICAgICAgICAgICBsID0gLWFwcHg7XG4gICAgICAgICAgICBiID0gLWFwcHk7XG4gICAgICAgICAgICByID0gY3cgLSBhcHB4O1xuICAgICAgICAgICAgdCA9IGNoIC0gYXBweTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCBmcmFtZSA9IHNwcml0ZS5zcHJpdGVGcmFtZSxcbiAgICAgICAgICAgICAgICBvdyA9IGZyYW1lLl9vcmlnaW5hbFNpemUud2lkdGgsIG9oID0gZnJhbWUuX29yaWdpbmFsU2l6ZS5oZWlnaHQsXG4gICAgICAgICAgICAgICAgcncgPSBmcmFtZS5fcmVjdC53aWR0aCwgcmggPSBmcmFtZS5fcmVjdC5oZWlnaHQsXG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gZnJhbWUuX29mZnNldCxcbiAgICAgICAgICAgICAgICBzY2FsZVggPSBjdyAvIG93LCBzY2FsZVkgPSBjaCAvIG9oO1xuICAgICAgICAgICAgbGV0IHRyaW1MZWZ0ID0gb2Zmc2V0LnggKyAob3cgLSBydykgLyAyO1xuICAgICAgICAgICAgbGV0IHRyaW1SaWdodCA9IG9mZnNldC54IC0gKG93IC0gcncpIC8gMjtcbiAgICAgICAgICAgIGxldCB0cmltQm90dG9tID0gb2Zmc2V0LnkgKyAob2ggLSByaCkgLyAyO1xuICAgICAgICAgICAgbGV0IHRyaW1Ub3AgPSBvZmZzZXQueSAtIChvaCAtIHJoKSAvIDI7XG4gICAgICAgICAgICBsID0gdHJpbUxlZnQgKiBzY2FsZVggLSBhcHB4O1xuICAgICAgICAgICAgYiA9IHRyaW1Cb3R0b20gKiBzY2FsZVkgLSBhcHB5O1xuICAgICAgICAgICAgciA9IGN3ICsgdHJpbVJpZ2h0ICogc2NhbGVYIC0gYXBweDtcbiAgICAgICAgICAgIHQgPSBjaCArIHRyaW1Ub3AgKiBzY2FsZVkgLSBhcHB5O1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGxvY2FsID0gdGhpcy5fbG9jYWw7XG4gICAgICAgIGxvY2FsWzBdID0gbDtcbiAgICAgICAgbG9jYWxbMV0gPSBiO1xuICAgICAgICBsb2NhbFsyXSA9IHI7XG4gICAgICAgIGxvY2FsWzNdID0gdDtcbiAgICAgICAgdGhpcy51cGRhdGVXb3JsZFZlcnRzKHNwcml0ZSk7XG4gICAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfYXNzZW1ibGVyMmQgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi9hc3NlbWJsZXItMmQnKTtcblxudmFyIF9hc3NlbWJsZXIyZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3NlbWJsZXIyZCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH0gLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUSEUgU09GVFdBUkUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxudmFyIFNpbXBsZVNwcml0ZUFzc2VtYmxlciA9IGZ1bmN0aW9uIChfQXNzZW1ibGVyMkQpIHtcbiAgICBfaW5oZXJpdHMoU2ltcGxlU3ByaXRlQXNzZW1ibGVyLCBfQXNzZW1ibGVyMkQpO1xuXG4gICAgZnVuY3Rpb24gU2ltcGxlU3ByaXRlQXNzZW1ibGVyKCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2ltcGxlU3ByaXRlQXNzZW1ibGVyKTtcblxuICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFNpbXBsZVNwcml0ZUFzc2VtYmxlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNpbXBsZVNwcml0ZUFzc2VtYmxlcikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhTaW1wbGVTcHJpdGVBc3NlbWJsZXIsIFt7XG4gICAgICAgIGtleTogJ3VwZGF0ZVJlbmRlckRhdGEnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlUmVuZGVyRGF0YShzcHJpdGUpIHtcbiAgICAgICAgICAgIHZhciBmcmFtZSA9IHNwcml0ZS5fc3ByaXRlRnJhbWU7XG4gICAgICAgICAgICBpZiAoIWZyYW1lKSByZXR1cm47XG5cbiAgICAgICAgICAgIHRoaXMucGFja1RvRHluYW1pY0F0bGFzKHNwcml0ZSwgZnJhbWUpO1xuXG4gICAgICAgICAgICBpZiAoc3ByaXRlLl92ZXJ0c0RpcnR5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVVVnMoc3ByaXRlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVZlcnRzKHNwcml0ZSk7XG4gICAgICAgICAgICAgICAgc3ByaXRlLl92ZXJ0c0RpcnR5ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3VwZGF0ZVVWcycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVVVnMoc3ByaXRlKSB7XG4gICAgICAgICAgICB2YXIgdXYgPSBzcHJpdGUuX3Nwcml0ZUZyYW1lLnV2O1xuICAgICAgICAgICAgdmFyIHV2T2Zmc2V0ID0gdGhpcy51dk9mZnNldDtcbiAgICAgICAgICAgIHZhciBmbG9hdHNQZXJWZXJ0ID0gdGhpcy5mbG9hdHNQZXJWZXJ0O1xuICAgICAgICAgICAgdmFyIHZlcnRzID0gdGhpcy5fcmVuZGVyRGF0YS52RGF0YXNbMF07XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBzcmNPZmZzZXQgPSBpICogMjtcbiAgICAgICAgICAgICAgICB2YXIgZHN0T2Zmc2V0ID0gZmxvYXRzUGVyVmVydCAqIGkgKyB1dk9mZnNldDtcbiAgICAgICAgICAgICAgICB2ZXJ0c1tkc3RPZmZzZXRdID0gdXZbc3JjT2Zmc2V0XTtcbiAgICAgICAgICAgICAgICB2ZXJ0c1tkc3RPZmZzZXQgKyAxXSA9IHV2W3NyY09mZnNldCArIDFdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICd1cGRhdGVWZXJ0cycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVWZXJ0cyhzcHJpdGUpIHtcbiAgICAgICAgICAgIHZhciBub2RlID0gc3ByaXRlLm5vZGUsXG4gICAgICAgICAgICAgICAgY3cgPSBub2RlLndpZHRoLFxuICAgICAgICAgICAgICAgIGNoID0gbm9kZS5oZWlnaHQsXG4gICAgICAgICAgICAgICAgYXBweCA9IG5vZGUuYW5jaG9yWCAqIGN3LFxuICAgICAgICAgICAgICAgIGFwcHkgPSBub2RlLmFuY2hvclkgKiBjaCxcbiAgICAgICAgICAgICAgICBsID0gdm9pZCAwLFxuICAgICAgICAgICAgICAgIGIgPSB2b2lkIDAsXG4gICAgICAgICAgICAgICAgciA9IHZvaWQgMCxcbiAgICAgICAgICAgICAgICB0ID0gdm9pZCAwO1xuICAgICAgICAgICAgaWYgKHNwcml0ZS50cmltKSB7XG4gICAgICAgICAgICAgICAgbCA9IC1hcHB4O1xuICAgICAgICAgICAgICAgIGIgPSAtYXBweTtcbiAgICAgICAgICAgICAgICByID0gY3cgLSBhcHB4O1xuICAgICAgICAgICAgICAgIHQgPSBjaCAtIGFwcHk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBmcmFtZSA9IHNwcml0ZS5zcHJpdGVGcmFtZSxcbiAgICAgICAgICAgICAgICAgICAgb3cgPSBmcmFtZS5fb3JpZ2luYWxTaXplLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICBvaCA9IGZyYW1lLl9vcmlnaW5hbFNpemUuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICBydyA9IGZyYW1lLl9yZWN0LndpZHRoLFxuICAgICAgICAgICAgICAgICAgICByaCA9IGZyYW1lLl9yZWN0LmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gZnJhbWUuX29mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgc2NhbGVYID0gY3cgLyBvdyxcbiAgICAgICAgICAgICAgICAgICAgc2NhbGVZID0gY2ggLyBvaDtcbiAgICAgICAgICAgICAgICB2YXIgdHJpbUxlZnQgPSBvZmZzZXQueCArIChvdyAtIHJ3KSAvIDI7XG4gICAgICAgICAgICAgICAgdmFyIHRyaW1SaWdodCA9IG9mZnNldC54IC0gKG93IC0gcncpIC8gMjtcbiAgICAgICAgICAgICAgICB2YXIgdHJpbUJvdHRvbSA9IG9mZnNldC55ICsgKG9oIC0gcmgpIC8gMjtcbiAgICAgICAgICAgICAgICB2YXIgdHJpbVRvcCA9IG9mZnNldC55IC0gKG9oIC0gcmgpIC8gMjtcbiAgICAgICAgICAgICAgICBsID0gdHJpbUxlZnQgKiBzY2FsZVggLSBhcHB4O1xuICAgICAgICAgICAgICAgIGIgPSB0cmltQm90dG9tICogc2NhbGVZIC0gYXBweTtcbiAgICAgICAgICAgICAgICByID0gY3cgKyB0cmltUmlnaHQgKiBzY2FsZVggLSBhcHB4O1xuICAgICAgICAgICAgICAgIHQgPSBjaCArIHRyaW1Ub3AgKiBzY2FsZVkgLSBhcHB5O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbG9jYWwgPSB0aGlzLl9sb2NhbDtcbiAgICAgICAgICAgIGxvY2FsWzBdID0gbDtcbiAgICAgICAgICAgIGxvY2FsWzFdID0gYjtcbiAgICAgICAgICAgIGxvY2FsWzJdID0gcjtcbiAgICAgICAgICAgIGxvY2FsWzNdID0gdDtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlV29ybGRWZXJ0cyhzcHJpdGUpO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFNpbXBsZVNwcml0ZUFzc2VtYmxlcjtcbn0oX2Fzc2VtYmxlcjJkMi5kZWZhdWx0KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gU2ltcGxlU3ByaXRlQXNzZW1ibGVyO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbk5wYlhCc1pTNXFjeUpkTENKdVlXMWxjeUk2V3lKVGFXMXdiR1ZUY0hKcGRHVkJjM05sYldKc1pYSWlMQ0p6Y0hKcGRHVWlMQ0ptY21GdFpTSXNJbDl6Y0hKcGRHVkdjbUZ0WlNJc0luQmhZMnRVYjBSNWJtRnRhV05CZEd4aGN5SXNJbDkyWlhKMGMwUnBjblI1SWl3aWRYQmtZWFJsVlZaeklpd2lkWEJrWVhSbFZtVnlkSE1pTENKMWRpSXNJblYyVDJabWMyVjBJaXdpWm14dllYUnpVR1Z5Vm1WeWRDSXNJblpsY25Seklpd2lYM0psYm1SbGNrUmhkR0VpTENKMlJHRjBZWE1pTENKcElpd2ljM0pqVDJabWMyVjBJaXdpWkhOMFQyWm1jMlYwSWl3aWJtOWtaU0lzSW1OM0lpd2lkMmxrZEdnaUxDSmphQ0lzSW1obGFXZG9kQ0lzSW1Gd2NIZ2lMQ0poYm1Ob2IzSllJaXdpWVhCd2VTSXNJbUZ1WTJodmNsa2lMQ0pzSWl3aVlpSXNJbklpTENKMElpd2lkSEpwYlNJc0luTndjbWwwWlVaeVlXMWxJaXdpYjNjaUxDSmZiM0pwWjJsdVlXeFRhWHBsSWl3aWIyZ2lMQ0p5ZHlJc0lsOXlaV04wSWl3aWNtZ2lMQ0p2Wm1aelpYUWlMQ0pmYjJabWMyVjBJaXdpYzJOaGJHVllJaXdpYzJOaGJHVlpJaXdpZEhKcGJVeGxablFpTENKNElpd2lkSEpwYlZKcFoyaDBJaXdpZEhKcGJVSnZkSFJ2YlNJc0lua2lMQ0owY21sdFZHOXdJaXdpYkc5allXd2lMQ0pmYkc5allXd2lMQ0oxY0dSaGRHVlhiM0pzWkZabGNuUnpJaXdpUVhOelpXMWliR1Z5TWtRaVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPenRCUVhsQ1FUczdPenM3T3pzN096c3JaVUY2UWtFN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3U1VFeVFuRkNRU3h4UWpzN096czdPenM3T3pzN2VVTkJRME5ETEUwc1JVRkJVVHRCUVVOMFFpeG5Ra0ZCU1VNc1VVRkJVVVFzVDBGQlQwVXNXVUZCYmtJN1FVRkRRU3huUWtGQlNTeERRVUZEUkN4TFFVRk1MRVZCUVZrN08wRkJSVm9zYVVKQlFVdEZMR3RDUVVGTUxFTkJRWGRDU0N4TlFVRjRRaXhGUVVGblEwTXNTMEZCYUVNN08wRkJSVUVzWjBKQlFVbEVMRTlCUVU5SkxGZEJRVmdzUlVGQmQwSTdRVUZEY0VJc2NVSkJRVXRETEZOQlFVd3NRMEZCWlV3c1RVRkJaanRCUVVOQkxIRkNRVUZMVFN4WFFVRk1MRU5CUVdsQ1RpeE5RVUZxUWp0QlFVTkJRU3gxUWtGQlQwa3NWMEZCVUN4SFFVRnhRaXhMUVVGeVFqdEJRVU5JTzBGQlEwbzdPenRyUTBGRlZVb3NUU3hGUVVGUk8wRkJRMllzWjBKQlFVbFBMRXRCUVV0UUxFOUJRVTlGTEZsQlFWQXNRMEZCYjBKTExFVkJRVGRDTzBGQlEwRXNaMEpCUVVsRExGZEJRVmNzUzBGQlMwRXNVVUZCY0VJN1FVRkRRU3huUWtGQlNVTXNaMEpCUVdkQ0xFdEJRVXRCTEdGQlFYcENPMEZCUTBFc1owSkJRVWxETEZGQlFWRXNTMEZCUzBNc1YwRkJUQ3hEUVVGcFFrTXNUVUZCYWtJc1EwRkJkMElzUTBGQmVFSXNRMEZCV2p0QlFVTkJMR2xDUVVGTExFbEJRVWxETEVsQlFVa3NRMEZCWWl4RlFVRm5Ra0VzU1VGQlNTeERRVUZ3UWl4RlFVRjFRa0VzUjBGQmRrSXNSVUZCTkVJN1FVRkRlRUlzYjBKQlFVbERMRmxCUVZsRUxFbEJRVWtzUTBGQmNFSTdRVUZEUVN4dlFrRkJTVVVzV1VGQldVNHNaMEpCUVdkQ1NTeERRVUZvUWl4SFFVRnZRa3dzVVVGQmNFTTdRVUZEUVVVc2MwSkJRVTFMTEZOQlFVNHNTVUZCYlVKU0xFZEJRVWRQTEZOQlFVZ3NRMEZCYmtJN1FVRkRRVW9zYzBKQlFVMUxMRmxCUVZrc1EwRkJiRUlzU1VGQmRVSlNMRWRCUVVkUExGbEJRVmtzUTBGQlppeERRVUYyUWp0QlFVTklPMEZCUTBvN096dHZRMEZGV1dRc1RTeEZRVUZSTzBGQlEycENMR2RDUVVGSlowSXNUMEZCVDJoQ0xFOUJRVTluUWl4SlFVRnNRanRCUVVGQkxHZENRVU5KUXl4TFFVRkxSQ3hMUVVGTFJTeExRVVJrTzBGQlFVRXNaMEpCUTNGQ1F5eExRVUZMU0N4TFFVRkxTU3hOUVVRdlFqdEJRVUZCTEdkQ1FVVkpReXhQUVVGUFRDeExRVUZMVFN4UFFVRk1MRWRCUVdWTUxFVkJSakZDTzBGQlFVRXNaMEpCUlRoQ1RTeFBRVUZQVUN4TFFVRkxVU3hQUVVGTUxFZEJRV1ZNTEVWQlJuQkVPMEZCUVVFc1owSkJSMGxOTEZWQlNFbzdRVUZCUVN4blFrRkhUME1zVlVGSVVEdEJRVUZCTEdkQ1FVZFZReXhWUVVoV08wRkJRVUVzWjBKQlIyRkRMRlZCU0dJN1FVRkpRU3huUWtGQlNUVkNMRTlCUVU4MlFpeEpRVUZZTEVWQlFXbENPMEZCUTJKS0xHOUNRVUZKTEVOQlFVTktMRWxCUVV3N1FVRkRRVXNzYjBKQlFVa3NRMEZCUTBnc1NVRkJURHRCUVVOQlNTeHZRa0ZCU1ZZc1MwRkJTMGtzU1VGQlZEdEJRVU5CVHl4dlFrRkJTVlFzUzBGQlMwa3NTVUZCVkR0QlFVTklMR0ZCVEVRc1RVRk5TenRCUVVORUxHOUNRVUZKZEVJc1VVRkJVVVFzVDBGQlR6aENMRmRCUVc1Q08wRkJRVUVzYjBKQlEwbERMRXRCUVVzNVFpeE5RVUZOSzBJc1lVRkJUaXhEUVVGdlFtUXNTMEZFTjBJN1FVRkJRU3h2UWtGRGIwTmxMRXRCUVV0b1F5eE5RVUZOSzBJc1lVRkJUaXhEUVVGdlFsb3NUVUZFTjBRN1FVRkJRU3h2UWtGRlNXTXNTMEZCUzJwRExFMUJRVTFyUXl4TFFVRk9MRU5CUVZscVFpeExRVVp5UWp0QlFVRkJMRzlDUVVVMFFtdENMRXRCUVV0dVF5eE5RVUZOYTBNc1MwRkJUaXhEUVVGWlppeE5RVVkzUXp0QlFVRkJMRzlDUVVkSmFVSXNVMEZCVTNCRExFMUJRVTF4UXl4UFFVaHVRanRCUVVGQkxHOUNRVWxKUXl4VFFVRlRkRUlzUzBGQlMyTXNSVUZLYkVJN1FVRkJRU3h2UWtGSmMwSlRMRk5CUVZOeVFpeExRVUZMWXl4RlFVcHdRenRCUVV0QkxHOUNRVUZKVVN4WFFVRlhTaXhQUVVGUFN5eERRVUZRTEVkQlFWY3NRMEZCUTFnc1MwRkJTMGNzUlVGQlRpeEpRVUZaTEVOQlFYUkRPMEZCUTBFc2IwSkJRVWxUTEZsQlFWbE9MRTlCUVU5TExFTkJRVkFzUjBGQlZ5eERRVUZEV0N4TFFVRkxSeXhGUVVGT0xFbEJRVmtzUTBGQmRrTTdRVUZEUVN4dlFrRkJTVlVzWVVGQllWQXNUMEZCVDFFc1EwRkJVQ3hIUVVGWExFTkJRVU5hTEV0QlFVdEhMRVZCUVU0c1NVRkJXU3hEUVVGNFF6dEJRVU5CTEc5Q1FVRkpWU3hWUVVGVlZDeFBRVUZQVVN4RFFVRlFMRWRCUVZjc1EwRkJRMW9zUzBGQlMwY3NSVUZCVGl4SlFVRlpMRU5CUVhKRE8wRkJRMEZZTEc5Q1FVRkpaMElzVjBGQlYwWXNUVUZCV0N4SFFVRnZRbXhDTEVsQlFYaENPMEZCUTBGTExHOUNRVUZKYTBJc1lVRkJZVW9zVFVGQllpeEhRVUZ6UW1wQ0xFbEJRVEZDTzBGQlEwRkpMRzlDUVVGSlZpeExRVUZMTUVJc1dVRkJXVW9zVFVGQmFrSXNSMEZCTUVKc1FpeEpRVUU1UWp0QlFVTkJUeXh2UWtGQlNWUXNTMEZCU3pKQ0xGVkJRVlZPTEUxQlFXWXNSMEZCZDBKcVFpeEpRVUUxUWp0QlFVTklPenRCUVVWRUxHZENRVUZKZDBJc1VVRkJVU3hMUVVGTFF5eE5RVUZxUWp0QlFVTkJSQ3hyUWtGQlRTeERRVUZPTEVsQlFWZDBRaXhEUVVGWU8wRkJRMEZ6UWl4clFrRkJUU3hEUVVGT0xFbEJRVmR5UWl4RFFVRllPMEZCUTBGeFFpeHJRa0ZCVFN4RFFVRk9MRWxCUVZkd1FpeERRVUZZTzBGQlEwRnZRaXhyUWtGQlRTeERRVUZPTEVsQlFWZHVRaXhEUVVGWU8wRkJRMEVzYVVKQlFVdHhRaXhuUWtGQlRDeERRVUZ6UW1wRUxFMUJRWFJDTzBGQlEwZzdPenM3UlVFMVJEaERhMFFzY1VJN08ydENRVUU1UW01RUxIRkNJaXdpWm1sc1pTSTZJbk5wYlhCc1pTNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzRnUTI5d2VYSnBaMmgwSUNoaktTQXlNREUzTFRJd01UZ2dXR2xoYldWdUlGbGhhbWtnVTI5bWRIZGhjbVVnUTI4dUxDQk1kR1F1WEc1Y2JpQm9kSFJ3Y3pvdkwzZDNkeTVqYjJOdmN5NWpiMjB2WEc1Y2JpQlFaWEp0YVhOemFXOXVJR2x6SUdobGNtVmllU0JuY21GdWRHVmtMQ0JtY21WbElHOW1JR05vWVhKblpTd2dkRzhnWVc1NUlIQmxjbk52YmlCdlluUmhhVzVwYm1jZ1lTQmpiM0I1WEc0Z2IyWWdkR2hwY3lCemIyWjBkMkZ5WlNCaGJtUWdZWE56YjJOcFlYUmxaQ0JsYm1kcGJtVWdjMjkxY21ObElHTnZaR1VnS0hSb1pTQmNJbE52Wm5SM1lYSmxYQ0lwTENCaElHeHBiV2wwWldRc1hHNGdkMjl5YkdSM2FXUmxMQ0J5YjNsaGJIUjVMV1p5WldVc0lHNXZiaTFoYzNOcFoyNWhZbXhsTENCeVpYWnZZMkZpYkdVZ1lXNWtJRzV2YmkxbGVHTnNkWE5wZG1VZ2JHbGpaVzV6WlZ4dUlIUnZJSFZ6WlNCRGIyTnZjeUJEY21WaGRHOXlJSE52YkdWc2VTQjBieUJrWlhabGJHOXdJR2RoYldWeklHOXVJSGx2ZFhJZ2RHRnlaMlYwSUhCc1lYUm1iM0p0Y3k0Z1dXOTFJSE5vWVd4c1hHNGdibTkwSUhWelpTQkRiMk52Y3lCRGNtVmhkRzl5SUhOdlpuUjNZWEpsSUdadmNpQmtaWFpsYkc5d2FXNW5JRzkwYUdWeUlITnZablIzWVhKbElHOXlJSFJ2YjJ4eklIUm9ZWFFuYzF4dUlIVnpaV1FnWm05eUlHUmxkbVZzYjNCcGJtY2daMkZ0WlhNdUlGbHZkU0JoY21VZ2JtOTBJR2R5WVc1MFpXUWdkRzhnY0hWaWJHbHphQ3dnWkdsemRISnBZblYwWlN4Y2JpQnpkV0pzYVdObGJuTmxMQ0JoYm1RdmIzSWdjMlZzYkNCamIzQnBaWE1nYjJZZ1EyOWpiM01nUTNKbFlYUnZjaTVjYmx4dUlGUm9aU0J6YjJaMGQyRnlaU0J2Y2lCMGIyOXNjeUJwYmlCMGFHbHpJRXhwWTJWdWMyVWdRV2R5WldWdFpXNTBJR0Z5WlNCc2FXTmxibk5sWkN3Z2JtOTBJSE52YkdRdVhHNGdXR2xoYldWdUlGbGhhbWtnVTI5bWRIZGhjbVVnUTI4dUxDQk1kR1F1SUhKbGMyVnlkbVZ6SUdGc2JDQnlhV2RvZEhNZ2JtOTBJR1Y0Y0hKbGMzTnNlU0JuY21GdWRHVmtJSFJ2SUhsdmRTNWNibHh1SUZSSVJTQlRUMFpVVjBGU1JTQkpVeUJRVWs5V1NVUkZSQ0JjSWtGVElFbFRYQ0lzSUZkSlZFaFBWVlFnVjBGU1VrRk9WRmtnVDBZZ1FVNVpJRXRKVGtRc0lFVllVRkpGVTFNZ1QxSmNiaUJKVFZCTVNVVkVMQ0JKVGtOTVZVUkpUa2NnUWxWVUlFNVBWQ0JNU1UxSlZFVkVJRlJQSUZSSVJTQlhRVkpTUVU1VVNVVlRJRTlHSUUxRlVrTklRVTVVUVVKSlRFbFVXU3hjYmlCR1NWUk9SVk5USUVaUFVpQkJJRkJCVWxSSlExVk1RVklnVUZWU1VFOVRSU0JCVGtRZ1RrOU9TVTVHVWtsT1IwVk5SVTVVTGlCSlRpQk9UeUJGVmtWT1ZDQlRTRUZNVENCVVNFVmNiaUJCVlZSSVQxSlRJRTlTSUVOUFVGbFNTVWRJVkNCSVQweEVSVkpUSUVKRklFeEpRVUpNUlNCR1QxSWdRVTVaSUVOTVFVbE5MQ0JFUVUxQlIwVlRJRTlTSUU5VVNFVlNYRzRnVEVsQlFrbE1TVlJaTENCWFNFVlVTRVZTSUVsT0lFRk9JRUZEVkVsUFRpQlBSaUJEVDA1VVVrRkRWQ3dnVkU5U1ZDQlBVaUJQVkVoRlVsZEpVMFVzSUVGU1NWTkpUa2NnUmxKUFRTeGNiaUJQVlZRZ1QwWWdUMUlnU1U0Z1EwOU9Ua1ZEVkVsUFRpQlhTVlJJSUZSSVJTQlRUMFpVVjBGU1JTQlBVaUJVU0VVZ1ZWTkZJRTlTSUU5VVNFVlNJRVJGUVV4SlRrZFRJRWxPWEc0Z1ZFaEZJRk5QUmxSWFFWSkZMbHh1SUNvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3ZYRzVjYm1sdGNHOXlkQ0JCYzNObGJXSnNaWEl5UkNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5aGMzTmxiV0pzWlhJdE1tUW5PMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QlRhVzF3YkdWVGNISnBkR1ZCYzNObGJXSnNaWElnWlhoMFpXNWtjeUJCYzNObGJXSnNaWEl5UkNCN1hHNGdJQ0FnZFhCa1lYUmxVbVZ1WkdWeVJHRjBZU0FvYzNCeWFYUmxLU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQm1jbUZ0WlNBOUlITndjbWwwWlM1ZmMzQnlhWFJsUm5KaGJXVTdYRzRnSUNBZ0lDQWdJR2xtSUNnaFpuSmhiV1VwSUhKbGRIVnlianRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbkJoWTJ0VWIwUjVibUZ0YVdOQmRHeGhjeWh6Y0hKcGRHVXNJR1p5WVcxbEtUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2MzQnlhWFJsTGw5MlpYSjBjMFJwY25SNUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblZ3WkdGMFpWVldjeWh6Y0hKcGRHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUxY0dSaGRHVldaWEowY3loemNISnBkR1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjM0J5YVhSbExsOTJaWEowYzBScGNuUjVJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQjFjR1JoZEdWVlZuTWdLSE53Y21sMFpTa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2RYWWdQU0J6Y0hKcGRHVXVYM053Y21sMFpVWnlZVzFsTG5WMk8xeHVJQ0FnSUNBZ0lDQnNaWFFnZFhaUFptWnpaWFFnUFNCMGFHbHpMblYyVDJabWMyVjBPMXh1SUNBZ0lDQWdJQ0JzWlhRZ1pteHZZWFJ6VUdWeVZtVnlkQ0E5SUhSb2FYTXVabXh2WVhSelVHVnlWbVZ5ZER0Y2JpQWdJQ0FnSUNBZ2JHVjBJSFpsY25SeklEMGdkR2hwY3k1ZmNtVnVaR1Z5UkdGMFlTNTJSR0YwWVhOYk1GMDdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnTkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYzNKalQyWm1jMlYwSUQwZ2FTQXFJREk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWkhOMFQyWm1jMlYwSUQwZ1pteHZZWFJ6VUdWeVZtVnlkQ0FxSUdrZ0t5QjFkazltWm5ObGREdGNiaUFnSUNBZ0lDQWdJQ0FnSUhabGNuUnpXMlJ6ZEU5bVpuTmxkRjBnUFNCMWRsdHpjbU5QWm1aelpYUmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtVnlkSE5iWkhOMFQyWm1jMlYwSUNzZ01WMGdQU0IxZGx0emNtTlBabVp6WlhRZ0t5QXhYVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSFZ3WkdGMFpWWmxjblJ6SUNoemNISnBkR1VwSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJRzV2WkdVZ1BTQnpjSEpwZEdVdWJtOWtaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHTjNJRDBnYm05a1pTNTNhV1IwYUN3Z1kyZ2dQU0J1YjJSbExtaGxhV2RvZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0Z3Y0hnZ1BTQnViMlJsTG1GdVkyaHZjbGdnS2lCamR5d2dZWEJ3ZVNBOUlHNXZaR1V1WVc1amFHOXlXU0FxSUdOb0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnYkN3Z1lpd2djaXdnZER0Y2JpQWdJQ0FnSUNBZ2FXWWdLSE53Y21sMFpTNTBjbWx0S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzSUQwZ0xXRndjSGc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmlJRDBnTFdGd2NIazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeUlEMGdZM2NnTFNCaGNIQjRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RDQTlJR05vSUMwZ1lYQndlVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JtY21GdFpTQTlJSE53Y21sMFpTNXpjSEpwZEdWR2NtRnRaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2ZHlBOUlHWnlZVzFsTGw5dmNtbG5hVzVoYkZOcGVtVXVkMmxrZEdnc0lHOW9JRDBnWm5KaGJXVXVYMjl5YVdkcGJtRnNVMmw2WlM1b1pXbG5hSFFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY25jZ1BTQm1jbUZ0WlM1ZmNtVmpkQzUzYVdSMGFDd2djbWdnUFNCbWNtRnRaUzVmY21WamRDNW9aV2xuYUhRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IyWm1jMlYwSUQwZ1puSmhiV1V1WDI5bVpuTmxkQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WTJGc1pWZ2dQU0JqZHlBdklHOTNMQ0J6WTJGc1pWa2dQU0JqYUNBdklHOW9PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSFJ5YVcxTVpXWjBJRDBnYjJabWMyVjBMbmdnS3lBb2IzY2dMU0J5ZHlrZ0x5QXlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSFJ5YVcxU2FXZG9kQ0E5SUc5bVpuTmxkQzU0SUMwZ0tHOTNJQzBnY25jcElDOGdNanRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IwY21sdFFtOTBkRzl0SUQwZ2IyWm1jMlYwTG5rZ0t5QW9iMmdnTFNCeWFDa2dMeUF5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhSeWFXMVViM0FnUFNCdlptWnpaWFF1ZVNBdElDaHZhQ0F0SUhKb0tTQXZJREk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNJRDBnZEhKcGJVeGxablFnS2lCelkyRnNaVmdnTFNCaGNIQjRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lpQTlJSFJ5YVcxQ2IzUjBiMjBnS2lCelkyRnNaVmtnTFNCaGNIQjVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NpQTlJR04zSUNzZ2RISnBiVkpwWjJoMElDb2djMk5oYkdWWUlDMGdZWEJ3ZUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFFnUFNCamFDQXJJSFJ5YVcxVWIzQWdLaUJ6WTJGc1pWa2dMU0JoY0hCNU8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYkdWMElHeHZZMkZzSUQwZ2RHaHBjeTVmYkc5allXdzdYRzRnSUNBZ0lDQWdJR3h2WTJGc1d6QmRJRDBnYkR0Y2JpQWdJQ0FnSUNBZ2JHOWpZV3hiTVYwZ1BTQmlPMXh1SUNBZ0lDQWdJQ0JzYjJOaGJGc3lYU0E5SUhJN1hHNGdJQ0FnSUNBZ0lHeHZZMkZzV3pOZElEMGdkRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTFjR1JoZEdWWGIzSnNaRlpsY25SektITndjbWwwWlNrN1hHNGdJQ0FnZlZ4dWZWeHVJbDE5Il19