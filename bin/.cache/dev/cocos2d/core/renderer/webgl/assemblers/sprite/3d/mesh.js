(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/sprite/3d/mesh.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var Assembler3D = require('../../../../assembler-3d');
        var MeshAssembler = require('../2d/mesh');
        var vec3 = cc.vmath.vec3;
        var vec3_temp = cc.v3();
        var MeshAssembler3D = function (_MeshAssembler) {
            _inherits(MeshAssembler3D, _MeshAssembler);
            function MeshAssembler3D() {
                _classCallCheck(this, MeshAssembler3D);
                return _possibleConstructorReturn(this, (MeshAssembler3D.__proto__ || Object.getPrototypeOf(MeshAssembler3D)).apply(this, arguments));
            }
            return MeshAssembler3D;
        }(MeshAssembler);
        exports.default = MeshAssembler3D;
        cc.js.mixin(MeshAssembler3D.prototype, Assembler3D, {
            updateWorldVerts: function updateWorldVerts(comp) {
                var matrix = comp.node._worldMatrix;
                var local = this._local;
                var world = this._renderData.vDatas[0];
                var floatsPerVert = this.floatsPerVert;
                for (var i = 0, l = local.length / 2; i < l; i++) {
                    vec3.set(vec3_temp, local[i * 2], local[i * 2 + 1], 0);
                    vec3.transformMat4(vec3_temp, vec3_temp, matrix);
                    var dstOffset = floatsPerVert * i;
                    world[dstOffset] = vec3_temp.x;
                    world[dstOffset + 1] = vec3_temp.y;
                    world[dstOffset + 2] = vec3_temp.z;
                }
            }
        });
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,