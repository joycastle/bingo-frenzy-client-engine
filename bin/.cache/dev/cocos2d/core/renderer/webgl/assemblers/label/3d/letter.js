(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/label/3d/letter.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var Assembler3D = require('../../../../assembler-3d');
        var WebglLetterFontAssembler = require('../2d/letter');
        var WebglLetterFontAssembler3D = function (_WebglLetterFontAssem) {
            _inherits(WebglLetterFontAssembler3D, _WebglLetterFontAssem);
            function WebglLetterFontAssembler3D() {
                _classCallCheck(this, WebglLetterFontAssembler3D);
                return _possibleConstructorReturn(this, (WebglLetterFontAssembler3D.__proto__ || Object.getPrototypeOf(WebglLetterFontAssembler3D)).apply(this, arguments));
            }
            return WebglLetterFontAssembler3D;
        }(WebglLetterFontAssembler);
        exports.default = WebglLetterFontAssembler3D;
        cc.js.mixin(WebglLetterFontAssembler3D.prototype, Assembler3D);
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,