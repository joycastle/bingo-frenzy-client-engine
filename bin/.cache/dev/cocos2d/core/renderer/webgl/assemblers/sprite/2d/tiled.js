(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/sprite/2d/tiled.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _assembler2d = require('../../../../assembler-2d');
        var _assembler2d2 = _interopRequireDefault(_assembler2d);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var TiledAssembler = function (_Assembler2D) {
            _inherits(TiledAssembler, _Assembler2D);
            function TiledAssembler() {
                _classCallCheck(this, TiledAssembler);
                return _possibleConstructorReturn(this, (TiledAssembler.__proto__ || Object.getPrototypeOf(TiledAssembler)).apply(this, arguments));
            }
            _createClass(TiledAssembler, [
                {
                    key: 'initData',
                    value: function initData(sprite) {
                        this.verticesCount = 0;
                        this.contentWidth = 0;
                        this.contentHeight = 0;
                        this.rectWidth = 0;
                        this.rectHeight = 0;
                        this.hRepeat = 0;
                        this.vRepeat = 0;
                        this.row = 0;
                        this.col = 0;
                        this._renderData.createFlexData(0, 4, 6, this.getVfmt());
                        this._updateIndices();
                    }
                },
                {
                    key: 'initLocal',
                    value: function initLocal() {
                        this._local = {
                            x: [],
                            y: []
                        };
                    }
                },
                {
                    key: '_updateIndices',
                    value: function _updateIndices() {
                        var iData = this._renderData.iDatas[0];
                        for (var i = 0, vid = 0, l = iData.length; i < l; i += 6, vid += 4) {
                            iData[i] = vid;
                            iData[i + 1] = vid + 1;
                            iData[i + 2] = vid + 2;
                            iData[i + 3] = vid + 1;
                            iData[i + 4] = vid + 3;
                            iData[i + 5] = vid + 2;
                        }
                    }
                },
                {
                    key: 'updateRenderData',
                    value: function updateRenderData(sprite) {
                        var frame = sprite._spriteFrame;
                        if (!frame)
                            return;
                        this.packToDynamicAtlas(sprite, frame);
                        var node = sprite.node;
                        var contentWidth = this.contentWidth = Math.abs(node.width);
                        var contentHeight = this.contentHeight = Math.abs(node.height);
                        var rect = frame._rect;
                        var rectWidth = this.rectWidth = rect.width;
                        var rectHeight = this.rectHeight = rect.height;
                        var hRepeat = this.hRepeat = contentWidth / rectWidth;
                        var vRepeat = this.vRepeat = contentHeight / rectHeight;
                        var row = this.row = Math.ceil(vRepeat);
                        var col = this.col = Math.ceil(hRepeat);
                        var count = row * col;
                        this.verticesCount = count * 4;
                        this.indicesCount = count * 6;
                        var renderData = this._renderData;
                        var flexBuffer = renderData._flexBuffer;
                        if (flexBuffer.reserve(this.verticesCount, this.indicesCount)) {
                            this._updateIndices();
                            this.updateColor(sprite);
                        }
                        flexBuffer.used(this.verticesCount, this.indicesCount);
                        if (sprite._vertsDirty) {
                            this.updateUVs(sprite);
                            this.updateVerts(sprite);
                            sprite._vertsDirty = false;
                        }
                    }
                },
                {
                    key: 'updateVerts',
                    value: function updateVerts(sprite) {
                        var node = sprite.node, appx = node.anchorX * node.width, appy = node.anchorY * node.height;
                        var row = this.row, col = this.col, rectWidth = this.rectWidth, rectHeight = this.rectHeight, contentWidth = this.contentWidth, contentHeight = this.contentHeight;
                        var _local = this._local, x = _local.x, y = _local.y;
                        x.length = y.length = 0;
                        for (var i = 0; i <= col; ++i) {
                            x[i] = Math.min(rectWidth * i, contentWidth) - appx;
                        }
                        for (var _i = 0; _i <= row; ++_i) {
                            y[_i] = Math.min(rectHeight * _i, contentHeight) - appy;
                        }
                        this.updateWorldVerts(sprite);
                    }
                },
                {
                    key: 'updateWorldVerts',
                    value: function updateWorldVerts(sprite) {
                        var renderData = this._renderData;
                        var local = this._local;
                        var localX = local.x, localY = local.y;
                        var world = renderData.vDatas[0];
                        var row = this.row, col = this.col;
                        var matrix = sprite.node._worldMatrix;
                        var matrixm = matrix.m;
                        var a = matrixm[0], b = matrixm[1], c = matrixm[4], d = matrixm[5], tx = matrixm[12], ty = matrixm[13];
                        var x = void 0, x1 = void 0, y = void 0, y1 = void 0;
                        var floatsPerVert = this.floatsPerVert;
                        var vertexOffset = 0;
                        for (var yindex = 0, ylength = row; yindex < ylength; ++yindex) {
                            y = localY[yindex];
                            y1 = localY[yindex + 1];
                            for (var xindex = 0, xlength = col; xindex < xlength; ++xindex) {
                                x = localX[xindex];
                                x1 = localX[xindex + 1];
                                world[vertexOffset] = x * a + y * c + tx;
                                world[vertexOffset + 1] = x * b + y * d + ty;
                                vertexOffset += floatsPerVert;
                                world[vertexOffset] = x1 * a + y * c + tx;
                                world[vertexOffset + 1] = x1 * b + y * d + ty;
                                vertexOffset += floatsPerVert;
                                world[vertexOffset] = x * a + y1 * c + tx;
                                world[vertexOffset + 1] = x * b + y1 * d + ty;
                                vertexOffset += floatsPerVert;
                                world[vertexOffset] = x1 * a + y1 * c + tx;
                                world[vertexOffset + 1] = x1 * b + y1 * d + ty;
                                vertexOffset += floatsPerVert;
                            }
                        }
                    }
                },
                {
                    key: 'updateUVs',
                    value: function updateUVs(sprite) {
                        var verts = this._renderData.vDatas[0];
                        if (!verts)
                            return;
                        var row = this.row, col = this.col, hRepeat = this.hRepeat, vRepeat = this.vRepeat;
                        var uv = sprite.spriteFrame.uv;
                        var rotated = sprite.spriteFrame._rotated;
                        var floatsPerVert = this.floatsPerVert, uvOffset = this.uvOffset;
                        for (var yindex = 0, ylength = row; yindex < ylength; ++yindex) {
                            var coefv = Math.min(1, vRepeat - yindex);
                            for (var xindex = 0, xlength = col; xindex < xlength; ++xindex) {
                                var coefu = Math.min(1, hRepeat - xindex);
                                if (rotated) {
                                    verts[uvOffset] = uv[0];
                                    verts[uvOffset + 1] = uv[1];
                                    uvOffset += floatsPerVert;
                                    verts[uvOffset] = uv[0];
                                    verts[uvOffset + 1] = uv[1] + (uv[7] - uv[1]) * coefu;
                                    uvOffset += floatsPerVert;
                                    verts[uvOffset] = uv[0] + (uv[6] - uv[0]) * coefv;
                                    verts[uvOffset + 1] = uv[1];
                                    uvOffset += floatsPerVert;
                                    verts[uvOffset] = verts[uvOffset - floatsPerVert];
                                    verts[uvOffset + 1] = verts[uvOffset + 1 - floatsPerVert * 2];
                                    uvOffset += floatsPerVert;
                                } else {
                                    verts[uvOffset] = uv[0];
                                    verts[uvOffset + 1] = uv[1];
                                    uvOffset += floatsPerVert;
                                    verts[uvOffset] = uv[0] + (uv[6] - uv[0]) * coefu;
                                    verts[uvOffset + 1] = uv[1];
                                    uvOffset += floatsPerVert;
                                    verts[uvOffset] = uv[0];
                                    verts[uvOffset + 1] = uv[1] + (uv[7] - uv[1]) * coefv;
                                    uvOffset += floatsPerVert;
                                    verts[uvOffset] = verts[uvOffset - floatsPerVert * 2];
                                    verts[uvOffset + 1] = verts[uvOffset + 1 - floatsPerVert];
                                    uvOffset += floatsPerVert;
                                }
                            }
                        }
                    }
                }
            ]);
            return TiledAssembler;
        }(_assembler2d2.default);
        exports.default = TiledAssembler;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,