(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/label/index.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _assembler = require('../../../assembler');
        var _assembler2 = _interopRequireDefault(_assembler);
        var _CCLabel = require('../../../../components/CCLabel');
        var _CCLabel2 = _interopRequireDefault(_CCLabel);
        var _ttf = require('./2d/ttf');
        var _ttf2 = _interopRequireDefault(_ttf);
        var _bmfont = require('./2d/bmfont');
        var _bmfont2 = _interopRequireDefault(_bmfont);
        var _outlineBmfont = require('./2d/outline-bmfont');
        var _outlineBmfont2 = _interopRequireDefault(_outlineBmfont);
        var _letter = require('./2d/letter');
        var _letter2 = _interopRequireDefault(_letter);
        var _ttf3 = require('./3d/ttf');
        var _ttf4 = _interopRequireDefault(_ttf3);
        var _bmfont3 = require('./3d/bmfont');
        var _bmfont4 = _interopRequireDefault(_bmfont3);
        var _outlineBmfont3 = require('./3d/outline-bmfont');
        var _outlineBmfont4 = _interopRequireDefault(_outlineBmfont3);
        var _letter3 = require('./3d/letter');
        var _letter4 = _interopRequireDefault(_letter3);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        _CCLabel2.default._canvasPool = {
            pool: [],
            get: function get() {
                var data = this.pool.pop();
                if (!data) {
                    var canvas = document.createElement('canvas');
                    var context = canvas.getContext('2d');
                    data = {
                        canvas: canvas,
                        context: context
                    };
                }
                return data;
            },
            put: function put(canvas) {
                if (this.pool.length >= 32) {
                    return;
                }
                this.pool.push(canvas);
            }
        };
        _assembler2.default.register(cc.Label, {
            getConstructor: function getConstructor(label) {
                var is3DNode = label.node.is3DNode;
                var ctor = is3DNode ? _ttf4.default : _ttf2.default;
                if (label.font instanceof cc.BitmapFont) {
                    if (label._outline) {
                        ctor = is3DNode ? _outlineBmfont4.default : _outlineBmfont2.default;
                    } else {
                        ctor = is3DNode ? _bmfont4.default : _bmfont2.default;
                    }
                } else if (label.cacheMode === _CCLabel2.default.CacheMode.CHAR) {
                    if (cc.sys.browserType === cc.sys.BROWSER_TYPE_WECHAT_GAME_SUB) {
                        cc.warn('sorry, subdomain does not support CHAR mode currently!');
                    } else {
                        ctor = is3DNode ? _letter4.default : _letter2.default;
                    }
                }
                return ctor;
            },
            TTF: _ttf2.default,
            Bmfont: _bmfont2.default,
            OutlineBmfont: _outlineBmfont2.default,
            Letter: _letter2.default,
            TTF3D: _ttf4.default,
            Bmfont3D: _bmfont4.default,
            OutlineBmfont3D: _outlineBmfont4.default,
            Letter3D: _letter4.default
        });
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,