(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/sprite/2d/bar-filled.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _assembler2d = require('../../../../assembler-2d');
        var _assembler2d2 = _interopRequireDefault(_assembler2d);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var Sprite = require('../../../../../components/CCSprite');
        var FillType = Sprite.FillType;
        var BarFilledAssembler = function (_Assembler2D) {
            _inherits(BarFilledAssembler, _Assembler2D);
            function BarFilledAssembler() {
                _classCallCheck(this, BarFilledAssembler);
                return _possibleConstructorReturn(this, (BarFilledAssembler.__proto__ || Object.getPrototypeOf(BarFilledAssembler)).apply(this, arguments));
            }
            _createClass(BarFilledAssembler, [
                {
                    key: 'updateRenderData',
                    value: function updateRenderData(sprite) {
                        var frame = sprite._spriteFrame;
                        if (!frame)
                            return;
                        this.packToDynamicAtlas(sprite, frame);
                        if (!sprite._vertsDirty) {
                            return;
                        }
                        var fillStart = sprite._fillStart;
                        var fillRange = sprite._fillRange;
                        if (fillRange < 0) {
                            fillStart += fillRange;
                            fillRange = -fillRange;
                        }
                        fillRange = fillStart + fillRange;
                        fillStart = fillStart > 1 ? 1 : fillStart;
                        fillStart = fillStart < 0 ? 0 : fillStart;
                        fillRange = fillRange > 1 ? 1 : fillRange;
                        fillRange = fillRange < 0 ? 0 : fillRange;
                        fillRange = fillRange - fillStart;
                        fillRange = fillRange < 0 ? 0 : fillRange;
                        var fillEnd = fillStart + fillRange;
                        fillEnd = fillEnd > 1 ? 1 : fillEnd;
                        this.updateUVs(sprite, fillStart, fillEnd);
                        this.updateVerts(sprite, fillStart, fillEnd);
                        sprite._vertsDirty = false;
                    }
                },
                {
                    key: 'updateUVs',
                    value: function updateUVs(sprite, fillStart, fillEnd) {
                        var spriteFrame = sprite._spriteFrame;
                        var atlasWidth = spriteFrame._texture.width;
                        var atlasHeight = spriteFrame._texture.height;
                        var textureRect = spriteFrame._rect;
                        var ul = void 0, vb = void 0, ur = void 0, vt = void 0;
                        var quadUV0 = void 0, quadUV1 = void 0, quadUV2 = void 0, quadUV3 = void 0, quadUV4 = void 0, quadUV5 = void 0, quadUV6 = void 0, quadUV7 = void 0;
                        if (spriteFrame._rotated) {
                            ul = textureRect.x / atlasWidth;
                            vb = (textureRect.y + textureRect.width) / atlasHeight;
                            ur = (textureRect.x + textureRect.height) / atlasWidth;
                            vt = textureRect.y / atlasHeight;
                            quadUV0 = quadUV2 = ul;
                            quadUV4 = quadUV6 = ur;
                            quadUV3 = quadUV7 = vb;
                            quadUV1 = quadUV5 = vt;
                        } else {
                            ul = textureRect.x / atlasWidth;
                            vb = (textureRect.y + textureRect.height) / atlasHeight;
                            ur = (textureRect.x + textureRect.width) / atlasWidth;
                            vt = textureRect.y / atlasHeight;
                            quadUV0 = quadUV4 = ul;
                            quadUV2 = quadUV6 = ur;
                            quadUV1 = quadUV3 = vb;
                            quadUV5 = quadUV7 = vt;
                        }
                        var verts = this._renderData.vDatas[0];
                        var uvOffset = this.uvOffset;
                        var floatsPerVert = this.floatsPerVert;
                        switch (sprite._fillType) {
                        case FillType.HORIZONTAL:
                            verts[uvOffset] = quadUV0 + (quadUV2 - quadUV0) * fillStart;
                            verts[uvOffset + 1] = quadUV1 + (quadUV3 - quadUV1) * fillStart;
                            verts[uvOffset + floatsPerVert] = quadUV0 + (quadUV2 - quadUV0) * fillEnd;
                            verts[uvOffset + floatsPerVert + 1] = quadUV1 + (quadUV3 - quadUV1) * fillEnd;
                            verts[uvOffset + floatsPerVert * 2] = quadUV4 + (quadUV6 - quadUV4) * fillStart;
                            verts[uvOffset + floatsPerVert * 2 + 1] = quadUV5 + (quadUV7 - quadUV5) * fillStart;
                            verts[uvOffset + floatsPerVert * 3] = quadUV4 + (quadUV6 - quadUV4) * fillEnd;
                            verts[uvOffset + floatsPerVert * 3 + 1] = quadUV5 + (quadUV7 - quadUV5) * fillEnd;
                            break;
                        case FillType.VERTICAL:
                            verts[uvOffset] = quadUV0 + (quadUV4 - quadUV0) * fillStart;
                            verts[uvOffset + 1] = quadUV1 + (quadUV5 - quadUV1) * fillStart;
                            verts[uvOffset + floatsPerVert] = quadUV2 + (quadUV6 - quadUV2) * fillStart;
                            verts[uvOffset + floatsPerVert + 1] = quadUV3 + (quadUV7 - quadUV3) * fillStart;
                            verts[uvOffset + floatsPerVert * 2] = quadUV0 + (quadUV4 - quadUV0) * fillEnd;
                            verts[uvOffset + floatsPerVert * 2 + 1] = quadUV1 + (quadUV5 - quadUV1) * fillEnd;
                            verts[uvOffset + floatsPerVert * 3] = quadUV2 + (quadUV6 - quadUV2) * fillEnd;
                            verts[uvOffset + floatsPerVert * 3 + 1] = quadUV3 + (quadUV7 - quadUV3) * fillEnd;
                            break;
                        default:
                            cc.errorID(2626);
                            break;
                        }
                    }
                },
                {
                    key: 'updateVerts',
                    value: function updateVerts(sprite, fillStart, fillEnd) {
                        var node = sprite.node, width = node.width, height = node.height, appx = node.anchorX * width, appy = node.anchorY * height;
                        var l = -appx, b = -appy, r = width - appx, t = height - appy;
                        var progressStart = void 0, progressEnd = void 0;
                        switch (sprite._fillType) {
                        case FillType.HORIZONTAL:
                            progressStart = l + (r - l) * fillStart;
                            progressEnd = l + (r - l) * fillEnd;
                            l = progressStart;
                            r = progressEnd;
                            break;
                        case FillType.VERTICAL:
                            progressStart = b + (t - b) * fillStart;
                            progressEnd = b + (t - b) * fillEnd;
                            b = progressStart;
                            t = progressEnd;
                            break;
                        default:
                            cc.errorID(2626);
                            break;
                        }
                        var local = this._local;
                        local[0] = l;
                        local[1] = b;
                        local[2] = r;
                        local[3] = t;
                        this.updateWorldVerts(sprite);
                    }
                }
            ]);
            return BarFilledAssembler;
        }(_assembler2d2.default);
        exports.default = BarFilledAssembler;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,