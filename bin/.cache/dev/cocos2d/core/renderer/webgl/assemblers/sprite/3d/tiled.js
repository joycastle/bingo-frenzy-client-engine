(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/sprite/3d/tiled.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var Assembler3D = require('../../../../assembler-3d');
        var TiledAssembler = require('../2d/tiled');
        var vec3 = cc.vmath.vec3;
        var vec3_temps = [];
        for (var i = 0; i < 4; i++) {
            vec3_temps.push(vec3.create());
        }
        var TiledAssembler3D = function (_TiledAssembler) {
            _inherits(TiledAssembler3D, _TiledAssembler);
            function TiledAssembler3D() {
                _classCallCheck(this, TiledAssembler3D);
                return _possibleConstructorReturn(this, (TiledAssembler3D.__proto__ || Object.getPrototypeOf(TiledAssembler3D)).apply(this, arguments));
            }
            return TiledAssembler3D;
        }(TiledAssembler);
        exports.default = TiledAssembler3D;
        cc.js.mixin(TiledAssembler3D.prototype, Assembler3D, {
            updateWorldVerts: function updateWorldVerts(sprite) {
                var local = this._local;
                var localX = local.x, localY = local.y;
                var world = this._renderData.vDatas[0];
                var row = this.row, col = this.col;
                var matrix = sprite.node._worldMatrix;
                var x = void 0, x1 = void 0, y = void 0, y1 = void 0;
                var vertexOffset = 0;
                for (var yindex = 0, ylength = row; yindex < ylength; ++yindex) {
                    y = localY[yindex];
                    y1 = localY[yindex + 1];
                    for (var xindex = 0, xlength = col; xindex < xlength; ++xindex) {
                        x = localX[xindex];
                        x1 = localX[xindex + 1];
                        vec3.set(vec3_temps[0], x, y, 0);
                        vec3.set(vec3_temps[1], x1, y, 0);
                        vec3.set(vec3_temps[2], x, y1, 0);
                        vec3.set(vec3_temps[3], x1, y1, 0);
                        for (var _i = 0; _i < 4; _i++) {
                            var vec3_temp = vec3_temps[_i];
                            vec3.transformMat4(vec3_temp, vec3_temp, matrix);
                            var offset = _i * 6;
                            world[vertexOffset + offset] = vec3_temp.x;
                            world[vertexOffset + offset + 1] = vec3_temp.y;
                            world[vertexOffset + offset + 2] = vec3_temp.z;
                        }
                        vertexOffset += 24;
                    }
                }
            }
        });
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,