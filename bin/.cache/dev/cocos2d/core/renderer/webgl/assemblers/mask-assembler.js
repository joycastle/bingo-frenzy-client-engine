(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/mask-assembler.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.MaskAssembler = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _assembler = require('../../assembler');
        var _assembler2 = _interopRequireDefault(_assembler);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var Mask = require('../../../components/CCMask');
        var RenderFlow = require('../../render-flow');
        var SimpleSpriteAssembler = require('./sprite/2d/simple');
        var GraphicsAssembler = require('./graphics');
        var gfx = require('../../../../renderer/gfx');
        var vfmtPos = require('../vertex-format').vfmtPos;
        var _maxLevel = 8;
        var _maskStack = [];
        function getWriteMask() {
            return 1 << _maskStack.length - 1;
        }
        function getStencilRef() {
            var result = 0;
            for (var i = 0; i < _maskStack.length; ++i) {
                result += 1 << i;
            }
            return result;
        }
        function applyStencil(material, func, failOp, ref, stencilMask, writeMask) {
            var effect = material.effect;
            var zFailOp = gfx.STENCIL_OP_KEEP, zPassOp = gfx.STENCIL_OP_KEEP;
            effect.setStencil(gfx.STENCIL_ENABLE, func, ref, stencilMask, failOp, zFailOp, zPassOp, writeMask);
        }
        function pushMask(mask) {
            if (_maskStack.length + 1 > _maxLevel) {
                cc.errorID(9000, _maxLevel);
            }
            _maskStack.push(mask);
        }
        function exitMask(mask, renderer) {
            if (_maskStack.length === 0) {
                cc.errorID(9001);
            }
            _maskStack.pop();
            if (_maskStack.length === 0) {
                renderer._flushMaterial(mask._exitMaterial);
            } else {
                enableMask(renderer);
            }
        }
        function applyClearMask(mask, renderer) {
            var func = gfx.DS_FUNC_NEVER;
            var ref = getWriteMask();
            var stencilMask = ref;
            var writeMask = ref;
            var failOp = mask.inverted ? gfx.STENCIL_OP_REPLACE : gfx.STENCIL_OP_ZERO;
            applyStencil(mask._clearMaterial, func, failOp, ref, stencilMask, writeMask);
            var buffer = renderer.getBuffer('mesh', vfmtPos);
            var offsetInfo = buffer.request(4, 6);
            var indiceOffset = offsetInfo.indiceOffset, vertexOffset = offsetInfo.byteOffset >> 2, vertexId = offsetInfo.vertexOffset, vbuf = buffer._vData, ibuf = buffer._iData;
            vbuf[vertexOffset++] = -1;
            vbuf[vertexOffset++] = -1;
            vbuf[vertexOffset++] = -1;
            vbuf[vertexOffset++] = 1;
            vbuf[vertexOffset++] = 1;
            vbuf[vertexOffset++] = 1;
            vbuf[vertexOffset++] = 1;
            vbuf[vertexOffset++] = -1;
            ibuf[indiceOffset++] = vertexId;
            ibuf[indiceOffset++] = vertexId + 3;
            ibuf[indiceOffset++] = vertexId + 1;
            ibuf[indiceOffset++] = vertexId + 1;
            ibuf[indiceOffset++] = vertexId + 3;
            ibuf[indiceOffset++] = vertexId + 2;
            renderer.node = renderer._dummyNode;
            renderer.material = mask._clearMaterial;
            renderer._flush();
        }
        function applyAreaMask(mask, renderer) {
            var func = gfx.DS_FUNC_NEVER;
            var ref = getWriteMask();
            var stencilMask = ref;
            var writeMask = ref;
            var failOp = mask.inverted ? gfx.STENCIL_OP_ZERO : gfx.STENCIL_OP_REPLACE;
            applyStencil(mask.sharedMaterials[0], func, failOp, ref, stencilMask, writeMask);
            renderer.material = mask.sharedMaterials[0];
            if (mask._type === Mask.Type.IMAGE_STENCIL) {
                renderer.node = renderer._dummyNode;
                SimpleSpriteAssembler.prototype.fillBuffers.call(mask._assembler, mask, renderer);
                renderer._flush();
            } else {
                renderer.node = mask.node;
                GraphicsAssembler.prototype.fillBuffers.call(mask._graphics._assembler, mask._graphics, renderer);
            }
        }
        function enableMask(renderer) {
            var func = gfx.DS_FUNC_EQUAL;
            var failOp = gfx.STENCIL_OP_KEEP;
            var ref = getStencilRef();
            var stencilMask = ref;
            var writeMask = getWriteMask();
            var mask = _maskStack[_maskStack.length - 1];
            applyStencil(mask._enableMaterial, func, failOp, ref, stencilMask, writeMask);
            renderer._flushMaterial(mask._enableMaterial);
        }
        var MaskAssembler = exports.MaskAssembler = function (_SimpleSpriteAssemble) {
            _inherits(MaskAssembler, _SimpleSpriteAssemble);
            function MaskAssembler() {
                _classCallCheck(this, MaskAssembler);
                return _possibleConstructorReturn(this, (MaskAssembler.__proto__ || Object.getPrototypeOf(MaskAssembler)).apply(this, arguments));
            }
            _createClass(MaskAssembler, [
                {
                    key: 'updateRenderData',
                    value: function updateRenderData(mask) {
                        if (mask._type === Mask.Type.IMAGE_STENCIL) {
                            if (mask.spriteFrame) {
                                SimpleSpriteAssembler.prototype.updateRenderData.call(this, mask);
                            } else {
                                mask.setMaterial(0, null);
                            }
                        } else {
                            mask._graphics.setMaterial(0, mask.sharedMaterials[0]);
                            GraphicsAssembler.prototype.updateRenderData.call(mask._graphics._assembler, mask._graphics, mask._graphics);
                        }
                    }
                },
                {
                    key: 'fillBuffers',
                    value: function fillBuffers(mask, renderer) {
                        if (mask._type !== Mask.Type.IMAGE_STENCIL || mask.spriteFrame) {
                            pushMask(mask);
                            applyClearMask(mask, renderer);
                            applyAreaMask(mask, renderer);
                            enableMask(renderer);
                        }
                        mask.node._renderFlag |= RenderFlow.FLAG_UPDATE_RENDER_DATA;
                    }
                },
                {
                    key: 'postFillBuffers',
                    value: function postFillBuffers(mask, renderer) {
                        if (mask._type !== Mask.Type.IMAGE_STENCIL || mask.spriteFrame) {
                            exitMask(mask, renderer);
                        }
                        mask.node._renderFlag |= RenderFlow.FLAG_UPDATE_RENDER_DATA;
                    }
                }
            ]);
            return MaskAssembler;
        }(SimpleSpriteAssembler);
        ;
        _assembler2.default.register(Mask, MaskAssembler);
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,