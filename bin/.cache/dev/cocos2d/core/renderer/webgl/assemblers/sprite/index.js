(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/sprite/index.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _assembler = require('../../../assembler');
        var _assembler2 = _interopRequireDefault(_assembler);
        var _CCSprite = require('../../../../components/CCSprite');
        var _simple = require('./2d/simple');
        var _simple2 = _interopRequireDefault(_simple);
        var _sliced = require('./2d/sliced');
        var _sliced2 = _interopRequireDefault(_sliced);
        var _tiled = require('./2d/tiled');
        var _tiled2 = _interopRequireDefault(_tiled);
        var _radialFilled = require('./2d/radial-filled');
        var _radialFilled2 = _interopRequireDefault(_radialFilled);
        var _barFilled = require('./2d/bar-filled');
        var _barFilled2 = _interopRequireDefault(_barFilled);
        var _mesh = require('./2d/mesh');
        var _mesh2 = _interopRequireDefault(_mesh);
        var _simple3 = require('./3d/simple');
        var _simple4 = _interopRequireDefault(_simple3);
        var _sliced3 = require('./3d/sliced');
        var _sliced4 = _interopRequireDefault(_sliced3);
        var _tiled3 = require('./3d/tiled');
        var _tiled4 = _interopRequireDefault(_tiled3);
        var _radialFilled3 = require('./3d/radial-filled');
        var _radialFilled4 = _interopRequireDefault(_radialFilled3);
        var _barFilled3 = require('./3d/bar-filled');
        var _barFilled4 = _interopRequireDefault(_barFilled3);
        var _mesh3 = require('./3d/mesh');
        var _mesh4 = _interopRequireDefault(_mesh3);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var ctor = {
            getConstructor: function getConstructor(sprite) {
                var is3DNode = sprite.node.is3DNode;
                var ctor = is3DNode ? _simple4.default : _simple2.default;
                switch (sprite.type) {
                case _CCSprite.Type.SLICED:
                    ctor = is3DNode ? _sliced4.default : _sliced2.default;
                    break;
                case _CCSprite.Type.TILED:
                    ctor = is3DNode ? _tiled4.default : _tiled2.default;
                    break;
                case _CCSprite.Type.FILLED:
                    if (sprite._fillType === _CCSprite.FillType.RADIAL) {
                        ctor = is3DNode ? _radialFilled4.default : _radialFilled2.default;
                    } else {
                        ctor = is3DNode ? _barFilled4.default : _barFilled2.default;
                    }
                    break;
                case _CCSprite.Type.MESH:
                    ctor = is3DNode ? _mesh4.default : _mesh2.default;
                    break;
                }
                return ctor;
            },
            Simple: _simple2.default,
            Sliced: _sliced2.default,
            Tiled: _tiled2.default,
            RadialFilled: _radialFilled2.default,
            BarFilled: _barFilled2.default,
            Mesh: _mesh2.default,
            Simple3D: _simple4.default,
            Sliced3D: _sliced4.default,
            Tiled3D: _tiled4.default,
            RadialFilled3D: _radialFilled4.default,
            BarFilled3D: _barFilled4.default,
            Mesh3D: _mesh4.default
        };
        _assembler2.default.register(cc.Sprite, ctor);
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,