(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/flex-buffer.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var FlexBuffer = function () {
            function FlexBuffer(handler, index, verticesCount, indicesCount, vfmt) {
                _classCallCheck(this, FlexBuffer);
                this._handler = handler;
                this._index = index;
                this._vfmt = vfmt;
                this._verticesBytes = vfmt._bytes;
                this._initVerticesCount = verticesCount;
                this._initIndicesCount = indicesCount;
                this.reset();
            }
            _createClass(FlexBuffer, [
                {
                    key: '_reallocVData',
                    value: function _reallocVData(floatsCount, oldData) {
                        this.vData = new Float32Array(floatsCount);
                        this.uintVData = new Uint32Array(this.vData.buffer);
                        if (oldData) {
                            this.vData.set(oldData);
                        }
                        this._handler.updateMesh(this._index, this.vData, this.iData);
                    }
                },
                {
                    key: '_reallocIData',
                    value: function _reallocIData(indicesCount, oldData) {
                        this.iData = new Uint16Array(indicesCount);
                        if (oldData) {
                            this.iData.set(oldData);
                        }
                        this._handler.updateMesh(this._index, this.vData, this.iData);
                    }
                },
                {
                    key: 'reserve',
                    value: function reserve(verticesCount, indicesCount) {
                        var floatsCount = verticesCount * this._verticesBytes >> 2;
                        var newFloatsCount = this.vData.length;
                        var realloced = false;
                        if (floatsCount > newFloatsCount) {
                            while (newFloatsCount < floatsCount) {
                                newFloatsCount *= 2;
                            }
                            this._reallocVData(newFloatsCount, this.vData);
                            realloced = true;
                        }
                        var newIndicesCount = this.iData.length;
                        if (indicesCount > newIndicesCount) {
                            while (newIndicesCount < indicesCount) {
                                newIndicesCount *= 2;
                            }
                            this._reallocIData(indicesCount, this.iData);
                            realloced = true;
                        }
                        return realloced;
                    }
                },
                {
                    key: 'used',
                    value: function used(verticesCount, indicesCount) {
                        this.usedVertices = verticesCount;
                        this.usedIndices = indicesCount;
                        this.usedVerticesFloats = verticesCount * this._verticesBytes >> 2;
                        this._handler.updateMeshRange(verticesCount, indicesCount);
                    }
                },
                {
                    key: 'reset',
                    value: function reset() {
                        var floatsCount = this._initVerticesCount * this._verticesBytes >> 2;
                        this._reallocVData(floatsCount);
                        this._reallocIData(this._initIndicesCount);
                        this.usedVertices = 0;
                        this.usedVerticesFloats = 0;
                        this.usedIndices = 0;
                    }
                }
            ]);
            return FlexBuffer;
        }();
        exports.default = FlexBuffer;
        cc.FlexBuffer = FlexBuffer;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,