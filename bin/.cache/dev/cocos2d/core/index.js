(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/index.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        require('./platform');
        require('./assets');
        if (!CC_EDITOR || !Editor.isMainProcess) {
            require('./CCNode');
            require('./CCPrivateNode');
            require('./CCScene');
            require('./components');
            require('./graphics');
            require('./collider');
            require('./collider/CCIntersection');
            require('./physics');
            require('./camera/CCCamera');
            require('./geom-utils');
        }
        require('./mesh');
        require('./3d');
        require('./3d/polyfill-3d');
        require('./base-ui/CCWidgetManager');
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIiwiL1VzZXJzL2dhb3lhbmcvV29ya1NwYWNlL2pveWNhc3RsZS9iaW5nby9jbGllbnQvYmluZ28vZW5naW5lL2NvY29zMmQvY29yZS9pbmRleC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiQ0NfRURJVE9SIiwiRWRpdG9yIiwiaXNNYWluUHJvY2VzcyJdLCJtYXBwaW5ncyI6IjtJQUFBLElBQUEsT0FBQSxHQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUEsSUFBQSxPQUFBLE9BQUEsS0FBQSxXQUFBOzs7Ozs7Ozs7Ozs7O1FBMEJBQSxPQUFBQSxDQUFRLFlBQVJBO1FBQ0FBLE9BQUFBLENBQVEsVUFBUkE7UUFFQSxJQUFJLENBQUNDLFNBQUQsSUFBYyxDQUFDQyxNQUFBQSxDQUFPQyxhQUExQixFQUF5QztBQUFBLFlBQ3JDSCxPQUFBQSxDQUFRLFVBQVJBLEVBRHFDO0FBQUEsWUFFckNBLE9BQUFBLENBQVEsaUJBQVJBLEVBRnFDO0FBQUEsWUFHckNBLE9BQUFBLENBQVEsV0FBUkEsRUFIcUM7QUFBQSxZQUtyQ0EsT0FBQUEsQ0FBUSxjQUFSQSxFQUxxQztBQUFBLFlBTXJDQSxPQUFBQSxDQUFRLFlBQVJBLEVBTnFDO0FBQUEsWUFPckNBLE9BQUFBLENBQVEsWUFBUkEsRUFQcUM7QUFBQSxZQVNyQ0EsT0FBQUEsQ0FBUSwyQkFBUkEsRUFUcUM7QUFBQSxZQVVyQ0EsT0FBQUEsQ0FBUSxXQUFSQSxFQVZxQztBQUFBLFlBV3JDQSxPQUFBQSxDQUFRLG1CQUFSQSxFQVhxQztBQUFBLFlBWXJDQSxPQUFBQSxDQUFRLGNBQVJBLEVBWnFDO0FBQUE7UUFlekNBLE9BQUFBLENBQVEsUUFBUkE7UUFDQUEsT0FBQUEsQ0FBUSxNQUFSQTtRQUNBQSxPQUFBQSxDQUFRLGtCQUFSQTtRQUVBQSxPQUFBQSxDQUFRLDJCQUFSQSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gQ29weXJpZ2h0IChjKSAyMDEzLTIwMTYgQ2h1a29uZyBUZWNobm9sb2dpZXMgSW5jLlxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxuXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xuXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxuICB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcbiAgbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xuICB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXG4gIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxuXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxucmVxdWlyZSgnLi9wbGF0Zm9ybScpO1xucmVxdWlyZSgnLi9hc3NldHMnKTtcblxuaWYgKCFDQ19FRElUT1IgfHwgIUVkaXRvci5pc01haW5Qcm9jZXNzKSB7XG4gICAgcmVxdWlyZSgnLi9DQ05vZGUnKTtcbiAgICByZXF1aXJlKCcuL0NDUHJpdmF0ZU5vZGUnKTtcbiAgICByZXF1aXJlKCcuL0NDU2NlbmUnKTtcblxuICAgIHJlcXVpcmUoJy4vY29tcG9uZW50cycpO1xuICAgIHJlcXVpcmUoJy4vZ3JhcGhpY3MnKTtcbiAgICByZXF1aXJlKCcuL2NvbGxpZGVyJyk7XG4gICAgLy8gQ0NJbnRlcnNlY3Rpb24gY2FuIGJlIHVzZWQgc2VwYXJhdGVseS5cbiAgICByZXF1aXJlKCcuL2NvbGxpZGVyL0NDSW50ZXJzZWN0aW9uJyk7XG4gICAgcmVxdWlyZSgnLi9waHlzaWNzJyk7XG4gICAgcmVxdWlyZSgnLi9jYW1lcmEvQ0NDYW1lcmEnKTtcbiAgICByZXF1aXJlKCcuL2dlb20tdXRpbHMnKTtcbn1cblxucmVxdWlyZSgnLi9tZXNoJyk7XG5yZXF1aXJlKCcuLzNkJyk7XG5yZXF1aXJlKCcuLzNkL3BvbHlmaWxsLTNkJyk7XG5cbnJlcXVpcmUoJy4vYmFzZS11aS9DQ1dpZGdldE1hbmFnZXInKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxNiBDaHVrb25nIFRlY2hub2xvZ2llcyBJbmMuXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXG4gIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxuICBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcbiAgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXG5cbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5yZXF1aXJlKCcuL3BsYXRmb3JtJyk7XG5yZXF1aXJlKCcuL2Fzc2V0cycpO1xuXG5pZiAoIUNDX0VESVRPUiB8fCAhRWRpdG9yLmlzTWFpblByb2Nlc3MpIHtcbiAgcmVxdWlyZSgnLi9DQ05vZGUnKTtcbiAgcmVxdWlyZSgnLi9DQ1ByaXZhdGVOb2RlJyk7XG4gIHJlcXVpcmUoJy4vQ0NTY2VuZScpO1xuXG4gIHJlcXVpcmUoJy4vY29tcG9uZW50cycpO1xuICByZXF1aXJlKCcuL2dyYXBoaWNzJyk7XG4gIHJlcXVpcmUoJy4vY29sbGlkZXInKTtcbiAgLy8gQ0NJbnRlcnNlY3Rpb24gY2FuIGJlIHVzZWQgc2VwYXJhdGVseS5cbiAgcmVxdWlyZSgnLi9jb2xsaWRlci9DQ0ludGVyc2VjdGlvbicpO1xuICByZXF1aXJlKCcuL3BoeXNpY3MnKTtcbiAgcmVxdWlyZSgnLi9jYW1lcmEvQ0NDYW1lcmEnKTtcbiAgcmVxdWlyZSgnLi9nZW9tLXV0aWxzJyk7XG59XG5cbnJlcXVpcmUoJy4vbWVzaCcpO1xucmVxdWlyZSgnLi8zZCcpO1xucmVxdWlyZSgnLi8zZC9wb2x5ZmlsbC0zZCcpO1xuXG5yZXF1aXJlKCcuL2Jhc2UtdWkvQ0NXaWRnZXRNYW5hZ2VyJyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbWx1WkdWNExtcHpJbDBzSW01aGJXVnpJanBiSW5KbGNYVnBjbVVpTENKRFExOUZSRWxVVDFJaUxDSkZaR2wwYjNJaUxDSnBjMDFoYVc1UWNtOWpaWE56SWwwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFUQkNRVUVzVVVGQlVTeFpRVUZTTzBGQlEwRkJMRkZCUVZFc1ZVRkJVanM3UVVGRlFTeEpRVUZKTEVOQlFVTkRMRk5CUVVRc1NVRkJZeXhEUVVGRFF5eFBRVUZQUXl4aFFVRXhRaXhGUVVGNVF6dEJRVU55UTBnc1ZVRkJVU3hWUVVGU08wRkJRMEZCTEZWQlFWRXNhVUpCUVZJN1FVRkRRVUVzVlVGQlVTeFhRVUZTT3p0QlFVVkJRU3hWUVVGUkxHTkJRVkk3UVVGRFFVRXNWVUZCVVN4WlFVRlNPMEZCUTBGQkxGVkJRVkVzV1VGQlVqdEJRVU5CTzBGQlEwRkJMRlZCUVZFc01rSkJRVkk3UVVGRFFVRXNWVUZCVVN4WFFVRlNPMEZCUTBGQkxGVkJRVkVzYlVKQlFWSTdRVUZEUVVFc1ZVRkJVU3hqUVVGU08wRkJRMGc3TzBGQlJVUkJMRkZCUVZFc1VVRkJVanRCUVVOQlFTeFJRVUZSTEUxQlFWSTdRVUZEUVVFc1VVRkJVU3hyUWtGQlVqczdRVUZGUVVFc1VVRkJVU3d5UWtGQlVpSXNJbVpwYkdVaU9pSnBibVJsZUM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdRMjl3ZVhKcFoyaDBJQ2hqS1NBeU1ERXpMVEl3TVRZZ1EyaDFhMjl1WnlCVVpXTm9ibTlzYjJkcFpYTWdTVzVqTGx4dUlFTnZjSGx5YVdkb2RDQW9ZeWtnTWpBeE55MHlNREU0SUZocFlXMWxiaUJaWVdwcElGTnZablIzWVhKbElFTnZMaXdnVEhSa0xseHVYRzRnYUhSMGNITTZMeTkzZDNjdVkyOWpiM011WTI5dEwxeHVYRzRnVUdWeWJXbHpjMmx2YmlCcGN5Qm9aWEpsWW5rZ1ozSmhiblJsWkN3Z1puSmxaU0J2WmlCamFHRnlaMlVzSUhSdklHRnVlU0J3WlhKemIyNGdiMkowWVdsdWFXNW5JR0VnWTI5d2VWeHVJRzltSUhSb2FYTWdjMjltZEhkaGNtVWdZVzVrSUdGemMyOWphV0YwWldRZ1pXNW5hVzVsSUhOdmRYSmpaU0JqYjJSbElDaDBhR1VnWENKVGIyWjBkMkZ5WlZ3aUtTd2dZU0JzYVcxcGRHVmtMRnh1SUNCM2IzSnNaSGRwWkdVc0lISnZlV0ZzZEhrdFpuSmxaU3dnYm05dUxXRnpjMmxuYm1GaWJHVXNJSEpsZG05allXSnNaU0JoYm1RZ2JtOXVMV1Y0WTJ4MWMybDJaU0JzYVdObGJuTmxYRzRnZEc4Z2RYTmxJRU52WTI5eklFTnlaV0YwYjNJZ2MyOXNaV3g1SUhSdklHUmxkbVZzYjNBZ1oyRnRaWE1nYjI0Z2VXOTFjaUIwWVhKblpYUWdjR3hoZEdadmNtMXpMaUJaYjNVZ2MyaGhiR3hjYmlBZ2JtOTBJSFZ6WlNCRGIyTnZjeUJEY21WaGRHOXlJSE52Wm5SM1lYSmxJR1p2Y2lCa1pYWmxiRzl3YVc1bklHOTBhR1Z5SUhOdlpuUjNZWEpsSUc5eUlIUnZiMnh6SUhSb1lYUW5jMXh1SUNCMWMyVmtJR1p2Y2lCa1pYWmxiRzl3YVc1bklHZGhiV1Z6TGlCWmIzVWdZWEpsSUc1dmRDQm5jbUZ1ZEdWa0lIUnZJSEIxWW14cGMyZ3NJR1JwYzNSeWFXSjFkR1VzWEc0Z0lITjFZbXhwWTJWdWMyVXNJR0Z1WkM5dmNpQnpaV3hzSUdOdmNHbGxjeUJ2WmlCRGIyTnZjeUJEY21WaGRHOXlMbHh1WEc0Z1ZHaGxJSE52Wm5SM1lYSmxJRzl5SUhSdmIyeHpJR2x1SUhSb2FYTWdUR2xqWlc1elpTQkJaM0psWlcxbGJuUWdZWEpsSUd4cFkyVnVjMlZrTENCdWIzUWdjMjlzWkM1Y2JpQllhV0Z0Wlc0Z1dXRnFhU0JUYjJaMGQyRnlaU0JEYnk0c0lFeDBaQzRnY21WelpYSjJaWE1nWVd4c0lISnBaMmgwY3lCdWIzUWdaWGh3Y21WemMyeDVJR2R5WVc1MFpXUWdkRzhnZVc5MUxseHVYRzRnVkVoRklGTlBSbFJYUVZKRklFbFRJRkJTVDFaSlJFVkVJRndpUVZNZ1NWTmNJaXdnVjBsVVNFOVZWQ0JYUVZKU1FVNVVXU0JQUmlCQlRsa2dTMGxPUkN3Z1JWaFFVa1ZUVXlCUFVseHVJRWxOVUV4SlJVUXNJRWxPUTB4VlJFbE9SeUJDVlZRZ1RrOVVJRXhKVFVsVVJVUWdWRThnVkVoRklGZEJVbEpCVGxSSlJWTWdUMFlnVFVWU1EwaEJUbFJCUWtsTVNWUlpMRnh1SUVaSlZFNUZVMU1nUms5U0lFRWdVRUZTVkVsRFZVeEJVaUJRVlZKUVQxTkZJRUZPUkNCT1QwNUpUa1pTU1U1SFJVMUZUbFF1SUVsT0lFNVBJRVZXUlU1VUlGTklRVXhNSUZSSVJWeHVJRUZWVkVoUFVsTWdUMUlnUTA5UVdWSkpSMGhVSUVoUFRFUkZVbE1nUWtVZ1RFbEJRa3hGSUVaUFVpQkJUbGtnUTB4QlNVMHNJRVJCVFVGSFJWTWdUMUlnVDFSSVJWSmNiaUJNU1VGQ1NVeEpWRmtzSUZkSVJWUklSVklnU1U0Z1FVNGdRVU5VU1U5T0lFOUdJRU5QVGxSU1FVTlVMQ0JVVDFKVUlFOVNJRTlVU0VWU1YwbFRSU3dnUVZKSlUwbE9SeUJHVWs5TkxGeHVJRTlWVkNCUFJpQlBVaUJKVGlCRFQwNU9SVU5VU1U5T0lGZEpWRWdnVkVoRklGTlBSbFJYUVZKRklFOVNJRlJJUlNCVlUwVWdUMUlnVDFSSVJWSWdSRVZCVEVsT1IxTWdTVTVjYmlCVVNFVWdVMDlHVkZkQlVrVXVYRzRnS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpOWNibHh1Y21WeGRXbHlaU2duTGk5d2JHRjBabTl5YlNjcE8xeHVjbVZ4ZFdseVpTZ25MaTloYzNObGRITW5LVHRjYmx4dWFXWWdLQ0ZEUTE5RlJFbFVUMUlnZkh3Z0lVVmthWFJ2Y2k1cGMwMWhhVzVRY205alpYTnpLU0I3WEc0Z0lDQWdjbVZ4ZFdseVpTZ25MaTlEUTA1dlpHVW5LVHRjYmlBZ0lDQnlaWEYxYVhKbEtDY3VMME5EVUhKcGRtRjBaVTV2WkdVbktUdGNiaUFnSUNCeVpYRjFhWEpsS0NjdUwwTkRVMk5sYm1VbktUdGNibHh1SUNBZ0lISmxjWFZwY21Vb0p5NHZZMjl0Y0c5dVpXNTBjeWNwTzF4dUlDQWdJSEpsY1hWcGNtVW9KeTR2WjNKaGNHaHBZM01uS1R0Y2JpQWdJQ0J5WlhGMWFYSmxLQ2N1TDJOdmJHeHBaR1Z5SnlrN1hHNGdJQ0FnTHk4Z1EwTkpiblJsY25ObFkzUnBiMjRnWTJGdUlHSmxJSFZ6WldRZ2MyVndZWEpoZEdWc2VTNWNiaUFnSUNCeVpYRjFhWEpsS0NjdUwyTnZiR3hwWkdWeUwwTkRTVzUwWlhKelpXTjBhVzl1SnlrN1hHNGdJQ0FnY21WeGRXbHlaU2duTGk5d2FIbHphV056SnlrN1hHNGdJQ0FnY21WeGRXbHlaU2duTGk5allXMWxjbUV2UTBORFlXMWxjbUVuS1R0Y2JpQWdJQ0J5WlhGMWFYSmxLQ2N1TDJkbGIyMHRkWFJwYkhNbktUdGNibjFjYmx4dWNtVnhkV2x5WlNnbkxpOXRaWE5vSnlrN1hHNXlaWEYxYVhKbEtDY3VMek5rSnlrN1hHNXlaWEYxYVhKbEtDY3VMek5rTDNCdmJIbG1hV3hzTFROa0p5azdYRzVjYm5KbGNYVnBjbVVvSnk0dlltRnpaUzExYVM5RFExZHBaR2RsZEUxaGJtRm5aWEluS1R0Y2JpSmRmUT09Il19