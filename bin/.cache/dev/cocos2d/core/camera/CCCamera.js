(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/camera/CCCamera.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _geomUtils = require('../geom-utils');
        var _geomUtils2 = _interopRequireDefault(_geomUtils);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var AffineTrans = require('../utils/affine-transform');
        var renderer = require('../renderer/index');
        var RenderFlow = require('../renderer/render-flow');
        var game = require('../CCGame');
        var RendererCamera = null;
        if (CC_JSB && CC_NATIVERENDERER) {
            RendererCamera = window.renderer.Camera;
        } else {
            RendererCamera = require('../../renderer/scene/camera');
        }
        var mat4 = cc.vmath.mat4;
        var vec2 = cc.vmath.vec2;
        var vec3 = cc.vmath.vec3;
        var _mat4_temp_1 = mat4.create();
        var _mat4_temp_2 = mat4.create();
        var _v3_temp_1 = cc.v3();
        var _v3_temp_2 = cc.v3();
        var _v3_temp_3 = cc.v3();
        var _cameras = [];
        var _debugCamera = null;
        function repositionDebugCamera() {
            if (!_debugCamera)
                return;
            var node = _debugCamera.getNode();
            var canvas = cc.game.canvas;
            node.z = canvas.height / 1.1566;
            node.x = canvas.width / 2;
            node.y = canvas.height / 2;
        }
        var ClearFlags = cc.Enum({
            COLOR: 1,
            DEPTH: 2,
            STENCIL: 4
        });
        var StageFlags = cc.Enum({
            OPAQUE: 1,
            TRANSPARENT: 2
        });
        var Camera = cc.Class({
            name: 'cc.Camera',
            extends: cc.Component,
            ctor: function ctor() {
                if (game.renderType !== game.RENDER_TYPE_CANVAS) {
                    var camera = new RendererCamera();
                    camera.setStages(['opaque']);
                    camera.dirty = true;
                    this._inited = false;
                    this._camera = camera;
                } else {
                    this._inited = true;
                }
            },
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.others/Camera',
                inspector: 'packages://inspector/inspectors/comps/camera.js',
                executeInEditMode: true
            },
            properties: {
                _cullingMask: 4294967295,
                _clearFlags: ClearFlags.DEPTH | ClearFlags.STENCIL,
                _backgroundColor: cc.color(0, 0, 0, 255),
                _depth: 0,
                _zoomRatio: 1,
                _targetTexture: null,
                _fov: 60,
                _orthoSize: 10,
                _nearClip: 1,
                _farClip: 4096,
                _ortho: true,
                _rect: cc.rect(0, 0, 1, 1),
                _renderStages: 1,
                _alignWithScreen: true,
                zoomRatio: {
                    get: function get() {
                        return this._zoomRatio;
                    },
                    set: function set(value) {
                        this._zoomRatio = value;
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.camera.zoomRatio'
                },
                fov: {
                    get: function get() {
                        return this._fov;
                    },
                    set: function set(v) {
                        this._fov = v;
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.camera.fov'
                },
                orthoSize: {
                    get: function get() {
                        return this._orthoSize;
                    },
                    set: function set(v) {
                        this._orthoSize = v;
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.camera.orthoSize'
                },
                nearClip: {
                    get: function get() {
                        return this._nearClip;
                    },
                    set: function set(v) {
                        this._nearClip = v;
                        this._updateClippingpPlanes();
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.camera.nearClip'
                },
                farClip: {
                    get: function get() {
                        return this._farClip;
                    },
                    set: function set(v) {
                        this._farClip = v;
                        this._updateClippingpPlanes();
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.camera.farClip'
                },
                ortho: {
                    get: function get() {
                        return this._ortho;
                    },
                    set: function set(v) {
                        this._ortho = v;
                        this._updateProjection();
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.camera.ortho'
                },
                rect: {
                    get: function get() {
                        return this._rect;
                    },
                    set: function set(v) {
                        this._rect = v;
                        this._updateRect();
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.camera.rect'
                },
                cullingMask: {
                    get: function get() {
                        return this._cullingMask;
                    },
                    set: function set(value) {
                        this._cullingMask = value;
                        this._updateCameraMask();
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.camera.cullingMask'
                },
                clearFlags: {
                    get: function get() {
                        return this._clearFlags;
                    },
                    set: function set(value) {
                        this._clearFlags = value;
                        if (this._camera) {
                            this._camera.setClearFlags(value);
                        }
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.camera.clearFlags'
                },
                backgroundColor: {
                    get: function get() {
                        return this._backgroundColor;
                    },
                    set: function set(value) {
                        this._backgroundColor = value;
                        this._updateBackgroundColor();
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.camera.backgroundColor'
                },
                depth: {
                    get: function get() {
                        return this._depth;
                    },
                    set: function set(value) {
                        this._depth = value;
                        if (this._camera) {
                            this._camera.setPriority(value);
                        }
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.camera.depth'
                },
                targetTexture: {
                    get: function get() {
                        return this._targetTexture;
                    },
                    set: function set(value) {
                        this._targetTexture = value;
                        this._updateTargetTexture();
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.camera.targetTexture'
                },
                renderStages: {
                    get: function get() {
                        return this._renderStages;
                    },
                    set: function set(val) {
                        this._renderStages = val;
                        this._updateStages();
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.camera.renderStages'
                },
                alignWithScreen: {
                    get: function get() {
                        return this._alignWithScreen;
                    },
                    set: function set(v) {
                        this._alignWithScreen = v;
                    }
                },
                _is3D: {
                    get: function get() {
                        return this.node && this.node._is3DNode;
                    }
                }
            },
            statics: {
                main: null,
                cameras: _cameras,
                ClearFlags: ClearFlags,
                findCamera: function findCamera(node) {
                    for (var i = 0, l = _cameras.length; i < l; i++) {
                        var camera = _cameras[i];
                        if (camera.containsNode(node)) {
                            return camera;
                        }
                    }
                    return null;
                },
                _findRendererCamera: function _findRendererCamera(node) {
                    var cameras = renderer.scene._cameras;
                    for (var i = 0; i < cameras._count; i++) {
                        if (cameras._data[i]._cullingMask & node._cullingMask) {
                            return cameras._data[i];
                        }
                    }
                    return null;
                },
                _setupDebugCamera: function _setupDebugCamera() {
                    if (_debugCamera)
                        return;
                    if (game.renderType === game.RENDER_TYPE_CANVAS)
                        return;
                    var camera = new RendererCamera();
                    _debugCamera = camera;
                    camera.setStages(['opaque']);
                    camera.setFov(Math.PI * 60 / 180);
                    camera.setNear(0.1);
                    camera.setFar(4096);
                    camera.dirty = true;
                    camera.cullingMask = 1 << cc.Node.BuiltinGroupIndex.DEBUG;
                    camera.setPriority(cc.macro.MAX_ZINDEX);
                    camera.setClearFlags(0);
                    camera.setColor(0, 0, 0, 0);
                    var node = new cc.Node();
                    camera.setNode(node);
                    repositionDebugCamera();
                    cc.view.on('design-resolution-changed', repositionDebugCamera);
                    renderer.scene.addCamera(camera);
                }
            },
            _updateCameraMask: function _updateCameraMask() {
                if (this._camera) {
                    var mask = this._cullingMask & ~(1 << cc.Node.BuiltinGroupIndex.DEBUG);
                    this._camera.cullingMask = mask;
                }
            },
            _updateBackgroundColor: function _updateBackgroundColor() {
                if (!this._camera)
                    return;
                var color = this._backgroundColor;
                this._camera.setColor(color.r / 255, color.g / 255, color.b / 255, color.a / 255);
            },
            _updateTargetTexture: function _updateTargetTexture() {
                if (!this._camera)
                    return;
                var texture = this._targetTexture;
                this._camera.setFrameBuffer(texture ? texture._framebuffer : null);
            },
            _updateClippingpPlanes: function _updateClippingpPlanes() {
                if (!this._camera)
                    return;
                this._camera.setNear(this._nearClip);
                this._camera.setFar(this._farClip);
            },
            _updateProjection: function _updateProjection() {
                if (!this._camera)
                    return;
                var type = this._ortho ? 1 : 0;
                this._camera.setType(type);
            },
            _updateRect: function _updateRect() {
                if (!this._camera)
                    return;
                var rect = this._rect;
                this._camera.setRect(rect.x, rect.y, rect.width, rect.height);
            },
            _updateStages: function _updateStages() {
                var flags = this._renderStages;
                var stages = [];
                if (flags & StageFlags.OPAQUE) {
                    stages.push('opaque');
                }
                if (flags & StageFlags.TRANSPARENT) {
                    stages.push('transparent');
                }
                this._camera.setStages(stages);
            },
            _init: function _init() {
                if (this._inited)
                    return;
                this._inited = true;
                var camera = this._camera;
                if (!camera)
                    return;
                camera.setNode(this.node);
                camera.setClearFlags(this._clearFlags);
                camera.setPriority(this._depth);
                this._updateBackgroundColor();
                this._updateCameraMask();
                this._updateTargetTexture();
                this._updateClippingpPlanes();
                this._updateProjection();
                this._updateStages();
                this._updateRect();
                this.beforeDraw();
            },
            onLoad: function onLoad() {
                this._init();
            },
            onEnable: function onEnable() {
                if (!CC_EDITOR && game.renderType !== game.RENDER_TYPE_CANVAS) {
                    cc.director.on(cc.Director.EVENT_BEFORE_DRAW, this.beforeDraw, this);
                    renderer.scene.addCamera(this._camera);
                }
                _cameras.push(this);
            },
            onDisable: function onDisable() {
                if (!CC_EDITOR && game.renderType !== game.RENDER_TYPE_CANVAS) {
                    cc.director.off(cc.Director.EVENT_BEFORE_DRAW, this.beforeDraw, this);
                    renderer.scene.removeCamera(this._camera);
                }
                cc.js.array.remove(_cameras, this);
            },
            getScreenToWorldMatrix2D: function getScreenToWorldMatrix2D(out) {
                this.getWorldToScreenMatrix2D(out);
                mat4.invert(out, out);
                return out;
            },
            getWorldToScreenMatrix2D: function getWorldToScreenMatrix2D(out) {
                this.node.getWorldRT(_mat4_temp_1);
                var zoomRatio = this.zoomRatio;
                var _mat4_temp_1m = _mat4_temp_1.m;
                _mat4_temp_1m[0] *= zoomRatio;
                _mat4_temp_1m[1] *= zoomRatio;
                _mat4_temp_1m[4] *= zoomRatio;
                _mat4_temp_1m[5] *= zoomRatio;
                var m12 = _mat4_temp_1m[12];
                var m13 = _mat4_temp_1m[13];
                var center = cc.visibleRect.center;
                _mat4_temp_1m[12] = center.x - (_mat4_temp_1m[0] * m12 + _mat4_temp_1m[4] * m13);
                _mat4_temp_1m[13] = center.y - (_mat4_temp_1m[1] * m12 + _mat4_temp_1m[5] * m13);
                if (out !== _mat4_temp_1) {
                    mat4.copy(out, _mat4_temp_1);
                }
                return out;
            },
            getScreenToWorldPoint: function getScreenToWorldPoint(screenPosition, out) {
                if (this.node.is3DNode) {
                    out = out || new cc.Vec3();
                    this._camera.screenToWorld(out, screenPosition, cc.visibleRect.width, cc.visibleRect.height);
                } else {
                    out = out || new cc.Vec2();
                    this.getScreenToWorldMatrix2D(_mat4_temp_1);
                    vec2.transformMat4(out, screenPosition, _mat4_temp_1);
                }
                return out;
            },
            getWorldToScreenPoint: function getWorldToScreenPoint(worldPosition, out) {
                if (this.node.is3DNode) {
                    out = out || new cc.Vec3();
                    this._camera.worldToScreen(out, worldPosition, cc.visibleRect.width, cc.visibleRect.height);
                } else {
                    out = out || new cc.Vec2();
                    this.getWorldToScreenMatrix2D(_mat4_temp_1);
                    vec2.transformMat4(out, worldPosition, _mat4_temp_1);
                }
                return out;
            },
            getRay: function getRay(screenPos) {
                if (!_geomUtils2.default)
                    return screenPos;
                vec3.set(_v3_temp_3, screenPos.x, screenPos.y, 1);
                this._camera.screenToWorld(_v3_temp_2, _v3_temp_3, cc.visibleRect.width, cc.visibleRect.height);
                if (this.ortho) {
                    vec3.set(_v3_temp_3, screenPos.x, screenPos.y, -1);
                    this._camera.screenToWorld(_v3_temp_1, _v3_temp_3, cc.visibleRect.width, cc.visibleRect.height);
                } else {
                    this.node.getWorldPosition(_v3_temp_1);
                }
                return _geomUtils2.default.Ray.fromPoints(_geomUtils2.default.Ray.create(), _v3_temp_1, _v3_temp_2);
            },
            containsNode: function containsNode(node) {
                return node._cullingMask & this.cullingMask;
            },
            render: function render(root) {
                root = root || cc.director.getScene();
                if (!root)
                    return null;
                this.node.getWorldMatrix(_mat4_temp_1);
                this.beforeDraw();
                RenderFlow.render(root);
                if (!CC_JSB) {
                    renderer._forward.renderCamera(this._camera, renderer.scene);
                }
            },
            _onAlignWithScreen: function _onAlignWithScreen() {
                var height = cc.game.canvas.height / cc.view._scaleY;
                var targetTexture = this._targetTexture;
                if (targetTexture) {
                    if (CC_EDITOR) {
                        height = cc.engine.getDesignResolutionSize().height;
                    } else {
                        height = cc.visibleRect.height;
                    }
                }
                var fov = this._fov * cc.macro.RAD;
                this.node.z = height / (Math.tan(fov / 2) * 2);
                fov = Math.atan(Math.tan(fov / 2) / this.zoomRatio) * 2;
                this._camera.setFov(fov);
                this._camera.setOrthoHeight(height / 2 / this.zoomRatio);
                this.node.setRotation(0, 0, 0, 1);
            },
            beforeDraw: function beforeDraw() {
                if (!this._camera)
                    return;
                if (this._alignWithScreen) {
                    this._onAlignWithScreen();
                } else {
                    var fov = this._fov * cc.macro.RAD;
                    fov = Math.atan(Math.tan(fov / 2) / this.zoomRatio) * 2;
                    this._camera.setFov(fov);
                    this._camera.setOrthoHeight(this._orthoSize * this.zoomRatio);
                }
                this._camera.dirty = true;
            }
        });
        cc.js.mixin(Camera.prototype, {
            getNodeToCameraTransform: function getNodeToCameraTransform(node) {
                var out = AffineTrans.identity();
                node.getWorldMatrix(_mat4_temp_2);
                if (this.containsNode(node)) {
                    this.getWorldToCameraMatrix(_mat4_temp_1);
                    mat4.mul(_mat4_temp_2, _mat4_temp_2, _mat4_temp_1);
                }
                AffineTrans.fromMat4(out, _mat4_temp_2);
                return out;
            },
            getCameraToWorldPoint: function getCameraToWorldPoint(point, out) {
                return this.getScreenToWorldPoint(point, out);
            },
            getWorldToCameraPoint: function getWorldToCameraPoint(point, out) {
                return this.getWorldToScreenPoint(point, out);
            },
            getCameraToWorldMatrix: function getCameraToWorldMatrix(out) {
                return this.getScreenToWorldMatrix2D(out);
            },
            getWorldToCameraMatrix: function getWorldToCameraMatrix(out) {
                return this.getWorldToScreenMatrix2D(out);
            }
        });
        module.exports = cc.Camera = Camera;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,