(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/event/event-target.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('../platform/js');
        var CallbacksInvoker = require('../platform/callbacks-invoker');
        var fastRemove = js.array.fastRemove;
        function EventTarget() {
            CallbacksInvoker.call(this);
        }
        js.extend(EventTarget, CallbacksInvoker);
        var proto = EventTarget.prototype;
        proto.__on = proto.on;
        proto.on = function (type, callback, target, once) {
            if (!callback) {
                cc.errorID(6800);
                return;
            }
            if (!this.hasEventListener(type, callback, target)) {
                this.__on(type, callback, target, once);
                if (target && target.__eventTargets) {
                    target.__eventTargets.push(this);
                }
            }
            return callback;
        };
        proto.__off = proto.off;
        proto.off = function (type, callback, target) {
            if (!callback) {
                var list = this._callbackTable[type];
                if (!list)
                    return;
                var infos = list.callbackInfos;
                for (var i = 0; i < infos.length; ++i) {
                    var _target = infos[i] && infos[i].target;
                    if (_target && _target.__eventTargets) {
                        fastRemove(_target.__eventTargets, this);
                    }
                }
                this.removeAll(type);
            } else {
                this.__off(type, callback, target);
                if (target && target.__eventTargets) {
                    fastRemove(target.__eventTargets, this);
                }
            }
        };
        proto.targetOff = function (target) {
            this.removeAll(target);
            if (target && target.__eventTargets) {
                fastRemove(target.__eventTargets, this);
            }
        };
        proto.once = function (type, callback, target) {
            this.on(type, callback, target, true);
        };
        proto.dispatchEvent = function (event) {
            this.emit(event.type, event);
        };
        cc.EventTarget = module.exports = EventTarget;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,