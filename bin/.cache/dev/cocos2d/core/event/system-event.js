(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/event/system-event.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var EventTarget = require('../event/event-target');
        var eventManager = require('../event-manager');
        var inputManger = require('../platform/CCInputManager');
        ;
        var EventType = cc.Enum({
            KEY_DOWN: 'keydown',
            KEY_UP: 'keyup',
            DEVICEMOTION: 'devicemotion'
        });
        var keyboardListener = null;
        var accelerationListener = null;
        var SystemEvent = cc.Class({
            name: 'SystemEvent',
            extends: EventTarget,
            statics: { EventType: EventType },
            setAccelerometerEnabled: function setAccelerometerEnabled(isEnable) {
                if (CC_EDITOR) {
                    return;
                }
                if (isEnable && window.DeviceMotionEvent && typeof DeviceMotionEvent.requestPermission === 'function') {
                    DeviceMotionEvent.requestPermission().then(function (response) {
                        console.log('Device Motion Event request permission: ' + response);
                        inputManger.setAccelerometerEnabled(response === 'granted');
                    });
                } else {
                    inputManger.setAccelerometerEnabled(isEnable);
                }
            },
            setAccelerometerInterval: function setAccelerometerInterval(interval) {
                if (CC_EDITOR) {
                    return;
                }
                inputManger.setAccelerometerInterval(interval);
            },
            on: function on(type, callback, target, once) {
                if (CC_EDITOR) {
                    return;
                }
                this._super(type, callback, target, once);
                if (type === EventType.KEY_DOWN || type === EventType.KEY_UP) {
                    if (!keyboardListener) {
                        keyboardListener = cc.EventListener.create({
                            event: cc.EventListener.KEYBOARD,
                            onKeyPressed: function onKeyPressed(keyCode, event) {
                                event.type = EventType.KEY_DOWN;
                                cc.systemEvent.dispatchEvent(event);
                            },
                            onKeyReleased: function onKeyReleased(keyCode, event) {
                                event.type = EventType.KEY_UP;
                                cc.systemEvent.dispatchEvent(event);
                            }
                        });
                    }
                    if (!eventManager.hasEventListener(cc.EventListener.ListenerID.KEYBOARD)) {
                        eventManager.addListener(keyboardListener, 1);
                    }
                }
                if (type === EventType.DEVICEMOTION) {
                    if (!accelerationListener) {
                        accelerationListener = cc.EventListener.create({
                            event: cc.EventListener.ACCELERATION,
                            callback: function callback(acc, event) {
                                event.type = EventType.DEVICEMOTION;
                                cc.systemEvent.dispatchEvent(event);
                            }
                        });
                    }
                    if (!eventManager.hasEventListener(cc.EventListener.ListenerID.ACCELERATION)) {
                        eventManager.addListener(accelerationListener, 1);
                    }
                }
            },
            off: function off(type, callback, target) {
                if (CC_EDITOR) {
                    return;
                }
                this._super(type, callback, target);
                if (keyboardListener && (type === EventType.KEY_DOWN || type === EventType.KEY_UP)) {
                    var hasKeyDownEventListener = this.hasEventListener(EventType.KEY_DOWN);
                    var hasKeyUpEventListener = this.hasEventListener(EventType.KEY_UP);
                    if (!hasKeyDownEventListener && !hasKeyUpEventListener) {
                        eventManager.removeListener(keyboardListener);
                    }
                }
                if (accelerationListener && type === EventType.DEVICEMOTION) {
                    eventManager.removeListener(accelerationListener);
                }
            }
        });
        cc.SystemEvent = module.exports = SystemEvent;
        cc.systemEvent = new cc.SystemEvent();
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,