(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/core/effect.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _config = require('../config');
        var _config2 = _interopRequireDefault(_config);
        var _pass = require('../core/pass');
        var _pass2 = _interopRequireDefault(_pass);
        var _technique = require('../core/technique');
        var _technique2 = _interopRequireDefault(_technique);
        var _types = require('../types');
        var _enums = require('../enums');
        var _enums2 = _interopRequireDefault(_enums);
        var _gfx = require('../gfx');
        var _gfx2 = _interopRequireDefault(_gfx);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var Effect = function () {
            function Effect(name, techniques) {
                var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                var defines = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
                var dependencies = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
                _classCallCheck(this, Effect);
                this._name = name;
                this._techniques = techniques;
                this._properties = properties;
                this._defines = defines;
                this._dependencies = dependencies;
            }
            _createClass(Effect, [
                {
                    key: 'clear',
                    value: function clear() {
                        this._techniques.length = 0;
                        this._properties = {};
                        this._defines = {};
                    }
                },
                {
                    key: 'setCullMode',
                    value: function setCullMode(cullMode) {
                        var passes = this._techniques[0].passes;
                        for (var i = 0; i < passes.length; i++) {
                            passes[i].setCullMode(cullMode);
                        }
                    }
                },
                {
                    key: 'setDepth',
                    value: function setDepth(depthTest, depthWrite, depthFunc) {
                        var passes = this._techniques[0].passes;
                        for (var i = 0; i < passes.length; i++) {
                            passes[i].setDepth(depthTest, depthWrite, depthFunc);
                        }
                    }
                },
                {
                    key: 'setBlend',
                    value: function setBlend(enabled, blendEq, blendSrc, blendDst, blendAlphaEq, blendSrcAlpha, blendDstAlpha, blendColor) {
                        var passes = this._techniques[0].passes;
                        for (var j = 0; j < passes.length; j++) {
                            var pass = passes[j];
                            pass.setBlend(enabled, blendEq, blendSrc, blendDst, blendAlphaEq, blendSrcAlpha, blendDstAlpha, blendColor);
                        }
                    }
                },
                {
                    key: 'setStencilEnabled',
                    value: function setStencilEnabled(enabled) {
                        var passes = this._techniques[0].passes;
                        for (var i = 0; i < passes.length; i++) {
                            passes[i].setStencilEnabled(enabled);
                        }
                    }
                },
                {
                    key: 'setStencil',
                    value: function setStencil(enabled, stencilFunc, stencilRef, stencilMask, stencilFailOp, stencilZFailOp, stencilZPassOp, stencilWriteMask) {
                        var passes = this._techniques[0].passes;
                        for (var i = 0; i < passes.length; ++i) {
                            var pass = passes[i];
                            pass.setStencilFront(enabled, stencilFunc, stencilRef, stencilMask, stencilFailOp, stencilZFailOp, stencilZPassOp, stencilWriteMask);
                            pass.setStencilBack(enabled, stencilFunc, stencilRef, stencilMask, stencilFailOp, stencilZFailOp, stencilZPassOp, stencilWriteMask);
                        }
                    }
                },
                {
                    key: 'getTechnique',
                    value: function getTechnique(stage) {
                        var stageID = _config2.default.stageID(stage);
                        if (stageID === -1) {
                            return null;
                        }
                        for (var i = 0; i < this._techniques.length; ++i) {
                            var tech = this._techniques[i];
                            if (tech.stageIDs & stageID) {
                                return tech;
                            }
                        }
                        return null;
                    }
                },
                {
                    key: 'getProperty',
                    value: function getProperty(name) {
                        if (!this._properties[name]) {
                            cc.warn(this._name + ' : Failed to get property ' + name + ', property not found.');
                            return null;
                        }
                        return this._properties[name].value;
                    }
                },
                {
                    key: 'setProperty',
                    value: function setProperty(name, value) {
                        var prop = this._properties[name];
                        if (!prop) {
                            cc.warn(this._name + ' : Failed to set property ' + name + ', property not found.');
                            return;
                        }
                        if (Array.isArray(value)) {
                            var array = prop.value;
                            if (array.length !== value.length) {
                                cc.warn(this._name + ' : Failed to set property ' + name + ', property length not correct.');
                                return;
                            }
                            for (var i = 0; i < value.length; i++) {
                                array[i] = value[i];
                            }
                        } else {
                            if (prop.type === _enums2.default.PARAM_TEXTURE_2D) {
                                prop.value = value ? value.getImpl() : null;
                            } else if (value.array) {
                                value.array(prop.value);
                            } else {
                                if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
                                    cc.warn('Set effect property ' + this._name + ' warning : should transform object to ArrayBuffer');
                                }
                                prop.value = value;
                            }
                        }
                    }
                },
                {
                    key: 'updateHash',
                    value: function updateHash(hash) {
                    }
                },
                {
                    key: 'getDefine',
                    value: function getDefine(name) {
                        var def = this._defines[name];
                        if (def === undefined) {
                            cc.warn(this._name + ' : Failed to get define ' + name + ', define not found.');
                        }
                        return def;
                    }
                },
                {
                    key: 'define',
                    value: function define(name, value) {
                        var def = this._defines[name];
                        if (def === undefined) {
                            cc.warn(this._name + ' : Failed to set define ' + name + ', define not found.');
                            return;
                        }
                        this._defines[name] = value;
                    }
                },
                {
                    key: 'extractProperties',
                    value: function extractProperties() {
                        var out = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                        Object.assign(out, this._properties);
                        return out;
                    }
                },
                {
                    key: 'extractDefines',
                    value: function extractDefines() {
                        var out = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                        Object.assign(out, this._defines);
                        return out;
                    }
                },
                {
                    key: 'extractDependencies',
                    value: function extractDependencies() {
                        var out = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                        for (var i = 0; i < this._dependencies.length; ++i) {
                            var dep = this._dependencies[i];
                            out[dep.define] = dep.extension;
                        }
                        return out;
                    }
                },
                {
                    key: 'clone',
                    value: function clone() {
                        var defines = this.extractDefines({});
                        var dependencies = this.extractDependencies({});
                        var newProperties = {};
                        var properties = this._properties;
                        for (var name in properties) {
                            var prop = properties[name];
                            var newProp = newProperties[name] = {};
                            var value = prop.value;
                            if (Array.isArray(value)) {
                                newProp.value = value.concat();
                            } else if (ArrayBuffer.isView(value)) {
                                newProp.value = new value.__proto__.constructor(value);
                            } else {
                                newProp.value = value;
                            }
                            for (var _name in prop) {
                                if (_name === 'value')
                                    continue;
                                newProp[_name] = prop[_name];
                            }
                        }
                        var techniques = [];
                        for (var i = 0; i < this._techniques.length; i++) {
                            techniques.push(this._techniques[i].clone());
                        }
                        return new cc.Effect(this._name, techniques, newProperties, defines, dependencies);
                    }
                }
            ]);
            return Effect;
        }();
        var getInvolvedPrograms = function getInvolvedPrograms(json) {
            var programs = [], lib = cc.renderer._forward._programLib;
            json.techniques.forEach(function (tech) {
                tech.passes.forEach(function (pass) {
                    programs.push(lib.getTemplate(pass.program));
                });
            });
            return programs;
        };
        function parseProperties(effectAsset, programs) {
            var props = {};
            var properties = {};
            effectAsset.techniques.forEach(function (tech) {
                tech.passes.forEach(function (pass) {
                    Object.assign(properties, pass.properties);
                });
            });
            var _loop = function _loop(prop) {
                var propInfo = properties[prop], uniformInfo = void 0;
                for (var i = 0; i < programs.length; i++) {
                    uniformInfo = programs[i].uniforms.find(function (u) {
                        return u.name === prop;
                    });
                    if (uniformInfo)
                        break;
                }
                if (!uniformInfo) {
                    cc.warn(effectAsset.name + ' : illegal property: ' + prop + ', myabe defined a not used property');
                    return 'continue';
                }
                props[prop] = Object.assign({}, propInfo);
                props[prop].value = propInfo.type === _enums2.default.PARAM_TEXTURE_2D ? null : new Float32Array(propInfo.value);
            };
            for (var prop in properties) {
                var _ret = _loop(prop);
                if (_ret === 'continue')
                    continue;
            }
            return props;
        }
        ;
        Effect.parseTechniques = function (effect) {
            var techNum = effect.techniques.length;
            var techniques = new Array(techNum);
            for (var j = 0; j < techNum; ++j) {
                var tech = effect.techniques[j];
                if (!tech.stages) {
                    tech.stages = ['opaque'];
                }
                var passNum = tech.passes.length;
                var passes = new Array(passNum);
                for (var k = 0; k < passNum; ++k) {
                    var pass = tech.passes[k];
                    passes[k] = new _pass2.default(pass.program);
                    if (pass.rasterizerState) {
                        passes[k].setCullMode(pass.rasterizerState.cullMode);
                    }
                    var blendState = pass.blendState && pass.blendState.targets[0];
                    if (blendState) {
                        passes[k].setBlend(blendState.blend, blendState.blendEq, blendState.blendSrc, blendState.blendDst, blendState.blendAlphaEq, blendState.blendSrcAlpha, blendState.blendDstAlpha, blendState.blendColor);
                    }
                    var depthStencilState = pass.depthStencilState;
                    if (depthStencilState) {
                        passes[k].setDepth(depthStencilState.depthTest, depthStencilState.depthWrite, depthStencilState.depthFunc);
                        passes[k].setStencilFront(depthStencilState.stencilTest, depthStencilState.stencilFuncFront, depthStencilState.stencilRefFront, depthStencilState.stencilMaskFront, depthStencilState.stencilFailOpFront, depthStencilState.stencilZFailOpFront, depthStencilState.stencilZPassOpFront, depthStencilState.stencilWriteMaskFront);
                        passes[k].setStencilBack(depthStencilState.stencilTest, depthStencilState.stencilFuncBack, depthStencilState.stencilRefBack, depthStencilState.stencilMaskBack, depthStencilState.stencilFailOpBack, depthStencilState.stencilZFailOpBack, depthStencilState.stencilZPassOpBack, depthStencilState.stencilWriteMaskBack);
                    }
                }
                techniques[j] = new _technique2.default(tech.stages, passes, tech.layer);
            }
            return techniques;
        };
        Effect.parseEffect = function (effect) {
            var techniques = Effect.parseTechniques(effect);
            var programs = getInvolvedPrograms(effect);
            var props = parseProperties(effect, programs);
            var uniforms = {}, defines = {};
            programs.forEach(function (p) {
                p.uniforms.forEach(function (u) {
                    var name = u.name, uniform = uniforms[name] = Object.assign({}, u);
                    if (props[name]) {
                        uniform.value = props[name].value;
                    } else {
                        uniform.value = _types.enums2default[u.type];
                    }
                });
                p.defines.forEach(function (d) {
                    defines[d.name] = _types.enums2default[d.type];
                });
            });
            var extensions = programs.reduce(function (acc, cur) {
                return acc = acc.concat(cur.extensions);
            }, []);
            extensions = extensions.map(function (e) {
                return Object.assign({}, e);
            });
            return new cc.Effect(effect.name, techniques, uniforms, defines, extensions, effect);
        };
        if (CC_EDITOR) {
            Effect.parseForInspector = function (json) {
                var programs = getInvolvedPrograms(json);
                var props = parseProperties(json, programs), defines = {};
                for (var pn = 0; pn < programs.length; pn++) {
                    programs[pn].uniforms.forEach(function (u) {
                        var prop = props[u.name];
                        if (!prop)
                            return;
                        prop.defines = u.defines;
                    });
                    programs[pn].defines.forEach(function (define) {
                        defines[define.name] = (0, _types.getInspectorProps)(define);
                    });
                }
                for (var name in props) {
                    props[name] = (0, _types.getInspectorProps)(props[name]);
                }
                return {
                    props: props,
                    defines: defines
                };
            };
        }
        cc.Effect = Effect;
        exports.default = Effect;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,