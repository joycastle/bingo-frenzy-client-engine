(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/core/base-renderer.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _type2uniformValue2, _type2uniformArrayVal;
        var _memop = require('../memop');
        var _enums = require('../enums');
        var _enums2 = _interopRequireDefault(_enums);
        var _vmath = require('../../core/vmath');
        var _programLib = require('./program-lib');
        var _programLib2 = _interopRequireDefault(_programLib);
        var _view = require('./view');
        var _view2 = _interopRequireDefault(_view);
        var _gfx = require('../gfx');
        var _gfx2 = _interopRequireDefault(_gfx);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _defineProperty(obj, key, value) {
            if (key in obj) {
                Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: true,
                    configurable: true,
                    writable: true
                });
            } else {
                obj[key] = value;
            }
            return obj;
        }
        var _m3_tmp = _vmath.mat3.create();
        var _m4_tmp = _vmath.mat4.create();
        var _stageInfos = new _memop.RecyclePool(function () {
            return {
                stage: null,
                items: null
            };
        }, 8);
        var _float2_pool = new _memop.RecyclePool(function () {
            return new Float32Array(2);
        }, 8);
        var _float3_pool = new _memop.RecyclePool(function () {
            return new Float32Array(3);
        }, 8);
        var _float4_pool = new _memop.RecyclePool(function () {
            return new Float32Array(4);
        }, 8);
        var _float9_pool = new _memop.RecyclePool(function () {
            return new Float32Array(9);
        }, 8);
        var _float16_pool = new _memop.RecyclePool(function () {
            return new Float32Array(16);
        }, 8);
        var _float64_pool = new _memop.RecyclePool(function () {
            return new Float32Array(64);
        }, 8);
        var _int2_pool = new _memop.RecyclePool(function () {
            return new Int32Array(2);
        }, 8);
        var _int3_pool = new _memop.RecyclePool(function () {
            return new Int32Array(3);
        }, 8);
        var _int4_pool = new _memop.RecyclePool(function () {
            return new Int32Array(4);
        }, 8);
        var _int64_pool = new _memop.RecyclePool(function () {
            return new Int32Array(64);
        }, 8);
        var _type2uniformValue = (_type2uniformValue2 = {}, _defineProperty(_type2uniformValue2, _enums2.default.PARAM_INT, function (value) {
            return value;
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_INT2, function (value) {
            return _vmath.vec2.array(_int2_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_INT3, function (value) {
            return _vmath.vec3.array(_int3_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_INT4, function (value) {
            return _vmath.vec4.array(_int4_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_FLOAT, function (value) {
            return value;
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_FLOAT2, function (value) {
            return _vmath.vec2.array(_float2_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_FLOAT3, function (value) {
            return _vmath.vec3.array(_float3_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_FLOAT4, function (value) {
            return _vmath.vec4.array(_float4_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_COLOR3, function (value) {
            return _vmath.color3.array(_float3_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_COLOR4, function (value) {
            return _vmath.color4.array(_float4_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_MAT2, function (value) {
            return _vmath.mat2.array(_float4_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_MAT3, function (value) {
            return _vmath.mat3.array(_float9_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_MAT4, function (value) {
            return _vmath.mat4.array(_float16_pool.add(), value);
        }), _type2uniformValue2);
        var _type2uniformArrayValue = (_type2uniformArrayVal = {}, _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_INT, {
            func: function func(values) {
                var result = _int64_pool.add();
                for (var i = 0; i < values.length; ++i) {
                    result[i] = values[i];
                }
                return result;
            },
            size: 1
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_INT2, {
            func: function func(values) {
                var result = _int64_pool.add();
                for (var i = 0; i < values.length; ++i) {
                    result[2 * i] = values[i].x;
                    result[2 * i + 1] = values[i].y;
                }
                return result;
            },
            size: 2
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_INT3, {
            func: undefined,
            size: 3
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_INT4, {
            func: function func(values) {
                var result = _int64_pool.add();
                for (var i = 0; i < values.length; ++i) {
                    var v = values[i];
                    result[4 * i] = v.x;
                    result[4 * i + 1] = v.y;
                    result[4 * i + 2] = v.z;
                    result[4 * i + 3] = v.w;
                }
                return result;
            },
            size: 4
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_FLOAT, {
            func: function func(values) {
                var result = _float64_pool.add();
                for (var i = 0; i < values.length; ++i) {
                    result[i] = values[i];
                }
                return result;
            },
            size: 1
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_FLOAT2, {
            func: function func(values) {
                var result = _float64_pool.add();
                for (var i = 0; i < values.length; ++i) {
                    result[2 * i] = values[i].x;
                    result[2 * i + 1] = values[i].y;
                }
                return result;
            },
            size: 2
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_FLOAT3, {
            func: undefined,
            size: 3
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_FLOAT4, {
            func: function func(values) {
                var result = _float64_pool.add();
                for (var i = 0; i < values.length; ++i) {
                    var v = values[i];
                    result[4 * i] = v.x;
                    result[4 * i + 1] = v.y;
                    result[4 * i + 2] = v.z;
                    result[4 * i + 3] = v.w;
                }
                return result;
            },
            size: 4
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_COLOR3, {
            func: undefined,
            size: 3
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_COLOR4, {
            func: function func(values) {
                var result = _float64_pool.add();
                for (var i = 0; i < values.length; ++i) {
                    var v = values[i];
                    result[4 * i] = v.r;
                    result[4 * i + 1] = v.g;
                    result[4 * i + 2] = v.b;
                    result[4 * i + 3] = v.a;
                }
                return result;
            },
            size: 4
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_MAT2, {
            func: function func(values) {
                var result = _float64_pool.add();
                for (var i = 0; i < values.length; ++i) {
                    var v = values[i];
                    result.set(v.m, 4 * i);
                }
                return result;
            },
            size: 4
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_MAT3, {
            func: undefined,
            size: 9
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_MAT4, {
            func: function func(values) {
                var result = _float64_pool.add();
                for (var i = 0; i < values.length; ++i) {
                    var v = values[i];
                    result.set(v.m, 16 * i);
                }
                return result;
            },
            size: 16
        }), _type2uniformArrayVal);
        var Base = function () {
            function Base(device, opts) {
                var _type2defaultValue;
                _classCallCheck(this, Base);
                this._device = device;
                this._programLib = new _programLib2.default(device);
                this._opts = opts;
                this._type2defaultValue = (_type2defaultValue = {}, _defineProperty(_type2defaultValue, _enums2.default.PARAM_INT, 0), _defineProperty(_type2defaultValue, _enums2.default.PARAM_INT2, _vmath.vec2.create(0, 0)), _defineProperty(_type2defaultValue, _enums2.default.PARAM_INT3, _vmath.vec3.create(0, 0, 0)), _defineProperty(_type2defaultValue, _enums2.default.PARAM_INT4, _vmath.vec4.create(0, 0, 0, 0)), _defineProperty(_type2defaultValue, _enums2.default.PARAM_FLOAT, 0), _defineProperty(_type2defaultValue, _enums2.default.PARAM_FLOAT2, _vmath.vec2.create(0, 0)), _defineProperty(_type2defaultValue, _enums2.default.PARAM_FLOAT3, _vmath.vec3.create(0, 0, 0)), _defineProperty(_type2defaultValue, _enums2.default.PARAM_FLOAT4, _vmath.vec4.create(0, 0, 0, 0)), _defineProperty(_type2defaultValue, _enums2.default.PARAM_COLOR3, _vmath.color3.create(0, 0, 0)), _defineProperty(_type2defaultValue, _enums2.default.PARAM_COLOR4, _vmath.color4.create(0, 0, 0, 1)), _defineProperty(_type2defaultValue, _enums2.default.PARAM_MAT2, _vmath.mat2.create()), _defineProperty(_type2defaultValue, _enums2.default.PARAM_MAT3, _vmath.mat3.create()), _defineProperty(_type2defaultValue, _enums2.default.PARAM_MAT4, _vmath.mat4.create()), _defineProperty(_type2defaultValue, _enums2.default.PARAM_TEXTURE_2D, opts.defaultTexture), _defineProperty(_type2defaultValue, _enums2.default.PARAM_TEXTURE_CUBE, opts.defaultTextureCube), _type2defaultValue);
                this._stage2fn = {};
                this._usedTextureUnits = 0;
                this._viewPools = new _memop.RecyclePool(function () {
                    return new _view2.default();
                }, 8);
                this._drawItemsPools = new _memop.RecyclePool(function () {
                    return {
                        model: null,
                        node: null,
                        ia: null,
                        effect: null,
                        defines: null,
                        uniforms: null
                    };
                }, 100);
                this._stageItemsPools = new _memop.RecyclePool(function () {
                    return new _memop.RecyclePool(function () {
                        return {
                            model: null,
                            node: null,
                            ia: null,
                            effect: null,
                            defines: null,
                            technique: null,
                            sortKey: -1,
                            uniforms: null
                        };
                    }, 100);
                }, 16);
            }
            _createClass(Base, [
                {
                    key: '_resetTextuerUnit',
                    value: function _resetTextuerUnit() {
                        this._usedTextureUnits = 0;
                    }
                },
                {
                    key: '_allocTextureUnit',
                    value: function _allocTextureUnit() {
                        var device = this._device;
                        var unit = this._usedTextureUnits;
                        if (unit >= device._caps.maxTextureUnits) {
                            console.warn('Trying to use ' + unit + ' texture units while this GPU supports only ' + device._caps.maxTextureUnits);
                        }
                        this._usedTextureUnits += 1;
                        return unit;
                    }
                },
                {
                    key: '_registerStage',
                    value: function _registerStage(name, fn) {
                        this._stage2fn[name] = fn;
                    }
                },
                {
                    key: 'clear',
                    value: function clear() {
                        this._programLib.clear();
                        this.reset();
                    }
                },
                {
                    key: 'reset',
                    value: function reset() {
                        this._viewPools.reset();
                        this._stageItemsPools.reset();
                    }
                },
                {
                    key: '_requestView',
                    value: function _requestView() {
                        return this._viewPools.add();
                    }
                },
                {
                    key: '_render',
                    value: function _render(view, scene) {
                        var device = this._device;
                        device.setFrameBuffer(view._framebuffer);
                        device.setViewport(view._rect.x, view._rect.y, view._rect.w, view._rect.h);
                        var clearOpts = {};
                        if (view._clearFlags & _enums2.default.CLEAR_COLOR) {
                            clearOpts.color = [
                                view._color.r,
                                view._color.g,
                                view._color.b,
                                view._color.a
                            ];
                        }
                        if (view._clearFlags & _enums2.default.CLEAR_DEPTH) {
                            clearOpts.depth = view._depth;
                        }
                        if (view._clearFlags & _enums2.default.CLEAR_STENCIL) {
                            clearOpts.stencil = view._stencil;
                        }
                        device.clear(clearOpts);
                        this._drawItemsPools.reset();
                        for (var i = 0; i < scene._models.length; ++i) {
                            var model = scene._models.data[i];
                            if ((model._cullingMask & view._cullingMask) === 0) {
                                continue;
                            }
                            var drawItem = this._drawItemsPools.add();
                            model.extractDrawItem(drawItem);
                        }
                        _stageInfos.reset();
                        for (var _i = 0; _i < view._stages.length; ++_i) {
                            var stage = view._stages[_i];
                            var stageItems = this._stageItemsPools.add();
                            stageItems.reset();
                            for (var j = 0; j < this._drawItemsPools.length; ++j) {
                                var _drawItem = this._drawItemsPools.data[j];
                                var tech = _drawItem.effect.getTechnique(stage);
                                if (tech) {
                                    var stageItem = stageItems.add();
                                    stageItem.model = _drawItem.model;
                                    stageItem.node = _drawItem.node;
                                    stageItem.ia = _drawItem.ia;
                                    stageItem.effect = _drawItem.effect;
                                    stageItem.defines = _drawItem.defines;
                                    stageItem.technique = tech;
                                    stageItem.sortKey = -1;
                                    stageItem.uniforms = _drawItem.uniforms;
                                }
                            }
                            var stageInfo = _stageInfos.add();
                            stageInfo.stage = stage;
                            stageInfo.items = stageItems;
                        }
                        for (var _i2 = 0; _i2 < _stageInfos.length; ++_i2) {
                            var info = _stageInfos.data[_i2];
                            var fn = this._stage2fn[info.stage];
                            fn(view, info.items);
                        }
                    }
                },
                {
                    key: '_setProperty',
                    value: function _setProperty(prop) {
                        var device = this._device;
                        var param = prop.value;
                        if (param === undefined) {
                            param = prop.val;
                        }
                        if (param === undefined) {
                            param = this._type2defaultValue[prop.type];
                        }
                        if (param === undefined) {
                            console.warn('Failed to set technique property ' + prop.name + ', value not found.');
                            return;
                        }
                        if (prop.type === _enums2.default.PARAM_TEXTURE_2D || prop.type === _enums2.default.PARAM_TEXTURE_CUBE) {
                            if (Array.isArray(param)) {
                                if (param.length > prop.count) {
                                    console.error('Failed to set property [' + prop.name + '] : The length of texture array [' + param.length + '] is bigger than [' + prop.count + '].');
                                    return;
                                }
                                var slots = _int64_pool.add();
                                for (var index = 0; index < param.length; ++index) {
                                    slots[index] = this._allocTextureUnit();
                                }
                                device.setTextureArray(prop.name, param, slots);
                            } else {
                                device.setTexture(prop.name, param, this._allocTextureUnit());
                            }
                        } else {
                            if (prop.directly) {
                                device.setUniformDirectly(prop.name, param);
                            } else {
                                device.setUniform(prop.name, param);
                            }
                        }
                    }
                },
                {
                    key: '_draw',
                    value: function _draw(item) {
                        var device = this._device;
                        var programLib = this._programLib;
                        var node = item.node, ia = item.ia, uniforms = item.uniforms, technique = item.technique, defines = item.defines, effect = item.effect;
                        _float2_pool.reset();
                        _float3_pool.reset();
                        _float4_pool.reset();
                        _float9_pool.reset();
                        _float16_pool.reset();
                        _float64_pool.reset();
                        _int2_pool.reset();
                        _int3_pool.reset();
                        _int4_pool.reset();
                        _int64_pool.reset();
                        node.getWorldMatrix(_m4_tmp);
                        device.setUniform('cc_matWorld', _vmath.mat4.array(_float16_pool.add(), _m4_tmp));
                        _vmath.mat4.invert(_m4_tmp, _m4_tmp);
                        _vmath.mat4.transpose(_m4_tmp, _m4_tmp);
                        device.setUniform('cc_matWorldIT', _vmath.mat4.array(_float16_pool.add(), _m4_tmp));
                        for (var i = 0; i < uniforms.length; i++) {
                            var typeUniforms = uniforms[i];
                            for (var key in typeUniforms) {
                                this._setProperty(typeUniforms[key]);
                            }
                        }
                        for (var _i3 = 0; _i3 < technique._passes.length; ++_i3) {
                            var pass = technique._passes[_i3];
                            var count = ia.count;
                            if (ia._vertexBuffer) {
                                device.setVertexBuffer(0, ia._vertexBuffer);
                            }
                            if (ia._indexBuffer) {
                                device.setIndexBuffer(ia._indexBuffer);
                            }
                            device.setPrimitiveType(ia._primitiveType);
                            var program = programLib.getProgram(pass._programName, defines, effect._name);
                            device.setProgram(program);
                            device.setCullMode(pass._cullMode);
                            if (pass._blend) {
                                device.enableBlend();
                                device.setBlendFuncSep(pass._blendSrc, pass._blendDst, pass._blendSrcAlpha, pass._blendDstAlpha);
                                device.setBlendEqSep(pass._blendEq, pass._blendAlphaEq);
                                device.setBlendColor32(pass._blendColor);
                            }
                            if (pass._depthTest) {
                                device.enableDepthTest();
                                device.setDepthFunc(pass._depthFunc);
                            }
                            if (pass._depthWrite) {
                                device.enableDepthWrite();
                            }
                            device.setStencilTest(pass._stencilTest);
                            if (pass._stencilTest === _gfx2.default.STENCIL_ENABLE) {
                                device.setStencilFuncFront(pass._stencilFuncFront, pass._stencilRefFront, pass._stencilMaskFront);
                                device.setStencilOpFront(pass._stencilFailOpFront, pass._stencilZFailOpFront, pass._stencilZPassOpFront, pass._stencilWriteMaskFront);
                                device.setStencilFuncBack(pass._stencilFuncBack, pass._stencilRefBack, pass._stencilMaskBack);
                                device.setStencilOpBack(pass._stencilFailOpBack, pass._stencilZFailOpBack, pass._stencilZPassOpBack, pass._stencilWriteMaskBack);
                            }
                            device.draw(ia._start, count);
                            this._resetTextuerUnit();
                        }
                    }
                }
            ]);
            return Base;
        }();
        exports.default = Base;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJhc2UtcmVuZGVyZXIuanMiLCIvVXNlcnMvZ2FveWFuZy9Xb3JrU3BhY2Uvam95Y2FzdGxlL2JpbmdvL2NsaWVudC9iaW5nby9lbmdpbmUvY29jb3MyZC9yZW5kZXJlci9jb3JlL2Jhc2UtcmVuZGVyZXIuanMiXSwibmFtZXMiOlsiX20zX3RtcCIsIm1hdDMiLCJjcmVhdGUiLCJfbTRfdG1wIiwibWF0NCIsIl9zdGFnZUluZm9zIiwiUmVjeWNsZVBvb2wiLCJzdGFnZSIsIml0ZW1zIiwiX2Zsb2F0Ml9wb29sIiwiRmxvYXQzMkFycmF5IiwiX2Zsb2F0M19wb29sIiwiX2Zsb2F0NF9wb29sIiwiX2Zsb2F0OV9wb29sIiwiX2Zsb2F0MTZfcG9vbCIsIl9mbG9hdDY0X3Bvb2wiLCJfaW50Ml9wb29sIiwiSW50MzJBcnJheSIsIl9pbnQzX3Bvb2wiLCJfaW50NF9wb29sIiwiX2ludDY0X3Bvb2wiLCJfdHlwZTJ1bmlmb3JtVmFsdWUiLCJlbnVtcyIsIlBBUkFNX0lOVCIsInZhbHVlIiwiUEFSQU1fSU5UMiIsInZlYzIiLCJhcnJheSIsImFkZCIsIlBBUkFNX0lOVDMiLCJ2ZWMzIiwiUEFSQU1fSU5UNCIsInZlYzQiLCJQQVJBTV9GTE9BVCIsIlBBUkFNX0ZMT0FUMiIsIlBBUkFNX0ZMT0FUMyIsIlBBUkFNX0ZMT0FUNCIsIlBBUkFNX0NPTE9SMyIsImNvbG9yMyIsIlBBUkFNX0NPTE9SNCIsImNvbG9yNCIsIlBBUkFNX01BVDIiLCJtYXQyIiwiUEFSQU1fTUFUMyIsIlBBUkFNX01BVDQiLCJfdHlwZTJ1bmlmb3JtQXJyYXlWYWx1ZSIsImZ1bmMiLCJ2YWx1ZXMiLCJyZXN1bHQiLCJpIiwibGVuZ3RoIiwic2l6ZSIsIngiLCJ5IiwidW5kZWZpbmVkIiwidiIsInoiLCJ3IiwiciIsImciLCJiIiwiYSIsInNldCIsIm0iLCJCYXNlIiwiZGV2aWNlIiwib3B0cyIsIl9kZXZpY2UiLCJfcHJvZ3JhbUxpYiIsIlByb2dyYW1MaWIiLCJfb3B0cyIsIl90eXBlMmRlZmF1bHRWYWx1ZSIsIlBBUkFNX1RFWFRVUkVfMkQiLCJkZWZhdWx0VGV4dHVyZSIsIlBBUkFNX1RFWFRVUkVfQ1VCRSIsImRlZmF1bHRUZXh0dXJlQ3ViZSIsIl9zdGFnZTJmbiIsIl91c2VkVGV4dHVyZVVuaXRzIiwiX3ZpZXdQb29scyIsIlZpZXciLCJfZHJhd0l0ZW1zUG9vbHMiLCJtb2RlbCIsIm5vZGUiLCJpYSIsImVmZmVjdCIsImRlZmluZXMiLCJ1bmlmb3JtcyIsIl9zdGFnZUl0ZW1zUG9vbHMiLCJ0ZWNobmlxdWUiLCJzb3J0S2V5IiwidW5pdCIsIl9jYXBzIiwibWF4VGV4dHVyZVVuaXRzIiwiY29uc29sZSIsIndhcm4iLCJuYW1lIiwiZm4iLCJjbGVhciIsInJlc2V0IiwidmlldyIsInNjZW5lIiwic2V0RnJhbWVCdWZmZXIiLCJfZnJhbWVidWZmZXIiLCJzZXRWaWV3cG9ydCIsIl9yZWN0IiwiaCIsImNsZWFyT3B0cyIsIl9jbGVhckZsYWdzIiwiQ0xFQVJfQ09MT1IiLCJjb2xvciIsIl9jb2xvciIsIkNMRUFSX0RFUFRIIiwiZGVwdGgiLCJfZGVwdGgiLCJDTEVBUl9TVEVOQ0lMIiwic3RlbmNpbCIsIl9zdGVuY2lsIiwiX21vZGVscyIsImRhdGEiLCJfY3VsbGluZ01hc2siLCJkcmF3SXRlbSIsImV4dHJhY3REcmF3SXRlbSIsIl9zdGFnZXMiLCJzdGFnZUl0ZW1zIiwiaiIsInRlY2giLCJnZXRUZWNobmlxdWUiLCJzdGFnZUl0ZW0iLCJzdGFnZUluZm8iLCJpbmZvIiwicHJvcCIsInBhcmFtIiwidmFsIiwidHlwZSIsIkFycmF5IiwiaXNBcnJheSIsImNvdW50IiwiZXJyb3IiLCJzbG90cyIsImluZGV4IiwiX2FsbG9jVGV4dHVyZVVuaXQiLCJzZXRUZXh0dXJlQXJyYXkiLCJzZXRUZXh0dXJlIiwiZGlyZWN0bHkiLCJzZXRVbmlmb3JtRGlyZWN0bHkiLCJzZXRVbmlmb3JtIiwiaXRlbSIsInByb2dyYW1MaWIiLCJnZXRXb3JsZE1hdHJpeCIsImludmVydCIsInRyYW5zcG9zZSIsInR5cGVVbmlmb3JtcyIsImtleSIsIl9zZXRQcm9wZXJ0eSIsIl9wYXNzZXMiLCJwYXNzIiwiX3ZlcnRleEJ1ZmZlciIsInNldFZlcnRleEJ1ZmZlciIsIl9pbmRleEJ1ZmZlciIsInNldEluZGV4QnVmZmVyIiwic2V0UHJpbWl0aXZlVHlwZSIsIl9wcmltaXRpdmVUeXBlIiwicHJvZ3JhbSIsImdldFByb2dyYW0iLCJfcHJvZ3JhbU5hbWUiLCJfbmFtZSIsInNldFByb2dyYW0iLCJzZXRDdWxsTW9kZSIsIl9jdWxsTW9kZSIsIl9ibGVuZCIsImVuYWJsZUJsZW5kIiwic2V0QmxlbmRGdW5jU2VwIiwiX2JsZW5kU3JjIiwiX2JsZW5kRHN0IiwiX2JsZW5kU3JjQWxwaGEiLCJfYmxlbmREc3RBbHBoYSIsInNldEJsZW5kRXFTZXAiLCJfYmxlbmRFcSIsIl9ibGVuZEFscGhhRXEiLCJzZXRCbGVuZENvbG9yMzIiLCJfYmxlbmRDb2xvciIsIl9kZXB0aFRlc3QiLCJlbmFibGVEZXB0aFRlc3QiLCJzZXREZXB0aEZ1bmMiLCJfZGVwdGhGdW5jIiwiX2RlcHRoV3JpdGUiLCJlbmFibGVEZXB0aFdyaXRlIiwic2V0U3RlbmNpbFRlc3QiLCJfc3RlbmNpbFRlc3QiLCJnZngiLCJTVEVOQ0lMX0VOQUJMRSIsInNldFN0ZW5jaWxGdW5jRnJvbnQiLCJfc3RlbmNpbEZ1bmNGcm9udCIsIl9zdGVuY2lsUmVmRnJvbnQiLCJfc3RlbmNpbE1hc2tGcm9udCIsInNldFN0ZW5jaWxPcEZyb250IiwiX3N0ZW5jaWxGYWlsT3BGcm9udCIsIl9zdGVuY2lsWkZhaWxPcEZyb250IiwiX3N0ZW5jaWxaUGFzc09wRnJvbnQiLCJfc3RlbmNpbFdyaXRlTWFza0Zyb250Iiwic2V0U3RlbmNpbEZ1bmNCYWNrIiwiX3N0ZW5jaWxGdW5jQmFjayIsIl9zdGVuY2lsUmVmQmFjayIsIl9zdGVuY2lsTWFza0JhY2siLCJzZXRTdGVuY2lsT3BCYWNrIiwiX3N0ZW5jaWxGYWlsT3BCYWNrIiwiX3N0ZW5jaWxaRmFpbE9wQmFjayIsIl9zdGVuY2lsWlBhc3NPcEJhY2siLCJfc3RlbmNpbFdyaXRlTWFza0JhY2siLCJkcmF3IiwiX3N0YXJ0IiwiX3Jlc2V0VGV4dHVlclVuaXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7UUFFQSxJQUFBLENBQUEsT0FBQSxFQUFBO0FBQUEsWUFBQSxpQkFBQSxDQUFBLGNBQUEsQ0FBQSxVQUFBLEVBQUEsTUFBQSxFQUFBO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztRQUFBLElBQUEsTUFBQSxHQUFBLE9BQUEsQ0FBQSxVQUFBLENBQUE7UUFDQSxJQUFBLE1BQUEsR0FBQSxPQUFBLENBQUEsVUFBQSxDQUFBOztRQUNBLElBQUEsTUFBQSxHQUFBLE9BQUEsQ0FBQSxrQkFBQSxDQUFBO1FBQ0EsSUFBQSxXQUFBLEdBQUEsT0FBQSxDQUFBLGVBQUEsQ0FBQTs7UUFDQSxJQUFBLEtBQUEsR0FBQSxPQUFBLENBQUEsUUFBQSxDQUFBOztRQUNBLElBQUEsSUFBQSxHQUFBLE9BQUEsQ0FBQSxRQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1FBRUEsSUFBSUEsT0FBQUEsR0FBVUMsTUFBQUEsQ0FBQUEsSUFBQUEsQ0FBS0MsTUFBTEQsRUFBZDtRQUNBLElBQUlFLE9BQUFBLEdBQVVDLE1BQUFBLENBQUFBLElBQUFBLENBQUtGLE1BQUxFLEVBQWQ7UUFFQSxJQUFJQyxXQUFBQSxHQUFjLElBQUlDLE1BQUFBLENBQUFBLFdBQUosQ0FBZ0IsWUFBTTtBQUFBLFlBQ3RDLE9BQU87QUFBQSxnQkFDTEMsS0FBQUEsRUFBTyxJQURGO0FBQUEsZ0JBRUxDLEtBQUFBLEVBQU8sSUFGRjtBQUFBLGFBQVAsQ0FEc0M7QUFBQSxTQUF0QixFQUtmLENBTGUsQ0FBbEI7UUFPQSxJQUFJQyxZQUFBQSxHQUFlLElBQUlILE1BQUFBLENBQUFBLFdBQUosQ0FBZ0IsWUFBTTtBQUFBLFlBQ3ZDLE9BQU8sSUFBSUksWUFBSixDQUFpQixDQUFqQixDQUFQLENBRHVDO0FBQUEsU0FBdEIsRUFFaEIsQ0FGZ0IsQ0FBbkI7UUFJQSxJQUFJQyxZ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RmlEO0FBQUEseUJBdkN6QztBQUFBOzs7OzswQkFsT09uSjs7O0lBcFFyQixJQUFBLE9BQUEsRUFBQTtBQUFBLHdEQUFBO0FBQUEsS0FBQTtRQUNBLGlCQUFBLENBQUEsa0JBQUEsQ0FBQSxVQUFBLEVBQUEsWUFBQTtBQUFBLDREQUFBO0FBQUEsU0FBQSIsImZpbGUiOiJiYXNlLXJlbmRlcmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIFxuXG5pbXBvcnQgeyBSZWN5Y2xlUG9vbCB9IGZyb20gJy4uL21lbW9wJztcbmltcG9ydCBlbnVtcyBmcm9tICcuLi9lbnVtcyc7XG5pbXBvcnQgeyB2ZWMyLCB2ZWMzLCB2ZWM0LCBtYXQyLCBtYXQzLCBtYXQ0LCBjb2xvcjMsIGNvbG9yNCB9IGZyb20gJy4uLy4uL2NvcmUvdm1hdGgnO1xuaW1wb3J0IFByb2dyYW1MaWIgZnJvbSAnLi9wcm9ncmFtLWxpYic7XG5pbXBvcnQgVmlldyBmcm9tICcuL3ZpZXcnO1xuaW1wb3J0IGdmeCBmcm9tICcuLi9nZngnO1xuXG5sZXQgX20zX3RtcCA9IG1hdDMuY3JlYXRlKCk7XG5sZXQgX200X3RtcCA9IG1hdDQuY3JlYXRlKCk7XG5cbmxldCBfc3RhZ2VJbmZvcyA9IG5ldyBSZWN5Y2xlUG9vbCgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgc3RhZ2U6IG51bGwsXG4gICAgaXRlbXM6IG51bGwsXG4gIH07XG59LCA4KTtcblxubGV0IF9mbG9hdDJfcG9vbCA9IG5ldyBSZWN5Y2xlUG9vbCgoKSA9PiB7XG4gIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KDIpO1xufSwgOCk7XG5cbmxldCBfZmxvYXQzX3Bvb2wgPSBuZXcgUmVjeWNsZVBvb2woKCkgPT4ge1xuICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheSgzKTtcbn0sIDgpO1xuXG5sZXQgX2Zsb2F0NF9wb29sID0gbmV3IFJlY3ljbGVQb29sKCgpID0+IHtcbiAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoNCk7XG59LCA4KTtcblxubGV0IF9mbG9hdDlfcG9vbCA9IG5ldyBSZWN5Y2xlUG9vbCgoKSA9PiB7XG4gIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KDkpO1xufSwgOCk7XG5cbmxldCBfZmxvYXQxNl9wb29sID0gbmV3IFJlY3ljbGVQb29sKCgpID0+IHtcbiAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoMTYpO1xufSwgOCk7XG5cbmxldCBfZmxvYXQ2NF9wb29sID0gbmV3IFJlY3ljbGVQb29sKCgpID0+IHtcbiAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoNjQpO1xufSwgOCk7XG5cbmxldCBfaW50Ml9wb29sID0gbmV3IFJlY3ljbGVQb29sKCgpID0+IHtcbiAgcmV0dXJuIG5ldyBJbnQzMkFycmF5KDIpO1xufSwgOCk7XG5cbmxldCBfaW50M19wb29sID0gbmV3IFJlY3ljbGVQb29sKCgpID0+IHtcbiAgcmV0dXJuIG5ldyBJbnQzMkFycmF5KDMpO1xufSwgOCk7XG5cbmxldCBfaW50NF9wb29sID0gbmV3IFJlY3ljbGVQb29sKCgpID0+IHtcbiAgcmV0dXJuIG5ldyBJbnQzMkFycmF5KDQpO1xufSwgOCk7XG5cbmxldCBfaW50NjRfcG9vbCA9IG5ldyBSZWN5Y2xlUG9vbCgoKSA9PiB7XG4gIHJldHVybiBuZXcgSW50MzJBcnJheSg2NCk7XG59LCA4KTtcblxubGV0IF90eXBlMnVuaWZvcm1WYWx1ZSA9IHtcbiAgW2VudW1zLlBBUkFNX0lOVF06IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcblxuICBbZW51bXMuUEFSQU1fSU5UMl06IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiB2ZWMyLmFycmF5KF9pbnQyX3Bvb2wuYWRkKCksIHZhbHVlKTtcbiAgfSxcblxuICBbZW51bXMuUEFSQU1fSU5UM106IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiB2ZWMzLmFycmF5KF9pbnQzX3Bvb2wuYWRkKCksIHZhbHVlKTtcbiAgfSxcblxuICBbZW51bXMuUEFSQU1fSU5UNF06IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiB2ZWM0LmFycmF5KF9pbnQ0X3Bvb2wuYWRkKCksIHZhbHVlKTtcbiAgfSxcblxuICBbZW51bXMuUEFSQU1fRkxPQVRdOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG5cbiAgW2VudW1zLlBBUkFNX0ZMT0FUMl06IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiB2ZWMyLmFycmF5KF9mbG9hdDJfcG9vbC5hZGQoKSwgdmFsdWUpO1xuICB9LFxuXG4gIFtlbnVtcy5QQVJBTV9GTE9BVDNdOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gdmVjMy5hcnJheShfZmxvYXQzX3Bvb2wuYWRkKCksIHZhbHVlKTtcbiAgfSxcblxuICBbZW51bXMuUEFSQU1fRkxPQVQ0XTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZlYzQuYXJyYXkoX2Zsb2F0NF9wb29sLmFkZCgpLCB2YWx1ZSk7XG4gIH0sXG5cbiAgW2VudW1zLlBBUkFNX0NPTE9SM106IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBjb2xvcjMuYXJyYXkoX2Zsb2F0M19wb29sLmFkZCgpLCB2YWx1ZSk7XG4gIH0sXG5cbiAgW2VudW1zLlBBUkFNX0NPTE9SNF06IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBjb2xvcjQuYXJyYXkoX2Zsb2F0NF9wb29sLmFkZCgpLCB2YWx1ZSk7XG4gIH0sXG5cbiAgW2VudW1zLlBBUkFNX01BVDJdOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gbWF0Mi5hcnJheShfZmxvYXQ0X3Bvb2wuYWRkKCksIHZhbHVlKTtcbiAgfSxcblxuICBbZW51bXMuUEFSQU1fTUFUM106IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBtYXQzLmFycmF5KF9mbG9hdDlfcG9vbC5hZGQoKSwgdmFsdWUpO1xuICB9LFxuXG4gIFtlbnVtcy5QQVJBTV9NQVQ0XTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIG1hdDQuYXJyYXkoX2Zsb2F0MTZfcG9vbC5hZGQoKSwgdmFsdWUpO1xuICB9LFxuXG4gIC8vIFtlbnVtcy5QQVJBTV9URVhUVVJFXzJEXTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gIC8vIH0sXG5cbiAgLy8gW2VudW1zLlBBUkFNX1RFWFRVUkVfQ1VCRV06IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAvLyB9LFxufTtcblxubGV0IF90eXBlMnVuaWZvcm1BcnJheVZhbHVlID0ge1xuICBbZW51bXMuUEFSQU1fSU5UXToge1xuICAgIGZ1bmMgKHZhbHVlcykge1xuICAgICAgbGV0IHJlc3VsdCA9IF9pbnQ2NF9wb29sLmFkZCgpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcmVzdWx0W2ldID0gdmFsdWVzW2ldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIHNpemU6IDEsXG4gIH0sXG5cbiAgW2VudW1zLlBBUkFNX0lOVDJdOiB7XG4gICAgZnVuYyAodmFsdWVzKSB7XG4gICAgICBsZXQgcmVzdWx0ID0gX2ludDY0X3Bvb2wuYWRkKCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICByZXN1bHRbMiAqIGldID0gdmFsdWVzW2ldLng7XG4gICAgICAgIHJlc3VsdFsyICogaSArIDFdID0gdmFsdWVzW2ldLnk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgc2l6ZTogMixcbiAgfSxcblxuICBbZW51bXMuUEFSQU1fSU5UM106IHtcbiAgICBmdW5jOiB1bmRlZmluZWQsXG4gICAgc2l6ZTogMyxcbiAgfSxcblxuICBbZW51bXMuUEFSQU1fSU5UNF06IHtcbiAgICBmdW5jICh2YWx1ZXMpIHtcbiAgICAgIGxldCByZXN1bHQgPSBfaW50NjRfcG9vbC5hZGQoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGxldCB2ID0gdmFsdWVzW2ldO1xuICAgICAgICByZXN1bHRbNCAqIGldID0gdi54O1xuICAgICAgICByZXN1bHRbNCAqIGkgKyAxXSA9IHYueTtcbiAgICAgICAgcmVzdWx0WzQgKiBpICsgMl0gPSB2Lno7XG4gICAgICAgIHJlc3VsdFs0ICogaSArIDNdID0gdi53O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIHNpemU6IDQsXG4gIH0sXG5cbiAgW2VudW1zLlBBUkFNX0ZMT0FUXToge1xuICAgIGZ1bmMgKHZhbHVlcykge1xuICAgICAgbGV0IHJlc3VsdCA9IF9mbG9hdDY0X3Bvb2wuYWRkKCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICByZXN1bHRbaV0gPSB2YWx1ZXNbaV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgc2l6ZTogMVxuICB9LFxuXG4gIFtlbnVtcy5QQVJBTV9GTE9BVDJdOiB7XG4gICAgZnVuYyAodmFsdWVzKSB7XG4gICAgICBsZXQgcmVzdWx0ID0gX2Zsb2F0NjRfcG9vbC5hZGQoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHJlc3VsdFsyICogaV0gPSB2YWx1ZXNbaV0ueDtcbiAgICAgICAgcmVzdWx0WzIgKiBpICsgMV0gPSB2YWx1ZXNbaV0ueTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICBzaXplOiAyLFxuICB9LFxuXG4gIFtlbnVtcy5QQVJBTV9GTE9BVDNdOiB7XG4gICAgZnVuYzogdW5kZWZpbmVkLFxuICAgIHNpemU6IDMsXG4gIH0sXG5cbiAgW2VudW1zLlBBUkFNX0ZMT0FUNF06IHtcbiAgICBmdW5jICh2YWx1ZXMpIHtcbiAgICAgIGxldCByZXN1bHQgPSBfZmxvYXQ2NF9wb29sLmFkZCgpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgbGV0IHYgPSB2YWx1ZXNbaV07XG4gICAgICAgIHJlc3VsdFs0ICogaV0gPSB2Lng7XG4gICAgICAgIHJlc3VsdFs0ICogaSArIDFdID0gdi55O1xuICAgICAgICByZXN1bHRbNCAqIGkgKyAyXSA9IHYuejtcbiAgICAgICAgcmVzdWx0WzQgKiBpICsgM10gPSB2Lnc7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgc2l6ZTogNCxcbiAgfSxcblxuICBbZW51bXMuUEFSQU1fQ09MT1IzXToge1xuICAgIGZ1bmM6IHVuZGVmaW5lZCxcbiAgICBzaXplOiAzLFxuICB9LFxuXG4gIFtlbnVtcy5QQVJBTV9DT0xPUjRdOiB7XG4gICAgZnVuYyAodmFsdWVzKSB7XG4gICAgICBsZXQgcmVzdWx0ID0gX2Zsb2F0NjRfcG9vbC5hZGQoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGxldCB2ID0gdmFsdWVzW2ldO1xuICAgICAgICByZXN1bHRbNCAqIGldID0gdi5yO1xuICAgICAgICByZXN1bHRbNCAqIGkgKyAxXSA9IHYuZztcbiAgICAgICAgcmVzdWx0WzQgKiBpICsgMl0gPSB2LmI7XG4gICAgICAgIHJlc3VsdFs0ICogaSArIDNdID0gdi5hO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIHNpemU6IDQsXG4gIH0sXG5cbiAgW2VudW1zLlBBUkFNX01BVDJdOiB7XG4gICAgZnVuYyAodmFsdWVzKSB7XG4gICAgICBsZXQgcmVzdWx0ID0gX2Zsb2F0NjRfcG9vbC5hZGQoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGxldCB2ID0gdmFsdWVzW2ldO1xuICAgICAgICByZXN1bHQuc2V0KHYubSwgNCAqIGkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIHNpemU6IDRcbiAgfSxcblxuICBbZW51bXMuUEFSQU1fTUFUM106IHtcbiAgICBmdW5jOiB1bmRlZmluZWQsXG4gICAgc2l6ZTogOVxuICB9LFxuXG5cbiAgW2VudW1zLlBBUkFNX01BVDRdOiB7XG4gICAgZnVuYyAodmFsdWVzKSB7XG4gICAgICBsZXQgcmVzdWx0ID0gX2Zsb2F0NjRfcG9vbC5hZGQoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGxldCB2ID0gdmFsdWVzW2ldO1xuICAgICAgICByZXN1bHQuc2V0KHYubSwgMTYgKiBpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICBzaXplOiAxNlxuICB9LFxuXG4gIC8vIFtlbnVtcy5QQVJBTV9URVhUVVJFXzJEXTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gIC8vIH0sXG5cbiAgLy8gW2VudW1zLlBBUkFNX1RFWFRVUkVfQ1VCRV06IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAvLyB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFzZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2dmeC5EZXZpY2V9IGRldmljZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICAgKiBAcGFyYW0ge2dmeC5UZXh0dXJlMkR9IG9wdHMuZGVmYXVsdFRleHR1cmVcbiAgICogQHBhcmFtIHtnZnguVGV4dHVyZUN1YmV9IG9wdHMuZGVmYXVsdFRleHR1cmVDdWJlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihkZXZpY2UsIG9wdHMpIHtcbiAgICB0aGlzLl9kZXZpY2UgPSBkZXZpY2U7XG4gICAgdGhpcy5fcHJvZ3JhbUxpYiA9IG5ldyBQcm9ncmFtTGliKGRldmljZSk7XG4gICAgdGhpcy5fb3B0cyA9IG9wdHM7XG4gICAgdGhpcy5fdHlwZTJkZWZhdWx0VmFsdWUgPSB7XG4gICAgICBbZW51bXMuUEFSQU1fSU5UXTogMCxcbiAgICAgIFtlbnVtcy5QQVJBTV9JTlQyXTogdmVjMi5jcmVhdGUoMCwgMCksXG4gICAgICBbZW51bXMuUEFSQU1fSU5UM106IHZlYzMuY3JlYXRlKDAsIDAsIDApLFxuICAgICAgW2VudW1zLlBBUkFNX0lOVDRdOiB2ZWM0LmNyZWF0ZSgwLCAwLCAwLCAwKSxcbiAgICAgIFtlbnVtcy5QQVJBTV9GTE9BVF06IDAuMCxcbiAgICAgIFtlbnVtcy5QQVJBTV9GTE9BVDJdOiB2ZWMyLmNyZWF0ZSgwLCAwKSxcbiAgICAgIFtlbnVtcy5QQVJBTV9GTE9BVDNdOiB2ZWMzLmNyZWF0ZSgwLCAwLCAwKSxcbiAgICAgIFtlbnVtcy5QQVJBTV9GTE9BVDRdOiB2ZWM0LmNyZWF0ZSgwLCAwLCAwLCAwKSxcbiAgICAgIFtlbnVtcy5QQVJBTV9DT0xPUjNdOiBjb2xvcjMuY3JlYXRlKDAsIDAsIDApLFxuICAgICAgW2VudW1zLlBBUkFNX0NPTE9SNF06IGNvbG9yNC5jcmVhdGUoMCwgMCwgMCwgMSksXG4gICAgICBbZW51bXMuUEFSQU1fTUFUMl06IG1hdDIuY3JlYXRlKCksXG4gICAgICBbZW51bXMuUEFSQU1fTUFUM106IG1hdDMuY3JlYXRlKCksXG4gICAgICBbZW51bXMuUEFSQU1fTUFUNF06IG1hdDQuY3JlYXRlKCksXG4gICAgICBbZW51bXMuUEFSQU1fVEVYVFVSRV8yRF06IG9wdHMuZGVmYXVsdFRleHR1cmUsXG4gICAgICBbZW51bXMuUEFSQU1fVEVYVFVSRV9DVUJFXTogb3B0cy5kZWZhdWx0VGV4dHVyZUN1YmUsXG4gICAgfTtcbiAgICB0aGlzLl9zdGFnZTJmbiA9IHt9O1xuICAgIHRoaXMuX3VzZWRUZXh0dXJlVW5pdHMgPSAwO1xuXG4gICAgdGhpcy5fdmlld1Bvb2xzID0gbmV3IFJlY3ljbGVQb29sKCgpID0+IHtcbiAgICAgIHJldHVybiBuZXcgVmlldygpO1xuICAgIH0sIDgpO1xuXG4gICAgdGhpcy5fZHJhd0l0ZW1zUG9vbHMgPSBuZXcgUmVjeWNsZVBvb2woKCkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbW9kZWw6IG51bGwsXG4gICAgICAgIG5vZGU6IG51bGwsXG4gICAgICAgIGlhOiBudWxsLFxuICAgICAgICBlZmZlY3Q6IG51bGwsXG4gICAgICAgIGRlZmluZXM6IG51bGwsXG4gICAgICAgIHVuaWZvcm1zOiBudWxsXG4gICAgICB9O1xuICAgIH0sIDEwMCk7XG5cbiAgICB0aGlzLl9zdGFnZUl0ZW1zUG9vbHMgPSBuZXcgUmVjeWNsZVBvb2woKCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBSZWN5Y2xlUG9vbCgoKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbW9kZWw6IG51bGwsXG4gICAgICAgICAgbm9kZTogbnVsbCxcbiAgICAgICAgICBpYTogbnVsbCxcbiAgICAgICAgICBlZmZlY3Q6IG51bGwsXG4gICAgICAgICAgZGVmaW5lczogbnVsbCxcbiAgICAgICAgICB0ZWNobmlxdWU6IG51bGwsXG4gICAgICAgICAgc29ydEtleTogLTEsXG4gICAgICAgICAgdW5pZm9ybXM6IG51bGxcbiAgICAgICAgfTtcbiAgICAgIH0sIDEwMCk7XG4gICAgfSwgMTYpO1xuICB9XG5cbiAgX3Jlc2V0VGV4dHVlclVuaXQoKSB7XG4gICAgdGhpcy5fdXNlZFRleHR1cmVVbml0cyA9IDA7XG4gIH1cblxuICBfYWxsb2NUZXh0dXJlVW5pdCgpIHtcbiAgICBjb25zdCBkZXZpY2UgPSB0aGlzLl9kZXZpY2U7XG5cbiAgICBsZXQgdW5pdCA9IHRoaXMuX3VzZWRUZXh0dXJlVW5pdHM7XG4gICAgaWYgKHVuaXQgPj0gZGV2aWNlLl9jYXBzLm1heFRleHR1cmVVbml0cykge1xuICAgICAgY29uc29sZS53YXJuKGBUcnlpbmcgdG8gdXNlICR7dW5pdH0gdGV4dHVyZSB1bml0cyB3aGlsZSB0aGlzIEdQVSBzdXBwb3J0cyBvbmx5ICR7ZGV2aWNlLl9jYXBzLm1heFRleHR1cmVVbml0c31gKTtcbiAgICB9XG5cbiAgICB0aGlzLl91c2VkVGV4dHVyZVVuaXRzICs9IDE7XG4gICAgcmV0dXJuIHVuaXQ7XG4gIH1cblxuICBfcmVnaXN0ZXJTdGFnZShuYW1lLCBmbikge1xuICAgIHRoaXMuX3N0YWdlMmZuW25hbWVdID0gZm47XG4gIH1cblxuICBjbGVhciAoKSB7XG4gICAgdGhpcy5fcHJvZ3JhbUxpYi5jbGVhcigpO1xuICAgIHRoaXMucmVzZXQoKTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuX3ZpZXdQb29scy5yZXNldCgpO1xuICAgIHRoaXMuX3N0YWdlSXRlbXNQb29scy5yZXNldCgpO1xuICB9XG5cbiAgX3JlcXVlc3RWaWV3KCkge1xuICAgIHJldHVybiB0aGlzLl92aWV3UG9vbHMuYWRkKCk7XG4gIH1cblxuICBfcmVuZGVyKHZpZXcsIHNjZW5lKSB7XG4gICAgY29uc3QgZGV2aWNlID0gdGhpcy5fZGV2aWNlO1xuXG4gICAgLy8gc2V0dXAgZnJhbWVidWZmZXJcbiAgICBkZXZpY2Uuc2V0RnJhbWVCdWZmZXIodmlldy5fZnJhbWVidWZmZXIpO1xuXG4gICAgLy8gc2V0dXAgdmlld3BvcnRcbiAgICBkZXZpY2Uuc2V0Vmlld3BvcnQoXG4gICAgICB2aWV3Ll9yZWN0LngsXG4gICAgICB2aWV3Ll9yZWN0LnksXG4gICAgICB2aWV3Ll9yZWN0LncsXG4gICAgICB2aWV3Ll9yZWN0LmhcbiAgICApO1xuXG4gICAgLy8gc2V0dXAgY2xlYXJcbiAgICBsZXQgY2xlYXJPcHRzID0ge307XG4gICAgaWYgKHZpZXcuX2NsZWFyRmxhZ3MgJiBlbnVtcy5DTEVBUl9DT0xPUikge1xuICAgICAgY2xlYXJPcHRzLmNvbG9yID0gW1xuICAgICAgICB2aWV3Ll9jb2xvci5yLFxuICAgICAgICB2aWV3Ll9jb2xvci5nLFxuICAgICAgICB2aWV3Ll9jb2xvci5iLFxuICAgICAgICB2aWV3Ll9jb2xvci5hXG4gICAgICBdO1xuICAgIH1cbiAgICBpZiAodmlldy5fY2xlYXJGbGFncyAmIGVudW1zLkNMRUFSX0RFUFRIKSB7XG4gICAgICBjbGVhck9wdHMuZGVwdGggPSB2aWV3Ll9kZXB0aDtcbiAgICB9XG4gICAgaWYgKHZpZXcuX2NsZWFyRmxhZ3MgJiBlbnVtcy5DTEVBUl9TVEVOQ0lMKSB7XG4gICAgICBjbGVhck9wdHMuc3RlbmNpbCA9IHZpZXcuX3N0ZW5jaWw7XG4gICAgfVxuICAgIGRldmljZS5jbGVhcihjbGVhck9wdHMpO1xuXG4gICAgLy8gZ2V0IGFsbCBkcmF3IGl0ZW1zXG4gICAgdGhpcy5fZHJhd0l0ZW1zUG9vbHMucmVzZXQoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2NlbmUuX21vZGVscy5sZW5ndGg7ICsraSkge1xuICAgICAgbGV0IG1vZGVsID0gc2NlbmUuX21vZGVscy5kYXRhW2ldO1xuXG4gICAgICAvLyBmaWx0ZXIgbW9kZWwgYnkgdmlld1xuICAgICAgaWYgKChtb2RlbC5fY3VsbGluZ01hc2sgJiB2aWV3Ll9jdWxsaW5nTWFzaykgPT09IDApIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGxldCBkcmF3SXRlbSA9IHRoaXMuX2RyYXdJdGVtc1Bvb2xzLmFkZCgpO1xuICAgICAgbW9kZWwuZXh0cmFjdERyYXdJdGVtKGRyYXdJdGVtKTtcbiAgICB9XG5cbiAgICAvLyBkaXNwYXRjaCBkcmF3IGl0ZW1zIHRvIGRpZmZlcmVudCBzdGFnZVxuICAgIF9zdGFnZUluZm9zLnJlc2V0KCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZpZXcuX3N0YWdlcy5sZW5ndGg7ICsraSkge1xuICAgICAgbGV0IHN0YWdlID0gdmlldy5fc3RhZ2VzW2ldO1xuICAgICAgbGV0IHN0YWdlSXRlbXMgPSB0aGlzLl9zdGFnZUl0ZW1zUG9vbHMuYWRkKCk7XG4gICAgICBzdGFnZUl0ZW1zLnJlc2V0KCk7XG5cbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5fZHJhd0l0ZW1zUG9vbHMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgbGV0IGRyYXdJdGVtID0gdGhpcy5fZHJhd0l0ZW1zUG9vbHMuZGF0YVtqXTtcbiAgICAgICAgbGV0IHRlY2ggPSBkcmF3SXRlbS5lZmZlY3QuZ2V0VGVjaG5pcXVlKHN0YWdlKTtcblxuICAgICAgICBpZiAodGVjaCkge1xuICAgICAgICAgIGxldCBzdGFnZUl0ZW0gPSBzdGFnZUl0ZW1zLmFkZCgpO1xuICAgICAgICAgIHN0YWdlSXRlbS5tb2RlbCA9IGRyYXdJdGVtLm1vZGVsO1xuICAgICAgICAgIHN0YWdlSXRlbS5ub2RlID0gZHJhd0l0ZW0ubm9kZTtcbiAgICAgICAgICBzdGFnZUl0ZW0uaWEgPSBkcmF3SXRlbS5pYTtcbiAgICAgICAgICBzdGFnZUl0ZW0uZWZmZWN0ID0gZHJhd0l0ZW0uZWZmZWN0O1xuICAgICAgICAgIHN0YWdlSXRlbS5kZWZpbmVzID0gZHJhd0l0ZW0uZGVmaW5lcztcbiAgICAgICAgICBzdGFnZUl0ZW0udGVjaG5pcXVlID0gdGVjaDtcbiAgICAgICAgICBzdGFnZUl0ZW0uc29ydEtleSA9IC0xO1xuICAgICAgICAgIHN0YWdlSXRlbS51bmlmb3JtcyA9IGRyYXdJdGVtLnVuaWZvcm1zO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxldCBzdGFnZUluZm8gPSBfc3RhZ2VJbmZvcy5hZGQoKTtcbiAgICAgIHN0YWdlSW5mby5zdGFnZSA9IHN0YWdlO1xuICAgICAgc3RhZ2VJbmZvLml0ZW1zID0gc3RhZ2VJdGVtcztcbiAgICB9XG5cbiAgICAvLyByZW5kZXIgc3RhZ2VzXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBfc3RhZ2VJbmZvcy5sZW5ndGg7ICsraSkge1xuICAgICAgbGV0IGluZm8gPSBfc3RhZ2VJbmZvcy5kYXRhW2ldO1xuICAgICAgbGV0IGZuID0gdGhpcy5fc3RhZ2UyZm5baW5mby5zdGFnZV07XG5cbiAgICAgIGZuKHZpZXcsIGluZm8uaXRlbXMpO1xuICAgIH1cbiAgfVxuXG4gIF9zZXRQcm9wZXJ0eSAocHJvcCkge1xuICAgIGNvbnN0IGRldmljZSA9IHRoaXMuX2RldmljZTtcbiAgICBsZXQgcGFyYW0gPSBwcm9wLnZhbHVlO1xuXG4gICAgaWYgKHBhcmFtID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtID0gcHJvcC52YWw7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtID0gdGhpcy5fdHlwZTJkZWZhdWx0VmFsdWVbcHJvcC50eXBlXTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc29sZS53YXJuKGBGYWlsZWQgdG8gc2V0IHRlY2huaXF1ZSBwcm9wZXJ0eSAke3Byb3AubmFtZX0sIHZhbHVlIG5vdCBmb3VuZC5gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBwcm9wLnR5cGUgPT09IGVudW1zLlBBUkFNX1RFWFRVUkVfMkQgfHxcbiAgICAgIHByb3AudHlwZSA9PT0gZW51bXMuUEFSQU1fVEVYVFVSRV9DVUJFXG4gICAgKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShwYXJhbSkpIHtcbiAgICAgICAgaWYgKHBhcmFtLmxlbmd0aCA+IHByb3AuY291bnQpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gc2V0IHByb3BlcnR5IFske3Byb3AubmFtZX1dIDogVGhlIGxlbmd0aCBvZiB0ZXh0dXJlIGFycmF5IFske3BhcmFtLmxlbmd0aH1dIGlzIGJpZ2dlciB0aGFuIFske3Byb3AuY291bnR9XS5gKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNsb3RzID0gX2ludDY0X3Bvb2wuYWRkKCk7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBwYXJhbS5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgICBzbG90c1tpbmRleF0gPSB0aGlzLl9hbGxvY1RleHR1cmVVbml0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZGV2aWNlLnNldFRleHR1cmVBcnJheShwcm9wLm5hbWUsIHBhcmFtLCBzbG90cyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZXZpY2Uuc2V0VGV4dHVyZShwcm9wLm5hbWUsIHBhcmFtLCB0aGlzLl9hbGxvY1RleHR1cmVVbml0KCkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvcC5kaXJlY3RseSkge1xuICAgICAgICBkZXZpY2Uuc2V0VW5pZm9ybURpcmVjdGx5KHByb3AubmFtZSwgcGFyYW0pO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGRldmljZS5zZXRVbmlmb3JtKHByb3AubmFtZSwgcGFyYW0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9kcmF3KGl0ZW0pIHtcbiAgICBjb25zdCBkZXZpY2UgPSB0aGlzLl9kZXZpY2U7XG4gICAgY29uc3QgcHJvZ3JhbUxpYiA9IHRoaXMuX3Byb2dyYW1MaWI7XG4gICAgY29uc3QgeyBub2RlLCBpYSwgdW5pZm9ybXMsIHRlY2huaXF1ZSwgZGVmaW5lcywgZWZmZWN0IH0gPSBpdGVtO1xuXG4gICAgLy8gcmVzZXQgdGhlIHBvb2xcbiAgICAvLyBOT1RFOiB3ZSBjYW4gdXNlIGRyYXdDb3VudGVyIG9wdGltaXplIHRoaXNcbiAgICAvLyBUT0RPOiBzaG91bGQgYmUgY29uZmlndXJhYmxlXG4gICAgX2Zsb2F0Ml9wb29sLnJlc2V0KCk7XG4gICAgX2Zsb2F0M19wb29sLnJlc2V0KCk7XG4gICAgX2Zsb2F0NF9wb29sLnJlc2V0KCk7XG4gICAgX2Zsb2F0OV9wb29sLnJlc2V0KCk7XG4gICAgX2Zsb2F0MTZfcG9vbC5yZXNldCgpO1xuICAgIF9mbG9hdDY0X3Bvb2wucmVzZXQoKTtcbiAgICBfaW50Ml9wb29sLnJlc2V0KCk7XG4gICAgX2ludDNfcG9vbC5yZXNldCgpO1xuICAgIF9pbnQ0X3Bvb2wucmVzZXQoKTtcbiAgICBfaW50NjRfcG9vbC5yZXNldCgpO1xuXG4gICAgLy8gc2V0IGNvbW1vbiB1bmlmb3Jtc1xuICAgIC8vIFRPRE86IHRyeSBjb21taXQgdGhpcyBkZXBlbmRzIG9uIGVmZmVjdFxuICAgIC8vIHtcbiAgICBub2RlLmdldFdvcmxkTWF0cml4KF9tNF90bXApO1xuICAgIGRldmljZS5zZXRVbmlmb3JtKCdjY19tYXRXb3JsZCcsIG1hdDQuYXJyYXkoX2Zsb2F0MTZfcG9vbC5hZGQoKSwgX200X3RtcCkpO1xuXG4gICAgLy8gbGV0IHdxID0gbm9kZS5nZXRXb3JsZFJvdGF0aW9uKGNjLnF1YXQoKSk7XG4gICAgbWF0NC5pbnZlcnQoX200X3RtcCwgX200X3RtcCk7XG4gICAgbWF0NC50cmFuc3Bvc2UoX200X3RtcCwgX200X3RtcCk7XG4gICAgZGV2aWNlLnNldFVuaWZvcm0oJ2NjX21hdFdvcmxkSVQnLCBtYXQ0LmFycmF5KF9mbG9hdDE2X3Bvb2wuYWRkKCksIF9tNF90bXApKTtcbiAgICAvLyB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVuaWZvcm1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgdHlwZVVuaWZvcm1zID0gdW5pZm9ybXNbaV07XG4gICAgICBmb3IgKGxldCBrZXkgaW4gdHlwZVVuaWZvcm1zKSB7XG4gICAgICAgIHRoaXMuX3NldFByb3BlcnR5KHR5cGVVbmlmb3Jtc1trZXldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBmb3IgZWFjaCBwYXNzXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZWNobmlxdWUuX3Bhc3Nlcy5sZW5ndGg7ICsraSkge1xuICAgICAgbGV0IHBhc3MgPSB0ZWNobmlxdWUuX3Bhc3Nlc1tpXTtcbiAgICAgIGxldCBjb3VudCA9IGlhLmNvdW50O1xuXG4gICAgICAvLyBzZXQgdmVydGV4IGJ1ZmZlclxuICAgICAgaWYgKGlhLl92ZXJ0ZXhCdWZmZXIpIHtcbiAgICAgICAgZGV2aWNlLnNldFZlcnRleEJ1ZmZlcigwLCBpYS5fdmVydGV4QnVmZmVyKTtcbiAgICAgIH1cblxuICAgICAgLy8gc2V0IGluZGV4IGJ1ZmZlclxuICAgICAgaWYgKGlhLl9pbmRleEJ1ZmZlcikge1xuICAgICAgICBkZXZpY2Uuc2V0SW5kZXhCdWZmZXIoaWEuX2luZGV4QnVmZmVyKTtcbiAgICAgIH1cblxuICAgICAgLy8gc2V0IHByaW1pdGl2ZSB0eXBlXG4gICAgICBkZXZpY2Uuc2V0UHJpbWl0aXZlVHlwZShpYS5fcHJpbWl0aXZlVHlwZSk7XG5cbiAgICAgIC8vIHNldCBwcm9ncmFtXG4gICAgICBsZXQgcHJvZ3JhbSA9IHByb2dyYW1MaWIuZ2V0UHJvZ3JhbShwYXNzLl9wcm9ncmFtTmFtZSwgZGVmaW5lcywgZWZmZWN0Ll9uYW1lKTtcbiAgICAgIGRldmljZS5zZXRQcm9ncmFtKHByb2dyYW0pO1xuXG4gICAgICAvLyBjdWxsIG1vZGVcbiAgICAgIGRldmljZS5zZXRDdWxsTW9kZShwYXNzLl9jdWxsTW9kZSk7XG5cbiAgICAgIC8vIGJsZW5kXG4gICAgICBpZiAocGFzcy5fYmxlbmQpIHtcbiAgICAgICAgZGV2aWNlLmVuYWJsZUJsZW5kKCk7XG4gICAgICAgIGRldmljZS5zZXRCbGVuZEZ1bmNTZXAoXG4gICAgICAgICAgcGFzcy5fYmxlbmRTcmMsXG4gICAgICAgICAgcGFzcy5fYmxlbmREc3QsXG4gICAgICAgICAgcGFzcy5fYmxlbmRTcmNBbHBoYSxcbiAgICAgICAgICBwYXNzLl9ibGVuZERzdEFscGhhXG4gICAgICAgICk7XG4gICAgICAgIGRldmljZS5zZXRCbGVuZEVxU2VwKFxuICAgICAgICAgIHBhc3MuX2JsZW5kRXEsXG4gICAgICAgICAgcGFzcy5fYmxlbmRBbHBoYUVxXG4gICAgICAgICk7XG4gICAgICAgIGRldmljZS5zZXRCbGVuZENvbG9yMzIocGFzcy5fYmxlbmRDb2xvcik7XG4gICAgICB9XG5cbiAgICAgIC8vIGRlcHRoIHRlc3QgJiB3cml0ZVxuICAgICAgaWYgKHBhc3MuX2RlcHRoVGVzdCkge1xuICAgICAgICBkZXZpY2UuZW5hYmxlRGVwdGhUZXN0KCk7XG4gICAgICAgIGRldmljZS5zZXREZXB0aEZ1bmMocGFzcy5fZGVwdGhGdW5jKTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXNzLl9kZXB0aFdyaXRlKSB7XG4gICAgICAgIGRldmljZS5lbmFibGVEZXB0aFdyaXRlKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIHN0ZW5jaWxcbiAgICAgIGRldmljZS5zZXRTdGVuY2lsVGVzdChwYXNzLl9zdGVuY2lsVGVzdCk7XG4gICAgICBpZiAocGFzcy5fc3RlbmNpbFRlc3QgPT09IGdmeC5TVEVOQ0lMX0VOQUJMRSkge1xuICAgICAgICAvLyBmcm9udFxuICAgICAgICBkZXZpY2Uuc2V0U3RlbmNpbEZ1bmNGcm9udChcbiAgICAgICAgICBwYXNzLl9zdGVuY2lsRnVuY0Zyb250LFxuICAgICAgICAgIHBhc3MuX3N0ZW5jaWxSZWZGcm9udCxcbiAgICAgICAgICBwYXNzLl9zdGVuY2lsTWFza0Zyb250XG4gICAgICAgICk7XG4gICAgICAgIGRldmljZS5zZXRTdGVuY2lsT3BGcm9udChcbiAgICAgICAgICBwYXNzLl9zdGVuY2lsRmFpbE9wRnJvbnQsXG4gICAgICAgICAgcGFzcy5fc3RlbmNpbFpGYWlsT3BGcm9udCxcbiAgICAgICAgICBwYXNzLl9zdGVuY2lsWlBhc3NPcEZyb250LFxuICAgICAgICAgIHBhc3MuX3N0ZW5jaWxXcml0ZU1hc2tGcm9udFxuICAgICAgICApO1xuXG4gICAgICAgIC8vIGJhY2tcbiAgICAgICAgZGV2aWNlLnNldFN0ZW5jaWxGdW5jQmFjayhcbiAgICAgICAgICBwYXNzLl9zdGVuY2lsRnVuY0JhY2ssXG4gICAgICAgICAgcGFzcy5fc3RlbmNpbFJlZkJhY2ssXG4gICAgICAgICAgcGFzcy5fc3RlbmNpbE1hc2tCYWNrXG4gICAgICAgICk7XG4gICAgICAgIGRldmljZS5zZXRTdGVuY2lsT3BCYWNrKFxuICAgICAgICAgIHBhc3MuX3N0ZW5jaWxGYWlsT3BCYWNrLFxuICAgICAgICAgIHBhc3MuX3N0ZW5jaWxaRmFpbE9wQmFjayxcbiAgICAgICAgICBwYXNzLl9zdGVuY2lsWlBhc3NPcEJhY2ssXG4gICAgICAgICAgcGFzcy5fc3RlbmNpbFdyaXRlTWFza0JhY2tcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gZHJhdyBwYXNzXG4gICAgICBkZXZpY2UuZHJhdyhpYS5fc3RhcnQsIGNvdW50KTtcblxuICAgICAgdGhpcy5fcmVzZXRUZXh0dWVyVW5pdCgpO1xuICAgIH1cbiAgfVxufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF90eXBlMnVuaWZvcm1WYWx1ZTIsIF90eXBlMnVuaWZvcm1BcnJheVZhbDtcblxudmFyIF9tZW1vcCA9IHJlcXVpcmUoJy4uL21lbW9wJyk7XG5cbnZhciBfZW51bXMgPSByZXF1aXJlKCcuLi9lbnVtcycpO1xuXG52YXIgX2VudW1zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VudW1zKTtcblxudmFyIF92bWF0aCA9IHJlcXVpcmUoJy4uLy4uL2NvcmUvdm1hdGgnKTtcblxudmFyIF9wcm9ncmFtTGliID0gcmVxdWlyZSgnLi9wcm9ncmFtLWxpYicpO1xuXG52YXIgX3Byb2dyYW1MaWIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvZ3JhbUxpYik7XG5cbnZhciBfdmlldyA9IHJlcXVpcmUoJy4vdmlldycpO1xuXG52YXIgX3ZpZXcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmlldyk7XG5cbnZhciBfZ2Z4ID0gcmVxdWlyZSgnLi4vZ2Z4Jyk7XG5cbnZhciBfZ2Z4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dmeCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9IC8vIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiBcblxudmFyIF9tM190bXAgPSBfdm1hdGgubWF0My5jcmVhdGUoKTtcbnZhciBfbTRfdG1wID0gX3ZtYXRoLm1hdDQuY3JlYXRlKCk7XG5cbnZhciBfc3RhZ2VJbmZvcyA9IG5ldyBfbWVtb3AuUmVjeWNsZVBvb2woZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIHN0YWdlOiBudWxsLFxuICAgIGl0ZW1zOiBudWxsXG4gIH07XG59LCA4KTtcblxudmFyIF9mbG9hdDJfcG9vbCA9IG5ldyBfbWVtb3AuUmVjeWNsZVBvb2woZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheSgyKTtcbn0sIDgpO1xuXG52YXIgX2Zsb2F0M19wb29sID0gbmV3IF9tZW1vcC5SZWN5Y2xlUG9vbChmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KDMpO1xufSwgOCk7XG5cbnZhciBfZmxvYXQ0X3Bvb2wgPSBuZXcgX21lbW9wLlJlY3ljbGVQb29sKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoNCk7XG59LCA4KTtcblxudmFyIF9mbG9hdDlfcG9vbCA9IG5ldyBfbWVtb3AuUmVjeWNsZVBvb2woZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheSg5KTtcbn0sIDgpO1xuXG52YXIgX2Zsb2F0MTZfcG9vbCA9IG5ldyBfbWVtb3AuUmVjeWNsZVBvb2woZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheSgxNik7XG59LCA4KTtcblxudmFyIF9mbG9hdDY0X3Bvb2wgPSBuZXcgX21lbW9wLlJlY3ljbGVQb29sKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoNjQpO1xufSwgOCk7XG5cbnZhciBfaW50Ml9wb29sID0gbmV3IF9tZW1vcC5SZWN5Y2xlUG9vbChmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgSW50MzJBcnJheSgyKTtcbn0sIDgpO1xuXG52YXIgX2ludDNfcG9vbCA9IG5ldyBfbWVtb3AuUmVjeWNsZVBvb2woZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IEludDMyQXJyYXkoMyk7XG59LCA4KTtcblxudmFyIF9pbnQ0X3Bvb2wgPSBuZXcgX21lbW9wLlJlY3ljbGVQb29sKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBJbnQzMkFycmF5KDQpO1xufSwgOCk7XG5cbnZhciBfaW50NjRfcG9vbCA9IG5ldyBfbWVtb3AuUmVjeWNsZVBvb2woZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IEludDMyQXJyYXkoNjQpO1xufSwgOCk7XG5cbnZhciBfdHlwZTJ1bmlmb3JtVmFsdWUgPSAoX3R5cGUydW5pZm9ybVZhbHVlMiA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX3R5cGUydW5pZm9ybVZhbHVlMiwgX2VudW1zMi5kZWZhdWx0LlBBUkFNX0lOVCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn0pLCBfZGVmaW5lUHJvcGVydHkoX3R5cGUydW5pZm9ybVZhbHVlMiwgX2VudW1zMi5kZWZhdWx0LlBBUkFNX0lOVDIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gX3ZtYXRoLnZlYzIuYXJyYXkoX2ludDJfcG9vbC5hZGQoKSwgdmFsdWUpO1xufSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJ1bmlmb3JtVmFsdWUyLCBfZW51bXMyLmRlZmF1bHQuUEFSQU1fSU5UMywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiBfdm1hdGgudmVjMy5hcnJheShfaW50M19wb29sLmFkZCgpLCB2YWx1ZSk7XG59KSwgX2RlZmluZVByb3BlcnR5KF90eXBlMnVuaWZvcm1WYWx1ZTIsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9JTlQ0LCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIF92bWF0aC52ZWM0LmFycmF5KF9pbnQ0X3Bvb2wuYWRkKCksIHZhbHVlKTtcbn0pLCBfZGVmaW5lUHJvcGVydHkoX3R5cGUydW5pZm9ybVZhbHVlMiwgX2VudW1zMi5kZWZhdWx0LlBBUkFNX0ZMT0FULCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJ1bmlmb3JtVmFsdWUyLCBfZW51bXMyLmRlZmF1bHQuUEFSQU1fRkxPQVQyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIF92bWF0aC52ZWMyLmFycmF5KF9mbG9hdDJfcG9vbC5hZGQoKSwgdmFsdWUpO1xufSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJ1bmlmb3JtVmFsdWUyLCBfZW51bXMyLmRlZmF1bHQuUEFSQU1fRkxPQVQzLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIF92bWF0aC52ZWMzLmFycmF5KF9mbG9hdDNfcG9vbC5hZGQoKSwgdmFsdWUpO1xufSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJ1bmlmb3JtVmFsdWUyLCBfZW51bXMyLmRlZmF1bHQuUEFSQU1fRkxPQVQ0LCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIF92bWF0aC52ZWM0LmFycmF5KF9mbG9hdDRfcG9vbC5hZGQoKSwgdmFsdWUpO1xufSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJ1bmlmb3JtVmFsdWUyLCBfZW51bXMyLmRlZmF1bHQuUEFSQU1fQ09MT1IzLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIF92bWF0aC5jb2xvcjMuYXJyYXkoX2Zsb2F0M19wb29sLmFkZCgpLCB2YWx1ZSk7XG59KSwgX2RlZmluZVByb3BlcnR5KF90eXBlMnVuaWZvcm1WYWx1ZTIsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9DT0xPUjQsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gX3ZtYXRoLmNvbG9yNC5hcnJheShfZmxvYXQ0X3Bvb2wuYWRkKCksIHZhbHVlKTtcbn0pLCBfZGVmaW5lUHJvcGVydHkoX3R5cGUydW5pZm9ybVZhbHVlMiwgX2VudW1zMi5kZWZhdWx0LlBBUkFNX01BVDIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gX3ZtYXRoLm1hdDIuYXJyYXkoX2Zsb2F0NF9wb29sLmFkZCgpLCB2YWx1ZSk7XG59KSwgX2RlZmluZVByb3BlcnR5KF90eXBlMnVuaWZvcm1WYWx1ZTIsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9NQVQzLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIF92bWF0aC5tYXQzLmFycmF5KF9mbG9hdDlfcG9vbC5hZGQoKSwgdmFsdWUpO1xufSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJ1bmlmb3JtVmFsdWUyLCBfZW51bXMyLmRlZmF1bHQuUEFSQU1fTUFUNCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiBfdm1hdGgubWF0NC5hcnJheShfZmxvYXQxNl9wb29sLmFkZCgpLCB2YWx1ZSk7XG59KSwgX3R5cGUydW5pZm9ybVZhbHVlMik7XG5cbnZhciBfdHlwZTJ1bmlmb3JtQXJyYXlWYWx1ZSA9IChfdHlwZTJ1bmlmb3JtQXJyYXlWYWwgPSB7fSwgX2RlZmluZVByb3BlcnR5KF90eXBlMnVuaWZvcm1BcnJheVZhbCwgX2VudW1zMi5kZWZhdWx0LlBBUkFNX0lOVCwge1xuICBmdW5jOiBmdW5jdGlvbiBmdW5jKHZhbHVlcykge1xuICAgIHZhciByZXN1bHQgPSBfaW50NjRfcG9vbC5hZGQoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7ICsraSkge1xuICAgICAgcmVzdWx0W2ldID0gdmFsdWVzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuXG4gIHNpemU6IDFcbn0pLCBfZGVmaW5lUHJvcGVydHkoX3R5cGUydW5pZm9ybUFycmF5VmFsLCBfZW51bXMyLmRlZmF1bHQuUEFSQU1fSU5UMiwge1xuICBmdW5jOiBmdW5jdGlvbiBmdW5jKHZhbHVlcykge1xuICAgIHZhciByZXN1bHQgPSBfaW50NjRfcG9vbC5hZGQoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7ICsraSkge1xuICAgICAgcmVzdWx0WzIgKiBpXSA9IHZhbHVlc1tpXS54O1xuICAgICAgcmVzdWx0WzIgKiBpICsgMV0gPSB2YWx1ZXNbaV0ueTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcblxuICBzaXplOiAyXG59KSwgX2RlZmluZVByb3BlcnR5KF90eXBlMnVuaWZvcm1BcnJheVZhbCwgX2VudW1zMi5kZWZhdWx0LlBBUkFNX0lOVDMsIHtcbiAgZnVuYzogdW5kZWZpbmVkLFxuICBzaXplOiAzXG59KSwgX2RlZmluZVByb3BlcnR5KF90eXBlMnVuaWZvcm1BcnJheVZhbCwgX2VudW1zMi5kZWZhdWx0LlBBUkFNX0lOVDQsIHtcbiAgZnVuYzogZnVuY3Rpb24gZnVuYyh2YWx1ZXMpIHtcbiAgICB2YXIgcmVzdWx0ID0gX2ludDY0X3Bvb2wuYWRkKCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciB2ID0gdmFsdWVzW2ldO1xuICAgICAgcmVzdWx0WzQgKiBpXSA9IHYueDtcbiAgICAgIHJlc3VsdFs0ICogaSArIDFdID0gdi55O1xuICAgICAgcmVzdWx0WzQgKiBpICsgMl0gPSB2Lno7XG4gICAgICByZXN1bHRbNCAqIGkgKyAzXSA9IHYudztcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcblxuICBzaXplOiA0XG59KSwgX2RlZmluZVByb3BlcnR5KF90eXBlMnVuaWZvcm1BcnJheVZhbCwgX2VudW1zMi5kZWZhdWx0LlBBUkFNX0ZMT0FULCB7XG4gIGZ1bmM6IGZ1bmN0aW9uIGZ1bmModmFsdWVzKSB7XG4gICAgdmFyIHJlc3VsdCA9IF9mbG9hdDY0X3Bvb2wuYWRkKCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHJlc3VsdFtpXSA9IHZhbHVlc1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcblxuICBzaXplOiAxXG59KSwgX2RlZmluZVByb3BlcnR5KF90eXBlMnVuaWZvcm1BcnJheVZhbCwgX2VudW1zMi5kZWZhdWx0LlBBUkFNX0ZMT0FUMiwge1xuICBmdW5jOiBmdW5jdGlvbiBmdW5jKHZhbHVlcykge1xuICAgIHZhciByZXN1bHQgPSBfZmxvYXQ2NF9wb29sLmFkZCgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICByZXN1bHRbMiAqIGldID0gdmFsdWVzW2ldLng7XG4gICAgICByZXN1bHRbMiAqIGkgKyAxXSA9IHZhbHVlc1tpXS55O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuXG4gIHNpemU6IDJcbn0pLCBfZGVmaW5lUHJvcGVydHkoX3R5cGUydW5pZm9ybUFycmF5VmFsLCBfZW51bXMyLmRlZmF1bHQuUEFSQU1fRkxPQVQzLCB7XG4gIGZ1bmM6IHVuZGVmaW5lZCxcbiAgc2l6ZTogM1xufSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJ1bmlmb3JtQXJyYXlWYWwsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9GTE9BVDQsIHtcbiAgZnVuYzogZnVuY3Rpb24gZnVuYyh2YWx1ZXMpIHtcbiAgICB2YXIgcmVzdWx0ID0gX2Zsb2F0NjRfcG9vbC5hZGQoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIHYgPSB2YWx1ZXNbaV07XG4gICAgICByZXN1bHRbNCAqIGldID0gdi54O1xuICAgICAgcmVzdWx0WzQgKiBpICsgMV0gPSB2Lnk7XG4gICAgICByZXN1bHRbNCAqIGkgKyAyXSA9IHYuejtcbiAgICAgIHJlc3VsdFs0ICogaSArIDNdID0gdi53O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuXG4gIHNpemU6IDRcbn0pLCBfZGVmaW5lUHJvcGVydHkoX3R5cGUydW5pZm9ybUFycmF5VmFsLCBfZW51bXMyLmRlZmF1bHQuUEFSQU1fQ09MT1IzLCB7XG4gIGZ1bmM6IHVuZGVmaW5lZCxcbiAgc2l6ZTogM1xufSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJ1bmlmb3JtQXJyYXlWYWwsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9DT0xPUjQsIHtcbiAgZnVuYzogZnVuY3Rpb24gZnVuYyh2YWx1ZXMpIHtcbiAgICB2YXIgcmVzdWx0ID0gX2Zsb2F0NjRfcG9vbC5hZGQoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIHYgPSB2YWx1ZXNbaV07XG4gICAgICByZXN1bHRbNCAqIGldID0gdi5yO1xuICAgICAgcmVzdWx0WzQgKiBpICsgMV0gPSB2Lmc7XG4gICAgICByZXN1bHRbNCAqIGkgKyAyXSA9IHYuYjtcbiAgICAgIHJlc3VsdFs0ICogaSArIDNdID0gdi5hO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuXG4gIHNpemU6IDRcbn0pLCBfZGVmaW5lUHJvcGVydHkoX3R5cGUydW5pZm9ybUFycmF5VmFsLCBfZW51bXMyLmRlZmF1bHQuUEFSQU1fTUFUMiwge1xuICBmdW5jOiBmdW5jdGlvbiBmdW5jKHZhbHVlcykge1xuICAgIHZhciByZXN1bHQgPSBfZmxvYXQ2NF9wb29sLmFkZCgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIgdiA9IHZhbHVlc1tpXTtcbiAgICAgIHJlc3VsdC5zZXQodi5tLCA0ICogaSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG5cbiAgc2l6ZTogNFxufSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJ1bmlmb3JtQXJyYXlWYWwsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9NQVQzLCB7XG4gIGZ1bmM6IHVuZGVmaW5lZCxcbiAgc2l6ZTogOVxufSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJ1bmlmb3JtQXJyYXlWYWwsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9NQVQ0LCB7XG4gIGZ1bmM6IGZ1bmN0aW9uIGZ1bmModmFsdWVzKSB7XG4gICAgdmFyIHJlc3VsdCA9IF9mbG9hdDY0X3Bvb2wuYWRkKCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciB2ID0gdmFsdWVzW2ldO1xuICAgICAgcmVzdWx0LnNldCh2Lm0sIDE2ICogaSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG5cbiAgc2l6ZTogMTZcbn0pLCBfdHlwZTJ1bmlmb3JtQXJyYXlWYWwpO1xuXG52YXIgQmFzZSA9IGZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7Z2Z4LkRldmljZX0gZGV2aWNlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gICAqIEBwYXJhbSB7Z2Z4LlRleHR1cmUyRH0gb3B0cy5kZWZhdWx0VGV4dHVyZVxuICAgKiBAcGFyYW0ge2dmeC5UZXh0dXJlQ3ViZX0gb3B0cy5kZWZhdWx0VGV4dHVyZUN1YmVcbiAgICovXG4gIGZ1bmN0aW9uIEJhc2UoZGV2aWNlLCBvcHRzKSB7XG4gICAgdmFyIF90eXBlMmRlZmF1bHRWYWx1ZTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCYXNlKTtcblxuICAgIHRoaXMuX2RldmljZSA9IGRldmljZTtcbiAgICB0aGlzLl9wcm9ncmFtTGliID0gbmV3IF9wcm9ncmFtTGliMi5kZWZhdWx0KGRldmljZSk7XG4gICAgdGhpcy5fb3B0cyA9IG9wdHM7XG4gICAgdGhpcy5fdHlwZTJkZWZhdWx0VmFsdWUgPSAoX3R5cGUyZGVmYXVsdFZhbHVlID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJkZWZhdWx0VmFsdWUsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9JTlQsIDApLCBfZGVmaW5lUHJvcGVydHkoX3R5cGUyZGVmYXVsdFZhbHVlLCBfZW51bXMyLmRlZmF1bHQuUEFSQU1fSU5UMiwgX3ZtYXRoLnZlYzIuY3JlYXRlKDAsIDApKSwgX2RlZmluZVByb3BlcnR5KF90eXBlMmRlZmF1bHRWYWx1ZSwgX2VudW1zMi5kZWZhdWx0LlBBUkFNX0lOVDMsIF92bWF0aC52ZWMzLmNyZWF0ZSgwLCAwLCAwKSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJkZWZhdWx0VmFsdWUsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9JTlQ0LCBfdm1hdGgudmVjNC5jcmVhdGUoMCwgMCwgMCwgMCkpLCBfZGVmaW5lUHJvcGVydHkoX3R5cGUyZGVmYXVsdFZhbHVlLCBfZW51bXMyLmRlZmF1bHQuUEFSQU1fRkxPQVQsIDAuMCksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJkZWZhdWx0VmFsdWUsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9GTE9BVDIsIF92bWF0aC52ZWMyLmNyZWF0ZSgwLCAwKSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJkZWZhdWx0VmFsdWUsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9GTE9BVDMsIF92bWF0aC52ZWMzLmNyZWF0ZSgwLCAwLCAwKSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJkZWZhdWx0VmFsdWUsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9GTE9BVDQsIF92bWF0aC52ZWM0LmNyZWF0ZSgwLCAwLCAwLCAwKSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJkZWZhdWx0VmFsdWUsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9DT0xPUjMsIF92bWF0aC5jb2xvcjMuY3JlYXRlKDAsIDAsIDApKSwgX2RlZmluZVByb3BlcnR5KF90eXBlMmRlZmF1bHRWYWx1ZSwgX2VudW1zMi5kZWZhdWx0LlBBUkFNX0NPTE9SNCwgX3ZtYXRoLmNvbG9yNC5jcmVhdGUoMCwgMCwgMCwgMSkpLCBfZGVmaW5lUHJvcGVydHkoX3R5cGUyZGVmYXVsdFZhbHVlLCBfZW51bXMyLmRlZmF1bHQuUEFSQU1fTUFUMiwgX3ZtYXRoLm1hdDIuY3JlYXRlKCkpLCBfZGVmaW5lUHJvcGVydHkoX3R5cGUyZGVmYXVsdFZhbHVlLCBfZW51bXMyLmRlZmF1bHQuUEFSQU1fTUFUMywgX3ZtYXRoLm1hdDMuY3JlYXRlKCkpLCBfZGVmaW5lUHJvcGVydHkoX3R5cGUyZGVmYXVsdFZhbHVlLCBfZW51bXMyLmRlZmF1bHQuUEFSQU1fTUFUNCwgX3ZtYXRoLm1hdDQuY3JlYXRlKCkpLCBfZGVmaW5lUHJvcGVydHkoX3R5cGUyZGVmYXVsdFZhbHVlLCBfZW51bXMyLmRlZmF1bHQuUEFSQU1fVEVYVFVSRV8yRCwgb3B0cy5kZWZhdWx0VGV4dHVyZSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJkZWZhdWx0VmFsdWUsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9URVhUVVJFX0NVQkUsIG9wdHMuZGVmYXVsdFRleHR1cmVDdWJlKSwgX3R5cGUyZGVmYXVsdFZhbHVlKTtcbiAgICB0aGlzLl9zdGFnZTJmbiA9IHt9O1xuICAgIHRoaXMuX3VzZWRUZXh0dXJlVW5pdHMgPSAwO1xuXG4gICAgdGhpcy5fdmlld1Bvb2xzID0gbmV3IF9tZW1vcC5SZWN5Y2xlUG9vbChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbmV3IF92aWV3Mi5kZWZhdWx0KCk7XG4gICAgfSwgOCk7XG5cbiAgICB0aGlzLl9kcmF3SXRlbXNQb29scyA9IG5ldyBfbWVtb3AuUmVjeWNsZVBvb2woZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbW9kZWw6IG51bGwsXG4gICAgICAgIG5vZGU6IG51bGwsXG4gICAgICAgIGlhOiBudWxsLFxuICAgICAgICBlZmZlY3Q6IG51bGwsXG4gICAgICAgIGRlZmluZXM6IG51bGwsXG4gICAgICAgIHVuaWZvcm1zOiBudWxsXG4gICAgICB9O1xuICAgIH0sIDEwMCk7XG5cbiAgICB0aGlzLl9zdGFnZUl0ZW1zUG9vbHMgPSBuZXcgX21lbW9wLlJlY3ljbGVQb29sKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBuZXcgX21lbW9wLlJlY3ljbGVQb29sKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBtb2RlbDogbnVsbCxcbiAgICAgICAgICBub2RlOiBudWxsLFxuICAgICAgICAgIGlhOiBudWxsLFxuICAgICAgICAgIGVmZmVjdDogbnVsbCxcbiAgICAgICAgICBkZWZpbmVzOiBudWxsLFxuICAgICAgICAgIHRlY2huaXF1ZTogbnVsbCxcbiAgICAgICAgICBzb3J0S2V5OiAtMSxcbiAgICAgICAgICB1bmlmb3JtczogbnVsbFxuICAgICAgICB9O1xuICAgICAgfSwgMTAwKTtcbiAgICB9LCAxNik7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQmFzZSwgW3tcbiAgICBrZXk6ICdfcmVzZXRUZXh0dWVyVW5pdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZXNldFRleHR1ZXJVbml0KCkge1xuICAgICAgdGhpcy5fdXNlZFRleHR1cmVVbml0cyA9IDA7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX2FsbG9jVGV4dHVyZVVuaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYWxsb2NUZXh0dXJlVW5pdCgpIHtcbiAgICAgIHZhciBkZXZpY2UgPSB0aGlzLl9kZXZpY2U7XG5cbiAgICAgIHZhciB1bml0ID0gdGhpcy5fdXNlZFRleHR1cmVVbml0cztcbiAgICAgIGlmICh1bml0ID49IGRldmljZS5fY2Fwcy5tYXhUZXh0dXJlVW5pdHMpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdUcnlpbmcgdG8gdXNlICcgKyB1bml0ICsgJyB0ZXh0dXJlIHVuaXRzIHdoaWxlIHRoaXMgR1BVIHN1cHBvcnRzIG9ubHkgJyArIGRldmljZS5fY2Fwcy5tYXhUZXh0dXJlVW5pdHMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl91c2VkVGV4dHVyZVVuaXRzICs9IDE7XG4gICAgICByZXR1cm4gdW5pdDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfcmVnaXN0ZXJTdGFnZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWdpc3RlclN0YWdlKG5hbWUsIGZuKSB7XG4gICAgICB0aGlzLl9zdGFnZTJmbltuYW1lXSA9IGZuO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NsZWFyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICB0aGlzLl9wcm9ncmFtTGliLmNsZWFyKCk7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVzZXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIHRoaXMuX3ZpZXdQb29scy5yZXNldCgpO1xuICAgICAgdGhpcy5fc3RhZ2VJdGVtc1Bvb2xzLnJlc2V0KCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX3JlcXVlc3RWaWV3JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlcXVlc3RWaWV3KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3ZpZXdQb29scy5hZGQoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfcmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbmRlcih2aWV3LCBzY2VuZSkge1xuICAgICAgdmFyIGRldmljZSA9IHRoaXMuX2RldmljZTtcblxuICAgICAgLy8gc2V0dXAgZnJhbWVidWZmZXJcbiAgICAgIGRldmljZS5zZXRGcmFtZUJ1ZmZlcih2aWV3Ll9mcmFtZWJ1ZmZlcik7XG5cbiAgICAgIC8vIHNldHVwIHZpZXdwb3J0XG4gICAgICBkZXZpY2Uuc2V0Vmlld3BvcnQodmlldy5fcmVjdC54LCB2aWV3Ll9yZWN0LnksIHZpZXcuX3JlY3Qudywgdmlldy5fcmVjdC5oKTtcblxuICAgICAgLy8gc2V0dXAgY2xlYXJcbiAgICAgIHZhciBjbGVhck9wdHMgPSB7fTtcbiAgICAgIGlmICh2aWV3Ll9jbGVhckZsYWdzICYgX2VudW1zMi5kZWZhdWx0LkNMRUFSX0NPTE9SKSB7XG4gICAgICAgIGNsZWFyT3B0cy5jb2xvciA9IFt2aWV3Ll9jb2xvci5yLCB2aWV3Ll9jb2xvci5nLCB2aWV3Ll9jb2xvci5iLCB2aWV3Ll9jb2xvci5hXTtcbiAgICAgIH1cbiAgICAgIGlmICh2aWV3Ll9jbGVhckZsYWdzICYgX2VudW1zMi5kZWZhdWx0LkNMRUFSX0RFUFRIKSB7XG4gICAgICAgIGNsZWFyT3B0cy5kZXB0aCA9IHZpZXcuX2RlcHRoO1xuICAgICAgfVxuICAgICAgaWYgKHZpZXcuX2NsZWFyRmxhZ3MgJiBfZW51bXMyLmRlZmF1bHQuQ0xFQVJfU1RFTkNJTCkge1xuICAgICAgICBjbGVhck9wdHMuc3RlbmNpbCA9IHZpZXcuX3N0ZW5jaWw7XG4gICAgICB9XG4gICAgICBkZXZpY2UuY2xlYXIoY2xlYXJPcHRzKTtcblxuICAgICAgLy8gZ2V0IGFsbCBkcmF3IGl0ZW1zXG4gICAgICB0aGlzLl9kcmF3SXRlbXNQb29scy5yZXNldCgpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjZW5lLl9tb2RlbHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIG1vZGVsID0gc2NlbmUuX21vZGVscy5kYXRhW2ldO1xuXG4gICAgICAgIC8vIGZpbHRlciBtb2RlbCBieSB2aWV3XG4gICAgICAgIGlmICgobW9kZWwuX2N1bGxpbmdNYXNrICYgdmlldy5fY3VsbGluZ01hc2spID09PSAwKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZHJhd0l0ZW0gPSB0aGlzLl9kcmF3SXRlbXNQb29scy5hZGQoKTtcbiAgICAgICAgbW9kZWwuZXh0cmFjdERyYXdJdGVtKGRyYXdJdGVtKTtcbiAgICAgIH1cblxuICAgICAgLy8gZGlzcGF0Y2ggZHJhdyBpdGVtcyB0byBkaWZmZXJlbnQgc3RhZ2VcbiAgICAgIF9zdGFnZUluZm9zLnJlc2V0KCk7XG5cbiAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCB2aWV3Ll9zdGFnZXMubGVuZ3RoOyArK19pKSB7XG4gICAgICAgIHZhciBzdGFnZSA9IHZpZXcuX3N0YWdlc1tfaV07XG4gICAgICAgIHZhciBzdGFnZUl0ZW1zID0gdGhpcy5fc3RhZ2VJdGVtc1Bvb2xzLmFkZCgpO1xuICAgICAgICBzdGFnZUl0ZW1zLnJlc2V0KCk7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLl9kcmF3SXRlbXNQb29scy5sZW5ndGg7ICsraikge1xuICAgICAgICAgIHZhciBfZHJhd0l0ZW0gPSB0aGlzLl9kcmF3SXRlbXNQb29scy5kYXRhW2pdO1xuICAgICAgICAgIHZhciB0ZWNoID0gX2RyYXdJdGVtLmVmZmVjdC5nZXRUZWNobmlxdWUoc3RhZ2UpO1xuXG4gICAgICAgICAgaWYgKHRlY2gpIHtcbiAgICAgICAgICAgIHZhciBzdGFnZUl0ZW0gPSBzdGFnZUl0ZW1zLmFkZCgpO1xuICAgICAgICAgICAgc3RhZ2VJdGVtLm1vZGVsID0gX2RyYXdJdGVtLm1vZGVsO1xuICAgICAgICAgICAgc3RhZ2VJdGVtLm5vZGUgPSBfZHJhd0l0ZW0ubm9kZTtcbiAgICAgICAgICAgIHN0YWdlSXRlbS5pYSA9IF9kcmF3SXRlbS5pYTtcbiAgICAgICAgICAgIHN0YWdlSXRlbS5lZmZlY3QgPSBfZHJhd0l0ZW0uZWZmZWN0O1xuICAgICAgICAgICAgc3RhZ2VJdGVtLmRlZmluZXMgPSBfZHJhd0l0ZW0uZGVmaW5lcztcbiAgICAgICAgICAgIHN0YWdlSXRlbS50ZWNobmlxdWUgPSB0ZWNoO1xuICAgICAgICAgICAgc3RhZ2VJdGVtLnNvcnRLZXkgPSAtMTtcbiAgICAgICAgICAgIHN0YWdlSXRlbS51bmlmb3JtcyA9IF9kcmF3SXRlbS51bmlmb3JtcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3RhZ2VJbmZvID0gX3N0YWdlSW5mb3MuYWRkKCk7XG4gICAgICAgIHN0YWdlSW5mby5zdGFnZSA9IHN0YWdlO1xuICAgICAgICBzdGFnZUluZm8uaXRlbXMgPSBzdGFnZUl0ZW1zO1xuICAgICAgfVxuXG4gICAgICAvLyByZW5kZXIgc3RhZ2VzXG4gICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBfc3RhZ2VJbmZvcy5sZW5ndGg7ICsrX2kyKSB7XG4gICAgICAgIHZhciBpbmZvID0gX3N0YWdlSW5mb3MuZGF0YVtfaTJdO1xuICAgICAgICB2YXIgZm4gPSB0aGlzLl9zdGFnZTJmbltpbmZvLnN0YWdlXTtcblxuICAgICAgICBmbih2aWV3LCBpbmZvLml0ZW1zKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfc2V0UHJvcGVydHknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0UHJvcGVydHkocHJvcCkge1xuICAgICAgdmFyIGRldmljZSA9IHRoaXMuX2RldmljZTtcbiAgICAgIHZhciBwYXJhbSA9IHByb3AudmFsdWU7XG5cbiAgICAgIGlmIChwYXJhbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBhcmFtID0gcHJvcC52YWw7XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJhbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBhcmFtID0gdGhpcy5fdHlwZTJkZWZhdWx0VmFsdWVbcHJvcC50eXBlXTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdGYWlsZWQgdG8gc2V0IHRlY2huaXF1ZSBwcm9wZXJ0eSAnICsgcHJvcC5uYW1lICsgJywgdmFsdWUgbm90IGZvdW5kLicpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9wLnR5cGUgPT09IF9lbnVtczIuZGVmYXVsdC5QQVJBTV9URVhUVVJFXzJEIHx8IHByb3AudHlwZSA9PT0gX2VudW1zMi5kZWZhdWx0LlBBUkFNX1RFWFRVUkVfQ1VCRSkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwYXJhbSkpIHtcbiAgICAgICAgICBpZiAocGFyYW0ubGVuZ3RoID4gcHJvcC5jb3VudCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHNldCBwcm9wZXJ0eSBbJyArIHByb3AubmFtZSArICddIDogVGhlIGxlbmd0aCBvZiB0ZXh0dXJlIGFycmF5IFsnICsgcGFyYW0ubGVuZ3RoICsgJ10gaXMgYmlnZ2VyIHRoYW4gWycgKyBwcm9wLmNvdW50ICsgJ10uJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBzbG90cyA9IF9pbnQ2NF9wb29sLmFkZCgpO1xuICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBwYXJhbS5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgICAgIHNsb3RzW2luZGV4XSA9IHRoaXMuX2FsbG9jVGV4dHVyZVVuaXQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGV2aWNlLnNldFRleHR1cmVBcnJheShwcm9wLm5hbWUsIHBhcmFtLCBzbG90cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGV2aWNlLnNldFRleHR1cmUocHJvcC5uYW1lLCBwYXJhbSwgdGhpcy5fYWxsb2NUZXh0dXJlVW5pdCgpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHByb3AuZGlyZWN0bHkpIHtcbiAgICAgICAgICBkZXZpY2Uuc2V0VW5pZm9ybURpcmVjdGx5KHByb3AubmFtZSwgcGFyYW0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRldmljZS5zZXRVbmlmb3JtKHByb3AubmFtZSwgcGFyYW0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX2RyYXcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZHJhdyhpdGVtKSB7XG4gICAgICB2YXIgZGV2aWNlID0gdGhpcy5fZGV2aWNlO1xuICAgICAgdmFyIHByb2dyYW1MaWIgPSB0aGlzLl9wcm9ncmFtTGliO1xuICAgICAgdmFyIG5vZGUgPSBpdGVtLm5vZGUsXG4gICAgICAgICAgaWEgPSBpdGVtLmlhLFxuICAgICAgICAgIHVuaWZvcm1zID0gaXRlbS51bmlmb3JtcyxcbiAgICAgICAgICB0ZWNobmlxdWUgPSBpdGVtLnRlY2huaXF1ZSxcbiAgICAgICAgICBkZWZpbmVzID0gaXRlbS5kZWZpbmVzLFxuICAgICAgICAgIGVmZmVjdCA9IGl0ZW0uZWZmZWN0O1xuXG4gICAgICAvLyByZXNldCB0aGUgcG9vbFxuICAgICAgLy8gTk9URTogd2UgY2FuIHVzZSBkcmF3Q291bnRlciBvcHRpbWl6ZSB0aGlzXG4gICAgICAvLyBUT0RPOiBzaG91bGQgYmUgY29uZmlndXJhYmxlXG5cbiAgICAgIF9mbG9hdDJfcG9vbC5yZXNldCgpO1xuICAgICAgX2Zsb2F0M19wb29sLnJlc2V0KCk7XG4gICAgICBfZmxvYXQ0X3Bvb2wucmVzZXQoKTtcbiAgICAgIF9mbG9hdDlfcG9vbC5yZXNldCgpO1xuICAgICAgX2Zsb2F0MTZfcG9vbC5yZXNldCgpO1xuICAgICAgX2Zsb2F0NjRfcG9vbC5yZXNldCgpO1xuICAgICAgX2ludDJfcG9vbC5yZXNldCgpO1xuICAgICAgX2ludDNfcG9vbC5yZXNldCgpO1xuICAgICAgX2ludDRfcG9vbC5yZXNldCgpO1xuICAgICAgX2ludDY0X3Bvb2wucmVzZXQoKTtcblxuICAgICAgLy8gc2V0IGNvbW1vbiB1bmlmb3Jtc1xuICAgICAgLy8gVE9ETzogdHJ5IGNvbW1pdCB0aGlzIGRlcGVuZHMgb24gZWZmZWN0XG4gICAgICAvLyB7XG4gICAgICBub2RlLmdldFdvcmxkTWF0cml4KF9tNF90bXApO1xuICAgICAgZGV2aWNlLnNldFVuaWZvcm0oJ2NjX21hdFdvcmxkJywgX3ZtYXRoLm1hdDQuYXJyYXkoX2Zsb2F0MTZfcG9vbC5hZGQoKSwgX200X3RtcCkpO1xuXG4gICAgICAvLyBsZXQgd3EgPSBub2RlLmdldFdvcmxkUm90YXRpb24oY2MucXVhdCgpKTtcbiAgICAgIF92bWF0aC5tYXQ0LmludmVydChfbTRfdG1wLCBfbTRfdG1wKTtcbiAgICAgIF92bWF0aC5tYXQ0LnRyYW5zcG9zZShfbTRfdG1wLCBfbTRfdG1wKTtcbiAgICAgIGRldmljZS5zZXRVbmlmb3JtKCdjY19tYXRXb3JsZElUJywgX3ZtYXRoLm1hdDQuYXJyYXkoX2Zsb2F0MTZfcG9vbC5hZGQoKSwgX200X3RtcCkpO1xuICAgICAgLy8gfVxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVuaWZvcm1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB0eXBlVW5pZm9ybXMgPSB1bmlmb3Jtc1tpXTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHR5cGVVbmlmb3Jtcykge1xuICAgICAgICAgIHRoaXMuX3NldFByb3BlcnR5KHR5cGVVbmlmb3Jtc1trZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBmb3IgZWFjaCBwYXNzXG4gICAgICBmb3IgKHZhciBfaTMgPSAwOyBfaTMgPCB0ZWNobmlxdWUuX3Bhc3Nlcy5sZW5ndGg7ICsrX2kzKSB7XG4gICAgICAgIHZhciBwYXNzID0gdGVjaG5pcXVlLl9wYXNzZXNbX2kzXTtcbiAgICAgICAgdmFyIGNvdW50ID0gaWEuY291bnQ7XG5cbiAgICAgICAgLy8gc2V0IHZlcnRleCBidWZmZXJcbiAgICAgICAgaWYgKGlhLl92ZXJ0ZXhCdWZmZXIpIHtcbiAgICAgICAgICBkZXZpY2Uuc2V0VmVydGV4QnVmZmVyKDAsIGlhLl92ZXJ0ZXhCdWZmZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2V0IGluZGV4IGJ1ZmZlclxuICAgICAgICBpZiAoaWEuX2luZGV4QnVmZmVyKSB7XG4gICAgICAgICAgZGV2aWNlLnNldEluZGV4QnVmZmVyKGlhLl9pbmRleEJ1ZmZlcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzZXQgcHJpbWl0aXZlIHR5cGVcbiAgICAgICAgZGV2aWNlLnNldFByaW1pdGl2ZVR5cGUoaWEuX3ByaW1pdGl2ZVR5cGUpO1xuXG4gICAgICAgIC8vIHNldCBwcm9ncmFtXG4gICAgICAgIHZhciBwcm9ncmFtID0gcHJvZ3JhbUxpYi5nZXRQcm9ncmFtKHBhc3MuX3Byb2dyYW1OYW1lLCBkZWZpbmVzLCBlZmZlY3QuX25hbWUpO1xuICAgICAgICBkZXZpY2Uuc2V0UHJvZ3JhbShwcm9ncmFtKTtcblxuICAgICAgICAvLyBjdWxsIG1vZGVcbiAgICAgICAgZGV2aWNlLnNldEN1bGxNb2RlKHBhc3MuX2N1bGxNb2RlKTtcblxuICAgICAgICAvLyBibGVuZFxuICAgICAgICBpZiAocGFzcy5fYmxlbmQpIHtcbiAgICAgICAgICBkZXZpY2UuZW5hYmxlQmxlbmQoKTtcbiAgICAgICAgICBkZXZpY2Uuc2V0QmxlbmRGdW5jU2VwKHBhc3MuX2JsZW5kU3JjLCBwYXNzLl9ibGVuZERzdCwgcGFzcy5fYmxlbmRTcmNBbHBoYSwgcGFzcy5fYmxlbmREc3RBbHBoYSk7XG4gICAgICAgICAgZGV2aWNlLnNldEJsZW5kRXFTZXAocGFzcy5fYmxlbmRFcSwgcGFzcy5fYmxlbmRBbHBoYUVxKTtcbiAgICAgICAgICBkZXZpY2Uuc2V0QmxlbmRDb2xvcjMyKHBhc3MuX2JsZW5kQ29sb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZGVwdGggdGVzdCAmIHdyaXRlXG4gICAgICAgIGlmIChwYXNzLl9kZXB0aFRlc3QpIHtcbiAgICAgICAgICBkZXZpY2UuZW5hYmxlRGVwdGhUZXN0KCk7XG4gICAgICAgICAgZGV2aWNlLnNldERlcHRoRnVuYyhwYXNzLl9kZXB0aEZ1bmMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXNzLl9kZXB0aFdyaXRlKSB7XG4gICAgICAgICAgZGV2aWNlLmVuYWJsZURlcHRoV3JpdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHN0ZW5jaWxcbiAgICAgICAgZGV2aWNlLnNldFN0ZW5jaWxUZXN0KHBhc3MuX3N0ZW5jaWxUZXN0KTtcbiAgICAgICAgaWYgKHBhc3MuX3N0ZW5jaWxUZXN0ID09PSBfZ2Z4Mi5kZWZhdWx0LlNURU5DSUxfRU5BQkxFKSB7XG4gICAgICAgICAgLy8gZnJvbnRcbiAgICAgICAgICBkZXZpY2Uuc2V0U3RlbmNpbEZ1bmNGcm9udChwYXNzLl9zdGVuY2lsRnVuY0Zyb250LCBwYXNzLl9zdGVuY2lsUmVmRnJvbnQsIHBhc3MuX3N0ZW5jaWxNYXNrRnJvbnQpO1xuICAgICAgICAgIGRldmljZS5zZXRTdGVuY2lsT3BGcm9udChwYXNzLl9zdGVuY2lsRmFpbE9wRnJvbnQsIHBhc3MuX3N0ZW5jaWxaRmFpbE9wRnJvbnQsIHBhc3MuX3N0ZW5jaWxaUGFzc09wRnJvbnQsIHBhc3MuX3N0ZW5jaWxXcml0ZU1hc2tGcm9udCk7XG5cbiAgICAgICAgICAvLyBiYWNrXG4gICAgICAgICAgZGV2aWNlLnNldFN0ZW5jaWxGdW5jQmFjayhwYXNzLl9zdGVuY2lsRnVuY0JhY2ssIHBhc3MuX3N0ZW5jaWxSZWZCYWNrLCBwYXNzLl9zdGVuY2lsTWFza0JhY2spO1xuICAgICAgICAgIGRldmljZS5zZXRTdGVuY2lsT3BCYWNrKHBhc3MuX3N0ZW5jaWxGYWlsT3BCYWNrLCBwYXNzLl9zdGVuY2lsWkZhaWxPcEJhY2ssIHBhc3MuX3N0ZW5jaWxaUGFzc09wQmFjaywgcGFzcy5fc3RlbmNpbFdyaXRlTWFza0JhY2spO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZHJhdyBwYXNzXG4gICAgICAgIGRldmljZS5kcmF3KGlhLl9zdGFydCwgY291bnQpO1xuXG4gICAgICAgIHRoaXMuX3Jlc2V0VGV4dHVlclVuaXQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQmFzZTtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQmFzZTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1KaGMyVXRjbVZ1WkdWeVpYSXVhbk1pWFN3aWJtRnRaWE1pT2xzaVgyMHpYM1J0Y0NJc0ltMWhkRE1pTENKamNtVmhkR1VpTENKZmJUUmZkRzF3SWl3aWJXRjBOQ0lzSWw5emRHRm5aVWx1Wm05eklpd2lVbVZqZVdOc1pWQnZiMndpTENKemRHRm5aU0lzSW1sMFpXMXpJaXdpWDJac2IyRjBNbDl3YjI5c0lpd2lSbXh2WVhRek1rRnljbUY1SWl3aVgyWnNiMkYwTTE5d2IyOXNJaXdpWDJac2IyRjBORjl3YjI5c0lpd2lYMlpzYjJGME9WOXdiMjlzSWl3aVgyWnNiMkYwTVRaZmNHOXZiQ0lzSWw5bWJHOWhkRFkwWDNCdmIyd2lMQ0pmYVc1ME1sOXdiMjlzSWl3aVNXNTBNekpCY25KaGVTSXNJbDlwYm5RelgzQnZiMndpTENKZmFXNTBORjl3YjI5c0lpd2lYMmx1ZERZMFgzQnZiMndpTENKZmRIbHdaVEoxYm1sbWIzSnRWbUZzZFdVaUxDSmxiblZ0Y3lJc0lsQkJVa0ZOWDBsT1ZDSXNJblpoYkhWbElpd2lVRUZTUVUxZlNVNVVNaUlzSW5abFl6SWlMQ0poY25KaGVTSXNJbUZrWkNJc0lsQkJVa0ZOWDBsT1ZETWlMQ0oyWldNeklpd2lVRUZTUVUxZlNVNVVOQ0lzSW5abFl6UWlMQ0pRUVZKQlRWOUdURTlCVkNJc0lsQkJVa0ZOWDBaTVQwRlVNaUlzSWxCQlVrRk5YMFpNVDBGVU15SXNJbEJCVWtGTlgwWk1UMEZVTkNJc0lsQkJVa0ZOWDBOUFRFOVNNeUlzSW1OdmJHOXlNeUlzSWxCQlVrRk5YME5QVEU5U05DSXNJbU52Ykc5eU5DSXNJbEJCVWtGTlgwMUJWRElpTENKdFlYUXlJaXdpVUVGU1FVMWZUVUZVTXlJc0lsQkJVa0ZOWDAxQlZEUWlMQ0pmZEhsd1pUSjFibWxtYjNKdFFYSnlZWGxXWVd4MVpTSXNJbVoxYm1NaUxDSjJZV3gxWlhNaUxDSnlaWE4xYkhRaUxDSnBJaXdpYkdWdVozUm9JaXdpYzJsNlpTSXNJbmdpTENKNUlpd2lkVzVrWldacGJtVmtJaXdpZGlJc0lub2lMQ0ozSWl3aWNpSXNJbWNpTENKaUlpd2lZU0lzSW5ObGRDSXNJbTBpTENKQ1lYTmxJaXdpWkdWMmFXTmxJaXdpYjNCMGN5SXNJbDlrWlhacFkyVWlMQ0pmY0hKdlozSmhiVXhwWWlJc0lsQnliMmR5WVcxTWFXSWlMQ0pmYjNCMGN5SXNJbDkwZVhCbE1tUmxabUYxYkhSV1lXeDFaU0lzSWxCQlVrRk5YMVJGV0ZSVlVrVmZNa1FpTENKa1pXWmhkV3gwVkdWNGRIVnlaU0lzSWxCQlVrRk5YMVJGV0ZSVlVrVmZRMVZDUlNJc0ltUmxabUYxYkhSVVpYaDBkWEpsUTNWaVpTSXNJbDl6ZEdGblpUSm1iaUlzSWw5MWMyVmtWR1Y0ZEhWeVpWVnVhWFJ6SWl3aVgzWnBaWGRRYjI5c2N5SXNJbFpwWlhjaUxDSmZaSEpoZDBsMFpXMXpVRzl2YkhNaUxDSnRiMlJsYkNJc0ltNXZaR1VpTENKcFlTSXNJbVZtWm1WamRDSXNJbVJsWm1sdVpYTWlMQ0oxYm1sbWIzSnRjeUlzSWw5emRHRm5aVWwwWlcxelVHOXZiSE1pTENKMFpXTm9ibWx4ZFdVaUxDSnpiM0owUzJWNUlpd2lkVzVwZENJc0lsOWpZWEJ6SWl3aWJXRjRWR1Y0ZEhWeVpWVnVhWFJ6SWl3aVkyOXVjMjlzWlNJc0luZGhjbTRpTENKdVlXMWxJaXdpWm00aUxDSmpiR1ZoY2lJc0luSmxjMlYwSWl3aWRtbGxkeUlzSW5OalpXNWxJaXdpYzJWMFJuSmhiV1ZDZFdabVpYSWlMQ0pmWm5KaGJXVmlkV1ptWlhJaUxDSnpaWFJXYVdWM2NHOXlkQ0lzSWw5eVpXTjBJaXdpYUNJc0ltTnNaV0Z5VDNCMGN5SXNJbDlqYkdWaGNrWnNZV2R6SWl3aVEweEZRVkpmUTA5TVQxSWlMQ0pqYjJ4dmNpSXNJbDlqYjJ4dmNpSXNJa05NUlVGU1gwUkZVRlJJSWl3aVpHVndkR2dpTENKZlpHVndkR2dpTENKRFRFVkJVbDlUVkVWT1EwbE1JaXdpYzNSbGJtTnBiQ0lzSWw5emRHVnVZMmxzSWl3aVgyMXZaR1ZzY3lJc0ltUmhkR0VpTENKZlkzVnNiR2x1WjAxaGMyc2lMQ0prY21GM1NYUmxiU0lzSW1WNGRISmhZM1JFY21GM1NYUmxiU0lzSWw5emRHRm5aWE1pTENKemRHRm5aVWwwWlcxeklpd2lhaUlzSW5SbFkyZ2lMQ0puWlhSVVpXTm9ibWx4ZFdVaUxDSnpkR0ZuWlVsMFpXMGlMQ0p6ZEdGblpVbHVabThpTENKcGJtWnZJaXdpY0hKdmNDSXNJbkJoY21GdElpd2lkbUZzSWl3aWRIbHdaU0lzSWtGeWNtRjVJaXdpYVhOQmNuSmhlU0lzSW1OdmRXNTBJaXdpWlhKeWIzSWlMQ0p6Ykc5MGN5SXNJbWx1WkdWNElpd2lYMkZzYkc5alZHVjRkSFZ5WlZWdWFYUWlMQ0p6WlhSVVpYaDBkWEpsUVhKeVlYa2lMQ0p6WlhSVVpYaDBkWEpsSWl3aVpHbHlaV04wYkhraUxDSnpaWFJWYm1sbWIzSnRSR2x5WldOMGJIa2lMQ0p6WlhSVmJtbG1iM0p0SWl3aWFYUmxiU0lzSW5CeWIyZHlZVzFNYVdJaUxDSm5aWFJYYjNKc1pFMWhkSEpwZUNJc0ltbHVkbVZ5ZENJc0luUnlZVzV6Y0c5elpTSXNJblI1Y0dWVmJtbG1iM0p0Y3lJc0ltdGxlU0lzSWw5elpYUlFjbTl3WlhKMGVTSXNJbDl3WVhOelpYTWlMQ0p3WVhOeklpd2lYM1psY25SbGVFSjFabVpsY2lJc0luTmxkRlpsY25SbGVFSjFabVpsY2lJc0lsOXBibVJsZUVKMVptWmxjaUlzSW5ObGRFbHVaR1Y0UW5WbVptVnlJaXdpYzJWMFVISnBiV2wwYVhabFZIbHdaU0lzSWw5d2NtbHRhWFJwZG1WVWVYQmxJaXdpY0hKdlozSmhiU0lzSW1kbGRGQnliMmR5WVcwaUxDSmZjSEp2WjNKaGJVNWhiV1VpTENKZmJtRnRaU0lzSW5ObGRGQnliMmR5WVcwaUxDSnpaWFJEZFd4c1RXOWtaU0lzSWw5amRXeHNUVzlrWlNJc0lsOWliR1Z1WkNJc0ltVnVZV0pzWlVKc1pXNWtJaXdpYzJWMFFteGxibVJHZFc1alUyVndJaXdpWDJKc1pXNWtVM0pqSWl3aVgySnNaVzVrUkhOMElpd2lYMkpzWlc1a1UzSmpRV3h3YUdFaUxDSmZZbXhsYm1SRWMzUkJiSEJvWVNJc0luTmxkRUpzWlc1a1JYRlRaWEFpTENKZllteGxibVJGY1NJc0lsOWliR1Z1WkVGc2NHaGhSWEVpTENKelpYUkNiR1Z1WkVOdmJHOXlNeklpTENKZllteGxibVJEYjJ4dmNpSXNJbDlrWlhCMGFGUmxjM1FpTENKbGJtRmliR1ZFWlhCMGFGUmxjM1FpTENKelpYUkVaWEIwYUVaMWJtTWlMQ0pmWkdWd2RHaEdkVzVqSWl3aVgyUmxjSFJvVjNKcGRHVWlMQ0psYm1GaWJHVkVaWEIwYUZkeWFYUmxJaXdpYzJWMFUzUmxibU5wYkZSbGMzUWlMQ0pmYzNSbGJtTnBiRlJsYzNRaUxDSm5abmdpTENKVFZFVk9RMGxNWDBWT1FVSk1SU0lzSW5ObGRGTjBaVzVqYVd4R2RXNWpSbkp2Ym5RaUxDSmZjM1JsYm1OcGJFWjFibU5HY205dWRDSXNJbDl6ZEdWdVkybHNVbVZtUm5KdmJuUWlMQ0pmYzNSbGJtTnBiRTFoYzJ0R2NtOXVkQ0lzSW5ObGRGTjBaVzVqYVd4UGNFWnliMjUwSWl3aVgzTjBaVzVqYVd4R1lXbHNUM0JHY205dWRDSXNJbDl6ZEdWdVkybHNXa1poYVd4UGNFWnliMjUwSWl3aVgzTjBaVzVqYVd4YVVHRnpjMDl3Um5KdmJuUWlMQ0pmYzNSbGJtTnBiRmR5YVhSbFRXRnphMFp5YjI1MElpd2ljMlYwVTNSbGJtTnBiRVoxYm1OQ1lXTnJJaXdpWDNOMFpXNWphV3hHZFc1alFtRmpheUlzSWw5emRHVnVZMmxzVW1WbVFtRmpheUlzSWw5emRHVnVZMmxzVFdGemEwSmhZMnNpTENKelpYUlRkR1Z1WTJsc1QzQkNZV05ySWl3aVgzTjBaVzVqYVd4R1lXbHNUM0JDWVdOcklpd2lYM04wWlc1amFXeGFSbUZwYkU5d1FtRmpheUlzSWw5emRHVnVZMmxzV2xCaGMzTlBjRUpoWTJzaUxDSmZjM1JsYm1OcGJGZHlhWFJsVFdGemEwSmhZMnNpTENKa2NtRjNJaXdpWDNOMFlYSjBJaXdpWDNKbGMyVjBWR1Y0ZEhWbGNsVnVhWFFpWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN096czdPMEZCUlVFN08wRkJRMEU3T3pzN1FVRkRRVHM3UVVGRFFUczdPenRCUVVOQk96czdPMEZCUTBFN096czdPenM3TzJ0T1FWQkJPenRCUVZOQkxFbEJRVWxCTEZWQlFWVkRMRmxCUVV0RExFMUJRVXdzUlVGQlpEdEJRVU5CTEVsQlFVbERMRlZCUVZWRExGbEJRVXRHTEUxQlFVd3NSVUZCWkRzN1FVRkZRU3hKUVVGSlJ5eGpRVUZqTEVsQlFVbERMR3RDUVVGS0xFTkJRV2RDTEZsQlFVMDdRVUZEZEVNc1UwRkJUenRCUVVOTVF5eFhRVUZQTEVsQlJFWTdRVUZGVEVNc1YwRkJUenRCUVVaR0xFZEJRVkE3UVVGSlJDeERRVXhwUWl4RlFVdG1MRU5CVEdVc1EwRkJiRUk3TzBGQlQwRXNTVUZCU1VNc1pVRkJaU3hKUVVGSlNDeHJRa0ZCU2l4RFFVRm5RaXhaUVVGTk8wRkJRM1pETEZOQlFVOHNTVUZCU1Vrc1dVRkJTaXhEUVVGcFFpeERRVUZxUWl4RFFVRlFPMEZCUTBRc1EwRkdhMElzUlVGRmFFSXNRMEZHWjBJc1EwRkJia0k3TzBGQlNVRXNTVUZCU1VNc1pVRkJaU3hKUVVGSlRDeHJRa0ZCU2l4RFFVRm5RaXhaUVVGTk8wRkJRM1pETEZOQlFVOHNTVUZCU1Vrc1dVRkJTaXhEUVVGcFFpeERRVUZxUWl4RFFVRlFPMEZCUTBRc1EwRkdhMElzUlVGRmFFSXNRMEZHWjBJc1EwRkJia0k3TzBGQlNVRXNTVUZCU1VVc1pVRkJaU3hKUVVGSlRpeHJRa0ZCU2l4RFFVRm5RaXhaUVVGTk8wRkJRM1pETEZOQlFVOHNTVUZCU1Vrc1dVRkJTaXhEUVVGcFFpeERRVUZxUWl4RFFVRlFPMEZCUTBRc1EwRkdhMElzUlVGRmFFSXNRMEZHWjBJc1EwRkJia0k3TzBGQlNVRXNTVUZCU1Vjc1pVRkJaU3hKUVVGSlVDeHJRa0ZCU2l4RFFVRm5RaXhaUVVGTk8wRkJRM1pETEZOQlFVOHNTVUZCU1Vrc1dVRkJTaXhEUVVGcFFpeERRVUZxUWl4RFFVRlFPMEZCUTBRc1EwRkdhMElzUlVGRmFFSXNRMEZHWjBJc1EwRkJia0k3TzBGQlNVRXNTVUZCU1Vrc1owSkJRV2RDTEVsQlFVbFNMR3RDUVVGS0xFTkJRV2RDTEZsQlFVMDdRVUZEZUVNc1UwRkJUeXhKUVVGSlNTeFpRVUZLTEVOQlFXbENMRVZCUVdwQ0xFTkJRVkE3UVVGRFJDeERRVVp0UWl4RlFVVnFRaXhEUVVacFFpeERRVUZ3UWpzN1FVRkpRU3hKUVVGSlN5eG5Ra0ZCWjBJc1NVRkJTVlFzYTBKQlFVb3NRMEZCWjBJc1dVRkJUVHRCUVVONFF5eFRRVUZQTEVsQlFVbEpMRmxCUVVvc1EwRkJhVUlzUlVGQmFrSXNRMEZCVUR0QlFVTkVMRU5CUm0xQ0xFVkJSV3BDTEVOQlJtbENMRU5CUVhCQ096dEJRVWxCTEVsQlFVbE5MR0ZCUVdFc1NVRkJTVllzYTBKQlFVb3NRMEZCWjBJc1dVRkJUVHRCUVVOeVF5eFRRVUZQTEVsQlFVbFhMRlZCUVVvc1EwRkJaU3hEUVVGbUxFTkJRVkE3UVVGRFJDeERRVVpuUWl4RlFVVmtMRU5CUm1Nc1EwRkJha0k3TzBGQlNVRXNTVUZCU1VNc1lVRkJZU3hKUVVGSldpeHJRa0ZCU2l4RFFVRm5RaXhaUVVGTk8wRkJRM0pETEZOQlFVOHNTVUZCU1Zjc1ZVRkJTaXhEUVVGbExFTkJRV1lzUTBGQlVEdEJRVU5FTEVOQlJtZENMRVZCUldRc1EwRkdZeXhEUVVGcVFqczdRVUZKUVN4SlFVRkpSU3hoUVVGaExFbEJRVWxpTEd0Q1FVRktMRU5CUVdkQ0xGbEJRVTA3UVVGRGNrTXNVMEZCVHl4SlFVRkpWeXhWUVVGS0xFTkJRV1VzUTBGQlppeERRVUZRTzBGQlEwUXNRMEZHWjBJc1JVRkZaQ3hEUVVaakxFTkJRV3BDT3p0QlFVbEJMRWxCUVVsSExHTkJRV01zU1VGQlNXUXNhMEpCUVVvc1EwRkJaMElzV1VGQlRUdEJRVU4wUXl4VFFVRlBMRWxCUVVsWExGVkJRVW9zUTBGQlpTeEZRVUZtTEVOQlFWQTdRVUZEUkN4RFFVWnBRaXhGUVVWbUxFTkJSbVVzUTBGQmJFSTdPMEZCU1VFc1NVRkJTVWtzY1VaQlEwUkRMR2RDUVVGTlF5eFRRVVJNTEVWQlEybENMRlZCUVZWRExFdEJRVllzUlVGQmFVSTdRVUZEYkVNc1UwRkJUMEVzUzBGQlVEdEJRVU5FTEVOQlNFTXNkME5CUzBSR0xHZENRVUZOUnl4VlFVeE1MRVZCUzJ0Q0xGVkJRVlZFTEV0QlFWWXNSVUZCYVVJN1FVRkRia01zVTBGQlQwVXNXVUZCUzBNc1MwRkJUQ3hEUVVGWFdDeFhRVUZYV1N4SFFVRllMRVZCUVZnc1JVRkJOa0pLTEV0QlFUZENMRU5CUVZBN1FVRkRSQ3hEUVZCRExIZERRVk5FUml4blFrRkJUVThzVlVGVVRDeEZRVk5yUWl4VlFVRlZUQ3hMUVVGV0xFVkJRV2xDTzBGQlEyNURMRk5CUVU5TkxGbEJRVXRJTEV0QlFVd3NRMEZCVjFRc1YwRkJWMVVzUjBGQldDeEZRVUZZTEVWQlFUWkNTaXhMUVVFM1FpeERRVUZRTzBGQlEwUXNRMEZZUXl4M1EwRmhSRVlzWjBKQlFVMVRMRlZCWWt3c1JVRmhhMElzVlVGQlZWQXNTMEZCVml4RlFVRnBRanRCUVVOdVF5eFRRVUZQVVN4WlFVRkxUQ3hMUVVGTUxFTkJRVmRTTEZkQlFWZFRMRWRCUVZnc1JVRkJXQ3hGUVVFMlFrb3NTMEZCTjBJc1EwRkJVRHRCUVVORUxFTkJaa01zZDBOQmFVSkVSaXhuUWtGQlRWY3NWMEZxUWt3c1JVRnBRbTFDTEZWQlFWVlVMRXRCUVZZc1JVRkJhVUk3UVVGRGNFTXNVMEZCVDBFc1MwRkJVRHRCUVVORUxFTkJia0pETEhkRFFYRkNSRVlzWjBKQlFVMVpMRmxCY2tKTUxFVkJjVUp2UWl4VlFVRlZWaXhMUVVGV0xFVkJRV2xDTzBGQlEzSkRMRk5CUVU5RkxGbEJRVXRETEV0QlFVd3NRMEZCVjJ4Q0xHRkJRV0Z0UWl4SFFVRmlMRVZCUVZnc1JVRkJLMEpLTEV0QlFTOUNMRU5CUVZBN1FVRkRSQ3hEUVhaQ1F5eDNRMEY1UWtSR0xHZENRVUZOWVN4WlFYcENUQ3hGUVhsQ2IwSXNWVUZCVlZnc1MwRkJWaXhGUVVGcFFqdEJRVU55UXl4VFFVRlBUU3haUVVGTFNDeExRVUZNTEVOQlFWZG9RaXhoUVVGaGFVSXNSMEZCWWl4RlFVRllMRVZCUVN0Q1NpeExRVUV2UWl4RFFVRlFPMEZCUTBRc1EwRXpRa01zZDBOQk5rSkVSaXhuUWtGQlRXTXNXVUUzUWt3c1JVRTJRbTlDTEZWQlFWVmFMRXRCUVZZc1JVRkJhVUk3UVVGRGNrTXNVMEZCVDFFc1dVRkJTMHdzUzBGQlRDeERRVUZYWml4aFFVRmhaMElzUjBGQllpeEZRVUZZTEVWQlFTdENTaXhMUVVFdlFpeERRVUZRTzBGQlEwUXNRMEV2UWtNc2QwTkJhVU5FUml4blFrRkJUV1VzV1VGcVEwd3NSVUZwUTI5Q0xGVkJRVlZpTEV0QlFWWXNSVUZCYVVJN1FVRkRja01zVTBGQlQyTXNZMEZCVDFnc1MwRkJVQ3hEUVVGaGFFSXNZVUZCWVdsQ0xFZEJRV0lzUlVGQllpeEZRVUZwUTBvc1MwRkJha01zUTBGQlVEdEJRVU5FTEVOQmJrTkRMSGREUVhGRFJFWXNaMEpCUVUxcFFpeFpRWEpEVEN4RlFYRkRiMElzVlVGQlZXWXNTMEZCVml4RlFVRnBRanRCUVVOeVF5eFRRVUZQWjBJc1kwRkJUMklzUzBGQlVDeERRVUZoWml4aFFVRmhaMElzUjBGQllpeEZRVUZpTEVWQlFXbERTaXhMUVVGcVF5eERRVUZRTzBGQlEwUXNRMEYyUTBNc2QwTkJlVU5FUml4blFrRkJUVzFDTEZWQmVrTk1MRVZCZVVOclFpeFZRVUZWYWtJc1MwRkJWaXhGUVVGcFFqdEJRVU51UXl4VFFVRlBhMElzV1VGQlMyWXNTMEZCVEN4RFFVRlhaaXhoUVVGaFowSXNSMEZCWWl4RlFVRllMRVZCUVN0Q1NpeExRVUV2UWl4RFFVRlFPMEZCUTBRc1EwRXpRME1zZDBOQk5rTkVSaXhuUWtGQlRYRkNMRlZCTjBOTUxFVkJOa05yUWl4VlFVRlZia0lzUzBGQlZpeEZRVUZwUWp0QlFVTnVReXhUUVVGUGRrSXNXVUZCU3pCQ0xFdEJRVXdzUTBGQlYyUXNZVUZCWVdVc1IwRkJZaXhGUVVGWUxFVkJRU3RDU2l4TFFVRXZRaXhEUVVGUU8wRkJRMFFzUTBFdlEwTXNkME5CYVVSRVJpeG5Ra0ZCVFhOQ0xGVkJha1JNTEVWQmFVUnJRaXhWUVVGVmNFSXNTMEZCVml4RlFVRnBRanRCUVVOdVF5eFRRVUZQY0VJc1dVRkJTM1ZDTEV0QlFVd3NRMEZCVjJJc1kwRkJZMk1zUjBGQlpDeEZRVUZZTEVWQlFXZERTaXhMUVVGb1F5eERRVUZRTzBGQlEwUXNRMEZ1UkVNc2RVSkJRVW83TzBGQk5FUkJMRWxCUVVseFFpdzRSa0ZEUkhaQ0xHZENRVUZOUXl4VFFVUk1MRVZCUTJsQ08wRkJRMnBDZFVJc1RVRkVhVUlzWjBKQlExaERMRTFCUkZjc1JVRkRTRHRCUVVOYUxGRkJRVWxETEZOQlFWTTFRaXhaUVVGWlVTeEhRVUZhTEVWQlFXSTdRVUZEUVN4VFFVRkxMRWxCUVVseFFpeEpRVUZKTEVOQlFXSXNSVUZCWjBKQkxFbEJRVWxHTEU5QlFVOUhMRTFCUVROQ0xFVkJRVzFETEVWQlFVVkVMRU5CUVhKRExFVkJRWGRETzBGQlEzUkRSQ3hoUVVGUFF5eERRVUZRTEVsQlFWbEdMRTlCUVU5RkxFTkJRVkFzUTBGQldqdEJRVU5FTzBGQlEwUXNWMEZCVDBRc1RVRkJVRHRCUVVORUxFZEJVR2RDT3p0QlFWRnFRa2NzVVVGQlRUdEJRVkpYTEVOQlJHcENMREJEUVZsRU4wSXNaMEpCUVUxSExGVkJXa3dzUlVGWmEwSTdRVUZEYkVKeFFpeE5RVVJyUWl4blFrRkRXa01zVFVGRVdTeEZRVU5LTzBGQlExb3NVVUZCU1VNc1UwRkJVelZDTEZsQlFWbFJMRWRCUVZvc1JVRkJZanRCUVVOQkxGTkJRVXNzU1VGQlNYRkNMRWxCUVVrc1EwRkJZaXhGUVVGblFrRXNTVUZCU1VZc1QwRkJUMGNzVFVGQk0wSXNSVUZCYlVNc1JVRkJSVVFzUTBGQmNrTXNSVUZCZDBNN1FVRkRkRU5FTEdGQlFVOHNTVUZCU1VNc1EwRkJXQ3hKUVVGblFrWXNUMEZCVDBVc1EwRkJVQ3hGUVVGVlJ5eERRVUV4UWp0QlFVTkJTaXhoUVVGUExFbEJRVWxETEVOQlFVb3NSMEZCVVN4RFFVRm1MRWxCUVc5Q1JpeFBRVUZQUlN4RFFVRlFMRVZCUVZWSkxFTkJRVGxDTzBGQlEwUTdRVUZEUkN4WFFVRlBUQ3hOUVVGUU8wRkJRMFFzUjBGU2FVSTdPMEZCVTJ4Q1J5eFJRVUZOTzBGQlZGa3NRMEZhYkVJc01FTkJkMEpFTjBJc1owSkJRVTFQTEZWQmVFSk1MRVZCZDBKclFqdEJRVU5zUW1sQ0xGRkJRVTFSTEZOQlJGazdRVUZGYkVKSUxGRkJRVTA3UVVGR1dTeERRWGhDYkVJc01FTkJOa0pFTjBJc1owSkJRVTFUTEZWQk4wSk1MRVZCTmtKclFqdEJRVU5zUW1Vc1RVRkVhMElzWjBKQlExcERMRTFCUkZrc1JVRkRTanRCUVVOYUxGRkJRVWxETEZOQlFWTTFRaXhaUVVGWlVTeEhRVUZhTEVWQlFXSTdRVUZEUVN4VFFVRkxMRWxCUVVseFFpeEpRVUZKTEVOQlFXSXNSVUZCWjBKQkxFbEJRVWxHTEU5QlFVOUhMRTFCUVROQ0xFVkJRVzFETEVWQlFVVkVMRU5CUVhKRExFVkJRWGRETzBGQlEzUkRMRlZCUVVsTkxFbEJRVWxTTEU5QlFVOUZMRU5CUVZBc1EwRkJVanRCUVVOQlJDeGhRVUZQTEVsQlFVbERMRU5CUVZnc1NVRkJaMEpOTEVWQlFVVklMRU5CUVd4Q08wRkJRMEZLTEdGQlFVOHNTVUZCU1VNc1EwRkJTaXhIUVVGUkxFTkJRV1lzU1VGQmIwSk5MRVZCUVVWR0xFTkJRWFJDTzBGQlEwRk1MR0ZCUVU4c1NVRkJTVU1zUTBGQlNpeEhRVUZSTEVOQlFXWXNTVUZCYjBKTkxFVkJRVVZETEVOQlFYUkNPMEZCUTBGU0xHRkJRVThzU1VGQlNVTXNRMEZCU2l4SFFVRlJMRU5CUVdZc1NVRkJiMEpOTEVWQlFVVkZMRU5CUVhSQ08wRkJRMFE3UVVGRFJDeFhRVUZQVkN4TlFVRlFPMEZCUTBRc1IwRllhVUk3TzBGQldXeENSeXhSUVVGTk8wRkJXbGtzUTBFM1FteENMREJEUVRSRFJEZENMR2RDUVVGTlZ5eFhRVFZEVEN4RlFUUkRiVUk3UVVGRGJrSmhMRTFCUkcxQ0xHZENRVU5pUXl4TlFVUmhMRVZCUTB3N1FVRkRXaXhSUVVGSlF5eFRRVUZUYWtNc1kwRkJZMkVzUjBGQlpDeEZRVUZpTzBGQlEwRXNVMEZCU3l4SlFVRkpjVUlzU1VGQlNTeERRVUZpTEVWQlFXZENRU3hKUVVGSlJpeFBRVUZQUnl4TlFVRXpRaXhGUVVGdFF5eEZRVUZGUkN4RFFVRnlReXhGUVVGM1F6dEJRVU4wUTBRc1lVRkJUME1zUTBGQlVDeEpRVUZaUml4UFFVRlBSU3hEUVVGUUxFTkJRVm83UVVGRFJEdEJRVU5FTEZkQlFVOUVMRTFCUVZBN1FVRkRSQ3hIUVZCclFqczdRVUZSYmtKSExGRkJRVTA3UVVGU1lTeERRVFZEYmtJc01FTkJkVVJFTjBJc1owSkJRVTFaTEZsQmRrUk1MRVZCZFVSdlFqdEJRVU53UWxrc1RVRkViMElzWjBKQlEyUkRMRTFCUkdNc1JVRkRUanRCUVVOYUxGRkJRVWxETEZOQlFWTnFReXhqUVVGallTeEhRVUZrTEVWQlFXSTdRVUZEUVN4VFFVRkxMRWxCUVVseFFpeEpRVUZKTEVOQlFXSXNSVUZCWjBKQkxFbEJRVWxHTEU5QlFVOUhMRTFCUVROQ0xFVkJRVzFETEVWQlFVVkVMRU5CUVhKRExFVkJRWGRETzBGQlEzUkRSQ3hoUVVGUExFbEJRVWxETEVOQlFWZ3NTVUZCWjBKR0xFOUJRVTlGTEVOQlFWQXNSVUZCVlVjc1EwRkJNVUk3UVVGRFFVb3NZVUZCVHl4SlFVRkpReXhEUVVGS0xFZEJRVkVzUTBGQlppeEpRVUZ2UWtZc1QwRkJUMFVzUTBGQlVDeEZRVUZWU1N4RFFVRTVRanRCUVVORU8wRkJRMFFzVjBGQlQwd3NUVUZCVUR0QlFVTkVMRWRCVW0xQ096dEJRVk53UWtjc1VVRkJUVHRCUVZSakxFTkJka1J3UWl3d1EwRnRSVVEzUWl4blFrRkJUV0VzV1VGdVJVd3NSVUZ0Ulc5Q08wRkJRM0JDVnl4UlFVRk5VU3hUUVVSak8wRkJSWEJDU0N4UlFVRk5PMEZCUm1Nc1EwRnVSWEJDTERCRFFYZEZSRGRDTEdkQ1FVRk5ZeXhaUVhoRlRDeEZRWGRGYjBJN1FVRkRjRUpWTEUxQlJHOUNMR2RDUVVOa1F5eE5RVVJqTEVWQlEwNDdRVUZEV2l4UlFVRkpReXhUUVVGVGFrTXNZMEZCWTJFc1IwRkJaQ3hGUVVGaU8wRkJRMEVzVTBGQlN5eEpRVUZKY1VJc1NVRkJTU3hEUVVGaUxFVkJRV2RDUVN4SlFVRkpSaXhQUVVGUFJ5eE5RVUV6UWl4RlFVRnRReXhGUVVGRlJDeERRVUZ5UXl4RlFVRjNRenRCUVVOMFF5eFZRVUZKVFN4SlFVRkpVaXhQUVVGUFJTeERRVUZRTEVOQlFWSTdRVUZEUVVRc1lVRkJUeXhKUVVGSlF5eERRVUZZTEVsQlFXZENUU3hGUVVGRlNDeERRVUZzUWp0QlFVTkJTaXhoUVVGUExFbEJRVWxETEVOQlFVb3NSMEZCVVN4RFFVRm1MRWxCUVc5Q1RTeEZRVUZGUml4RFFVRjBRanRCUVVOQlRDeGhRVUZQTEVsQlFVbERMRU5CUVVvc1IwRkJVU3hEUVVGbUxFbEJRVzlDVFN4RlFVRkZReXhEUVVGMFFqdEJRVU5CVWl4aFFVRlBMRWxCUVVsRExFTkJRVW9zUjBGQlVTeERRVUZtTEVsQlFXOUNUU3hGUVVGRlJTeERRVUYwUWp0QlFVTkVPMEZCUTBRc1YwRkJUMVFzVFVGQlVEdEJRVU5FTEVkQldHMUNPenRCUVZsd1FrY3NVVUZCVFR0QlFWcGpMRU5CZUVWd1Fpd3dRMEYxUmtRM1FpeG5Ra0ZCVFdVc1dVRjJSa3dzUlVGMVJtOUNPMEZCUTNCQ1V5eFJRVUZOVVN4VFFVUmpPMEZCUlhCQ1NDeFJRVUZOTzBGQlJtTXNRMEYyUm5CQ0xEQkRRVFJHUkRkQ0xHZENRVUZOYVVJc1dVRTFSa3dzUlVFMFJtOUNPMEZCUTNCQ1R5eE5RVVJ2UWl4blFrRkRaRU1zVFVGRVl5eEZRVU5PTzBGQlExb3NVVUZCU1VNc1UwRkJVMnBETEdOQlFXTmhMRWRCUVdRc1JVRkJZanRCUVVOQkxGTkJRVXNzU1VGQlNYRkNMRWxCUVVrc1EwRkJZaXhGUVVGblFrRXNTVUZCU1VZc1QwRkJUMGNzVFVGQk0wSXNSVUZCYlVNc1JVRkJSVVFzUTBGQmNrTXNSVUZCZDBNN1FVRkRkRU1zVlVGQlNVMHNTVUZCU1ZJc1QwRkJUMFVzUTBGQlVDeERRVUZTTzBGQlEwRkVMR0ZCUVU4c1NVRkJTVU1zUTBGQldDeEpRVUZuUWswc1JVRkJSVWNzUTBGQmJFSTdRVUZEUVZZc1lVRkJUeXhKUVVGSlF5eERRVUZLTEVkQlFWRXNRMEZCWml4SlFVRnZRazBzUlVGQlJVa3NRMEZCZEVJN1FVRkRRVmdzWVVGQlR5eEpRVUZKUXl4RFFVRktMRWRCUVZFc1EwRkJaaXhKUVVGdlFrMHNSVUZCUlVzc1EwRkJkRUk3UVVGRFFWb3NZVUZCVHl4SlFVRkpReXhEUVVGS0xFZEJRVkVzUTBGQlppeEpRVUZ2UWswc1JVRkJSVTBzUTBGQmRFSTdRVUZEUkR0QlFVTkVMRmRCUVU5aUxFMUJRVkE3UVVGRFJDeEhRVmh0UWpzN1FVRlpjRUpITEZGQlFVMDdRVUZhWXl4RFFUVkdjRUlzTUVOQk1rZEVOMElzWjBKQlFVMXRRaXhWUVROSFRDeEZRVEpIYTBJN1FVRkRiRUpMTEUxQlJHdENMR2RDUVVOYVF5eE5RVVJaTEVWQlEwbzdRVUZEV2l4UlFVRkpReXhUUVVGVGFrTXNZMEZCWTJFc1IwRkJaQ3hGUVVGaU8wRkJRMEVzVTBGQlN5eEpRVUZKY1VJc1NVRkJTU3hEUVVGaUxFVkJRV2RDUVN4SlFVRkpSaXhQUVVGUFJ5eE5RVUV6UWl4RlFVRnRReXhGUVVGRlJDeERRVUZ5UXl4RlFVRjNRenRCUVVOMFF5eFZRVUZKVFN4SlFVRkpVaXhQUVVGUFJTeERRVUZRTEVOQlFWSTdRVUZEUVVRc1lVRkJUMk1zUjBGQlVDeERRVUZYVUN4RlFVRkZVU3hEUVVGaUxFVkJRV2RDTEVsQlFVbGtMRU5CUVhCQ08wRkJRMFE3UVVGRFJDeFhRVUZQUkN4TlFVRlFPMEZCUTBRc1IwRlNhVUk3TzBGQlUyeENSeXhSUVVGTk8wRkJWRmtzUTBFelIyeENMREJEUVhWSVJEZENMR2RDUVVGTmNVSXNWVUYyU0V3c1JVRjFTR3RDTzBGQlEyeENSeXhSUVVGTlVTeFRRVVJaTzBGQlJXeENTQ3hSUVVGTk8wRkJSbGtzUTBGMlNHeENMREJEUVRaSVJEZENMR2RDUVVGTmMwSXNWVUUzU0V3c1JVRTJTR3RDTzBGQlEyeENSU3hOUVVSclFpeG5Ra0ZEV2tNc1RVRkVXU3hGUVVOS08wRkJRMW9zVVVGQlNVTXNVMEZCVTJwRExHTkJRV05oTEVkQlFXUXNSVUZCWWp0QlFVTkJMRk5CUVVzc1NVRkJTWEZDTEVsQlFVa3NRMEZCWWl4RlFVRm5Ra0VzU1VGQlNVWXNUMEZCVDBjc1RVRkJNMElzUlVGQmJVTXNSVUZCUlVRc1EwRkJja01zUlVGQmQwTTdRVUZEZEVNc1ZVRkJTVTBzU1VGQlNWSXNUMEZCVDBVc1EwRkJVQ3hEUVVGU08wRkJRMEZFTEdGQlFVOWpMRWRCUVZBc1EwRkJWMUFzUlVGQlJWRXNRMEZCWWl4RlFVRm5RaXhMUVVGTFpDeERRVUZ5UWp0QlFVTkVPMEZCUTBRc1YwRkJUMFFzVFVGQlVEdEJRVU5FTEVkQlVtbENPenRCUVZOc1FrY3NVVUZCVFR0QlFWUlpMRU5CTjBoc1FpeDVRa0ZCU2pzN1NVRm5TbkZDWVN4Sk8wRkJRMjVDT3pzN096czdRVUZOUVN4blFrRkJXVU1zVFVGQldpeEZRVUZ2UWtNc1NVRkJjRUlzUlVGQk1FSTdRVUZCUVRzN1FVRkJRVHM3UVVGRGVFSXNVMEZCUzBNc1QwRkJUQ3hIUVVGbFJpeE5RVUZtTzBGQlEwRXNVMEZCUzBjc1YwRkJUQ3hIUVVGdFFpeEpRVUZKUXl4dlFrRkJTaXhEUVVGbFNpeE5RVUZtTEVOQlFXNUNPMEZCUTBFc1UwRkJTMHNzUzBGQlRDeEhRVUZoU2l4SlFVRmlPMEZCUTBFc1UwRkJTMHNzYTBKQlFVd3NhVVZCUTBkcVJDeG5Ra0ZCVFVNc1UwRkVWQ3hGUVVOeFFpeERRVVJ5UWl4MVEwRkZSMFFzWjBKQlFVMUhMRlZCUmxRc1JVRkZjMEpETEZsQlFVdDRRaXhOUVVGTUxFTkJRVmtzUTBGQldpeEZRVUZsTEVOQlFXWXNRMEZHZEVJc2RVTkJSMGR2UWl4blFrRkJUVThzVlVGSVZDeEZRVWR6UWtNc1dVRkJTelZDTEUxQlFVd3NRMEZCV1N4RFFVRmFMRVZCUVdVc1EwRkJaaXhGUVVGclFpeERRVUZzUWl4RFFVaDBRaXgxUTBGSlIyOUNMR2RDUVVGTlV5eFZRVXBVTEVWQlNYTkNReXhaUVVGTE9VSXNUVUZCVEN4RFFVRlpMRU5CUVZvc1JVRkJaU3hEUVVGbUxFVkJRV3RDTEVOQlFXeENMRVZCUVhGQ0xFTkJRWEpDTEVOQlNuUkNMSFZEUVV0SGIwSXNaMEpCUVUxWExGZEJURlFzUlVGTGRVSXNSMEZNZGtJc2RVTkJUVWRZTEdkQ1FVRk5XU3haUVU1VUxFVkJUWGRDVWl4WlFVRkxlRUlzVFVGQlRDeERRVUZaTEVOQlFWb3NSVUZCWlN4RFFVRm1MRU5CVG5oQ0xIVkRRVTlIYjBJc1owSkJRVTFoTEZsQlVGUXNSVUZQZDBKTUxGbEJRVXMxUWl4TlFVRk1MRU5CUVZrc1EwRkJXaXhGUVVGbExFTkJRV1lzUlVGQmEwSXNRMEZCYkVJc1EwRlFlRUlzZFVOQlVVZHZRaXhuUWtGQlRXTXNXVUZTVkN4RlFWRjNRa29zV1VGQlN6bENMRTFCUVV3c1EwRkJXU3hEUVVGYUxFVkJRV1VzUTBGQlppeEZRVUZyUWl4RFFVRnNRaXhGUVVGeFFpeERRVUZ5UWl4RFFWSjRRaXgxUTBGVFIyOUNMR2RDUVVGTlpTeFpRVlJVTEVWQlUzZENReXhqUVVGUGNFTXNUVUZCVUN4RFFVRmpMRU5CUVdRc1JVRkJhVUlzUTBGQmFrSXNSVUZCYjBJc1EwRkJjRUlzUTBGVWVFSXNkVU5CVlVkdlFpeG5Ra0ZCVFdsQ0xGbEJWbFFzUlVGVmQwSkRMR05CUVU5MFF5eE5RVUZRTEVOQlFXTXNRMEZCWkN4RlFVRnBRaXhEUVVGcVFpeEZRVUZ2UWl4RFFVRndRaXhGUVVGMVFpeERRVUYyUWl4RFFWWjRRaXgxUTBGWFIyOUNMR2RDUVVGTmJVSXNWVUZZVkN4RlFWZHpRa01zV1VGQlMzaERMRTFCUVV3c1JVRllkRUlzZFVOQldVZHZRaXhuUWtGQlRYRkNMRlZCV2xRc1JVRlpjMEl4UXl4WlFVRkxReXhOUVVGTUxFVkJXblJDTEhWRFFXRkhiMElzWjBKQlFVMXpRaXhWUVdKVUxFVkJZWE5DZUVNc1dVRkJTMFlzVFVGQlRDeEZRV0owUWl4MVEwRmpSMjlDTEdkQ1FVRk5hMFFzWjBKQlpGUXNSVUZqTkVKT0xFdEJRVXRQTEdOQlpHcERMSFZEUVdWSGJrUXNaMEpCUVUxdlJDeHJRa0ZtVkN4RlFXVTRRbElzUzBGQlMxTXNhMEpCWm01RE8wRkJhVUpCTEZOQlFVdERMRk5CUVV3c1IwRkJhVUlzUlVGQmFrSTdRVUZEUVN4VFFVRkxReXhwUWtGQlRDeEhRVUY1UWl4RFFVRjZRanM3UVVGRlFTeFRRVUZMUXl4VlFVRk1MRWRCUVd0Q0xFbEJRVWw0UlN4clFrRkJTaXhEUVVGblFpeFpRVUZOTzBGQlEzUkRMR0ZCUVU4c1NVRkJTWGxGTEdOQlFVb3NSVUZCVUR0QlFVTkVMRXRCUm1sQ0xFVkJSV1lzUTBGR1pTeERRVUZzUWpzN1FVRkpRU3hUUVVGTFF5eGxRVUZNTEVkQlFYVkNMRWxCUVVreFJTeHJRa0ZCU2l4RFFVRm5RaXhaUVVGTk8wRkJRek5ETEdGQlFVODdRVUZEVERKRkxHVkJRVThzU1VGRVJqdEJRVVZNUXl4alFVRk5MRWxCUmtRN1FVRkhURU1zV1VGQlNTeEpRVWhETzBGQlNVeERMR2RDUVVGUkxFbEJTa2c3UVVGTFRFTXNhVUpCUVZNc1NVRk1TanRCUVUxTVF5eHJRa0ZCVlR0QlFVNU1MRTlCUVZBN1FVRlJSQ3hMUVZSelFpeEZRVk53UWl4SFFWUnZRaXhEUVVGMlFqczdRVUZYUVN4VFFVRkxReXhuUWtGQlRDeEhRVUYzUWl4SlFVRkpha1lzYTBKQlFVb3NRMEZCWjBJc1dVRkJUVHRCUVVNMVF5eGhRVUZQTEVsQlFVbEJMR3RDUVVGS0xFTkJRV2RDTEZsQlFVMDdRVUZETTBJc1pVRkJUenRCUVVOTU1rVXNhVUpCUVU4c1NVRkVSanRCUVVWTVF5eG5Ra0ZCVFN4SlFVWkVPMEZCUjB4RExHTkJRVWtzU1VGSVF6dEJRVWxNUXl4clFrRkJVU3hKUVVwSU8wRkJTMHhETEcxQ1FVRlRMRWxCVEVvN1FVRk5URWNzY1VKQlFWY3NTVUZPVGp0QlFVOU1ReXh0UWtGQlV5eERRVUZETEVOQlVFdzdRVUZSVEVnc2IwSkJRVlU3UVVGU1RDeFRRVUZRTzBGQlZVUXNUMEZZVFN4RlFWZEtMRWRCV0Vrc1EwRkJVRHRCUVZsRUxFdEJZblZDTEVWQllYSkNMRVZCWW5GQ0xFTkJRWGhDTzBGQlkwUTdPenM3ZDBOQlJXMUNPMEZCUTJ4Q0xGZEJRVXRVTEdsQ1FVRk1MRWRCUVhsQ0xFTkJRWHBDTzBGQlEwUTdPenQzUTBGRmJVSTdRVUZEYkVJc1ZVRkJUVm9zVTBGQlV5eExRVUZMUlN4UFFVRndRanM3UVVGRlFTeFZRVUZKZFVJc1QwRkJUeXhMUVVGTFlpeHBRa0ZCYUVJN1FVRkRRU3hWUVVGSllTeFJRVUZSZWtJc1QwRkJUekJDTEV0QlFWQXNRMEZCWVVNc1pVRkJla0lzUlVGQk1FTTdRVUZEZUVORExHZENRVUZSUXl4SlFVRlNMRzlDUVVFNFFrb3NTVUZCT1VJc2IwUkJRV2xHZWtJc1QwRkJUekJDTEV0QlFWQXNRMEZCWVVNc1pVRkJPVVk3UVVGRFJEczdRVUZGUkN4WFFVRkxaaXhwUWtGQlRDeEpRVUV3UWl4RFFVRXhRanRCUVVOQkxHRkJRVTloTEVsQlFWQTdRVUZEUkRzN08yMURRVVZqU3l4SkxFVkJRVTFETEVVc1JVRkJTVHRCUVVOMlFpeFhRVUZMY0VJc1UwRkJUQ3hEUVVGbGJVSXNTVUZCWml4SlFVRjFRa01zUlVGQmRrSTdRVUZEUkRzN096UkNRVVZSTzBGQlExQXNWMEZCU3pWQ0xGZEJRVXdzUTBGQmFVSTJRaXhMUVVGcVFqdEJRVU5CTEZkQlFVdERMRXRCUVV3N1FVRkRSRHM3T3pSQ1FVVlBPMEZCUTA0c1YwRkJTM0JDTEZWQlFVd3NRMEZCWjBKdlFpeExRVUZvUWp0QlFVTkJMRmRCUVV0WUxHZENRVUZNTEVOQlFYTkNWeXhMUVVGMFFqdEJRVU5FT3pzN2JVTkJSV003UVVGRFlpeGhRVUZQTEV0QlFVdHdRaXhWUVVGTUxFTkJRV2RDYkVRc1IwRkJhRUlzUlVGQlVEdEJRVU5FT3pzN05FSkJSVTkxUlN4SkxFVkJRVTFETEVzc1JVRkJUenRCUVVOdVFpeFZRVUZOYmtNc1UwRkJVeXhMUVVGTFJTeFBRVUZ3UWpzN1FVRkZRVHRCUVVOQlJpeGhRVUZQYjBNc1kwRkJVQ3hEUVVGelFrWXNTMEZCUzBjc1dVRkJNMEk3TzBGQlJVRTdRVUZEUVhKRExHRkJRVTl6UXl4WFFVRlFMRU5CUTBWS0xFdEJRVXRMTEV0QlFVd3NRMEZCVjNCRUxFTkJSR0lzUlVGRlJTdERMRXRCUVV0TExFdEJRVXdzUTBGQlYyNUVMRU5CUm1Jc1JVRkhSVGhETEV0QlFVdExMRXRCUVV3c1EwRkJWeTlETEVOQlNHSXNSVUZKUlRCRExFdEJRVXRMTEV0QlFVd3NRMEZCVjBNc1EwRktZanM3UVVGUFFUdEJRVU5CTEZWQlFVbERMRmxCUVZrc1JVRkJhRUk3UVVGRFFTeFZRVUZKVUN4TFFVRkxVU3hYUVVGTUxFZEJRVzFDY2tZc1owSkJRVTF6Uml4WFFVRTNRaXhGUVVFd1F6dEJRVU40UTBZc2EwSkJRVlZITEV0QlFWWXNSMEZCYTBJc1EwRkRhRUpXTEV0QlFVdFhMRTFCUVV3c1EwRkJXWEJFTEVOQlJFa3NSVUZGYUVKNVF5eExRVUZMVnl4TlFVRk1MRU5CUVZsdVJDeERRVVpKTEVWQlIyaENkME1zUzBGQlMxY3NUVUZCVEN4RFFVRlpiRVFzUTBGSVNTeEZRVWxvUW5WRExFdEJRVXRYTEUxQlFVd3NRMEZCV1dwRUxFTkJTa2tzUTBGQmJFSTdRVUZOUkR0QlFVTkVMRlZCUVVselF5eExRVUZMVVN4WFFVRk1MRWRCUVcxQ2NrWXNaMEpCUVUxNVJpeFhRVUUzUWl4RlFVRXdRenRCUVVONFEwd3NhMEpCUVZWTkxFdEJRVllzUjBGQmEwSmlMRXRCUVV0akxFMUJRWFpDTzBGQlEwUTdRVUZEUkN4VlFVRkpaQ3hMUVVGTFVTeFhRVUZNTEVkQlFXMUNja1lzWjBKQlFVMDBSaXhoUVVFM1FpeEZRVUUwUXp0QlFVTXhRMUlzYTBKQlFWVlRMRTlCUVZZc1IwRkJiMEpvUWl4TFFVRkxhVUlzVVVGQmVrSTdRVUZEUkR0QlFVTkVia1FzWVVGQlQyZERMRXRCUVZBc1EwRkJZVk1zVTBGQllqczdRVUZGUVR0QlFVTkJMRmRCUVVzeFFpeGxRVUZNTEVOQlFYRkNhMElzUzBGQmNrSTdPMEZCUlVFc1YwRkJTeXhKUVVGSmFrUXNTVUZCU1N4RFFVRmlMRVZCUVdkQ1FTeEpRVUZKYlVRc1RVRkJUV2xDTEU5QlFVNHNRMEZCWTI1RkxFMUJRV3hETEVWQlFUQkRMRVZCUVVWRUxFTkJRVFZETEVWQlFTdERPMEZCUXpkRExGbEJRVWxuUXl4UlFVRlJiVUlzVFVGQlRXbENMRTlCUVU0c1EwRkJZME1zU1VGQlpDeERRVUZ0UW5KRkxFTkJRVzVDTEVOQlFWbzdPMEZCUlVFN1FVRkRRU3haUVVGSkxFTkJRVU5uUXl4TlFVRk5jME1zV1VGQlRpeEhRVUZ4UW5CQ0xFdEJRVXR2UWl4WlFVRXpRaXhOUVVFMlF5eERRVUZxUkN4RlFVRnZSRHRCUVVOc1JEdEJRVU5FT3p0QlFVVkVMRmxCUVVsRExGZEJRVmNzUzBGQlMzaERMR1ZCUVV3c1EwRkJjVUp3UkN4SFFVRnlRaXhGUVVGbU8wRkJRMEZ4UkN4alFVRk5kME1zWlVGQlRpeERRVUZ6UWtRc1VVRkJkRUk3UVVGRFJEczdRVUZGUkR0QlFVTkJia2dzYTBKQlFWazJSaXhMUVVGYU96dEJRVVZCTEZkQlFVc3NTVUZCU1dwRUxFdEJRVWtzUTBGQllpeEZRVUZuUWtFc1MwRkJTV3RFTEV0QlFVdDFRaXhQUVVGTUxFTkJRV0Y0UlN4TlFVRnFReXhGUVVGNVF5eEZRVUZGUkN4RlFVRXpReXhGUVVFNFF6dEJRVU0xUXl4WlFVRkpNVU1zVVVGQlVUUkdMRXRCUVV0MVFpeFBRVUZNTEVOQlFXRjZSU3hGUVVGaUxFTkJRVm83UVVGRFFTeFpRVUZKTUVVc1lVRkJZU3hMUVVGTGNFTXNaMEpCUVV3c1EwRkJjMEl6UkN4SFFVRjBRaXhGUVVGcVFqdEJRVU5CSzBZc2JVSkJRVmQ2UWl4TFFVRllPenRCUVVWQkxHRkJRVXNzU1VGQlNUQkNMRWxCUVVrc1EwRkJZaXhGUVVGblFrRXNTVUZCU1N4TFFVRkxOVU1zWlVGQlRDeERRVUZ4UWpsQ0xFMUJRWHBETEVWQlFXbEVMRVZCUVVVd1JTeERRVUZ1UkN4RlFVRnpSRHRCUVVOd1JDeGpRVUZKU2l4WlFVRlhMRXRCUVV0NFF5eGxRVUZNTEVOQlFYRkNjME1zU1VGQmNrSXNRMEZCTUVKTkxFTkJRVEZDTEVOQlFXWTdRVUZEUVN4alFVRkpReXhQUVVGUFRDeFZRVUZUY0VNc1RVRkJWQ3hEUVVGblFqQkRMRmxCUVdoQ0xFTkJRVFpDZGtnc1MwRkJOMElzUTBGQldEczdRVUZGUVN4alFVRkpjMGdzU1VGQlNpeEZRVUZWTzBGQlExSXNaMEpCUVVsRkxGbEJRVmxLTEZkQlFWY3ZSaXhIUVVGWUxFVkJRV2hDTzBGQlEwRnRSeXh6UWtGQlZUbERMRXRCUVZZc1IwRkJhMEoxUXl4VlFVRlRka01zUzBGQk0wSTdRVUZEUVRoRExITkNRVUZWTjBNc1NVRkJWaXhIUVVGcFFuTkRMRlZCUVZOMFF5eEpRVUV4UWp0QlFVTkJOa01zYzBKQlFWVTFReXhGUVVGV0xFZEJRV1Z4UXl4VlFVRlRja01zUlVGQmVFSTdRVUZEUVRSRExITkNRVUZWTTBNc1RVRkJWaXhIUVVGdFFtOURMRlZCUVZOd1F5eE5RVUUxUWp0QlFVTkJNa01zYzBKQlFWVXhReXhQUVVGV0xFZEJRVzlDYlVNc1ZVRkJVMjVETEU5QlFUZENPMEZCUTBFd1F5eHpRa0ZCVlhaRExGTkJRVllzUjBGQmMwSnhReXhKUVVGMFFqdEJRVU5CUlN4elFrRkJWWFJETEU5QlFWWXNSMEZCYjBJc1EwRkJReXhEUVVGeVFqdEJRVU5CYzBNc2MwSkJRVlY2UXl4UlFVRldMRWRCUVhGQ2EwTXNWVUZCVTJ4RExGRkJRVGxDTzBGQlEwUTdRVUZEUmpzN1FVRkZSQ3haUVVGSk1FTXNXVUZCV1ROSUxGbEJRVmwxUWl4SFFVRmFMRVZCUVdoQ08wRkJRMEZ2Unl4clFrRkJWWHBJTEV0QlFWWXNSMEZCYTBKQkxFdEJRV3hDTzBGQlEwRjVTQ3hyUWtGQlZYaElMRXRCUVZZc1IwRkJhMEp0U0N4VlFVRnNRanRCUVVORU96dEJRVVZFTzBGQlEwRXNWMEZCU3l4SlFVRkpNVVVzVFVGQlNTeERRVUZpTEVWQlFXZENRU3hOUVVGSk5VTXNXVUZCV1RaRExFMUJRV2hETEVWQlFYZERMRVZCUVVWRUxFZEJRVEZETEVWQlFUWkRPMEZCUXpORExGbEJRVWxuUml4UFFVRlBOVWdzV1VGQldXbElMRWxCUVZvc1EwRkJhVUp5UlN4SFFVRnFRaXhEUVVGWU8wRkJRMEVzV1VGQlNTdERMRXRCUVVzc1MwRkJTM0JDTEZOQlFVd3NRMEZCWlhGRUxFdEJRVXN4U0N4TFFVRndRaXhEUVVGVU96dEJRVVZCZVVZc1YwRkJSMGNzU1VGQlNDeEZRVUZUT0VJc1MwRkJTM3BJTEV0QlFXUTdRVUZEUkR0QlFVTkdPenM3YVVOQlJXRXdTQ3hKTEVWQlFVMDdRVUZEYkVJc1ZVRkJUV3BGTEZOQlFWTXNTMEZCUzBVc1QwRkJjRUk3UVVGRFFTeFZRVUZKWjBVc1VVRkJVVVFzUzBGQlN6RkhMRXRCUVdwQ096dEJRVVZCTEZWQlFVa3lSeXhWUVVGVk4wVXNVMEZCWkN4RlFVRjVRanRCUVVOMlFqWkZMR2RDUVVGUlJDeExRVUZMUlN4SFFVRmlPMEZCUTBRN08wRkJSVVFzVlVGQlNVUXNWVUZCVlRkRkxGTkJRV1FzUlVGQmVVSTdRVUZEZGtJMlJTeG5Ra0ZCVVN4TFFVRkxOVVFzYTBKQlFVd3NRMEZCZDBJeVJDeExRVUZMUnl4SlFVRTNRaXhEUVVGU08wRkJRMFE3TzBGQlJVUXNWVUZCU1VZc1ZVRkJWVGRGTEZOQlFXUXNSVUZCZVVJN1FVRkRka0oxUXl4blFrRkJVVU1zU1VGQlVpeDFRMEZCYVVSdlF5eExRVUZMYmtNc1NVRkJkRVE3UVVGRFFUdEJRVU5FT3p0QlFVVkVMRlZCUTBWdFF5eExRVUZMUnl4SlFVRk1MRXRCUVdNdlJ5eG5Ra0ZCVFd0RUxHZENRVUZ3UWl4SlFVTkJNRVFzUzBGQlMwY3NTVUZCVEN4TFFVRmpMMGNzWjBKQlFVMXZSQ3hyUWtGR2RFSXNSVUZIUlR0QlFVTkJMRmxCUVVrMFJDeE5RVUZOUXl4UFFVRk9MRU5CUVdOS0xFdEJRV1FzUTBGQlNpeEZRVUV3UWp0QlFVTjRRaXhqUVVGSlFTeE5RVUZOYWtZc1RVRkJUaXhIUVVGbFowWXNTMEZCUzAwc1MwRkJlRUlzUlVGQkswSTdRVUZETjBJelF5eHZRa0ZCVVRSRExFdEJRVklzT0VKQlFYbERVQ3hMUVVGTGJrTXNTVUZCT1VNc2VVTkJRWE5HYjBNc1RVRkJUV3BHTEUxQlFUVkdMREJDUVVGMVNHZEdMRXRCUVV0TkxFdEJRVFZJTzBGQlEwRTdRVUZEUkR0QlFVTkVMR05CUVVsRkxGRkJRVkYwU0N4WlFVRlpVU3hIUVVGYUxFVkJRVm83UVVGRFFTeGxRVUZMTEVsQlFVa3JSeXhSUVVGUkxFTkJRV3BDTEVWQlFXOUNRU3hSUVVGUlVpeE5RVUZOYWtZc1RVRkJiRU1zUlVGQk1FTXNSVUZCUlhsR0xFdEJRVFZETEVWQlFXMUVPMEZCUTJwRVJDeHJRa0ZCVFVNc1MwRkJUaXhKUVVGbExFdEJRVXRETEdsQ1FVRk1MRVZCUVdZN1FVRkRSRHRCUVVORU0wVXNhVUpCUVU4MFJTeGxRVUZRTEVOQlFYVkNXQ3hMUVVGTGJrTXNTVUZCTlVJc1JVRkJhME52UXl4TFFVRnNReXhGUVVGNVEwOHNTMEZCZWtNN1FVRkRSQ3hUUVZaRUxFMUJWVTg3UVVGRFRIcEZMR2xDUVVGUE5rVXNWVUZCVUN4RFFVRnJRbG9zUzBGQlMyNURMRWxCUVhaQ0xFVkJRVFpDYjBNc1MwRkJOMElzUlVGQmIwTXNTMEZCUzFNc2FVSkJRVXdzUlVGQmNFTTdRVUZEUkR0QlFVTkdMRTlCYWtKRUxFMUJhVUpQTzBGQlEwd3NXVUZCU1ZZc1MwRkJTMkVzVVVGQlZDeEZRVUZ0UWp0QlFVTnFRamxGTEdsQ1FVRlBLMFVzYTBKQlFWQXNRMEZCTUVKa0xFdEJRVXR1UXl4SlFVRXZRaXhGUVVGeFEyOURMRXRCUVhKRE8wRkJRMFFzVTBGR1JDeE5RVWRMTzBGQlEwaHNSU3hwUWtGQlQyZEdMRlZCUVZBc1EwRkJhMEptTEV0QlFVdHVReXhKUVVGMlFpeEZRVUUyUW05RExFdEJRVGRDTzBGQlEwUTdRVUZEUmp0QlFVTkdPenM3TUVKQlJVdGxMRWtzUlVGQlRUdEJRVU5XTEZWQlFVMXFSaXhUUVVGVExFdEJRVXRGTEU5QlFYQkNPMEZCUTBFc1ZVRkJUV2RHTEdGQlFXRXNTMEZCU3k5RkxGZEJRWGhDTzBGQlJsVXNWVUZIUm1Nc1NVRklSU3hIUVVkcFJHZEZMRWxCU0dwRUxFTkJSMFpvUlN4SlFVaEZPMEZCUVVFc1ZVRkhTVU1zUlVGSVNpeEhRVWRwUkN0RUxFbEJTR3BFTEVOQlIwa3ZSQ3hGUVVoS08wRkJRVUVzVlVGSFVVY3NVVUZJVWl4SFFVZHBSRFJFTEVsQlNHcEVMRU5CUjFFMVJDeFJRVWhTTzBGQlFVRXNWVUZIYTBKRkxGTkJTR3hDTEVkQlIybEVNRVFzU1VGSWFrUXNRMEZIYTBJeFJDeFRRVWhzUWp0QlFVRkJMRlZCUnpaQ1NDeFBRVWczUWl4SFFVZHBSRFpFTEVsQlNHcEVMRU5CUnpaQ04wUXNUMEZJTjBJN1FVRkJRU3hWUVVkelEwUXNUVUZJZEVNc1IwRkhhVVE0UkN4SlFVaHFSQ3hEUVVkelF6bEVMRTFCU0hSRE96dEJRVXRXTzBGQlEwRTdRVUZEUVRzN1FVRkRRVE5GTEcxQ1FVRmhlVVlzUzBGQllqdEJRVU5CZGtZc2JVSkJRV0YxUml4TFFVRmlPMEZCUTBGMFJpeHRRa0ZCWVhOR0xFdEJRV0k3UVVGRFFYSkdMRzFDUVVGaGNVWXNTMEZCWWp0QlFVTkJjRVlzYjBKQlFXTnZSaXhMUVVGa08wRkJRMEZ1Uml4dlFrRkJZMjFHTEV0QlFXUTdRVUZEUVd4R0xHbENRVUZYYTBZc1MwRkJXRHRCUVVOQmFFWXNhVUpCUVZkblJpeExRVUZZTzBGQlEwRXZSU3hwUWtGQlZ5dEZMRXRCUVZnN1FVRkRRVGxGTEd0Q1FVRlpPRVVzUzBGQldqczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRV2hDTEZkQlFVdHJSU3hqUVVGTUxFTkJRVzlDYWtvc1QwRkJjRUk3UVVGRFFUaEVMR0ZCUVU5blJpeFZRVUZRTEVOQlFXdENMR0ZCUVd4Q0xFVkJRV2xETjBrc1dVRkJTM1ZDTEV0QlFVd3NRMEZCVjJJc1kwRkJZMk1zUjBGQlpDeEZRVUZZTEVWQlFXZERla0lzVDBGQmFFTXNRMEZCYWtNN08wRkJSVUU3UVVGRFFVTXNhMEpCUVV0cFNpeE5RVUZNTEVOQlFWbHNTaXhQUVVGYUxFVkJRWEZDUVN4UFFVRnlRanRCUVVOQlF5eHJRa0ZCUzJ0S0xGTkJRVXdzUTBGQlpXNUtMRTlCUVdZc1JVRkJkMEpCTEU5QlFYaENPMEZCUTBFNFJDeGhRVUZQWjBZc1ZVRkJVQ3hEUVVGclFpeGxRVUZzUWl4RlFVRnRRemRKTEZsQlFVdDFRaXhMUVVGTUxFTkJRVmRpTEdOQlFXTmpMRWRCUVdRc1JVRkJXQ3hGUVVGblEzcENMRTlCUVdoRExFTkJRVzVETzBGQlEwRTdPMEZCUlVFc1YwRkJTeXhKUVVGSk9FTXNTVUZCU1N4RFFVRmlMRVZCUVdkQ1FTeEpRVUZKY1VNc1UwRkJVM0JETEUxQlFUZENMRVZCUVhGRFJDeEhRVUZ5UXl4RlFVRXdRenRCUVVONFF5eFpRVUZKYzBjc1pVRkJaV3BGTEZOQlFWTnlReXhEUVVGVUxFTkJRVzVDTzBGQlEwRXNZVUZCU3l4SlFVRkpkVWNzUjBGQlZDeEpRVUZuUWtRc1dVRkJhRUlzUlVGQk9FSTdRVUZETlVJc1pVRkJTMFVzV1VGQlRDeERRVUZyUWtZc1lVRkJZVU1zUjBGQllpeERRVUZzUWp0QlFVTkVPMEZCUTBZN08wRkJSVVE3UVVGRFFTeFhRVUZMTEVsQlFVbDJSeXhOUVVGSkxFTkJRV0lzUlVGQlowSkJMRTFCUVVsMVF5eFZRVUZWYTBVc1QwRkJWaXhEUVVGclFuaEhMRTFCUVhSRExFVkJRVGhETEVWQlFVVkVMRWRCUVdoRUxFVkJRVzFFTzBGQlEycEVMRmxCUVVrd1J5eFBRVUZQYmtVc1ZVRkJWV3RGTEU5QlFWWXNRMEZCYTBKNlJ5eEhRVUZzUWl4RFFVRllPMEZCUTBFc1dVRkJTWFZHTEZGQlFWRnlSQ3hIUVVGSGNVUXNTMEZCWmpzN1FVRkZRVHRCUVVOQkxGbEJRVWx5UkN4SFFVRkhlVVVzWVVGQlVDeEZRVUZ6UWp0QlFVTndRak5HTEdsQ1FVRlBORVlzWlVGQlVDeERRVUYxUWl4RFFVRjJRaXhGUVVFd1FqRkZMRWRCUVVkNVJTeGhRVUUzUWp0QlFVTkVPenRCUVVWRU8wRkJRMEVzV1VGQlNYcEZMRWRCUVVjeVJTeFpRVUZRTEVWQlFYRkNPMEZCUTI1Q04wWXNhVUpCUVU4NFJpeGpRVUZRTEVOQlFYTkNOVVVzUjBGQlJ6SkZMRmxCUVhwQ08wRkJRMFE3TzBGQlJVUTdRVUZEUVRkR0xHVkJRVThyUml4blFrRkJVQ3hEUVVGM1FqZEZMRWRCUVVjNFJTeGpRVUV6UWpzN1FVRkZRVHRCUVVOQkxGbEJRVWxETEZWQlFWVm1MRmRCUVZkblFpeFZRVUZZTEVOQlFYTkNVaXhMUVVGTFV5eFpRVUV6UWl4RlFVRjVReTlGTEU5QlFYcERMRVZCUVd0RVJDeFBRVUZQYVVZc1MwRkJla1FzUTBGQlpEdEJRVU5CY0Vjc1pVRkJUM0ZITEZWQlFWQXNRMEZCYTBKS0xFOUJRV3hDT3p0QlFVVkJPMEZCUTBGcVJ5eGxRVUZQYzBjc1YwRkJVQ3hEUVVGdFFsb3NTMEZCUzJFc1UwRkJlRUk3TzBGQlJVRTdRVUZEUVN4WlFVRkpZaXhMUVVGTFl5eE5RVUZVTEVWQlFXbENPMEZCUTJaNFJ5eHBRa0ZCVDNsSExGZEJRVkE3UVVGRFFYcEhMR2xDUVVGUE1FY3NaVUZCVUN4RFFVTkZhRUlzUzBGQlMybENMRk5CUkZBc1JVRkZSV3BDTEV0QlFVdHJRaXhUUVVaUUxFVkJSMFZzUWl4TFFVRkxiVUlzWTBGSVVDeEZRVWxGYmtJc1MwRkJTMjlDTEdOQlNsQTdRVUZOUVRsSExHbENRVUZQSzBjc1lVRkJVQ3hEUVVORmNrSXNTMEZCUzNOQ0xGRkJSRkFzUlVGRlJYUkNMRXRCUVV0MVFpeGhRVVpRTzBGQlNVRnFTQ3hwUWtGQlQydElMR1ZCUVZBc1EwRkJkVUo0UWl4TFFVRkxlVUlzVjBGQk5VSTdRVUZEUkRzN1FVRkZSRHRCUVVOQkxGbEJRVWw2UWl4TFFVRkxNRUlzVlVGQlZDeEZRVUZ4UWp0QlFVTnVRbkJJTEdsQ1FVRlBjVWdzWlVGQlVEdEJRVU5CY2tnc2FVSkJRVTl6U0N4WlFVRlFMRU5CUVc5Q05VSXNTMEZCU3paQ0xGVkJRWHBDTzBGQlEwUTdRVUZEUkN4WlFVRkpOMElzUzBGQlN6aENMRmRCUVZRc1JVRkJjMEk3UVVGRGNFSjRTQ3hwUWtGQlQzbElMR2RDUVVGUU8wRkJRMFE3TzBGQlJVUTdRVUZEUVhwSUxHVkJRVTh3U0N4alFVRlFMRU5CUVhOQ2FFTXNTMEZCUzJsRExGbEJRVE5DTzBGQlEwRXNXVUZCU1dwRExFdEJRVXRwUXl4WlFVRk1MRXRCUVhOQ1F5eGpRVUZKUXl4alFVRTVRaXhGUVVFNFF6dEJRVU0xUXp0QlFVTkJOMGdzYVVKQlFVODRTQ3h0UWtGQlVDeERRVU5GY0VNc1MwRkJTM0ZETEdsQ1FVUlFMRVZCUlVWeVF5eExRVUZMYzBNc1owSkJSbEFzUlVGSFJYUkRMRXRCUVV0MVF5eHBRa0ZJVUR0QlFVdEJha2tzYVVKQlFVOXJTU3hwUWtGQlVDeERRVU5GZUVNc1MwRkJTM2xETEcxQ1FVUlFMRVZCUlVWNlF5eExRVUZMTUVNc2IwSkJSbEFzUlVGSFJURkRMRXRCUVVzeVF5eHZRa0ZJVUN4RlFVbEZNME1zUzBGQlN6UkRMSE5DUVVwUU96dEJRVTlCTzBGQlEwRjBTU3hwUWtGQlQzVkpMR3RDUVVGUUxFTkJRMFUzUXl4TFFVRkxPRU1zWjBKQlJGQXNSVUZGUlRsRExFdEJRVXNyUXl4bFFVWlFMRVZCUjBVdlF5eExRVUZMWjBRc1owSkJTRkE3UVVGTFFURkpMR2xDUVVGUE1ra3NaMEpCUVZBc1EwRkRSV3BFTEV0QlFVdHJSQ3hyUWtGRVVDeEZRVVZGYkVRc1MwRkJTMjFFTEcxQ1FVWlFMRVZCUjBWdVJDeExRVUZMYjBRc2JVSkJTRkFzUlVGSlJYQkVMRXRCUVV0eFJDeHhRa0ZLVUR0QlFVMUVPenRCUVVWRU8wRkJRMEV2U1N4bFFVRlBaMG9zU1VGQlVDeERRVUZaT1Vnc1IwRkJSeXRJTEUxQlFXWXNSVUZCZFVJeFJTeExRVUYyUWpzN1FVRkZRU3hoUVVGTE1rVXNhVUpCUVV3N1FVRkRSRHRCUVVOR096czdPenM3YTBKQk4xWnJRbTVLTEVraUxDSm1hV3hsSWpvaVltRnpaUzF5Wlc1a1pYSmxjaTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHZJRU52Y0hseWFXZG9kQ0FvWXlrZ01qQXhOeTB5TURFNElGaHBZVzFsYmlCWllXcHBJRk52Wm5SM1lYSmxJRU52TGl3Z1RIUmtMaUJjYmx4dWFXMXdiM0owSUhzZ1VtVmplV05zWlZCdmIyd2dmU0JtY205dElDY3VMaTl0WlcxdmNDYzdYRzVwYlhCdmNuUWdaVzUxYlhNZ1puSnZiU0FuTGk0dlpXNTFiWE1uTzF4dWFXMXdiM0owSUhzZ2RtVmpNaXdnZG1Wak15d2dkbVZqTkN3Z2JXRjBNaXdnYldGME15d2diV0YwTkN3Z1kyOXNiM0l6TENCamIyeHZjalFnZlNCbWNtOXRJQ2N1TGk4dUxpOWpiM0psTDNadFlYUm9KenRjYm1sdGNHOXlkQ0JRY205bmNtRnRUR2xpSUdaeWIyMGdKeTR2Y0hKdlozSmhiUzFzYVdJbk8xeHVhVzF3YjNKMElGWnBaWGNnWm5KdmJTQW5MaTkyYVdWM0p6dGNibWx0Y0c5eWRDQm5abmdnWm5KdmJTQW5MaTR2WjJaNEp6dGNibHh1YkdWMElGOXRNMTkwYlhBZ1BTQnRZWFF6TG1OeVpXRjBaU2dwTzF4dWJHVjBJRjl0TkY5MGJYQWdQU0J0WVhRMExtTnlaV0YwWlNncE8xeHVYRzVzWlhRZ1gzTjBZV2RsU1c1bWIzTWdQU0J1WlhjZ1VtVmplV05zWlZCdmIyd29LQ2tnUFQ0Z2UxeHVJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lITjBZV2RsT2lCdWRXeHNMRnh1SUNBZ0lHbDBaVzF6T2lCdWRXeHNMRnh1SUNCOU8xeHVmU3dnT0NrN1hHNWNibXhsZENCZlpteHZZWFF5WDNCdmIyd2dQU0J1WlhjZ1VtVmplV05zWlZCdmIyd29LQ2tnUFQ0Z2UxeHVJQ0J5WlhSMWNtNGdibVYzSUVac2IyRjBNekpCY25KaGVTZ3lLVHRjYm4wc0lEZ3BPMXh1WEc1c1pYUWdYMlpzYjJGME0xOXdiMjlzSUQwZ2JtVjNJRkpsWTNsamJHVlFiMjlzS0NncElEMCtJSHRjYmlBZ2NtVjBkWEp1SUc1bGR5QkdiRzloZERNeVFYSnlZWGtvTXlrN1hHNTlMQ0E0S1R0Y2JseHViR1YwSUY5bWJHOWhkRFJmY0c5dmJDQTlJRzVsZHlCU1pXTjVZMnhsVUc5dmJDZ29LU0E5UGlCN1hHNGdJSEpsZEhWeWJpQnVaWGNnUm14dllYUXpNa0Z5Y21GNUtEUXBPMXh1ZlN3Z09DazdYRzVjYm14bGRDQmZabXh2WVhRNVgzQnZiMndnUFNCdVpYY2dVbVZqZVdOc1pWQnZiMndvS0NrZ1BUNGdlMXh1SUNCeVpYUjFjbTRnYm1WM0lFWnNiMkYwTXpKQmNuSmhlU2c1S1R0Y2JuMHNJRGdwTzF4dVhHNXNaWFFnWDJac2IyRjBNVFpmY0c5dmJDQTlJRzVsZHlCU1pXTjVZMnhsVUc5dmJDZ29LU0E5UGlCN1hHNGdJSEpsZEhWeWJpQnVaWGNnUm14dllYUXpNa0Z5Y21GNUtERTJLVHRjYm4wc0lEZ3BPMXh1WEc1c1pYUWdYMlpzYjJGME5qUmZjRzl2YkNBOUlHNWxkeUJTWldONVkyeGxVRzl2YkNnb0tTQTlQaUI3WEc0Z0lISmxkSFZ5YmlCdVpYY2dSbXh2WVhRek1rRnljbUY1S0RZMEtUdGNibjBzSURncE8xeHVYRzVzWlhRZ1gybHVkREpmY0c5dmJDQTlJRzVsZHlCU1pXTjVZMnhsVUc5dmJDZ29LU0E5UGlCN1hHNGdJSEpsZEhWeWJpQnVaWGNnU1c1ME16SkJjbkpoZVNneUtUdGNibjBzSURncE8xeHVYRzVzWlhRZ1gybHVkRE5mY0c5dmJDQTlJRzVsZHlCU1pXTjVZMnhsVUc5dmJDZ29LU0E5UGlCN1hHNGdJSEpsZEhWeWJpQnVaWGNnU1c1ME16SkJjbkpoZVNnektUdGNibjBzSURncE8xeHVYRzVzWlhRZ1gybHVkRFJmY0c5dmJDQTlJRzVsZHlCU1pXTjVZMnhsVUc5dmJDZ29LU0E5UGlCN1hHNGdJSEpsZEhWeWJpQnVaWGNnU1c1ME16SkJjbkpoZVNnMEtUdGNibjBzSURncE8xeHVYRzVzWlhRZ1gybHVkRFkwWDNCdmIyd2dQU0J1WlhjZ1VtVmplV05zWlZCdmIyd29LQ2tnUFQ0Z2UxeHVJQ0J5WlhSMWNtNGdibVYzSUVsdWRETXlRWEp5WVhrb05qUXBPMXh1ZlN3Z09DazdYRzVjYm14bGRDQmZkSGx3WlRKMWJtbG1iM0p0Vm1Gc2RXVWdQU0I3WEc0Z0lGdGxiblZ0Y3k1UVFWSkJUVjlKVGxSZE9pQm1kVzVqZEdsdmJpQW9kbUZzZFdVcElIdGNiaUFnSUNCeVpYUjFjbTRnZG1Gc2RXVTdYRzRnSUgwc1hHNWNiaUFnVzJWdWRXMXpMbEJCVWtGTlgwbE9WREpkT2lCbWRXNWpkR2x2YmlBb2RtRnNkV1VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkbVZqTWk1aGNuSmhlU2hmYVc1ME1sOXdiMjlzTG1Ga1pDZ3BMQ0IyWVd4MVpTazdYRzRnSUgwc1hHNWNiaUFnVzJWdWRXMXpMbEJCVWtGTlgwbE9WRE5kT2lCbWRXNWpkR2x2YmlBb2RtRnNkV1VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkbVZqTXk1aGNuSmhlU2hmYVc1ME0xOXdiMjlzTG1Ga1pDZ3BMQ0IyWVd4MVpTazdYRzRnSUgwc1hHNWNiaUFnVzJWdWRXMXpMbEJCVWtGTlgwbE9WRFJkT2lCbWRXNWpkR2x2YmlBb2RtRnNkV1VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkbVZqTkM1aGNuSmhlU2hmYVc1ME5GOXdiMjlzTG1Ga1pDZ3BMQ0IyWVd4MVpTazdYRzRnSUgwc1hHNWNiaUFnVzJWdWRXMXpMbEJCVWtGTlgwWk1UMEZVWFRvZ1puVnVZM1JwYjI0Z0tIWmhiSFZsS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFpoYkhWbE8xeHVJQ0I5TEZ4dVhHNGdJRnRsYm5WdGN5NVFRVkpCVFY5R1RFOUJWREpkT2lCbWRXNWpkR2x2YmlBb2RtRnNkV1VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkbVZqTWk1aGNuSmhlU2hmWm14dllYUXlYM0J2YjJ3dVlXUmtLQ2tzSUhaaGJIVmxLVHRjYmlBZ2ZTeGNibHh1SUNCYlpXNTFiWE11VUVGU1FVMWZSa3hQUVZRelhUb2dablZ1WTNScGIyNGdLSFpoYkhWbEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhabFl6TXVZWEp5WVhrb1gyWnNiMkYwTTE5d2IyOXNMbUZrWkNncExDQjJZV3gxWlNrN1hHNGdJSDBzWEc1Y2JpQWdXMlZ1ZFcxekxsQkJVa0ZOWDBaTVQwRlVORjA2SUdaMWJtTjBhVzl1SUNoMllXeDFaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQjJaV00wTG1GeWNtRjVLRjltYkc5aGREUmZjRzl2YkM1aFpHUW9LU3dnZG1Gc2RXVXBPMXh1SUNCOUxGeHVYRzRnSUZ0bGJuVnRjeTVRUVZKQlRWOURUMHhQVWpOZE9pQm1kVzVqZEdsdmJpQW9kbUZzZFdVcElIdGNiaUFnSUNCeVpYUjFjbTRnWTI5c2IzSXpMbUZ5Y21GNUtGOW1iRzloZEROZmNHOXZiQzVoWkdRb0tTd2dkbUZzZFdVcE8xeHVJQ0I5TEZ4dVhHNGdJRnRsYm5WdGN5NVFRVkpCVFY5RFQweFBValJkT2lCbWRXNWpkR2x2YmlBb2RtRnNkV1VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdZMjlzYjNJMExtRnljbUY1S0Y5bWJHOWhkRFJmY0c5dmJDNWhaR1FvS1N3Z2RtRnNkV1VwTzF4dUlDQjlMRnh1WEc0Z0lGdGxiblZ0Y3k1UVFWSkJUVjlOUVZReVhUb2dablZ1WTNScGIyNGdLSFpoYkhWbEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUcxaGRESXVZWEp5WVhrb1gyWnNiMkYwTkY5d2IyOXNMbUZrWkNncExDQjJZV3gxWlNrN1hHNGdJSDBzWEc1Y2JpQWdXMlZ1ZFcxekxsQkJVa0ZOWDAxQlZETmRPaUJtZFc1amRHbHZiaUFvZG1Gc2RXVXBJSHRjYmlBZ0lDQnlaWFIxY200Z2JXRjBNeTVoY25KaGVTaGZabXh2WVhRNVgzQnZiMnd1WVdSa0tDa3NJSFpoYkhWbEtUdGNiaUFnZlN4Y2JseHVJQ0JiWlc1MWJYTXVVRUZTUVUxZlRVRlVORjA2SUdaMWJtTjBhVzl1SUNoMllXeDFaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQnRZWFEwTG1GeWNtRjVLRjltYkc5aGRERTJYM0J2YjJ3dVlXUmtLQ2tzSUhaaGJIVmxLVHRjYmlBZ2ZTeGNibHh1SUNBdkx5QmJaVzUxYlhNdVVFRlNRVTFmVkVWWVZGVlNSVjh5UkYwNklHWjFibU4wYVc5dUlDaDJZV3gxWlNrZ2UxeHVJQ0F2THlCOUxGeHVYRzRnSUM4dklGdGxiblZ0Y3k1UVFWSkJUVjlVUlZoVVZWSkZYME5WUWtWZE9pQm1kVzVqZEdsdmJpQW9kbUZzZFdVcElIdGNiaUFnTHk4Z2ZTeGNibjA3WEc1Y2JteGxkQ0JmZEhsd1pUSjFibWxtYjNKdFFYSnlZWGxXWVd4MVpTQTlJSHRjYmlBZ1cyVnVkVzF6TGxCQlVrRk5YMGxPVkYwNklIdGNiaUFnSUNCbWRXNWpJQ2gyWVd4MVpYTXBJSHRjYmlBZ0lDQWdJR3hsZENCeVpYTjFiSFFnUFNCZmFXNTBOalJmY0c5dmJDNWhaR1FvS1R0Y2JpQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2RtRnNkV1Z6TG14bGJtZDBhRHNnS3l0cEtTQjdYRzRnSUNBZ0lDQWdJSEpsYzNWc2RGdHBYU0E5SUhaaGJIVmxjMXRwWFR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzRnSUNBZ2ZTeGNiaUFnSUNCemFYcGxPaUF4TEZ4dUlDQjlMRnh1WEc0Z0lGdGxiblZ0Y3k1UVFWSkJUVjlKVGxReVhUb2dlMXh1SUNBZ0lHWjFibU1nS0haaGJIVmxjeWtnZTF4dUlDQWdJQ0FnYkdWMElISmxjM1ZzZENBOUlGOXBiblEyTkY5d2IyOXNMbUZrWkNncE8xeHVJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQjJZV3gxWlhNdWJHVnVaM1JvT3lBcksya3BJSHRjYmlBZ0lDQWdJQ0FnY21WemRXeDBXeklnS2lCcFhTQTlJSFpoYkhWbGMxdHBYUzU0TzF4dUlDQWdJQ0FnSUNCeVpYTjFiSFJiTWlBcUlHa2dLeUF4WFNBOUlIWmhiSFZsYzF0cFhTNTVPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JpQWdJQ0I5TEZ4dUlDQWdJSE5wZW1VNklESXNYRzRnSUgwc1hHNWNiaUFnVzJWdWRXMXpMbEJCVWtGTlgwbE9WRE5kT2lCN1hHNGdJQ0FnWm5WdVl6b2dkVzVrWldacGJtVmtMRnh1SUNBZ0lITnBlbVU2SURNc1hHNGdJSDBzWEc1Y2JpQWdXMlZ1ZFcxekxsQkJVa0ZOWDBsT1ZEUmRPaUI3WEc0Z0lDQWdablZ1WXlBb2RtRnNkV1Z6S1NCN1hHNGdJQ0FnSUNCc1pYUWdjbVZ6ZFd4MElEMGdYMmx1ZERZMFgzQnZiMnd1WVdSa0tDazdYRzRnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJSFpoYkhWbGN5NXNaVzVuZEdnN0lDc3JhU2tnZTF4dUlDQWdJQ0FnSUNCc1pYUWdkaUE5SUhaaGJIVmxjMXRwWFR0Y2JpQWdJQ0FnSUNBZ2NtVnpkV3gwV3pRZ0tpQnBYU0E5SUhZdWVEdGNiaUFnSUNBZ0lDQWdjbVZ6ZFd4MFd6UWdLaUJwSUNzZ01WMGdQU0IyTG5rN1hHNGdJQ0FnSUNBZ0lISmxjM1ZzZEZzMElDb2dhU0FySURKZElEMGdkaTU2TzF4dUlDQWdJQ0FnSUNCeVpYTjFiSFJiTkNBcUlHa2dLeUF6WFNBOUlIWXVkenRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNGdJQ0FnZlN4Y2JpQWdJQ0J6YVhwbE9pQTBMRnh1SUNCOUxGeHVYRzRnSUZ0bGJuVnRjeTVRUVZKQlRWOUdURTlCVkYwNklIdGNiaUFnSUNCbWRXNWpJQ2gyWVd4MVpYTXBJSHRjYmlBZ0lDQWdJR3hsZENCeVpYTjFiSFFnUFNCZlpteHZZWFEyTkY5d2IyOXNMbUZrWkNncE8xeHVJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQjJZV3gxWlhNdWJHVnVaM1JvT3lBcksya3BJSHRjYmlBZ0lDQWdJQ0FnY21WemRXeDBXMmxkSUQwZ2RtRnNkV1Z6VzJsZE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYmlBZ0lDQjlMRnh1SUNBZ0lITnBlbVU2SURGY2JpQWdmU3hjYmx4dUlDQmJaVzUxYlhNdVVFRlNRVTFmUmt4UFFWUXlYVG9nZTF4dUlDQWdJR1oxYm1NZ0tIWmhiSFZsY3lrZ2UxeHVJQ0FnSUNBZ2JHVjBJSEpsYzNWc2RDQTlJRjltYkc5aGREWTBYM0J2YjJ3dVlXUmtLQ2s3WEc0Z0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUhaaGJIVmxjeTVzWlc1bmRHZzdJQ3NyYVNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWE4xYkhSYk1pQXFJR2xkSUQwZ2RtRnNkV1Z6VzJsZExuZzdYRzRnSUNBZ0lDQWdJSEpsYzNWc2RGc3lJQ29nYVNBcklERmRJRDBnZG1Gc2RXVnpXMmxkTG5rN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnY21WemRXeDBPMXh1SUNBZ0lIMHNYRzRnSUNBZ2MybDZaVG9nTWl4Y2JpQWdmU3hjYmx4dUlDQmJaVzUxYlhNdVVFRlNRVTFmUmt4UFFWUXpYVG9nZTF4dUlDQWdJR1oxYm1NNklIVnVaR1ZtYVc1bFpDeGNiaUFnSUNCemFYcGxPaUF6TEZ4dUlDQjlMRnh1WEc0Z0lGdGxiblZ0Y3k1UVFWSkJUVjlHVEU5QlZEUmRPaUI3WEc0Z0lDQWdablZ1WXlBb2RtRnNkV1Z6S1NCN1hHNGdJQ0FnSUNCc1pYUWdjbVZ6ZFd4MElEMGdYMlpzYjJGME5qUmZjRzl2YkM1aFpHUW9LVHRjYmlBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnZG1Gc2RXVnpMbXhsYm1kMGFEc2dLeXRwS1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0IySUQwZ2RtRnNkV1Z6VzJsZE8xeHVJQ0FnSUNBZ0lDQnlaWE4xYkhSYk5DQXFJR2xkSUQwZ2RpNTRPMXh1SUNBZ0lDQWdJQ0J5WlhOMWJIUmJOQ0FxSUdrZ0t5QXhYU0E5SUhZdWVUdGNiaUFnSUNBZ0lDQWdjbVZ6ZFd4MFd6UWdLaUJwSUNzZ01sMGdQU0IyTG5vN1hHNGdJQ0FnSUNBZ0lISmxjM1ZzZEZzMElDb2dhU0FySUROZElEMGdkaTUzTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnY21WMGRYSnVJSEpsYzNWc2REdGNiaUFnSUNCOUxGeHVJQ0FnSUhOcGVtVTZJRFFzWEc0Z0lIMHNYRzVjYmlBZ1cyVnVkVzF6TGxCQlVrRk5YME5QVEU5U00xMDZJSHRjYmlBZ0lDQm1kVzVqT2lCMWJtUmxabWx1WldRc1hHNGdJQ0FnYzJsNlpUb2dNeXhjYmlBZ2ZTeGNibHh1SUNCYlpXNTFiWE11VUVGU1FVMWZRMDlNVDFJMFhUb2dlMXh1SUNBZ0lHWjFibU1nS0haaGJIVmxjeWtnZTF4dUlDQWdJQ0FnYkdWMElISmxjM1ZzZENBOUlGOW1iRzloZERZMFgzQnZiMnd1WVdSa0tDazdYRzRnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJSFpoYkhWbGN5NXNaVzVuZEdnN0lDc3JhU2tnZTF4dUlDQWdJQ0FnSUNCc1pYUWdkaUE5SUhaaGJIVmxjMXRwWFR0Y2JpQWdJQ0FnSUNBZ2NtVnpkV3gwV3pRZ0tpQnBYU0E5SUhZdWNqdGNiaUFnSUNBZ0lDQWdjbVZ6ZFd4MFd6UWdLaUJwSUNzZ01WMGdQU0IyTG1jN1hHNGdJQ0FnSUNBZ0lISmxjM1ZzZEZzMElDb2dhU0FySURKZElEMGdkaTVpTzF4dUlDQWdJQ0FnSUNCeVpYTjFiSFJiTkNBcUlHa2dLeUF6WFNBOUlIWXVZVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNGdJQ0FnZlN4Y2JpQWdJQ0J6YVhwbE9pQTBMRnh1SUNCOUxGeHVYRzRnSUZ0bGJuVnRjeTVRUVZKQlRWOU5RVlF5WFRvZ2UxeHVJQ0FnSUdaMWJtTWdLSFpoYkhWbGN5a2dlMXh1SUNBZ0lDQWdiR1YwSUhKbGMzVnNkQ0E5SUY5bWJHOWhkRFkwWDNCdmIyd3VZV1JrS0NrN1hHNGdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElIWmhiSFZsY3k1c1pXNW5kR2c3SUNzcmFTa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2RpQTlJSFpoYkhWbGMxdHBYVHRjYmlBZ0lDQWdJQ0FnY21WemRXeDBMbk5sZENoMkxtMHNJRFFnS2lCcEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFE3WEc0Z0lDQWdmU3hjYmlBZ0lDQnphWHBsT2lBMFhHNGdJSDBzWEc1Y2JpQWdXMlZ1ZFcxekxsQkJVa0ZOWDAxQlZETmRPaUI3WEc0Z0lDQWdablZ1WXpvZ2RXNWtaV1pwYm1Wa0xGeHVJQ0FnSUhOcGVtVTZJRGxjYmlBZ2ZTeGNibHh1WEc0Z0lGdGxiblZ0Y3k1UVFWSkJUVjlOUVZRMFhUb2dlMXh1SUNBZ0lHWjFibU1nS0haaGJIVmxjeWtnZTF4dUlDQWdJQ0FnYkdWMElISmxjM1ZzZENBOUlGOW1iRzloZERZMFgzQnZiMnd1WVdSa0tDazdYRzRnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJSFpoYkhWbGN5NXNaVzVuZEdnN0lDc3JhU2tnZTF4dUlDQWdJQ0FnSUNCc1pYUWdkaUE5SUhaaGJIVmxjMXRwWFR0Y2JpQWdJQ0FnSUNBZ2NtVnpkV3gwTG5ObGRDaDJMbTBzSURFMklDb2dhU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0FnSUgwc1hHNGdJQ0FnYzJsNlpUb2dNVFpjYmlBZ2ZTeGNibHh1SUNBdkx5QmJaVzUxYlhNdVVFRlNRVTFmVkVWWVZGVlNSVjh5UkYwNklHWjFibU4wYVc5dUlDaDJZV3gxWlNrZ2UxeHVJQ0F2THlCOUxGeHVYRzRnSUM4dklGdGxiblZ0Y3k1UVFWSkJUVjlVUlZoVVZWSkZYME5WUWtWZE9pQm1kVzVqZEdsdmJpQW9kbUZzZFdVcElIdGNiaUFnTHk4Z2ZTeGNibjA3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRUpoYzJVZ2UxeHVJQ0F2S2lwY2JpQWdJQ29nUUhCaGNtRnRJSHRuWm5ndVJHVjJhV05sZlNCa1pYWnBZMlZjYmlBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOXdkSE5jYmlBZ0lDb2dRSEJoY21GdElIdG5abmd1VkdWNGRIVnlaVEpFZlNCdmNIUnpMbVJsWm1GMWJIUlVaWGgwZFhKbFhHNGdJQ0FxSUVCd1lYSmhiU0I3WjJaNExsUmxlSFIxY21WRGRXSmxmU0J2Y0hSekxtUmxabUYxYkhSVVpYaDBkWEpsUTNWaVpWeHVJQ0FnS2k5Y2JpQWdZMjl1YzNSeWRXTjBiM0lvWkdWMmFXTmxMQ0J2Y0hSektTQjdYRzRnSUNBZ2RHaHBjeTVmWkdWMmFXTmxJRDBnWkdWMmFXTmxPMXh1SUNBZ0lIUm9hWE11WDNCeWIyZHlZVzFNYVdJZ1BTQnVaWGNnVUhKdlozSmhiVXhwWWloa1pYWnBZMlVwTzF4dUlDQWdJSFJvYVhNdVgyOXdkSE1nUFNCdmNIUnpPMXh1SUNBZ0lIUm9hWE11WDNSNWNHVXlaR1ZtWVhWc2RGWmhiSFZsSUQwZ2UxeHVJQ0FnSUNBZ1cyVnVkVzF6TGxCQlVrRk5YMGxPVkYwNklEQXNYRzRnSUNBZ0lDQmJaVzUxYlhNdVVFRlNRVTFmU1U1VU1sMDZJSFpsWXpJdVkzSmxZWFJsS0RBc0lEQXBMRnh1SUNBZ0lDQWdXMlZ1ZFcxekxsQkJVa0ZOWDBsT1ZETmRPaUIyWldNekxtTnlaV0YwWlNnd0xDQXdMQ0F3S1N4Y2JpQWdJQ0FnSUZ0bGJuVnRjeTVRUVZKQlRWOUpUbFEwWFRvZ2RtVmpOQzVqY21WaGRHVW9NQ3dnTUN3Z01Dd2dNQ2tzWEc0Z0lDQWdJQ0JiWlc1MWJYTXVVRUZTUVUxZlJreFBRVlJkT2lBd0xqQXNYRzRnSUNBZ0lDQmJaVzUxYlhNdVVFRlNRVTFmUmt4UFFWUXlYVG9nZG1Wak1pNWpjbVZoZEdVb01Dd2dNQ2tzWEc0Z0lDQWdJQ0JiWlc1MWJYTXVVRUZTUVUxZlJreFBRVlF6WFRvZ2RtVmpNeTVqY21WaGRHVW9NQ3dnTUN3Z01Da3NYRzRnSUNBZ0lDQmJaVzUxYlhNdVVFRlNRVTFmUmt4UFFWUTBYVG9nZG1Wak5DNWpjbVZoZEdVb01Dd2dNQ3dnTUN3Z01Da3NYRzRnSUNBZ0lDQmJaVzUxYlhNdVVFRlNRVTFmUTA5TVQxSXpYVG9nWTI5c2IzSXpMbU55WldGMFpTZ3dMQ0F3TENBd0tTeGNiaUFnSUNBZ0lGdGxiblZ0Y3k1UVFWSkJUVjlEVDB4UFVqUmRPaUJqYjJ4dmNqUXVZM0psWVhSbEtEQXNJREFzSURBc0lERXBMRnh1SUNBZ0lDQWdXMlZ1ZFcxekxsQkJVa0ZOWDAxQlZESmRPaUJ0WVhReUxtTnlaV0YwWlNncExGeHVJQ0FnSUNBZ1cyVnVkVzF6TGxCQlVrRk5YMDFCVkROZE9pQnRZWFF6TG1OeVpXRjBaU2dwTEZ4dUlDQWdJQ0FnVzJWdWRXMXpMbEJCVWtGTlgwMUJWRFJkT2lCdFlYUTBMbU55WldGMFpTZ3BMRnh1SUNBZ0lDQWdXMlZ1ZFcxekxsQkJVa0ZOWDFSRldGUlZVa1ZmTWtSZE9pQnZjSFJ6TG1SbFptRjFiSFJVWlhoMGRYSmxMRnh1SUNBZ0lDQWdXMlZ1ZFcxekxsQkJVa0ZOWDFSRldGUlZVa1ZmUTFWQ1JWMDZJRzl3ZEhNdVpHVm1ZWFZzZEZSbGVIUjFjbVZEZFdKbExGeHVJQ0FnSUgwN1hHNGdJQ0FnZEdocGN5NWZjM1JoWjJVeVptNGdQU0I3ZlR0Y2JpQWdJQ0IwYUdsekxsOTFjMlZrVkdWNGRIVnlaVlZ1YVhSeklEMGdNRHRjYmx4dUlDQWdJSFJvYVhNdVgzWnBaWGRRYjI5c2N5QTlJRzVsZHlCU1pXTjVZMnhsVUc5dmJDZ29LU0E5UGlCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGWnBaWGNvS1R0Y2JpQWdJQ0I5TENBNEtUdGNibHh1SUNBZ0lIUm9hWE11WDJSeVlYZEpkR1Z0YzFCdmIyeHpJRDBnYm1WM0lGSmxZM2xqYkdWUWIyOXNLQ2dwSUQwK0lIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lHMXZaR1ZzT2lCdWRXeHNMRnh1SUNBZ0lDQWdJQ0J1YjJSbE9pQnVkV3hzTEZ4dUlDQWdJQ0FnSUNCcFlUb2diblZzYkN4Y2JpQWdJQ0FnSUNBZ1pXWm1aV04wT2lCdWRXeHNMRnh1SUNBZ0lDQWdJQ0JrWldacGJtVnpPaUJ1ZFd4c0xGeHVJQ0FnSUNBZ0lDQjFibWxtYjNKdGN6b2diblZzYkZ4dUlDQWdJQ0FnZlR0Y2JpQWdJQ0I5TENBeE1EQXBPMXh1WEc0Z0lDQWdkR2hwY3k1ZmMzUmhaMlZKZEdWdGMxQnZiMnh6SUQwZ2JtVjNJRkpsWTNsamJHVlFiMjlzS0NncElEMCtJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVW1WamVXTnNaVkJ2YjJ3b0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNBZ0lHMXZaR1ZzT2lCdWRXeHNMRnh1SUNBZ0lDQWdJQ0FnSUc1dlpHVTZJRzUxYkd3c1hHNGdJQ0FnSUNBZ0lDQWdhV0U2SUc1MWJHd3NYRzRnSUNBZ0lDQWdJQ0FnWldabVpXTjBPaUJ1ZFd4c0xGeHVJQ0FnSUNBZ0lDQWdJR1JsWm1sdVpYTTZJRzUxYkd3c1hHNGdJQ0FnSUNBZ0lDQWdkR1ZqYUc1cGNYVmxPaUJ1ZFd4c0xGeHVJQ0FnSUNBZ0lDQWdJSE52Y25STFpYazZJQzB4TEZ4dUlDQWdJQ0FnSUNBZ0lIVnVhV1p2Y20xek9pQnVkV3hzWEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNCOUxDQXhNREFwTzF4dUlDQWdJSDBzSURFMktUdGNiaUFnZlZ4dVhHNGdJRjl5WlhObGRGUmxlSFIxWlhKVmJtbDBLQ2tnZTF4dUlDQWdJSFJvYVhNdVgzVnpaV1JVWlhoMGRYSmxWVzVwZEhNZ1BTQXdPMXh1SUNCOVhHNWNiaUFnWDJGc2JHOWpWR1Y0ZEhWeVpWVnVhWFFvS1NCN1hHNGdJQ0FnWTI5dWMzUWdaR1YyYVdObElEMGdkR2hwY3k1ZlpHVjJhV05sTzF4dVhHNGdJQ0FnYkdWMElIVnVhWFFnUFNCMGFHbHpMbDkxYzJWa1ZHVjRkSFZ5WlZWdWFYUnpPMXh1SUNBZ0lHbG1JQ2gxYm1sMElENDlJR1JsZG1salpTNWZZMkZ3Y3k1dFlYaFVaWGgwZFhKbFZXNXBkSE1wSUh0Y2JpQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpaGdWSEo1YVc1bklIUnZJSFZ6WlNBa2UzVnVhWFI5SUhSbGVIUjFjbVVnZFc1cGRITWdkMmhwYkdVZ2RHaHBjeUJIVUZVZ2MzVndjRzl5ZEhNZ2IyNXNlU0FrZTJSbGRtbGpaUzVmWTJGd2N5NXRZWGhVWlhoMGRYSmxWVzVwZEhOOVlDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RHaHBjeTVmZFhObFpGUmxlSFIxY21WVmJtbDBjeUFyUFNBeE8xeHVJQ0FnSUhKbGRIVnliaUIxYm1sME8xeHVJQ0I5WEc1Y2JpQWdYM0psWjJsemRHVnlVM1JoWjJVb2JtRnRaU3dnWm00cElIdGNiaUFnSUNCMGFHbHpMbDl6ZEdGblpUSm1ibHR1WVcxbFhTQTlJR1p1TzF4dUlDQjlYRzVjYmlBZ1kyeGxZWElnS0NrZ2UxeHVJQ0FnSUhSb2FYTXVYM0J5YjJkeVlXMU1hV0l1WTJ4bFlYSW9LVHRjYmlBZ0lDQjBhR2x6TG5KbGMyVjBLQ2s3WEc0Z0lIMWNibHh1SUNCeVpYTmxkQ2dwSUh0Y2JpQWdJQ0IwYUdsekxsOTJhV1YzVUc5dmJITXVjbVZ6WlhRb0tUdGNiaUFnSUNCMGFHbHpMbDl6ZEdGblpVbDBaVzF6VUc5dmJITXVjbVZ6WlhRb0tUdGNiaUFnZlZ4dVhHNGdJRjl5WlhGMVpYTjBWbWxsZHlncElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZkbWxsZDFCdmIyeHpMbUZrWkNncE8xeHVJQ0I5WEc1Y2JpQWdYM0psYm1SbGNpaDJhV1YzTENCelkyVnVaU2tnZTF4dUlDQWdJR052Ym5OMElHUmxkbWxqWlNBOUlIUm9hWE11WDJSbGRtbGpaVHRjYmx4dUlDQWdJQzh2SUhObGRIVndJR1p5WVcxbFluVm1abVZ5WEc0Z0lDQWdaR1YyYVdObExuTmxkRVp5WVcxbFFuVm1abVZ5S0hacFpYY3VYMlp5WVcxbFluVm1abVZ5S1R0Y2JseHVJQ0FnSUM4dklITmxkSFZ3SUhacFpYZHdiM0owWEc0Z0lDQWdaR1YyYVdObExuTmxkRlpwWlhkd2IzSjBLRnh1SUNBZ0lDQWdkbWxsZHk1ZmNtVmpkQzU0TEZ4dUlDQWdJQ0FnZG1sbGR5NWZjbVZqZEM1NUxGeHVJQ0FnSUNBZ2RtbGxkeTVmY21WamRDNTNMRnh1SUNBZ0lDQWdkbWxsZHk1ZmNtVmpkQzVvWEc0Z0lDQWdLVHRjYmx4dUlDQWdJQzh2SUhObGRIVndJR05zWldGeVhHNGdJQ0FnYkdWMElHTnNaV0Z5VDNCMGN5QTlJSHQ5TzF4dUlDQWdJR2xtSUNoMmFXVjNMbDlqYkdWaGNrWnNZV2R6SUNZZ1pXNTFiWE11UTB4RlFWSmZRMDlNVDFJcElIdGNiaUFnSUNBZ0lHTnNaV0Z5VDNCMGN5NWpiMnh2Y2lBOUlGdGNiaUFnSUNBZ0lDQWdkbWxsZHk1ZlkyOXNiM0l1Y2l4Y2JpQWdJQ0FnSUNBZ2RtbGxkeTVmWTI5c2IzSXVaeXhjYmlBZ0lDQWdJQ0FnZG1sbGR5NWZZMjlzYjNJdVlpeGNiaUFnSUNBZ0lDQWdkbWxsZHk1ZlkyOXNiM0l1WVZ4dUlDQWdJQ0FnWFR0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0hacFpYY3VYMk5zWldGeVJteGhaM01nSmlCbGJuVnRjeTVEVEVWQlVsOUVSVkJVU0NrZ2UxeHVJQ0FnSUNBZ1kyeGxZWEpQY0hSekxtUmxjSFJvSUQwZ2RtbGxkeTVmWkdWd2RHZzdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaDJhV1YzTGw5amJHVmhja1pzWVdkeklDWWdaVzUxYlhNdVEweEZRVkpmVTFSRlRrTkpUQ2tnZTF4dUlDQWdJQ0FnWTJ4bFlYSlBjSFJ6TG5OMFpXNWphV3dnUFNCMmFXVjNMbDl6ZEdWdVkybHNPMXh1SUNBZ0lIMWNiaUFnSUNCa1pYWnBZMlV1WTJ4bFlYSW9ZMnhsWVhKUGNIUnpLVHRjYmx4dUlDQWdJQzh2SUdkbGRDQmhiR3dnWkhKaGR5QnBkR1Z0YzF4dUlDQWdJSFJvYVhNdVgyUnlZWGRKZEdWdGMxQnZiMnh6TG5KbGMyVjBLQ2s3WEc1Y2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUhOalpXNWxMbDl0YjJSbGJITXViR1Z1WjNSb095QXJLMmtwSUh0Y2JpQWdJQ0FnSUd4bGRDQnRiMlJsYkNBOUlITmpaVzVsTGw5dGIyUmxiSE11WkdGMFlWdHBYVHRjYmx4dUlDQWdJQ0FnTHk4Z1ptbHNkR1Z5SUcxdlpHVnNJR0o1SUhacFpYZGNiaUFnSUNBZ0lHbG1JQ2dvYlc5a1pXd3VYMk4xYkd4cGJtZE5ZWE5ySUNZZ2RtbGxkeTVmWTNWc2JHbHVaMDFoYzJzcElEMDlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lHTnZiblJwYm5WbE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnNaWFFnWkhKaGQwbDBaVzBnUFNCMGFHbHpMbDlrY21GM1NYUmxiWE5RYjI5c2N5NWhaR1FvS1R0Y2JpQWdJQ0FnSUcxdlpHVnNMbVY0ZEhKaFkzUkVjbUYzU1hSbGJTaGtjbUYzU1hSbGJTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdaR2x6Y0dGMFkyZ2daSEpoZHlCcGRHVnRjeUIwYnlCa2FXWm1aWEpsYm5RZ2MzUmhaMlZjYmlBZ0lDQmZjM1JoWjJWSmJtWnZjeTV5WlhObGRDZ3BPMXh1WEc0Z0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0IyYVdWM0xsOXpkR0ZuWlhNdWJHVnVaM1JvT3lBcksya3BJSHRjYmlBZ0lDQWdJR3hsZENCemRHRm5aU0E5SUhacFpYY3VYM04wWVdkbGMxdHBYVHRjYmlBZ0lDQWdJR3hsZENCemRHRm5aVWwwWlcxeklEMGdkR2hwY3k1ZmMzUmhaMlZKZEdWdGMxQnZiMnh6TG1Ga1pDZ3BPMXh1SUNBZ0lDQWdjM1JoWjJWSmRHVnRjeTV5WlhObGRDZ3BPMXh1WEc0Z0lDQWdJQ0JtYjNJZ0tHeGxkQ0JxSUQwZ01Ec2dhaUE4SUhSb2FYTXVYMlJ5WVhkSmRHVnRjMUJ2YjJ4ekxteGxibWQwYURzZ0t5dHFLU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQmtjbUYzU1hSbGJTQTlJSFJvYVhNdVgyUnlZWGRKZEdWdGMxQnZiMnh6TG1SaGRHRmJhbDA3WEc0Z0lDQWdJQ0FnSUd4bGRDQjBaV05vSUQwZ1pISmhkMGwwWlcwdVpXWm1aV04wTG1kbGRGUmxZMmh1YVhGMVpTaHpkR0ZuWlNrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0hSbFkyZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdjM1JoWjJWSmRHVnRJRDBnYzNSaFoyVkpkR1Z0Y3k1aFpHUW9LVHRjYmlBZ0lDQWdJQ0FnSUNCemRHRm5aVWwwWlcwdWJXOWtaV3dnUFNCa2NtRjNTWFJsYlM1dGIyUmxiRHRjYmlBZ0lDQWdJQ0FnSUNCemRHRm5aVWwwWlcwdWJtOWtaU0E5SUdSeVlYZEpkR1Z0TG01dlpHVTdYRzRnSUNBZ0lDQWdJQ0FnYzNSaFoyVkpkR1Z0TG1saElEMGdaSEpoZDBsMFpXMHVhV0U3WEc0Z0lDQWdJQ0FnSUNBZ2MzUmhaMlZKZEdWdExtVm1abVZqZENBOUlHUnlZWGRKZEdWdExtVm1abVZqZER0Y2JpQWdJQ0FnSUNBZ0lDQnpkR0ZuWlVsMFpXMHVaR1ZtYVc1bGN5QTlJR1J5WVhkSmRHVnRMbVJsWm1sdVpYTTdYRzRnSUNBZ0lDQWdJQ0FnYzNSaFoyVkpkR1Z0TG5SbFkyaHVhWEYxWlNBOUlIUmxZMmc3WEc0Z0lDQWdJQ0FnSUNBZ2MzUmhaMlZKZEdWdExuTnZjblJMWlhrZ1BTQXRNVHRjYmlBZ0lDQWdJQ0FnSUNCemRHRm5aVWwwWlcwdWRXNXBabTl5YlhNZ1BTQmtjbUYzU1hSbGJTNTFibWxtYjNKdGN6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JzWlhRZ2MzUmhaMlZKYm1adklEMGdYM04wWVdkbFNXNW1iM011WVdSa0tDazdYRzRnSUNBZ0lDQnpkR0ZuWlVsdVptOHVjM1JoWjJVZ1BTQnpkR0ZuWlR0Y2JpQWdJQ0FnSUhOMFlXZGxTVzVtYnk1cGRHVnRjeUE5SUhOMFlXZGxTWFJsYlhNN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z2NtVnVaR1Z5SUhOMFlXZGxjMXh1SUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dYM04wWVdkbFNXNW1iM011YkdWdVozUm9PeUFySzJrcElIdGNiaUFnSUNBZ0lHeGxkQ0JwYm1adklEMGdYM04wWVdkbFNXNW1iM011WkdGMFlWdHBYVHRjYmlBZ0lDQWdJR3hsZENCbWJpQTlJSFJvYVhNdVgzTjBZV2RsTW1adVcybHVabTh1YzNSaFoyVmRPMXh1WEc0Z0lDQWdJQ0JtYmloMmFXVjNMQ0JwYm1adkxtbDBaVzF6S1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCZmMyVjBVSEp2Y0dWeWRIa2dLSEJ5YjNBcElIdGNiaUFnSUNCamIyNXpkQ0JrWlhacFkyVWdQU0IwYUdsekxsOWtaWFpwWTJVN1hHNGdJQ0FnYkdWMElIQmhjbUZ0SUQwZ2NISnZjQzUyWVd4MVpUdGNibHh1SUNBZ0lHbG1JQ2h3WVhKaGJTQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNCd1lYSmhiU0E5SUhCeWIzQXVkbUZzTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNod1lYSmhiU0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQndZWEpoYlNBOUlIUm9hWE11WDNSNWNHVXlaR1ZtWVhWc2RGWmhiSFZsVzNCeWIzQXVkSGx3WlYwN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tIQmhjbUZ0SUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmloZ1JtRnBiR1ZrSUhSdklITmxkQ0IwWldOb2JtbHhkV1VnY0hKdmNHVnlkSGtnSkh0d2NtOXdMbTVoYldWOUxDQjJZV3gxWlNCdWIzUWdabTkxYm1RdVlDazdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tGeHVJQ0FnSUNBZ2NISnZjQzUwZVhCbElEMDlQU0JsYm5WdGN5NVFRVkpCVFY5VVJWaFVWVkpGWHpKRUlIeDhYRzRnSUNBZ0lDQndjbTl3TG5SNWNHVWdQVDA5SUdWdWRXMXpMbEJCVWtGTlgxUkZXRlJWVWtWZlExVkNSVnh1SUNBZ0lDa2dlMXh1SUNBZ0lDQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29jR0Z5WVcwcEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNod1lYSmhiUzVzWlc1bmRHZ2dQaUJ3Y205d0xtTnZkVzUwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2loZ1JtRnBiR1ZrSUhSdklITmxkQ0J3Y205d1pYSjBlU0JiSkh0d2NtOXdMbTVoYldWOVhTQTZJRlJvWlNCc1pXNW5kR2dnYjJZZ2RHVjRkSFZ5WlNCaGNuSmhlU0JiSkh0d1lYSmhiUzVzWlc1bmRHaDlYU0JwY3lCaWFXZG5aWElnZEdoaGJpQmJKSHR3Y205d0xtTnZkVzUwZlYwdVlDazdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUd4bGRDQnpiRzkwY3lBOUlGOXBiblEyTkY5d2IyOXNMbUZrWkNncE8xeHVJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBibVJsZUNBOUlEQTdJR2x1WkdWNElEd2djR0Z5WVcwdWJHVnVaM1JvT3lBcksybHVaR1Y0S1NCN1hHNGdJQ0FnSUNBZ0lDQWdjMnh2ZEhOYmFXNWtaWGhkSUQwZ2RHaHBjeTVmWVd4c2IyTlVaWGgwZFhKbFZXNXBkQ2dwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHUmxkbWxqWlM1elpYUlVaWGgwZFhKbFFYSnlZWGtvY0hKdmNDNXVZVzFsTENCd1lYSmhiU3dnYzJ4dmRITXBPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdaR1YyYVdObExuTmxkRlJsZUhSMWNtVW9jSEp2Y0M1dVlXMWxMQ0J3WVhKaGJTd2dkR2hwY3k1ZllXeHNiMk5VWlhoMGRYSmxWVzVwZENncEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnYVdZZ0tIQnliM0F1WkdseVpXTjBiSGtwSUh0Y2JpQWdJQ0FnSUNBZ1pHVjJhV05sTG5ObGRGVnVhV1p2Y20xRWFYSmxZM1JzZVNod2NtOXdMbTVoYldVc0lIQmhjbUZ0S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0JrWlhacFkyVXVjMlYwVlc1cFptOXliU2h3Y205d0xtNWhiV1VzSUhCaGNtRnRLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JmWkhKaGR5aHBkR1Z0S1NCN1hHNGdJQ0FnWTI5dWMzUWdaR1YyYVdObElEMGdkR2hwY3k1ZlpHVjJhV05sTzF4dUlDQWdJR052Ym5OMElIQnliMmR5WVcxTWFXSWdQU0IwYUdsekxsOXdjbTluY21GdFRHbGlPMXh1SUNBZ0lHTnZibk4wSUhzZ2JtOWtaU3dnYVdFc0lIVnVhV1p2Y20xekxDQjBaV05vYm1seGRXVXNJR1JsWm1sdVpYTXNJR1ZtWm1WamRDQjlJRDBnYVhSbGJUdGNibHh1SUNBZ0lDOHZJSEpsYzJWMElIUm9aU0J3YjI5c1hHNGdJQ0FnTHk4Z1RrOVVSVG9nZDJVZ1kyRnVJSFZ6WlNCa2NtRjNRMjkxYm5SbGNpQnZjSFJwYldsNlpTQjBhR2x6WEc0Z0lDQWdMeThnVkU5RVR6b2djMmh2ZFd4a0lHSmxJR052Ym1acFozVnlZV0pzWlZ4dUlDQWdJRjltYkc5aGRESmZjRzl2YkM1eVpYTmxkQ2dwTzF4dUlDQWdJRjltYkc5aGRETmZjRzl2YkM1eVpYTmxkQ2dwTzF4dUlDQWdJRjltYkc5aGREUmZjRzl2YkM1eVpYTmxkQ2dwTzF4dUlDQWdJRjltYkc5aGREbGZjRzl2YkM1eVpYTmxkQ2dwTzF4dUlDQWdJRjltYkc5aGRERTJYM0J2YjJ3dWNtVnpaWFFvS1R0Y2JpQWdJQ0JmWm14dllYUTJORjl3YjI5c0xuSmxjMlYwS0NrN1hHNGdJQ0FnWDJsdWRESmZjRzl2YkM1eVpYTmxkQ2dwTzF4dUlDQWdJRjlwYm5RelgzQnZiMnd1Y21WelpYUW9LVHRjYmlBZ0lDQmZhVzUwTkY5d2IyOXNMbkpsYzJWMEtDazdYRzRnSUNBZ1gybHVkRFkwWDNCdmIyd3VjbVZ6WlhRb0tUdGNibHh1SUNBZ0lDOHZJSE5sZENCamIyMXRiMjRnZFc1cFptOXliWE5jYmlBZ0lDQXZMeUJVVDBSUE9pQjBjbmtnWTI5dGJXbDBJSFJvYVhNZ1pHVndaVzVrY3lCdmJpQmxabVpsWTNSY2JpQWdJQ0F2THlCN1hHNGdJQ0FnYm05a1pTNW5aWFJYYjNKc1pFMWhkSEpwZUNoZmJUUmZkRzF3S1R0Y2JpQWdJQ0JrWlhacFkyVXVjMlYwVlc1cFptOXliU2duWTJOZmJXRjBWMjl5YkdRbkxDQnRZWFEwTG1GeWNtRjVLRjltYkc5aGRERTJYM0J2YjJ3dVlXUmtLQ2tzSUY5dE5GOTBiWEFwS1R0Y2JseHVJQ0FnSUM4dklHeGxkQ0IzY1NBOUlHNXZaR1V1WjJWMFYyOXliR1JTYjNSaGRHbHZiaWhqWXk1eGRXRjBLQ2twTzF4dUlDQWdJRzFoZERRdWFXNTJaWEowS0Y5dE5GOTBiWEFzSUY5dE5GOTBiWEFwTzF4dUlDQWdJRzFoZERRdWRISmhibk53YjNObEtGOXRORjkwYlhBc0lGOXRORjkwYlhBcE8xeHVJQ0FnSUdSbGRtbGpaUzV6WlhSVmJtbG1iM0p0S0NkalkxOXRZWFJYYjNKc1pFbFVKeXdnYldGME5DNWhjbkpoZVNoZlpteHZZWFF4Tmw5d2IyOXNMbUZrWkNncExDQmZiVFJmZEcxd0tTazdYRzRnSUNBZ0x5OGdmVnh1WEc0Z0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0IxYm1sbWIzSnRjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2JHVjBJSFI1Y0dWVmJtbG1iM0p0Y3lBOUlIVnVhV1p2Y20xelcybGRPMXh1SUNBZ0lDQWdabTl5SUNoc1pYUWdhMlY1SUdsdUlIUjVjR1ZWYm1sbWIzSnRjeWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl6WlhSUWNtOXdaWEowZVNoMGVYQmxWVzVwWm05eWJYTmJhMlY1WFNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1ptOXlJR1ZoWTJnZ2NHRnpjMXh1SUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dkR1ZqYUc1cGNYVmxMbDl3WVhOelpYTXViR1Z1WjNSb095QXJLMmtwSUh0Y2JpQWdJQ0FnSUd4bGRDQndZWE56SUQwZ2RHVmphRzVwY1hWbExsOXdZWE56WlhOYmFWMDdYRzRnSUNBZ0lDQnNaWFFnWTI5MWJuUWdQU0JwWVM1amIzVnVkRHRjYmx4dUlDQWdJQ0FnTHk4Z2MyVjBJSFpsY25SbGVDQmlkV1ptWlhKY2JpQWdJQ0FnSUdsbUlDaHBZUzVmZG1WeWRHVjRRblZtWm1WeUtTQjdYRzRnSUNBZ0lDQWdJR1JsZG1salpTNXpaWFJXWlhKMFpYaENkV1ptWlhJb01Dd2dhV0V1WDNabGNuUmxlRUoxWm1abGNpazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUhObGRDQnBibVJsZUNCaWRXWm1aWEpjYmlBZ0lDQWdJR2xtSUNocFlTNWZhVzVrWlhoQ2RXWm1aWElwSUh0Y2JpQWdJQ0FnSUNBZ1pHVjJhV05sTG5ObGRFbHVaR1Y0UW5WbVptVnlLR2xoTGw5cGJtUmxlRUoxWm1abGNpazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUhObGRDQndjbWx0YVhScGRtVWdkSGx3WlZ4dUlDQWdJQ0FnWkdWMmFXTmxMbk5sZEZCeWFXMXBkR2wyWlZSNWNHVW9hV0V1WDNCeWFXMXBkR2wyWlZSNWNHVXBPMXh1WEc0Z0lDQWdJQ0F2THlCelpYUWdjSEp2WjNKaGJWeHVJQ0FnSUNBZ2JHVjBJSEJ5YjJkeVlXMGdQU0J3Y205bmNtRnRUR2xpTG1kbGRGQnliMmR5WVcwb2NHRnpjeTVmY0hKdlozSmhiVTVoYldVc0lHUmxabWx1WlhNc0lHVm1abVZqZEM1ZmJtRnRaU2s3WEc0Z0lDQWdJQ0JrWlhacFkyVXVjMlYwVUhKdlozSmhiU2h3Y205bmNtRnRLVHRjYmx4dUlDQWdJQ0FnTHk4Z1kzVnNiQ0J0YjJSbFhHNGdJQ0FnSUNCa1pYWnBZMlV1YzJWMFEzVnNiRTF2WkdVb2NHRnpjeTVmWTNWc2JFMXZaR1VwTzF4dVhHNGdJQ0FnSUNBdkx5QmliR1Z1WkZ4dUlDQWdJQ0FnYVdZZ0tIQmhjM011WDJKc1pXNWtLU0I3WEc0Z0lDQWdJQ0FnSUdSbGRtbGpaUzVsYm1GaWJHVkNiR1Z1WkNncE8xeHVJQ0FnSUNBZ0lDQmtaWFpwWTJVdWMyVjBRbXhsYm1SR2RXNWpVMlZ3S0Z4dUlDQWdJQ0FnSUNBZ0lIQmhjM011WDJKc1pXNWtVM0pqTEZ4dUlDQWdJQ0FnSUNBZ0lIQmhjM011WDJKc1pXNWtSSE4wTEZ4dUlDQWdJQ0FnSUNBZ0lIQmhjM011WDJKc1pXNWtVM0pqUVd4d2FHRXNYRzRnSUNBZ0lDQWdJQ0FnY0dGemN5NWZZbXhsYm1SRWMzUkJiSEJvWVZ4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQmtaWFpwWTJVdWMyVjBRbXhsYm1SRmNWTmxjQ2hjYmlBZ0lDQWdJQ0FnSUNCd1lYTnpMbDlpYkdWdVpFVnhMRnh1SUNBZ0lDQWdJQ0FnSUhCaGMzTXVYMkpzWlc1a1FXeHdhR0ZGY1Z4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQmtaWFpwWTJVdWMyVjBRbXhsYm1SRGIyeHZjak15S0hCaGMzTXVYMkpzWlc1a1EyOXNiM0lwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBdkx5QmtaWEIwYUNCMFpYTjBJQ1lnZDNKcGRHVmNiaUFnSUNBZ0lHbG1JQ2h3WVhOekxsOWtaWEIwYUZSbGMzUXBJSHRjYmlBZ0lDQWdJQ0FnWkdWMmFXTmxMbVZ1WVdKc1pVUmxjSFJvVkdWemRDZ3BPMXh1SUNBZ0lDQWdJQ0JrWlhacFkyVXVjMlYwUkdWd2RHaEdkVzVqS0hCaGMzTXVYMlJsY0hSb1JuVnVZeWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JwWmlBb2NHRnpjeTVmWkdWd2RHaFhjbWwwWlNrZ2UxeHVJQ0FnSUNBZ0lDQmtaWFpwWTJVdVpXNWhZbXhsUkdWd2RHaFhjbWwwWlNncE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQXZMeUJ6ZEdWdVkybHNYRzRnSUNBZ0lDQmtaWFpwWTJVdWMyVjBVM1JsYm1OcGJGUmxjM1FvY0dGemN5NWZjM1JsYm1OcGJGUmxjM1FwTzF4dUlDQWdJQ0FnYVdZZ0tIQmhjM011WDNOMFpXNWphV3hVWlhOMElEMDlQU0JuWm5ndVUxUkZUa05KVEY5RlRrRkNURVVwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdabkp2Ym5SY2JpQWdJQ0FnSUNBZ1pHVjJhV05sTG5ObGRGTjBaVzVqYVd4R2RXNWpSbkp2Ym5Rb1hHNGdJQ0FnSUNBZ0lDQWdjR0Z6Y3k1ZmMzUmxibU5wYkVaMWJtTkdjbTl1ZEN4Y2JpQWdJQ0FnSUNBZ0lDQndZWE56TGw5emRHVnVZMmxzVW1WbVJuSnZiblFzWEc0Z0lDQWdJQ0FnSUNBZ2NHRnpjeTVmYzNSbGJtTnBiRTFoYzJ0R2NtOXVkRnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCa1pYWnBZMlV1YzJWMFUzUmxibU5wYkU5d1JuSnZiblFvWEc0Z0lDQWdJQ0FnSUNBZ2NHRnpjeTVmYzNSbGJtTnBiRVpoYVd4UGNFWnliMjUwTEZ4dUlDQWdJQ0FnSUNBZ0lIQmhjM011WDNOMFpXNWphV3hhUm1GcGJFOXdSbkp2Ym5Rc1hHNGdJQ0FnSUNBZ0lDQWdjR0Z6Y3k1ZmMzUmxibU5wYkZwUVlYTnpUM0JHY205dWRDeGNiaUFnSUNBZ0lDQWdJQ0J3WVhOekxsOXpkR1Z1WTJsc1YzSnBkR1ZOWVhOclJuSnZiblJjYmlBZ0lDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJpWVdOclhHNGdJQ0FnSUNBZ0lHUmxkbWxqWlM1elpYUlRkR1Z1WTJsc1JuVnVZMEpoWTJzb1hHNGdJQ0FnSUNBZ0lDQWdjR0Z6Y3k1ZmMzUmxibU5wYkVaMWJtTkNZV05yTEZ4dUlDQWdJQ0FnSUNBZ0lIQmhjM011WDNOMFpXNWphV3hTWldaQ1lXTnJMRnh1SUNBZ0lDQWdJQ0FnSUhCaGMzTXVYM04wWlc1amFXeE5ZWE5yUW1GamExeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0JrWlhacFkyVXVjMlYwVTNSbGJtTnBiRTl3UW1GamF5aGNiaUFnSUNBZ0lDQWdJQ0J3WVhOekxsOXpkR1Z1WTJsc1JtRnBiRTl3UW1GamF5eGNiaUFnSUNBZ0lDQWdJQ0J3WVhOekxsOXpkR1Z1WTJsc1drWmhhV3hQY0VKaFkyc3NYRzRnSUNBZ0lDQWdJQ0FnY0dGemN5NWZjM1JsYm1OcGJGcFFZWE56VDNCQ1lXTnJMRnh1SUNBZ0lDQWdJQ0FnSUhCaGMzTXVYM04wWlc1amFXeFhjbWwwWlUxaGMydENZV05yWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDOHZJR1J5WVhjZ2NHRnpjMXh1SUNBZ0lDQWdaR1YyYVdObExtUnlZWGNvYVdFdVgzTjBZWEowTENCamIzVnVkQ2s3WEc1Y2JpQWdJQ0FnSUhSb2FYTXVYM0psYzJWMFZHVjRkSFZsY2xWdWFYUW9LVHRjYmlBZ0lDQjlYRzRnSUgxY2JuMGlYWDA9Il19