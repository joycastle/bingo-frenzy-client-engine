(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/core/program-lib.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _gfx = require('../gfx');
        var _gfx2 = _interopRequireDefault(_gfx);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var _shdID = 0;
        function _generateDefines(defineList) {
            var defines = [];
            var cache = {};
            for (var i = defineList.length - 1; i >= 0; i--) {
                var defs = defineList[i];
                for (var def in defs) {
                    var result = defs[def];
                    if (result === undefined)
                        continue;
                    if (cache[def] !== undefined)
                        continue;
                    if (typeof result !== 'number') {
                        result = result ? 1 : 0;
                    }
                    cache[def] = result;
                    defines.push('#define ' + def + ' ' + result);
                }
            }
            return defines.join('\n') + '\n';
        }
        function _replaceMacroNums(string, defineList) {
            var cache = {};
            var tmp = string;
            for (var i = defineList.length - 1; i >= 0; i--) {
                var defs = defineList[i];
                for (var def in defs) {
                    var result = defs[def];
                    if (result === undefined)
                        continue;
                    if (cache[def] !== undefined)
                        continue;
                    if (Number.isInteger(result)) {
                        cache[def] = result;
                    }
                }
            }
            for (var _def in cache) {
                var reg = new RegExp(_def, 'g');
                tmp = tmp.replace(reg, cache[_def]);
            }
            return tmp;
        }
        function _unrollLoops(string) {
            var pattern = /#pragma for (\w+) in range\(\s*(\d+)\s*,\s*(\d+)\s*\)([\s\S]+?)#pragma endFor/g;
            function replace(match, index, begin, end, snippet) {
                var unroll = '';
                var parsedBegin = parseInt(begin);
                var parsedEnd = parseInt(end);
                if (parsedBegin.isNaN || parsedEnd.isNaN) {
                    console.error('Unroll For Loops Error: begin and end of range must be an int num.');
                }
                for (var i = parsedBegin; i < parsedEnd; ++i) {
                    unroll += snippet.replace(new RegExp('{' + index + '}', 'g'), i);
                }
                return unroll;
            }
            return string.replace(pattern, replace);
        }
        function _replaceHighp(string) {
            return string.replace(/\bhighp\b/g, 'mediump');
        }
        var ProgramLib = function () {
            function ProgramLib(device) {
                _classCallCheck(this, ProgramLib);
                this._device = device;
                this._templates = {};
                this._cache = {};
                this._checkPrecision();
            }
            _createClass(ProgramLib, [
                {
                    key: 'clear',
                    value: function clear() {
                        this._templates = {};
                        this._cache = {};
                    }
                },
                {
                    key: 'define',
                    value: function define(prog) {
                        var name = prog.name, defines = prog.defines, glsl1 = prog.glsl1;
                        var _ref = glsl1 || prog, vert = _ref.vert, frag = _ref.frag;
                        if (this._templates[name]) {
                            return;
                        }
                        var id = ++_shdID;
                        var offset = 0;
                        for (var i = 0; i < defines.length; ++i) {
                            var def = defines[i];
                            var cnt = 1;
                            if (def.type === 'number') {
                                var range = def.range || [];
                                def.min = range[0] || 0;
                                def.max = range[1] || 4;
                                cnt = Math.ceil(Math.log2(def.max - def.min));
                                def._map = function (value) {
                                    return value - this.min << this._offset;
                                }.bind(def);
                            } else {
                                def._map = function (value) {
                                    if (value) {
                                        return 1 << this._offset;
                                    }
                                    return 0;
                                }.bind(def);
                            }
                            offset += cnt;
                            def._offset = offset;
                        }
                        var uniforms = prog.uniforms || [];
                        if (prog.samplers) {
                            for (var _i = 0; _i < prog.samplers.length; _i++) {
                                uniforms.push(prog.samplers[_i]);
                            }
                        }
                        if (prog.blocks) {
                            for (var _i2 = 0; _i2 < prog.blocks.length; _i2++) {
                                var _defines = prog.blocks[_i2].defines;
                                var members = prog.blocks[_i2].members;
                                for (var j = 0; j < members.length; j++) {
                                    uniforms.push({
                                        defines: _defines,
                                        name: members[j].name,
                                        type: members[j].type
                                    });
                                }
                            }
                        }
                        this._templates[name] = {
                            id: id,
                            name: name,
                            vert: vert,
                            frag: frag,
                            defines: defines,
                            attributes: prog.attributes,
                            uniforms: uniforms,
                            extensions: prog.extensions
                        };
                    }
                },
                {
                    key: 'getTemplate',
                    value: function getTemplate(name) {
                        return this._templates[name];
                    }
                },
                {
                    key: 'hasProgram',
                    value: function hasProgram(name) {
                        return this._templates[name] !== undefined;
                    }
                },
                {
                    key: 'getKey',
                    value: function getKey(name, defineList) {
                        var tmpl = this._templates[name];
                        var key = 0;
                        for (var i = 0; i < tmpl.defines.length; ++i) {
                            var tmplDefs = tmpl.defines[i];
                            var value = this._getValueFromDefineList(tmplDefs.name, defineList);
                            if (value === undefined) {
                                continue;
                            }
                            key |= tmplDefs._map(value);
                        }
                        return tmpl.id + ':' + key;
                    }
                },
                {
                    key: 'getProgram',
                    value: function getProgram(name, defineList, errPrefix) {
                        var key = this.getKey(name, defineList);
                        var program = this._cache[key];
                        if (program) {
                            return program;
                        }
                        var tmpl = this._templates[name];
                        var customDef = _generateDefines(defineList);
                        var vert = _replaceMacroNums(tmpl.vert, defineList);
                        vert = customDef + _unrollLoops(vert);
                        if (!this._highpSupported) {
                            vert = _replaceHighp(vert);
                        }
                        var frag = _replaceMacroNums(tmpl.frag, defineList);
                        frag = customDef + _unrollLoops(frag);
                        if (!this._highpSupported) {
                            frag = _replaceHighp(frag);
                        }
                        program = new _gfx2.default.Program(this._device, {
                            vert: vert,
                            frag: frag
                        });
                        var errors = program.link();
                        if (errors) {
                            var vertLines = vert.split('\n');
                            var fragLines = frag.split('\n');
                            var defineLength = Object.keys(defineList).length;
                            errors.forEach(function (err) {
                                var line = err.line - 1;
                                var originLine = err.line - defineLength;
                                var lines = err.type === 'vs' ? vertLines : fragLines;
                                var source = lines[line];
                                var info = err.info || 'Failed to compile ' + err.type + ' ' + err.fileID + ' (ln ' + originLine + '): \n ' + err.message + ': \n  ' + source;
                                cc.error(errPrefix + ' : ' + info);
                            });
                        }
                        this._cache[key] = program;
                        return program;
                    }
                },
                {
                    key: '_getValueFromDefineList',
                    value: function _getValueFromDefineList(name, defineList) {
                        var value = void 0;
                        for (var i = defineList.length - 1; i >= 0; i--) {
                            value = defineList[i][name];
                            if (value !== undefined) {
                                return value;
                            }
                        }
                    }
                },
                {
                    key: '_checkPrecision',
                    value: function _checkPrecision() {
                        var gl = this._device._gl;
                        var highpSupported = false;
                        if (gl.getShaderPrecisionFormat) {
                            var vertHighp = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT);
                            var fragHighp = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);
                            highpSupported = vertHighp && vertHighp.precision > 0 && fragHighp && fragHighp.precision > 0;
                        }
                        if (!highpSupported) {
                            cc.warnID(9102);
                        }
                        this._highpSupported = highpSupported;
                    }
                }
            ]);
            return ProgramLib;
        }();
        exports.default = ProgramLib;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2dyYW0tbGliLmpzIiwiL1VzZXJzL2dhb3lhbmcvV29ya1NwYWNlL2pveWNhc3RsZS9iaW5nby9jbGllbnQvYmluZ28vZW5naW5lL2NvY29zMmQvcmVuZGVyZXIvY29yZS9wcm9ncmFtLWxpYi5qcyJdLCJuYW1lcyI6WyJfc2hkSUQiLCJfZ2VuZXJhdGVEZWZpbmVzIiwiZGVmaW5lTGlzdCIsImRlZmluZXMiLCJjYWNoZSIsImkiLCJsZW5ndGgiLCJkZWZzIiwiZGVmIiwicmVzdWx0IiwidW5kZWZpbmVkIiwicHVzaCIsImpvaW4iLCJfcmVwbGFjZU1hY3JvTnVtcyIsInN0cmluZyIsInRtcCIsIk51bWJlciIsImlzSW50ZWdlciIsInJlZyIsIlJlZ0V4cCIsInJlcGxhY2UiLCJfdW5yb2xsTG9vcHMiLCJwYXR0ZXJuIiwibWF0Y2giLCJpbmRleCIsImJlZ2luIiwiZW5kIiwic25pcHBldCIsInVucm9sbCIsInBhcnNlZEJlZ2luIiwicGFyc2VJbnQiLCJwYXJzZWRFbmQiLCJpc05hTiIsImNvbnNvbGUiLCJlcnJvciIsIl9yZXBsYWNlSGlnaHAiLCJQcm9ncmFtTGliIiwiZGV2aWNlIiwiX2RldmljZSIsIl90ZW1wbGF0ZXMiLCJfY2FjaGUiLCJfY2hlY2tQcmVjaXNpb24iLCJwcm9nIiwibmFtZSIsImdsc2wxIiwidmVydCIsImZyYWciLCJpZCIsIm9mZnNldCIsImNudCIsInR5cGUiLCJyYW5nZSIsIm1pbiIsIm1heCIsIk1hdGgiLCJjZWlsIiwibG9nMiIsIl9tYXAiLCJ2YWx1ZSIsIl9vZmZzZXQiLCJiaW5kIiwidW5pZm9ybXMiLCJzYW1wbGVycyIsImJsb2NrcyIsIm1lbWJlcnMiLCJqIiwiYXR0cmlidXRlcyIsImV4dGVuc2lvbnMiLCJ0bXBsIiwia2V5IiwidG1wbERlZnMiLCJfZ2V0VmFsdWVGcm9tRGVmaW5lTGlzdCIsImVyclByZWZpeCIsImdldEtleSIsInByb2dyYW0iLCJjdXN0b21EZWYiLCJfaGlnaHBTdXBwb3J0ZWQiLCJnZngiLCJQcm9ncmFtIiwiZXJyb3JzIiwibGluayIsInZlcnRMaW5lcyIsInNwbGl0IiwiZnJhZ0xpbmVzIiwiZGVmaW5lTGVuZ3RoIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJsaW5lIiwiZXJyIiwib3JpZ2luTGluZSIsImxpbmVzIiwic291cmNlIiwiaW5mbyIsImZpbGVJRCIsIm1lc3NhZ2UiLCJjYyIsImdsIiwiX2dsIiwiaGlnaHBTdXBwb3J0ZWQiLCJnZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQiLCJ2ZXJ0SGlnaHAiLCJWRVJURVhfU0hBREVSIiwiSElHSF9GTE9BVCIsImZyYWdIaWdocCIsIkZSQUdNRU5UX1NIQURFUiIsInByZWNpc2lvbiIsIndhcm5JRCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7UUFFQSxJQUFBLElBQUEsR0FBQSxPQUFBLENBQUEsUUFBQSxDQUFBOzs7Ozs7Ozs7O1FBRUEsSUFBSUEsTUFBQUEsR0FBUyxDQUFiO1FBRUEsU0FBU0MsZ0JBQVQsQ0FBMEJDLFVBQTFCLEVBQXNDO0FBQUEsWUFDcEMsSUFBSUMsT0FBQUEsR0FBVSxFQUFkLENBRG9DO0FBQUEsWUFFcEMsSUFBSUMsS0FBQUEsR0FBUSxFQUFaLENBRm9DO0FBQUEsWUFHcEMsS0FBSyxJQUFJQyxDQUFBQSxHQUFJSCxVQUFBQSxDQUFXSSxNQUFYSixHQUFvQixDQUE1QixDQUFMLENBQW9DRyxDQUFBQSxJQUFLLENBQXpDLEVBQTRDQSxDQUFBQSxFQUE1QyxFQUFpRDtBQUFBLGdCQUMvQyxJQUFJRSxJQUFBQSxHQUFPTCxVQUFBQSxDQUFXRyxDQUFYSCxDQUFYLENBRCtDO0FBQUEsZ0JBRS9DLFNBQVNNLEdBQVQsSUFBZ0JELElBQWhCLEVBQXNCO0FBQUEsb0JBQ3BCLElBQUlFLE1BQUFBLEdBQVNGLElBQUFBLENBQUtDLEdBQUxELENBQWIsQ0FEb0I7QUFBQSxvQkFFcEIsSUFBSUUsTUFBQUEsS0FBV0MsU0FBZjtBQUFBLHdCQUEwQixTQUZOO0FBQUEsb0JBR3BC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QSxHQUFZSixFQUFBQSxDQUFHRyx3QkFBSEgsQ0FBNEJBLEVBQUFBLENBQUdLLGFBQS9CTCxFQUE4Q0EsRUFBQUEsQ0FBR00sVUFBakROLENBQWhCLENBRDZCO0FBQUEsNEJBRTdCLElBQUlPLFNBQUFBLEdBQVlQLEVBQUFBLENBQUdHLHdCQUFISCxDQUE0QkEsRUFBQUEsQ0FBR1EsZUFBL0JSLEVBQWdEQSxFQUFBQSxDQUFHTSxVQUFuRE4sQ0FBaEIsQ0FGNkI7QUFBQSw0QkFHN0JFLGNBQUFBLEdBQWtCRSxTQUFBQSxJQUFhQSxTQUFBQSxDQUFVSyxTQUFWTCxHQUFzQixDQUFuQ0EsSUFDZkcsU0FEZUgsSUFDRkcsU0FBQUEsQ0FBVUUsU0FBVkYsR0FBc0IsQ0FEdENMLENBSDZCO0FBQUEseUJBSGhCO0FBQUEsd0JBU2pCLElBQUksQ0FBQ0EsY0FBTCxFQUFxQjtBQUFBLDRCQUNuQkgsRUFBQUEsQ0FBR1csTUFBSFgsQ0FBVSxJQUFWQSxFQURtQjtBQUFBLHlCQVRKO0FBQUEsd0JBWWpCLEtBQUtwQixlQUFMLEdBQXVCdUIsY0FBdkIsQ0FaaUI7QUFBQTs7Ozs7MEJBck5BL0Q7Ozs7OztRQWpFckIsaUJBQUEsQ0FBQSxrQkFBQSxDQUFBLFVBQUEsRUFBQSxZQUFBO0FBQUEsNERBQUE7QUFBQSxTQUFBIiwiZmlsZSI6InByb2dyYW0tbGliLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbmltcG9ydCBnZnggZnJvbSAnLi4vZ2Z4JztcblxubGV0IF9zaGRJRCA9IDA7XG5cbmZ1bmN0aW9uIF9nZW5lcmF0ZURlZmluZXMoZGVmaW5lTGlzdCkge1xuICBsZXQgZGVmaW5lcyA9IFtdO1xuICBsZXQgY2FjaGUgPSB7fVxuICBmb3IgKGxldCBpID0gZGVmaW5lTGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGxldCBkZWZzID0gZGVmaW5lTGlzdFtpXTtcbiAgICBmb3IgKGxldCBkZWYgaW4gZGVmcykge1xuICAgICAgbGV0IHJlc3VsdCA9IGRlZnNbZGVmXTtcbiAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkgY29udGludWU7XG4gICAgICBpZiAoY2FjaGVbZGVmXSAhPT0gdW5kZWZpbmVkKSBjb250aW51ZTtcbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnbnVtYmVyJykge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQgPyAxIDogMDtcbiAgICAgIH1cbiAgICAgIGNhY2hlW2RlZl0gPSByZXN1bHQ7XG4gICAgICBkZWZpbmVzLnB1c2goYCNkZWZpbmUgJHtkZWZ9ICR7cmVzdWx0fWApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVmaW5lcy5qb2luKCdcXG4nKSArICdcXG4nO1xufVxuXG5mdW5jdGlvbiBfcmVwbGFjZU1hY3JvTnVtcyhzdHJpbmcsIGRlZmluZUxpc3QpIHtcbiAgbGV0IGNhY2hlID0ge307XG4gIGxldCB0bXAgPSBzdHJpbmc7XG5cbiAgZm9yIChsZXQgaSA9IGRlZmluZUxpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBsZXQgZGVmcyA9IGRlZmluZUxpc3RbaV07XG4gICAgZm9yIChsZXQgZGVmIGluIGRlZnMpIHtcbiAgICAgIGxldCByZXN1bHQgPSBkZWZzW2RlZl07XG4gICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xuICAgICAgaWYgKGNhY2hlW2RlZl0gIT09IHVuZGVmaW5lZCkgY29udGludWU7XG4gICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihyZXN1bHQpKSB7XG4gICAgICAgIGNhY2hlW2RlZl0gPSByZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yIChsZXQgZGVmIGluIGNhY2hlKSB7XG4gICAgbGV0IHJlZyA9IG5ldyBSZWdFeHAoZGVmLCAnZycpO1xuICAgIHRtcCA9IHRtcC5yZXBsYWNlKHJlZywgY2FjaGVbZGVmXSk7XG4gIH1cbiAgcmV0dXJuIHRtcDtcbn1cblxuZnVuY3Rpb24gX3Vucm9sbExvb3BzKHN0cmluZykge1xuICBsZXQgcGF0dGVybiA9IC8jcHJhZ21hIGZvciAoXFx3KykgaW4gcmFuZ2VcXChcXHMqKFxcZCspXFxzKixcXHMqKFxcZCspXFxzKlxcKShbXFxzXFxTXSs/KSNwcmFnbWEgZW5kRm9yL2c7XG4gIGZ1bmN0aW9uIHJlcGxhY2UobWF0Y2gsIGluZGV4LCBiZWdpbiwgZW5kLCBzbmlwcGV0KSB7XG4gICAgbGV0IHVucm9sbCA9ICcnO1xuICAgIGxldCBwYXJzZWRCZWdpbiA9IHBhcnNlSW50KGJlZ2luKTtcbiAgICBsZXQgcGFyc2VkRW5kID0gcGFyc2VJbnQoZW5kKTtcbiAgICBpZiAocGFyc2VkQmVnaW4uaXNOYU4gfHwgcGFyc2VkRW5kLmlzTmFOKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdVbnJvbGwgRm9yIExvb3BzIEVycm9yOiBiZWdpbiBhbmQgZW5kIG9mIHJhbmdlIG11c3QgYmUgYW4gaW50IG51bS4nKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IHBhcnNlZEJlZ2luOyBpIDwgcGFyc2VkRW5kOyArK2kpIHtcbiAgICAgIHVucm9sbCArPSBzbmlwcGV0LnJlcGxhY2UobmV3IFJlZ0V4cChgeyR7aW5kZXh9fWAsICdnJyksIGkpO1xuICAgIH1cbiAgICByZXR1cm4gdW5yb2xsO1xuICB9XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShwYXR0ZXJuLCByZXBsYWNlKTtcbn1cblxuZnVuY3Rpb24gX3JlcGxhY2VIaWdocChzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGJoaWdocFxcYi9nLCAnbWVkaXVtcCcpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9ncmFtTGliIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7Z2Z4LkRldmljZX0gZGV2aWNlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihkZXZpY2UpIHtcbiAgICB0aGlzLl9kZXZpY2UgPSBkZXZpY2U7XG5cbiAgICAvLyByZWdpc3RlciB0ZW1wbGF0ZXNcbiAgICB0aGlzLl90ZW1wbGF0ZXMgPSB7fTtcbiAgICB0aGlzLl9jYWNoZSA9IHt9O1xuXG4gICAgdGhpcy5fY2hlY2tQcmVjaXNpb24oKTtcbiAgfVxuXG4gIGNsZWFyICgpIHtcbiAgICB0aGlzLl90ZW1wbGF0ZXMgPSB7fTtcbiAgICB0aGlzLl9jYWNoZSA9IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2ZXJ0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmcmFnXG4gICAqIEBwYXJhbSB7T2JqZWN0W119IGRlZmluZXNcbiAgICpcbiAgICogQGV4YW1wbGU6XG4gICAqICAgLy8gdGhpcyBvYmplY3QgaXMgYXV0by1nZW5lcmF0ZWQgZnJvbSB5b3VyIGFjdHVhbCBzaGFkZXJzXG4gICAqICAgbGV0IHByb2dyYW0gPSB7XG4gICAqICAgICBuYW1lOiAnZm9vYmFyJyxcbiAgICogICAgIHZlcnQ6IHZlcnRUbXBsLFxuICAgKiAgICAgZnJhZzogZnJhZ1RtcGwsXG4gICAqICAgICBkZWZpbmVzOiBbXG4gICAqICAgICAgIHsgbmFtZTogJ3NoYWRvdycsIHR5cGU6ICdib29sZWFuJyB9LFxuICAgKiAgICAgICB7IG5hbWU6ICdsaWdodENvdW50JywgdHlwZTogJ251bWJlcicsIG1pbjogMSwgbWF4OiA0IH1cbiAgICogICAgIF0sXG4gICAqICAgICBhdHRyaWJ1dGVzOiBbeyBuYW1lOiAnYV9wb3NpdGlvbicsIHR5cGU6ICd2ZWMzJyB9XSxcbiAgICogICAgIHVuaWZvcm1zOiBbeyBuYW1lOiAnY29sb3InLCB0eXBlOiAndmVjNCcgfV0sXG4gICAqICAgICBleHRlbnNpb25zOiBbJ0dMX09FU19zdGFuZGFyZF9kZXJpdmF0aXZlcyddLFxuICAgKiAgIH07XG4gICAqICAgcHJvZ3JhbUxpYi5kZWZpbmUocHJvZ3JhbSk7XG4gICAqL1xuICBkZWZpbmUocHJvZykge1xuICAgIGxldCB7IG5hbWUsIGRlZmluZXMsIGdsc2wxIH0gPSBwcm9nO1xuICAgIGxldCB7IHZlcnQsIGZyYWcgfSA9IGdsc2wxIHx8IHByb2c7XG4gICAgaWYgKHRoaXMuX3RlbXBsYXRlc1tuYW1lXSkge1xuICAgICAgLy8gY29uc29sZS53YXJuKGBGYWlsZWQgdG8gZGVmaW5lIHNoYWRlciAke25hbWV9OiBhbHJlYWR5IGV4aXN0cy5gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgaWQgPSArK19zaGRJRDtcblxuICAgIC8vIGNhbGN1bGF0ZSBvcHRpb24gbWFzayBvZmZzZXRcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlZmluZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxldCBkZWYgPSBkZWZpbmVzW2ldO1xuICAgICAgbGV0IGNudCA9IDE7XG5cbiAgICAgIGlmIChkZWYudHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgbGV0IHJhbmdlID0gZGVmLnJhbmdlIHx8IFtdO1xuICAgICAgICBkZWYubWluID0gcmFuZ2VbMF0gfHwgMDtcbiAgICAgICAgZGVmLm1heCA9IHJhbmdlWzFdIHx8IDQ7XG4gICAgICAgIGNudCA9IE1hdGguY2VpbChNYXRoLmxvZzIoZGVmLm1heCAtIGRlZi5taW4pKTtcblxuICAgICAgICBkZWYuX21hcCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiAodmFsdWUgLSB0aGlzLm1pbikgPDwgdGhpcy5fb2Zmc2V0O1xuICAgICAgICB9LmJpbmQoZGVmKTtcbiAgICAgIH0gZWxzZSB7IC8vIGJvb2xlYW5cbiAgICAgICAgZGVmLl9tYXAgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiAxIDw8IHRoaXMuX29mZnNldDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0uYmluZChkZWYpO1xuICAgICAgfVxuXG4gICAgICBvZmZzZXQgKz0gY250O1xuICAgICAgZGVmLl9vZmZzZXQgPSBvZmZzZXQ7XG4gICAgfVxuXG4gICAgbGV0IHVuaWZvcm1zID0gcHJvZy51bmlmb3JtcyB8fCBbXTtcblxuICAgIGlmIChwcm9nLnNhbXBsZXJzKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb2cuc2FtcGxlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdW5pZm9ybXMucHVzaChwcm9nLnNhbXBsZXJzW2ldKVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJvZy5ibG9ja3MpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvZy5ibG9ja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGRlZmluZXMgPSBwcm9nLmJsb2Nrc1tpXS5kZWZpbmVzO1xuICAgICAgICBsZXQgbWVtYmVycyA9IHByb2cuYmxvY2tzW2ldLm1lbWJlcnM7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbWVtYmVycy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHVuaWZvcm1zLnB1c2goe1xuICAgICAgICAgICAgZGVmaW5lcyxcbiAgICAgICAgICAgIG5hbWU6IG1lbWJlcnNbal0ubmFtZSxcbiAgICAgICAgICAgIHR5cGU6IG1lbWJlcnNbal0udHlwZSxcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gc3RvcmUgaXRcbiAgICB0aGlzLl90ZW1wbGF0ZXNbbmFtZV0gPSB7XG4gICAgICBpZCxcbiAgICAgIG5hbWUsXG4gICAgICB2ZXJ0LFxuICAgICAgZnJhZyxcbiAgICAgIGRlZmluZXMsXG4gICAgICBhdHRyaWJ1dGVzOiBwcm9nLmF0dHJpYnV0ZXMsXG4gICAgICB1bmlmb3JtcyxcbiAgICAgIGV4dGVuc2lvbnM6IHByb2cuZXh0ZW5zaW9uc1xuICAgIH07XG4gIH1cblxuICBnZXRUZW1wbGF0ZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RlbXBsYXRlc1tuYW1lXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEb2VzIHRoaXMgbGlicmFyeSBoYXMgdGhlIHNwZWNpZmllZCBwcm9ncmFtP1xuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGhhc1Byb2dyYW0obmFtZSkge1xuICAgIHJldHVybiB0aGlzLl90ZW1wbGF0ZXNbbmFtZV0gIT09IHVuZGVmaW5lZDtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7QXJyYXl9IGRlZmluZUxpc3RcbiAgICovXG4gIGdldEtleShuYW1lLCBkZWZpbmVMaXN0KSB7XG4gICAgbGV0IHRtcGwgPSB0aGlzLl90ZW1wbGF0ZXNbbmFtZV07XG4gICAgbGV0IGtleSA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0bXBsLmRlZmluZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxldCB0bXBsRGVmcyA9IHRtcGwuZGVmaW5lc1tpXTtcbiAgICAgIFxuICAgICAgbGV0IHZhbHVlID0gdGhpcy5fZ2V0VmFsdWVGcm9tRGVmaW5lTGlzdCh0bXBsRGVmcy5uYW1lLCBkZWZpbmVMaXN0KTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBrZXkgfD0gdG1wbERlZnMuX21hcCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gcmV0dXJuIGtleSA8PCA4IHwgdG1wbC5pZDtcbiAgICAvLyBrZXkgbnVtYmVyIG1heWJlIGJpZ2dlciB0aGFuIDMyIGJpdCwgbmVlZCB1c2Ugc3RyaW5nIHRvIHN0b3JlIHZhbHVlLlxuICAgIHJldHVybiB0bXBsLmlkICsgJzonICsga2V5O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7W09iamVjdF19IGRlZmluZUxpc3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IGVyclByZWZpeFxuICAgKi9cbiAgZ2V0UHJvZ3JhbShuYW1lLCBkZWZpbmVMaXN0LCBlcnJQcmVmaXgpIHtcbiAgICBsZXQga2V5ID0gdGhpcy5nZXRLZXkobmFtZSwgZGVmaW5lTGlzdCk7XG4gICAgbGV0IHByb2dyYW0gPSB0aGlzLl9jYWNoZVtrZXldO1xuICAgIGlmIChwcm9ncmFtKSB7XG4gICAgICByZXR1cm4gcHJvZ3JhbTtcbiAgICB9XG5cbiAgICAvLyBnZXQgdGVtcGxhdGVcbiAgICBsZXQgdG1wbCA9IHRoaXMuX3RlbXBsYXRlc1tuYW1lXTtcbiAgICBsZXQgY3VzdG9tRGVmID0gX2dlbmVyYXRlRGVmaW5lcyhkZWZpbmVMaXN0KTtcbiAgICBsZXQgdmVydCA9IF9yZXBsYWNlTWFjcm9OdW1zKHRtcGwudmVydCwgZGVmaW5lTGlzdCk7XG4gICAgdmVydCA9IGN1c3RvbURlZiArIF91bnJvbGxMb29wcyh2ZXJ0KTtcbiAgICBpZiAoIXRoaXMuX2hpZ2hwU3VwcG9ydGVkKSB7XG4gICAgICB2ZXJ0ID0gX3JlcGxhY2VIaWdocCh2ZXJ0KTtcbiAgICB9XG5cbiAgICBsZXQgZnJhZyA9IF9yZXBsYWNlTWFjcm9OdW1zKHRtcGwuZnJhZywgZGVmaW5lTGlzdCk7XG4gICAgZnJhZyA9IGN1c3RvbURlZiArIF91bnJvbGxMb29wcyhmcmFnKTtcbiAgICBpZiAoIXRoaXMuX2hpZ2hwU3VwcG9ydGVkKSB7XG4gICAgICBmcmFnID0gX3JlcGxhY2VIaWdocChmcmFnKTtcbiAgICB9XG5cbiAgICBwcm9ncmFtID0gbmV3IGdmeC5Qcm9ncmFtKHRoaXMuX2RldmljZSwge1xuICAgICAgdmVydCxcbiAgICAgIGZyYWdcbiAgICB9KTtcbiAgICBsZXQgZXJyb3JzID0gcHJvZ3JhbS5saW5rKCk7XG4gICAgaWYgKGVycm9ycykge1xuICAgICAgbGV0IHZlcnRMaW5lcyA9IHZlcnQuc3BsaXQoJ1xcbicpO1xuICAgICAgbGV0IGZyYWdMaW5lcyA9IGZyYWcuc3BsaXQoJ1xcbicpO1xuICAgICAgbGV0IGRlZmluZUxlbmd0aCA9IE9iamVjdC5rZXlzKGRlZmluZUxpc3QpLmxlbmd0aDtcbiAgICAgIGVycm9ycy5mb3JFYWNoKGVyciA9PiB7XG4gICAgICAgIGxldCBsaW5lID0gZXJyLmxpbmUgLSAxO1xuICAgICAgICBsZXQgb3JpZ2luTGluZSA9IGVyci5saW5lIC0gZGVmaW5lTGVuZ3RoO1xuXG4gICAgICAgIGxldCBsaW5lcyA9IGVyci50eXBlID09PSAndnMnID8gdmVydExpbmVzIDogZnJhZ0xpbmVzO1xuICAgICAgICAvLyBsZXQgc291cmNlID0gYCAke2xpbmVzW2xpbmUtMV19XFxuPiR7bGluZXNbbGluZV19XFxuICR7bGluZXNbbGluZSsxXX1gO1xuICAgICAgICBsZXQgc291cmNlID0gbGluZXNbbGluZV07XG5cbiAgICAgICAgbGV0IGluZm8gPSBlcnIuaW5mbyB8fCBgRmFpbGVkIHRvIGNvbXBpbGUgJHtlcnIudHlwZX0gJHtlcnIuZmlsZUlEfSAobG4gJHtvcmlnaW5MaW5lfSk6IFxcbiAke2Vyci5tZXNzYWdlfTogXFxuICAke3NvdXJjZX1gO1xuICAgICAgICBjYy5lcnJvcihgJHtlcnJQcmVmaXh9IDogJHtpbmZvfWApO1xuICAgICAgfSlcbiAgICB9XG4gICAgdGhpcy5fY2FjaGVba2V5XSA9IHByb2dyYW07XG5cbiAgICByZXR1cm4gcHJvZ3JhbTtcbiAgfVxuXG4gIF9nZXRWYWx1ZUZyb21EZWZpbmVMaXN0IChuYW1lLCBkZWZpbmVMaXN0KSB7XG4gICAgbGV0IHZhbHVlO1xuICAgIGZvciAobGV0IGkgPSBkZWZpbmVMaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YWx1ZSA9IGRlZmluZUxpc3RbaV1bbmFtZV07XG4gICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX2NoZWNrUHJlY2lzaW9uICgpIHtcbiAgICBsZXQgZ2wgPSB0aGlzLl9kZXZpY2UuX2dsO1xuICAgIGxldCBoaWdocFN1cHBvcnRlZCA9IGZhbHNlO1xuICAgIGlmIChnbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQpIHtcbiAgICAgICAgbGV0IHZlcnRIaWdocCA9IGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdChnbC5WRVJURVhfU0hBREVSLCBnbC5ISUdIX0ZMT0FUKTtcbiAgICAgICAgbGV0IGZyYWdIaWdocCA9IGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdChnbC5GUkFHTUVOVF9TSEFERVIsIGdsLkhJR0hfRkxPQVQpO1xuICAgICAgICBoaWdocFN1cHBvcnRlZCA9ICh2ZXJ0SGlnaHAgJiYgdmVydEhpZ2hwLnByZWNpc2lvbiA+IDApICYmXG4gICAgICAgICAgKGZyYWdIaWdocCAmJiBmcmFnSGlnaHAucHJlY2lzaW9uID4gMCk7XG4gICAgfVxuICAgIGlmICghaGlnaHBTdXBwb3J0ZWQpIHtcbiAgICAgIGNjLndhcm5JRCg5MTAyKTtcbiAgICB9XG4gICAgdGhpcy5faGlnaHBTdXBwb3J0ZWQgPSBoaWdocFN1cHBvcnRlZDtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpOyAvLyBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxudmFyIF9nZnggPSByZXF1aXJlKCcuLi9nZngnKTtcblxudmFyIF9nZngyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2Z4KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIF9zaGRJRCA9IDA7XG5cbmZ1bmN0aW9uIF9nZW5lcmF0ZURlZmluZXMoZGVmaW5lTGlzdCkge1xuICB2YXIgZGVmaW5lcyA9IFtdO1xuICB2YXIgY2FjaGUgPSB7fTtcbiAgZm9yICh2YXIgaSA9IGRlZmluZUxpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgZGVmcyA9IGRlZmluZUxpc3RbaV07XG4gICAgZm9yICh2YXIgZGVmIGluIGRlZnMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBkZWZzW2RlZl07XG4gICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xuICAgICAgaWYgKGNhY2hlW2RlZl0gIT09IHVuZGVmaW5lZCkgY29udGludWU7XG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0ID8gMSA6IDA7XG4gICAgICB9XG4gICAgICBjYWNoZVtkZWZdID0gcmVzdWx0O1xuICAgICAgZGVmaW5lcy5wdXNoKCcjZGVmaW5lICcgKyBkZWYgKyAnICcgKyByZXN1bHQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVmaW5lcy5qb2luKCdcXG4nKSArICdcXG4nO1xufVxuXG5mdW5jdGlvbiBfcmVwbGFjZU1hY3JvTnVtcyhzdHJpbmcsIGRlZmluZUxpc3QpIHtcbiAgdmFyIGNhY2hlID0ge307XG4gIHZhciB0bXAgPSBzdHJpbmc7XG5cbiAgZm9yICh2YXIgaSA9IGRlZmluZUxpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgZGVmcyA9IGRlZmluZUxpc3RbaV07XG4gICAgZm9yICh2YXIgZGVmIGluIGRlZnMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBkZWZzW2RlZl07XG4gICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xuICAgICAgaWYgKGNhY2hlW2RlZl0gIT09IHVuZGVmaW5lZCkgY29udGludWU7XG4gICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihyZXN1bHQpKSB7XG4gICAgICAgIGNhY2hlW2RlZl0gPSByZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgX2RlZiBpbiBjYWNoZSkge1xuICAgIHZhciByZWcgPSBuZXcgUmVnRXhwKF9kZWYsICdnJyk7XG4gICAgdG1wID0gdG1wLnJlcGxhY2UocmVnLCBjYWNoZVtfZGVmXSk7XG4gIH1cbiAgcmV0dXJuIHRtcDtcbn1cblxuZnVuY3Rpb24gX3Vucm9sbExvb3BzKHN0cmluZykge1xuICB2YXIgcGF0dGVybiA9IC8jcHJhZ21hIGZvciAoXFx3KykgaW4gcmFuZ2VcXChcXHMqKFxcZCspXFxzKixcXHMqKFxcZCspXFxzKlxcKShbXFxzXFxTXSs/KSNwcmFnbWEgZW5kRm9yL2c7XG4gIGZ1bmN0aW9uIHJlcGxhY2UobWF0Y2gsIGluZGV4LCBiZWdpbiwgZW5kLCBzbmlwcGV0KSB7XG4gICAgdmFyIHVucm9sbCA9ICcnO1xuICAgIHZhciBwYXJzZWRCZWdpbiA9IHBhcnNlSW50KGJlZ2luKTtcbiAgICB2YXIgcGFyc2VkRW5kID0gcGFyc2VJbnQoZW5kKTtcbiAgICBpZiAocGFyc2VkQmVnaW4uaXNOYU4gfHwgcGFyc2VkRW5kLmlzTmFOKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdVbnJvbGwgRm9yIExvb3BzIEVycm9yOiBiZWdpbiBhbmQgZW5kIG9mIHJhbmdlIG11c3QgYmUgYW4gaW50IG51bS4nKTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IHBhcnNlZEJlZ2luOyBpIDwgcGFyc2VkRW5kOyArK2kpIHtcbiAgICAgIHVucm9sbCArPSBzbmlwcGV0LnJlcGxhY2UobmV3IFJlZ0V4cCgneycgKyBpbmRleCArICd9JywgJ2cnKSwgaSk7XG4gICAgfVxuICAgIHJldHVybiB1bnJvbGw7XG4gIH1cbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHBhdHRlcm4sIHJlcGxhY2UpO1xufVxuXG5mdW5jdGlvbiBfcmVwbGFjZUhpZ2hwKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcYmhpZ2hwXFxiL2csICdtZWRpdW1wJyk7XG59XG5cbnZhciBQcm9ncmFtTGliID0gZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQHBhcmFtIHtnZnguRGV2aWNlfSBkZXZpY2VcbiAgICovXG4gIGZ1bmN0aW9uIFByb2dyYW1MaWIoZGV2aWNlKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByb2dyYW1MaWIpO1xuXG4gICAgdGhpcy5fZGV2aWNlID0gZGV2aWNlO1xuXG4gICAgLy8gcmVnaXN0ZXIgdGVtcGxhdGVzXG4gICAgdGhpcy5fdGVtcGxhdGVzID0ge307XG4gICAgdGhpcy5fY2FjaGUgPSB7fTtcblxuICAgIHRoaXMuX2NoZWNrUHJlY2lzaW9uKCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUHJvZ3JhbUxpYiwgW3tcbiAgICBrZXk6ICdjbGVhcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgdGhpcy5fdGVtcGxhdGVzID0ge307XG4gICAgICB0aGlzLl9jYWNoZSA9IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZlcnRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZnJhZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0W119IGRlZmluZXNcbiAgICAgKlxuICAgICAqIEBleGFtcGxlOlxuICAgICAqICAgLy8gdGhpcyBvYmplY3QgaXMgYXV0by1nZW5lcmF0ZWQgZnJvbSB5b3VyIGFjdHVhbCBzaGFkZXJzXG4gICAgICogICBsZXQgcHJvZ3JhbSA9IHtcbiAgICAgKiAgICAgbmFtZTogJ2Zvb2JhcicsXG4gICAgICogICAgIHZlcnQ6IHZlcnRUbXBsLFxuICAgICAqICAgICBmcmFnOiBmcmFnVG1wbCxcbiAgICAgKiAgICAgZGVmaW5lczogW1xuICAgICAqICAgICAgIHsgbmFtZTogJ3NoYWRvdycsIHR5cGU6ICdib29sZWFuJyB9LFxuICAgICAqICAgICAgIHsgbmFtZTogJ2xpZ2h0Q291bnQnLCB0eXBlOiAnbnVtYmVyJywgbWluOiAxLCBtYXg6IDQgfVxuICAgICAqICAgICBdLFxuICAgICAqICAgICBhdHRyaWJ1dGVzOiBbeyBuYW1lOiAnYV9wb3NpdGlvbicsIHR5cGU6ICd2ZWMzJyB9XSxcbiAgICAgKiAgICAgdW5pZm9ybXM6IFt7IG5hbWU6ICdjb2xvcicsIHR5cGU6ICd2ZWM0JyB9XSxcbiAgICAgKiAgICAgZXh0ZW5zaW9uczogWydHTF9PRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXMnXSxcbiAgICAgKiAgIH07XG4gICAgICogICBwcm9ncmFtTGliLmRlZmluZShwcm9ncmFtKTtcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZGVmaW5lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVmaW5lKHByb2cpIHtcbiAgICAgIHZhciBuYW1lID0gcHJvZy5uYW1lLFxuICAgICAgICAgIGRlZmluZXMgPSBwcm9nLmRlZmluZXMsXG4gICAgICAgICAgZ2xzbDEgPSBwcm9nLmdsc2wxO1xuXG4gICAgICB2YXIgX3JlZiA9IGdsc2wxIHx8IHByb2csXG4gICAgICAgICAgdmVydCA9IF9yZWYudmVydCxcbiAgICAgICAgICBmcmFnID0gX3JlZi5mcmFnO1xuXG4gICAgICBpZiAodGhpcy5fdGVtcGxhdGVzW25hbWVdKSB7XG4gICAgICAgIC8vIGNvbnNvbGUud2FybihgRmFpbGVkIHRvIGRlZmluZSBzaGFkZXIgJHtuYW1lfTogYWxyZWFkeSBleGlzdHMuYCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGlkID0gKytfc2hkSUQ7XG5cbiAgICAgIC8vIGNhbGN1bGF0ZSBvcHRpb24gbWFzayBvZmZzZXRcbiAgICAgIHZhciBvZmZzZXQgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZWZpbmVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBkZWYgPSBkZWZpbmVzW2ldO1xuICAgICAgICB2YXIgY250ID0gMTtcblxuICAgICAgICBpZiAoZGVmLnR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgdmFyIHJhbmdlID0gZGVmLnJhbmdlIHx8IFtdO1xuICAgICAgICAgIGRlZi5taW4gPSByYW5nZVswXSB8fCAwO1xuICAgICAgICAgIGRlZi5tYXggPSByYW5nZVsxXSB8fCA0O1xuICAgICAgICAgIGNudCA9IE1hdGguY2VpbChNYXRoLmxvZzIoZGVmLm1heCAtIGRlZi5taW4pKTtcblxuICAgICAgICAgIGRlZi5fbWFwID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgLSB0aGlzLm1pbiA8PCB0aGlzLl9vZmZzZXQ7XG4gICAgICAgICAgfS5iaW5kKGRlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gYm9vbGVhblxuICAgICAgICAgIGRlZi5fbWFwID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDEgPDwgdGhpcy5fb2Zmc2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfS5iaW5kKGRlZik7XG4gICAgICAgIH1cblxuICAgICAgICBvZmZzZXQgKz0gY250O1xuICAgICAgICBkZWYuX29mZnNldCA9IG9mZnNldDtcbiAgICAgIH1cblxuICAgICAgdmFyIHVuaWZvcm1zID0gcHJvZy51bmlmb3JtcyB8fCBbXTtcblxuICAgICAgaWYgKHByb2cuc2FtcGxlcnMpIHtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHByb2cuc2FtcGxlcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgdW5pZm9ybXMucHVzaChwcm9nLnNhbXBsZXJzW19pXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwcm9nLmJsb2Nrcykge1xuICAgICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBwcm9nLmJsb2Nrcy5sZW5ndGg7IF9pMisrKSB7XG4gICAgICAgICAgdmFyIF9kZWZpbmVzID0gcHJvZy5ibG9ja3NbX2kyXS5kZWZpbmVzO1xuICAgICAgICAgIHZhciBtZW1iZXJzID0gcHJvZy5ibG9ja3NbX2kyXS5tZW1iZXJzO1xuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbWVtYmVycy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgdW5pZm9ybXMucHVzaCh7XG4gICAgICAgICAgICAgIGRlZmluZXM6IF9kZWZpbmVzLFxuICAgICAgICAgICAgICBuYW1lOiBtZW1iZXJzW2pdLm5hbWUsXG4gICAgICAgICAgICAgIHR5cGU6IG1lbWJlcnNbal0udHlwZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHN0b3JlIGl0XG4gICAgICB0aGlzLl90ZW1wbGF0ZXNbbmFtZV0gPSB7XG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgdmVydDogdmVydCxcbiAgICAgICAgZnJhZzogZnJhZyxcbiAgICAgICAgZGVmaW5lczogZGVmaW5lcyxcbiAgICAgICAgYXR0cmlidXRlczogcHJvZy5hdHRyaWJ1dGVzLFxuICAgICAgICB1bmlmb3JtczogdW5pZm9ybXMsXG4gICAgICAgIGV4dGVuc2lvbnM6IHByb2cuZXh0ZW5zaW9uc1xuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRUZW1wbGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRlbXBsYXRlKG5hbWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl90ZW1wbGF0ZXNbbmFtZV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRG9lcyB0aGlzIGxpYnJhcnkgaGFzIHRoZSBzcGVjaWZpZWQgcHJvZ3JhbT9cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdoYXNQcm9ncmFtJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzUHJvZ3JhbShuYW1lKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdGVtcGxhdGVzW25hbWVdICE9PSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBkZWZpbmVMaXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2dldEtleScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEtleShuYW1lLCBkZWZpbmVMaXN0KSB7XG4gICAgICB2YXIgdG1wbCA9IHRoaXMuX3RlbXBsYXRlc1tuYW1lXTtcbiAgICAgIHZhciBrZXkgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0bXBsLmRlZmluZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIHRtcGxEZWZzID0gdG1wbC5kZWZpbmVzW2ldO1xuXG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX2dldFZhbHVlRnJvbURlZmluZUxpc3QodG1wbERlZnMubmFtZSwgZGVmaW5lTGlzdCk7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBrZXkgfD0gdG1wbERlZnMuX21hcCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIHJldHVybiBrZXkgPDwgOCB8IHRtcGwuaWQ7XG4gICAgICAvLyBrZXkgbnVtYmVyIG1heWJlIGJpZ2dlciB0aGFuIDMyIGJpdCwgbmVlZCB1c2Ugc3RyaW5nIHRvIHN0b3JlIHZhbHVlLlxuICAgICAgcmV0dXJuIHRtcGwuaWQgKyAnOicgKyBrZXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICAgKiBAcGFyYW0ge1tPYmplY3RdfSBkZWZpbmVMaXN0XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGVyclByZWZpeFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdnZXRQcm9ncmFtJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UHJvZ3JhbShuYW1lLCBkZWZpbmVMaXN0LCBlcnJQcmVmaXgpIHtcbiAgICAgIHZhciBrZXkgPSB0aGlzLmdldEtleShuYW1lLCBkZWZpbmVMaXN0KTtcbiAgICAgIHZhciBwcm9ncmFtID0gdGhpcy5fY2FjaGVba2V5XTtcbiAgICAgIGlmIChwcm9ncmFtKSB7XG4gICAgICAgIHJldHVybiBwcm9ncmFtO1xuICAgICAgfVxuXG4gICAgICAvLyBnZXQgdGVtcGxhdGVcbiAgICAgIHZhciB0bXBsID0gdGhpcy5fdGVtcGxhdGVzW25hbWVdO1xuICAgICAgdmFyIGN1c3RvbURlZiA9IF9nZW5lcmF0ZURlZmluZXMoZGVmaW5lTGlzdCk7XG4gICAgICB2YXIgdmVydCA9IF9yZXBsYWNlTWFjcm9OdW1zKHRtcGwudmVydCwgZGVmaW5lTGlzdCk7XG4gICAgICB2ZXJ0ID0gY3VzdG9tRGVmICsgX3Vucm9sbExvb3BzKHZlcnQpO1xuICAgICAgaWYgKCF0aGlzLl9oaWdocFN1cHBvcnRlZCkge1xuICAgICAgICB2ZXJ0ID0gX3JlcGxhY2VIaWdocCh2ZXJ0KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGZyYWcgPSBfcmVwbGFjZU1hY3JvTnVtcyh0bXBsLmZyYWcsIGRlZmluZUxpc3QpO1xuICAgICAgZnJhZyA9IGN1c3RvbURlZiArIF91bnJvbGxMb29wcyhmcmFnKTtcbiAgICAgIGlmICghdGhpcy5faGlnaHBTdXBwb3J0ZWQpIHtcbiAgICAgICAgZnJhZyA9IF9yZXBsYWNlSGlnaHAoZnJhZyk7XG4gICAgICB9XG5cbiAgICAgIHByb2dyYW0gPSBuZXcgX2dmeDIuZGVmYXVsdC5Qcm9ncmFtKHRoaXMuX2RldmljZSwge1xuICAgICAgICB2ZXJ0OiB2ZXJ0LFxuICAgICAgICBmcmFnOiBmcmFnXG4gICAgICB9KTtcbiAgICAgIHZhciBlcnJvcnMgPSBwcm9ncmFtLmxpbmsoKTtcbiAgICAgIGlmIChlcnJvcnMpIHtcbiAgICAgICAgdmFyIHZlcnRMaW5lcyA9IHZlcnQuc3BsaXQoJ1xcbicpO1xuICAgICAgICB2YXIgZnJhZ0xpbmVzID0gZnJhZy5zcGxpdCgnXFxuJyk7XG4gICAgICAgIHZhciBkZWZpbmVMZW5ndGggPSBPYmplY3Qua2V5cyhkZWZpbmVMaXN0KS5sZW5ndGg7XG4gICAgICAgIGVycm9ycy5mb3JFYWNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICB2YXIgbGluZSA9IGVyci5saW5lIC0gMTtcbiAgICAgICAgICB2YXIgb3JpZ2luTGluZSA9IGVyci5saW5lIC0gZGVmaW5lTGVuZ3RoO1xuXG4gICAgICAgICAgdmFyIGxpbmVzID0gZXJyLnR5cGUgPT09ICd2cycgPyB2ZXJ0TGluZXMgOiBmcmFnTGluZXM7XG4gICAgICAgICAgLy8gbGV0IHNvdXJjZSA9IGAgJHtsaW5lc1tsaW5lLTFdfVxcbj4ke2xpbmVzW2xpbmVdfVxcbiAke2xpbmVzW2xpbmUrMV19YDtcbiAgICAgICAgICB2YXIgc291cmNlID0gbGluZXNbbGluZV07XG5cbiAgICAgICAgICB2YXIgaW5mbyA9IGVyci5pbmZvIHx8ICdGYWlsZWQgdG8gY29tcGlsZSAnICsgZXJyLnR5cGUgKyAnICcgKyBlcnIuZmlsZUlEICsgJyAobG4gJyArIG9yaWdpbkxpbmUgKyAnKTogXFxuICcgKyBlcnIubWVzc2FnZSArICc6IFxcbiAgJyArIHNvdXJjZTtcbiAgICAgICAgICBjYy5lcnJvcihlcnJQcmVmaXggKyAnIDogJyArIGluZm8pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2NhY2hlW2tleV0gPSBwcm9ncmFtO1xuXG4gICAgICByZXR1cm4gcHJvZ3JhbTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfZ2V0VmFsdWVGcm9tRGVmaW5lTGlzdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRWYWx1ZUZyb21EZWZpbmVMaXN0KG5hbWUsIGRlZmluZUxpc3QpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHZvaWQgMDtcbiAgICAgIGZvciAodmFyIGkgPSBkZWZpbmVMaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHZhbHVlID0gZGVmaW5lTGlzdFtpXVtuYW1lXTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfY2hlY2tQcmVjaXNpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfY2hlY2tQcmVjaXNpb24oKSB7XG4gICAgICB2YXIgZ2wgPSB0aGlzLl9kZXZpY2UuX2dsO1xuICAgICAgdmFyIGhpZ2hwU3VwcG9ydGVkID0gZmFsc2U7XG4gICAgICBpZiAoZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KSB7XG4gICAgICAgIHZhciB2ZXJ0SGlnaHAgPSBnbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoZ2wuVkVSVEVYX1NIQURFUiwgZ2wuSElHSF9GTE9BVCk7XG4gICAgICAgIHZhciBmcmFnSGlnaHAgPSBnbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoZ2wuRlJBR01FTlRfU0hBREVSLCBnbC5ISUdIX0ZMT0FUKTtcbiAgICAgICAgaGlnaHBTdXBwb3J0ZWQgPSB2ZXJ0SGlnaHAgJiYgdmVydEhpZ2hwLnByZWNpc2lvbiA+IDAgJiYgZnJhZ0hpZ2hwICYmIGZyYWdIaWdocC5wcmVjaXNpb24gPiAwO1xuICAgICAgfVxuICAgICAgaWYgKCFoaWdocFN1cHBvcnRlZCkge1xuICAgICAgICBjYy53YXJuSUQoOTEwMik7XG4gICAgICB9XG4gICAgICB0aGlzLl9oaWdocFN1cHBvcnRlZCA9IGhpZ2hwU3VwcG9ydGVkO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQcm9ncmFtTGliO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBQcm9ncmFtTGliO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbkJ5YjJkeVlXMHRiR2xpTG1weklsMHNJbTVoYldWeklqcGJJbDl6YUdSSlJDSXNJbDluWlc1bGNtRjBaVVJsWm1sdVpYTWlMQ0prWldacGJtVk1hWE4wSWl3aVpHVm1hVzVsY3lJc0ltTmhZMmhsSWl3aWFTSXNJbXhsYm1kMGFDSXNJbVJsWm5NaUxDSmtaV1lpTENKeVpYTjFiSFFpTENKMWJtUmxabWx1WldRaUxDSndkWE5vSWl3aWFtOXBiaUlzSWw5eVpYQnNZV05sVFdGamNtOU9kVzF6SWl3aWMzUnlhVzVuSWl3aWRHMXdJaXdpVG5WdFltVnlJaXdpYVhOSmJuUmxaMlZ5SWl3aWNtVm5JaXdpVW1WblJYaHdJaXdpY21Wd2JHRmpaU0lzSWw5MWJuSnZiR3hNYjI5d2N5SXNJbkJoZEhSbGNtNGlMQ0p0WVhSamFDSXNJbWx1WkdWNElpd2lZbVZuYVc0aUxDSmxibVFpTENKemJtbHdjR1YwSWl3aWRXNXliMnhzSWl3aWNHRnljMlZrUW1WbmFXNGlMQ0p3WVhKelpVbHVkQ0lzSW5CaGNuTmxaRVZ1WkNJc0ltbHpUbUZPSWl3aVkyOXVjMjlzWlNJc0ltVnljbTl5SWl3aVgzSmxjR3hoWTJWSWFXZG9jQ0lzSWxCeWIyZHlZVzFNYVdJaUxDSmtaWFpwWTJVaUxDSmZaR1YyYVdObElpd2lYM1JsYlhCc1lYUmxjeUlzSWw5allXTm9aU0lzSWw5amFHVmphMUJ5WldOcGMybHZiaUlzSW5CeWIyY2lMQ0p1WVcxbElpd2laMnh6YkRFaUxDSjJaWEowSWl3aVpuSmhaeUlzSW1sa0lpd2liMlptYzJWMElpd2lZMjUwSWl3aWRIbHdaU0lzSW5KaGJtZGxJaXdpYldsdUlpd2liV0Y0SWl3aVRXRjBhQ0lzSW1ObGFXd2lMQ0pzYjJjeUlpd2lYMjFoY0NJc0luWmhiSFZsSWl3aVgyOW1abk5sZENJc0ltSnBibVFpTENKMWJtbG1iM0p0Y3lJc0luTmhiWEJzWlhKeklpd2lZbXh2WTJ0eklpd2liV1Z0WW1WeWN5SXNJbW9pTENKaGRIUnlhV0oxZEdWeklpd2laWGgwWlc1emFXOXVjeUlzSW5SdGNHd2lMQ0pyWlhraUxDSjBiWEJzUkdWbWN5SXNJbDluWlhSV1lXeDFaVVp5YjIxRVpXWnBibVZNYVhOMElpd2laWEp5VUhKbFptbDRJaXdpWjJWMFMyVjVJaXdpY0hKdlozSmhiU0lzSW1OMWMzUnZiVVJsWmlJc0lsOW9hV2RvY0ZOMWNIQnZjblJsWkNJc0ltZG1lQ0lzSWxCeWIyZHlZVzBpTENKbGNuSnZjbk1pTENKc2FXNXJJaXdpZG1WeWRFeHBibVZ6SWl3aWMzQnNhWFFpTENKbWNtRm5UR2x1WlhNaUxDSmtaV1pwYm1WTVpXNW5kR2dpTENKUFltcGxZM1FpTENKclpYbHpJaXdpWm05eVJXRmphQ0lzSW14cGJtVWlMQ0psY25JaUxDSnZjbWxuYVc1TWFXNWxJaXdpYkdsdVpYTWlMQ0p6YjNWeVkyVWlMQ0pwYm1adklpd2labWxzWlVsRUlpd2liV1Z6YzJGblpTSXNJbU5qSWl3aVoyd2lMQ0pmWjJ3aUxDSm9hV2RvY0ZOMWNIQnZjblJsWkNJc0ltZGxkRk5vWVdSbGNsQnlaV05wYzJsdmJrWnZjbTFoZENJc0luWmxjblJJYVdkb2NDSXNJbFpGVWxSRldGOVRTRUZFUlZJaUxDSklTVWRJWDBaTVQwRlVJaXdpWm5KaFowaHBaMmh3SWl3aVJsSkJSMDFGVGxSZlUwaEJSRVZTSWl3aWNISmxZMmx6YVc5dUlpd2lkMkZ5YmtsRUlsMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPM0ZxUWtGQlFUczdRVUZGUVRzN096czdPenM3UVVGRlFTeEpRVUZKUVN4VFFVRlRMRU5CUVdJN08wRkJSVUVzVTBGQlUwTXNaMEpCUVZRc1EwRkJNRUpETEZWQlFURkNMRVZCUVhORE8wRkJRM0JETEUxQlFVbERMRlZCUVZVc1JVRkJaRHRCUVVOQkxFMUJRVWxETEZGQlFWRXNSVUZCV2p0QlFVTkJMRTlCUVVzc1NVRkJTVU1zU1VGQlNVZ3NWMEZCVjBrc1RVRkJXQ3hIUVVGdlFpeERRVUZxUXl4RlFVRnZRMFFzUzBGQlN5eERRVUY2UXl4RlFVRTBRMEVzUjBGQk5VTXNSVUZCYVVRN1FVRkRMME1zVVVGQlNVVXNUMEZCVDB3c1YwRkJWMGNzUTBGQldDeERRVUZZTzBGQlEwRXNVMEZCU3l4SlFVRkpSeXhIUVVGVUxFbEJRV2RDUkN4SlFVRm9RaXhGUVVGelFqdEJRVU53UWl4VlFVRkpSU3hUUVVGVFJpeExRVUZMUXl4SFFVRk1MRU5CUVdJN1FVRkRRU3hWUVVGSlF5eFhRVUZYUXl4VFFVRm1MRVZCUVRCQ08wRkJRekZDTEZWQlFVbE9MRTFCUVUxSkxFZEJRVTRzVFVGQlpVVXNVMEZCYmtJc1JVRkJPRUk3UVVGRE9VSXNWVUZCU1N4UFFVRlBSQ3hOUVVGUUxFdEJRV3RDTEZGQlFYUkNMRVZCUVdkRE8wRkJRemxDUVN4cFFrRkJVMEVzVTBGQlV5eERRVUZVTEVkQlFXRXNRMEZCZEVJN1FVRkRSRHRCUVVORVRDeFpRVUZOU1N4SFFVRk9MRWxCUVdGRExFMUJRV0k3UVVGRFFVNHNZMEZCVVZFc1NVRkJVaXhqUVVGM1FrZ3NSMEZCZUVJc1UwRkJLMEpETEUxQlFTOUNPMEZCUTBRN1FVRkRSanRCUVVORUxGTkJRVTlPTEZGQlFWRlRMRWxCUVZJc1EwRkJZU3hKUVVGaUxFbEJRWEZDTEVsQlFUVkNPMEZCUTBRN08wRkJSVVFzVTBGQlUwTXNhVUpCUVZRc1EwRkJNa0pETEUxQlFUTkNMRVZCUVcxRFdpeFZRVUZ1UXl4RlFVRXJRenRCUVVNM1F5eE5RVUZKUlN4UlFVRlJMRVZCUVZvN1FVRkRRU3hOUVVGSlZ5eE5RVUZOUkN4TlFVRldPenRCUVVWQkxFOUJRVXNzU1VGQlNWUXNTVUZCU1Vnc1YwRkJWMGtzVFVGQldDeEhRVUZ2UWl4RFFVRnFReXhGUVVGdlEwUXNTMEZCU3l4RFFVRjZReXhGUVVFMFEwRXNSMEZCTlVNc1JVRkJhVVE3UVVGREwwTXNVVUZCU1VVc1QwRkJUMHdzVjBGQlYwY3NRMEZCV0N4RFFVRllPMEZCUTBFc1UwRkJTeXhKUVVGSlJ5eEhRVUZVTEVsQlFXZENSQ3hKUVVGb1FpeEZRVUZ6UWp0QlFVTndRaXhWUVVGSlJTeFRRVUZUUml4TFFVRkxReXhIUVVGTUxFTkJRV0k3UVVGRFFTeFZRVUZKUXl4WFFVRlhReXhUUVVGbUxFVkJRVEJDTzBGQlF6RkNMRlZCUVVsT0xFMUJRVTFKTEVkQlFVNHNUVUZCWlVVc1UwRkJia0lzUlVGQk9FSTdRVUZET1VJc1ZVRkJTVTBzVDBGQlQwTXNVMEZCVUN4RFFVRnBRbElzVFVGQmFrSXNRMEZCU2l4RlFVRTRRanRCUVVNMVFrd3NZMEZCVFVrc1IwRkJUaXhKUVVGaFF5eE5RVUZpTzBGQlEwUTdRVUZEUmp0QlFVTkdPenRCUVVWRUxFOUJRVXNzU1VGQlNVUXNTVUZCVkN4SlFVRm5Ra29zUzBGQmFFSXNSVUZCZFVJN1FVRkRja0lzVVVGQlNXTXNUVUZCVFN4SlFVRkpReXhOUVVGS0xFTkJRVmRZTEVsQlFWZ3NSVUZCWjBJc1IwRkJhRUlzUTBGQlZqdEJRVU5CVHl4VlFVRk5RU3hKUVVGSlN5eFBRVUZLTEVOQlFWbEdMRWRCUVZvc1JVRkJhVUprTEUxQlFVMUpMRWxCUVU0c1EwRkJha0lzUTBGQlRqdEJRVU5FTzBGQlEwUXNVMEZCVDA4c1IwRkJVRHRCUVVORU96dEJRVVZFTEZOQlFWTk5MRmxCUVZRc1EwRkJjMEpRTEUxQlFYUkNMRVZCUVRoQ08wRkJRelZDTEUxQlFVbFJMRlZCUVZVc1owWkJRV1E3UVVGRFFTeFhRVUZUUml4UFFVRlVMRU5CUVdsQ1J5eExRVUZxUWl4RlFVRjNRa01zUzBGQmVFSXNSVUZCSzBKRExFdEJRUzlDTEVWQlFYTkRReXhIUVVGMFF5eEZRVUV5UTBNc1QwRkJNME1zUlVGQmIwUTdRVUZEYkVRc1VVRkJTVU1zVTBGQlV5eEZRVUZpTzBGQlEwRXNVVUZCU1VNc1kwRkJZME1zVTBGQlUwd3NTMEZCVkN4RFFVRnNRanRCUVVOQkxGRkJRVWxOTEZsQlFWbEVMRk5CUVZOS0xFZEJRVlFzUTBGQmFFSTdRVUZEUVN4UlFVRkpSeXhaUVVGWlJ5eExRVUZhTEVsQlFYRkNSQ3hWUVVGVlF5eExRVUZ1UXl4RlFVRXdRenRCUVVONFEwTXNZMEZCVVVNc1MwRkJVaXhEUVVGakxHOUZRVUZrTzBGQlEwUTdRVUZEUkN4VFFVRkxMRWxCUVVrM1FpeEpRVUZKZDBJc1YwRkJZaXhGUVVFd1FuaENMRWxCUVVrd1FpeFRRVUU1UWl4RlFVRjVReXhGUVVGRk1VSXNRMEZCTTBNc1JVRkJPRU03UVVGRE5VTjFRaXhuUWtGQlZVUXNVVUZCVVZBc1QwRkJVaXhEUVVGblFpeEpRVUZKUkN4TlFVRktMRTlCUVdWTExFdEJRV1lzVVVGQmVVSXNSMEZCZWtJc1EwRkJhRUlzUlVGQkswTnVRaXhEUVVFdlF5eERRVUZXTzBGQlEwUTdRVUZEUkN4WFFVRlBkVUlzVFVGQlVEdEJRVU5FTzBGQlEwUXNVMEZCVDJRc1QwRkJUMDBzVDBGQlVDeERRVUZsUlN4UFFVRm1MRVZCUVhkQ1JpeFBRVUY0UWl4RFFVRlFPMEZCUTBRN08wRkJSVVFzVTBGQlUyVXNZVUZCVkN4RFFVRjFRbkpDTEUxQlFYWkNMRVZCUVN0Q08wRkJRemRDTEZOQlFVOUJMRTlCUVU5TkxFOUJRVkFzUTBGQlpTeFpRVUZtTEVWQlFUWkNMRk5CUVRkQ0xFTkJRVkE3UVVGRFJEczdTVUZGYjBKblFpeFZPMEZCUTI1Q096czdRVUZIUVN4elFrRkJXVU1zVFVGQldpeEZRVUZ2UWp0QlFVRkJPenRCUVVOc1FpeFRRVUZMUXl4UFFVRk1MRWRCUVdWRUxFMUJRV1k3TzBGQlJVRTdRVUZEUVN4VFFVRkxSU3hWUVVGTUxFZEJRV3RDTEVWQlFXeENPMEZCUTBFc1UwRkJTME1zVFVGQlRDeEhRVUZqTEVWQlFXUTdPMEZCUlVFc1UwRkJTME1zWlVGQlREdEJRVU5FT3pzN096UkNRVVZSTzBGQlExQXNWMEZCUzBZc1ZVRkJUQ3hIUVVGclFpeEZRVUZzUWp0QlFVTkJMRmRCUVV0RExFMUJRVXdzUjBGQll5eEZRVUZrTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TWtKQmMwSlBSU3hKTEVWQlFVMDdRVUZCUVN4VlFVTk1ReXhKUVVSTExFZEJRMjlDUkN4SlFVUndRaXhEUVVOTVF5eEpRVVJMTzBGQlFVRXNWVUZEUTNoRExFOUJSRVFzUjBGRGIwSjFReXhKUVVSd1FpeERRVU5EZGtNc1QwRkVSRHRCUVVGQkxGVkJRMVY1UXl4TFFVUldMRWRCUTI5Q1JpeEpRVVJ3UWl4RFFVTlZSU3hMUVVSV096dEJRVUZCTEdsQ1FVVlZRU3hUUVVGVFJpeEpRVVp1UWp0QlFVRkJMRlZCUlV4SExFbEJSa3NzVVVGRlRFRXNTVUZHU3p0QlFVRkJMRlZCUlVORExFbEJSa1FzVVVGRlEwRXNTVUZHUkRzN1FVRkhXQ3hWUVVGSkxFdEJRVXRRTEZWQlFVd3NRMEZCWjBKSkxFbEJRV2hDTEVOQlFVb3NSVUZCTWtJN1FVRkRla0k3UVVGRFFUdEJRVU5FT3p0QlFVVkVMRlZCUVVsSkxFdEJRVXNzUlVGQlJTOURMRTFCUVZnN08wRkJSVUU3UVVGRFFTeFZRVUZKWjBRc1UwRkJVeXhEUVVGaU8wRkJRMEVzVjBGQlN5eEpRVUZKTTBNc1NVRkJTU3hEUVVGaUxFVkJRV2RDUVN4SlFVRkpSaXhSUVVGUlJ5eE5RVUUxUWl4RlFVRnZReXhGUVVGRlJDeERRVUYwUXl4RlFVRjVRenRCUVVOMlF5eFpRVUZKUnl4TlFVRk5UQ3hSUVVGUlJTeERRVUZTTEVOQlFWWTdRVUZEUVN4WlFVRkpORU1zVFVGQlRTeERRVUZXT3p0QlFVVkJMRmxCUVVsNlF5eEpRVUZKTUVNc1NVRkJTaXhMUVVGaExGRkJRV3BDTEVWQlFUSkNPMEZCUTNwQ0xHTkJRVWxETEZGQlFWRXpReXhKUVVGSk1rTXNTMEZCU2l4SlFVRmhMRVZCUVhwQ08wRkJRMEV6UXl4alFVRkpORU1zUjBGQlNpeEhRVUZWUkN4TlFVRk5MRU5CUVU0c1MwRkJXU3hEUVVGMFFqdEJRVU5CTTBNc1kwRkJTVFpETEVkQlFVb3NSMEZCVlVZc1RVRkJUU3hEUVVGT0xFdEJRVmtzUTBGQmRFSTdRVUZEUVVZc1owSkJRVTFMTEV0QlFVdERMRWxCUVV3c1EwRkJWVVFzUzBGQlMwVXNTVUZCVEN4RFFVRlZhRVFzU1VGQlNUWkRMRWRCUVVvc1IwRkJWVGRETEVsQlFVazBReXhIUVVGNFFpeERRVUZXTEVOQlFVNDdPMEZCUlVFMVF5eGpRVUZKYVVRc1NVRkJTaXhIUVVGWExGVkJRVlZETEV0QlFWWXNSVUZCYVVJN1FVRkRNVUlzYlVKQlFWRkJMRkZCUVZFc1MwRkJTMDRzUjBGQlpDeEpRVUZ6UWl4TFFVRkxUeXhQUVVGc1F6dEJRVU5FTEZkQlJsVXNRMEZGVkVNc1NVRkdVeXhEUVVWS2NFUXNSMEZHU1N4RFFVRllPMEZCUjBRc1UwRlVSQ3hOUVZOUE8wRkJRVVU3UVVGRFVFRXNZMEZCU1dsRUxFbEJRVW9zUjBGQlZ5eFZRVUZWUXl4TFFVRldMRVZCUVdsQ08wRkJRekZDTEdkQ1FVRkpRU3hMUVVGS0xFVkJRVmM3UVVGRFZDeHhRa0ZCVHl4TFFVRkxMRXRCUVV0RExFOUJRV3BDTzBGQlEwUTdRVUZEUkN4dFFrRkJUeXhEUVVGUU8wRkJRMFFzVjBGTVZTeERRVXRVUXl4SlFVeFRMRU5CUzBwd1JDeEhRVXhKTEVOQlFWZzdRVUZOUkRzN1FVRkZSSGRETEd0Q1FVRlZReXhIUVVGV08wRkJRMEY2UXl4WlFVRkpiVVFzVDBGQlNpeEhRVUZqV0N4TlFVRmtPMEZCUTBRN08wRkJSVVFzVlVGQlNXRXNWMEZCVjI1Q0xFdEJRVXR0UWl4UlFVRk1MRWxCUVdsQ0xFVkJRV2hET3p0QlFVVkJMRlZCUVVsdVFpeExRVUZMYjBJc1VVRkJWQ3hGUVVGdFFqdEJRVU5xUWl4aFFVRkxMRWxCUVVsNlJDeExRVUZKTEVOQlFXSXNSVUZCWjBKQkxFdEJRVWx4UXl4TFFVRkxiMElzVVVGQlRDeERRVUZqZUVRc1RVRkJiRU1zUlVGQk1FTkVMRWxCUVRGRExFVkJRU3RETzBGQlF6ZERkMFFzYlVKQlFWTnNSQ3hKUVVGVUxFTkJRV01yUWl4TFFVRkxiMElzVVVGQlRDeERRVUZqZWtRc1JVRkJaQ3hEUVVGa08wRkJRMFE3UVVGRFJqdEJRVU5FTEZWQlFVbHhReXhMUVVGTGNVSXNUVUZCVkN4RlFVRnBRanRCUVVObUxHRkJRVXNzU1VGQlNURkVMRTFCUVVrc1EwRkJZaXhGUVVGblFrRXNUVUZCU1hGRExFdEJRVXR4UWl4TlFVRk1MRU5CUVZsNlJDeE5RVUZvUXl4RlFVRjNRMFFzUzBGQmVFTXNSVUZCTmtNN1FVRkRNME1zWTBGQlNVWXNWMEZCVlhWRExFdEJRVXR4UWl4TlFVRk1MRU5CUVZreFJDeEhRVUZhTEVWQlFXVkdMRTlCUVRkQ08wRkJRMEVzWTBGQlNUWkVMRlZCUVZWMFFpeExRVUZMY1VJc1RVRkJUQ3hEUVVGWk1VUXNSMEZCV2l4RlFVRmxNa1FzVDBGQk4wSTdRVUZEUVN4bFFVRkxMRWxCUVVsRExFbEJRVWtzUTBGQllpeEZRVUZuUWtFc1NVRkJTVVFzVVVGQlVURkVMRTFCUVRWQ0xFVkJRVzlETWtRc1IwRkJjRU1zUlVGQmVVTTdRVUZEZGtOS0xIRkNRVUZUYkVRc1NVRkJWQ3hEUVVGak8wRkJRMXBTTEN0Q1FVUlpPMEZCUlZwM1F5eHZRa0ZCVFhGQ0xGRkJRVkZETEVOQlFWSXNSVUZCVjNSQ0xFbEJSa3c3UVVGSFdrOHNiMEpCUVUxakxGRkJRVkZETEVOQlFWSXNSVUZCVjJZN1FVRklUQ3hoUVVGa08wRkJTMFE3UVVGRFJqdEJRVU5HT3p0QlFVVkVPMEZCUTBFc1YwRkJTMWdzVlVGQlRDeERRVUZuUWtrc1NVRkJhRUlzU1VGQmQwSTdRVUZEZEVKSkxHTkJSSE5DTzBGQlJYUkNTaXhyUWtGR2MwSTdRVUZIZEVKRkxHdENRVWh6UWp0QlFVbDBRa01zYTBKQlNuTkNPMEZCUzNSQ00wTXNkMEpCVEhOQ08wRkJUWFJDSzBRc2IwSkJRVmw0UWl4TFFVRkxkMElzVlVGT1N6dEJRVTkwUWt3c01FSkJVSE5DTzBGQlVYUkNUU3h2UWtGQldYcENMRXRCUVV0NVFqdEJRVkpMTEU5QlFYaENPMEZCVlVRN096dG5RMEZGVjNoQ0xFa3NSVUZCVFR0QlFVTm9RaXhoUVVGUExFdEJRVXRLTEZWQlFVd3NRMEZCWjBKSkxFbEJRV2hDTEVOQlFWQTdRVUZEUkRzN1FVRkZSRHM3T3pzN096czdLMEpCUzFkQkxFa3NSVUZCVFR0QlFVTm1MR0ZCUVU4c1MwRkJTMG9zVlVGQlRDeERRVUZuUWtrc1NVRkJhRUlzVFVGQk1FSnFReXhUUVVGcVF6dEJRVU5FT3p0QlFVZEVPenM3T3pzN096SkNRVWxQYVVNc1NTeEZRVUZOZWtNc1ZTeEZRVUZaTzBGQlEzWkNMRlZCUVVsclJTeFBRVUZQTEV0QlFVczNRaXhWUVVGTUxFTkJRV2RDU1N4SlFVRm9RaXhEUVVGWU8wRkJRMEVzVlVGQlNUQkNMRTFCUVUwc1EwRkJWanRCUVVOQkxGZEJRVXNzU1VGQlNXaEZMRWxCUVVrc1EwRkJZaXhGUVVGblFrRXNTVUZCU1N0RUxFdEJRVXRxUlN4UFFVRk1MRU5CUVdGSExFMUJRV3BETEVWQlFYbERMRVZCUVVWRUxFTkJRVE5ETEVWQlFUaERPMEZCUXpWRExGbEJRVWxwUlN4WFFVRlhSaXhMUVVGTGFrVXNUMEZCVEN4RFFVRmhSU3hEUVVGaUxFTkJRV1k3TzBGQlJVRXNXVUZCU1hGRUxGRkJRVkVzUzBGQlMyRXNkVUpCUVV3c1EwRkJOa0pFTEZOQlFWTXpRaXhKUVVGMFF5eEZRVUUwUTNwRExGVkJRVFZETEVOQlFWbzdRVUZEUVN4WlFVRkpkMFFzVlVGQlZXaEVMRk5CUVdRc1JVRkJlVUk3UVVGRGRrSTdRVUZEUkRzN1FVRkZSREpFTEdWQlFVOURMRk5CUVZOaUxFbEJRVlFzUTBGQlkwTXNTMEZCWkN4RFFVRlFPMEZCUTBRN08wRkJSVVE3UVVGRFFUdEJRVU5CTEdGQlFVOVZMRXRCUVV0eVFpeEZRVUZNTEVkQlFWVXNSMEZCVml4SFFVRm5Rbk5DTEVkQlFYWkNPMEZCUTBRN08wRkJSVVE3T3pzN096czdPeXRDUVV0WE1VSXNTU3hGUVVGTmVrTXNWU3hGUVVGWmMwVXNVeXhGUVVGWE8wRkJRM1JETEZWQlFVbElMRTFCUVUwc1MwRkJTMGtzVFVGQlRDeERRVUZaT1VJc1NVRkJXaXhGUVVGclFucERMRlZCUVd4Q0xFTkJRVlk3UVVGRFFTeFZRVUZKZDBVc1ZVRkJWU3hMUVVGTGJFTXNUVUZCVEN4RFFVRlpOa0lzUjBGQldpeERRVUZrTzBGQlEwRXNWVUZCU1Vzc1QwRkJTaXhGUVVGaE8wRkJRMWdzWlVGQlQwRXNUMEZCVUR0QlFVTkVPenRCUVVWRU8wRkJRMEVzVlVGQlNVNHNUMEZCVHl4TFFVRkxOMElzVlVGQlRDeERRVUZuUWtrc1NVRkJhRUlzUTBGQldEdEJRVU5CTEZWQlFVbG5ReXhaUVVGWk1VVXNhVUpCUVdsQ1F5eFZRVUZxUWl4RFFVRm9RanRCUVVOQkxGVkJRVWt5UXl4UFFVRlBhRU1zYTBKQlFXdENkVVFzUzBGQlMzWkNMRWxCUVhaQ0xFVkJRVFpDTTBNc1ZVRkJOMElzUTBGQldEdEJRVU5CTWtNc1lVRkJUemhDTEZsQlFWbDBSQ3hoUVVGaGQwSXNTVUZCWWl4RFFVRnVRanRCUVVOQkxGVkJRVWtzUTBGQlF5eExRVUZMSzBJc1pVRkJWaXhGUVVFeVFqdEJRVU42UWk5Q0xHVkJRVTlXTEdOQlFXTlZMRWxCUVdRc1EwRkJVRHRCUVVORU96dEJRVVZFTEZWQlFVbERMRTlCUVU5cVF5eHJRa0ZCYTBKMVJDeExRVUZMZEVJc1NVRkJka0lzUlVGQk5rSTFReXhWUVVFM1FpeERRVUZZTzBGQlEwRTBReXhoUVVGUE5rSXNXVUZCV1hSRUxHRkJRV0Y1UWl4SlFVRmlMRU5CUVc1Q08wRkJRMEVzVlVGQlNTeERRVUZETEV0QlFVczRRaXhsUVVGV0xFVkJRVEpDTzBGQlEzcENPVUlzWlVGQlQxZ3NZMEZCWTFjc1NVRkJaQ3hEUVVGUU8wRkJRMFE3TzBGQlJVUTBRaXhuUWtGQlZTeEpRVUZKUnl4alFVRkpReXhQUVVGU0xFTkJRV2RDTEV0QlFVdDRReXhQUVVGeVFpeEZRVUU0UWp0QlFVTjBRMDhzYTBKQlJITkRPMEZCUlhSRFF6dEJRVVp6UXl4UFFVRTVRaXhEUVVGV08wRkJTVUVzVlVGQlNXbERMRk5CUVZOTUxGRkJRVkZOTEVsQlFWSXNSVUZCWWp0QlFVTkJMRlZCUVVsRUxFMUJRVW9zUlVGQldUdEJRVU5XTEZsQlFVbEZMRmxCUVZsd1F5eExRVUZMY1VNc1MwRkJUQ3hEUVVGWExFbEJRVmdzUTBGQmFFSTdRVUZEUVN4WlFVRkpReXhaUVVGWmNrTXNTMEZCUzI5RExFdEJRVXdzUTBGQlZ5eEpRVUZZTEVOQlFXaENPMEZCUTBFc1dVRkJTVVVzWlVGQlpVTXNUMEZCVDBNc1NVRkJVQ3hEUVVGWmNFWXNWVUZCV2l4RlFVRjNRa2tzVFVGQk0wTTdRVUZEUVhsRkxHVkJRVTlSTEU5QlFWQXNRMEZCWlN4bFFVRlBPMEZCUTNCQ0xHTkJRVWxETEU5QlFVOURMRWxCUVVsRUxFbEJRVW9zUjBGQlZ5eERRVUYwUWp0QlFVTkJMR05CUVVsRkxHRkJRV0ZFTEVsQlFVbEVMRWxCUVVvc1IwRkJWMG9zV1VGQk5VSTdPMEZCUlVFc1kwRkJTVThzVVVGQlVVWXNTVUZCU1haRExFbEJRVW9zUzBGQllTeEpRVUZpTEVkQlFXOUNLMElzVTBGQmNFSXNSMEZCWjBORkxGTkJRVFZETzBGQlEwRTdRVUZEUVN4alFVRkpVeXhUUVVGVFJDeE5RVUZOU0N4SlFVRk9MRU5CUVdJN08wRkJSVUVzWTBGQlNVc3NUMEZCVDBvc1NVRkJTVWtzU1VGQlNpd3lRa0ZCYVVOS0xFbEJRVWwyUXl4SlFVRnlReXhUUVVFMlEzVkRMRWxCUVVsTExFMUJRV3BFTEdGQlFTdEVTaXhWUVVFdlJDeGpRVUZyUmtRc1NVRkJTVTBzVDBGQmRFWXNZMEZCYzBkSUxFMUJRV3BJTzBGQlEwRkpMR0ZCUVVjNVJDeExRVUZJTEVOQlFWbHpReXhUUVVGYUxGZEJRVEpDY1VJc1NVRkJNMEk3UVVGRFJDeFRRVlpFTzBGQlYwUTdRVUZEUkN4WFFVRkxja1FzVFVGQlRDeERRVUZaTmtJc1IwRkJXaXhKUVVGdFFrc3NUMEZCYmtJN08wRkJSVUVzWVVGQlQwRXNUMEZCVUR0QlFVTkVPenM3TkVOQlJYZENMMElzU1N4RlFVRk5la01zVlN4RlFVRlpPMEZCUTNwRExGVkJRVWwzUkN4alFVRktPMEZCUTBFc1YwRkJTeXhKUVVGSmNrUXNTVUZCU1Vnc1YwRkJWMGtzVFVGQldDeEhRVUZ2UWl4RFFVRnFReXhGUVVGdlEwUXNTMEZCU3l4RFFVRjZReXhGUVVFMFEwRXNSMEZCTlVNc1JVRkJhVVE3UVVGREwwTnhSQ3huUWtGQlVYaEVMRmRCUVZkSExFTkJRVmdzUlVGQlkzTkRMRWxCUVdRc1EwRkJVanRCUVVOQkxGbEJRVWxsTEZWQlFWVm9SQ3hUUVVGa0xFVkJRWGxDTzBGQlEzWkNMR2xDUVVGUFowUXNTMEZCVUR0QlFVTkVPMEZCUTBZN1FVRkRSanM3TzNORFFVVnJRanRCUVVOcVFpeFZRVUZKZFVNc1MwRkJTeXhMUVVGTE0wUXNUMEZCVEN4RFFVRmhORVFzUjBGQmRFSTdRVUZEUVN4VlFVRkpReXhwUWtGQmFVSXNTMEZCY2tJN1FVRkRRU3hWUVVGSlJpeEhRVUZIUnl4M1FrRkJVQ3hGUVVGcFF6dEJRVU0zUWl4WlFVRkpReXhaUVVGWlNpeEhRVUZIUnl4M1FrRkJTQ3hEUVVFMFFrZ3NSMEZCUjBzc1lVRkJMMElzUlVGQk9FTk1MRWRCUVVkTkxGVkJRV3BFTEVOQlFXaENPMEZCUTBFc1dVRkJTVU1zV1VGQldWQXNSMEZCUjBjc2QwSkJRVWdzUTBGQk5FSklMRWRCUVVkUkxHVkJRUzlDTEVWQlFXZEVVaXhIUVVGSFRTeFZRVUZ1UkN4RFFVRm9RanRCUVVOQlNpeDVRa0ZCYTBKRkxHRkJRV0ZCTEZWQlFWVkxMRk5CUVZZc1IwRkJjMElzUTBGQmNFTXNTVUZEWkVZc1lVRkJZVUVzVlVGQlZVVXNVMEZCVml4SFFVRnpRaXhEUVVSMFF6dEJRVVZJTzBGQlEwUXNWVUZCU1N4RFFVRkRVQ3hqUVVGTUxFVkJRWEZDTzBGQlEyNUNTQ3hYUVVGSFZ5eE5RVUZJTEVOQlFWVXNTVUZCVmp0QlFVTkVPMEZCUTBRc1YwRkJTeTlDTEdWQlFVd3NSMEZCZFVKMVFpeGpRVUYyUWp0QlFVTkVPenM3T3pzN2EwSkJiRTlyUWk5RUxGVWlMQ0ptYVd4bElqb2ljSEp2WjNKaGJTMXNhV0l1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZMeUJEYjNCNWNtbG5hSFFnS0dNcElESXdNVGN0TWpBeE9DQllhV0Z0Wlc0Z1dXRnFhU0JUYjJaMGQyRnlaU0JEYnk0c0lFeDBaQzVjYmx4dWFXMXdiM0owSUdkbWVDQm1jbTl0SUNjdUxpOW5abmduTzF4dVhHNXNaWFFnWDNOb1pFbEVJRDBnTUR0Y2JseHVablZ1WTNScGIyNGdYMmRsYm1WeVlYUmxSR1ZtYVc1bGN5aGtaV1pwYm1WTWFYTjBLU0I3WEc0Z0lHeGxkQ0JrWldacGJtVnpJRDBnVzEwN1hHNGdJR3hsZENCallXTm9aU0E5SUh0OVhHNGdJR1p2Y2lBb2JHVjBJR2tnUFNCa1pXWnBibVZNYVhOMExteGxibWQwYUNBdElERTdJR2tnUGowZ01Ec2dhUzB0S1NCN1hHNGdJQ0FnYkdWMElHUmxabk1nUFNCa1pXWnBibVZNYVhOMFcybGRPMXh1SUNBZ0lHWnZjaUFvYkdWMElHUmxaaUJwYmlCa1pXWnpLU0I3WEc0Z0lDQWdJQ0JzWlhRZ2NtVnpkV3gwSUQwZ1pHVm1jMXRrWldaZE8xeHVJQ0FnSUNBZ2FXWWdLSEpsYzNWc2RDQTlQVDBnZFc1a1pXWnBibVZrS1NCamIyNTBhVzUxWlR0Y2JpQWdJQ0FnSUdsbUlDaGpZV05vWlZ0a1pXWmRJQ0U5UFNCMWJtUmxabWx1WldRcElHTnZiblJwYm5WbE8xeHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnlaWE4xYkhRZ0lUMDlJQ2R1ZFcxaVpYSW5LU0I3WEc0Z0lDQWdJQ0FnSUhKbGMzVnNkQ0E5SUhKbGMzVnNkQ0EvSURFZ09pQXdPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdZMkZqYUdWYlpHVm1YU0E5SUhKbGMzVnNkRHRjYmlBZ0lDQWdJR1JsWm1sdVpYTXVjSFZ6YUNoZ0kyUmxabWx1WlNBa2UyUmxabjBnSkh0eVpYTjFiSFI5WUNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhKbGRIVnliaUJrWldacGJtVnpMbXB2YVc0b0oxeGNiaWNwSUNzZ0oxeGNiaWM3WEc1OVhHNWNibVoxYm1OMGFXOXVJRjl5WlhCc1lXTmxUV0ZqY205T2RXMXpLSE4wY21sdVp5d2daR1ZtYVc1bFRHbHpkQ2tnZTF4dUlDQnNaWFFnWTJGamFHVWdQU0I3ZlR0Y2JpQWdiR1YwSUhSdGNDQTlJSE4wY21sdVp6dGNibHh1SUNCbWIzSWdLR3hsZENCcElEMGdaR1ZtYVc1bFRHbHpkQzVzWlc1bmRHZ2dMU0F4T3lCcElENDlJREE3SUdrdExTa2dlMXh1SUNBZ0lHeGxkQ0JrWldaeklEMGdaR1ZtYVc1bFRHbHpkRnRwWFR0Y2JpQWdJQ0JtYjNJZ0tHeGxkQ0JrWldZZ2FXNGdaR1ZtY3lrZ2UxeHVJQ0FnSUNBZ2JHVjBJSEpsYzNWc2RDQTlJR1JsWm5OYlpHVm1YVHRjYmlBZ0lDQWdJR2xtSUNoeVpYTjFiSFFnUFQwOUlIVnVaR1ZtYVc1bFpDa2dZMjl1ZEdsdWRXVTdYRzRnSUNBZ0lDQnBaaUFvWTJGamFHVmJaR1ZtWFNBaFBUMGdkVzVrWldacGJtVmtLU0JqYjI1MGFXNTFaVHRjYmlBZ0lDQWdJR2xtSUNoT2RXMWlaWEl1YVhOSmJuUmxaMlZ5S0hKbGMzVnNkQ2twSUh0Y2JpQWdJQ0FnSUNBZ1kyRmphR1ZiWkdWbVhTQTlJSEpsYzNWc2REdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQm1iM0lnS0d4bGRDQmtaV1lnYVc0Z1kyRmphR1VwSUh0Y2JpQWdJQ0JzWlhRZ2NtVm5JRDBnYm1WM0lGSmxaMFY0Y0Noa1pXWXNJQ2RuSnlrN1hHNGdJQ0FnZEcxd0lEMGdkRzF3TG5KbGNHeGhZMlVvY21WbkxDQmpZV05vWlZ0a1pXWmRLVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdkRzF3TzF4dWZWeHVYRzVtZFc1amRHbHZiaUJmZFc1eWIyeHNURzl2Y0hNb2MzUnlhVzVuS1NCN1hHNGdJR3hsZENCd1lYUjBaWEp1SUQwZ0x5TndjbUZuYldFZ1ptOXlJQ2hjWEhjcktTQnBiaUJ5WVc1blpWeGNLRnhjY3lvb1hGeGtLeWxjWEhNcUxGeGNjeW9vWEZ4a0t5bGNYSE1xWEZ3cEtGdGNYSE5jWEZOZEt6OHBJM0J5WVdkdFlTQmxibVJHYjNJdlp6dGNiaUFnWm5WdVkzUnBiMjRnY21Wd2JHRmpaU2h0WVhSamFDd2dhVzVrWlhnc0lHSmxaMmx1TENCbGJtUXNJSE51YVhCd1pYUXBJSHRjYmlBZ0lDQnNaWFFnZFc1eWIyeHNJRDBnSnljN1hHNGdJQ0FnYkdWMElIQmhjbk5sWkVKbFoybHVJRDBnY0dGeWMyVkpiblFvWW1WbmFXNHBPMXh1SUNBZ0lHeGxkQ0J3WVhKelpXUkZibVFnUFNCd1lYSnpaVWx1ZENobGJtUXBPMXh1SUNBZ0lHbG1JQ2h3WVhKelpXUkNaV2RwYmk1cGMwNWhUaUI4ZkNCd1lYSnpaV1JGYm1RdWFYTk9ZVTRwSUh0Y2JpQWdJQ0FnSUdOdmJuTnZiR1V1WlhKeWIzSW9KMVZ1Y205c2JDQkdiM0lnVEc5dmNITWdSWEp5YjNJNklHSmxaMmx1SUdGdVpDQmxibVFnYjJZZ2NtRnVaMlVnYlhWemRDQmlaU0JoYmlCcGJuUWdiblZ0TGljcE8xeHVJQ0FnSUgxY2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ2NHRnljMlZrUW1WbmFXNDdJR2tnUENCd1lYSnpaV1JGYm1RN0lDc3JhU2tnZTF4dUlDQWdJQ0FnZFc1eWIyeHNJQ3M5SUhOdWFYQndaWFF1Y21Wd2JHRmpaU2h1WlhjZ1VtVm5SWGh3S0dCN0pIdHBibVJsZUgxOVlDd2dKMmNuS1N3Z2FTazdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUIxYm5KdmJHdzdYRzRnSUgxY2JpQWdjbVYwZFhKdUlITjBjbWx1Wnk1eVpYQnNZV05sS0hCaGRIUmxjbTRzSUhKbGNHeGhZMlVwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJmY21Wd2JHRmpaVWhwWjJod0tITjBjbWx1WnlrZ2UxeHVJQ0J5WlhSMWNtNGdjM1J5YVc1bkxuSmxjR3hoWTJVb0wxeGNZbWhwWjJod1hGeGlMMmNzSUNkdFpXUnBkVzF3SnlrN1hHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklGQnliMmR5WVcxTWFXSWdlMXh1SUNBdktpcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0blpuZ3VSR1YyYVdObGZTQmtaWFpwWTJWY2JpQWdJQ292WEc0Z0lHTnZibk4wY25WamRHOXlLR1JsZG1salpTa2dlMXh1SUNBZ0lIUm9hWE11WDJSbGRtbGpaU0E5SUdSbGRtbGpaVHRjYmx4dUlDQWdJQzh2SUhKbFoybHpkR1Z5SUhSbGJYQnNZWFJsYzF4dUlDQWdJSFJvYVhNdVgzUmxiWEJzWVhSbGN5QTlJSHQ5TzF4dUlDQWdJSFJvYVhNdVgyTmhZMmhsSUQwZ2UzMDdYRzVjYmlBZ0lDQjBhR2x6TGw5amFHVmphMUJ5WldOcGMybHZiaWdwTzF4dUlDQjlYRzVjYmlBZ1kyeGxZWElnS0NrZ2UxeHVJQ0FnSUhSb2FYTXVYM1JsYlhCc1lYUmxjeUE5SUh0OU8xeHVJQ0FnSUhSb2FYTXVYMk5oWTJobElEMGdlMzA3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUc1aGJXVmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhabGNuUmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdaeVlXZGNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1JiWFgwZ1pHVm1hVzVsYzF4dUlDQWdLbHh1SUNBZ0tpQkFaWGhoYlhCc1pUcGNiaUFnSUNvZ0lDQXZMeUIwYUdseklHOWlhbVZqZENCcGN5QmhkWFJ2TFdkbGJtVnlZWFJsWkNCbWNtOXRJSGx2ZFhJZ1lXTjBkV0ZzSUhOb1lXUmxjbk5jYmlBZ0lDb2dJQ0JzWlhRZ2NISnZaM0poYlNBOUlIdGNiaUFnSUNvZ0lDQWdJRzVoYldVNklDZG1iMjlpWVhJbkxGeHVJQ0FnS2lBZ0lDQWdkbVZ5ZERvZ2RtVnlkRlJ0Y0d3c1hHNGdJQ0FxSUNBZ0lDQm1jbUZuT2lCbWNtRm5WRzF3YkN4Y2JpQWdJQ29nSUNBZ0lHUmxabWx1WlhNNklGdGNiaUFnSUNvZ0lDQWdJQ0FnZXlCdVlXMWxPaUFuYzJoaFpHOTNKeXdnZEhsd1pUb2dKMkp2YjJ4bFlXNG5JSDBzWEc0Z0lDQXFJQ0FnSUNBZ0lIc2dibUZ0WlRvZ0oyeHBaMmgwUTI5MWJuUW5MQ0IwZVhCbE9pQW5iblZ0WW1WeUp5d2diV2x1T2lBeExDQnRZWGc2SURRZ2ZWeHVJQ0FnS2lBZ0lDQWdYU3hjYmlBZ0lDb2dJQ0FnSUdGMGRISnBZblYwWlhNNklGdDdJRzVoYldVNklDZGhYM0J2YzJsMGFXOXVKeXdnZEhsd1pUb2dKM1psWXpNbklIMWRMRnh1SUNBZ0tpQWdJQ0FnZFc1cFptOXliWE02SUZ0N0lHNWhiV1U2SUNkamIyeHZjaWNzSUhSNWNHVTZJQ2QyWldNMEp5QjlYU3hjYmlBZ0lDb2dJQ0FnSUdWNGRHVnVjMmx2Ym5NNklGc25SMHhmVDBWVFgzTjBZVzVrWVhKa1gyUmxjbWwyWVhScGRtVnpKMTBzWEc0Z0lDQXFJQ0FnZlR0Y2JpQWdJQ29nSUNCd2NtOW5jbUZ0VEdsaUxtUmxabWx1WlNod2NtOW5jbUZ0S1R0Y2JpQWdJQ292WEc0Z0lHUmxabWx1WlNod2NtOW5LU0I3WEc0Z0lDQWdiR1YwSUhzZ2JtRnRaU3dnWkdWbWFXNWxjeXdnWjJ4emJERWdmU0E5SUhCeWIyYzdYRzRnSUNBZ2JHVjBJSHNnZG1WeWRDd2dabkpoWnlCOUlEMGdaMnh6YkRFZ2ZId2djSEp2Wnp0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVmZEdWdGNHeGhkR1Z6VzI1aGJXVmRLU0I3WEc0Z0lDQWdJQ0F2THlCamIyNXpiMnhsTG5kaGNtNG9ZRVpoYVd4bFpDQjBieUJrWldacGJtVWdjMmhoWkdWeUlDUjdibUZ0WlgwNklHRnNjbVZoWkhrZ1pYaHBjM1J6TG1BcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmx4dUlDQWdJR3hsZENCcFpDQTlJQ3NyWDNOb1pFbEVPMXh1WEc0Z0lDQWdMeThnWTJGc1kzVnNZWFJsSUc5d2RHbHZiaUJ0WVhOcklHOW1abk5sZEZ4dUlDQWdJR3hsZENCdlptWnpaWFFnUFNBd08xeHVJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z1pHVm1hVzVsY3k1c1pXNW5kR2c3SUNzcmFTa2dlMXh1SUNBZ0lDQWdiR1YwSUdSbFppQTlJR1JsWm1sdVpYTmJhVjA3WEc0Z0lDQWdJQ0JzWlhRZ1kyNTBJRDBnTVR0Y2JseHVJQ0FnSUNBZ2FXWWdLR1JsWmk1MGVYQmxJRDA5UFNBbmJuVnRZbVZ5SnlrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnY21GdVoyVWdQU0JrWldZdWNtRnVaMlVnZkh3Z1cxMDdYRzRnSUNBZ0lDQWdJR1JsWmk1dGFXNGdQU0J5WVc1blpWc3dYU0I4ZkNBd08xeHVJQ0FnSUNBZ0lDQmtaV1l1YldGNElEMGdjbUZ1WjJWYk1WMGdmSHdnTkR0Y2JpQWdJQ0FnSUNBZ1kyNTBJRDBnVFdGMGFDNWpaV2xzS0UxaGRHZ3ViRzluTWloa1pXWXViV0Y0SUMwZ1pHVm1MbTFwYmlrcE8xeHVYRzRnSUNBZ0lDQWdJR1JsWmk1ZmJXRndJRDBnWm5WdVkzUnBiMjRnS0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNoMllXeDFaU0F0SUhSb2FYTXViV2x1S1NBOFBDQjBhR2x6TGw5dlptWnpaWFE3WEc0Z0lDQWdJQ0FnSUgwdVltbHVaQ2hrWldZcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUhzZ0x5OGdZbTl2YkdWaGJseHVJQ0FnSUNBZ0lDQmtaV1l1WDIxaGNDQTlJR1oxYm1OMGFXOXVJQ2gyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJREVnUER3Z2RHaHBjeTVmYjJabWMyVjBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z01EdGNiaUFnSUNBZ0lDQWdmUzVpYVc1a0tHUmxaaWs3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUc5bVpuTmxkQ0FyUFNCamJuUTdYRzRnSUNBZ0lDQmtaV1l1WDI5bVpuTmxkQ0E5SUc5bVpuTmxkRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnNaWFFnZFc1cFptOXliWE1nUFNCd2NtOW5MblZ1YVdadmNtMXpJSHg4SUZ0ZE8xeHVYRzRnSUNBZ2FXWWdLSEJ5YjJjdWMyRnRjR3hsY25NcElIdGNiaUFnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2djSEp2Wnk1ellXMXdiR1Z5Y3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0IxYm1sbWIzSnRjeTV3ZFhOb0tIQnliMmN1YzJGdGNHeGxjbk5iYVYwcFhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNod2NtOW5MbUpzYjJOcmN5a2dlMXh1SUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0J3Y205bkxtSnNiMk5yY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ1pHVm1hVzVsY3lBOUlIQnliMmN1WW14dlkydHpXMmxkTG1SbFptbHVaWE03WEc0Z0lDQWdJQ0FnSUd4bGRDQnRaVzFpWlhKeklEMGdjSEp2Wnk1aWJHOWphM05iYVYwdWJXVnRZbVZ5Y3p0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FpQTlJREE3SUdvZ1BDQnRaVzFpWlhKekxteGxibWQwYURzZ2Fpc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RXNXBabTl5YlhNdWNIVnphQ2g3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaV1pwYm1WekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYm1GdFpUb2diV1Z0WW1WeWMxdHFYUzV1WVcxbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2diV1Z0WW1WeWMxdHFYUzUwZVhCbExGeHVJQ0FnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCemRHOXlaU0JwZEZ4dUlDQWdJSFJvYVhNdVgzUmxiWEJzWVhSbGMxdHVZVzFsWFNBOUlIdGNiaUFnSUNBZ0lHbGtMRnh1SUNBZ0lDQWdibUZ0WlN4Y2JpQWdJQ0FnSUhabGNuUXNYRzRnSUNBZ0lDQm1jbUZuTEZ4dUlDQWdJQ0FnWkdWbWFXNWxjeXhjYmlBZ0lDQWdJR0YwZEhKcFluVjBaWE02SUhCeWIyY3VZWFIwY21saWRYUmxjeXhjYmlBZ0lDQWdJSFZ1YVdadmNtMXpMRnh1SUNBZ0lDQWdaWGgwWlc1emFXOXVjem9nY0hKdlp5NWxlSFJsYm5OcGIyNXpYRzRnSUNBZ2ZUdGNiaUFnZlZ4dVhHNGdJR2RsZEZSbGJYQnNZWFJsS0c1aGJXVXBJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmZEdWdGNHeGhkR1Z6VzI1aGJXVmRPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVSdlpYTWdkR2hwY3lCc2FXSnlZWEo1SUdoaGN5QjBhR1VnYzNCbFkybG1hV1ZrSUhCeWIyZHlZVzAvWEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnVZVzFsWEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRpYjI5c1pXRnVmVnh1SUNBZ0tpOWNiaUFnYUdGelVISnZaM0poYlNodVlXMWxLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDNSbGJYQnNZWFJsYzF0dVlXMWxYU0FoUFQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0I5WEc1Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJRzVoYldWY2JpQWdJQ29nUUhCaGNtRnRJSHRCY25KaGVYMGdaR1ZtYVc1bFRHbHpkRnh1SUNBZ0tpOWNiaUFnWjJWMFMyVjVLRzVoYldVc0lHUmxabWx1WlV4cGMzUXBJSHRjYmlBZ0lDQnNaWFFnZEcxd2JDQTlJSFJvYVhNdVgzUmxiWEJzWVhSbGMxdHVZVzFsWFR0Y2JpQWdJQ0JzWlhRZ2EyVjVJRDBnTUR0Y2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUhSdGNHd3VaR1ZtYVc1bGN5NXNaVzVuZEdnN0lDc3JhU2tnZTF4dUlDQWdJQ0FnYkdWMElIUnRjR3hFWldaeklEMGdkRzF3YkM1a1pXWnBibVZ6VzJsZE8xeHVJQ0FnSUNBZ1hHNGdJQ0FnSUNCc1pYUWdkbUZzZFdVZ1BTQjBhR2x6TGw5blpYUldZV3gxWlVaeWIyMUVaV1pwYm1WTWFYTjBLSFJ0Y0d4RVpXWnpMbTVoYldVc0lHUmxabWx1WlV4cGMzUXBPMXh1SUNBZ0lDQWdhV1lnS0haaGJIVmxJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdZMjl1ZEdsdWRXVTdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR3RsZVNCOFBTQjBiWEJzUkdWbWN5NWZiV0Z3S0haaGJIVmxLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJ5WlhSMWNtNGdhMlY1SUR3OElEZ2dmQ0IwYlhCc0xtbGtPMXh1SUNBZ0lDOHZJR3RsZVNCdWRXMWlaWElnYldGNVltVWdZbWxuWjJWeUlIUm9ZVzRnTXpJZ1ltbDBMQ0J1WldWa0lIVnpaU0J6ZEhKcGJtY2dkRzhnYzNSdmNtVWdkbUZzZFdVdVhHNGdJQ0FnY21WMGRYSnVJSFJ0Y0d3dWFXUWdLeUFuT2ljZ0t5QnJaWGs3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUc1aGJXVmNiaUFnSUNvZ1FIQmhjbUZ0SUh0YlQySnFaV04wWFgwZ1pHVm1hVzVsVEdsemRGeHVJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnWlhKeVVISmxabWw0WEc0Z0lDQXFMMXh1SUNCblpYUlFjbTluY21GdEtHNWhiV1VzSUdSbFptbHVaVXhwYzNRc0lHVnljbEJ5WldacGVDa2dlMXh1SUNBZ0lHeGxkQ0JyWlhrZ1BTQjBhR2x6TG1kbGRFdGxlU2h1WVcxbExDQmtaV1pwYm1WTWFYTjBLVHRjYmlBZ0lDQnNaWFFnY0hKdlozSmhiU0E5SUhSb2FYTXVYMk5oWTJobFcydGxlVjA3WEc0Z0lDQWdhV1lnS0hCeWIyZHlZVzBwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ3Y205bmNtRnRPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJR2RsZENCMFpXMXdiR0YwWlZ4dUlDQWdJR3hsZENCMGJYQnNJRDBnZEdocGN5NWZkR1Z0Y0d4aGRHVnpXMjVoYldWZE8xeHVJQ0FnSUd4bGRDQmpkWE4wYjIxRVpXWWdQU0JmWjJWdVpYSmhkR1ZFWldacGJtVnpLR1JsWm1sdVpVeHBjM1FwTzF4dUlDQWdJR3hsZENCMlpYSjBJRDBnWDNKbGNHeGhZMlZOWVdOeWIwNTFiWE1vZEcxd2JDNTJaWEowTENCa1pXWnBibVZNYVhOMEtUdGNiaUFnSUNCMlpYSjBJRDBnWTNWemRHOXRSR1ZtSUNzZ1gzVnVjbTlzYkV4dmIzQnpLSFpsY25RcE8xeHVJQ0FnSUdsbUlDZ2hkR2hwY3k1ZmFHbG5hSEJUZFhCd2IzSjBaV1FwSUh0Y2JpQWdJQ0FnSUhabGNuUWdQU0JmY21Wd2JHRmpaVWhwWjJod0tIWmxjblFwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR3hsZENCbWNtRm5JRDBnWDNKbGNHeGhZMlZOWVdOeWIwNTFiWE1vZEcxd2JDNW1jbUZuTENCa1pXWnBibVZNYVhOMEtUdGNiaUFnSUNCbWNtRm5JRDBnWTNWemRHOXRSR1ZtSUNzZ1gzVnVjbTlzYkV4dmIzQnpLR1p5WVdjcE8xeHVJQ0FnSUdsbUlDZ2hkR2hwY3k1ZmFHbG5hSEJUZFhCd2IzSjBaV1FwSUh0Y2JpQWdJQ0FnSUdaeVlXY2dQU0JmY21Wd2JHRmpaVWhwWjJod0tHWnlZV2NwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEJ5YjJkeVlXMGdQU0J1WlhjZ1oyWjRMbEJ5YjJkeVlXMG9kR2hwY3k1ZlpHVjJhV05sTENCN1hHNGdJQ0FnSUNCMlpYSjBMRnh1SUNBZ0lDQWdabkpoWjF4dUlDQWdJSDBwTzF4dUlDQWdJR3hsZENCbGNuSnZjbk1nUFNCd2NtOW5jbUZ0TG14cGJtc29LVHRjYmlBZ0lDQnBaaUFvWlhKeWIzSnpLU0I3WEc0Z0lDQWdJQ0JzWlhRZ2RtVnlkRXhwYm1WeklEMGdkbVZ5ZEM1emNHeHBkQ2duWEZ4dUp5azdYRzRnSUNBZ0lDQnNaWFFnWm5KaFoweHBibVZ6SUQwZ1puSmhaeTV6Y0d4cGRDZ25YRnh1SnlrN1hHNGdJQ0FnSUNCc1pYUWdaR1ZtYVc1bFRHVnVaM1JvSUQwZ1QySnFaV04wTG10bGVYTW9aR1ZtYVc1bFRHbHpkQ2t1YkdWdVozUm9PMXh1SUNBZ0lDQWdaWEp5YjNKekxtWnZja1ZoWTJnb1pYSnlJRDArSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJR3hwYm1VZ1BTQmxjbkl1YkdsdVpTQXRJREU3WEc0Z0lDQWdJQ0FnSUd4bGRDQnZjbWxuYVc1TWFXNWxJRDBnWlhKeUxteHBibVVnTFNCa1pXWnBibVZNWlc1bmRHZzdYRzVjYmlBZ0lDQWdJQ0FnYkdWMElHeHBibVZ6SUQwZ1pYSnlMblI1Y0dVZ1BUMDlJQ2QyY3ljZ1B5QjJaWEowVEdsdVpYTWdPaUJtY21GblRHbHVaWE03WEc0Z0lDQWdJQ0FnSUM4dklHeGxkQ0J6YjNWeVkyVWdQU0JnSUNSN2JHbHVaWE5iYkdsdVpTMHhYWDFjWEc0K0pIdHNhVzVsYzF0c2FXNWxYWDFjWEc0Z0pIdHNhVzVsYzF0c2FXNWxLekZkZldBN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J6YjNWeVkyVWdQU0JzYVc1bGMxdHNhVzVsWFR0Y2JseHVJQ0FnSUNBZ0lDQnNaWFFnYVc1bWJ5QTlJR1Z5Y2k1cGJtWnZJSHg4SUdCR1lXbHNaV1FnZEc4Z1kyOXRjR2xzWlNBa2UyVnljaTUwZVhCbGZTQWtlMlZ5Y2k1bWFXeGxTVVI5SUNoc2JpQWtlMjl5YVdkcGJreHBibVY5S1RvZ1hGeHVJQ1I3WlhKeUxtMWxjM05oWjJWOU9pQmNYRzRnSUNSN2MyOTFjbU5sZldBN1hHNGdJQ0FnSUNBZ0lHTmpMbVZ5Y205eUtHQWtlMlZ5Y2xCeVpXWnBlSDBnT2lBa2UybHVabTk5WUNrN1hHNGdJQ0FnSUNCOUtWeHVJQ0FnSUgxY2JpQWdJQ0IwYUdsekxsOWpZV05vWlZ0clpYbGRJRDBnY0hKdlozSmhiVHRjYmx4dUlDQWdJSEpsZEhWeWJpQndjbTluY21GdE8xeHVJQ0I5WEc1Y2JpQWdYMmRsZEZaaGJIVmxSbkp2YlVSbFptbHVaVXhwYzNRZ0tHNWhiV1VzSUdSbFptbHVaVXhwYzNRcElIdGNiaUFnSUNCc1pYUWdkbUZzZFdVN1hHNGdJQ0FnWm05eUlDaHNaWFFnYVNBOUlHUmxabWx1WlV4cGMzUXViR1Z1WjNSb0lDMGdNVHNnYVNBK1BTQXdPeUJwTFMwcElIdGNiaUFnSUNBZ0lIWmhiSFZsSUQwZ1pHVm1hVzVsVEdsemRGdHBYVnR1WVcxbFhUdGNiaUFnSUNBZ0lHbG1JQ2gyWVd4MVpTQWhQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMllXeDFaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JmWTJobFkydFFjbVZqYVhOcGIyNGdLQ2tnZTF4dUlDQWdJR3hsZENCbmJDQTlJSFJvYVhNdVgyUmxkbWxqWlM1ZloydzdYRzRnSUNBZ2JHVjBJR2hwWjJod1UzVndjRzl5ZEdWa0lEMGdabUZzYzJVN1hHNGdJQ0FnYVdZZ0tHZHNMbWRsZEZOb1lXUmxjbEJ5WldOcGMybHZia1p2Y20xaGRDa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2RtVnlkRWhwWjJod0lEMGdaMnd1WjJWMFUyaGhaR1Z5VUhKbFkybHphVzl1Um05eWJXRjBLR2RzTGxaRlVsUkZXRjlUU0VGRVJWSXNJR2RzTGtoSlIwaGZSa3hQUVZRcE8xeHVJQ0FnSUNBZ0lDQnNaWFFnWm5KaFowaHBaMmh3SUQwZ1oyd3VaMlYwVTJoaFpHVnlVSEpsWTJsemFXOXVSbTl5YldGMEtHZHNMa1pTUVVkTlJVNVVYMU5JUVVSRlVpd2daMnd1U0VsSFNGOUdURTlCVkNrN1hHNGdJQ0FnSUNBZ0lHaHBaMmh3VTNWd2NHOXlkR1ZrSUQwZ0tIWmxjblJJYVdkb2NDQW1KaUIyWlhKMFNHbG5hSEF1Y0hKbFkybHphVzl1SUQ0Z01Da2dKaVpjYmlBZ0lDQWdJQ0FnSUNBb1puSmhaMGhwWjJod0lDWW1JR1p5WVdkSWFXZG9jQzV3Y21WamFYTnBiMjRnUGlBd0tUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tDRm9hV2RvY0ZOMWNIQnZjblJsWkNrZ2UxeHVJQ0FnSUNBZ1kyTXVkMkZ5YmtsRUtEa3hNRElwTzF4dUlDQWdJSDFjYmlBZ0lDQjBhR2x6TGw5b2FXZG9jRk4xY0hCdmNuUmxaQ0E5SUdocFoyaHdVM1Z3Y0c5eWRHVmtPMXh1SUNCOVhHNTlYRzRpWFgwPSJdfQ==