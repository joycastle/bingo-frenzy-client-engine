(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/core/view.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _vmath = require('../../core/vmath');
        var _enums = require('../enums');
        var _enums2 = _interopRequireDefault(_enums);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var _m4_tmp = _vmath.mat4.create();
        var _genID = 0;
        var View = function () {
            function View() {
                _classCallCheck(this, View);
                this._id = _genID++;
                this._priority = 0;
                this._rect = {
                    x: 0,
                    y: 0,
                    w: 1,
                    h: 1
                };
                this._color = _vmath.color4.create(0.3, 0.3, 0.3, 1);
                this._depth = 1;
                this._stencil = 0;
                this._clearFlags = _enums2.default.CLEAR_COLOR | _enums2.default.CLEAR_DEPTH;
                this._clearModel = null;
                this._matView = _vmath.mat4.create();
                this._matProj = _vmath.mat4.create();
                this._matViewProj = _vmath.mat4.create();
                this._matInvViewProj = _vmath.mat4.create();
                this._stages = [];
                this._cullingByID = false;
                this._framebuffer = null;
                this._shadowLight = null;
                this._cullingMask = 4294967295;
            }
            _createClass(View, [
                {
                    key: 'getForward',
                    value: function getForward(out) {
                        var m = this._matView.m;
                        return _vmath.vec3.set(out, -m[2], -m[6], -m[10]);
                    }
                },
                {
                    key: 'getPosition',
                    value: function getPosition(out) {
                        _vmath.mat4.invert(_m4_tmp, this._matView);
                        return _vmath.mat4.getTranslation(out, _m4_tmp);
                    }
                }
            ]);
            return View;
        }();
        exports.default = View;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,