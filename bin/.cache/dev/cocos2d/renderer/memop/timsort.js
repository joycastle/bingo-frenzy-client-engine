(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/memop/timsort.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        exports.default = function (array, lo, hi, compare) {
            if (!Array.isArray(array)) {
                throw new TypeError('Can only sort arrays');
            }
            if (lo === undefined) {
                lo = 0;
            }
            if (hi === undefined) {
                hi = array.length;
            }
            if (compare === undefined) {
                compare = alphabeticalCompare;
            }
            var remaining = hi - lo;
            if (remaining < 2) {
                return;
            }
            var runLength = 0;
            if (remaining < DEFAULT_MIN_MERGE) {
                runLength = makeAscendingRun(array, lo, hi, compare);
                binaryInsertionSort(array, lo, hi, lo + runLength, compare);
                return;
            }
            var ts = new TimSort(array, compare);
            var minRun = minRunLength(remaining);
            do {
                runLength = makeAscendingRun(array, lo, hi, compare);
                if (runLength < minRun) {
                    var force = remaining;
                    if (force > minRun) {
                        force = minRun;
                    }
                    binaryInsertionSort(array, lo, lo + force, lo + runLength, compare);
                    runLength = force;
                }
                ts.pushRun(lo, runLength);
                ts.mergeRuns();
                remaining -= runLength;
                lo += runLength;
            } while (remaining !== 0);
            ts.forceMergeRuns();
        };
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var DEFAULT_MIN_MERGE = 32;
        var DEFAULT_MIN_GALLOPING = 7;
        var DEFAULT_TMP_STORAGE_LENGTH = 256;
        var POWERS_OF_TEN = [
            1,
            10,
            100,
            1000,
            10000,
            100000,
            1000000,
            10000000,
            100000000,
            1000000000
        ];
        function log10(x) {
            if (x < 100000) {
                if (x < 100) {
                    return x < 10 ? 0 : 1;
                }
                if (x < 10000) {
                    return x < 1000 ? 2 : 3;
                }
                return 4;
            }
            if (x < 10000000) {
                return x < 1000000 ? 5 : 6;
            }
            if (x < 1000000000) {
                return x < 100000000 ? 7 : 8;
            }
            return 9;
        }
        function alphabeticalCompare(a, b) {
            if (a === b) {
                return 0;
            }
            if (~~a === a && ~~b === b) {
                if (a === 0 || b === 0) {
                    return a < b ? -1 : 1;
                }
                if (a < 0 || b < 0) {
                    if (b >= 0) {
                        return -1;
                    }
                    if (a >= 0) {
                        return 1;
                    }
                    a = -a;
                    b = -b;
                }
                var al = log10(a);
                var bl = log10(b);
                var t = 0;
                if (al < bl) {
                    a *= POWERS_OF_TEN[bl - al - 1];
                    b /= 10;
                    t = -1;
                } else if (al > bl) {
                    b *= POWERS_OF_TEN[al - bl - 1];
                    a /= 10;
                    t = 1;
                }
                if (a === b) {
                    return t;
                }
                return a < b ? -1 : 1;
            }
            var aStr = String(a);
            var bStr = String(b);
            if (aStr === bStr) {
                return 0;
            }
            return aStr < bStr ? -1 : 1;
        }
        function minRunLength(n) {
            var r = 0;
            while (n >= DEFAULT_MIN_MERGE) {
                r |= n & 1;
                n >>= 1;
            }
            return n + r;
        }
        function makeAscendingRun(array, lo, hi, compare) {
            var runHi = lo + 1;
            if (runHi === hi) {
                return 1;
            }
            if (compare(array[runHi++], array[lo]) < 0) {
                while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {
                    runHi++;
                }
                reverseRun(array, lo, runHi);
            } else {
                while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {
                    runHi++;
                }
            }
            return runHi - lo;
        }
        function reverseRun(array, lo, hi) {
            hi--;
            while (lo < hi) {
                var t = array[lo];
                array[lo++] = array[hi];
                array[hi--] = t;
            }
        }
        function binaryInsertionSort(array, lo, hi, start, compare) {
            if (start === lo) {
                start++;
            }
            for (; start < hi; start++) {
                var pivot = array[start];
                var left = lo;
                var right = start;
                while (left < right) {
                    var mid = left + right >>> 1;
                    if (compare(pivot, array[mid]) < 0) {
                        right = mid;
                    } else {
                        left = mid + 1;
                    }
                }
                var n = start - left;
                switch (n) {
                case 3:
                    array[left + 3] = array[left + 2];
                case 2:
                    array[left + 2] = array[left + 1];
                case 1:
                    array[left + 1] = array[left];
                    break;
                default:
                    while (n > 0) {
                        array[left + n] = array[left + n - 1];
                        n--;
                    }
                }
                array[left] = pivot;
            }
        }
        function gallopLeft(value, array, start, length, hint, compare) {
            var lastOffset = 0;
            var maxOffset = 0;
            var offset = 1;
            if (compare(value, array[start + hint]) > 0) {
                maxOffset = length - hint;
                while (offset < maxOffset && compare(value, array[start + hint + offset]) > 0) {
                    lastOffset = offset;
                    offset = (offset << 1) + 1;
                    if (offset <= 0) {
                        offset = maxOffset;
                    }
                }
                if (offset > maxOffset) {
                    offset = maxOffset;
                }
                lastOffset += hint;
                offset += hint;
            } else {
                maxOffset = hint + 1;
                while (offset < maxOffset && compare(value, array[start + hint - offset]) <= 0) {
                    lastOffset = offset;
                    offset = (offset << 1) + 1;
                    if (offset <= 0) {
                        offset = maxOffset;
                    }
                }
                if (offset > maxOffset) {
                    offset = maxOffset;
                }
                var tmp = lastOffset;
                lastOffset = hint - offset;
                offset = hint - tmp;
            }
            lastOffset++;
            while (lastOffset < offset) {
                var m = lastOffset + (offset - lastOffset >>> 1);
                if (compare(value, array[start + m]) > 0) {
                    lastOffset = m + 1;
                } else {
                    offset = m;
                }
            }
            return offset;
        }
        function gallopRight(value, array, start, length, hint, compare) {
            var lastOffset = 0;
            var maxOffset = 0;
            var offset = 1;
            if (compare(value, array[start + hint]) < 0) {
                maxOffset = hint + 1;
                while (offset < maxOffset && compare(value, array[start + hint - offset]) < 0) {
                    lastOffset = offset;
                    offset = (offset << 1) + 1;
                    if (offset <= 0) {
                        offset = maxOffset;
                    }
                }
                if (offset > maxOffset) {
                    offset = maxOffset;
                }
                var tmp = lastOffset;
                lastOffset = hint - offset;
                offset = hint - tmp;
            } else {
                maxOffset = length - hint;
                while (offset < maxOffset && compare(value, array[start + hint + offset]) >= 0) {
                    lastOffset = offset;
                    offset = (offset << 1) + 1;
                    if (offset <= 0) {
                        offset = maxOffset;
                    }
                }
                if (offset > maxOffset) {
                    offset = maxOffset;
                }
                lastOffset += hint;
                offset += hint;
            }
            lastOffset++;
            while (lastOffset < offset) {
                var m = lastOffset + (offset - lastOffset >>> 1);
                if (compare(value, array[start + m]) < 0) {
                    offset = m;
                } else {
                    lastOffset = m + 1;
                }
            }
            return offset;
        }
        var TimSort = function () {
            function TimSort(array, compare) {
                _classCallCheck(this, TimSort);
                this.array = array;
                this.compare = compare;
                this.minGallop = DEFAULT_MIN_GALLOPING;
                this.length = array.length;
                this.tmpStorageLength = DEFAULT_TMP_STORAGE_LENGTH;
                if (this.length < 2 * DEFAULT_TMP_STORAGE_LENGTH) {
                    this.tmpStorageLength = this.length >>> 1;
                }
                this.tmp = new Array(this.tmpStorageLength);
                this.stackLength = this.length < 120 ? 5 : this.length < 1542 ? 10 : this.length < 119151 ? 19 : 40;
                this.runStart = new Array(this.stackLength);
                this.runLength = new Array(this.stackLength);
                this.stackSize = 0;
            }
            _createClass(TimSort, [
                {
                    key: 'pushRun',
                    value: function pushRun(runStart, runLength) {
                        this.runStart[this.stackSize] = runStart;
                        this.runLength[this.stackSize] = runLength;
                        this.stackSize += 1;
                    }
                },
                {
                    key: 'mergeRuns',
                    value: function mergeRuns() {
                        while (this.stackSize > 1) {
                            var n = this.stackSize - 2;
                            if (n >= 1 && this.runLength[n - 1] <= this.runLength[n] + this.runLength[n + 1] || n >= 2 && this.runLength[n - 2] <= this.runLength[n] + this.runLength[n - 1]) {
                                if (this.runLength[n - 1] < this.runLength[n + 1]) {
                                    n--;
                                }
                            } else if (this.runLength[n] > this.runLength[n + 1]) {
                                break;
                            }
                            this.mergeAt(n);
                        }
                    }
                },
                {
                    key: 'forceMergeRuns',
                    value: function forceMergeRuns() {
                        while (this.stackSize > 1) {
                            var n = this.stackSize - 2;
                            if (n > 0 && this.runLength[n - 1] < this.runLength[n + 1]) {
                                n--;
                            }
                            this.mergeAt(n);
                        }
                    }
                },
                {
                    key: 'mergeAt',
                    value: function mergeAt(i) {
                        var compare = this.compare;
                        var array = this.array;
                        var start1 = this.runStart[i];
                        var length1 = this.runLength[i];
                        var start2 = this.runStart[i + 1];
                        var length2 = this.runLength[i + 1];
                        this.runLength[i] = length1 + length2;
                        if (i === this.stackSize - 3) {
                            this.runStart[i + 1] = this.runStart[i + 2];
                            this.runLength[i + 1] = this.runLength[i + 2];
                        }
                        this.stackSize--;
                        var k = gallopRight(array[start2], array, start1, length1, 0, compare);
                        start1 += k;
                        length1 -= k;
                        if (length1 === 0) {
                            return;
                        }
                        length2 = gallopLeft(array[start1 + length1 - 1], array, start2, length2, length2 - 1, compare);
                        if (length2 === 0) {
                            return;
                        }
                        if (length1 <= length2) {
                            this.mergeLow(start1, length1, start2, length2);
                        } else {
                            this.mergeHigh(start1, length1, start2, length2);
                        }
                    }
                },
                {
                    key: 'mergeLow',
                    value: function mergeLow(start1, length1, start2, length2) {
                        var compare = this.compare;
                        var array = this.array;
                        var tmp = this.tmp;
                        var i = 0;
                        for (i = 0; i < length1; i++) {
                            tmp[i] = array[start1 + i];
                        }
                        var cursor1 = 0;
                        var cursor2 = start2;
                        var dest = start1;
                        array[dest++] = array[cursor2++];
                        if (--length2 === 0) {
                            for (i = 0; i < length1; i++) {
                                array[dest + i] = tmp[cursor1 + i];
                            }
                            return;
                        }
                        if (length1 === 1) {
                            for (i = 0; i < length2; i++) {
                                array[dest + i] = array[cursor2 + i];
                            }
                            array[dest + length2] = tmp[cursor1];
                            return;
                        }
                        var minGallop = this.minGallop;
                        while (true) {
                            var count1 = 0;
                            var count2 = 0;
                            var exit = false;
                            do {
                                if (compare(array[cursor2], tmp[cursor1]) < 0) {
                                    array[dest++] = array[cursor2++];
                                    count2++;
                                    count1 = 0;
                                    if (--length2 === 0) {
                                        exit = true;
                                        break;
                                    }
                                } else {
                                    array[dest++] = tmp[cursor1++];
                                    count1++;
                                    count2 = 0;
                                    if (--length1 === 1) {
                                        exit = true;
                                        break;
                                    }
                                }
                            } while ((count1 | count2) < minGallop);
                            if (exit) {
                                break;
                            }
                            do {
                                count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare);
                                if (count1 !== 0) {
                                    for (i = 0; i < count1; i++) {
                                        array[dest + i] = tmp[cursor1 + i];
                                    }
                                    dest += count1;
                                    cursor1 += count1;
                                    length1 -= count1;
                                    if (length1 <= 1) {
                                        exit = true;
                                        break;
                                    }
                                }
                                array[dest++] = array[cursor2++];
                                if (--length2 === 0) {
                                    exit = true;
                                    break;
                                }
                                count2 = gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare);
                                if (count2 !== 0) {
                                    for (i = 0; i < count2; i++) {
                                        array[dest + i] = array[cursor2 + i];
                                    }
                                    dest += count2;
                                    cursor2 += count2;
                                    length2 -= count2;
                                    if (length2 === 0) {
                                        exit = true;
                                        break;
                                    }
                                }
                                array[dest++] = tmp[cursor1++];
                                if (--length1 === 1) {
                                    exit = true;
                                    break;
                                }
                                minGallop--;
                            } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);
                            if (exit) {
                                break;
                            }
                            if (minGallop < 0) {
                                minGallop = 0;
                            }
                            minGallop += 2;
                        }
                        this.minGallop = minGallop;
                        if (minGallop < 1) {
                            this.minGallop = 1;
                        }
                        if (length1 === 1) {
                            for (i = 0; i < length2; i++) {
                                array[dest + i] = array[cursor2 + i];
                            }
                            array[dest + length2] = tmp[cursor1];
                        } else if (length1 === 0) {
                            throw new Error('mergeLow preconditions were not respected');
                        } else {
                            for (i = 0; i < length1; i++) {
                                array[dest + i] = tmp[cursor1 + i];
                            }
                        }
                    }
                },
                {
                    key: 'mergeHigh',
                    value: function mergeHigh(start1, length1, start2, length2) {
                        var compare = this.compare;
                        var array = this.array;
                        var tmp = this.tmp;
                        var i = 0;
                        for (i = 0; i < length2; i++) {
                            tmp[i] = array[start2 + i];
                        }
                        var cursor1 = start1 + length1 - 1;
                        var cursor2 = length2 - 1;
                        var dest = start2 + length2 - 1;
                        var customCursor = 0;
                        var customDest = 0;
                        array[dest--] = array[cursor1--];
                        if (--length1 === 0) {
                            customCursor = dest - (length2 - 1);
                            for (i = 0; i < length2; i++) {
                                array[customCursor + i] = tmp[i];
                            }
                            return;
                        }
                        if (length2 === 1) {
                            dest -= length1;
                            cursor1 -= length1;
                            customDest = dest + 1;
                            customCursor = cursor1 + 1;
                            for (i = length1 - 1; i >= 0; i--) {
                                array[customDest + i] = array[customCursor + i];
                            }
                            array[dest] = tmp[cursor2];
                            return;
                        }
                        var minGallop = this.minGallop;
                        while (true) {
                            var count1 = 0;
                            var count2 = 0;
                            var exit = false;
                            do {
                                if (compare(tmp[cursor2], array[cursor1]) < 0) {
                                    array[dest--] = array[cursor1--];
                                    count1++;
                                    count2 = 0;
                                    if (--length1 === 0) {
                                        exit = true;
                                        break;
                                    }
                                } else {
                                    array[dest--] = tmp[cursor2--];
                                    count2++;
                                    count1 = 0;
                                    if (--length2 === 1) {
                                        exit = true;
                                        break;
                                    }
                                }
                            } while ((count1 | count2) < minGallop);
                            if (exit) {
                                break;
                            }
                            do {
                                count1 = length1 - gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare);
                                if (count1 !== 0) {
                                    dest -= count1;
                                    cursor1 -= count1;
                                    length1 -= count1;
                                    customDest = dest + 1;
                                    customCursor = cursor1 + 1;
                                    for (i = count1 - 1; i >= 0; i--) {
                                        array[customDest + i] = array[customCursor + i];
                                    }
                                    if (length1 === 0) {
                                        exit = true;
                                        break;
                                    }
                                }
                                array[dest--] = tmp[cursor2--];
                                if (--length2 === 1) {
                                    exit = true;
                                    break;
                                }
                                count2 = length2 - gallopLeft(array[cursor1], tmp, 0, length2, length2 - 1, compare);
                                if (count2 !== 0) {
                                    dest -= count2;
                                    cursor2 -= count2;
                                    length2 -= count2;
                                    customDest = dest + 1;
                                    customCursor = cursor2 + 1;
                                    for (i = 0; i < count2; i++) {
                                        array[customDest + i] = tmp[customCursor + i];
                                    }
                                    if (length2 <= 1) {
                                        exit = true;
                                        break;
                                    }
                                }
                                array[dest--] = array[cursor1--];
                                if (--length1 === 0) {
                                    exit = true;
                                    break;
                                }
                                minGallop--;
                            } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);
                            if (exit) {
                                break;
                            }
                            if (minGallop < 0) {
                                minGallop = 0;
                            }
                            minGallop += 2;
                        }
                        this.minGallop = minGallop;
                        if (minGallop < 1) {
                            this.minGallop = 1;
                        }
                        if (length2 === 1) {
                            dest -= length1;
                            cursor1 -= length1;
                            customDest = dest + 1;
                            customCursor = cursor1 + 1;
                            for (i = length1 - 1; i >= 0; i--) {
                                array[customDest + i] = array[customCursor + i];
                            }
                            array[dest] = tmp[cursor2];
                        } else if (length2 === 0) {
                            throw new Error('mergeHigh preconditions were not respected');
                        } else {
                            customCursor = dest - (length2 - 1);
                            for (i = 0; i < length2; i++) {
                                array[customCursor + i] = tmp[i];
                            }
                        }
                    }
                }
            ]);
            return TimSort;
        }();
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRpbXNvcnQuanMiLCIvVXNlcnMvZ2FveWFuZy9Xb3JrU3BhY2Uvam95Y2FzdGxlL2JpbmdvL2NsaWVudC9iaW5nby9lbmdpbmUvY29jb3MyZC9yZW5kZXJlci9tZW1vcC90aW1zb3J0LmpzIl0sIm5hbWVzIjpbImFycmF5IiwiY29tcGFyZSIsIlR5cGVFcnJvciIsImxvIiwiaGkiLCJBcnJheSIsImlzQXJyYXkiLCJ1bmRlZmluZWQiLCJsZW5ndGgiLCJhbHBoYWJldGljYWxDb21wYXJlIiwicmVtYWluaW5nIiwicnVuTGVuZ3RoIiwiREVGQVVMVF9NSU5fTUVSR0UiLCJtYWtlQXNjZW5kaW5nUnVuIiwiYmluYXJ5SW5zZXJ0aW9uU29ydCIsInRzIiwiVGltU29ydCIsIm1pblJ1biIsIm1pblJ1bkxlbmd0aCIsImZvcmNlIiwicHVzaFJ1biIsIm1lcmdlUnVucyIsImZvcmNlTWVyZ2VSdW5zIiwiREVGQVVMVF9NSU5fR0FMTE9QSU5HIiwiREVGQVVMVF9UTVBfU1RPUkFHRV9MRU5HVEgiLCJQT1dFUlNfT0ZfVEVOIiwibG9nMTAiLCJ4IiwiYSIsImIiLCJhbCIsImJsIiwidCIsImFTdHIiLCJTdHJpbmciLCJiU3RyIiwibiIsInIiLCJydW5IaSIsInJldmVyc2VSdW4iLCJzdGFydCIsInBpdm90IiwibGVmdCIsInJpZ2h0IiwibWlkIiwiZ2FsbG9wTGVmdCIsInZhbHVlIiwiaGludCIsImxhc3RPZmZzZXQiLCJtYXhPZmZzZXQiLCJvZmZzZXQiLCJ0bXAiLCJtIiwiZ2FsbG9wUmlnaHQiLCJtaW5HYWxsb3AiLCJ0bXBTdG9yYWdlTGVuZ3RoIiwic3RhY2tMZW5ndGgiLCJydW5TdGFydCIsInN0YWNrU2l6ZSIsIm1lcmdlQXQiLCJpIiwic3RhcnQxIiwibGVuZ3RoMSIsInN0YXJ0MiIsImxlbmd0aDIiLCJrIiwibWVyZ2VMb3ciLCJtZXJnZUhpZ2giLCJjdXJzb3IxIiwiY3Vyc29yMiIsImRlc3QiLCJjb3VudDEiLCJjb3VudDIiLCJleGl0IiwiRXJyb3Ii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QUFBQSxJQUFLLENBQTNCLEVBQThCQSxDQUFBQSxFQUE5QixFQUFtQztBQUFBLGdDQUNqQzVELEtBQUFBLENBQU00RSxVQUFBQSxHQUFhaEIsQ0FBbkI1RCxJQUF3QkEsS0FBQUEsQ0FBTTJFLFlBQUFBLEdBQWVmLENBQXJCNUQsQ0FBeEJBLENBRGlDO0FBQUEsNkJBTmxCO0FBQUEsNEJBVWpCQSxLQUFBQSxDQUFNc0UsSUFBTnRFLElBQWNtRCxHQUFBQSxDQUFJa0IsT0FBSmxCLENBQWRuRCxDQVZpQjtBQUFBLHlCQUFuQixNQVlPLElBQUlnRSxPQUFBQSxLQUFZLENBQWhCLEVBQW1CO0FBQUEsNEJBQ3hCLE1BQU0sSUFBSVUsS0FBSixDQUFVLDRDQUFWLENBQU4sQ0FEd0I7QUFBQSx5QkFBbkIsTUFHQTtBQUFBLDRCQUNMQyxZQUFBQSxHQUFlTCxJQUFBQSxHQUFRTixDQUFBQSxPQUFBQSxHQUFVLENBQVZBLENBQXZCVyxDQURLO0FBQUEsNEJBRUwsS0FBS2YsQ0FBQUEsR0FBSSxDQUFULEVBQVlBLENBQUFBLEdBQUlJLE9BQWhCLEVBQXlCSixDQUFBQSxFQUF6QixFQUE4QjtBQUFBLGdDQUM1QjVELEtBQUFBLENBQU0yRSxZQUFBQSxHQUFlZixDQUFyQjVELElBQTBCbUQsR0FBQUEsQ0FBSVMsQ0FBSlQsQ0FBMUJuRCxDQUQ0QjtBQUFBLDZCQUZ6QjtBQUFBLHlCQXBLbUM7QUFBQTs7Ozs7NENBdUwxQztBQUFBO0lBR0YsSUFBQSxPQUFBLEVBQUE7QUFBQSx3REFBQTtBQUFBLEtBQUE7O1lBS3NCLFFBQUEsQ0FBQSxRQUFBLENBQUEsT0FBQSxFQUFBLFNBQUEsRUFBQSxRQUFBIiwiZmlsZSI6InRpbXNvcnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZWZlcmVuY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9temljY2FyZC9ub2RlLXRpbXNvcnRcblxuLyoqXG4gKiBEZWZhdWx0IG1pbmltdW0gc2l6ZSBvZiBhIHJ1bi5cbiAqL1xuY29uc3QgREVGQVVMVF9NSU5fTUVSR0UgPSAzMjtcblxuLyoqXG4gKiBNaW5pbXVtIG9yZGVyZWQgc3Vic2VxdWVjZSByZXF1aXJlZCB0byBkbyBnYWxsb3BpbmcuXG4gKi9cbmNvbnN0IERFRkFVTFRfTUlOX0dBTExPUElORyA9IDc7XG5cbi8qKlxuICogRGVmYXVsdCB0bXAgc3RvcmFnZSBsZW5ndGguIENhbiBpbmNyZWFzZSBkZXBlbmRpbmcgb24gdGhlIHNpemUgb2YgdGhlXG4gKiBzbWFsbGVzdCBydW4gdG8gbWVyZ2UuXG4gKi9cbmNvbnN0IERFRkFVTFRfVE1QX1NUT1JBR0VfTEVOR1RIID0gMjU2O1xuXG4vKipcbiAqIFByZS1jb21wdXRlZCBwb3dlcnMgb2YgMTAgZm9yIGVmZmljaWVudCBsZXhpY29ncmFwaGljIGNvbXBhcmlzb24gb2ZcbiAqIHNtYWxsIGludGVnZXJzLlxuICovXG5jb25zdCBQT1dFUlNfT0ZfVEVOID0gWzFlMCwgMWUxLCAxZTIsIDFlMywgMWU0LCAxZTUsIDFlNiwgMWU3LCAxZTgsIDFlOV1cblxuLyoqXG4gKiBFc3RpbWF0ZSB0aGUgbG9nYXJpdGhtIGJhc2UgMTAgb2YgYSBzbWFsbCBpbnRlZ2VyLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIGludGVnZXIgdG8gZXN0aW1hdGUgdGhlIGxvZ2FyaXRobSBvZi5cbiAqIEByZXR1cm4ge251bWJlcn0gLSBUaGUgZXN0aW1hdGVkIGxvZ2FyaXRobSBvZiB0aGUgaW50ZWdlci5cbiAqL1xuZnVuY3Rpb24gbG9nMTAoeCkge1xuICBpZiAoeCA8IDFlNSkge1xuICAgIGlmICh4IDwgMWUyKSB7XG4gICAgICByZXR1cm4geCA8IDFlMSA/IDAgOiAxO1xuICAgIH1cblxuICAgIGlmICh4IDwgMWU0KSB7XG4gICAgICByZXR1cm4geCA8IDFlMyA/IDIgOiAzO1xuICAgIH1cblxuICAgIHJldHVybiA0O1xuICB9XG5cbiAgaWYgKHggPCAxZTcpIHtcbiAgICByZXR1cm4geCA8IDFlNiA/IDUgOiA2O1xuICB9XG5cbiAgaWYgKHggPCAxZTkpIHtcbiAgICByZXR1cm4geCA8IDFlOCA/IDcgOiA4O1xuICB9XG5cbiAgcmV0dXJuIDk7XG59XG5cbi8qKlxuICogRGVmYXVsdCBhbHBoYWJldGljYWwgY29tcGFyaXNvbiBvZiBpdGVtcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R8bnVtYmVyfSBhIC0gRmlyc3QgZWxlbWVudCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fG51bWJlcn0gYiAtIFNlY29uZCBlbGVtZW50IHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IC0gQSBwb3NpdGl2ZSBudW1iZXIgaWYgYS50b1N0cmluZygpID4gYi50b1N0cmluZygpLCBhXG4gKiBuZWdhdGl2ZSBudW1iZXIgaWYgLnRvU3RyaW5nKCkgPCBiLnRvU3RyaW5nKCksIDAgb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBhbHBoYWJldGljYWxDb21wYXJlKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGlmICh+fmEgPT09IGEgJiYgfn5iID09PSBiKSB7XG4gICAgaWYgKGEgPT09IDAgfHwgYiA9PT0gMCkge1xuICAgICAgcmV0dXJuIGEgPCBiID8gLTEgOiAxO1xuICAgIH1cblxuICAgIGlmIChhIDwgMCB8fCBiIDwgMCkge1xuICAgICAgaWYgKGIgPj0gMCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG5cbiAgICAgIGlmIChhID49IDApIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG5cbiAgICAgIGEgPSAtYTtcbiAgICAgIGIgPSAtYjtcbiAgICB9XG5cbiAgICBjb25zdCBhbCA9IGxvZzEwKGEpO1xuICAgIGNvbnN0IGJsID0gbG9nMTAoYik7XG5cbiAgICBsZXQgdCA9IDA7XG5cbiAgICBpZiAoYWwgPCBibCkge1xuICAgICAgYSAqPSBQT1dFUlNfT0ZfVEVOW2JsIC0gYWwgLSAxXTtcbiAgICAgIGIgLz0gMTA7XG4gICAgICB0ID0gLTE7XG4gICAgfSBlbHNlIGlmIChhbCA+IGJsKSB7XG4gICAgICBiICo9IFBPV0VSU19PRl9URU5bYWwgLSBibCAtIDFdO1xuICAgICAgYSAvPSAxMDtcbiAgICAgIHQgPSAxO1xuICAgIH1cblxuICAgIGlmIChhID09PSBiKSB7XG4gICAgICByZXR1cm4gdDtcbiAgICB9XG5cbiAgICByZXR1cm4gYSA8IGIgPyAtMSA6IDE7XG4gIH1cblxuICBsZXQgYVN0ciA9IFN0cmluZyhhKTtcbiAgbGV0IGJTdHIgPSBTdHJpbmcoYik7XG5cbiAgaWYgKGFTdHIgPT09IGJTdHIpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHJldHVybiBhU3RyIDwgYlN0ciA/IC0xIDogMTtcbn1cblxuLyoqXG4gKiBDb21wdXRlIG1pbmltdW0gcnVuIGxlbmd0aCBmb3IgVGltU29ydFxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIC0gVGhlIHNpemUgb2YgdGhlIGFycmF5IHRvIHNvcnQuXG4gKi9cbmZ1bmN0aW9uIG1pblJ1bkxlbmd0aChuKSB7XG4gIGxldCByID0gMDtcblxuICB3aGlsZSAobiA+PSBERUZBVUxUX01JTl9NRVJHRSkge1xuICAgIHIgfD0gKG4gJiAxKTtcbiAgICBuID4+PSAxO1xuICB9XG5cbiAgcmV0dXJuIG4gKyByO1xufVxuXG4vKipcbiAqIENvdW50cyB0aGUgbGVuZ3RoIG9mIGEgbW9ub3RvbmljYWxseSBhc2NlbmRpbmcgb3Igc3RyaWN0bHkgbW9ub3RvbmljYWxseVxuICogZGVzY2VuZGluZyBzZXF1ZW5jZSAocnVuKSBzdGFydGluZyBhdCBhcnJheVtsb10gaW4gdGhlIHJhbmdlIFtsbywgaGkpLiBJZlxuICogdGhlIHJ1biBpcyBkZXNjZW5kaW5nIGl0IGlzIG1hZGUgYXNjZW5kaW5nLlxuICpcbiAqIEBwYXJhbSB7YXJyYXl9IGFycmF5IC0gVGhlIGFycmF5IHRvIHJldmVyc2UuXG4gKiBAcGFyYW0ge251bWJlcn0gbG8gLSBGaXJzdCBlbGVtZW50IGluIHRoZSByYW5nZSAoaW5jbHVzaXZlKS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBoaSAtIExhc3QgZWxlbWVudCBpbiB0aGUgcmFuZ2UuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb21wYXJlIC0gSXRlbSBjb21wYXJpc29uIGZ1bmN0aW9uLlxuICogQHJldHVybiB7bnVtYmVyfSAtIFRoZSBsZW5ndGggb2YgdGhlIHJ1bi5cbiAqL1xuZnVuY3Rpb24gbWFrZUFzY2VuZGluZ1J1bihhcnJheSwgbG8sIGhpLCBjb21wYXJlKSB7XG4gIGxldCBydW5IaSA9IGxvICsgMTtcblxuICBpZiAocnVuSGkgPT09IGhpKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICAvLyBEZXNjZW5kaW5nXG4gIGlmIChjb21wYXJlKGFycmF5W3J1bkhpKytdLCBhcnJheVtsb10pIDwgMCkge1xuICAgIHdoaWxlIChydW5IaSA8IGhpICYmIGNvbXBhcmUoYXJyYXlbcnVuSGldLCBhcnJheVtydW5IaSAtIDFdKSA8IDApIHtcbiAgICAgIHJ1bkhpKys7XG4gICAgfVxuXG4gICAgcmV2ZXJzZVJ1bihhcnJheSwgbG8sIHJ1bkhpKTtcbiAgICAvLyBBc2NlbmRpbmdcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAocnVuSGkgPCBoaSAmJiBjb21wYXJlKGFycmF5W3J1bkhpXSwgYXJyYXlbcnVuSGkgLSAxXSkgPj0gMCkge1xuICAgICAgcnVuSGkrKztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcnVuSGkgLSBsbztcbn1cblxuLyoqXG4gKiBSZXZlcnNlIGFuIGFycmF5IGluIHRoZSByYW5nZSBbbG8sIGhpKS5cbiAqXG4gKiBAcGFyYW0ge2FycmF5fSBhcnJheSAtIFRoZSBhcnJheSB0byByZXZlcnNlLlxuICogQHBhcmFtIHtudW1iZXJ9IGxvIC0gRmlyc3QgZWxlbWVudCBpbiB0aGUgcmFuZ2UgKGluY2x1c2l2ZSkuXG4gKiBAcGFyYW0ge251bWJlcn0gaGkgLSBMYXN0IGVsZW1lbnQgaW4gdGhlIHJhbmdlLlxuICovXG5mdW5jdGlvbiByZXZlcnNlUnVuKGFycmF5LCBsbywgaGkpIHtcbiAgaGktLTtcblxuICB3aGlsZSAobG8gPCBoaSkge1xuICAgIGxldCB0ID0gYXJyYXlbbG9dO1xuICAgIGFycmF5W2xvKytdID0gYXJyYXlbaGldO1xuICAgIGFycmF5W2hpLS1dID0gdDtcbiAgfVxufVxuXG4vKipcbiAqIFBlcmZvcm0gdGhlIGJpbmFyeSBzb3J0IG9mIHRoZSBhcnJheSBpbiB0aGUgcmFuZ2UgW2xvLCBoaSkgd2hlcmUgc3RhcnQgaXNcbiAqIHRoZSBmaXJzdCBlbGVtZW50IHBvc3NpYmx5IG91dCBvZiBvcmRlci5cbiAqXG4gKiBAcGFyYW0ge2FycmF5fSBhcnJheSAtIFRoZSBhcnJheSB0byBzb3J0LlxuICogQHBhcmFtIHtudW1iZXJ9IGxvIC0gRmlyc3QgZWxlbWVudCBpbiB0aGUgcmFuZ2UgKGluY2x1c2l2ZSkuXG4gKiBAcGFyYW0ge251bWJlcn0gaGkgLSBMYXN0IGVsZW1lbnQgaW4gdGhlIHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IC0gRmlyc3QgZWxlbWVudCBwb3NzaWJseSBvdXQgb2Ygb3JkZXIuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb21wYXJlIC0gSXRlbSBjb21wYXJpc29uIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiaW5hcnlJbnNlcnRpb25Tb3J0KGFycmF5LCBsbywgaGksIHN0YXJ0LCBjb21wYXJlKSB7XG4gIGlmIChzdGFydCA9PT0gbG8pIHtcbiAgICBzdGFydCsrO1xuICB9XG5cbiAgZm9yICg7IHN0YXJ0IDwgaGk7IHN0YXJ0KyspIHtcbiAgICBsZXQgcGl2b3QgPSBhcnJheVtzdGFydF07XG5cbiAgICAvLyBSYW5nZXMgb2YgdGhlIGFycmF5IHdoZXJlIHBpdm90IGJlbG9uZ3NcbiAgICBsZXQgbGVmdCA9IGxvO1xuICAgIGxldCByaWdodCA9IHN0YXJ0O1xuXG4gICAgLypcbiAgICAgKiAgIHBpdm90ID49IGFycmF5W2ldIGZvciBpIGluIFtsbywgbGVmdClcbiAgICAgKiAgIHBpdm90IDwgIGFycmF5W2ldIGZvciBpIGluICBpbiBbcmlnaHQsIHN0YXJ0KVxuICAgICAqL1xuICAgIHdoaWxlIChsZWZ0IDwgcmlnaHQpIHtcbiAgICAgIGxldCBtaWQgPSAobGVmdCArIHJpZ2h0KSA+Pj4gMTtcblxuICAgICAgaWYgKGNvbXBhcmUocGl2b3QsIGFycmF5W21pZF0pIDwgMCkge1xuICAgICAgICByaWdodCA9IG1pZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlZnQgPSBtaWQgKyAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qXG4gICAgICogTW92ZSBlbGVtZW50cyByaWdodCB0byBtYWtlIHJvb20gZm9yIHRoZSBwaXZvdC4gSWYgdGhlcmUgYXJlIGVsZW1lbnRzXG4gICAgICogZXF1YWwgdG8gcGl2b3QsIGxlZnQgcG9pbnRzIHRvIHRoZSBmaXJzdCBzbG90IGFmdGVyIHRoZW06IHRoaXMgaXMgYWxzb1xuICAgICAqIGEgcmVhc29uIGZvciB3aGljaCBUaW1Tb3J0IGlzIHN0YWJsZVxuICAgICAqL1xuICAgIGxldCBuID0gc3RhcnQgLSBsZWZ0O1xuICAgIC8vIFN3aXRjaCBpcyBqdXN0IGFuIG9wdGltaXphdGlvbiBmb3Igc21hbGwgYXJyYXlzXG4gICAgc3dpdGNoIChuKSB7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGFycmF5W2xlZnQgKyAzXSA9IGFycmF5W2xlZnQgKyAyXTtcbiAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgMjpcbiAgICAgICAgYXJyYXlbbGVmdCArIDJdID0gYXJyYXlbbGVmdCArIDFdO1xuICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSAxOlxuICAgICAgICBhcnJheVtsZWZ0ICsgMV0gPSBhcnJheVtsZWZ0XTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB3aGlsZSAobiA+IDApIHtcbiAgICAgICAgICBhcnJheVtsZWZ0ICsgbl0gPSBhcnJheVtsZWZ0ICsgbiAtIDFdO1xuICAgICAgICAgIG4tLTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFycmF5W2xlZnRdID0gcGl2b3Q7XG4gIH1cbn1cblxuLyoqXG4gKiBGaW5kIHRoZSBwb3NpdGlvbiBhdCB3aGljaCB0byBpbnNlcnQgYSB2YWx1ZSBpbiBhIHNvcnRlZCByYW5nZS4gSWYgdGhlIHJhbmdlXG4gKiBjb250YWlucyBlbGVtZW50cyBlcXVhbCB0byB0aGUgdmFsdWUgdGhlIGxlZnRtb3N0IGVsZW1lbnQgaW5kZXggaXMgcmV0dXJuZWRcbiAqIChmb3Igc3RhYmlsaXR5KS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBWYWx1ZSB0byBpbnNlcnQuXG4gKiBAcGFyYW0ge2FycmF5fSBhcnJheSAtIFRoZSBhcnJheSBpbiB3aGljaCB0byBpbnNlcnQgdmFsdWUuXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgLSBGaXJzdCBlbGVtZW50IGluIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggLSBMZW5ndGggb2YgdGhlIHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IGhpbnQgLSBUaGUgaW5kZXggYXQgd2hpY2ggdG8gYmVnaW4gdGhlIHNlYXJjaC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbXBhcmUgLSBJdGVtIGNvbXBhcmlzb24gZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtudW1iZXJ9IC0gVGhlIGluZGV4IHdoZXJlIHRvIGluc2VydCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2FsbG9wTGVmdCh2YWx1ZSwgYXJyYXksIHN0YXJ0LCBsZW5ndGgsIGhpbnQsIGNvbXBhcmUpIHtcbiAgbGV0IGxhc3RPZmZzZXQgPSAwO1xuICBsZXQgbWF4T2Zmc2V0ID0gMDtcbiAgbGV0IG9mZnNldCA9IDE7XG5cbiAgaWYgKGNvbXBhcmUodmFsdWUsIGFycmF5W3N0YXJ0ICsgaGludF0pID4gMCkge1xuICAgIG1heE9mZnNldCA9IGxlbmd0aCAtIGhpbnQ7XG5cbiAgICB3aGlsZSAob2Zmc2V0IDwgbWF4T2Zmc2V0ICYmIGNvbXBhcmUodmFsdWUsIGFycmF5W3N0YXJ0ICsgaGludCArIG9mZnNldF0pID4gMCkge1xuICAgICAgbGFzdE9mZnNldCA9IG9mZnNldDtcbiAgICAgIG9mZnNldCA9IChvZmZzZXQgPDwgMSkgKyAxO1xuXG4gICAgICBpZiAob2Zmc2V0IDw9IDApIHtcbiAgICAgICAgb2Zmc2V0ID0gbWF4T2Zmc2V0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvZmZzZXQgPiBtYXhPZmZzZXQpIHtcbiAgICAgIG9mZnNldCA9IG1heE9mZnNldDtcbiAgICB9XG5cbiAgICAvLyBNYWtlIG9mZnNldHMgcmVsYXRpdmUgdG8gc3RhcnRcbiAgICBsYXN0T2Zmc2V0ICs9IGhpbnQ7XG4gICAgb2Zmc2V0ICs9IGhpbnQ7XG5cbiAgICAvLyB2YWx1ZSA8PSBhcnJheVtzdGFydCArIGhpbnRdXG4gIH0gZWxzZSB7XG4gICAgbWF4T2Zmc2V0ID0gaGludCArIDE7XG4gICAgd2hpbGUgKG9mZnNldCA8IG1heE9mZnNldCAmJiBjb21wYXJlKHZhbHVlLCBhcnJheVtzdGFydCArIGhpbnQgLSBvZmZzZXRdKSA8PSAwKSB7XG4gICAgICBsYXN0T2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgb2Zmc2V0ID0gKG9mZnNldCA8PCAxKSArIDE7XG5cbiAgICAgIGlmIChvZmZzZXQgPD0gMCkge1xuICAgICAgICBvZmZzZXQgPSBtYXhPZmZzZXQ7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvZmZzZXQgPiBtYXhPZmZzZXQpIHtcbiAgICAgIG9mZnNldCA9IG1heE9mZnNldDtcbiAgICB9XG5cbiAgICAvLyBNYWtlIG9mZnNldHMgcmVsYXRpdmUgdG8gc3RhcnRcbiAgICBsZXQgdG1wID0gbGFzdE9mZnNldDtcbiAgICBsYXN0T2Zmc2V0ID0gaGludCAtIG9mZnNldDtcbiAgICBvZmZzZXQgPSBoaW50IC0gdG1wO1xuICB9XG5cbiAgLypcbiAgICogTm93IGFycmF5W3N0YXJ0K2xhc3RPZmZzZXRdIDwgdmFsdWUgPD0gYXJyYXlbc3RhcnQrb2Zmc2V0XSwgc28gdmFsdWVcbiAgICogYmVsb25ncyBzb21ld2hlcmUgaW4gdGhlIHJhbmdlIChzdGFydCArIGxhc3RPZmZzZXQsIHN0YXJ0ICsgb2Zmc2V0XS4gRG8gYVxuICAgKiBiaW5hcnkgc2VhcmNoLCB3aXRoIGludmFyaWFudCBhcnJheVtzdGFydCArIGxhc3RPZmZzZXQgLSAxXSA8IHZhbHVlIDw9XG4gICAqIGFycmF5W3N0YXJ0ICsgb2Zmc2V0XS5cbiAgICovXG4gIGxhc3RPZmZzZXQrKztcbiAgd2hpbGUgKGxhc3RPZmZzZXQgPCBvZmZzZXQpIHtcbiAgICBsZXQgbSA9IGxhc3RPZmZzZXQgKyAoKG9mZnNldCAtIGxhc3RPZmZzZXQpID4+PiAxKTtcblxuICAgIGlmIChjb21wYXJlKHZhbHVlLCBhcnJheVtzdGFydCArIG1dKSA+IDApIHtcbiAgICAgIGxhc3RPZmZzZXQgPSBtICsgMTtcblxuICAgIH0gZWxzZSB7XG4gICAgICBvZmZzZXQgPSBtO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb2Zmc2V0O1xufVxuXG4vKipcbiAqIEZpbmQgdGhlIHBvc2l0aW9uIGF0IHdoaWNoIHRvIGluc2VydCBhIHZhbHVlIGluIGEgc29ydGVkIHJhbmdlLiBJZiB0aGUgcmFuZ2VcbiAqIGNvbnRhaW5zIGVsZW1lbnRzIGVxdWFsIHRvIHRoZSB2YWx1ZSB0aGUgcmlnaHRtb3N0IGVsZW1lbnQgaW5kZXggaXMgcmV0dXJuZWRcbiAqIChmb3Igc3RhYmlsaXR5KS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBWYWx1ZSB0byBpbnNlcnQuXG4gKiBAcGFyYW0ge2FycmF5fSBhcnJheSAtIFRoZSBhcnJheSBpbiB3aGljaCB0byBpbnNlcnQgdmFsdWUuXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgLSBGaXJzdCBlbGVtZW50IGluIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggLSBMZW5ndGggb2YgdGhlIHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IGhpbnQgLSBUaGUgaW5kZXggYXQgd2hpY2ggdG8gYmVnaW4gdGhlIHNlYXJjaC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbXBhcmUgLSBJdGVtIGNvbXBhcmlzb24gZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtudW1iZXJ9IC0gVGhlIGluZGV4IHdoZXJlIHRvIGluc2VydCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2FsbG9wUmlnaHQodmFsdWUsIGFycmF5LCBzdGFydCwgbGVuZ3RoLCBoaW50LCBjb21wYXJlKSB7XG4gIGxldCBsYXN0T2Zmc2V0ID0gMDtcbiAgbGV0IG1heE9mZnNldCA9IDA7XG4gIGxldCBvZmZzZXQgPSAxO1xuXG4gIGlmIChjb21wYXJlKHZhbHVlLCBhcnJheVtzdGFydCArIGhpbnRdKSA8IDApIHtcbiAgICBtYXhPZmZzZXQgPSBoaW50ICsgMTtcblxuICAgIHdoaWxlIChvZmZzZXQgPCBtYXhPZmZzZXQgJiYgY29tcGFyZSh2YWx1ZSwgYXJyYXlbc3RhcnQgKyBoaW50IC0gb2Zmc2V0XSkgPCAwKSB7XG4gICAgICBsYXN0T2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgb2Zmc2V0ID0gKG9mZnNldCA8PCAxKSArIDE7XG5cbiAgICAgIGlmIChvZmZzZXQgPD0gMCkge1xuICAgICAgICBvZmZzZXQgPSBtYXhPZmZzZXQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9mZnNldCA+IG1heE9mZnNldCkge1xuICAgICAgb2Zmc2V0ID0gbWF4T2Zmc2V0O1xuICAgIH1cblxuICAgIC8vIE1ha2Ugb2Zmc2V0cyByZWxhdGl2ZSB0byBzdGFydFxuICAgIGxldCB0bXAgPSBsYXN0T2Zmc2V0O1xuICAgIGxhc3RPZmZzZXQgPSBoaW50IC0gb2Zmc2V0O1xuICAgIG9mZnNldCA9IGhpbnQgLSB0bXA7XG5cbiAgICAvLyB2YWx1ZSA+PSBhcnJheVtzdGFydCArIGhpbnRdXG4gIH0gZWxzZSB7XG4gICAgbWF4T2Zmc2V0ID0gbGVuZ3RoIC0gaGludDtcblxuICAgIHdoaWxlIChvZmZzZXQgPCBtYXhPZmZzZXQgJiYgY29tcGFyZSh2YWx1ZSwgYXJyYXlbc3RhcnQgKyBoaW50ICsgb2Zmc2V0XSkgPj0gMCkge1xuICAgICAgbGFzdE9mZnNldCA9IG9mZnNldDtcbiAgICAgIG9mZnNldCA9IChvZmZzZXQgPDwgMSkgKyAxO1xuXG4gICAgICBpZiAob2Zmc2V0IDw9IDApIHtcbiAgICAgICAgb2Zmc2V0ID0gbWF4T2Zmc2V0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvZmZzZXQgPiBtYXhPZmZzZXQpIHtcbiAgICAgIG9mZnNldCA9IG1heE9mZnNldDtcbiAgICB9XG5cbiAgICAvLyBNYWtlIG9mZnNldHMgcmVsYXRpdmUgdG8gc3RhcnRcbiAgICBsYXN0T2Zmc2V0ICs9IGhpbnQ7XG4gICAgb2Zmc2V0ICs9IGhpbnQ7XG4gIH1cblxuICAvKlxuICAgKiBOb3cgYXJyYXlbc3RhcnQrbGFzdE9mZnNldF0gPCB2YWx1ZSA8PSBhcnJheVtzdGFydCtvZmZzZXRdLCBzbyB2YWx1ZVxuICAgKiBiZWxvbmdzIHNvbWV3aGVyZSBpbiB0aGUgcmFuZ2UgKHN0YXJ0ICsgbGFzdE9mZnNldCwgc3RhcnQgKyBvZmZzZXRdLiBEbyBhXG4gICAqIGJpbmFyeSBzZWFyY2gsIHdpdGggaW52YXJpYW50IGFycmF5W3N0YXJ0ICsgbGFzdE9mZnNldCAtIDFdIDwgdmFsdWUgPD1cbiAgICogYXJyYXlbc3RhcnQgKyBvZmZzZXRdLlxuICAgKi9cbiAgbGFzdE9mZnNldCsrO1xuXG4gIHdoaWxlIChsYXN0T2Zmc2V0IDwgb2Zmc2V0KSB7XG4gICAgbGV0IG0gPSBsYXN0T2Zmc2V0ICsgKChvZmZzZXQgLSBsYXN0T2Zmc2V0KSA+Pj4gMSk7XG5cbiAgICBpZiAoY29tcGFyZSh2YWx1ZSwgYXJyYXlbc3RhcnQgKyBtXSkgPCAwKSB7XG4gICAgICBvZmZzZXQgPSBtO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIGxhc3RPZmZzZXQgPSBtICsgMTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0O1xufVxuXG5jbGFzcyBUaW1Tb3J0IHtcblxuICBjb25zdHJ1Y3RvcihhcnJheSwgY29tcGFyZSkge1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbiAgICB0aGlzLmNvbXBhcmUgPSBjb21wYXJlO1xuICAgIHRoaXMubWluR2FsbG9wID0gREVGQVVMVF9NSU5fR0FMTE9QSU5HO1xuICAgIHRoaXMubGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgdGhpcy50bXBTdG9yYWdlTGVuZ3RoID0gREVGQVVMVF9UTVBfU1RPUkFHRV9MRU5HVEg7XG4gICAgaWYgKHRoaXMubGVuZ3RoIDwgMiAqIERFRkFVTFRfVE1QX1NUT1JBR0VfTEVOR1RIKSB7XG4gICAgICB0aGlzLnRtcFN0b3JhZ2VMZW5ndGggPSB0aGlzLmxlbmd0aCA+Pj4gMTtcbiAgICB9XG5cbiAgICB0aGlzLnRtcCA9IG5ldyBBcnJheSh0aGlzLnRtcFN0b3JhZ2VMZW5ndGgpO1xuXG4gICAgdGhpcy5zdGFja0xlbmd0aCA9XG4gICAgICAodGhpcy5sZW5ndGggPCAxMjAgPyA1IDpcbiAgICAgICAgdGhpcy5sZW5ndGggPCAxNTQyID8gMTAgOlxuICAgICAgICAgIHRoaXMubGVuZ3RoIDwgMTE5MTUxID8gMTkgOiA0MCk7XG5cbiAgICB0aGlzLnJ1blN0YXJ0ID0gbmV3IEFycmF5KHRoaXMuc3RhY2tMZW5ndGgpO1xuICAgIHRoaXMucnVuTGVuZ3RoID0gbmV3IEFycmF5KHRoaXMuc3RhY2tMZW5ndGgpO1xuICAgIHRoaXMuc3RhY2tTaXplID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdXNoIGEgbmV3IHJ1biBvbiBUaW1Tb3J0J3Mgc3RhY2suXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBydW5TdGFydCAtIFN0YXJ0IGluZGV4IG9mIHRoZSBydW4gaW4gdGhlIG9yaWdpbmFsIGFycmF5LlxuICAgKiBAcGFyYW0ge251bWJlcn0gcnVuTGVuZ3RoIC0gTGVuZ3RoIG9mIHRoZSBydW47XG4gICAqL1xuICBwdXNoUnVuKHJ1blN0YXJ0LCBydW5MZW5ndGgpIHtcbiAgICB0aGlzLnJ1blN0YXJ0W3RoaXMuc3RhY2tTaXplXSA9IHJ1blN0YXJ0O1xuICAgIHRoaXMucnVuTGVuZ3RoW3RoaXMuc3RhY2tTaXplXSA9IHJ1bkxlbmd0aDtcbiAgICB0aGlzLnN0YWNrU2l6ZSArPSAxO1xuICB9XG5cbiAgLyoqXG4gICAqIE1lcmdlIHJ1bnMgb24gVGltU29ydCdzIHN0YWNrIHNvIHRoYXQgdGhlIGZvbGxvd2luZyBob2xkcyBmb3IgYWxsIGk6XG4gICAqIDEpIHJ1bkxlbmd0aFtpIC0gM10gPiBydW5MZW5ndGhbaSAtIDJdICsgcnVuTGVuZ3RoW2kgLSAxXVxuICAgKiAyKSBydW5MZW5ndGhbaSAtIDJdID4gcnVuTGVuZ3RoW2kgLSAxXVxuICAgKi9cbiAgbWVyZ2VSdW5zKCkge1xuICAgIHdoaWxlICh0aGlzLnN0YWNrU2l6ZSA+IDEpIHtcbiAgICAgIGxldCBuID0gdGhpcy5zdGFja1NpemUgLSAyO1xuXG4gICAgICBpZiAoKG4gPj0gMSAmJlxuICAgICAgICB0aGlzLnJ1bkxlbmd0aFtuIC0gMV0gPD0gdGhpcy5ydW5MZW5ndGhbbl0gKyB0aGlzLnJ1bkxlbmd0aFtuICsgMV0pIHx8XG4gICAgICAgIChuID49IDIgJiZcbiAgICAgICAgdGhpcy5ydW5MZW5ndGhbbiAtIDJdIDw9IHRoaXMucnVuTGVuZ3RoW25dICsgdGhpcy5ydW5MZW5ndGhbbiAtIDFdKSkge1xuXG4gICAgICAgIGlmICh0aGlzLnJ1bkxlbmd0aFtuIC0gMV0gPCB0aGlzLnJ1bkxlbmd0aFtuICsgMV0pIHtcbiAgICAgICAgICBuLS07XG4gICAgICAgIH1cblxuICAgICAgfSBlbHNlIGlmICh0aGlzLnJ1bkxlbmd0aFtuXSA+IHRoaXMucnVuTGVuZ3RoW24gKyAxXSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHRoaXMubWVyZ2VBdChuKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTWVyZ2UgYWxsIHJ1bnMgb24gVGltU29ydCdzIHN0YWNrIHVudGlsIG9ubHkgb25lIHJlbWFpbnMuXG4gICAqL1xuICBmb3JjZU1lcmdlUnVucygpIHtcbiAgICB3aGlsZSAodGhpcy5zdGFja1NpemUgPiAxKSB7XG4gICAgICBsZXQgbiA9IHRoaXMuc3RhY2tTaXplIC0gMjtcblxuICAgICAgaWYgKG4gPiAwICYmIHRoaXMucnVuTGVuZ3RoW24gLSAxXSA8IHRoaXMucnVuTGVuZ3RoW24gKyAxXSkge1xuICAgICAgICBuLS07XG4gICAgICB9XG5cbiAgICAgIHRoaXMubWVyZ2VBdChuKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTWVyZ2UgdGhlIHJ1bnMgb24gdGhlIHN0YWNrIGF0IHBvc2l0aW9ucyBpIGFuZCBpKzEuIE11c3QgYmUgYWx3YXlzIGJlIGNhbGxlZFxuICAgKiB3aXRoIGk9c3RhY2tTaXplLTIgb3IgaT1zdGFja1NpemUtMyAodGhhdCBpcywgd2UgbWVyZ2Ugb24gdG9wIG9mIHRoZSBzdGFjaykuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpIC0gSW5kZXggb2YgdGhlIHJ1biB0byBtZXJnZSBpbiBUaW1Tb3J0J3Mgc3RhY2suXG4gICAqL1xuICBtZXJnZUF0KGkpIHtcbiAgICBsZXQgY29tcGFyZSA9IHRoaXMuY29tcGFyZTtcbiAgICBsZXQgYXJyYXkgPSB0aGlzLmFycmF5O1xuXG4gICAgbGV0IHN0YXJ0MSA9IHRoaXMucnVuU3RhcnRbaV07XG4gICAgbGV0IGxlbmd0aDEgPSB0aGlzLnJ1bkxlbmd0aFtpXTtcbiAgICBsZXQgc3RhcnQyID0gdGhpcy5ydW5TdGFydFtpICsgMV07XG4gICAgbGV0IGxlbmd0aDIgPSB0aGlzLnJ1bkxlbmd0aFtpICsgMV07XG5cbiAgICB0aGlzLnJ1bkxlbmd0aFtpXSA9IGxlbmd0aDEgKyBsZW5ndGgyO1xuXG4gICAgaWYgKGkgPT09IHRoaXMuc3RhY2tTaXplIC0gMykge1xuICAgICAgdGhpcy5ydW5TdGFydFtpICsgMV0gPSB0aGlzLnJ1blN0YXJ0W2kgKyAyXTtcbiAgICAgIHRoaXMucnVuTGVuZ3RoW2kgKyAxXSA9IHRoaXMucnVuTGVuZ3RoW2kgKyAyXTtcbiAgICB9XG5cbiAgICB0aGlzLnN0YWNrU2l6ZS0tO1xuXG4gICAgLypcbiAgICAgKiBGaW5kIHdoZXJlIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBzZWNvbmQgcnVuIGdvZXMgaW4gcnVuMS4gUHJldmlvdXNcbiAgICAgKiBlbGVtZW50cyBpbiBydW4xIGFyZSBhbHJlYWR5IGluIHBsYWNlXG4gICAgICovXG4gICAgbGV0IGsgPSBnYWxsb3BSaWdodChhcnJheVtzdGFydDJdLCBhcnJheSwgc3RhcnQxLCBsZW5ndGgxLCAwLCBjb21wYXJlKTtcbiAgICBzdGFydDEgKz0gaztcbiAgICBsZW5ndGgxIC09IGs7XG5cbiAgICBpZiAobGVuZ3RoMSA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8qXG4gICAgICogRmluZCB3aGVyZSB0aGUgbGFzdCBlbGVtZW50IGluIHRoZSBmaXJzdCBydW4gZ29lcyBpbiBydW4yLiBOZXh0IGVsZW1lbnRzXG4gICAgICogaW4gcnVuMiBhcmUgYWxyZWFkeSBpbiBwbGFjZVxuICAgICAqL1xuICAgIGxlbmd0aDIgPSBnYWxsb3BMZWZ0KGFycmF5W3N0YXJ0MSArIGxlbmd0aDEgLSAxXSwgYXJyYXksIHN0YXJ0MiwgbGVuZ3RoMiwgbGVuZ3RoMiAtIDEsIGNvbXBhcmUpO1xuXG4gICAgaWYgKGxlbmd0aDIgPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIE1lcmdlIHJlbWFpbmluZyBydW5zLiBBIHRtcCBhcnJheSB3aXRoIGxlbmd0aCA9IG1pbihsZW5ndGgxLCBsZW5ndGgyKSBpc1xuICAgICAqIHVzZWRcbiAgICAgKi9cbiAgICBpZiAobGVuZ3RoMSA8PSBsZW5ndGgyKSB7XG4gICAgICB0aGlzLm1lcmdlTG93KHN0YXJ0MSwgbGVuZ3RoMSwgc3RhcnQyLCBsZW5ndGgyKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm1lcmdlSGlnaChzdGFydDEsIGxlbmd0aDEsIHN0YXJ0MiwgbGVuZ3RoMik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1lcmdlIHR3byBhZGphY2VudCBydW5zIGluIGEgc3RhYmxlIHdheS4gVGhlIHJ1bnMgbXVzdCBiZSBzdWNoIHRoYXQgdGhlXG4gICAqIGZpcnN0IGVsZW1lbnQgb2YgcnVuMSBpcyBiaWdnZXIgdGhhbiB0aGUgZmlyc3QgZWxlbWVudCBpbiBydW4yIGFuZCB0aGVcbiAgICogbGFzdCBlbGVtZW50IG9mIHJ1bjEgaXMgZ3JlYXRlciB0aGFuIGFsbCB0aGUgZWxlbWVudHMgaW4gcnVuMi5cbiAgICogVGhlIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIHdoZW4gcnVuMS5sZW5ndGggPD0gcnVuMi5sZW5ndGggYXMgaXQgdXNlc1xuICAgKiBUaW1Tb3J0IHRlbXBvcmFyeSBhcnJheSB0byBzdG9yZSBydW4xLiBVc2UgbWVyZ2VIaWdoIGlmIHJ1bjEubGVuZ3RoID5cbiAgICogcnVuMi5sZW5ndGguXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydDEgLSBGaXJzdCBlbGVtZW50IGluIHJ1bjEuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGgxIC0gTGVuZ3RoIG9mIHJ1bjEuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydDIgLSBGaXJzdCBlbGVtZW50IGluIHJ1bjIuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGgyIC0gTGVuZ3RoIG9mIHJ1bjIuXG4gICAqL1xuICBtZXJnZUxvdyhzdGFydDEsIGxlbmd0aDEsIHN0YXJ0MiwgbGVuZ3RoMikge1xuXG4gICAgbGV0IGNvbXBhcmUgPSB0aGlzLmNvbXBhcmU7XG4gICAgbGV0IGFycmF5ID0gdGhpcy5hcnJheTtcbiAgICBsZXQgdG1wID0gdGhpcy50bXA7XG4gICAgbGV0IGkgPSAwO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDE7IGkrKykge1xuICAgICAgdG1wW2ldID0gYXJyYXlbc3RhcnQxICsgaV07XG4gICAgfVxuXG4gICAgbGV0IGN1cnNvcjEgPSAwO1xuICAgIGxldCBjdXJzb3IyID0gc3RhcnQyO1xuICAgIGxldCBkZXN0ID0gc3RhcnQxO1xuXG4gICAgYXJyYXlbZGVzdCsrXSA9IGFycmF5W2N1cnNvcjIrK107XG5cbiAgICBpZiAoLS1sZW5ndGgyID09PSAwKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoMTsgaSsrKSB7XG4gICAgICAgIGFycmF5W2Rlc3QgKyBpXSA9IHRtcFtjdXJzb3IxICsgaV07XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGxlbmd0aDEgPT09IDEpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGgyOyBpKyspIHtcbiAgICAgICAgYXJyYXlbZGVzdCArIGldID0gYXJyYXlbY3Vyc29yMiArIGldO1xuICAgICAgfVxuICAgICAgYXJyYXlbZGVzdCArIGxlbmd0aDJdID0gdG1wW2N1cnNvcjFdO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBtaW5HYWxsb3AgPSB0aGlzLm1pbkdhbGxvcDtcblxuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBsZXQgY291bnQxID0gMDtcbiAgICAgIGxldCBjb3VudDIgPSAwO1xuICAgICAgbGV0IGV4aXQgPSBmYWxzZTtcblxuICAgICAgZG8ge1xuICAgICAgICBpZiAoY29tcGFyZShhcnJheVtjdXJzb3IyXSwgdG1wW2N1cnNvcjFdKSA8IDApIHtcbiAgICAgICAgICBhcnJheVtkZXN0KytdID0gYXJyYXlbY3Vyc29yMisrXTtcbiAgICAgICAgICBjb3VudDIrKztcbiAgICAgICAgICBjb3VudDEgPSAwO1xuXG4gICAgICAgICAgaWYgKC0tbGVuZ3RoMiA9PT0gMCkge1xuICAgICAgICAgICAgZXhpdCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhcnJheVtkZXN0KytdID0gdG1wW2N1cnNvcjErK107XG4gICAgICAgICAgY291bnQxKys7XG4gICAgICAgICAgY291bnQyID0gMDtcbiAgICAgICAgICBpZiAoLS1sZW5ndGgxID09PSAxKSB7XG4gICAgICAgICAgICBleGl0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAoKGNvdW50MSB8IGNvdW50MikgPCBtaW5HYWxsb3ApO1xuXG4gICAgICBpZiAoZXhpdCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgZG8ge1xuICAgICAgICBjb3VudDEgPSBnYWxsb3BSaWdodChhcnJheVtjdXJzb3IyXSwgdG1wLCBjdXJzb3IxLCBsZW5ndGgxLCAwLCBjb21wYXJlKTtcblxuICAgICAgICBpZiAoY291bnQxICE9PSAwKSB7XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvdW50MTsgaSsrKSB7XG4gICAgICAgICAgICBhcnJheVtkZXN0ICsgaV0gPSB0bXBbY3Vyc29yMSArIGldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRlc3QgKz0gY291bnQxO1xuICAgICAgICAgIGN1cnNvcjEgKz0gY291bnQxO1xuICAgICAgICAgIGxlbmd0aDEgLT0gY291bnQxO1xuICAgICAgICAgIGlmIChsZW5ndGgxIDw9IDEpIHtcbiAgICAgICAgICAgIGV4aXQgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYXJyYXlbZGVzdCsrXSA9IGFycmF5W2N1cnNvcjIrK107XG5cbiAgICAgICAgaWYgKC0tbGVuZ3RoMiA9PT0gMCkge1xuICAgICAgICAgIGV4aXQgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgY291bnQyID0gZ2FsbG9wTGVmdCh0bXBbY3Vyc29yMV0sIGFycmF5LCBjdXJzb3IyLCBsZW5ndGgyLCAwLCBjb21wYXJlKTtcblxuICAgICAgICBpZiAoY291bnQyICE9PSAwKSB7XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvdW50MjsgaSsrKSB7XG4gICAgICAgICAgICBhcnJheVtkZXN0ICsgaV0gPSBhcnJheVtjdXJzb3IyICsgaV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGVzdCArPSBjb3VudDI7XG4gICAgICAgICAgY3Vyc29yMiArPSBjb3VudDI7XG4gICAgICAgICAgbGVuZ3RoMiAtPSBjb3VudDI7XG5cbiAgICAgICAgICBpZiAobGVuZ3RoMiA9PT0gMCkge1xuICAgICAgICAgICAgZXhpdCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXJyYXlbZGVzdCsrXSA9IHRtcFtjdXJzb3IxKytdO1xuXG4gICAgICAgIGlmICgtLWxlbmd0aDEgPT09IDEpIHtcbiAgICAgICAgICBleGl0ID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIG1pbkdhbGxvcC0tO1xuXG4gICAgICB9IHdoaWxlIChjb3VudDEgPj0gREVGQVVMVF9NSU5fR0FMTE9QSU5HIHx8IGNvdW50MiA+PSBERUZBVUxUX01JTl9HQUxMT1BJTkcpO1xuXG4gICAgICBpZiAoZXhpdCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKG1pbkdhbGxvcCA8IDApIHtcbiAgICAgICAgbWluR2FsbG9wID0gMDtcbiAgICAgIH1cblxuICAgICAgbWluR2FsbG9wICs9IDI7XG4gICAgfVxuXG4gICAgdGhpcy5taW5HYWxsb3AgPSBtaW5HYWxsb3A7XG5cbiAgICBpZiAobWluR2FsbG9wIDwgMSkge1xuICAgICAgdGhpcy5taW5HYWxsb3AgPSAxO1xuICAgIH1cblxuICAgIGlmIChsZW5ndGgxID09PSAxKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoMjsgaSsrKSB7XG4gICAgICAgIGFycmF5W2Rlc3QgKyBpXSA9IGFycmF5W2N1cnNvcjIgKyBpXTtcbiAgICAgIH1cbiAgICAgIGFycmF5W2Rlc3QgKyBsZW5ndGgyXSA9IHRtcFtjdXJzb3IxXTtcblxuICAgIH0gZWxzZSBpZiAobGVuZ3RoMSA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdtZXJnZUxvdyBwcmVjb25kaXRpb25zIHdlcmUgbm90IHJlc3BlY3RlZCcpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGgxOyBpKyspIHtcbiAgICAgICAgYXJyYXlbZGVzdCArIGldID0gdG1wW2N1cnNvcjEgKyBpXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTWVyZ2UgdHdvIGFkamFjZW50IHJ1bnMgaW4gYSBzdGFibGUgd2F5LiBUaGUgcnVucyBtdXN0IGJlIHN1Y2ggdGhhdCB0aGVcbiAgICogZmlyc3QgZWxlbWVudCBvZiBydW4xIGlzIGJpZ2dlciB0aGFuIHRoZSBmaXJzdCBlbGVtZW50IGluIHJ1bjIgYW5kIHRoZVxuICAgKiBsYXN0IGVsZW1lbnQgb2YgcnVuMSBpcyBncmVhdGVyIHRoYW4gYWxsIHRoZSBlbGVtZW50cyBpbiBydW4yLlxuICAgKiBUaGUgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgd2hlbiBydW4xLmxlbmd0aCA+IHJ1bjIubGVuZ3RoIGFzIGl0IHVzZXNcbiAgICogVGltU29ydCB0ZW1wb3JhcnkgYXJyYXkgdG8gc3RvcmUgcnVuMi4gVXNlIG1lcmdlTG93IGlmIHJ1bjEubGVuZ3RoIDw9XG4gICAqIHJ1bjIubGVuZ3RoLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQxIC0gRmlyc3QgZWxlbWVudCBpbiBydW4xLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoMSAtIExlbmd0aCBvZiBydW4xLlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQyIC0gRmlyc3QgZWxlbWVudCBpbiBydW4yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoMiAtIExlbmd0aCBvZiBydW4yLlxuICAgKi9cbiAgbWVyZ2VIaWdoKHN0YXJ0MSwgbGVuZ3RoMSwgc3RhcnQyLCBsZW5ndGgyKSB7XG4gICAgbGV0IGNvbXBhcmUgPSB0aGlzLmNvbXBhcmU7XG4gICAgbGV0IGFycmF5ID0gdGhpcy5hcnJheTtcbiAgICBsZXQgdG1wID0gdGhpcy50bXA7XG4gICAgbGV0IGkgPSAwO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDI7IGkrKykge1xuICAgICAgdG1wW2ldID0gYXJyYXlbc3RhcnQyICsgaV07XG4gICAgfVxuXG4gICAgbGV0IGN1cnNvcjEgPSBzdGFydDEgKyBsZW5ndGgxIC0gMTtcbiAgICBsZXQgY3Vyc29yMiA9IGxlbmd0aDIgLSAxO1xuICAgIGxldCBkZXN0ID0gc3RhcnQyICsgbGVuZ3RoMiAtIDE7XG4gICAgbGV0IGN1c3RvbUN1cnNvciA9IDA7XG4gICAgbGV0IGN1c3RvbURlc3QgPSAwO1xuXG4gICAgYXJyYXlbZGVzdC0tXSA9IGFycmF5W2N1cnNvcjEtLV07XG5cbiAgICBpZiAoLS1sZW5ndGgxID09PSAwKSB7XG4gICAgICBjdXN0b21DdXJzb3IgPSBkZXN0IC0gKGxlbmd0aDIgLSAxKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDI7IGkrKykge1xuICAgICAgICBhcnJheVtjdXN0b21DdXJzb3IgKyBpXSA9IHRtcFtpXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChsZW5ndGgyID09PSAxKSB7XG4gICAgICBkZXN0IC09IGxlbmd0aDE7XG4gICAgICBjdXJzb3IxIC09IGxlbmd0aDE7XG4gICAgICBjdXN0b21EZXN0ID0gZGVzdCArIDE7XG4gICAgICBjdXN0b21DdXJzb3IgPSBjdXJzb3IxICsgMTtcblxuICAgICAgZm9yIChpID0gbGVuZ3RoMSAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGFycmF5W2N1c3RvbURlc3QgKyBpXSA9IGFycmF5W2N1c3RvbUN1cnNvciArIGldO1xuICAgICAgfVxuXG4gICAgICBhcnJheVtkZXN0XSA9IHRtcFtjdXJzb3IyXTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgbWluR2FsbG9wID0gdGhpcy5taW5HYWxsb3A7XG5cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgbGV0IGNvdW50MSA9IDA7XG4gICAgICBsZXQgY291bnQyID0gMDtcbiAgICAgIGxldCBleGl0ID0gZmFsc2U7XG5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKGNvbXBhcmUodG1wW2N1cnNvcjJdLCBhcnJheVtjdXJzb3IxXSkgPCAwKSB7XG4gICAgICAgICAgYXJyYXlbZGVzdC0tXSA9IGFycmF5W2N1cnNvcjEtLV07XG4gICAgICAgICAgY291bnQxKys7XG4gICAgICAgICAgY291bnQyID0gMDtcbiAgICAgICAgICBpZiAoLS1sZW5ndGgxID09PSAwKSB7XG4gICAgICAgICAgICBleGl0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFycmF5W2Rlc3QtLV0gPSB0bXBbY3Vyc29yMi0tXTtcbiAgICAgICAgICBjb3VudDIrKztcbiAgICAgICAgICBjb3VudDEgPSAwO1xuICAgICAgICAgIGlmICgtLWxlbmd0aDIgPT09IDEpIHtcbiAgICAgICAgICAgIGV4aXQgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgIH0gd2hpbGUgKChjb3VudDEgfCBjb3VudDIpIDwgbWluR2FsbG9wKTtcblxuICAgICAgaWYgKGV4aXQpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGRvIHtcbiAgICAgICAgY291bnQxID0gbGVuZ3RoMSAtIGdhbGxvcFJpZ2h0KHRtcFtjdXJzb3IyXSwgYXJyYXksIHN0YXJ0MSwgbGVuZ3RoMSwgbGVuZ3RoMSAtIDEsIGNvbXBhcmUpO1xuXG4gICAgICAgIGlmIChjb3VudDEgIT09IDApIHtcbiAgICAgICAgICBkZXN0IC09IGNvdW50MTtcbiAgICAgICAgICBjdXJzb3IxIC09IGNvdW50MTtcbiAgICAgICAgICBsZW5ndGgxIC09IGNvdW50MTtcbiAgICAgICAgICBjdXN0b21EZXN0ID0gZGVzdCArIDE7XG4gICAgICAgICAgY3VzdG9tQ3Vyc29yID0gY3Vyc29yMSArIDE7XG5cbiAgICAgICAgICBmb3IgKGkgPSBjb3VudDEgLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgYXJyYXlbY3VzdG9tRGVzdCArIGldID0gYXJyYXlbY3VzdG9tQ3Vyc29yICsgaV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGxlbmd0aDEgPT09IDApIHtcbiAgICAgICAgICAgIGV4aXQgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYXJyYXlbZGVzdC0tXSA9IHRtcFtjdXJzb3IyLS1dO1xuXG4gICAgICAgIGlmICgtLWxlbmd0aDIgPT09IDEpIHtcbiAgICAgICAgICBleGl0ID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGNvdW50MiA9IGxlbmd0aDIgLSBnYWxsb3BMZWZ0KGFycmF5W2N1cnNvcjFdLCB0bXAsIDAsIGxlbmd0aDIsIGxlbmd0aDIgLSAxLCBjb21wYXJlKTtcblxuICAgICAgICBpZiAoY291bnQyICE9PSAwKSB7XG4gICAgICAgICAgZGVzdCAtPSBjb3VudDI7XG4gICAgICAgICAgY3Vyc29yMiAtPSBjb3VudDI7XG4gICAgICAgICAgbGVuZ3RoMiAtPSBjb3VudDI7XG4gICAgICAgICAgY3VzdG9tRGVzdCA9IGRlc3QgKyAxO1xuICAgICAgICAgIGN1c3RvbUN1cnNvciA9IGN1cnNvcjIgKyAxO1xuXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvdW50MjsgaSsrKSB7XG4gICAgICAgICAgICBhcnJheVtjdXN0b21EZXN0ICsgaV0gPSB0bXBbY3VzdG9tQ3Vyc29yICsgaV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGxlbmd0aDIgPD0gMSkge1xuICAgICAgICAgICAgZXhpdCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBhcnJheVtkZXN0LS1dID0gYXJyYXlbY3Vyc29yMS0tXTtcblxuICAgICAgICBpZiAoLS1sZW5ndGgxID09PSAwKSB7XG4gICAgICAgICAgZXhpdCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBtaW5HYWxsb3AtLTtcblxuICAgICAgfSB3aGlsZSAoY291bnQxID49IERFRkFVTFRfTUlOX0dBTExPUElORyB8fCBjb3VudDIgPj0gREVGQVVMVF9NSU5fR0FMTE9QSU5HKTtcblxuICAgICAgaWYgKGV4aXQpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChtaW5HYWxsb3AgPCAwKSB7XG4gICAgICAgIG1pbkdhbGxvcCA9IDA7XG4gICAgICB9XG5cbiAgICAgIG1pbkdhbGxvcCArPSAyO1xuICAgIH1cblxuICAgIHRoaXMubWluR2FsbG9wID0gbWluR2FsbG9wO1xuXG4gICAgaWYgKG1pbkdhbGxvcCA8IDEpIHtcbiAgICAgIHRoaXMubWluR2FsbG9wID0gMTtcbiAgICB9XG5cbiAgICBpZiAobGVuZ3RoMiA9PT0gMSkge1xuICAgICAgZGVzdCAtPSBsZW5ndGgxO1xuICAgICAgY3Vyc29yMSAtPSBsZW5ndGgxO1xuICAgICAgY3VzdG9tRGVzdCA9IGRlc3QgKyAxO1xuICAgICAgY3VzdG9tQ3Vyc29yID0gY3Vyc29yMSArIDE7XG5cbiAgICAgIGZvciAoaSA9IGxlbmd0aDEgLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBhcnJheVtjdXN0b21EZXN0ICsgaV0gPSBhcnJheVtjdXN0b21DdXJzb3IgKyBpXTtcbiAgICAgIH1cblxuICAgICAgYXJyYXlbZGVzdF0gPSB0bXBbY3Vyc29yMl07XG5cbiAgICB9IGVsc2UgaWYgKGxlbmd0aDIgPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignbWVyZ2VIaWdoIHByZWNvbmRpdGlvbnMgd2VyZSBub3QgcmVzcGVjdGVkJyk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgY3VzdG9tQ3Vyc29yID0gZGVzdCAtIChsZW5ndGgyIC0gMSk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoMjsgaSsrKSB7XG4gICAgICAgIGFycmF5W2N1c3RvbUN1cnNvciArIGldID0gdG1wW2ldO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFNvcnQgYW4gYXJyYXkgaW4gdGhlIHJhbmdlIFtsbywgaGkpIHVzaW5nIFRpbVNvcnQuXG4gKlxuICogQHBhcmFtIHthcnJheX0gYXJyYXkgLSBUaGUgYXJyYXkgdG8gc29ydC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBsbyAtIEZpcnN0IGVsZW1lbnQgaW4gdGhlIHJhbmdlIChpbmNsdXNpdmUpLlxuICogQHBhcmFtIHtudW1iZXJ9IGhpIC0gTGFzdCBlbGVtZW50IGluIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb249fSBjb21wYXJlIC0gSXRlbSBjb21wYXJpc29uIGZ1bmN0aW9uLiBEZWZhdWx0IGlzIGFscGhhYmV0aWNhbC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGFycmF5LCBsbywgaGksIGNvbXBhcmUpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NhbiBvbmx5IHNvcnQgYXJyYXlzJyk7XG4gIH1cblxuICAvKlxuICAgKiBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgYSBjb21wYXJpc29uIGZ1bmN0aW9uIGlzIG5vdCBwcm92aWRlZC4gV2UgZG9cbiAgICogbGV4aWNvZ3JhcGhpYyBzb3J0aW5nXG4gICAqL1xuXG4gIGlmIChsbyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbG8gPSAwO1xuICB9XG5cbiAgaWYgKGhpID09PSB1bmRlZmluZWQpIHtcbiAgICBoaSA9IGFycmF5Lmxlbmd0aDtcbiAgfVxuXG4gIGlmIChjb21wYXJlID09PSB1bmRlZmluZWQpIHtcbiAgICBjb21wYXJlID0gYWxwaGFiZXRpY2FsQ29tcGFyZTtcbiAgfVxuXG4gIGxldCByZW1haW5pbmcgPSBoaSAtIGxvO1xuXG4gIC8vIFRoZSBhcnJheSBpcyBhbHJlYWR5IHNvcnRlZFxuICBpZiAocmVtYWluaW5nIDwgMikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBydW5MZW5ndGggPSAwO1xuICAvLyBPbiBzbWFsbCBhcnJheXMgYmluYXJ5IHNvcnQgY2FuIGJlIHVzZWQgZGlyZWN0bHlcbiAgaWYgKHJlbWFpbmluZyA8IERFRkFVTFRfTUlOX01FUkdFKSB7XG4gICAgcnVuTGVuZ3RoID0gbWFrZUFzY2VuZGluZ1J1bihhcnJheSwgbG8sIGhpLCBjb21wYXJlKTtcbiAgICBiaW5hcnlJbnNlcnRpb25Tb3J0KGFycmF5LCBsbywgaGksIGxvICsgcnVuTGVuZ3RoLCBjb21wYXJlKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgdHMgPSBuZXcgVGltU29ydChhcnJheSwgY29tcGFyZSk7XG5cbiAgbGV0IG1pblJ1biA9IG1pblJ1bkxlbmd0aChyZW1haW5pbmcpO1xuXG4gIGRvIHtcbiAgICBydW5MZW5ndGggPSBtYWtlQXNjZW5kaW5nUnVuKGFycmF5LCBsbywgaGksIGNvbXBhcmUpO1xuICAgIGlmIChydW5MZW5ndGggPCBtaW5SdW4pIHtcbiAgICAgIGxldCBmb3JjZSA9IHJlbWFpbmluZztcbiAgICAgIGlmIChmb3JjZSA+IG1pblJ1bikge1xuICAgICAgICBmb3JjZSA9IG1pblJ1bjtcbiAgICAgIH1cblxuICAgICAgYmluYXJ5SW5zZXJ0aW9uU29ydChhcnJheSwgbG8sIGxvICsgZm9yY2UsIGxvICsgcnVuTGVuZ3RoLCBjb21wYXJlKTtcbiAgICAgIHJ1bkxlbmd0aCA9IGZvcmNlO1xuICAgIH1cbiAgICAvLyBQdXNoIG5ldyBydW4gYW5kIG1lcmdlIGlmIG5lY2Vzc2FyeVxuICAgIHRzLnB1c2hSdW4obG8sIHJ1bkxlbmd0aCk7XG4gICAgdHMubWVyZ2VSdW5zKCk7XG5cbiAgICAvLyBHbyBmaW5kIG5leHQgcnVuXG4gICAgcmVtYWluaW5nIC09IHJ1bkxlbmd0aDtcbiAgICBsbyArPSBydW5MZW5ndGg7XG5cbiAgfSB3aGlsZSAocmVtYWluaW5nICE9PSAwKTtcblxuICAvLyBGb3JjZSBtZXJnaW5nIG9mIHJlbWFpbmluZyBydW5zXG4gIHRzLmZvcmNlTWVyZ2VSdW5zKCk7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoYXJyYXksIGxvLCBoaSwgY29tcGFyZSkge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2FuIG9ubHkgc29ydCBhcnJheXMnKTtcbiAgfVxuXG4gIC8qXG4gICAqIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSBhIGNvbXBhcmlzb24gZnVuY3Rpb24gaXMgbm90IHByb3ZpZGVkLiBXZSBkb1xuICAgKiBsZXhpY29ncmFwaGljIHNvcnRpbmdcbiAgICovXG5cbiAgaWYgKGxvID09PSB1bmRlZmluZWQpIHtcbiAgICBsbyA9IDA7XG4gIH1cblxuICBpZiAoaGkgPT09IHVuZGVmaW5lZCkge1xuICAgIGhpID0gYXJyYXkubGVuZ3RoO1xuICB9XG5cbiAgaWYgKGNvbXBhcmUgPT09IHVuZGVmaW5lZCkge1xuICAgIGNvbXBhcmUgPSBhbHBoYWJldGljYWxDb21wYXJlO1xuICB9XG5cbiAgdmFyIHJlbWFpbmluZyA9IGhpIC0gbG87XG5cbiAgLy8gVGhlIGFycmF5IGlzIGFscmVhZHkgc29ydGVkXG4gIGlmIChyZW1haW5pbmcgPCAyKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHJ1bkxlbmd0aCA9IDA7XG4gIC8vIE9uIHNtYWxsIGFycmF5cyBiaW5hcnkgc29ydCBjYW4gYmUgdXNlZCBkaXJlY3RseVxuICBpZiAocmVtYWluaW5nIDwgREVGQVVMVF9NSU5fTUVSR0UpIHtcbiAgICBydW5MZW5ndGggPSBtYWtlQXNjZW5kaW5nUnVuKGFycmF5LCBsbywgaGksIGNvbXBhcmUpO1xuICAgIGJpbmFyeUluc2VydGlvblNvcnQoYXJyYXksIGxvLCBoaSwgbG8gKyBydW5MZW5ndGgsIGNvbXBhcmUpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB0cyA9IG5ldyBUaW1Tb3J0KGFycmF5LCBjb21wYXJlKTtcblxuICB2YXIgbWluUnVuID0gbWluUnVuTGVuZ3RoKHJlbWFpbmluZyk7XG5cbiAgZG8ge1xuICAgIHJ1bkxlbmd0aCA9IG1ha2VBc2NlbmRpbmdSdW4oYXJyYXksIGxvLCBoaSwgY29tcGFyZSk7XG4gICAgaWYgKHJ1bkxlbmd0aCA8IG1pblJ1bikge1xuICAgICAgdmFyIGZvcmNlID0gcmVtYWluaW5nO1xuICAgICAgaWYgKGZvcmNlID4gbWluUnVuKSB7XG4gICAgICAgIGZvcmNlID0gbWluUnVuO1xuICAgICAgfVxuXG4gICAgICBiaW5hcnlJbnNlcnRpb25Tb3J0KGFycmF5LCBsbywgbG8gKyBmb3JjZSwgbG8gKyBydW5MZW5ndGgsIGNvbXBhcmUpO1xuICAgICAgcnVuTGVuZ3RoID0gZm9yY2U7XG4gICAgfVxuICAgIC8vIFB1c2ggbmV3IHJ1biBhbmQgbWVyZ2UgaWYgbmVjZXNzYXJ5XG4gICAgdHMucHVzaFJ1bihsbywgcnVuTGVuZ3RoKTtcbiAgICB0cy5tZXJnZVJ1bnMoKTtcblxuICAgIC8vIEdvIGZpbmQgbmV4dCBydW5cbiAgICByZW1haW5pbmcgLT0gcnVuTGVuZ3RoO1xuICAgIGxvICs9IHJ1bkxlbmd0aDtcbiAgfSB3aGlsZSAocmVtYWluaW5nICE9PSAwKTtcblxuICAvLyBGb3JjZSBtZXJnaW5nIG9mIHJlbWFpbmluZyBydW5zXG4gIHRzLmZvcmNlTWVyZ2VSdW5zKCk7XG59O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vLyByZWZlcmVuY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9temljY2FyZC9ub2RlLXRpbXNvcnRcblxuLyoqXG4gKiBEZWZhdWx0IG1pbmltdW0gc2l6ZSBvZiBhIHJ1bi5cbiAqL1xudmFyIERFRkFVTFRfTUlOX01FUkdFID0gMzI7XG5cbi8qKlxuICogTWluaW11bSBvcmRlcmVkIHN1YnNlcXVlY2UgcmVxdWlyZWQgdG8gZG8gZ2FsbG9waW5nLlxuICovXG52YXIgREVGQVVMVF9NSU5fR0FMTE9QSU5HID0gNztcblxuLyoqXG4gKiBEZWZhdWx0IHRtcCBzdG9yYWdlIGxlbmd0aC4gQ2FuIGluY3JlYXNlIGRlcGVuZGluZyBvbiB0aGUgc2l6ZSBvZiB0aGVcbiAqIHNtYWxsZXN0IHJ1biB0byBtZXJnZS5cbiAqL1xudmFyIERFRkFVTFRfVE1QX1NUT1JBR0VfTEVOR1RIID0gMjU2O1xuXG4vKipcbiAqIFByZS1jb21wdXRlZCBwb3dlcnMgb2YgMTAgZm9yIGVmZmljaWVudCBsZXhpY29ncmFwaGljIGNvbXBhcmlzb24gb2ZcbiAqIHNtYWxsIGludGVnZXJzLlxuICovXG52YXIgUE9XRVJTX09GX1RFTiA9IFsxZTAsIDFlMSwgMWUyLCAxZTMsIDFlNCwgMWU1LCAxZTYsIDFlNywgMWU4LCAxZTldO1xuXG4vKipcbiAqIEVzdGltYXRlIHRoZSBsb2dhcml0aG0gYmFzZSAxMCBvZiBhIHNtYWxsIGludGVnZXIuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgaW50ZWdlciB0byBlc3RpbWF0ZSB0aGUgbG9nYXJpdGhtIG9mLlxuICogQHJldHVybiB7bnVtYmVyfSAtIFRoZSBlc3RpbWF0ZWQgbG9nYXJpdGhtIG9mIHRoZSBpbnRlZ2VyLlxuICovXG5mdW5jdGlvbiBsb2cxMCh4KSB7XG4gIGlmICh4IDwgMWU1KSB7XG4gICAgaWYgKHggPCAxZTIpIHtcbiAgICAgIHJldHVybiB4IDwgMWUxID8gMCA6IDE7XG4gICAgfVxuXG4gICAgaWYgKHggPCAxZTQpIHtcbiAgICAgIHJldHVybiB4IDwgMWUzID8gMiA6IDM7XG4gICAgfVxuXG4gICAgcmV0dXJuIDQ7XG4gIH1cblxuICBpZiAoeCA8IDFlNykge1xuICAgIHJldHVybiB4IDwgMWU2ID8gNSA6IDY7XG4gIH1cblxuICBpZiAoeCA8IDFlOSkge1xuICAgIHJldHVybiB4IDwgMWU4ID8gNyA6IDg7XG4gIH1cblxuICByZXR1cm4gOTtcbn1cblxuLyoqXG4gKiBEZWZhdWx0IGFscGhhYmV0aWNhbCBjb21wYXJpc29uIG9mIGl0ZW1zLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdHxudW1iZXJ9IGEgLSBGaXJzdCBlbGVtZW50IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R8bnVtYmVyfSBiIC0gU2Vjb25kIGVsZW1lbnQgdG8gY29tcGFyZS5cbiAqIEByZXR1cm4ge251bWJlcn0gLSBBIHBvc2l0aXZlIG51bWJlciBpZiBhLnRvU3RyaW5nKCkgPiBiLnRvU3RyaW5nKCksIGFcbiAqIG5lZ2F0aXZlIG51bWJlciBpZiAudG9TdHJpbmcoKSA8IGIudG9TdHJpbmcoKSwgMCBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGFscGhhYmV0aWNhbENvbXBhcmUoYSwgYikge1xuICBpZiAoYSA9PT0gYikge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgaWYgKH5+YSA9PT0gYSAmJiB+fmIgPT09IGIpIHtcbiAgICBpZiAoYSA9PT0gMCB8fCBiID09PSAwKSB7XG4gICAgICByZXR1cm4gYSA8IGIgPyAtMSA6IDE7XG4gICAgfVxuXG4gICAgaWYgKGEgPCAwIHx8IGIgPCAwKSB7XG4gICAgICBpZiAoYiA+PSAwKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cblxuICAgICAgaWYgKGEgPj0gMCkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cblxuICAgICAgYSA9IC1hO1xuICAgICAgYiA9IC1iO1xuICAgIH1cblxuICAgIHZhciBhbCA9IGxvZzEwKGEpO1xuICAgIHZhciBibCA9IGxvZzEwKGIpO1xuXG4gICAgdmFyIHQgPSAwO1xuXG4gICAgaWYgKGFsIDwgYmwpIHtcbiAgICAgIGEgKj0gUE9XRVJTX09GX1RFTltibCAtIGFsIC0gMV07XG4gICAgICBiIC89IDEwO1xuICAgICAgdCA9IC0xO1xuICAgIH0gZWxzZSBpZiAoYWwgPiBibCkge1xuICAgICAgYiAqPSBQT1dFUlNfT0ZfVEVOW2FsIC0gYmwgLSAxXTtcbiAgICAgIGEgLz0gMTA7XG4gICAgICB0ID0gMTtcbiAgICB9XG5cbiAgICBpZiAoYSA9PT0gYikge1xuICAgICAgcmV0dXJuIHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGEgPCBiID8gLTEgOiAxO1xuICB9XG5cbiAgdmFyIGFTdHIgPSBTdHJpbmcoYSk7XG4gIHZhciBiU3RyID0gU3RyaW5nKGIpO1xuXG4gIGlmIChhU3RyID09PSBiU3RyKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICByZXR1cm4gYVN0ciA8IGJTdHIgPyAtMSA6IDE7XG59XG5cbi8qKlxuICogQ29tcHV0ZSBtaW5pbXVtIHJ1biBsZW5ndGggZm9yIFRpbVNvcnRcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gbiAtIFRoZSBzaXplIG9mIHRoZSBhcnJheSB0byBzb3J0LlxuICovXG5mdW5jdGlvbiBtaW5SdW5MZW5ndGgobikge1xuICB2YXIgciA9IDA7XG5cbiAgd2hpbGUgKG4gPj0gREVGQVVMVF9NSU5fTUVSR0UpIHtcbiAgICByIHw9IG4gJiAxO1xuICAgIG4gPj49IDE7XG4gIH1cblxuICByZXR1cm4gbiArIHI7XG59XG5cbi8qKlxuICogQ291bnRzIHRoZSBsZW5ndGggb2YgYSBtb25vdG9uaWNhbGx5IGFzY2VuZGluZyBvciBzdHJpY3RseSBtb25vdG9uaWNhbGx5XG4gKiBkZXNjZW5kaW5nIHNlcXVlbmNlIChydW4pIHN0YXJ0aW5nIGF0IGFycmF5W2xvXSBpbiB0aGUgcmFuZ2UgW2xvLCBoaSkuIElmXG4gKiB0aGUgcnVuIGlzIGRlc2NlbmRpbmcgaXQgaXMgbWFkZSBhc2NlbmRpbmcuXG4gKlxuICogQHBhcmFtIHthcnJheX0gYXJyYXkgLSBUaGUgYXJyYXkgdG8gcmV2ZXJzZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBsbyAtIEZpcnN0IGVsZW1lbnQgaW4gdGhlIHJhbmdlIChpbmNsdXNpdmUpLlxuICogQHBhcmFtIHtudW1iZXJ9IGhpIC0gTGFzdCBlbGVtZW50IGluIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbXBhcmUgLSBJdGVtIGNvbXBhcmlzb24gZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtudW1iZXJ9IC0gVGhlIGxlbmd0aCBvZiB0aGUgcnVuLlxuICovXG5mdW5jdGlvbiBtYWtlQXNjZW5kaW5nUnVuKGFycmF5LCBsbywgaGksIGNvbXBhcmUpIHtcbiAgdmFyIHJ1bkhpID0gbG8gKyAxO1xuXG4gIGlmIChydW5IaSA9PT0gaGkpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIC8vIERlc2NlbmRpbmdcbiAgaWYgKGNvbXBhcmUoYXJyYXlbcnVuSGkrK10sIGFycmF5W2xvXSkgPCAwKSB7XG4gICAgd2hpbGUgKHJ1bkhpIDwgaGkgJiYgY29tcGFyZShhcnJheVtydW5IaV0sIGFycmF5W3J1bkhpIC0gMV0pIDwgMCkge1xuICAgICAgcnVuSGkrKztcbiAgICB9XG5cbiAgICByZXZlcnNlUnVuKGFycmF5LCBsbywgcnVuSGkpO1xuICAgIC8vIEFzY2VuZGluZ1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChydW5IaSA8IGhpICYmIGNvbXBhcmUoYXJyYXlbcnVuSGldLCBhcnJheVtydW5IaSAtIDFdKSA+PSAwKSB7XG4gICAgICBydW5IaSsrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBydW5IaSAtIGxvO1xufVxuXG4vKipcbiAqIFJldmVyc2UgYW4gYXJyYXkgaW4gdGhlIHJhbmdlIFtsbywgaGkpLlxuICpcbiAqIEBwYXJhbSB7YXJyYXl9IGFycmF5IC0gVGhlIGFycmF5IHRvIHJldmVyc2UuXG4gKiBAcGFyYW0ge251bWJlcn0gbG8gLSBGaXJzdCBlbGVtZW50IGluIHRoZSByYW5nZSAoaW5jbHVzaXZlKS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBoaSAtIExhc3QgZWxlbWVudCBpbiB0aGUgcmFuZ2UuXG4gKi9cbmZ1bmN0aW9uIHJldmVyc2VSdW4oYXJyYXksIGxvLCBoaSkge1xuICBoaS0tO1xuXG4gIHdoaWxlIChsbyA8IGhpKSB7XG4gICAgdmFyIHQgPSBhcnJheVtsb107XG4gICAgYXJyYXlbbG8rK10gPSBhcnJheVtoaV07XG4gICAgYXJyYXlbaGktLV0gPSB0O1xuICB9XG59XG5cbi8qKlxuICogUGVyZm9ybSB0aGUgYmluYXJ5IHNvcnQgb2YgdGhlIGFycmF5IGluIHRoZSByYW5nZSBbbG8sIGhpKSB3aGVyZSBzdGFydCBpc1xuICogdGhlIGZpcnN0IGVsZW1lbnQgcG9zc2libHkgb3V0IG9mIG9yZGVyLlxuICpcbiAqIEBwYXJhbSB7YXJyYXl9IGFycmF5IC0gVGhlIGFycmF5IHRvIHNvcnQuXG4gKiBAcGFyYW0ge251bWJlcn0gbG8gLSBGaXJzdCBlbGVtZW50IGluIHRoZSByYW5nZSAoaW5jbHVzaXZlKS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBoaSAtIExhc3QgZWxlbWVudCBpbiB0aGUgcmFuZ2UuXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgLSBGaXJzdCBlbGVtZW50IHBvc3NpYmx5IG91dCBvZiBvcmRlci5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbXBhcmUgLSBJdGVtIGNvbXBhcmlzb24gZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJpbmFyeUluc2VydGlvblNvcnQoYXJyYXksIGxvLCBoaSwgc3RhcnQsIGNvbXBhcmUpIHtcbiAgaWYgKHN0YXJ0ID09PSBsbykge1xuICAgIHN0YXJ0Kys7XG4gIH1cblxuICBmb3IgKDsgc3RhcnQgPCBoaTsgc3RhcnQrKykge1xuICAgIHZhciBwaXZvdCA9IGFycmF5W3N0YXJ0XTtcblxuICAgIC8vIFJhbmdlcyBvZiB0aGUgYXJyYXkgd2hlcmUgcGl2b3QgYmVsb25nc1xuICAgIHZhciBsZWZ0ID0gbG87XG4gICAgdmFyIHJpZ2h0ID0gc3RhcnQ7XG5cbiAgICAvKlxuICAgICAqICAgcGl2b3QgPj0gYXJyYXlbaV0gZm9yIGkgaW4gW2xvLCBsZWZ0KVxuICAgICAqICAgcGl2b3QgPCAgYXJyYXlbaV0gZm9yIGkgaW4gIGluIFtyaWdodCwgc3RhcnQpXG4gICAgICovXG4gICAgd2hpbGUgKGxlZnQgPCByaWdodCkge1xuICAgICAgdmFyIG1pZCA9IGxlZnQgKyByaWdodCA+Pj4gMTtcblxuICAgICAgaWYgKGNvbXBhcmUocGl2b3QsIGFycmF5W21pZF0pIDwgMCkge1xuICAgICAgICByaWdodCA9IG1pZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlZnQgPSBtaWQgKyAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qXG4gICAgICogTW92ZSBlbGVtZW50cyByaWdodCB0byBtYWtlIHJvb20gZm9yIHRoZSBwaXZvdC4gSWYgdGhlcmUgYXJlIGVsZW1lbnRzXG4gICAgICogZXF1YWwgdG8gcGl2b3QsIGxlZnQgcG9pbnRzIHRvIHRoZSBmaXJzdCBzbG90IGFmdGVyIHRoZW06IHRoaXMgaXMgYWxzb1xuICAgICAqIGEgcmVhc29uIGZvciB3aGljaCBUaW1Tb3J0IGlzIHN0YWJsZVxuICAgICAqL1xuICAgIHZhciBuID0gc3RhcnQgLSBsZWZ0O1xuICAgIC8vIFN3aXRjaCBpcyBqdXN0IGFuIG9wdGltaXphdGlvbiBmb3Igc21hbGwgYXJyYXlzXG4gICAgc3dpdGNoIChuKSB7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGFycmF5W2xlZnQgKyAzXSA9IGFycmF5W2xlZnQgKyAyXTtcbiAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgMjpcbiAgICAgICAgYXJyYXlbbGVmdCArIDJdID0gYXJyYXlbbGVmdCArIDFdO1xuICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSAxOlxuICAgICAgICBhcnJheVtsZWZ0ICsgMV0gPSBhcnJheVtsZWZ0XTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB3aGlsZSAobiA+IDApIHtcbiAgICAgICAgICBhcnJheVtsZWZ0ICsgbl0gPSBhcnJheVtsZWZ0ICsgbiAtIDFdO1xuICAgICAgICAgIG4tLTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFycmF5W2xlZnRdID0gcGl2b3Q7XG4gIH1cbn1cblxuLyoqXG4gKiBGaW5kIHRoZSBwb3NpdGlvbiBhdCB3aGljaCB0byBpbnNlcnQgYSB2YWx1ZSBpbiBhIHNvcnRlZCByYW5nZS4gSWYgdGhlIHJhbmdlXG4gKiBjb250YWlucyBlbGVtZW50cyBlcXVhbCB0byB0aGUgdmFsdWUgdGhlIGxlZnRtb3N0IGVsZW1lbnQgaW5kZXggaXMgcmV0dXJuZWRcbiAqIChmb3Igc3RhYmlsaXR5KS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBWYWx1ZSB0byBpbnNlcnQuXG4gKiBAcGFyYW0ge2FycmF5fSBhcnJheSAtIFRoZSBhcnJheSBpbiB3aGljaCB0byBpbnNlcnQgdmFsdWUuXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgLSBGaXJzdCBlbGVtZW50IGluIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggLSBMZW5ndGggb2YgdGhlIHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IGhpbnQgLSBUaGUgaW5kZXggYXQgd2hpY2ggdG8gYmVnaW4gdGhlIHNlYXJjaC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbXBhcmUgLSBJdGVtIGNvbXBhcmlzb24gZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtudW1iZXJ9IC0gVGhlIGluZGV4IHdoZXJlIHRvIGluc2VydCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2FsbG9wTGVmdCh2YWx1ZSwgYXJyYXksIHN0YXJ0LCBsZW5ndGgsIGhpbnQsIGNvbXBhcmUpIHtcbiAgdmFyIGxhc3RPZmZzZXQgPSAwO1xuICB2YXIgbWF4T2Zmc2V0ID0gMDtcbiAgdmFyIG9mZnNldCA9IDE7XG5cbiAgaWYgKGNvbXBhcmUodmFsdWUsIGFycmF5W3N0YXJ0ICsgaGludF0pID4gMCkge1xuICAgIG1heE9mZnNldCA9IGxlbmd0aCAtIGhpbnQ7XG5cbiAgICB3aGlsZSAob2Zmc2V0IDwgbWF4T2Zmc2V0ICYmIGNvbXBhcmUodmFsdWUsIGFycmF5W3N0YXJ0ICsgaGludCArIG9mZnNldF0pID4gMCkge1xuICAgICAgbGFzdE9mZnNldCA9IG9mZnNldDtcbiAgICAgIG9mZnNldCA9IChvZmZzZXQgPDwgMSkgKyAxO1xuXG4gICAgICBpZiAob2Zmc2V0IDw9IDApIHtcbiAgICAgICAgb2Zmc2V0ID0gbWF4T2Zmc2V0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvZmZzZXQgPiBtYXhPZmZzZXQpIHtcbiAgICAgIG9mZnNldCA9IG1heE9mZnNldDtcbiAgICB9XG5cbiAgICAvLyBNYWtlIG9mZnNldHMgcmVsYXRpdmUgdG8gc3RhcnRcbiAgICBsYXN0T2Zmc2V0ICs9IGhpbnQ7XG4gICAgb2Zmc2V0ICs9IGhpbnQ7XG5cbiAgICAvLyB2YWx1ZSA8PSBhcnJheVtzdGFydCArIGhpbnRdXG4gIH0gZWxzZSB7XG4gICAgbWF4T2Zmc2V0ID0gaGludCArIDE7XG4gICAgd2hpbGUgKG9mZnNldCA8IG1heE9mZnNldCAmJiBjb21wYXJlKHZhbHVlLCBhcnJheVtzdGFydCArIGhpbnQgLSBvZmZzZXRdKSA8PSAwKSB7XG4gICAgICBsYXN0T2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgb2Zmc2V0ID0gKG9mZnNldCA8PCAxKSArIDE7XG5cbiAgICAgIGlmIChvZmZzZXQgPD0gMCkge1xuICAgICAgICBvZmZzZXQgPSBtYXhPZmZzZXQ7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvZmZzZXQgPiBtYXhPZmZzZXQpIHtcbiAgICAgIG9mZnNldCA9IG1heE9mZnNldDtcbiAgICB9XG5cbiAgICAvLyBNYWtlIG9mZnNldHMgcmVsYXRpdmUgdG8gc3RhcnRcbiAgICB2YXIgdG1wID0gbGFzdE9mZnNldDtcbiAgICBsYXN0T2Zmc2V0ID0gaGludCAtIG9mZnNldDtcbiAgICBvZmZzZXQgPSBoaW50IC0gdG1wO1xuICB9XG5cbiAgLypcbiAgICogTm93IGFycmF5W3N0YXJ0K2xhc3RPZmZzZXRdIDwgdmFsdWUgPD0gYXJyYXlbc3RhcnQrb2Zmc2V0XSwgc28gdmFsdWVcbiAgICogYmVsb25ncyBzb21ld2hlcmUgaW4gdGhlIHJhbmdlIChzdGFydCArIGxhc3RPZmZzZXQsIHN0YXJ0ICsgb2Zmc2V0XS4gRG8gYVxuICAgKiBiaW5hcnkgc2VhcmNoLCB3aXRoIGludmFyaWFudCBhcnJheVtzdGFydCArIGxhc3RPZmZzZXQgLSAxXSA8IHZhbHVlIDw9XG4gICAqIGFycmF5W3N0YXJ0ICsgb2Zmc2V0XS5cbiAgICovXG4gIGxhc3RPZmZzZXQrKztcbiAgd2hpbGUgKGxhc3RPZmZzZXQgPCBvZmZzZXQpIHtcbiAgICB2YXIgbSA9IGxhc3RPZmZzZXQgKyAob2Zmc2V0IC0gbGFzdE9mZnNldCA+Pj4gMSk7XG5cbiAgICBpZiAoY29tcGFyZSh2YWx1ZSwgYXJyYXlbc3RhcnQgKyBtXSkgPiAwKSB7XG4gICAgICBsYXN0T2Zmc2V0ID0gbSArIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9mZnNldCA9IG07XG4gICAgfVxuICB9XG4gIHJldHVybiBvZmZzZXQ7XG59XG5cbi8qKlxuICogRmluZCB0aGUgcG9zaXRpb24gYXQgd2hpY2ggdG8gaW5zZXJ0IGEgdmFsdWUgaW4gYSBzb3J0ZWQgcmFuZ2UuIElmIHRoZSByYW5nZVxuICogY29udGFpbnMgZWxlbWVudHMgZXF1YWwgdG8gdGhlIHZhbHVlIHRoZSByaWdodG1vc3QgZWxlbWVudCBpbmRleCBpcyByZXR1cm5lZFxuICogKGZvciBzdGFiaWxpdHkpLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIFZhbHVlIHRvIGluc2VydC5cbiAqIEBwYXJhbSB7YXJyYXl9IGFycmF5IC0gVGhlIGFycmF5IGluIHdoaWNoIHRvIGluc2VydCB2YWx1ZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCAtIEZpcnN0IGVsZW1lbnQgaW4gdGhlIHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCAtIExlbmd0aCBvZiB0aGUgcmFuZ2UuXG4gKiBAcGFyYW0ge251bWJlcn0gaGludCAtIFRoZSBpbmRleCBhdCB3aGljaCB0byBiZWdpbiB0aGUgc2VhcmNoLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29tcGFyZSAtIEl0ZW0gY29tcGFyaXNvbiBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge251bWJlcn0gLSBUaGUgaW5kZXggd2hlcmUgdG8gaW5zZXJ0IHZhbHVlLlxuICovXG5mdW5jdGlvbiBnYWxsb3BSaWdodCh2YWx1ZSwgYXJyYXksIHN0YXJ0LCBsZW5ndGgsIGhpbnQsIGNvbXBhcmUpIHtcbiAgdmFyIGxhc3RPZmZzZXQgPSAwO1xuICB2YXIgbWF4T2Zmc2V0ID0gMDtcbiAgdmFyIG9mZnNldCA9IDE7XG5cbiAgaWYgKGNvbXBhcmUodmFsdWUsIGFycmF5W3N0YXJ0ICsgaGludF0pIDwgMCkge1xuICAgIG1heE9mZnNldCA9IGhpbnQgKyAxO1xuXG4gICAgd2hpbGUgKG9mZnNldCA8IG1heE9mZnNldCAmJiBjb21wYXJlKHZhbHVlLCBhcnJheVtzdGFydCArIGhpbnQgLSBvZmZzZXRdKSA8IDApIHtcbiAgICAgIGxhc3RPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICBvZmZzZXQgPSAob2Zmc2V0IDw8IDEpICsgMTtcblxuICAgICAgaWYgKG9mZnNldCA8PSAwKSB7XG4gICAgICAgIG9mZnNldCA9IG1heE9mZnNldDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob2Zmc2V0ID4gbWF4T2Zmc2V0KSB7XG4gICAgICBvZmZzZXQgPSBtYXhPZmZzZXQ7XG4gICAgfVxuXG4gICAgLy8gTWFrZSBvZmZzZXRzIHJlbGF0aXZlIHRvIHN0YXJ0XG4gICAgdmFyIHRtcCA9IGxhc3RPZmZzZXQ7XG4gICAgbGFzdE9mZnNldCA9IGhpbnQgLSBvZmZzZXQ7XG4gICAgb2Zmc2V0ID0gaGludCAtIHRtcDtcblxuICAgIC8vIHZhbHVlID49IGFycmF5W3N0YXJ0ICsgaGludF1cbiAgfSBlbHNlIHtcbiAgICBtYXhPZmZzZXQgPSBsZW5ndGggLSBoaW50O1xuXG4gICAgd2hpbGUgKG9mZnNldCA8IG1heE9mZnNldCAmJiBjb21wYXJlKHZhbHVlLCBhcnJheVtzdGFydCArIGhpbnQgKyBvZmZzZXRdKSA+PSAwKSB7XG4gICAgICBsYXN0T2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgb2Zmc2V0ID0gKG9mZnNldCA8PCAxKSArIDE7XG5cbiAgICAgIGlmIChvZmZzZXQgPD0gMCkge1xuICAgICAgICBvZmZzZXQgPSBtYXhPZmZzZXQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9mZnNldCA+IG1heE9mZnNldCkge1xuICAgICAgb2Zmc2V0ID0gbWF4T2Zmc2V0O1xuICAgIH1cblxuICAgIC8vIE1ha2Ugb2Zmc2V0cyByZWxhdGl2ZSB0byBzdGFydFxuICAgIGxhc3RPZmZzZXQgKz0gaGludDtcbiAgICBvZmZzZXQgKz0gaGludDtcbiAgfVxuXG4gIC8qXG4gICAqIE5vdyBhcnJheVtzdGFydCtsYXN0T2Zmc2V0XSA8IHZhbHVlIDw9IGFycmF5W3N0YXJ0K29mZnNldF0sIHNvIHZhbHVlXG4gICAqIGJlbG9uZ3Mgc29tZXdoZXJlIGluIHRoZSByYW5nZSAoc3RhcnQgKyBsYXN0T2Zmc2V0LCBzdGFydCArIG9mZnNldF0uIERvIGFcbiAgICogYmluYXJ5IHNlYXJjaCwgd2l0aCBpbnZhcmlhbnQgYXJyYXlbc3RhcnQgKyBsYXN0T2Zmc2V0IC0gMV0gPCB2YWx1ZSA8PVxuICAgKiBhcnJheVtzdGFydCArIG9mZnNldF0uXG4gICAqL1xuICBsYXN0T2Zmc2V0Kys7XG5cbiAgd2hpbGUgKGxhc3RPZmZzZXQgPCBvZmZzZXQpIHtcbiAgICB2YXIgbSA9IGxhc3RPZmZzZXQgKyAob2Zmc2V0IC0gbGFzdE9mZnNldCA+Pj4gMSk7XG5cbiAgICBpZiAoY29tcGFyZSh2YWx1ZSwgYXJyYXlbc3RhcnQgKyBtXSkgPCAwKSB7XG4gICAgICBvZmZzZXQgPSBtO1xuICAgIH0gZWxzZSB7XG4gICAgICBsYXN0T2Zmc2V0ID0gbSArIDE7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9mZnNldDtcbn1cblxudmFyIFRpbVNvcnQgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFRpbVNvcnQoYXJyYXksIGNvbXBhcmUpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGltU29ydCk7XG5cbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG4gICAgdGhpcy5jb21wYXJlID0gY29tcGFyZTtcbiAgICB0aGlzLm1pbkdhbGxvcCA9IERFRkFVTFRfTUlOX0dBTExPUElORztcbiAgICB0aGlzLmxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHRoaXMudG1wU3RvcmFnZUxlbmd0aCA9IERFRkFVTFRfVE1QX1NUT1JBR0VfTEVOR1RIO1xuICAgIGlmICh0aGlzLmxlbmd0aCA8IDIgKiBERUZBVUxUX1RNUF9TVE9SQUdFX0xFTkdUSCkge1xuICAgICAgdGhpcy50bXBTdG9yYWdlTGVuZ3RoID0gdGhpcy5sZW5ndGggPj4+IDE7XG4gICAgfVxuXG4gICAgdGhpcy50bXAgPSBuZXcgQXJyYXkodGhpcy50bXBTdG9yYWdlTGVuZ3RoKTtcblxuICAgIHRoaXMuc3RhY2tMZW5ndGggPSB0aGlzLmxlbmd0aCA8IDEyMCA/IDUgOiB0aGlzLmxlbmd0aCA8IDE1NDIgPyAxMCA6IHRoaXMubGVuZ3RoIDwgMTE5MTUxID8gMTkgOiA0MDtcblxuICAgIHRoaXMucnVuU3RhcnQgPSBuZXcgQXJyYXkodGhpcy5zdGFja0xlbmd0aCk7XG4gICAgdGhpcy5ydW5MZW5ndGggPSBuZXcgQXJyYXkodGhpcy5zdGFja0xlbmd0aCk7XG4gICAgdGhpcy5zdGFja1NpemUgPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1c2ggYSBuZXcgcnVuIG9uIFRpbVNvcnQncyBzdGFjay5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJ1blN0YXJ0IC0gU3RhcnQgaW5kZXggb2YgdGhlIHJ1biBpbiB0aGUgb3JpZ2luYWwgYXJyYXkuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBydW5MZW5ndGggLSBMZW5ndGggb2YgdGhlIHJ1bjtcbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoVGltU29ydCwgW3tcbiAgICBrZXk6ICdwdXNoUnVuJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHVzaFJ1bihydW5TdGFydCwgcnVuTGVuZ3RoKSB7XG4gICAgICB0aGlzLnJ1blN0YXJ0W3RoaXMuc3RhY2tTaXplXSA9IHJ1blN0YXJ0O1xuICAgICAgdGhpcy5ydW5MZW5ndGhbdGhpcy5zdGFja1NpemVdID0gcnVuTGVuZ3RoO1xuICAgICAgdGhpcy5zdGFja1NpemUgKz0gMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXJnZSBydW5zIG9uIFRpbVNvcnQncyBzdGFjayBzbyB0aGF0IHRoZSBmb2xsb3dpbmcgaG9sZHMgZm9yIGFsbCBpOlxuICAgICAqIDEpIHJ1bkxlbmd0aFtpIC0gM10gPiBydW5MZW5ndGhbaSAtIDJdICsgcnVuTGVuZ3RoW2kgLSAxXVxuICAgICAqIDIpIHJ1bkxlbmd0aFtpIC0gMl0gPiBydW5MZW5ndGhbaSAtIDFdXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ21lcmdlUnVucycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1lcmdlUnVucygpIHtcbiAgICAgIHdoaWxlICh0aGlzLnN0YWNrU2l6ZSA+IDEpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLnN0YWNrU2l6ZSAtIDI7XG5cbiAgICAgICAgaWYgKG4gPj0gMSAmJiB0aGlzLnJ1bkxlbmd0aFtuIC0gMV0gPD0gdGhpcy5ydW5MZW5ndGhbbl0gKyB0aGlzLnJ1bkxlbmd0aFtuICsgMV0gfHwgbiA+PSAyICYmIHRoaXMucnVuTGVuZ3RoW24gLSAyXSA8PSB0aGlzLnJ1bkxlbmd0aFtuXSArIHRoaXMucnVuTGVuZ3RoW24gLSAxXSkge1xuXG4gICAgICAgICAgaWYgKHRoaXMucnVuTGVuZ3RoW24gLSAxXSA8IHRoaXMucnVuTGVuZ3RoW24gKyAxXSkge1xuICAgICAgICAgICAgbi0tO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJ1bkxlbmd0aFtuXSA+IHRoaXMucnVuTGVuZ3RoW24gKyAxXSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWVyZ2VBdChuKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXJnZSBhbGwgcnVucyBvbiBUaW1Tb3J0J3Mgc3RhY2sgdW50aWwgb25seSBvbmUgcmVtYWlucy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZm9yY2VNZXJnZVJ1bnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JjZU1lcmdlUnVucygpIHtcbiAgICAgIHdoaWxlICh0aGlzLnN0YWNrU2l6ZSA+IDEpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLnN0YWNrU2l6ZSAtIDI7XG5cbiAgICAgICAgaWYgKG4gPiAwICYmIHRoaXMucnVuTGVuZ3RoW24gLSAxXSA8IHRoaXMucnVuTGVuZ3RoW24gKyAxXSkge1xuICAgICAgICAgIG4tLTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubWVyZ2VBdChuKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXJnZSB0aGUgcnVucyBvbiB0aGUgc3RhY2sgYXQgcG9zaXRpb25zIGkgYW5kIGkrMS4gTXVzdCBiZSBhbHdheXMgYmUgY2FsbGVkXG4gICAgICogd2l0aCBpPXN0YWNrU2l6ZS0yIG9yIGk9c3RhY2tTaXplLTMgKHRoYXQgaXMsIHdlIG1lcmdlIG9uIHRvcCBvZiB0aGUgc3RhY2spLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGkgLSBJbmRleCBvZiB0aGUgcnVuIHRvIG1lcmdlIGluIFRpbVNvcnQncyBzdGFjay5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnbWVyZ2VBdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1lcmdlQXQoaSkge1xuICAgICAgdmFyIGNvbXBhcmUgPSB0aGlzLmNvbXBhcmU7XG4gICAgICB2YXIgYXJyYXkgPSB0aGlzLmFycmF5O1xuXG4gICAgICB2YXIgc3RhcnQxID0gdGhpcy5ydW5TdGFydFtpXTtcbiAgICAgIHZhciBsZW5ndGgxID0gdGhpcy5ydW5MZW5ndGhbaV07XG4gICAgICB2YXIgc3RhcnQyID0gdGhpcy5ydW5TdGFydFtpICsgMV07XG4gICAgICB2YXIgbGVuZ3RoMiA9IHRoaXMucnVuTGVuZ3RoW2kgKyAxXTtcblxuICAgICAgdGhpcy5ydW5MZW5ndGhbaV0gPSBsZW5ndGgxICsgbGVuZ3RoMjtcblxuICAgICAgaWYgKGkgPT09IHRoaXMuc3RhY2tTaXplIC0gMykge1xuICAgICAgICB0aGlzLnJ1blN0YXJ0W2kgKyAxXSA9IHRoaXMucnVuU3RhcnRbaSArIDJdO1xuICAgICAgICB0aGlzLnJ1bkxlbmd0aFtpICsgMV0gPSB0aGlzLnJ1bkxlbmd0aFtpICsgMl07XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc3RhY2tTaXplLS07XG5cbiAgICAgIC8qXG4gICAgICAgKiBGaW5kIHdoZXJlIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBzZWNvbmQgcnVuIGdvZXMgaW4gcnVuMS4gUHJldmlvdXNcbiAgICAgICAqIGVsZW1lbnRzIGluIHJ1bjEgYXJlIGFscmVhZHkgaW4gcGxhY2VcbiAgICAgICAqL1xuICAgICAgdmFyIGsgPSBnYWxsb3BSaWdodChhcnJheVtzdGFydDJdLCBhcnJheSwgc3RhcnQxLCBsZW5ndGgxLCAwLCBjb21wYXJlKTtcbiAgICAgIHN0YXJ0MSArPSBrO1xuICAgICAgbGVuZ3RoMSAtPSBrO1xuXG4gICAgICBpZiAobGVuZ3RoMSA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8qXG4gICAgICAgKiBGaW5kIHdoZXJlIHRoZSBsYXN0IGVsZW1lbnQgaW4gdGhlIGZpcnN0IHJ1biBnb2VzIGluIHJ1bjIuIE5leHQgZWxlbWVudHNcbiAgICAgICAqIGluIHJ1bjIgYXJlIGFscmVhZHkgaW4gcGxhY2VcbiAgICAgICAqL1xuICAgICAgbGVuZ3RoMiA9IGdhbGxvcExlZnQoYXJyYXlbc3RhcnQxICsgbGVuZ3RoMSAtIDFdLCBhcnJheSwgc3RhcnQyLCBsZW5ndGgyLCBsZW5ndGgyIC0gMSwgY29tcGFyZSk7XG5cbiAgICAgIGlmIChsZW5ndGgyID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLypcbiAgICAgICAqIE1lcmdlIHJlbWFpbmluZyBydW5zLiBBIHRtcCBhcnJheSB3aXRoIGxlbmd0aCA9IG1pbihsZW5ndGgxLCBsZW5ndGgyKSBpc1xuICAgICAgICogdXNlZFxuICAgICAgICovXG4gICAgICBpZiAobGVuZ3RoMSA8PSBsZW5ndGgyKSB7XG4gICAgICAgIHRoaXMubWVyZ2VMb3coc3RhcnQxLCBsZW5ndGgxLCBzdGFydDIsIGxlbmd0aDIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5tZXJnZUhpZ2goc3RhcnQxLCBsZW5ndGgxLCBzdGFydDIsIGxlbmd0aDIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1lcmdlIHR3byBhZGphY2VudCBydW5zIGluIGEgc3RhYmxlIHdheS4gVGhlIHJ1bnMgbXVzdCBiZSBzdWNoIHRoYXQgdGhlXG4gICAgICogZmlyc3QgZWxlbWVudCBvZiBydW4xIGlzIGJpZ2dlciB0aGFuIHRoZSBmaXJzdCBlbGVtZW50IGluIHJ1bjIgYW5kIHRoZVxuICAgICAqIGxhc3QgZWxlbWVudCBvZiBydW4xIGlzIGdyZWF0ZXIgdGhhbiBhbGwgdGhlIGVsZW1lbnRzIGluIHJ1bjIuXG4gICAgICogVGhlIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIHdoZW4gcnVuMS5sZW5ndGggPD0gcnVuMi5sZW5ndGggYXMgaXQgdXNlc1xuICAgICAqIFRpbVNvcnQgdGVtcG9yYXJ5IGFycmF5IHRvIHN0b3JlIHJ1bjEuIFVzZSBtZXJnZUhpZ2ggaWYgcnVuMS5sZW5ndGggPlxuICAgICAqIHJ1bjIubGVuZ3RoLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0MSAtIEZpcnN0IGVsZW1lbnQgaW4gcnVuMS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoMSAtIExlbmd0aCBvZiBydW4xLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydDIgLSBGaXJzdCBlbGVtZW50IGluIHJ1bjIuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aDIgLSBMZW5ndGggb2YgcnVuMi5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnbWVyZ2VMb3cnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtZXJnZUxvdyhzdGFydDEsIGxlbmd0aDEsIHN0YXJ0MiwgbGVuZ3RoMikge1xuXG4gICAgICB2YXIgY29tcGFyZSA9IHRoaXMuY29tcGFyZTtcbiAgICAgIHZhciBhcnJheSA9IHRoaXMuYXJyYXk7XG4gICAgICB2YXIgdG1wID0gdGhpcy50bXA7XG4gICAgICB2YXIgaSA9IDA7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGgxOyBpKyspIHtcbiAgICAgICAgdG1wW2ldID0gYXJyYXlbc3RhcnQxICsgaV07XG4gICAgICB9XG5cbiAgICAgIHZhciBjdXJzb3IxID0gMDtcbiAgICAgIHZhciBjdXJzb3IyID0gc3RhcnQyO1xuICAgICAgdmFyIGRlc3QgPSBzdGFydDE7XG5cbiAgICAgIGFycmF5W2Rlc3QrK10gPSBhcnJheVtjdXJzb3IyKytdO1xuXG4gICAgICBpZiAoLS1sZW5ndGgyID09PSAwKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGgxOyBpKyspIHtcbiAgICAgICAgICBhcnJheVtkZXN0ICsgaV0gPSB0bXBbY3Vyc29yMSArIGldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGxlbmd0aDEgPT09IDEpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDI7IGkrKykge1xuICAgICAgICAgIGFycmF5W2Rlc3QgKyBpXSA9IGFycmF5W2N1cnNvcjIgKyBpXTtcbiAgICAgICAgfVxuICAgICAgICBhcnJheVtkZXN0ICsgbGVuZ3RoMl0gPSB0bXBbY3Vyc29yMV07XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIG1pbkdhbGxvcCA9IHRoaXMubWluR2FsbG9wO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgY291bnQxID0gMDtcbiAgICAgICAgdmFyIGNvdW50MiA9IDA7XG4gICAgICAgIHZhciBleGl0ID0gZmFsc2U7XG5cbiAgICAgICAgZG8ge1xuICAgICAgICAgIGlmIChjb21wYXJlKGFycmF5W2N1cnNvcjJdLCB0bXBbY3Vyc29yMV0pIDwgMCkge1xuICAgICAgICAgICAgYXJyYXlbZGVzdCsrXSA9IGFycmF5W2N1cnNvcjIrK107XG4gICAgICAgICAgICBjb3VudDIrKztcbiAgICAgICAgICAgIGNvdW50MSA9IDA7XG5cbiAgICAgICAgICAgIGlmICgtLWxlbmd0aDIgPT09IDApIHtcbiAgICAgICAgICAgICAgZXhpdCA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcnJheVtkZXN0KytdID0gdG1wW2N1cnNvcjErK107XG4gICAgICAgICAgICBjb3VudDErKztcbiAgICAgICAgICAgIGNvdW50MiA9IDA7XG4gICAgICAgICAgICBpZiAoLS1sZW5ndGgxID09PSAxKSB7XG4gICAgICAgICAgICAgIGV4aXQgPSB0cnVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKChjb3VudDEgfCBjb3VudDIpIDwgbWluR2FsbG9wKTtcblxuICAgICAgICBpZiAoZXhpdCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgZG8ge1xuICAgICAgICAgIGNvdW50MSA9IGdhbGxvcFJpZ2h0KGFycmF5W2N1cnNvcjJdLCB0bXAsIGN1cnNvcjEsIGxlbmd0aDEsIDAsIGNvbXBhcmUpO1xuXG4gICAgICAgICAgaWYgKGNvdW50MSAhPT0gMCkge1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvdW50MTsgaSsrKSB7XG4gICAgICAgICAgICAgIGFycmF5W2Rlc3QgKyBpXSA9IHRtcFtjdXJzb3IxICsgaV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlc3QgKz0gY291bnQxO1xuICAgICAgICAgICAgY3Vyc29yMSArPSBjb3VudDE7XG4gICAgICAgICAgICBsZW5ndGgxIC09IGNvdW50MTtcbiAgICAgICAgICAgIGlmIChsZW5ndGgxIDw9IDEpIHtcbiAgICAgICAgICAgICAgZXhpdCA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGFycmF5W2Rlc3QrK10gPSBhcnJheVtjdXJzb3IyKytdO1xuXG4gICAgICAgICAgaWYgKC0tbGVuZ3RoMiA9PT0gMCkge1xuICAgICAgICAgICAgZXhpdCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb3VudDIgPSBnYWxsb3BMZWZ0KHRtcFtjdXJzb3IxXSwgYXJyYXksIGN1cnNvcjIsIGxlbmd0aDIsIDAsIGNvbXBhcmUpO1xuXG4gICAgICAgICAgaWYgKGNvdW50MiAhPT0gMCkge1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvdW50MjsgaSsrKSB7XG4gICAgICAgICAgICAgIGFycmF5W2Rlc3QgKyBpXSA9IGFycmF5W2N1cnNvcjIgKyBpXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVzdCArPSBjb3VudDI7XG4gICAgICAgICAgICBjdXJzb3IyICs9IGNvdW50MjtcbiAgICAgICAgICAgIGxlbmd0aDIgLT0gY291bnQyO1xuXG4gICAgICAgICAgICBpZiAobGVuZ3RoMiA9PT0gMCkge1xuICAgICAgICAgICAgICBleGl0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGFycmF5W2Rlc3QrK10gPSB0bXBbY3Vyc29yMSsrXTtcblxuICAgICAgICAgIGlmICgtLWxlbmd0aDEgPT09IDEpIHtcbiAgICAgICAgICAgIGV4aXQgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbWluR2FsbG9wLS07XG4gICAgICAgIH0gd2hpbGUgKGNvdW50MSA+PSBERUZBVUxUX01JTl9HQUxMT1BJTkcgfHwgY291bnQyID49IERFRkFVTFRfTUlOX0dBTExPUElORyk7XG5cbiAgICAgICAgaWYgKGV4aXQpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtaW5HYWxsb3AgPCAwKSB7XG4gICAgICAgICAgbWluR2FsbG9wID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIG1pbkdhbGxvcCArPSAyO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm1pbkdhbGxvcCA9IG1pbkdhbGxvcDtcblxuICAgICAgaWYgKG1pbkdhbGxvcCA8IDEpIHtcbiAgICAgICAgdGhpcy5taW5HYWxsb3AgPSAxO1xuICAgICAgfVxuXG4gICAgICBpZiAobGVuZ3RoMSA9PT0gMSkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoMjsgaSsrKSB7XG4gICAgICAgICAgYXJyYXlbZGVzdCArIGldID0gYXJyYXlbY3Vyc29yMiArIGldO1xuICAgICAgICB9XG4gICAgICAgIGFycmF5W2Rlc3QgKyBsZW5ndGgyXSA9IHRtcFtjdXJzb3IxXTtcbiAgICAgIH0gZWxzZSBpZiAobGVuZ3RoMSA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ21lcmdlTG93IHByZWNvbmRpdGlvbnMgd2VyZSBub3QgcmVzcGVjdGVkJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoMTsgaSsrKSB7XG4gICAgICAgICAgYXJyYXlbZGVzdCArIGldID0gdG1wW2N1cnNvcjEgKyBpXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1lcmdlIHR3byBhZGphY2VudCBydW5zIGluIGEgc3RhYmxlIHdheS4gVGhlIHJ1bnMgbXVzdCBiZSBzdWNoIHRoYXQgdGhlXG4gICAgICogZmlyc3QgZWxlbWVudCBvZiBydW4xIGlzIGJpZ2dlciB0aGFuIHRoZSBmaXJzdCBlbGVtZW50IGluIHJ1bjIgYW5kIHRoZVxuICAgICAqIGxhc3QgZWxlbWVudCBvZiBydW4xIGlzIGdyZWF0ZXIgdGhhbiBhbGwgdGhlIGVsZW1lbnRzIGluIHJ1bjIuXG4gICAgICogVGhlIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIHdoZW4gcnVuMS5sZW5ndGggPiBydW4yLmxlbmd0aCBhcyBpdCB1c2VzXG4gICAgICogVGltU29ydCB0ZW1wb3JhcnkgYXJyYXkgdG8gc3RvcmUgcnVuMi4gVXNlIG1lcmdlTG93IGlmIHJ1bjEubGVuZ3RoIDw9XG4gICAgICogcnVuMi5sZW5ndGguXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQxIC0gRmlyc3QgZWxlbWVudCBpbiBydW4xLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGgxIC0gTGVuZ3RoIG9mIHJ1bjEuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0MiAtIEZpcnN0IGVsZW1lbnQgaW4gcnVuMi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoMiAtIExlbmd0aCBvZiBydW4yLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdtZXJnZUhpZ2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtZXJnZUhpZ2goc3RhcnQxLCBsZW5ndGgxLCBzdGFydDIsIGxlbmd0aDIpIHtcbiAgICAgIHZhciBjb21wYXJlID0gdGhpcy5jb21wYXJlO1xuICAgICAgdmFyIGFycmF5ID0gdGhpcy5hcnJheTtcbiAgICAgIHZhciB0bXAgPSB0aGlzLnRtcDtcbiAgICAgIHZhciBpID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDI7IGkrKykge1xuICAgICAgICB0bXBbaV0gPSBhcnJheVtzdGFydDIgKyBpXTtcbiAgICAgIH1cblxuICAgICAgdmFyIGN1cnNvcjEgPSBzdGFydDEgKyBsZW5ndGgxIC0gMTtcbiAgICAgIHZhciBjdXJzb3IyID0gbGVuZ3RoMiAtIDE7XG4gICAgICB2YXIgZGVzdCA9IHN0YXJ0MiArIGxlbmd0aDIgLSAxO1xuICAgICAgdmFyIGN1c3RvbUN1cnNvciA9IDA7XG4gICAgICB2YXIgY3VzdG9tRGVzdCA9IDA7XG5cbiAgICAgIGFycmF5W2Rlc3QtLV0gPSBhcnJheVtjdXJzb3IxLS1dO1xuXG4gICAgICBpZiAoLS1sZW5ndGgxID09PSAwKSB7XG4gICAgICAgIGN1c3RvbUN1cnNvciA9IGRlc3QgLSAobGVuZ3RoMiAtIDEpO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGgyOyBpKyspIHtcbiAgICAgICAgICBhcnJheVtjdXN0b21DdXJzb3IgKyBpXSA9IHRtcFtpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGxlbmd0aDIgPT09IDEpIHtcbiAgICAgICAgZGVzdCAtPSBsZW5ndGgxO1xuICAgICAgICBjdXJzb3IxIC09IGxlbmd0aDE7XG4gICAgICAgIGN1c3RvbURlc3QgPSBkZXN0ICsgMTtcbiAgICAgICAgY3VzdG9tQ3Vyc29yID0gY3Vyc29yMSArIDE7XG5cbiAgICAgICAgZm9yIChpID0gbGVuZ3RoMSAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgYXJyYXlbY3VzdG9tRGVzdCArIGldID0gYXJyYXlbY3VzdG9tQ3Vyc29yICsgaV07XG4gICAgICAgIH1cblxuICAgICAgICBhcnJheVtkZXN0XSA9IHRtcFtjdXJzb3IyXTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgbWluR2FsbG9wID0gdGhpcy5taW5HYWxsb3A7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBjb3VudDEgPSAwO1xuICAgICAgICB2YXIgY291bnQyID0gMDtcbiAgICAgICAgdmFyIGV4aXQgPSBmYWxzZTtcblxuICAgICAgICBkbyB7XG4gICAgICAgICAgaWYgKGNvbXBhcmUodG1wW2N1cnNvcjJdLCBhcnJheVtjdXJzb3IxXSkgPCAwKSB7XG4gICAgICAgICAgICBhcnJheVtkZXN0LS1dID0gYXJyYXlbY3Vyc29yMS0tXTtcbiAgICAgICAgICAgIGNvdW50MSsrO1xuICAgICAgICAgICAgY291bnQyID0gMDtcbiAgICAgICAgICAgIGlmICgtLWxlbmd0aDEgPT09IDApIHtcbiAgICAgICAgICAgICAgZXhpdCA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcnJheVtkZXN0LS1dID0gdG1wW2N1cnNvcjItLV07XG4gICAgICAgICAgICBjb3VudDIrKztcbiAgICAgICAgICAgIGNvdW50MSA9IDA7XG4gICAgICAgICAgICBpZiAoLS1sZW5ndGgyID09PSAxKSB7XG4gICAgICAgICAgICAgIGV4aXQgPSB0cnVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKChjb3VudDEgfCBjb3VudDIpIDwgbWluR2FsbG9wKTtcblxuICAgICAgICBpZiAoZXhpdCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgZG8ge1xuICAgICAgICAgIGNvdW50MSA9IGxlbmd0aDEgLSBnYWxsb3BSaWdodCh0bXBbY3Vyc29yMl0sIGFycmF5LCBzdGFydDEsIGxlbmd0aDEsIGxlbmd0aDEgLSAxLCBjb21wYXJlKTtcblxuICAgICAgICAgIGlmIChjb3VudDEgIT09IDApIHtcbiAgICAgICAgICAgIGRlc3QgLT0gY291bnQxO1xuICAgICAgICAgICAgY3Vyc29yMSAtPSBjb3VudDE7XG4gICAgICAgICAgICBsZW5ndGgxIC09IGNvdW50MTtcbiAgICAgICAgICAgIGN1c3RvbURlc3QgPSBkZXN0ICsgMTtcbiAgICAgICAgICAgIGN1c3RvbUN1cnNvciA9IGN1cnNvcjEgKyAxO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSBjb3VudDEgLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICBhcnJheVtjdXN0b21EZXN0ICsgaV0gPSBhcnJheVtjdXN0b21DdXJzb3IgKyBpXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGxlbmd0aDEgPT09IDApIHtcbiAgICAgICAgICAgICAgZXhpdCA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGFycmF5W2Rlc3QtLV0gPSB0bXBbY3Vyc29yMi0tXTtcblxuICAgICAgICAgIGlmICgtLWxlbmd0aDIgPT09IDEpIHtcbiAgICAgICAgICAgIGV4aXQgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY291bnQyID0gbGVuZ3RoMiAtIGdhbGxvcExlZnQoYXJyYXlbY3Vyc29yMV0sIHRtcCwgMCwgbGVuZ3RoMiwgbGVuZ3RoMiAtIDEsIGNvbXBhcmUpO1xuXG4gICAgICAgICAgaWYgKGNvdW50MiAhPT0gMCkge1xuICAgICAgICAgICAgZGVzdCAtPSBjb3VudDI7XG4gICAgICAgICAgICBjdXJzb3IyIC09IGNvdW50MjtcbiAgICAgICAgICAgIGxlbmd0aDIgLT0gY291bnQyO1xuICAgICAgICAgICAgY3VzdG9tRGVzdCA9IGRlc3QgKyAxO1xuICAgICAgICAgICAgY3VzdG9tQ3Vyc29yID0gY3Vyc29yMiArIDE7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudDI7IGkrKykge1xuICAgICAgICAgICAgICBhcnJheVtjdXN0b21EZXN0ICsgaV0gPSB0bXBbY3VzdG9tQ3Vyc29yICsgaV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChsZW5ndGgyIDw9IDEpIHtcbiAgICAgICAgICAgICAgZXhpdCA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGFycmF5W2Rlc3QtLV0gPSBhcnJheVtjdXJzb3IxLS1dO1xuXG4gICAgICAgICAgaWYgKC0tbGVuZ3RoMSA9PT0gMCkge1xuICAgICAgICAgICAgZXhpdCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtaW5HYWxsb3AtLTtcbiAgICAgICAgfSB3aGlsZSAoY291bnQxID49IERFRkFVTFRfTUlOX0dBTExPUElORyB8fCBjb3VudDIgPj0gREVGQVVMVF9NSU5fR0FMTE9QSU5HKTtcblxuICAgICAgICBpZiAoZXhpdCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1pbkdhbGxvcCA8IDApIHtcbiAgICAgICAgICBtaW5HYWxsb3AgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgbWluR2FsbG9wICs9IDI7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubWluR2FsbG9wID0gbWluR2FsbG9wO1xuXG4gICAgICBpZiAobWluR2FsbG9wIDwgMSkge1xuICAgICAgICB0aGlzLm1pbkdhbGxvcCA9IDE7XG4gICAgICB9XG5cbiAgICAgIGlmIChsZW5ndGgyID09PSAxKSB7XG4gICAgICAgIGRlc3QgLT0gbGVuZ3RoMTtcbiAgICAgICAgY3Vyc29yMSAtPSBsZW5ndGgxO1xuICAgICAgICBjdXN0b21EZXN0ID0gZGVzdCArIDE7XG4gICAgICAgIGN1c3RvbUN1cnNvciA9IGN1cnNvcjEgKyAxO1xuXG4gICAgICAgIGZvciAoaSA9IGxlbmd0aDEgLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGFycmF5W2N1c3RvbURlc3QgKyBpXSA9IGFycmF5W2N1c3RvbUN1cnNvciArIGldO1xuICAgICAgICB9XG5cbiAgICAgICAgYXJyYXlbZGVzdF0gPSB0bXBbY3Vyc29yMl07XG4gICAgICB9IGVsc2UgaWYgKGxlbmd0aDIgPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtZXJnZUhpZ2ggcHJlY29uZGl0aW9ucyB3ZXJlIG5vdCByZXNwZWN0ZWQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1c3RvbUN1cnNvciA9IGRlc3QgLSAobGVuZ3RoMiAtIDEpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoMjsgaSsrKSB7XG4gICAgICAgICAgYXJyYXlbY3VzdG9tQ3Vyc29yICsgaV0gPSB0bXBbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVGltU29ydDtcbn0oKTtcblxuLyoqXG4gKiBTb3J0IGFuIGFycmF5IGluIHRoZSByYW5nZSBbbG8sIGhpKSB1c2luZyBUaW1Tb3J0LlxuICpcbiAqIEBwYXJhbSB7YXJyYXl9IGFycmF5IC0gVGhlIGFycmF5IHRvIHNvcnQuXG4gKiBAcGFyYW0ge251bWJlcn0gbG8gLSBGaXJzdCBlbGVtZW50IGluIHRoZSByYW5nZSAoaW5jbHVzaXZlKS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBoaSAtIExhc3QgZWxlbWVudCBpbiB0aGUgcmFuZ2UuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uPX0gY29tcGFyZSAtIEl0ZW0gY29tcGFyaXNvbiBmdW5jdGlvbi4gRGVmYXVsdCBpcyBhbHBoYWJldGljYWwuXG4gKi9cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluUnBiWE52Y25RdWFuTWlYU3dpYm1GdFpYTWlPbHNpWVhKeVlYa2lMQ0pzYnlJc0ltaHBJaXdpWTI5dGNHRnlaU0lzSWtGeWNtRjVJaXdpYVhOQmNuSmhlU0lzSWxSNWNHVkZjbkp2Y2lJc0luVnVaR1ZtYVc1bFpDSXNJbXhsYm1kMGFDSXNJbUZzY0doaFltVjBhV05oYkVOdmJYQmhjbVVpTENKeVpXMWhhVzVwYm1jaUxDSnlkVzVNWlc1bmRHZ2lMQ0pFUlVaQlZVeFVYMDFKVGw5TlJWSkhSU0lzSW0xaGEyVkJjMk5sYm1ScGJtZFNkVzRpTENKaWFXNWhjbmxKYm5ObGNuUnBiMjVUYjNKMElpd2lkSE1pTENKVWFXMVRiM0owSWl3aWJXbHVVblZ1SWl3aWJXbHVVblZ1VEdWdVozUm9JaXdpWm05eVkyVWlMQ0p3ZFhOb1VuVnVJaXdpYldWeVoyVlNkVzV6SWl3aVptOXlZMlZOWlhKblpWSjFibk1pTENKRVJVWkJWVXhVWDAxSlRsOUhRVXhNVDFCSlRrY2lMQ0pFUlVaQlZVeFVYMVJOVUY5VFZFOVNRVWRGWDB4RlRrZFVTQ0lzSWxCUFYwVlNVMTlQUmw5VVJVNGlMQ0pzYjJjeE1DSXNJbmdpTENKaElpd2lZaUlzSW1Gc0lpd2lZbXdpTENKMElpd2lZVk4wY2lJc0lsTjBjbWx1WnlJc0ltSlRkSElpTENKdUlpd2ljaUlzSW5KMWJraHBJaXdpY21WMlpYSnpaVkoxYmlJc0luTjBZWEowSWl3aWNHbDJiM1FpTENKc1pXWjBJaXdpY21sbmFIUWlMQ0p0YVdRaUxDSm5ZV3hzYjNCTVpXWjBJaXdpZG1Gc2RXVWlMQ0pvYVc1MElpd2liR0Z6ZEU5bVpuTmxkQ0lzSW0xaGVFOW1abk5sZENJc0ltOW1abk5sZENJc0luUnRjQ0lzSW0waUxDSm5ZV3hzYjNCU2FXZG9kQ0lzSW0xcGJrZGhiR3h2Y0NJc0luUnRjRk4wYjNKaFoyVk1aVzVuZEdnaUxDSnpkR0ZqYTB4bGJtZDBhQ0lzSW5KMWJsTjBZWEowSWl3aWMzUmhZMnRUYVhwbElpd2liV1Z5WjJWQmRDSXNJbWtpTENKemRHRnlkREVpTENKc1pXNW5kR2d4SWl3aWMzUmhjblF5SWl3aWJHVnVaM1JvTWlJc0ltc2lMQ0p0WlhKblpVeHZkeUlzSW0xbGNtZGxTR2xuYUNJc0ltTjFjbk52Y2pFaUxDSmpkWEp6YjNJeUlpd2laR1Z6ZENJc0ltTnZkVzUwTVNJc0ltTnZkVzUwTWlJc0ltVjRhWFFpTENKRmNuSnZjaUlzSW1OMWMzUnZiVU4xY25OdmNpSXNJbU4xYzNSdmJVUmxjM1FpWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN08ydENRWE0wUW1Vc1ZVRkJWVUVzUzBGQlZpeEZRVUZwUWtNc1JVRkJha0lzUlVGQmNVSkRMRVZCUVhKQ0xFVkJRWGxDUXl4UFFVRjZRaXhGUVVGclF6dEJRVU12UXl4TlFVRkpMRU5CUVVORExFMUJRVTFETEU5QlFVNHNRMEZCWTB3c1MwRkJaQ3hEUVVGTUxFVkJRVEpDTzBGQlEzcENMRlZCUVUwc1NVRkJTVTBzVTBGQlNpeERRVUZqTEhOQ1FVRmtMRU5CUVU0N1FVRkRSRHM3UVVGRlJEczdPenM3UVVGTFFTeE5RVUZKVEN4UFFVRlBUU3hUUVVGWUxFVkJRWE5DTzBGQlEzQkNUaXhUUVVGTExFTkJRVXc3UVVGRFJEczdRVUZGUkN4TlFVRkpReXhQUVVGUFN5eFRRVUZZTEVWQlFYTkNPMEZCUTNCQ1RDeFRRVUZMUml4TlFVRk5VU3hOUVVGWU8wRkJRMFE3TzBGQlJVUXNUVUZCU1V3c1dVRkJXVWtzVTBGQmFFSXNSVUZCTWtJN1FVRkRla0pLTEdOQlFWVk5MRzFDUVVGV08wRkJRMFE3TzBGQlJVUXNUVUZCU1VNc1dVRkJXVklzUzBGQlMwUXNSVUZCY2tJN08wRkJSVUU3UVVGRFFTeE5RVUZKVXl4WlFVRlpMRU5CUVdoQ0xFVkJRVzFDTzBGQlEycENPMEZCUTBRN08wRkJSVVFzVFVGQlNVTXNXVUZCV1N4RFFVRm9RanRCUVVOQk8wRkJRMEVzVFVGQlNVUXNXVUZCV1VVc2FVSkJRV2hDTEVWQlFXMURPMEZCUTJwRFJDeG5Ra0ZCV1VVc2FVSkJRV2xDWWl4TFFVRnFRaXhGUVVGM1FrTXNSVUZCZUVJc1JVRkJORUpETEVWQlFUVkNMRVZCUVdkRFF5eFBRVUZvUXl4RFFVRmFPMEZCUTBGWExIZENRVUZ2UW1Rc1MwRkJjRUlzUlVGQk1rSkRMRVZCUVROQ0xFVkJRU3RDUXl4RlFVRXZRaXhGUVVGdFEwUXNTMEZCUzFVc1UwRkJlRU1zUlVGQmJVUlNMRTlCUVc1RU8wRkJRMEU3UVVGRFJEczdRVUZGUkN4TlFVRkpXU3hMUVVGTExFbEJRVWxETEU5QlFVb3NRMEZCV1doQ0xFdEJRVm9zUlVGQmJVSkhMRTlCUVc1Q0xFTkJRVlE3TzBGQlJVRXNUVUZCU1dNc1UwRkJVME1zWVVGQllWSXNVMEZCWWl4RFFVRmlPenRCUVVWQkxFdEJRVWM3UVVGRFJFTXNaMEpCUVZsRkxHbENRVUZwUW1Jc1MwRkJha0lzUlVGQmQwSkRMRVZCUVhoQ0xFVkJRVFJDUXl4RlFVRTFRaXhGUVVGblEwTXNUMEZCYUVNc1EwRkJXanRCUVVOQkxGRkJRVWxSTEZsQlFWbE5MRTFCUVdoQ0xFVkJRWGRDTzBGQlEzUkNMRlZCUVVsRkxGRkJRVkZVTEZOQlFWbzdRVUZEUVN4VlFVRkpVeXhSUVVGUlJpeE5RVUZhTEVWQlFXOUNPMEZCUTJ4Q1JTeG5Ra0ZCVVVZc1RVRkJVanRCUVVORU96dEJRVVZFU0N3d1FrRkJiMEprTEV0QlFYQkNMRVZCUVRKQ1F5eEZRVUV6UWl4RlFVRXJRa0VzUzBGQlMydENMRXRCUVhCRExFVkJRVEpEYkVJc1MwRkJTMVVzVTBGQmFFUXNSVUZCTWtSU0xFOUJRVE5FTzBGQlEwRlJMR3RDUVVGWlVTeExRVUZhTzBGQlEwUTdRVUZEUkR0QlFVTkJTaXhQUVVGSFN5eFBRVUZJTEVOQlFWZHVRaXhGUVVGWUxFVkJRV1ZWTEZOQlFXWTdRVUZEUVVrc1QwRkJSMDBzVTBGQlNEczdRVUZGUVR0QlFVTkJXQ3hwUWtGQllVTXNVMEZCWWp0QlFVTkJWaXhWUVVGTlZTeFRRVUZPTzBGQlJVUXNSMEZ1UWtRc1VVRnRRbE5FTEdOQlFXTXNRMEZ1UW5aQ096dEJRWEZDUVR0QlFVTkJTeXhMUVVGSFR5eGpRVUZJTzBGQlEwUXNRenM3T3p0QlFYUTRRa1E3TzBGQlJVRTdPenRCUVVkQkxFbEJRVTFXTEc5Q1FVRnZRaXhGUVVFeFFqczdRVUZGUVRzN08wRkJSMEVzU1VGQlRWY3NkMEpCUVhkQ0xFTkJRVGxDT3p0QlFVVkJPenM3TzBGQlNVRXNTVUZCVFVNc05rSkJRVFpDTEVkQlFXNURPenRCUVVWQk96czdPMEZCU1VFc1NVRkJUVU1zWjBKQlFXZENMRU5CUVVNc1IwRkJSQ3hGUVVGTkxFZEJRVTRzUlVGQlZ5eEhRVUZZTEVWQlFXZENMRWRCUVdoQ0xFVkJRWEZDTEVkQlFYSkNMRVZCUVRCQ0xFZEJRVEZDTEVWQlFTdENMRWRCUVM5Q0xFVkJRVzlETEVkQlFYQkRMRVZCUVhsRExFZEJRWHBETEVWQlFUaERMRWRCUVRsRExFTkJRWFJDT3p0QlFVVkJPenM3T3pzN1FVRk5RU3hUUVVGVFF5eExRVUZVTEVOQlFXVkRMRU5CUVdZc1JVRkJhMEk3UVVGRGFFSXNUVUZCU1VFc1NVRkJTU3hIUVVGU0xFVkJRV0U3UVVGRFdDeFJRVUZKUVN4SlFVRkpMRWRCUVZJc1JVRkJZVHRCUVVOWUxHRkJRVTlCTEVsQlFVa3NSMEZCU2l4SFFVRlZMRU5CUVZZc1IwRkJZeXhEUVVGeVFqdEJRVU5FT3p0QlFVVkVMRkZCUVVsQkxFbEJRVWtzUjBGQlVpeEZRVUZoTzBGQlExZ3NZVUZCVDBFc1NVRkJTU3hIUVVGS0xFZEJRVlVzUTBGQlZpeEhRVUZqTEVOQlFYSkNPMEZCUTBRN08wRkJSVVFzVjBGQlR5eERRVUZRTzBGQlEwUTdPMEZCUlVRc1RVRkJTVUVzU1VGQlNTeEhRVUZTTEVWQlFXRTdRVUZEV0N4WFFVRlBRU3hKUVVGSkxFZEJRVW9zUjBGQlZTeERRVUZXTEVkQlFXTXNRMEZCY2tJN1FVRkRSRHM3UVVGRlJDeE5RVUZKUVN4SlFVRkpMRWRCUVZJc1JVRkJZVHRCUVVOWUxGZEJRVTlCTEVsQlFVa3NSMEZCU2l4SFFVRlZMRU5CUVZZc1IwRkJZeXhEUVVGeVFqdEJRVU5FT3p0QlFVVkVMRk5CUVU4c1EwRkJVRHRCUVVORU96dEJRVVZFT3pzN096czdPenRCUVZGQkxGTkJRVk5zUWl4dFFrRkJWQ3hEUVVFMlFtMUNMRU5CUVRkQ0xFVkJRV2REUXl4RFFVRm9ReXhGUVVGdFF6dEJRVU5xUXl4TlFVRkpSQ3hOUVVGTlF5eERRVUZXTEVWQlFXRTdRVUZEV0N4WFFVRlBMRU5CUVZBN1FVRkRSRHM3UVVGRlJDeE5RVUZKTEVOQlFVTXNRMEZCUTBRc1EwRkJSaXhMUVVGUlFTeERRVUZTTEVsQlFXRXNRMEZCUXl4RFFVRkRReXhEUVVGR0xFdEJRVkZCTEVOQlFYcENMRVZCUVRSQ08wRkJRekZDTEZGQlFVbEVMRTFCUVUwc1EwRkJUaXhKUVVGWFF5eE5RVUZOTEVOQlFYSkNMRVZCUVhkQ08wRkJRM1JDTEdGQlFVOUVMRWxCUVVsRExFTkJRVW9zUjBGQlVTeERRVUZETEVOQlFWUXNSMEZCWVN4RFFVRndRanRCUVVORU96dEJRVVZFTEZGQlFVbEVMRWxCUVVrc1EwRkJTaXhKUVVGVFF5eEpRVUZKTEVOQlFXcENMRVZCUVc5Q08wRkJRMnhDTEZWQlFVbEJMRXRCUVVzc1EwRkJWQ3hGUVVGWk8wRkJRMVlzWlVGQlR5eERRVUZETEVOQlFWSTdRVUZEUkRzN1FVRkZSQ3hWUVVGSlJDeExRVUZMTEVOQlFWUXNSVUZCV1R0QlFVTldMR1ZCUVU4c1EwRkJVRHRCUVVORU96dEJRVVZFUVN4VlFVRkpMRU5CUVVOQkxFTkJRVXc3UVVGRFFVTXNWVUZCU1N4RFFVRkRRU3hEUVVGTU8wRkJRMFE3TzBGQlJVUXNVVUZCVFVNc1MwRkJTMG9zVFVGQlRVVXNRMEZCVGl4RFFVRllPMEZCUTBFc1VVRkJUVWNzUzBGQlMwd3NUVUZCVFVjc1EwRkJUaXhEUVVGWU96dEJRVVZCTEZGQlFVbEhMRWxCUVVrc1EwRkJVanM3UVVGRlFTeFJRVUZKUml4TFFVRkxReXhGUVVGVUxFVkJRV0U3UVVGRFdFZ3NWMEZCUzBnc1kwRkJZMDBzUzBGQlMwUXNSVUZCVEN4SFFVRlZMRU5CUVhoQ0xFTkJRVXc3UVVGRFFVUXNWMEZCU3l4RlFVRk1PMEZCUTBGSExGVkJRVWtzUTBGQlF5eERRVUZNTzBGQlEwUXNTMEZLUkN4TlFVbFBMRWxCUVVsR0xFdEJRVXRETEVWQlFWUXNSVUZCWVR0QlFVTnNRa1lzVjBGQlMwb3NZMEZCWTBzc1MwRkJTME1zUlVGQlRDeEhRVUZWTEVOQlFYaENMRU5CUVV3N1FVRkRRVWdzVjBGQlN5eEZRVUZNTzBGQlEwRkpMRlZCUVVrc1EwRkJTanRCUVVORU96dEJRVVZFTEZGQlFVbEtMRTFCUVUxRExFTkJRVllzUlVGQllUdEJRVU5ZTEdGQlFVOUhMRU5CUVZBN1FVRkRSRHM3UVVGRlJDeFhRVUZQU2l4SlFVRkpReXhEUVVGS0xFZEJRVkVzUTBGQlF5eERRVUZVTEVkQlFXRXNRMEZCY0VJN1FVRkRSRHM3UVVGRlJDeE5RVUZKU1N4UFFVRlBReXhQUVVGUFRpeERRVUZRTEVOQlFWZzdRVUZEUVN4TlFVRkpUeXhQUVVGUFJDeFBRVUZQVEN4RFFVRlFMRU5CUVZnN08wRkJSVUVzVFVGQlNVa3NVMEZCVTBVc1NVRkJZaXhGUVVGdFFqdEJRVU5xUWl4WFFVRlBMRU5CUVZBN1FVRkRSRHM3UVVGRlJDeFRRVUZQUml4UFFVRlBSU3hKUVVGUUxFZEJRV01zUTBGQlF5eERRVUZtTEVkQlFXMUNMRU5CUVRGQ08wRkJRMFE3TzBGQlJVUTdPenM3TzBGQlMwRXNVMEZCVTJwQ0xGbEJRVlFzUTBGQmMwSnJRaXhEUVVGMFFpeEZRVUY1UWp0QlFVTjJRaXhOUVVGSlF5eEpRVUZKTEVOQlFWSTdPMEZCUlVFc1UwRkJUMFFzUzBGQlMzaENMR2xDUVVGYUxFVkJRU3RDTzBGQlF6ZENlVUlzVTBGQlRVUXNTVUZCU1N4RFFVRldPMEZCUTBGQkxGVkJRVTBzUTBGQlRqdEJRVU5FT3p0QlFVVkVMRk5CUVU5QkxFbEJRVWxETEVOQlFWZzdRVUZEUkRzN1FVRkZSRHM3T3pzN096czdPenM3UVVGWFFTeFRRVUZUZUVJc1owSkJRVlFzUTBGQk1FSmlMRXRCUVRGQ0xFVkJRV2xEUXl4RlFVRnFReXhGUVVGeFEwTXNSVUZCY2tNc1JVRkJlVU5ETEU5QlFYcERMRVZCUVd0RU8wRkJRMmhFTEUxQlFVbHRReXhSUVVGUmNrTXNTMEZCU3l4RFFVRnFRanM3UVVGRlFTeE5RVUZKY1VNc1ZVRkJWWEJETEVWQlFXUXNSVUZCYTBJN1FVRkRhRUlzVjBGQlR5eERRVUZRTzBGQlEwUTdPMEZCUlVRN1FVRkRRU3hOUVVGSlF5eFJRVUZSU0N4TlFVRk5jME1zVDBGQlRpeERRVUZTTEVWQlFYZENkRU1zVFVGQlRVTXNSVUZCVGl4RFFVRjRRaXhKUVVGeFF5eERRVUY2UXl4RlFVRTBRenRCUVVNeFF5eFhRVUZQY1VNc1VVRkJVWEJETEVWQlFWSXNTVUZCWTBNc1VVRkJVVWdzVFVGQlRYTkRMRXRCUVU0c1EwRkJVaXhGUVVGelFuUkRMRTFCUVUxelF5eFJRVUZSTEVOQlFXUXNRMEZCZEVJc1NVRkJNRU1zUTBGQkwwUXNSVUZCYTBVN1FVRkRhRVZCTzBGQlEwUTdPMEZCUlVSRExHVkJRVmQyUXl4TFFVRllMRVZCUVd0Q1F5eEZRVUZzUWl4RlFVRnpRbkZETEV0QlFYUkNPMEZCUTBFN1FVRkRSQ3hIUVZCRUxFMUJUMDg3UVVGRFRDeFhRVUZQUVN4UlFVRlJjRU1zUlVGQlVpeEpRVUZqUXl4UlFVRlJTQ3hOUVVGTmMwTXNTMEZCVGl4RFFVRlNMRVZCUVhOQ2RFTXNUVUZCVFhORExGRkJRVkVzUTBGQlpDeERRVUYwUWl4TFFVRXlReXhEUVVGb1JTeEZRVUZ0UlR0QlFVTnFSVUU3UVVGRFJEdEJRVU5HT3p0QlFVVkVMRk5CUVU5QkxGRkJRVkZ5UXl4RlFVRm1PMEZCUTBRN08wRkJSVVE3T3pzN096czdRVUZQUVN4VFFVRlRjME1zVlVGQlZDeERRVUZ2UW5aRExFdEJRWEJDTEVWQlFUSkNReXhGUVVFelFpeEZRVUVyUWtNc1JVRkJMMElzUlVGQmJVTTdRVUZEYWtOQk96dEJRVVZCTEZOQlFVOUVMRXRCUVV0RExFVkJRVm9zUlVGQlowSTdRVUZEWkN4UlFVRkpPRUlzU1VGQlNXaERMRTFCUVUxRExFVkJRVTRzUTBGQlVqdEJRVU5CUkN4VlFVRk5ReXhKUVVGT0xFbEJRV05FTEUxQlFVMUZMRVZCUVU0c1EwRkJaRHRCUVVOQlJpeFZRVUZOUlN4SlFVRk9MRWxCUVdNNFFpeERRVUZrTzBGQlEwUTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenRCUVZWQkxGTkJRVk5zUWl4dFFrRkJWQ3hEUVVFMlFtUXNTMEZCTjBJc1JVRkJiME5ETEVWQlFYQkRMRVZCUVhkRFF5eEZRVUY0UXl4RlFVRTBRM05ETEV0QlFUVkRMRVZCUVcxRWNrTXNUMEZCYmtRc1JVRkJORVE3UVVGRE1VUXNUVUZCU1hGRExGVkJRVlYyUXl4RlFVRmtMRVZCUVd0Q08wRkJRMmhDZFVNN1FVRkRSRHM3UVVGRlJDeFRRVUZQUVN4UlFVRlJkRU1zUlVGQlppeEZRVUZ0UW5ORExFOUJRVzVDTEVWQlFUUkNPMEZCUXpGQ0xGRkJRVWxETEZGQlFWRjZReXhOUVVGTmQwTXNTMEZCVGl4RFFVRmFPenRCUVVWQk8wRkJRMEVzVVVGQlNVVXNUMEZCVDNwRExFVkJRVmc3UVVGRFFTeFJRVUZKTUVNc1VVRkJVVWdzUzBGQldqczdRVUZGUVRzN096dEJRVWxCTEZkQlFVOUZMRTlCUVU5RExFdEJRV1FzUlVGQmNVSTdRVUZEYmtJc1ZVRkJTVU1zVFVGQlQwWXNUMEZCVDBNc1MwRkJVaXhMUVVGdFFpeERRVUUzUWpzN1FVRkZRU3hWUVVGSmVFTXNVVUZCVVhORExFdEJRVklzUlVGQlpYcERMRTFCUVUwMFF5eEhRVUZPTEVOQlFXWXNTVUZCTmtJc1EwRkJha01zUlVGQmIwTTdRVUZEYkVORUxHZENRVUZSUXl4SFFVRlNPMEZCUTBRc1QwRkdSQ3hOUVVWUE8wRkJRMHhHTEdWQlFVOUZMRTFCUVUwc1EwRkJZanRCUVVORU8wRkJRMFk3TzBGQlJVUTdPenM3TzBGQlMwRXNVVUZCU1ZJc1NVRkJTVWtzVVVGQlVVVXNTVUZCYUVJN1FVRkRRVHRCUVVOQkxGbEJRVkZPTEVOQlFWSTdRVUZEUlN4WFFVRkxMRU5CUVV3N1FVRkRSWEJETEdOQlFVMHdReXhQUVVGUExFTkJRV0lzU1VGQmEwSXhReXhOUVVGTk1FTXNUMEZCVHl4RFFVRmlMRU5CUVd4Q08wRkJRMFk3UVVGRFFTeFhRVUZMTEVOQlFVdzdRVUZEUlRGRExHTkJRVTB3UXl4UFFVRlBMRU5CUVdJc1NVRkJhMEl4UXl4TlFVRk5NRU1zVDBGQlR5eERRVUZpTEVOQlFXeENPMEZCUTBZN1FVRkRRU3hYUVVGTExFTkJRVXc3UVVGRFJURkRMR05CUVUwd1F5eFBRVUZQTEVOQlFXSXNTVUZCYTBJeFF5eE5RVUZOTUVNc1NVRkJUaXhEUVVGc1FqdEJRVU5CTzBGQlEwWTdRVUZEUlN4bFFVRlBUaXhKUVVGSkxFTkJRVmdzUlVGQll6dEJRVU5hY0VNc1owSkJRVTB3UXl4UFFVRlBUaXhEUVVGaUxFbEJRV3RDY0VNc1RVRkJUVEJETEU5QlFVOU9MRU5CUVZBc1IwRkJWeXhEUVVGcVFpeERRVUZzUWp0QlFVTkJRVHRCUVVORU8wRkJaRXc3TzBGQmFVSkJjRU1zVlVGQlRUQkRMRWxCUVU0c1NVRkJZMFFzUzBGQlpEdEJRVU5FTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3pzN096czdRVUZoUVN4VFFVRlRTU3hWUVVGVUxFTkJRVzlDUXl4TFFVRndRaXhGUVVFeVFqbERMRXRCUVROQ0xFVkJRV3REZDBNc1MwRkJiRU1zUlVGQmVVTm9ReXhOUVVGNlF5eEZRVUZwUkhWRExFbEJRV3BFTEVWQlFYVkVOVU1zVDBGQmRrUXNSVUZCWjBVN1FVRkRPVVFzVFVGQlNUWkRMR0ZCUVdFc1EwRkJha0k3UVVGRFFTeE5RVUZKUXl4WlFVRlpMRU5CUVdoQ08wRkJRMEVzVFVGQlNVTXNVMEZCVXl4RFFVRmlPenRCUVVWQkxFMUJRVWt2UXl4UlFVRlJNa01zUzBGQlVpeEZRVUZsT1VNc1RVRkJUWGRETEZGQlFWRlBMRWxCUVdRc1EwRkJaaXhKUVVGelF5eERRVUV4UXl4RlFVRTJRenRCUVVNelEwVXNaMEpCUVZsNlF5eFRRVUZUZFVNc1NVRkJja0k3TzBGQlJVRXNWMEZCVDBjc1UwRkJVMFFzVTBGQlZDeEpRVUZ6UWpsRExGRkJRVkV5UXl4TFFVRlNMRVZCUVdVNVF5eE5RVUZOZDBNc1VVRkJVVThzU1VGQlVpeEhRVUZsUnl4TlFVRnlRaXhEUVVGbUxFbEJRU3RETEVOQlFUVkZMRVZCUVN0Rk8wRkJRemRGUml4dFFrRkJZVVVzVFVGQllqdEJRVU5CUVN4bFFVRlRMRU5CUVVOQkxGVkJRVlVzUTBGQldDeEpRVUZuUWl4RFFVRjZRanM3UVVGRlFTeFZRVUZKUVN4VlFVRlZMRU5CUVdRc1JVRkJhVUk3UVVGRFprRXNhVUpCUVZORUxGTkJRVlE3UVVGRFJEdEJRVU5HT3p0QlFVVkVMRkZCUVVsRExGTkJRVk5FTEZOQlFXSXNSVUZCZDBJN1FVRkRkRUpETEdWQlFWTkVMRk5CUVZRN1FVRkRSRHM3UVVGRlJEdEJRVU5CUkN4clFrRkJZMFFzU1VGQlpEdEJRVU5CUnl4alFVRlZTQ3hKUVVGV096dEJRVVZCTzBGQlEwUXNSMEZ5UWtRc1RVRnhRazg3UVVGRFRFVXNaMEpCUVZsR0xFOUJRVThzUTBGQmJrSTdRVUZEUVN4WFFVRlBSeXhUUVVGVFJDeFRRVUZVTEVsQlFYTkNPVU1zVVVGQlVUSkRMRXRCUVZJc1JVRkJaVGxETEUxQlFVMTNReXhSUVVGUlR5eEpRVUZTTEVkQlFXVkhMRTFCUVhKQ0xFTkJRV1lzUzBGQlowUXNRMEZCTjBVc1JVRkJaMFk3UVVGRE9VVkdMRzFDUVVGaFJTeE5RVUZpTzBGQlEwRkJMR1ZCUVZNc1EwRkJRMEVzVlVGQlZTeERRVUZZTEVsQlFXZENMRU5CUVhwQ096dEJRVVZCTEZWQlFVbEJMRlZCUVZVc1EwRkJaQ3hGUVVGcFFqdEJRVU5tUVN4cFFrRkJVMFFzVTBGQlZEdEJRVU5FTzBGQlEwWTdRVUZEUkN4UlFVRkpReXhUUVVGVFJDeFRRVUZpTEVWQlFYZENPMEZCUTNSQ1F5eGxRVUZUUkN4VFFVRlVPMEZCUTBRN08wRkJSVVE3UVVGRFFTeFJRVUZKUlN4TlFVRk5TQ3hWUVVGV08wRkJRMEZCTEdsQ1FVRmhSQ3hQUVVGUFJ5eE5RVUZ3UWp0QlFVTkJRU3hoUVVGVFNDeFBRVUZQU1N4SFFVRm9RanRCUVVORU96dEJRVVZFT3pzN096czdRVUZOUVVnN1FVRkRRU3hUUVVGUFFTeGhRVUZoUlN4TlFVRndRaXhGUVVFMFFqdEJRVU14UWl4UlFVRkpSU3hKUVVGSlNpeGpRVUZsUlN4VFFVRlRSaXhWUVVGV0xFdEJRVEJDTEVOQlFYaERMRU5CUVZJN08wRkJSVUVzVVVGQlNUZERMRkZCUVZFeVF5eExRVUZTTEVWQlFXVTVReXhOUVVGTmQwTXNVVUZCVVZrc1EwRkJaQ3hEUVVGbUxFbEJRVzFETEVOQlFYWkRMRVZCUVRCRE8wRkJRM2hEU2l4dFFrRkJZVWtzU1VGQlNTeERRVUZxUWp0QlFVVkVMRXRCU0VRc1RVRkhUenRCUVVOTVJpeGxRVUZUUlN4RFFVRlVPMEZCUTBRN1FVRkRSanRCUVVORUxGTkJRVTlHTEUxQlFWQTdRVUZEUkRzN1FVRkZSRHM3T3pzN096czdPenM3T3p0QlFXRkJMRk5CUVZOSExGZEJRVlFzUTBGQmNVSlFMRXRCUVhKQ0xFVkJRVFJDT1VNc1MwRkJOVUlzUlVGQmJVTjNReXhMUVVGdVF5eEZRVUV3UTJoRExFMUJRVEZETEVWQlFXdEVkVU1zU1VGQmJFUXNSVUZCZDBRMVF5eFBRVUY0UkN4RlFVRnBSVHRCUVVNdlJDeE5RVUZKTmtNc1lVRkJZU3hEUVVGcVFqdEJRVU5CTEUxQlFVbERMRmxCUVZrc1EwRkJhRUk3UVVGRFFTeE5RVUZKUXl4VFFVRlRMRU5CUVdJN08wRkJSVUVzVFVGQlNTOURMRkZCUVZFeVF5eExRVUZTTEVWQlFXVTVReXhOUVVGTmQwTXNVVUZCVVU4c1NVRkJaQ3hEUVVGbUxFbEJRWE5ETEVOQlFURkRMRVZCUVRaRE8wRkJRek5EUlN4blFrRkJXVVlzVDBGQlR5eERRVUZ1UWpzN1FVRkZRU3hYUVVGUFJ5eFRRVUZUUkN4VFFVRlVMRWxCUVhOQ09VTXNVVUZCVVRKRExFdEJRVklzUlVGQlpUbERMRTFCUVUxM1F5eFJRVUZSVHl4SlFVRlNMRWRCUVdWSExFMUJRWEpDTEVOQlFXWXNTVUZCSzBNc1EwRkJOVVVzUlVGQkswVTdRVUZETjBWR0xHMUNRVUZoUlN4TlFVRmlPMEZCUTBGQkxHVkJRVk1zUTBGQlEwRXNWVUZCVlN4RFFVRllMRWxCUVdkQ0xFTkJRWHBDT3p0QlFVVkJMRlZCUVVsQkxGVkJRVlVzUTBGQlpDeEZRVUZwUWp0QlFVTm1RU3hwUWtGQlUwUXNVMEZCVkR0QlFVTkVPMEZCUTBZN08wRkJSVVFzVVVGQlNVTXNVMEZCVTBRc1UwRkJZaXhGUVVGM1FqdEJRVU4wUWtNc1pVRkJVMFFzVTBGQlZEdEJRVU5FT3p0QlFVVkVPMEZCUTBFc1VVRkJTVVVzVFVGQlRVZ3NWVUZCVmp0QlFVTkJRU3hwUWtGQllVUXNUMEZCVDBjc1RVRkJjRUk3UVVGRFFVRXNZVUZCVTBnc1QwRkJUMGtzUjBGQmFFSTdPMEZCUlVFN1FVRkRSQ3hIUVhSQ1JDeE5RWE5DVHp0QlFVTk1SaXhuUWtGQldYcERMRk5CUVZOMVF5eEpRVUZ5UWpzN1FVRkZRU3hYUVVGUFJ5eFRRVUZUUkN4VFFVRlVMRWxCUVhOQ09VTXNVVUZCVVRKRExFdEJRVklzUlVGQlpUbERMRTFCUVUxM1F5eFJRVUZSVHl4SlFVRlNMRWRCUVdWSExFMUJRWEpDTEVOQlFXWXNTMEZCWjBRc1EwRkJOMFVzUlVGQlowWTdRVUZET1VWR0xHMUNRVUZoUlN4TlFVRmlPMEZCUTBGQkxHVkJRVk1zUTBGQlEwRXNWVUZCVlN4RFFVRllMRWxCUVdkQ0xFTkJRWHBDT3p0QlFVVkJMRlZCUVVsQkxGVkJRVlVzUTBGQlpDeEZRVUZwUWp0QlFVTm1RU3hwUWtGQlUwUXNVMEZCVkR0QlFVTkVPMEZCUTBZN08wRkJSVVFzVVVGQlNVTXNVMEZCVTBRc1UwRkJZaXhGUVVGM1FqdEJRVU4wUWtNc1pVRkJVMFFzVTBGQlZEdEJRVU5FT3p0QlFVVkVPMEZCUTBGRUxHdENRVUZqUkN4SlFVRmtPMEZCUTBGSExHTkJRVlZJTEVsQlFWWTdRVUZEUkRzN1FVRkZSRHM3T3pzN08wRkJUVUZET3p0QlFVVkJMRk5CUVU5QkxHRkJRV0ZGTEUxQlFYQkNMRVZCUVRSQ08wRkJRekZDTEZGQlFVbEZMRWxCUVVsS0xHTkJRV1ZGTEZOQlFWTkdMRlZCUVZZc1MwRkJNRUlzUTBGQmVFTXNRMEZCVWpzN1FVRkZRU3hSUVVGSk4wTXNVVUZCVVRKRExFdEJRVklzUlVGQlpUbERMRTFCUVUxM1F5eFJRVUZSV1N4RFFVRmtMRU5CUVdZc1NVRkJiVU1zUTBGQmRrTXNSVUZCTUVNN1FVRkRlRU5HTEdWQlFWTkZMRU5CUVZRN1FVRkZSQ3hMUVVoRUxFMUJSMDg3UVVGRFRFb3NiVUpCUVdGSkxFbEJRVWtzUTBGQmFrSTdRVUZEUkR0QlFVTkdPenRCUVVWRUxGTkJRVTlHTEUxQlFWQTdRVUZEUkRzN1NVRkZTMnhETEU4N1FVRkZTaXh0UWtGQldXaENMRXRCUVZvc1JVRkJiVUpITEU5QlFXNUNMRVZCUVRSQ08wRkJRVUU3TzBGQlF6RkNMRk5CUVV0SUxFdEJRVXdzUjBGQllVRXNTMEZCWWp0QlFVTkJMRk5CUVV0SExFOUJRVXdzUjBGQlpVRXNUMEZCWmp0QlFVTkJMRk5CUVV0dFJDeFRRVUZNTEVkQlFXbENMMElzY1VKQlFXcENPMEZCUTBFc1UwRkJTMllzVFVGQlRDeEhRVUZqVWl4TlFVRk5VU3hOUVVGd1FqczdRVUZGUVN4VFFVRkxLME1zWjBKQlFVd3NSMEZCZDBJdlFpd3dRa0ZCZUVJN1FVRkRRU3hSUVVGSkxFdEJRVXRvUWl4TlFVRk1MRWRCUVdNc1NVRkJTV2RDTERCQ1FVRjBRaXhGUVVGclJEdEJRVU5vUkN4WFFVRkxLMElzWjBKQlFVd3NSMEZCZDBJc1MwRkJTeTlETEUxQlFVd3NTMEZCWjBJc1EwRkJlRU03UVVGRFJEczdRVUZGUkN4VFFVRkxNa01zUjBGQlRDeEhRVUZYTEVsQlFVa3ZReXhMUVVGS0xFTkJRVlVzUzBGQlMyMUVMR2RDUVVGbUxFTkJRVmc3TzBGQlJVRXNVMEZCUzBNc1YwRkJUQ3hIUVVOSExFdEJRVXRvUkN4TlFVRk1MRWRCUVdNc1IwRkJaQ3hIUVVGdlFpeERRVUZ3UWl4SFFVTkRMRXRCUVV0QkxFMUJRVXdzUjBGQll5eEpRVUZrTEVkQlFYRkNMRVZCUVhKQ0xFZEJRMFVzUzBGQlMwRXNUVUZCVEN4SFFVRmpMRTFCUVdRc1IwRkJkVUlzUlVGQmRrSXNSMEZCTkVJc1JVRkliRU03TzBGQlMwRXNVMEZCUzJsRUxGRkJRVXdzUjBGQlowSXNTVUZCU1hKRUxFdEJRVW9zUTBGQlZTeExRVUZMYjBRc1YwRkJaaXhEUVVGb1FqdEJRVU5CTEZOQlFVczNReXhUUVVGTUxFZEJRV2xDTEVsQlFVbFFMRXRCUVVvc1EwRkJWU3hMUVVGTGIwUXNWMEZCWml4RFFVRnFRanRCUVVOQkxGTkJRVXRGTEZOQlFVd3NSMEZCYVVJc1EwRkJha0k3UVVGRFJEczdRVUZGUkRzN096czdPenM3T3pzMFFrRk5VVVFzVVN4RlFVRlZPVU1zVXl4RlFVRlhPMEZCUXpOQ0xGZEJRVXM0UXl4UlFVRk1MRU5CUVdNc1MwRkJTME1zVTBGQmJrSXNTVUZCWjBORUxGRkJRV2hETzBGQlEwRXNWMEZCU3psRExGTkJRVXdzUTBGQlpTeExRVUZMSzBNc1UwRkJjRUlzU1VGQmFVTXZReXhUUVVGcVF6dEJRVU5CTEZkQlFVc3JReXhUUVVGTUxFbEJRV3RDTEVOQlFXeENPMEZCUTBRN08wRkJSVVE3T3pzN096czdPMmREUVV0Wk8wRkJRMVlzWVVGQlR5eExRVUZMUVN4VFFVRk1MRWRCUVdsQ0xFTkJRWGhDTEVWQlFUSkNPMEZCUTNwQ0xGbEJRVWwwUWl4SlFVRkpMRXRCUVV0elFpeFRRVUZNTEVkQlFXbENMRU5CUVhwQ096dEJRVVZCTEZsQlFVdDBRaXhMUVVGTExFTkJRVXdzU1VGRFNDeExRVUZMZWtJc1UwRkJUQ3hEUVVGbGVVSXNTVUZCU1N4RFFVRnVRaXhMUVVGNVFpeExRVUZMZWtJc1UwRkJUQ3hEUVVGbGVVSXNRMEZCWml4SlFVRnZRaXhMUVVGTGVrSXNVMEZCVEN4RFFVRmxlVUlzU1VGQlNTeERRVUZ1UWl4RFFVUXpReXhKUVVWRVFTeExRVUZMTEVOQlFVd3NTVUZEUkN4TFFVRkxla0lzVTBGQlRDeERRVUZsZVVJc1NVRkJTU3hEUVVGdVFpeExRVUY1UWl4TFFVRkxla0lzVTBGQlRDeERRVUZsZVVJc1EwRkJaaXhKUVVGdlFpeExRVUZMZWtJc1UwRkJUQ3hEUVVGbGVVSXNTVUZCU1N4RFFVRnVRaXhEUVVndlF5eEZRVWQxUlRzN1FVRkZja1VzWTBGQlNTeExRVUZMZWtJc1UwRkJUQ3hEUVVGbGVVSXNTVUZCU1N4RFFVRnVRaXhKUVVGM1FpeExRVUZMZWtJc1UwRkJUQ3hEUVVGbGVVSXNTVUZCU1N4RFFVRnVRaXhEUVVFMVFpeEZRVUZ0UkR0QlFVTnFSRUU3UVVGRFJEdEJRVVZHTEZOQlZFUXNUVUZUVHl4SlFVRkpMRXRCUVV0NlFpeFRRVUZNTEVOQlFXVjVRaXhEUVVGbUxFbEJRVzlDTEV0QlFVdDZRaXhUUVVGTUxFTkJRV1Y1UWl4SlFVRkpMRU5CUVc1Q0xFTkJRWGhDTEVWQlFTdERPMEZCUTNCRU8wRkJRMFE3UVVGRFJDeGhRVUZMZFVJc1QwRkJUQ3hEUVVGaGRrSXNRMEZCWWp0QlFVTkVPMEZCUTBZN08wRkJSVVE3T3pzN096dHhRMEZIYVVJN1FVRkRaaXhoUVVGUExFdEJRVXR6UWl4VFFVRk1MRWRCUVdsQ0xFTkJRWGhDTEVWQlFUSkNPMEZCUTNwQ0xGbEJRVWwwUWl4SlFVRkpMRXRCUVV0elFpeFRRVUZNTEVkQlFXbENMRU5CUVhwQ096dEJRVVZCTEZsQlFVbDBRaXhKUVVGSkxFTkJRVW9zU1VGQlV5eExRVUZMZWtJc1UwRkJUQ3hEUVVGbGVVSXNTVUZCU1N4RFFVRnVRaXhKUVVGM1FpeExRVUZMZWtJc1UwRkJUQ3hEUVVGbGVVSXNTVUZCU1N4RFFVRnVRaXhEUVVGeVF5eEZRVUUwUkR0QlFVTXhSRUU3UVVGRFJEczdRVUZGUkN4aFFVRkxkVUlzVDBGQlRDeERRVUZoZGtJc1EwRkJZanRCUVVORU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096czBRa0ZOVVhkQ0xFTXNSVUZCUnp0QlFVTlVMRlZCUVVsNlJDeFZRVUZWTEV0QlFVdEJMRTlCUVc1Q08wRkJRMEVzVlVGQlNVZ3NVVUZCVVN4TFFVRkxRU3hMUVVGcVFqczdRVUZGUVN4VlFVRkpOa1FzVTBGQlV5eExRVUZMU2l4UlFVRk1MRU5CUVdOSExFTkJRV1FzUTBGQllqdEJRVU5CTEZWQlFVbEZMRlZCUVZVc1MwRkJTMjVFTEZOQlFVd3NRMEZCWldsRUxFTkJRV1lzUTBGQlpEdEJRVU5CTEZWQlFVbEhMRk5CUVZNc1MwRkJTMDRzVVVGQlRDeERRVUZqUnl4SlFVRkpMRU5CUVd4Q0xFTkJRV0k3UVVGRFFTeFZRVUZKU1N4VlFVRlZMRXRCUVV0eVJDeFRRVUZNTEVOQlFXVnBSQ3hKUVVGSkxFTkJRVzVDTEVOQlFXUTdPMEZCUlVFc1YwRkJTMnBFTEZOQlFVd3NRMEZCWldsRUxFTkJRV1lzU1VGQmIwSkZMRlZCUVZWRkxFOUJRVGxDT3p0QlFVVkJMRlZCUVVsS0xFMUJRVTBzUzBGQlMwWXNVMEZCVEN4SFFVRnBRaXhEUVVFelFpeEZRVUU0UWp0QlFVTTFRaXhoUVVGTFJDeFJRVUZNTEVOQlFXTkhMRWxCUVVrc1EwRkJiRUlzU1VGQmRVSXNTMEZCUzBnc1VVRkJUQ3hEUVVGalJ5eEpRVUZKTEVOQlFXeENMRU5CUVhaQ08wRkJRMEVzWVVGQlMycEVMRk5CUVV3c1EwRkJaV2xFTEVsQlFVa3NRMEZCYmtJc1NVRkJkMElzUzBGQlMycEVMRk5CUVV3c1EwRkJaV2xFTEVsQlFVa3NRMEZCYmtJc1EwRkJlRUk3UVVGRFJEczdRVUZGUkN4WFFVRkxSaXhUUVVGTU96dEJRVVZCT3pzN08wRkJTVUVzVlVGQlNVOHNTVUZCU1Zvc1dVRkJXWEpFTEUxQlFVMHJSQ3hOUVVGT0xFTkJRVm9zUlVGQk1rSXZSQ3hMUVVFelFpeEZRVUZyUXpaRUxFMUJRV3hETEVWQlFUQkRReXhQUVVFeFF5eEZRVUZ0UkN4RFFVRnVSQ3hGUVVGelJETkVMRTlCUVhSRUxFTkJRVkk3UVVGRFFUQkVMR2RDUVVGVlNTeERRVUZXTzBGQlEwRklMR2xDUVVGWFJ5eERRVUZZT3p0QlFVVkJMRlZCUVVsSUxGbEJRVmtzUTBGQmFFSXNSVUZCYlVJN1FVRkRha0k3UVVGRFJEczdRVUZGUkRzN096dEJRVWxCUlN4blFrRkJWVzVDTEZkQlFWYzNReXhOUVVGTk5rUXNVMEZCVTBNc1QwRkJWQ3hIUVVGdFFpeERRVUY2UWl4RFFVRllMRVZCUVhkRE9VUXNTMEZCZUVNc1JVRkJLME1yUkN4TlFVRXZReXhGUVVGMVJFTXNUMEZCZGtRc1JVRkJaMFZCTEZWQlFWVXNRMEZCTVVVc1JVRkJOa1UzUkN4UFFVRTNSU3hEUVVGV096dEJRVVZCTEZWQlFVazJSQ3haUVVGWkxFTkJRV2hDTEVWQlFXMUNPMEZCUTJwQ08wRkJRMFE3TzBGQlJVUTdPenM3UVVGSlFTeFZRVUZKUml4WFFVRlhSU3hQUVVGbUxFVkJRWGRDTzBGQlEzUkNMR0ZCUVV0RkxGRkJRVXdzUTBGQlkwd3NUVUZCWkN4RlFVRnpRa01zVDBGQmRFSXNSVUZCSzBKRExFMUJRUzlDTEVWQlFYVkRReXhQUVVGMlF6dEJRVVZFTEU5QlNFUXNUVUZIVHp0QlFVTk1MR0ZCUVV0SExGTkJRVXdzUTBGQlpVNHNUVUZCWml4RlFVRjFRa01zVDBGQmRrSXNSVUZCWjBORExFMUJRV2hETEVWQlFYZERReXhQUVVGNFF6dEJRVU5FTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3pzN096czdPenM3TmtKQllWTklMRTBzUlVGQlVVTXNUeXhGUVVGVFF5eE5MRVZCUVZGRExFOHNSVUZCVXpzN1FVRkZla01zVlVGQlNUZEVMRlZCUVZVc1MwRkJTMEVzVDBGQmJrSTdRVUZEUVN4VlFVRkpTQ3hSUVVGUkxFdEJRVXRCTEV0QlFXcENPMEZCUTBFc1ZVRkJTVzFFTEUxQlFVMHNTMEZCUzBFc1IwRkJaanRCUVVOQkxGVkJRVWxUTEVsQlFVa3NRMEZCVWpzN1FVRkZRU3hYUVVGTFFTeEpRVUZKTEVOQlFWUXNSVUZCV1VFc1NVRkJTVVVzVDBGQmFFSXNSVUZCZVVKR0xFZEJRWHBDTEVWQlFUaENPMEZCUXpWQ1ZDeFpRVUZKVXl4RFFVRktMRWxCUVZNMVJDeE5RVUZOTmtRc1UwRkJVMFFzUTBGQlppeERRVUZVTzBGQlEwUTdPMEZCUlVRc1ZVRkJTVkVzVlVGQlZTeERRVUZrTzBGQlEwRXNWVUZCU1VNc1ZVRkJWVTRzVFVGQlpEdEJRVU5CTEZWQlFVbFBMRTlCUVU5VUxFMUJRVmc3TzBGQlJVRTNSQ3haUVVGTmMwVXNUVUZCVGl4SlFVRm5RblJGTEUxQlFVMXhSU3hUUVVGT0xFTkJRV2hDT3p0QlFVVkJMRlZCUVVrc1JVRkJSVXdzVDBGQlJpeExRVUZqTEVOQlFXeENMRVZCUVhGQ08wRkJRMjVDTEdGQlFVdEtMRWxCUVVrc1EwRkJWQ3hGUVVGWlFTeEpRVUZKUlN4UFFVRm9RaXhGUVVGNVFrWXNSMEZCZWtJc1JVRkJPRUk3UVVGRE5VSTFSQ3huUWtGQlRYTkZMRTlCUVU5V0xFTkJRV0lzU1VGQmEwSlVMRWxCUVVscFFpeFZRVUZWVWl4RFFVRmtMRU5CUVd4Q08wRkJRMFE3UVVGRFJEdEJRVU5FT3p0QlFVVkVMRlZCUVVsRkxGbEJRVmtzUTBGQmFFSXNSVUZCYlVJN1FVRkRha0lzWVVGQlMwWXNTVUZCU1N4RFFVRlVMRVZCUVZsQkxFbEJRVWxKTEU5QlFXaENMRVZCUVhsQ1NpeEhRVUY2UWl4RlFVRTRRanRCUVVNMVFqVkVMR2RDUVVGTmMwVXNUMEZCVDFZc1EwRkJZaXhKUVVGclFqVkVMRTFCUVUxeFJTeFZRVUZWVkN4RFFVRm9RaXhEUVVGc1FqdEJRVU5FTzBGQlEwUTFSQ3hqUVVGTmMwVXNUMEZCVDA0c1QwRkJZaXhKUVVGM1FtSXNTVUZCU1dsQ0xFOUJRVW9zUTBGQmVFSTdRVUZEUVR0QlFVTkVPenRCUVVWRUxGVkJRVWxrTEZsQlFWa3NTMEZCUzBFc1UwRkJja0k3TzBGQlJVRXNZVUZCVHl4SlFVRlFMRVZCUVdFN1FVRkRXQ3haUVVGSmFVSXNVMEZCVXl4RFFVRmlPMEZCUTBFc1dVRkJTVU1zVTBGQlV5eERRVUZpTzBGQlEwRXNXVUZCU1VNc1QwRkJUeXhMUVVGWU96dEJRVVZCTEZkQlFVYzdRVUZEUkN4alFVRkpkRVVzVVVGQlVVZ3NUVUZCVFhGRkxFOUJRVTRzUTBGQlVpeEZRVUYzUW14Q0xFbEJRVWxwUWl4UFFVRktMRU5CUVhoQ0xFbEJRWGRETEVOQlFUVkRMRVZCUVN0RE8wRkJRemREY0VVc2EwSkJRVTF6UlN4TlFVRk9MRWxCUVdkQ2RFVXNUVUZCVFhGRkxGTkJRVTRzUTBGQmFFSTdRVUZEUVVjN1FVRkRRVVFzY1VKQlFWTXNRMEZCVkRzN1FVRkZRU3huUWtGQlNTeEZRVUZGVUN4UFFVRkdMRXRCUVdNc1EwRkJiRUlzUlVGQmNVSTdRVUZEYmtKVExIRkNRVUZQTEVsQlFWQTdRVUZEUVR0QlFVTkVPMEZCUlVZc1YwRldSQ3hOUVZWUE8wRkJRMHg2UlN4clFrRkJUWE5GTEUxQlFVNHNTVUZCWjBKdVFpeEpRVUZKYVVJc1UwRkJTaXhEUVVGb1FqdEJRVU5CUnp0QlFVTkJReXh4UWtGQlV5eERRVUZVTzBGQlEwRXNaMEpCUVVrc1JVRkJSVllzVDBGQlJpeExRVUZqTEVOQlFXeENMRVZCUVhGQ08wRkJRMjVDVnl4eFFrRkJUeXhKUVVGUU8wRkJRMEU3UVVGRFJEdEJRVU5HTzBGQlEwWXNVMEZ3UWtRc1VVRnZRbE1zUTBGQlEwWXNVMEZCVTBNc1RVRkJWaXhKUVVGdlFteENMRk5CY0VJM1FqczdRVUZ6UWtFc1dVRkJTVzFDTEVsQlFVb3NSVUZCVlR0QlFVTlNPMEZCUTBRN08wRkJSVVFzVjBGQlJ6dEJRVU5FUml4dFFrRkJVMnhDTEZsQlFWbHlSQ3hOUVVGTmNVVXNUMEZCVGl4RFFVRmFMRVZCUVRSQ2JFSXNSMEZCTlVJc1JVRkJhVU5wUWl4UFFVRnFReXhGUVVFd1EwNHNUMEZCTVVNc1JVRkJiVVFzUTBGQmJrUXNSVUZCYzBRelJDeFBRVUYwUkN4RFFVRlVPenRCUVVWQkxHTkJRVWx2UlN4WFFVRlhMRU5CUVdZc1JVRkJhMEk3UVVGRGFFSXNhVUpCUVV0WUxFbEJRVWtzUTBGQlZDeEZRVUZaUVN4SlFVRkpWeXhOUVVGb1FpeEZRVUYzUWxnc1IwRkJlRUlzUlVGQk5rSTdRVUZETTBJMVJDeHZRa0ZCVFhORkxFOUJRVTlXTEVOQlFXSXNTVUZCYTBKVUxFbEJRVWxwUWl4VlFVRlZVaXhEUVVGa0xFTkJRV3hDTzBGQlEwUTdPMEZCUlVSVkxHOUNRVUZSUXl4TlFVRlNPMEZCUTBGSUxIVkNRVUZYUnl4TlFVRllPMEZCUTBGVUxIVkNRVUZYVXl4TlFVRllPMEZCUTBFc1owSkJRVWxVTEZkQlFWY3NRMEZCWml4RlFVRnJRanRCUVVOb1FsY3NjVUpCUVU4c1NVRkJVRHRCUVVOQk8wRkJRMFE3UVVGRFJqczdRVUZGUkhwRkxHZENRVUZOYzBVc1RVRkJUaXhKUVVGblFuUkZMRTFCUVUxeFJTeFRRVUZPTEVOQlFXaENPenRCUVVWQkxHTkJRVWtzUlVGQlJVd3NUMEZCUml4TFFVRmpMRU5CUVd4Q0xFVkJRWEZDTzBGQlEyNUNVeXh0UWtGQlR5eEpRVUZRTzBGQlEwRTdRVUZEUkRzN1FVRkZSRVFzYlVKQlFWTXpRaXhYUVVGWFRTeEpRVUZKYVVJc1QwRkJTaXhEUVVGWUxFVkJRWGxDY0VVc1MwRkJla0lzUlVGQlowTnhSU3hQUVVGb1F5eEZRVUY1UTB3c1QwRkJla01zUlVGQmEwUXNRMEZCYkVRc1JVRkJjVVEzUkN4UFFVRnlSQ3hEUVVGVU96dEJRVVZCTEdOQlFVbHhSU3hYUVVGWExFTkJRV1lzUlVGQmEwSTdRVUZEYUVJc2FVSkJRVXRhTEVsQlFVa3NRMEZCVkN4RlFVRlpRU3hKUVVGSldTeE5RVUZvUWl4RlFVRjNRbG9zUjBGQmVFSXNSVUZCTmtJN1FVRkRNMEkxUkN4dlFrRkJUWE5GTEU5QlFVOVdMRU5CUVdJc1NVRkJhMEkxUkN4TlFVRk5jVVVzVlVGQlZWUXNRMEZCYUVJc1EwRkJiRUk3UVVGRFJEczdRVUZGUkZVc2IwSkJRVkZGTEUxQlFWSTdRVUZEUVVnc2RVSkJRVmRITEUxQlFWZzdRVUZEUVZJc2RVSkJRVmRSTEUxQlFWZzdPMEZCUlVFc1owSkJRVWxTTEZsQlFWa3NRMEZCYUVJc1JVRkJiVUk3UVVGRGFrSlRMSEZDUVVGUExFbEJRVkE3UVVGRFFUdEJRVU5FTzBGQlEwWTdRVUZEUkhwRkxHZENRVUZOYzBVc1RVRkJUaXhKUVVGblFtNUNMRWxCUVVscFFpeFRRVUZLTEVOQlFXaENPenRCUVVWQkxHTkJRVWtzUlVGQlJVNHNUMEZCUml4TFFVRmpMRU5CUVd4Q0xFVkJRWEZDTzBGQlEyNUNWeXh0UWtGQlR5eEpRVUZRTzBGQlEwRTdRVUZEUkRzN1FVRkZSRzVDTzBGQlJVUXNVMEZxUkVRc1VVRnBSRk5wUWl4VlFVRlZhRVFzY1VKQlFWWXNTVUZCYlVOcFJDeFZRVUZWYWtRc2NVSkJha1IwUkRzN1FVRnRSRUVzV1VGQlNXdEVMRWxCUVVvc1JVRkJWVHRCUVVOU08wRkJRMFE3TzBGQlJVUXNXVUZCU1c1Q0xGbEJRVmtzUTBGQmFFSXNSVUZCYlVJN1FVRkRha0pCTEhOQ1FVRlpMRU5CUVZvN1FVRkRSRHM3UVVGRlJFRXNjVUpCUVdFc1EwRkJZanRCUVVORU96dEJRVVZFTEZkQlFVdEJMRk5CUVV3c1IwRkJhVUpCTEZOQlFXcENPenRCUVVWQkxGVkJRVWxCTEZsQlFWa3NRMEZCYUVJc1JVRkJiVUk3UVVGRGFrSXNZVUZCUzBFc1UwRkJUQ3hIUVVGcFFpeERRVUZxUWp0QlFVTkVPenRCUVVWRUxGVkJRVWxSTEZsQlFWa3NRMEZCYUVJc1JVRkJiVUk3UVVGRGFrSXNZVUZCUzBZc1NVRkJTU3hEUVVGVUxFVkJRVmxCTEVsQlFVbEpMRTlCUVdoQ0xFVkJRWGxDU2l4SFFVRjZRaXhGUVVFNFFqdEJRVU0xUWpWRUxHZENRVUZOYzBVc1QwRkJUMVlzUTBGQllpeEpRVUZyUWpWRUxFMUJRVTF4UlN4VlFVRlZWQ3hEUVVGb1FpeERRVUZzUWp0QlFVTkVPMEZCUTBRMVJDeGpRVUZOYzBVc1QwRkJUMDRzVDBGQllpeEpRVUYzUW1Jc1NVRkJTV2xDTEU5QlFVb3NRMEZCZUVJN1FVRkZSQ3hQUVU1RUxFMUJUVThzU1VGQlNVNHNXVUZCV1N4RFFVRm9RaXhGUVVGdFFqdEJRVU40UWl4alFVRk5MRWxCUVVsWkxFdEJRVW9zUTBGQlZTd3lRMEZCVml4RFFVRk9PMEZCUlVRc1QwRklUU3hOUVVkQk8wRkJRMHdzWVVGQlMyUXNTVUZCU1N4RFFVRlVMRVZCUVZsQkxFbEJRVWxGTEU5QlFXaENMRVZCUVhsQ1JpeEhRVUY2UWl4RlFVRTRRanRCUVVNMVFqVkVMR2RDUVVGTmMwVXNUMEZCVDFZc1EwRkJZaXhKUVVGclFsUXNTVUZCU1dsQ0xGVkJRVlZTTEVOQlFXUXNRMEZCYkVJN1FVRkRSRHRCUVVOR08wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096czdPenM3T3pzN09FSkJZVlZETEUwc1JVRkJVVU1zVHl4RlFVRlRReXhOTEVWQlFWRkRMRThzUlVGQlV6dEJRVU14UXl4VlFVRkpOMFFzVlVGQlZTeExRVUZMUVN4UFFVRnVRanRCUVVOQkxGVkJRVWxJTEZGQlFWRXNTMEZCUzBFc1MwRkJha0k3UVVGRFFTeFZRVUZKYlVRc1RVRkJUU3hMUVVGTFFTeEhRVUZtTzBGQlEwRXNWVUZCU1ZNc1NVRkJTU3hEUVVGU096dEJRVVZCTEZkQlFVdEJMRWxCUVVrc1EwRkJWQ3hGUVVGWlFTeEpRVUZKU1N4UFFVRm9RaXhGUVVGNVFrb3NSMEZCZWtJc1JVRkJPRUk3UVVGRE5VSlVMRmxCUVVsVExFTkJRVW9zU1VGQlV6VkVMRTFCUVUwclJDeFRRVUZUU0N4RFFVRm1MRU5CUVZRN1FVRkRSRHM3UVVGRlJDeFZRVUZKVVN4VlFVRlZVQ3hUUVVGVFF5eFBRVUZVTEVkQlFXMUNMRU5CUVdwRE8wRkJRMEVzVlVGQlNVOHNWVUZCVlV3c1ZVRkJWU3hEUVVGNFFqdEJRVU5CTEZWQlFVbE5MRTlCUVU5UUxGTkJRVk5ETEU5QlFWUXNSMEZCYlVJc1EwRkJPVUk3UVVGRFFTeFZRVUZKVnl4bFFVRmxMRU5CUVc1Q08wRkJRMEVzVlVGQlNVTXNZVUZCWVN4RFFVRnFRanM3UVVGRlFUVkZMRmxCUVUxelJTeE5RVUZPTEVsQlFXZENkRVVzVFVGQlRXOUZMRk5CUVU0c1EwRkJhRUk3TzBGQlJVRXNWVUZCU1N4RlFVRkZUaXhQUVVGR0xFdEJRV01zUTBGQmJFSXNSVUZCY1VJN1FVRkRia0poTEhWQ1FVRmxUQ3hSUVVGUlRpeFZRVUZWTEVOQlFXeENMRU5CUVdZN08wRkJSVUVzWVVGQlMwb3NTVUZCU1N4RFFVRlVMRVZCUVZsQkxFbEJRVWxKTEU5QlFXaENMRVZCUVhsQ1NpeEhRVUY2UWl4RlFVRTRRanRCUVVNMVFqVkVMR2RDUVVGTk1rVXNaVUZCWldZc1EwRkJja0lzU1VGQk1FSlVMRWxCUVVsVExFTkJRVW9zUTBGQk1VSTdRVUZEUkRzN1FVRkZSRHRCUVVORU96dEJRVVZFTEZWQlFVbEpMRmxCUVZrc1EwRkJhRUlzUlVGQmJVSTdRVUZEYWtKTkxHZENRVUZSVWl4UFFVRlNPMEZCUTBGTkxHMUNRVUZYVGl4UFFVRllPMEZCUTBGakxIRkNRVUZoVGl4UFFVRlBMRU5CUVhCQ08wRkJRMEZMTEhWQ1FVRmxVQ3hWUVVGVkxFTkJRWHBDT3p0QlFVVkJMR0ZCUVV0U0xFbEJRVWxGTEZWQlFWVXNRMEZCYmtJc1JVRkJjMEpHTEV0QlFVc3NRMEZCTTBJc1JVRkJPRUpCTEVkQlFUbENMRVZCUVcxRE8wRkJRMnBETlVRc1owSkJRVTAwUlN4aFFVRmhhRUlzUTBGQmJrSXNTVUZCZDBJMVJDeE5RVUZOTWtVc1pVRkJaV1lzUTBGQmNrSXNRMEZCZUVJN1FVRkRSRHM3UVVGRlJEVkVMR05CUVUxelJTeEpRVUZPTEVsQlFXTnVRaXhKUVVGSmEwSXNUMEZCU2l4RFFVRmtPMEZCUTBFN1FVRkRSRHM3UVVGRlJDeFZRVUZKWml4WlFVRlpMRXRCUVV0QkxGTkJRWEpDT3p0QlFVVkJMR0ZCUVU4c1NVRkJVQ3hGUVVGaE8wRkJRMWdzV1VGQlNXbENMRk5CUVZNc1EwRkJZanRCUVVOQkxGbEJRVWxETEZOQlFWTXNRMEZCWWp0QlFVTkJMRmxCUVVsRExFOUJRVThzUzBGQldEczdRVUZGUVN4WFFVRkhPMEZCUTBRc1kwRkJTWFJGTEZGQlFWRm5SQ3hKUVVGSmEwSXNUMEZCU2l4RFFVRlNMRVZCUVhOQ2NrVXNUVUZCVFc5RkxFOUJRVTRzUTBGQmRFSXNTVUZCZDBNc1EwRkJOVU1zUlVGQkswTTdRVUZETjBOd1JTeHJRa0ZCVFhORkxFMUJRVTRzU1VGQlowSjBSU3hOUVVGTmIwVXNVMEZCVGl4RFFVRm9RanRCUVVOQlJ6dEJRVU5CUXl4eFFrRkJVeXhEUVVGVU8wRkJRMEVzWjBKQlFVa3NSVUZCUlZZc1QwRkJSaXhMUVVGakxFTkJRV3hDTEVWQlFYRkNPMEZCUTI1Q1Z5eHhRa0ZCVHl4SlFVRlFPMEZCUTBFN1FVRkRSRHRCUVVWR0xGZEJWRVFzVFVGVFR6dEJRVU5NZWtVc2EwSkJRVTF6UlN4TlFVRk9MRWxCUVdkQ2JrSXNTVUZCU1d0Q0xGTkJRVW9zUTBGQmFFSTdRVUZEUVVjN1FVRkRRVVFzY1VKQlFWTXNRMEZCVkR0QlFVTkJMR2RDUVVGSkxFVkJRVVZRTEU5QlFVWXNTMEZCWXl4RFFVRnNRaXhGUVVGeFFqdEJRVU51UWxNc2NVSkJRVThzU1VGQlVEdEJRVU5CTzBGQlEwUTdRVUZEUmp0QlFVVkdMRk5CY0VKRUxGRkJiMEpUTEVOQlFVTkdMRk5CUVZORExFMUJRVllzU1VGQmIwSnNRaXhUUVhCQ04wSTdPMEZCYzBKQkxGbEJRVWx0UWl4SlFVRktMRVZCUVZVN1FVRkRVanRCUVVORU96dEJRVVZFTEZkQlFVYzdRVUZEUkVZc2JVSkJRVk5VTEZWQlFWVlVMRmxCUVZsR0xFbEJRVWxyUWl4UFFVRktMRU5CUVZvc1JVRkJNRUp5UlN4TFFVRXhRaXhGUVVGcFF6WkVMRTFCUVdwRExFVkJRWGxEUXl4UFFVRjZReXhGUVVGclJFRXNWVUZCVlN4RFFVRTFSQ3hGUVVFclJETkVMRTlCUVM5RUxFTkJRVzVDT3p0QlFVVkJMR05CUVVsdlJTeFhRVUZYTEVOQlFXWXNSVUZCYTBJN1FVRkRhRUpFTEc5Q1FVRlJReXhOUVVGU08wRkJRMEZJTEhWQ1FVRlhSeXhOUVVGWU8wRkJRMEZVTEhWQ1FVRlhVeXhOUVVGWU8wRkJRMEZMTEhsQ1FVRmhUaXhQUVVGUExFTkJRWEJDTzBGQlEwRkxMREpDUVVGbFVDeFZRVUZWTEVOQlFYcENPenRCUVVWQkxHbENRVUZMVWl4SlFVRkpWeXhUUVVGVExFTkJRV3hDTEVWQlFYRkNXQ3hMUVVGTExFTkJRVEZDTEVWQlFUWkNRU3hIUVVFM1FpeEZRVUZyUXp0QlFVTm9RelZFTEc5Q1FVRk5ORVVzWVVGQllXaENMRU5CUVc1Q0xFbEJRWGRDTlVRc1RVRkJUVEpGTEdWQlFXVm1MRU5CUVhKQ0xFTkJRWGhDTzBGQlEwUTdPMEZCUlVRc1owSkJRVWxGTEZsQlFWa3NRMEZCYUVJc1JVRkJiVUk3UVVGRGFrSlhMSEZDUVVGUExFbEJRVkE3UVVGRFFUdEJRVU5FTzBGQlEwWTdPMEZCUlVSNlJTeG5Ra0ZCVFhORkxFMUJRVTRzU1VGQlowSnVRaXhKUVVGSmEwSXNVMEZCU2l4RFFVRm9RanM3UVVGRlFTeGpRVUZKTEVWQlFVVk1MRTlCUVVZc1MwRkJZeXhEUVVGc1FpeEZRVUZ4UWp0QlFVTnVRbE1zYlVKQlFVOHNTVUZCVUR0QlFVTkJPMEZCUTBRN08wRkJSVVJFTEcxQ1FVRlRVaXhWUVVGVmJrSXNWMEZCVnpkRExFMUJRVTF2UlN4UFFVRk9MRU5CUVZnc1JVRkJNa0pxUWl4SFFVRXpRaXhGUVVGblF5eERRVUZvUXl4RlFVRnRRMkVzVDBGQmJrTXNSVUZCTkVOQkxGVkJRVlVzUTBGQmRFUXNSVUZCZVVRM1JDeFBRVUY2UkN4RFFVRnVRanM3UVVGRlFTeGpRVUZKY1VVc1YwRkJWeXhEUVVGbUxFVkJRV3RDTzBGQlEyaENSaXh2UWtGQlVVVXNUVUZCVWp0QlFVTkJTQ3gxUWtGQlYwY3NUVUZCV0R0QlFVTkJVaXgxUWtGQlYxRXNUVUZCV0R0QlFVTkJTU3g1UWtGQllVNHNUMEZCVHl4RFFVRndRanRCUVVOQlN5d3lRa0ZCWlU0c1ZVRkJWU3hEUVVGNlFqczdRVUZGUVN4cFFrRkJTMVFzU1VGQlNTeERRVUZVTEVWQlFWbEJMRWxCUVVsWkxFMUJRV2hDTEVWQlFYZENXaXhIUVVGNFFpeEZRVUUyUWp0QlFVTXpRalZFTEc5Q1FVRk5ORVVzWVVGQllXaENMRU5CUVc1Q0xFbEJRWGRDVkN4SlFVRkpkMElzWlVGQlpXWXNRMEZCYmtJc1EwRkJlRUk3UVVGRFJEczdRVUZGUkN4blFrRkJTVWtzVjBGQlZ5eERRVUZtTEVWQlFXdENPMEZCUTJoQ1V5eHhRa0ZCVHl4SlFVRlFPMEZCUTBFN1FVRkRSRHRCUVVOR096dEJRVVZFZWtVc1owSkJRVTF6UlN4TlFVRk9MRWxCUVdkQ2RFVXNUVUZCVFc5RkxGTkJRVTRzUTBGQmFFSTdPMEZCUlVFc1kwRkJTU3hGUVVGRlRpeFBRVUZHTEV0QlFXTXNRMEZCYkVJc1JVRkJjVUk3UVVGRGJrSlhMRzFDUVVGUExFbEJRVkE3UVVGRFFUdEJRVU5FT3p0QlFVVkVia0k3UVVGRlJDeFRRWFpFUkN4UlFYVkVVMmxDTEZWQlFWVm9SQ3h4UWtGQlZpeEpRVUZ0UTJsRUxGVkJRVlZxUkN4eFFrRjJSSFJFT3p0QlFYbEVRU3haUVVGSmEwUXNTVUZCU2l4RlFVRlZPMEZCUTFJN1FVRkRSRHM3UVVGRlJDeFpRVUZKYmtJc1dVRkJXU3hEUVVGb1FpeEZRVUZ0UWp0QlFVTnFRa0VzYzBKQlFWa3NRMEZCV2p0QlFVTkVPenRCUVVWRVFTeHhRa0ZCWVN4RFFVRmlPMEZCUTBRN08wRkJSVVFzVjBGQlMwRXNVMEZCVEN4SFFVRnBRa0VzVTBGQmFrSTdPMEZCUlVFc1ZVRkJTVUVzV1VGQldTeERRVUZvUWl4RlFVRnRRanRCUVVOcVFpeGhRVUZMUVN4VFFVRk1MRWRCUVdsQ0xFTkJRV3BDTzBGQlEwUTdPMEZCUlVRc1ZVRkJTVlVzV1VGQldTeERRVUZvUWl4RlFVRnRRanRCUVVOcVFrMHNaMEpCUVZGU0xFOUJRVkk3UVVGRFFVMHNiVUpCUVZkT0xFOUJRVmc3UVVGRFFXTXNjVUpCUVdGT0xFOUJRVThzUTBGQmNFSTdRVUZEUVVzc2RVSkJRV1ZRTEZWQlFWVXNRMEZCZWtJN08wRkJSVUVzWVVGQlMxSXNTVUZCU1VVc1ZVRkJWU3hEUVVGdVFpeEZRVUZ6UWtZc1MwRkJTeXhEUVVFelFpeEZRVUU0UWtFc1IwRkJPVUlzUlVGQmJVTTdRVUZEYWtNMVJDeG5Ra0ZCVFRSRkxHRkJRV0ZvUWl4RFFVRnVRaXhKUVVGM1FqVkVMRTFCUVUweVJTeGxRVUZsWml4RFFVRnlRaXhEUVVGNFFqdEJRVU5FT3p0QlFVVkVOVVFzWTBGQlRYTkZMRWxCUVU0c1NVRkJZMjVDTEVsQlFVbHJRaXhQUVVGS0xFTkJRV1E3UVVGRlJDeFBRVnBFTEUxQldVOHNTVUZCU1V3c1dVRkJXU3hEUVVGb1FpeEZRVUZ0UWp0QlFVTjRRaXhqUVVGTkxFbEJRVWxWTEV0QlFVb3NRMEZCVlN3MFEwRkJWaXhEUVVGT08wRkJSVVFzVDBGSVRTeE5RVWRCTzBGQlEweERMSFZDUVVGbFRDeFJRVUZSVGl4VlFVRlZMRU5CUVd4Q0xFTkJRV1k3UVVGRFFTeGhRVUZMU2l4SlFVRkpMRU5CUVZRc1JVRkJXVUVzU1VGQlNVa3NUMEZCYUVJc1JVRkJlVUpLTEVkQlFYcENMRVZCUVRoQ08wRkJRelZDTlVRc1owSkJRVTB5UlN4bFFVRmxaaXhEUVVGeVFpeEpRVUV3UWxRc1NVRkJTVk1zUTBGQlNpeERRVUV4UWp0QlFVTkVPMEZCUTBZN1FVRkRSanM3T3pzN08wRkJSMGdpTENKbWFXeGxJam9pZEdsdGMyOXlkQzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHZJSEpsWm1WeVpXNWpaVG9nYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDIxNmFXTmpZWEprTDI1dlpHVXRkR2x0YzI5eWRGeHVYRzR2S2lwY2JpQXFJRVJsWm1GMWJIUWdiV2x1YVcxMWJTQnphWHBsSUc5bUlHRWdjblZ1TGx4dUlDb3ZYRzVqYjI1emRDQkVSVVpCVlV4VVgwMUpUbDlOUlZKSFJTQTlJRE15TzF4dVhHNHZLaXBjYmlBcUlFMXBibWx0ZFcwZ2IzSmtaWEpsWkNCemRXSnpaWEYxWldObElISmxjWFZwY21Wa0lIUnZJR1J2SUdkaGJHeHZjR2x1Wnk1Y2JpQXFMMXh1WTI5dWMzUWdSRVZHUVZWTVZGOU5TVTVmUjBGTVRFOVFTVTVISUQwZ056dGNibHh1THlvcVhHNGdLaUJFWldaaGRXeDBJSFJ0Y0NCemRHOXlZV2RsSUd4bGJtZDBhQzRnUTJGdUlHbHVZM0psWVhObElHUmxjR1Z1WkdsdVp5QnZiaUIwYUdVZ2MybDZaU0J2WmlCMGFHVmNiaUFxSUhOdFlXeHNaWE4wSUhKMWJpQjBieUJ0WlhKblpTNWNiaUFxTDF4dVkyOXVjM1FnUkVWR1FWVk1WRjlVVFZCZlUxUlBVa0ZIUlY5TVJVNUhWRWdnUFNBeU5UWTdYRzVjYmk4cUtseHVJQ29nVUhKbExXTnZiWEIxZEdWa0lIQnZkMlZ5Y3lCdlppQXhNQ0JtYjNJZ1pXWm1hV05wWlc1MElHeGxlR2xqYjJkeVlYQm9hV01nWTI5dGNHRnlhWE52YmlCdlpseHVJQ29nYzIxaGJHd2dhVzUwWldkbGNuTXVYRzRnS2k5Y2JtTnZibk4wSUZCUFYwVlNVMTlQUmw5VVJVNGdQU0JiTVdVd0xDQXhaVEVzSURGbE1pd2dNV1V6TENBeFpUUXNJREZsTlN3Z01XVTJMQ0F4WlRjc0lERmxPQ3dnTVdVNVhWeHVYRzR2S2lwY2JpQXFJRVZ6ZEdsdFlYUmxJSFJvWlNCc2IyZGhjbWwwYUcwZ1ltRnpaU0F4TUNCdlppQmhJSE50WVd4c0lHbHVkR1ZuWlhJdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUhnZ0xTQlVhR1VnYVc1MFpXZGxjaUIwYnlCbGMzUnBiV0YwWlNCMGFHVWdiRzluWVhKcGRHaHRJRzltTGx4dUlDb2dRSEpsZEhWeWJpQjdiblZ0WW1WeWZTQXRJRlJvWlNCbGMzUnBiV0YwWldRZ2JHOW5ZWEpwZEdodElHOW1JSFJvWlNCcGJuUmxaMlZ5TGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJzYjJjeE1DaDRLU0I3WEc0Z0lHbG1JQ2g0SUR3Z01XVTFLU0I3WEc0Z0lDQWdhV1lnS0hnZ1BDQXhaVElwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUI0SUR3Z01XVXhJRDhnTUNBNklERTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSGdnUENBeFpUUXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjRJRHdnTVdVeklEOGdNaUE2SURNN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJRFE3WEc0Z0lIMWNibHh1SUNCcFppQW9lQ0E4SURGbE55a2dlMXh1SUNBZ0lISmxkSFZ5YmlCNElEd2dNV1UySUQ4Z05TQTZJRFk3WEc0Z0lIMWNibHh1SUNCcFppQW9lQ0E4SURGbE9Ta2dlMXh1SUNBZ0lISmxkSFZ5YmlCNElEd2dNV1U0SUQ4Z055QTZJRGc3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnT1R0Y2JuMWNibHh1THlvcVhHNGdLaUJFWldaaGRXeDBJR0ZzY0doaFltVjBhV05oYkNCamIyMXdZWEpwYzI5dUlHOW1JR2wwWlcxekxseHVJQ3BjYmlBcUlFQndZWEpoYlNCN2MzUnlhVzVuZkc5aWFtVmpkSHh1ZFcxaVpYSjlJR0VnTFNCR2FYSnpkQ0JsYkdWdFpXNTBJSFJ2SUdOdmJYQmhjbVV1WEc0Z0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjN4dlltcGxZM1I4Ym5WdFltVnlmU0JpSUMwZ1UyVmpiMjVrSUdWc1pXMWxiblFnZEc4Z1kyOXRjR0Z5WlM1Y2JpQXFJRUJ5WlhSMWNtNGdlMjUxYldKbGNuMGdMU0JCSUhCdmMybDBhWFpsSUc1MWJXSmxjaUJwWmlCaExuUnZVM1J5YVc1bktDa2dQaUJpTG5SdlUzUnlhVzVuS0Nrc0lHRmNiaUFxSUc1bFoyRjBhWFpsSUc1MWJXSmxjaUJwWmlBdWRHOVRkSEpwYm1jb0tTQThJR0l1ZEc5VGRISnBibWNvS1N3Z01DQnZkR2hsY25kcGMyVXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHRnNjR2hoWW1WMGFXTmhiRU52YlhCaGNtVW9ZU3dnWWlrZ2UxeHVJQ0JwWmlBb1lTQTlQVDBnWWlrZ2UxeHVJQ0FnSUhKbGRIVnliaUF3TzF4dUlDQjlYRzVjYmlBZ2FXWWdLSDUrWVNBOVBUMGdZU0FtSmlCK2ZtSWdQVDA5SUdJcElIdGNiaUFnSUNCcFppQW9ZU0E5UFQwZ01DQjhmQ0JpSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZU0E4SUdJZ1B5QXRNU0E2SURFN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHRWdQQ0F3SUh4OElHSWdQQ0F3S1NCN1hHNGdJQ0FnSUNCcFppQW9ZaUErUFNBd0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQXRNVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYVdZZ0tHRWdQajBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z01UdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdZU0E5SUMxaE8xeHVJQ0FnSUNBZ1lpQTlJQzFpTzF4dUlDQWdJSDFjYmx4dUlDQWdJR052Ym5OMElHRnNJRDBnYkc5bk1UQW9ZU2s3WEc0Z0lDQWdZMjl1YzNRZ1ltd2dQU0JzYjJjeE1DaGlLVHRjYmx4dUlDQWdJR3hsZENCMElEMGdNRHRjYmx4dUlDQWdJR2xtSUNoaGJDQThJR0pzS1NCN1hHNGdJQ0FnSUNCaElDbzlJRkJQVjBWU1UxOVBSbDlVUlU1Ylltd2dMU0JoYkNBdElERmRPMXh1SUNBZ0lDQWdZaUF2UFNBeE1EdGNiaUFnSUNBZ0lIUWdQU0F0TVR0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0dGc0lENGdZbXdwSUh0Y2JpQWdJQ0FnSUdJZ0tqMGdVRTlYUlZKVFgwOUdYMVJGVGx0aGJDQXRJR0pzSUMwZ01WMDdYRzRnSUNBZ0lDQmhJQzg5SURFd08xeHVJQ0FnSUNBZ2RDQTlJREU3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0dFZ1BUMDlJR0lwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQmhJRHdnWWlBL0lDMHhJRG9nTVR0Y2JpQWdmVnh1WEc0Z0lHeGxkQ0JoVTNSeUlEMGdVM1J5YVc1bktHRXBPMXh1SUNCc1pYUWdZbE4wY2lBOUlGTjBjbWx1WnloaUtUdGNibHh1SUNCcFppQW9ZVk4wY2lBOVBUMGdZbE4wY2lrZ2UxeHVJQ0FnSUhKbGRIVnliaUF3TzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUdGVGRISWdQQ0JpVTNSeUlEOGdMVEVnT2lBeE8xeHVmVnh1WEc0dktpcGNiaUFxSUVOdmJYQjFkR1VnYldsdWFXMTFiU0J5ZFc0Z2JHVnVaM1JvSUdadmNpQlVhVzFUYjNKMFhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUc0Z0xTQlVhR1VnYzJsNlpTQnZaaUIwYUdVZ1lYSnlZWGtnZEc4Z2MyOXlkQzVjYmlBcUwxeHVablZ1WTNScGIyNGdiV2x1VW5WdVRHVnVaM1JvS0c0cElIdGNiaUFnYkdWMElISWdQU0F3TzF4dVhHNGdJSGRvYVd4bElDaHVJRDQ5SUVSRlJrRlZURlJmVFVsT1gwMUZVa2RGS1NCN1hHNGdJQ0FnY2lCOFBTQW9iaUFtSURFcE8xeHVJQ0FnSUc0Z1BqNDlJREU3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnYmlBcklISTdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1EyOTFiblJ6SUhSb1pTQnNaVzVuZEdnZ2IyWWdZU0J0YjI1dmRHOXVhV05oYkd4NUlHRnpZMlZ1WkdsdVp5QnZjaUJ6ZEhKcFkzUnNlU0J0YjI1dmRHOXVhV05oYkd4NVhHNGdLaUJrWlhOalpXNWthVzVuSUhObGNYVmxibU5sSUNoeWRXNHBJSE4wWVhKMGFXNW5JR0YwSUdGeWNtRjVXMnh2WFNCcGJpQjBhR1VnY21GdVoyVWdXMnh2TENCb2FTa3VJRWxtWEc0Z0tpQjBhR1VnY25WdUlHbHpJR1JsYzJObGJtUnBibWNnYVhRZ2FYTWdiV0ZrWlNCaGMyTmxibVJwYm1jdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0aGNuSmhlWDBnWVhKeVlYa2dMU0JVYUdVZ1lYSnlZWGtnZEc4Z2NtVjJaWEp6WlM1Y2JpQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQnNieUF0SUVacGNuTjBJR1ZzWlcxbGJuUWdhVzRnZEdobElISmhibWRsSUNocGJtTnNkWE5wZG1VcExseHVJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJR2hwSUMwZ1RHRnpkQ0JsYkdWdFpXNTBJR2x1SUhSb1pTQnlZVzVuWlM1Y2JpQXFJRUJ3WVhKaGJTQjdablZ1WTNScGIyNTlJR052YlhCaGNtVWdMU0JKZEdWdElHTnZiWEJoY21semIyNGdablZ1WTNScGIyNHVYRzRnS2lCQWNtVjBkWEp1SUh0dWRXMWlaWEo5SUMwZ1ZHaGxJR3hsYm1kMGFDQnZaaUIwYUdVZ2NuVnVMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQnRZV3RsUVhOalpXNWthVzVuVW5WdUtHRnljbUY1TENCc2J5d2dhR2tzSUdOdmJYQmhjbVVwSUh0Y2JpQWdiR1YwSUhKMWJraHBJRDBnYkc4Z0t5QXhPMXh1WEc0Z0lHbG1JQ2h5ZFc1SWFTQTlQVDBnYUdrcElIdGNiaUFnSUNCeVpYUjFjbTRnTVR0Y2JpQWdmVnh1WEc0Z0lDOHZJRVJsYzJObGJtUnBibWRjYmlBZ2FXWWdLR052YlhCaGNtVW9ZWEp5WVhsYmNuVnVTR2tySzEwc0lHRnljbUY1VzJ4dlhTa2dQQ0F3S1NCN1hHNGdJQ0FnZDJocGJHVWdLSEoxYmtocElEd2dhR2tnSmlZZ1kyOXRjR0Z5WlNoaGNuSmhlVnR5ZFc1SWFWMHNJR0Z5Y21GNVczSjFia2hwSUMwZ01WMHBJRHdnTUNrZ2UxeHVJQ0FnSUNBZ2NuVnVTR2tyS3p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhabGNuTmxVblZ1S0dGeWNtRjVMQ0JzYnl3Z2NuVnVTR2twTzF4dUlDQWdJQzh2SUVGelkyVnVaR2x1WjF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhkb2FXeGxJQ2h5ZFc1SWFTQThJR2hwSUNZbUlHTnZiWEJoY21Vb1lYSnlZWGxiY25WdVNHbGRMQ0JoY25KaGVWdHlkVzVJYVNBdElERmRLU0ErUFNBd0tTQjdYRzRnSUNBZ0lDQnlkVzVJYVNzck8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCeWRXNUlhU0F0SUd4dk8xeHVmVnh1WEc0dktpcGNiaUFxSUZKbGRtVnljMlVnWVc0Z1lYSnlZWGtnYVc0Z2RHaGxJSEpoYm1kbElGdHNieXdnYUdrcExseHVJQ3BjYmlBcUlFQndZWEpoYlNCN1lYSnlZWGw5SUdGeWNtRjVJQzBnVkdobElHRnljbUY1SUhSdklISmxkbVZ5YzJVdVhHNGdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdiRzhnTFNCR2FYSnpkQ0JsYkdWdFpXNTBJR2x1SUhSb1pTQnlZVzVuWlNBb2FXNWpiSFZ6YVhabEtTNWNiaUFxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0JvYVNBdElFeGhjM1FnWld4bGJXVnVkQ0JwYmlCMGFHVWdjbUZ1WjJVdVhHNGdLaTljYm1aMWJtTjBhVzl1SUhKbGRtVnljMlZTZFc0b1lYSnlZWGtzSUd4dkxDQm9hU2tnZTF4dUlDQm9hUzB0TzF4dVhHNGdJSGRvYVd4bElDaHNieUE4SUdocEtTQjdYRzRnSUNBZ2JHVjBJSFFnUFNCaGNuSmhlVnRzYjEwN1hHNGdJQ0FnWVhKeVlYbGJiRzhySzEwZ1BTQmhjbkpoZVZ0b2FWMDdYRzRnSUNBZ1lYSnlZWGxiYUdrdExWMGdQU0IwTzF4dUlDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1VHVnlabTl5YlNCMGFHVWdZbWx1WVhKNUlITnZjblFnYjJZZ2RHaGxJR0Z5Y21GNUlHbHVJSFJvWlNCeVlXNW5aU0JiYkc4c0lHaHBLU0IzYUdWeVpTQnpkR0Z5ZENCcGMxeHVJQ29nZEdobElHWnBjbk4wSUdWc1pXMWxiblFnY0c5emMybGliSGtnYjNWMElHOW1JRzl5WkdWeUxseHVJQ3BjYmlBcUlFQndZWEpoYlNCN1lYSnlZWGw5SUdGeWNtRjVJQzBnVkdobElHRnljbUY1SUhSdklITnZjblF1WEc0Z0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ2JHOGdMU0JHYVhKemRDQmxiR1Z0Wlc1MElHbHVJSFJvWlNCeVlXNW5aU0FvYVc1amJIVnphWFpsS1M1Y2JpQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQm9hU0F0SUV4aGMzUWdaV3hsYldWdWRDQnBiaUIwYUdVZ2NtRnVaMlV1WEc0Z0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ2MzUmhjblFnTFNCR2FYSnpkQ0JsYkdWdFpXNTBJSEJ2YzNOcFlteDVJRzkxZENCdlppQnZjbVJsY2k1Y2JpQXFJRUJ3WVhKaGJTQjdablZ1WTNScGIyNTlJR052YlhCaGNtVWdMU0JKZEdWdElHTnZiWEJoY21semIyNGdablZ1WTNScGIyNHVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHSnBibUZ5ZVVsdWMyVnlkR2x2YmxOdmNuUW9ZWEp5WVhrc0lHeHZMQ0JvYVN3Z2MzUmhjblFzSUdOdmJYQmhjbVVwSUh0Y2JpQWdhV1lnS0hOMFlYSjBJRDA5UFNCc2J5a2dlMXh1SUNBZ0lITjBZWEowS3lzN1hHNGdJSDFjYmx4dUlDQm1iM0lnS0RzZ2MzUmhjblFnUENCb2FUc2djM1JoY25Rckt5a2dlMXh1SUNBZ0lHeGxkQ0J3YVhadmRDQTlJR0Z5Y21GNVczTjBZWEowWFR0Y2JseHVJQ0FnSUM4dklGSmhibWRsY3lCdlppQjBhR1VnWVhKeVlYa2dkMmhsY21VZ2NHbDJiM1FnWW1Wc2IyNW5jMXh1SUNBZ0lHeGxkQ0JzWldaMElEMGdiRzg3WEc0Z0lDQWdiR1YwSUhKcFoyaDBJRDBnYzNSaGNuUTdYRzVjYmlBZ0lDQXZLbHh1SUNBZ0lDQXFJQ0FnY0dsMmIzUWdQajBnWVhKeVlYbGJhVjBnWm05eUlHa2dhVzRnVzJ4dkxDQnNaV1owS1Z4dUlDQWdJQ0FxSUNBZ2NHbDJiM1FnUENBZ1lYSnlZWGxiYVYwZ1ptOXlJR2tnYVc0Z0lHbHVJRnR5YVdkb2RDd2djM1JoY25RcFhHNGdJQ0FnSUNvdlhHNGdJQ0FnZDJocGJHVWdLR3hsWm5RZ1BDQnlhV2RvZENrZ2UxeHVJQ0FnSUNBZ2JHVjBJRzFwWkNBOUlDaHNaV1owSUNzZ2NtbG5hSFFwSUQ0K1BpQXhPMXh1WEc0Z0lDQWdJQ0JwWmlBb1kyOXRjR0Z5WlNod2FYWnZkQ3dnWVhKeVlYbGJiV2xrWFNrZ1BDQXdLU0I3WEc0Z0lDQWdJQ0FnSUhKcFoyaDBJRDBnYldsa08xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2JHVm1kQ0E5SUcxcFpDQXJJREU3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeXBjYmlBZ0lDQWdLaUJOYjNabElHVnNaVzFsYm5SeklISnBaMmgwSUhSdklHMWhhMlVnY205dmJTQm1iM0lnZEdobElIQnBkbTkwTGlCSlppQjBhR1Z5WlNCaGNtVWdaV3hsYldWdWRITmNiaUFnSUNBZ0tpQmxjWFZoYkNCMGJ5QndhWFp2ZEN3Z2JHVm1kQ0J3YjJsdWRITWdkRzhnZEdobElHWnBjbk4wSUhOc2IzUWdZV1owWlhJZ2RHaGxiVG9nZEdocGN5QnBjeUJoYkhOdlhHNGdJQ0FnSUNvZ1lTQnlaV0Z6YjI0Z1ptOXlJSGRvYVdOb0lGUnBiVk52Y25RZ2FYTWdjM1JoWW14bFhHNGdJQ0FnSUNvdlhHNGdJQ0FnYkdWMElHNGdQU0J6ZEdGeWRDQXRJR3hsWm5RN1hHNGdJQ0FnTHk4Z1UzZHBkR05vSUdseklHcDFjM1FnWVc0Z2IzQjBhVzFwZW1GMGFXOXVJR1p2Y2lCemJXRnNiQ0JoY25KaGVYTmNiaUFnSUNCemQybDBZMmdnS0c0cElIdGNiaUFnSUNBZ0lHTmhjMlVnTXpwY2JpQWdJQ0FnSUNBZ1lYSnlZWGxiYkdWbWRDQXJJRE5kSUQwZ1lYSnlZWGxiYkdWbWRDQXJJREpkTzF4dUlDQWdJQ0FnTHlvZ1ptRnNiSE1nZEdoeWIzVm5hQ0FxTDF4dUlDQWdJQ0FnWTJGelpTQXlPbHh1SUNBZ0lDQWdJQ0JoY25KaGVWdHNaV1owSUNzZ01sMGdQU0JoY25KaGVWdHNaV1owSUNzZ01WMDdYRzRnSUNBZ0lDQXZLaUJtWVd4c2N5QjBhSEp2ZFdkb0lDb3ZYRzRnSUNBZ0lDQmpZWE5sSURFNlhHNGdJQ0FnSUNBZ0lHRnljbUY1VzJ4bFpuUWdLeUF4WFNBOUlHRnljbUY1VzJ4bFpuUmRPMXh1SUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lHUmxabUYxYkhRNlhHNGdJQ0FnSUNBZ0lIZG9hV3hsSUNodUlENGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHRnljbUY1VzJ4bFpuUWdLeUJ1WFNBOUlHRnljbUY1VzJ4bFpuUWdLeUJ1SUMwZ01WMDdYRzRnSUNBZ0lDQWdJQ0FnYmkwdE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1lYSnlZWGxiYkdWbWRGMGdQU0J3YVhadmREdGNiaUFnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRVpwYm1RZ2RHaGxJSEJ2YzJsMGFXOXVJR0YwSUhkb2FXTm9JSFJ2SUdsdWMyVnlkQ0JoSUhaaGJIVmxJR2x1SUdFZ2MyOXlkR1ZrSUhKaGJtZGxMaUJKWmlCMGFHVWdjbUZ1WjJWY2JpQXFJR052Ym5SaGFXNXpJR1ZzWlcxbGJuUnpJR1Z4ZFdGc0lIUnZJSFJvWlNCMllXeDFaU0IwYUdVZ2JHVm1kRzF2YzNRZ1pXeGxiV1Z1ZENCcGJtUmxlQ0JwY3lCeVpYUjFjbTVsWkZ4dUlDb2dLR1p2Y2lCemRHRmlhV3hwZEhrcExseHVJQ3BjYmlBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCMllXeDFaU0F0SUZaaGJIVmxJSFJ2SUdsdWMyVnlkQzVjYmlBcUlFQndZWEpoYlNCN1lYSnlZWGw5SUdGeWNtRjVJQzBnVkdobElHRnljbUY1SUdsdUlIZG9hV05vSUhSdklHbHVjMlZ5ZENCMllXeDFaUzVjYmlBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCemRHRnlkQ0F0SUVacGNuTjBJR1ZzWlcxbGJuUWdhVzRnZEdobElISmhibWRsTGx4dUlDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlHeGxibWQwYUNBdElFeGxibWQwYUNCdlppQjBhR1VnY21GdVoyVXVYRzRnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnYUdsdWRDQXRJRlJvWlNCcGJtUmxlQ0JoZENCM2FHbGphQ0IwYnlCaVpXZHBiaUIwYUdVZ2MyVmhjbU5vTGx4dUlDb2dRSEJoY21GdElIdG1kVzVqZEdsdmJuMGdZMjl0Y0dGeVpTQXRJRWwwWlcwZ1kyOXRjR0Z5YVhOdmJpQm1kVzVqZEdsdmJpNWNiaUFxSUVCeVpYUjFjbTRnZTI1MWJXSmxjbjBnTFNCVWFHVWdhVzVrWlhnZ2QyaGxjbVVnZEc4Z2FXNXpaWEowSUhaaGJIVmxMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQm5ZV3hzYjNCTVpXWjBLSFpoYkhWbExDQmhjbkpoZVN3Z2MzUmhjblFzSUd4bGJtZDBhQ3dnYUdsdWRDd2dZMjl0Y0dGeVpTa2dlMXh1SUNCc1pYUWdiR0Z6ZEU5bVpuTmxkQ0E5SURBN1hHNGdJR3hsZENCdFlYaFBabVp6WlhRZ1BTQXdPMXh1SUNCc1pYUWdiMlptYzJWMElEMGdNVHRjYmx4dUlDQnBaaUFvWTI5dGNHRnlaU2gyWVd4MVpTd2dZWEp5WVhsYmMzUmhjblFnS3lCb2FXNTBYU2tnUGlBd0tTQjdYRzRnSUNBZ2JXRjRUMlptYzJWMElEMGdiR1Z1WjNSb0lDMGdhR2x1ZER0Y2JseHVJQ0FnSUhkb2FXeGxJQ2h2Wm1aelpYUWdQQ0J0WVhoUFptWnpaWFFnSmlZZ1kyOXRjR0Z5WlNoMllXeDFaU3dnWVhKeVlYbGJjM1JoY25RZ0t5Qm9hVzUwSUNzZ2IyWm1jMlYwWFNrZ1BpQXdLU0I3WEc0Z0lDQWdJQ0JzWVhOMFQyWm1jMlYwSUQwZ2IyWm1jMlYwTzF4dUlDQWdJQ0FnYjJabWMyVjBJRDBnS0c5bVpuTmxkQ0E4UENBeEtTQXJJREU3WEc1Y2JpQWdJQ0FnSUdsbUlDaHZabVp6WlhRZ1BEMGdNQ2tnZTF4dUlDQWdJQ0FnSUNCdlptWnpaWFFnUFNCdFlYaFBabVp6WlhRN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHOW1abk5sZENBK0lHMWhlRTltWm5ObGRDa2dlMXh1SUNBZ0lDQWdiMlptYzJWMElEMGdiV0Y0VDJabWMyVjBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRTFoYTJVZ2IyWm1jMlYwY3lCeVpXeGhkR2wyWlNCMGJ5QnpkR0Z5ZEZ4dUlDQWdJR3hoYzNSUFptWnpaWFFnS3owZ2FHbHVkRHRjYmlBZ0lDQnZabVp6WlhRZ0t6MGdhR2x1ZER0Y2JseHVJQ0FnSUM4dklIWmhiSFZsSUR3OUlHRnljbUY1VzNOMFlYSjBJQ3NnYUdsdWRGMWNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnRZWGhQWm1aelpYUWdQU0JvYVc1MElDc2dNVHRjYmlBZ0lDQjNhR2xzWlNBb2IyWm1jMlYwSUR3Z2JXRjRUMlptYzJWMElDWW1JR052YlhCaGNtVW9kbUZzZFdVc0lHRnljbUY1VzNOMFlYSjBJQ3NnYUdsdWRDQXRJRzltWm5ObGRGMHBJRHc5SURBcElIdGNiaUFnSUNBZ0lHeGhjM1JQWm1aelpYUWdQU0J2Wm1aelpYUTdYRzRnSUNBZ0lDQnZabVp6WlhRZ1BTQW9iMlptYzJWMElEdzhJREVwSUNzZ01UdGNibHh1SUNBZ0lDQWdhV1lnS0c5bVpuTmxkQ0E4UFNBd0tTQjdYRzRnSUNBZ0lDQWdJRzltWm5ObGRDQTlJRzFoZUU5bVpuTmxkRHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLRzltWm5ObGRDQStJRzFoZUU5bVpuTmxkQ2tnZTF4dUlDQWdJQ0FnYjJabWMyVjBJRDBnYldGNFQyWm1jMlYwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUUxaGEyVWdiMlptYzJWMGN5QnlaV3hoZEdsMlpTQjBieUJ6ZEdGeWRGeHVJQ0FnSUd4bGRDQjBiWEFnUFNCc1lYTjBUMlptYzJWME8xeHVJQ0FnSUd4aGMzUlBabVp6WlhRZ1BTQm9hVzUwSUMwZ2IyWm1jMlYwTzF4dUlDQWdJRzltWm5ObGRDQTlJR2hwYm5RZ0xTQjBiWEE3WEc0Z0lIMWNibHh1SUNBdktseHVJQ0FnS2lCT2IzY2dZWEp5WVhsYmMzUmhjblFyYkdGemRFOW1abk5sZEYwZ1BDQjJZV3gxWlNBOFBTQmhjbkpoZVZ0emRHRnlkQ3R2Wm1aelpYUmRMQ0J6YnlCMllXeDFaVnh1SUNBZ0tpQmlaV3h2Ym1keklITnZiV1YzYUdWeVpTQnBiaUIwYUdVZ2NtRnVaMlVnS0hOMFlYSjBJQ3NnYkdGemRFOW1abk5sZEN3Z2MzUmhjblFnS3lCdlptWnpaWFJkTGlCRWJ5QmhYRzRnSUNBcUlHSnBibUZ5ZVNCelpXRnlZMmdzSUhkcGRHZ2dhVzUyWVhKcFlXNTBJR0Z5Y21GNVczTjBZWEowSUNzZ2JHRnpkRTltWm5ObGRDQXRJREZkSUR3Z2RtRnNkV1VnUEQxY2JpQWdJQ29nWVhKeVlYbGJjM1JoY25RZ0t5QnZabVp6WlhSZExseHVJQ0FnS2k5Y2JpQWdiR0Z6ZEU5bVpuTmxkQ3NyTzF4dUlDQjNhR2xzWlNBb2JHRnpkRTltWm5ObGRDQThJRzltWm5ObGRDa2dlMXh1SUNBZ0lHeGxkQ0J0SUQwZ2JHRnpkRTltWm5ObGRDQXJJQ2dvYjJabWMyVjBJQzBnYkdGemRFOW1abk5sZENrZ1BqNCtJREVwTzF4dVhHNGdJQ0FnYVdZZ0tHTnZiWEJoY21Vb2RtRnNkV1VzSUdGeWNtRjVXM04wWVhKMElDc2diVjBwSUQ0Z01Da2dlMXh1SUNBZ0lDQWdiR0Z6ZEU5bVpuTmxkQ0E5SUcwZ0t5QXhPMXh1WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHOW1abk5sZENBOUlHMDdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdlptWnpaWFE3WEc1OVhHNWNiaThxS2x4dUlDb2dSbWx1WkNCMGFHVWdjRzl6YVhScGIyNGdZWFFnZDJocFkyZ2dkRzhnYVc1elpYSjBJR0VnZG1Gc2RXVWdhVzRnWVNCemIzSjBaV1FnY21GdVoyVXVJRWxtSUhSb1pTQnlZVzVuWlZ4dUlDb2dZMjl1ZEdGcGJuTWdaV3hsYldWdWRITWdaWEYxWVd3Z2RHOGdkR2hsSUhaaGJIVmxJSFJvWlNCeWFXZG9kRzF2YzNRZ1pXeGxiV1Z1ZENCcGJtUmxlQ0JwY3lCeVpYUjFjbTVsWkZ4dUlDb2dLR1p2Y2lCemRHRmlhV3hwZEhrcExseHVJQ3BjYmlBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCMllXeDFaU0F0SUZaaGJIVmxJSFJ2SUdsdWMyVnlkQzVjYmlBcUlFQndZWEpoYlNCN1lYSnlZWGw5SUdGeWNtRjVJQzBnVkdobElHRnljbUY1SUdsdUlIZG9hV05vSUhSdklHbHVjMlZ5ZENCMllXeDFaUzVjYmlBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCemRHRnlkQ0F0SUVacGNuTjBJR1ZzWlcxbGJuUWdhVzRnZEdobElISmhibWRsTGx4dUlDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlHeGxibWQwYUNBdElFeGxibWQwYUNCdlppQjBhR1VnY21GdVoyVXVYRzRnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnYUdsdWRDQXRJRlJvWlNCcGJtUmxlQ0JoZENCM2FHbGphQ0IwYnlCaVpXZHBiaUIwYUdVZ2MyVmhjbU5vTGx4dUlDb2dRSEJoY21GdElIdG1kVzVqZEdsdmJuMGdZMjl0Y0dGeVpTQXRJRWwwWlcwZ1kyOXRjR0Z5YVhOdmJpQm1kVzVqZEdsdmJpNWNiaUFxSUVCeVpYUjFjbTRnZTI1MWJXSmxjbjBnTFNCVWFHVWdhVzVrWlhnZ2QyaGxjbVVnZEc4Z2FXNXpaWEowSUhaaGJIVmxMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQm5ZV3hzYjNCU2FXZG9kQ2gyWVd4MVpTd2dZWEp5WVhrc0lITjBZWEowTENCc1pXNW5kR2dzSUdocGJuUXNJR052YlhCaGNtVXBJSHRjYmlBZ2JHVjBJR3hoYzNSUFptWnpaWFFnUFNBd08xeHVJQ0JzWlhRZ2JXRjRUMlptYzJWMElEMGdNRHRjYmlBZ2JHVjBJRzltWm5ObGRDQTlJREU3WEc1Y2JpQWdhV1lnS0dOdmJYQmhjbVVvZG1Gc2RXVXNJR0Z5Y21GNVczTjBZWEowSUNzZ2FHbHVkRjBwSUR3Z01Da2dlMXh1SUNBZ0lHMWhlRTltWm5ObGRDQTlJR2hwYm5RZ0t5QXhPMXh1WEc0Z0lDQWdkMmhwYkdVZ0tHOW1abk5sZENBOElHMWhlRTltWm5ObGRDQW1KaUJqYjIxd1lYSmxLSFpoYkhWbExDQmhjbkpoZVZ0emRHRnlkQ0FySUdocGJuUWdMU0J2Wm1aelpYUmRLU0E4SURBcElIdGNiaUFnSUNBZ0lHeGhjM1JQWm1aelpYUWdQU0J2Wm1aelpYUTdYRzRnSUNBZ0lDQnZabVp6WlhRZ1BTQW9iMlptYzJWMElEdzhJREVwSUNzZ01UdGNibHh1SUNBZ0lDQWdhV1lnS0c5bVpuTmxkQ0E4UFNBd0tTQjdYRzRnSUNBZ0lDQWdJRzltWm5ObGRDQTlJRzFoZUU5bVpuTmxkRHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvYjJabWMyVjBJRDRnYldGNFQyWm1jMlYwS1NCN1hHNGdJQ0FnSUNCdlptWnpaWFFnUFNCdFlYaFBabVp6WlhRN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1RXRnJaU0J2Wm1aelpYUnpJSEpsYkdGMGFYWmxJSFJ2SUhOMFlYSjBYRzRnSUNBZ2JHVjBJSFJ0Y0NBOUlHeGhjM1JQWm1aelpYUTdYRzRnSUNBZ2JHRnpkRTltWm5ObGRDQTlJR2hwYm5RZ0xTQnZabVp6WlhRN1hHNGdJQ0FnYjJabWMyVjBJRDBnYUdsdWRDQXRJSFJ0Y0R0Y2JseHVJQ0FnSUM4dklIWmhiSFZsSUQ0OUlHRnljbUY1VzNOMFlYSjBJQ3NnYUdsdWRGMWNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnRZWGhQWm1aelpYUWdQU0JzWlc1bmRHZ2dMU0JvYVc1ME8xeHVYRzRnSUNBZ2QyaHBiR1VnS0c5bVpuTmxkQ0E4SUcxaGVFOW1abk5sZENBbUppQmpiMjF3WVhKbEtIWmhiSFZsTENCaGNuSmhlVnR6ZEdGeWRDQXJJR2hwYm5RZ0t5QnZabVp6WlhSZEtTQStQU0F3S1NCN1hHNGdJQ0FnSUNCc1lYTjBUMlptYzJWMElEMGdiMlptYzJWME8xeHVJQ0FnSUNBZ2IyWm1jMlYwSUQwZ0tHOW1abk5sZENBOFBDQXhLU0FySURFN1hHNWNiaUFnSUNBZ0lHbG1JQ2h2Wm1aelpYUWdQRDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQnZabVp6WlhRZ1BTQnRZWGhQWm1aelpYUTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLRzltWm5ObGRDQStJRzFoZUU5bVpuTmxkQ2tnZTF4dUlDQWdJQ0FnYjJabWMyVjBJRDBnYldGNFQyWm1jMlYwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUUxaGEyVWdiMlptYzJWMGN5QnlaV3hoZEdsMlpTQjBieUJ6ZEdGeWRGeHVJQ0FnSUd4aGMzUlBabVp6WlhRZ0t6MGdhR2x1ZER0Y2JpQWdJQ0J2Wm1aelpYUWdLejBnYUdsdWREdGNiaUFnZlZ4dVhHNGdJQzhxWEc0Z0lDQXFJRTV2ZHlCaGNuSmhlVnR6ZEdGeWRDdHNZWE4wVDJabWMyVjBYU0E4SUhaaGJIVmxJRHc5SUdGeWNtRjVXM04wWVhKMEsyOW1abk5sZEYwc0lITnZJSFpoYkhWbFhHNGdJQ0FxSUdKbGJHOXVaM01nYzI5dFpYZG9aWEpsSUdsdUlIUm9aU0J5WVc1blpTQW9jM1JoY25RZ0t5QnNZWE4wVDJabWMyVjBMQ0J6ZEdGeWRDQXJJRzltWm5ObGRGMHVJRVJ2SUdGY2JpQWdJQ29nWW1sdVlYSjVJSE5sWVhKamFDd2dkMmwwYUNCcGJuWmhjbWxoYm5RZ1lYSnlZWGxiYzNSaGNuUWdLeUJzWVhOMFQyWm1jMlYwSUMwZ01WMGdQQ0IyWVd4MVpTQThQVnh1SUNBZ0tpQmhjbkpoZVZ0emRHRnlkQ0FySUc5bVpuTmxkRjB1WEc0Z0lDQXFMMXh1SUNCc1lYTjBUMlptYzJWMEt5czdYRzVjYmlBZ2QyaHBiR1VnS0d4aGMzUlBabVp6WlhRZ1BDQnZabVp6WlhRcElIdGNiaUFnSUNCc1pYUWdiU0E5SUd4aGMzUlBabVp6WlhRZ0t5QW9LRzltWm5ObGRDQXRJR3hoYzNSUFptWnpaWFFwSUQ0K1BpQXhLVHRjYmx4dUlDQWdJR2xtSUNoamIyMXdZWEpsS0haaGJIVmxMQ0JoY25KaGVWdHpkR0Z5ZENBcklHMWRLU0E4SURBcElIdGNiaUFnSUNBZ0lHOW1abk5sZENBOUlHMDdYRzVjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2JHRnpkRTltWm5ObGRDQTlJRzBnS3lBeE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCdlptWnpaWFE3WEc1OVhHNWNibU5zWVhOeklGUnBiVk52Y25RZ2UxeHVYRzRnSUdOdmJuTjBjblZqZEc5eUtHRnljbUY1TENCamIyMXdZWEpsS1NCN1hHNGdJQ0FnZEdocGN5NWhjbkpoZVNBOUlHRnljbUY1TzF4dUlDQWdJSFJvYVhNdVkyOXRjR0Z5WlNBOUlHTnZiWEJoY21VN1hHNGdJQ0FnZEdocGN5NXRhVzVIWVd4c2IzQWdQU0JFUlVaQlZVeFVYMDFKVGw5SFFVeE1UMUJKVGtjN1hHNGdJQ0FnZEdocGN5NXNaVzVuZEdnZ1BTQmhjbkpoZVM1c1pXNW5kR2c3WEc1Y2JpQWdJQ0IwYUdsekxuUnRjRk4wYjNKaFoyVk1aVzVuZEdnZ1BTQkVSVVpCVlV4VVgxUk5VRjlUVkU5U1FVZEZYMHhGVGtkVVNEdGNiaUFnSUNCcFppQW9kR2hwY3k1c1pXNW5kR2dnUENBeUlDb2dSRVZHUVZWTVZGOVVUVkJmVTFSUFVrRkhSVjlNUlU1SFZFZ3BJSHRjYmlBZ0lDQWdJSFJvYVhNdWRHMXdVM1J2Y21GblpVeGxibWQwYUNBOUlIUm9hWE11YkdWdVozUm9JRDQrUGlBeE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXVkRzF3SUQwZ2JtVjNJRUZ5Y21GNUtIUm9hWE11ZEcxd1UzUnZjbUZuWlV4bGJtZDBhQ2s3WEc1Y2JpQWdJQ0IwYUdsekxuTjBZV05yVEdWdVozUm9JRDFjYmlBZ0lDQWdJQ2gwYUdsekxteGxibWQwYUNBOElERXlNQ0EvSURVZ09seHVJQ0FnSUNBZ0lDQjBhR2x6TG14bGJtZDBhQ0E4SURFMU5ESWdQeUF4TUNBNlhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1c1pXNW5kR2dnUENBeE1Ua3hOVEVnUHlBeE9TQTZJRFF3S1R0Y2JseHVJQ0FnSUhSb2FYTXVjblZ1VTNSaGNuUWdQU0J1WlhjZ1FYSnlZWGtvZEdocGN5NXpkR0ZqYTB4bGJtZDBhQ2s3WEc0Z0lDQWdkR2hwY3k1eWRXNU1aVzVuZEdnZ1BTQnVaWGNnUVhKeVlYa29kR2hwY3k1emRHRmphMHhsYm1kMGFDazdYRzRnSUNBZ2RHaHBjeTV6ZEdGamExTnBlbVVnUFNBd08xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkIxYzJnZ1lTQnVaWGNnY25WdUlHOXVJRlJwYlZOdmNuUW5jeUJ6ZEdGamF5NWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJSEoxYmxOMFlYSjBJQzBnVTNSaGNuUWdhVzVrWlhnZ2IyWWdkR2hsSUhKMWJpQnBiaUIwYUdVZ2IzSnBaMmx1WVd3Z1lYSnlZWGt1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQnlkVzVNWlc1bmRHZ2dMU0JNWlc1bmRHZ2diMllnZEdobElISjFianRjYmlBZ0lDb3ZYRzRnSUhCMWMyaFNkVzRvY25WdVUzUmhjblFzSUhKMWJreGxibWQwYUNrZ2UxeHVJQ0FnSUhSb2FYTXVjblZ1VTNSaGNuUmJkR2hwY3k1emRHRmphMU5wZW1WZElEMGdjblZ1VTNSaGNuUTdYRzRnSUNBZ2RHaHBjeTV5ZFc1TVpXNW5kR2hiZEdocGN5NXpkR0ZqYTFOcGVtVmRJRDBnY25WdVRHVnVaM1JvTzF4dUlDQWdJSFJvYVhNdWMzUmhZMnRUYVhwbElDczlJREU3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1RXVnlaMlVnY25WdWN5QnZiaUJVYVcxVGIzSjBKM01nYzNSaFkyc2djMjhnZEdoaGRDQjBhR1VnWm05c2JHOTNhVzVuSUdodmJHUnpJR1p2Y2lCaGJHd2dhVHBjYmlBZ0lDb2dNU2tnY25WdVRHVnVaM1JvVzJrZ0xTQXpYU0ErSUhKMWJreGxibWQwYUZ0cElDMGdNbDBnS3lCeWRXNU1aVzVuZEdoYmFTQXRJREZkWEc0Z0lDQXFJRElwSUhKMWJreGxibWQwYUZ0cElDMGdNbDBnUGlCeWRXNU1aVzVuZEdoYmFTQXRJREZkWEc0Z0lDQXFMMXh1SUNCdFpYSm5aVkoxYm5Nb0tTQjdYRzRnSUNBZ2QyaHBiR1VnS0hSb2FYTXVjM1JoWTJ0VGFYcGxJRDRnTVNrZ2UxeHVJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbk4wWVdOclUybDZaU0F0SURJN1hHNWNiaUFnSUNBZ0lHbG1JQ2dvYmlBK1BTQXhJQ1ltWEc0Z0lDQWdJQ0FnSUhSb2FYTXVjblZ1VEdWdVozUm9XMjRnTFNBeFhTQThQU0IwYUdsekxuSjFia3hsYm1kMGFGdHVYU0FySUhSb2FYTXVjblZ1VEdWdVozUm9XMjRnS3lBeFhTa2dmSHhjYmlBZ0lDQWdJQ0FnS0c0Z1BqMGdNaUFtSmx4dUlDQWdJQ0FnSUNCMGFHbHpMbkoxYmt4bGJtZDBhRnR1SUMwZ01sMGdQRDBnZEdocGN5NXlkVzVNWlc1bmRHaGJibDBnS3lCMGFHbHpMbkoxYmt4bGJtZDBhRnR1SUMwZ01WMHBLU0I3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWNuVnVUR1Z1WjNSb1cyNGdMU0F4WFNBOElIUm9hWE11Y25WdVRHVnVaM1JvVzI0Z0t5QXhYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHNHRMVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUm9hWE11Y25WdVRHVnVaM1JvVzI1ZElENGdkR2hwY3k1eWRXNU1aVzVuZEdoYmJpQXJJREZkS1NCN1hHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnZEdocGN5NXRaWEpuWlVGMEtHNHBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJOWlhKblpTQmhiR3dnY25WdWN5QnZiaUJVYVcxVGIzSjBKM01nYzNSaFkyc2dkVzUwYVd3Z2IyNXNlU0J2Ym1VZ2NtVnRZV2x1Y3k1Y2JpQWdJQ292WEc0Z0lHWnZjbU5sVFdWeVoyVlNkVzV6S0NrZ2UxeHVJQ0FnSUhkb2FXeGxJQ2gwYUdsekxuTjBZV05yVTJsNlpTQStJREVwSUh0Y2JpQWdJQ0FnSUd4bGRDQnVJRDBnZEdocGN5NXpkR0ZqYTFOcGVtVWdMU0F5TzF4dVhHNGdJQ0FnSUNCcFppQW9iaUErSURBZ0ppWWdkR2hwY3k1eWRXNU1aVzVuZEdoYmJpQXRJREZkSUR3Z2RHaHBjeTV5ZFc1TVpXNW5kR2hiYmlBcklERmRLU0I3WEc0Z0lDQWdJQ0FnSUc0dExUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdkR2hwY3k1dFpYSm5aVUYwS0c0cE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQk5aWEpuWlNCMGFHVWdjblZ1Y3lCdmJpQjBhR1VnYzNSaFkyc2dZWFFnY0c5emFYUnBiMjV6SUdrZ1lXNWtJR2tyTVM0Z1RYVnpkQ0JpWlNCaGJIZGhlWE1nWW1VZ1kyRnNiR1ZrWEc0Z0lDQXFJSGRwZEdnZ2FUMXpkR0ZqYTFOcGVtVXRNaUJ2Y2lCcFBYTjBZV05yVTJsNlpTMHpJQ2gwYUdGMElHbHpMQ0IzWlNCdFpYSm5aU0J2YmlCMGIzQWdiMllnZEdobElITjBZV05yS1M1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlHa2dMU0JKYm1SbGVDQnZaaUIwYUdVZ2NuVnVJSFJ2SUcxbGNtZGxJR2x1SUZScGJWTnZjblFuY3lCemRHRmpheTVjYmlBZ0lDb3ZYRzRnSUcxbGNtZGxRWFFvYVNrZ2UxeHVJQ0FnSUd4bGRDQmpiMjF3WVhKbElEMGdkR2hwY3k1amIyMXdZWEpsTzF4dUlDQWdJR3hsZENCaGNuSmhlU0E5SUhSb2FYTXVZWEp5WVhrN1hHNWNiaUFnSUNCc1pYUWdjM1JoY25ReElEMGdkR2hwY3k1eWRXNVRkR0Z5ZEZ0cFhUdGNiaUFnSUNCc1pYUWdiR1Z1WjNSb01TQTlJSFJvYVhNdWNuVnVUR1Z1WjNSb1cybGRPMXh1SUNBZ0lHeGxkQ0J6ZEdGeWRESWdQU0IwYUdsekxuSjFibE4wWVhKMFcya2dLeUF4WFR0Y2JpQWdJQ0JzWlhRZ2JHVnVaM1JvTWlBOUlIUm9hWE11Y25WdVRHVnVaM1JvVzJrZ0t5QXhYVHRjYmx4dUlDQWdJSFJvYVhNdWNuVnVUR1Z1WjNSb1cybGRJRDBnYkdWdVozUm9NU0FySUd4bGJtZDBhREk3WEc1Y2JpQWdJQ0JwWmlBb2FTQTlQVDBnZEdocGN5NXpkR0ZqYTFOcGVtVWdMU0F6S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbkoxYmxOMFlYSjBXMmtnS3lBeFhTQTlJSFJvYVhNdWNuVnVVM1JoY25SYmFTQXJJREpkTzF4dUlDQWdJQ0FnZEdocGN5NXlkVzVNWlc1bmRHaGJhU0FySURGZElEMGdkR2hwY3k1eWRXNU1aVzVuZEdoYmFTQXJJREpkTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFJvYVhNdWMzUmhZMnRUYVhwbExTMDdYRzVjYmlBZ0lDQXZLbHh1SUNBZ0lDQXFJRVpwYm1RZ2QyaGxjbVVnZEdobElHWnBjbk4wSUdWc1pXMWxiblFnYVc0Z2RHaGxJSE5sWTI5dVpDQnlkVzRnWjI5bGN5QnBiaUJ5ZFc0eExpQlFjbVYyYVc5MWMxeHVJQ0FnSUNBcUlHVnNaVzFsYm5SeklHbHVJSEoxYmpFZ1lYSmxJR0ZzY21WaFpIa2dhVzRnY0d4aFkyVmNiaUFnSUNBZ0tpOWNiaUFnSUNCc1pYUWdheUE5SUdkaGJHeHZjRkpwWjJoMEtHRnljbUY1VzNOMFlYSjBNbDBzSUdGeWNtRjVMQ0J6ZEdGeWRERXNJR3hsYm1kMGFERXNJREFzSUdOdmJYQmhjbVVwTzF4dUlDQWdJSE4wWVhKME1TQXJQU0JyTzF4dUlDQWdJR3hsYm1kMGFERWdMVDBnYXp0Y2JseHVJQ0FnSUdsbUlDaHNaVzVuZEdneElEMDlQU0F3S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeXBjYmlBZ0lDQWdLaUJHYVc1a0lIZG9aWEpsSUhSb1pTQnNZWE4wSUdWc1pXMWxiblFnYVc0Z2RHaGxJR1pwY25OMElISjFiaUJuYjJWeklHbHVJSEoxYmpJdUlFNWxlSFFnWld4bGJXVnVkSE5jYmlBZ0lDQWdLaUJwYmlCeWRXNHlJR0Z5WlNCaGJISmxZV1I1SUdsdUlIQnNZV05sWEc0Z0lDQWdJQ292WEc0Z0lDQWdiR1Z1WjNSb01pQTlJR2RoYkd4dmNFeGxablFvWVhKeVlYbGJjM1JoY25ReElDc2diR1Z1WjNSb01TQXRJREZkTENCaGNuSmhlU3dnYzNSaGNuUXlMQ0JzWlc1bmRHZ3lMQ0JzWlc1bmRHZ3lJQzBnTVN3Z1kyOXRjR0Z5WlNrN1hHNWNiaUFnSUNCcFppQW9iR1Z1WjNSb01pQTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxWEc0Z0lDQWdJQ29nVFdWeVoyVWdjbVZ0WVdsdWFXNW5JSEoxYm5NdUlFRWdkRzF3SUdGeWNtRjVJSGRwZEdnZ2JHVnVaM1JvSUQwZ2JXbHVLR3hsYm1kMGFERXNJR3hsYm1kMGFESXBJR2x6WEc0Z0lDQWdJQ29nZFhObFpGeHVJQ0FnSUNBcUwxeHVJQ0FnSUdsbUlDaHNaVzVuZEdneElEdzlJR3hsYm1kMGFESXBJSHRjYmlBZ0lDQWdJSFJvYVhNdWJXVnlaMlZNYjNjb2MzUmhjblF4TENCc1pXNW5kR2d4TENCemRHRnlkRElzSUd4bGJtZDBhRElwTzF4dVhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSFJvYVhNdWJXVnlaMlZJYVdkb0tITjBZWEowTVN3Z2JHVnVaM1JvTVN3Z2MzUmhjblF5TENCc1pXNW5kR2d5S1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1RXVnlaMlVnZEhkdklHRmthbUZqWlc1MElISjFibk1nYVc0Z1lTQnpkR0ZpYkdVZ2QyRjVMaUJVYUdVZ2NuVnVjeUJ0ZFhOMElHSmxJSE4xWTJnZ2RHaGhkQ0IwYUdWY2JpQWdJQ29nWm1seWMzUWdaV3hsYldWdWRDQnZaaUJ5ZFc0eElHbHpJR0pwWjJkbGNpQjBhR0Z1SUhSb1pTQm1hWEp6ZENCbGJHVnRaVzUwSUdsdUlISjFiaklnWVc1a0lIUm9aVnh1SUNBZ0tpQnNZWE4wSUdWc1pXMWxiblFnYjJZZ2NuVnVNU0JwY3lCbmNtVmhkR1Z5SUhSb1lXNGdZV3hzSUhSb1pTQmxiR1Z0Wlc1MGN5QnBiaUJ5ZFc0eUxseHVJQ0FnS2lCVWFHVWdiV1YwYUc5a0lITm9iM1ZzWkNCaVpTQmpZV3hzWldRZ2QyaGxiaUJ5ZFc0eExteGxibWQwYUNBOFBTQnlkVzR5TG14bGJtZDBhQ0JoY3lCcGRDQjFjMlZ6WEc0Z0lDQXFJRlJwYlZOdmNuUWdkR1Z0Y0c5eVlYSjVJR0Z5Y21GNUlIUnZJSE4wYjNKbElISjFiakV1SUZWelpTQnRaWEpuWlVocFoyZ2dhV1lnY25WdU1TNXNaVzVuZEdnZ1BseHVJQ0FnS2lCeWRXNHlMbXhsYm1kMGFDNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJSE4wWVhKME1TQXRJRVpwY25OMElHVnNaVzFsYm5RZ2FXNGdjblZ1TVM1Y2JpQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJR3hsYm1kMGFERWdMU0JNWlc1bmRHZ2diMllnY25WdU1TNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUhOMFlYSjBNaUF0SUVacGNuTjBJR1ZzWlcxbGJuUWdhVzRnY25WdU1pNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUd4bGJtZDBhRElnTFNCTVpXNW5kR2dnYjJZZ2NuVnVNaTVjYmlBZ0lDb3ZYRzRnSUcxbGNtZGxURzkzS0hOMFlYSjBNU3dnYkdWdVozUm9NU3dnYzNSaGNuUXlMQ0JzWlc1bmRHZ3lLU0I3WEc1Y2JpQWdJQ0JzWlhRZ1kyOXRjR0Z5WlNBOUlIUm9hWE11WTI5dGNHRnlaVHRjYmlBZ0lDQnNaWFFnWVhKeVlYa2dQU0IwYUdsekxtRnljbUY1TzF4dUlDQWdJR3hsZENCMGJYQWdQU0IwYUdsekxuUnRjRHRjYmlBZ0lDQnNaWFFnYVNBOUlEQTdYRzVjYmlBZ0lDQm1iM0lnS0drZ1BTQXdPeUJwSUR3Z2JHVnVaM1JvTVRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0IwYlhCYmFWMGdQU0JoY25KaGVWdHpkR0Z5ZERFZ0t5QnBYVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnNaWFFnWTNWeWMyOXlNU0E5SURBN1hHNGdJQ0FnYkdWMElHTjFjbk52Y2pJZ1BTQnpkR0Z5ZERJN1hHNGdJQ0FnYkdWMElHUmxjM1FnUFNCemRHRnlkREU3WEc1Y2JpQWdJQ0JoY25KaGVWdGtaWE4wS3l0ZElEMGdZWEp5WVhsYlkzVnljMjl5TWlzclhUdGNibHh1SUNBZ0lHbG1JQ2d0TFd4bGJtZDBhRElnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJR1p2Y2lBb2FTQTlJREE3SUdrZ1BDQnNaVzVuZEdneE95QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ1lYSnlZWGxiWkdWemRDQXJJR2xkSUQwZ2RHMXdXMk4xY25OdmNqRWdLeUJwWFR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvYkdWdVozUm9NU0E5UFQwZ01Ta2dlMXh1SUNBZ0lDQWdabTl5SUNocElEMGdNRHNnYVNBOElHeGxibWQwYURJN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNCaGNuSmhlVnRrWlhOMElDc2dhVjBnUFNCaGNuSmhlVnRqZFhKemIzSXlJQ3NnYVYwN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCaGNuSmhlVnRrWlhOMElDc2diR1Z1WjNSb01sMGdQU0IwYlhCYlkzVnljMjl5TVYwN1hHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdiR1YwSUcxcGJrZGhiR3h2Y0NBOUlIUm9hWE11YldsdVIyRnNiRzl3TzF4dVhHNGdJQ0FnZDJocGJHVWdLSFJ5ZFdVcElIdGNiaUFnSUNBZ0lHeGxkQ0JqYjNWdWRERWdQU0F3TzF4dUlDQWdJQ0FnYkdWMElHTnZkVzUwTWlBOUlEQTdYRzRnSUNBZ0lDQnNaWFFnWlhocGRDQTlJR1poYkhObE8xeHVYRzRnSUNBZ0lDQmtieUI3WEc0Z0lDQWdJQ0FnSUdsbUlDaGpiMjF3WVhKbEtHRnljbUY1VzJOMWNuTnZjakpkTENCMGJYQmJZM1Z5YzI5eU1WMHBJRHdnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR0Z5Y21GNVcyUmxjM1FySzEwZ1BTQmhjbkpoZVZ0amRYSnpiM0l5S3l0ZE8xeHVJQ0FnSUNBZ0lDQWdJR052ZFc1ME1pc3JPMXh1SUNBZ0lDQWdJQ0FnSUdOdmRXNTBNU0E5SURBN1hHNWNiaUFnSUNBZ0lDQWdJQ0JwWmlBb0xTMXNaVzVuZEdneUlEMDlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsZUdsMElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lHRnljbUY1VzJSbGMzUXJLMTBnUFNCMGJYQmJZM1Z5YzI5eU1Tc3JYVHRjYmlBZ0lDQWdJQ0FnSUNCamIzVnVkREVyS3p0Y2JpQWdJQ0FnSUNBZ0lDQmpiM1Z1ZERJZ1BTQXdPMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDZ3RMV3hsYm1kMGFERWdQVDA5SURFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdWNGFYUWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUlIZG9hV3hsSUNnb1kyOTFiblF4SUh3Z1kyOTFiblF5S1NBOElHMXBia2RoYkd4dmNDazdYRzVjYmlBZ0lDQWdJR2xtSUNobGVHbDBLU0I3WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JrYnlCN1hHNGdJQ0FnSUNBZ0lHTnZkVzUwTVNBOUlHZGhiR3h2Y0ZKcFoyaDBLR0Z5Y21GNVcyTjFjbk52Y2pKZExDQjBiWEFzSUdOMWNuTnZjakVzSUd4bGJtZDBhREVzSURBc0lHTnZiWEJoY21VcE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoamIzVnVkREVnSVQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNCbWIzSWdLR2tnUFNBd095QnBJRHdnWTI5MWJuUXhPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdGeWNtRjVXMlJsYzNRZ0t5QnBYU0E5SUhSdGNGdGpkWEp6YjNJeElDc2dhVjA3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnWkdWemRDQXJQU0JqYjNWdWRERTdYRzRnSUNBZ0lDQWdJQ0FnWTNWeWMyOXlNU0FyUFNCamIzVnVkREU3WEc0Z0lDQWdJQ0FnSUNBZ2JHVnVaM1JvTVNBdFBTQmpiM1Z1ZERFN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0d4bGJtZDBhREVnUEQwZ01Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pYaHBkQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JoY25KaGVWdGtaWE4wS3l0ZElEMGdZWEp5WVhsYlkzVnljMjl5TWlzclhUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb0xTMXNaVzVuZEdneUlEMDlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdaWGhwZENBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQmpiM1Z1ZERJZ1BTQm5ZV3hzYjNCTVpXWjBLSFJ0Y0Z0amRYSnpiM0l4WFN3Z1lYSnlZWGtzSUdOMWNuTnZjaklzSUd4bGJtZDBhRElzSURBc0lHTnZiWEJoY21VcE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoamIzVnVkRElnSVQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNCbWIzSWdLR2tnUFNBd095QnBJRHdnWTI5MWJuUXlPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdGeWNtRjVXMlJsYzNRZ0t5QnBYU0E5SUdGeWNtRjVXMk4xY25OdmNqSWdLeUJwWFR0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNCa1pYTjBJQ3M5SUdOdmRXNTBNanRjYmlBZ0lDQWdJQ0FnSUNCamRYSnpiM0l5SUNzOUlHTnZkVzUwTWp0Y2JpQWdJQ0FnSUNBZ0lDQnNaVzVuZEdneUlDMDlJR052ZFc1ME1qdGNibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHNaVzVuZEdneUlEMDlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsZUdsMElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCaGNuSmhlVnRrWlhOMEt5dGRJRDBnZEcxd1cyTjFjbk52Y2pFcksxMDdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tDMHRiR1Z1WjNSb01TQTlQVDBnTVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR1Y0YVhRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdiV2x1UjJGc2JHOXdMUzA3WEc1Y2JpQWdJQ0FnSUgwZ2QyaHBiR1VnS0dOdmRXNTBNU0ErUFNCRVJVWkJWVXhVWDAxSlRsOUhRVXhNVDFCSlRrY2dmSHdnWTI5MWJuUXlJRDQ5SUVSRlJrRlZURlJmVFVsT1gwZEJURXhQVUVsT1J5azdYRzVjYmlBZ0lDQWdJR2xtSUNobGVHbDBLU0I3WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlBb2JXbHVSMkZzYkc5d0lEd2dNQ2tnZTF4dUlDQWdJQ0FnSUNCdGFXNUhZV3hzYjNBZ1BTQXdPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0J0YVc1SFlXeHNiM0FnS3owZ01qdGNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMbTFwYmtkaGJHeHZjQ0E5SUcxcGJrZGhiR3h2Y0R0Y2JseHVJQ0FnSUdsbUlDaHRhVzVIWVd4c2IzQWdQQ0F4S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbTFwYmtkaGJHeHZjQ0E5SURFN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHeGxibWQwYURFZ1BUMDlJREVwSUh0Y2JpQWdJQ0FnSUdadmNpQW9hU0E5SURBN0lHa2dQQ0JzWlc1bmRHZ3lPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdZWEp5WVhsYlpHVnpkQ0FySUdsZElEMGdZWEp5WVhsYlkzVnljMjl5TWlBcklHbGRPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdZWEp5WVhsYlpHVnpkQ0FySUd4bGJtZDBhREpkSUQwZ2RHMXdXMk4xY25OdmNqRmRPMXh1WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hzWlc1bmRHZ3hJRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oyMWxjbWRsVEc5M0lIQnlaV052Ym1ScGRHbHZibk1nZDJWeVpTQnViM1FnY21WemNHVmpkR1ZrSnlrN1hHNWNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnWm05eUlDaHBJRDBnTURzZ2FTQThJR3hsYm1kMGFERTdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQmhjbkpoZVZ0a1pYTjBJQ3NnYVYwZ1BTQjBiWEJiWTNWeWMyOXlNU0FySUdsZE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQk5aWEpuWlNCMGQyOGdZV1JxWVdObGJuUWdjblZ1Y3lCcGJpQmhJSE4wWVdKc1pTQjNZWGt1SUZSb1pTQnlkVzV6SUcxMWMzUWdZbVVnYzNWamFDQjBhR0YwSUhSb1pWeHVJQ0FnS2lCbWFYSnpkQ0JsYkdWdFpXNTBJRzltSUhKMWJqRWdhWE1nWW1sbloyVnlJSFJvWVc0Z2RHaGxJR1pwY25OMElHVnNaVzFsYm5RZ2FXNGdjblZ1TWlCaGJtUWdkR2hsWEc0Z0lDQXFJR3hoYzNRZ1pXeGxiV1Z1ZENCdlppQnlkVzR4SUdseklHZHlaV0YwWlhJZ2RHaGhiaUJoYkd3Z2RHaGxJR1ZzWlcxbGJuUnpJR2x1SUhKMWJqSXVYRzRnSUNBcUlGUm9aU0J0WlhSb2IyUWdjMmh2ZFd4a0lHSmxJR05oYkd4bFpDQjNhR1Z1SUhKMWJqRXViR1Z1WjNSb0lENGdjblZ1TWk1c1pXNW5kR2dnWVhNZ2FYUWdkWE5sYzF4dUlDQWdLaUJVYVcxVGIzSjBJSFJsYlhCdmNtRnllU0JoY25KaGVTQjBieUJ6ZEc5eVpTQnlkVzR5TGlCVmMyVWdiV1Z5WjJWTWIzY2dhV1lnY25WdU1TNXNaVzVuZEdnZ1BEMWNiaUFnSUNvZ2NuVnVNaTVzWlc1bmRHZ3VYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0J6ZEdGeWRERWdMU0JHYVhKemRDQmxiR1Z0Wlc1MElHbHVJSEoxYmpFdVhHNGdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0JzWlc1bmRHZ3hJQzBnVEdWdVozUm9JRzltSUhKMWJqRXVYRzRnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCemRHRnlkRElnTFNCR2FYSnpkQ0JsYkdWdFpXNTBJR2x1SUhKMWJqSXVYRzRnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCc1pXNW5kR2d5SUMwZ1RHVnVaM1JvSUc5bUlISjFiakl1WEc0Z0lDQXFMMXh1SUNCdFpYSm5aVWhwWjJnb2MzUmhjblF4TENCc1pXNW5kR2d4TENCemRHRnlkRElzSUd4bGJtZDBhRElwSUh0Y2JpQWdJQ0JzWlhRZ1kyOXRjR0Z5WlNBOUlIUm9hWE11WTI5dGNHRnlaVHRjYmlBZ0lDQnNaWFFnWVhKeVlYa2dQU0IwYUdsekxtRnljbUY1TzF4dUlDQWdJR3hsZENCMGJYQWdQU0IwYUdsekxuUnRjRHRjYmlBZ0lDQnNaWFFnYVNBOUlEQTdYRzVjYmlBZ0lDQm1iM0lnS0drZ1BTQXdPeUJwSUR3Z2JHVnVaM1JvTWpzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0IwYlhCYmFWMGdQU0JoY25KaGVWdHpkR0Z5ZERJZ0t5QnBYVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnNaWFFnWTNWeWMyOXlNU0E5SUhOMFlYSjBNU0FySUd4bGJtZDBhREVnTFNBeE8xeHVJQ0FnSUd4bGRDQmpkWEp6YjNJeUlEMGdiR1Z1WjNSb01pQXRJREU3WEc0Z0lDQWdiR1YwSUdSbGMzUWdQU0J6ZEdGeWRESWdLeUJzWlc1bmRHZ3lJQzBnTVR0Y2JpQWdJQ0JzWlhRZ1kzVnpkRzl0UTNWeWMyOXlJRDBnTUR0Y2JpQWdJQ0JzWlhRZ1kzVnpkRzl0UkdWemRDQTlJREE3WEc1Y2JpQWdJQ0JoY25KaGVWdGtaWE4wTFMxZElEMGdZWEp5WVhsYlkzVnljMjl5TVMwdFhUdGNibHh1SUNBZ0lHbG1JQ2d0TFd4bGJtZDBhREVnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJR04xYzNSdmJVTjFjbk52Y2lBOUlHUmxjM1FnTFNBb2JHVnVaM1JvTWlBdElERXBPMXh1WEc0Z0lDQWdJQ0JtYjNJZ0tHa2dQU0F3T3lCcElEd2diR1Z1WjNSb01qc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lHRnljbUY1VzJOMWMzUnZiVU4xY25OdmNpQXJJR2xkSUQwZ2RHMXdXMmxkTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0d4bGJtZDBhRElnUFQwOUlERXBJSHRjYmlBZ0lDQWdJR1JsYzNRZ0xUMGdiR1Z1WjNSb01UdGNiaUFnSUNBZ0lHTjFjbk52Y2pFZ0xUMGdiR1Z1WjNSb01UdGNiaUFnSUNBZ0lHTjFjM1J2YlVSbGMzUWdQU0JrWlhOMElDc2dNVHRjYmlBZ0lDQWdJR04xYzNSdmJVTjFjbk52Y2lBOUlHTjFjbk52Y2pFZ0t5QXhPMXh1WEc0Z0lDQWdJQ0JtYjNJZ0tHa2dQU0JzWlc1bmRHZ3hJQzBnTVRzZ2FTQStQU0F3T3lCcExTMHBJSHRjYmlBZ0lDQWdJQ0FnWVhKeVlYbGJZM1Z6ZEc5dFJHVnpkQ0FySUdsZElEMGdZWEp5WVhsYlkzVnpkRzl0UTNWeWMyOXlJQ3NnYVYwN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHRnljbUY1VzJSbGMzUmRJRDBnZEcxd1cyTjFjbk52Y2pKZE8xeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmx4dUlDQWdJR3hsZENCdGFXNUhZV3hzYjNBZ1BTQjBhR2x6TG0xcGJrZGhiR3h2Y0R0Y2JseHVJQ0FnSUhkb2FXeGxJQ2gwY25WbEtTQjdYRzRnSUNBZ0lDQnNaWFFnWTI5MWJuUXhJRDBnTUR0Y2JpQWdJQ0FnSUd4bGRDQmpiM1Z1ZERJZ1BTQXdPMXh1SUNBZ0lDQWdiR1YwSUdWNGFYUWdQU0JtWVd4elpUdGNibHh1SUNBZ0lDQWdaRzhnZTF4dUlDQWdJQ0FnSUNCcFppQW9ZMjl0Y0dGeVpTaDBiWEJiWTNWeWMyOXlNbDBzSUdGeWNtRjVXMk4xY25OdmNqRmRLU0E4SURBcElIdGNiaUFnSUNBZ0lDQWdJQ0JoY25KaGVWdGtaWE4wTFMxZElEMGdZWEp5WVhsYlkzVnljMjl5TVMwdFhUdGNiaUFnSUNBZ0lDQWdJQ0JqYjNWdWRERXJLenRjYmlBZ0lDQWdJQ0FnSUNCamIzVnVkRElnUFNBd08xeHVJQ0FnSUNBZ0lDQWdJR2xtSUNndExXeGxibWQwYURFZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1Y0YVhRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ1lYSnlZWGxiWkdWemRDMHRYU0E5SUhSdGNGdGpkWEp6YjNJeUxTMWRPMXh1SUNBZ0lDQWdJQ0FnSUdOdmRXNTBNaXNyTzF4dUlDQWdJQ0FnSUNBZ0lHTnZkVzUwTVNBOUlEQTdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tDMHRiR1Z1WjNSb01pQTlQVDBnTVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWlhocGRDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2ZTQjNhR2xzWlNBb0tHTnZkVzUwTVNCOElHTnZkVzUwTWlrZ1BDQnRhVzVIWVd4c2IzQXBPMXh1WEc0Z0lDQWdJQ0JwWmlBb1pYaHBkQ2tnZTF4dUlDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnWkc4Z2UxeHVJQ0FnSUNBZ0lDQmpiM1Z1ZERFZ1BTQnNaVzVuZEdneElDMGdaMkZzYkc5d1VtbG5hSFFvZEcxd1cyTjFjbk52Y2pKZExDQmhjbkpoZVN3Z2MzUmhjblF4TENCc1pXNW5kR2d4TENCc1pXNW5kR2d4SUMwZ01Td2dZMjl0Y0dGeVpTazdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHTnZkVzUwTVNBaFBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHUmxjM1FnTFQwZ1kyOTFiblF4TzF4dUlDQWdJQ0FnSUNBZ0lHTjFjbk52Y2pFZ0xUMGdZMjkxYm5ReE8xeHVJQ0FnSUNBZ0lDQWdJR3hsYm1kMGFERWdMVDBnWTI5MWJuUXhPMXh1SUNBZ0lDQWdJQ0FnSUdOMWMzUnZiVVJsYzNRZ1BTQmtaWE4wSUNzZ01UdGNiaUFnSUNBZ0lDQWdJQ0JqZFhOMGIyMURkWEp6YjNJZ1BTQmpkWEp6YjNJeElDc2dNVHRjYmx4dUlDQWdJQ0FnSUNBZ0lHWnZjaUFvYVNBOUlHTnZkVzUwTVNBdElERTdJR2tnUGowZ01Ec2dhUzB0S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoY25KaGVWdGpkWE4wYjIxRVpYTjBJQ3NnYVYwZ1BTQmhjbkpoZVZ0amRYTjBiMjFEZFhKemIzSWdLeUJwWFR0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNCcFppQW9iR1Z1WjNSb01TQTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWlhocGRDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQmhjbkpoZVZ0a1pYTjBMUzFkSUQwZ2RHMXdXMk4xY25OdmNqSXRMVjA3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLQzB0YkdWdVozUm9NaUE5UFQwZ01Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUdWNGFYUWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnWTI5MWJuUXlJRDBnYkdWdVozUm9NaUF0SUdkaGJHeHZjRXhsWm5Rb1lYSnlZWGxiWTNWeWMyOXlNVjBzSUhSdGNDd2dNQ3dnYkdWdVozUm9NaXdnYkdWdVozUm9NaUF0SURFc0lHTnZiWEJoY21VcE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoamIzVnVkRElnSVQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNCa1pYTjBJQzA5SUdOdmRXNTBNanRjYmlBZ0lDQWdJQ0FnSUNCamRYSnpiM0l5SUMwOUlHTnZkVzUwTWp0Y2JpQWdJQ0FnSUNBZ0lDQnNaVzVuZEdneUlDMDlJR052ZFc1ME1qdGNiaUFnSUNBZ0lDQWdJQ0JqZFhOMGIyMUVaWE4wSUQwZ1pHVnpkQ0FySURFN1hHNGdJQ0FnSUNBZ0lDQWdZM1Z6ZEc5dFEzVnljMjl5SUQwZ1kzVnljMjl5TWlBcklERTdYRzVjYmlBZ0lDQWdJQ0FnSUNCbWIzSWdLR2tnUFNBd095QnBJRHdnWTI5MWJuUXlPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdGeWNtRjVXMk4xYzNSdmJVUmxjM1FnS3lCcFhTQTlJSFJ0Y0Z0amRYTjBiMjFEZFhKemIzSWdLeUJwWFR0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNCcFppQW9iR1Z1WjNSb01pQThQU0F4S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsZUdsMElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHRnljbUY1VzJSbGMzUXRMVjBnUFNCaGNuSmhlVnRqZFhKemIzSXhMUzFkTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2d0TFd4bGJtZDBhREVnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNCbGVHbDBJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUcxcGJrZGhiR3h2Y0MwdE8xeHVYRzRnSUNBZ0lDQjlJSGRvYVd4bElDaGpiM1Z1ZERFZ1BqMGdSRVZHUVZWTVZGOU5TVTVmUjBGTVRFOVFTVTVISUh4OElHTnZkVzUwTWlBK1BTQkVSVVpCVlV4VVgwMUpUbDlIUVV4TVQxQkpUa2NwTzF4dVhHNGdJQ0FnSUNCcFppQW9aWGhwZENrZ2UxeHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLRzFwYmtkaGJHeHZjQ0E4SURBcElIdGNiaUFnSUNBZ0lDQWdiV2x1UjJGc2JHOXdJRDBnTUR0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2JXbHVSMkZzYkc5d0lDczlJREk3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkR2hwY3k1dGFXNUhZV3hzYjNBZ1BTQnRhVzVIWVd4c2IzQTdYRzVjYmlBZ0lDQnBaaUFvYldsdVIyRnNiRzl3SUR3Z01Ta2dlMXh1SUNBZ0lDQWdkR2hwY3k1dGFXNUhZV3hzYjNBZ1BTQXhPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2hzWlc1bmRHZ3lJRDA5UFNBeEtTQjdYRzRnSUNBZ0lDQmtaWE4wSUMwOUlHeGxibWQwYURFN1hHNGdJQ0FnSUNCamRYSnpiM0l4SUMwOUlHeGxibWQwYURFN1hHNGdJQ0FnSUNCamRYTjBiMjFFWlhOMElEMGdaR1Z6ZENBcklERTdYRzRnSUNBZ0lDQmpkWE4wYjIxRGRYSnpiM0lnUFNCamRYSnpiM0l4SUNzZ01UdGNibHh1SUNBZ0lDQWdabTl5SUNocElEMGdiR1Z1WjNSb01TQXRJREU3SUdrZ1BqMGdNRHNnYVMwdEtTQjdYRzRnSUNBZ0lDQWdJR0Z5Y21GNVcyTjFjM1J2YlVSbGMzUWdLeUJwWFNBOUlHRnljbUY1VzJOMWMzUnZiVU4xY25OdmNpQXJJR2xkTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCaGNuSmhlVnRrWlhOMFhTQTlJSFJ0Y0Z0amRYSnpiM0l5WFR0Y2JseHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2JHVnVaM1JvTWlBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2R0WlhKblpVaHBaMmdnY0hKbFkyOXVaR2wwYVc5dWN5QjNaWEpsSUc1dmRDQnlaWE53WldOMFpXUW5LVHRjYmx4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQmpkWE4wYjIxRGRYSnpiM0lnUFNCa1pYTjBJQzBnS0d4bGJtZDBhRElnTFNBeEtUdGNiaUFnSUNBZ0lHWnZjaUFvYVNBOUlEQTdJR2tnUENCc1pXNW5kR2d5T3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnWVhKeVlYbGJZM1Z6ZEc5dFEzVnljMjl5SUNzZ2FWMGdQU0IwYlhCYmFWMDdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dVMjl5ZENCaGJpQmhjbkpoZVNCcGJpQjBhR1VnY21GdVoyVWdXMnh2TENCb2FTa2dkWE5wYm1jZ1ZHbHRVMjl5ZEM1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTJGeWNtRjVmU0JoY25KaGVTQXRJRlJvWlNCaGNuSmhlU0IwYnlCemIzSjBMbHh1SUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUd4dklDMGdSbWx5YzNRZ1pXeGxiV1Z1ZENCcGJpQjBhR1VnY21GdVoyVWdLR2x1WTJ4MWMybDJaU2t1WEc0Z0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ2FHa2dMU0JNWVhOMElHVnNaVzFsYm5RZ2FXNGdkR2hsSUhKaGJtZGxMbHh1SUNvZ1FIQmhjbUZ0SUh0bWRXNWpkR2x2YmoxOUlHTnZiWEJoY21VZ0xTQkpkR1Z0SUdOdmJYQmhjbWx6YjI0Z1puVnVZM1JwYjI0dUlFUmxabUYxYkhRZ2FYTWdZV3h3YUdGaVpYUnBZMkZzTGx4dUlDb3ZYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQm1kVzVqZEdsdmJpQW9ZWEp5WVhrc0lHeHZMQ0JvYVN3Z1kyOXRjR0Z5WlNrZ2UxeHVJQ0JwWmlBb0lVRnljbUY1TG1selFYSnlZWGtvWVhKeVlYa3BLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduUTJGdUlHOXViSGtnYzI5eWRDQmhjbkpoZVhNbktUdGNiaUFnZlZ4dVhHNGdJQzhxWEc0Z0lDQXFJRWhoYm1Sc1pTQjBhR1VnWTJGelpTQjNhR1Z5WlNCaElHTnZiWEJoY21semIyNGdablZ1WTNScGIyNGdhWE1nYm05MElIQnliM1pwWkdWa0xpQlhaU0JrYjF4dUlDQWdLaUJzWlhocFkyOW5jbUZ3YUdsaklITnZjblJwYm1kY2JpQWdJQ292WEc1Y2JpQWdhV1lnS0d4dklEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0JzYnlBOUlEQTdYRzRnSUgxY2JseHVJQ0JwWmlBb2FHa2dQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUdocElEMGdZWEp5WVhrdWJHVnVaM1JvTzF4dUlDQjlYRzVjYmlBZ2FXWWdLR052YlhCaGNtVWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUdOdmJYQmhjbVVnUFNCaGJIQm9ZV0psZEdsallXeERiMjF3WVhKbE8xeHVJQ0I5WEc1Y2JpQWdiR1YwSUhKbGJXRnBibWx1WnlBOUlHaHBJQzBnYkc4N1hHNWNiaUFnTHk4Z1ZHaGxJR0Z5Y21GNUlHbHpJR0ZzY21WaFpIa2djMjl5ZEdWa1hHNGdJR2xtSUNoeVpXMWhhVzVwYm1jZ1BDQXlLU0I3WEc0Z0lDQWdjbVYwZFhKdU8xeHVJQ0I5WEc1Y2JpQWdiR1YwSUhKMWJreGxibWQwYUNBOUlEQTdYRzRnSUM4dklFOXVJSE50WVd4c0lHRnljbUY1Y3lCaWFXNWhjbmtnYzI5eWRDQmpZVzRnWW1VZ2RYTmxaQ0JrYVhKbFkzUnNlVnh1SUNCcFppQW9jbVZ0WVdsdWFXNW5JRHdnUkVWR1FWVk1WRjlOU1U1ZlRVVlNSMFVwSUh0Y2JpQWdJQ0J5ZFc1TVpXNW5kR2dnUFNCdFlXdGxRWE5qWlc1a2FXNW5VblZ1S0dGeWNtRjVMQ0JzYnl3Z2FHa3NJR052YlhCaGNtVXBPMXh1SUNBZ0lHSnBibUZ5ZVVsdWMyVnlkR2x2YmxOdmNuUW9ZWEp5WVhrc0lHeHZMQ0JvYVN3Z2JHOGdLeUJ5ZFc1TVpXNW5kR2dzSUdOdmJYQmhjbVVwTzF4dUlDQWdJSEpsZEhWeWJqdGNiaUFnZlZ4dVhHNGdJR3hsZENCMGN5QTlJRzVsZHlCVWFXMVRiM0owS0dGeWNtRjVMQ0JqYjIxd1lYSmxLVHRjYmx4dUlDQnNaWFFnYldsdVVuVnVJRDBnYldsdVVuVnVUR1Z1WjNSb0tISmxiV0ZwYm1sdVp5azdYRzVjYmlBZ1pHOGdlMXh1SUNBZ0lISjFia3hsYm1kMGFDQTlJRzFoYTJWQmMyTmxibVJwYm1kU2RXNG9ZWEp5WVhrc0lHeHZMQ0JvYVN3Z1kyOXRjR0Z5WlNrN1hHNGdJQ0FnYVdZZ0tISjFia3hsYm1kMGFDQThJRzFwYmxKMWJpa2dlMXh1SUNBZ0lDQWdiR1YwSUdadmNtTmxJRDBnY21WdFlXbHVhVzVuTzF4dUlDQWdJQ0FnYVdZZ0tHWnZjbU5sSUQ0Z2JXbHVVblZ1S1NCN1hHNGdJQ0FnSUNBZ0lHWnZjbU5sSUQwZ2JXbHVVblZ1TzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCaWFXNWhjbmxKYm5ObGNuUnBiMjVUYjNKMEtHRnljbUY1TENCc2J5d2diRzhnS3lCbWIzSmpaU3dnYkc4Z0t5QnlkVzVNWlc1bmRHZ3NJR052YlhCaGNtVXBPMXh1SUNBZ0lDQWdjblZ1VEdWdVozUm9JRDBnWm05eVkyVTdYRzRnSUNBZ2ZWeHVJQ0FnSUM4dklGQjFjMmdnYm1WM0lISjFiaUJoYm1RZ2JXVnlaMlVnYVdZZ2JtVmpaWE56WVhKNVhHNGdJQ0FnZEhNdWNIVnphRkoxYmloc2J5d2djblZ1VEdWdVozUm9LVHRjYmlBZ0lDQjBjeTV0WlhKblpWSjFibk1vS1R0Y2JseHVJQ0FnSUM4dklFZHZJR1pwYm1RZ2JtVjRkQ0J5ZFc1Y2JpQWdJQ0J5WlcxaGFXNXBibWNnTFQwZ2NuVnVUR1Z1WjNSb08xeHVJQ0FnSUd4dklDczlJSEoxYmt4bGJtZDBhRHRjYmx4dUlDQjlJSGRvYVd4bElDaHlaVzFoYVc1cGJtY2dJVDA5SURBcE8xeHVYRzRnSUM4dklFWnZjbU5sSUcxbGNtZHBibWNnYjJZZ2NtVnRZV2x1YVc1bklISjFibk5jYmlBZ2RITXVabTl5WTJWTlpYSm5aVkoxYm5Nb0tUdGNibjBpWFgwPSJdfQ==