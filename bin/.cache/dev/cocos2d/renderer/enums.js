(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/enums.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _mappings = require('./build/mappings');
        exports.default = {
            PROJ_PERSPECTIVE: 0,
            PROJ_ORTHO: 1,
            LIGHT_DIRECTIONAL: 0,
            LIGHT_POINT: 1,
            LIGHT_SPOT: 2,
            LIGHT_AMBIENT: 3,
            SHADOW_NONE: 0,
            SHADOW_HARD: 1,
            SHADOW_SOFT: 2,
            PARAM_INT: _mappings.typeMap.int,
            PARAM_INT2: _mappings.typeMap.ivec2,
            PARAM_INT3: _mappings.typeMap.ivec3,
            PARAM_INT4: _mappings.typeMap.ivec4,
            PARAM_FLOAT: _mappings.typeMap.float,
            PARAM_FLOAT2: _mappings.typeMap.vec2,
            PARAM_FLOAT3: _mappings.typeMap.vec3,
            PARAM_FLOAT4: _mappings.typeMap.vec4,
            PARAM_MAT2: _mappings.typeMap.mat2,
            PARAM_MAT3: _mappings.typeMap.mat3,
            PARAM_MAT4: _mappings.typeMap.mat4,
            PARAM_TEXTURE_2D: _mappings.typeMap.sampler2D,
            PARAM_TEXTURE_CUBE: _mappings.typeMap.samplerCube,
            CLEAR_COLOR: 1,
            CLEAR_DEPTH: 2,
            CLEAR_STENCIL: 4,
            CLEAR_SKYBOX: 8,
            BUFFER_VIEW_INT8: 0,
            BUFFER_VIEW_UINT8: 1,
            BUFFER_VIEW_INT16: 2,
            BUFFER_VIEW_UINT16: 3,
            BUFFER_VIEW_INT32: 4,
            BUFFER_VIEW_UINT32: 5,
            BUFFER_VIEW_FLOAT32: 6
        };
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,