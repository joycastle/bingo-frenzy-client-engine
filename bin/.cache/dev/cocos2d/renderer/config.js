(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/config.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _stageOffset = 0;
        var _name2stageID = {};
        exports.default = {
            addStage: function addStage(name) {
                if (_name2stageID[name] !== undefined) {
                    return;
                }
                var stageID = 1 << _stageOffset;
                _name2stageID[name] = stageID;
                _stageOffset += 1;
                CC_JSB && CC_NATIVERENDERER && window.renderer.addStage(name);
            },
            stageID: function stageID(name) {
                var id = _name2stageID[name];
                if (id === undefined) {
                    return -1;
                }
                return id;
            },
            stageIDs: function stageIDs(nameList) {
                var key = 0;
                for (var i = 0; i < nameList.length; ++i) {
                    var id = _name2stageID[nameList[i]];
                    if (id !== undefined) {
                        key |= id;
                    }
                }
                return key;
            }
        };
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,