(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/gfx/program.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var _genID = 0;
        function _parseError(out, type, errorLog) {
            errorLog.split('\n').forEach(function (msg) {
                if (msg.length < 5) {
                    return;
                }
                var parts = /^ERROR:\s+(\d+):(\d+):\s*(.*)$/.exec(msg);
                if (parts) {
                    out.push({
                        type: type,
                        fileID: parts[1] | 0,
                        line: parts[2] | 0,
                        message: parts[3].trim()
                    });
                } else if (msg.length > 0) {
                    out.push({
                        type: type,
                        fileID: -1,
                        line: 0,
                        message: msg
                    });
                }
            });
        }
        var Program = function () {
            function Program(device, options) {
                _classCallCheck(this, Program);
                this._device = device;
                this._attributes = [];
                this._uniforms = [];
                this._samplers = [];
                this._errors = [];
                this._linked = false;
                this._vertSource = options.vert;
                this._fragSource = options.frag;
                this._glID = null;
                this._id = _genID++;
            }
            _createClass(Program, [
                {
                    key: 'link',
                    value: function link() {
                        if (this._linked) {
                            return;
                        }
                        var gl = this._device._gl;
                        var vertShader = _createShader(gl, gl.VERTEX_SHADER, this._vertSource);
                        var fragShader = _createShader(gl, gl.FRAGMENT_SHADER, this._fragSource);
                        var program = gl.createProgram();
                        gl.attachShader(program, vertShader);
                        gl.attachShader(program, fragShader);
                        gl.linkProgram(program);
                        var failed = false;
                        var errors = this._errors;
                        if (!gl.getShaderParameter(vertShader, gl.COMPILE_STATUS)) {
                            _parseError(errors, 'vs', gl.getShaderInfoLog(vertShader));
                            failed = true;
                        }
                        if (!gl.getShaderParameter(fragShader, gl.COMPILE_STATUS)) {
                            _parseError(errors, 'fs', gl.getShaderInfoLog(fragShader));
                            failed = true;
                        }
                        gl.deleteShader(vertShader);
                        gl.deleteShader(fragShader);
                        if (failed) {
                            return errors;
                        }
                        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
                            errors.push({ info: 'Failed to link shader program: ' + gl.getProgramInfoLog(program) });
                            return errors;
                        }
                        this._glID = program;
                        var numAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
                        for (var i = 0; i < numAttributes; ++i) {
                            var info = gl.getActiveAttrib(program, i);
                            var location = gl.getAttribLocation(program, info.name);
                            this._attributes.push({
                                name: info.name,
                                location: location,
                                type: info.type
                            });
                        }
                        var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
                        for (var _i = 0; _i < numUniforms; ++_i) {
                            var _info = gl.getActiveUniform(program, _i);
                            var name = _info.name;
                            var _location = gl.getUniformLocation(program, name);
                            var isArray = name.substr(name.length - 3) === '[0]';
                            if (isArray) {
                                name = name.substr(0, name.length - 3);
                            }
                            var uniform = {
                                name: name,
                                location: _location,
                                type: _info.type,
                                size: isArray ? _info.size : undefined
                            };
                            this._uniforms.push(uniform);
                        }
                        this._linked = true;
                    }
                },
                {
                    key: 'destroy',
                    value: function destroy() {
                        var gl = this._device._gl;
                        gl.deleteProgram(this._glID);
                        this._linked = false;
                        this._glID = null;
                        this._attributes = [];
                        this._uniforms = [];
                        this._samplers = [];
                    }
                },
                {
                    key: 'id',
                    get: function get() {
                        return this._id;
                    }
                }
            ]);
            return Program;
        }();
        exports.default = Program;
        function _createShader(gl, type, src) {
            var shader = gl.createShader(type);
            gl.shaderSource(shader, src);
            gl.compileShader(shader);
            return shader;
        }
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2dyYW0uanMiLCIvVXNlcnMvZ2FveWFuZy9Xb3JrU3BhY2Uvam95Y2FzdGxlL2JpbmdvL2NsaWVudC9iaW5nby9lbmdpbmUvY29jb3MyZC9yZW5kZXJlci9nZngvcHJvZ3JhbS5qcyJdLCJuYW1lcyI6WyJfZ2VuSUQiLCJfcGFyc2VFcnJvciIsIm91dCIsInR5cGUiLCJlcnJvckxvZyIsInNwbGl0IiwiZm9yRWFjaCIsIm1zZyIsImxlbmd0aCIsInBhcnRzIiwiZXhlYyIsInB1c2giLCJmaWxlSUQiLCJsaW5lIiwibWVzc2FnZSIsInRyaW0iLCJQcm9ncmFtIiwiZGV2aWNlIiwib3B0aW9ucyIsIl9kZXZpY2UiLCJfYXR0cmlidXRlcyIsIl91bmlmb3JtcyIsIl9zYW1wbGVycyIsIl9lcnJvcnMiLCJfbGlua2VkIiwiX3ZlcnRTb3VyY2UiLCJ2ZXJ0IiwiX2ZyYWdTb3VyY2UiLCJmcmFnIiwiX2dsSUQiLCJfaWQiLCJnbCIsIl9nbCIsInZlcnRTaGFkZXIiLCJfY3JlYXRlU2hhZGVyIiwiVkVSVEVYX1NIQURFUiIsImZyYWdTaGFkZXIiLCJGUkFHTUVOVF9TSEFERVIiLCJwcm9ncmFtIiwiY3JlYXRlUHJvZ3JhbSIsImF0dGFjaFNoYWRlciIsImxpbmtQcm9ncmFtIiwiZmFpbGVkIiwiZXJyb3JzIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJnZXRTaGFkZXJJbmZvTG9nIiwiZGVsZXRlU2hhZGVyIiwiZ2V0UHJvZ3JhbVBhcmFtZXRlciIsIkxJTktfU1RBVFVTIiwiaW5mbyIsImdldFByb2dyYW1JbmZvTG9nIiwibnVtQXR0cmlidXRlcyIsIkFDVElWRV9BVFRSSUJVVEVTIiwiaSIsImdldEFjdGl2ZUF0dHJpYiIsImxvY2F0aW9uIiwiZ2V0QXR0cmliTG9jYXRpb24iLCJuYW1lIiwibnVtVW5pZm9ybXMiLCJBQ1RJVkVfVU5JRk9STVMiLCJnZXRBY3RpdmVVbmlmb3JtIiwiZ2V0VW5pZm9ybUxvY2F0aW9uIiwiaXNBcnJheSIsInN1YnN0ciIsInVuaWZvcm0iLCJzaXplIiwidW5kZWZpbmVkIiwiZGVsZXRlUHJvZ3JhbSIsInNyYyIsInNoYWRlciIsImNyZWF0ZVNoYWRlciIsInNoYWRlclNvdXJjZSIsImNvbXBpbGVTaGFkZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztJQUFBLFNBQUEsUUFBQSxDQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBO0FBQUE7O1NBQUE7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7UUFBQSxJQUFJQSxNQUFBQSxHQUFTLENBQWI7UUFFQSxTQUFTQyxXQUFULENBQXFCQyxHQUFyQixFQUEwQkMsSUFBMUIsRUFBZ0NDLFFBQWhDLEVBQTBDO0FBQUEsWUFDeENBLFFBQUFBLENBQVNDLEtBQVRELENBQWUsSUFBZkEsRUFBcUJFLE9BQXJCRixDQUE2QixVQUFBLEdBQUEsRUFBTztBQUFBLGdCQUNsQyxJQUFJRyxHQUFBQSxDQUFJQyxNQUFKRCxHQUFhLENBQWpCLEVBQW9CO0FBQUEsb0JBQ2xCLE9BRGtCO0FBQUEsaUJBRGM7QUFBQSxnQkFLbEMsSUFBSUUsS0FBQUEsR0FBUSxpQ0FBaUNDLElBQWpDLENBQXNDSCxHQUF0QyxDQUFaLENBTGtDO0FBQUEsZ0JBTWxDLElBQUlFLEtBQUosRUFBVztBQUFBLG9CQUNUUCxHQUFBQSxDQUFJUyxJQUFKVCxDQUFTO0FBQUEsd0JBQ1BDLElBQUFBLEVBQU1BLElBREM7QUFBQSx3QkFFUFMsTUFBQUEsRUFBUUgsS0FBQUEsQ0FBTSxDQUFOQSxJQUFXLENBRlo7QUFBQSx3QkFHUEksSUFBQUEsRUFBTUosS0FBQUEsQ0FBTSxDQUFOQSxJQUFXLENBSFY7QUFBQSx3QkFJUEssT0FBQUEsRUFBU0wsS0FBQUEsQ0FBTSxDQUFOQSxFQUFTTSxJQUFUTixFQUpGO0FBQUEscUJBQVRQLEVBRFM7QUFBQSxpQkFBWCxNQU9PLElBQUlLLEdBQUFBLENBQUlDLE1BQUpELEdBQWEsQ0FBakIsRUFBb0I7QUFBQSxvQkFDekJMLEdBQUFBLENBQUlTLElBQUpU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LE1BQWhCdkMsRUFBd0JzQyxHQUF4QnRDLEVBRm9DO0FBQUEsWUFHcENBLEVBQUFBLENBQUcwQyxhQUFIMUMsQ0FBaUJ1QyxNQUFqQnZDLEVBSG9DO0FBQUEsWUFLcEMsT0FBT3VDLE1BQVAsQ0FMb0M7QUFBQTs0Q0FsS3RDO0FBQUE7SUFHaUIsSUFBTWhFLE9BQU4sRUFBYztBQUFBLFFBQ1AsUUFBQSxDQUFBLFFBQUEsQ0FBQSxPQUFBLEVBQUEsU0FBQSxFQUFBLFFBQUEsRUFETztBQUFBLEtBQWQsTUFHWjtBQUFBO1lBRVcsUUFBQSxDQUFBLFFBQUEsQ0FBQSxPQUFBLEVBQXNDQyxTQUF0QyxFQUFaLFFBQVk7V0FGWDtBQUFBIiwiZmlsZSI6InByb2dyYW0uanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgX2dlbklEID0gMDtcblxuZnVuY3Rpb24gX3BhcnNlRXJyb3Iob3V0LCB0eXBlLCBlcnJvckxvZykge1xuICBlcnJvckxvZy5zcGxpdCgnXFxuJykuZm9yRWFjaChtc2cgPT4ge1xuICAgIGlmIChtc2cubGVuZ3RoIDwgNSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBwYXJ0cyA9IC9eRVJST1I6XFxzKyhcXGQrKTooXFxkKyk6XFxzKiguKikkLy5leGVjKG1zZyk7XG4gICAgaWYgKHBhcnRzKSB7XG4gICAgICBvdXQucHVzaCh7XG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIGZpbGVJRDogcGFydHNbMV0gfCAwLFxuICAgICAgICBsaW5lOiBwYXJ0c1syXSB8IDAsXG4gICAgICAgIG1lc3NhZ2U6IHBhcnRzWzNdLnRyaW0oKVxuICAgICAgfSlcbiAgICB9IGVsc2UgaWYgKG1zZy5sZW5ndGggPiAwKSB7XG4gICAgICBvdXQucHVzaCh7XG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIGZpbGVJRDogLTEsXG4gICAgICAgIGxpbmU6IDAsXG4gICAgICAgIG1lc3NhZ2U6IG1zZ1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvZ3JhbSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2VmLkdyYXBoaWNzRGV2aWNlfSBkZXZpY2UgLSBncmFwaGljIGRldmljZVxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIHNoYWRlciBkZWZpbml0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnZlcnQgLSB2ZXJ0ZXggc2hhZGVyIHNvdXJjZSBjb2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmZyYWcgLSBmcmFnbWVudCBzaGFkZXIgc2hhZGVyIHNvdXJjZSBjb2RlXG4gICAqIEBleGFtcGxlXG4gICAqIGxldCBwcm9nID0gbmV3IFByb2dyYW0oZGV2aWNlLCB7XG4gICAqICAgdmVydDogYFxuICAgKiAgICAgYXR0cmlidXRlIHZlYzMgYV9wb3NpdGlvbjtcbiAgICogICAgIHZvaWQgbWFpbigpIHtcbiAgICogICAgICAgZ2xfUG9zaXRpb24gPSB2ZWM0KCBhX3Bvc2l0aW9uLCAxLjAgKTtcbiAgICogICAgIH1cbiAgICogICBgLFxuICAgKiAgIGZyYWc6IGBcbiAgICogICAgIHByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xuICAgKiAgICAgdm9pZCBtYWluKCkge1xuICAgKiAgICAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KCAxLjAsIDEuMCwgMS4wLCAxLjAgKTtcbiAgICogICAgIH1cbiAgICogICBgXG4gICAqIH0pO1xuICAgKi9cbiAgY29uc3RydWN0b3IoZGV2aWNlLCBvcHRpb25zKSB7XG4gICAgdGhpcy5fZGV2aWNlID0gZGV2aWNlO1xuXG4gICAgLy8gc3RvcmVzIGdsIGluZm9ybWF0aW9uOiB7IGxvY2F0aW9uLCB0eXBlIH1cbiAgICB0aGlzLl9hdHRyaWJ1dGVzID0gW107XG4gICAgdGhpcy5fdW5pZm9ybXMgPSBbXTtcbiAgICB0aGlzLl9zYW1wbGVycyA9IFtdO1xuICAgIHRoaXMuX2Vycm9ycyA9IFtdO1xuICAgIHRoaXMuX2xpbmtlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3ZlcnRTb3VyY2UgPSBvcHRpb25zLnZlcnQ7XG4gICAgdGhpcy5fZnJhZ1NvdXJjZSA9IG9wdGlvbnMuZnJhZztcbiAgICB0aGlzLl9nbElEID0gbnVsbDtcbiAgICB0aGlzLl9pZCA9IF9nZW5JRCsrO1xuICB9XG5cbiAgZ2V0IGlkKCkge1xuICAgIHJldHVybiB0aGlzLl9pZDtcbiAgfVxuXG4gIGxpbmsoKSB7XG4gICAgaWYgKHRoaXMuX2xpbmtlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBnbCA9IHRoaXMuX2RldmljZS5fZ2w7XG5cbiAgICBsZXQgdmVydFNoYWRlciA9IF9jcmVhdGVTaGFkZXIoZ2wsIGdsLlZFUlRFWF9TSEFERVIsIHRoaXMuX3ZlcnRTb3VyY2UpO1xuICAgIGxldCBmcmFnU2hhZGVyID0gX2NyZWF0ZVNoYWRlcihnbCwgZ2wuRlJBR01FTlRfU0hBREVSLCB0aGlzLl9mcmFnU291cmNlKTtcblxuICAgIGxldCBwcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xuICAgIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCB2ZXJ0U2hhZGVyKTtcbiAgICBnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgZnJhZ1NoYWRlcik7XG4gICAgZ2wubGlua1Byb2dyYW0ocHJvZ3JhbSk7XG5cbiAgICBsZXQgZmFpbGVkID0gZmFsc2U7XG4gICAgbGV0IGVycm9ycyA9IHRoaXMuX2Vycm9ycztcblxuICAgIGlmICghZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKHZlcnRTaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKSkge1xuICAgICAgX3BhcnNlRXJyb3IoZXJyb3JzLCAndnMnLCBnbC5nZXRTaGFkZXJJbmZvTG9nKHZlcnRTaGFkZXIpKTtcbiAgICAgIGZhaWxlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKCFnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoZnJhZ1NoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMpKSB7XG4gICAgICBfcGFyc2VFcnJvcihlcnJvcnMsICdmcycsIGdsLmdldFNoYWRlckluZm9Mb2coZnJhZ1NoYWRlcikpO1xuICAgICAgZmFpbGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBnbC5kZWxldGVTaGFkZXIodmVydFNoYWRlcik7XG4gICAgZ2wuZGVsZXRlU2hhZGVyKGZyYWdTaGFkZXIpO1xuXG4gICAgaWYgKGZhaWxlZCkge1xuICAgICAgcmV0dXJuIGVycm9ycztcbiAgICB9XG5cbiAgICBpZiAoIWdsLmdldFByb2dyYW1QYXJhbWV0ZXIocHJvZ3JhbSwgZ2wuTElOS19TVEFUVVMpKSB7XG4gICAgICBlcnJvcnMucHVzaCh7aW5mbzogYEZhaWxlZCB0byBsaW5rIHNoYWRlciBwcm9ncmFtOiAke2dsLmdldFByb2dyYW1JbmZvTG9nKHByb2dyYW0pfWB9KTtcbiAgICAgIHJldHVybiBlcnJvcnM7XG4gICAgfVxuXG4gICAgdGhpcy5fZ2xJRCA9IHByb2dyYW07XG5cbiAgICAvLyBwYXJzZSBhdHRyaWJ1dGVcbiAgICBsZXQgbnVtQXR0cmlidXRlcyA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIocHJvZ3JhbSwgZ2wuQUNUSVZFX0FUVFJJQlVURVMpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtQXR0cmlidXRlczsgKytpKSB7XG4gICAgICBsZXQgaW5mbyA9IGdsLmdldEFjdGl2ZUF0dHJpYihwcm9ncmFtLCBpKTtcbiAgICAgIGxldCBsb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHByb2dyYW0sIGluZm8ubmFtZSk7XG5cbiAgICAgIHRoaXMuX2F0dHJpYnV0ZXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGluZm8ubmFtZSxcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICB0eXBlOiBpbmZvLnR5cGUsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBwYXJzZSB1bmlmb3JtXG4gICAgbGV0IG51bVVuaWZvcm1zID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5BQ1RJVkVfVU5JRk9STVMpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtVW5pZm9ybXM7ICsraSkge1xuICAgICAgbGV0IGluZm8gPSBnbC5nZXRBY3RpdmVVbmlmb3JtKHByb2dyYW0sIGkpO1xuICAgICAgbGV0IG5hbWUgPSBpbmZvLm5hbWU7XG4gICAgICBsZXQgbG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgbmFtZSk7XG4gICAgICBsZXQgaXNBcnJheSA9IG5hbWUuc3Vic3RyKG5hbWUubGVuZ3RoIC0gMykgPT09ICdbMF0nO1xuICAgICAgaWYgKGlzQXJyYXkpIHtcbiAgICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDAsIG5hbWUubGVuZ3RoIC0gMyk7XG4gICAgICB9XG5cbiAgICAgIGxldCB1bmlmb3JtID0ge1xuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIHR5cGU6IGluZm8udHlwZSxcbiAgICAgICAgc2l6ZTogaXNBcnJheSA/IGluZm8uc2l6ZSA6IHVuZGVmaW5lZCwgLy8gdXNlZCB3aGVuIHVuaWZvcm0gaXMgYW4gYXJyYXlcbiAgICAgIH07XG4gICAgICB0aGlzLl91bmlmb3Jtcy5wdXNoKHVuaWZvcm0pO1xuICAgIH1cblxuICAgIHRoaXMuX2xpbmtlZCA9IHRydWU7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIGxldCBnbCA9IHRoaXMuX2RldmljZS5fZ2w7XG4gICAgZ2wuZGVsZXRlUHJvZ3JhbSh0aGlzLl9nbElEKTtcblxuICAgIHRoaXMuX2xpbmtlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2dsSUQgPSBudWxsO1xuICAgIHRoaXMuX2F0dHJpYnV0ZXMgPSBbXTtcbiAgICB0aGlzLl91bmlmb3JtcyA9IFtdO1xuICAgIHRoaXMuX3NhbXBsZXJzID0gW107XG4gIH1cbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT1cbi8vIGludGVybmFsXG4vLyA9PT09PT09PT09PT09PT09PT09PVxuXG5mdW5jdGlvbiBfY3JlYXRlU2hhZGVyKGdsLCB0eXBlLCBzcmMpIHtcbiAgbGV0IHNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcih0eXBlKTtcbiAgZ2wuc2hhZGVyU291cmNlKHNoYWRlciwgc3JjKTtcbiAgZ2wuY29tcGlsZVNoYWRlcihzaGFkZXIpO1xuXG4gIHJldHVybiBzaGFkZXI7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgX2dlbklEID0gMDtcblxuZnVuY3Rpb24gX3BhcnNlRXJyb3Iob3V0LCB0eXBlLCBlcnJvckxvZykge1xuICBlcnJvckxvZy5zcGxpdCgnXFxuJykuZm9yRWFjaChmdW5jdGlvbiAobXNnKSB7XG4gICAgaWYgKG1zZy5sZW5ndGggPCA1KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHBhcnRzID0gL15FUlJPUjpcXHMrKFxcZCspOihcXGQrKTpcXHMqKC4qKSQvLmV4ZWMobXNnKTtcbiAgICBpZiAocGFydHMpIHtcbiAgICAgIG91dC5wdXNoKHtcbiAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgZmlsZUlEOiBwYXJ0c1sxXSB8IDAsXG4gICAgICAgIGxpbmU6IHBhcnRzWzJdIHwgMCxcbiAgICAgICAgbWVzc2FnZTogcGFydHNbM10udHJpbSgpXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKG1zZy5sZW5ndGggPiAwKSB7XG4gICAgICBvdXQucHVzaCh7XG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIGZpbGVJRDogLTEsXG4gICAgICAgIGxpbmU6IDAsXG4gICAgICAgIG1lc3NhZ2U6IG1zZ1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIFByb2dyYW0gPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2VmLkdyYXBoaWNzRGV2aWNlfSBkZXZpY2UgLSBncmFwaGljIGRldmljZVxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIHNoYWRlciBkZWZpbml0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnZlcnQgLSB2ZXJ0ZXggc2hhZGVyIHNvdXJjZSBjb2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmZyYWcgLSBmcmFnbWVudCBzaGFkZXIgc2hhZGVyIHNvdXJjZSBjb2RlXG4gICAqIEBleGFtcGxlXG4gICAqIGxldCBwcm9nID0gbmV3IFByb2dyYW0oZGV2aWNlLCB7XG4gICAqICAgdmVydDogYFxuICAgKiAgICAgYXR0cmlidXRlIHZlYzMgYV9wb3NpdGlvbjtcbiAgICogICAgIHZvaWQgbWFpbigpIHtcbiAgICogICAgICAgZ2xfUG9zaXRpb24gPSB2ZWM0KCBhX3Bvc2l0aW9uLCAxLjAgKTtcbiAgICogICAgIH1cbiAgICogICBgLFxuICAgKiAgIGZyYWc6IGBcbiAgICogICAgIHByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xuICAgKiAgICAgdm9pZCBtYWluKCkge1xuICAgKiAgICAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KCAxLjAsIDEuMCwgMS4wLCAxLjAgKTtcbiAgICogICAgIH1cbiAgICogICBgXG4gICAqIH0pO1xuICAgKi9cbiAgZnVuY3Rpb24gUHJvZ3JhbShkZXZpY2UsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvZ3JhbSk7XG5cbiAgICB0aGlzLl9kZXZpY2UgPSBkZXZpY2U7XG5cbiAgICAvLyBzdG9yZXMgZ2wgaW5mb3JtYXRpb246IHsgbG9jYXRpb24sIHR5cGUgfVxuICAgIHRoaXMuX2F0dHJpYnV0ZXMgPSBbXTtcbiAgICB0aGlzLl91bmlmb3JtcyA9IFtdO1xuICAgIHRoaXMuX3NhbXBsZXJzID0gW107XG4gICAgdGhpcy5fZXJyb3JzID0gW107XG4gICAgdGhpcy5fbGlua2VkID0gZmFsc2U7XG4gICAgdGhpcy5fdmVydFNvdXJjZSA9IG9wdGlvbnMudmVydDtcbiAgICB0aGlzLl9mcmFnU291cmNlID0gb3B0aW9ucy5mcmFnO1xuICAgIHRoaXMuX2dsSUQgPSBudWxsO1xuICAgIHRoaXMuX2lkID0gX2dlbklEKys7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUHJvZ3JhbSwgW3tcbiAgICBrZXk6ICdsaW5rJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGluaygpIHtcbiAgICAgIGlmICh0aGlzLl9saW5rZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZ2wgPSB0aGlzLl9kZXZpY2UuX2dsO1xuXG4gICAgICB2YXIgdmVydFNoYWRlciA9IF9jcmVhdGVTaGFkZXIoZ2wsIGdsLlZFUlRFWF9TSEFERVIsIHRoaXMuX3ZlcnRTb3VyY2UpO1xuICAgICAgdmFyIGZyYWdTaGFkZXIgPSBfY3JlYXRlU2hhZGVyKGdsLCBnbC5GUkFHTUVOVF9TSEFERVIsIHRoaXMuX2ZyYWdTb3VyY2UpO1xuXG4gICAgICB2YXIgcHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcbiAgICAgIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCB2ZXJ0U2hhZGVyKTtcbiAgICAgIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCBmcmFnU2hhZGVyKTtcbiAgICAgIGdsLmxpbmtQcm9ncmFtKHByb2dyYW0pO1xuXG4gICAgICB2YXIgZmFpbGVkID0gZmFsc2U7XG4gICAgICB2YXIgZXJyb3JzID0gdGhpcy5fZXJyb3JzO1xuXG4gICAgICBpZiAoIWdsLmdldFNoYWRlclBhcmFtZXRlcih2ZXJ0U2hhZGVyLCBnbC5DT01QSUxFX1NUQVRVUykpIHtcbiAgICAgICAgX3BhcnNlRXJyb3IoZXJyb3JzLCAndnMnLCBnbC5nZXRTaGFkZXJJbmZvTG9nKHZlcnRTaGFkZXIpKTtcbiAgICAgICAgZmFpbGVkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoZnJhZ1NoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMpKSB7XG4gICAgICAgIF9wYXJzZUVycm9yKGVycm9ycywgJ2ZzJywgZ2wuZ2V0U2hhZGVySW5mb0xvZyhmcmFnU2hhZGVyKSk7XG4gICAgICAgIGZhaWxlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGdsLmRlbGV0ZVNoYWRlcih2ZXJ0U2hhZGVyKTtcbiAgICAgIGdsLmRlbGV0ZVNoYWRlcihmcmFnU2hhZGVyKTtcblxuICAgICAgaWYgKGZhaWxlZCkge1xuICAgICAgICByZXR1cm4gZXJyb3JzO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWdsLmdldFByb2dyYW1QYXJhbWV0ZXIocHJvZ3JhbSwgZ2wuTElOS19TVEFUVVMpKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKHsgaW5mbzogJ0ZhaWxlZCB0byBsaW5rIHNoYWRlciBwcm9ncmFtOiAnICsgZ2wuZ2V0UHJvZ3JhbUluZm9Mb2cocHJvZ3JhbSkgfSk7XG4gICAgICAgIHJldHVybiBlcnJvcnM7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2dsSUQgPSBwcm9ncmFtO1xuXG4gICAgICAvLyBwYXJzZSBhdHRyaWJ1dGVcbiAgICAgIHZhciBudW1BdHRyaWJ1dGVzID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5BQ1RJVkVfQVRUUklCVVRFUyk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bUF0dHJpYnV0ZXM7ICsraSkge1xuICAgICAgICB2YXIgaW5mbyA9IGdsLmdldEFjdGl2ZUF0dHJpYihwcm9ncmFtLCBpKTtcbiAgICAgICAgdmFyIGxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgaW5mby5uYW1lKTtcblxuICAgICAgICB0aGlzLl9hdHRyaWJ1dGVzLnB1c2goe1xuICAgICAgICAgIG5hbWU6IGluZm8ubmFtZSxcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgdHlwZTogaW5mby50eXBlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBwYXJzZSB1bmlmb3JtXG4gICAgICB2YXIgbnVtVW5pZm9ybXMgPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIGdsLkFDVElWRV9VTklGT1JNUyk7XG4gICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbnVtVW5pZm9ybXM7ICsrX2kpIHtcbiAgICAgICAgdmFyIF9pbmZvID0gZ2wuZ2V0QWN0aXZlVW5pZm9ybShwcm9ncmFtLCBfaSk7XG4gICAgICAgIHZhciBuYW1lID0gX2luZm8ubmFtZTtcbiAgICAgICAgdmFyIF9sb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCBuYW1lKTtcbiAgICAgICAgdmFyIGlzQXJyYXkgPSBuYW1lLnN1YnN0cihuYW1lLmxlbmd0aCAtIDMpID09PSAnWzBdJztcbiAgICAgICAgaWYgKGlzQXJyYXkpIHtcbiAgICAgICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMCwgbmFtZS5sZW5ndGggLSAzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB1bmlmb3JtID0ge1xuICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgbG9jYXRpb246IF9sb2NhdGlvbixcbiAgICAgICAgICB0eXBlOiBfaW5mby50eXBlLFxuICAgICAgICAgIHNpemU6IGlzQXJyYXkgPyBfaW5mby5zaXplIDogdW5kZWZpbmVkIC8vIHVzZWQgd2hlbiB1bmlmb3JtIGlzIGFuIGFycmF5XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX3VuaWZvcm1zLnB1c2godW5pZm9ybSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2xpbmtlZCA9IHRydWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB2YXIgZ2wgPSB0aGlzLl9kZXZpY2UuX2dsO1xuICAgICAgZ2wuZGVsZXRlUHJvZ3JhbSh0aGlzLl9nbElEKTtcblxuICAgICAgdGhpcy5fbGlua2VkID0gZmFsc2U7XG4gICAgICB0aGlzLl9nbElEID0gbnVsbDtcbiAgICAgIHRoaXMuX2F0dHJpYnV0ZXMgPSBbXTtcbiAgICAgIHRoaXMuX3VuaWZvcm1zID0gW107XG4gICAgICB0aGlzLl9zYW1wbGVycyA9IFtdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2lkJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pZDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUHJvZ3JhbTtcbn0oKTtcblxuLy8gPT09PT09PT09PT09PT09PT09PT1cbi8vIGludGVybmFsXG4vLyA9PT09PT09PT09PT09PT09PT09PVxuXG5leHBvcnRzLmRlZmF1bHQgPSBQcm9ncmFtO1xuZnVuY3Rpb24gX2NyZWF0ZVNoYWRlcihnbCwgdHlwZSwgc3JjKSB7XG4gIHZhciBzaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIodHlwZSk7XG4gIGdsLnNoYWRlclNvdXJjZShzaGFkZXIsIHNyYyk7XG4gIGdsLmNvbXBpbGVTaGFkZXIoc2hhZGVyKTtcblxuICByZXR1cm4gc2hhZGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbkJ5YjJkeVlXMHVhbk1pWFN3aWJtRnRaWE1pT2xzaVgyZGxia2xFSWl3aVgzQmhjbk5sUlhKeWIzSWlMQ0p2ZFhRaUxDSjBlWEJsSWl3aVpYSnliM0pNYjJjaUxDSnpjR3hwZENJc0ltWnZja1ZoWTJnaUxDSnRjMmNpTENKc1pXNW5kR2dpTENKd1lYSjBjeUlzSW1WNFpXTWlMQ0p3ZFhOb0lpd2labWxzWlVsRUlpd2liR2x1WlNJc0ltMWxjM05oWjJVaUxDSjBjbWx0SWl3aVVISnZaM0poYlNJc0ltUmxkbWxqWlNJc0ltOXdkR2x2Ym5NaUxDSmZaR1YyYVdObElpd2lYMkYwZEhKcFluVjBaWE1pTENKZmRXNXBabTl5YlhNaUxDSmZjMkZ0Y0d4bGNuTWlMQ0pmWlhKeWIzSnpJaXdpWDJ4cGJtdGxaQ0lzSWw5MlpYSjBVMjkxY21ObElpd2lkbVZ5ZENJc0lsOW1jbUZuVTI5MWNtTmxJaXdpWm5KaFp5SXNJbDluYkVsRUlpd2lYMmxrSWl3aVoyd2lMQ0pmWjJ3aUxDSjJaWEowVTJoaFpHVnlJaXdpWDJOeVpXRjBaVk5vWVdSbGNpSXNJbFpGVWxSRldGOVRTRUZFUlZJaUxDSm1jbUZuVTJoaFpHVnlJaXdpUmxKQlIwMUZUbFJmVTBoQlJFVlNJaXdpY0hKdlozSmhiU0lzSW1OeVpXRjBaVkJ5YjJkeVlXMGlMQ0poZEhSaFkyaFRhR0ZrWlhJaUxDSnNhVzVyVUhKdlozSmhiU0lzSW1aaGFXeGxaQ0lzSW1WeWNtOXljeUlzSW1kbGRGTm9ZV1JsY2xCaGNtRnRaWFJsY2lJc0lrTlBUVkJKVEVWZlUxUkJWRlZUSWl3aVoyVjBVMmhoWkdWeVNXNW1iMHh2WnlJc0ltUmxiR1YwWlZOb1lXUmxjaUlzSW1kbGRGQnliMmR5WVcxUVlYSmhiV1YwWlhJaUxDSk1TVTVMWDFOVVFWUlZVeUlzSW1sdVptOGlMQ0puWlhSUWNtOW5jbUZ0U1c1bWIweHZaeUlzSW01MWJVRjBkSEpwWW5WMFpYTWlMQ0pCUTFSSlZrVmZRVlJVVWtsQ1ZWUkZVeUlzSW1raUxDSm5aWFJCWTNScGRtVkJkSFJ5YVdJaUxDSnNiMk5oZEdsdmJpSXNJbWRsZEVGMGRISnBZa3h2WTJGMGFXOXVJaXdpYm1GdFpTSXNJbTUxYlZWdWFXWnZjbTF6SWl3aVFVTlVTVlpGWDFWT1NVWlBVazFUSWl3aVoyVjBRV04wYVhabFZXNXBabTl5YlNJc0ltZGxkRlZ1YVdadmNtMU1iMk5oZEdsdmJpSXNJbWx6UVhKeVlYa2lMQ0p6ZFdKemRISWlMQ0oxYm1sbWIzSnRJaXdpYzJsNlpTSXNJblZ1WkdWbWFXNWxaQ0lzSW1SbGJHVjBaVkJ5YjJkeVlXMGlMQ0p6Y21NaUxDSnphR0ZrWlhJaUxDSmpjbVZoZEdWVGFHRmtaWElpTENKemFHRmtaWEpUYjNWeVkyVWlMQ0pqYjIxd2FXeGxVMmhoWkdWeUlsMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPenM3TzBGQlFVRXNTVUZCU1VFc1UwRkJVeXhEUVVGaU96dEJRVVZCTEZOQlFWTkRMRmRCUVZRc1EwRkJjVUpETEVkQlFYSkNMRVZCUVRCQ1F5eEpRVUV4UWl4RlFVRm5RME1zVVVGQmFFTXNSVUZCTUVNN1FVRkRlRU5CTEZkQlFWTkRMRXRCUVZRc1EwRkJaU3hKUVVGbUxFVkJRWEZDUXl4UFFVRnlRaXhEUVVFMlFpeGxRVUZQTzBGQlEyeERMRkZCUVVsRExFbEJRVWxETEUxQlFVb3NSMEZCWVN4RFFVRnFRaXhGUVVGdlFqdEJRVU5zUWp0QlFVTkVPenRCUVVWRUxGRkJRVWxETEZGQlFWRXNhVU5CUVdsRFF5eEpRVUZxUXl4RFFVRnpRMGdzUjBGQmRFTXNRMEZCV2p0QlFVTkJMRkZCUVVsRkxFdEJRVW9zUlVGQlZ6dEJRVU5VVUN4VlFVRkpVeXhKUVVGS0xFTkJRVk03UVVGRFVGSXNZMEZCVFVFc1NVRkVRenRCUVVWUVV5eG5Ra0ZCVVVnc1RVRkJUU3hEUVVGT0xFbEJRVmNzUTBGR1dqdEJRVWRRU1N4alFVRk5TaXhOUVVGTkxFTkJRVTRzU1VGQlZ5eERRVWhXTzBGQlNWQkxMR2xDUVVGVFRDeE5RVUZOTEVOQlFVNHNSVUZCVTAwc1NVRkJWRHRCUVVwR0xFOUJRVlE3UVVGTlJDeExRVkJFTEUxQlQwOHNTVUZCU1ZJc1NVRkJTVU1zVFVGQlNpeEhRVUZoTEVOQlFXcENMRVZCUVc5Q08wRkJRM3BDVGl4VlFVRkpVeXhKUVVGS0xFTkJRVk03UVVGRFVGSXNZMEZCVFVFc1NVRkVRenRCUVVWUVV5eG5Ra0ZCVVN4RFFVRkRMRU5CUmtZN1FVRkhVRU1zWTBGQlRTeERRVWhETzBGQlNWQkRMR2xDUVVGVFVEdEJRVXBHTEU5QlFWUTdRVUZOUkR0QlFVTkdMRWRCY2tKRU8wRkJjMEpFT3p0SlFVVnZRbE1zVHp0QlFVTnVRanM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQmNVSkJMRzFDUVVGWlF5eE5RVUZhTEVWQlFXOUNReXhQUVVGd1FpeEZRVUUyUWp0QlFVRkJPenRCUVVNelFpeFRRVUZMUXl4UFFVRk1MRWRCUVdWR0xFMUJRV1k3TzBGQlJVRTdRVUZEUVN4VFFVRkxSeXhYUVVGTUxFZEJRVzFDTEVWQlFXNUNPMEZCUTBFc1UwRkJTME1zVTBGQlRDeEhRVUZwUWl4RlFVRnFRanRCUVVOQkxGTkJRVXRETEZOQlFVd3NSMEZCYVVJc1JVRkJha0k3UVVGRFFTeFRRVUZMUXl4UFFVRk1MRWRCUVdVc1JVRkJaanRCUVVOQkxGTkJRVXRETEU5QlFVd3NSMEZCWlN4TFFVRm1PMEZCUTBFc1UwRkJTME1zVjBGQlRDeEhRVUZ0UWxBc1VVRkJVVkVzU1VGQk0wSTdRVUZEUVN4VFFVRkxReXhYUVVGTUxFZEJRVzFDVkN4UlFVRlJWU3hKUVVFelFqdEJRVU5CTEZOQlFVdERMRXRCUVV3c1IwRkJZU3hKUVVGaU8wRkJRMEVzVTBGQlMwTXNSMEZCVEN4SFFVRlhPVUlzVVVGQldEdEJRVU5FT3pzN096SkNRVTFOTzBGQlEwd3NWVUZCU1N4TFFVRkxkMElzVDBGQlZDeEZRVUZyUWp0QlFVTm9RanRCUVVORU96dEJRVVZFTEZWQlFVbFBMRXRCUVVzc1MwRkJTMW9zVDBGQlRDeERRVUZoWVN4SFFVRjBRanM3UVVGRlFTeFZRVUZKUXl4aFFVRmhReXhqUVVGalNDeEZRVUZrTEVWQlFXdENRU3hIUVVGSFNTeGhRVUZ5UWl4RlFVRnZReXhMUVVGTFZpeFhRVUY2UXl4RFFVRnFRanRCUVVOQkxGVkJRVWxYTEdGQlFXRkdMR05CUVdOSUxFVkJRV1FzUlVGQmEwSkJMRWRCUVVkTkxHVkJRWEpDTEVWQlFYTkRMRXRCUVV0V0xGZEJRVE5ETEVOQlFXcENPenRCUVVWQkxGVkJRVWxYTEZWQlFWVlFMRWRCUVVkUkxHRkJRVWdzUlVGQlpEdEJRVU5CVWl4VFFVRkhVeXhaUVVGSUxFTkJRV2RDUml4UFFVRm9RaXhGUVVGNVFrd3NWVUZCZWtJN1FVRkRRVVlzVTBGQlIxTXNXVUZCU0N4RFFVRm5Ra1lzVDBGQmFFSXNSVUZCZVVKR0xGVkJRWHBDTzBGQlEwRk1MRk5CUVVkVkxGZEJRVWdzUTBGQlpVZ3NUMEZCWmpzN1FVRkZRU3hWUVVGSlNTeFRRVUZUTEV0QlFXSTdRVUZEUVN4VlFVRkpReXhUUVVGVExFdEJRVXR3UWl4UFFVRnNRanM3UVVGRlFTeFZRVUZKTEVOQlFVTlJMRWRCUVVkaExHdENRVUZJTEVOQlFYTkNXQ3hWUVVGMFFpeEZRVUZyUTBZc1IwRkJSMk1zWTBGQmNrTXNRMEZCVEN4RlFVRXlSRHRCUVVONlJEVkRMRzlDUVVGWk1FTXNUVUZCV2l4RlFVRnZRaXhKUVVGd1FpeEZRVUV3UWxvc1IwRkJSMlVzWjBKQlFVZ3NRMEZCYjBKaUxGVkJRWEJDTEVOQlFURkNPMEZCUTBGVExHbENRVUZUTEVsQlFWUTdRVUZEUkRzN1FVRkZSQ3hWUVVGSkxFTkJRVU5ZTEVkQlFVZGhMR3RDUVVGSUxFTkJRWE5DVWl4VlFVRjBRaXhGUVVGclEwd3NSMEZCUjJNc1kwRkJja01zUTBGQlRDeEZRVUV5UkR0QlFVTjZSRFZETEc5Q1FVRlpNRU1zVFVGQldpeEZRVUZ2UWl4SlFVRndRaXhGUVVFd1Fsb3NSMEZCUjJVc1owSkJRVWdzUTBGQmIwSldMRlZCUVhCQ0xFTkJRVEZDTzBGQlEwRk5MR2xDUVVGVExFbEJRVlE3UVVGRFJEczdRVUZGUkZnc1UwRkJSMmRDTEZsQlFVZ3NRMEZCWjBKa0xGVkJRV2hDTzBGQlEwRkdMRk5CUVVkblFpeFpRVUZJTEVOQlFXZENXQ3hWUVVGb1FqczdRVUZGUVN4VlFVRkpUU3hOUVVGS0xFVkJRVms3UVVGRFZpeGxRVUZQUXl4TlFVRlFPMEZCUTBRN08wRkJSVVFzVlVGQlNTeERRVUZEV2l4SFFVRkhhVUlzYlVKQlFVZ3NRMEZCZFVKV0xFOUJRWFpDTEVWQlFXZERVQ3hIUVVGSGEwSXNWMEZCYmtNc1EwRkJUQ3hGUVVGelJEdEJRVU53UkU0c1pVRkJUMmhETEVsQlFWQXNRMEZCV1N4RlFVRkRkVU1zTUVOQlFYZERia0lzUjBGQlIyOUNMR2xDUVVGSUxFTkJRWEZDWWl4UFFVRnlRaXhEUVVGNlF5eEZRVUZhTzBGQlEwRXNaVUZCVDBzc1RVRkJVRHRCUVVORU96dEJRVVZFTEZkQlFVdGtMRXRCUVV3c1IwRkJZVk1zVDBGQllqczdRVUZGUVR0QlFVTkJMRlZCUVVsakxHZENRVUZuUW5KQ0xFZEJRVWRwUWl4dFFrRkJTQ3hEUVVGMVFsWXNUMEZCZGtJc1JVRkJaME5RTEVkQlFVZHpRaXhwUWtGQmJrTXNRMEZCY0VJN1FVRkRRU3hYUVVGTExFbEJRVWxETEVsQlFVa3NRMEZCWWl4RlFVRm5Ra0VzU1VGQlNVWXNZVUZCY0VJc1JVRkJiVU1zUlVGQlJVVXNRMEZCY2tNc1JVRkJkME03UVVGRGRFTXNXVUZCU1Vvc1QwRkJUMjVDTEVkQlFVZDNRaXhsUVVGSUxFTkJRVzFDYWtJc1QwRkJia0lzUlVGQk5FSm5RaXhEUVVFMVFpeERRVUZZTzBGQlEwRXNXVUZCU1VVc1YwRkJWM3BDTEVkQlFVY3dRaXhwUWtGQlNDeERRVUZ4UW01Q0xFOUJRWEpDTEVWQlFUaENXU3hMUVVGTFVTeEpRVUZ1UXl4RFFVRm1PenRCUVVWQkxHRkJRVXQwUXl4WFFVRk1MRU5CUVdsQ1ZDeEpRVUZxUWl4RFFVRnpRanRCUVVOd1FpdERMR2RDUVVGTlVpeExRVUZMVVN4SlFVUlRPMEZCUlhCQ1JpeHZRa0ZCVlVFc1VVRkdWVHRCUVVkd1FuSkVMR2RDUVVGTkswTXNTMEZCU3k5RE8wRkJTRk1zVTBGQmRFSTdRVUZMUkRzN1FVRkZSRHRCUVVOQkxGVkJRVWwzUkN4alFVRmpOVUlzUjBGQlIybENMRzFDUVVGSUxFTkJRWFZDVml4UFFVRjJRaXhGUVVGblExQXNSMEZCUnpaQ0xHVkJRVzVETEVOQlFXeENPMEZCUTBFc1YwRkJTeXhKUVVGSlRpeExRVUZKTEVOQlFXSXNSVUZCWjBKQkxFdEJRVWxMTEZkQlFYQkNMRVZCUVdsRExFVkJRVVZNTEVWQlFXNURMRVZCUVhORE8wRkJRM0JETEZsQlFVbEtMRkZCUVU5dVFpeEhRVUZIT0VJc1owSkJRVWdzUTBGQmIwSjJRaXhQUVVGd1FpeEZRVUUyUW1kQ0xFVkJRVGRDTEVOQlFWZzdRVUZEUVN4WlFVRkpTU3hQUVVGUFVpeE5RVUZMVVN4SlFVRm9RanRCUVVOQkxGbEJRVWxHTEZsQlFWZDZRaXhIUVVGSEswSXNhMEpCUVVnc1EwRkJjMEo0UWl4UFFVRjBRaXhGUVVFclFtOUNMRWxCUVM5Q0xFTkJRV1k3UVVGRFFTeFpRVUZKU3l4VlFVRlZUQ3hMUVVGTFRTeE5RVUZNTEVOQlFWbE9MRXRCUVV0c1JDeE5RVUZNTEVkQlFXTXNRMEZCTVVJc1RVRkJhVU1zUzBGQkwwTTdRVUZEUVN4WlFVRkpkVVFzVDBGQlNpeEZRVUZoTzBGQlExaE1MR2xDUVVGUFFTeExRVUZMVFN4TlFVRk1MRU5CUVZrc1EwRkJXaXhGUVVGbFRpeExRVUZMYkVRc1RVRkJUQ3hIUVVGakxFTkJRVGRDTEVOQlFWQTdRVUZEUkRzN1FVRkZSQ3haUVVGSmVVUXNWVUZCVlR0QlFVTmFVQ3huUWtGQlRVRXNTVUZFVFR0QlFVVmFSaXh2UWtGQlZVRXNVMEZHUlR0QlFVZGFja1FzWjBKQlFVMHJReXhOUVVGTEwwTXNTVUZJUXp0QlFVbGFLMFFzWjBKQlFVMUlMRlZCUVZWaUxFMUJRVXRuUWl4SlFVRm1MRWRCUVhOQ1F5eFRRVXBvUWl4RFFVa3lRanRCUVVvelFpeFRRVUZrTzBGQlRVRXNZVUZCU3psRExGTkJRVXdzUTBGQlpWWXNTVUZCWml4RFFVRnZRbk5FTEU5QlFYQkNPMEZCUTBRN08wRkJSVVFzVjBGQlMzcERMRTlCUVV3c1IwRkJaU3hKUVVGbU8wRkJRMFE3T3pzNFFrRkZVenRCUVVOU0xGVkJRVWxQTEV0QlFVc3NTMEZCUzFvc1QwRkJUQ3hEUVVGaFlTeEhRVUYwUWp0QlFVTkJSQ3hUUVVGSGNVTXNZVUZCU0N4RFFVRnBRaXhMUVVGTGRrTXNTMEZCZEVJN08wRkJSVUVzVjBGQlMwd3NUMEZCVEN4SFFVRmxMRXRCUVdZN1FVRkRRU3hYUVVGTFN5eExRVUZNTEVkQlFXRXNTVUZCWWp0QlFVTkJMRmRCUVV0VUxGZEJRVXdzUjBGQmJVSXNSVUZCYmtJN1FVRkRRU3hYUVVGTFF5eFRRVUZNTEVkQlFXbENMRVZCUVdwQ08wRkJRMEVzVjBGQlMwTXNVMEZCVEN4SFFVRnBRaXhGUVVGcVFqdEJRVU5FT3pzN2QwSkJNMFpSTzBGQlExQXNZVUZCVHl4TFFVRkxVU3hIUVVGYU8wRkJRMFE3T3pzN096dEJRVFJHU0R0QlFVTkJPMEZCUTBFN08ydENRWEpKY1VKa0xFODdRVUYxU1hKQ0xGTkJRVk5yUWl4aFFVRlVMRU5CUVhWQ1NDeEZRVUYyUWl4RlFVRXlRalZDTEVsQlFUTkNMRVZCUVdsRGEwVXNSMEZCYWtNc1JVRkJjME03UVVGRGNFTXNUVUZCU1VNc1UwRkJVM1pETEVkQlFVZDNReXhaUVVGSUxFTkJRV2RDY0VVc1NVRkJhRUlzUTBGQllqdEJRVU5CTkVJc1MwRkJSM2xETEZsQlFVZ3NRMEZCWjBKR0xFMUJRV2hDTEVWQlFYZENSQ3hIUVVGNFFqdEJRVU5CZEVNc1MwRkJSekJETEdGQlFVZ3NRMEZCYVVKSUxFMUJRV3BDT3p0QlFVVkJMRk5CUVU5QkxFMUJRVkE3UVVGRFJDSXNJbVpwYkdVaU9pSndjbTluY21GdExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYkdWMElGOW5aVzVKUkNBOUlEQTdYRzVjYm1aMWJtTjBhVzl1SUY5d1lYSnpaVVZ5Y205eUtHOTFkQ3dnZEhsd1pTd2daWEp5YjNKTWIyY3BJSHRjYmlBZ1pYSnliM0pNYjJjdWMzQnNhWFFvSjF4Y2JpY3BMbVp2Y2tWaFkyZ29iWE5uSUQwK0lIdGNiaUFnSUNCcFppQW9iWE5uTG14bGJtZDBhQ0E4SURVcElIdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JzWlhRZ2NHRnlkSE1nUFNBdlhrVlNVazlTT2x4Y2N5c29YRnhrS3lrNktGeGNaQ3NwT2x4Y2N5b29MaW9wSkM4dVpYaGxZeWh0YzJjcE8xeHVJQ0FnSUdsbUlDaHdZWEowY3lrZ2UxeHVJQ0FnSUNBZ2IzVjBMbkIxYzJnb2UxeHVJQ0FnSUNBZ0lDQjBlWEJsT2lCMGVYQmxMRnh1SUNBZ0lDQWdJQ0JtYVd4bFNVUTZJSEJoY25Seld6RmRJSHdnTUN4Y2JpQWdJQ0FnSUNBZ2JHbHVaVG9nY0dGeWRITmJNbDBnZkNBd0xGeHVJQ0FnSUNBZ0lDQnRaWE56WVdkbE9pQndZWEowYzFzelhTNTBjbWx0S0NsY2JpQWdJQ0FnSUgwcFhHNGdJQ0FnZlNCbGJITmxJR2xtSUNodGMyY3ViR1Z1WjNSb0lENGdNQ2tnZTF4dUlDQWdJQ0FnYjNWMExuQjFjMmdvZTF4dUlDQWdJQ0FnSUNCMGVYQmxPaUIwZVhCbExGeHVJQ0FnSUNBZ0lDQm1hV3hsU1VRNklDMHhMRnh1SUNBZ0lDQWdJQ0JzYVc1bE9pQXdMRnh1SUNBZ0lDQWdJQ0J0WlhOellXZGxPaUJ0YzJkY2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JpQWdmU2s3WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUZCeWIyZHlZVzBnZTF4dUlDQXZLaXBjYmlBZ0lDb2dRSEJoY21GdElIdGxaaTVIY21Gd2FHbGpjMFJsZG1salpYMGdaR1YyYVdObElDMGdaM0poY0docFl5QmtaWFpwWTJWY2JpQWdJQ29nUUhCaGNtRnRJSHR2WW1wbFkzUjlJRzl3ZEdsdmJuTWdMU0J6YUdGa1pYSWdaR1ZtYVc1cGRHbHZibHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2IzQjBhVzl1Y3k1MlpYSjBJQzBnZG1WeWRHVjRJSE5vWVdSbGNpQnpiM1Z5WTJVZ1kyOWtaVnh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2IzQjBhVzl1Y3k1bWNtRm5JQzBnWm5KaFoyMWxiblFnYzJoaFpHVnlJSE5vWVdSbGNpQnpiM1Z5WTJVZ1kyOWtaVnh1SUNBZ0tpQkFaWGhoYlhCc1pWeHVJQ0FnS2lCc1pYUWdjSEp2WnlBOUlHNWxkeUJRY205bmNtRnRLR1JsZG1salpTd2dlMXh1SUNBZ0tpQWdJSFpsY25RNklHQmNiaUFnSUNvZ0lDQWdJR0YwZEhKcFluVjBaU0IyWldNeklHRmZjRzl6YVhScGIyNDdYRzRnSUNBcUlDQWdJQ0IyYjJsa0lHMWhhVzRvS1NCN1hHNGdJQ0FxSUNBZ0lDQWdJR2RzWDFCdmMybDBhVzl1SUQwZ2RtVmpOQ2dnWVY5d2IzTnBkR2x2Yml3Z01TNHdJQ2s3WEc0Z0lDQXFJQ0FnSUNCOVhHNGdJQ0FxSUNBZ1lDeGNiaUFnSUNvZ0lDQm1jbUZuT2lCZ1hHNGdJQ0FxSUNBZ0lDQndjbVZqYVhOcGIyNGdiV1ZrYVhWdGNDQm1iRzloZER0Y2JpQWdJQ29nSUNBZ0lIWnZhV1FnYldGcGJpZ3BJSHRjYmlBZ0lDb2dJQ0FnSUNBZ1oyeGZSbkpoWjBOdmJHOXlJRDBnZG1Wak5DZ2dNUzR3TENBeExqQXNJREV1TUN3Z01TNHdJQ2s3WEc0Z0lDQXFJQ0FnSUNCOVhHNGdJQ0FxSUNBZ1lGeHVJQ0FnS2lCOUtUdGNiaUFnSUNvdlhHNGdJR052Ym5OMGNuVmpkRzl5S0dSbGRtbGpaU3dnYjNCMGFXOXVjeWtnZTF4dUlDQWdJSFJvYVhNdVgyUmxkbWxqWlNBOUlHUmxkbWxqWlR0Y2JseHVJQ0FnSUM4dklITjBiM0psY3lCbmJDQnBibVp2Y20xaGRHbHZiam9nZXlCc2IyTmhkR2x2Yml3Z2RIbHdaU0I5WEc0Z0lDQWdkR2hwY3k1ZllYUjBjbWxpZFhSbGN5QTlJRnRkTzF4dUlDQWdJSFJvYVhNdVgzVnVhV1p2Y20xeklEMGdXMTA3WEc0Z0lDQWdkR2hwY3k1ZmMyRnRjR3hsY25NZ1BTQmJYVHRjYmlBZ0lDQjBhR2x6TGw5bGNuSnZjbk1nUFNCYlhUdGNiaUFnSUNCMGFHbHpMbDlzYVc1clpXUWdQU0JtWVd4elpUdGNiaUFnSUNCMGFHbHpMbDkyWlhKMFUyOTFjbU5sSUQwZ2IzQjBhVzl1Y3k1MlpYSjBPMXh1SUNBZ0lIUm9hWE11WDJaeVlXZFRiM1Z5WTJVZ1BTQnZjSFJwYjI1ekxtWnlZV2M3WEc0Z0lDQWdkR2hwY3k1ZloyeEpSQ0E5SUc1MWJHdzdYRzRnSUNBZ2RHaHBjeTVmYVdRZ1BTQmZaMlZ1U1VRckt6dGNiaUFnZlZ4dVhHNGdJR2RsZENCcFpDZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYVdRN1hHNGdJSDFjYmx4dUlDQnNhVzVyS0NrZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6TGw5c2FXNXJaV1FwSUh0Y2JpQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnNaWFFnWjJ3Z1BTQjBhR2x6TGw5a1pYWnBZMlV1WDJkc08xeHVYRzRnSUNBZ2JHVjBJSFpsY25SVGFHRmtaWElnUFNCZlkzSmxZWFJsVTJoaFpHVnlLR2RzTENCbmJDNVdSVkpVUlZoZlUwaEJSRVZTTENCMGFHbHpMbDkyWlhKMFUyOTFjbU5sS1R0Y2JpQWdJQ0JzWlhRZ1puSmhaMU5vWVdSbGNpQTlJRjlqY21WaGRHVlRhR0ZrWlhJb1oyd3NJR2RzTGtaU1FVZE5SVTVVWDFOSVFVUkZVaXdnZEdocGN5NWZabkpoWjFOdmRYSmpaU2s3WEc1Y2JpQWdJQ0JzWlhRZ2NISnZaM0poYlNBOUlHZHNMbU55WldGMFpWQnliMmR5WVcwb0tUdGNiaUFnSUNCbmJDNWhkSFJoWTJoVGFHRmtaWElvY0hKdlozSmhiU3dnZG1WeWRGTm9ZV1JsY2lrN1hHNGdJQ0FnWjJ3dVlYUjBZV05vVTJoaFpHVnlLSEJ5YjJkeVlXMHNJR1p5WVdkVGFHRmtaWElwTzF4dUlDQWdJR2RzTG14cGJtdFFjbTluY21GdEtIQnliMmR5WVcwcE8xeHVYRzRnSUNBZ2JHVjBJR1poYVd4bFpDQTlJR1poYkhObE8xeHVJQ0FnSUd4bGRDQmxjbkp2Y25NZ1BTQjBhR2x6TGw5bGNuSnZjbk03WEc1Y2JpQWdJQ0JwWmlBb0lXZHNMbWRsZEZOb1lXUmxjbEJoY21GdFpYUmxjaWgyWlhKMFUyaGhaR1Z5TENCbmJDNURUMDFRU1V4RlgxTlVRVlJWVXlrcElIdGNiaUFnSUNBZ0lGOXdZWEp6WlVWeWNtOXlLR1Z5Y205eWN5d2dKM1p6Snl3Z1oyd3VaMlYwVTJoaFpHVnlTVzVtYjB4dlp5aDJaWEowVTJoaFpHVnlLU2s3WEc0Z0lDQWdJQ0JtWVdsc1pXUWdQU0IwY25WbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDZ2haMnd1WjJWMFUyaGhaR1Z5VUdGeVlXMWxkR1Z5S0daeVlXZFRhR0ZrWlhJc0lHZHNMa05QVFZCSlRFVmZVMVJCVkZWVEtTa2dlMXh1SUNBZ0lDQWdYM0JoY25ObFJYSnliM0lvWlhKeWIzSnpMQ0FuWm5NbkxDQm5iQzVuWlhSVGFHRmtaWEpKYm1adlRHOW5LR1p5WVdkVGFHRmtaWElwS1R0Y2JpQWdJQ0FnSUdaaGFXeGxaQ0E5SUhSeWRXVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1oyd3VaR1ZzWlhSbFUyaGhaR1Z5S0habGNuUlRhR0ZrWlhJcE8xeHVJQ0FnSUdkc0xtUmxiR1YwWlZOb1lXUmxjaWhtY21GblUyaGhaR1Z5S1R0Y2JseHVJQ0FnSUdsbUlDaG1ZV2xzWldRcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCbGNuSnZjbk03WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0NGbmJDNW5aWFJRY205bmNtRnRVR0Z5WVcxbGRHVnlLSEJ5YjJkeVlXMHNJR2RzTGt4SlRrdGZVMVJCVkZWVEtTa2dlMXh1SUNBZ0lDQWdaWEp5YjNKekxuQjFjMmdvZTJsdVptODZJR0JHWVdsc1pXUWdkRzhnYkdsdWF5QnphR0ZrWlhJZ2NISnZaM0poYlRvZ0pIdG5iQzVuWlhSUWNtOW5jbUZ0U1c1bWIweHZaeWh3Y205bmNtRnRLWDFnZlNrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWlhKeWIzSnpPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIUm9hWE11WDJkc1NVUWdQU0J3Y205bmNtRnRPMXh1WEc0Z0lDQWdMeThnY0dGeWMyVWdZWFIwY21saWRYUmxYRzRnSUNBZ2JHVjBJRzUxYlVGMGRISnBZblYwWlhNZ1BTQm5iQzVuWlhSUWNtOW5jbUZ0VUdGeVlXMWxkR1Z5S0hCeWIyZHlZVzBzSUdkc0xrRkRWRWxXUlY5QlZGUlNTVUpWVkVWVEtUdGNiaUFnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElHNTFiVUYwZEhKcFluVjBaWE03SUNzcmFTa2dlMXh1SUNBZ0lDQWdiR1YwSUdsdVptOGdQU0JuYkM1blpYUkJZM1JwZG1WQmRIUnlhV0lvY0hKdlozSmhiU3dnYVNrN1hHNGdJQ0FnSUNCc1pYUWdiRzlqWVhScGIyNGdQU0JuYkM1blpYUkJkSFJ5YVdKTWIyTmhkR2x2Ymlod2NtOW5jbUZ0TENCcGJtWnZMbTVoYldVcE8xeHVYRzRnSUNBZ0lDQjBhR2x6TGw5aGRIUnlhV0oxZEdWekxuQjFjMmdvZTF4dUlDQWdJQ0FnSUNCdVlXMWxPaUJwYm1adkxtNWhiV1VzWEc0Z0lDQWdJQ0FnSUd4dlkyRjBhVzl1T2lCc2IyTmhkR2x2Yml4Y2JpQWdJQ0FnSUNBZ2RIbHdaVG9nYVc1bWJ5NTBlWEJsTEZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z2NHRnljMlVnZFc1cFptOXliVnh1SUNBZ0lHeGxkQ0J1ZFcxVmJtbG1iM0p0Y3lBOUlHZHNMbWRsZEZCeWIyZHlZVzFRWVhKaGJXVjBaWElvY0hKdlozSmhiU3dnWjJ3dVFVTlVTVlpGWDFWT1NVWlBVazFUS1R0Y2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUc1MWJWVnVhV1p2Y20xek95QXJLMmtwSUh0Y2JpQWdJQ0FnSUd4bGRDQnBibVp2SUQwZ1oyd3VaMlYwUVdOMGFYWmxWVzVwWm05eWJTaHdjbTluY21GdExDQnBLVHRjYmlBZ0lDQWdJR3hsZENCdVlXMWxJRDBnYVc1bWJ5NXVZVzFsTzF4dUlDQWdJQ0FnYkdWMElHeHZZMkYwYVc5dUlEMGdaMnd1WjJWMFZXNXBabTl5YlV4dlkyRjBhVzl1S0hCeWIyZHlZVzBzSUc1aGJXVXBPMXh1SUNBZ0lDQWdiR1YwSUdselFYSnlZWGtnUFNCdVlXMWxMbk4xWW5OMGNpaHVZVzFsTG14bGJtZDBhQ0F0SURNcElEMDlQU0FuV3pCZEp6dGNiaUFnSUNBZ0lHbG1JQ2hwYzBGeWNtRjVLU0I3WEc0Z0lDQWdJQ0FnSUc1aGJXVWdQU0J1WVcxbExuTjFZbk4wY2lnd0xDQnVZVzFsTG14bGJtZDBhQ0F0SURNcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnNaWFFnZFc1cFptOXliU0E5SUh0Y2JpQWdJQ0FnSUNBZ2JtRnRaVG9nYm1GdFpTeGNiaUFnSUNBZ0lDQWdiRzlqWVhScGIyNDZJR3h2WTJGMGFXOXVMRnh1SUNBZ0lDQWdJQ0IwZVhCbE9pQnBibVp2TG5SNWNHVXNYRzRnSUNBZ0lDQWdJSE5wZW1VNklHbHpRWEp5WVhrZ1B5QnBibVp2TG5OcGVtVWdPaUIxYm1SbFptbHVaV1FzSUM4dklIVnpaV1FnZDJobGJpQjFibWxtYjNKdElHbHpJR0Z1SUdGeWNtRjVYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdkR2hwY3k1ZmRXNXBabTl5YlhNdWNIVnphQ2gxYm1sbWIzSnRLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBhR2x6TGw5c2FXNXJaV1FnUFNCMGNuVmxPMXh1SUNCOVhHNWNiaUFnWkdWemRISnZlU2dwSUh0Y2JpQWdJQ0JzWlhRZ1oyd2dQU0IwYUdsekxsOWtaWFpwWTJVdVgyZHNPMXh1SUNBZ0lHZHNMbVJsYkdWMFpWQnliMmR5WVcwb2RHaHBjeTVmWjJ4SlJDazdYRzVjYmlBZ0lDQjBhR2x6TGw5c2FXNXJaV1FnUFNCbVlXeHpaVHRjYmlBZ0lDQjBhR2x6TGw5bmJFbEVJRDBnYm5Wc2JEdGNiaUFnSUNCMGFHbHpMbDloZEhSeWFXSjFkR1Z6SUQwZ1cxMDdYRzRnSUNBZ2RHaHBjeTVmZFc1cFptOXliWE1nUFNCYlhUdGNiaUFnSUNCMGFHbHpMbDl6WVcxd2JHVnljeUE5SUZ0ZE8xeHVJQ0I5WEc1OVhHNWNiaTh2SUQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVhHNHZMeUJwYm5SbGNtNWhiRnh1THk4Z1BUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMWNibHh1Wm5WdVkzUnBiMjRnWDJOeVpXRjBaVk5vWVdSbGNpaG5iQ3dnZEhsd1pTd2djM0pqS1NCN1hHNGdJR3hsZENCemFHRmtaWElnUFNCbmJDNWpjbVZoZEdWVGFHRmtaWElvZEhsd1pTazdYRzRnSUdkc0xuTm9ZV1JsY2xOdmRYSmpaU2h6YUdGa1pYSXNJSE55WXlrN1hHNGdJR2RzTG1OdmJYQnBiR1ZUYUdGa1pYSW9jMmhoWkdWeUtUdGNibHh1SUNCeVpYUjFjbTRnYzJoaFpHVnlPMXh1ZlNKZGZRPT0iXX0=