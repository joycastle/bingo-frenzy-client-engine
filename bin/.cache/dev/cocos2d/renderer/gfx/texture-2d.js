(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/gfx/texture-2d.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _texture = require('./texture');
        var _texture2 = _interopRequireDefault(_texture);
        var _enums = require('./enums');
        var _misc = require('./misc');
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var ArrayBufferView = Object.getPrototypeOf(Object.getPrototypeOf(new Uint8Array())).constructor;
        var Texture2D = function (_Texture) {
            _inherits(Texture2D, _Texture);
            function Texture2D(device, options) {
                _classCallCheck(this, Texture2D);
                var _this = _possibleConstructorReturn(this, (Texture2D.__proto__ || Object.getPrototypeOf(Texture2D)).call(this, device));
                var gl = _this._device._gl;
                _this._target = gl.TEXTURE_2D;
                _this._glID = gl.createTexture();
                options.images = options.images || [null];
                _this.update(options);
                return _this;
            }
            _createClass(Texture2D, [
                {
                    key: 'update',
                    value: function update(options) {
                        var gl = this._device._gl;
                        var genMipmaps = this._genMipmap;
                        if (options) {
                            if (options.width !== undefined) {
                                this._width = options.width;
                            }
                            if (options.height !== undefined) {
                                this._height = options.height;
                            }
                            if (options.anisotropy !== undefined) {
                                this._anisotropy = options.anisotropy;
                            }
                            if (options.minFilter !== undefined) {
                                this._minFilter = options.minFilter;
                            }
                            if (options.magFilter !== undefined) {
                                this._magFilter = options.magFilter;
                            }
                            if (options.mipFilter !== undefined) {
                                this._mipFilter = options.mipFilter;
                            }
                            if (options.wrapS !== undefined) {
                                this._wrapS = options.wrapS;
                            }
                            if (options.wrapT !== undefined) {
                                this._wrapT = options.wrapT;
                            }
                            if (options.format !== undefined) {
                                this._format = options.format;
                                this._compressed = this._format >= _enums.enums.TEXTURE_FMT_RGB_DXT1 && this._format <= _enums.enums.TEXTURE_FMT_RGBA_PVRTC_4BPPV1 || this._format >= _enums.enums.TEXTURE_FMT_RGB_ETC2 && this._format <= _enums.enums.TEXTURE_FMT_RGBA_ETC2;
                            }
                            if (options.genMipmaps !== undefined) {
                                this._genMipmap = options.genMipmaps;
                                genMipmaps = options.genMipmaps;
                            }
                            var maxSize = this._device.caps.maxTextureSize || Number.MAX_VALUE;
                            var textureMaxSize = Math.max(options.width || 0, options.height || 0);
                            if (maxSize < textureMaxSize)
                                console.warn('The current texture size ' + textureMaxSize + ' exceeds the maximum size [' + maxSize + '] supported on the device.');
                            if (options.images !== undefined) {
                                if (options.images.length > 1) {
                                    genMipmaps = false;
                                    var maxLength = options.width > options.height ? options.width : options.height;
                                    if (maxLength >> options.images.length - 1 !== 1) {
                                        console.error('texture-2d mipmap is invalid, should have a 1x1 mipmap.');
                                    }
                                }
                            }
                        }
                        var pot = (0, _misc.isPow2)(this._width) && (0, _misc.isPow2)(this._height);
                        if (!pot) {
                            genMipmaps = false;
                        }
                        gl.activeTexture(gl.TEXTURE0);
                        gl.bindTexture(gl.TEXTURE_2D, this._glID);
                        if (options.images !== undefined && options.images.length > 0) {
                            this._setMipmap(options.images, options.flipY, options.premultiplyAlpha);
                            if (options.images.length > 1)
                                this._genMipmap = true;
                        }
                        if (genMipmaps) {
                            gl.hint(gl.GENERATE_MIPMAP_HINT, gl.NICEST);
                            gl.generateMipmap(gl.TEXTURE_2D);
                            this._genMipmap = true;
                        }
                        this._setTexInfo();
                        this._device._restoreTexture(0);
                    }
                },
                {
                    key: 'updateSubImage',
                    value: function updateSubImage(options) {
                        var gl = this._device._gl;
                        var glFmt = (0, _enums.glTextureFmt)(this._format);
                        gl.activeTexture(gl.TEXTURE0);
                        gl.bindTexture(gl.TEXTURE_2D, this._glID);
                        this._setSubImage(glFmt, options);
                        this._device._restoreTexture(0);
                    }
                },
                {
                    key: 'updateImage',
                    value: function updateImage(options) {
                        var gl = this._device._gl;
                        var glFmt = (0, _enums.glTextureFmt)(this._format);
                        gl.activeTexture(gl.TEXTURE0);
                        gl.bindTexture(gl.TEXTURE_2D, this._glID);
                        this._setImage(glFmt, options);
                        this._device._restoreTexture(0);
                    }
                },
                {
                    key: '_setSubImage',
                    value: function _setSubImage(glFmt, options) {
                        var gl = this._device._gl;
                        var flipY = options.flipY;
                        var premultiplyAlpha = options.premultiplyAlpha;
                        var img = options.image;
                        if (img && !ArrayBuffer.isView(img) && !(img instanceof ArrayBuffer)) {
                            if (flipY === undefined) {
                                gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
                            } else {
                                gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
                            }
                            if (premultiplyAlpha === undefined) {
                                gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
                            } else {
                                gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultiplyAlpha);
                            }
                            gl.texSubImage2D(gl.TEXTURE_2D, options.level, options.x, options.y, glFmt.format, glFmt.pixelType, img);
                        } else {
                            if (flipY === undefined) {
                                gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
                            } else {
                                gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
                            }
                            if (premultiplyAlpha === undefined) {
                                gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
                            } else {
                                gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultiplyAlpha);
                            }
                            if (this._compressed) {
                                gl.compressedTexSubImage2D(gl.TEXTURE_2D, options.level, options.x, options.y, options.width, options.height, glFmt.format, img);
                            } else {
                                gl.texSubImage2D(gl.TEXTURE_2D, options.level, options.x, options.y, options.width, options.height, glFmt.format, glFmt.pixelType, img);
                            }
                        }
                    }
                },
                {
                    key: '_setImage',
                    value: function _setImage(glFmt, options) {
                        var gl = this._device._gl;
                        var flipY = options.flipY;
                        var premultiplyAlpha = options.premultiplyAlpha;
                        var img = options.image;
                        if (img && !ArrayBuffer.isView(img) && !(img instanceof ArrayBuffer)) {
                            if (flipY === undefined) {
                                gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
                            } else {
                                gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
                            }
                            if (premultiplyAlpha === undefined) {
                                gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
                            } else {
                                gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultiplyAlpha);
                            }
                            gl.texImage2D(gl.TEXTURE_2D, options.level, glFmt.internalFormat, glFmt.format, glFmt.pixelType, img);
                        } else {
                            if (flipY === undefined) {
                                gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
                            } else {
                                gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
                            }
                            if (premultiplyAlpha === undefined) {
                                gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
                            } else {
                                gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultiplyAlpha);
                            }
                            if (this._compressed) {
                                gl.compressedTexImage2D(gl.TEXTURE_2D, options.level, glFmt.internalFormat, options.width, options.height, 0, img);
                            } else {
                                gl.texImage2D(gl.TEXTURE_2D, options.level, glFmt.internalFormat, options.width, options.height, 0, glFmt.format, glFmt.pixelType, img);
                            }
                        }
                    }
                },
                {
                    key: '_setMipmap',
                    value: function _setMipmap(images, flipY, premultiplyAlpha) {
                        var glFmt = (0, _enums.glTextureFmt)(this._format);
                        var options = {
                            width: this._width,
                            height: this._height,
                            flipY: flipY,
                            premultiplyAlpha: premultiplyAlpha,
                            level: 0,
                            image: null
                        };
                        for (var i = 0; i < images.length; ++i) {
                            options.level = i;
                            options.width = this._width >> i;
                            options.height = this._height >> i;
                            options.image = images[i];
                            this._setImage(glFmt, options);
                        }
                    }
                },
                {
                    key: '_setTexInfo',
                    value: function _setTexInfo() {
                        var gl = this._device._gl;
                        var pot = (0, _misc.isPow2)(this._width) && (0, _misc.isPow2)(this._height);
                        if (!pot && (this._wrapS !== _enums.enums.WRAP_CLAMP || this._wrapT !== _enums.enums.WRAP_CLAMP)) {
                            console.warn('WebGL1 doesn\'t support all wrap modes with NPOT textures');
                            this._wrapS = _enums.enums.WRAP_CLAMP;
                            this._wrapT = _enums.enums.WRAP_CLAMP;
                        }
                        var mipFilter = this._genMipmap ? this._mipFilter : -1;
                        if (!pot && mipFilter !== -1) {
                            console.warn('NPOT textures do not support mipmap filter');
                            mipFilter = -1;
                        }
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, (0, _enums.glFilter)(gl, this._minFilter, mipFilter));
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, (0, _enums.glFilter)(gl, this._magFilter, -1));
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this._wrapS);
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this._wrapT);
                        var ext = this._device.ext('EXT_texture_filter_anisotropic');
                        if (ext) {
                            gl.texParameteri(gl.TEXTURE_2D, ext.TEXTURE_MAX_ANISOTROPY_EXT, this._anisotropy);
                        }
                    }
                }
            ]);
            return Texture2D;
        }(_texture2.default);
        exports.default = Texture2D;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRleHR1cmUtMmQuanMiLCIvVXNlcnMvZ2FveWFuZy9Xb3JrU3BhY2Uvam95Y2FzdGxlL2JpbmdvL2NsaWVudC9iaW5nby9lbmdpbmUvY29jb3MyZC9yZW5kZXJlci9nZngvdGV4dHVyZS0yZC5qcyJdLCJuYW1lcyI6WyJBcnJheUJ1ZmZlclZpZXciLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsIlVpbnQ4QXJyYXkiLCJjb25zdHJ1Y3RvciIsIlRleHR1cmUyRCIsImRldmljZSIsIm9wdGlvbnMiLCJnbCIsIl9kZXZpY2UiLCJfZ2wiLCJfdGFyZ2V0IiwiVEVYVFVSRV8yRCIsIl9nbElEIiwiY3JlYXRlVGV4dHVyZSIsImltYWdlcyIsInVwZGF0ZSIsImdlbk1pcG1hcHMiLCJfZ2VuTWlwbWFwIiwid2lkdGgiLCJ1bmRlZmluZWQiLCJfd2lkdGgiLCJoZWlnaHQiLCJfaGVpZ2h0IiwiYW5pc290cm9weSIsIl9hbmlzb3Ryb3B5IiwibWluRmlsdGVyIiwiX21pbkZpbHRlciIsIm1hZ0ZpbHRlciIsIl9tYWdGaWx0ZXIiLCJtaXBGaWx0ZXIiLCJfbWlwRmlsdGVyIiwid3JhcFMiLCJfd3JhcFMiLCJ3cmFwVCIsIl93cmFwVCIsImZvcm1hdCIsIl9mb3JtYXQiLCJfY29tcHJlc3NlZCIsImVudW1zIiwiVEVYVFVSRV9GTVRfUkdCX0RYVDEiLCJURVhUVVJFX0ZNVF9SR0JBX1BWUlRDXzRCUFBWMSIsIlRFWFRVUkVfRk1UX1JHQl9FVEMyIiwiVEVYVFVSRV9GTVRfUkdCQV9FVEMyIiwibWF4U2l6ZSIsImNhcHMiLCJtYXhUZXh0dXJlU2l6ZSIsIk51bWJlciIsIk1BWF9WQUxVRSIsInRleHR1cmVNYXhTaXplIiwiTWF0aCIsIm1heCIsImNvbnNvbGUiLCJ3YXJuIiwibGVuZ3RoIiwibWF4TGVuZ3RoIiwiZXJyb3IiLCJwb3QiLCJhY3RpdmVUZXh0dXJlIiwiVEVYVFVSRTAiLCJiaW5kVGV4dHVyZSIsIl9zZXRNaXBtYXAiLCJmbGlwWSIsInByZW11bHRpcGx5QWxwaGEiLCJoaW50IiwiR0VORVJBVEVfTUlQTUFQX0hJTlQiLCJOSUNFU1QiLCJnZW5lcmF0ZU1pcG1hcCIsIl9zZXRUZXhJbmZvIiwiX3Jlc3RvcmVUZXh0dXJlIiwiZ2xGbXQiLCJfc2V0U3ViSW1hZ2UiLCJfc2V0SW1hZ2UiLCJpbWciLCJpbWFnZSIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwicGl4ZWxTdG9yZWkiLCJVTlBBQ0tfRkxJUF9ZX1dFQkdMIiwiVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMIiwidGV4U3ViSW1hZ2UyRCIsImxldmVsIiwieCIsInkiLCJwaXhlbFR5cGUiLCJjb21wcmVzc2VkVGV4U3ViSW1hZ2UyRCIsInRleEltYWdlMkQiLCJpbnRlcm5hbEZvcm1hdCIsImNvbXByZXNzZWRUZXhJbWFnZTJEIiwiaSIsIldSQVBfQ0xBTVAiLCJ0ZXhQYXJhbWV0ZXJpIiwiVEVYVFVSRV9NSU5fRklMVEVSIiwiVEVYVFVSRV9NQUdfRklMVEVSIiwiVEVYVFVSRV9XUkFQX1MiLCJURVhUVVJFX1dSQVBfVCIsImV4dCIsIlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwiVGV4dHVyZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7UUFDQSxJQUFBLFFBQUEsR0FBQSxPQUFBLENBQUEsV0FBQSxDQUFBOztRQUNBLElBQUEsTUFBQSxHQUFBLE9BQUEsQ0FBQSxTQUFBLENBQUE7UUFDQSxJQUFBLEtBQUEsR0FBQSxPQUFBLENBQUEsUUFBQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7UUFFQSxJQUFNQSxlQUFBQSxHQUFrQkMsTUFBQUEsQ0FBT0MsY0FBUEQsQ0FBc0JBLE1BQUFBLENBQU9DLGNBQVBELENBQXNCLElBQUlFLFVBQUosRUFBdEJGLENBQXRCQSxFQUE2REcsV0FBckY7WUFTcUJDLFNBQUFBOztZQU1uQixTQUFBLFNBQUEsQ0FBWUMsTUFBWixFQUFvQkMsT0FBcEIsRUFBNkI7QUFBQSxnQkFBQSxlQUFBLENB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OEJHLFNBQTlCLENBQXZEdEIsRUFqQlk7QUFBQSx3QkFrQlpBLEVBQUFBLENBQUdtRixhQUFIbkYsQ0FBaUJBLEVBQUFBLENBQUdJLFVBQXBCSixFQUFnQ0EsRUFBQUEsQ0FBR3FGLGtCQUFuQ3JGLEVBQXVELElBQUEsTUFBQSxDQUFBLFFBQUEsQ0FBQSxDQUFTQSxFQUFULEVBQWEsS0FBS3FCLFVBQWxCLEVBQThCLENBQUMsQ0FBL0IsQ0FBdkRyQixFQWxCWTtBQUFBLHdCQW1CWkEsRUFBQUEsQ0FBR21GLGFBQUhuRixDQUFpQkEsRUFBQUEsQ0FBR0ksVUFBcEJKLEVBQWdDQSxFQUFBQSxDQUFHc0YsY0FBbkN0RixFQUFtRCxLQUFLeUIsTUFBeER6QixFQW5CWTtBQUFBLHdCQW9CWkEsRUFBQUEsQ0FBR21GLGFBQUhuRixDQUFpQkEsRUFBQUEsQ0FBR0ksVUFBcEJKLEVBQWdDQSxFQUFBQSxDQUFHdUYsY0FBbkN2RixFQUFtRCxLQUFLMkIsTUFBeEQzQixFQXBCWTtBQUFBLHdCQXNCWixJQUFJd0YsR0FBQUEsR0FBTSxLQUFLdkYsT0FBTCxDQUFhdUYsR0FBYixDQUFpQixnQ0FBakIsQ0FBVixDQXRCWTtBQUFBLHdCQXVCWixJQUFJQSxHQUFKLEVBQVM7QUFBQSw0QkFDUHhGLEVBQUFBLENBQUdtRixhQUFIbkYsQ0FBaUJBLEVBQUFBLENBQUdJLFVBQXBCSixFQUFnQ3dGLEdBQUFBLENBQUlDLDBCQUFwQ3pGLEVBQWdFLEtBQUtpQixXQUFyRWpCLEVBRE87QUFBQSx5QkF2Qkc7QUFBQTs7OztVQWxTdUIwRixTQUFBQSxDQUFBQTswQkFBbEI3Rjs7O0lBWnJCLElBQUEsT0FBQSxFQUFBO0FBQUEsd0RBQUE7QUFBQSxLQUFBIiwiZmlsZSI6InRleHR1cmUtMmQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAdHMtY2hlY2tcbmltcG9ydCBUZXh0dXJlIGZyb20gJy4vdGV4dHVyZSc7XG5pbXBvcnQgeyBlbnVtcywgZ2xGaWx0ZXIsIGdsVGV4dHVyZUZtdCB9IGZyb20gJy4vZW51bXMnO1xuaW1wb3J0IHsgaXNQb3cyIH0gZnJvbSAnLi9taXNjJztcblxuY29uc3QgQXJyYXlCdWZmZXJWaWV3ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKE9iamVjdC5nZXRQcm90b3R5cGVPZihuZXcgVWludDhBcnJheSkpLmNvbnN0cnVjdG9yXG5cbi8qKlxuICogQHR5cGVkZWYge0hUTUxJbWFnZUVsZW1lbnQgfCBIVE1MQ2FudmFzRWxlbWVudH0gSFRNTEltYWdlU291cmNlXG4gKiBAdHlwZWRlZiB7SFRNTEltYWdlU291cmNlIHwgQXJyYXlCdWZmZXJWaWV3fSBJbWFnZVNvdXJjZVxuICogQHR5cGVkZWYge3t3aWR0aD86IG51bWJlciwgaGVpZ2h0PzogbnVtYmVyLCBtaW5GaWx0ZXI/OiBudW1iZXIsIG1hZ0ZpbHRlcj86IG51bWJlciwgbWlwRmlsdGVyPzogbnVtYmVyLCB3cmFwUz86IG51bWJlciwgd3JhcFQ/OiBudW1iZXIsIGZvcm1hdD86IG51bWJlciwgZ2VuTWlwbWFwcz86IGJvb2xlYW4sIGltYWdlcz86IEltYWdlU291cmNlW10sIGltYWdlPzogSW1hZ2VTb3VyY2UsIGZsaXBZPzogYm9vbGVhbiwgcHJlbXVsdGlwbHlBbHBoYT86IGJvb2xlYW4sIGFuaXNvdHJvcHk/OiBudW1iZXJ9fSBUZXh0dXJlVXBkYXRlT3B0c1xuICogQHR5cGVkZWYge2ltcG9ydChcIi4uL2dmeC9kZXZpY2VcIikuZGVmYXVsdH0gRGV2aWNlXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGV4dHVyZTJEIGV4dGVuZHMgVGV4dHVyZSB7XG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtEZXZpY2V9IGRldmljZVxuICAgKiBAcGFyYW0ge1RleHR1cmVVcGRhdGVPcHRzfSBvcHRpb25zXG4gICAqL1xuICBjb25zdHJ1Y3RvcihkZXZpY2UsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihkZXZpY2UpO1xuXG4gICAgbGV0IGdsID0gdGhpcy5fZGV2aWNlLl9nbDtcbiAgICB0aGlzLl90YXJnZXQgPSBnbC5URVhUVVJFXzJEO1xuICAgIHRoaXMuX2dsSUQgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG5cbiAgICAvLyBhbHdheXMgYWxsb2MgdGV4dHVyZSBpbiBHUFUgd2hlbiB3ZSBjcmVhdGUgaXQuXG4gICAgb3B0aW9ucy5pbWFnZXMgPSBvcHRpb25zLmltYWdlcyB8fCBbbnVsbF07XG4gICAgdGhpcy51cGRhdGUob3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCB1cGRhdGVcbiAgICogQHBhcmFtIHtUZXh0dXJlVXBkYXRlT3B0c30gb3B0aW9uc1xuICAgKi9cbiAgdXBkYXRlKG9wdGlvbnMpIHtcbiAgICBsZXQgZ2wgPSB0aGlzLl9kZXZpY2UuX2dsO1xuICAgIGxldCBnZW5NaXBtYXBzID0gdGhpcy5fZ2VuTWlwbWFwO1xuXG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgIGlmIChvcHRpb25zLndpZHRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fd2lkdGggPSBvcHRpb25zLndpZHRoO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuaGVpZ2h0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5faGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQ7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5hbmlzb3Ryb3B5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fYW5pc290cm9weSA9IG9wdGlvbnMuYW5pc290cm9weTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLm1pbkZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX21pbkZpbHRlciA9IG9wdGlvbnMubWluRmlsdGVyO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMubWFnRmlsdGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fbWFnRmlsdGVyID0gb3B0aW9ucy5tYWdGaWx0ZXI7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5taXBGaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9taXBGaWx0ZXIgPSBvcHRpb25zLm1pcEZpbHRlcjtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLndyYXBTICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fd3JhcFMgPSBvcHRpb25zLndyYXBTO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMud3JhcFQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl93cmFwVCA9IG9wdGlvbnMud3JhcFQ7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5mb3JtYXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9mb3JtYXQgPSBvcHRpb25zLmZvcm1hdDtcbiAgICAgICAgdGhpcy5fY29tcHJlc3NlZCA9IFxuICAgICAgICAgICh0aGlzLl9mb3JtYXQgPj0gZW51bXMuVEVYVFVSRV9GTVRfUkdCX0RYVDEgJiYgdGhpcy5fZm9ybWF0IDw9IGVudW1zLlRFWFRVUkVfRk1UX1JHQkFfUFZSVENfNEJQUFYxKSB8fCBcbiAgICAgICAgICAodGhpcy5fZm9ybWF0ID49IGVudW1zLlRFWFRVUkVfRk1UX1JHQl9FVEMyICYmIHRoaXMuX2Zvcm1hdCA8PSBlbnVtcy5URVhUVVJFX0ZNVF9SR0JBX0VUQzIpXG4gICAgICAgIDtcbiAgICAgIH1cblxuICAgICAgLy8gY2hlY2sgaWYgZ2VuZXJhdGUgbWlwbWFwXG4gICAgICBpZiAob3B0aW9ucy5nZW5NaXBtYXBzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fZ2VuTWlwbWFwID0gb3B0aW9ucy5nZW5NaXBtYXBzO1xuICAgICAgICBnZW5NaXBtYXBzID0gb3B0aW9ucy5nZW5NaXBtYXBzO1xuICAgICAgfVxuXG4gICAgICBsZXQgbWF4U2l6ZSA9IHRoaXMuX2RldmljZS5jYXBzLm1heFRleHR1cmVTaXplIHx8IE51bWJlci5NQVhfVkFMVUU7XG4gICAgICBsZXQgdGV4dHVyZU1heFNpemUgPSBNYXRoLm1heChvcHRpb25zLndpZHRoIHx8IDAsIG9wdGlvbnMuaGVpZ2h0IHx8IDApO1xuICAgICAgaWYgKG1heFNpemUgPCB0ZXh0dXJlTWF4U2l6ZSlcbiAgICAgICAgY29uc29sZS53YXJuKGBUaGUgY3VycmVudCB0ZXh0dXJlIHNpemUgJHt0ZXh0dXJlTWF4U2l6ZX0gZXhjZWVkcyB0aGUgbWF4aW11bSBzaXplIFske21heFNpemV9XSBzdXBwb3J0ZWQgb24gdGhlIGRldmljZS5gKTtcblxuICAgICAgaWYgKG9wdGlvbnMuaW1hZ2VzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuaW1hZ2VzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBnZW5NaXBtYXBzID0gZmFsc2U7XG4gICAgICAgICAgbGV0IG1heExlbmd0aCA9IG9wdGlvbnMud2lkdGggPiBvcHRpb25zLmhlaWdodCA/IG9wdGlvbnMud2lkdGggOiBvcHRpb25zLmhlaWdodDtcbiAgICAgICAgICBpZiAobWF4TGVuZ3RoID4+IChvcHRpb25zLmltYWdlcy5sZW5ndGggLSAxKSAhPT0gMSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcigndGV4dHVyZS0yZCBtaXBtYXAgaXMgaW52YWxpZCwgc2hvdWxkIGhhdmUgYSAxeDEgbWlwbWFwLicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE5PVEU6IGdldCBwb3QgYWZ0ZXIgdGhpcy5fd2lkdGgsIHRoaXMuX2hlaWdodCBoYXMgYmVlbiBhc3NpZ25lZC5cbiAgICBsZXQgcG90ID0gaXNQb3cyKHRoaXMuX3dpZHRoKSAmJiBpc1BvdzIodGhpcy5faGVpZ2h0KTtcbiAgICBpZiAoIXBvdCkge1xuICAgICAgZ2VuTWlwbWFwcyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTApO1xuICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRoaXMuX2dsSUQpO1xuICAgIGlmIChvcHRpb25zLmltYWdlcyAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMuaW1hZ2VzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuX3NldE1pcG1hcChvcHRpb25zLmltYWdlcywgb3B0aW9ucy5mbGlwWSwgb3B0aW9ucy5wcmVtdWx0aXBseUFscGhhKTtcbiAgICAgIGlmIChvcHRpb25zLmltYWdlcy5sZW5ndGggPiAxKSB0aGlzLl9nZW5NaXBtYXAgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoZ2VuTWlwbWFwcykge1xuICAgICAgZ2wuaGludChnbC5HRU5FUkFURV9NSVBNQVBfSElOVCwgZ2wuTklDRVNUKTtcbiAgICAgIGdsLmdlbmVyYXRlTWlwbWFwKGdsLlRFWFRVUkVfMkQpO1xuICAgICAgdGhpcy5fZ2VuTWlwbWFwID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB0aGlzLl9zZXRUZXhJbmZvKCk7XG4gICAgdGhpcy5fZGV2aWNlLl9yZXN0b3JlVGV4dHVyZSgwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHVwZGF0ZVN1YkltYWdlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLnhcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMueVxuICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy53aWR0aFxuICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5oZWlnaHRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMubGV2ZWxcbiAgICogQHBhcmFtIHtIVE1MQ2FudmFzRWxlbWVudCB8IEhUTUxJbWFnZUVsZW1lbnQgfCBIVE1MVmlkZW9FbGVtZW50IHwgQXJyYXlCdWZmZXJWaWV3fSBvcHRpb25zLmltYWdlXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy5mbGlwWVxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMucHJlbXVsdGlwbHlBbHBoYVxuICAgKi9cbiAgdXBkYXRlU3ViSW1hZ2Uob3B0aW9ucykge1xuICAgIGxldCBnbCA9IHRoaXMuX2RldmljZS5fZ2w7XG4gICAgbGV0IGdsRm10ID0gZ2xUZXh0dXJlRm10KHRoaXMuX2Zvcm1hdCk7XG5cbiAgICBnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUwKTtcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0aGlzLl9nbElEKTtcbiAgICB0aGlzLl9zZXRTdWJJbWFnZShnbEZtdCwgb3B0aW9ucyk7XG4gICAgdGhpcy5fZGV2aWNlLl9yZXN0b3JlVGV4dHVyZSgwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHVwZGF0ZUltYWdlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLndpZHRoXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLmhlaWdodFxuICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5sZXZlbFxuICAgKiBAcGFyYW0ge0hUTUxDYW52YXNFbGVtZW50IHwgSFRNTEltYWdlRWxlbWVudCB8IEhUTUxWaWRlb0VsZW1lbnQgfCBBcnJheUJ1ZmZlclZpZXd9IG9wdGlvbnMuaW1hZ2VcbiAgICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLmZsaXBZXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy5wcmVtdWx0aXBseUFscGhhXG4gICAqL1xuICB1cGRhdGVJbWFnZShvcHRpb25zKSB7XG4gICAgbGV0IGdsID0gdGhpcy5fZGV2aWNlLl9nbDtcbiAgICBsZXQgZ2xGbXQgPSBnbFRleHR1cmVGbXQodGhpcy5fZm9ybWF0KTtcblxuICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTApO1xuICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRoaXMuX2dsSUQpO1xuICAgIHRoaXMuX3NldEltYWdlKGdsRm10LCBvcHRpb25zKTtcbiAgICB0aGlzLl9kZXZpY2UuX3Jlc3RvcmVUZXh0dXJlKDApO1xuICB9XG5cbiAgX3NldFN1YkltYWdlKGdsRm10LCBvcHRpb25zKSB7XG4gICAgbGV0IGdsID0gdGhpcy5fZGV2aWNlLl9nbDtcbiAgICBsZXQgZmxpcFkgPSBvcHRpb25zLmZsaXBZO1xuICAgIGxldCBwcmVtdWx0aXBseUFscGhhID0gb3B0aW9ucy5wcmVtdWx0aXBseUFscGhhO1xuICAgIGxldCBpbWcgPSBvcHRpb25zLmltYWdlO1xuXG4gICAgaWYgKGltZyAmJiAhQXJyYXlCdWZmZXIuaXNWaWV3KGltZykgJiYgIShpbWcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICAgIGlmIChmbGlwWSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19GTElQX1lfV0VCR0wsIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgZmxpcFkpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJlbXVsdGlwbHlBbHBoYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgZmFsc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMLCBwcmVtdWx0aXBseUFscGhhKTtcbiAgICAgIH1cblxuICAgICAgZ2wudGV4U3ViSW1hZ2UyRChnbC5URVhUVVJFXzJELCBvcHRpb25zLmxldmVsLCBvcHRpb25zLngsIG9wdGlvbnMueSwgZ2xGbXQuZm9ybWF0LCBnbEZtdC5waXhlbFR5cGUsIGltZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChmbGlwWSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19GTElQX1lfV0VCR0wsIGZhbHNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19GTElQX1lfV0VCR0wsIGZsaXBZKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByZW11bHRpcGx5QWxwaGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsIGZhbHNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgcHJlbXVsdGlwbHlBbHBoYSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9jb21wcmVzc2VkKSB7XG4gICAgICAgIGdsLmNvbXByZXNzZWRUZXhTdWJJbWFnZTJEKGdsLlRFWFRVUkVfMkQsXG4gICAgICAgICAgb3B0aW9ucy5sZXZlbCxcbiAgICAgICAgICBvcHRpb25zLngsXG4gICAgICAgICAgb3B0aW9ucy55LFxuICAgICAgICAgIG9wdGlvbnMud2lkdGgsXG4gICAgICAgICAgb3B0aW9ucy5oZWlnaHQsXG4gICAgICAgICAgZ2xGbXQuZm9ybWF0LFxuICAgICAgICAgIGltZ1xuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2wudGV4U3ViSW1hZ2UyRChcbiAgICAgICAgICBnbC5URVhUVVJFXzJELFxuICAgICAgICAgIG9wdGlvbnMubGV2ZWwsXG4gICAgICAgICAgb3B0aW9ucy54LFxuICAgICAgICAgIG9wdGlvbnMueSxcbiAgICAgICAgICBvcHRpb25zLndpZHRoLFxuICAgICAgICAgIG9wdGlvbnMuaGVpZ2h0LFxuICAgICAgICAgIGdsRm10LmZvcm1hdCxcbiAgICAgICAgICBnbEZtdC5waXhlbFR5cGUsXG4gICAgICAgICAgaW1nXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX3NldEltYWdlKGdsRm10LCBvcHRpb25zKSB7XG4gICAgbGV0IGdsID0gdGhpcy5fZGV2aWNlLl9nbDtcbiAgICBsZXQgZmxpcFkgPSBvcHRpb25zLmZsaXBZO1xuICAgIGxldCBwcmVtdWx0aXBseUFscGhhID0gb3B0aW9ucy5wcmVtdWx0aXBseUFscGhhO1xuICAgIGxldCBpbWcgPSBvcHRpb25zLmltYWdlO1xuXG4gICAgaWYgKGltZyAmJiAhQXJyYXlCdWZmZXIuaXNWaWV3KGltZykgJiYgIShpbWcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICAgIGlmIChmbGlwWSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19GTElQX1lfV0VCR0wsIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgZmxpcFkpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJlbXVsdGlwbHlBbHBoYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgZmFsc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMLCBwcmVtdWx0aXBseUFscGhhKTtcbiAgICAgIH1cblxuICAgICAgZ2wudGV4SW1hZ2UyRChcbiAgICAgICAgZ2wuVEVYVFVSRV8yRCxcbiAgICAgICAgb3B0aW9ucy5sZXZlbCxcbiAgICAgICAgZ2xGbXQuaW50ZXJuYWxGb3JtYXQsXG4gICAgICAgIGdsRm10LmZvcm1hdCxcbiAgICAgICAgZ2xGbXQucGl4ZWxUeXBlLFxuICAgICAgICBpbWdcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChmbGlwWSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19GTElQX1lfV0VCR0wsIGZhbHNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19GTElQX1lfV0VCR0wsIGZsaXBZKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByZW11bHRpcGx5QWxwaGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsIGZhbHNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgcHJlbXVsdGlwbHlBbHBoYSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9jb21wcmVzc2VkKSB7XG4gICAgICAgIGdsLmNvbXByZXNzZWRUZXhJbWFnZTJEKFxuICAgICAgICAgIGdsLlRFWFRVUkVfMkQsXG4gICAgICAgICAgb3B0aW9ucy5sZXZlbCxcbiAgICAgICAgICBnbEZtdC5pbnRlcm5hbEZvcm1hdCxcbiAgICAgICAgICBvcHRpb25zLndpZHRoLFxuICAgICAgICAgIG9wdGlvbnMuaGVpZ2h0LFxuICAgICAgICAgIDAsXG4gICAgICAgICAgaW1nXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnbC50ZXhJbWFnZTJEKFxuICAgICAgICAgIGdsLlRFWFRVUkVfMkQsXG4gICAgICAgICAgb3B0aW9ucy5sZXZlbCxcbiAgICAgICAgICBnbEZtdC5pbnRlcm5hbEZvcm1hdCxcbiAgICAgICAgICBvcHRpb25zLndpZHRoLFxuICAgICAgICAgIG9wdGlvbnMuaGVpZ2h0LFxuICAgICAgICAgIDAsXG4gICAgICAgICAgZ2xGbXQuZm9ybWF0LFxuICAgICAgICAgIGdsRm10LnBpeGVsVHlwZSxcbiAgICAgICAgICBpbWdcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfc2V0TWlwbWFwKGltYWdlcywgZmxpcFksIHByZW11bHRpcGx5QWxwaGEpIHtcbiAgICBsZXQgZ2xGbXQgPSBnbFRleHR1cmVGbXQodGhpcy5fZm9ybWF0KTtcbiAgICBsZXQgb3B0aW9ucyA9IHtcbiAgICAgIHdpZHRoOiB0aGlzLl93aWR0aCxcbiAgICAgIGhlaWdodDogdGhpcy5faGVpZ2h0LFxuICAgICAgZmxpcFk6IGZsaXBZLFxuICAgICAgcHJlbXVsdGlwbHlBbHBoYTogcHJlbXVsdGlwbHlBbHBoYSxcbiAgICAgIGxldmVsOiAwLFxuICAgICAgaW1hZ2U6IG51bGxcbiAgICB9O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbWFnZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIG9wdGlvbnMubGV2ZWwgPSBpO1xuICAgICAgb3B0aW9ucy53aWR0aCA9IHRoaXMuX3dpZHRoID4+IGk7XG4gICAgICBvcHRpb25zLmhlaWdodCA9IHRoaXMuX2hlaWdodCA+PiBpO1xuICAgICAgb3B0aW9ucy5pbWFnZSA9IGltYWdlc1tpXTtcbiAgICAgIHRoaXMuX3NldEltYWdlKGdsRm10LCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBfc2V0VGV4SW5mbygpIHtcbiAgICBsZXQgZ2wgPSB0aGlzLl9kZXZpY2UuX2dsO1xuICAgIGxldCBwb3QgPSBpc1BvdzIodGhpcy5fd2lkdGgpICYmIGlzUG93Mih0aGlzLl9oZWlnaHQpO1xuXG4gICAgLy8gV2ViR0wxIGRvZXNuJ3Qgc3VwcG9ydCBhbGwgd3JhcCBtb2RlcyB3aXRoIE5QT1QgdGV4dHVyZXNcbiAgICBpZiAoIXBvdCAmJiAodGhpcy5fd3JhcFMgIT09IGVudW1zLldSQVBfQ0xBTVAgfHwgdGhpcy5fd3JhcFQgIT09IGVudW1zLldSQVBfQ0xBTVApKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1dlYkdMMSBkb2VzblxcJ3Qgc3VwcG9ydCBhbGwgd3JhcCBtb2RlcyB3aXRoIE5QT1QgdGV4dHVyZXMnKTtcbiAgICAgIHRoaXMuX3dyYXBTID0gZW51bXMuV1JBUF9DTEFNUDtcbiAgICAgIHRoaXMuX3dyYXBUID0gZW51bXMuV1JBUF9DTEFNUDtcbiAgICB9XG5cbiAgICBsZXQgbWlwRmlsdGVyID0gdGhpcy5fZ2VuTWlwbWFwID8gdGhpcy5fbWlwRmlsdGVyIDogLTE7XG4gICAgaWYgKCFwb3QgJiYgbWlwRmlsdGVyICE9PSAtMSkge1xuICAgICAgY29uc29sZS53YXJuKCdOUE9UIHRleHR1cmVzIGRvIG5vdCBzdXBwb3J0IG1pcG1hcCBmaWx0ZXInKTtcbiAgICAgIG1pcEZpbHRlciA9IC0xO1xuICAgIH1cblxuICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbEZpbHRlcihnbCwgdGhpcy5fbWluRmlsdGVyLCBtaXBGaWx0ZXIpKTtcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2xGaWx0ZXIoZ2wsIHRoaXMuX21hZ0ZpbHRlciwgLTEpKTtcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCB0aGlzLl93cmFwUyk7XG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgdGhpcy5fd3JhcFQpO1xuXG4gICAgbGV0IGV4dCA9IHRoaXMuX2RldmljZS5leHQoJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycpO1xuICAgIGlmIChleHQpIHtcbiAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZXh0LlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhULCB0aGlzLl9hbmlzb3Ryb3B5KTtcbiAgICB9XG4gIH1cbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfdGV4dHVyZSA9IHJlcXVpcmUoJy4vdGV4dHVyZScpO1xuXG52YXIgX3RleHR1cmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdGV4dHVyZSk7XG5cbnZhciBfZW51bXMgPSByZXF1aXJlKCcuL2VudW1zJyk7XG5cbnZhciBfbWlzYyA9IHJlcXVpcmUoJy4vbWlzYycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9IC8vIEB0cy1jaGVja1xuXG5cbnZhciBBcnJheUJ1ZmZlclZpZXcgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBVaW50OEFycmF5KCkpKS5jb25zdHJ1Y3RvcjtcblxuLyoqXG4gKiBAdHlwZWRlZiB7SFRNTEltYWdlRWxlbWVudCB8IEhUTUxDYW52YXNFbGVtZW50fSBIVE1MSW1hZ2VTb3VyY2VcbiAqIEB0eXBlZGVmIHtIVE1MSW1hZ2VTb3VyY2UgfCBBcnJheUJ1ZmZlclZpZXd9IEltYWdlU291cmNlXG4gKiBAdHlwZWRlZiB7e3dpZHRoPzogbnVtYmVyLCBoZWlnaHQ/OiBudW1iZXIsIG1pbkZpbHRlcj86IG51bWJlciwgbWFnRmlsdGVyPzogbnVtYmVyLCBtaXBGaWx0ZXI/OiBudW1iZXIsIHdyYXBTPzogbnVtYmVyLCB3cmFwVD86IG51bWJlciwgZm9ybWF0PzogbnVtYmVyLCBnZW5NaXBtYXBzPzogYm9vbGVhbiwgaW1hZ2VzPzogSW1hZ2VTb3VyY2VbXSwgaW1hZ2U/OiBJbWFnZVNvdXJjZSwgZmxpcFk/OiBib29sZWFuLCBwcmVtdWx0aXBseUFscGhhPzogYm9vbGVhbiwgYW5pc290cm9weT86IG51bWJlcn19IFRleHR1cmVVcGRhdGVPcHRzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KFwiLi4vZ2Z4L2RldmljZVwiKS5kZWZhdWx0fSBEZXZpY2VcbiAqL1xuXG52YXIgVGV4dHVyZTJEID0gZnVuY3Rpb24gKF9UZXh0dXJlKSB7XG4gIF9pbmhlcml0cyhUZXh0dXJlMkQsIF9UZXh0dXJlKTtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7RGV2aWNlfSBkZXZpY2VcbiAgICogQHBhcmFtIHtUZXh0dXJlVXBkYXRlT3B0c30gb3B0aW9uc1xuICAgKi9cbiAgZnVuY3Rpb24gVGV4dHVyZTJEKGRldmljZSwgb3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUZXh0dXJlMkQpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFRleHR1cmUyRC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRleHR1cmUyRCkpLmNhbGwodGhpcywgZGV2aWNlKSk7XG5cbiAgICB2YXIgZ2wgPSBfdGhpcy5fZGV2aWNlLl9nbDtcbiAgICBfdGhpcy5fdGFyZ2V0ID0gZ2wuVEVYVFVSRV8yRDtcbiAgICBfdGhpcy5fZ2xJRCA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcblxuICAgIC8vIGFsd2F5cyBhbGxvYyB0ZXh0dXJlIGluIEdQVSB3aGVuIHdlIGNyZWF0ZSBpdC5cbiAgICBvcHRpb25zLmltYWdlcyA9IG9wdGlvbnMuaW1hZ2VzIHx8IFtudWxsXTtcbiAgICBfdGhpcy51cGRhdGUob3B0aW9ucyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgdXBkYXRlXG4gICAqIEBwYXJhbSB7VGV4dHVyZVVwZGF0ZU9wdHN9IG9wdGlvbnNcbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoVGV4dHVyZTJELCBbe1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZShvcHRpb25zKSB7XG4gICAgICB2YXIgZ2wgPSB0aGlzLl9kZXZpY2UuX2dsO1xuICAgICAgdmFyIGdlbk1pcG1hcHMgPSB0aGlzLl9nZW5NaXBtYXA7XG5cbiAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zLndpZHRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLl93aWR0aCA9IG9wdGlvbnMud2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuaGVpZ2h0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLl9oZWlnaHQgPSBvcHRpb25zLmhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5hbmlzb3Ryb3B5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLl9hbmlzb3Ryb3B5ID0gb3B0aW9ucy5hbmlzb3Ryb3B5O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLm1pbkZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhpcy5fbWluRmlsdGVyID0gb3B0aW9ucy5taW5GaWx0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMubWFnRmlsdGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLl9tYWdGaWx0ZXIgPSBvcHRpb25zLm1hZ0ZpbHRlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5taXBGaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMuX21pcEZpbHRlciA9IG9wdGlvbnMubWlwRmlsdGVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLndyYXBTICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLl93cmFwUyA9IG9wdGlvbnMud3JhcFM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMud3JhcFQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMuX3dyYXBUID0gb3B0aW9ucy53cmFwVDtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5mb3JtYXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMuX2Zvcm1hdCA9IG9wdGlvbnMuZm9ybWF0O1xuICAgICAgICAgIHRoaXMuX2NvbXByZXNzZWQgPSB0aGlzLl9mb3JtYXQgPj0gX2VudW1zLmVudW1zLlRFWFRVUkVfRk1UX1JHQl9EWFQxICYmIHRoaXMuX2Zvcm1hdCA8PSBfZW51bXMuZW51bXMuVEVYVFVSRV9GTVRfUkdCQV9QVlJUQ180QlBQVjEgfHwgdGhpcy5fZm9ybWF0ID49IF9lbnVtcy5lbnVtcy5URVhUVVJFX0ZNVF9SR0JfRVRDMiAmJiB0aGlzLl9mb3JtYXQgPD0gX2VudW1zLmVudW1zLlRFWFRVUkVfRk1UX1JHQkFfRVRDMjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNoZWNrIGlmIGdlbmVyYXRlIG1pcG1hcFxuICAgICAgICBpZiAob3B0aW9ucy5nZW5NaXBtYXBzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLl9nZW5NaXBtYXAgPSBvcHRpb25zLmdlbk1pcG1hcHM7XG4gICAgICAgICAgZ2VuTWlwbWFwcyA9IG9wdGlvbnMuZ2VuTWlwbWFwcztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtYXhTaXplID0gdGhpcy5fZGV2aWNlLmNhcHMubWF4VGV4dHVyZVNpemUgfHwgTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgICAgdmFyIHRleHR1cmVNYXhTaXplID0gTWF0aC5tYXgob3B0aW9ucy53aWR0aCB8fCAwLCBvcHRpb25zLmhlaWdodCB8fCAwKTtcbiAgICAgICAgaWYgKG1heFNpemUgPCB0ZXh0dXJlTWF4U2l6ZSkgY29uc29sZS53YXJuKCdUaGUgY3VycmVudCB0ZXh0dXJlIHNpemUgJyArIHRleHR1cmVNYXhTaXplICsgJyBleGNlZWRzIHRoZSBtYXhpbXVtIHNpemUgWycgKyBtYXhTaXplICsgJ10gc3VwcG9ydGVkIG9uIHRoZSBkZXZpY2UuJyk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuaW1hZ2VzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAob3B0aW9ucy5pbWFnZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgZ2VuTWlwbWFwcyA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIG1heExlbmd0aCA9IG9wdGlvbnMud2lkdGggPiBvcHRpb25zLmhlaWdodCA/IG9wdGlvbnMud2lkdGggOiBvcHRpb25zLmhlaWdodDtcbiAgICAgICAgICAgIGlmIChtYXhMZW5ndGggPj4gb3B0aW9ucy5pbWFnZXMubGVuZ3RoIC0gMSAhPT0gMSkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCd0ZXh0dXJlLTJkIG1pcG1hcCBpcyBpbnZhbGlkLCBzaG91bGQgaGF2ZSBhIDF4MSBtaXBtYXAuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE5PVEU6IGdldCBwb3QgYWZ0ZXIgdGhpcy5fd2lkdGgsIHRoaXMuX2hlaWdodCBoYXMgYmVlbiBhc3NpZ25lZC5cbiAgICAgIHZhciBwb3QgPSAoMCwgX21pc2MuaXNQb3cyKSh0aGlzLl93aWR0aCkgJiYgKDAsIF9taXNjLmlzUG93MikodGhpcy5faGVpZ2h0KTtcbiAgICAgIGlmICghcG90KSB7XG4gICAgICAgIGdlbk1pcG1hcHMgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgZ2wuYWN0aXZlVGV4dHVyZShnbC5URVhUVVJFMCk7XG4gICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0aGlzLl9nbElEKTtcbiAgICAgIGlmIChvcHRpb25zLmltYWdlcyAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMuaW1hZ2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5fc2V0TWlwbWFwKG9wdGlvbnMuaW1hZ2VzLCBvcHRpb25zLmZsaXBZLCBvcHRpb25zLnByZW11bHRpcGx5QWxwaGEpO1xuICAgICAgICBpZiAob3B0aW9ucy5pbWFnZXMubGVuZ3RoID4gMSkgdGhpcy5fZ2VuTWlwbWFwID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChnZW5NaXBtYXBzKSB7XG4gICAgICAgIGdsLmhpbnQoZ2wuR0VORVJBVEVfTUlQTUFQX0hJTlQsIGdsLk5JQ0VTVCk7XG4gICAgICAgIGdsLmdlbmVyYXRlTWlwbWFwKGdsLlRFWFRVUkVfMkQpO1xuICAgICAgICB0aGlzLl9nZW5NaXBtYXAgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9zZXRUZXhJbmZvKCk7XG4gICAgICB0aGlzLl9kZXZpY2UuX3Jlc3RvcmVUZXh0dXJlKDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBtZXRob2QgdXBkYXRlU3ViSW1hZ2VcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLnhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy55XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMud2lkdGhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5oZWlnaHRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5sZXZlbFxuICAgICAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnQgfCBIVE1MSW1hZ2VFbGVtZW50IHwgSFRNTFZpZGVvRWxlbWVudCB8IEFycmF5QnVmZmVyVmlld30gb3B0aW9ucy5pbWFnZVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy5mbGlwWVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy5wcmVtdWx0aXBseUFscGhhXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZVN1YkltYWdlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlU3ViSW1hZ2Uob3B0aW9ucykge1xuICAgICAgdmFyIGdsID0gdGhpcy5fZGV2aWNlLl9nbDtcbiAgICAgIHZhciBnbEZtdCA9ICgwLCBfZW51bXMuZ2xUZXh0dXJlRm10KSh0aGlzLl9mb3JtYXQpO1xuXG4gICAgICBnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUwKTtcbiAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRoaXMuX2dsSUQpO1xuICAgICAgdGhpcy5fc2V0U3ViSW1hZ2UoZ2xGbXQsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5fZGV2aWNlLl9yZXN0b3JlVGV4dHVyZSgwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIHVwZGF0ZUltYWdlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy53aWR0aFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLmhlaWdodFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLmxldmVsXG4gICAgICogQHBhcmFtIHtIVE1MQ2FudmFzRWxlbWVudCB8IEhUTUxJbWFnZUVsZW1lbnQgfCBIVE1MVmlkZW9FbGVtZW50IHwgQXJyYXlCdWZmZXJWaWV3fSBvcHRpb25zLmltYWdlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLmZsaXBZXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLnByZW11bHRpcGx5QWxwaGFcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndXBkYXRlSW1hZ2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVJbWFnZShvcHRpb25zKSB7XG4gICAgICB2YXIgZ2wgPSB0aGlzLl9kZXZpY2UuX2dsO1xuICAgICAgdmFyIGdsRm10ID0gKDAsIF9lbnVtcy5nbFRleHR1cmVGbXQpKHRoaXMuX2Zvcm1hdCk7XG5cbiAgICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTApO1xuICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGhpcy5fZ2xJRCk7XG4gICAgICB0aGlzLl9zZXRJbWFnZShnbEZtdCwgb3B0aW9ucyk7XG4gICAgICB0aGlzLl9kZXZpY2UuX3Jlc3RvcmVUZXh0dXJlKDApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19zZXRTdWJJbWFnZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRTdWJJbWFnZShnbEZtdCwgb3B0aW9ucykge1xuICAgICAgdmFyIGdsID0gdGhpcy5fZGV2aWNlLl9nbDtcbiAgICAgIHZhciBmbGlwWSA9IG9wdGlvbnMuZmxpcFk7XG4gICAgICB2YXIgcHJlbXVsdGlwbHlBbHBoYSA9IG9wdGlvbnMucHJlbXVsdGlwbHlBbHBoYTtcbiAgICAgIHZhciBpbWcgPSBvcHRpb25zLmltYWdlO1xuXG4gICAgICBpZiAoaW1nICYmICFBcnJheUJ1ZmZlci5pc1ZpZXcoaW1nKSAmJiAhKGltZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkge1xuICAgICAgICBpZiAoZmxpcFkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19GTElQX1lfV0VCR0wsIHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19GTElQX1lfV0VCR0wsIGZsaXBZKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcmVtdWx0aXBseUFscGhhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsIHByZW11bHRpcGx5QWxwaGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2wudGV4U3ViSW1hZ2UyRChnbC5URVhUVVJFXzJELCBvcHRpb25zLmxldmVsLCBvcHRpb25zLngsIG9wdGlvbnMueSwgZ2xGbXQuZm9ybWF0LCBnbEZtdC5waXhlbFR5cGUsIGltZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZmxpcFkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19GTElQX1lfV0VCR0wsIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCBmbGlwWSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJlbXVsdGlwbHlBbHBoYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZ2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMLCBwcmVtdWx0aXBseUFscGhhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9jb21wcmVzc2VkKSB7XG4gICAgICAgICAgZ2wuY29tcHJlc3NlZFRleFN1YkltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgb3B0aW9ucy5sZXZlbCwgb3B0aW9ucy54LCBvcHRpb25zLnksIG9wdGlvbnMud2lkdGgsIG9wdGlvbnMuaGVpZ2h0LCBnbEZtdC5mb3JtYXQsIGltZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ2wudGV4U3ViSW1hZ2UyRChnbC5URVhUVVJFXzJELCBvcHRpb25zLmxldmVsLCBvcHRpb25zLngsIG9wdGlvbnMueSwgb3B0aW9ucy53aWR0aCwgb3B0aW9ucy5oZWlnaHQsIGdsRm10LmZvcm1hdCwgZ2xGbXQucGl4ZWxUeXBlLCBpbWcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX3NldEltYWdlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldEltYWdlKGdsRm10LCBvcHRpb25zKSB7XG4gICAgICB2YXIgZ2wgPSB0aGlzLl9kZXZpY2UuX2dsO1xuICAgICAgdmFyIGZsaXBZID0gb3B0aW9ucy5mbGlwWTtcbiAgICAgIHZhciBwcmVtdWx0aXBseUFscGhhID0gb3B0aW9ucy5wcmVtdWx0aXBseUFscGhhO1xuICAgICAgdmFyIGltZyA9IG9wdGlvbnMuaW1hZ2U7XG5cbiAgICAgIGlmIChpbWcgJiYgIUFycmF5QnVmZmVyLmlzVmlldyhpbWcpICYmICEoaW1nIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSB7XG4gICAgICAgIGlmIChmbGlwWSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZ2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgZmxpcFkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByZW11bHRpcGx5QWxwaGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgcHJlbXVsdGlwbHlBbHBoYSk7XG4gICAgICAgIH1cblxuICAgICAgICBnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIG9wdGlvbnMubGV2ZWwsIGdsRm10LmludGVybmFsRm9ybWF0LCBnbEZtdC5mb3JtYXQsIGdsRm10LnBpeGVsVHlwZSwgaW1nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmbGlwWSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZ2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19GTElQX1lfV0VCR0wsIGZsaXBZKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcmVtdWx0aXBseUFscGhhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsIHByZW11bHRpcGx5QWxwaGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbXByZXNzZWQpIHtcbiAgICAgICAgICBnbC5jb21wcmVzc2VkVGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCBvcHRpb25zLmxldmVsLCBnbEZtdC5pbnRlcm5hbEZvcm1hdCwgb3B0aW9ucy53aWR0aCwgb3B0aW9ucy5oZWlnaHQsIDAsIGltZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCBvcHRpb25zLmxldmVsLCBnbEZtdC5pbnRlcm5hbEZvcm1hdCwgb3B0aW9ucy53aWR0aCwgb3B0aW9ucy5oZWlnaHQsIDAsIGdsRm10LmZvcm1hdCwgZ2xGbXQucGl4ZWxUeXBlLCBpbWcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX3NldE1pcG1hcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRNaXBtYXAoaW1hZ2VzLCBmbGlwWSwgcHJlbXVsdGlwbHlBbHBoYSkge1xuICAgICAgdmFyIGdsRm10ID0gKDAsIF9lbnVtcy5nbFRleHR1cmVGbXQpKHRoaXMuX2Zvcm1hdCk7XG4gICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgd2lkdGg6IHRoaXMuX3dpZHRoLFxuICAgICAgICBoZWlnaHQ6IHRoaXMuX2hlaWdodCxcbiAgICAgICAgZmxpcFk6IGZsaXBZLFxuICAgICAgICBwcmVtdWx0aXBseUFscGhhOiBwcmVtdWx0aXBseUFscGhhLFxuICAgICAgICBsZXZlbDogMCxcbiAgICAgICAgaW1hZ2U6IG51bGxcbiAgICAgIH07XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW1hZ2VzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIG9wdGlvbnMubGV2ZWwgPSBpO1xuICAgICAgICBvcHRpb25zLndpZHRoID0gdGhpcy5fd2lkdGggPj4gaTtcbiAgICAgICAgb3B0aW9ucy5oZWlnaHQgPSB0aGlzLl9oZWlnaHQgPj4gaTtcbiAgICAgICAgb3B0aW9ucy5pbWFnZSA9IGltYWdlc1tpXTtcbiAgICAgICAgdGhpcy5fc2V0SW1hZ2UoZ2xGbXQsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19zZXRUZXhJbmZvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldFRleEluZm8oKSB7XG4gICAgICB2YXIgZ2wgPSB0aGlzLl9kZXZpY2UuX2dsO1xuICAgICAgdmFyIHBvdCA9ICgwLCBfbWlzYy5pc1BvdzIpKHRoaXMuX3dpZHRoKSAmJiAoMCwgX21pc2MuaXNQb3cyKSh0aGlzLl9oZWlnaHQpO1xuXG4gICAgICAvLyBXZWJHTDEgZG9lc24ndCBzdXBwb3J0IGFsbCB3cmFwIG1vZGVzIHdpdGggTlBPVCB0ZXh0dXJlc1xuICAgICAgaWYgKCFwb3QgJiYgKHRoaXMuX3dyYXBTICE9PSBfZW51bXMuZW51bXMuV1JBUF9DTEFNUCB8fCB0aGlzLl93cmFwVCAhPT0gX2VudW1zLmVudW1zLldSQVBfQ0xBTVApKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignV2ViR0wxIGRvZXNuXFwndCBzdXBwb3J0IGFsbCB3cmFwIG1vZGVzIHdpdGggTlBPVCB0ZXh0dXJlcycpO1xuICAgICAgICB0aGlzLl93cmFwUyA9IF9lbnVtcy5lbnVtcy5XUkFQX0NMQU1QO1xuICAgICAgICB0aGlzLl93cmFwVCA9IF9lbnVtcy5lbnVtcy5XUkFQX0NMQU1QO1xuICAgICAgfVxuXG4gICAgICB2YXIgbWlwRmlsdGVyID0gdGhpcy5fZ2VuTWlwbWFwID8gdGhpcy5fbWlwRmlsdGVyIDogLTE7XG4gICAgICBpZiAoIXBvdCAmJiBtaXBGaWx0ZXIgIT09IC0xKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignTlBPVCB0ZXh0dXJlcyBkbyBub3Qgc3VwcG9ydCBtaXBtYXAgZmlsdGVyJyk7XG4gICAgICAgIG1pcEZpbHRlciA9IC0xO1xuICAgICAgfVxuXG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgKDAsIF9lbnVtcy5nbEZpbHRlcikoZ2wsIHRoaXMuX21pbkZpbHRlciwgbWlwRmlsdGVyKSk7XG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgKDAsIF9lbnVtcy5nbEZpbHRlcikoZ2wsIHRoaXMuX21hZ0ZpbHRlciwgLTEpKTtcbiAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1MsIHRoaXMuX3dyYXBTKTtcbiAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIHRoaXMuX3dyYXBUKTtcblxuICAgICAgdmFyIGV4dCA9IHRoaXMuX2RldmljZS5leHQoJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycpO1xuICAgICAgaWYgKGV4dCkge1xuICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGV4dC5URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCwgdGhpcy5fYW5pc290cm9weSk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRleHR1cmUyRDtcbn0oX3RleHR1cmUyLmRlZmF1bHQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBUZXh0dXJlMkQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluUmxlSFIxY21VdE1tUXVhbk1pWFN3aWJtRnRaWE1pT2xzaVFYSnlZWGxDZFdabVpYSldhV1YzSWl3aVQySnFaV04wSWl3aVoyVjBVSEp2ZEc5MGVYQmxUMllpTENKVmFXNTBPRUZ5Y21GNUlpd2lZMjl1YzNSeWRXTjBiM0lpTENKVVpYaDBkWEpsTWtRaUxDSmtaWFpwWTJVaUxDSnZjSFJwYjI1eklpd2laMndpTENKZlpHVjJhV05sSWl3aVgyZHNJaXdpWDNSaGNtZGxkQ0lzSWxSRldGUlZVa1ZmTWtRaUxDSmZaMnhKUkNJc0ltTnlaV0YwWlZSbGVIUjFjbVVpTENKcGJXRm5aWE1pTENKMWNHUmhkR1VpTENKblpXNU5hWEJ0WVhCeklpd2lYMmRsYmsxcGNHMWhjQ0lzSW5kcFpIUm9JaXdpZFc1a1pXWnBibVZrSWl3aVgzZHBaSFJvSWl3aWFHVnBaMmgwSWl3aVgyaGxhV2RvZENJc0ltRnVhWE52ZEhKdmNIa2lMQ0pmWVc1cGMyOTBjbTl3ZVNJc0ltMXBia1pwYkhSbGNpSXNJbDl0YVc1R2FXeDBaWElpTENKdFlXZEdhV3gwWlhJaUxDSmZiV0ZuUm1sc2RHVnlJaXdpYldsd1JtbHNkR1Z5SWl3aVgyMXBjRVpwYkhSbGNpSXNJbmR5WVhCVElpd2lYM2R5WVhCVElpd2lkM0poY0ZRaUxDSmZkM0poY0ZRaUxDSm1iM0p0WVhRaUxDSmZabTl5YldGMElpd2lYMk52YlhCeVpYTnpaV1FpTENKbGJuVnRjeUlzSWxSRldGUlZVa1ZmUmsxVVgxSkhRbDlFV0ZReElpd2lWRVZZVkZWU1JWOUdUVlJmVWtkQ1FWOVFWbEpVUTE4MFFsQlFWakVpTENKVVJWaFVWVkpGWDBaTlZGOVNSMEpmUlZSRE1pSXNJbFJGV0ZSVlVrVmZSazFVWDFKSFFrRmZSVlJETWlJc0ltMWhlRk5wZW1VaUxDSmpZWEJ6SWl3aWJXRjRWR1Y0ZEhWeVpWTnBlbVVpTENKT2RXMWlaWElpTENKTlFWaGZWa0ZNVlVVaUxDSjBaWGgwZFhKbFRXRjRVMmw2WlNJc0lrMWhkR2dpTENKdFlYZ2lMQ0pqYjI1emIyeGxJaXdpZDJGeWJpSXNJbXhsYm1kMGFDSXNJbTFoZUV4bGJtZDBhQ0lzSW1WeWNtOXlJaXdpY0c5MElpd2lZV04wYVhabFZHVjRkSFZ5WlNJc0lsUkZXRlJWVWtVd0lpd2lZbWx1WkZSbGVIUjFjbVVpTENKZmMyVjBUV2x3YldGd0lpd2labXhwY0ZraUxDSndjbVZ0ZFd4MGFYQnNlVUZzY0doaElpd2lhR2x1ZENJc0lrZEZUa1ZTUVZSRlgwMUpVRTFCVUY5SVNVNVVJaXdpVGtsRFJWTlVJaXdpWjJWdVpYSmhkR1ZOYVhCdFlYQWlMQ0pmYzJWMFZHVjRTVzVtYnlJc0lsOXlaWE4wYjNKbFZHVjRkSFZ5WlNJc0ltZHNSbTEwSWl3aVgzTmxkRk4xWWtsdFlXZGxJaXdpWDNObGRFbHRZV2RsSWl3aWFXMW5JaXdpYVcxaFoyVWlMQ0pCY25KaGVVSjFabVpsY2lJc0ltbHpWbWxsZHlJc0luQnBlR1ZzVTNSdmNtVnBJaXdpVlU1UVFVTkxYMFpNU1ZCZldWOVhSVUpIVENJc0lsVk9VRUZEUzE5UVVrVk5WVXhVU1ZCTVdWOUJURkJJUVY5WFJVSkhUQ0lzSW5SbGVGTjFZa2x0WVdkbE1rUWlMQ0pzWlhabGJDSXNJbmdpTENKNUlpd2ljR2w0Wld4VWVYQmxJaXdpWTI5dGNISmxjM05sWkZSbGVGTjFZa2x0WVdkbE1rUWlMQ0owWlhoSmJXRm5aVEpFSWl3aWFXNTBaWEp1WVd4R2IzSnRZWFFpTENKamIyMXdjbVZ6YzJWa1ZHVjRTVzFoWjJVeVJDSXNJbWtpTENKWFVrRlFYME5NUVUxUUlpd2lkR1Y0VUdGeVlXMWxkR1Z5YVNJc0lsUkZXRlJWVWtWZlRVbE9YMFpKVEZSRlVpSXNJbFJGV0ZSVlVrVmZUVUZIWDBaSlRGUkZVaUlzSWxSRldGUlZVa1ZmVjFKQlVGOVRJaXdpVkVWWVZGVlNSVjlYVWtGUVgxUWlMQ0psZUhRaUxDSlVSVmhVVlZKRlgwMUJXRjlCVGtsVFQxUlNUMUJaWDBWWVZDSXNJbFJsZUhSMWNtVWlYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3T3p0QlFVTkJPenM3TzBGQlEwRTdPMEZCUTBFN096czdPenM3T3l0bFFVaEJPenM3UVVGTFFTeEpRVUZOUVN4clFrRkJhMEpETEU5QlFVOURMR05CUVZBc1EwRkJjMEpFTEU5QlFVOURMR05CUVZBc1EwRkJjMElzU1VGQlNVTXNWVUZCU2l4RlFVRjBRaXhEUVVGMFFpeEZRVUUyUkVNc1YwRkJja1k3TzBGQlJVRTdPenM3T3pzN1NVRlBjVUpETEZNN096dEJRVU51UWpzN096czdRVUZMUVN4eFFrRkJXVU1zVFVGQldpeEZRVUZ2UWtNc1QwRkJjRUlzUlVGQk5rSTdRVUZCUVRzN1FVRkJRU3h6U0VGRGNrSkVMRTFCUkhGQ096dEJRVWN6UWl4UlFVRkpSU3hMUVVGTExFMUJRVXRETEU5QlFVd3NRMEZCWVVNc1IwRkJkRUk3UVVGRFFTeFZRVUZMUXl4UFFVRk1MRWRCUVdWSUxFZEJRVWRKTEZWQlFXeENPMEZCUTBFc1ZVRkJTME1zUzBGQlRDeEhRVUZoVEN4SFFVRkhUU3hoUVVGSUxFVkJRV0k3TzBGQlJVRTdRVUZEUVZBc1dVRkJVVkVzVFVGQlVpeEhRVUZwUWxJc1VVRkJVVkVzVFVGQlVpeEpRVUZyUWl4RFFVRkRMRWxCUVVRc1EwRkJia003UVVGRFFTeFZRVUZMUXl4TlFVRk1MRU5CUVZsVUxFOUJRVm83UVVGVU1rSTdRVUZWTlVJN08wRkJSVVE3T3pzN096czdPekpDUVVsUFFTeFBMRVZCUVZNN1FVRkRaQ3hWUVVGSlF5eExRVUZMTEV0QlFVdERMRTlCUVV3c1EwRkJZVU1zUjBGQmRFSTdRVUZEUVN4VlFVRkpUeXhoUVVGaExFdEJRVXRETEZWQlFYUkNPenRCUVVWQkxGVkJRVWxZTEU5QlFVb3NSVUZCWVR0QlFVTllMRmxCUVVsQkxGRkJRVkZaTEV0QlFWSXNTMEZCYTBKRExGTkJRWFJDTEVWQlFXbERPMEZCUXk5Q0xHVkJRVXRETEUxQlFVd3NSMEZCWTJRc1VVRkJVVmtzUzBGQmRFSTdRVUZEUkR0QlFVTkVMRmxCUVVsYUxGRkJRVkZsTEUxQlFWSXNTMEZCYlVKR0xGTkJRWFpDTEVWQlFXdERPMEZCUTJoRExHVkJRVXRITEU5QlFVd3NSMEZCWldoQ0xGRkJRVkZsTEUxQlFYWkNPMEZCUTBRN1FVRkRSQ3haUVVGSlppeFJRVUZSYVVJc1ZVRkJVaXhMUVVGMVFrb3NVMEZCTTBJc1JVRkJjME03UVVGRGNFTXNaVUZCUzBzc1YwRkJUQ3hIUVVGdFFteENMRkZCUVZGcFFpeFZRVUV6UWp0QlFVTkVPMEZCUTBRc1dVRkJTV3BDTEZGQlFWRnRRaXhUUVVGU0xFdEJRWE5DVGl4VFFVRXhRaXhGUVVGeFF6dEJRVU51UXl4bFFVRkxUeXhWUVVGTUxFZEJRV3RDY0VJc1VVRkJVVzFDTEZOQlFURkNPMEZCUTBRN1FVRkRSQ3haUVVGSmJrSXNVVUZCVVhGQ0xGTkJRVklzUzBGQmMwSlNMRk5CUVRGQ0xFVkJRWEZETzBGQlEyNURMR1ZCUVV0VExGVkJRVXdzUjBGQmEwSjBRaXhSUVVGUmNVSXNVMEZCTVVJN1FVRkRSRHRCUVVORUxGbEJRVWx5UWl4UlFVRlJkVUlzVTBGQlVpeExRVUZ6UWxZc1UwRkJNVUlzUlVGQmNVTTdRVUZEYmtNc1pVRkJTMWNzVlVGQlRDeEhRVUZyUW5oQ0xGRkJRVkYxUWl4VFFVRXhRanRCUVVORU8wRkJRMFFzV1VGQlNYWkNMRkZCUVZGNVFpeExRVUZTTEV0QlFXdENXaXhUUVVGMFFpeEZRVUZwUXp0QlFVTXZRaXhsUVVGTFlTeE5RVUZNTEVkQlFXTXhRaXhSUVVGUmVVSXNTMEZCZEVJN1FVRkRSRHRCUVVORUxGbEJRVWw2UWl4UlFVRlJNa0lzUzBGQlVpeExRVUZyUW1Rc1UwRkJkRUlzUlVGQmFVTTdRVUZETDBJc1pVRkJTMlVzVFVGQlRDeEhRVUZqTlVJc1VVRkJVVEpDTEV0QlFYUkNPMEZCUTBRN1FVRkRSQ3haUVVGSk0wSXNVVUZCVVRaQ0xFMUJRVklzUzBGQmJVSm9RaXhUUVVGMlFpeEZRVUZyUXp0QlFVTm9ReXhsUVVGTGFVSXNUMEZCVEN4SFFVRmxPVUlzVVVGQlVUWkNMRTFCUVhaQ08wRkJRMEVzWlVGQlMwVXNWMEZCVEN4SFFVTkhMRXRCUVV0RUxFOUJRVXdzU1VGQlowSkZMR0ZCUVUxRExHOUNRVUYwUWl4SlFVRTRReXhMUVVGTFNDeFBRVUZNTEVsQlFXZENSU3hoUVVGTlJTdzJRa0ZCY2tVc1NVRkRReXhMUVVGTFNpeFBRVUZNTEVsQlFXZENSU3hoUVVGTlJ5eHZRa0ZCZEVJc1NVRkJPRU1zUzBGQlMwd3NUMEZCVEN4SlFVRm5Ra1VzWVVGQlRVa3NjVUpCUm5aRk8wRkJTVVE3TzBGQlJVUTdRVUZEUVN4WlFVRkpjRU1zVVVGQlVWVXNWVUZCVWl4TFFVRjFRa2NzVTBGQk0wSXNSVUZCYzBNN1FVRkRjRU1zWlVGQlMwWXNWVUZCVEN4SFFVRnJRbGdzVVVGQlVWVXNWVUZCTVVJN1FVRkRRVUVzZFVKQlFXRldMRkZCUVZGVkxGVkJRWEpDTzBGQlEwUTdPMEZCUlVRc1dVRkJTVEpDTEZWQlFWVXNTMEZCUzI1RExFOUJRVXdzUTBGQllXOURMRWxCUVdJc1EwRkJhMEpETEdOQlFXeENMRWxCUVc5RFF5eFBRVUZQUXl4VFFVRjZSRHRCUVVOQkxGbEJRVWxETEdsQ1FVRnBRa01zUzBGQlMwTXNSMEZCVEN4RFFVRlROVU1zVVVGQlVWa3NTMEZCVWl4SlFVRnBRaXhEUVVFeFFpeEZRVUUyUWxvc1VVRkJVV1VzVFVGQlVpeEpRVUZyUWl4RFFVRXZReXhEUVVGeVFqdEJRVU5CTEZsQlFVbHpRaXhWUVVGVlN5eGpRVUZrTEVWQlEwVkhMRkZCUVZGRExFbEJRVklzSzBKQlFYbERTaXhqUVVGNlF5eHRRMEZCY1VaTUxFOUJRWEpHT3p0QlFVVkdMRmxCUVVseVF5eFJRVUZSVVN4TlFVRlNMRXRCUVcxQ1N5eFRRVUYyUWl4RlFVRnJRenRCUVVOb1F5eGpRVUZKWWl4UlFVRlJVU3hOUVVGU0xFTkJRV1YxUXl4TlFVRm1MRWRCUVhkQ0xFTkJRVFZDTEVWQlFTdENPMEZCUXpkQ2NrTXNlVUpCUVdFc1MwRkJZanRCUVVOQkxHZENRVUZKYzBNc1dVRkJXV2hFTEZGQlFWRlpMRXRCUVZJc1IwRkJaMEphTEZGQlFWRmxMRTFCUVhoQ0xFZEJRV2xEWml4UlFVRlJXU3hMUVVGNlF5eEhRVUZwUkZvc1VVRkJVV1VzVFVGQmVrVTdRVUZEUVN4blFrRkJTV2xETEdGQlFXTm9SQ3hSUVVGUlVTeE5RVUZTTEVOQlFXVjFReXhOUVVGbUxFZEJRWGRDTEVOQlFYUkRMRXRCUVRaRExFTkJRV3BFTEVWQlFXOUVPMEZCUTJ4RVJpeHpRa0ZCVVVrc1MwRkJVaXhEUVVGakxIbEVRVUZrTzBGQlEwUTdRVUZEUmp0QlFVTkdPMEZCUTBZN08wRkJSVVE3UVVGRFFTeFZRVUZKUXl4TlFVRk5MR3RDUVVGUExFdEJRVXR3UXl4TlFVRmFMRXRCUVhWQ0xHdENRVUZQTEV0QlFVdEZMRTlCUVZvc1EwRkJha003UVVGRFFTeFZRVUZKTEVOQlFVTnJReXhIUVVGTUxFVkJRVlU3UVVGRFVuaERMSEZDUVVGaExFdEJRV0k3UVVGRFJEczdRVUZGUkZRc1UwRkJSMnRFTEdGQlFVZ3NRMEZCYVVKc1JDeEhRVUZIYlVRc1VVRkJjRUk3UVVGRFFXNUVMRk5CUVVkdlJDeFhRVUZJTEVOQlFXVndSQ3hIUVVGSFNTeFZRVUZzUWl4RlFVRTRRaXhMUVVGTFF5eExRVUZ1UXp0QlFVTkJMRlZCUVVsT0xGRkJRVkZSTEUxQlFWSXNTMEZCYlVKTExGTkJRVzVDTEVsQlFXZERZaXhSUVVGUlVTeE5RVUZTTEVOQlFXVjFReXhOUVVGbUxFZEJRWGRDTEVOQlFUVkVMRVZCUVN0RU8wRkJRemRFTEdGQlFVdFBMRlZCUVV3c1EwRkJaMEowUkN4UlFVRlJVU3hOUVVGNFFpeEZRVUZuUTFJc1VVRkJVWFZFTEV0QlFYaERMRVZCUVN0RGRrUXNVVUZCVVhkRUxHZENRVUYyUkR0QlFVTkJMRmxCUVVsNFJDeFJRVUZSVVN4TlFVRlNMRU5CUVdWMVF5eE5RVUZtTEVkQlFYZENMRU5CUVRWQ0xFVkJRU3RDTEV0QlFVdHdReXhWUVVGTUxFZEJRV3RDTEVsQlFXeENPMEZCUTJoRE8wRkJRMFFzVlVGQlNVUXNWVUZCU2l4RlFVRm5RanRCUVVOa1ZDeFhRVUZIZDBRc1NVRkJTQ3hEUVVGUmVFUXNSMEZCUjNsRUxHOUNRVUZZTEVWQlFXbERla1FzUjBGQlJ6QkVMRTFCUVhCRE8wRkJRMEV4UkN4WFFVRkhNa1FzWTBGQlNDeERRVUZyUWpORUxFZEJRVWRKTEZWQlFYSkNPMEZCUTBFc1lVRkJTMDBzVlVGQlRDeEhRVUZyUWl4SlFVRnNRanRCUVVORU96dEJRVVZFTEZkQlFVdHJSQ3hYUVVGTU8wRkJRMEVzVjBGQlN6TkVMRTlCUVV3c1EwRkJZVFJFTEdWQlFXSXNRMEZCTmtJc1EwRkJOMEk3UVVGRFJEczdRVUZGUkRzN096czdPenM3T3pzN096czdPMjFEUVZsbE9VUXNUeXhGUVVGVE8wRkJRM1JDTEZWQlFVbERMRXRCUVVzc1MwRkJTME1zVDBGQlRDeERRVUZoUXl4SFFVRjBRanRCUVVOQkxGVkJRVWswUkN4UlFVRlJMSGxDUVVGaExFdEJRVXRxUXl4UFFVRnNRaXhEUVVGYU96dEJRVVZCTjBJc1UwRkJSMnRFTEdGQlFVZ3NRMEZCYVVKc1JDeEhRVUZIYlVRc1VVRkJjRUk3UVVGRFFXNUVMRk5CUVVkdlJDeFhRVUZJTEVOQlFXVndSQ3hIUVVGSFNTeFZRVUZzUWl4RlFVRTRRaXhMUVVGTFF5eExRVUZ1UXp0QlFVTkJMRmRCUVVzd1JDeFpRVUZNTEVOQlFXdENSQ3hMUVVGc1FpeEZRVUY1UWk5RUxFOUJRWHBDTzBGQlEwRXNWMEZCUzBVc1QwRkJUQ3hEUVVGaE5FUXNaVUZCWWl4RFFVRTJRaXhEUVVFM1FqdEJRVU5FT3p0QlFVVkVPenM3T3pzN096czdPenM3TzJkRFFWVlpPVVFzVHl4RlFVRlRPMEZCUTI1Q0xGVkJRVWxETEV0QlFVc3NTMEZCUzBNc1QwRkJUQ3hEUVVGaFF5eEhRVUYwUWp0QlFVTkJMRlZCUVVrMFJDeFJRVUZSTEhsQ1FVRmhMRXRCUVV0cVF5eFBRVUZzUWl4RFFVRmFPenRCUVVWQk4wSXNVMEZCUjJ0RUxHRkJRVWdzUTBGQmFVSnNSQ3hIUVVGSGJVUXNVVUZCY0VJN1FVRkRRVzVFTEZOQlFVZHZSQ3hYUVVGSUxFTkJRV1Z3UkN4SFFVRkhTU3hWUVVGc1FpeEZRVUU0UWl4TFFVRkxReXhMUVVGdVF6dEJRVU5CTEZkQlFVc3lSQ3hUUVVGTUxFTkJRV1ZHTEV0QlFXWXNSVUZCYzBJdlJDeFBRVUYwUWp0QlFVTkJMRmRCUVV0RkxFOUJRVXdzUTBGQllUUkVMR1ZCUVdJc1EwRkJOa0lzUTBGQk4wSTdRVUZEUkRzN08ybERRVVZaUXl4TExFVkJRVTh2UkN4UExFVkJRVk03UVVGRE0wSXNWVUZCU1VNc1MwRkJTeXhMUVVGTFF5eFBRVUZNTEVOQlFXRkRMRWRCUVhSQ08wRkJRMEVzVlVGQlNXOUVMRkZCUVZGMlJDeFJRVUZSZFVRc1MwRkJjRUk3UVVGRFFTeFZRVUZKUXl4dFFrRkJiVUo0UkN4UlFVRlJkMFFzWjBKQlFTOUNPMEZCUTBFc1ZVRkJTVlVzVFVGQlRXeEZMRkZCUVZGdFJTeExRVUZzUWpzN1FVRkZRU3hWUVVGSlJDeFBRVUZQTEVOQlFVTkZMRmxCUVZsRExFMUJRVm9zUTBGQmJVSklMRWRCUVc1Q0xFTkJRVklzU1VGQmJVTXNSVUZCUlVFc1pVRkJaVVVzVjBGQmFrSXNRMEZCZGtNc1JVRkJjMFU3UVVGRGNFVXNXVUZCU1dJc1ZVRkJWVEZETEZOQlFXUXNSVUZCZVVJN1FVRkRka0phTEdGQlFVZHhSU3hYUVVGSUxFTkJRV1Z5UlN4SFFVRkhjMFVzYlVKQlFXeENMRVZCUVhWRExFbEJRWFpETzBGQlEwUXNVMEZHUkN4TlFVVlBPMEZCUTB4MFJTeGhRVUZIY1VVc1YwRkJTQ3hEUVVGbGNrVXNSMEZCUjNORkxHMUNRVUZzUWl4RlFVRjFRMmhDTEV0QlFYWkRPMEZCUTBRN08wRkJSVVFzV1VGQlNVTXNjVUpCUVhGQ00wTXNVMEZCZWtJc1JVRkJiME03UVVGRGJFTmFMR0ZCUVVkeFJTeFhRVUZJTEVOQlFXVnlSU3hIUVVGSGRVVXNPRUpCUVd4Q0xFVkJRV3RFTEV0QlFXeEVPMEZCUTBRc1UwRkdSQ3hOUVVWUE8wRkJRMHgyUlN4aFFVRkhjVVVzVjBGQlNDeERRVUZsY2tVc1IwRkJSM1ZGTERoQ1FVRnNRaXhGUVVGclJHaENMR2RDUVVGc1JEdEJRVU5FT3p0QlFVVkVka1FzVjBGQlIzZEZMR0ZCUVVnc1EwRkJhVUo0UlN4SFFVRkhTU3hWUVVGd1FpeEZRVUZuUTB3c1VVRkJVVEJGTEV0QlFYaERMRVZCUVN0RE1VVXNVVUZCVVRKRkxFTkJRWFpFTEVWQlFUQkVNMFVzVVVGQlVUUkZMRU5CUVd4RkxFVkJRWEZGWWl4TlFVRk5iRU1zVFVGQk0wVXNSVUZCYlVaclF5eE5RVUZOWXl4VFFVRjZSaXhGUVVGdlIxZ3NSMEZCY0VjN1FVRkRSQ3hQUVdSRUxFMUJZMDg3UVVGRFRDeFpRVUZKV0N4VlFVRlZNVU1zVTBGQlpDeEZRVUY1UWp0QlFVTjJRbG9zWVVGQlIzRkZMRmRCUVVnc1EwRkJaWEpGTEVkQlFVZHpSU3h0UWtGQmJFSXNSVUZCZFVNc1MwRkJka003UVVGRFJDeFRRVVpFTEUxQlJVODdRVUZEVEhSRkxHRkJRVWR4UlN4WFFVRklMRU5CUVdWeVJTeEhRVUZIYzBVc2JVSkJRV3hDTEVWQlFYVkRhRUlzUzBGQmRrTTdRVUZEUkRzN1FVRkZSQ3haUVVGSlF5eHhRa0ZCY1VJelF5eFRRVUY2UWl4RlFVRnZRenRCUVVOc1Exb3NZVUZCUjNGRkxGZEJRVWdzUTBGQlpYSkZMRWRCUVVkMVJTdzRRa0ZCYkVJc1JVRkJhMFFzUzBGQmJFUTdRVUZEUkN4VFFVWkVMRTFCUlU4N1FVRkRUSFpGTEdGQlFVZHhSU3hYUVVGSUxFTkJRV1Z5UlN4SFFVRkhkVVVzT0VKQlFXeENMRVZCUVd0RWFFSXNaMEpCUVd4RU8wRkJRMFE3TzBGQlJVUXNXVUZCU1N4TFFVRkxla0lzVjBGQlZDeEZRVUZ6UWp0QlFVTndRamxDTEdGQlFVYzJSU3gxUWtGQlNDeERRVUV5UWpkRkxFZEJRVWRKTEZWQlFUbENMRVZCUTBWTUxGRkJRVkV3UlN4TFFVUldMRVZCUlVVeFJTeFJRVUZSTWtVc1EwRkdWaXhGUVVkRk0wVXNVVUZCVVRSRkxFTkJTRllzUlVGSlJUVkZMRkZCUVZGWkxFdEJTbFlzUlVGTFJWb3NVVUZCVVdVc1RVRk1WaXhGUVUxRlowUXNUVUZCVFd4RExFMUJUbElzUlVGUFJYRkRMRWRCVUVZN1FVRlRSQ3hUUVZaRUxFMUJWVTg3UVVGRFRHcEZMR0ZCUVVkM1JTeGhRVUZJTEVOQlEwVjRSU3hIUVVGSFNTeFZRVVJNTEVWQlJVVk1MRkZCUVZFd1JTeExRVVpXTEVWQlIwVXhSU3hSUVVGUk1rVXNRMEZJVml4RlFVbEZNMFVzVVVGQlVUUkZMRU5CU2xZc1JVRkxSVFZGTEZGQlFWRlpMRXRCVEZZc1JVRk5SVm9zVVVGQlVXVXNUVUZPVml4RlFVOUZaMFFzVFVGQlRXeERMRTFCVUZJc1JVRlJSV3RETEUxQlFVMWpMRk5CVWxJc1JVRlRSVmdzUjBGVVJqdEJRVmRFTzBGQlEwWTdRVUZEUmpzN096aENRVVZUU0N4TExFVkJRVTh2UkN4UExFVkJRVk03UVVGRGVFSXNWVUZCU1VNc1MwRkJTeXhMUVVGTFF5eFBRVUZNTEVOQlFXRkRMRWRCUVhSQ08wRkJRMEVzVlVGQlNXOUVMRkZCUVZGMlJDeFJRVUZSZFVRc1MwRkJjRUk3UVVGRFFTeFZRVUZKUXl4dFFrRkJiVUo0UkN4UlFVRlJkMFFzWjBKQlFTOUNPMEZCUTBFc1ZVRkJTVlVzVFVGQlRXeEZMRkZCUVZGdFJTeExRVUZzUWpzN1FVRkZRU3hWUVVGSlJDeFBRVUZQTEVOQlFVTkZMRmxCUVZsRExFMUJRVm9zUTBGQmJVSklMRWRCUVc1Q0xFTkJRVklzU1VGQmJVTXNSVUZCUlVFc1pVRkJaVVVzVjBGQmFrSXNRMEZCZGtNc1JVRkJjMFU3UVVGRGNFVXNXVUZCU1dJc1ZVRkJWVEZETEZOQlFXUXNSVUZCZVVJN1FVRkRka0phTEdGQlFVZHhSU3hYUVVGSUxFTkJRV1Z5UlN4SFFVRkhjMFVzYlVKQlFXeENMRVZCUVhWRExFbEJRWFpETzBGQlEwUXNVMEZHUkN4TlFVVlBPMEZCUTB4MFJTeGhRVUZIY1VVc1YwRkJTQ3hEUVVGbGNrVXNSMEZCUjNORkxHMUNRVUZzUWl4RlFVRjFRMmhDTEV0QlFYWkRPMEZCUTBRN08wRkJSVVFzV1VGQlNVTXNjVUpCUVhGQ00wTXNVMEZCZWtJc1JVRkJiME03UVVGRGJFTmFMR0ZCUVVkeFJTeFhRVUZJTEVOQlFXVnlSU3hIUVVGSGRVVXNPRUpCUVd4Q0xFVkJRV3RFTEV0QlFXeEVPMEZCUTBRc1UwRkdSQ3hOUVVWUE8wRkJRMHgyUlN4aFFVRkhjVVVzVjBGQlNDeERRVUZsY2tVc1IwRkJSM1ZGTERoQ1FVRnNRaXhGUVVGclJHaENMR2RDUVVGc1JEdEJRVU5FT3p0QlFVVkVka1FzVjBGQlJ6aEZMRlZCUVVnc1EwRkRSVGxGTEVkQlFVZEpMRlZCUkV3c1JVRkZSVXdzVVVGQlVUQkZMRXRCUmxZc1JVRkhSVmdzVFVGQlRXbENMR05CU0ZJc1JVRkpSV3BDTEUxQlFVMXNReXhOUVVwU0xFVkJTMFZyUXl4TlFVRk5ZeXhUUVV4U0xFVkJUVVZZTEVkQlRrWTdRVUZSUkN4UFFYSkNSQ3hOUVhGQ1R6dEJRVU5NTEZsQlFVbFlMRlZCUVZVeFF5eFRRVUZrTEVWQlFYbENPMEZCUTNaQ1dpeGhRVUZIY1VVc1YwRkJTQ3hEUVVGbGNrVXNSMEZCUjNORkxHMUNRVUZzUWl4RlFVRjFReXhMUVVGMlF6dEJRVU5FTEZOQlJrUXNUVUZGVHp0QlFVTk1kRVVzWVVGQlIzRkZMRmRCUVVnc1EwRkJaWEpGTEVkQlFVZHpSU3h0UWtGQmJFSXNSVUZCZFVOb1FpeExRVUYyUXp0QlFVTkVPenRCUVVWRUxGbEJRVWxETEhGQ1FVRnhRak5ETEZOQlFYcENMRVZCUVc5RE8wRkJRMnhEV2l4aFFVRkhjVVVzVjBGQlNDeERRVUZsY2tVc1IwRkJSM1ZGTERoQ1FVRnNRaXhGUVVGclJDeExRVUZzUkR0QlFVTkVMRk5CUmtRc1RVRkZUenRCUVVOTWRrVXNZVUZCUjNGRkxGZEJRVWdzUTBGQlpYSkZMRWRCUVVkMVJTdzRRa0ZCYkVJc1JVRkJhMFJvUWl4blFrRkJiRVE3UVVGRFJEczdRVUZGUkN4WlFVRkpMRXRCUVV0NlFpeFhRVUZVTEVWQlFYTkNPMEZCUTNCQ09VSXNZVUZCUjJkR0xHOUNRVUZJTEVOQlEwVm9SaXhIUVVGSFNTeFZRVVJNTEVWQlJVVk1MRkZCUVZFd1JTeExRVVpXTEVWQlIwVllMRTFCUVUxcFFpeGpRVWhTTEVWQlNVVm9SaXhSUVVGUldTeExRVXBXTEVWQlMwVmFMRkZCUVZGbExFMUJURllzUlVGTlJTeERRVTVHTEVWQlQwVnRSQ3hIUVZCR08wRkJVMFFzVTBGV1JDeE5RVlZQTzBGQlEweHFSU3hoUVVGSE9FVXNWVUZCU0N4RFFVTkZPVVVzUjBGQlIwa3NWVUZFVEN4RlFVVkZUQ3hSUVVGUk1FVXNTMEZHVml4RlFVZEZXQ3hOUVVGTmFVSXNZMEZJVWl4RlFVbEZhRVlzVVVGQlVWa3NTMEZLVml4RlFVdEZXaXhSUVVGUlpTeE5RVXhXTEVWQlRVVXNRMEZPUml4RlFVOUZaMFFzVFVGQlRXeERMRTFCVUZJc1JVRlJSV3RETEUxQlFVMWpMRk5CVWxJc1JVRlRSVmdzUjBGVVJqdEJRVmRFTzBGQlEwWTdRVUZEUmpzN095dENRVVZWTVVRc1RTeEZRVUZSSzBNc1N5eEZRVUZQUXl4blFpeEZRVUZyUWp0QlFVTXhReXhWUVVGSlR5eFJRVUZSTEhsQ1FVRmhMRXRCUVV0cVF5eFBRVUZzUWl4RFFVRmFPMEZCUTBFc1ZVRkJTVGxDTEZWQlFWVTdRVUZEV2xrc1pVRkJUeXhMUVVGTFJTeE5RVVJCTzBGQlJWcERMR2RDUVVGUkxFdEJRVXRETEU5QlJrUTdRVUZIV25WRExHVkJRVTlCTEV0QlNFczdRVUZKV2tNc01FSkJRV3RDUVN4blFrRktUanRCUVV0YWEwSXNaVUZCVHl4RFFVeExPMEZCVFZwUUxHVkJRVTg3UVVGT1N5eFBRVUZrT3p0QlFWTkJMRmRCUVVzc1NVRkJTV1VzU1VGQlNTeERRVUZpTEVWQlFXZENRU3hKUVVGSk1VVXNUMEZCVDNWRExFMUJRVE5DTEVWQlFXMURMRVZCUVVWdFF5eERRVUZ5UXl4RlFVRjNRenRCUVVOMFEyeEdMR2RDUVVGUk1FVXNTMEZCVWl4SFFVRm5RbEVzUTBGQmFFSTdRVUZEUVd4R0xHZENRVUZSV1N4TFFVRlNMRWRCUVdkQ0xFdEJRVXRGTEUxQlFVd3NTVUZCWlc5RkxFTkJRUzlDTzBGQlEwRnNSaXhuUWtGQlVXVXNUVUZCVWl4SFFVRnBRaXhMUVVGTFF5eFBRVUZNTEVsQlFXZENhMFVzUTBGQmFrTTdRVUZEUVd4R0xHZENRVUZSYlVVc1MwRkJVaXhIUVVGblFqTkVMRTlCUVU4d1JTeERRVUZRTEVOQlFXaENPMEZCUTBFc1lVRkJTMnBDTEZOQlFVd3NRMEZCWlVZc1MwRkJaaXhGUVVGelFpOUVMRTlCUVhSQ08wRkJRMFE3UVVGRFJqczdPMnREUVVWaE8wRkJRMW9zVlVGQlNVTXNTMEZCU3l4TFFVRkxReXhQUVVGTUxFTkJRV0ZETEVkQlFYUkNPMEZCUTBFc1ZVRkJTU3RETEUxQlFVMHNhMEpCUVU4c1MwRkJTM0JETEUxQlFWb3NTMEZCZFVJc2EwSkJRVThzUzBGQlMwVXNUMEZCV2l4RFFVRnFRenM3UVVGRlFUdEJRVU5CTEZWQlFVa3NRMEZCUTJ0RExFZEJRVVFzUzBGQlV5eExRVUZMZUVJc1RVRkJUQ3hMUVVGblFrMHNZVUZCVFcxRUxGVkJRWFJDTEVsQlFXOURMRXRCUVV0MlJDeE5RVUZNTEV0QlFXZENTU3hoUVVGTmJVUXNWVUZCYmtVc1EwRkJTaXhGUVVGdlJqdEJRVU5zUm5SRExHZENRVUZSUXl4SlFVRlNMRU5CUVdFc01rUkJRV0k3UVVGRFFTeGhRVUZMY0VJc1RVRkJUQ3hIUVVGalRTeGhRVUZOYlVRc1ZVRkJjRUk3UVVGRFFTeGhRVUZMZGtRc1RVRkJUQ3hIUVVGalNTeGhRVUZOYlVRc1ZVRkJjRUk3UVVGRFJEczdRVUZGUkN4VlFVRkpOVVFzV1VGQldTeExRVUZMV2l4VlFVRk1MRWRCUVd0Q0xFdEJRVXRoTEZWQlFYWkNMRWRCUVc5RExFTkJRVU1zUTBGQmNrUTdRVUZEUVN4VlFVRkpMRU5CUVVNd1FpeEhRVUZFTEVsQlFWRXpRaXhqUVVGakxFTkJRVU1zUTBGQk0wSXNSVUZCT0VJN1FVRkROVUp6UWl4blFrRkJVVU1zU1VGQlVpeERRVUZoTERSRFFVRmlPMEZCUTBGMlFpeHZRa0ZCV1N4RFFVRkRMRU5CUVdJN1FVRkRSRHM3UVVGRlJIUkNMRk5CUVVkdFJpeGhRVUZJTEVOQlFXbENia1lzUjBGQlIwa3NWVUZCY0VJc1JVRkJaME5LTEVkQlFVZHZSaXhyUWtGQmJrTXNSVUZCZFVRc2NVSkJRVk53Uml4RlFVRlVMRVZCUVdFc1MwRkJTMjFDTEZWQlFXeENMRVZCUVRoQ1J5eFRRVUU1UWl4RFFVRjJSRHRCUVVOQmRFSXNVMEZCUjIxR0xHRkJRVWdzUTBGQmFVSnVSaXhIUVVGSFNTeFZRVUZ3UWl4RlFVRm5RMG9zUjBGQlIzRkdMR3RDUVVGdVF5eEZRVUYxUkN4eFFrRkJVM0pHTEVWQlFWUXNSVUZCWVN4TFFVRkxjVUlzVlVGQmJFSXNSVUZCT0VJc1EwRkJReXhEUVVFdlFpeERRVUYyUkR0QlFVTkJja0lzVTBGQlIyMUdMR0ZCUVVnc1EwRkJhVUp1Uml4SFFVRkhTU3hWUVVGd1FpeEZRVUZuUTBvc1IwRkJSM05HTEdOQlFXNURMRVZCUVcxRUxFdEJRVXMzUkN4TlFVRjRSRHRCUVVOQmVrSXNVMEZCUjIxR0xHRkJRVWdzUTBGQmFVSnVSaXhIUVVGSFNTeFZRVUZ3UWl4RlFVRm5RMG9zUjBGQlIzVkdMR05CUVc1RExFVkJRVzFFTEV0QlFVczFSQ3hOUVVGNFJEczdRVUZGUVN4VlFVRkpOa1FzVFVGQlRTeExRVUZMZGtZc1QwRkJUQ3hEUVVGaGRVWXNSMEZCWWl4RFFVRnBRaXhuUTBGQmFrSXNRMEZCVmp0QlFVTkJMRlZCUVVsQkxFZEJRVW9zUlVGQlV6dEJRVU5RZUVZc1YwRkJSMjFHTEdGQlFVZ3NRMEZCYVVKdVJpeEhRVUZIU1N4VlFVRndRaXhGUVVGblEyOUdMRWxCUVVsRExEQkNRVUZ3UXl4RlFVRm5SU3hMUVVGTGVFVXNWMEZCY2tVN1FVRkRSRHRCUVVOR096czdPMFZCTlZSdlEzbEZMR2xDT3p0clFrRkJiRUkzUml4VElpd2labWxzWlNJNkluUmxlSFIxY21VdE1tUXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdkx5QkFkSE10WTJobFkydGNibWx0Y0c5eWRDQlVaWGgwZFhKbElHWnliMjBnSnk0dmRHVjRkSFZ5WlNjN1hHNXBiWEJ2Y25RZ2V5QmxiblZ0Y3l3Z1oyeEdhV3gwWlhJc0lHZHNWR1Y0ZEhWeVpVWnRkQ0I5SUdaeWIyMGdKeTR2Wlc1MWJYTW5PMXh1YVcxd2IzSjBJSHNnYVhOUWIzY3lJSDBnWm5KdmJTQW5MaTl0YVhOakp6dGNibHh1WTI5dWMzUWdRWEp5WVhsQ2RXWm1aWEpXYVdWM0lEMGdUMkpxWldOMExtZGxkRkJ5YjNSdmRIbHdaVTltS0U5aWFtVmpkQzVuWlhSUWNtOTBiM1I1Y0dWUFppaHVaWGNnVldsdWREaEJjbkpoZVNrcExtTnZibk4wY25WamRHOXlYRzVjYmk4cUtseHVJQ29nUUhSNWNHVmtaV1lnZTBoVVRVeEpiV0ZuWlVWc1pXMWxiblFnZkNCSVZFMU1RMkZ1ZG1GelJXeGxiV1Z1ZEgwZ1NGUk5URWx0WVdkbFUyOTFjbU5sWEc0Z0tpQkFkSGx3WldSbFppQjdTRlJOVEVsdFlXZGxVMjkxY21ObElId2dRWEp5WVhsQ2RXWm1aWEpXYVdWM2ZTQkpiV0ZuWlZOdmRYSmpaVnh1SUNvZ1FIUjVjR1ZrWldZZ2UzdDNhV1IwYUQ4NklHNTFiV0psY2l3Z2FHVnBaMmgwUHpvZ2JuVnRZbVZ5TENCdGFXNUdhV3gwWlhJL09pQnVkVzFpWlhJc0lHMWhaMFpwYkhSbGNqODZJRzUxYldKbGNpd2diV2x3Um1sc2RHVnlQem9nYm5WdFltVnlMQ0IzY21Gd1V6ODZJRzUxYldKbGNpd2dkM0poY0ZRL09pQnVkVzFpWlhJc0lHWnZjbTFoZEQ4NklHNTFiV0psY2l3Z1oyVnVUV2x3YldGd2N6ODZJR0p2YjJ4bFlXNHNJR2x0WVdkbGN6ODZJRWx0WVdkbFUyOTFjbU5sVzEwc0lHbHRZV2RsUHpvZ1NXMWhaMlZUYjNWeVkyVXNJR1pzYVhCWlB6b2dZbTl2YkdWaGJpd2djSEpsYlhWc2RHbHdiSGxCYkhCb1lUODZJR0p2YjJ4bFlXNHNJR0Z1YVhOdmRISnZjSGsvT2lCdWRXMWlaWEo5ZlNCVVpYaDBkWEpsVlhCa1lYUmxUM0IwYzF4dUlDb2dRSFI1Y0dWa1pXWWdlMmx0Y0c5eWRDaGNJaTR1TDJkbWVDOWtaWFpwWTJWY0lpa3VaR1ZtWVhWc2RIMGdSR1YyYVdObFhHNGdLaTljYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdWR1Y0ZEhWeVpUSkVJR1Y0ZEdWdVpITWdWR1Y0ZEhWeVpTQjdYRzRnSUM4cUtseHVJQ0FnS2lCQVkyOXVjM1J5ZFdOMGIzSmNiaUFnSUNvZ1FIQmhjbUZ0SUh0RVpYWnBZMlY5SUdSbGRtbGpaVnh1SUNBZ0tpQkFjR0Z5WVcwZ2UxUmxlSFIxY21WVmNHUmhkR1ZQY0hSemZTQnZjSFJwYjI1elhHNGdJQ0FxTDF4dUlDQmpiMjV6ZEhKMVkzUnZjaWhrWlhacFkyVXNJRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQnpkWEJsY2loa1pYWnBZMlVwTzF4dVhHNGdJQ0FnYkdWMElHZHNJRDBnZEdocGN5NWZaR1YyYVdObExsOW5iRHRjYmlBZ0lDQjBhR2x6TGw5MFlYSm5aWFFnUFNCbmJDNVVSVmhVVlZKRlh6SkVPMXh1SUNBZ0lIUm9hWE11WDJkc1NVUWdQU0JuYkM1amNtVmhkR1ZVWlhoMGRYSmxLQ2s3WEc1Y2JpQWdJQ0F2THlCaGJIZGhlWE1nWVd4c2IyTWdkR1Y0ZEhWeVpTQnBiaUJIVUZVZ2QyaGxiaUIzWlNCamNtVmhkR1VnYVhRdVhHNGdJQ0FnYjNCMGFXOXVjeTVwYldGblpYTWdQU0J2Y0hScGIyNXpMbWx0WVdkbGN5QjhmQ0JiYm5Wc2JGMDdYRzRnSUNBZ2RHaHBjeTUxY0dSaGRHVW9iM0IwYVc5dWN5azdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUUcxbGRHaHZaQ0IxY0dSaGRHVmNiaUFnSUNvZ1FIQmhjbUZ0SUh0VVpYaDBkWEpsVlhCa1lYUmxUM0IwYzMwZ2IzQjBhVzl1YzF4dUlDQWdLaTljYmlBZ2RYQmtZWFJsS0c5d2RHbHZibk1wSUh0Y2JpQWdJQ0JzWlhRZ1oyd2dQU0IwYUdsekxsOWtaWFpwWTJVdVgyZHNPMXh1SUNBZ0lHeGxkQ0JuWlc1TmFYQnRZWEJ6SUQwZ2RHaHBjeTVmWjJWdVRXbHdiV0Z3TzF4dVhHNGdJQ0FnYVdZZ0tHOXdkR2x2Ym5NcElIdGNiaUFnSUNBZ0lHbG1JQ2h2Y0hScGIyNXpMbmRwWkhSb0lDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZDJsa2RHZ2dQU0J2Y0hScGIyNXpMbmRwWkhSb08xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXWWdLRzl3ZEdsdmJuTXVhR1ZwWjJoMElDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYUdWcFoyaDBJRDBnYjNCMGFXOXVjeTVvWldsbmFIUTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTVoYm1semIzUnliM0I1SUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZVzVwYzI5MGNtOXdlU0E5SUc5d2RHbHZibk11WVc1cGMyOTBjbTl3ZVR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdsbUlDaHZjSFJwYjI1ekxtMXBia1pwYkhSbGNpQWhQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDIxcGJrWnBiSFJsY2lBOUlHOXdkR2x2Ym5NdWJXbHVSbWxzZEdWeU8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXWWdLRzl3ZEdsdmJuTXViV0ZuUm1sc2RHVnlJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmJXRm5SbWxzZEdWeUlEMGdiM0IwYVc5dWN5NXRZV2RHYVd4MFpYSTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTV0YVhCR2FXeDBaWElnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXRhWEJHYVd4MFpYSWdQU0J2Y0hScGIyNXpMbTFwY0VacGJIUmxjanRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNodmNIUnBiMjV6TG5keVlYQlRJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmQzSmhjRk1nUFNCdmNIUnBiMjV6TG5keVlYQlRPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdhV1lnS0c5d2RHbHZibk11ZDNKaGNGUWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5M2NtRndWQ0E5SUc5d2RHbHZibk11ZDNKaGNGUTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTVtYjNKdFlYUWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5bWIzSnRZWFFnUFNCdmNIUnBiMjV6TG1admNtMWhkRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZMjl0Y0hKbGMzTmxaQ0E5SUZ4dUlDQWdJQ0FnSUNBZ0lDaDBhR2x6TGw5bWIzSnRZWFFnUGowZ1pXNTFiWE11VkVWWVZGVlNSVjlHVFZSZlVrZENYMFJZVkRFZ0ppWWdkR2hwY3k1ZlptOXliV0YwSUR3OUlHVnVkVzF6TGxSRldGUlZVa1ZmUmsxVVgxSkhRa0ZmVUZaU1ZFTmZORUpRVUZZeEtTQjhmQ0JjYmlBZ0lDQWdJQ0FnSUNBb2RHaHBjeTVmWm05eWJXRjBJRDQ5SUdWdWRXMXpMbFJGV0ZSVlVrVmZSazFVWDFKSFFsOUZWRU15SUNZbUlIUm9hWE11WDJadmNtMWhkQ0E4UFNCbGJuVnRjeTVVUlZoVVZWSkZYMFpOVkY5U1IwSkJYMFZVUXpJcFhHNGdJQ0FnSUNBZ0lEdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdMeThnWTJobFkyc2dhV1lnWjJWdVpYSmhkR1VnYldsd2JXRndYRzRnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTVuWlc1TmFYQnRZWEJ6SUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZaMlZ1VFdsd2JXRndJRDBnYjNCMGFXOXVjeTVuWlc1TmFYQnRZWEJ6TzF4dUlDQWdJQ0FnSUNCblpXNU5hWEJ0WVhCeklEMGdiM0IwYVc5dWN5NW5aVzVOYVhCdFlYQnpPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JzWlhRZ2JXRjRVMmw2WlNBOUlIUm9hWE11WDJSbGRtbGpaUzVqWVhCekxtMWhlRlJsZUhSMWNtVlRhWHBsSUh4OElFNTFiV0psY2k1TlFWaGZWa0ZNVlVVN1hHNGdJQ0FnSUNCc1pYUWdkR1Y0ZEhWeVpVMWhlRk5wZW1VZ1BTQk5ZWFJvTG0xaGVDaHZjSFJwYjI1ekxuZHBaSFJvSUh4OElEQXNJRzl3ZEdsdmJuTXVhR1ZwWjJoMElIeDhJREFwTzF4dUlDQWdJQ0FnYVdZZ0tHMWhlRk5wZW1VZ1BDQjBaWGgwZFhKbFRXRjRVMmw2WlNsY2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLR0JVYUdVZ1kzVnljbVZ1ZENCMFpYaDBkWEpsSUhOcGVtVWdKSHQwWlhoMGRYSmxUV0Y0VTJsNlpYMGdaWGhqWldWa2N5QjBhR1VnYldGNGFXMTFiU0J6YVhwbElGc2tlMjFoZUZOcGVtVjlYU0J6ZFhCd2IzSjBaV1FnYjI0Z2RHaGxJR1JsZG1salpTNWdLVHRjYmx4dUlDQWdJQ0FnYVdZZ0tHOXdkR2x2Ym5NdWFXMWhaMlZ6SUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHOXdkR2x2Ym5NdWFXMWhaMlZ6TG14bGJtZDBhQ0ErSURFcElIdGNiaUFnSUNBZ0lDQWdJQ0JuWlc1TmFYQnRZWEJ6SUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJRzFoZUV4bGJtZDBhQ0E5SUc5d2RHbHZibk11ZDJsa2RHZ2dQaUJ2Y0hScGIyNXpMbWhsYVdkb2RDQS9JRzl3ZEdsdmJuTXVkMmxrZEdnZ09pQnZjSFJwYjI1ekxtaGxhV2RvZER0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYldGNFRHVnVaM1JvSUQ0K0lDaHZjSFJwYjI1ekxtbHRZV2RsY3k1c1pXNW5kR2dnTFNBeEtTQWhQVDBnTVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ25kR1Y0ZEhWeVpTMHlaQ0J0YVhCdFlYQWdhWE1nYVc1MllXeHBaQ3dnYzJodmRXeGtJR2hoZG1VZ1lTQXhlREVnYldsd2JXRndMaWNwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRTVQVkVVNklHZGxkQ0J3YjNRZ1lXWjBaWElnZEdocGN5NWZkMmxrZEdnc0lIUm9hWE11WDJobGFXZG9kQ0JvWVhNZ1ltVmxiaUJoYzNOcFoyNWxaQzVjYmlBZ0lDQnNaWFFnY0c5MElEMGdhWE5RYjNjeUtIUm9hWE11WDNkcFpIUm9LU0FtSmlCcGMxQnZkeklvZEdocGN5NWZhR1ZwWjJoMEtUdGNiaUFnSUNCcFppQW9JWEJ2ZENrZ2UxeHVJQ0FnSUNBZ1oyVnVUV2x3YldGd2N5QTlJR1poYkhObE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdkc0xtRmpkR2wyWlZSbGVIUjFjbVVvWjJ3dVZFVllWRlZTUlRBcE8xeHVJQ0FnSUdkc0xtSnBibVJVWlhoMGRYSmxLR2RzTGxSRldGUlZVa1ZmTWtRc0lIUm9hWE11WDJkc1NVUXBPMXh1SUNBZ0lHbG1JQ2h2Y0hScGIyNXpMbWx0WVdkbGN5QWhQVDBnZFc1a1pXWnBibVZrSUNZbUlHOXdkR2x2Ym5NdWFXMWhaMlZ6TG14bGJtZDBhQ0ErSURBcElIdGNiaUFnSUNBZ0lIUm9hWE11WDNObGRFMXBjRzFoY0NodmNIUnBiMjV6TG1sdFlXZGxjeXdnYjNCMGFXOXVjeTVtYkdsd1dTd2diM0IwYVc5dWN5NXdjbVZ0ZFd4MGFYQnNlVUZzY0doaEtUdGNiaUFnSUNBZ0lHbG1JQ2h2Y0hScGIyNXpMbWx0WVdkbGN5NXNaVzVuZEdnZ1BpQXhLU0IwYUdsekxsOW5aVzVOYVhCdFlYQWdQU0IwY25WbE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb1oyVnVUV2x3YldGd2N5a2dlMXh1SUNBZ0lDQWdaMnd1YUdsdWRDaG5iQzVIUlU1RlVrRlVSVjlOU1ZCTlFWQmZTRWxPVkN3Z1oyd3VUa2xEUlZOVUtUdGNiaUFnSUNBZ0lHZHNMbWRsYm1WeVlYUmxUV2x3YldGd0tHZHNMbFJGV0ZSVlVrVmZNa1FwTzF4dUlDQWdJQ0FnZEdocGN5NWZaMlZ1VFdsd2JXRndJRDBnZEhKMVpUdGNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMbDl6WlhSVVpYaEpibVp2S0NrN1hHNGdJQ0FnZEdocGN5NWZaR1YyYVdObExsOXlaWE4wYjNKbFZHVjRkSFZ5WlNnd0tUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJBYldWMGFHOWtJSFZ3WkdGMFpWTjFZa2x0WVdkbFhHNGdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J2Y0hScGIyNXpYRzRnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCdmNIUnBiMjV6TG5oY2JpQWdJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJRzl3ZEdsdmJuTXVlVnh1SUNBZ0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ2IzQjBhVzl1Y3k1M2FXUjBhRnh1SUNBZ0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ2IzQjBhVzl1Y3k1b1pXbG5hSFJjYmlBZ0lDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHOXdkR2x2Ym5NdWJHVjJaV3hjYmlBZ0lDb2dRSEJoY21GdElIdElWRTFNUTJGdWRtRnpSV3hsYldWdWRDQjhJRWhVVFV4SmJXRm5aVVZzWlcxbGJuUWdmQ0JJVkUxTVZtbGtaVzlGYkdWdFpXNTBJSHdnUVhKeVlYbENkV1ptWlhKV2FXVjNmU0J2Y0hScGIyNXpMbWx0WVdkbFhHNGdJQ0FxSUVCd1lYSmhiU0I3UW05dmJHVmhibjBnYjNCMGFXOXVjeTVtYkdsd1dWeHVJQ0FnS2lCQWNHRnlZVzBnZTBKdmIyeGxZVzU5SUc5d2RHbHZibk11Y0hKbGJYVnNkR2x3YkhsQmJIQm9ZVnh1SUNBZ0tpOWNiaUFnZFhCa1lYUmxVM1ZpU1cxaFoyVW9iM0IwYVc5dWN5a2dlMXh1SUNBZ0lHeGxkQ0JuYkNBOUlIUm9hWE11WDJSbGRtbGpaUzVmWjJ3N1hHNGdJQ0FnYkdWMElHZHNSbTEwSUQwZ1oyeFVaWGgwZFhKbFJtMTBLSFJvYVhNdVgyWnZjbTFoZENrN1hHNWNiaUFnSUNCbmJDNWhZM1JwZG1WVVpYaDBkWEpsS0dkc0xsUkZXRlJWVWtVd0tUdGNiaUFnSUNCbmJDNWlhVzVrVkdWNGRIVnlaU2huYkM1VVJWaFVWVkpGWHpKRUxDQjBhR2x6TGw5bmJFbEVLVHRjYmlBZ0lDQjBhR2x6TGw5elpYUlRkV0pKYldGblpTaG5iRVp0ZEN3Z2IzQjBhVzl1Y3lrN1hHNGdJQ0FnZEdocGN5NWZaR1YyYVdObExsOXlaWE4wYjNKbFZHVjRkSFZ5WlNnd0tUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJBYldWMGFHOWtJSFZ3WkdGMFpVbHRZV2RsWEc0Z0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZjSFJwYjI1elhHNGdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0J2Y0hScGIyNXpMbmRwWkhSb1hHNGdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0J2Y0hScGIyNXpMbWhsYVdkb2RGeHVJQ0FnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnYjNCMGFXOXVjeTVzWlhabGJGeHVJQ0FnS2lCQWNHRnlZVzBnZTBoVVRVeERZVzUyWVhORmJHVnRaVzUwSUh3Z1NGUk5URWx0WVdkbFJXeGxiV1Z1ZENCOElFaFVUVXhXYVdSbGIwVnNaVzFsYm5RZ2ZDQkJjbkpoZVVKMVptWmxjbFpwWlhkOUlHOXdkR2x2Ym5NdWFXMWhaMlZjYmlBZ0lDb2dRSEJoY21GdElIdENiMjlzWldGdWZTQnZjSFJwYjI1ekxtWnNhWEJaWEc0Z0lDQXFJRUJ3WVhKaGJTQjdRbTl2YkdWaGJuMGdiM0IwYVc5dWN5NXdjbVZ0ZFd4MGFYQnNlVUZzY0doaFhHNGdJQ0FxTDF4dUlDQjFjR1JoZEdWSmJXRm5aU2h2Y0hScGIyNXpLU0I3WEc0Z0lDQWdiR1YwSUdkc0lEMGdkR2hwY3k1ZlpHVjJhV05sTGw5bmJEdGNiaUFnSUNCc1pYUWdaMnhHYlhRZ1BTQm5iRlJsZUhSMWNtVkdiWFFvZEdocGN5NWZabTl5YldGMEtUdGNibHh1SUNBZ0lHZHNMbUZqZEdsMlpWUmxlSFIxY21Vb1oyd3VWRVZZVkZWU1JUQXBPMXh1SUNBZ0lHZHNMbUpwYm1SVVpYaDBkWEpsS0dkc0xsUkZXRlJWVWtWZk1rUXNJSFJvYVhNdVgyZHNTVVFwTzF4dUlDQWdJSFJvYVhNdVgzTmxkRWx0WVdkbEtHZHNSbTEwTENCdmNIUnBiMjV6S1R0Y2JpQWdJQ0IwYUdsekxsOWtaWFpwWTJVdVgzSmxjM1J2Y21WVVpYaDBkWEpsS0RBcE8xeHVJQ0I5WEc1Y2JpQWdYM05sZEZOMVlrbHRZV2RsS0dkc1JtMTBMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lDQWdiR1YwSUdkc0lEMGdkR2hwY3k1ZlpHVjJhV05sTGw5bmJEdGNiaUFnSUNCc1pYUWdabXhwY0ZrZ1BTQnZjSFJwYjI1ekxtWnNhWEJaTzF4dUlDQWdJR3hsZENCd2NtVnRkV3gwYVhCc2VVRnNjR2hoSUQwZ2IzQjBhVzl1Y3k1d2NtVnRkV3gwYVhCc2VVRnNjR2hoTzF4dUlDQWdJR3hsZENCcGJXY2dQU0J2Y0hScGIyNXpMbWx0WVdkbE8xeHVYRzRnSUNBZ2FXWWdLR2x0WnlBbUppQWhRWEp5WVhsQ2RXWm1aWEl1YVhOV2FXVjNLR2x0WnlrZ0ppWWdJU2hwYldjZ2FXNXpkR0Z1WTJWdlppQkJjbkpoZVVKMVptWmxjaWtwSUh0Y2JpQWdJQ0FnSUdsbUlDaG1iR2x3V1NBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUdkc0xuQnBlR1ZzVTNSdmNtVnBLR2RzTGxWT1VFRkRTMTlHVEVsUVgxbGZWMFZDUjB3c0lIUnlkV1VwTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnWjJ3dWNHbDRaV3hUZEc5eVpXa29aMnd1VlU1UVFVTkxYMFpNU1ZCZldWOVhSVUpIVEN3Z1pteHBjRmtwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCcFppQW9jSEpsYlhWc2RHbHdiSGxCYkhCb1lTQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lHZHNMbkJwZUdWc1UzUnZjbVZwS0dkc0xsVk9VRUZEUzE5UVVrVk5WVXhVU1ZCTVdWOUJURkJJUVY5WFJVSkhUQ3dnWm1Gc2MyVXBPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdaMnd1Y0dsNFpXeFRkRzl5Wldrb1oyd3VWVTVRUVVOTFgxQlNSVTFWVEZSSlVFeFpYMEZNVUVoQlgxZEZRa2RNTENCd2NtVnRkV3gwYVhCc2VVRnNjR2hoS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ1oyd3VkR1Y0VTNWaVNXMWhaMlV5UkNobmJDNVVSVmhVVlZKRlh6SkVMQ0J2Y0hScGIyNXpMbXhsZG1Wc0xDQnZjSFJwYjI1ekxuZ3NJRzl3ZEdsdmJuTXVlU3dnWjJ4R2JYUXVabTl5YldGMExDQm5iRVp0ZEM1d2FYaGxiRlI1Y0dVc0lHbHRaeWs3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHbG1JQ2htYkdsd1dTQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lHZHNMbkJwZUdWc1UzUnZjbVZwS0dkc0xsVk9VRUZEUzE5R1RFbFFYMWxmVjBWQ1Iwd3NJR1poYkhObEtUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHZHNMbkJwZUdWc1UzUnZjbVZwS0dkc0xsVk9VRUZEUzE5R1RFbFFYMWxmVjBWQ1Iwd3NJR1pzYVhCWktUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdhV1lnS0hCeVpXMTFiSFJwY0d4NVFXeHdhR0VnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0JuYkM1d2FYaGxiRk4wYjNKbGFTaG5iQzVWVGxCQlEwdGZVRkpGVFZWTVZFbFFURmxmUVV4UVNFRmZWMFZDUjB3c0lHWmhiSE5sS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUdkc0xuQnBlR1ZzVTNSdmNtVnBLR2RzTGxWT1VFRkRTMTlRVWtWTlZVeFVTVkJNV1Y5QlRGQklRVjlYUlVKSFRDd2djSEpsYlhWc2RHbHdiSGxCYkhCb1lTazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbDlqYjIxd2NtVnpjMlZrS1NCN1hHNGdJQ0FnSUNBZ0lHZHNMbU52YlhCeVpYTnpaV1JVWlhoVGRXSkpiV0ZuWlRKRUtHZHNMbFJGV0ZSVlVrVmZNa1FzWEc0Z0lDQWdJQ0FnSUNBZ2IzQjBhVzl1Y3k1c1pYWmxiQ3hjYmlBZ0lDQWdJQ0FnSUNCdmNIUnBiMjV6TG5nc1hHNGdJQ0FnSUNBZ0lDQWdiM0IwYVc5dWN5NTVMRnh1SUNBZ0lDQWdJQ0FnSUc5d2RHbHZibk11ZDJsa2RHZ3NYRzRnSUNBZ0lDQWdJQ0FnYjNCMGFXOXVjeTVvWldsbmFIUXNYRzRnSUNBZ0lDQWdJQ0FnWjJ4R2JYUXVabTl5YldGMExGeHVJQ0FnSUNBZ0lDQWdJR2x0WjF4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ1oyd3VkR1Y0VTNWaVNXMWhaMlV5UkNoY2JpQWdJQ0FnSUNBZ0lDQm5iQzVVUlZoVVZWSkZYekpFTEZ4dUlDQWdJQ0FnSUNBZ0lHOXdkR2x2Ym5NdWJHVjJaV3dzWEc0Z0lDQWdJQ0FnSUNBZ2IzQjBhVzl1Y3k1NExGeHVJQ0FnSUNBZ0lDQWdJRzl3ZEdsdmJuTXVlU3hjYmlBZ0lDQWdJQ0FnSUNCdmNIUnBiMjV6TG5kcFpIUm9MRnh1SUNBZ0lDQWdJQ0FnSUc5d2RHbHZibk11YUdWcFoyaDBMRnh1SUNBZ0lDQWdJQ0FnSUdkc1JtMTBMbVp2Y20xaGRDeGNiaUFnSUNBZ0lDQWdJQ0JuYkVadGRDNXdhWGhsYkZSNWNHVXNYRzRnSUNBZ0lDQWdJQ0FnYVcxblhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdYM05sZEVsdFlXZGxLR2RzUm0xMExDQnZjSFJwYjI1ektTQjdYRzRnSUNBZ2JHVjBJR2RzSUQwZ2RHaHBjeTVmWkdWMmFXTmxMbDluYkR0Y2JpQWdJQ0JzWlhRZ1pteHBjRmtnUFNCdmNIUnBiMjV6TG1ac2FYQlpPMXh1SUNBZ0lHeGxkQ0J3Y21WdGRXeDBhWEJzZVVGc2NHaGhJRDBnYjNCMGFXOXVjeTV3Y21WdGRXeDBhWEJzZVVGc2NHaGhPMXh1SUNBZ0lHeGxkQ0JwYldjZ1BTQnZjSFJwYjI1ekxtbHRZV2RsTzF4dVhHNGdJQ0FnYVdZZ0tHbHRaeUFtSmlBaFFYSnlZWGxDZFdabVpYSXVhWE5XYVdWM0tHbHRaeWtnSmlZZ0lTaHBiV2NnYVc1emRHRnVZMlZ2WmlCQmNuSmhlVUoxWm1abGNpa3BJSHRjYmlBZ0lDQWdJR2xtSUNobWJHbHdXU0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJR2RzTG5CcGVHVnNVM1J2Y21WcEtHZHNMbFZPVUVGRFMxOUdURWxRWDFsZlYwVkNSMHdzSUhSeWRXVXBPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdaMnd1Y0dsNFpXeFRkRzl5Wldrb1oyd3VWVTVRUVVOTFgwWk1TVkJmV1Y5WFJVSkhUQ3dnWm14cGNGa3BPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlBb2NISmxiWFZzZEdsd2JIbEJiSEJvWVNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUdkc0xuQnBlR1ZzVTNSdmNtVnBLR2RzTGxWT1VFRkRTMTlRVWtWTlZVeFVTVkJNV1Y5QlRGQklRVjlYUlVKSFRDd2dabUZzYzJVcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ1oyd3VjR2w0Wld4VGRHOXlaV2tvWjJ3dVZVNVFRVU5MWDFCU1JVMVZURlJKVUV4WlgwRk1VRWhCWDFkRlFrZE1MQ0J3Y21WdGRXeDBhWEJzZVVGc2NHaGhLVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnWjJ3dWRHVjRTVzFoWjJVeVJDaGNiaUFnSUNBZ0lDQWdaMnd1VkVWWVZGVlNSVjh5UkN4Y2JpQWdJQ0FnSUNBZ2IzQjBhVzl1Y3k1c1pYWmxiQ3hjYmlBZ0lDQWdJQ0FnWjJ4R2JYUXVhVzUwWlhKdVlXeEdiM0p0WVhRc1hHNGdJQ0FnSUNBZ0lHZHNSbTEwTG1admNtMWhkQ3hjYmlBZ0lDQWdJQ0FnWjJ4R2JYUXVjR2w0Wld4VWVYQmxMRnh1SUNBZ0lDQWdJQ0JwYldkY2JpQWdJQ0FnSUNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR2xtSUNobWJHbHdXU0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJR2RzTG5CcGVHVnNVM1J2Y21WcEtHZHNMbFZPVUVGRFMxOUdURWxRWDFsZlYwVkNSMHdzSUdaaGJITmxLVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJR2RzTG5CcGVHVnNVM1J2Y21WcEtHZHNMbFZPVUVGRFMxOUdURWxRWDFsZlYwVkNSMHdzSUdac2FYQlpLVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYVdZZ0tIQnlaVzExYkhScGNHeDVRV3h3YUdFZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNCbmJDNXdhWGhsYkZOMGIzSmxhU2huYkM1VlRsQkJRMHRmVUZKRlRWVk1WRWxRVEZsZlFVeFFTRUZmVjBWQ1Iwd3NJR1poYkhObEtUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHZHNMbkJwZUdWc1UzUnZjbVZwS0dkc0xsVk9VRUZEUzE5UVVrVk5WVXhVU1ZCTVdWOUJURkJJUVY5WFJVSkhUQ3dnY0hKbGJYVnNkR2x3YkhsQmJIQm9ZU2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TGw5amIyMXdjbVZ6YzJWa0tTQjdYRzRnSUNBZ0lDQWdJR2RzTG1OdmJYQnlaWE56WldSVVpYaEpiV0ZuWlRKRUtGeHVJQ0FnSUNBZ0lDQWdJR2RzTGxSRldGUlZVa1ZmTWtRc1hHNGdJQ0FnSUNBZ0lDQWdiM0IwYVc5dWN5NXNaWFpsYkN4Y2JpQWdJQ0FnSUNBZ0lDQm5iRVp0ZEM1cGJuUmxjbTVoYkVadmNtMWhkQ3hjYmlBZ0lDQWdJQ0FnSUNCdmNIUnBiMjV6TG5kcFpIUm9MRnh1SUNBZ0lDQWdJQ0FnSUc5d2RHbHZibk11YUdWcFoyaDBMRnh1SUNBZ0lDQWdJQ0FnSURBc1hHNGdJQ0FnSUNBZ0lDQWdhVzFuWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCbmJDNTBaWGhKYldGblpUSkVLRnh1SUNBZ0lDQWdJQ0FnSUdkc0xsUkZXRlJWVWtWZk1rUXNYRzRnSUNBZ0lDQWdJQ0FnYjNCMGFXOXVjeTVzWlhabGJDeGNiaUFnSUNBZ0lDQWdJQ0JuYkVadGRDNXBiblJsY201aGJFWnZjbTFoZEN4Y2JpQWdJQ0FnSUNBZ0lDQnZjSFJwYjI1ekxuZHBaSFJvTEZ4dUlDQWdJQ0FnSUNBZ0lHOXdkR2x2Ym5NdWFHVnBaMmgwTEZ4dUlDQWdJQ0FnSUNBZ0lEQXNYRzRnSUNBZ0lDQWdJQ0FnWjJ4R2JYUXVabTl5YldGMExGeHVJQ0FnSUNBZ0lDQWdJR2RzUm0xMExuQnBlR1ZzVkhsd1pTeGNiaUFnSUNBZ0lDQWdJQ0JwYldkY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQmZjMlYwVFdsd2JXRndLR2x0WVdkbGN5d2dabXhwY0Zrc0lIQnlaVzExYkhScGNHeDVRV3h3YUdFcElIdGNiaUFnSUNCc1pYUWdaMnhHYlhRZ1BTQm5iRlJsZUhSMWNtVkdiWFFvZEdocGN5NWZabTl5YldGMEtUdGNiaUFnSUNCc1pYUWdiM0IwYVc5dWN5QTlJSHRjYmlBZ0lDQWdJSGRwWkhSb09pQjBhR2x6TGw5M2FXUjBhQ3hjYmlBZ0lDQWdJR2hsYVdkb2REb2dkR2hwY3k1ZmFHVnBaMmgwTEZ4dUlDQWdJQ0FnWm14cGNGazZJR1pzYVhCWkxGeHVJQ0FnSUNBZ2NISmxiWFZzZEdsd2JIbEJiSEJvWVRvZ2NISmxiWFZzZEdsd2JIbEJiSEJvWVN4Y2JpQWdJQ0FnSUd4bGRtVnNPaUF3TEZ4dUlDQWdJQ0FnYVcxaFoyVTZJRzUxYkd4Y2JpQWdJQ0I5TzF4dVhHNGdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCcGJXRm5aWE11YkdWdVozUm9PeUFySzJrcElIdGNiaUFnSUNBZ0lHOXdkR2x2Ym5NdWJHVjJaV3dnUFNCcE8xeHVJQ0FnSUNBZ2IzQjBhVzl1Y3k1M2FXUjBhQ0E5SUhSb2FYTXVYM2RwWkhSb0lENCtJR2s3WEc0Z0lDQWdJQ0J2Y0hScGIyNXpMbWhsYVdkb2RDQTlJSFJvYVhNdVgyaGxhV2RvZENBK1BpQnBPMXh1SUNBZ0lDQWdiM0IwYVc5dWN5NXBiV0ZuWlNBOUlHbHRZV2RsYzF0cFhUdGNiaUFnSUNBZ0lIUm9hWE11WDNObGRFbHRZV2RsS0dkc1JtMTBMQ0J2Y0hScGIyNXpLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JmYzJWMFZHVjRTVzVtYnlncElIdGNiaUFnSUNCc1pYUWdaMndnUFNCMGFHbHpMbDlrWlhacFkyVXVYMmRzTzF4dUlDQWdJR3hsZENCd2IzUWdQU0JwYzFCdmR6SW9kR2hwY3k1ZmQybGtkR2dwSUNZbUlHbHpVRzkzTWloMGFHbHpMbDlvWldsbmFIUXBPMXh1WEc0Z0lDQWdMeThnVjJWaVIwd3hJR1J2WlhOdUozUWdjM1Z3Y0c5eWRDQmhiR3dnZDNKaGNDQnRiMlJsY3lCM2FYUm9JRTVRVDFRZ2RHVjRkSFZ5WlhOY2JpQWdJQ0JwWmlBb0lYQnZkQ0FtSmlBb2RHaHBjeTVmZDNKaGNGTWdJVDA5SUdWdWRXMXpMbGRTUVZCZlEweEJUVkFnZkh3Z2RHaHBjeTVmZDNKaGNGUWdJVDA5SUdWdWRXMXpMbGRTUVZCZlEweEJUVkFwS1NCN1hHNGdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9KMWRsWWtkTU1TQmtiMlZ6Ymx4Y0ozUWdjM1Z3Y0c5eWRDQmhiR3dnZDNKaGNDQnRiMlJsY3lCM2FYUm9JRTVRVDFRZ2RHVjRkSFZ5WlhNbktUdGNiaUFnSUNBZ0lIUm9hWE11WDNkeVlYQlRJRDBnWlc1MWJYTXVWMUpCVUY5RFRFRk5VRHRjYmlBZ0lDQWdJSFJvYVhNdVgzZHlZWEJVSUQwZ1pXNTFiWE11VjFKQlVGOURURUZOVUR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JzWlhRZ2JXbHdSbWxzZEdWeUlEMGdkR2hwY3k1ZloyVnVUV2x3YldGd0lEOGdkR2hwY3k1ZmJXbHdSbWxzZEdWeUlEb2dMVEU3WEc0Z0lDQWdhV1lnS0NGd2IzUWdKaVlnYldsd1JtbHNkR1Z5SUNFOVBTQXRNU2tnZTF4dUlDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtDZE9VRTlVSUhSbGVIUjFjbVZ6SUdSdklHNXZkQ0J6ZFhCd2IzSjBJRzFwY0cxaGNDQm1hV3gwWlhJbktUdGNiaUFnSUNBZ0lHMXBjRVpwYkhSbGNpQTlJQzB4TzF4dUlDQWdJSDFjYmx4dUlDQWdJR2RzTG5SbGVGQmhjbUZ0WlhSbGNta29aMnd1VkVWWVZGVlNSVjh5UkN3Z1oyd3VWRVZZVkZWU1JWOU5TVTVmUmtsTVZFVlNMQ0JuYkVacGJIUmxjaWhuYkN3Z2RHaHBjeTVmYldsdVJtbHNkR1Z5TENCdGFYQkdhV3gwWlhJcEtUdGNiaUFnSUNCbmJDNTBaWGhRWVhKaGJXVjBaWEpwS0dkc0xsUkZXRlJWVWtWZk1rUXNJR2RzTGxSRldGUlZVa1ZmVFVGSFgwWkpURlJGVWl3Z1oyeEdhV3gwWlhJb1oyd3NJSFJvYVhNdVgyMWhaMFpwYkhSbGNpd2dMVEVwS1R0Y2JpQWdJQ0JuYkM1MFpYaFFZWEpoYldWMFpYSnBLR2RzTGxSRldGUlZVa1ZmTWtRc0lHZHNMbFJGV0ZSVlVrVmZWMUpCVUY5VExDQjBhR2x6TGw5M2NtRndVeWs3WEc0Z0lDQWdaMnd1ZEdWNFVHRnlZVzFsZEdWeWFTaG5iQzVVUlZoVVZWSkZYekpFTENCbmJDNVVSVmhVVlZKRlgxZFNRVkJmVkN3Z2RHaHBjeTVmZDNKaGNGUXBPMXh1WEc0Z0lDQWdiR1YwSUdWNGRDQTlJSFJvYVhNdVgyUmxkbWxqWlM1bGVIUW9KMFZZVkY5MFpYaDBkWEpsWDJacGJIUmxjbDloYm1semIzUnliM0JwWXljcE8xeHVJQ0FnSUdsbUlDaGxlSFFwSUh0Y2JpQWdJQ0FnSUdkc0xuUmxlRkJoY21GdFpYUmxjbWtvWjJ3dVZFVllWRlZTUlY4eVJDd2daWGgwTGxSRldGUlZVa1ZmVFVGWVgwRk9TVk5QVkZKUFVGbGZSVmhVTENCMGFHbHpMbDloYm1semIzUnliM0I1S1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjBpWFgwPSJdfQ==