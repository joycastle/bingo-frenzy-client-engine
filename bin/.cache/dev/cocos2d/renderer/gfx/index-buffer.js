(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/gfx/index-buffer.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _BYTES_PER_INDEX;
        var _enums = require('./enums');
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _defineProperty(obj, key, value) {
            if (key in obj) {
                Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: true,
                    configurable: true,
                    writable: true
                });
            } else {
                obj[key] = value;
            }
            return obj;
        }
        var BYTES_PER_INDEX = (_BYTES_PER_INDEX = {}, _defineProperty(_BYTES_PER_INDEX, _enums.enums.INDEX_FMT_UINT8, 1), _defineProperty(_BYTES_PER_INDEX, _enums.enums.INDEX_FMT_UINT16, 2), _defineProperty(_BYTES_PER_INDEX, _enums.enums.INDEX_FMT_UINT32, 4), _BYTES_PER_INDEX);
        var IndexBuffer = function () {
            function IndexBuffer(device, format, usage, data) {
                _classCallCheck(this, IndexBuffer);
                this._device = device;
                this._format = format;
                this._usage = usage;
                this._bytesPerIndex = BYTES_PER_INDEX[format];
                this._bytes = data.byteLength;
                this._numIndices = this._bytes / this._bytesPerIndex;
                this._needExpandDataStore = true;
                this._glID = device._gl.createBuffer();
                this.update(0, data);
                device._stats.ib += this._bytes;
            }
            _createClass(IndexBuffer, [
                {
                    key: 'destroy',
                    value: function destroy() {
                        if (this._glID === -1) {
                            console.error('The buffer already destroyed');
                            return;
                        }
                        var gl = this._device._gl;
                        gl.deleteBuffer(this._glID);
                        this._device._stats.ib -= this.bytes;
                        this._glID = -1;
                    }
                },
                {
                    key: 'update',
                    value: function update(byteOffset, data) {
                        if (this._glID === -1) {
                            console.error('The buffer is destroyed');
                            return;
                        }
                        if (data.byteLength === 0)
                            return;
                        if (byteOffset + data.byteLength > this._bytes) {
                            if (byteOffset) {
                                console.error('Failed to update data, bytes exceed.');
                                return;
                            } else {
                                this._needExpandDataStore = true;
                                this._bytes = byteOffset + data.byteLength;
                                this._numIndices = this._bytes / this._bytesPerIndex;
                            }
                        }
                        var gl = this._device._gl;
                        var glUsage = this._usage;
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._glID);
                        if (this._needExpandDataStore) {
                            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, glUsage);
                            this._needExpandDataStore = false;
                        } else {
                            gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, byteOffset, data);
                        }
                        this._device._restoreIndexBuffer();
                    }
                },
                {
                    key: 'setUsage',
                    value: function setUsage(usage) {
                        this._usage = usage;
                    }
                },
                {
                    key: 'count',
                    get: function get() {
                        return this._numIndices;
                    }
                }
            ]);
            return IndexBuffer;
        }();
        IndexBuffer.BYTES_PER_INDEX = BYTES_PER_INDEX;
        exports.default = IndexBuffer;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,