(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/gfx/index.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _enums = require('./enums');
        var gfx = null;
        if (CC_JSB && CC_NATIVERENDERER) {
            gfx = window.gfx;
        } else {
            var VertexFormat = require('./vertex-format');
            var IndexBuffer = require('./index-buffer');
            var VertexBuffer = require('./vertex-buffer');
            var Program = require('./program');
            var Texture = require('./texture');
            var Texture2D = require('./texture-2d');
            var TextureCube = require('./texture-cube');
            var RenderBuffer = require('./render-buffer');
            var FrameBuffer = require('./frame-buffer');
            var Device = require('./device');
            gfx = {
                VertexFormat: VertexFormat,
                IndexBuffer: IndexBuffer,
                VertexBuffer: VertexBuffer,
                Program: Program,
                Texture: Texture,
                Texture2D: Texture2D,
                TextureCube: TextureCube,
                RenderBuffer: RenderBuffer,
                FrameBuffer: FrameBuffer,
                Device: Device,
                attrTypeBytes: _enums.attrTypeBytes,
                glFilter: _enums.glFilter,
                glTextureFmt: _enums.glTextureFmt
            };
            Object.assign(gfx, _enums.enums);
        }
        exports.default = gfx;
        cc.gfx = gfx;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,