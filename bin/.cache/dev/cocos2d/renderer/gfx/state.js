(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/gfx/state.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _enums = require('./enums');
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var _default = {
            blend: false,
            blendSep: false,
            blendColor: 4294967295,
            blendEq: _enums.enums.BLEND_FUNC_ADD,
            blendAlphaEq: _enums.enums.BLEND_FUNC_ADD,
            blendSrc: _enums.enums.BLEND_ONE,
            blendDst: _enums.enums.BLEND_ZERO,
            blendSrcAlpha: _enums.enums.BLEND_ONE,
            blendDstAlpha: _enums.enums.BLEND_ZERO,
            depthTest: false,
            depthWrite: false,
            depthFunc: _enums.enums.DS_FUNC_LESS,
            stencilTest: false,
            stencilSep: false,
            stencilFuncFront: _enums.enums.DS_FUNC_ALWAYS,
            stencilRefFront: 0,
            stencilMaskFront: 255,
            stencilFailOpFront: _enums.enums.STENCIL_OP_KEEP,
            stencilZFailOpFront: _enums.enums.STENCIL_OP_KEEP,
            stencilZPassOpFront: _enums.enums.STENCIL_OP_KEEP,
            stencilWriteMaskFront: 255,
            stencilFuncBack: _enums.enums.DS_FUNC_ALWAYS,
            stencilRefBack: 0,
            stencilMaskBack: 255,
            stencilFailOpBack: _enums.enums.STENCIL_OP_KEEP,
            stencilZFailOpBack: _enums.enums.STENCIL_OP_KEEP,
            stencilZPassOpBack: _enums.enums.STENCIL_OP_KEEP,
            stencilWriteMaskBack: 255,
            cullMode: _enums.enums.CULL_BACK,
            primitiveType: _enums.enums.PT_TRIANGLES,
            maxStream: -1,
            vertexBuffers: [],
            vertexBufferOffsets: [],
            indexBuffer: null,
            maxTextureSlot: -1,
            textureUnits: [],
            program: null
        };
        var State = function () {
            function State(device) {
                _classCallCheck(this, State);
                this.vertexBuffers = new Array(device._caps.maxVertexStreams);
                this.vertexBufferOffsets = new Array(device._caps.maxVertexStreams);
                this.textureUnits = new Array(device._caps.maxTextureUnits);
                this.set(_default);
            }
            _createClass(State, [
                {
                    key: 'reset',
                    value: function reset() {
                        this.set(_default);
                    }
                },
                {
                    key: 'set',
                    value: function set(cpy) {
                        this.blend = cpy.blend;
                        this.blendSep = cpy.blendSep;
                        this.blendColor = cpy.blendColor;
                        this.blendEq = cpy.blendEq;
                        this.blendAlphaEq = cpy.blendAlphaEq;
                        this.blendSrc = cpy.blendSrc;
                        this.blendDst = cpy.blendDst;
                        this.blendSrcAlpha = cpy.blendSrcAlpha;
                        this.blendDstAlpha = cpy.blendDstAlpha;
                        this.depthTest = cpy.depthTest;
                        this.depthWrite = cpy.depthWrite;
                        this.depthFunc = cpy.depthFunc;
                        this.stencilTest = cpy.stencilTest;
                        this.stencilSep = cpy.stencilSep;
                        this.stencilFuncFront = cpy.stencilFuncFront;
                        this.stencilRefFront = cpy.stencilRefFront;
                        this.stencilMaskFront = cpy.stencilMaskFront;
                        this.stencilFailOpFront = cpy.stencilFailOpFront;
                        this.stencilZFailOpFront = cpy.stencilZFailOpFront;
                        this.stencilZPassOpFront = cpy.stencilZPassOpFront;
                        this.stencilWriteMaskFront = cpy.stencilWriteMaskFront;
                        this.stencilFuncBack = cpy.stencilFuncBack;
                        this.stencilRefBack = cpy.stencilRefBack;
                        this.stencilMaskBack = cpy.stencilMaskBack;
                        this.stencilFailOpBack = cpy.stencilFailOpBack;
                        this.stencilZFailOpBack = cpy.stencilZFailOpBack;
                        this.stencilZPassOpBack = cpy.stencilZPassOpBack;
                        this.stencilWriteMaskBack = cpy.stencilWriteMaskBack;
                        this.cullMode = cpy.cullMode;
                        this.primitiveType = cpy.primitiveType;
                        this.maxStream = cpy.maxStream;
                        for (var i = 0; i < cpy.vertexBuffers.length; ++i) {
                            this.vertexBuffers[i] = cpy.vertexBuffers[i];
                        }
                        for (var _i = 0; _i < cpy.vertexBufferOffsets.length; ++_i) {
                            this.vertexBufferOffsets[_i] = cpy.vertexBufferOffsets[_i];
                        }
                        this.indexBuffer = cpy.indexBuffer;
                        this.maxTextureSlot = cpy.maxTextureSlot;
                        for (var _i2 = 0; _i2 < cpy.textureUnits.length; ++_i2) {
                            this.textureUnits[_i2] = cpy.textureUnits[_i2];
                        }
                        this.program = cpy.program;
                    }
                }
            ], [{
                    key: 'initDefault',
                    value: function initDefault(device) {
                        _default.vertexBuffers = new Array(device._caps.maxVertexStreams);
                        _default.vertexBufferOffsets = new Array(device._caps.maxVertexStreams);
                        _default.textureUnits = new Array(device._caps.maxTextureUnits);
                    }
                }]);
            return State;
        }();
        exports.default = State;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,