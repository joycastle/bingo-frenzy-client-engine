(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/gfx/texture-cube.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _texture = require('./texture');
        var _texture2 = _interopRequireDefault(_texture);
        var _enums = require('./enums');
        var _misc = require('./misc');
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var TextureCube = function (_Texture) {
            _inherits(TextureCube, _Texture);
            function TextureCube(device, options) {
                _classCallCheck(this, TextureCube);
                var _this = _possibleConstructorReturn(this, (TextureCube.__proto__ || Object.getPrototypeOf(TextureCube)).call(this, device));
                var gl = _this._device._gl;
                _this._target = gl.TEXTURE_CUBE_MAP;
                _this._glID = gl.createTexture();
                _this.update(options);
                return _this;
            }
            _createClass(TextureCube, [
                {
                    key: 'update',
                    value: function update(options) {
                        var gl = this._device._gl;
                        var genMipmaps = this._genMipmaps;
                        if (options) {
                            if (options.width !== undefined) {
                                this._width = options.width;
                            }
                            if (options.height !== undefined) {
                                this._height = options.height;
                            }
                            if (options.anisotropy !== undefined) {
                                this._anisotropy = options.anisotropy;
                            }
                            if (options.minFilter !== undefined) {
                                this._minFilter = options.minFilter;
                            }
                            if (options.magFilter !== undefined) {
                                this._magFilter = options.magFilter;
                            }
                            if (options.mipFilter !== undefined) {
                                this._mipFilter = options.mipFilter;
                            }
                            if (options.wrapS !== undefined) {
                                this._wrapS = options.wrapS;
                            }
                            if (options.wrapT !== undefined) {
                                this._wrapT = options.wrapT;
                            }
                            if (options.format !== undefined) {
                                this._format = options.format;
                                this._compressed = this._format >= _enums.enums.TEXTURE_FMT_RGB_DXT1 && this._format <= _enums.enums.TEXTURE_FMT_RGBA_PVRTC_4BPPV1 || this._format >= _enums.enums.TEXTURE_FMT_RGB_ETC2 && this._format <= _enums.enums.TEXTURE_FMT_RGBA_ETC2;
                            }
                            if (options.genMipmaps !== undefined) {
                                this._genMipmaps = options.genMipmaps;
                                genMipmaps = options.genMipmaps;
                            }
                            if (options.images !== undefined) {
                                if (options.images.length > 1) {
                                    genMipmaps = false;
                                    if (options.width !== options.height) {
                                        console.warn('texture-cube width and height should be identical.');
                                    }
                                    if (options.width >> options.images.length - 1 !== 1) {
                                        console.error('texture-cube mipmap is invalid. please set mipmap as 1x1, 2x2, 4x4 ... nxn');
                                    }
                                }
                            }
                        }
                        var pot = (0, _misc.isPow2)(this._width) && (0, _misc.isPow2)(this._height);
                        if (!pot) {
                            genMipmaps = false;
                        }
                        gl.activeTexture(gl.TEXTURE0);
                        gl.bindTexture(gl.TEXTURE_CUBE_MAP, this._glID);
                        if (options.images !== undefined && options.images.length > 0) {
                            this._setMipmap(options.images, options.flipY, options.premultiplyAlpha);
                            if (options.images.length > 1)
                                this._genMipmaps = true;
                        }
                        if (genMipmaps) {
                            gl.hint(gl.GENERATE_MIPMAP_HINT, gl.NICEST);
                            gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
                            this._genMipmaps = true;
                        }
                        this._setTexInfo();
                        this._device._restoreTexture(0);
                    }
                },
                {
                    key: 'updateSubImage',
                    value: function updateSubImage(options) {
                        var gl = this._device._gl;
                        var glFmt = (0, _enums.glTextureFmt)(this._format);
                        gl.activeTexture(gl.TEXTURE0);
                        gl.bindTexture(gl.TEXTURE_CUBE_MAP, this._glID);
                        this._setSubImage(glFmt, options);
                        this._device._restoreTexture(0);
                    }
                },
                {
                    key: 'updateImage',
                    value: function updateImage(options) {
                        var gl = this._device._gl;
                        var glFmt = (0, _enums.glTextureFmt)(this._format);
                        gl.activeTexture(gl.TEXTURE0);
                        gl.bindTexture(gl.TEXTURE_CUBE_MAP, this._glID);
                        this._setImage(glFmt, options);
                        this._device._restoreTexture(0);
                    }
                },
                {
                    key: '_setSubImage',
                    value: function _setSubImage(glFmt, options) {
                        var gl = this._device._gl;
                        var flipY = options.flipY;
                        var premultiplyAlpha = options.premultiplyAlpha;
                        var faceIndex = options.faceIndex;
                        var img = options.image;
                        if (flipY === undefined) {
                            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
                        } else {
                            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
                        }
                        if (premultiplyAlpha === undefined) {
                            gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
                        } else {
                            gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultiplyAlpha);
                        }
                        if (img && !ArrayBuffer.isView(img) && !(img instanceof ArrayBuffer)) {
                            gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, options.level, options.x, options.y, glFmt.format, glFmt.pixelType, img);
                        } else {
                            if (this._compressed) {
                                gl.compressedTexSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, options.level, options.x, options.y, options.width, options.height, glFmt.format, img);
                            } else {
                                gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, options.level, options.x, options.y, options.width, options.height, glFmt.format, glFmt.pixelType, img);
                            }
                        }
                    }
                },
                {
                    key: '_setImage',
                    value: function _setImage(glFmt, options) {
                        var gl = this._device._gl;
                        var flipY = options.flipY;
                        var premultiplyAlpha = options.premultiplyAlpha;
                        var faceIndex = options.faceIndex;
                        var img = options.image;
                        if (flipY === undefined) {
                            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
                        } else {
                            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
                        }
                        if (premultiplyAlpha === undefined) {
                            gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
                        } else {
                            gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultiplyAlpha);
                        }
                        if (img && !ArrayBuffer.isView(img) && !(img instanceof ArrayBuffer)) {
                            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, options.level, glFmt.internalFormat, glFmt.format, glFmt.pixelType, img);
                        } else {
                            if (this._compressed) {
                                gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, options.level, glFmt.internalFormat, options.width, options.height, 0, img);
                            } else {
                                gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, options.level, glFmt.internalFormat, options.width, options.height, 0, glFmt.format, glFmt.pixelType, img);
                            }
                        }
                    }
                },
                {
                    key: '_setMipmap',
                    value: function _setMipmap(images, flipY, premultiplyAlpha) {
                        var glFmt = (0, _enums.glTextureFmt)(this._format);
                        var options = {
                            width: this._width,
                            height: this._height,
                            faceIndex: 0,
                            flipY: flipY,
                            premultiplyAlpha: premultiplyAlpha,
                            level: 0,
                            image: null
                        };
                        for (var i = 0; i < images.length; ++i) {
                            var levelImages = images[i];
                            options.level = i;
                            options.width = this._width >> i;
                            options.height = this._height >> i;
                            for (var face = 0; face < 6; ++face) {
                                options.faceIndex = face;
                                options.image = levelImages[face];
                                this._setImage(glFmt, options);
                            }
                        }
                    }
                },
                {
                    key: '_setTexInfo',
                    value: function _setTexInfo() {
                        var gl = this._device._gl;
                        var pot = (0, _misc.isPow2)(this._width) && (0, _misc.isPow2)(this._height);
                        if (!pot && (this._wrapS !== _enums.enums.WRAP_CLAMP || this._wrapT !== _enums.enums.WRAP_CLAMP)) {
                            console.warn('WebGL1 doesn\'t support all wrap modes with NPOT textures');
                            this._wrapS = _enums.enums.WRAP_CLAMP;
                            this._wrapT = _enums.enums.WRAP_CLAMP;
                        }
                        var mipFilter = this._genMipmaps ? this._mipFilter : -1;
                        if (!pot && mipFilter !== -1) {
                            console.warn('NPOT textures do not support mipmap filter');
                            mipFilter = -1;
                        }
                        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, (0, _enums.glFilter)(gl, this._minFilter, mipFilter));
                        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, (0, _enums.glFilter)(gl, this._magFilter, -1));
                        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, this._wrapS);
                        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, this._wrapT);
                        var ext = this._device.ext('EXT_texture_filter_anisotropic');
                        if (ext) {
                            gl.texParameteri(gl.TEXTURE_CUBE_MAP, ext.TEXTURE_MAX_ANISOTROPY_EXT, this._anisotropy);
                        }
                    }
                }
            ]);
            return TextureCube;
        }(_texture2.default);
        exports.default = TextureCube;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,