(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/renderers/forward-renderer.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _get = function get(object, property, receiver) {
            if (object === null)
                object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);
            if (desc === undefined) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                    return undefined;
                } else {
                    return get(parent, property, receiver);
                }
            } else if ('value' in desc) {
                return desc.value;
            } else {
                var getter = desc.get;
                if (getter === undefined) {
                    return undefined;
                }
                return getter.call(receiver);
            }
        };
        var _vmath = require('../../core/vmath');
        var _baseRenderer = require('../core/base-renderer');
        var _baseRenderer2 = _interopRequireDefault(_baseRenderer);
        var _enums = require('../enums');
        var _enums2 = _interopRequireDefault(_enums);
        var _memop = require('../memop');
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var _a16_view = new Float32Array(16);
        var _a16_proj = new Float32Array(16);
        var _a16_viewProj = new Float32Array(16);
        var _a4_camPos = new Float32Array(4);
        var _a64_shadow_lightViewProj = new Float32Array(64);
        var _a16_shadow_lightViewProjs = [];
        var _a4_shadow_info = new Float32Array(4);
        var _camPos = cc.v4(0, 0, 0, 0);
        var _camFwd = cc.v3(0, 0, 0);
        var _v3_tmp1 = cc.v3(0, 0, 0);
        var CC_MAX_LIGHTS = 4;
        var _float16_pool = new _memop.RecyclePool(function () {
            return new Float32Array(16);
        }, 8);
        var ForwardRenderer = function (_BaseRenderer) {
            _inherits(ForwardRenderer, _BaseRenderer);
            function ForwardRenderer(device, builtin) {
                _classCallCheck(this, ForwardRenderer);
                var _this = _possibleConstructorReturn(this, (ForwardRenderer.__proto__ || Object.getPrototypeOf(ForwardRenderer)).call(this, device, builtin));
                _this._time = new Float32Array(4);
                _this._directionalLights = [];
                _this._pointLights = [];
                _this._spotLights = [];
                _this._shadowLights = [];
                _this._ambientLights = [];
                _this._shadowMaps = [];
                _this._shadowMapSlots = new Int32Array(4);
                _this._numLights = 0;
                _this._defines = {};
                _this._registerStage('shadowcast', _this._shadowStage.bind(_this));
                _this._registerStage('opaque', _this._opaqueStage.bind(_this));
                _this._registerStage('transparent', _this._transparentStage.bind(_this));
                return _this;
            }
            _createClass(ForwardRenderer, [
                {
                    key: 'reset',
                    value: function reset() {
                        _float16_pool.reset();
                        _get(ForwardRenderer.prototype.__proto__ || Object.getPrototypeOf(ForwardRenderer.prototype), 'reset', this).call(this);
                    }
                },
                {
                    key: 'render',
                    value: function render(scene, dt) {
                        this.reset();
                        if (!CC_EDITOR) {
                            this._time[0] += dt;
                            this._device.setUniform('cc_time', this._time);
                        }
                        this._updateLights(scene);
                        var canvas = this._device._gl.canvas;
                        for (var i = 0; i < scene._cameras.length; ++i) {
                            var view = this._requestView();
                            var width = canvas.width;
                            var height = canvas.height;
                            var camera = scene._cameras.data[i];
                            camera.extractView(view, width, height);
                        }
                        this._viewPools.sort(function (a, b) {
                            return a._priority - b._priority;
                        });
                        for (var _i = 0; _i < this._viewPools.length; ++_i) {
                            var _view = this._viewPools.data[_i];
                            this._render(_view, scene);
                        }
                    }
                },
                {
                    key: 'renderCamera',
                    value: function renderCamera(camera, scene) {
                        this.reset();
                        var canvas = this._device._gl.canvas;
                        var width = canvas.width;
                        var height = canvas.height;
                        var view = this._requestView();
                        camera.extractView(view, width, height);
                        this._render(view, scene);
                    }
                },
                {
                    key: '_updateLights',
                    value: function _updateLights(scene) {
                        this._directionalLights.length = 0;
                        this._pointLights.length = 0;
                        this._spotLights.length = 0;
                        this._shadowLights.length = 0;
                        this._ambientLights.length = 0;
                        var lights = scene._lights;
                        for (var i = 0; i < lights.length; ++i) {
                            var light = lights.data[i];
                            light.update(this._device);
                            if (light.shadowType !== _enums2.default.SHADOW_NONE) {
                                this._shadowLights.push(light);
                                var view = this._requestView();
                                light.extractView(view, ['shadowcast']);
                            }
                            if (light._type === _enums2.default.LIGHT_DIRECTIONAL) {
                                this._directionalLights.push(light);
                            } else if (light._type === _enums2.default.LIGHT_POINT) {
                                this._pointLights.push(light);
                            } else if (light._type === _enums2.default.LIGHT_SPOT) {
                                this._spotLights.push(light);
                            } else {
                                this._ambientLights.push(light);
                            }
                        }
                        this._updateDefines();
                        this._numLights = lights._count;
                    }
                },
                {
                    key: '_updateDefines',
                    value: function _updateDefines() {
                        var defines = this._defines;
                        defines.CC_NUM_DIR_LIGHTS = Math.min(CC_MAX_LIGHTS, this._directionalLights.length);
                        defines.CC_NUM_POINT_LIGHTS = Math.min(CC_MAX_LIGHTS, this._pointLights.length);
                        defines.CC_NUM_SPOT_LIGHTS = Math.min(CC_MAX_LIGHTS, this._spotLights.length);
                        defines.CC_NUM_AMBIENT_LIGHTS = Math.min(CC_MAX_LIGHTS, this._ambientLights.length);
                        defines.CC_NUM_SHADOW_LIGHTS = Math.min(CC_MAX_LIGHTS, this._shadowLights.length);
                    }
                },
                {
                    key: '_submitLightsUniforms',
                    value: function _submitLightsUniforms() {
                        var device = this._device;
                        if (this._directionalLights.length > 0) {
                            var directions = _float16_pool.add();
                            var colors = _float16_pool.add();
                            var lightNum = Math.min(CC_MAX_LIGHTS, this._directionalLights.length);
                            for (var i = 0; i < lightNum; ++i) {
                                var light = this._directionalLights[i];
                                var index = i * 4;
                                directions.set(light._directionUniform, index);
                                colors.set(light._colorUniform, index);
                            }
                            device.setUniform('cc_dirLightDirection', directions);
                            device.setUniform('cc_dirLightColor', colors);
                        }
                        if (this._pointLights.length > 0) {
                            var positionAndRanges = _float16_pool.add();
                            var _colors = _float16_pool.add();
                            var _lightNum = Math.min(CC_MAX_LIGHTS, this._pointLights.length);
                            for (var _i2 = 0; _i2 < _lightNum; ++_i2) {
                                var _light = this._pointLights[_i2];
                                var _index = _i2 * 4;
                                positionAndRanges.set(_light._positionUniform, _index);
                                positionAndRanges[_index + 3] = _light._range;
                                _colors.set(_light._colorUniform, _index);
                            }
                            device.setUniform('cc_pointLightPositionAndRange', positionAndRanges);
                            device.setUniform('cc_pointLightColor', _colors);
                        }
                        if (this._spotLights.length > 0) {
                            var _positionAndRanges = _float16_pool.add();
                            var _directions = _float16_pool.add();
                            var _colors2 = _float16_pool.add();
                            var _lightNum2 = Math.min(CC_MAX_LIGHTS, this._spotLights.length);
                            for (var _i3 = 0; _i3 < _lightNum2; ++_i3) {
                                var _light2 = this._spotLights[_i3];
                                var _index2 = _i3 * 4;
                                _positionAndRanges.set(_light2._positionUniform, _index2);
                                _positionAndRanges[_index2 + 3] = _light2._range;
                                _directions.set(_light2._directionUniform, _index2);
                                _directions[_index2 + 3] = _light2._spotUniform[0];
                                _colors2.set(_light2._colorUniform, _index2);
                                _colors2[_index2 + 3] = _light2._spotUniform[1];
                            }
                            device.setUniform('cc_spotLightPositionAndRange', _positionAndRanges);
                            device.setUniform('cc_spotLightDirection', _directions);
                            device.setUniform('cc_spotLightColor', _colors2);
                        }
                        if (this._ambientLights.length > 0) {
                            var _colors3 = _float16_pool.add();
                            var _lightNum3 = Math.min(CC_MAX_LIGHTS, this._ambientLights.length);
                            for (var _i4 = 0; _i4 < _lightNum3; ++_i4) {
                                var _light3 = this._ambientLights[_i4];
                                var _index3 = _i4 * 4;
                                _colors3.set(_light3._colorUniform, _index3);
                            }
                            device.setUniform('cc_ambientColor', _colors3);
                        }
                    }
                },
                {
                    key: '_submitShadowStageUniforms',
                    value: function _submitShadowStageUniforms(view) {
                        var light = view._shadowLight;
                        var shadowInfo = _a4_shadow_info;
                        shadowInfo[0] = light.shadowMinDepth;
                        shadowInfo[1] = light.shadowMaxDepth;
                        shadowInfo[2] = light.shadowDepthScale;
                        shadowInfo[3] = light.shadowDarkness;
                        this._device.setUniform('cc_shadow_map_lightViewProjMatrix', _vmath.mat4.array(_a16_viewProj, view._matViewProj));
                        this._device.setUniform('cc_shadow_map_info', shadowInfo);
                        this._device.setUniform('cc_shadow_map_bias', light.shadowBias);
                    }
                },
                {
                    key: '_submitOtherStagesUniforms',
                    value: function _submitOtherStagesUniforms() {
                        var shadowInfo = _float16_pool.add();
                        for (var i = 0; i < this._shadowLights.length; ++i) {
                            var light = this._shadowLights[i];
                            var view = _a16_shadow_lightViewProjs[i];
                            if (!view) {
                                view = _a16_shadow_lightViewProjs[i] = new Float32Array(_a64_shadow_lightViewProj.buffer, i * 16, 16);
                            }
                            _vmath.mat4.array(view, light.viewProjMatrix);
                            var infoIndex = i * 4;
                            shadowInfo[infoIndex] = light.shadowMinDepth;
                            shadowInfo[infoIndex + 1] = light.shadowMaxDepth;
                            shadowInfo[infoIndex + 2] = light.shadowDepthScale;
                            shadowInfo[infoIndex + 3] = light.shadowDarkness;
                        }
                        this._device.setUniform('cc_shadow_lightViewProjMatrix', _a64_shadow_lightViewProj);
                        this._device.setUniform('cc_shadow_info', shadowInfo);
                    }
                },
                {
                    key: '_updateShaderDefines',
                    value: function _updateShaderDefines(item) {
                        item.defines.push(this._defines);
                    }
                },
                {
                    key: '_sortItems',
                    value: function _sortItems(items) {
                        items.sort(function (a, b) {
                            var techA = a.technique;
                            var techB = b.technique;
                            if (techA._layer !== techB._layer) {
                                return techA._layer - techB._layer;
                            }
                            if (techA._passes.length !== techB._passes.length) {
                                return techA._passes.length - techB._passes.length;
                            }
                            return a.sortKey - b.sortKey;
                        });
                    }
                },
                {
                    key: '_shadowStage',
                    value: function _shadowStage(view, items) {
                        this._submitShadowStageUniforms(view);
                        for (var i = 0; i < items.length; ++i) {
                            var item = items.data[i];
                            if (this._programLib._getValueFromDefineList('CC_SHADOW_CASTING', item.defines)) {
                                this._updateShaderDefines(item);
                                this._draw(item);
                            }
                        }
                    }
                },
                {
                    key: '_drawItems',
                    value: function _drawItems(view, items) {
                        var shadowLights = this._shadowLights;
                        if (shadowLights.length === 0 && this._numLights === 0) {
                            for (var i = 0; i < items.length; ++i) {
                                var item = items.data[i];
                                this._updateShaderDefines(item);
                                this._draw(item);
                            }
                        } else {
                            for (var _i5 = 0; _i5 < items.length; ++_i5) {
                                var _item = items.data[_i5];
                                this._shadowMaps.length = shadowLights.length;
                                for (var index = 0; index < shadowLights.length; ++index) {
                                    var light = shadowLights[index];
                                    this._shadowMaps[index] = light.shadowMap;
                                    this._shadowMapSlots[index] = this._allocTextureUnit();
                                }
                                this._device.setTextureArray('cc_shadow_map', this._shadowMaps, this._shadowMapSlots);
                                this._updateShaderDefines(_item);
                                this._draw(_item);
                            }
                        }
                    }
                },
                {
                    key: '_opaqueStage',
                    value: function _opaqueStage(view, items) {
                        view.getPosition(_camPos);
                        this._device.setUniform('cc_matView', _vmath.mat4.array(_a16_view, view._matView));
                        this._device.setUniform('cc_matpProj', _vmath.mat4.array(_a16_proj, view._matProj));
                        this._device.setUniform('cc_matViewProj', _vmath.mat4.array(_a16_viewProj, view._matViewProj));
                        this._device.setUniform('cc_cameraPos', _vmath.vec4.array(_a4_camPos, _camPos));
                        this._submitLightsUniforms();
                        this._submitOtherStagesUniforms();
                        this._drawItems(view, items);
                    }
                },
                {
                    key: '_transparentStage',
                    value: function _transparentStage(view, items) {
                        view.getPosition(_camPos);
                        view.getForward(_camFwd);
                        this._device.setUniform('cc_matView', _vmath.mat4.array(_a16_view, view._matView));
                        this._device.setUniform('cc_matpProj', _vmath.mat4.array(_a16_proj, view._matProj));
                        this._device.setUniform('cc_matViewProj', _vmath.mat4.array(_a16_viewProj, view._matViewProj));
                        this._device.setUniform('cc_cameraPos', _vmath.vec4.array(_a4_camPos, _camPos));
                        this._submitLightsUniforms();
                        this._submitOtherStagesUniforms();
                        for (var i = 0; i < items.length; ++i) {
                            var item = items.data[i];
                            item.node.getWorldPosition(_v3_tmp1);
                            _vmath.vec3.sub(_v3_tmp1, _v3_tmp1, _camPos);
                            item.sortKey = -_vmath.vec3.dot(_v3_tmp1, _camFwd);
                        }
                        this._sortItems(items);
                        this._drawItems(view, items);
                    }
                }
            ]);
            return ForwardRenderer;
        }(_baseRenderer2.default);
        exports.default = ForwardRenderer;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,