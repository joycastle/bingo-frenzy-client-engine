(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/scene/light.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _vmath = require('../../core/vmath');
        var _gfx = require('../gfx');
        var _gfx2 = _interopRequireDefault(_gfx);
        var _enums = require('../enums');
        var _enums2 = _interopRequireDefault(_enums);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var _forward = _vmath.vec3.create(0, 0, -1);
        var _m4_tmp = _vmath.mat4.create();
        var _m3_tmp = _vmath.mat3.create();
        var _transformedLightDirection = _vmath.vec3.create(0, 0, 0);
        function _computeSpotLightViewProjMatrix(light, outView, outProj) {
            light._node.getWorldRT(outView);
            _vmath.mat4.invert(outView, outView);
            _vmath.mat4.perspective(outProj, light._spotAngle * light._spotAngleScale, 1, light._shadowMinDepth, light._shadowMaxDepth);
        }
        function _computeDirectionalLightViewProjMatrix(light, outView, outProj) {
            light._node.getWorldRT(outView);
            _vmath.mat4.invert(outView, outView);
            var halfSize = light._shadowFrustumSize / 2;
            _vmath.mat4.ortho(outProj, -halfSize, halfSize, -halfSize, halfSize, light._shadowMinDepth, light._shadowMaxDepth);
        }
        function _computePointLightViewProjMatrix(light, outView, outProj) {
            light._node.getWorldRT(outView);
            _vmath.mat4.invert(outView, outView);
            _vmath.mat4.perspective(outProj, (0, _vmath.toRadian)(179), 1, light._shadowMinDepth, light._shadowMaxDepth);
        }
        var Light = function () {
            function Light() {
                _classCallCheck(this, Light);
                this._poolID = -1;
                this._node = null;
                this._type = _enums2.default.LIGHT_DIRECTIONAL;
                this._color = _vmath.color3.create(1, 1, 1);
                this._intensity = 1;
                this._range = 1;
                this._spotAngle = (0, _vmath.toRadian)(60);
                this._spotExp = 1;
                this._directionUniform = new Float32Array(3);
                this._positionUniform = new Float32Array(3);
                this._colorUniform = new Float32Array([
                    this._color.r * this._intensity,
                    this._color.g * this._intensity,
                    this._color.b * this._intensity
                ]);
                this._spotUniform = new Float32Array([
                    Math.cos(this._spotAngle * 0.5),
                    this._spotExp
                ]);
                this._shadowType = _enums2.default.SHADOW_NONE;
                this._shadowFrameBuffer = null;
                this._shadowMap = null;
                this._shadowMapDirty = false;
                this._shadowDepthBuffer = null;
                this._shadowResolution = 1024;
                this._shadowBias = 0.0005;
                this._shadowDarkness = 1;
                this._shadowMinDepth = 1;
                this._shadowMaxDepth = 1000;
                this._shadowDepthScale = 50;
                this._frustumEdgeFalloff = 0;
                this._viewProjMatrix = _vmath.mat4.create();
                this._spotAngleScale = 1;
                this._shadowFrustumSize = 50;
            }
            _createClass(Light, [
                {
                    key: 'getNode',
                    value: function getNode() {
                        return this._node;
                    }
                },
                {
                    key: 'setNode',
                    value: function setNode(node) {
                        this._node = node;
                    }
                },
                {
                    key: 'setColor',
                    value: function setColor(r, g, b) {
                        _vmath.color3.set(this._color, r, g, b);
                        this._colorUniform[0] = r * this._intensity;
                        this._colorUniform[1] = g * this._intensity;
                        this._colorUniform[2] = b * this._intensity;
                    }
                },
                {
                    key: 'setIntensity',
                    value: function setIntensity(val) {
                        this._intensity = val;
                        this._colorUniform[0] = val * this._color.r;
                        this._colorUniform[1] = val * this._color.g;
                        this._colorUniform[2] = val * this._color.b;
                    }
                },
                {
                    key: 'setType',
                    value: function setType(type) {
                        this._type = type;
                    }
                },
                {
                    key: 'setSpotAngle',
                    value: function setSpotAngle(val) {
                        this._spotAngle = val;
                        this._spotUniform[0] = Math.cos(this._spotAngle * 0.5);
                    }
                },
                {
                    key: 'setSpotExp',
                    value: function setSpotExp(val) {
                        this._spotExp = val;
                        this._spotUniform[1] = val;
                    }
                },
                {
                    key: 'setRange',
                    value: function setRange(val) {
                        this._range = val;
                    }
                },
                {
                    key: 'setShadowType',
                    value: function setShadowType(type) {
                        if (this._shadowType === _enums2.default.SHADOW_NONE && type !== _enums2.default.SHADOW_NONE) {
                            this._shadowMapDirty = true;
                        }
                        this._shadowType = type;
                    }
                },
                {
                    key: 'setShadowResolution',
                    value: function setShadowResolution(val) {
                        if (this._shadowResolution !== val) {
                            this._shadowMapDirty = true;
                        }
                        this._shadowResolution = val;
                    }
                },
                {
                    key: 'setShadowBias',
                    value: function setShadowBias(val) {
                        this._shadowBias = val;
                    }
                },
                {
                    key: 'setShadowDarkness',
                    value: function setShadowDarkness(val) {
                        this._shadowDarkness = val;
                    }
                },
                {
                    key: 'setShadowMinDepth',
                    value: function setShadowMinDepth(val) {
                        this._shadowMinDepth = val;
                    }
                },
                {
                    key: 'setShadowMaxDepth',
                    value: function setShadowMaxDepth(val) {
                        this._shadowMaxDepth = val;
                    }
                },
                {
                    key: 'setShadowDepthScale',
                    value: function setShadowDepthScale(val) {
                        this._shadowDepthScale = val;
                    }
                },
                {
                    key: 'setFrustumEdgeFalloff',
                    value: function setFrustumEdgeFalloff(val) {
                        this._frustumEdgeFalloff = val;
                    }
                },
                {
                    key: 'setShadowFrustumSize',
                    value: function setShadowFrustumSize(val) {
                        this._shadowFrustumSize = val;
                    }
                },
                {
                    key: 'extractView',
                    value: function extractView(out, stages) {
                        out._shadowLight = this;
                        out._priority = -1;
                        out._rect.x = 0;
                        out._rect.y = 0;
                        out._rect.w = this._shadowResolution;
                        out._rect.h = this._shadowResolution;
                        _vmath.color4.set(out._color, 1, 1, 1, 1);
                        out._depth = 1;
                        out._stencil = 1;
                        out._clearFlags = _enums2.default.CLEAR_COLOR | _enums2.default.CLEAR_DEPTH;
                        out._stages = stages;
                        out._framebuffer = this._shadowFrameBuffer;
                        switch (this._type) {
                        case _enums2.default.LIGHT_SPOT:
                            _computeSpotLightViewProjMatrix(this, out._matView, out._matProj);
                            break;
                        case _enums2.default.LIGHT_DIRECTIONAL:
                            _computeDirectionalLightViewProjMatrix(this, out._matView, out._matProj);
                            break;
                        case _enums2.default.LIGHT_POINT:
                            _computePointLightViewProjMatrix(this, out._matView, out._matProj);
                            break;
                        case _enums2.default.LIGHT_AMBIENT:
                            break;
                        default:
                            console.warn('shadow of this light type is not supported');
                        }
                        _vmath.mat4.mul(out._matViewProj, out._matProj, out._matView);
                        this._viewProjMatrix = out._matViewProj;
                        _vmath.mat4.invert(out._matInvViewProj, out._matViewProj);
                        out._cullingMask = 4294967295;
                    }
                },
                {
                    key: '_updateLightPositionAndDirection',
                    value: function _updateLightPositionAndDirection() {
                        this._node.getWorldMatrix(_m4_tmp);
                        _vmath.mat3.fromMat4(_m3_tmp, _m4_tmp);
                        _vmath.vec3.transformMat3(_transformedLightDirection, _forward, _m3_tmp);
                        _vmath.vec3.array(this._directionUniform, _transformedLightDirection);
                        var pos = this._positionUniform;
                        var m = _m4_tmp.m;
                        pos[0] = m[12];
                        pos[1] = m[13];
                        pos[2] = m[14];
                    }
                },
                {
                    key: '_generateShadowMap',
                    value: function _generateShadowMap(device) {
                        this._shadowMap = new _gfx2.default.Texture2D(device, {
                            width: this._shadowResolution,
                            height: this._shadowResolution,
                            format: _gfx2.default.TEXTURE_FMT_RGBA8,
                            wrapS: _gfx2.default.WRAP_CLAMP,
                            wrapT: _gfx2.default.WRAP_CLAMP
                        });
                        this._shadowDepthBuffer = new _gfx2.default.RenderBuffer(device, _gfx2.default.RB_FMT_D16, this._shadowResolution, this._shadowResolution);
                        this._shadowFrameBuffer = new _gfx2.default.FrameBuffer(device, this._shadowResolution, this._shadowResolution, {
                            colors: [this._shadowMap],
                            depth: this._shadowDepthBuffer
                        });
                    }
                },
                {
                    key: '_destroyShadowMap',
                    value: function _destroyShadowMap() {
                        if (this._shadowMap) {
                            this._shadowMap.destroy();
                            this._shadowDepthBuffer.destroy();
                            this._shadowFrameBuffer.destroy();
                            this._shadowMap = null;
                            this._shadowDepthBuffer = null;
                            this._shadowFrameBuffer = null;
                        }
                    }
                },
                {
                    key: 'update',
                    value: function update(device) {
                        this._updateLightPositionAndDirection();
                        if (this._shadowType === _enums2.default.SHADOW_NONE) {
                            this._destroyShadowMap();
                        } else if (this._shadowMapDirty) {
                            this._destroyShadowMap();
                            this._generateShadowMap(device);
                            this._shadowMapDirty = false;
                        }
                    }
                },
                {
                    key: 'color',
                    get: function get() {
                        return this._color;
                    }
                },
                {
                    key: 'intensity',
                    get: function get() {
                        return this._intensity;
                    }
                },
                {
                    key: 'type',
                    get: function get() {
                        return this._type;
                    }
                },
                {
                    key: 'spotAngle',
                    get: function get() {
                        return this._spotAngle;
                    }
                },
                {
                    key: 'spotExp',
                    get: function get() {
                        return this._spotExp;
                    }
                },
                {
                    key: 'range',
                    get: function get() {
                        return this._range;
                    }
                },
                {
                    key: 'shadowType',
                    get: function get() {
                        return this._shadowType;
                    }
                },
                {
                    key: 'shadowMap',
                    get: function get() {
                        return this._shadowMap;
                    }
                },
                {
                    key: 'viewProjMatrix',
                    get: function get() {
                        return this._viewProjMatrix;
                    }
                },
                {
                    key: 'shadowResolution',
                    get: function get() {
                        return this._shadowResolution;
                    }
                },
                {
                    key: 'shadowBias',
                    get: function get() {
                        return this._shadowBias;
                    }
                },
                {
                    key: 'shadowDarkness',
                    get: function get() {
                        return this._shadowDarkness;
                    }
                },
                {
                    key: 'shadowMinDepth',
                    get: function get() {
                        if (this._type === _enums2.default.LIGHT_DIRECTIONAL) {
                            return 1;
                        }
                        return this._shadowMinDepth;
                    }
                },
                {
                    key: 'shadowMaxDepth',
                    get: function get() {
                        if (this._type === _enums2.default.LIGHT_DIRECTIONAL) {
                            return 1;
                        }
                        return this._shadowMaxDepth;
                    }
                },
                {
                    key: 'shadowDepthScale',
                    get: function get() {
                        return this._shadowDepthScale;
                    }
                },
                {
                    key: 'frustumEdgeFalloff',
                    get: function get() {
                        return this._frustumEdgeFalloff;
                    }
                },
                {
                    key: 'shadowFrustumSize',
                    get: function get() {
                        return this._shadowFrustumSize;
                    }
                }
            ]);
            return Light;
        }();
        exports.default = Light;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,