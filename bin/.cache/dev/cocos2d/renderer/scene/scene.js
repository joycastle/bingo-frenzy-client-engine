(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/scene/scene.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _memop = require('../memop');
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var Scene = function () {
            function Scene(app) {
                _classCallCheck(this, Scene);
                this._lights = new _memop.FixedArray(16);
                this._models = new _memop.FixedArray(16);
                this._cameras = new _memop.FixedArray(16);
                this._debugCamera = null;
                this._app = app;
                this._views = [];
            }
            _createClass(Scene, [
                {
                    key: '_add',
                    value: function _add(pool, item) {
                        if (item._poolID !== -1) {
                            return;
                        }
                        pool.push(item);
                        item._poolID = pool.length - 1;
                    }
                },
                {
                    key: '_remove',
                    value: function _remove(pool, item) {
                        if (item._poolID === -1) {
                            return;
                        }
                        pool.data[pool.length - 1]._poolID = item._poolID;
                        pool.fastRemove(item._poolID);
                        item._poolID = -1;
                    }
                },
                {
                    key: 'reset',
                    value: function reset() {
                        for (var i = 0; i < this._models.length; ++i) {
                            var model = this._models.data[i];
                            model._viewID = -1;
                        }
                    }
                },
                {
                    key: 'setDebugCamera',
                    value: function setDebugCamera(cam) {
                        this._debugCamera = cam;
                    }
                },
                {
                    key: 'getCameraCount',
                    value: function getCameraCount() {
                        return this._cameras.length;
                    }
                },
                {
                    key: 'getCamera',
                    value: function getCamera(idx) {
                        return this._cameras.data[idx];
                    }
                },
                {
                    key: 'addCamera',
                    value: function addCamera(camera) {
                        this._add(this._cameras, camera);
                    }
                },
                {
                    key: 'removeCamera',
                    value: function removeCamera(camera) {
                        this._remove(this._cameras, camera);
                    }
                },
                {
                    key: 'getModelCount',
                    value: function getModelCount() {
                        return this._models.length;
                    }
                },
                {
                    key: 'getModel',
                    value: function getModel(idx) {
                        return this._models.data[idx];
                    }
                },
                {
                    key: 'addModel',
                    value: function addModel(model) {
                        this._add(this._models, model);
                    }
                },
                {
                    key: 'removeModel',
                    value: function removeModel(model) {
                        this._remove(this._models, model);
                    }
                },
                {
                    key: 'getLightCount',
                    value: function getLightCount() {
                        return this._lights.length;
                    }
                },
                {
                    key: 'getLight',
                    value: function getLight(idx) {
                        return this._lights.data[idx];
                    }
                },
                {
                    key: 'addLight',
                    value: function addLight(light) {
                        this._add(this._lights, light);
                    }
                },
                {
                    key: 'removeLight',
                    value: function removeLight(light) {
                        this._remove(this._lights, light);
                    }
                },
                {
                    key: 'addView',
                    value: function addView(view) {
                        if (this._views.indexOf(view) === -1) {
                            this._views.push(view);
                        }
                    }
                },
                {
                    key: 'removeView',
                    value: function removeView(view) {
                        var idx = this._views.indexOf(view);
                        if (idx !== -1) {
                            this._views.splice(idx, 1);
                        }
                    }
                }
            ]);
            return Scene;
        }();
        exports.default = Scene;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,