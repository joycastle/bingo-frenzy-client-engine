(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/scene/model.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var Model = function () {
            function Model() {
                _classCallCheck(this, Model);
                this._type = 'default';
                this._poolID = -1;
                this._node = null;
                this._inputAssembler = null;
                this._effect = null;
                this._viewID = -1;
                this._cameraID = -1;
                this._userKey = -1;
                this._castShadow = false;
                this._boundingShape = null;
                this._defines = [];
                this._uniforms = [];
            }
            _createClass(Model, [
                {
                    key: 'setNode',
                    value: function setNode(node) {
                        this._node = node;
                    }
                },
                {
                    key: 'setInputAssembler',
                    value: function setInputAssembler(ia) {
                        this._inputAssembler = ia;
                    }
                },
                {
                    key: 'setEffect',
                    value: function setEffect(effect, customProperties) {
                        this._effect = effect;
                        var defines = this._defines;
                        var uniforms = this._uniforms;
                        defines.length = 0;
                        uniforms.length = 0;
                        if (effect) {
                            defines.push(effect._defines);
                            uniforms.push(effect._properties);
                        }
                        if (customProperties) {
                            defines.push(customProperties._defines);
                            uniforms.push(customProperties._properties);
                        }
                    }
                },
                {
                    key: 'setUserKey',
                    value: function setUserKey(key) {
                        this._userKey = key;
                    }
                },
                {
                    key: 'extractDrawItem',
                    value: function extractDrawItem(out) {
                        out.model = this;
                        out.node = this._node;
                        out.ia = this._inputAssembler;
                        out.effect = this._effect;
                        out.defines = this._defines;
                        out.dependencies = this._dependencies;
                        out.uniforms = this._uniforms;
                    }
                }
            ]);
            return Model;
        }();
        exports.default = Model;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,