(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/scene/camera.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _vmath = require('../../core/vmath');
        var _geomUtils = require('../../core/geom-utils');
        var _geomUtils2 = _interopRequireDefault(_geomUtils);
        var _enums = require('../enums');
        var _enums2 = _interopRequireDefault(_enums);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var _tmp_mat4 = _vmath.mat4.create();
        var _matView = _vmath.mat4.create();
        var _matProj = _vmath.mat4.create();
        var _matViewProj = _vmath.mat4.create();
        var _matInvViewProj = _vmath.mat4.create();
        var _tmp_v3 = cc.v3();
        var _tmp2_v3 = cc.v3();
        var Camera = function () {
            function Camera() {
                _classCallCheck(this, Camera);
                this._poolID = -1;
                this._node = null;
                this._projection = _enums2.default.PROJ_PERSPECTIVE;
                this._priority = 0;
                this._color = _vmath.color4.create(0.2, 0.3, 0.47, 1);
                this._depth = 1;
                this._stencil = 0;
                this._clearFlags = _enums2.default.CLEAR_COLOR | _enums2.default.CLEAR_DEPTH;
                this._clearModel = null;
                this._stages = [];
                this._framebuffer = null;
                this._near = 0.01;
                this._far = 1000;
                this._fov = Math.PI / 4;
                this._rect = {
                    x: 0,
                    y: 0,
                    w: 1,
                    h: 1
                };
                this._orthoHeight = 10;
                this._cullingMask = 4294967295;
            }
            _createClass(Camera, [
                {
                    key: 'setCullingMask',
                    value: function setCullingMask(mask) {
                        this._cullingMask = mask;
                    }
                },
                {
                    key: 'getNode',
                    value: function getNode() {
                        return this._node;
                    }
                },
                {
                    key: 'setNode',
                    value: function setNode(node) {
                        this._node = node;
                    }
                },
                {
                    key: 'getType',
                    value: function getType() {
                        return this._projection;
                    }
                },
                {
                    key: 'setType',
                    value: function setType(type) {
                        this._projection = type;
                    }
                },
                {
                    key: 'getPriority',
                    value: function getPriority() {
                        return this._priority;
                    }
                },
                {
                    key: 'setPriority',
                    value: function setPriority(priority) {
                        this._priority = priority;
                    }
                },
                {
                    key: 'getOrthoHeight',
                    value: function getOrthoHeight() {
                        return this._orthoHeight;
                    }
                },
                {
                    key: 'setOrthoHeight',
                    value: function setOrthoHeight(val) {
                        this._orthoHeight = val;
                    }
                },
                {
                    key: 'getFov',
                    value: function getFov() {
                        return this._fov;
                    }
                },
                {
                    key: 'setFov',
                    value: function setFov(fov) {
                        this._fov = fov;
                    }
                },
                {
                    key: 'getNear',
                    value: function getNear() {
                        return this._near;
                    }
                },
                {
                    key: 'setNear',
                    value: function setNear(near) {
                        this._near = near;
                    }
                },
                {
                    key: 'getFar',
                    value: function getFar() {
                        return this._far;
                    }
                },
                {
                    key: 'setFar',
                    value: function setFar(far) {
                        this._far = far;
                    }
                },
                {
                    key: 'getColor',
                    value: function getColor(out) {
                        return _vmath.color4.copy(out, this._color);
                    }
                },
                {
                    key: 'setColor',
                    value: function setColor(r, g, b, a) {
                        _vmath.color4.set(this._color, r, g, b, a);
                    }
                },
                {
                    key: 'getDepth',
                    value: function getDepth() {
                        return this._depth;
                    }
                },
                {
                    key: 'setDepth',
                    value: function setDepth(depth) {
                        this._depth = depth;
                    }
                },
                {
                    key: 'getStencil',
                    value: function getStencil() {
                        return this._stencil;
                    }
                },
                {
                    key: 'setStencil',
                    value: function setStencil(stencil) {
                        this._stencil = stencil;
                    }
                },
                {
                    key: 'getClearFlags',
                    value: function getClearFlags() {
                        return this._clearFlags;
                    }
                },
                {
                    key: 'setClearFlags',
                    value: function setClearFlags(flags) {
                        this._clearFlags = flags;
                    }
                },
                {
                    key: 'getRect',
                    value: function getRect(out) {
                        out.x = this._rect.x;
                        out.y = this._rect.y;
                        out.w = this._rect.w;
                        out.h = this._rect.h;
                        return out;
                    }
                },
                {
                    key: 'setRect',
                    value: function setRect(x, y, w, h) {
                        this._rect.x = x;
                        this._rect.y = y;
                        this._rect.w = w;
                        this._rect.h = h;
                    }
                },
                {
                    key: 'getStages',
                    value: function getStages() {
                        return this._stages;
                    }
                },
                {
                    key: 'setStages',
                    value: function setStages(stages) {
                        this._stages = stages;
                    }
                },
                {
                    key: 'getFramebuffer',
                    value: function getFramebuffer() {
                        return this._framebuffer;
                    }
                },
                {
                    key: 'setFrameBuffer',
                    value: function setFrameBuffer(framebuffer) {
                        this._framebuffer = framebuffer;
                    }
                },
                {
                    key: '_calcMatrices',
                    value: function _calcMatrices(width, height) {
                        this._node.getWorldRT(_matView);
                        _vmath.mat4.invert(_matView, _matView);
                        var aspect = width / height;
                        if (this._projection === _enums2.default.PROJ_PERSPECTIVE) {
                            _vmath.mat4.perspective(_matProj, this._fov, aspect, this._near, this._far);
                        } else {
                            var x = this._orthoHeight * aspect;
                            var y = this._orthoHeight;
                            _vmath.mat4.ortho(_matProj, -x, x, -y, y, this._near, this._far);
                        }
                        _vmath.mat4.mul(_matViewProj, _matProj, _matView);
                        _vmath.mat4.invert(_matInvViewProj, _matViewProj);
                    }
                },
                {
                    key: 'extractView',
                    value: function extractView(out, width, height) {
                        if (this._framebuffer) {
                            width = this._framebuffer._width;
                            height = this._framebuffer._height;
                        }
                        out._priority = this._priority;
                        out._rect.x = this._rect.x * width;
                        out._rect.y = this._rect.y * height;
                        out._rect.w = this._rect.w * width;
                        out._rect.h = this._rect.h * height;
                        this.getColor(out._color);
                        out._depth = this._depth;
                        out._stencil = this._stencil;
                        out._clearFlags = this._clearFlags;
                        out._clearModel = this._clearModel;
                        out._stages = this._stages;
                        out._framebuffer = this._framebuffer;
                        this._calcMatrices(width, height);
                        _vmath.mat4.copy(out._matView, _matView);
                        _vmath.mat4.copy(out._matProj, _matProj);
                        _vmath.mat4.copy(out._matViewProj, _matViewProj);
                        _vmath.mat4.copy(out._matInvViewProj, _matInvViewProj);
                        out._cullingMask = this._cullingMask;
                    }
                },
                {
                    key: 'screenPointToRay',
                    value: function screenPointToRay(x, y, width, height, out) {
                        if (!_geomUtils2.default)
                            return out;
                        out = out || _geomUtils2.default.Ray.create();
                        this._calcMatrices(width, height);
                        var cx = this._rect.x * width;
                        var cy = this._rect.y * height;
                        var cw = this._rect.w * width;
                        var ch = this._rect.h * height;
                        _vmath.vec3.set(_tmp2_v3, (x - cx) / cw * 2 - 1, (y - cy) / ch * 2 - 1, 1);
                        _vmath.vec3.transformMat4(_tmp2_v3, _tmp2_v3, _matInvViewProj);
                        if (this._projection === _enums2.default.PROJ_PERSPECTIVE) {
                            this._node.getWorldPosition(_tmp_v3);
                        } else {
                            _vmath.vec3.set(_tmp_v3, (x - cx) / cw * 2 - 1, (y - cy) / ch * 2 - 1, -1);
                            _vmath.vec3.transformMat4(_tmp_v3, _tmp_v3, _matInvViewProj);
                        }
                        return _geomUtils2.default.Ray.fromPoints(out, _tmp_v3, _tmp2_v3);
                    }
                },
                {
                    key: 'screenToWorld',
                    value: function screenToWorld(out, screenPos, width, height) {
                        this._calcMatrices(width, height);
                        var cx = this._rect.x * width;
                        var cy = this._rect.y * height;
                        var cw = this._rect.w * width;
                        var ch = this._rect.h * height;
                        if (this._projection === _enums2.default.PROJ_PERSPECTIVE) {
                            _vmath.vec3.set(out, (screenPos.x - cx) / cw * 2 - 1, (screenPos.y - cy) / ch * 2 - 1, 0.9999);
                            _vmath.vec3.transformMat4(out, out, _matInvViewProj);
                            this._node.getWorldPosition(_tmp_v3);
                            _vmath.vec3.lerp(out, _tmp_v3, out, (0, _vmath.lerp)(this._near / this._far, 1, screenPos.z));
                        } else {
                            _vmath.vec3.set(out, (screenPos.x - cx) / cw * 2 - 1, (screenPos.y - cy) / ch * 2 - 1, screenPos.z * 2 - 1);
                            _vmath.vec3.transformMat4(out, out, _matInvViewProj);
                        }
                        return out;
                    }
                },
                {
                    key: 'worldToScreen',
                    value: function worldToScreen(out, worldPos, width, height) {
                        this._calcMatrices(width, height);
                        var cx = this._rect.x * width;
                        var cy = this._rect.y * height;
                        var cw = this._rect.w * width;
                        var ch = this._rect.h * height;
                        _vmath.vec3.transformMat4(out, worldPos, _matViewProj);
                        out.x = cx + (out.x + 1) * 0.5 * cw;
                        out.y = cy + (out.y + 1) * 0.5 * ch;
                        out.z = out.z * 0.5 + 0.5;
                        return out;
                    }
                },
                {
                    key: 'worldMatrixToScreen',
                    value: function worldMatrixToScreen(out, worldMatrix, width, height) {
                        this._calcMatrices(width, height);
                        _vmath.mat4.mul(out, _matViewProj, worldMatrix);
                        var halfWidth = width / 2;
                        var halfHeight = height / 2;
                        _vmath.mat4.identity(_tmp_mat4);
                        _vmath.mat4.translate(_tmp_mat4, _tmp_mat4, _vmath.vec3.set(_tmp_v3, halfWidth, halfHeight, 0));
                        _vmath.mat4.scale(_tmp_mat4, _tmp_mat4, _vmath.vec3.set(_tmp_v3, halfWidth, halfHeight, 1));
                        _vmath.mat4.mul(out, _tmp_mat4, out);
                        return out;
                    }
                },
                {
                    key: 'cullingMask',
                    get: function get() {
                        return this._cullingMask;
                    },
                    set: function set(mask) {
                        this._cullingMask = mask;
                    }
                }
            ]);
            return Camera;
        }();
        exports.default = Camera;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,