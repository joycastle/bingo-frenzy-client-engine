(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/audio/CCAudioEngine.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Audio = require('./CCAudio');
        var AudioClip = require('../core/assets/CCAudioClip');
        var js = cc.js;
        var _instanceId = 0;
        var _id2audio = js.createMap(true);
        var _url2id = {};
        var _audioPool = [];
        var recycleAudio = function recycleAudio(audio) {
            audio._finishCallback = null;
            audio.off('ended');
            audio.off('stop');
            audio.src = null;
            if (!_audioPool.includes(audio)) {
                if (_audioPool.length < 32) {
                    _audioPool.push(audio);
                } else {
                    audio.destroy();
                }
            }
        };
        var getAudioFromPath = function getAudioFromPath(path) {
            var id = _instanceId++;
            var list = _url2id[path];
            if (!list) {
                list = _url2id[path] = [];
            }
            if (audioEngine._maxAudioInstance <= list.length) {
                var oldId = list.shift();
                var oldAudio = getAudioFromId(oldId);
                oldAudio.stop();
            }
            var audio = _audioPool.pop() || new Audio();
            var callback = function callback() {
                var audioInList = getAudioFromId(this.id);
                if (audioInList) {
                    delete _id2audio[this.id];
                    var index = list.indexOf(this.id);
                    cc.js.array.fastRemoveAt(list, index);
                }
                recycleAudio(this);
            };
            audio.on('ended', function () {
                if (this._finishCallback) {
                    this._finishCallback();
                }
                callback.call(this);
            }, audio);
            audio.on('stop', callback, audio);
            audio.id = id;
            _id2audio[id] = audio;
            list.push(id);
            return audio;
        };
        var getAudioFromId = function getAudioFromId(id) {
            return _id2audio[id];
        };
        var handleVolume = function handleVolume(volume) {
            if (volume === undefined) {
                volume = 1;
            } else if (typeof volume === 'string') {
                volume = Number.parseFloat(volume);
            }
            return volume;
        };
        var audioEngine = {
            AudioState: Audio.State,
            _maxWebAudioSize: 2097152,
            _maxAudioInstance: 24,
            _id2audio: _id2audio,
            play: function play(clip, loop, volume) {
                var path = clip;
                var audio;
                if (typeof clip === 'string') {
                    cc.warnID(8401, 'cc.audioEngine', 'cc.AudioClip', 'AudioClip', 'cc.AudioClip', 'audio');
                    path = clip;
                    audio = getAudioFromPath(path);
                    AudioClip._loadByUrl(path, function (err, clip) {
                        if (clip) {
                            audio.src = clip;
                        }
                    });
                } else {
                    if (!clip) {
                        return;
                    }
                    path = clip.nativeUrl;
                    audio = getAudioFromPath(path);
                    audio.src = clip;
                }
                audio.setLoop(loop || false);
                volume = handleVolume(volume);
                audio.setVolume(volume);
                audio.play();
                return audio.id;
            },
            setLoop: function setLoop(audioID, loop) {
                var audio = getAudioFromId(audioID);
                if (!audio || !audio.setLoop)
                    return;
                audio.setLoop(loop);
            },
            isLoop: function isLoop(audioID) {
                var audio = getAudioFromId(audioID);
                if (!audio || !audio.getLoop)
                    return false;
                return audio.getLoop();
            },
            setVolume: function setVolume(audioID, volume) {
                var audio = getAudioFromId(audioID);
                if (audio) {
                    audio.setVolume(volume);
                }
            },
            getVolume: function getVolume(audioID) {
                var audio = getAudioFromId(audioID);
                return audio ? audio.getVolume() : 1;
            },
            setCurrentTime: function setCurrentTime(audioID, sec) {
                var audio = getAudioFromId(audioID);
                if (audio) {
                    audio.setCurrentTime(sec);
                    return true;
                } else {
                    return false;
                }
            },
            getCurrentTime: function getCurrentTime(audioID) {
                var audio = getAudioFromId(audioID);
                return audio ? audio.getCurrentTime() : 0;
            },
            getDuration: function getDuration(audioID) {
                var audio = getAudioFromId(audioID);
                return audio ? audio.getDuration() : 0;
            },
            getState: function getState(audioID) {
                var audio = getAudioFromId(audioID);
                return audio ? audio.getState() : this.AudioState.ERROR;
            },
            setFinishCallback: function setFinishCallback(audioID, callback) {
                var audio = getAudioFromId(audioID);
                if (!audio)
                    return;
                audio._finishCallback = callback;
            },
            pause: function pause(audioID) {
                var audio = getAudioFromId(audioID);
                if (audio) {
                    audio.pause();
                    return true;
                } else {
                    return false;
                }
            },
            _pauseIDCache: [],
            pauseAll: function pauseAll() {
                for (var id in _id2audio) {
                    var audio = _id2audio[id];
                    var state = audio.getState();
                    if (state === Audio.State.PLAYING) {
                        this._pauseIDCache.push(id);
                        audio.pause();
                    }
                }
            },
            resume: function resume(audioID) {
                var audio = getAudioFromId(audioID);
                if (audio) {
                    audio.resume();
                }
            },
            resumeAll: function resumeAll() {
                for (var i = 0; i < this._pauseIDCache.length; ++i) {
                    var id = this._pauseIDCache[i];
                    var audio = getAudioFromId(id);
                    if (audio)
                        audio.resume();
                }
                this._pauseIDCache.length = 0;
            },
            stop: function stop(audioID) {
                var audio = getAudioFromId(audioID);
                if (audio) {
                    audio.stop();
                    return true;
                } else {
                    return false;
                }
            },
            stopAll: function stopAll() {
                for (var id in _id2audio) {
                    var audio = _id2audio[id];
                    if (audio) {
                        audio.stop();
                    }
                }
            },
            setMaxAudioInstance: function setMaxAudioInstance(num) {
                this._maxAudioInstance = num;
            },
            getMaxAudioInstance: function getMaxAudioInstance() {
                return this._maxAudioInstance;
            },
            uncache: function uncache(clip) {
                var filePath = clip;
                if (typeof clip === 'string') {
                    cc.warnID(8401, 'cc.audioEngine', 'cc.AudioClip', 'AudioClip', 'cc.AudioClip', 'audio');
                    filePath = clip;
                } else {
                    if (!clip) {
                        return;
                    }
                    filePath = clip.nativeUrl;
                }
                var list = _url2id[filePath];
                if (!list)
                    return;
                while (list.length > 0) {
                    var id = list.pop();
                    var audio = _id2audio[id];
                    if (audio) {
                        audio.stop();
                        delete _id2audio[id];
                    }
                }
            },
            uncacheAll: function uncacheAll() {
                this.stopAll();
                var audio = void 0;
                for (var id in _id2audio) {
                    audio = _id2audio[id];
                    if (audio) {
                        audio.destroy();
                    }
                }
                while (audio = _audioPool.pop()) {
                    audio.destroy();
                }
                _id2audio = js.createMap(true);
                _url2id = {};
            },
            getProfile: function getProfile(profileName) {
            },
            preload: function preload(filePath, callback) {
                if (CC_DEBUG) {
                    cc.warn('`cc.audioEngine.preload` is deprecated, use `cc.loader.loadRes(url, cc.AudioClip)` instead please.');
                }
                cc.loader.load(filePath, callback && function (error) {
                    if (!error) {
                        callback();
                    }
                });
            },
            setMaxWebAudioSize: function setMaxWebAudioSize(kb) {
                this._maxWebAudioSize = kb * 1024;
            },
            _breakCache: null,
            _break: function _break() {
                this._breakCache = [];
                for (var id in _id2audio) {
                    var audio = _id2audio[id];
                    var state = audio.getState();
                    if (state === Audio.State.PLAYING) {
                        this._breakCache.push(id);
                        audio.pause();
                    }
                }
            },
            _restore: function _restore() {
                if (!this._breakCache)
                    return;
                while (this._breakCache.length > 0) {
                    var id = this._breakCache.pop();
                    var audio = getAudioFromId(id);
                    if (audio && audio.resume)
                        audio.resume();
                }
                this._breakCache = null;
            },
            _music: {
                id: -1,
                loop: false,
                volume: 1
            },
            _effect: {
                volume: 1,
                pauseCache: []
            },
            playMusic: function playMusic(clip, loop) {
                var music = this._music;
                this.stop(music.id);
                music.id = this.play(clip, loop, music.volume);
                music.loop = loop;
                return music.id;
            },
            stopMusic: function stopMusic() {
                this.stop(this._music.id);
            },
            pauseMusic: function pauseMusic() {
                this.pause(this._music.id);
                return this._music.id;
            },
            resumeMusic: function resumeMusic() {
                this.resume(this._music.id);
                return this._music.id;
            },
            getMusicVolume: function getMusicVolume() {
                return this._music.volume;
            },
            setMusicVolume: function setMusicVolume(volume) {
                volume = handleVolume(volume);
                var music = this._music;
                music.volume = volume;
                this.setVolume(music.id, music.volume);
                return music.volume;
            },
            isMusicPlaying: function isMusicPlaying() {
                return this.getState(this._music.id) === this.AudioState.PLAYING;
            },
            playEffect: function playEffect(clip, loop) {
                return this.play(clip, loop || false, this._effect.volume);
            },
            setEffectsVolume: function setEffectsVolume(volume) {
                volume = handleVolume(volume);
                var musicId = this._music.id;
                this._effect.volume = volume;
                for (var id in _id2audio) {
                    var audio = _id2audio[id];
                    if (!audio || audio.id === musicId)
                        continue;
                    audioEngine.setVolume(id, volume);
                }
            },
            getEffectsVolume: function getEffectsVolume() {
                return this._effect.volume;
            },
            pauseEffect: function pauseEffect(audioID) {
                return this.pause(audioID);
            },
            pauseAllEffects: function pauseAllEffects() {
                var musicId = this._music.id;
                var effect = this._effect;
                effect.pauseCache.length = 0;
                for (var id in _id2audio) {
                    var audio = _id2audio[id];
                    if (!audio || audio.id === musicId)
                        continue;
                    var state = audio.getState();
                    if (state === this.AudioState.PLAYING) {
                        effect.pauseCache.push(id);
                        audio.pause();
                    }
                }
            },
            resumeEffect: function resumeEffect(id) {
                this.resume(id);
            },
            resumeAllEffects: function resumeAllEffects() {
                var pauseIDCache = this._effect.pauseCache;
                for (var i = 0; i < pauseIDCache.length; ++i) {
                    var id = pauseIDCache[i];
                    var audio = _id2audio[id];
                    if (audio)
                        audio.resume();
                }
            },
            stopEffect: function stopEffect(audioID) {
                return this.stop(audioID);
            },
            stopAllEffects: function stopAllEffects() {
                var musicId = this._music.id;
                for (var id in _id2audio) {
                    var audio = _id2audio[id];
                    if (!audio || audio.id === musicId)
                        continue;
                    var state = audio.getState();
                    if (state === audioEngine.AudioState.PLAYING) {
                        audio.stop();
                    }
                }
            }
        };
        module.exports = cc.audioEngine = audioEngine;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,