(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/tilemap/CCTiledMapRenderDataList.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _inputAssembler = require('../renderer/core/input-assembler');
        var _inputAssembler2 = _interopRequireDefault(_inputAssembler);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var TiledMapRenderDataList = cc.Class({
            name: 'cc.TiledMapRenderDataList',
            ctor: function ctor() {
                this._dataList = [];
                this._offset = 0;
            },
            _pushRenderData: function _pushRenderData() {
                var renderData = {};
                renderData.ia = new _inputAssembler2.default();
                renderData.nodesRenderList = [];
                this._dataList.push(renderData);
            },
            popRenderData: function popRenderData(buffer) {
                if (this._offset >= this._dataList.length) {
                    this._pushRenderData();
                }
                var renderData = this._dataList[this._offset];
                renderData.nodesRenderList.length = 0;
                var ia = renderData.ia;
                ia._vertexBuffer = buffer._vb;
                ia._indexBuffer = buffer._ib;
                ia._start = buffer.indiceOffset;
                ia._count = 0;
                this._offset++;
                return renderData;
            },
            pushNodesList: function pushNodesList(renderData, nodesList) {
                renderData.nodesRenderList.push(nodesList);
            },
            reset: function reset() {
                this._offset = 0;
            }
        });
        cc.TiledMapRenderDataList = module.exports = TiledMapRenderDataList;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDVGlsZWRNYXBSZW5kZXJEYXRhTGlzdC5qcyIsIi9Vc2Vycy9TaGFyZWQvYmluZ29fZnJlbnp5L2VuZ2luZS9jb2NvczJkL3RpbGVtYXAvQ0NUaWxlZE1hcFJlbmRlckRhdGFMaXN0LmpzIl0sIm5hbWVzIjpbIlRpbGVkTWFwUmVuZGVyRGF0YUxpc3QiLCJjYyIsIkNsYXNzIiwibmFtZSIsImN0b3IiLCJfZGF0YUxpc3QiLCJfb2Zmc2V0IiwiX3B1c2hSZW5kZXJEYXRhIiwicmVuZGVyRGF0YSIsImlhIiwiSW5wdXRBc3NlbWJsZXIiLCJub2Rlc1JlbmRlckxpc3QiLCJwdXNoIiwicG9wUmVuZGVyRGF0YSIsImJ1ZmZlciIsImxlbmd0aCIsIl92ZXJ0ZXhCdWZmZXIiLCJfdmIiLCJfaW5kZXhCdWZmZXIiLCJfaWIiLCJfc3RhcnQiLCJpbmRpY2VPZmZzZXQiLCJfY291bnQiLCJwdXNoTm9kZXNMaXN0Iiwibm9kZXNMaXN0IiwicmVzZXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiO0lBd0JBLElBQUEsT0FBQSxHQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUEsSUFBQSxPQUFBLE9BQUEsS0FBQSxXQUFBOzs7Ozs7UUFFSUEsT0FBeUJDLGlCQUFBQSxDQUFTLE9BQVRBLENBQVMsT0FBVEEsRUFBUyxVQUFUQSxDQUF6QkQ7OztRQUFrQyxJQUcxQixDQUFBLE9BSDBCLEVBRzFCO0FBQUEsWUFBQSxpQkFBQSxDQUFBLGNBQUEsQ0FBQSxVQUFBLEVBQUEsTUFBQSxFQUFBO0FBQUE7O1FBTFosSUFBQSxlQUFBLEdBQUEsT0FBQSxDQUFBLGtDQUFBLENBQUE7Ozs7O1FBRUEsSUFBSUEsc0JBQUFBLEdBQXlCQyxFQUFBQSxDQUFHQyxLQUFIRCxDQUFTO0FBQUEsWUFDbENFLElBQUFBLEVBQU0sMkJBRDRCO0FBQUEsWUFHbENDLElBQUFBLEVBSGtDLFNBQUEsSUFBQSxHQUcxQjtBQUFBLGdCQUNKLEtBQUtDLFNBQUwsR0FBaUIsRUFBakIsQ0FESTtBQUFBLGdCQUVKLEtBQUtDLE9BQUwsR0FBZSxDQUFmLENBRkk7QUFBQSxhQUgwQjtBQUFBLFlBUWxDQyxlQUFBQSxFQVJrQyxTQUFBLGVBQUEsR0FRZjtBQUFBLGdCQUNmLElBQUlDLFVBQUFBLEdBQWEsRUFBakIsQ0FEZTtBQUFBLGdCQUVmQSxVQUFBQSxDQUFXQyxFQUFYRCxHQUFnQixJQUFJRSxnQkFBQUEsQ0FBQUEsT0FBSixFQUFoQkYsQ0FGZTtBQUFBLGdCQUdmQSxVQUFBQSxDQUFXRyxlQUFYSCxHQUE2QixFQUE3QkEsQ0FIZTtBQUFBLGdCQUlmLEtBQUtILFNBQUwsQ0FBZU8sSUFBZixDQUFvQkosVUFBcEIsRUFKZTtBQUFBLGFBUmU7QUFBQSxZQWVsQ0ssYUFBQUEsRUFma0MsU0FBQSxhQUFBLENBZW5CQyxNQWZtQixFQWVYO0FBQUEsZ0JBQ25CLElBQUksS0FBS1IsT0FBTCxJQUFnQixLQUFLRCxTQUFMLENBQWVVLE1BQW5DLEVBQTJDO0FBQUEsb0JBQ3ZDLEtBQUtSLGVBQUwsR0FEdUM7QUFBQSxpQkFEeEI7QUFBQSxnQkFJbkIsSUFBSUMsVUFBQUEsR0FBYSxLQUFLSCxTQUFMLENBQWUsS0FBS0MsT0FBcEIsQ0FBakIsQ0FKbUI7QUFBQSxnQkFLbkJFLFVBQUFBLENBQVdHLGVBQVhILENBQTJCTyxNQUEzQlAsR0FBb0MsQ0FBcENBLENBTG1CO0FBQUEsZ0JBTW5CLElBQUlDLEVBQUFBLEdBQUtELFVBQUFBLENBQVdDLEVBQXBCLENBTm1CO0FBQUEsZ0JBT25CQSxFQUFBQSxDQUFHTyxhQUFIUCxHQUFtQkssTUFBQUEsQ0FBT0csR0FBMUJSLENBUG1CO0FBQUEsZ0JBUW5CQSxFQUFBQSxDQUFHUyxZQUFIVCxHQUFrQkssTUFBQUEsQ0FBT0ssR0FBekJWLENBUm1CO0FBQUEsZ0JBU25CQSxFQUFBQSxDQUFHVyxNQUFIWCxHQUFZSyxNQUFBQSxDQUFPTyxZQUFuQlosQ0FUbUI7QUFBQSxnQkFVbkJBLEVBQUFBLENBQUdhLE1BQUhiLEdBQVksQ0FBWkEsQ0FWbUI7QUFBQSxnQkFXbkIsS0FBS0gsT0FBTCxHQVhtQjtBQUFBLGdCQVluQixPQUFPRSxVQUFQLENBWm1CO0FBQUEsYUFmVztBQUFBLFlBOEJsQ2UsYUFBQUEsRUE5QmtDLFNBQUEsYUFBQSxDQThCbkJmLFVBOUJtQixFQThCUGdCLFNBOUJPLEVBOEJJO0FBQUEsZ0JBQ2xDaEIsVUFBQUEsQ0FBV0csZUFBWEgsQ0FBMkJJLElBQTNCSixDQUFnQ2dCLFNBQWhDaEIsRUFEa0M7QUFBQSxhQTlCSjtBQUFBLFlBa0NsQ2lCLEtBQUFBLEVBbENrQyxTQUFBLEtBQUEsR0FrQ3pCO0FBQUEsZ0JBQ0wsS0FBS25CLE9BQUwsR0FBZSxDQUFmLENBREs7QUFBQSxhQWxDeUI7QUFBQSxTQUFUTCxDQUE3QjtRQXVDQUEsRUFBQUEsQ0FBR0Qsc0JBQUhDLEdBQTRCeUIsTUFBQUEsQ0FBT0MsT0FBUEQsR0FBaUIxQixzQkFBN0NDOztJQWxDUSxJQUFBLE9BQUEsRUFBQTtBQUFBLFFBTDhCLFFBQUEsQ0FBQSxRQUFBLENBQUEsT0FBQSxFQUFBLFNBQUEsRUFBQSxRQUFBLEVBSzlCO0FBQUEsS0FBQSxNQUlpQjtBQUFBLFFBQ0QsaUJBQUEsQ0FBSVMsa0JBQUosQ0FBaEIsVUFBZ0IsRUFBaEIsWUFBQTtBQUFBLFlBQ1dDLFFBQUFBLENBQWtCLFFBQUEsQ0FBN0IsT0FBV0EsRUFBWCxTQUFXQSxFQUFYLFFBQVdBLEVBRFg7QUFBQSxTQUFnQixFQURDO0FBQUEiLCJmaWxlIjoiQ0NUaWxlZE1hcFJlbmRlckRhdGFMaXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcbiBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxuXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmltcG9ydCBJbnB1dEFzc2VtYmxlciBmcm9tICcuLi9yZW5kZXJlci9jb3JlL2lucHV0LWFzc2VtYmxlcic7XG5cbmxldCBUaWxlZE1hcFJlbmRlckRhdGFMaXN0ID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5UaWxlZE1hcFJlbmRlckRhdGFMaXN0JyxcblxuICAgIGN0b3IgKCkge1xuICAgICAgICB0aGlzLl9kYXRhTGlzdCA9IFtdO1xuICAgICAgICB0aGlzLl9vZmZzZXQgPSAwO1xuICAgIH0sXG5cbiAgICBfcHVzaFJlbmRlckRhdGEgKCkge1xuICAgICAgICBsZXQgcmVuZGVyRGF0YSA9IHt9O1xuICAgICAgICByZW5kZXJEYXRhLmlhID0gbmV3IElucHV0QXNzZW1ibGVyKCk7XG4gICAgICAgIHJlbmRlckRhdGEubm9kZXNSZW5kZXJMaXN0ID0gW107XG4gICAgICAgIHRoaXMuX2RhdGFMaXN0LnB1c2gocmVuZGVyRGF0YSk7XG4gICAgfSxcblxuICAgIHBvcFJlbmRlckRhdGEgKGJ1ZmZlcikge1xuICAgICAgICBpZiAodGhpcy5fb2Zmc2V0ID49IHRoaXMuX2RhdGFMaXN0Lmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5fcHVzaFJlbmRlckRhdGEoKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVuZGVyRGF0YSA9IHRoaXMuX2RhdGFMaXN0W3RoaXMuX29mZnNldF07XG4gICAgICAgIHJlbmRlckRhdGEubm9kZXNSZW5kZXJMaXN0Lmxlbmd0aCA9IDA7XG4gICAgICAgIGxldCBpYSA9IHJlbmRlckRhdGEuaWE7XG4gICAgICAgIGlhLl92ZXJ0ZXhCdWZmZXIgPSBidWZmZXIuX3ZiO1xuICAgICAgICBpYS5faW5kZXhCdWZmZXIgPSBidWZmZXIuX2liO1xuICAgICAgICBpYS5fc3RhcnQgPSBidWZmZXIuaW5kaWNlT2Zmc2V0O1xuICAgICAgICBpYS5fY291bnQgPSAwO1xuICAgICAgICB0aGlzLl9vZmZzZXQrKztcbiAgICAgICAgcmV0dXJuIHJlbmRlckRhdGE7XG4gICAgfSxcblxuICAgIHB1c2hOb2Rlc0xpc3QgKHJlbmRlckRhdGEsIG5vZGVzTGlzdCkge1xuICAgICAgICByZW5kZXJEYXRhLm5vZGVzUmVuZGVyTGlzdC5wdXNoKG5vZGVzTGlzdCk7XG4gICAgfSxcblxuICAgIHJlc2V0ICgpIHtcbiAgICAgICAgdGhpcy5fb2Zmc2V0ID0gMDtcbiAgICB9XG59KTtcblxuY2MuVGlsZWRNYXBSZW5kZXJEYXRhTGlzdCA9IG1vZHVsZS5leHBvcnRzID0gVGlsZWRNYXBSZW5kZXJEYXRhTGlzdDsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfaW5wdXRBc3NlbWJsZXIgPSByZXF1aXJlKCcuLi9yZW5kZXJlci9jb3JlL2lucHV0LWFzc2VtYmxlcicpO1xuXG52YXIgX2lucHV0QXNzZW1ibGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lucHV0QXNzZW1ibGVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFRpbGVkTWFwUmVuZGVyRGF0YUxpc3QgPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLlRpbGVkTWFwUmVuZGVyRGF0YUxpc3QnLFxuXG4gICAgY3RvcjogZnVuY3Rpb24gY3RvcigpIHtcbiAgICAgICAgdGhpcy5fZGF0YUxpc3QgPSBbXTtcbiAgICAgICAgdGhpcy5fb2Zmc2V0ID0gMDtcbiAgICB9LFxuICAgIF9wdXNoUmVuZGVyRGF0YTogZnVuY3Rpb24gX3B1c2hSZW5kZXJEYXRhKCkge1xuICAgICAgICB2YXIgcmVuZGVyRGF0YSA9IHt9O1xuICAgICAgICByZW5kZXJEYXRhLmlhID0gbmV3IF9pbnB1dEFzc2VtYmxlcjIuZGVmYXVsdCgpO1xuICAgICAgICByZW5kZXJEYXRhLm5vZGVzUmVuZGVyTGlzdCA9IFtdO1xuICAgICAgICB0aGlzLl9kYXRhTGlzdC5wdXNoKHJlbmRlckRhdGEpO1xuICAgIH0sXG4gICAgcG9wUmVuZGVyRGF0YTogZnVuY3Rpb24gcG9wUmVuZGVyRGF0YShidWZmZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuX29mZnNldCA+PSB0aGlzLl9kYXRhTGlzdC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuX3B1c2hSZW5kZXJEYXRhKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlbmRlckRhdGEgPSB0aGlzLl9kYXRhTGlzdFt0aGlzLl9vZmZzZXRdO1xuICAgICAgICByZW5kZXJEYXRhLm5vZGVzUmVuZGVyTGlzdC5sZW5ndGggPSAwO1xuICAgICAgICB2YXIgaWEgPSByZW5kZXJEYXRhLmlhO1xuICAgICAgICBpYS5fdmVydGV4QnVmZmVyID0gYnVmZmVyLl92YjtcbiAgICAgICAgaWEuX2luZGV4QnVmZmVyID0gYnVmZmVyLl9pYjtcbiAgICAgICAgaWEuX3N0YXJ0ID0gYnVmZmVyLmluZGljZU9mZnNldDtcbiAgICAgICAgaWEuX2NvdW50ID0gMDtcbiAgICAgICAgdGhpcy5fb2Zmc2V0Kys7XG4gICAgICAgIHJldHVybiByZW5kZXJEYXRhO1xuICAgIH0sXG4gICAgcHVzaE5vZGVzTGlzdDogZnVuY3Rpb24gcHVzaE5vZGVzTGlzdChyZW5kZXJEYXRhLCBub2Rlc0xpc3QpIHtcbiAgICAgICAgcmVuZGVyRGF0YS5ub2Rlc1JlbmRlckxpc3QucHVzaChub2Rlc0xpc3QpO1xuICAgIH0sXG4gICAgcmVzZXQ6IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgICB0aGlzLl9vZmZzZXQgPSAwO1xuICAgIH1cbn0pOyAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cbiAgICBcbiAgICAgaHR0cHM6Ly93d3cuY29jb3MuY29tL1xuICAgIFxuICAgICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gICAgIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxuICAgICB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gICAgIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gICAgIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiAgICAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuICAgICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cbiAgICBcbiAgICAgVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiAgICAgWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cbiAgICBcbiAgICAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICAgICBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAgICAgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gICAgIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAgICAgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAgICAgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICAgICBUSEUgU09GVFdBUkUuXG4gICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblxuY2MuVGlsZWRNYXBSZW5kZXJEYXRhTGlzdCA9IG1vZHVsZS5leHBvcnRzID0gVGlsZWRNYXBSZW5kZXJEYXRhTGlzdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrTkRWR2xzWldSTllYQlNaVzVrWlhKRVlYUmhUR2x6ZEM1cWN5SmRMQ0p1WVcxbGN5STZXeUpVYVd4bFpFMWhjRkpsYm1SbGNrUmhkR0ZNYVhOMElpd2lZMk1pTENKRGJHRnpjeUlzSW01aGJXVWlMQ0pqZEc5eUlpd2lYMlJoZEdGTWFYTjBJaXdpWDI5bVpuTmxkQ0lzSWw5d2RYTm9VbVZ1WkdWeVJHRjBZU0lzSW5KbGJtUmxja1JoZEdFaUxDSnBZU0lzSWtsdWNIVjBRWE56WlcxaWJHVnlJaXdpYm05a1pYTlNaVzVrWlhKTWFYTjBJaXdpY0hWemFDSXNJbkJ2Y0ZKbGJtUmxja1JoZEdFaUxDSmlkV1ptWlhJaUxDSnNaVzVuZEdnaUxDSmZkbVZ5ZEdWNFFuVm1abVZ5SWl3aVgzWmlJaXdpWDJsdVpHVjRRblZtWm1WeUlpd2lYMmxpSWl3aVgzTjBZWEowSWl3aWFXNWthV05sVDJabWMyVjBJaXdpWDJOdmRXNTBJaXdpY0hWemFFNXZaR1Z6VEdsemRDSXNJbTV2WkdWelRHbHpkQ0lzSW5KbGMyVjBJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklqczdRVUYzUWtFN096czdPenRCUVVWQkxFbEJRVWxCTEhsQ1FVRjVRa01zUjBGQlIwTXNTMEZCU0N4RFFVRlRPMEZCUTJ4RFF5eFZRVUZOTERKQ1FVUTBRanM3UVVGSGJFTkRMRkZCU0d0RExHdENRVWN4UWp0QlFVTktMR0ZCUVV0RExGTkJRVXdzUjBGQmFVSXNSVUZCYWtJN1FVRkRRU3hoUVVGTFF5eFBRVUZNTEVkQlFXVXNRMEZCWmp0QlFVTklMRXRCVG1sRE8wRkJVV3hEUXl4dFFrRlNhME1zTmtKQlVXWTdRVUZEWml4WlFVRkpReXhoUVVGaExFVkJRV3BDTzBGQlEwRkJMRzFDUVVGWFF5eEZRVUZZTEVkQlFXZENMRWxCUVVsRExIZENRVUZLTEVWQlFXaENPMEZCUTBGR0xHMUNRVUZYUnl4bFFVRllMRWRCUVRaQ0xFVkJRVGRDTzBGQlEwRXNZVUZCUzA0c1UwRkJUQ3hEUVVGbFR5eEpRVUZtTEVOQlFXOUNTaXhWUVVGd1FqdEJRVU5JTEV0QlltbERPMEZCWld4RFN5eHBRa0ZtYTBNc2VVSkJaVzVDUXl4TlFXWnRRaXhGUVdWWU8wRkJRMjVDTEZsQlFVa3NTMEZCUzFJc1QwRkJUQ3hKUVVGblFpeExRVUZMUkN4VFFVRk1MRU5CUVdWVkxFMUJRVzVETEVWQlFUSkRPMEZCUTNaRExHbENRVUZMVWl4bFFVRk1PMEZCUTBnN1FVRkRSQ3haUVVGSlF5eGhRVUZoTEV0QlFVdElMRk5CUVV3c1EwRkJaU3hMUVVGTFF5eFBRVUZ3UWl4RFFVRnFRanRCUVVOQlJTeHRRa0ZCVjBjc1pVRkJXQ3hEUVVFeVFra3NUVUZCTTBJc1IwRkJiME1zUTBGQmNFTTdRVUZEUVN4WlFVRkpUaXhMUVVGTFJDeFhRVUZYUXl4RlFVRndRanRCUVVOQlFTeFhRVUZIVHl4aFFVRklMRWRCUVcxQ1JpeFBRVUZQUnl4SFFVRXhRanRCUVVOQlVpeFhRVUZIVXl4WlFVRklMRWRCUVd0Q1NpeFBRVUZQU3l4SFFVRjZRanRCUVVOQlZpeFhRVUZIVnl4TlFVRklMRWRCUVZsT0xFOUJRVTlQTEZsQlFXNUNPMEZCUTBGYUxGZEJRVWRoTEUxQlFVZ3NSMEZCV1N4RFFVRmFPMEZCUTBFc1lVRkJTMmhDTEU5QlFVdzdRVUZEUVN4bFFVRlBSU3hWUVVGUU8wRkJRMGdzUzBFMVFtbERPMEZCT0VKc1EyVXNhVUpCT1VKclF5eDVRa0U0UW01Q1ppeFZRVGxDYlVJc1JVRTRRbEJuUWl4VFFUbENUeXhGUVRoQ1NUdEJRVU5zUTJoQ0xHMUNRVUZYUnl4bFFVRllMRU5CUVRKQ1F5eEpRVUV6UWl4RFFVRm5RMWtzVTBGQmFFTTdRVUZEU0N4TFFXaERhVU03UVVGclEyeERReXhUUVd4RGEwTXNiVUpCYTBONlFqdEJRVU5NTEdGQlFVdHVRaXhQUVVGTUxFZEJRV1VzUTBGQlpqdEJRVU5JTzBGQmNFTnBReXhEUVVGVUxFTkJRVGRDTEVNc1EwRXhRa0U3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZCYVVWQlRDeEhRVUZIUkN4elFrRkJTQ3hIUVVFMFFqQkNMRTlCUVU5RExFOUJRVkFzUjBGQmFVSXpRaXh6UWtGQk4wTWlMQ0ptYVd4bElqb2lRME5VYVd4bFpFMWhjRkpsYm1SbGNrUmhkR0ZNYVhOMExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUJEYjNCNWNtbG5hSFFnS0dNcElESXdNVGN0TWpBeE9DQllhV0Z0Wlc0Z1dXRnFhU0JUYjJaMGQyRnlaU0JEYnk0c0lFeDBaQzVjYmx4dUlHaDBkSEJ6T2k4dmQzZDNMbU52WTI5ekxtTnZiUzljYmx4dUlGQmxjbTFwYzNOcGIyNGdhWE1nYUdWeVpXSjVJR2R5WVc1MFpXUXNJR1p5WldVZ2IyWWdZMmhoY21kbExDQjBieUJoYm5rZ2NHVnljMjl1SUc5aWRHRnBibWx1WnlCaElHTnZjSGxjYmlCdlppQjBhR2x6SUhOdlpuUjNZWEpsSUdGdVpDQmhjM052WTJsaGRHVmtJR1Z1WjJsdVpTQnpiM1Z5WTJVZ1kyOWtaU0FvZEdobElGd2lVMjltZEhkaGNtVmNJaWtzSUdFZ2JHbHRhWFJsWkN4Y2JpQjNiM0pzWkhkcFpHVXNJSEp2ZVdGc2RIa3RabkpsWlN3Z2JtOXVMV0Z6YzJsbmJtRmliR1VzSUhKbGRtOWpZV0pzWlNCaGJtUWdibTl1TFdWNFkyeDFjMmwyWlNCc2FXTmxibk5sWEc0Z2RHOGdkWE5sSUVOdlkyOXpJRU55WldGMGIzSWdjMjlzWld4NUlIUnZJR1JsZG1Wc2IzQWdaMkZ0WlhNZ2IyNGdlVzkxY2lCMFlYSm5aWFFnY0d4aGRHWnZjbTF6TGlCWmIzVWdjMmhoYkd4Y2JpQnViM1FnZFhObElFTnZZMjl6SUVOeVpXRjBiM0lnYzI5bWRIZGhjbVVnWm05eUlHUmxkbVZzYjNCcGJtY2diM1JvWlhJZ2MyOW1kSGRoY21VZ2IzSWdkRzl2YkhNZ2RHaGhkQ2R6WEc0Z2RYTmxaQ0JtYjNJZ1pHVjJaV3h2Y0dsdVp5Qm5ZVzFsY3k0Z1dXOTFJR0Z5WlNCdWIzUWdaM0poYm5SbFpDQjBieUJ3ZFdKc2FYTm9MQ0JrYVhOMGNtbGlkWFJsTEZ4dUlITjFZbXhwWTJWdWMyVXNJR0Z1WkM5dmNpQnpaV3hzSUdOdmNHbGxjeUJ2WmlCRGIyTnZjeUJEY21WaGRHOXlMbHh1WEc0Z1ZHaGxJSE52Wm5SM1lYSmxJRzl5SUhSdmIyeHpJR2x1SUhSb2FYTWdUR2xqWlc1elpTQkJaM0psWlcxbGJuUWdZWEpsSUd4cFkyVnVjMlZrTENCdWIzUWdjMjlzWkM1Y2JpQllhV0Z0Wlc0Z1dXRnFhU0JUYjJaMGQyRnlaU0JEYnk0c0lFeDBaQzRnY21WelpYSjJaWE1nWVd4c0lISnBaMmgwY3lCdWIzUWdaWGh3Y21WemMyeDVJR2R5WVc1MFpXUWdkRzhnZVc5MUxseHVYRzRnVkVoRklGTlBSbFJYUVZKRklFbFRJRkJTVDFaSlJFVkVJRndpUVZNZ1NWTmNJaXdnVjBsVVNFOVZWQ0JYUVZKU1FVNVVXU0JQUmlCQlRsa2dTMGxPUkN3Z1JWaFFVa1ZUVXlCUFVseHVJRWxOVUV4SlJVUXNJRWxPUTB4VlJFbE9SeUJDVlZRZ1RrOVVJRXhKVFVsVVJVUWdWRThnVkVoRklGZEJVbEpCVGxSSlJWTWdUMFlnVFVWU1EwaEJUbFJCUWtsTVNWUlpMRnh1SUVaSlZFNUZVMU1nUms5U0lFRWdVRUZTVkVsRFZVeEJVaUJRVlZKUVQxTkZJRUZPUkNCT1QwNUpUa1pTU1U1SFJVMUZUbFF1SUVsT0lFNVBJRVZXUlU1VUlGTklRVXhNSUZSSVJWeHVJRUZWVkVoUFVsTWdUMUlnUTA5UVdWSkpSMGhVSUVoUFRFUkZVbE1nUWtVZ1RFbEJRa3hGSUVaUFVpQkJUbGtnUTB4QlNVMHNJRVJCVFVGSFJWTWdUMUlnVDFSSVJWSmNiaUJNU1VGQ1NVeEpWRmtzSUZkSVJWUklSVklnU1U0Z1FVNGdRVU5VU1U5T0lFOUdJRU5QVGxSU1FVTlVMQ0JVVDFKVUlFOVNJRTlVU0VWU1YwbFRSU3dnUVZKSlUwbE9SeUJHVWs5TkxGeHVJRTlWVkNCUFJpQlBVaUJKVGlCRFQwNU9SVU5VU1U5T0lGZEpWRWdnVkVoRklGTlBSbFJYUVZKRklFOVNJRlJJUlNCVlUwVWdUMUlnVDFSSVJWSWdSRVZCVEVsT1IxTWdTVTVjYmlCVVNFVWdVMDlHVkZkQlVrVXVYRzRnS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpOWNibWx0Y0c5eWRDQkpibkIxZEVGemMyVnRZbXhsY2lCbWNtOXRJQ2N1TGk5eVpXNWtaWEpsY2k5amIzSmxMMmx1Y0hWMExXRnpjMlZ0WW14bGNpYzdYRzVjYm14bGRDQlVhV3hsWkUxaGNGSmxibVJsY2tSaGRHRk1hWE4wSUQwZ1kyTXVRMnhoYzNNb2UxeHVJQ0FnSUc1aGJXVTZJQ2RqWXk1VWFXeGxaRTFoY0ZKbGJtUmxja1JoZEdGTWFYTjBKeXhjYmx4dUlDQWdJR04wYjNJZ0tDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWtZWFJoVEdsemRDQTlJRnRkTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl2Wm1aelpYUWdQU0F3TzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JmY0hWemFGSmxibVJsY2tSaGRHRWdLQ2tnZTF4dUlDQWdJQ0FnSUNCc1pYUWdjbVZ1WkdWeVJHRjBZU0E5SUh0OU8xeHVJQ0FnSUNBZ0lDQnlaVzVrWlhKRVlYUmhMbWxoSUQwZ2JtVjNJRWx1Y0hWMFFYTnpaVzFpYkdWeUtDazdYRzRnSUNBZ0lDQWdJSEpsYm1SbGNrUmhkR0V1Ym05a1pYTlNaVzVrWlhKTWFYTjBJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJSaGRHRk1hWE4wTG5CMWMyZ29jbVZ1WkdWeVJHRjBZU2s3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJSEJ2Y0ZKbGJtUmxja1JoZEdFZ0tHSjFabVpsY2lrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZiMlptYzJWMElENDlJSFJvYVhNdVgyUmhkR0ZNYVhOMExteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjSFZ6YUZKbGJtUmxja1JoZEdFb0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JzWlhRZ2NtVnVaR1Z5UkdGMFlTQTlJSFJvYVhNdVgyUmhkR0ZNYVhOMFczUm9hWE11WDI5bVpuTmxkRjA3WEc0Z0lDQWdJQ0FnSUhKbGJtUmxja1JoZEdFdWJtOWtaWE5TWlc1a1pYSk1hWE4wTG14bGJtZDBhQ0E5SURBN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JwWVNBOUlISmxibVJsY2tSaGRHRXVhV0U3WEc0Z0lDQWdJQ0FnSUdsaExsOTJaWEowWlhoQ2RXWm1aWElnUFNCaWRXWm1aWEl1WDNaaU8xeHVJQ0FnSUNBZ0lDQnBZUzVmYVc1a1pYaENkV1ptWlhJZ1BTQmlkV1ptWlhJdVgybGlPMXh1SUNBZ0lDQWdJQ0JwWVM1ZmMzUmhjblFnUFNCaWRXWm1aWEl1YVc1a2FXTmxUMlptYzJWME8xeHVJQ0FnSUNBZ0lDQnBZUzVmWTI5MWJuUWdQU0F3TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl2Wm1aelpYUXJLenRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYm1SbGNrUmhkR0U3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJSEIxYzJoT2IyUmxjMHhwYzNRZ0tISmxibVJsY2tSaGRHRXNJRzV2WkdWelRHbHpkQ2tnZTF4dUlDQWdJQ0FnSUNCeVpXNWtaWEpFWVhSaExtNXZaR1Z6VW1WdVpHVnlUR2x6ZEM1d2RYTm9LRzV2WkdWelRHbHpkQ2s3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJSEpsYzJWMElDZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZiMlptYzJWMElEMGdNRHRjYmlBZ0lDQjlYRzU5S1R0Y2JseHVZMk11Vkdsc1pXUk5ZWEJTWlc1a1pYSkVZWFJoVEdsemRDQTlJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdWR2xzWldSTllYQlNaVzVrWlhKRVlYUmhUR2x6ZERzaVhYMD0iXX0=