(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/tilemap/CCTiledMap.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        require('./CCTMXXMLParser');
        require('./CCTiledMapAsset');
        require('./CCTiledLayer');
        require('./CCTiledTile');
        require('./CCTiledObjectGroup');
        var Orientation = cc.Enum({
            ORTHO: 0,
            HEX: 1,
            ISO: 2
        });
        var Property = cc.Enum({
            NONE: 0,
            MAP: 1,
            LAYER: 2,
            OBJECTGROUP: 3,
            OBJECT: 4,
            TILE: 5
        });
        var TileFlag = cc.Enum({
            HORIZONTAL: 2147483648,
            VERTICAL: 1073741824,
            DIAGONAL: 536870912,
            FLIPPED_ALL: (2147483648 | 1073741824 | 536870912 | 268435456) >>> 0,
            FLIPPED_MASK: ~(2147483648 | 1073741824 | 536870912 | 268435456) >>> 0
        });
        var StaggerAxis = cc.Enum({
            STAGGERAXIS_X: 0,
            STAGGERAXIS_Y: 1
        });
        var StaggerIndex = cc.Enum({
            STAGGERINDEX_ODD: 0,
            STAGGERINDEX_EVEN: 1
        });
        var RenderOrder = cc.Enum({
            RightDown: 0,
            RightUp: 1,
            LeftDown: 2,
            LeftUp: 3
        });
        var TMXObjectType = cc.Enum({
            RECT: 0,
            ELLIPSE: 1,
            POLYGON: 2,
            POLYLINE: 3,
            IMAGE: 4,
            TEXT: 5
        });
        var TiledMap = cc.Class({
            name: 'cc.TiledMap',
            extends: cc.Component,
            editor: CC_EDITOR && {
                executeInEditMode: true,
                menu: 'i18n:MAIN_MENU.component.renderers/TiledMap'
            },
            ctor: function ctor() {
                this._texGrids = [];
                this._textures = [];
                this._tilesets = [];
                this._animations = [];
                this._imageLayers = [];
                this._layers = [];
                this._groups = [];
                this._images = [];
                this._properties = [];
                this._tileProperties = [];
                this._mapSize = cc.size(0, 0);
                this._tileSize = cc.size(0, 0);
            },
            statics: {
                Orientation: Orientation,
                Property: Property,
                TileFlag: TileFlag,
                StaggerAxis: StaggerAxis,
                StaggerIndex: StaggerIndex,
                TMXObjectType: TMXObjectType,
                RenderOrder: RenderOrder
            },
            properties: {
                _tmxFile: {
                    default: null,
                    type: cc.TiledMapAsset
                },
                tmxAsset: {
                    get: function get() {
                        return this._tmxFile;
                    },
                    set: function set(value, force) {
                        if (this._tmxFile !== value || CC_EDITOR && force) {
                            this._tmxFile = value;
                            this._applyFile();
                        }
                    },
                    type: cc.TiledMapAsset
                }
            },
            getMapSize: function getMapSize() {
                return this._mapSize;
            },
            getTileSize: function getTileSize() {
                return this._tileSize;
            },
            getMapOrientation: function getMapOrientation() {
                return this._mapOrientation;
            },
            getObjectGroups: function getObjectGroups() {
                return this._groups;
            },
            getObjectGroup: function getObjectGroup(groupName) {
                var groups = this._groups;
                for (var i = 0, l = groups.length; i < l; i++) {
                    var group = groups[i];
                    if (group && group.getGroupName() === groupName) {
                        return group;
                    }
                }
                return null;
            },
            enableCulling: function enableCulling(value) {
                var layers = this._layers;
                for (var i = 0; i < layers.length; ++i) {
                    layers[i].enableCulling(value);
                }
            },
            getProperties: function getProperties() {
                return this._properties;
            },
            getLayers: function getLayers() {
                return this._layers;
            },
            getLayer: function getLayer(layerName) {
                var layers = this._layers;
                for (var i = 0, l = layers.length; i < l; i++) {
                    var layer = layers[i];
                    if (layer && layer.getLayerName() === layerName) {
                        return layer;
                    }
                }
                return null;
            },
            _changeLayer: function _changeLayer(layerName, replaceLayer) {
                var layers = this._layers;
                for (var i = 0, l = layers.length; i < l; i++) {
                    var layer = layers[i];
                    if (layer && layer.getLayerName() === layerName) {
                        layers[i] = replaceLayer;
                        return;
                    }
                }
            },
            getProperty: function getProperty(propertyName) {
                return this._properties[propertyName.toString()];
            },
            getPropertiesForGID: function getPropertiesForGID(GID) {
                return this._tileProperties[GID];
            },
            __preload: function __preload() {
                if (this._tmxFile) {
                    this._applyFile();
                }
            },
            onEnable: function onEnable() {
                this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this._syncAnchorPoint, this);
            },
            onDisable: function onDisable() {
                this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this._syncAnchorPoint, this);
            },
            _applyFile: function _applyFile() {
                var file = this._tmxFile;
                if (file) {
                    var texValues = file.textures;
                    var texKeys = file.textureNames;
                    var textures = {};
                    for (var i = 0; i < texValues.length; ++i) {
                        textures[texKeys[i]] = texValues[i];
                    }
                    var imageLayerTextures = {};
                    texValues = file.imageLayerTextures;
                    texKeys = file.imageLayerTextureNames;
                    for (var _i = 0; _i < texValues.length; ++_i) {
                        imageLayerTextures[texKeys[_i]] = texValues[_i];
                    }
                    var tsxFileNames = file.tsxFileNames;
                    var tsxFiles = file.tsxFiles;
                    var tsxMap = {};
                    for (var _i2 = 0; _i2 < tsxFileNames.length; ++_i2) {
                        if (tsxFileNames[_i2].length > 0) {
                            tsxMap[tsxFileNames[_i2]] = tsxFiles[_i2].text;
                        }
                    }
                    var mapInfo = new cc.TMXMapInfo(file.tmxXmlStr, tsxMap, textures, imageLayerTextures);
                    var tilesets = mapInfo.getTilesets();
                    if (!tilesets || tilesets.length === 0)
                        cc.logID(7241);
                    this._buildWithMapInfo(mapInfo);
                } else {
                    this._releaseMapInfo();
                }
            },
            _releaseMapInfo: function _releaseMapInfo() {
                var layers = this._layers;
                for (var i = 0, l = layers.length; i < l; i++) {
                    layers[i].node.removeFromParent(true);
                    layers[i].node.destroy();
                }
                layers.length = 0;
                var groups = this._groups;
                for (var _i3 = 0, _l = groups.length; _i3 < _l; _i3++) {
                    groups[_i3].node.removeFromParent(true);
                    groups[_i3].node.destroy();
                }
                groups.length = 0;
                var images = this._images;
                for (var _i4 = 0, _l2 = images.length; _i4 < _l2; _i4++) {
                    images[_i4].removeFromParent(true);
                    images[_i4].destroy();
                }
                images.length = 0;
            },
            _syncAnchorPoint: function _syncAnchorPoint() {
                var anchor = this.node.getAnchorPoint();
                var leftTopX = this.node.width * anchor.x;
                var leftTopY = this.node.height * (1 - anchor.y);
                var i = void 0, l = void 0;
                for (i = 0, l = this._layers.length; i < l; i++) {
                    var layerInfo = this._layers[i];
                    var layerNode = layerInfo.node;
                    layerNode.setAnchorPoint(anchor);
                }
                for (i = 0, l = this._groups.length; i < l; i++) {
                    var groupInfo = this._groups[i];
                    var groupNode = groupInfo.node;
                    groupNode.anchorX = 0.5;
                    groupNode.anchorY = 0.5;
                    groupNode.x = groupInfo._offset.x - leftTopX + groupNode.width * groupNode.anchorX;
                    groupNode.y = groupInfo._offset.y + leftTopY - groupNode.height * groupNode.anchorY;
                }
                for (i = 0, l = this._images.length; i < l; i++) {
                    var image = this._images[i];
                    image.anchorX = 0.5;
                    image.anchorY = 0.5;
                    image.x = image._offset.x - leftTopX + image.width * image.anchorX;
                    image.y = image._offset.y + leftTopY - image.height * image.anchorY;
                }
            },
            _fillAniGrids: function _fillAniGrids(texGrids, animations) {
                for (var i in animations) {
                    var animation = animations[i];
                    if (!animation)
                        continue;
                    var frames = animation.frames;
                    for (var j = 0; j < frames.length; j++) {
                        var frame = frames[j];
                        frame.grid = texGrids[frame.tileid];
                    }
                }
            },
            _buildLayerAndGroup: function _buildLayerAndGroup() {
                var tilesets = this._tilesets;
                var texGrids = this._texGrids;
                var animations = this._animations;
                texGrids.length = 0;
                for (var i = 0, l = tilesets.length; i < l; ++i) {
                    var tilesetInfo = tilesets[i];
                    if (!tilesetInfo)
                        continue;
                    cc.TiledMap.fillTextureGrids(tilesetInfo, texGrids, i);
                }
                this._fillAniGrids(texGrids, animations);
                var layers = this._layers;
                var groups = this._groups;
                var images = this._images;
                var oldNodeNames = {};
                for (var _i5 = 0, n = layers.length; _i5 < n; _i5++) {
                    oldNodeNames[layers[_i5].node._name] = true;
                }
                for (var _i6 = 0, _n = groups.length; _i6 < _n; _i6++) {
                    oldNodeNames[groups[_i6].node._name] = true;
                }
                for (var _i7 = 0, _n2 = images.length; _i7 < _n2; _i7++) {
                    oldNodeNames[images[_i7]._name] = true;
                }
                layers = this._layers = [];
                groups = this._groups = [];
                images = this._images = [];
                var mapInfo = this._mapInfo;
                var node = this.node;
                var layerInfos = mapInfo.getAllChildren();
                var textures = this._textures;
                var maxWidth = 0;
                var maxHeight = 0;
                if (layerInfos && layerInfos.length > 0) {
                    for (var _i8 = 0, len = layerInfos.length; _i8 < len; _i8++) {
                        var layerInfo = layerInfos[_i8];
                        var name = layerInfo.name;
                        var child = this.node.getChildByName(name);
                        oldNodeNames[name] = false;
                        if (!child) {
                            child = new cc.Node();
                            child.name = name;
                            node.addChild(child);
                        }
                        child.setSiblingIndex(_i8);
                        child.active = layerInfo.visible;
                        if (layerInfo instanceof cc.TMXLayerInfo) {
                            var layer = child.getComponent(cc.TiledLayer);
                            if (!layer) {
                                layer = child.addComponent(cc.TiledLayer);
                            }
                            layer._init(layerInfo, mapInfo, tilesets, textures, texGrids);
                            layerInfo.ownTiles = false;
                            layers.push(layer);
                        } else if (layerInfo instanceof cc.TMXObjectGroupInfo) {
                            var group = child.getComponent(cc.TiledObjectGroup);
                            if (!group) {
                                group = child.addComponent(cc.TiledObjectGroup);
                            }
                            group._init(layerInfo, mapInfo, texGrids);
                            groups.push(group);
                        } else if (layerInfo instanceof cc.TMXImageLayerInfo) {
                            var texture = layerInfo.sourceImage;
                            child.opacity = layerInfo.opacity;
                            child.layerInfo = layerInfo;
                            child._offset = cc.v2(layerInfo.offset.x, -layerInfo.offset.y);
                            var image = child.getComponent(cc.Sprite);
                            if (!image) {
                                image = child.addComponent(cc.Sprite);
                            }
                            image.spriteFrame = new cc.SpriteFrame();
                            image.spriteFrame.setTexture(texture);
                            child.width = texture.width;
                            child.height = texture.height;
                            images.push(child);
                        }
                        maxWidth = Math.max(maxWidth, child.width);
                        maxHeight = Math.max(maxHeight, child.height);
                    }
                }
                var children = node.children;
                for (var _i9 = 0, _n3 = children.length; _i9 < _n3; _i9++) {
                    var c = children[_i9];
                    if (oldNodeNames[c._name]) {
                        c.destroy();
                    }
                }
                this.node.width = maxWidth;
                this.node.height = maxHeight;
                this._syncAnchorPoint();
            },
            _buildWithMapInfo: function _buildWithMapInfo(mapInfo) {
                this._mapInfo = mapInfo;
                this._mapSize = mapInfo.getMapSize();
                this._tileSize = mapInfo.getTileSize();
                this._mapOrientation = mapInfo.orientation;
                this._properties = mapInfo.properties;
                this._tileProperties = mapInfo.getTileProperties();
                this._imageLayers = mapInfo.getImageLayers();
                this._animations = mapInfo.getTileAnimations();
                this._tilesets = mapInfo.getTilesets();
                var tilesets = this._tilesets;
                this._textures.length = 0;
                var totalTextures = [];
                for (var i = 0, l = tilesets.length; i < l; ++i) {
                    var tilesetInfo = tilesets[i];
                    if (!tilesetInfo || !tilesetInfo.sourceImage)
                        continue;
                    this._textures[i] = tilesetInfo.sourceImage;
                    totalTextures.push(tilesetInfo.sourceImage);
                }
                for (var _i10 = 0; _i10 < this._imageLayers.length; _i10++) {
                    var imageLayer = this._imageLayers[_i10];
                    if (!imageLayer || !imageLayer.sourceImage)
                        continue;
                    totalTextures.push(imageLayer.sourceImage);
                }
                cc.TiledMap.loadAllTextures(totalTextures, function () {
                    this._buildLayerAndGroup();
                }.bind(this));
            },
            update: function update(dt) {
                var animations = this._animations;
                var texGrids = this._texGrids;
                for (var aniGID in animations) {
                    var animation = animations[aniGID];
                    var frames = animation.frames;
                    var frame = frames[animation.frameIdx];
                    animation.dt += dt;
                    if (frame.duration < animation.dt) {
                        animation.dt = 0;
                        animation.frameIdx++;
                        if (animation.frameIdx >= frames.length) {
                            animation.frameIdx = 0;
                        }
                        frame = frames[animation.frameIdx];
                    }
                    texGrids[aniGID] = frame.grid;
                }
            }
        });
        cc.TiledMap = module.exports = TiledMap;
        cc.TiledMap.loadAllTextures = function (textures, loadedCallback) {
            var totalNum = textures.length;
            if (totalNum === 0) {
                loadedCallback();
                return;
            }
            var curNum = 0;
            var itemCallback = function itemCallback() {
                curNum++;
                if (curNum >= totalNum) {
                    loadedCallback();
                }
            };
            for (var i = 0; i < totalNum; i++) {
                var tex = textures[i];
                if (!tex.loaded) {
                    tex.once('load', function () {
                        itemCallback();
                    });
                } else {
                    itemCallback();
                }
            }
        };
        cc.TiledMap.fillTextureGrids = function (tileset, texGrids, texId) {
            var tex = tileset.sourceImage;
            if (!tileset.imageSize.width || !tileset.imageSize.height) {
                tileset.imageSize.width = tex.width;
                tileset.imageSize.height = tex.height;
            }
            var tw = tileset._tileSize.width, th = tileset._tileSize.height, imageW = tex.width, imageH = tex.height, spacing = tileset.spacing, margin = tileset.margin, cols = Math.floor((imageW - margin * 2 + spacing) / (tw + spacing)), rows = Math.floor((imageH - margin * 2 + spacing) / (th + spacing)), count = rows * cols, gid = tileset.firstGid, grid = null, override = texGrids[gid] ? true : false, texelCorrect = cc.macro.FIX_ARTIFACTS_BY_STRECHING_TEXEL_TMX ? 0.5 : 0;
            if (count <= 0) {
                count = 1;
            }
            var maxGid = tileset.firstGid + count;
            for (; gid < maxGid; ++gid) {
                if (override && !texGrids[gid]) {
                    override = false;
                }
                if (!override && texGrids[gid]) {
                    break;
                }
                grid = {
                    texId: texId,
                    tileset: tileset,
                    x: 0,
                    y: 0,
                    width: tw,
                    height: th,
                    t: 0,
                    l: 0,
                    r: 0,
                    b: 0,
                    gid: gid
                };
                tileset.rectForGID(gid, grid);
                grid.x += texelCorrect;
                grid.y += texelCorrect;
                grid.width -= texelCorrect * 2;
                grid.height -= texelCorrect * 2;
                grid.t = grid.y / imageH;
                grid.l = grid.x / imageW;
                grid.r = (grid.x + grid.width) / imageW;
                grid.b = (grid.y + grid.height) / imageH;
                texGrids[gid] = grid;
            }
        };
        cc.js.obsolete(cc.TiledMap.prototype, 'cc.TiledMap.tmxFile', 'tmxAsset', true);
        cc.js.get(cc.TiledMap.prototype, 'mapLoaded', function () {
            cc.errorID(7203);
            return [];
        }, false);
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,