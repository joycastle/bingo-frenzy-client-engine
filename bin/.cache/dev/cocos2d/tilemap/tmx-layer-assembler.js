(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/tilemap/tmx-layer-assembler.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _assembler = require('../core/renderer/assembler');
        var _assembler2 = _interopRequireDefault(_assembler);
        var _vmath = require('../core/vmath');
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var TiledLayer = require('./CCTiledLayer');
        var TiledMap = require('./CCTiledMap');
        var TileFlag = TiledMap.TileFlag;
        var FLIPPED_MASK = TileFlag.FLIPPED_MASK;
        var renderer = require('../core/renderer/');
        var vfmtPosUvColor = require('../core/renderer/webgl/vertex-format').vfmtPosUvColor;
        var MaxGridsLimit = parseInt(65535 / 6);
        var RenderOrder = TiledMap.RenderOrder;
        var RenderFlow = require('../core/renderer/render-flow');
        var _mat4_temp = _vmath.mat4.create();
        var _vec3_temp = _vmath.vec3.create();
        var _leftDown = {
            row: 0,
            col: 0
        };
        var _uva = {
            x: 0,
            y: 0
        };
        var _uvb = {
            x: 0,
            y: 0
        };
        var _uvc = {
            x: 0,
            y: 0
        };
        var _uvd = {
            x: 0,
            y: 0
        };
        var _renderData = null, _ia = null, _fillGrids = 0, _vfOffset = 0, _moveX = 0, _moveY = 0, _layerMat = null, _renderer = null, _renderDataList = null, _buffer = null, _curMaterial = null, _comp = null, _vbuf = null, _uintbuf = null;
        function _visitUserNode(userNode) {
            if (CC_NATIVERENDERER)
                return;
            userNode._updateLocalMatrix();
            _vmath.mat4.mul(userNode._worldMatrix, _layerMat, userNode._matrix);
            userNode._renderFlag &= ~(RenderFlow.FLAG_TRANSFORM | RenderFlow.FLAG_BREAK_FLOW);
            RenderFlow.visitRootNode(userNode);
            userNode._renderFlag |= RenderFlow.FLAG_BREAK_FLOW;
        }
        function _flush() {
            if (_ia._count === 0) {
                return;
            }
            _renderer.material = _renderData.material;
            _renderer.node = _comp.node;
            _renderer._flushIA(_renderData.ia);
            var needSwitchBuffer = _fillGrids >= MaxGridsLimit;
            if (needSwitchBuffer) {
                _buffer.uploadData();
                _buffer.switchBuffer();
                _vbuf = _buffer._vData;
                _uintbuf = _buffer._uintVData;
                _renderData = _renderDataList.popRenderData(_buffer);
                _ia = _renderData.ia;
                _vfOffset = 0;
                _fillGrids = 0;
            } else {
                _renderData = _renderDataList.popRenderData(_buffer);
                _ia = _renderData.ia;
            }
            _renderData.material = _curMaterial;
        }
        function _renderNodes(nodeRow, nodeCol) {
            var nodesInfo = _comp._getNodesByRowCol(nodeRow, nodeCol);
            if (!nodesInfo || nodesInfo.count == 0)
                return;
            var nodesList = nodesInfo.list;
            var newIdx = 0, oldIdx = 0;
            _flush();
            _renderer.worldMatDirty++;
            for (; newIdx < nodesInfo.count;) {
                var dataComp = nodesList[oldIdx];
                oldIdx++;
                if (!dataComp)
                    continue;
                _visitUserNode(dataComp.node);
                if (newIdx !== oldIdx) {
                    nodesList[newIdx] = dataComp;
                    dataComp._index = newIdx;
                }
                newIdx++;
            }
            nodesList.length = newIdx;
            _renderer.worldMatDirty--;
            _renderDataList.pushNodesList(_renderData, nodesList);
            _renderer._flush();
            _renderer.node = _comp.node;
        }
        function _flipTexture(inGrid, gid) {
            _uva.x = inGrid.l;
            _uva.y = inGrid.t;
            _uvb.x = inGrid.r;
            _uvb.y = inGrid.t;
            _uvc.x = inGrid.l;
            _uvc.y = inGrid.b;
            _uvd.x = inGrid.r;
            _uvd.y = inGrid.b;
            var tempVal = null;
            if ((gid & TileFlag.DIAGONAL) >>> 0) {
                tempVal = _uvb;
                _uvb = _uvc;
                _uvc = tempVal;
            }
            if ((gid & TileFlag.HORIZONTAL) >>> 0) {
                tempVal = _uva;
                _uva = _uvb;
                _uvb = tempVal;
                tempVal = _uvc;
                _uvc = _uvd;
                _uvd = tempVal;
            }
            if ((gid & TileFlag.VERTICAL) >>> 0) {
                tempVal = _uva;
                _uva = _uvc;
                _uvc = tempVal;
                tempVal = _uvb;
                _uvb = _uvd;
                _uvd = tempVal;
            }
        }
        ;
        var TmxAssembler = function (_Assembler) {
            _inherits(TmxAssembler, _Assembler);
            function TmxAssembler() {
                _classCallCheck(this, TmxAssembler);
                return _possibleConstructorReturn(this, (TmxAssembler.__proto__ || Object.getPrototypeOf(TmxAssembler)).apply(this, arguments));
            }
            _createClass(TmxAssembler, [
                {
                    key: 'updateRenderData',
                    value: function updateRenderData(comp) {
                        if (!comp._renderDataList) {
                            comp._buffer = new cc.TiledMapBuffer(renderer._handle, vfmtPosUvColor);
                            comp._renderDataList = new cc.TiledMapRenderDataList();
                        }
                    }
                },
                {
                    key: 'fillBuffers',
                    value: function fillBuffers(comp, renderer) {
                        var vertices = comp._vertices;
                        if (vertices.length === 0)
                            return;
                        comp._updateCulling();
                        var layerNode = comp.node;
                        _moveX = comp._leftDownToCenterX;
                        _moveY = comp._leftDownToCenterY;
                        _layerMat = layerNode._worldMatrix;
                        _renderer = renderer;
                        _comp = comp;
                        _renderDataList = comp._renderDataList;
                        _buffer = comp._buffer;
                        if (comp._isCullingDirty() || comp._isUserNodeDirty() || comp._hasAnimation() || comp._hasTiledNode()) {
                            _buffer.reset();
                            var leftDown = void 0, rightTop = void 0;
                            if (comp._enableCulling) {
                                var cullingRect = comp._cullingRect;
                                leftDown = cullingRect.leftDown;
                                rightTop = cullingRect.rightTop;
                            } else {
                                leftDown = _leftDown;
                                rightTop = comp._rightTop;
                            }
                            var maxRows = rightTop.row - leftDown.row + 1;
                            var maxCols = rightTop.col - leftDown.col + 1;
                            var maxGrids = maxRows * maxCols;
                            if (maxGrids > MaxGridsLimit) {
                                maxGrids = MaxGridsLimit;
                            }
                            _buffer.request(maxGrids * 4, maxGrids * 6);
                            switch (comp._renderOrder) {
                            case RenderOrder.RightDown:
                                this.traverseGrids(leftDown, rightTop, -1, 1);
                                break;
                            case RenderOrder.LeftDown:
                                this.traverseGrids(leftDown, rightTop, -1, -1);
                                break;
                            case RenderOrder.RightUp:
                                this.traverseGrids(leftDown, rightTop, 1, 1);
                                break;
                            case RenderOrder.LeftUp:
                                this.traverseGrids(leftDown, rightTop, 1, -1);
                                break;
                            }
                            comp._setCullingDirty(false);
                            comp._setUserNodeDirty(false);
                        } else if (!CC_NATIVERENDERER) {
                            var renderData = null;
                            var nodesRenderList = null;
                            var nodesList = null;
                            for (var i = 0; i < _renderDataList._offset; i++) {
                                renderData = _renderDataList._dataList[i];
                                nodesRenderList = renderData.nodesRenderList;
                                if (nodesRenderList.length > 0) {
                                    renderer.worldMatDirty++;
                                    for (var j = 0; j < nodesRenderList.length; j++) {
                                        nodesList = nodesRenderList[j];
                                        if (!nodesList)
                                            continue;
                                        for (var idx = 0; idx < nodesList.length; idx++) {
                                            var dataComp = nodesList[idx];
                                            if (!dataComp)
                                                continue;
                                            _visitUserNode(dataComp.node);
                                        }
                                    }
                                    renderer.worldMatDirty--;
                                    renderer._flush();
                                }
                                if (renderData.ia._count > 0) {
                                    renderer.material = renderData.material;
                                    renderer.node = layerNode;
                                    renderer._flushIA(renderData.ia);
                                }
                            }
                        }
                        _renderData = null;
                        _ia = null;
                        _layerMat = null;
                        _renderer = null;
                        _renderDataList = null;
                        _buffer = null;
                        _curMaterial = null;
                        _comp = null;
                        _vbuf = null;
                        _uintbuf = null;
                    }
                },
                {
                    key: 'traverseGrids',
                    value: function traverseGrids(leftDown, rightTop, rowMoveDir, colMoveDir) {
                        _renderDataList.reset();
                        if (rightTop.row < 0 || rightTop.col < 0)
                            return;
                        _renderData = _renderDataList.popRenderData(_buffer);
                        _ia = _renderData.ia;
                        _vbuf = _buffer._vData;
                        _uintbuf = _buffer._uintVData;
                        _fillGrids = 0;
                        _vfOffset = 0;
                        _curMaterial = null;
                        var layerNode = _comp.node;
                        var color = layerNode._color._val;
                        var tiledTiles = _comp._tiledTiles;
                        var texGrids = _comp._texGrids;
                        var tiles = _comp._tiles;
                        var texIdToMatIdx = _comp._texIdToMatIndex;
                        var mats = _comp.sharedMaterials;
                        var vertices = _comp._vertices;
                        var rowData = void 0, col = void 0, cols = void 0, row = void 0, rows = void 0, colData = void 0, tileSize = void 0, grid = null, gid = 0;
                        var left = 0, bottom = 0, right = 0, top = 0;
                        var tiledNode = null, curTexIdx = -1, matIdx = void 0;
                        var colNodesCount = 0, checkColRange = true;
                        if (rowMoveDir == -1) {
                            row = rightTop.row;
                            rows = leftDown.row;
                        } else {
                            row = leftDown.row;
                            rows = rightTop.row;
                        }
                        for (; (rows - row) * rowMoveDir >= 0; row += rowMoveDir) {
                            rowData = vertices[row];
                            colNodesCount = _comp._getNodesCountByRow(row);
                            checkColRange = colNodesCount == 0 && rowData != undefined;
                            if (colMoveDir == 1) {
                                col = checkColRange && leftDown.col < rowData.minCol ? rowData.minCol : leftDown.col;
                                cols = checkColRange && rightTop.col > rowData.maxCol ? rowData.maxCol : rightTop.col;
                            } else {
                                col = checkColRange && rightTop.col > rowData.maxCol ? rowData.maxCol : rightTop.col;
                                cols = checkColRange && leftDown.col < rowData.minCol ? rowData.minCol : leftDown.col;
                            }
                            for (; (cols - col) * colMoveDir >= 0; col += colMoveDir) {
                                colData = rowData && rowData[col];
                                if (!colData) {
                                    if (colNodesCount > 0)
                                        _renderNodes(row, col);
                                    continue;
                                }
                                gid = tiles[colData.index];
                                grid = texGrids[(gid & FLIPPED_MASK) >>> 0];
                                if (!grid)
                                    continue;
                                if (curTexIdx !== grid.texId) {
                                    if (curTexIdx !== -1) {
                                        _flush();
                                    }
                                    curTexIdx = grid.texId;
                                    matIdx = texIdToMatIdx[curTexIdx];
                                    _curMaterial = mats[matIdx];
                                    _renderData.material = _curMaterial;
                                }
                                if (!_curMaterial)
                                    continue;
                                left = colData.left - _moveX;
                                bottom = colData.bottom - _moveY;
                                tileSize = grid.tileset._tileSize;
                                right = left + tileSize.width;
                                top = bottom + tileSize.height;
                                tiledNode = tiledTiles[colData.index];
                                if (!tiledNode) {
                                    _vbuf[_vfOffset] = left;
                                    _vbuf[_vfOffset + 1] = top;
                                    _uintbuf[_vfOffset + 4] = color;
                                    _vbuf[_vfOffset + 5] = left;
                                    _vbuf[_vfOffset + 6] = bottom;
                                    _uintbuf[_vfOffset + 9] = color;
                                    _vbuf[_vfOffset + 10] = right;
                                    _vbuf[_vfOffset + 11] = top;
                                    _uintbuf[_vfOffset + 14] = color;
                                    _vbuf[_vfOffset + 15] = right;
                                    _vbuf[_vfOffset + 16] = bottom;
                                    _uintbuf[_vfOffset + 19] = color;
                                } else {
                                    this.fillByTiledNode(tiledNode.node, _vbuf, _uintbuf, left, right, top, bottom);
                                }
                                _flipTexture(grid, gid);
                                _vbuf[_vfOffset + 2] = _uva.x;
                                _vbuf[_vfOffset + 3] = _uva.y;
                                _vbuf[_vfOffset + 7] = _uvc.x;
                                _vbuf[_vfOffset + 8] = _uvc.y;
                                _vbuf[_vfOffset + 12] = _uvb.x;
                                _vbuf[_vfOffset + 13] = _uvb.y;
                                _vbuf[_vfOffset + 17] = _uvd.x;
                                _vbuf[_vfOffset + 18] = _uvd.y;
                                _vfOffset += 20;
                                _buffer.adjust(4, 6);
                                _ia._count += 6;
                                _fillGrids++;
                                if (colNodesCount > 0)
                                    _renderNodes(row, col);
                                if (_fillGrids >= MaxGridsLimit) {
                                    _flush();
                                }
                            }
                        }
                        _buffer.uploadData();
                        if (_ia._count > 0) {
                            _renderer.material = _renderData.material;
                            _renderer.node = _comp.node;
                            _renderer._flushIA(_renderData.ia);
                        }
                    }
                },
                {
                    key: 'fillByTiledNode',
                    value: function fillByTiledNode(tiledNode, vbuf, uintbuf, left, right, top, bottom) {
                        tiledNode._updateLocalMatrix();
                        _vmath.mat4.copy(_mat4_temp, tiledNode._matrix);
                        _vmath.vec3.set(_vec3_temp, -(left + _moveX), -(bottom + _moveY), 0);
                        _vmath.mat4.translate(_mat4_temp, _mat4_temp, _vec3_temp);
                        var m = _mat4_temp.m;
                        var a = m[0];
                        var b = m[1];
                        var c = m[4];
                        var d = m[5];
                        var tx = m[12];
                        var ty = m[13];
                        var color = tiledNode._color._val;
                        vbuf[_vfOffset] = left * a + top * c + tx;
                        vbuf[_vfOffset + 1] = left * b + top * d + ty;
                        uintbuf[_vfOffset + 4] = color;
                        vbuf[_vfOffset + 5] = left * a + bottom * c + tx;
                        vbuf[_vfOffset + 6] = left * b + bottom * d + ty;
                        uintbuf[_vfOffset + 9] = color;
                        vbuf[_vfOffset + 10] = right * a + top * c + tx;
                        vbuf[_vfOffset + 11] = right * b + top * d + ty;
                        uintbuf[_vfOffset + 14] = color;
                        vbuf[_vfOffset + 15] = right * a + bottom * c + tx;
                        vbuf[_vfOffset + 16] = right * b + bottom * d + ty;
                        uintbuf[_vfOffset + 19] = color;
                    }
                }
            ]);
            return TmxAssembler;
        }(_assembler2.default);
        exports.default = TmxAssembler;
        _assembler2.default.register(TiledLayer, TmxAssembler);
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,