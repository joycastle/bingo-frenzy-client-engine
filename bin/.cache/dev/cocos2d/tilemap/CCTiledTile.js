(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/tilemap/CCTiledTile.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var TiledTile = cc.Class({
            name: 'cc.TiledTile',
            extends: cc.Component,
            editor: CC_EDITOR && {
                executeInEditMode: true,
                menu: 'i18n:MAIN_MENU.component.renderers/TiledTile'
            },
            ctor: function ctor() {
                this._layer = null;
            },
            properties: {
                _x: 0,
                _y: 0,
                x: {
                    get: function get() {
                        return this._x;
                    },
                    set: function set(value) {
                        if (value === this._x)
                            return;
                        if (this._layer && this._layer._isInvalidPosition(value, this._y)) {
                            cc.warn('Invalid x, the valid value is between [%s] ~ [%s]', 0, this._layer._layerSize.width);
                            return;
                        }
                        this._resetTile();
                        this._x = value;
                        this._updateInfo();
                    },
                    type: cc.Integer
                },
                y: {
                    get: function get() {
                        return this._y;
                    },
                    set: function set(value) {
                        if (value === this._y)
                            return;
                        if (this._layer && this._layer._isInvalidPosition(this._x, value)) {
                            cc.warn('Invalid y, the valid value is between [%s] ~ [%s]', 0, this._layer._layerSize.height);
                            return;
                        }
                        this._resetTile();
                        this._y = value;
                        this._updateInfo();
                    },
                    type: cc.Integer
                },
                gid: {
                    get: function get() {
                        if (this._layer) {
                            return this._layer.getTileGIDAt(this._x, this._y);
                        }
                        return 0;
                    },
                    set: function set(value) {
                        if (this._layer) {
                            this._layer.setTileGIDAt(value, this._x, this._y);
                        }
                    },
                    type: cc.Integer
                }
            },
            onEnable: function onEnable() {
                var parent = this.node.parent;
                this._layer = parent.getComponent(cc.TiledLayer);
                this._resetTile();
                this._updateInfo();
            },
            onDisable: function onDisable() {
                this._resetTile();
            },
            _resetTile: function _resetTile() {
                if (this._layer && this._layer.getTiledTileAt(this._x, this._y) === this) {
                    this._layer.setTiledTileAt(this._x, this._y, null);
                }
            },
            _updateInfo: function _updateInfo() {
                if (!this._layer)
                    return;
                var x = this._x, y = this._y;
                if (this._layer.getTiledTileAt(x, y)) {
                    cc.warn('There is already a TiledTile at [%s, %s]', x, y);
                    return;
                }
                this.node.setPosition(this._layer.getPositionAt(x, y));
                this._layer.setTiledTileAt(x, y, this);
            }
        });
        cc.TiledTile = module.exports = TiledTile;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,