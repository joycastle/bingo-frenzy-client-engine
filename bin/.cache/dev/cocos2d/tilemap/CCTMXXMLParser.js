(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/tilemap/CCTMXXMLParser.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var codec = require('../compression/ZipUtils');
        var zlib = require('../compression/zlib.min');
        var js = require('../core/platform/js');
        require('../core/platform/CCSAXParser');
        function uint8ArrayToUint32Array(uint8Arr) {
            if (uint8Arr.length % 4 !== 0)
                return null;
            var arrLen = uint8Arr.length / 4;
            var retArr = window.Uint32Array ? new Uint32Array(arrLen) : [];
            for (var i = 0; i < arrLen; i++) {
                var offset = i * 4;
                retArr[i] = uint8Arr[offset] + uint8Arr[offset + 1] * (1 << 8) + uint8Arr[offset + 2] * (1 << 16) + uint8Arr[offset + 3] * (1 << 24);
            }
            return retArr;
        }
        cc.TMXLayerInfo = function () {
            this.properties = {};
            this.name = '';
            this._layerSize = null;
            this._tiles = [];
            this.visible = true;
            this._opacity = 0;
            this.ownTiles = true;
            this._minGID = 100000;
            this._maxGID = 0;
            this.offset = cc.v2(0, 0);
        };
        cc.TMXLayerInfo.prototype = {
            constructor: cc.TMXLayerInfo,
            getProperties: function getProperties() {
                return this.properties;
            },
            setProperties: function setProperties(value) {
                this.properties = value;
            }
        };
        cc.TMXImageLayerInfo = function () {
            this.name = '';
            this.visible = true;
            this.width = 0;
            this.height = 0;
            this.offset = cc.v2(0, 0);
            this._opacity = 0;
            this._trans = new cc.Color(255, 255, 255, 255);
            this.sourceImage = null;
        };
        cc.TMXObjectGroupInfo = function () {
            this.properties = {};
            this.name = '';
            this._objects = [];
            this.visible = true;
            this._opacity = 0;
            this._color = new cc.Color(255, 255, 255, 255);
            this.offset = cc.v2(0, 0);
            this._draworder = 'topdown';
        };
        cc.TMXObjectGroupInfo.prototype = {
            constructor: cc.TMXObjectGroupInfo,
            getProperties: function getProperties() {
                return this.properties;
            },
            setProperties: function setProperties(value) {
                this.properties = value;
            }
        };
        cc.TMXTilesetInfo = function () {
            this.name = '';
            this.firstGid = 0;
            this.spacing = 0;
            this.margin = 0;
            this.sourceImage = null;
            this.imageSize = cc.size(0, 0);
            this.tileOffset = cc.v2(0, 0);
            this._tileSize = cc.size(0, 0);
        };
        cc.TMXTilesetInfo.prototype = {
            constructor: cc.TMXTilesetInfo,
            rectForGID: function rectForGID(gid, result) {
                var rect = result || cc.rect(0, 0, 0, 0);
                rect.width = this._tileSize.width;
                rect.height = this._tileSize.height;
                gid &= cc.TiledMap.TileFlag.FLIPPED_MASK;
                gid = gid - parseInt(this.firstGid, 10);
                var max_x = parseInt((this.imageSize.width - this.margin * 2 + this.spacing) / (this._tileSize.width + this.spacing), 10);
                rect.x = parseInt(gid % max_x * (this._tileSize.width + this.spacing) + this.margin, 10);
                rect.y = parseInt(parseInt(gid / max_x, 10) * (this._tileSize.height + this.spacing) + this.margin, 10);
                return rect;
            }
        };
        function strToHAlign(value) {
            var hAlign = cc.Label.HorizontalAlign;
            switch (value) {
            case 'center':
                return hAlign.CENTER;
            case 'right':
                return hAlign.RIGHT;
            default:
                return hAlign.LEFT;
            }
        }
        function strToVAlign(value) {
            var vAlign = cc.Label.VerticalAlign;
            switch (value) {
            case 'center':
                return vAlign.CENTER;
            case 'bottom':
                return vAlign.BOTTOM;
            default:
                return vAlign.TOP;
            }
        }
        function strToColor(value) {
            if (!value) {
                return cc.color(0, 0, 0, 255);
            }
            value = value.indexOf('#') !== -1 ? value.substring(1) : value;
            if (value.length === 8) {
                var a = parseInt(value.substr(0, 2), 16) || 255;
                var r = parseInt(value.substr(2, 2), 16) || 0;
                var g = parseInt(value.substr(4, 2), 16) || 0;
                var b = parseInt(value.substr(6, 2), 16) || 0;
                return cc.color(r, g, b, a);
            } else {
                var _r = parseInt(value.substr(0, 2), 16) || 0;
                var _g = parseInt(value.substr(2, 2), 16) || 0;
                var _b = parseInt(value.substr(4, 2), 16) || 0;
                return cc.color(_r, _g, _b, 255);
            }
        }
        function getPropertyList(node, map) {
            var res = [];
            var properties = node.getElementsByTagName('properties');
            for (var i = 0; i < properties.length; ++i) {
                var property = properties[i].getElementsByTagName('property');
                for (var j = 0; j < property.length; ++j) {
                    res.push(property[j]);
                }
            }
            map = map || {};
            for (var _i = 0; _i < res.length; _i++) {
                var element = res[_i];
                var name = element.getAttribute('name');
                var type = element.getAttribute('type') || 'string';
                var value = element.getAttribute('value');
                if (type === 'int') {
                    value = parseInt(value);
                } else if (type === 'float') {
                    value = parseFloat(value);
                } else if (type === 'bool') {
                    value = value === 'true';
                } else if (type === 'color') {
                    value = strToColor(value);
                }
                map[name] = value;
            }
            return map;
        }
        cc.TMXMapInfo = function (tmxFile, tsxMap, textures, imageLayerTextures) {
            this.properties = [];
            this.orientation = null;
            this.parentElement = null;
            this.parentGID = null;
            this.layerAttrs = 0;
            this.storingCharacters = false;
            this.currentString = null;
            this.renderOrder = cc.TiledMap.RenderOrder.RightDown;
            this._supportVersion = [
                1,
                2,
                0
            ];
            this._parser = new cc.SAXParser();
            this._objectGroups = [];
            this._allChildren = [];
            this._mapSize = cc.size(0, 0);
            this._tileSize = cc.size(0, 0);
            this._layers = [];
            this._tilesets = [];
            this._imageLayers = [];
            this._tileProperties = {};
            this._tileAnimations = {};
            this._tsxMap = null;
            this._textures = null;
            this._staggerAxis = null;
            this._staggerIndex = null;
            this._hexSideLength = 0;
            this._imageLayerTextures = null;
            this.initWithXML(tmxFile, tsxMap, textures, imageLayerTextures);
        };
        cc.TMXMapInfo.prototype = {
            constructor: cc.TMXMapInfo,
            getOrientation: function getOrientation() {
                return this.orientation;
            },
            setOrientation: function setOrientation(value) {
                this.orientation = value;
            },
            getStaggerAxis: function getStaggerAxis() {
                return this._staggerAxis;
            },
            setStaggerAxis: function setStaggerAxis(value) {
                this._staggerAxis = value;
            },
            getStaggerIndex: function getStaggerIndex() {
                return this._staggerIndex;
            },
            setStaggerIndex: function setStaggerIndex(value) {
                this._staggerIndex = value;
            },
            getHexSideLength: function getHexSideLength() {
                return this._hexSideLength;
            },
            setHexSideLength: function setHexSideLength(value) {
                this._hexSideLength = value;
            },
            getMapSize: function getMapSize() {
                return cc.size(this._mapSize.width, this._mapSize.height);
            },
            setMapSize: function setMapSize(value) {
                this._mapSize.width = value.width;
                this._mapSize.height = value.height;
            },
            _getMapWidth: function _getMapWidth() {
                return this._mapSize.width;
            },
            _setMapWidth: function _setMapWidth(width) {
                this._mapSize.width = width;
            },
            _getMapHeight: function _getMapHeight() {
                return this._mapSize.height;
            },
            _setMapHeight: function _setMapHeight(height) {
                this._mapSize.height = height;
            },
            getTileSize: function getTileSize() {
                return cc.size(this._tileSize.width, this._tileSize.height);
            },
            setTileSize: function setTileSize(value) {
                this._tileSize.width = value.width;
                this._tileSize.height = value.height;
            },
            _getTileWidth: function _getTileWidth() {
                return this._tileSize.width;
            },
            _setTileWidth: function _setTileWidth(width) {
                this._tileSize.width = width;
            },
            _getTileHeight: function _getTileHeight() {
                return this._tileSize.height;
            },
            _setTileHeight: function _setTileHeight(height) {
                this._tileSize.height = height;
            },
            getLayers: function getLayers() {
                return this._layers;
            },
            setLayers: function setLayers(value) {
                this._allChildren.push(value);
                this._layers.push(value);
            },
            getImageLayers: function getImageLayers() {
                return this._imageLayers;
            },
            setImageLayers: function setImageLayers(value) {
                this._allChildren.push(value);
                this._imageLayers.push(value);
            },
            getTilesets: function getTilesets() {
                return this._tilesets;
            },
            setTilesets: function setTilesets(value) {
                this._tilesets.push(value);
            },
            getObjectGroups: function getObjectGroups() {
                return this._objectGroups;
            },
            setObjectGroups: function setObjectGroups(value) {
                this._allChildren.push(value);
                this._objectGroups.push(value);
            },
            getAllChildren: function getAllChildren() {
                return this._allChildren;
            },
            getParentElement: function getParentElement() {
                return this.parentElement;
            },
            setParentElement: function setParentElement(value) {
                this.parentElement = value;
            },
            getParentGID: function getParentGID() {
                return this.parentGID;
            },
            setParentGID: function setParentGID(value) {
                this.parentGID = value;
            },
            getLayerAttribs: function getLayerAttribs() {
                return this.layerAttrs;
            },
            setLayerAttribs: function setLayerAttribs(value) {
                this.layerAttrs = value;
            },
            getStoringCharacters: function getStoringCharacters() {
                return this.storingCharacters;
            },
            setStoringCharacters: function setStoringCharacters(value) {
                this.storingCharacters = value;
            },
            getProperties: function getProperties() {
                return this.properties;
            },
            setProperties: function setProperties(value) {
                this.properties = value;
            },
            initWithXML: function initWithXML(tmxString, tsxMap, textures, imageLayerTextures) {
                this._tilesets.length = 0;
                this._layers.length = 0;
                this._imageLayers.length = 0;
                this._tsxMap = tsxMap;
                this._textures = textures;
                this._imageLayerTextures = imageLayerTextures;
                this._objectGroups.length = 0;
                this._allChildren.length = 0;
                this.properties.length = 0;
                this._tileProperties = {};
                this._tileAnimations = {};
                this.currentString = '';
                this.storingCharacters = false;
                this.layerAttrs = cc.TMXLayerInfo.ATTRIB_NONE;
                this.parentElement = cc.TiledMap.NONE;
                return this.parseXMLString(tmxString);
            },
            parseXMLString: function parseXMLString(xmlStr, tilesetFirstGid) {
                var mapXML = this._parser._parseXML(xmlStr);
                var i = void 0;
                var map = mapXML.documentElement;
                var orientationStr = map.getAttribute('orientation');
                var staggerAxisStr = map.getAttribute('staggeraxis');
                var staggerIndexStr = map.getAttribute('staggerindex');
                var hexSideLengthStr = map.getAttribute('hexsidelength');
                var renderorderStr = map.getAttribute('renderorder');
                var version = map.getAttribute('version') || '1.0.0';
                if (map.nodeName === 'map') {
                    var versionArr = version.split('.');
                    var supportVersion = this._supportVersion;
                    for (var _i2 = 0; _i2 < supportVersion.length; _i2++) {
                        var v = parseInt(versionArr[_i2]) || 0;
                        var sv = supportVersion[_i2];
                        if (sv < v) {
                            cc.logID(7216, version);
                            break;
                        }
                    }
                    if (orientationStr === 'orthogonal')
                        this.orientation = cc.TiledMap.Orientation.ORTHO;
                    else if (orientationStr === 'isometric')
                        this.orientation = cc.TiledMap.Orientation.ISO;
                    else if (orientationStr === 'hexagonal')
                        this.orientation = cc.TiledMap.Orientation.HEX;
                    else if (orientationStr !== null)
                        cc.logID(7217, orientationStr);
                    if (renderorderStr === 'right-up') {
                        this.renderOrder = cc.TiledMap.RenderOrder.RightUp;
                    } else if (renderorderStr === 'left-up') {
                        this.renderOrder = cc.TiledMap.RenderOrder.LeftUp;
                    } else if (renderorderStr === 'left-down') {
                        this.renderOrder = cc.TiledMap.RenderOrder.LeftDown;
                    } else {
                        this.renderOrder = cc.TiledMap.RenderOrder.RightDown;
                    }
                    if (staggerAxisStr === 'x') {
                        this.setStaggerAxis(cc.TiledMap.StaggerAxis.STAGGERAXIS_X);
                    } else if (staggerAxisStr === 'y') {
                        this.setStaggerAxis(cc.TiledMap.StaggerAxis.STAGGERAXIS_Y);
                    }
                    if (staggerIndexStr === 'odd') {
                        this.setStaggerIndex(cc.TiledMap.StaggerIndex.STAGGERINDEX_ODD);
                    } else if (staggerIndexStr === 'even') {
                        this.setStaggerIndex(cc.TiledMap.StaggerIndex.STAGGERINDEX_EVEN);
                    }
                    if (hexSideLengthStr) {
                        this.setHexSideLength(parseFloat(hexSideLengthStr));
                    }
                    var mapSize = cc.size(0, 0);
                    mapSize.width = parseFloat(map.getAttribute('width'));
                    mapSize.height = parseFloat(map.getAttribute('height'));
                    this.setMapSize(mapSize);
                    mapSize = cc.size(0, 0);
                    mapSize.width = parseFloat(map.getAttribute('tilewidth'));
                    mapSize.height = parseFloat(map.getAttribute('tileheight'));
                    this.setTileSize(mapSize);
                    this.properties = getPropertyList(map);
                }
                var tilesets = map.getElementsByTagName('tileset');
                if (map.nodeName !== 'map') {
                    tilesets = [];
                    tilesets.push(map);
                }
                for (i = 0; i < tilesets.length; i++) {
                    var selTileset = tilesets[i];
                    var tsxName = selTileset.getAttribute('source');
                    if (tsxName) {
                        var currentFirstGID = parseInt(selTileset.getAttribute('firstgid'));
                        var tsxXmlString = this._tsxMap[tsxName];
                        if (tsxXmlString) {
                            this.parseXMLString(tsxXmlString, currentFirstGID);
                        }
                    } else {
                        var images = selTileset.getElementsByTagName('image');
                        var multiTextures = images.length > 1;
                        var image = images[0];
                        var firstImageName = image.getAttribute('source');
                        firstImageName.replace(/\\/g, '/');
                        var tiles = selTileset.getElementsByTagName('tile');
                        var tileCount = tiles && tiles.length || 1;
                        var tile = null;
                        var tilesetName = selTileset.getAttribute('name') || '';
                        var tilesetSpacing = parseInt(selTileset.getAttribute('spacing')) || 0;
                        var tilesetMargin = parseInt(selTileset.getAttribute('margin')) || 0;
                        var fgid = parseInt(tilesetFirstGid);
                        if (!fgid) {
                            fgid = parseInt(selTileset.getAttribute('firstgid')) || 0;
                        }
                        var tilesetSize = cc.size(0, 0);
                        tilesetSize.width = parseFloat(selTileset.getAttribute('tilewidth'));
                        tilesetSize.height = parseFloat(selTileset.getAttribute('tileheight'));
                        var offset = selTileset.getElementsByTagName('tileoffset')[0];
                        var tileOffset = cc.v2(0, 0);
                        if (offset) {
                            tileOffset.x = parseFloat(offset.getAttribute('x'));
                            tileOffset.y = parseFloat(offset.getAttribute('y'));
                        }
                        var tileset = null;
                        for (var tileIdx = 0; tileIdx < tileCount; tileIdx++) {
                            if (!tileset || multiTextures) {
                                tileset = new cc.TMXTilesetInfo();
                                tileset.name = tilesetName;
                                tileset.firstGid = fgid;
                                tileset.spacing = tilesetSpacing;
                                tileset.margin = tilesetMargin;
                                tileset._tileSize = tilesetSize;
                                tileset.tileOffset = tileOffset;
                                tileset.sourceImage = this._textures[firstImageName];
                                if (!tileset.sourceImage) {
                                    cc.errorID(7221, firstImageName);
                                }
                                this.setTilesets(tileset);
                            }
                            tile = tiles && tiles[tileIdx];
                            if (!tile)
                                continue;
                            this.parentGID = parseInt(fgid) + parseInt(tile.getAttribute('id') || 0);
                            var tileImages = tile.getElementsByTagName('image');
                            if (tileImages && tileImages.length > 0) {
                                image = tileImages[0];
                                var imageName = image.getAttribute('source');
                                imageName.replace(/\\/g, '/');
                                tileset.sourceImage = this._textures[imageName];
                                if (!tileset.sourceImage) {
                                    cc.errorID(7221, imageName);
                                }
                                var tileSize = cc.size(0, 0);
                                tileSize.width = parseFloat(image.getAttribute('width'));
                                tileSize.height = parseFloat(image.getAttribute('height'));
                                tileset._tileSize = tileSize;
                                tileset.firstGid = this.parentGID;
                            }
                            this._tileProperties[this.parentGID] = getPropertyList(tile);
                            var animations = tile.getElementsByTagName('animation');
                            if (animations && animations.length > 0) {
                                var animation = animations[0];
                                var framesData = animation.getElementsByTagName('frame');
                                var animationProp = {
                                    frames: [],
                                    dt: 0,
                                    frameIdx: 0
                                };
                                this._tileAnimations[this.parentGID] = animationProp;
                                var frames = animationProp.frames;
                                for (var frameIdx = 0; frameIdx < framesData.length; frameIdx++) {
                                    var frame = framesData[frameIdx];
                                    var tileid = parseInt(fgid) + parseInt(frame.getAttribute('tileid'));
                                    var duration = parseFloat(frame.getAttribute('duration'));
                                    frames.push({
                                        tileid: tileid,
                                        duration: duration / 1000,
                                        grid: null
                                    });
                                }
                            }
                        }
                    }
                }
                var childNodes = map.childNodes;
                for (i = 0; i < childNodes.length; i++) {
                    var childNode = childNodes[i];
                    if (this._shouldIgnoreNode(childNode)) {
                        continue;
                    }
                    if (childNode.nodeName === 'imagelayer') {
                        var imageLayer = this._parseImageLayer(childNode);
                        if (imageLayer) {
                            this.setImageLayers(imageLayer);
                        }
                    }
                    if (childNode.nodeName === 'layer') {
                        var layer = this._parseLayer(childNode);
                        this.setLayers(layer);
                    }
                    if (childNode.nodeName === 'objectgroup') {
                        var objectGroup = this._parseObjectGroup(childNode);
                        this.setObjectGroups(objectGroup);
                    }
                }
                return map;
            },
            _shouldIgnoreNode: function _shouldIgnoreNode(node) {
                return node.nodeType === 3 || node.nodeType === 8 || node.nodeType === 4;
            },
            _parseImageLayer: function _parseImageLayer(selLayer) {
                var datas = selLayer.getElementsByTagName('image');
                if (!datas || datas.length == 0)
                    return null;
                var imageLayer = new cc.TMXImageLayerInfo();
                imageLayer.name = selLayer.getAttribute('name');
                imageLayer.offset.x = parseFloat(selLayer.getAttribute('offsetx')) || 0;
                imageLayer.offset.y = parseFloat(selLayer.getAttribute('offsety')) || 0;
                var visible = selLayer.getAttribute('visible');
                imageLayer.visible = !(visible === '0');
                var opacity = selLayer.getAttribute('opacity') || 1;
                imageLayer.opacity = parseInt(255 * parseFloat(opacity)) || 255;
                var data = datas[0];
                var source = data.getAttribute('source');
                imageLayer.sourceImage = this._imageLayerTextures[source];
                imageLayer.width = parseInt(data.getAttribute('width')) || 0;
                imageLayer.height = parseInt(data.getAttribute('height')) || 0;
                imageLayer.trans = strToColor(data.getAttribute('trans'));
                if (!imageLayer.sourceImage) {
                    cc.errorID(7221, source);
                    return null;
                }
                return imageLayer;
            },
            _parseLayer: function _parseLayer(selLayer) {
                var data = selLayer.getElementsByTagName('data')[0];
                var layer = new cc.TMXLayerInfo();
                layer.name = selLayer.getAttribute('name');
                var layerSize = cc.size(0, 0);
                layerSize.width = parseFloat(selLayer.getAttribute('width'));
                layerSize.height = parseFloat(selLayer.getAttribute('height'));
                layer._layerSize = layerSize;
                var visible = selLayer.getAttribute('visible');
                layer.visible = !(visible === '0');
                var opacity = selLayer.getAttribute('opacity') || 1;
                if (opacity)
                    layer._opacity = parseInt(255 * parseFloat(opacity));
                else
                    layer._opacity = 255;
                layer.offset = cc.v2(parseFloat(selLayer.getAttribute('offsetx')) || 0, parseFloat(selLayer.getAttribute('offsety')) || 0);
                var nodeValue = '';
                for (var j = 0; j < data.childNodes.length; j++) {
                    nodeValue += data.childNodes[j].nodeValue;
                }
                nodeValue = nodeValue.trim();
                var compression = data.getAttribute('compression');
                var encoding = data.getAttribute('encoding');
                if (compression && compression !== 'gzip' && compression !== 'zlib') {
                    cc.logID(7218);
                    return null;
                }
                var tiles = void 0;
                switch (compression) {
                case 'gzip':
                    tiles = codec.unzipBase64AsArray(nodeValue, 4);
                    break;
                case 'zlib':
                    var inflator = new zlib.Inflate(codec.Base64.decodeAsArray(nodeValue, 1));
                    tiles = uint8ArrayToUint32Array(inflator.decompress());
                    break;
                case null:
                case '':
                    if (encoding === 'base64')
                        tiles = codec.Base64.decodeAsArray(nodeValue, 4);
                    else if (encoding === 'csv') {
                        tiles = [];
                        var csvTiles = nodeValue.split(',');
                        for (var csvIdx = 0; csvIdx < csvTiles.length; csvIdx++) {
                            tiles.push(parseInt(csvTiles[csvIdx]));
                        }
                    } else {
                        var selDataTiles = data.getElementsByTagName('tile');
                        tiles = [];
                        for (var xmlIdx = 0; xmlIdx < selDataTiles.length; xmlIdx++) {
                            tiles.push(parseInt(selDataTiles[xmlIdx].getAttribute('gid')));
                        }
                    }
                    break;
                default:
                    if (this.layerAttrs === cc.TMXLayerInfo.ATTRIB_NONE)
                        cc.logID(7219);
                    break;
                }
                if (tiles) {
                    layer._tiles = new Uint32Array(tiles);
                }
                layer.properties = getPropertyList(selLayer);
                return layer;
            },
            _parseObjectGroup: function _parseObjectGroup(selGroup) {
                var objectGroup = new cc.TMXObjectGroupInfo();
                objectGroup.name = selGroup.getAttribute('name') || '';
                objectGroup.offset = cc.v2(parseFloat(selGroup.getAttribute('offsetx')), parseFloat(selGroup.getAttribute('offsety')));
                var opacity = selGroup.getAttribute('opacity') || 1;
                if (opacity)
                    objectGroup._opacity = parseInt(255 * parseFloat(opacity));
                else
                    objectGroup._opacity = 255;
                var visible = selGroup.getAttribute('visible');
                if (visible && parseInt(visible) === 0)
                    objectGroup.visible = false;
                var color = selGroup.getAttribute('color');
                if (color)
                    objectGroup._color.fromHEX(color);
                var draworder = selGroup.getAttribute('draworder');
                if (draworder)
                    objectGroup._draworder = draworder;
                objectGroup.setProperties(getPropertyList(selGroup));
                var objects = selGroup.getElementsByTagName('object');
                if (objects) {
                    for (var j = 0; j < objects.length; j++) {
                        var selObj = objects[j];
                        var objectProp = {};
                        objectProp['id'] = selObj.getAttribute('id') || 0;
                        objectProp['name'] = selObj.getAttribute('name') || '';
                        objectProp['width'] = parseFloat(selObj.getAttribute('width')) || 0;
                        objectProp['height'] = parseFloat(selObj.getAttribute('height')) || 0;
                        objectProp['x'] = parseFloat(selObj.getAttribute('x')) || 0;
                        objectProp['y'] = parseFloat(selObj.getAttribute('y')) || 0;
                        objectProp['rotation'] = parseFloat(selObj.getAttribute('rotation')) || 0;
                        getPropertyList(selObj, objectProp);
                        var visibleAttr = selObj.getAttribute('visible');
                        objectProp['visible'] = !(visibleAttr && parseInt(visibleAttr) === 0);
                        var texts = selObj.getElementsByTagName('text');
                        if (texts && texts.length > 0) {
                            var text = texts[0];
                            objectProp['type'] = cc.TiledMap.TMXObjectType.TEXT;
                            objectProp['wrap'] = text.getAttribute('wrap') == '1';
                            objectProp['color'] = strToColor(text.getAttribute('color'));
                            objectProp['halign'] = strToHAlign(text.getAttribute('halign'));
                            objectProp['valign'] = strToVAlign(text.getAttribute('valign'));
                            objectProp['pixelsize'] = parseInt(text.getAttribute('pixelsize')) || 16;
                            objectProp['text'] = text.childNodes[0].nodeValue;
                        }
                        var gid = selObj.getAttribute('gid');
                        if (gid) {
                            objectProp['gid'] = parseInt(gid);
                            objectProp['type'] = cc.TiledMap.TMXObjectType.IMAGE;
                        }
                        var ellipse = selObj.getElementsByTagName('ellipse');
                        if (ellipse && ellipse.length > 0) {
                            objectProp['type'] = cc.TiledMap.TMXObjectType.ELLIPSE;
                        }
                        var polygonProps = selObj.getElementsByTagName('polygon');
                        if (polygonProps && polygonProps.length > 0) {
                            objectProp['type'] = cc.TiledMap.TMXObjectType.POLYGON;
                            var selPgPointStr = polygonProps[0].getAttribute('points');
                            if (selPgPointStr)
                                objectProp['points'] = this._parsePointsString(selPgPointStr);
                        }
                        var polylineProps = selObj.getElementsByTagName('polyline');
                        if (polylineProps && polylineProps.length > 0) {
                            objectProp['type'] = cc.TiledMap.TMXObjectType.POLYLINE;
                            var selPlPointStr = polylineProps[0].getAttribute('points');
                            if (selPlPointStr)
                                objectProp['polylinePoints'] = this._parsePointsString(selPlPointStr);
                        }
                        if (!objectProp['type']) {
                            objectProp['type'] = cc.TiledMap.TMXObjectType.RECT;
                        }
                        objectGroup._objects.push(objectProp);
                    }
                }
                return objectGroup;
            },
            _parsePointsString: function _parsePointsString(pointsString) {
                if (!pointsString)
                    return null;
                var points = [];
                var pointsStr = pointsString.split(' ');
                for (var i = 0; i < pointsStr.length; i++) {
                    var selPointStr = pointsStr[i].split(',');
                    points.push({
                        'x': parseFloat(selPointStr[0]),
                        'y': parseFloat(selPointStr[1])
                    });
                }
                return points;
            },
            setTileAnimations: function setTileAnimations(animations) {
                this._tileAnimations = animations;
            },
            getTileAnimations: function getTileAnimations() {
                return this._tileAnimations;
            },
            getTileProperties: function getTileProperties() {
                return this._tileProperties;
            },
            setTileProperties: function setTileProperties(tileProperties) {
                this._tileProperties = tileProperties;
            },
            getCurrentString: function getCurrentString() {
                return this.currentString;
            },
            setCurrentString: function setCurrentString(currentString) {
                this.currentString = currentString;
            }
        };
        var _p = cc.TMXMapInfo.prototype;
        js.getset(_p, 'mapWidth', _p._getMapWidth, _p._setMapWidth);
        js.getset(_p, 'mapHeight', _p._getMapHeight, _p._setMapHeight);
        js.getset(_p, 'tileWidth', _p._getTileWidth, _p._setTileWidth);
        js.getset(_p, 'tileHeight', _p._getTileHeight, _p._setTileHeight);
        cc.TMXLayerInfo.ATTRIB_NONE = 1 << 0;
        cc.TMXLayerInfo.ATTRIB_BASE64 = 1 << 1;
        cc.TMXLayerInfo.ATTRIB_GZIP = 1 << 2;
        cc.TMXLayerInfo.ATTRIB_ZLIB = 1 << 3;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,