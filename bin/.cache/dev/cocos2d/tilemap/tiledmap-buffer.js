(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/tilemap/tiledmap-buffer.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var TiledMapBuffer = cc.Class({
            name: 'cc.TiledMapBuffer',
            extends: require('../core/renderer/webgl/quad-buffer'),
            _updateOffset: function _updateOffset() {
                var offsetInfo = this._offsetInfo;
                offsetInfo.vertexOffset = this.vertexOffset;
                offsetInfo.indiceOffset = this.indiceOffset;
                offsetInfo.byteOffset = this.byteOffset;
            },
            adjust: function adjust(vertexCount, indiceCount) {
                this.vertexOffset += vertexCount;
                this.indiceOffset += indiceCount;
                this.indiceStart = this.indiceOffset;
                this.byteOffset = this.byteOffset + vertexCount * this._vertexBytes;
                this._dirty = true;
            }
        });
        cc.TiledMapBuffer = module.exports = TiledMapBuffer;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,