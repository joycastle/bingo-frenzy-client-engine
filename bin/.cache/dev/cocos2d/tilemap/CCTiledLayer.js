(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/tilemap/CCTiledLayer.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var _vmath = require('../core/vmath');
        var RenderComponent = require('../core/components/CCRenderComponent');
        var Material = require('../core/assets/material/CCMaterial');
        var RenderFlow = require('../core/renderer/render-flow');
        var _mat4_temp = _vmath.mat4.create();
        var _vec2_temp = _vmath.vec2.create();
        var _vec2_temp2 = _vmath.vec2.create();
        var _tempRowCol = {
            row: 0,
            col: 0
        };
        var TiledUserNodeData = cc.Class({
            name: 'cc.TiledUserNodeData',
            extends: cc.Component,
            ctor: function ctor() {
                this._index = -1;
                this._row = -1;
                this._col = -1;
                this._tiledLayer = null;
            }
        });
        var TiledLayer = cc.Class({
            name: 'cc.TiledLayer',
            extends: RenderComponent,
            editor: { inspector: 'packages://inspector/inspectors/comps/tiled-layer.js' },
            ctor: function ctor() {
                this._userNodeGrid = {};
                this._userNodeMap = {};
                this._userNodeDirty = false;
                this._tiledTiles = [];
                this._tilesetIndexArr = [];
                this._texIdToMatIndex = {};
                this._viewPort = {
                    x: -1,
                    y: -1,
                    width: -1,
                    height: -1
                };
                this._cullingRect = {
                    leftDown: {
                        row: -1,
                        col: -1
                    },
                    rightTop: {
                        row: -1,
                        col: -1
                    }
                };
                this._cullingDirty = true;
                this._rightTop = {
                    row: -1,
                    col: -1
                };
                this._layerInfo = null;
                this._mapInfo = null;
                this._topOffset = 0;
                this._downOffset = 0;
                this._leftOffset = 0;
                this._rightOffset = 0;
                this._tiles = [];
                this._vertices = [];
                this._verticesDirty = true;
                this._layerName = '';
                this._layerOrientation = null;
                this._texGrids = null;
                this._textures = null;
                this._tilesets = null;
                this._leftDownToCenterX = 0;
                this._leftDownToCenterY = 0;
                this._hasTiledNodeGrid = false;
                this._hasAniGrid = false;
                this._animations = null;
                this._enableCulling = cc.macro.ENABLE_TILEDMAP_CULLING;
            },
            _hasTiledNode: function _hasTiledNode() {
                return this._hasTiledNodeGrid;
            },
            _hasAnimation: function _hasAnimation() {
                return this._hasAniGrid;
            },
            enableCulling: function enableCulling(value) {
                if (this._enableCulling != value) {
                    this._enableCulling = value;
                    this._cullingDirty = true;
                }
            },
            addUserNode: function addUserNode(node) {
                var dataComp = node.getComponent(TiledUserNodeData);
                if (dataComp) {
                    cc.warn('CCTiledLayer:addUserNode node has been added');
                    return false;
                }
                dataComp = node.addComponent(TiledUserNodeData);
                node.parent = this.node;
                node._renderFlag |= RenderFlow.FLAG_BREAK_FLOW;
                this._userNodeMap[node._id] = dataComp;
                dataComp._row = -1;
                dataComp._col = -1;
                dataComp._tiledLayer = this;
                this._nodeLocalPosToLayerPos(node, _vec2_temp);
                this._positionToRowCol(_vec2_temp.x, _vec2_temp.y, _tempRowCol);
                this._addUserNodeToGrid(dataComp, _tempRowCol);
                this._updateCullingOffsetByUserNode(node);
                node.on(cc.Node.EventType.POSITION_CHANGED, this._userNodePosChange, dataComp);
                node.on(cc.Node.EventType.SIZE_CHANGED, this._userNodeSizeChange, dataComp);
                return true;
            },
            removeUserNode: function removeUserNode(node) {
                var dataComp = node.getComponent(TiledUserNodeData);
                if (!dataComp) {
                    cc.warn('CCTiledLayer:removeUserNode node is not exist');
                    return false;
                }
                node.off(cc.Node.EventType.POSITION_CHANGED, this._userNodePosChange, dataComp);
                node.off(cc.Node.EventType.SIZE_CHANGED, this._userNodeSizeChange, dataComp);
                this._removeUserNodeFromGrid(dataComp);
                delete this._userNodeMap[node._id];
                node._removeComponent(dataComp);
                dataComp.destroy();
                node.removeFromParent(true);
                node._renderFlag &= ~RenderFlow.FLAG_BREAK_FLOW;
                return true;
            },
            destroyUserNode: function destroyUserNode(node) {
                this.removeUserNode(node);
                node.destroy();
            },
            _nodeLocalPosToLayerPos: function _nodeLocalPosToLayerPos(nodePos, out) {
                out.x = nodePos.x + this._leftDownToCenterX;
                out.y = nodePos.y + this._leftDownToCenterY;
            },
            _getNodesByRowCol: function _getNodesByRowCol(row, col) {
                var rowData = this._userNodeGrid[row];
                if (!rowData)
                    return null;
                return rowData[col];
            },
            _getNodesCountByRow: function _getNodesCountByRow(row) {
                var rowData = this._userNodeGrid[row];
                if (!rowData)
                    return 0;
                return rowData.count;
            },
            _updateAllUserNode: function _updateAllUserNode() {
                this._userNodeGrid = {};
                for (var dataId in this._userNodeMap) {
                    var dataComp = this._userNodeMap[dataId];
                    this._nodeLocalPosToLayerPos(dataComp.node, _vec2_temp);
                    this._positionToRowCol(_vec2_temp.x, _vec2_temp.y, _tempRowCol);
                    this._addUserNodeToGrid(dataComp, _tempRowCol);
                    this._updateCullingOffsetByUserNode(dataComp.node);
                }
            },
            _updateCullingOffsetByUserNode: function _updateCullingOffsetByUserNode(node) {
                if (this._topOffset < node.height) {
                    this._topOffset = node.height;
                }
                if (this._downOffset < node.height) {
                    this._downOffset = node.height;
                }
                if (this._leftOffset < node.width) {
                    this._leftOffset = node.width;
                }
                if (this._rightOffset < node.width) {
                    this._rightOffset = node.width;
                }
            },
            _userNodeSizeChange: function _userNodeSizeChange() {
                var dataComp = this;
                var node = dataComp.node;
                var self = dataComp._tiledLayer;
                self._updateCullingOffsetByUserNode(node);
            },
            _userNodePosChange: function _userNodePosChange() {
                var dataComp = this;
                var node = dataComp.node;
                var self = dataComp._tiledLayer;
                self._nodeLocalPosToLayerPos(node, _vec2_temp);
                self._positionToRowCol(_vec2_temp.x, _vec2_temp.y, _tempRowCol);
                if (_tempRowCol.row === dataComp._row && _tempRowCol.col === dataComp._col)
                    return;
                self._removeUserNodeFromGrid(dataComp);
                self._addUserNodeToGrid(dataComp, _tempRowCol);
            },
            _removeUserNodeFromGrid: function _removeUserNodeFromGrid(dataComp) {
                var row = dataComp._row;
                var col = dataComp._col;
                var index = dataComp._index;
                var rowData = this._userNodeGrid[row];
                var colData = rowData && rowData[col];
                if (colData) {
                    rowData.count--;
                    colData.count--;
                    colData.list[index] = null;
                    if (colData.count <= 0) {
                        colData.list.length = 0;
                        colData.count = 0;
                    }
                }
                dataComp._row = -1;
                dataComp._col = -1;
                dataComp._index = -1;
                this._userNodeDirty = true;
            },
            _isInLayer: function _isInLayer(row, col) {
                return row >= 0 && col >= 0 && row <= this._rightTop.row && col <= this._rightTop.col;
            },
            _addUserNodeToGrid: function _addUserNodeToGrid(dataComp, tempRowCol) {
                var row = tempRowCol.row;
                var col = tempRowCol.col;
                if (this._isInLayer(row, col)) {
                    var rowData = this._userNodeGrid[row] = this._userNodeGrid[row] || { count: 0 };
                    var colData = rowData[col] = rowData[col] || {
                        count: 0,
                        list: []
                    };
                    dataComp._row = row;
                    dataComp._col = col;
                    dataComp._index = colData.list.length;
                    rowData.count++;
                    colData.count++;
                    colData.list.push(dataComp);
                } else {
                    dataComp._row = -1;
                    dataComp._col = -1;
                    dataComp._index = -1;
                }
                this._userNodeDirty = true;
            },
            _isUserNodeDirty: function _isUserNodeDirty() {
                return this._userNodeDirty;
            },
            _setUserNodeDirty: function _setUserNodeDirty(value) {
                this._userNodeDirty = value;
            },
            onEnable: function onEnable() {
                this._super();
                this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this._syncAnchorPoint, this);
                this._activateMaterial();
            },
            onDisable: function onDisable() {
                this._super();
                this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this._syncAnchorPoint, this);
            },
            _syncAnchorPoint: function _syncAnchorPoint() {
                var node = this.node;
                this._leftDownToCenterX = node.width * node.anchorX * node.scaleX;
                this._leftDownToCenterY = node.height * node.anchorY * node.scaleY;
                this._cullingDirty = true;
            },
            onDestroy: function onDestroy() {
                this._super();
                if (this._buffer) {
                    this._buffer.destroy();
                    this._buffer = null;
                }
                this._renderDataList = null;
            },
            getLayerName: function getLayerName() {
                return this._layerName;
            },
            setLayerName: function setLayerName(layerName) {
                this._layerName = layerName;
            },
            getProperty: function getProperty(propertyName) {
                return this._properties[propertyName];
            },
            getPositionAt: function getPositionAt(pos, y) {
                var x = void 0;
                if (y !== undefined) {
                    x = Math.floor(pos);
                    y = Math.floor(y);
                } else {
                    x = Math.floor(pos.x);
                    y = Math.floor(pos.y);
                }
                var ret = void 0;
                switch (this._layerOrientation) {
                case cc.TiledMap.Orientation.ORTHO:
                    ret = this._positionForOrthoAt(x, y);
                    break;
                case cc.TiledMap.Orientation.ISO:
                    ret = this._positionForIsoAt(x, y);
                    break;
                case cc.TiledMap.Orientation.HEX:
                    ret = this._positionForHexAt(x, y);
                    break;
                }
                return ret;
            },
            _isInvalidPosition: function _isInvalidPosition(x, y) {
                if (x && (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object') {
                    var pos = x;
                    y = pos.y;
                    x = pos.x;
                }
                return x >= this._layerSize.width || y >= this._layerSize.height || x < 0 || y < 0;
            },
            _positionForIsoAt: function _positionForIsoAt(x, y) {
                return cc.v2(this._mapTileSize.width / 2 * (this._layerSize.width + x - y - 1), this._mapTileSize.height / 2 * (this._layerSize.height * 2 - x - y - 2));
            },
            _positionForOrthoAt: function _positionForOrthoAt(x, y) {
                return cc.v2(x * this._mapTileSize.width, (this._layerSize.height - y - 1) * this._mapTileSize.height);
            },
            _positionForHexAt: function _positionForHexAt(col, row) {
                var tileWidth = this._mapTileSize.width;
                var tileHeight = this._mapTileSize.height;
                var rows = this._layerSize.height;
                var index = Math.floor(col) + Math.floor(row) * this._layerSize.width;
                var gid = this._tiles[index];
                var tileset = this._texGrids[gid].tileset;
                var offset = tileset.tileOffset;
                var centerWidth = this.node.width / 2;
                var centerHeight = this.node.height / 2;
                var odd_even = this._staggerIndex === cc.TiledMap.StaggerIndex.STAGGERINDEX_ODD ? 1 : -1;
                var x = 0, y = 0;
                var diffX = 0;
                var diffX1 = 0;
                var diffY = 0;
                var diffY1 = 0;
                switch (this._staggerAxis) {
                case cc.TiledMap.StaggerAxis.STAGGERAXIS_Y:
                    diffX = 0;
                    diffX1 = this._staggerIndex === cc.TiledMap.StaggerIndex.STAGGERINDEX_ODD ? 0 : tileWidth / 2;
                    if (row % 2 === 1) {
                        diffX = tileWidth / 2 * odd_even;
                    }
                    x = col * tileWidth + diffX + diffX1 + offset.x - centerWidth;
                    y = (rows - row - 1) * (tileHeight - (tileHeight - this._hexSideLength) / 2) - offset.y - centerHeight;
                    break;
                case cc.TiledMap.StaggerAxis.STAGGERAXIS_X:
                    diffY = 0;
                    diffY1 = this._staggerIndex === cc.TiledMap.StaggerIndex.STAGGERINDEX_ODD ? tileHeight / 2 : 0;
                    if (col % 2 === 1) {
                        diffY = tileHeight / 2 * -odd_even;
                    }
                    x = col * (tileWidth - (tileWidth - this._hexSideLength) / 2) + offset.x - centerWidth;
                    y = (rows - row - 1) * tileHeight + diffY + diffY1 - offset.y - centerHeight;
                    break;
                }
                return cc.v2(x, y);
            },
            setTileGIDAt: function setTileGIDAt(gid, posOrX, flagsOrY, flags) {
                if (posOrX === undefined) {
                    throw new Error('cc.TiledLayer.setTileGIDAt(): pos should be non-null');
                }
                var pos = void 0;
                if (flags !== undefined || !(posOrX instanceof cc.Vec2)) {
                    pos = cc.v2(posOrX, flagsOrY);
                } else {
                    pos = posOrX;
                    flags = flagsOrY;
                }
                pos.x = Math.floor(pos.x);
                pos.y = Math.floor(pos.y);
                if (this._isInvalidPosition(pos)) {
                    throw new Error('cc.TiledLayer.setTileGIDAt(): invalid position');
                }
                if (!this._tiles || !this._tilesets || this._tilesets.length == 0) {
                    cc.logID(7238);
                    return;
                }
                if (gid !== 0 && gid < this._tilesets[0].firstGid) {
                    cc.logID(7239, gid);
                    return;
                }
                flags = flags || 0;
                var currentFlags = this.getTileFlagsAt(pos);
                var currentGID = this.getTileGIDAt(pos);
                if (currentGID === gid && currentFlags === flags)
                    return;
                var gidAndFlags = (gid | flags) >>> 0;
                this._updateTileForGID(gidAndFlags, pos);
            },
            _updateTileForGID: function _updateTileForGID(gid, pos) {
                if (gid !== 0 && !this._texGrids[gid]) {
                    return;
                }
                var idx = 0 | pos.x + pos.y * this._layerSize.width;
                if (idx < this._tiles.length) {
                    this._tiles[idx] = gid;
                    this._cullingDirty = true;
                }
            },
            getTileGIDAt: function getTileGIDAt(pos, y) {
                if (pos === undefined) {
                    throw new Error('cc.TiledLayer.getTileGIDAt(): pos should be non-null');
                }
                var x = pos;
                if (y === undefined) {
                    x = pos.x;
                    y = pos.y;
                }
                if (this._isInvalidPosition(x, y)) {
                    throw new Error('cc.TiledLayer.getTileGIDAt(): invalid position');
                }
                if (!this._tiles) {
                    cc.logID(7237);
                    return null;
                }
                var index = Math.floor(x) + Math.floor(y) * this._layerSize.width;
                var tile = this._tiles[index];
                return (tile & cc.TiledMap.TileFlag.FLIPPED_MASK) >>> 0;
            },
            getTileFlagsAt: function getTileFlagsAt(pos, y) {
                if (!pos) {
                    throw new Error('TiledLayer.getTileFlagsAt: pos should be non-null');
                }
                if (y !== undefined) {
                    pos = cc.v2(pos, y);
                }
                if (this._isInvalidPosition(pos)) {
                    throw new Error('TiledLayer.getTileFlagsAt: invalid position');
                }
                if (!this._tiles) {
                    cc.logID(7240);
                    return null;
                }
                var idx = Math.floor(pos.x) + Math.floor(pos.y) * this._layerSize.width;
                var tile = this._tiles[idx];
                return (tile & cc.TiledMap.TileFlag.FLIPPED_ALL) >>> 0;
            },
            _setCullingDirty: function _setCullingDirty(value) {
                this._cullingDirty = value;
            },
            _isCullingDirty: function _isCullingDirty() {
                return this._cullingDirty;
            },
            _updateViewPort: function _updateViewPort(x, y, width, height) {
                if (this._viewPort.width === width && this._viewPort.height === height && this._viewPort.x === x && this._viewPort.y === y) {
                    return;
                }
                this._viewPort.x = x;
                this._viewPort.y = y;
                this._viewPort.width = width;
                this._viewPort.height = height;
                var reserveLine = 1;
                if (this._layerOrientation === cc.TiledMap.Orientation.ISO) {
                    reserveLine = 2;
                }
                var vpx = this._viewPort.x - this._offset.x + this._leftDownToCenterX;
                var vpy = this._viewPort.y - this._offset.y + this._leftDownToCenterY;
                var leftDownX = vpx - this._leftOffset;
                var leftDownY = vpy - this._downOffset;
                var rightTopX = vpx + width + this._rightOffset;
                var rightTopY = vpy + height + this._topOffset;
                var leftDown = this._cullingRect.leftDown;
                var rightTop = this._cullingRect.rightTop;
                if (leftDownX < 0)
                    leftDownX = 0;
                if (leftDownY < 0)
                    leftDownY = 0;
                this._positionToRowCol(leftDownX, leftDownY, _tempRowCol);
                _tempRowCol.row -= reserveLine;
                _tempRowCol.col -= reserveLine;
                _tempRowCol.row = _tempRowCol.row > 0 ? _tempRowCol.row : 0;
                _tempRowCol.col = _tempRowCol.col > 0 ? _tempRowCol.col : 0;
                if (_tempRowCol.row !== leftDown.row || _tempRowCol.col !== leftDown.col) {
                    leftDown.row = _tempRowCol.row;
                    leftDown.col = _tempRowCol.col;
                    this._cullingDirty = true;
                }
                if (rightTopX < 0 || rightTopY < 0) {
                    _tempRowCol.row = -1;
                    _tempRowCol.col = -1;
                } else {
                    this._positionToRowCol(rightTopX, rightTopY, _tempRowCol);
                    _tempRowCol.row++;
                    _tempRowCol.col++;
                }
                if (_tempRowCol.row > this._rightTop.row)
                    _tempRowCol.row = this._rightTop.row;
                if (_tempRowCol.col > this._rightTop.col)
                    _tempRowCol.col = this._rightTop.col;
                if (_tempRowCol.row !== rightTop.row || _tempRowCol.col !== rightTop.col) {
                    rightTop.row = _tempRowCol.row;
                    rightTop.col = _tempRowCol.col;
                    this._cullingDirty = true;
                }
            },
            _positionToRowCol: function _positionToRowCol(x, y, result) {
                var TiledMap = cc.TiledMap;
                var Orientation = TiledMap.Orientation;
                var StaggerAxis = TiledMap.StaggerAxis;
                var maptw = this._mapTileSize.width, mapth = this._mapTileSize.height, maptw2 = maptw * 0.5, mapth2 = mapth * 0.5;
                var row = 0, col = 0, diffX2 = 0, diffY2 = 0, axis = this._staggerAxis;
                var cols = this._layerSize.width;
                switch (this._layerOrientation) {
                case Orientation.ORTHO:
                    col = Math.floor(x / maptw);
                    row = Math.floor(y / mapth);
                    break;
                case Orientation.ISO:
                    col = Math.floor(x / maptw2);
                    row = Math.floor(y / mapth2);
                    break;
                case Orientation.HEX:
                    if (axis === StaggerAxis.STAGGERAXIS_Y) {
                        row = Math.floor(y / (mapth - this._diffY1));
                        diffX2 = row % 2 === 1 ? maptw2 * this._odd_even : 0;
                        col = Math.floor((x - diffX2) / maptw);
                    } else {
                        col = Math.floor(x / (maptw - this._diffX1));
                        diffY2 = col % 2 === 1 ? mapth2 * -this._odd_even : 0;
                        row = Math.floor((y - diffY2) / mapth);
                    }
                    break;
                }
                result.row = row;
                result.col = col;
                return result;
            },
            _updateCulling: function _updateCulling() {
                if (CC_EDITOR) {
                    this.enableCulling(false);
                } else if (this._enableCulling) {
                    this.node._updateWorldMatrix();
                    _vmath.mat4.invert(_mat4_temp, this.node._worldMatrix);
                    var rect = cc.visibleRect;
                    var camera = cc.Camera.findCamera(this.node);
                    if (camera) {
                        _vec2_temp.x = 0;
                        _vec2_temp.y = 0;
                        _vec2_temp2.x = _vec2_temp.x + rect.width;
                        _vec2_temp2.y = _vec2_temp.y + rect.height;
                        camera.getScreenToWorldPoint(_vec2_temp, _vec2_temp);
                        camera.getScreenToWorldPoint(_vec2_temp2, _vec2_temp2);
                        _vmath.vec2.transformMat4(_vec2_temp, _vec2_temp, _mat4_temp);
                        _vmath.vec2.transformMat4(_vec2_temp2, _vec2_temp2, _mat4_temp);
                        this._updateViewPort(_vec2_temp.x, _vec2_temp.y, _vec2_temp2.x - _vec2_temp.x, _vec2_temp2.y - _vec2_temp.y);
                    }
                }
            },
            getLayerOrientation: function getLayerOrientation() {
                return this._layerOrientation;
            },
            getProperties: function getProperties() {
                return this._properties;
            },
            _updateVertices: function _updateVertices() {
                var TiledMap = cc.TiledMap;
                var TileFlag = TiledMap.TileFlag;
                var FLIPPED_MASK = TileFlag.FLIPPED_MASK;
                var StaggerAxis = TiledMap.StaggerAxis;
                var Orientation = TiledMap.Orientation;
                var vertices = this._vertices;
                vertices.length = 0;
                var layerOrientation = this._layerOrientation, tiles = this._tiles;
                if (!tiles) {
                    return;
                }
                var rightTop = this._rightTop;
                rightTop.row = -1;
                rightTop.col = -1;
                var maptw = this._mapTileSize.width, mapth = this._mapTileSize.height, maptw2 = maptw * 0.5, mapth2 = mapth * 0.5, rows = this._layerSize.height, cols = this._layerSize.width, grids = this._texGrids;
                var colOffset = 0, gid = void 0, grid = void 0, left = void 0, bottom = void 0, axis = void 0, diffX1 = void 0, diffY1 = void 0, odd_even = void 0, diffX2 = void 0, diffY2 = void 0;
                if (layerOrientation === Orientation.HEX) {
                    axis = this._staggerAxis;
                    diffX1 = this._diffX1;
                    diffY1 = this._diffY1;
                    odd_even = this._odd_even;
                }
                var cullingCol = 0, cullingRow = 0;
                var tileOffset = null, gridGID = 0;
                this._topOffset = 0;
                this._downOffset = 0;
                this._leftOffset = 0;
                this._rightOffset = 0;
                this._hasAniGrid = false;
                var topBorder = 0, downBorder = 0, leftBorder = 0, rightBorder = 0;
                for (var row = 0; row < rows; ++row) {
                    for (var col = 0; col < cols; ++col) {
                        var index = colOffset + col;
                        gid = tiles[index];
                        gridGID = (gid & FLIPPED_MASK) >>> 0;
                        grid = grids[gridGID];
                        if (this._animations[gridGID]) {
                            this._hasAniGrid = true;
                        }
                        if (!grid) {
                            continue;
                        }
                        switch (layerOrientation) {
                        case Orientation.ORTHO:
                            cullingCol = col;
                            cullingRow = rows - row - 1;
                            left = cullingCol * maptw;
                            bottom = cullingRow * mapth;
                            break;
                        case Orientation.ISO:
                            cullingCol = rows + col - row - 1;
                            cullingRow = rows + cols - col - row - 2;
                            left = maptw2 * cullingCol;
                            bottom = mapth2 * cullingRow;
                            break;
                        case Orientation.HEX:
                            diffX2 = axis === StaggerAxis.STAGGERAXIS_Y && row % 2 === 1 ? maptw2 * odd_even : 0;
                            diffY2 = axis === StaggerAxis.STAGGERAXIS_X && col % 2 === 1 ? mapth2 * -odd_even : 0;
                            left = col * (maptw - diffX1) + diffX2;
                            bottom = (rows - row - 1) * (mapth - diffY1) + diffY2;
                            cullingCol = col;
                            cullingRow = rows - row - 1;
                            break;
                        }
                        var rowData = vertices[cullingRow] = vertices[cullingRow] || {
                            minCol: 0,
                            maxCol: 0
                        };
                        var colData = rowData[cullingCol] = rowData[cullingCol] || {};
                        if (rowData.minCol > cullingCol) {
                            rowData.minCol = cullingCol;
                        }
                        if (rowData.maxCol < cullingCol) {
                            rowData.maxCol = cullingCol;
                        }
                        if (rightTop.row < cullingRow) {
                            rightTop.row = cullingRow;
                        }
                        if (rightTop.col < cullingCol) {
                            rightTop.col = cullingCol;
                        }
                        tileOffset = grid.tileset.tileOffset;
                        left += this._offset.x + tileOffset.x;
                        bottom += this._offset.y - tileOffset.y;
                        topBorder = -tileOffset.y + grid.tileset._tileSize.height - mapth;
                        topBorder = topBorder < 0 ? 0 : topBorder;
                        downBorder = tileOffset.y < 0 ? 0 : tileOffset.y;
                        leftBorder = -tileOffset.x < 0 ? 0 : -tileOffset.x;
                        rightBorder = tileOffset.x + grid.tileset._tileSize.width - maptw;
                        rightBorder = rightBorder < 0 ? 0 : rightBorder;
                        if (this._rightOffset < leftBorder) {
                            this._rightOffset = leftBorder;
                        }
                        if (this._leftOffset < rightBorder) {
                            this._leftOffset = rightBorder;
                        }
                        if (this._topOffset < downBorder) {
                            this._topOffset = downBorder;
                        }
                        if (this._downOffset < topBorder) {
                            this._downOffset = topBorder;
                        }
                        colData.left = left;
                        colData.bottom = bottom;
                        colData.index = index;
                    }
                    colOffset += cols;
                }
                this._verticesDirty = false;
            },
            getTiledTileAt: function getTiledTileAt(x, y, forceCreate) {
                if (this._isInvalidPosition(x, y)) {
                    throw new Error('TiledLayer.getTiledTileAt: invalid position');
                }
                if (!this._tiles) {
                    cc.logID(7236);
                    return null;
                }
                var index = Math.floor(x) + Math.floor(y) * this._layerSize.width;
                var tile = this._tiledTiles[index];
                if (!tile && forceCreate) {
                    var node = new cc.Node();
                    tile = node.addComponent(cc.TiledTile);
                    tile._x = x;
                    tile._y = y;
                    tile._layer = this;
                    tile._updateInfo();
                    node.parent = this.node;
                    return tile;
                }
                return tile;
            },
            setTiledTileAt: function setTiledTileAt(x, y, tiledTile) {
                if (this._isInvalidPosition(x, y)) {
                    throw new Error('TiledLayer.setTiledTileAt: invalid position');
                }
                if (!this._tiles) {
                    cc.logID(7236);
                    return null;
                }
                var index = Math.floor(x) + Math.floor(y) * this._layerSize.width;
                this._tiledTiles[index] = tiledTile;
                this._cullingDirty = true;
                if (tiledTile) {
                    this._hasTiledNodeGrid = true;
                } else {
                    this._hasTiledNodeGrid = this._tiledTiles.some(function (tiledNode, index) {
                        return !!tiledNode;
                    });
                }
                return tiledTile;
            },
            getTexture: function getTexture(index) {
                index = index || 0;
                if (this._textures && index >= 0 && this._textures.length > index) {
                    return this._textures[index];
                }
                return null;
            },
            getTextures: function getTextures() {
                return this._textures;
            },
            setTexture: function setTexture(texture) {
                this.setTextures([texture]);
            },
            setTextures: function setTextures(textures) {
                this._textures = textures;
                this._activateMaterial();
            },
            getLayerSize: function getLayerSize() {
                return this._layerSize;
            },
            getMapTileSize: function getMapTileSize() {
                return this._mapTileSize;
            },
            getTileSet: function getTileSet(index) {
                index = index || 0;
                if (this._tilesets && index >= 0 && this._tilesets.length > index) {
                    return this._tilesets[index];
                }
                return null;
            },
            getTileSets: function getTileSets() {
                return this._tilesets;
            },
            setTileSet: function setTileSet(tileset) {
                this.setTileSets([tileset]);
            },
            setTileSets: function setTileSets(tilesets) {
                this._tilesets = tilesets;
                var textures = this._textures = [];
                var texGrids = this._texGrids = [];
                for (var i = 0; i < tilesets.length; i++) {
                    var tileset = tilesets[i];
                    if (tileset) {
                        textures[i] = tileset.sourceImage;
                    }
                }
                cc.TiledMap.loadAllTextures(textures, function () {
                    for (var _i = 0, l = tilesets.length; _i < l; ++_i) {
                        var tilesetInfo = tilesets[_i];
                        if (!tilesetInfo)
                            continue;
                        cc.TiledMap.fillTextureGrids(tilesetInfo, texGrids, _i);
                    }
                    this._prepareToRender();
                }.bind(this));
            },
            _traverseAllGrid: function _traverseAllGrid() {
                var tiles = this._tiles;
                var texGrids = this._texGrids;
                var tilesetIndexArr = this._tilesetIndexArr;
                var tilesetIdxMap = {};
                var TiledMap = cc.TiledMap;
                var TileFlag = TiledMap.TileFlag;
                var FLIPPED_MASK = TileFlag.FLIPPED_MASK;
                tilesetIndexArr.length = 0;
                for (var i = 0; i < tiles.length; i++) {
                    var gid = tiles[i];
                    if (gid === 0)
                        continue;
                    gid = (gid & FLIPPED_MASK) >>> 0;
                    var grid = texGrids[gid];
                    if (!grid) {
                        cc.error('CCTiledLayer:_traverseAllGrid grid is null, gid is:', gid);
                        continue;
                    }
                    var tilesetIdx = grid.texId;
                    if (tilesetIdxMap[tilesetIdx])
                        continue;
                    tilesetIdxMap[tilesetIdx] = true;
                    tilesetIndexArr.push(tilesetIdx);
                }
            },
            _init: function _init(layerInfo, mapInfo, tilesets, textures, texGrids) {
                this._cullingDirty = true;
                this._layerInfo = layerInfo;
                this._mapInfo = mapInfo;
                var size = layerInfo._layerSize;
                this._layerName = layerInfo.name;
                this._tiles = layerInfo._tiles;
                this._properties = layerInfo.properties;
                this._layerSize = size;
                this._minGID = layerInfo._minGID;
                this._maxGID = layerInfo._maxGID;
                this._opacity = layerInfo._opacity;
                this._renderOrder = mapInfo.renderOrder;
                this._staggerAxis = mapInfo.getStaggerAxis();
                this._staggerIndex = mapInfo.getStaggerIndex();
                this._hexSideLength = mapInfo.getHexSideLength();
                this._animations = mapInfo.getTileAnimations();
                this._tilesets = tilesets;
                this._textures = textures;
                this._texGrids = texGrids;
                this._layerOrientation = mapInfo.orientation;
                this._mapTileSize = mapInfo.getTileSize();
                if (this._layerOrientation === cc.TiledMap.Orientation.HEX) {
                    var TiledMap = cc.TiledMap;
                    var StaggerAxis = TiledMap.StaggerAxis;
                    var StaggerIndex = TiledMap.StaggerIndex;
                    var maptw = this._mapTileSize.width;
                    var mapth = this._mapTileSize.height;
                    var width = 0, height = 0;
                    this._odd_even = this._staggerIndex === StaggerIndex.STAGGERINDEX_ODD ? 1 : -1;
                    if (this._staggerAxis === StaggerAxis.STAGGERAXIS_X) {
                        this._diffX1 = (maptw - this._hexSideLength) / 2;
                        this._diffY1 = 0;
                        height = mapth * (this._layerSize.height + 0.5);
                        width = (maptw + this._hexSideLength) * Math.floor(this._layerSize.width / 2) + maptw * (this._layerSize.width % 2);
                    } else {
                        this._diffX1 = 0;
                        this._diffY1 = (mapth - this._hexSideLength) / 2;
                        width = maptw * (this._layerSize.width + 0.5);
                        height = (mapth + this._hexSideLength) * Math.floor(this._layerSize.height / 2) + mapth * (this._layerSize.height % 2);
                    }
                    this.node.setContentSize(width, height);
                } else {
                    this.node.setContentSize(this._layerSize.width * this._mapTileSize.width, this._layerSize.height * this._mapTileSize.height);
                }
                this._offset = cc.v2(layerInfo.offset.x, -layerInfo.offset.y);
                this._useAutomaticVertexZ = false;
                this._vertexZvalue = 0;
                this._syncAnchorPoint();
                this._prepareToRender();
            },
            _prepareToRender: function _prepareToRender() {
                this._updateVertices();
                this._traverseAllGrid();
                this._updateAllUserNode();
                this._activateMaterial();
            },
            _activateMaterial: function _activateMaterial() {
                var tilesetIndexArr = this._tilesetIndexArr;
                if (tilesetIndexArr.length === 0) {
                    this.disableRender();
                    return;
                }
                var texIdMatIdx = this._texIdToMatIndex = {};
                var textures = this._textures;
                for (var i = 0; i < tilesetIndexArr.length; i++) {
                    var tilesetIdx = tilesetIndexArr[i];
                    var texture = textures[tilesetIdx];
                    var material = this.sharedMaterials[i];
                    if (!material) {
                        material = Material.getInstantiatedBuiltinMaterial('2d-sprite', this);
                    } else {
                        material = Material.getInstantiatedMaterial(material, this);
                    }
                    material.define('USE_TEXTURE', true);
                    material.define('CC_USE_MODEL', true);
                    material.setProperty('texture', texture);
                    this.setMaterial(i, material);
                    texIdMatIdx[tilesetIdx] = i;
                }
                this.markForUpdateRenderData(true);
                this.markForRender(true);
            }
        });
        cc.TiledLayer = module.exports = TiledLayer;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDVGlsZWRMYXllci5qcyIsIi9Vc2Vycy9TaGFyZWQvYmluZ29fZnJlbnp5L2VuZ2luZS9jb2NvczJkL3RpbGVtYXAvQ0NUaWxlZExheWVyLmpzIl0sIm5hbWVzIjpbIlJlbmRlckNvbXBvbmVudCIsInJlcXVpcmUiLCJNYXRlcmlhbCIsIlJlbmRlckZsb3ciLCJfbWF0NF90ZW1wIiwibWF0NCIsImNyZWF0ZSIsIl92ZWMyX3RlbXAiLCJ2ZWMyIiwiX3ZlYzJfdGVtcDIiLCJfdGVtcFJvd0NvbCIsInJvdyIsImNvbCIsIlRpbGVkVXNlck5vZGVEYXRhIiwiY2MiLCJDbGFzcyIsIm5hbWUiLCJleHRlbmRzIiwiQ29tcG9uZW50IiwiY3RvciIsIl9pbmRleCIsIl9yb3ciLCJfY29sIiwiX3RpbGVkTGF5ZXIiLCJUaWxlZExheWVyIiwiZWRpdG9yIiwiaW5zcGVjdG9yIiwiX3VzZXJOb2RlR3JpZCIsIl91c2VyTm9kZU1hcCIsIl91c2VyTm9kZURpcnR5IiwiX3RpbGVkVGlsZXMiLCJfdGlsZXNldEluZGV4QXJyIiwiX3RleElkVG9NYXRJbmRleCIsIl92aWV3UG9ydCIsIngiLCJ5Iiwid2lkdGgiLCJoZWlnaHQiLCJfY3VsbGluZ1JlY3QiLCJsZWZ0RG93biIsInJpZ2h0VG9wIiwiX2N1bGxpbmdEaXJ0eSIsIl9yaWdodFRvcCIsIl9sYXllckluZm8iLCJfbWFwSW5mbyIsIl90b3BPZmZzZXQiLCJfZG93bk9mZnNldCIsIl9sZWZ0T2Zmc2V0IiwiX3JpZ2h0T2Zmc2V0IiwiX3RpbGVzIiwiX3ZlcnRpY2VzIiwiX3ZlcnRpY2VzRGlydHkiLCJfbGF5ZXJOYW1lIiwiX2xheWVyT3JpZW50YXRpb24iLCJfdGV4R3JpZHMiLCJfdGV4dHVyZXMiLCJfdGlsZXNldHMiLCJfbGVmdERvd25Ub0NlbnRlclgiLCJfbGVmdERvd25Ub0NlbnRlclkiLCJfaGFzVGlsZWROb2RlR3JpZCIsIl9oYXNBbmlHcmlkIiwiX2FuaW1hdGlvbnMiLCJfZW5hYmxlQ3VsbGluZyIsIm1hY3JvIiwiRU5BQkxFX1RJTEVETUFQX0NVTExJTkciLCJfaGFzVGlsZWROb2RlIiwiX2hhc0FuaW1hdGlvbiIsImVuYWJsZUN1bGxpbmciLCJ2YWx1ZSIsImFkZFVzZXJOb2RlIiwibm9kZSIsImRhdGFDb21wIiwiZ2V0Q29tcG9uZW50Iiwid2FybiIsImFkZENvbXBvbmVudCIsInBhcmVudCIsIl9yZW5kZXJGbGFnIiwiRkxBR19CUkVBS19GTE9XIiwiX2lkIiwiX25vZGVMb2NhbFBvc1RvTGF5ZXJQb3MiLCJfcG9zaXRpb25Ub1Jvd0NvbCIsIl9hZGRVc2VyTm9kZVRvR3JpZCIsIl91cGRhdGVDdWxsaW5nT2Zmc2V0QnlVc2VyTm9kZSIsIm9uIiwiTm9kZSIsIkV2ZW50VHlwZSIsIlBPU0lUSU9OX0NIQU5HRUQiLCJfdXNlck5vZGVQb3NDaGFuZ2UiLCJTSVpFX0NIQU5HRUQiLCJfdXNlck5vZGVTaXplQ2hhbmdlIiwicmVtb3ZlVXNlck5vZGUiLCJvZmYiLCJfcmVtb3ZlVXNlck5vZGVGcm9tR3JpZCIsIl9yZW1vdmVDb21wb25lbnQiLCJkZXN0cm95IiwicmVtb3ZlRnJvbVBhcmVudCIsImRlc3Ryb3lVc2VyTm9kZSIsIm5vZGVQb3MiLCJvdXQiLCJfZ2V0Tm9kZXNCeVJvd0NvbCIsInJvd0RhdGEiLCJfZ2V0Tm9kZXNDb3VudEJ5Um93IiwiY291bnQiLCJfdXBkYXRlQWxsVXNlck5vZGUiLCJkYXRhSWQiLCJzZWxmIiwiaW5kZXgiLCJjb2xEYXRhIiwibGlzdCIsImxlbmd0aCIsIl9pc0luTGF5ZXIiLCJ0ZW1wUm93Q29sIiwicHVzaCIsIl9pc1VzZXJOb2RlRGlydHkiLCJfc2V0VXNlck5vZGVEaXJ0eSIsIm9uRW5hYmxlIiwiX3N1cGVyIiwiQU5DSE9SX0NIQU5HRUQiLCJfc3luY0FuY2hvclBvaW50IiwiX2FjdGl2YXRlTWF0ZXJpYWwiLCJvbkRpc2FibGUiLCJhbmNob3JYIiwic2NhbGVYIiwiYW5jaG9yWSIsInNjYWxlWSIsIm9uRGVzdHJveSIsIl9idWZmZXIiLCJfcmVuZGVyRGF0YUxpc3QiLCJnZXRMYXllck5hbWUiLCJzZXRMYXllck5hbWUiLCJsYXllck5hbWUiLCJnZXRQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsIl9wcm9wZXJ0aWVzIiwiZ2V0UG9zaXRpb25BdCIsInBvcyIsInVuZGVmaW5lZCIsIk1hdGgiLCJmbG9vciIsInJldCIsIlRpbGVkTWFwIiwiT3JpZW50YXRpb24iLCJPUlRITyIsIl9wb3NpdGlvbkZvck9ydGhvQXQiLCJJU08iLCJfcG9zaXRpb25Gb3JJc29BdCIsIkhFWCIsIl9wb3NpdGlvbkZvckhleEF0IiwiX2lzSW52YWxpZFBvc2l0aW9uIiwiX2xheWVyU2l6ZSIsInYyIiwiX21hcFRpbGVTaXplIiwidGlsZVdpZHRoIiwidGlsZUhlaWdodCIsInJvd3MiLCJnaWQiLCJ0aWxlc2V0Iiwib2Zmc2V0IiwidGlsZU9mZnNldCIsImNlbnRlcldpZHRoIiwiY2VudGVySGVpZ2h0Iiwib2RkX2V2ZW4iLCJfc3RhZ2dlckluZGV4IiwiU3RhZ2dlckluZGV4IiwiU1RBR0dFUklOREVYX09ERCIsImRpZmZYIiwiZGlmZlgxIiwiZGlmZlkiLCJkaWZmWTEiLCJfc3RhZ2dlckF4aXMiLCJTdGFnZ2VyQXhpcyIsIlNUQUdHRVJBWElTX1kiLCJfaGV4U2lkZUxlbmd0aCIsIlNUQUdHRVJBWElTX1giLCJzZXRUaWxlR0lEQXQiLCJwb3NPclgiLCJmbGFnc09yWSIsImZsYWdzIiwiRXJyb3IiLCJWZWMyIiwibG9nSUQiLCJmaXJzdEdpZCIsImN1cnJlbnRGbGFncyIsImdldFRpbGVGbGFnc0F0IiwiY3VycmVudEdJRCIsImdldFRpbGVHSURBdCIsImdpZEFuZEZsYWdzIiwiX3VwZGF0ZVRpbGVGb3JHSUQiLCJpZHgiLCJ0aWxlIiwiVGlsZUZsYWciLCJGTElQUEVEX01BU0siLCJGTElQUEVEX0FMTCIsIl9zZXRDdWxsaW5nRGlydHkiLCJfaXNDdWxsaW5nRGlydHkiLCJfdXBkYXRlVmlld1BvcnQiLCJyZXNlcnZlTGluZSIsInZweCIsIl9vZmZzZXQiLCJ2cHkiLCJsZWZ0RG93blgiLCJsZWZ0RG93blkiLCJyaWdodFRvcFgiLCJyaWdodFRvcFkiLCJyZXN1bHQiLCJtYXB0dyIsIm1hcHRoIiwibWFwdHcyIiwibWFwdGgyIiwiZGlmZlgyIiwiZGlmZlkyIiwiYXhpcyIsImNvbHMiLCJfZGlmZlkxIiwiX29kZF9ldmVuIiwiX2RpZmZYMSIsIl91cGRhdGVDdWxsaW5nIiwiQ0NfRURJVE9SIiwiX3VwZGF0ZVdvcmxkTWF0cml4IiwiaW52ZXJ0IiwiX3dvcmxkTWF0cml4IiwicmVjdCIsInZpc2libGVSZWN0IiwiY2FtZXJhIiwiQ2FtZXJhIiwiZmluZENhbWVyYSIsImdldFNjcmVlblRvV29ybGRQb2ludCIsInRyYW5zZm9ybU1hdDQiLCJnZXRMYXllck9yaWVudGF0aW9uIiwiZ2V0UHJvcGVydGllcyIsIl91cGRhdGVWZXJ0aWNlcyIsInZlcnRpY2VzIiwibGF5ZXJPcmllbnRhdGlvbiIsInRpbGVzIiwiZ3JpZHMiLCJjb2xPZmZzZXQiLCJncmlkIiwibGVmdCIsImJvdHRvbSIsImN1bGxpbmdDb2wiLCJjdWxsaW5nUm93IiwiZ3JpZEdJRCIsInRvcEJvcmRlciIsImRvd25Cb3JkZXIiLCJsZWZ0Qm9yZGVyIiwicmlnaHRCb3JkZXIiLCJtaW5Db2wiLCJtYXhDb2wiLCJfdGlsZVNpemUiLCJnZXRUaWxlZFRpbGVBdCIsImZvcmNlQ3JlYXRlIiwiVGlsZWRUaWxlIiwiX3giLCJfeSIsIl9sYXllciIsIl91cGRhdGVJbmZvIiwic2V0VGlsZWRUaWxlQXQiLCJ0aWxlZFRpbGUiLCJzb21lIiwidGlsZWROb2RlIiwiZ2V0VGV4dHVyZSIsImdldFRleHR1cmVzIiwic2V0VGV4dHVyZSIsInRleHR1cmUiLCJzZXRUZXh0dXJlcyIsInRleHR1cmVzIiwiZ2V0TGF5ZXJTaXplIiwiZ2V0TWFwVGlsZVNpemUiLCJnZXRUaWxlU2V0IiwiZ2V0VGlsZVNldHMiLCJzZXRUaWxlU2V0Iiwic2V0VGlsZVNldHMiLCJ0aWxlc2V0cyIsInRleEdyaWRzIiwiaSIsInNvdXJjZUltYWdlIiwibG9hZEFsbFRleHR1cmVzIiwibCIsInRpbGVzZXRJbmZvIiwiZmlsbFRleHR1cmVHcmlkcyIsIl9wcmVwYXJlVG9SZW5kZXIiLCJiaW5kIiwiX3RyYXZlcnNlQWxsR3JpZCIsInRpbGVzZXRJbmRleEFyciIsInRpbGVzZXRJZHhNYXAiLCJlcnJvciIsInRpbGVzZXRJZHgiLCJ0ZXhJZCIsIl9pbml0IiwibGF5ZXJJbmZvIiwibWFwSW5mbyIsInNpemUiLCJwcm9wZXJ0aWVzIiwiX21pbkdJRCIsIl9tYXhHSUQiLCJfb3BhY2l0eSIsIl9yZW5kZXJPcmRlciIsInJlbmRlck9yZGVyIiwiZ2V0U3RhZ2dlckF4aXMiLCJnZXRTdGFnZ2VySW5kZXgiLCJnZXRIZXhTaWRlTGVuZ3RoIiwiZ2V0VGlsZUFuaW1hdGlvbnMiLCJvcmllbnRhdGlvbiIsImdldFRpbGVTaXplIiwic2V0Q29udGVudFNpemUiLCJfdXNlQXV0b21hdGljVmVydGV4WiIsIl92ZXJ0ZXhadmFsdWUiLCJkaXNhYmxlUmVuZGVyIiwidGV4SWRNYXRJZHgiLCJtYXRlcmlhbCIsInNoYXJlZE1hdGVyaWFscyIsImdldEluc3RhbnRpYXRlZEJ1aWx0aW5NYXRlcmlhbCIsImdldEluc3RhbnRpYXRlZE1hdGVyaWFsIiwiZGVmaW5lIiwic2V0UHJvcGVydHkiLCJzZXRNYXRlcmlhbCIsIm1hcmtGb3JVcGRhdGVSZW5kZXJEYXRhIiwibWFya0ZvclJlbmRlciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7OztJQTZCQSxJQUFBLFVBQUEsR0FBQSw0Q0FBQTs7UUE3QkEsT0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBOzs7Ozs7Ozs7Ozs7OztRQTZCQSxJQUFBLE1BQUEsR0FBQSxPQUFBLENBQUEsZUFBQSxDQUFBO1FBSkEsSUFBTUEsZUFBQUEsR0FBa0JDLE9BQUFBLENBQVEsc0NBQVJBLENBQXhCO1FBQ0EsSUFBTUMsUUFBQUEsR0FBV0QsT0FBQUEsQ0FBUSxvQ0FBUkEsQ0FBakI7UUFDQSxJQUFNRSxVQUFBQSxHQUFhRixPQUFBQSxDQUFRLDhC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QixJQUEwQmxDLENBQTFCa0MsQ0FoQjZDO0FBQUEsaUJBVmhDO0FBQUEsZ0JBNkJqQixLQUFLUSx1QkFBTCxDQUE2QixJQUE3QixFQTdCaUI7QUFBQSxnQkE4QmpCLEtBQUtDLGFBQUwsQ0FBbUIsSUFBbkIsRUE5QmlCO0FBQUEsYUFyc0NDO0FBQUEsU0FBVC9TLENBQWpCO1FBdXVDQUEsRUFBQUEsQ0FBR1UsVUFBSFYsR0FBZ0JnVCxNQUFBQSxDQUFPQyxPQUFQRCxHQUFpQnRTLFVBQWpDViIsImZpbGUiOiJDQ1RpbGVkTGF5ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAxMy0yMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiAgd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5jb25zdCBSZW5kZXJDb21wb25lbnQgPSByZXF1aXJlKCcuLi9jb3JlL2NvbXBvbmVudHMvQ0NSZW5kZXJDb21wb25lbnQnKTtcbmNvbnN0IE1hdGVyaWFsID0gcmVxdWlyZSgnLi4vY29yZS9hc3NldHMvbWF0ZXJpYWwvQ0NNYXRlcmlhbCcpO1xuY29uc3QgUmVuZGVyRmxvdyA9IHJlcXVpcmUoJy4uL2NvcmUvcmVuZGVyZXIvcmVuZGVyLWZsb3cnKTtcblxuaW1wb3J0IHsgbWF0NCwgdmVjMiB9IGZyb20gJy4uL2NvcmUvdm1hdGgnO1xubGV0IF9tYXQ0X3RlbXAgPSBtYXQ0LmNyZWF0ZSgpO1xubGV0IF92ZWMyX3RlbXAgPSB2ZWMyLmNyZWF0ZSgpO1xubGV0IF92ZWMyX3RlbXAyID0gdmVjMi5jcmVhdGUoKTtcbmxldCBfdGVtcFJvd0NvbCA9IHtyb3c6MCwgY29sOjB9O1xuXG5sZXQgVGlsZWRVc2VyTm9kZURhdGEgPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLlRpbGVkVXNlck5vZGVEYXRhJyxcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG5cbiAgICBjdG9yICgpIHtcbiAgICAgICAgdGhpcy5faW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy5fcm93ID0gLTE7XG4gICAgICAgIHRoaXMuX2NvbCA9IC0xO1xuICAgICAgICB0aGlzLl90aWxlZExheWVyID0gbnVsbDtcbiAgICB9XG5cbn0pO1xuXG4vKipcbiAqICEjZW4gUmVuZGVyIHRoZSBUTVggbGF5ZXIuXG4gKiAhI3poIOa4suafkyBUTVggbGF5ZXLjgIJcbiAqIEBjbGFzcyBUaWxlZExheWVyXG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcbiAqL1xubGV0IFRpbGVkTGF5ZXIgPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLlRpbGVkTGF5ZXInLFxuXG4gICAgLy8gSW5oZXJpdHMgZnJvbSB0aGUgYWJzdHJhY3QgY2xhc3MgZGlyZWN0bHksXG4gICAgLy8gYmVjYXVzZSBUaWxlZExheWVyIG5vdCBjcmVhdGUgb3IgbWFpbnRhaW5zIHRoZSBzZ05vZGUgYnkgaXRzZWxmLlxuICAgIGV4dGVuZHM6IFJlbmRlckNvbXBvbmVudCxcblxuICAgIGVkaXRvcjoge1xuICAgICAgICBpbnNwZWN0b3I6ICdwYWNrYWdlczovL2luc3BlY3Rvci9pbnNwZWN0b3JzL2NvbXBzL3RpbGVkLWxheWVyLmpzJyxcbiAgICB9LFxuXG4gICAgY3RvciAoKSB7XG4gICAgICAgIHRoaXMuX3VzZXJOb2RlR3JpZCA9IHt9Oy8vIFtyb3ddW2NvbF0gPSB7Y291bnQ6IDAsIG5vZGVzTGlzdDogW119O1xuICAgICAgICB0aGlzLl91c2VyTm9kZU1hcCA9IHt9Oy8vIFtpZF0gPSBub2RlO1xuICAgICAgICB0aGlzLl91c2VyTm9kZURpcnR5ID0gZmFsc2U7XG5cbiAgICAgICAgLy8gc3RvcmUgdGhlIGxheWVyIHRpbGVzIG5vZGUsIGluZGV4IGlzIGNhY3VsYXRlZCBieSAneCArIHdpZHRoICogeScsIGZvcm1hdCBsaWtlcyAnWzBdPXRpbGVOb2RlMCxbMV09dGlsZU5vZGUxLCAuLi4nXG4gICAgICAgIHRoaXMuX3RpbGVkVGlsZXMgPSBbXTtcblxuICAgICAgICAvLyBzdG9yZSB0aGUgbGF5ZXIgdGlsZXNldHMgaW5kZXggYXJyYXlcbiAgICAgICAgdGhpcy5fdGlsZXNldEluZGV4QXJyID0gW107XG4gICAgICAgIC8vIHRleHR1cmUgaWQgdG8gbWF0ZXJpYWwgaW5kZXhcbiAgICAgICAgdGhpcy5fdGV4SWRUb01hdEluZGV4ID0ge307XG5cbiAgICAgICAgdGhpcy5fdmlld1BvcnQgPSB7eDotMSwgeTotMSwgd2lkdGg6LTEsIGhlaWdodDotMX07XG4gICAgICAgIHRoaXMuX2N1bGxpbmdSZWN0ID0ge1xuICAgICAgICAgICAgbGVmdERvd246e3JvdzotMSwgY29sOi0xfSxcbiAgICAgICAgICAgIHJpZ2h0VG9wOntyb3c6LTEsIGNvbDotMX1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fY3VsbGluZ0RpcnR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcmlnaHRUb3AgPSB7cm93Oi0xLCBjb2w6LTF9O1xuXG4gICAgICAgIHRoaXMuX2xheWVySW5mbyA9IG51bGw7XG4gICAgICAgIHRoaXMuX21hcEluZm8gPSBudWxsO1xuXG4gICAgICAgIC8vIHJlY29yZCBtYXggb3IgbWluIHRpbGUgdGV4dHVyZSBvZmZzZXQsIFxuICAgICAgICAvLyBpdCB3aWxsIG1ha2UgY3VsbGluZyByZWN0IG1vcmUgbGFyZ2UsIHdoaWNoIGluc3VyZSBjdWxsaW5nIHJlY3QgY29ycmVjdC5cbiAgICAgICAgdGhpcy5fdG9wT2Zmc2V0ID0gMDtcbiAgICAgICAgdGhpcy5fZG93bk9mZnNldCA9IDA7XG4gICAgICAgIHRoaXMuX2xlZnRPZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLl9yaWdodE9mZnNldCA9IDA7XG5cbiAgICAgICAgLy8gc3RvcmUgdGhlIGxheWVyIHRpbGVzLCBpbmRleCBpcyBjYWN1bGF0ZWQgYnkgJ3ggKyB3aWR0aCAqIHknLCBmb3JtYXQgbGlrZXMgJ1swXT1naWQwLFsxXT1naWQxLCAuLi4nXG4gICAgICAgIHRoaXMuX3RpbGVzID0gW107XG4gICAgICAgIC8vIHZlcnRleCBhcnJheVxuICAgICAgICB0aGlzLl92ZXJ0aWNlcyA9IFtdO1xuICAgICAgICAvLyB2ZXJ0aWNlcyBkaXJ0eVxuICAgICAgICB0aGlzLl92ZXJ0aWNlc0RpcnR5ID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLl9sYXllck5hbWUgPSAnJztcbiAgICAgICAgdGhpcy5fbGF5ZXJPcmllbnRhdGlvbiA9IG51bGw7XG5cbiAgICAgICAgLy8gc3RvcmUgYWxsIGxheWVyIGdpZCBjb3JyZXNwb25kaW5nIHRleHR1cmUgaW5mbywgaW5kZXggaXMgZ2lkLCBmb3JtYXQgbGlrZXMgJ1tnaWQwXT10ZXgtaW5mbyxbZ2lkMV09dGV4LWluZm8sIC4uLidcbiAgICAgICAgdGhpcy5fdGV4R3JpZHMgPSBudWxsO1xuICAgICAgICAvLyBzdG9yZSBhbGwgdGlsZXNldCB0ZXh0dXJlLCBpbmRleCBpcyB0aWxlc2V0IGluZGV4LCBmb3JtYXQgbGlrZXMgJ1swXT10ZXh0dXJlMCwgWzFdPXRleHR1cmUxLCAuLi4nXG4gICAgICAgIHRoaXMuX3RleHR1cmVzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fdGlsZXNldHMgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuX2xlZnREb3duVG9DZW50ZXJYID0gMDtcbiAgICAgICAgdGhpcy5fbGVmdERvd25Ub0NlbnRlclkgPSAwO1xuXG4gICAgICAgIHRoaXMuX2hhc1RpbGVkTm9kZUdyaWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5faGFzQW5pR3JpZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9hbmltYXRpb25zID0gbnVsbDtcblxuICAgICAgICAvLyBzd2l0Y2ggb2YgY3VsbGluZ1xuICAgICAgICB0aGlzLl9lbmFibGVDdWxsaW5nID0gY2MubWFjcm8uRU5BQkxFX1RJTEVETUFQX0NVTExJTkc7XG4gICAgfSxcblxuICAgIF9oYXNUaWxlZE5vZGUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faGFzVGlsZWROb2RlR3JpZDtcbiAgICB9LFxuXG4gICAgX2hhc0FuaW1hdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYXNBbmlHcmlkO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIGVuYWJsZSBvciBkaXNhYmxlIGN1bGxpbmdcbiAgICAgKiAhI3poIOW8gOWQr+aIluWFs+mXreijgeWJquOAglxuICAgICAqIEBtZXRob2QgZW5hYmxlQ3VsbGluZ1xuICAgICAqIEBwYXJhbSB2YWx1ZVxuICAgICAqL1xuICAgIGVuYWJsZUN1bGxpbmcgKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLl9lbmFibGVDdWxsaW5nICE9IHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9lbmFibGVDdWxsaW5nID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLl9jdWxsaW5nRGlydHkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gQWRkcyB1c2VyJ3Mgbm9kZSBpbnRvIGxheWVyLlxuICAgICAqICEjemgg5re75Yqg55So5oi36IqC54K544CCXG4gICAgICogQG1ldGhvZCBhZGRVc2VyTm9kZVxuICAgICAqIEBwYXJhbSB7Y2MuTm9kZX0gbm9kZVxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgYWRkVXNlck5vZGUgKG5vZGUpIHtcbiAgICAgICAgbGV0IGRhdGFDb21wID0gbm9kZS5nZXRDb21wb25lbnQoVGlsZWRVc2VyTm9kZURhdGEpO1xuICAgICAgICBpZiAoZGF0YUNvbXApIHtcbiAgICAgICAgICAgIGNjLndhcm4oXCJDQ1RpbGVkTGF5ZXI6YWRkVXNlck5vZGUgbm9kZSBoYXMgYmVlbiBhZGRlZFwiKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGFDb21wID0gbm9kZS5hZGRDb21wb25lbnQoVGlsZWRVc2VyTm9kZURhdGEpO1xuICAgICAgICBub2RlLnBhcmVudCA9IHRoaXMubm9kZTtcbiAgICAgICAgbm9kZS5fcmVuZGVyRmxhZyB8PSBSZW5kZXJGbG93LkZMQUdfQlJFQUtfRkxPVztcbiAgICAgICAgdGhpcy5fdXNlck5vZGVNYXBbbm9kZS5faWRdID0gZGF0YUNvbXA7XG5cbiAgICAgICAgZGF0YUNvbXAuX3JvdyA9IC0xO1xuICAgICAgICBkYXRhQ29tcC5fY29sID0gLTE7XG4gICAgICAgIGRhdGFDb21wLl90aWxlZExheWVyID0gdGhpcztcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX25vZGVMb2NhbFBvc1RvTGF5ZXJQb3Mobm9kZSwgX3ZlYzJfdGVtcCk7XG4gICAgICAgIHRoaXMuX3Bvc2l0aW9uVG9Sb3dDb2woX3ZlYzJfdGVtcC54LCBfdmVjMl90ZW1wLnksIF90ZW1wUm93Q29sKTtcbiAgICAgICAgdGhpcy5fYWRkVXNlck5vZGVUb0dyaWQoZGF0YUNvbXAsIF90ZW1wUm93Q29sKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlQ3VsbGluZ09mZnNldEJ5VXNlck5vZGUobm9kZSk7XG4gICAgICAgIG5vZGUub24oY2MuTm9kZS5FdmVudFR5cGUuUE9TSVRJT05fQ0hBTkdFRCwgdGhpcy5fdXNlck5vZGVQb3NDaGFuZ2UsIGRhdGFDb21wKTtcbiAgICAgICAgbm9kZS5vbihjYy5Ob2RlLkV2ZW50VHlwZS5TSVpFX0NIQU5HRUQsIHRoaXMuX3VzZXJOb2RlU2l6ZUNoYW5nZSwgZGF0YUNvbXApO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBSZW1vdmVzIHVzZXIncyBub2RlLlxuICAgICAqICEjemgg56e76Zmk55So5oi36IqC54K544CCXG4gICAgICogQG1ldGhvZCByZW1vdmVVc2VyTm9kZVxuICAgICAqIEBwYXJhbSB7Y2MuTm9kZX0gbm9kZVxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgcmVtb3ZlVXNlck5vZGUgKG5vZGUpIHtcbiAgICAgICAgbGV0IGRhdGFDb21wID0gbm9kZS5nZXRDb21wb25lbnQoVGlsZWRVc2VyTm9kZURhdGEpO1xuICAgICAgICBpZiAoIWRhdGFDb21wKSB7XG4gICAgICAgICAgICBjYy53YXJuKFwiQ0NUaWxlZExheWVyOnJlbW92ZVVzZXJOb2RlIG5vZGUgaXMgbm90IGV4aXN0XCIpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUub2ZmKGNjLk5vZGUuRXZlbnRUeXBlLlBPU0lUSU9OX0NIQU5HRUQsIHRoaXMuX3VzZXJOb2RlUG9zQ2hhbmdlLCBkYXRhQ29tcCk7XG4gICAgICAgIG5vZGUub2ZmKGNjLk5vZGUuRXZlbnRUeXBlLlNJWkVfQ0hBTkdFRCwgdGhpcy5fdXNlck5vZGVTaXplQ2hhbmdlLCBkYXRhQ29tcCk7XG4gICAgICAgIHRoaXMuX3JlbW92ZVVzZXJOb2RlRnJvbUdyaWQoZGF0YUNvbXApO1xuICAgICAgICBkZWxldGUgdGhpcy5fdXNlck5vZGVNYXBbbm9kZS5faWRdO1xuICAgICAgICBub2RlLl9yZW1vdmVDb21wb25lbnQoZGF0YUNvbXApO1xuICAgICAgICBkYXRhQ29tcC5kZXN0cm95KCk7XG4gICAgICAgIG5vZGUucmVtb3ZlRnJvbVBhcmVudCh0cnVlKTtcbiAgICAgICAgbm9kZS5fcmVuZGVyRmxhZyAmPSB+UmVuZGVyRmxvdy5GTEFHX0JSRUFLX0ZMT1c7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIERlc3Ryb3kgdXNlcidzIG5vZGUuXG4gICAgICogISN6aCDplIDmr4HnlKjmiLfoioLngrnjgIJcbiAgICAgKiBAbWV0aG9kIGRlc3Ryb3lVc2VyTm9kZVxuICAgICAqIEBwYXJhbSB7Y2MuTm9kZX0gbm9kZVxuICAgICAqL1xuICAgIGRlc3Ryb3lVc2VyTm9kZSAobm9kZSkge1xuICAgICAgICB0aGlzLnJlbW92ZVVzZXJOb2RlKG5vZGUpO1xuICAgICAgICBub2RlLmRlc3Ryb3koKTtcbiAgICB9LFxuXG4gICAgLy8gYWNvcmRpbmcgbGF5ZXIgYW5jaG9yIHBvaW50IHRvIGNhbGN1bGF0ZSBub2RlIGxheWVyIHBvc1xuICAgIF9ub2RlTG9jYWxQb3NUb0xheWVyUG9zIChub2RlUG9zLCBvdXQpIHtcbiAgICAgICAgb3V0LnggPSBub2RlUG9zLnggKyB0aGlzLl9sZWZ0RG93blRvQ2VudGVyWDtcbiAgICAgICAgb3V0LnkgPSBub2RlUG9zLnkgKyB0aGlzLl9sZWZ0RG93blRvQ2VudGVyWTtcbiAgICB9LFxuXG4gICAgX2dldE5vZGVzQnlSb3dDb2wgKHJvdywgY29sKSB7XG4gICAgICAgIGxldCByb3dEYXRhID0gdGhpcy5fdXNlck5vZGVHcmlkW3Jvd107XG4gICAgICAgIGlmICghcm93RGF0YSkgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiByb3dEYXRhW2NvbF07XG4gICAgfSxcblxuICAgIF9nZXROb2Rlc0NvdW50QnlSb3cgKHJvdykge1xuICAgICAgICBsZXQgcm93RGF0YSA9IHRoaXMuX3VzZXJOb2RlR3JpZFtyb3ddO1xuICAgICAgICBpZiAoIXJvd0RhdGEpIHJldHVybiAwO1xuICAgICAgICByZXR1cm4gcm93RGF0YS5jb3VudDtcbiAgICB9LFxuXG4gICAgX3VwZGF0ZUFsbFVzZXJOb2RlICgpIHtcbiAgICAgICAgdGhpcy5fdXNlck5vZGVHcmlkID0ge307XG4gICAgICAgIGZvciAobGV0IGRhdGFJZCBpbiB0aGlzLl91c2VyTm9kZU1hcCkge1xuICAgICAgICAgICAgbGV0IGRhdGFDb21wID0gdGhpcy5fdXNlck5vZGVNYXBbZGF0YUlkXTtcbiAgICAgICAgICAgIHRoaXMuX25vZGVMb2NhbFBvc1RvTGF5ZXJQb3MoZGF0YUNvbXAubm9kZSwgX3ZlYzJfdGVtcCk7XG4gICAgICAgICAgICB0aGlzLl9wb3NpdGlvblRvUm93Q29sKF92ZWMyX3RlbXAueCwgX3ZlYzJfdGVtcC55LCBfdGVtcFJvd0NvbCk7XG4gICAgICAgICAgICB0aGlzLl9hZGRVc2VyTm9kZVRvR3JpZChkYXRhQ29tcCwgX3RlbXBSb3dDb2wpO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlQ3VsbGluZ09mZnNldEJ5VXNlck5vZGUoZGF0YUNvbXAubm9kZSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX3VwZGF0ZUN1bGxpbmdPZmZzZXRCeVVzZXJOb2RlIChub2RlKSB7XG4gICAgICAgIGlmICh0aGlzLl90b3BPZmZzZXQgPCBub2RlLmhlaWdodCkge1xuICAgICAgICAgICAgdGhpcy5fdG9wT2Zmc2V0ID0gbm9kZS5oZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2Rvd25PZmZzZXQgPCBub2RlLmhlaWdodCkge1xuICAgICAgICAgICAgdGhpcy5fZG93bk9mZnNldCA9IG5vZGUuaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9sZWZ0T2Zmc2V0IDwgbm9kZS53aWR0aCkge1xuICAgICAgICAgICAgdGhpcy5fbGVmdE9mZnNldCA9IG5vZGUud2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3JpZ2h0T2Zmc2V0IDwgbm9kZS53aWR0aCkge1xuICAgICAgICAgICAgdGhpcy5fcmlnaHRPZmZzZXQgPSBub2RlLndpZHRoO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF91c2VyTm9kZVNpemVDaGFuZ2UgKCkge1xuICAgICAgICBsZXQgZGF0YUNvbXAgPSB0aGlzO1xuICAgICAgICBsZXQgbm9kZSA9IGRhdGFDb21wLm5vZGU7XG4gICAgICAgIGxldCBzZWxmID0gZGF0YUNvbXAuX3RpbGVkTGF5ZXI7XG4gICAgICAgIHNlbGYuX3VwZGF0ZUN1bGxpbmdPZmZzZXRCeVVzZXJOb2RlKG5vZGUpO1xuICAgIH0sXG5cbiAgICBfdXNlck5vZGVQb3NDaGFuZ2UgKCkge1xuICAgICAgICBsZXQgZGF0YUNvbXAgPSB0aGlzO1xuICAgICAgICBsZXQgbm9kZSA9IGRhdGFDb21wLm5vZGU7XG4gICAgICAgIGxldCBzZWxmID0gZGF0YUNvbXAuX3RpbGVkTGF5ZXI7XG4gICAgICAgIHNlbGYuX25vZGVMb2NhbFBvc1RvTGF5ZXJQb3Mobm9kZSwgX3ZlYzJfdGVtcCk7XG4gICAgICAgIHNlbGYuX3Bvc2l0aW9uVG9Sb3dDb2woX3ZlYzJfdGVtcC54LCBfdmVjMl90ZW1wLnksIF90ZW1wUm93Q29sKTtcbiAgICAgICAgLy8gdXNlcnMgcG9zIG5vdCBjaGFuZ2VcbiAgICAgICAgaWYgKF90ZW1wUm93Q29sLnJvdyA9PT0gZGF0YUNvbXAuX3JvdyAmJiBfdGVtcFJvd0NvbC5jb2wgPT09IGRhdGFDb21wLl9jb2wpIHJldHVybjtcblxuICAgICAgICBzZWxmLl9yZW1vdmVVc2VyTm9kZUZyb21HcmlkKGRhdGFDb21wKTtcbiAgICAgICAgc2VsZi5fYWRkVXNlck5vZGVUb0dyaWQoZGF0YUNvbXAsIF90ZW1wUm93Q29sKTtcbiAgICB9LFxuXG4gICAgX3JlbW92ZVVzZXJOb2RlRnJvbUdyaWQgKGRhdGFDb21wKSB7XG4gICAgICAgIGxldCByb3cgPSBkYXRhQ29tcC5fcm93O1xuICAgICAgICBsZXQgY29sID0gZGF0YUNvbXAuX2NvbDtcbiAgICAgICAgbGV0IGluZGV4ID0gZGF0YUNvbXAuX2luZGV4O1xuXG4gICAgICAgIGxldCByb3dEYXRhID0gdGhpcy5fdXNlck5vZGVHcmlkW3Jvd107XG4gICAgICAgIGxldCBjb2xEYXRhID0gcm93RGF0YSAmJiByb3dEYXRhW2NvbF07XG4gICAgICAgIGlmIChjb2xEYXRhKSB7XG4gICAgICAgICAgICByb3dEYXRhLmNvdW50IC0tO1xuICAgICAgICAgICAgY29sRGF0YS5jb3VudCAtLTtcbiAgICAgICAgICAgIGNvbERhdGEubGlzdFtpbmRleF0gPSBudWxsO1xuICAgICAgICAgICAgaWYgKGNvbERhdGEuY291bnQgPD0gMCkge1xuICAgICAgICAgICAgICAgIGNvbERhdGEubGlzdC5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgIGNvbERhdGEuY291bnQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZGF0YUNvbXAuX3JvdyA9IC0xO1xuICAgICAgICBkYXRhQ29tcC5fY29sID0gLTE7XG4gICAgICAgIGRhdGFDb21wLl9pbmRleCA9IC0xO1xuICAgICAgICB0aGlzLl91c2VyTm9kZURpcnR5ID0gdHJ1ZTtcbiAgICB9LFxuXG4gICAgX2lzSW5MYXllciAocm93LCBjb2wpIHtcbiAgICAgICAgcmV0dXJuIHJvdyA+PSAwICYmIGNvbCA+PSAwICYmIHJvdyA8PSB0aGlzLl9yaWdodFRvcC5yb3cgJiYgY29sIDw9IHRoaXMuX3JpZ2h0VG9wLmNvbDtcbiAgICB9LFxuXG4gICAgX2FkZFVzZXJOb2RlVG9HcmlkIChkYXRhQ29tcCwgdGVtcFJvd0NvbCkge1xuICAgICAgICBsZXQgcm93ID0gdGVtcFJvd0NvbC5yb3c7XG4gICAgICAgIGxldCBjb2wgPSB0ZW1wUm93Q29sLmNvbDtcbiAgICAgICAgaWYgKHRoaXMuX2lzSW5MYXllcihyb3csIGNvbCkpIHtcbiAgICAgICAgICAgIGxldCByb3dEYXRhID0gdGhpcy5fdXNlck5vZGVHcmlkW3Jvd10gPSB0aGlzLl91c2VyTm9kZUdyaWRbcm93XSB8fCB7Y291bnQgOiAwfTtcbiAgICAgICAgICAgIGxldCBjb2xEYXRhID0gcm93RGF0YVtjb2xdID0gcm93RGF0YVtjb2xdIHx8IHtjb3VudCA6IDAsIGxpc3Q6IFtdfTtcbiAgICAgICAgICAgIGRhdGFDb21wLl9yb3cgPSByb3c7XG4gICAgICAgICAgICBkYXRhQ29tcC5fY29sID0gY29sO1xuICAgICAgICAgICAgZGF0YUNvbXAuX2luZGV4ID0gY29sRGF0YS5saXN0Lmxlbmd0aDtcbiAgICAgICAgICAgIHJvd0RhdGEuY291bnQrKztcbiAgICAgICAgICAgIGNvbERhdGEuY291bnQrKztcbiAgICAgICAgICAgIGNvbERhdGEubGlzdC5wdXNoKGRhdGFDb21wKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGFDb21wLl9yb3cgPSAtMTtcbiAgICAgICAgICAgIGRhdGFDb21wLl9jb2wgPSAtMTtcbiAgICAgICAgICAgIGRhdGFDb21wLl9pbmRleCA9IC0xO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3VzZXJOb2RlRGlydHkgPSB0cnVlO1xuICAgIH0sXG5cbiAgICBfaXNVc2VyTm9kZURpcnR5ICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJOb2RlRGlydHk7XG4gICAgfSxcblxuICAgIF9zZXRVc2VyTm9kZURpcnR5ICh2YWx1ZSkge1xuICAgICAgICB0aGlzLl91c2VyTm9kZURpcnR5ID0gdmFsdWU7XG4gICAgfSxcblxuICAgIG9uRW5hYmxlICgpIHtcbiAgICAgICAgdGhpcy5fc3VwZXIoKTtcbiAgICAgICAgdGhpcy5ub2RlLm9uKGNjLk5vZGUuRXZlbnRUeXBlLkFOQ0hPUl9DSEFOR0VELCB0aGlzLl9zeW5jQW5jaG9yUG9pbnQsIHRoaXMpO1xuICAgICAgICB0aGlzLl9hY3RpdmF0ZU1hdGVyaWFsKCk7XG4gICAgfSxcblxuICAgIG9uRGlzYWJsZSAoKSB7XG4gICAgICAgIHRoaXMuX3N1cGVyKCk7XG4gICAgICAgIHRoaXMubm9kZS5vZmYoY2MuTm9kZS5FdmVudFR5cGUuQU5DSE9SX0NIQU5HRUQsIHRoaXMuX3N5bmNBbmNob3JQb2ludCwgdGhpcyk7XG4gICAgfSxcblxuICAgIF9zeW5jQW5jaG9yUG9pbnQgKCkge1xuICAgICAgICBsZXQgbm9kZSA9IHRoaXMubm9kZTtcbiAgICAgICAgdGhpcy5fbGVmdERvd25Ub0NlbnRlclggPSBub2RlLndpZHRoICogbm9kZS5hbmNob3JYICogbm9kZS5zY2FsZVg7XG4gICAgICAgIHRoaXMuX2xlZnREb3duVG9DZW50ZXJZID0gbm9kZS5oZWlnaHQgKiBub2RlLmFuY2hvclkgKiBub2RlLnNjYWxlWTtcbiAgICAgICAgdGhpcy5fY3VsbGluZ0RpcnR5ID0gdHJ1ZTtcbiAgICB9LFxuXG4gICAgb25EZXN0cm95ICgpIHtcbiAgICAgICAgdGhpcy5fc3VwZXIoKTtcbiAgICAgICAgaWYgKHRoaXMuX2J1ZmZlcikge1xuICAgICAgICAgICAgdGhpcy5fYnVmZmVyLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVuZGVyRGF0YUxpc3QgPSBudWxsO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIEdldHMgdGhlIGxheWVyIG5hbWUuXG4gICAgICogISN6aCDojrflj5blsYLnmoTlkI3np7DjgIJcbiAgICAgKiBAbWV0aG9kIGdldExheWVyTmFtZVxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGxldCBsYXllck5hbWUgPSB0aWxlZExheWVyLmdldExheWVyTmFtZSgpO1xuICAgICAqIGNjLmxvZyhsYXllck5hbWUpO1xuICAgICAqL1xuICAgIGdldExheWVyTmFtZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sYXllck5hbWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gU2V0IHRoZSBsYXllciBuYW1lLlxuICAgICAqICEjemgg6K6+572u5bGC55qE5ZCN56ewXG4gICAgICogQG1ldGhvZCBTZXRMYXllck5hbWVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbGF5ZXJOYW1lXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB0aWxlZExheWVyLnNldExheWVyTmFtZShcIk5ldyBMYXllclwiKTtcbiAgICAgKi9cbiAgICBzZXRMYXllck5hbWUgKGxheWVyTmFtZSkge1xuICAgICAgICB0aGlzLl9sYXllck5hbWUgPSBsYXllck5hbWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gUmV0dXJuIHRoZSB2YWx1ZSBmb3IgdGhlIHNwZWNpZmljIHByb3BlcnR5IG5hbWUuXG4gICAgICogISN6aCDojrflj5bmjIflrprlsZ7mgKflkI3nmoTlgLzjgIJcbiAgICAgKiBAbWV0aG9kIGdldFByb3BlcnR5XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5TmFtZVxuICAgICAqIEByZXR1cm4geyp9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBsZXQgcHJvcGVydHkgPSB0aWxlZExheWVyLmdldFByb3BlcnR5KFwiaW5mb1wiKTtcbiAgICAgKiBjYy5sb2cocHJvcGVydHkpO1xuICAgICAqL1xuICAgIGdldFByb3BlcnR5IChwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3BlcnRpZXNbcHJvcGVydHlOYW1lXTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBSZXR1cm5zIHRoZSBwb3NpdGlvbiBpbiBwaXhlbHMgb2YgYSBnaXZlbiB0aWxlIGNvb3JkaW5hdGUuXG4gICAgICogISN6aCDojrflj5bmjIflrpogdGlsZSDnmoTlg4/ntKDlnZDmoIfjgIJcbiAgICAgKiBAbWV0aG9kIGdldFBvc2l0aW9uQXRcbiAgICAgKiBAcGFyYW0ge1ZlYzJ8TnVtYmVyfSBwb3MgcG9zaXRpb24gb3IgeFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbeV1cbiAgICAgKiBAcmV0dXJuIHtWZWMyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogbGV0IHBvcyA9IHRpbGVkTGF5ZXIuZ2V0UG9zaXRpb25BdChjYy52MigwLCAwKSk7XG4gICAgICogY2MubG9nKFwiUG9zOiBcIiArIHBvcyk7XG4gICAgICogbGV0IHBvcyA9IHRpbGVkTGF5ZXIuZ2V0UG9zaXRpb25BdCgwLCAwKTtcbiAgICAgKiBjYy5sb2coXCJQb3M6IFwiICsgcG9zKTtcbiAgICAgKi9cbiAgICBnZXRQb3NpdGlvbkF0IChwb3MsIHkpIHtcbiAgICAgICAgbGV0IHg7XG4gICAgICAgIGlmICh5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHggPSBNYXRoLmZsb29yKHBvcyk7XG4gICAgICAgICAgICB5ID0gTWF0aC5mbG9vcih5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHggPSBNYXRoLmZsb29yKHBvcy54KTtcbiAgICAgICAgICAgIHkgPSBNYXRoLmZsb29yKHBvcy55KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgbGV0IHJldDtcbiAgICAgICAgc3dpdGNoICh0aGlzLl9sYXllck9yaWVudGF0aW9uKSB7XG4gICAgICAgICAgICBjYXNlIGNjLlRpbGVkTWFwLk9yaWVudGF0aW9uLk9SVEhPOlxuICAgICAgICAgICAgICAgIHJldCA9IHRoaXMuX3Bvc2l0aW9uRm9yT3J0aG9BdCh4LCB5KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgY2MuVGlsZWRNYXAuT3JpZW50YXRpb24uSVNPOlxuICAgICAgICAgICAgICAgIHJldCA9IHRoaXMuX3Bvc2l0aW9uRm9ySXNvQXQoeCwgeSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGNjLlRpbGVkTWFwLk9yaWVudGF0aW9uLkhFWDpcbiAgICAgICAgICAgICAgICByZXQgPSB0aGlzLl9wb3NpdGlvbkZvckhleEF0KHgsIHkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfSxcblxuICAgIF9pc0ludmFsaWRQb3NpdGlvbiAoeCwgeSkge1xuICAgICAgICBpZiAoeCAmJiB0eXBlb2YgeCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGxldCBwb3MgPSB4O1xuICAgICAgICAgICAgeSA9IHBvcy55O1xuICAgICAgICAgICAgeCA9IHBvcy54O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4ID49IHRoaXMuX2xheWVyU2l6ZS53aWR0aCB8fCB5ID49IHRoaXMuX2xheWVyU2l6ZS5oZWlnaHQgfHwgeCA8IDAgfHwgeSA8IDA7XG4gICAgfSxcblxuICAgIF9wb3NpdGlvbkZvcklzb0F0ICh4LCB5KSB7XG4gICAgICAgIHJldHVybiBjYy52MihcbiAgICAgICAgICAgIHRoaXMuX21hcFRpbGVTaXplLndpZHRoIC8gMiAqICggdGhpcy5fbGF5ZXJTaXplLndpZHRoICsgeCAtIHkgLSAxKSxcbiAgICAgICAgICAgIHRoaXMuX21hcFRpbGVTaXplLmhlaWdodCAvIDIgKiAoKCB0aGlzLl9sYXllclNpemUuaGVpZ2h0ICogMiAtIHggLSB5KSAtIDIpXG4gICAgICAgICk7XG4gICAgfSxcblxuICAgIF9wb3NpdGlvbkZvck9ydGhvQXQgKHgsIHkpIHtcbiAgICAgICAgcmV0dXJuIGNjLnYyKFxuICAgICAgICAgICAgeCAqIHRoaXMuX21hcFRpbGVTaXplLndpZHRoLFxuICAgICAgICAgICAgKHRoaXMuX2xheWVyU2l6ZS5oZWlnaHQgLSB5IC0gMSkgKiB0aGlzLl9tYXBUaWxlU2l6ZS5oZWlnaHRcbiAgICAgICAgKTtcbiAgICB9LFxuXG4gICAgX3Bvc2l0aW9uRm9ySGV4QXQgKGNvbCwgcm93KSB7XG4gICAgICAgIGxldCB0aWxlV2lkdGggPSB0aGlzLl9tYXBUaWxlU2l6ZS53aWR0aDtcbiAgICAgICAgbGV0IHRpbGVIZWlnaHQgPSB0aGlzLl9tYXBUaWxlU2l6ZS5oZWlnaHQ7XG4gICAgICAgIGxldCByb3dzID0gdGhpcy5fbGF5ZXJTaXplLmhlaWdodDtcblxuICAgICAgICBsZXQgaW5kZXggPSBNYXRoLmZsb29yKGNvbCkgKyBNYXRoLmZsb29yKHJvdykgKiB0aGlzLl9sYXllclNpemUud2lkdGg7XG4gICAgICAgIGxldCBnaWQgPSB0aGlzLl90aWxlc1tpbmRleF07XG4gICAgICAgIGxldCB0aWxlc2V0ID0gdGhpcy5fdGV4R3JpZHNbZ2lkXS50aWxlc2V0O1xuICAgICAgICBsZXQgb2Zmc2V0ID0gdGlsZXNldC50aWxlT2Zmc2V0O1xuXG4gICAgICAgIGxldCBjZW50ZXJXaWR0aCA9IHRoaXMubm9kZS53aWR0aCAvIDI7XG4gICAgICAgIGxldCBjZW50ZXJIZWlnaHQgPSB0aGlzLm5vZGUuaGVpZ2h0IC8gMjtcbiAgICAgICAgbGV0IG9kZF9ldmVuID0gKHRoaXMuX3N0YWdnZXJJbmRleCA9PT0gY2MuVGlsZWRNYXAuU3RhZ2dlckluZGV4LlNUQUdHRVJJTkRFWF9PREQpID8gMSA6IC0xO1xuICAgICAgICBsZXQgeCA9IDAsIHkgPSAwO1xuICAgICAgICBsZXQgZGlmZlggPSAwO1xuICAgICAgICBsZXQgZGlmZlgxID0gMDtcbiAgICAgICAgbGV0IGRpZmZZID0gMDtcbiAgICAgICAgbGV0IGRpZmZZMSA9IDA7XG4gICAgICAgIHN3aXRjaCAodGhpcy5fc3RhZ2dlckF4aXMpIHtcbiAgICAgICAgICAgIGNhc2UgY2MuVGlsZWRNYXAuU3RhZ2dlckF4aXMuU1RBR0dFUkFYSVNfWTpcbiAgICAgICAgICAgICAgICBkaWZmWCA9IDA7XG4gICAgICAgICAgICAgICAgZGlmZlgxID0gKHRoaXMuX3N0YWdnZXJJbmRleCA9PT0gY2MuVGlsZWRNYXAuU3RhZ2dlckluZGV4LlNUQUdHRVJJTkRFWF9PREQpID8gMCA6IHRpbGVXaWR0aCAvIDI7XG4gICAgICAgICAgICAgICAgaWYgKHJvdyAlIDIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlmZlggPSB0aWxlV2lkdGggLyAyICogb2RkX2V2ZW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHggPSBjb2wgKiB0aWxlV2lkdGggKyBkaWZmWCArIGRpZmZYMSArIG9mZnNldC54IC0gY2VudGVyV2lkdGg7XG4gICAgICAgICAgICAgICAgeSA9IChyb3dzIC0gcm93IC0gMSkgKiAodGlsZUhlaWdodCAtICh0aWxlSGVpZ2h0IC0gdGhpcy5faGV4U2lkZUxlbmd0aCkgLyAyKSAtIG9mZnNldC55IC0gY2VudGVySGVpZ2h0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBjYy5UaWxlZE1hcC5TdGFnZ2VyQXhpcy5TVEFHR0VSQVhJU19YOlxuICAgICAgICAgICAgICAgIGRpZmZZID0gMDtcbiAgICAgICAgICAgICAgICBkaWZmWTEgPSAodGhpcy5fc3RhZ2dlckluZGV4ID09PSBjYy5UaWxlZE1hcC5TdGFnZ2VySW5kZXguU1RBR0dFUklOREVYX09ERCkgPyB0aWxlSGVpZ2h0IC8gMiA6IDA7XG4gICAgICAgICAgICAgICAgaWYgKGNvbCAlIDIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlmZlkgPSB0aWxlSGVpZ2h0IC8gMiAqIC1vZGRfZXZlbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgeCA9IGNvbCAqICh0aWxlV2lkdGggLSAodGlsZVdpZHRoIC0gdGhpcy5faGV4U2lkZUxlbmd0aCkgLyAyKSArIG9mZnNldC54IC0gY2VudGVyV2lkdGg7XG4gICAgICAgICAgICAgICAgeSA9IChyb3dzIC0gcm93IC0gMSkgKiB0aWxlSGVpZ2h0ICsgZGlmZlkgKyBkaWZmWTEgLSBvZmZzZXQueSAtIGNlbnRlckhlaWdodDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2MudjIoeCwgeSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBTZXRzIHRoZSB0aWxlIGdpZCAoZ2lkID0gdGlsZSBnbG9iYWwgaWQpIGF0IGEgZ2l2ZW4gdGlsZSBjb29yZGluYXRlLjxiciAvPlxuICAgICAqIFRoZSBUaWxlIEdJRCBjYW4gYmUgb2J0YWluZWQgYnkgdXNpbmcgdGhlIG1ldGhvZCBcInRpbGVHSURBdFwiIG9yIGJ5IHVzaW5nIHRoZSBUTVggZWRpdG9yIC4gVGlsZXNldCBNZ3IgKzEuPGJyIC8+XG4gICAgICogSWYgYSB0aWxlIGlzIGFscmVhZHkgcGxhY2VkIGF0IHRoYXQgcG9zaXRpb24sIHRoZW4gaXQgd2lsbCBiZSByZW1vdmVkLlxuICAgICAqICEjemhcbiAgICAgKiDorr7nva7nu5nlrprlnZDmoIfnmoQgdGlsZSDnmoQgZ2lkIChnaWQgPSB0aWxlIOWFqOWxgCBpZCnvvIxcbiAgICAgKiB0aWxlIOeahCBHSUQg5Y+v5Lul5L2/55So5pa55rOVIOKAnHRpbGVHSURBdOKAnSDmnaXojrflvpfjgII8YnIgLz5cbiAgICAgKiDlpoLmnpzkuIDkuKogdGlsZSDlt7Lnu4/mlL7lnKjpgqPkuKrkvY3nva7vvIzpgqPkuYjlroPlsIbooqvliKDpmaTjgIJcbiAgICAgKiBAbWV0aG9kIHNldFRpbGVHSURBdFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBnaWRcbiAgICAgKiBAcGFyYW0ge1ZlYzJ8TnVtYmVyfSBwb3NPclggcG9zaXRpb24gb3IgeFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBmbGFnc09yWSBmbGFncyBvciB5XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtmbGFnc11cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHRpbGVkTGF5ZXIuc2V0VGlsZUdJREF0KDEwMDEsIDEwLCAxMCwgMSlcbiAgICAgKi9cbiAgICBzZXRUaWxlR0lEQXQgKGdpZCwgcG9zT3JYLCBmbGFnc09yWSwgZmxhZ3MpIHtcbiAgICAgICAgaWYgKHBvc09yWCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYy5UaWxlZExheWVyLnNldFRpbGVHSURBdCgpOiBwb3Mgc2hvdWxkIGJlIG5vbi1udWxsXCIpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwb3M7XG4gICAgICAgIGlmIChmbGFncyAhPT0gdW5kZWZpbmVkIHx8ICEocG9zT3JYIGluc3RhbmNlb2YgY2MuVmVjMikpIHtcbiAgICAgICAgICAgIC8vIGZvdXIgcGFyYW1ldGVycyBvciBwb3NPclggaXMgbm90IGEgVmVjMiBvYmplY3RcbiAgICAgICAgICAgIHBvcyA9IGNjLnYyKHBvc09yWCwgZmxhZ3NPclkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcG9zID0gcG9zT3JYO1xuICAgICAgICAgICAgZmxhZ3MgPSBmbGFnc09yWTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBvcy54ID0gTWF0aC5mbG9vcihwb3MueCk7XG4gICAgICAgIHBvcy55ID0gTWF0aC5mbG9vcihwb3MueSk7XG4gICAgICAgIGlmICh0aGlzLl9pc0ludmFsaWRQb3NpdGlvbihwb3MpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYy5UaWxlZExheWVyLnNldFRpbGVHSURBdCgpOiBpbnZhbGlkIHBvc2l0aW9uXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fdGlsZXMgfHwgIXRoaXMuX3RpbGVzZXRzIHx8IHRoaXMuX3RpbGVzZXRzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICBjYy5sb2dJRCg3MjM4KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2lkICE9PSAwICYmIGdpZCA8IHRoaXMuX3RpbGVzZXRzWzBdLmZpcnN0R2lkKSB7XG4gICAgICAgICAgICBjYy5sb2dJRCg3MjM5LCBnaWQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZmxhZ3MgPSBmbGFncyB8fCAwO1xuICAgICAgICBsZXQgY3VycmVudEZsYWdzID0gdGhpcy5nZXRUaWxlRmxhZ3NBdChwb3MpO1xuICAgICAgICBsZXQgY3VycmVudEdJRCA9IHRoaXMuZ2V0VGlsZUdJREF0KHBvcyk7XG5cbiAgICAgICAgaWYgKGN1cnJlbnRHSUQgPT09IGdpZCAmJiBjdXJyZW50RmxhZ3MgPT09IGZsYWdzKSByZXR1cm47XG5cbiAgICAgICAgbGV0IGdpZEFuZEZsYWdzID0gKGdpZCB8IGZsYWdzKSA+Pj4gMDtcbiAgICAgICAgdGhpcy5fdXBkYXRlVGlsZUZvckdJRChnaWRBbmRGbGFncywgcG9zKTtcbiAgICB9LFxuXG4gICAgX3VwZGF0ZVRpbGVGb3JHSUQgKGdpZCwgcG9zKSB7XG4gICAgICAgIGlmIChnaWQgIT09IDAgJiYgIXRoaXMuX3RleEdyaWRzW2dpZF0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBpZHggPSAwIHwgKHBvcy54ICsgcG9zLnkgKiB0aGlzLl9sYXllclNpemUud2lkdGgpO1xuICAgICAgICBpZiAoaWR4IDwgdGhpcy5fdGlsZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLl90aWxlc1tpZHhdID0gZ2lkO1xuICAgICAgICAgICAgdGhpcy5fY3VsbGluZ0RpcnR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogUmV0dXJucyB0aGUgdGlsZSBnaWQgYXQgYSBnaXZlbiB0aWxlIGNvb3JkaW5hdGUuIDxiciAvPlxuICAgICAqIGlmIGl0IHJldHVybnMgMCwgaXQgbWVhbnMgdGhhdCB0aGUgdGlsZSBpcyBlbXB0eS4gPGJyIC8+XG4gICAgICogISN6aFxuICAgICAqIOmAmui/h+e7meWumueahCB0aWxlIOWdkOagh+OAgWZsYWdz77yI5Y+v6YCJ77yJ6L+U5ZueIHRpbGUg55qEIEdJRC4gPGJyIC8+XG4gICAgICog5aaC5p6c5a6D6L+U5ZueIDDvvIzliJnooajnpLror6UgdGlsZSDkuLrnqbrjgII8YnIgLz5cbiAgICAgKiBAbWV0aG9kIGdldFRpbGVHSURBdFxuICAgICAqIEBwYXJhbSB7VmVjMnxOdW1iZXJ9IHBvcyBvciB4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFt5XVxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGxldCB0aWxlR2lkID0gdGlsZWRMYXllci5nZXRUaWxlR0lEQXQoMCwgMCk7XG4gICAgICovXG4gICAgZ2V0VGlsZUdJREF0IChwb3MsIHkpIHtcbiAgICAgICAgaWYgKHBvcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYy5UaWxlZExheWVyLmdldFRpbGVHSURBdCgpOiBwb3Mgc2hvdWxkIGJlIG5vbi1udWxsXCIpO1xuICAgICAgICB9XG4gICAgICAgIGxldCB4ID0gcG9zO1xuICAgICAgICBpZiAoeSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB4ID0gcG9zLng7XG4gICAgICAgICAgICB5ID0gcG9zLnk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2lzSW52YWxpZFBvc2l0aW9uKHgsIHkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYy5UaWxlZExheWVyLmdldFRpbGVHSURBdCgpOiBpbnZhbGlkIHBvc2l0aW9uXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fdGlsZXMpIHtcbiAgICAgICAgICAgIGNjLmxvZ0lEKDcyMzcpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaW5kZXggPSBNYXRoLmZsb29yKHgpICsgTWF0aC5mbG9vcih5KSAqIHRoaXMuX2xheWVyU2l6ZS53aWR0aDtcbiAgICAgICAgLy8gQml0cyBvbiB0aGUgZmFyIGVuZCBvZiB0aGUgMzItYml0IGdsb2JhbCB0aWxlIElEIGFyZSB1c2VkIGZvciB0aWxlIGZsYWdzXG4gICAgICAgIGxldCB0aWxlID0gdGhpcy5fdGlsZXNbaW5kZXhdO1xuXG4gICAgICAgIHJldHVybiAodGlsZSAmIGNjLlRpbGVkTWFwLlRpbGVGbGFnLkZMSVBQRURfTUFTSykgPj4+IDA7XG4gICAgfSxcblxuICAgIGdldFRpbGVGbGFnc0F0IChwb3MsIHkpIHtcbiAgICAgICAgaWYgKCFwb3MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRpbGVkTGF5ZXIuZ2V0VGlsZUZsYWdzQXQ6IHBvcyBzaG91bGQgYmUgbm9uLW51bGxcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcG9zID0gY2MudjIocG9zLCB5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faXNJbnZhbGlkUG9zaXRpb24ocG9zKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGlsZWRMYXllci5nZXRUaWxlRmxhZ3NBdDogaW52YWxpZCBwb3NpdGlvblwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX3RpbGVzKSB7XG4gICAgICAgICAgICBjYy5sb2dJRCg3MjQwKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGlkeCA9IE1hdGguZmxvb3IocG9zLngpICsgTWF0aC5mbG9vcihwb3MueSkgKiB0aGlzLl9sYXllclNpemUud2lkdGg7XG4gICAgICAgIC8vIEJpdHMgb24gdGhlIGZhciBlbmQgb2YgdGhlIDMyLWJpdCBnbG9iYWwgdGlsZSBJRCBhcmUgdXNlZCBmb3IgdGlsZSBmbGFnc1xuICAgICAgICBsZXQgdGlsZSA9IHRoaXMuX3RpbGVzW2lkeF07XG5cbiAgICAgICAgcmV0dXJuICh0aWxlICYgY2MuVGlsZWRNYXAuVGlsZUZsYWcuRkxJUFBFRF9BTEwpID4+PiAwO1xuICAgIH0sXG5cbiAgICBfc2V0Q3VsbGluZ0RpcnR5ICh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9jdWxsaW5nRGlydHkgPSB2YWx1ZTtcbiAgICB9LFxuXG4gICAgX2lzQ3VsbGluZ0RpcnR5ICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2N1bGxpbmdEaXJ0eTtcbiAgICB9LFxuXG4gICAgLy8gJ3gsIHknIGlzIHRoZSBwb3NpdGlvbiBvZiB2aWV3UG9ydCwgd2hpY2gncyBhbmNob3IgcG9pbnQgaXMgYXQgdGhlIGNlbnRlciBvZiByZWN0LlxuICAgIC8vICd3aWR0aCwgaGVpZ2h0JyBpcyB0aGUgc2l6ZSBvZiB2aWV3UG9ydC5cbiAgICBfdXBkYXRlVmlld1BvcnQgKHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ZpZXdQb3J0LndpZHRoID09PSB3aWR0aCAmJiBcbiAgICAgICAgICAgIHRoaXMuX3ZpZXdQb3J0LmhlaWdodCA9PT0gaGVpZ2h0ICYmXG4gICAgICAgICAgICB0aGlzLl92aWV3UG9ydC54ID09PSB4ICYmXG4gICAgICAgICAgICB0aGlzLl92aWV3UG9ydC55ID09PSB5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdmlld1BvcnQueCA9IHg7XG4gICAgICAgIHRoaXMuX3ZpZXdQb3J0LnkgPSB5O1xuICAgICAgICB0aGlzLl92aWV3UG9ydC53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLl92aWV3UG9ydC5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAgICAgLy8gaWYgbWFwJ3MgdHlwZSBpcyBpc28sIHJlc2VydmUgYm90dG9tIGxpbmUgaXMgMiB0byBhdm9pZCBzaG93IGVtcHR5IGdyaWQgYmVjYXVzZSBvZiBpc28gZ3JpZCBhcml0aG1ldGljXG4gICAgICAgIGxldCByZXNlcnZlTGluZSA9IDE7XG4gICAgICAgIGlmICh0aGlzLl9sYXllck9yaWVudGF0aW9uID09PSBjYy5UaWxlZE1hcC5PcmllbnRhdGlvbi5JU08pIHtcbiAgICAgICAgICAgIHJlc2VydmVMaW5lID0gMjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB2cHggPSB0aGlzLl92aWV3UG9ydC54IC0gdGhpcy5fb2Zmc2V0LnggKyB0aGlzLl9sZWZ0RG93blRvQ2VudGVyWDtcbiAgICAgICAgbGV0IHZweSA9IHRoaXMuX3ZpZXdQb3J0LnkgLSB0aGlzLl9vZmZzZXQueSArIHRoaXMuX2xlZnREb3duVG9DZW50ZXJZO1xuXG4gICAgICAgIGxldCBsZWZ0RG93blggPSB2cHggLSB0aGlzLl9sZWZ0T2Zmc2V0O1xuICAgICAgICBsZXQgbGVmdERvd25ZID0gdnB5IC0gdGhpcy5fZG93bk9mZnNldDtcbiAgICAgICAgbGV0IHJpZ2h0VG9wWCA9IHZweCArIHdpZHRoICsgdGhpcy5fcmlnaHRPZmZzZXQ7XG4gICAgICAgIGxldCByaWdodFRvcFkgPSB2cHkgKyBoZWlnaHQgKyB0aGlzLl90b3BPZmZzZXQ7XG5cbiAgICAgICAgbGV0IGxlZnREb3duID0gdGhpcy5fY3VsbGluZ1JlY3QubGVmdERvd247XG4gICAgICAgIGxldCByaWdodFRvcCA9IHRoaXMuX2N1bGxpbmdSZWN0LnJpZ2h0VG9wO1xuXG4gICAgICAgIGlmIChsZWZ0RG93blggPCAwKSBsZWZ0RG93blggPSAwO1xuICAgICAgICBpZiAobGVmdERvd25ZIDwgMCkgbGVmdERvd25ZID0gMDtcblxuICAgICAgICAvLyBjYWxjIGxlZnQgZG93blxuICAgICAgICB0aGlzLl9wb3NpdGlvblRvUm93Q29sKGxlZnREb3duWCwgbGVmdERvd25ZLCBfdGVtcFJvd0NvbCk7XG4gICAgICAgIC8vIG1ha2UgcmFuZ2UgbGFyZ2VcbiAgICAgICAgX3RlbXBSb3dDb2wucm93LT1yZXNlcnZlTGluZTtcbiAgICAgICAgX3RlbXBSb3dDb2wuY29sLT1yZXNlcnZlTGluZTtcbiAgICAgICAgLy8gaW5zdXJlIGxlZnQgZG93biByb3cgY29sIGdyZWF0ZXIgdGhhbiAwXG4gICAgICAgIF90ZW1wUm93Q29sLnJvdyA9IF90ZW1wUm93Q29sLnJvdyA+IDAgPyBfdGVtcFJvd0NvbC5yb3cgOiAwO1xuICAgICAgICBfdGVtcFJvd0NvbC5jb2wgPSBfdGVtcFJvd0NvbC5jb2wgPiAwID8gX3RlbXBSb3dDb2wuY29sIDogMDsgICAgICAgIFxuXG4gICAgICAgIGlmIChfdGVtcFJvd0NvbC5yb3cgIT09IGxlZnREb3duLnJvdyB8fCBfdGVtcFJvd0NvbC5jb2wgIT09IGxlZnREb3duLmNvbCkge1xuICAgICAgICAgICAgbGVmdERvd24ucm93ID0gX3RlbXBSb3dDb2wucm93O1xuICAgICAgICAgICAgbGVmdERvd24uY29sID0gX3RlbXBSb3dDb2wuY29sO1xuICAgICAgICAgICAgdGhpcy5fY3VsbGluZ0RpcnR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNob3cgbm90aGluZ1xuICAgICAgICBpZiAocmlnaHRUb3BYIDwgMCB8fCByaWdodFRvcFkgPCAwKSB7XG4gICAgICAgICAgICBfdGVtcFJvd0NvbC5yb3cgPSAtMTtcbiAgICAgICAgICAgIF90ZW1wUm93Q29sLmNvbCA9IC0xO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gY2FsYyByaWdodCB0b3BcbiAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uVG9Sb3dDb2wocmlnaHRUb3BYLCByaWdodFRvcFksIF90ZW1wUm93Q29sKTtcbiAgICAgICAgICAgIC8vIG1ha2UgcmFuZ2UgbGFyZ2VcbiAgICAgICAgICAgIF90ZW1wUm93Q29sLnJvdysrO1xuICAgICAgICAgICAgX3RlbXBSb3dDb2wuY29sKys7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhdm9pZCByYW5nZSBvdXQgb2YgbWF4IHJlY3RcbiAgICAgICAgaWYgKF90ZW1wUm93Q29sLnJvdyA+IHRoaXMuX3JpZ2h0VG9wLnJvdykgX3RlbXBSb3dDb2wucm93ID0gdGhpcy5fcmlnaHRUb3Aucm93O1xuICAgICAgICBpZiAoX3RlbXBSb3dDb2wuY29sID4gdGhpcy5fcmlnaHRUb3AuY29sKSBfdGVtcFJvd0NvbC5jb2wgPSB0aGlzLl9yaWdodFRvcC5jb2w7XG5cbiAgICAgICAgaWYgKF90ZW1wUm93Q29sLnJvdyAhPT0gcmlnaHRUb3Aucm93IHx8IF90ZW1wUm93Q29sLmNvbCAhPT0gcmlnaHRUb3AuY29sKSB7XG4gICAgICAgICAgICByaWdodFRvcC5yb3cgPSBfdGVtcFJvd0NvbC5yb3c7XG4gICAgICAgICAgICByaWdodFRvcC5jb2wgPSBfdGVtcFJvd0NvbC5jb2w7XG4gICAgICAgICAgICB0aGlzLl9jdWxsaW5nRGlydHkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8vIHRoZSByZXN1bHQgbWF5IG5vdCBwcmVjaXNlLCBidXQgaXQgZG9zZSd0IG1hdHRlciwgaXQganVzdCB1c2VzIHRvIGJlIGdvdCByYW5nZVxuICAgIF9wb3NpdGlvblRvUm93Q29sICh4LCB5LCByZXN1bHQpIHtcbiAgICAgICAgY29uc3QgVGlsZWRNYXAgPSBjYy5UaWxlZE1hcDtcbiAgICAgICAgY29uc3QgT3JpZW50YXRpb24gPSBUaWxlZE1hcC5PcmllbnRhdGlvbjtcbiAgICAgICAgY29uc3QgU3RhZ2dlckF4aXMgPSBUaWxlZE1hcC5TdGFnZ2VyQXhpcztcblxuICAgICAgICBsZXQgbWFwdHcgPSB0aGlzLl9tYXBUaWxlU2l6ZS53aWR0aCxcbiAgICAgICAgICAgIG1hcHRoID0gdGhpcy5fbWFwVGlsZVNpemUuaGVpZ2h0LFxuICAgICAgICAgICAgbWFwdHcyID0gbWFwdHcgKiAwLjUsXG4gICAgICAgICAgICBtYXB0aDIgPSBtYXB0aCAqIDAuNTtcbiAgICAgICAgbGV0IHJvdyA9IDAsIGNvbCA9IDAsIGRpZmZYMiA9IDAsIGRpZmZZMiA9IDAsIGF4aXMgPSB0aGlzLl9zdGFnZ2VyQXhpcztcbiAgICAgICAgbGV0IGNvbHMgPSB0aGlzLl9sYXllclNpemUud2lkdGg7XG5cbiAgICAgICAgc3dpdGNoICh0aGlzLl9sYXllck9yaWVudGF0aW9uKSB7XG4gICAgICAgICAgICAvLyBsZWZ0IHRvcCB0byByaWdodCBkb3dtXG4gICAgICAgICAgICBjYXNlIE9yaWVudGF0aW9uLk9SVEhPOlxuICAgICAgICAgICAgICAgIGNvbCA9IE1hdGguZmxvb3IoeCAvIG1hcHR3KTtcbiAgICAgICAgICAgICAgICByb3cgPSBNYXRoLmZsb29yKHkgLyBtYXB0aCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAvLyByaWdodCB0b3AgdG8gbGVmdCBkb3duXG4gICAgICAgICAgICAvLyBpc28gY2FuIGJlIHRyZWF0IGFzIHNwZWNpYWwgaGV4IHdob3NlIGhleCBzaWRlIGxlbmd0aCBpcyAwXG4gICAgICAgICAgICBjYXNlIE9yaWVudGF0aW9uLklTTzpcbiAgICAgICAgICAgICAgICBjb2wgPSBNYXRoLmZsb29yKHggLyBtYXB0dzIpO1xuICAgICAgICAgICAgICAgIHJvdyA9IE1hdGguZmxvb3IoeSAvIG1hcHRoMik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAvLyBsZWZ0IHRvcCB0byByaWdodCBkb3dtXG4gICAgICAgICAgICBjYXNlIE9yaWVudGF0aW9uLkhFWDpcbiAgICAgICAgICAgICAgICBpZiAoYXhpcyA9PT0gU3RhZ2dlckF4aXMuU1RBR0dFUkFYSVNfWSkge1xuICAgICAgICAgICAgICAgICAgICByb3cgPSBNYXRoLmZsb29yKHkgLyAobWFwdGggLSB0aGlzLl9kaWZmWTEpKTtcbiAgICAgICAgICAgICAgICAgICAgZGlmZlgyID0gcm93ICUgMiA9PT0gMSA/IG1hcHR3MiAqIHRoaXMuX29kZF9ldmVuIDogMDtcbiAgICAgICAgICAgICAgICAgICAgY29sID0gTWF0aC5mbG9vcigoeCAtIGRpZmZYMikgLyBtYXB0dyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29sID0gTWF0aC5mbG9vcih4IC8gKG1hcHR3IC0gdGhpcy5fZGlmZlgxKSk7XG4gICAgICAgICAgICAgICAgICAgIGRpZmZZMiA9IGNvbCAlIDIgPT09IDEgPyBtYXB0aDIgKiAtdGhpcy5fb2RkX2V2ZW4gOiAwO1xuICAgICAgICAgICAgICAgICAgICByb3cgPSBNYXRoLmZsb29yKCh5IC0gZGlmZlkyKSAvIG1hcHRoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LnJvdyA9IHJvdztcbiAgICAgICAgcmVzdWx0LmNvbCA9IGNvbDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgX3VwZGF0ZUN1bGxpbmcgKCkge1xuICAgICAgICBpZiAoQ0NfRURJVE9SKSB7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZUN1bGxpbmcoZmFsc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2VuYWJsZUN1bGxpbmcpIHtcbiAgICAgICAgICAgIHRoaXMubm9kZS5fdXBkYXRlV29ybGRNYXRyaXgoKTtcbiAgICAgICAgICAgIG1hdDQuaW52ZXJ0KF9tYXQ0X3RlbXAsIHRoaXMubm9kZS5fd29ybGRNYXRyaXgpO1xuICAgICAgICAgICAgbGV0IHJlY3QgPSBjYy52aXNpYmxlUmVjdDtcbiAgICAgICAgICAgIGxldCBjYW1lcmEgPSBjYy5DYW1lcmEuZmluZENhbWVyYSh0aGlzLm5vZGUpO1xuICAgICAgICAgICAgaWYgKGNhbWVyYSkge1xuICAgICAgICAgICAgICAgIF92ZWMyX3RlbXAueCA9IDA7XG4gICAgICAgICAgICAgICAgX3ZlYzJfdGVtcC55ID0gMDtcbiAgICAgICAgICAgICAgICBfdmVjMl90ZW1wMi54ID0gX3ZlYzJfdGVtcC54ICsgcmVjdC53aWR0aDtcbiAgICAgICAgICAgICAgICBfdmVjMl90ZW1wMi55ID0gX3ZlYzJfdGVtcC55ICsgcmVjdC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgY2FtZXJhLmdldFNjcmVlblRvV29ybGRQb2ludChfdmVjMl90ZW1wLCBfdmVjMl90ZW1wKTtcbiAgICAgICAgICAgICAgICBjYW1lcmEuZ2V0U2NyZWVuVG9Xb3JsZFBvaW50KF92ZWMyX3RlbXAyLCBfdmVjMl90ZW1wMik7XG4gICAgICAgICAgICAgICAgdmVjMi50cmFuc2Zvcm1NYXQ0KF92ZWMyX3RlbXAsIF92ZWMyX3RlbXAsIF9tYXQ0X3RlbXApO1xuICAgICAgICAgICAgICAgIHZlYzIudHJhbnNmb3JtTWF0NChfdmVjMl90ZW1wMiwgX3ZlYzJfdGVtcDIsIF9tYXQ0X3RlbXApO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVZpZXdQb3J0KF92ZWMyX3RlbXAueCwgX3ZlYzJfdGVtcC55LCBfdmVjMl90ZW1wMi54IC0gX3ZlYzJfdGVtcC54LCBfdmVjMl90ZW1wMi55IC0gX3ZlYzJfdGVtcC55KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIExheWVyIG9yaWVudGF0aW9uLCB3aGljaCBpcyB0aGUgc2FtZSBhcyB0aGUgbWFwIG9yaWVudGF0aW9uLlxuICAgICAqICEjemgg6I635Y+WIExheWVyIOaWueWQkSjlkIzlnLDlm77mlrnlkJEp44CCXG4gICAgICogQG1ldGhvZCBnZXRMYXllck9yaWVudGF0aW9uXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogbGV0IG9yaWVudGF0aW9uID0gdGlsZWRMYXllci5nZXRMYXllck9yaWVudGF0aW9uKCk7XG4gICAgICogY2MubG9nKFwiTGF5ZXIgT3JpZW50YXRpb246IFwiICsgb3JpZW50YXRpb24pO1xuICAgICAqL1xuICAgIGdldExheWVyT3JpZW50YXRpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGF5ZXJPcmllbnRhdGlvbjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBwcm9wZXJ0aWVzIGZyb20gdGhlIGxheWVyLiBUaGV5IGNhbiBiZSBhZGRlZCB1c2luZyBUaWxlZC5cbiAgICAgKiAhI3poIOiOt+WPliBsYXllciDnmoTlsZ7mgKfvvIzlj6/ku6Xkvb/nlKggVGlsZWQg57yW6L6R5Zmo5re75Yqg5bGe5oCn44CCXG4gICAgICogQG1ldGhvZCBnZXRQcm9wZXJ0aWVzXG4gICAgICogQHJldHVybiB7QXJyYXl9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBsZXQgcHJvcGVydGllcyA9IHRpbGVkTGF5ZXIuZ2V0UHJvcGVydGllcygpO1xuICAgICAqIGNjLmxvZyhcIlByb3BlcnRpZXM6IFwiICsgcHJvcGVydGllcyk7XG4gICAgICovXG4gICAgZ2V0UHJvcGVydGllcyAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9wZXJ0aWVzO1xuICAgIH0sXG5cbiAgICBfdXBkYXRlVmVydGljZXMgKCkge1xuICAgICAgICBjb25zdCBUaWxlZE1hcCA9IGNjLlRpbGVkTWFwO1xuICAgICAgICBjb25zdCBUaWxlRmxhZyA9IFRpbGVkTWFwLlRpbGVGbGFnO1xuICAgICAgICBjb25zdCBGTElQUEVEX01BU0sgPSBUaWxlRmxhZy5GTElQUEVEX01BU0s7XG4gICAgICAgIGNvbnN0IFN0YWdnZXJBeGlzID0gVGlsZWRNYXAuU3RhZ2dlckF4aXM7XG4gICAgICAgIGNvbnN0IE9yaWVudGF0aW9uID0gVGlsZWRNYXAuT3JpZW50YXRpb247XG5cbiAgICAgICAgbGV0IHZlcnRpY2VzID0gdGhpcy5fdmVydGljZXM7XG4gICAgICAgIHZlcnRpY2VzLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgbGV0IGxheWVyT3JpZW50YXRpb24gPSB0aGlzLl9sYXllck9yaWVudGF0aW9uLFxuICAgICAgICAgICAgdGlsZXMgPSB0aGlzLl90aWxlcztcblxuICAgICAgICBpZiAoIXRpbGVzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmlnaHRUb3AgPSB0aGlzLl9yaWdodFRvcDtcbiAgICAgICAgcmlnaHRUb3Aucm93ID0gLTE7XG4gICAgICAgIHJpZ2h0VG9wLmNvbCA9IC0xO1xuXG4gICAgICAgIGxldCBtYXB0dyA9IHRoaXMuX21hcFRpbGVTaXplLndpZHRoLFxuICAgICAgICAgICAgbWFwdGggPSB0aGlzLl9tYXBUaWxlU2l6ZS5oZWlnaHQsXG4gICAgICAgICAgICBtYXB0dzIgPSBtYXB0dyAqIDAuNSxcbiAgICAgICAgICAgIG1hcHRoMiA9IG1hcHRoICogMC41LFxuICAgICAgICAgICAgcm93cyA9IHRoaXMuX2xheWVyU2l6ZS5oZWlnaHQsXG4gICAgICAgICAgICBjb2xzID0gdGhpcy5fbGF5ZXJTaXplLndpZHRoLFxuICAgICAgICAgICAgZ3JpZHMgPSB0aGlzLl90ZXhHcmlkcztcbiAgICAgICAgXG4gICAgICAgIGxldCBjb2xPZmZzZXQgPSAwLCBnaWQsIGdyaWQsIGxlZnQsIGJvdHRvbSxcbiAgICAgICAgICAgIGF4aXMsIGRpZmZYMSwgZGlmZlkxLCBvZGRfZXZlbiwgZGlmZlgyLCBkaWZmWTI7XG5cbiAgICAgICAgaWYgKGxheWVyT3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLkhFWCkge1xuICAgICAgICAgICAgYXhpcyA9IHRoaXMuX3N0YWdnZXJBeGlzO1xuICAgICAgICAgICAgZGlmZlgxID0gdGhpcy5fZGlmZlgxO1xuICAgICAgICAgICAgZGlmZlkxID0gdGhpcy5fZGlmZlkxO1xuICAgICAgICAgICAgb2RkX2V2ZW4gPSB0aGlzLl9vZGRfZXZlbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjdWxsaW5nQ29sID0gMCwgY3VsbGluZ1JvdyA9IDA7XG4gICAgICAgIGxldCB0aWxlT2Zmc2V0ID0gbnVsbCwgZ3JpZEdJRCA9IDA7XG5cbiAgICAgICAgdGhpcy5fdG9wT2Zmc2V0ID0gMDtcbiAgICAgICAgdGhpcy5fZG93bk9mZnNldCA9IDA7XG4gICAgICAgIHRoaXMuX2xlZnRPZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLl9yaWdodE9mZnNldCA9IDA7XG4gICAgICAgIHRoaXMuX2hhc0FuaUdyaWQgPSBmYWxzZTtcblxuICAgICAgICAvLyBncmlkIGJvcmRlclxuICAgICAgICBsZXQgdG9wQm9yZGVyID0gMCwgZG93bkJvcmRlciA9IDAsIGxlZnRCb3JkZXIgPSAwLCByaWdodEJvcmRlciA9IDA7XG5cbiAgICAgICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgcm93czsgKytyb3cpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IGNvbHM7ICsrY29sKSB7XG4gICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gY29sT2Zmc2V0ICsgY29sO1xuICAgICAgICAgICAgICAgIGdpZCA9IHRpbGVzW2luZGV4XTtcbiAgICAgICAgICAgICAgICBncmlkR0lEID0gKChnaWQgJiBGTElQUEVEX01BU0spID4+PiAwKTtcbiAgICAgICAgICAgICAgICBncmlkID0gZ3JpZHNbZ3JpZEdJRF07XG5cbiAgICAgICAgICAgICAgICAvLyBpZiBoYXMgYW5pbWF0aW9uLCBncmlkIG11c3QgYmUgdXBkYXRlZCBwZXIgZnJhbWVcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYW5pbWF0aW9uc1tncmlkR0lEXSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYXNBbmlHcmlkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIWdyaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChsYXllck9yaWVudGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGxlZnQgdG9wIHRvIHJpZ2h0IGRvd21cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBPcmllbnRhdGlvbi5PUlRITzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1bGxpbmdDb2wgPSBjb2w7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdWxsaW5nUm93ID0gcm93cyAtIHJvdyAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gY3VsbGluZ0NvbCAqIG1hcHR3O1xuICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tID0gY3VsbGluZ1JvdyAqIG1hcHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJpZ2h0IHRvcCB0byBsZWZ0IGRvd25cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBPcmllbnRhdGlvbi5JU086XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBub3QgY29uc2lkZXIgYWJvdXQgY29sLCB0aGVuIGxlZnQgaXMgJ3cvMiAqIChyb3dzIC0gcm93IC0gMSknXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBjb25zaWRlciBhYm91dCBjb2wgdGhlbiBsZWZ0IG11c3QgYWRkICd3LzIgKiBjb2wnXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzbyBsZWZ0IGlzICd3LzIgKiAocm93cyAtIHJvdyAtIDEpICsgdy8yICogY29sJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29tYmluZSBleHByZXNzaW9uIGlzICd3LzIgKiAocm93cyAtIHJvdyArIGNvbCAtMSknXG4gICAgICAgICAgICAgICAgICAgICAgICBjdWxsaW5nQ29sID0gcm93cyArIGNvbCAtIHJvdyAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBub3QgY29uc2lkZXIgYWJvdXQgcm93LCB0aGVuIGJvdHRvbSBpcyAnaC8yICogKGNvbHMgLSBjb2wgLTEpJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgY29uc2lkZXIgYWJvdXQgcm93IHRoZW4gYm90dG9tIG11c3QgYWRkICdoLzIgKiAocm93cyAtIHJvdyAtIDEpJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc28gYm90dG9tIGlzICdoLzIgKiAoY29scyAtIGNvbCAtMSkgKyBoLzIgKiAocm93cyAtIHJvdyAtIDEpJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29tYmluZSBleHByZXNzaW9ubiBpcyAnaC8yICogKHJvd3MgKyBjb2xzIC0gY29sIC0gcm93IC0gMiknXG4gICAgICAgICAgICAgICAgICAgICAgICBjdWxsaW5nUm93ID0gcm93cyArIGNvbHMgLSBjb2wgLSByb3cgLSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCA9IG1hcHR3MiAqIGN1bGxpbmdDb2w7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3R0b20gPSBtYXB0aDIgKiBjdWxsaW5nUm93O1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIC8vIGxlZnQgdG9wIHRvIHJpZ2h0IGRvd21cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBPcmllbnRhdGlvbi5IRVg6XG4gICAgICAgICAgICAgICAgICAgICAgICBkaWZmWDIgPSAoYXhpcyA9PT0gU3RhZ2dlckF4aXMuU1RBR0dFUkFYSVNfWSAmJiByb3cgJSAyID09PSAxKSA/IG1hcHR3MiAqIG9kZF9ldmVuIDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpZmZZMiA9IChheGlzID09PSBTdGFnZ2VyQXhpcy5TVEFHR0VSQVhJU19YICYmIGNvbCAlIDIgPT09IDEpID8gbWFwdGgyICogLW9kZF9ldmVuIDogMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCA9IGNvbCAqIChtYXB0dyAtIGRpZmZYMSkgKyBkaWZmWDI7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3R0b20gPSAocm93cyAtIHJvdyAtIDEpICogKG1hcHRoIC0gZGlmZlkxKSArIGRpZmZZMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1bGxpbmdDb2wgPSBjb2w7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdWxsaW5nUm93ID0gcm93cyAtIHJvdyAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgcm93RGF0YSA9IHZlcnRpY2VzW2N1bGxpbmdSb3ddID0gdmVydGljZXNbY3VsbGluZ1Jvd10gfHwge21pbkNvbDowLCBtYXhDb2w6MH07XG4gICAgICAgICAgICAgICAgbGV0IGNvbERhdGEgPSByb3dEYXRhW2N1bGxpbmdDb2xdID0gcm93RGF0YVtjdWxsaW5nQ29sXSB8fCB7fTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyByZWNvcmQgZWFjaCByb3cgcmFuZ2UsIGl0IHdpbGwgZmFzdGVyIHdoZW4gY3VsbGluZyBncmlkXG4gICAgICAgICAgICAgICAgaWYgKHJvd0RhdGEubWluQ29sID4gY3VsbGluZ0NvbCkge1xuICAgICAgICAgICAgICAgICAgICByb3dEYXRhLm1pbkNvbCA9IGN1bGxpbmdDb2w7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHJvd0RhdGEubWF4Q29sIDwgY3VsbGluZ0NvbCkge1xuICAgICAgICAgICAgICAgICAgICByb3dEYXRhLm1heENvbCA9IGN1bGxpbmdDb2w7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gcmVjb3JkIG1heCByZWN0LCB3aGVuIHZpZXdQb3J0IGlzIGJpZ2dlciB0aGFuIGxheWVyLCBjYW4gbWFrZSBpdCBzbWFsbGVyXG4gICAgICAgICAgICAgICAgaWYgKHJpZ2h0VG9wLnJvdyA8IGN1bGxpbmdSb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHRUb3Aucm93ID0gY3VsbGluZ1JvdztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocmlnaHRUb3AuY29sIDwgY3VsbGluZ0NvbCkge1xuICAgICAgICAgICAgICAgICAgICByaWdodFRvcC5jb2wgPSBjdWxsaW5nQ29sO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIF9vZmZzZXQgaXMgd2hvbGUgbGF5ZXIgb2Zmc2V0XG4gICAgICAgICAgICAgICAgLy8gdGlsZU9mZnNldCBpcyB0aWxlc2V0IG9mZnNldCB3aGljaCBpcyByZWxhdGVkIHRvIGVhY2ggZ3JpZFxuICAgICAgICAgICAgICAgIC8vIHRpbGVPZmZzZXQgY29vcmRpbmF0ZSBzeXN0ZW0ncyB5IGF4aXMgaXMgb3Bwb3NpdGUgd2l0aCBlbmdpbmUncyB5IGF4aXMuXG4gICAgICAgICAgICAgICAgdGlsZU9mZnNldCA9IGdyaWQudGlsZXNldC50aWxlT2Zmc2V0O1xuICAgICAgICAgICAgICAgIGxlZnQgKz0gdGhpcy5fb2Zmc2V0LnggKyB0aWxlT2Zmc2V0Lng7XG4gICAgICAgICAgICAgICAgYm90dG9tICs9IHRoaXMuX29mZnNldC55IC0gdGlsZU9mZnNldC55O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRvcEJvcmRlciA9IC10aWxlT2Zmc2V0LnkgKyBncmlkLnRpbGVzZXQuX3RpbGVTaXplLmhlaWdodCAtIG1hcHRoO1xuICAgICAgICAgICAgICAgIHRvcEJvcmRlciA9IHRvcEJvcmRlciA8IDAgPyAwIDogdG9wQm9yZGVyO1xuICAgICAgICAgICAgICAgIGRvd25Cb3JkZXIgPSB0aWxlT2Zmc2V0LnkgPCAwID8gMCA6IHRpbGVPZmZzZXQueTtcbiAgICAgICAgICAgICAgICBsZWZ0Qm9yZGVyID0gLXRpbGVPZmZzZXQueCA8IDAgPyAwIDogLXRpbGVPZmZzZXQueDtcbiAgICAgICAgICAgICAgICByaWdodEJvcmRlciA9IHRpbGVPZmZzZXQueCArIGdyaWQudGlsZXNldC5fdGlsZVNpemUud2lkdGggLSBtYXB0dztcbiAgICAgICAgICAgICAgICByaWdodEJvcmRlciA9IHJpZ2h0Qm9yZGVyIDwgMCA/IDAgOiByaWdodEJvcmRlcjtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9yaWdodE9mZnNldCA8IGxlZnRCb3JkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmlnaHRPZmZzZXQgPSBsZWZ0Qm9yZGVyO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9sZWZ0T2Zmc2V0IDwgcmlnaHRCb3JkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGVmdE9mZnNldCA9IHJpZ2h0Qm9yZGVyO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl90b3BPZmZzZXQgPCBkb3duQm9yZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RvcE9mZnNldCA9IGRvd25Cb3JkZXI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2Rvd25PZmZzZXQgPCB0b3BCb3JkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZG93bk9mZnNldCA9IHRvcEJvcmRlcjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb2xEYXRhLmxlZnQgPSBsZWZ0O1xuICAgICAgICAgICAgICAgIGNvbERhdGEuYm90dG9tID0gYm90dG9tO1xuICAgICAgICAgICAgICAgIC8vIHRoaXMgaW5kZXggaXMgdGlsZWRtYXAgZ3JpZCBpbmRleFxuICAgICAgICAgICAgICAgIGNvbERhdGEuaW5kZXggPSBpbmRleDsgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb2xPZmZzZXQgKz0gY29scztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl92ZXJ0aWNlc0RpcnR5ID0gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBHZXQgdGhlIFRpbGVkVGlsZSB3aXRoIHRoZSB0aWxlIGNvb3JkaW5hdGUuPGJyLz5cbiAgICAgKiBJZiB0aGVyZSBpcyBubyB0aWxlIGluIHRoZSBzcGVjaWZpZWQgY29vcmRpbmF0ZSBhbmQgZm9yY2VDcmVhdGUgcGFyYW1ldGVyIGlzIHRydWUsIDxici8+XG4gICAgICogdGhlbiB3aWxsIGNyZWF0ZSBhIG5ldyBUaWxlZFRpbGUgYXQgdGhlIGNvb3JkaW5hdGUuXG4gICAgICogVGhlIHJlbmRlcmVyIHdpbGwgcmVuZGVyIHRoZSB0aWxlIHdpdGggdGhlIHJvdGF0aW9uLCBzY2FsZSwgcG9zaXRpb24gYW5kIGNvbG9yIHByb3BlcnR5IG9mIHRoZSBUaWxlZFRpbGUuXG4gICAgICogISN6aFxuICAgICAqIOmAmui/h+aMh+WumueahCB0aWxlIOWdkOagh+iOt+WPluWvueW6lOeahCBUaWxlZFRpbGXjgIIgPGJyLz5cbiAgICAgKiDlpoLmnpzmjIflrprnmoTlnZDmoIfmsqHmnIkgdGlsZe+8jOW5tuS4lOiuvue9ruS6hiBmb3JjZUNyZWF0ZSDpgqPkuYjlsIbkvJrlnKjmjIflrprnmoTlnZDmoIfliJvlu7rkuIDkuKrmlrDnmoQgVGlsZWRUaWxlIOOAgjxici8+XG4gICAgICog5Zyo5riy5p+T6L+Z5LiqIHRpbGUg55qE5pe25YCZ77yM5bCG5Lya5L2/55SoIFRpbGVkVGlsZSDnmoToioLngrnnmoTml4vovazjgIHnvKnmlL7jgIHkvY3np7vjgIHpopzoibLlsZ7mgKfjgII8YnIvPlxuICAgICAqIEBtZXRob2QgZ2V0VGlsZWRUaWxlQXRcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IHhcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IHlcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGZvcmNlQ3JlYXRlXG4gICAgICogQHJldHVybiB7Y2MuVGlsZWRUaWxlfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogbGV0IHRpbGUgPSB0aWxlZExheWVyLmdldFRpbGVkVGlsZUF0KDEwMCwgMTAwLCB0cnVlKTtcbiAgICAgKiBjYy5sb2codGlsZSk7XG4gICAgICovXG4gICAgZ2V0VGlsZWRUaWxlQXQgKHgsIHksIGZvcmNlQ3JlYXRlKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc0ludmFsaWRQb3NpdGlvbih4LCB5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGlsZWRMYXllci5nZXRUaWxlZFRpbGVBdDogaW52YWxpZCBwb3NpdGlvblwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX3RpbGVzKSB7XG4gICAgICAgICAgICBjYy5sb2dJRCg3MjM2KTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGluZGV4ID0gTWF0aC5mbG9vcih4KSArIE1hdGguZmxvb3IoeSkgKiB0aGlzLl9sYXllclNpemUud2lkdGg7XG4gICAgICAgIGxldCB0aWxlID0gdGhpcy5fdGlsZWRUaWxlc1tpbmRleF07XG4gICAgICAgIGlmICghdGlsZSAmJiBmb3JjZUNyZWF0ZSkge1xuICAgICAgICAgICAgbGV0IG5vZGUgPSBuZXcgY2MuTm9kZSgpO1xuICAgICAgICAgICAgdGlsZSA9IG5vZGUuYWRkQ29tcG9uZW50KGNjLlRpbGVkVGlsZSk7XG4gICAgICAgICAgICB0aWxlLl94ID0geDtcbiAgICAgICAgICAgIHRpbGUuX3kgPSB5O1xuICAgICAgICAgICAgdGlsZS5fbGF5ZXIgPSB0aGlzO1xuICAgICAgICAgICAgdGlsZS5fdXBkYXRlSW5mbygpO1xuICAgICAgICAgICAgbm9kZS5wYXJlbnQgPSB0aGlzLm5vZGU7XG4gICAgICAgICAgICByZXR1cm4gdGlsZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGlsZTtcbiAgICB9LFxuXG4gICAgLyoqIFxuICAgICAqICEjZW5cbiAgICAgKiBDaGFuZ2UgdGlsZSB0byBUaWxlZFRpbGUgYXQgdGhlIHNwZWNpZmllZCBjb29yZGluYXRlLlxuICAgICAqICEjemhcbiAgICAgKiDlsIbmjIflrprnmoQgdGlsZSDlnZDmoIfmm7/mjaLkuLrmjIflrprnmoQgVGlsZWRUaWxl44CCXG4gICAgICogQG1ldGhvZCBzZXRUaWxlZFRpbGVBdFxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0geFxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0geVxuICAgICAqIEBwYXJhbSB7Y2MuVGlsZWRUaWxlfSB0aWxlZFRpbGVcbiAgICAgKiBAcmV0dXJuIHtjYy5UaWxlZFRpbGV9XG4gICAgICovXG4gICAgc2V0VGlsZWRUaWxlQXQgKHgsIHksIHRpbGVkVGlsZSkge1xuICAgICAgICBpZiAodGhpcy5faXNJbnZhbGlkUG9zaXRpb24oeCwgeSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRpbGVkTGF5ZXIuc2V0VGlsZWRUaWxlQXQ6IGludmFsaWQgcG9zaXRpb25cIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl90aWxlcykge1xuICAgICAgICAgICAgY2MubG9nSUQoNzIzNik7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBpbmRleCA9IE1hdGguZmxvb3IoeCkgKyBNYXRoLmZsb29yKHkpICogdGhpcy5fbGF5ZXJTaXplLndpZHRoO1xuICAgICAgICB0aGlzLl90aWxlZFRpbGVzW2luZGV4XSA9IHRpbGVkVGlsZTtcbiAgICAgICAgdGhpcy5fY3VsbGluZ0RpcnR5ID0gdHJ1ZTtcblxuICAgICAgICBpZiAodGlsZWRUaWxlKSB7XG4gICAgICAgICAgICB0aGlzLl9oYXNUaWxlZE5vZGVHcmlkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2hhc1RpbGVkTm9kZUdyaWQgPSB0aGlzLl90aWxlZFRpbGVzLnNvbWUoZnVuY3Rpb24gKHRpbGVkTm9kZSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gISF0aWxlZE5vZGU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aWxlZFRpbGU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gUmV0dXJuIHRleHR1cmUuXG4gICAgICogISN6aCDojrflj5bnurnnkIbjgIJcbiAgICAgKiBAbWV0aG9kIGdldFRleHR1cmVcbiAgICAgKiBAcGFyYW0gaW5kZXggVGhlIGluZGV4IG9mIHRleHR1cmVzXG4gICAgICogQHJldHVybiB7VGV4dHVyZTJEfVxuICAgICAqL1xuICAgIGdldFRleHR1cmUgKGluZGV4KSB7XG4gICAgICAgIGluZGV4ID0gaW5kZXggfHwgMDtcbiAgICAgICAgaWYgKHRoaXMuX3RleHR1cmVzICYmIGluZGV4ID49IDAgJiYgdGhpcy5fdGV4dHVyZXMubGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90ZXh0dXJlc1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gUmV0dXJuIHRleHR1cmUuXG4gICAgICogISN6aCDojrflj5bnurnnkIbjgIJcbiAgICAgKiBAbWV0aG9kIGdldFRleHR1cmVzXG4gICAgICogQHJldHVybiB7VGV4dHVyZTJEfVxuICAgICAqL1xuICAgIGdldFRleHR1cmVzICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RleHR1cmVzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFNldCB0aGUgdGV4dHVyZS5cbiAgICAgKiAhI3poIOiuvue9rue6ueeQhuOAglxuICAgICAqIEBtZXRob2Qgc2V0VGV4dHVyZVxuICAgICAqIEBwYXJhbSB7VGV4dHVyZTJEfSB0ZXh0dXJlXG4gICAgICovXG4gICAgc2V0VGV4dHVyZSAodGV4dHVyZSl7XG4gICAgICAgIHRoaXMuc2V0VGV4dHVyZXMoW3RleHR1cmVdKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBTZXQgdGhlIHRleHR1cmUuXG4gICAgICogISN6aCDorr7nva7nurnnkIbjgIJcbiAgICAgKiBAbWV0aG9kIHNldFRleHR1cmVcbiAgICAgKiBAcGFyYW0ge1RleHR1cmUyRH0gdGV4dHVyZXNcbiAgICAgKi9cbiAgICBzZXRUZXh0dXJlcyAodGV4dHVyZXMpIHtcbiAgICAgICAgdGhpcy5fdGV4dHVyZXMgPSB0ZXh0dXJlcztcbiAgICAgICAgdGhpcy5fYWN0aXZhdGVNYXRlcmlhbCgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIEdldHMgbGF5ZXIgc2l6ZS5cbiAgICAgKiAhI3poIOiOt+W+l+WxguWkp+Wwj+OAglxuICAgICAqIEBtZXRob2QgZ2V0TGF5ZXJTaXplXG4gICAgICogQHJldHVybiB7U2l6ZX1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGxldCBzaXplID0gdGlsZWRMYXllci5nZXRMYXllclNpemUoKTtcbiAgICAgKiBjYy5sb2coXCJsYXllciBzaXplOiBcIiArIHNpemUpO1xuICAgICAqL1xuICAgIGdldExheWVyU2l6ZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sYXllclNpemU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gU2l6ZSBvZiB0aGUgbWFwJ3MgdGlsZSAoY291bGQgYmUgZGlmZmVyZW50IGZyb20gdGhlIHRpbGUncyBzaXplKS5cbiAgICAgKiAhI3poIOiOt+WPliB0aWxlIOeahOWkp+WwjyggdGlsZSDnmoTlpKflsI/lj6/og73kvJrmnInmiYDkuI3lkIwp44CCXG4gICAgICogQG1ldGhvZCBnZXRNYXBUaWxlU2l6ZVxuICAgICAqIEByZXR1cm4ge1NpemV9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBsZXQgbWFwVGlsZVNpemUgPSB0aWxlZExheWVyLmdldE1hcFRpbGVTaXplKCk7XG4gICAgICogY2MubG9nKFwiTWFwVGlsZSBzaXplOiBcIiArIG1hcFRpbGVTaXplKTtcbiAgICAgKi9cbiAgICBnZXRNYXBUaWxlU2l6ZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXBUaWxlU2l6ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBHZXRzIFRpbGUgc2V0IGZpcnN0IGluZm9ybWF0aW9uIGZvciB0aGUgbGF5ZXIuXG4gICAgICogISN6aCDojrflj5YgbGF5ZXIg57Si5byV5L2N572u5Li6MOeahCBUaWxlc2V0IOS/oeaBr+OAglxuICAgICAqIEBtZXRob2QgZ2V0VGlsZVNldFxuICAgICAqIEBwYXJhbSBpbmRleCBUaGUgaW5kZXggb2YgdGlsZXNldHNcbiAgICAgKiBAcmV0dXJuIHtUTVhUaWxlc2V0SW5mb31cbiAgICAgKi9cbiAgICBnZXRUaWxlU2V0IChpbmRleCkge1xuICAgICAgICBpbmRleCA9IGluZGV4IHx8IDA7XG4gICAgICAgIGlmICh0aGlzLl90aWxlc2V0cyAmJiBpbmRleCA+PSAwICYmIHRoaXMuX3RpbGVzZXRzLmxlbmd0aCA+IGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdGlsZXNldHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIEdldHMgdGlsZSBzZXQgYWxsIGluZm9ybWF0aW9uIGZvciB0aGUgbGF5ZXIuXG4gICAgICogISN6aCDojrflj5YgbGF5ZXIg5omA5pyJ55qEIFRpbGVzZXQg5L+h5oGv44CCXG4gICAgICogQG1ldGhvZCBnZXRUaWxlU2V0XG4gICAgICogQHJldHVybiB7VE1YVGlsZXNldEluZm99XG4gICAgICovXG4gICAgZ2V0VGlsZVNldHMgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGlsZXNldHM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gU2V0cyB0aWxlIHNldCBpbmZvcm1hdGlvbiBmb3IgdGhlIGxheWVyLlxuICAgICAqICEjemgg6K6+572uIGxheWVyIOeahCB0aWxlc2V0IOS/oeaBr+OAglxuICAgICAqIEBtZXRob2Qgc2V0VGlsZVNldFxuICAgICAqIEBwYXJhbSB7VE1YVGlsZXNldEluZm99IHRpbGVzZXRcbiAgICAgKi9cbiAgICBzZXRUaWxlU2V0ICh0aWxlc2V0KSB7XG4gICAgICAgIHRoaXMuc2V0VGlsZVNldHMoW3RpbGVzZXRdKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBTZXRzIFRpbGUgc2V0IGluZm9ybWF0aW9uIGZvciB0aGUgbGF5ZXIuXG4gICAgICogISN6aCDorr7nva4gbGF5ZXIg55qEIFRpbGVzZXQg5L+h5oGv44CCXG4gICAgICogQG1ldGhvZCBzZXRUaWxlU2V0c1xuICAgICAqIEBwYXJhbSB7VE1YVGlsZXNldEluZm99IHRpbGVzZXRzXG4gICAgICovXG4gICAgc2V0VGlsZVNldHMgKHRpbGVzZXRzKSB7XG4gICAgICAgIHRoaXMuX3RpbGVzZXRzID0gdGlsZXNldHM7XG4gICAgICAgIGxldCB0ZXh0dXJlcyA9IHRoaXMuX3RleHR1cmVzID0gW107XG4gICAgICAgIGxldCB0ZXhHcmlkcyA9IHRoaXMuX3RleEdyaWRzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGlsZXNldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB0aWxlc2V0ID0gdGlsZXNldHNbaV07XG4gICAgICAgICAgICBpZiAodGlsZXNldCkge1xuICAgICAgICAgICAgICAgIHRleHR1cmVzW2ldID0gdGlsZXNldC5zb3VyY2VJbWFnZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNjLlRpbGVkTWFwLmxvYWRBbGxUZXh0dXJlcyAodGV4dHVyZXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gdGlsZXNldHMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRpbGVzZXRJbmZvID0gdGlsZXNldHNbaV07XG4gICAgICAgICAgICAgICAgaWYgKCF0aWxlc2V0SW5mbykgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2MuVGlsZWRNYXAuZmlsbFRleHR1cmVHcmlkcyh0aWxlc2V0SW5mbywgdGV4R3JpZHMsIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fcHJlcGFyZVRvUmVuZGVyKCk7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfSxcblxuICAgIF90cmF2ZXJzZUFsbEdyaWQgKCkge1xuICAgICAgICBsZXQgdGlsZXMgPSB0aGlzLl90aWxlcztcbiAgICAgICAgbGV0IHRleEdyaWRzID0gdGhpcy5fdGV4R3JpZHM7XG4gICAgICAgIGxldCB0aWxlc2V0SW5kZXhBcnIgPSB0aGlzLl90aWxlc2V0SW5kZXhBcnI7XG4gICAgICAgIGxldCB0aWxlc2V0SWR4TWFwID0ge307XG5cbiAgICAgICAgY29uc3QgVGlsZWRNYXAgPSBjYy5UaWxlZE1hcDtcbiAgICAgICAgY29uc3QgVGlsZUZsYWcgPSBUaWxlZE1hcC5UaWxlRmxhZztcbiAgICAgICAgY29uc3QgRkxJUFBFRF9NQVNLID0gVGlsZUZsYWcuRkxJUFBFRF9NQVNLO1xuXG4gICAgICAgIHRpbGVzZXRJbmRleEFyci5sZW5ndGggPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRpbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgZ2lkID0gdGlsZXNbaV07XG4gICAgICAgICAgICBpZiAoZ2lkID09PSAwKSBjb250aW51ZTtcbiAgICAgICAgICAgIGdpZCA9ICgoZ2lkICYgRkxJUFBFRF9NQVNLKSA+Pj4gMCk7XG4gICAgICAgICAgICBsZXQgZ3JpZCA9IHRleEdyaWRzW2dpZF07XG4gICAgICAgICAgICBpZiAoIWdyaWQpIHtcbiAgICAgICAgICAgICAgICBjYy5lcnJvcihcIkNDVGlsZWRMYXllcjpfdHJhdmVyc2VBbGxHcmlkIGdyaWQgaXMgbnVsbCwgZ2lkIGlzOlwiLCBnaWQpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHRpbGVzZXRJZHggPSBncmlkLnRleElkO1xuICAgICAgICAgICAgaWYgKHRpbGVzZXRJZHhNYXBbdGlsZXNldElkeF0pIGNvbnRpbnVlO1xuICAgICAgICAgICAgdGlsZXNldElkeE1hcFt0aWxlc2V0SWR4XSA9IHRydWU7XG4gICAgICAgICAgICB0aWxlc2V0SW5kZXhBcnIucHVzaCh0aWxlc2V0SWR4KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfaW5pdCAobGF5ZXJJbmZvLCBtYXBJbmZvLCB0aWxlc2V0cywgdGV4dHVyZXMsIHRleEdyaWRzKSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLl9jdWxsaW5nRGlydHkgPSB0cnVlO1xuICAgICAgICB0aGlzLl9sYXllckluZm8gPSBsYXllckluZm87XG4gICAgICAgIHRoaXMuX21hcEluZm8gPSBtYXBJbmZvO1xuXG4gICAgICAgIGxldCBzaXplID0gbGF5ZXJJbmZvLl9sYXllclNpemU7XG5cbiAgICAgICAgLy8gbGF5ZXJJbmZvXG4gICAgICAgIHRoaXMuX2xheWVyTmFtZSA9IGxheWVySW5mby5uYW1lO1xuICAgICAgICB0aGlzLl90aWxlcyA9IGxheWVySW5mby5fdGlsZXM7XG4gICAgICAgIHRoaXMuX3Byb3BlcnRpZXMgPSBsYXllckluZm8ucHJvcGVydGllcztcbiAgICAgICAgdGhpcy5fbGF5ZXJTaXplID0gc2l6ZTtcbiAgICAgICAgdGhpcy5fbWluR0lEID0gbGF5ZXJJbmZvLl9taW5HSUQ7XG4gICAgICAgIHRoaXMuX21heEdJRCA9IGxheWVySW5mby5fbWF4R0lEO1xuICAgICAgICB0aGlzLl9vcGFjaXR5ID0gbGF5ZXJJbmZvLl9vcGFjaXR5O1xuICAgICAgICB0aGlzLl9yZW5kZXJPcmRlciA9IG1hcEluZm8ucmVuZGVyT3JkZXI7XG4gICAgICAgIHRoaXMuX3N0YWdnZXJBeGlzID0gbWFwSW5mby5nZXRTdGFnZ2VyQXhpcygpO1xuICAgICAgICB0aGlzLl9zdGFnZ2VySW5kZXggPSBtYXBJbmZvLmdldFN0YWdnZXJJbmRleCgpO1xuICAgICAgICB0aGlzLl9oZXhTaWRlTGVuZ3RoID0gbWFwSW5mby5nZXRIZXhTaWRlTGVuZ3RoKCk7XG4gICAgICAgIHRoaXMuX2FuaW1hdGlvbnMgPSBtYXBJbmZvLmdldFRpbGVBbmltYXRpb25zKCk7XG5cbiAgICAgICAgLy8gdGlsZXNldHNcbiAgICAgICAgdGhpcy5fdGlsZXNldHMgPSB0aWxlc2V0cztcbiAgICAgICAgLy8gdGV4dHVyZXNcbiAgICAgICAgdGhpcy5fdGV4dHVyZXMgPSB0ZXh0dXJlcztcbiAgICAgICAgLy8gZ3JpZCB0ZXh0dXJlXG4gICAgICAgIHRoaXMuX3RleEdyaWRzID0gdGV4R3JpZHM7XG5cbiAgICAgICAgLy8gbWFwSW5mb1xuICAgICAgICB0aGlzLl9sYXllck9yaWVudGF0aW9uID0gbWFwSW5mby5vcmllbnRhdGlvbjtcbiAgICAgICAgdGhpcy5fbWFwVGlsZVNpemUgPSBtYXBJbmZvLmdldFRpbGVTaXplKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuX2xheWVyT3JpZW50YXRpb24gPT09IGNjLlRpbGVkTWFwLk9yaWVudGF0aW9uLkhFWCkge1xuICAgICAgICAgICAgLy8gaGFuZGxlIGhleCBtYXBcbiAgICAgICAgICAgIGNvbnN0IFRpbGVkTWFwID0gY2MuVGlsZWRNYXA7XG4gICAgICAgICAgICBjb25zdCBTdGFnZ2VyQXhpcyA9IFRpbGVkTWFwLlN0YWdnZXJBeGlzO1xuICAgICAgICAgICAgY29uc3QgU3RhZ2dlckluZGV4ID0gVGlsZWRNYXAuU3RhZ2dlckluZGV4O1xuXG4gICAgICAgICAgICBsZXQgbWFwdHcgPSB0aGlzLl9tYXBUaWxlU2l6ZS53aWR0aDtcbiAgICAgICAgICAgIGxldCBtYXB0aCA9IHRoaXMuX21hcFRpbGVTaXplLmhlaWdodDtcbiAgICAgICAgICAgIGxldCB3aWR0aCA9IDAsIGhlaWdodCA9IDA7XG5cbiAgICAgICAgICAgIHRoaXMuX29kZF9ldmVuID0gKHRoaXMuX3N0YWdnZXJJbmRleCA9PT0gU3RhZ2dlckluZGV4LlNUQUdHRVJJTkRFWF9PREQpID8gMSA6IC0xO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fc3RhZ2dlckF4aXMgPT09IFN0YWdnZXJBeGlzLlNUQUdHRVJBWElTX1gpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kaWZmWDEgPSAobWFwdHcgLSB0aGlzLl9oZXhTaWRlTGVuZ3RoKSAvIDI7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGlmZlkxID0gMDtcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBtYXB0aCAqICh0aGlzLl9sYXllclNpemUuaGVpZ2h0ICsgMC41KTtcbiAgICAgICAgICAgICAgICB3aWR0aCA9IChtYXB0dyArIHRoaXMuX2hleFNpZGVMZW5ndGgpICogTWF0aC5mbG9vcih0aGlzLl9sYXllclNpemUud2lkdGggLyAyKSArIG1hcHR3ICogKHRoaXMuX2xheWVyU2l6ZS53aWR0aCAlIDIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kaWZmWDEgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuX2RpZmZZMSA9IChtYXB0aCAtIHRoaXMuX2hleFNpZGVMZW5ndGgpIC8gMjtcbiAgICAgICAgICAgICAgICB3aWR0aCA9IG1hcHR3ICogKHRoaXMuX2xheWVyU2l6ZS53aWR0aCArIDAuNSk7XG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gKG1hcHRoICsgdGhpcy5faGV4U2lkZUxlbmd0aCkgKiBNYXRoLmZsb29yKHRoaXMuX2xheWVyU2l6ZS5oZWlnaHQgLyAyKSArIG1hcHRoICogKHRoaXMuX2xheWVyU2l6ZS5oZWlnaHQgJSAyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubm9kZS5zZXRDb250ZW50U2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubm9kZS5zZXRDb250ZW50U2l6ZSh0aGlzLl9sYXllclNpemUud2lkdGggKiB0aGlzLl9tYXBUaWxlU2l6ZS53aWR0aCxcbiAgICAgICAgICAgICAgICB0aGlzLl9sYXllclNpemUuaGVpZ2h0ICogdGhpcy5fbWFwVGlsZVNpemUuaGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG9mZnNldCAoYWZ0ZXIgbGF5ZXIgb3JpZW50YXRpb24gaXMgc2V0KTtcbiAgICAgICAgdGhpcy5fb2Zmc2V0ID0gY2MudjIobGF5ZXJJbmZvLm9mZnNldC54LCAtbGF5ZXJJbmZvLm9mZnNldC55KTtcbiAgICAgICAgdGhpcy5fdXNlQXV0b21hdGljVmVydGV4WiA9IGZhbHNlO1xuICAgICAgICB0aGlzLl92ZXJ0ZXhadmFsdWUgPSAwO1xuICAgICAgICB0aGlzLl9zeW5jQW5jaG9yUG9pbnQoKTtcbiAgICAgICAgdGhpcy5fcHJlcGFyZVRvUmVuZGVyKCk7XG4gICAgfSxcblxuICAgIF9wcmVwYXJlVG9SZW5kZXIgKCkge1xuICAgICAgICB0aGlzLl91cGRhdGVWZXJ0aWNlcygpO1xuICAgICAgICB0aGlzLl90cmF2ZXJzZUFsbEdyaWQoKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlQWxsVXNlck5vZGUoKTtcbiAgICAgICAgdGhpcy5fYWN0aXZhdGVNYXRlcmlhbCgpO1xuICAgIH0sXG5cbiAgICBfYWN0aXZhdGVNYXRlcmlhbCAoKSB7XG4gICAgICAgIGxldCB0aWxlc2V0SW5kZXhBcnIgPSB0aGlzLl90aWxlc2V0SW5kZXhBcnI7XG4gICAgICAgIGlmICh0aWxlc2V0SW5kZXhBcnIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmRpc2FibGVSZW5kZXIoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB0ZXhJZE1hdElkeCA9IHRoaXMuX3RleElkVG9NYXRJbmRleCA9IHt9O1xuICAgICAgICBsZXQgdGV4dHVyZXMgPSB0aGlzLl90ZXh0dXJlcztcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRpbGVzZXRJbmRleEFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHRpbGVzZXRJZHggPSB0aWxlc2V0SW5kZXhBcnJbaV07XG4gICAgICAgICAgICBsZXQgdGV4dHVyZSA9IHRleHR1cmVzW3RpbGVzZXRJZHhdO1xuXG4gICAgICAgICAgICBsZXQgbWF0ZXJpYWwgPSB0aGlzLnNoYXJlZE1hdGVyaWFsc1tpXTtcbiAgICAgICAgICAgIGlmICghbWF0ZXJpYWwpIHtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbCA9IE1hdGVyaWFsLmdldEluc3RhbnRpYXRlZEJ1aWx0aW5NYXRlcmlhbCgnMmQtc3ByaXRlJywgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbCA9IE1hdGVyaWFsLmdldEluc3RhbnRpYXRlZE1hdGVyaWFsKG1hdGVyaWFsLCB0aGlzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWF0ZXJpYWwuZGVmaW5lKCdVU0VfVEVYVFVSRScsIHRydWUpO1xuICAgICAgICAgICAgbWF0ZXJpYWwuZGVmaW5lKCdDQ19VU0VfTU9ERUwnLCB0cnVlKTtcbiAgICAgICAgICAgIG1hdGVyaWFsLnNldFByb3BlcnR5KCd0ZXh0dXJlJywgdGV4dHVyZSk7XG4gICAgICAgICAgICB0aGlzLnNldE1hdGVyaWFsKGksIG1hdGVyaWFsKTtcbiAgICAgICAgICAgIHRleElkTWF0SWR4W3RpbGVzZXRJZHhdID0gaTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubWFya0ZvclVwZGF0ZVJlbmRlckRhdGEodHJ1ZSk7XG4gICAgICAgIHRoaXMubWFya0ZvclJlbmRlcih0cnVlKTtcbiAgICB9LFxufSk7XG5cbmNjLlRpbGVkTGF5ZXIgPSBtb2R1bGUuZXhwb3J0cyA9IFRpbGVkTGF5ZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF92bWF0aCA9IHJlcXVpcmUoJy4uL2NvcmUvdm1hdGgnKTtcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxNiBDaHVrb25nIFRlY2hub2xvZ2llcyBJbmMuXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXG4gIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxuICBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcbiAgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXG5cbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xudmFyIFJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uL2NvcmUvY29tcG9uZW50cy9DQ1JlbmRlckNvbXBvbmVudCcpO1xudmFyIE1hdGVyaWFsID0gcmVxdWlyZSgnLi4vY29yZS9hc3NldHMvbWF0ZXJpYWwvQ0NNYXRlcmlhbCcpO1xudmFyIFJlbmRlckZsb3cgPSByZXF1aXJlKCcuLi9jb3JlL3JlbmRlcmVyL3JlbmRlci1mbG93Jyk7XG5cbnZhciBfbWF0NF90ZW1wID0gX3ZtYXRoLm1hdDQuY3JlYXRlKCk7XG52YXIgX3ZlYzJfdGVtcCA9IF92bWF0aC52ZWMyLmNyZWF0ZSgpO1xudmFyIF92ZWMyX3RlbXAyID0gX3ZtYXRoLnZlYzIuY3JlYXRlKCk7XG52YXIgX3RlbXBSb3dDb2wgPSB7IHJvdzogMCwgY29sOiAwIH07XG5cbnZhciBUaWxlZFVzZXJOb2RlRGF0YSA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuVGlsZWRVc2VyTm9kZURhdGEnLFxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcblxuICAgIGN0b3I6IGZ1bmN0aW9uIGN0b3IoKSB7XG4gICAgICAgIHRoaXMuX2luZGV4ID0gLTE7XG4gICAgICAgIHRoaXMuX3JvdyA9IC0xO1xuICAgICAgICB0aGlzLl9jb2wgPSAtMTtcbiAgICAgICAgdGhpcy5fdGlsZWRMYXllciA9IG51bGw7XG4gICAgfVxufSk7XG5cbi8qKlxuICogISNlbiBSZW5kZXIgdGhlIFRNWCBsYXllci5cbiAqICEjemgg5riy5p+TIFRNWCBsYXllcuOAglxuICogQGNsYXNzIFRpbGVkTGF5ZXJcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG52YXIgVGlsZWRMYXllciA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuVGlsZWRMYXllcicsXG5cbiAgICAvLyBJbmhlcml0cyBmcm9tIHRoZSBhYnN0cmFjdCBjbGFzcyBkaXJlY3RseSxcbiAgICAvLyBiZWNhdXNlIFRpbGVkTGF5ZXIgbm90IGNyZWF0ZSBvciBtYWludGFpbnMgdGhlIHNnTm9kZSBieSBpdHNlbGYuXG4gICAgZXh0ZW5kczogUmVuZGVyQ29tcG9uZW50LFxuXG4gICAgZWRpdG9yOiB7XG4gICAgICAgIGluc3BlY3RvcjogJ3BhY2thZ2VzOi8vaW5zcGVjdG9yL2luc3BlY3RvcnMvY29tcHMvdGlsZWQtbGF5ZXIuanMnXG4gICAgfSxcblxuICAgIGN0b3I6IGZ1bmN0aW9uIGN0b3IoKSB7XG4gICAgICAgIHRoaXMuX3VzZXJOb2RlR3JpZCA9IHt9OyAvLyBbcm93XVtjb2xdID0ge2NvdW50OiAwLCBub2Rlc0xpc3Q6IFtdfTtcbiAgICAgICAgdGhpcy5fdXNlck5vZGVNYXAgPSB7fTsgLy8gW2lkXSA9IG5vZGU7XG4gICAgICAgIHRoaXMuX3VzZXJOb2RlRGlydHkgPSBmYWxzZTtcblxuICAgICAgICAvLyBzdG9yZSB0aGUgbGF5ZXIgdGlsZXMgbm9kZSwgaW5kZXggaXMgY2FjdWxhdGVkIGJ5ICd4ICsgd2lkdGggKiB5JywgZm9ybWF0IGxpa2VzICdbMF09dGlsZU5vZGUwLFsxXT10aWxlTm9kZTEsIC4uLidcbiAgICAgICAgdGhpcy5fdGlsZWRUaWxlcyA9IFtdO1xuXG4gICAgICAgIC8vIHN0b3JlIHRoZSBsYXllciB0aWxlc2V0cyBpbmRleCBhcnJheVxuICAgICAgICB0aGlzLl90aWxlc2V0SW5kZXhBcnIgPSBbXTtcbiAgICAgICAgLy8gdGV4dHVyZSBpZCB0byBtYXRlcmlhbCBpbmRleFxuICAgICAgICB0aGlzLl90ZXhJZFRvTWF0SW5kZXggPSB7fTtcblxuICAgICAgICB0aGlzLl92aWV3UG9ydCA9IHsgeDogLTEsIHk6IC0xLCB3aWR0aDogLTEsIGhlaWdodDogLTEgfTtcbiAgICAgICAgdGhpcy5fY3VsbGluZ1JlY3QgPSB7XG4gICAgICAgICAgICBsZWZ0RG93bjogeyByb3c6IC0xLCBjb2w6IC0xIH0sXG4gICAgICAgICAgICByaWdodFRvcDogeyByb3c6IC0xLCBjb2w6IC0xIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fY3VsbGluZ0RpcnR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcmlnaHRUb3AgPSB7IHJvdzogLTEsIGNvbDogLTEgfTtcblxuICAgICAgICB0aGlzLl9sYXllckluZm8gPSBudWxsO1xuICAgICAgICB0aGlzLl9tYXBJbmZvID0gbnVsbDtcblxuICAgICAgICAvLyByZWNvcmQgbWF4IG9yIG1pbiB0aWxlIHRleHR1cmUgb2Zmc2V0LCBcbiAgICAgICAgLy8gaXQgd2lsbCBtYWtlIGN1bGxpbmcgcmVjdCBtb3JlIGxhcmdlLCB3aGljaCBpbnN1cmUgY3VsbGluZyByZWN0IGNvcnJlY3QuXG4gICAgICAgIHRoaXMuX3RvcE9mZnNldCA9IDA7XG4gICAgICAgIHRoaXMuX2Rvd25PZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLl9sZWZ0T2Zmc2V0ID0gMDtcbiAgICAgICAgdGhpcy5fcmlnaHRPZmZzZXQgPSAwO1xuXG4gICAgICAgIC8vIHN0b3JlIHRoZSBsYXllciB0aWxlcywgaW5kZXggaXMgY2FjdWxhdGVkIGJ5ICd4ICsgd2lkdGggKiB5JywgZm9ybWF0IGxpa2VzICdbMF09Z2lkMCxbMV09Z2lkMSwgLi4uJ1xuICAgICAgICB0aGlzLl90aWxlcyA9IFtdO1xuICAgICAgICAvLyB2ZXJ0ZXggYXJyYXlcbiAgICAgICAgdGhpcy5fdmVydGljZXMgPSBbXTtcbiAgICAgICAgLy8gdmVydGljZXMgZGlydHlcbiAgICAgICAgdGhpcy5fdmVydGljZXNEaXJ0eSA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5fbGF5ZXJOYW1lID0gJyc7XG4gICAgICAgIHRoaXMuX2xheWVyT3JpZW50YXRpb24gPSBudWxsO1xuXG4gICAgICAgIC8vIHN0b3JlIGFsbCBsYXllciBnaWQgY29ycmVzcG9uZGluZyB0ZXh0dXJlIGluZm8sIGluZGV4IGlzIGdpZCwgZm9ybWF0IGxpa2VzICdbZ2lkMF09dGV4LWluZm8sW2dpZDFdPXRleC1pbmZvLCAuLi4nXG4gICAgICAgIHRoaXMuX3RleEdyaWRzID0gbnVsbDtcbiAgICAgICAgLy8gc3RvcmUgYWxsIHRpbGVzZXQgdGV4dHVyZSwgaW5kZXggaXMgdGlsZXNldCBpbmRleCwgZm9ybWF0IGxpa2VzICdbMF09dGV4dHVyZTAsIFsxXT10ZXh0dXJlMSwgLi4uJ1xuICAgICAgICB0aGlzLl90ZXh0dXJlcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3RpbGVzZXRzID0gbnVsbDtcblxuICAgICAgICB0aGlzLl9sZWZ0RG93blRvQ2VudGVyWCA9IDA7XG4gICAgICAgIHRoaXMuX2xlZnREb3duVG9DZW50ZXJZID0gMDtcblxuICAgICAgICB0aGlzLl9oYXNUaWxlZE5vZGVHcmlkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2hhc0FuaUdyaWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fYW5pbWF0aW9ucyA9IG51bGw7XG5cbiAgICAgICAgLy8gc3dpdGNoIG9mIGN1bGxpbmdcbiAgICAgICAgdGhpcy5fZW5hYmxlQ3VsbGluZyA9IGNjLm1hY3JvLkVOQUJMRV9USUxFRE1BUF9DVUxMSU5HO1xuICAgIH0sXG4gICAgX2hhc1RpbGVkTm9kZTogZnVuY3Rpb24gX2hhc1RpbGVkTm9kZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhc1RpbGVkTm9kZUdyaWQ7XG4gICAgfSxcbiAgICBfaGFzQW5pbWF0aW9uOiBmdW5jdGlvbiBfaGFzQW5pbWF0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faGFzQW5pR3JpZDtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIGVuYWJsZSBvciBkaXNhYmxlIGN1bGxpbmdcbiAgICAgKiAhI3poIOW8gOWQr+aIluWFs+mXreijgeWJquOAglxuICAgICAqIEBtZXRob2QgZW5hYmxlQ3VsbGluZ1xuICAgICAqIEBwYXJhbSB2YWx1ZVxuICAgICAqL1xuICAgIGVuYWJsZUN1bGxpbmc6IGZ1bmN0aW9uIGVuYWJsZUN1bGxpbmcodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX2VuYWJsZUN1bGxpbmcgIT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX2VuYWJsZUN1bGxpbmcgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX2N1bGxpbmdEaXJ0eSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIEFkZHMgdXNlcidzIG5vZGUgaW50byBsYXllci5cbiAgICAgKiAhI3poIOa3u+WKoOeUqOaIt+iKgueCueOAglxuICAgICAqIEBtZXRob2QgYWRkVXNlck5vZGVcbiAgICAgKiBAcGFyYW0ge2NjLk5vZGV9IG5vZGVcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGFkZFVzZXJOb2RlOiBmdW5jdGlvbiBhZGRVc2VyTm9kZShub2RlKSB7XG4gICAgICAgIHZhciBkYXRhQ29tcCA9IG5vZGUuZ2V0Q29tcG9uZW50KFRpbGVkVXNlck5vZGVEYXRhKTtcbiAgICAgICAgaWYgKGRhdGFDb21wKSB7XG4gICAgICAgICAgICBjYy53YXJuKFwiQ0NUaWxlZExheWVyOmFkZFVzZXJOb2RlIG5vZGUgaGFzIGJlZW4gYWRkZWRcIik7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBkYXRhQ29tcCA9IG5vZGUuYWRkQ29tcG9uZW50KFRpbGVkVXNlck5vZGVEYXRhKTtcbiAgICAgICAgbm9kZS5wYXJlbnQgPSB0aGlzLm5vZGU7XG4gICAgICAgIG5vZGUuX3JlbmRlckZsYWcgfD0gUmVuZGVyRmxvdy5GTEFHX0JSRUFLX0ZMT1c7XG4gICAgICAgIHRoaXMuX3VzZXJOb2RlTWFwW25vZGUuX2lkXSA9IGRhdGFDb21wO1xuXG4gICAgICAgIGRhdGFDb21wLl9yb3cgPSAtMTtcbiAgICAgICAgZGF0YUNvbXAuX2NvbCA9IC0xO1xuICAgICAgICBkYXRhQ29tcC5fdGlsZWRMYXllciA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5fbm9kZUxvY2FsUG9zVG9MYXllclBvcyhub2RlLCBfdmVjMl90ZW1wKTtcbiAgICAgICAgdGhpcy5fcG9zaXRpb25Ub1Jvd0NvbChfdmVjMl90ZW1wLngsIF92ZWMyX3RlbXAueSwgX3RlbXBSb3dDb2wpO1xuICAgICAgICB0aGlzLl9hZGRVc2VyTm9kZVRvR3JpZChkYXRhQ29tcCwgX3RlbXBSb3dDb2wpO1xuICAgICAgICB0aGlzLl91cGRhdGVDdWxsaW5nT2Zmc2V0QnlVc2VyTm9kZShub2RlKTtcbiAgICAgICAgbm9kZS5vbihjYy5Ob2RlLkV2ZW50VHlwZS5QT1NJVElPTl9DSEFOR0VELCB0aGlzLl91c2VyTm9kZVBvc0NoYW5nZSwgZGF0YUNvbXApO1xuICAgICAgICBub2RlLm9uKGNjLk5vZGUuRXZlbnRUeXBlLlNJWkVfQ0hBTkdFRCwgdGhpcy5fdXNlck5vZGVTaXplQ2hhbmdlLCBkYXRhQ29tcCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqICEjZW4gUmVtb3ZlcyB1c2VyJ3Mgbm9kZS5cbiAgICAgKiAhI3poIOenu+mZpOeUqOaIt+iKgueCueOAglxuICAgICAqIEBtZXRob2QgcmVtb3ZlVXNlck5vZGVcbiAgICAgKiBAcGFyYW0ge2NjLk5vZGV9IG5vZGVcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIHJlbW92ZVVzZXJOb2RlOiBmdW5jdGlvbiByZW1vdmVVc2VyTm9kZShub2RlKSB7XG4gICAgICAgIHZhciBkYXRhQ29tcCA9IG5vZGUuZ2V0Q29tcG9uZW50KFRpbGVkVXNlck5vZGVEYXRhKTtcbiAgICAgICAgaWYgKCFkYXRhQ29tcCkge1xuICAgICAgICAgICAgY2Mud2FybihcIkNDVGlsZWRMYXllcjpyZW1vdmVVc2VyTm9kZSBub2RlIGlzIG5vdCBleGlzdFwiKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBub2RlLm9mZihjYy5Ob2RlLkV2ZW50VHlwZS5QT1NJVElPTl9DSEFOR0VELCB0aGlzLl91c2VyTm9kZVBvc0NoYW5nZSwgZGF0YUNvbXApO1xuICAgICAgICBub2RlLm9mZihjYy5Ob2RlLkV2ZW50VHlwZS5TSVpFX0NIQU5HRUQsIHRoaXMuX3VzZXJOb2RlU2l6ZUNoYW5nZSwgZGF0YUNvbXApO1xuICAgICAgICB0aGlzLl9yZW1vdmVVc2VyTm9kZUZyb21HcmlkKGRhdGFDb21wKTtcbiAgICAgICAgZGVsZXRlIHRoaXMuX3VzZXJOb2RlTWFwW25vZGUuX2lkXTtcbiAgICAgICAgbm9kZS5fcmVtb3ZlQ29tcG9uZW50KGRhdGFDb21wKTtcbiAgICAgICAgZGF0YUNvbXAuZGVzdHJveSgpO1xuICAgICAgICBub2RlLnJlbW92ZUZyb21QYXJlbnQodHJ1ZSk7XG4gICAgICAgIG5vZGUuX3JlbmRlckZsYWcgJj0gflJlbmRlckZsb3cuRkxBR19CUkVBS19GTE9XO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIERlc3Ryb3kgdXNlcidzIG5vZGUuXG4gICAgICogISN6aCDplIDmr4HnlKjmiLfoioLngrnjgIJcbiAgICAgKiBAbWV0aG9kIGRlc3Ryb3lVc2VyTm9kZVxuICAgICAqIEBwYXJhbSB7Y2MuTm9kZX0gbm9kZVxuICAgICAqL1xuICAgIGRlc3Ryb3lVc2VyTm9kZTogZnVuY3Rpb24gZGVzdHJveVVzZXJOb2RlKG5vZGUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVVc2VyTm9kZShub2RlKTtcbiAgICAgICAgbm9kZS5kZXN0cm95KCk7XG4gICAgfSxcblxuXG4gICAgLy8gYWNvcmRpbmcgbGF5ZXIgYW5jaG9yIHBvaW50IHRvIGNhbGN1bGF0ZSBub2RlIGxheWVyIHBvc1xuICAgIF9ub2RlTG9jYWxQb3NUb0xheWVyUG9zOiBmdW5jdGlvbiBfbm9kZUxvY2FsUG9zVG9MYXllclBvcyhub2RlUG9zLCBvdXQpIHtcbiAgICAgICAgb3V0LnggPSBub2RlUG9zLnggKyB0aGlzLl9sZWZ0RG93blRvQ2VudGVyWDtcbiAgICAgICAgb3V0LnkgPSBub2RlUG9zLnkgKyB0aGlzLl9sZWZ0RG93blRvQ2VudGVyWTtcbiAgICB9LFxuICAgIF9nZXROb2Rlc0J5Um93Q29sOiBmdW5jdGlvbiBfZ2V0Tm9kZXNCeVJvd0NvbChyb3csIGNvbCkge1xuICAgICAgICB2YXIgcm93RGF0YSA9IHRoaXMuX3VzZXJOb2RlR3JpZFtyb3ddO1xuICAgICAgICBpZiAoIXJvd0RhdGEpIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gcm93RGF0YVtjb2xdO1xuICAgIH0sXG4gICAgX2dldE5vZGVzQ291bnRCeVJvdzogZnVuY3Rpb24gX2dldE5vZGVzQ291bnRCeVJvdyhyb3cpIHtcbiAgICAgICAgdmFyIHJvd0RhdGEgPSB0aGlzLl91c2VyTm9kZUdyaWRbcm93XTtcbiAgICAgICAgaWYgKCFyb3dEYXRhKSByZXR1cm4gMDtcbiAgICAgICAgcmV0dXJuIHJvd0RhdGEuY291bnQ7XG4gICAgfSxcbiAgICBfdXBkYXRlQWxsVXNlck5vZGU6IGZ1bmN0aW9uIF91cGRhdGVBbGxVc2VyTm9kZSgpIHtcbiAgICAgICAgdGhpcy5fdXNlck5vZGVHcmlkID0ge307XG4gICAgICAgIGZvciAodmFyIGRhdGFJZCBpbiB0aGlzLl91c2VyTm9kZU1hcCkge1xuICAgICAgICAgICAgdmFyIGRhdGFDb21wID0gdGhpcy5fdXNlck5vZGVNYXBbZGF0YUlkXTtcbiAgICAgICAgICAgIHRoaXMuX25vZGVMb2NhbFBvc1RvTGF5ZXJQb3MoZGF0YUNvbXAubm9kZSwgX3ZlYzJfdGVtcCk7XG4gICAgICAgICAgICB0aGlzLl9wb3NpdGlvblRvUm93Q29sKF92ZWMyX3RlbXAueCwgX3ZlYzJfdGVtcC55LCBfdGVtcFJvd0NvbCk7XG4gICAgICAgICAgICB0aGlzLl9hZGRVc2VyTm9kZVRvR3JpZChkYXRhQ29tcCwgX3RlbXBSb3dDb2wpO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlQ3VsbGluZ09mZnNldEJ5VXNlck5vZGUoZGF0YUNvbXAubm9kZSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIF91cGRhdGVDdWxsaW5nT2Zmc2V0QnlVc2VyTm9kZTogZnVuY3Rpb24gX3VwZGF0ZUN1bGxpbmdPZmZzZXRCeVVzZXJOb2RlKG5vZGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RvcE9mZnNldCA8IG5vZGUuaGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLl90b3BPZmZzZXQgPSBub2RlLmhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fZG93bk9mZnNldCA8IG5vZGUuaGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLl9kb3duT2Zmc2V0ID0gbm9kZS5oZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2xlZnRPZmZzZXQgPCBub2RlLndpZHRoKSB7XG4gICAgICAgICAgICB0aGlzLl9sZWZ0T2Zmc2V0ID0gbm9kZS53aWR0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcmlnaHRPZmZzZXQgPCBub2RlLndpZHRoKSB7XG4gICAgICAgICAgICB0aGlzLl9yaWdodE9mZnNldCA9IG5vZGUud2lkdGg7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIF91c2VyTm9kZVNpemVDaGFuZ2U6IGZ1bmN0aW9uIF91c2VyTm9kZVNpemVDaGFuZ2UoKSB7XG4gICAgICAgIHZhciBkYXRhQ29tcCA9IHRoaXM7XG4gICAgICAgIHZhciBub2RlID0gZGF0YUNvbXAubm9kZTtcbiAgICAgICAgdmFyIHNlbGYgPSBkYXRhQ29tcC5fdGlsZWRMYXllcjtcbiAgICAgICAgc2VsZi5fdXBkYXRlQ3VsbGluZ09mZnNldEJ5VXNlck5vZGUobm9kZSk7XG4gICAgfSxcbiAgICBfdXNlck5vZGVQb3NDaGFuZ2U6IGZ1bmN0aW9uIF91c2VyTm9kZVBvc0NoYW5nZSgpIHtcbiAgICAgICAgdmFyIGRhdGFDb21wID0gdGhpcztcbiAgICAgICAgdmFyIG5vZGUgPSBkYXRhQ29tcC5ub2RlO1xuICAgICAgICB2YXIgc2VsZiA9IGRhdGFDb21wLl90aWxlZExheWVyO1xuICAgICAgICBzZWxmLl9ub2RlTG9jYWxQb3NUb0xheWVyUG9zKG5vZGUsIF92ZWMyX3RlbXApO1xuICAgICAgICBzZWxmLl9wb3NpdGlvblRvUm93Q29sKF92ZWMyX3RlbXAueCwgX3ZlYzJfdGVtcC55LCBfdGVtcFJvd0NvbCk7XG4gICAgICAgIC8vIHVzZXJzIHBvcyBub3QgY2hhbmdlXG4gICAgICAgIGlmIChfdGVtcFJvd0NvbC5yb3cgPT09IGRhdGFDb21wLl9yb3cgJiYgX3RlbXBSb3dDb2wuY29sID09PSBkYXRhQ29tcC5fY29sKSByZXR1cm47XG5cbiAgICAgICAgc2VsZi5fcmVtb3ZlVXNlck5vZGVGcm9tR3JpZChkYXRhQ29tcCk7XG4gICAgICAgIHNlbGYuX2FkZFVzZXJOb2RlVG9HcmlkKGRhdGFDb21wLCBfdGVtcFJvd0NvbCk7XG4gICAgfSxcbiAgICBfcmVtb3ZlVXNlck5vZGVGcm9tR3JpZDogZnVuY3Rpb24gX3JlbW92ZVVzZXJOb2RlRnJvbUdyaWQoZGF0YUNvbXApIHtcbiAgICAgICAgdmFyIHJvdyA9IGRhdGFDb21wLl9yb3c7XG4gICAgICAgIHZhciBjb2wgPSBkYXRhQ29tcC5fY29sO1xuICAgICAgICB2YXIgaW5kZXggPSBkYXRhQ29tcC5faW5kZXg7XG5cbiAgICAgICAgdmFyIHJvd0RhdGEgPSB0aGlzLl91c2VyTm9kZUdyaWRbcm93XTtcbiAgICAgICAgdmFyIGNvbERhdGEgPSByb3dEYXRhICYmIHJvd0RhdGFbY29sXTtcbiAgICAgICAgaWYgKGNvbERhdGEpIHtcbiAgICAgICAgICAgIHJvd0RhdGEuY291bnQtLTtcbiAgICAgICAgICAgIGNvbERhdGEuY291bnQtLTtcbiAgICAgICAgICAgIGNvbERhdGEubGlzdFtpbmRleF0gPSBudWxsO1xuICAgICAgICAgICAgaWYgKGNvbERhdGEuY291bnQgPD0gMCkge1xuICAgICAgICAgICAgICAgIGNvbERhdGEubGlzdC5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgIGNvbERhdGEuY291bnQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZGF0YUNvbXAuX3JvdyA9IC0xO1xuICAgICAgICBkYXRhQ29tcC5fY29sID0gLTE7XG4gICAgICAgIGRhdGFDb21wLl9pbmRleCA9IC0xO1xuICAgICAgICB0aGlzLl91c2VyTm9kZURpcnR5ID0gdHJ1ZTtcbiAgICB9LFxuICAgIF9pc0luTGF5ZXI6IGZ1bmN0aW9uIF9pc0luTGF5ZXIocm93LCBjb2wpIHtcbiAgICAgICAgcmV0dXJuIHJvdyA+PSAwICYmIGNvbCA+PSAwICYmIHJvdyA8PSB0aGlzLl9yaWdodFRvcC5yb3cgJiYgY29sIDw9IHRoaXMuX3JpZ2h0VG9wLmNvbDtcbiAgICB9LFxuICAgIF9hZGRVc2VyTm9kZVRvR3JpZDogZnVuY3Rpb24gX2FkZFVzZXJOb2RlVG9HcmlkKGRhdGFDb21wLCB0ZW1wUm93Q29sKSB7XG4gICAgICAgIHZhciByb3cgPSB0ZW1wUm93Q29sLnJvdztcbiAgICAgICAgdmFyIGNvbCA9IHRlbXBSb3dDb2wuY29sO1xuICAgICAgICBpZiAodGhpcy5faXNJbkxheWVyKHJvdywgY29sKSkge1xuICAgICAgICAgICAgdmFyIHJvd0RhdGEgPSB0aGlzLl91c2VyTm9kZUdyaWRbcm93XSA9IHRoaXMuX3VzZXJOb2RlR3JpZFtyb3ddIHx8IHsgY291bnQ6IDAgfTtcbiAgICAgICAgICAgIHZhciBjb2xEYXRhID0gcm93RGF0YVtjb2xdID0gcm93RGF0YVtjb2xdIHx8IHsgY291bnQ6IDAsIGxpc3Q6IFtdIH07XG4gICAgICAgICAgICBkYXRhQ29tcC5fcm93ID0gcm93O1xuICAgICAgICAgICAgZGF0YUNvbXAuX2NvbCA9IGNvbDtcbiAgICAgICAgICAgIGRhdGFDb21wLl9pbmRleCA9IGNvbERhdGEubGlzdC5sZW5ndGg7XG4gICAgICAgICAgICByb3dEYXRhLmNvdW50Kys7XG4gICAgICAgICAgICBjb2xEYXRhLmNvdW50Kys7XG4gICAgICAgICAgICBjb2xEYXRhLmxpc3QucHVzaChkYXRhQ29tcCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRhQ29tcC5fcm93ID0gLTE7XG4gICAgICAgICAgICBkYXRhQ29tcC5fY29sID0gLTE7XG4gICAgICAgICAgICBkYXRhQ29tcC5faW5kZXggPSAtMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl91c2VyTm9kZURpcnR5ID0gdHJ1ZTtcbiAgICB9LFxuICAgIF9pc1VzZXJOb2RlRGlydHk6IGZ1bmN0aW9uIF9pc1VzZXJOb2RlRGlydHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl91c2VyTm9kZURpcnR5O1xuICAgIH0sXG4gICAgX3NldFVzZXJOb2RlRGlydHk6IGZ1bmN0aW9uIF9zZXRVc2VyTm9kZURpcnR5KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3VzZXJOb2RlRGlydHkgPSB2YWx1ZTtcbiAgICB9LFxuICAgIG9uRW5hYmxlOiBmdW5jdGlvbiBvbkVuYWJsZSgpIHtcbiAgICAgICAgdGhpcy5fc3VwZXIoKTtcbiAgICAgICAgdGhpcy5ub2RlLm9uKGNjLk5vZGUuRXZlbnRUeXBlLkFOQ0hPUl9DSEFOR0VELCB0aGlzLl9zeW5jQW5jaG9yUG9pbnQsIHRoaXMpO1xuICAgICAgICB0aGlzLl9hY3RpdmF0ZU1hdGVyaWFsKCk7XG4gICAgfSxcbiAgICBvbkRpc2FibGU6IGZ1bmN0aW9uIG9uRGlzYWJsZSgpIHtcbiAgICAgICAgdGhpcy5fc3VwZXIoKTtcbiAgICAgICAgdGhpcy5ub2RlLm9mZihjYy5Ob2RlLkV2ZW50VHlwZS5BTkNIT1JfQ0hBTkdFRCwgdGhpcy5fc3luY0FuY2hvclBvaW50LCB0aGlzKTtcbiAgICB9LFxuICAgIF9zeW5jQW5jaG9yUG9pbnQ6IGZ1bmN0aW9uIF9zeW5jQW5jaG9yUG9pbnQoKSB7XG4gICAgICAgIHZhciBub2RlID0gdGhpcy5ub2RlO1xuICAgICAgICB0aGlzLl9sZWZ0RG93blRvQ2VudGVyWCA9IG5vZGUud2lkdGggKiBub2RlLmFuY2hvclggKiBub2RlLnNjYWxlWDtcbiAgICAgICAgdGhpcy5fbGVmdERvd25Ub0NlbnRlclkgPSBub2RlLmhlaWdodCAqIG5vZGUuYW5jaG9yWSAqIG5vZGUuc2NhbGVZO1xuICAgICAgICB0aGlzLl9jdWxsaW5nRGlydHkgPSB0cnVlO1xuICAgIH0sXG4gICAgb25EZXN0cm95OiBmdW5jdGlvbiBvbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuX3N1cGVyKCk7XG4gICAgICAgIGlmICh0aGlzLl9idWZmZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlci5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLl9idWZmZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3JlbmRlckRhdGFMaXN0ID0gbnVsbDtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIEdldHMgdGhlIGxheWVyIG5hbWUuXG4gICAgICogISN6aCDojrflj5blsYLnmoTlkI3np7DjgIJcbiAgICAgKiBAbWV0aG9kIGdldExheWVyTmFtZVxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGxldCBsYXllck5hbWUgPSB0aWxlZExheWVyLmdldExheWVyTmFtZSgpO1xuICAgICAqIGNjLmxvZyhsYXllck5hbWUpO1xuICAgICAqL1xuICAgIGdldExheWVyTmFtZTogZnVuY3Rpb24gZ2V0TGF5ZXJOYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGF5ZXJOYW1lO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqICEjZW4gU2V0IHRoZSBsYXllciBuYW1lLlxuICAgICAqICEjemgg6K6+572u5bGC55qE5ZCN56ewXG4gICAgICogQG1ldGhvZCBTZXRMYXllck5hbWVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbGF5ZXJOYW1lXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB0aWxlZExheWVyLnNldExheWVyTmFtZShcIk5ldyBMYXllclwiKTtcbiAgICAgKi9cbiAgICBzZXRMYXllck5hbWU6IGZ1bmN0aW9uIHNldExheWVyTmFtZShsYXllck5hbWUpIHtcbiAgICAgICAgdGhpcy5fbGF5ZXJOYW1lID0gbGF5ZXJOYW1lO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqICEjZW4gUmV0dXJuIHRoZSB2YWx1ZSBmb3IgdGhlIHNwZWNpZmljIHByb3BlcnR5IG5hbWUuXG4gICAgICogISN6aCDojrflj5bmjIflrprlsZ7mgKflkI3nmoTlgLzjgIJcbiAgICAgKiBAbWV0aG9kIGdldFByb3BlcnR5XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5TmFtZVxuICAgICAqIEByZXR1cm4geyp9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBsZXQgcHJvcGVydHkgPSB0aWxlZExheWVyLmdldFByb3BlcnR5KFwiaW5mb1wiKTtcbiAgICAgKiBjYy5sb2cocHJvcGVydHkpO1xuICAgICAqL1xuICAgIGdldFByb3BlcnR5OiBmdW5jdGlvbiBnZXRQcm9wZXJ0eShwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3BlcnRpZXNbcHJvcGVydHlOYW1lXTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFJldHVybnMgdGhlIHBvc2l0aW9uIGluIHBpeGVscyBvZiBhIGdpdmVuIHRpbGUgY29vcmRpbmF0ZS5cbiAgICAgKiAhI3poIOiOt+WPluaMh+WumiB0aWxlIOeahOWDj+e0oOWdkOagh+OAglxuICAgICAqIEBtZXRob2QgZ2V0UG9zaXRpb25BdFxuICAgICAqIEBwYXJhbSB7VmVjMnxOdW1iZXJ9IHBvcyBwb3NpdGlvbiBvciB4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFt5XVxuICAgICAqIEByZXR1cm4ge1ZlYzJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBsZXQgcG9zID0gdGlsZWRMYXllci5nZXRQb3NpdGlvbkF0KGNjLnYyKDAsIDApKTtcbiAgICAgKiBjYy5sb2coXCJQb3M6IFwiICsgcG9zKTtcbiAgICAgKiBsZXQgcG9zID0gdGlsZWRMYXllci5nZXRQb3NpdGlvbkF0KDAsIDApO1xuICAgICAqIGNjLmxvZyhcIlBvczogXCIgKyBwb3MpO1xuICAgICAqL1xuICAgIGdldFBvc2l0aW9uQXQ6IGZ1bmN0aW9uIGdldFBvc2l0aW9uQXQocG9zLCB5KSB7XG4gICAgICAgIHZhciB4ID0gdm9pZCAwO1xuICAgICAgICBpZiAoeSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB4ID0gTWF0aC5mbG9vcihwb3MpO1xuICAgICAgICAgICAgeSA9IE1hdGguZmxvb3IoeSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB4ID0gTWF0aC5mbG9vcihwb3MueCk7XG4gICAgICAgICAgICB5ID0gTWF0aC5mbG9vcihwb3MueSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmV0ID0gdm9pZCAwO1xuICAgICAgICBzd2l0Y2ggKHRoaXMuX2xheWVyT3JpZW50YXRpb24pIHtcbiAgICAgICAgICAgIGNhc2UgY2MuVGlsZWRNYXAuT3JpZW50YXRpb24uT1JUSE86XG4gICAgICAgICAgICAgICAgcmV0ID0gdGhpcy5fcG9zaXRpb25Gb3JPcnRob0F0KHgsIHkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBjYy5UaWxlZE1hcC5PcmllbnRhdGlvbi5JU086XG4gICAgICAgICAgICAgICAgcmV0ID0gdGhpcy5fcG9zaXRpb25Gb3JJc29BdCh4LCB5KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgY2MuVGlsZWRNYXAuT3JpZW50YXRpb24uSEVYOlxuICAgICAgICAgICAgICAgIHJldCA9IHRoaXMuX3Bvc2l0aW9uRm9ySGV4QXQoeCwgeSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9LFxuICAgIF9pc0ludmFsaWRQb3NpdGlvbjogZnVuY3Rpb24gX2lzSW52YWxpZFBvc2l0aW9uKHgsIHkpIHtcbiAgICAgICAgaWYgKHggJiYgKHR5cGVvZiB4ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih4KSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB2YXIgcG9zID0geDtcbiAgICAgICAgICAgIHkgPSBwb3MueTtcbiAgICAgICAgICAgIHggPSBwb3MueDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geCA+PSB0aGlzLl9sYXllclNpemUud2lkdGggfHwgeSA+PSB0aGlzLl9sYXllclNpemUuaGVpZ2h0IHx8IHggPCAwIHx8IHkgPCAwO1xuICAgIH0sXG4gICAgX3Bvc2l0aW9uRm9ySXNvQXQ6IGZ1bmN0aW9uIF9wb3NpdGlvbkZvcklzb0F0KHgsIHkpIHtcbiAgICAgICAgcmV0dXJuIGNjLnYyKHRoaXMuX21hcFRpbGVTaXplLndpZHRoIC8gMiAqICh0aGlzLl9sYXllclNpemUud2lkdGggKyB4IC0geSAtIDEpLCB0aGlzLl9tYXBUaWxlU2l6ZS5oZWlnaHQgLyAyICogKHRoaXMuX2xheWVyU2l6ZS5oZWlnaHQgKiAyIC0geCAtIHkgLSAyKSk7XG4gICAgfSxcbiAgICBfcG9zaXRpb25Gb3JPcnRob0F0OiBmdW5jdGlvbiBfcG9zaXRpb25Gb3JPcnRob0F0KHgsIHkpIHtcbiAgICAgICAgcmV0dXJuIGNjLnYyKHggKiB0aGlzLl9tYXBUaWxlU2l6ZS53aWR0aCwgKHRoaXMuX2xheWVyU2l6ZS5oZWlnaHQgLSB5IC0gMSkgKiB0aGlzLl9tYXBUaWxlU2l6ZS5oZWlnaHQpO1xuICAgIH0sXG4gICAgX3Bvc2l0aW9uRm9ySGV4QXQ6IGZ1bmN0aW9uIF9wb3NpdGlvbkZvckhleEF0KGNvbCwgcm93KSB7XG4gICAgICAgIHZhciB0aWxlV2lkdGggPSB0aGlzLl9tYXBUaWxlU2l6ZS53aWR0aDtcbiAgICAgICAgdmFyIHRpbGVIZWlnaHQgPSB0aGlzLl9tYXBUaWxlU2l6ZS5oZWlnaHQ7XG4gICAgICAgIHZhciByb3dzID0gdGhpcy5fbGF5ZXJTaXplLmhlaWdodDtcblxuICAgICAgICB2YXIgaW5kZXggPSBNYXRoLmZsb29yKGNvbCkgKyBNYXRoLmZsb29yKHJvdykgKiB0aGlzLl9sYXllclNpemUud2lkdGg7XG4gICAgICAgIHZhciBnaWQgPSB0aGlzLl90aWxlc1tpbmRleF07XG4gICAgICAgIHZhciB0aWxlc2V0ID0gdGhpcy5fdGV4R3JpZHNbZ2lkXS50aWxlc2V0O1xuICAgICAgICB2YXIgb2Zmc2V0ID0gdGlsZXNldC50aWxlT2Zmc2V0O1xuXG4gICAgICAgIHZhciBjZW50ZXJXaWR0aCA9IHRoaXMubm9kZS53aWR0aCAvIDI7XG4gICAgICAgIHZhciBjZW50ZXJIZWlnaHQgPSB0aGlzLm5vZGUuaGVpZ2h0IC8gMjtcbiAgICAgICAgdmFyIG9kZF9ldmVuID0gdGhpcy5fc3RhZ2dlckluZGV4ID09PSBjYy5UaWxlZE1hcC5TdGFnZ2VySW5kZXguU1RBR0dFUklOREVYX09ERCA/IDEgOiAtMTtcbiAgICAgICAgdmFyIHggPSAwLFxuICAgICAgICAgICAgeSA9IDA7XG4gICAgICAgIHZhciBkaWZmWCA9IDA7XG4gICAgICAgIHZhciBkaWZmWDEgPSAwO1xuICAgICAgICB2YXIgZGlmZlkgPSAwO1xuICAgICAgICB2YXIgZGlmZlkxID0gMDtcbiAgICAgICAgc3dpdGNoICh0aGlzLl9zdGFnZ2VyQXhpcykge1xuICAgICAgICAgICAgY2FzZSBjYy5UaWxlZE1hcC5TdGFnZ2VyQXhpcy5TVEFHR0VSQVhJU19ZOlxuICAgICAgICAgICAgICAgIGRpZmZYID0gMDtcbiAgICAgICAgICAgICAgICBkaWZmWDEgPSB0aGlzLl9zdGFnZ2VySW5kZXggPT09IGNjLlRpbGVkTWFwLlN0YWdnZXJJbmRleC5TVEFHR0VSSU5ERVhfT0REID8gMCA6IHRpbGVXaWR0aCAvIDI7XG4gICAgICAgICAgICAgICAgaWYgKHJvdyAlIDIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlmZlggPSB0aWxlV2lkdGggLyAyICogb2RkX2V2ZW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHggPSBjb2wgKiB0aWxlV2lkdGggKyBkaWZmWCArIGRpZmZYMSArIG9mZnNldC54IC0gY2VudGVyV2lkdGg7XG4gICAgICAgICAgICAgICAgeSA9IChyb3dzIC0gcm93IC0gMSkgKiAodGlsZUhlaWdodCAtICh0aWxlSGVpZ2h0IC0gdGhpcy5faGV4U2lkZUxlbmd0aCkgLyAyKSAtIG9mZnNldC55IC0gY2VudGVySGVpZ2h0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBjYy5UaWxlZE1hcC5TdGFnZ2VyQXhpcy5TVEFHR0VSQVhJU19YOlxuICAgICAgICAgICAgICAgIGRpZmZZID0gMDtcbiAgICAgICAgICAgICAgICBkaWZmWTEgPSB0aGlzLl9zdGFnZ2VySW5kZXggPT09IGNjLlRpbGVkTWFwLlN0YWdnZXJJbmRleC5TVEFHR0VSSU5ERVhfT0REID8gdGlsZUhlaWdodCAvIDIgOiAwO1xuICAgICAgICAgICAgICAgIGlmIChjb2wgJSAyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpZmZZID0gdGlsZUhlaWdodCAvIDIgKiAtb2RkX2V2ZW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHggPSBjb2wgKiAodGlsZVdpZHRoIC0gKHRpbGVXaWR0aCAtIHRoaXMuX2hleFNpZGVMZW5ndGgpIC8gMikgKyBvZmZzZXQueCAtIGNlbnRlcldpZHRoO1xuICAgICAgICAgICAgICAgIHkgPSAocm93cyAtIHJvdyAtIDEpICogdGlsZUhlaWdodCArIGRpZmZZICsgZGlmZlkxIC0gb2Zmc2V0LnkgLSBjZW50ZXJIZWlnaHQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNjLnYyKHgsIHkpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBTZXRzIHRoZSB0aWxlIGdpZCAoZ2lkID0gdGlsZSBnbG9iYWwgaWQpIGF0IGEgZ2l2ZW4gdGlsZSBjb29yZGluYXRlLjxiciAvPlxuICAgICAqIFRoZSBUaWxlIEdJRCBjYW4gYmUgb2J0YWluZWQgYnkgdXNpbmcgdGhlIG1ldGhvZCBcInRpbGVHSURBdFwiIG9yIGJ5IHVzaW5nIHRoZSBUTVggZWRpdG9yIC4gVGlsZXNldCBNZ3IgKzEuPGJyIC8+XG4gICAgICogSWYgYSB0aWxlIGlzIGFscmVhZHkgcGxhY2VkIGF0IHRoYXQgcG9zaXRpb24sIHRoZW4gaXQgd2lsbCBiZSByZW1vdmVkLlxuICAgICAqICEjemhcbiAgICAgKiDorr7nva7nu5nlrprlnZDmoIfnmoQgdGlsZSDnmoQgZ2lkIChnaWQgPSB0aWxlIOWFqOWxgCBpZCnvvIxcbiAgICAgKiB0aWxlIOeahCBHSUQg5Y+v5Lul5L2/55So5pa55rOVIOKAnHRpbGVHSURBdOKAnSDmnaXojrflvpfjgII8YnIgLz5cbiAgICAgKiDlpoLmnpzkuIDkuKogdGlsZSDlt7Lnu4/mlL7lnKjpgqPkuKrkvY3nva7vvIzpgqPkuYjlroPlsIbooqvliKDpmaTjgIJcbiAgICAgKiBAbWV0aG9kIHNldFRpbGVHSURBdFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBnaWRcbiAgICAgKiBAcGFyYW0ge1ZlYzJ8TnVtYmVyfSBwb3NPclggcG9zaXRpb24gb3IgeFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBmbGFnc09yWSBmbGFncyBvciB5XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtmbGFnc11cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHRpbGVkTGF5ZXIuc2V0VGlsZUdJREF0KDEwMDEsIDEwLCAxMCwgMSlcbiAgICAgKi9cbiAgICBzZXRUaWxlR0lEQXQ6IGZ1bmN0aW9uIHNldFRpbGVHSURBdChnaWQsIHBvc09yWCwgZmxhZ3NPclksIGZsYWdzKSB7XG4gICAgICAgIGlmIChwb3NPclggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2MuVGlsZWRMYXllci5zZXRUaWxlR0lEQXQoKTogcG9zIHNob3VsZCBiZSBub24tbnVsbFwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcG9zID0gdm9pZCAwO1xuICAgICAgICBpZiAoZmxhZ3MgIT09IHVuZGVmaW5lZCB8fCAhKHBvc09yWCBpbnN0YW5jZW9mIGNjLlZlYzIpKSB7XG4gICAgICAgICAgICAvLyBmb3VyIHBhcmFtZXRlcnMgb3IgcG9zT3JYIGlzIG5vdCBhIFZlYzIgb2JqZWN0XG4gICAgICAgICAgICBwb3MgPSBjYy52Mihwb3NPclgsIGZsYWdzT3JZKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBvcyA9IHBvc09yWDtcbiAgICAgICAgICAgIGZsYWdzID0gZmxhZ3NPclk7XG4gICAgICAgIH1cblxuICAgICAgICBwb3MueCA9IE1hdGguZmxvb3IocG9zLngpO1xuICAgICAgICBwb3MueSA9IE1hdGguZmxvb3IocG9zLnkpO1xuICAgICAgICBpZiAodGhpcy5faXNJbnZhbGlkUG9zaXRpb24ocG9zKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2MuVGlsZWRMYXllci5zZXRUaWxlR0lEQXQoKTogaW52YWxpZCBwb3NpdGlvblwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX3RpbGVzIHx8ICF0aGlzLl90aWxlc2V0cyB8fCB0aGlzLl90aWxlc2V0cy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgY2MubG9nSUQoNzIzOCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdpZCAhPT0gMCAmJiBnaWQgPCB0aGlzLl90aWxlc2V0c1swXS5maXJzdEdpZCkge1xuICAgICAgICAgICAgY2MubG9nSUQoNzIzOSwgZ2lkKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZsYWdzID0gZmxhZ3MgfHwgMDtcbiAgICAgICAgdmFyIGN1cnJlbnRGbGFncyA9IHRoaXMuZ2V0VGlsZUZsYWdzQXQocG9zKTtcbiAgICAgICAgdmFyIGN1cnJlbnRHSUQgPSB0aGlzLmdldFRpbGVHSURBdChwb3MpO1xuXG4gICAgICAgIGlmIChjdXJyZW50R0lEID09PSBnaWQgJiYgY3VycmVudEZsYWdzID09PSBmbGFncykgcmV0dXJuO1xuXG4gICAgICAgIHZhciBnaWRBbmRGbGFncyA9IChnaWQgfCBmbGFncykgPj4+IDA7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVRpbGVGb3JHSUQoZ2lkQW5kRmxhZ3MsIHBvcyk7XG4gICAgfSxcbiAgICBfdXBkYXRlVGlsZUZvckdJRDogZnVuY3Rpb24gX3VwZGF0ZVRpbGVGb3JHSUQoZ2lkLCBwb3MpIHtcbiAgICAgICAgaWYgKGdpZCAhPT0gMCAmJiAhdGhpcy5fdGV4R3JpZHNbZ2lkXSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlkeCA9IDAgfCBwb3MueCArIHBvcy55ICogdGhpcy5fbGF5ZXJTaXplLndpZHRoO1xuICAgICAgICBpZiAoaWR4IDwgdGhpcy5fdGlsZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLl90aWxlc1tpZHhdID0gZ2lkO1xuICAgICAgICAgICAgdGhpcy5fY3VsbGluZ0RpcnR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBSZXR1cm5zIHRoZSB0aWxlIGdpZCBhdCBhIGdpdmVuIHRpbGUgY29vcmRpbmF0ZS4gPGJyIC8+XG4gICAgICogaWYgaXQgcmV0dXJucyAwLCBpdCBtZWFucyB0aGF0IHRoZSB0aWxlIGlzIGVtcHR5LiA8YnIgLz5cbiAgICAgKiAhI3poXG4gICAgICog6YCa6L+H57uZ5a6a55qEIHRpbGUg5Z2Q5qCH44CBZmxhZ3PvvIjlj6/pgInvvInov5Tlm54gdGlsZSDnmoQgR0lELiA8YnIgLz5cbiAgICAgKiDlpoLmnpzlroPov5Tlm54gMO+8jOWImeihqOekuuivpSB0aWxlIOS4uuepuuOAgjxiciAvPlxuICAgICAqIEBtZXRob2QgZ2V0VGlsZUdJREF0XG4gICAgICogQHBhcmFtIHtWZWMyfE51bWJlcn0gcG9zIG9yIHhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3ldXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogbGV0IHRpbGVHaWQgPSB0aWxlZExheWVyLmdldFRpbGVHSURBdCgwLCAwKTtcbiAgICAgKi9cbiAgICBnZXRUaWxlR0lEQXQ6IGZ1bmN0aW9uIGdldFRpbGVHSURBdChwb3MsIHkpIHtcbiAgICAgICAgaWYgKHBvcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYy5UaWxlZExheWVyLmdldFRpbGVHSURBdCgpOiBwb3Mgc2hvdWxkIGJlIG5vbi1udWxsXCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB4ID0gcG9zO1xuICAgICAgICBpZiAoeSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB4ID0gcG9zLng7XG4gICAgICAgICAgICB5ID0gcG9zLnk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2lzSW52YWxpZFBvc2l0aW9uKHgsIHkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYy5UaWxlZExheWVyLmdldFRpbGVHSURBdCgpOiBpbnZhbGlkIHBvc2l0aW9uXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fdGlsZXMpIHtcbiAgICAgICAgICAgIGNjLmxvZ0lEKDcyMzcpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaW5kZXggPSBNYXRoLmZsb29yKHgpICsgTWF0aC5mbG9vcih5KSAqIHRoaXMuX2xheWVyU2l6ZS53aWR0aDtcbiAgICAgICAgLy8gQml0cyBvbiB0aGUgZmFyIGVuZCBvZiB0aGUgMzItYml0IGdsb2JhbCB0aWxlIElEIGFyZSB1c2VkIGZvciB0aWxlIGZsYWdzXG4gICAgICAgIHZhciB0aWxlID0gdGhpcy5fdGlsZXNbaW5kZXhdO1xuXG4gICAgICAgIHJldHVybiAodGlsZSAmIGNjLlRpbGVkTWFwLlRpbGVGbGFnLkZMSVBQRURfTUFTSykgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRUaWxlRmxhZ3NBdDogZnVuY3Rpb24gZ2V0VGlsZUZsYWdzQXQocG9zLCB5KSB7XG4gICAgICAgIGlmICghcG9zKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaWxlZExheWVyLmdldFRpbGVGbGFnc0F0OiBwb3Mgc2hvdWxkIGJlIG5vbi1udWxsXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHBvcyA9IGNjLnYyKHBvcywgeSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2lzSW52YWxpZFBvc2l0aW9uKHBvcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRpbGVkTGF5ZXIuZ2V0VGlsZUZsYWdzQXQ6IGludmFsaWQgcG9zaXRpb25cIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl90aWxlcykge1xuICAgICAgICAgICAgY2MubG9nSUQoNzI0MCk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpZHggPSBNYXRoLmZsb29yKHBvcy54KSArIE1hdGguZmxvb3IocG9zLnkpICogdGhpcy5fbGF5ZXJTaXplLndpZHRoO1xuICAgICAgICAvLyBCaXRzIG9uIHRoZSBmYXIgZW5kIG9mIHRoZSAzMi1iaXQgZ2xvYmFsIHRpbGUgSUQgYXJlIHVzZWQgZm9yIHRpbGUgZmxhZ3NcbiAgICAgICAgdmFyIHRpbGUgPSB0aGlzLl90aWxlc1tpZHhdO1xuXG4gICAgICAgIHJldHVybiAodGlsZSAmIGNjLlRpbGVkTWFwLlRpbGVGbGFnLkZMSVBQRURfQUxMKSA+Pj4gMDtcbiAgICB9LFxuICAgIF9zZXRDdWxsaW5nRGlydHk6IGZ1bmN0aW9uIF9zZXRDdWxsaW5nRGlydHkodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fY3VsbGluZ0RpcnR5ID0gdmFsdWU7XG4gICAgfSxcbiAgICBfaXNDdWxsaW5nRGlydHk6IGZ1bmN0aW9uIF9pc0N1bGxpbmdEaXJ0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2N1bGxpbmdEaXJ0eTtcbiAgICB9LFxuXG5cbiAgICAvLyAneCwgeScgaXMgdGhlIHBvc2l0aW9uIG9mIHZpZXdQb3J0LCB3aGljaCdzIGFuY2hvciBwb2ludCBpcyBhdCB0aGUgY2VudGVyIG9mIHJlY3QuXG4gICAgLy8gJ3dpZHRoLCBoZWlnaHQnIGlzIHRoZSBzaXplIG9mIHZpZXdQb3J0LlxuICAgIF91cGRhdGVWaWV3UG9ydDogZnVuY3Rpb24gX3VwZGF0ZVZpZXdQb3J0KHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ZpZXdQb3J0LndpZHRoID09PSB3aWR0aCAmJiB0aGlzLl92aWV3UG9ydC5oZWlnaHQgPT09IGhlaWdodCAmJiB0aGlzLl92aWV3UG9ydC54ID09PSB4ICYmIHRoaXMuX3ZpZXdQb3J0LnkgPT09IHkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl92aWV3UG9ydC54ID0geDtcbiAgICAgICAgdGhpcy5fdmlld1BvcnQueSA9IHk7XG4gICAgICAgIHRoaXMuX3ZpZXdQb3J0LndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuX3ZpZXdQb3J0LmhlaWdodCA9IGhlaWdodDtcblxuICAgICAgICAvLyBpZiBtYXAncyB0eXBlIGlzIGlzbywgcmVzZXJ2ZSBib3R0b20gbGluZSBpcyAyIHRvIGF2b2lkIHNob3cgZW1wdHkgZ3JpZCBiZWNhdXNlIG9mIGlzbyBncmlkIGFyaXRobWV0aWNcbiAgICAgICAgdmFyIHJlc2VydmVMaW5lID0gMTtcbiAgICAgICAgaWYgKHRoaXMuX2xheWVyT3JpZW50YXRpb24gPT09IGNjLlRpbGVkTWFwLk9yaWVudGF0aW9uLklTTykge1xuICAgICAgICAgICAgcmVzZXJ2ZUxpbmUgPSAyO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHZweCA9IHRoaXMuX3ZpZXdQb3J0LnggLSB0aGlzLl9vZmZzZXQueCArIHRoaXMuX2xlZnREb3duVG9DZW50ZXJYO1xuICAgICAgICB2YXIgdnB5ID0gdGhpcy5fdmlld1BvcnQueSAtIHRoaXMuX29mZnNldC55ICsgdGhpcy5fbGVmdERvd25Ub0NlbnRlclk7XG5cbiAgICAgICAgdmFyIGxlZnREb3duWCA9IHZweCAtIHRoaXMuX2xlZnRPZmZzZXQ7XG4gICAgICAgIHZhciBsZWZ0RG93blkgPSB2cHkgLSB0aGlzLl9kb3duT2Zmc2V0O1xuICAgICAgICB2YXIgcmlnaHRUb3BYID0gdnB4ICsgd2lkdGggKyB0aGlzLl9yaWdodE9mZnNldDtcbiAgICAgICAgdmFyIHJpZ2h0VG9wWSA9IHZweSArIGhlaWdodCArIHRoaXMuX3RvcE9mZnNldDtcblxuICAgICAgICB2YXIgbGVmdERvd24gPSB0aGlzLl9jdWxsaW5nUmVjdC5sZWZ0RG93bjtcbiAgICAgICAgdmFyIHJpZ2h0VG9wID0gdGhpcy5fY3VsbGluZ1JlY3QucmlnaHRUb3A7XG5cbiAgICAgICAgaWYgKGxlZnREb3duWCA8IDApIGxlZnREb3duWCA9IDA7XG4gICAgICAgIGlmIChsZWZ0RG93blkgPCAwKSBsZWZ0RG93blkgPSAwO1xuXG4gICAgICAgIC8vIGNhbGMgbGVmdCBkb3duXG4gICAgICAgIHRoaXMuX3Bvc2l0aW9uVG9Sb3dDb2wobGVmdERvd25YLCBsZWZ0RG93blksIF90ZW1wUm93Q29sKTtcbiAgICAgICAgLy8gbWFrZSByYW5nZSBsYXJnZVxuICAgICAgICBfdGVtcFJvd0NvbC5yb3cgLT0gcmVzZXJ2ZUxpbmU7XG4gICAgICAgIF90ZW1wUm93Q29sLmNvbCAtPSByZXNlcnZlTGluZTtcbiAgICAgICAgLy8gaW5zdXJlIGxlZnQgZG93biByb3cgY29sIGdyZWF0ZXIgdGhhbiAwXG4gICAgICAgIF90ZW1wUm93Q29sLnJvdyA9IF90ZW1wUm93Q29sLnJvdyA+IDAgPyBfdGVtcFJvd0NvbC5yb3cgOiAwO1xuICAgICAgICBfdGVtcFJvd0NvbC5jb2wgPSBfdGVtcFJvd0NvbC5jb2wgPiAwID8gX3RlbXBSb3dDb2wuY29sIDogMDtcblxuICAgICAgICBpZiAoX3RlbXBSb3dDb2wucm93ICE9PSBsZWZ0RG93bi5yb3cgfHwgX3RlbXBSb3dDb2wuY29sICE9PSBsZWZ0RG93bi5jb2wpIHtcbiAgICAgICAgICAgIGxlZnREb3duLnJvdyA9IF90ZW1wUm93Q29sLnJvdztcbiAgICAgICAgICAgIGxlZnREb3duLmNvbCA9IF90ZW1wUm93Q29sLmNvbDtcbiAgICAgICAgICAgIHRoaXMuX2N1bGxpbmdEaXJ0eSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzaG93IG5vdGhpbmdcbiAgICAgICAgaWYgKHJpZ2h0VG9wWCA8IDAgfHwgcmlnaHRUb3BZIDwgMCkge1xuICAgICAgICAgICAgX3RlbXBSb3dDb2wucm93ID0gLTE7XG4gICAgICAgICAgICBfdGVtcFJvd0NvbC5jb2wgPSAtMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGNhbGMgcmlnaHQgdG9wXG4gICAgICAgICAgICB0aGlzLl9wb3NpdGlvblRvUm93Q29sKHJpZ2h0VG9wWCwgcmlnaHRUb3BZLCBfdGVtcFJvd0NvbCk7XG4gICAgICAgICAgICAvLyBtYWtlIHJhbmdlIGxhcmdlXG4gICAgICAgICAgICBfdGVtcFJvd0NvbC5yb3crKztcbiAgICAgICAgICAgIF90ZW1wUm93Q29sLmNvbCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYXZvaWQgcmFuZ2Ugb3V0IG9mIG1heCByZWN0XG4gICAgICAgIGlmIChfdGVtcFJvd0NvbC5yb3cgPiB0aGlzLl9yaWdodFRvcC5yb3cpIF90ZW1wUm93Q29sLnJvdyA9IHRoaXMuX3JpZ2h0VG9wLnJvdztcbiAgICAgICAgaWYgKF90ZW1wUm93Q29sLmNvbCA+IHRoaXMuX3JpZ2h0VG9wLmNvbCkgX3RlbXBSb3dDb2wuY29sID0gdGhpcy5fcmlnaHRUb3AuY29sO1xuXG4gICAgICAgIGlmIChfdGVtcFJvd0NvbC5yb3cgIT09IHJpZ2h0VG9wLnJvdyB8fCBfdGVtcFJvd0NvbC5jb2wgIT09IHJpZ2h0VG9wLmNvbCkge1xuICAgICAgICAgICAgcmlnaHRUb3Aucm93ID0gX3RlbXBSb3dDb2wucm93O1xuICAgICAgICAgICAgcmlnaHRUb3AuY29sID0gX3RlbXBSb3dDb2wuY29sO1xuICAgICAgICAgICAgdGhpcy5fY3VsbGluZ0RpcnR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8vIHRoZSByZXN1bHQgbWF5IG5vdCBwcmVjaXNlLCBidXQgaXQgZG9zZSd0IG1hdHRlciwgaXQganVzdCB1c2VzIHRvIGJlIGdvdCByYW5nZVxuICAgIF9wb3NpdGlvblRvUm93Q29sOiBmdW5jdGlvbiBfcG9zaXRpb25Ub1Jvd0NvbCh4LCB5LCByZXN1bHQpIHtcbiAgICAgICAgdmFyIFRpbGVkTWFwID0gY2MuVGlsZWRNYXA7XG4gICAgICAgIHZhciBPcmllbnRhdGlvbiA9IFRpbGVkTWFwLk9yaWVudGF0aW9uO1xuICAgICAgICB2YXIgU3RhZ2dlckF4aXMgPSBUaWxlZE1hcC5TdGFnZ2VyQXhpcztcblxuICAgICAgICB2YXIgbWFwdHcgPSB0aGlzLl9tYXBUaWxlU2l6ZS53aWR0aCxcbiAgICAgICAgICAgIG1hcHRoID0gdGhpcy5fbWFwVGlsZVNpemUuaGVpZ2h0LFxuICAgICAgICAgICAgbWFwdHcyID0gbWFwdHcgKiAwLjUsXG4gICAgICAgICAgICBtYXB0aDIgPSBtYXB0aCAqIDAuNTtcbiAgICAgICAgdmFyIHJvdyA9IDAsXG4gICAgICAgICAgICBjb2wgPSAwLFxuICAgICAgICAgICAgZGlmZlgyID0gMCxcbiAgICAgICAgICAgIGRpZmZZMiA9IDAsXG4gICAgICAgICAgICBheGlzID0gdGhpcy5fc3RhZ2dlckF4aXM7XG4gICAgICAgIHZhciBjb2xzID0gdGhpcy5fbGF5ZXJTaXplLndpZHRoO1xuXG4gICAgICAgIHN3aXRjaCAodGhpcy5fbGF5ZXJPcmllbnRhdGlvbikge1xuICAgICAgICAgICAgLy8gbGVmdCB0b3AgdG8gcmlnaHQgZG93bVxuICAgICAgICAgICAgY2FzZSBPcmllbnRhdGlvbi5PUlRITzpcbiAgICAgICAgICAgICAgICBjb2wgPSBNYXRoLmZsb29yKHggLyBtYXB0dyk7XG4gICAgICAgICAgICAgICAgcm93ID0gTWF0aC5mbG9vcih5IC8gbWFwdGgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgLy8gcmlnaHQgdG9wIHRvIGxlZnQgZG93blxuICAgICAgICAgICAgLy8gaXNvIGNhbiBiZSB0cmVhdCBhcyBzcGVjaWFsIGhleCB3aG9zZSBoZXggc2lkZSBsZW5ndGggaXMgMFxuICAgICAgICAgICAgY2FzZSBPcmllbnRhdGlvbi5JU086XG4gICAgICAgICAgICAgICAgY29sID0gTWF0aC5mbG9vcih4IC8gbWFwdHcyKTtcbiAgICAgICAgICAgICAgICByb3cgPSBNYXRoLmZsb29yKHkgLyBtYXB0aDIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgLy8gbGVmdCB0b3AgdG8gcmlnaHQgZG93bVxuICAgICAgICAgICAgY2FzZSBPcmllbnRhdGlvbi5IRVg6XG4gICAgICAgICAgICAgICAgaWYgKGF4aXMgPT09IFN0YWdnZXJBeGlzLlNUQUdHRVJBWElTX1kpIHtcbiAgICAgICAgICAgICAgICAgICAgcm93ID0gTWF0aC5mbG9vcih5IC8gKG1hcHRoIC0gdGhpcy5fZGlmZlkxKSk7XG4gICAgICAgICAgICAgICAgICAgIGRpZmZYMiA9IHJvdyAlIDIgPT09IDEgPyBtYXB0dzIgKiB0aGlzLl9vZGRfZXZlbiA6IDA7XG4gICAgICAgICAgICAgICAgICAgIGNvbCA9IE1hdGguZmxvb3IoKHggLSBkaWZmWDIpIC8gbWFwdHcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbCA9IE1hdGguZmxvb3IoeCAvIChtYXB0dyAtIHRoaXMuX2RpZmZYMSkpO1xuICAgICAgICAgICAgICAgICAgICBkaWZmWTIgPSBjb2wgJSAyID09PSAxID8gbWFwdGgyICogLXRoaXMuX29kZF9ldmVuIDogMDtcbiAgICAgICAgICAgICAgICAgICAgcm93ID0gTWF0aC5mbG9vcigoeSAtIGRpZmZZMikgLyBtYXB0aCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5yb3cgPSByb3c7XG4gICAgICAgIHJlc3VsdC5jb2wgPSBjb2w7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICBfdXBkYXRlQ3VsbGluZzogZnVuY3Rpb24gX3VwZGF0ZUN1bGxpbmcoKSB7XG4gICAgICAgIGlmIChDQ19FRElUT1IpIHtcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlQ3VsbGluZyhmYWxzZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fZW5hYmxlQ3VsbGluZykge1xuICAgICAgICAgICAgdGhpcy5ub2RlLl91cGRhdGVXb3JsZE1hdHJpeCgpO1xuICAgICAgICAgICAgX3ZtYXRoLm1hdDQuaW52ZXJ0KF9tYXQ0X3RlbXAsIHRoaXMubm9kZS5fd29ybGRNYXRyaXgpO1xuICAgICAgICAgICAgdmFyIHJlY3QgPSBjYy52aXNpYmxlUmVjdDtcbiAgICAgICAgICAgIHZhciBjYW1lcmEgPSBjYy5DYW1lcmEuZmluZENhbWVyYSh0aGlzLm5vZGUpO1xuICAgICAgICAgICAgaWYgKGNhbWVyYSkge1xuICAgICAgICAgICAgICAgIF92ZWMyX3RlbXAueCA9IDA7XG4gICAgICAgICAgICAgICAgX3ZlYzJfdGVtcC55ID0gMDtcbiAgICAgICAgICAgICAgICBfdmVjMl90ZW1wMi54ID0gX3ZlYzJfdGVtcC54ICsgcmVjdC53aWR0aDtcbiAgICAgICAgICAgICAgICBfdmVjMl90ZW1wMi55ID0gX3ZlYzJfdGVtcC55ICsgcmVjdC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgY2FtZXJhLmdldFNjcmVlblRvV29ybGRQb2ludChfdmVjMl90ZW1wLCBfdmVjMl90ZW1wKTtcbiAgICAgICAgICAgICAgICBjYW1lcmEuZ2V0U2NyZWVuVG9Xb3JsZFBvaW50KF92ZWMyX3RlbXAyLCBfdmVjMl90ZW1wMik7XG4gICAgICAgICAgICAgICAgX3ZtYXRoLnZlYzIudHJhbnNmb3JtTWF0NChfdmVjMl90ZW1wLCBfdmVjMl90ZW1wLCBfbWF0NF90ZW1wKTtcbiAgICAgICAgICAgICAgICBfdm1hdGgudmVjMi50cmFuc2Zvcm1NYXQ0KF92ZWMyX3RlbXAyLCBfdmVjMl90ZW1wMiwgX21hdDRfdGVtcCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlVmlld1BvcnQoX3ZlYzJfdGVtcC54LCBfdmVjMl90ZW1wLnksIF92ZWMyX3RlbXAyLnggLSBfdmVjMl90ZW1wLngsIF92ZWMyX3RlbXAyLnkgLSBfdmVjMl90ZW1wLnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogISNlbiBMYXllciBvcmllbnRhdGlvbiwgd2hpY2ggaXMgdGhlIHNhbWUgYXMgdGhlIG1hcCBvcmllbnRhdGlvbi5cbiAgICAgKiAhI3poIOiOt+WPliBMYXllciDmlrnlkJEo5ZCM5Zyw5Zu+5pa55ZCRKeOAglxuICAgICAqIEBtZXRob2QgZ2V0TGF5ZXJPcmllbnRhdGlvblxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGxldCBvcmllbnRhdGlvbiA9IHRpbGVkTGF5ZXIuZ2V0TGF5ZXJPcmllbnRhdGlvbigpO1xuICAgICAqIGNjLmxvZyhcIkxheWVyIE9yaWVudGF0aW9uOiBcIiArIG9yaWVudGF0aW9uKTtcbiAgICAgKi9cbiAgICBnZXRMYXllck9yaWVudGF0aW9uOiBmdW5jdGlvbiBnZXRMYXllck9yaWVudGF0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGF5ZXJPcmllbnRhdGlvbjtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIHByb3BlcnRpZXMgZnJvbSB0aGUgbGF5ZXIuIFRoZXkgY2FuIGJlIGFkZGVkIHVzaW5nIFRpbGVkLlxuICAgICAqICEjemgg6I635Y+WIGxheWVyIOeahOWxnuaAp++8jOWPr+S7peS9v+eUqCBUaWxlZCDnvJbovpHlmajmt7vliqDlsZ7mgKfjgIJcbiAgICAgKiBAbWV0aG9kIGdldFByb3BlcnRpZXNcbiAgICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGxldCBwcm9wZXJ0aWVzID0gdGlsZWRMYXllci5nZXRQcm9wZXJ0aWVzKCk7XG4gICAgICogY2MubG9nKFwiUHJvcGVydGllczogXCIgKyBwcm9wZXJ0aWVzKTtcbiAgICAgKi9cbiAgICBnZXRQcm9wZXJ0aWVzOiBmdW5jdGlvbiBnZXRQcm9wZXJ0aWVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvcGVydGllcztcbiAgICB9LFxuICAgIF91cGRhdGVWZXJ0aWNlczogZnVuY3Rpb24gX3VwZGF0ZVZlcnRpY2VzKCkge1xuICAgICAgICB2YXIgVGlsZWRNYXAgPSBjYy5UaWxlZE1hcDtcbiAgICAgICAgdmFyIFRpbGVGbGFnID0gVGlsZWRNYXAuVGlsZUZsYWc7XG4gICAgICAgIHZhciBGTElQUEVEX01BU0sgPSBUaWxlRmxhZy5GTElQUEVEX01BU0s7XG4gICAgICAgIHZhciBTdGFnZ2VyQXhpcyA9IFRpbGVkTWFwLlN0YWdnZXJBeGlzO1xuICAgICAgICB2YXIgT3JpZW50YXRpb24gPSBUaWxlZE1hcC5PcmllbnRhdGlvbjtcblxuICAgICAgICB2YXIgdmVydGljZXMgPSB0aGlzLl92ZXJ0aWNlcztcbiAgICAgICAgdmVydGljZXMubGVuZ3RoID0gMDtcblxuICAgICAgICB2YXIgbGF5ZXJPcmllbnRhdGlvbiA9IHRoaXMuX2xheWVyT3JpZW50YXRpb24sXG4gICAgICAgICAgICB0aWxlcyA9IHRoaXMuX3RpbGVzO1xuXG4gICAgICAgIGlmICghdGlsZXMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByaWdodFRvcCA9IHRoaXMuX3JpZ2h0VG9wO1xuICAgICAgICByaWdodFRvcC5yb3cgPSAtMTtcbiAgICAgICAgcmlnaHRUb3AuY29sID0gLTE7XG5cbiAgICAgICAgdmFyIG1hcHR3ID0gdGhpcy5fbWFwVGlsZVNpemUud2lkdGgsXG4gICAgICAgICAgICBtYXB0aCA9IHRoaXMuX21hcFRpbGVTaXplLmhlaWdodCxcbiAgICAgICAgICAgIG1hcHR3MiA9IG1hcHR3ICogMC41LFxuICAgICAgICAgICAgbWFwdGgyID0gbWFwdGggKiAwLjUsXG4gICAgICAgICAgICByb3dzID0gdGhpcy5fbGF5ZXJTaXplLmhlaWdodCxcbiAgICAgICAgICAgIGNvbHMgPSB0aGlzLl9sYXllclNpemUud2lkdGgsXG4gICAgICAgICAgICBncmlkcyA9IHRoaXMuX3RleEdyaWRzO1xuXG4gICAgICAgIHZhciBjb2xPZmZzZXQgPSAwLFxuICAgICAgICAgICAgZ2lkID0gdm9pZCAwLFxuICAgICAgICAgICAgZ3JpZCA9IHZvaWQgMCxcbiAgICAgICAgICAgIGxlZnQgPSB2b2lkIDAsXG4gICAgICAgICAgICBib3R0b20gPSB2b2lkIDAsXG4gICAgICAgICAgICBheGlzID0gdm9pZCAwLFxuICAgICAgICAgICAgZGlmZlgxID0gdm9pZCAwLFxuICAgICAgICAgICAgZGlmZlkxID0gdm9pZCAwLFxuICAgICAgICAgICAgb2RkX2V2ZW4gPSB2b2lkIDAsXG4gICAgICAgICAgICBkaWZmWDIgPSB2b2lkIDAsXG4gICAgICAgICAgICBkaWZmWTIgPSB2b2lkIDA7XG5cbiAgICAgICAgaWYgKGxheWVyT3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLkhFWCkge1xuICAgICAgICAgICAgYXhpcyA9IHRoaXMuX3N0YWdnZXJBeGlzO1xuICAgICAgICAgICAgZGlmZlgxID0gdGhpcy5fZGlmZlgxO1xuICAgICAgICAgICAgZGlmZlkxID0gdGhpcy5fZGlmZlkxO1xuICAgICAgICAgICAgb2RkX2V2ZW4gPSB0aGlzLl9vZGRfZXZlbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjdWxsaW5nQ29sID0gMCxcbiAgICAgICAgICAgIGN1bGxpbmdSb3cgPSAwO1xuICAgICAgICB2YXIgdGlsZU9mZnNldCA9IG51bGwsXG4gICAgICAgICAgICBncmlkR0lEID0gMDtcblxuICAgICAgICB0aGlzLl90b3BPZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLl9kb3duT2Zmc2V0ID0gMDtcbiAgICAgICAgdGhpcy5fbGVmdE9mZnNldCA9IDA7XG4gICAgICAgIHRoaXMuX3JpZ2h0T2Zmc2V0ID0gMDtcbiAgICAgICAgdGhpcy5faGFzQW5pR3JpZCA9IGZhbHNlO1xuXG4gICAgICAgIC8vIGdyaWQgYm9yZGVyXG4gICAgICAgIHZhciB0b3BCb3JkZXIgPSAwLFxuICAgICAgICAgICAgZG93bkJvcmRlciA9IDAsXG4gICAgICAgICAgICBsZWZ0Qm9yZGVyID0gMCxcbiAgICAgICAgICAgIHJpZ2h0Qm9yZGVyID0gMDtcblxuICAgICAgICBmb3IgKHZhciByb3cgPSAwOyByb3cgPCByb3dzOyArK3Jvdykge1xuICAgICAgICAgICAgZm9yICh2YXIgY29sID0gMDsgY29sIDwgY29sczsgKytjb2wpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBjb2xPZmZzZXQgKyBjb2w7XG4gICAgICAgICAgICAgICAgZ2lkID0gdGlsZXNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIGdyaWRHSUQgPSAoZ2lkICYgRkxJUFBFRF9NQVNLKSA+Pj4gMDtcbiAgICAgICAgICAgICAgICBncmlkID0gZ3JpZHNbZ3JpZEdJRF07XG5cbiAgICAgICAgICAgICAgICAvLyBpZiBoYXMgYW5pbWF0aW9uLCBncmlkIG11c3QgYmUgdXBkYXRlZCBwZXIgZnJhbWVcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYW5pbWF0aW9uc1tncmlkR0lEXSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYXNBbmlHcmlkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIWdyaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChsYXllck9yaWVudGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGxlZnQgdG9wIHRvIHJpZ2h0IGRvd21cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBPcmllbnRhdGlvbi5PUlRITzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1bGxpbmdDb2wgPSBjb2w7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdWxsaW5nUm93ID0gcm93cyAtIHJvdyAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gY3VsbGluZ0NvbCAqIG1hcHR3O1xuICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tID0gY3VsbGluZ1JvdyAqIG1hcHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJpZ2h0IHRvcCB0byBsZWZ0IGRvd25cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBPcmllbnRhdGlvbi5JU086XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBub3QgY29uc2lkZXIgYWJvdXQgY29sLCB0aGVuIGxlZnQgaXMgJ3cvMiAqIChyb3dzIC0gcm93IC0gMSknXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBjb25zaWRlciBhYm91dCBjb2wgdGhlbiBsZWZ0IG11c3QgYWRkICd3LzIgKiBjb2wnXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzbyBsZWZ0IGlzICd3LzIgKiAocm93cyAtIHJvdyAtIDEpICsgdy8yICogY29sJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29tYmluZSBleHByZXNzaW9uIGlzICd3LzIgKiAocm93cyAtIHJvdyArIGNvbCAtMSknXG4gICAgICAgICAgICAgICAgICAgICAgICBjdWxsaW5nQ29sID0gcm93cyArIGNvbCAtIHJvdyAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBub3QgY29uc2lkZXIgYWJvdXQgcm93LCB0aGVuIGJvdHRvbSBpcyAnaC8yICogKGNvbHMgLSBjb2wgLTEpJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgY29uc2lkZXIgYWJvdXQgcm93IHRoZW4gYm90dG9tIG11c3QgYWRkICdoLzIgKiAocm93cyAtIHJvdyAtIDEpJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc28gYm90dG9tIGlzICdoLzIgKiAoY29scyAtIGNvbCAtMSkgKyBoLzIgKiAocm93cyAtIHJvdyAtIDEpJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29tYmluZSBleHByZXNzaW9ubiBpcyAnaC8yICogKHJvd3MgKyBjb2xzIC0gY29sIC0gcm93IC0gMiknXG4gICAgICAgICAgICAgICAgICAgICAgICBjdWxsaW5nUm93ID0gcm93cyArIGNvbHMgLSBjb2wgLSByb3cgLSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCA9IG1hcHR3MiAqIGN1bGxpbmdDb2w7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3R0b20gPSBtYXB0aDIgKiBjdWxsaW5nUm93O1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIC8vIGxlZnQgdG9wIHRvIHJpZ2h0IGRvd21cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBPcmllbnRhdGlvbi5IRVg6XG4gICAgICAgICAgICAgICAgICAgICAgICBkaWZmWDIgPSBheGlzID09PSBTdGFnZ2VyQXhpcy5TVEFHR0VSQVhJU19ZICYmIHJvdyAlIDIgPT09IDEgPyBtYXB0dzIgKiBvZGRfZXZlbiA6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaWZmWTIgPSBheGlzID09PSBTdGFnZ2VyQXhpcy5TVEFHR0VSQVhJU19YICYmIGNvbCAlIDIgPT09IDEgPyBtYXB0aDIgKiAtb2RkX2V2ZW4gOiAwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gY29sICogKG1hcHR3IC0gZGlmZlgxKSArIGRpZmZYMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbSA9IChyb3dzIC0gcm93IC0gMSkgKiAobWFwdGggLSBkaWZmWTEpICsgZGlmZlkyO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VsbGluZ0NvbCA9IGNvbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1bGxpbmdSb3cgPSByb3dzIC0gcm93IC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciByb3dEYXRhID0gdmVydGljZXNbY3VsbGluZ1Jvd10gPSB2ZXJ0aWNlc1tjdWxsaW5nUm93XSB8fCB7IG1pbkNvbDogMCwgbWF4Q29sOiAwIH07XG4gICAgICAgICAgICAgICAgdmFyIGNvbERhdGEgPSByb3dEYXRhW2N1bGxpbmdDb2xdID0gcm93RGF0YVtjdWxsaW5nQ29sXSB8fCB7fTtcblxuICAgICAgICAgICAgICAgIC8vIHJlY29yZCBlYWNoIHJvdyByYW5nZSwgaXQgd2lsbCBmYXN0ZXIgd2hlbiBjdWxsaW5nIGdyaWRcbiAgICAgICAgICAgICAgICBpZiAocm93RGF0YS5taW5Db2wgPiBjdWxsaW5nQ29sKSB7XG4gICAgICAgICAgICAgICAgICAgIHJvd0RhdGEubWluQ29sID0gY3VsbGluZ0NvbDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocm93RGF0YS5tYXhDb2wgPCBjdWxsaW5nQ29sKSB7XG4gICAgICAgICAgICAgICAgICAgIHJvd0RhdGEubWF4Q29sID0gY3VsbGluZ0NvbDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyByZWNvcmQgbWF4IHJlY3QsIHdoZW4gdmlld1BvcnQgaXMgYmlnZ2VyIHRoYW4gbGF5ZXIsIGNhbiBtYWtlIGl0IHNtYWxsZXJcbiAgICAgICAgICAgICAgICBpZiAocmlnaHRUb3Aucm93IDwgY3VsbGluZ1Jvdykge1xuICAgICAgICAgICAgICAgICAgICByaWdodFRvcC5yb3cgPSBjdWxsaW5nUm93O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChyaWdodFRvcC5jb2wgPCBjdWxsaW5nQ29sKSB7XG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0VG9wLmNvbCA9IGN1bGxpbmdDb2w7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gX29mZnNldCBpcyB3aG9sZSBsYXllciBvZmZzZXRcbiAgICAgICAgICAgICAgICAvLyB0aWxlT2Zmc2V0IGlzIHRpbGVzZXQgb2Zmc2V0IHdoaWNoIGlzIHJlbGF0ZWQgdG8gZWFjaCBncmlkXG4gICAgICAgICAgICAgICAgLy8gdGlsZU9mZnNldCBjb29yZGluYXRlIHN5c3RlbSdzIHkgYXhpcyBpcyBvcHBvc2l0ZSB3aXRoIGVuZ2luZSdzIHkgYXhpcy5cbiAgICAgICAgICAgICAgICB0aWxlT2Zmc2V0ID0gZ3JpZC50aWxlc2V0LnRpbGVPZmZzZXQ7XG4gICAgICAgICAgICAgICAgbGVmdCArPSB0aGlzLl9vZmZzZXQueCArIHRpbGVPZmZzZXQueDtcbiAgICAgICAgICAgICAgICBib3R0b20gKz0gdGhpcy5fb2Zmc2V0LnkgLSB0aWxlT2Zmc2V0Lnk7XG5cbiAgICAgICAgICAgICAgICB0b3BCb3JkZXIgPSAtdGlsZU9mZnNldC55ICsgZ3JpZC50aWxlc2V0Ll90aWxlU2l6ZS5oZWlnaHQgLSBtYXB0aDtcbiAgICAgICAgICAgICAgICB0b3BCb3JkZXIgPSB0b3BCb3JkZXIgPCAwID8gMCA6IHRvcEJvcmRlcjtcbiAgICAgICAgICAgICAgICBkb3duQm9yZGVyID0gdGlsZU9mZnNldC55IDwgMCA/IDAgOiB0aWxlT2Zmc2V0Lnk7XG4gICAgICAgICAgICAgICAgbGVmdEJvcmRlciA9IC10aWxlT2Zmc2V0LnggPCAwID8gMCA6IC10aWxlT2Zmc2V0Lng7XG4gICAgICAgICAgICAgICAgcmlnaHRCb3JkZXIgPSB0aWxlT2Zmc2V0LnggKyBncmlkLnRpbGVzZXQuX3RpbGVTaXplLndpZHRoIC0gbWFwdHc7XG4gICAgICAgICAgICAgICAgcmlnaHRCb3JkZXIgPSByaWdodEJvcmRlciA8IDAgPyAwIDogcmlnaHRCb3JkZXI7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcmlnaHRPZmZzZXQgPCBsZWZ0Qm9yZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JpZ2h0T2Zmc2V0ID0gbGVmdEJvcmRlcjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbGVmdE9mZnNldCA8IHJpZ2h0Qm9yZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xlZnRPZmZzZXQgPSByaWdodEJvcmRlcjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdG9wT2Zmc2V0IDwgZG93bkJvcmRlcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90b3BPZmZzZXQgPSBkb3duQm9yZGVyO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9kb3duT2Zmc2V0IDwgdG9wQm9yZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rvd25PZmZzZXQgPSB0b3BCb3JkZXI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29sRGF0YS5sZWZ0ID0gbGVmdDtcbiAgICAgICAgICAgICAgICBjb2xEYXRhLmJvdHRvbSA9IGJvdHRvbTtcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGluZGV4IGlzIHRpbGVkbWFwIGdyaWQgaW5kZXhcbiAgICAgICAgICAgICAgICBjb2xEYXRhLmluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb2xPZmZzZXQgKz0gY29scztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl92ZXJ0aWNlc0RpcnR5ID0gZmFsc2U7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIEdldCB0aGUgVGlsZWRUaWxlIHdpdGggdGhlIHRpbGUgY29vcmRpbmF0ZS48YnIvPlxuICAgICAqIElmIHRoZXJlIGlzIG5vIHRpbGUgaW4gdGhlIHNwZWNpZmllZCBjb29yZGluYXRlIGFuZCBmb3JjZUNyZWF0ZSBwYXJhbWV0ZXIgaXMgdHJ1ZSwgPGJyLz5cbiAgICAgKiB0aGVuIHdpbGwgY3JlYXRlIGEgbmV3IFRpbGVkVGlsZSBhdCB0aGUgY29vcmRpbmF0ZS5cbiAgICAgKiBUaGUgcmVuZGVyZXIgd2lsbCByZW5kZXIgdGhlIHRpbGUgd2l0aCB0aGUgcm90YXRpb24sIHNjYWxlLCBwb3NpdGlvbiBhbmQgY29sb3IgcHJvcGVydHkgb2YgdGhlIFRpbGVkVGlsZS5cbiAgICAgKiAhI3poXG4gICAgICog6YCa6L+H5oyH5a6a55qEIHRpbGUg5Z2Q5qCH6I635Y+W5a+55bqU55qEIFRpbGVkVGlsZeOAgiA8YnIvPlxuICAgICAqIOWmguaenOaMh+WumueahOWdkOagh+ayoeaciSB0aWxl77yM5bm25LiU6K6+572u5LqGIGZvcmNlQ3JlYXRlIOmCo+S5iOWwhuS8muWcqOaMh+WumueahOWdkOagh+WIm+W7uuS4gOS4quaWsOeahCBUaWxlZFRpbGUg44CCPGJyLz5cbiAgICAgKiDlnKjmuLLmn5Pov5nkuKogdGlsZSDnmoTml7blgJnvvIzlsIbkvJrkvb/nlKggVGlsZWRUaWxlIOeahOiKgueCueeahOaXi+i9rOOAgee8qeaUvuOAgeS9jeenu+OAgeminOiJsuWxnuaAp+OAgjxici8+XG4gICAgICogQG1ldGhvZCBnZXRUaWxlZFRpbGVBdFxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0geFxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0geVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZm9yY2VDcmVhdGVcbiAgICAgKiBAcmV0dXJuIHtjYy5UaWxlZFRpbGV9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBsZXQgdGlsZSA9IHRpbGVkTGF5ZXIuZ2V0VGlsZWRUaWxlQXQoMTAwLCAxMDAsIHRydWUpO1xuICAgICAqIGNjLmxvZyh0aWxlKTtcbiAgICAgKi9cbiAgICBnZXRUaWxlZFRpbGVBdDogZnVuY3Rpb24gZ2V0VGlsZWRUaWxlQXQoeCwgeSwgZm9yY2VDcmVhdGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzSW52YWxpZFBvc2l0aW9uKHgsIHkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaWxlZExheWVyLmdldFRpbGVkVGlsZUF0OiBpbnZhbGlkIHBvc2l0aW9uXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fdGlsZXMpIHtcbiAgICAgICAgICAgIGNjLmxvZ0lEKDcyMzYpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaW5kZXggPSBNYXRoLmZsb29yKHgpICsgTWF0aC5mbG9vcih5KSAqIHRoaXMuX2xheWVyU2l6ZS53aWR0aDtcbiAgICAgICAgdmFyIHRpbGUgPSB0aGlzLl90aWxlZFRpbGVzW2luZGV4XTtcbiAgICAgICAgaWYgKCF0aWxlICYmIGZvcmNlQ3JlYXRlKSB7XG4gICAgICAgICAgICB2YXIgbm9kZSA9IG5ldyBjYy5Ob2RlKCk7XG4gICAgICAgICAgICB0aWxlID0gbm9kZS5hZGRDb21wb25lbnQoY2MuVGlsZWRUaWxlKTtcbiAgICAgICAgICAgIHRpbGUuX3ggPSB4O1xuICAgICAgICAgICAgdGlsZS5feSA9IHk7XG4gICAgICAgICAgICB0aWxlLl9sYXllciA9IHRoaXM7XG4gICAgICAgICAgICB0aWxlLl91cGRhdGVJbmZvKCk7XG4gICAgICAgICAgICBub2RlLnBhcmVudCA9IHRoaXMubm9kZTtcbiAgICAgICAgICAgIHJldHVybiB0aWxlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aWxlO1xuICAgIH0sXG5cblxuICAgIC8qKiBcbiAgICAgKiAhI2VuXG4gICAgICogQ2hhbmdlIHRpbGUgdG8gVGlsZWRUaWxlIGF0IHRoZSBzcGVjaWZpZWQgY29vcmRpbmF0ZS5cbiAgICAgKiAhI3poXG4gICAgICog5bCG5oyH5a6a55qEIHRpbGUg5Z2Q5qCH5pu/5o2i5Li65oyH5a6a55qEIFRpbGVkVGlsZeOAglxuICAgICAqIEBtZXRob2Qgc2V0VGlsZWRUaWxlQXRcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IHhcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IHlcbiAgICAgKiBAcGFyYW0ge2NjLlRpbGVkVGlsZX0gdGlsZWRUaWxlXG4gICAgICogQHJldHVybiB7Y2MuVGlsZWRUaWxlfVxuICAgICAqL1xuICAgIHNldFRpbGVkVGlsZUF0OiBmdW5jdGlvbiBzZXRUaWxlZFRpbGVBdCh4LCB5LCB0aWxlZFRpbGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzSW52YWxpZFBvc2l0aW9uKHgsIHkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaWxlZExheWVyLnNldFRpbGVkVGlsZUF0OiBpbnZhbGlkIHBvc2l0aW9uXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fdGlsZXMpIHtcbiAgICAgICAgICAgIGNjLmxvZ0lEKDcyMzYpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaW5kZXggPSBNYXRoLmZsb29yKHgpICsgTWF0aC5mbG9vcih5KSAqIHRoaXMuX2xheWVyU2l6ZS53aWR0aDtcbiAgICAgICAgdGhpcy5fdGlsZWRUaWxlc1tpbmRleF0gPSB0aWxlZFRpbGU7XG4gICAgICAgIHRoaXMuX2N1bGxpbmdEaXJ0eSA9IHRydWU7XG5cbiAgICAgICAgaWYgKHRpbGVkVGlsZSkge1xuICAgICAgICAgICAgdGhpcy5faGFzVGlsZWROb2RlR3JpZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9oYXNUaWxlZE5vZGVHcmlkID0gdGhpcy5fdGlsZWRUaWxlcy5zb21lKGZ1bmN0aW9uICh0aWxlZE5vZGUsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhdGlsZWROb2RlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGlsZWRUaWxlO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqICEjZW4gUmV0dXJuIHRleHR1cmUuXG4gICAgICogISN6aCDojrflj5bnurnnkIbjgIJcbiAgICAgKiBAbWV0aG9kIGdldFRleHR1cmVcbiAgICAgKiBAcGFyYW0gaW5kZXggVGhlIGluZGV4IG9mIHRleHR1cmVzXG4gICAgICogQHJldHVybiB7VGV4dHVyZTJEfVxuICAgICAqL1xuICAgIGdldFRleHR1cmU6IGZ1bmN0aW9uIGdldFRleHR1cmUoaW5kZXgpIHtcbiAgICAgICAgaW5kZXggPSBpbmRleCB8fCAwO1xuICAgICAgICBpZiAodGhpcy5fdGV4dHVyZXMgJiYgaW5kZXggPj0gMCAmJiB0aGlzLl90ZXh0dXJlcy5sZW5ndGggPiBpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RleHR1cmVzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFJldHVybiB0ZXh0dXJlLlxuICAgICAqICEjemgg6I635Y+W57q555CG44CCXG4gICAgICogQG1ldGhvZCBnZXRUZXh0dXJlc1xuICAgICAqIEByZXR1cm4ge1RleHR1cmUyRH1cbiAgICAgKi9cbiAgICBnZXRUZXh0dXJlczogZnVuY3Rpb24gZ2V0VGV4dHVyZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90ZXh0dXJlcztcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFNldCB0aGUgdGV4dHVyZS5cbiAgICAgKiAhI3poIOiuvue9rue6ueeQhuOAglxuICAgICAqIEBtZXRob2Qgc2V0VGV4dHVyZVxuICAgICAqIEBwYXJhbSB7VGV4dHVyZTJEfSB0ZXh0dXJlXG4gICAgICovXG4gICAgc2V0VGV4dHVyZTogZnVuY3Rpb24gc2V0VGV4dHVyZSh0ZXh0dXJlKSB7XG4gICAgICAgIHRoaXMuc2V0VGV4dHVyZXMoW3RleHR1cmVdKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFNldCB0aGUgdGV4dHVyZS5cbiAgICAgKiAhI3poIOiuvue9rue6ueeQhuOAglxuICAgICAqIEBtZXRob2Qgc2V0VGV4dHVyZVxuICAgICAqIEBwYXJhbSB7VGV4dHVyZTJEfSB0ZXh0dXJlc1xuICAgICAqL1xuICAgIHNldFRleHR1cmVzOiBmdW5jdGlvbiBzZXRUZXh0dXJlcyh0ZXh0dXJlcykge1xuICAgICAgICB0aGlzLl90ZXh0dXJlcyA9IHRleHR1cmVzO1xuICAgICAgICB0aGlzLl9hY3RpdmF0ZU1hdGVyaWFsKCk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogISNlbiBHZXRzIGxheWVyIHNpemUuXG4gICAgICogISN6aCDojrflvpflsYLlpKflsI/jgIJcbiAgICAgKiBAbWV0aG9kIGdldExheWVyU2l6ZVxuICAgICAqIEByZXR1cm4ge1NpemV9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBsZXQgc2l6ZSA9IHRpbGVkTGF5ZXIuZ2V0TGF5ZXJTaXplKCk7XG4gICAgICogY2MubG9nKFwibGF5ZXIgc2l6ZTogXCIgKyBzaXplKTtcbiAgICAgKi9cbiAgICBnZXRMYXllclNpemU6IGZ1bmN0aW9uIGdldExheWVyU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xheWVyU2l6ZTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFNpemUgb2YgdGhlIG1hcCdzIHRpbGUgKGNvdWxkIGJlIGRpZmZlcmVudCBmcm9tIHRoZSB0aWxlJ3Mgc2l6ZSkuXG4gICAgICogISN6aCDojrflj5YgdGlsZSDnmoTlpKflsI8oIHRpbGUg55qE5aSn5bCP5Y+v6IO95Lya5pyJ5omA5LiN5ZCMKeOAglxuICAgICAqIEBtZXRob2QgZ2V0TWFwVGlsZVNpemVcbiAgICAgKiBAcmV0dXJuIHtTaXplfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogbGV0IG1hcFRpbGVTaXplID0gdGlsZWRMYXllci5nZXRNYXBUaWxlU2l6ZSgpO1xuICAgICAqIGNjLmxvZyhcIk1hcFRpbGUgc2l6ZTogXCIgKyBtYXBUaWxlU2l6ZSk7XG4gICAgICovXG4gICAgZ2V0TWFwVGlsZVNpemU6IGZ1bmN0aW9uIGdldE1hcFRpbGVTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFwVGlsZVNpemU7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogISNlbiBHZXRzIFRpbGUgc2V0IGZpcnN0IGluZm9ybWF0aW9uIGZvciB0aGUgbGF5ZXIuXG4gICAgICogISN6aCDojrflj5YgbGF5ZXIg57Si5byV5L2N572u5Li6MOeahCBUaWxlc2V0IOS/oeaBr+OAglxuICAgICAqIEBtZXRob2QgZ2V0VGlsZVNldFxuICAgICAqIEBwYXJhbSBpbmRleCBUaGUgaW5kZXggb2YgdGlsZXNldHNcbiAgICAgKiBAcmV0dXJuIHtUTVhUaWxlc2V0SW5mb31cbiAgICAgKi9cbiAgICBnZXRUaWxlU2V0OiBmdW5jdGlvbiBnZXRUaWxlU2V0KGluZGV4KSB7XG4gICAgICAgIGluZGV4ID0gaW5kZXggfHwgMDtcbiAgICAgICAgaWYgKHRoaXMuX3RpbGVzZXRzICYmIGluZGV4ID49IDAgJiYgdGhpcy5fdGlsZXNldHMubGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90aWxlc2V0c1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogISNlbiBHZXRzIHRpbGUgc2V0IGFsbCBpbmZvcm1hdGlvbiBmb3IgdGhlIGxheWVyLlxuICAgICAqICEjemgg6I635Y+WIGxheWVyIOaJgOacieeahCBUaWxlc2V0IOS/oeaBr+OAglxuICAgICAqIEBtZXRob2QgZ2V0VGlsZVNldFxuICAgICAqIEByZXR1cm4ge1RNWFRpbGVzZXRJbmZvfVxuICAgICAqL1xuICAgIGdldFRpbGVTZXRzOiBmdW5jdGlvbiBnZXRUaWxlU2V0cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RpbGVzZXRzO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqICEjZW4gU2V0cyB0aWxlIHNldCBpbmZvcm1hdGlvbiBmb3IgdGhlIGxheWVyLlxuICAgICAqICEjemgg6K6+572uIGxheWVyIOeahCB0aWxlc2V0IOS/oeaBr+OAglxuICAgICAqIEBtZXRob2Qgc2V0VGlsZVNldFxuICAgICAqIEBwYXJhbSB7VE1YVGlsZXNldEluZm99IHRpbGVzZXRcbiAgICAgKi9cbiAgICBzZXRUaWxlU2V0OiBmdW5jdGlvbiBzZXRUaWxlU2V0KHRpbGVzZXQpIHtcbiAgICAgICAgdGhpcy5zZXRUaWxlU2V0cyhbdGlsZXNldF0pO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqICEjZW4gU2V0cyBUaWxlIHNldCBpbmZvcm1hdGlvbiBmb3IgdGhlIGxheWVyLlxuICAgICAqICEjemgg6K6+572uIGxheWVyIOeahCBUaWxlc2V0IOS/oeaBr+OAglxuICAgICAqIEBtZXRob2Qgc2V0VGlsZVNldHNcbiAgICAgKiBAcGFyYW0ge1RNWFRpbGVzZXRJbmZvfSB0aWxlc2V0c1xuICAgICAqL1xuICAgIHNldFRpbGVTZXRzOiBmdW5jdGlvbiBzZXRUaWxlU2V0cyh0aWxlc2V0cykge1xuICAgICAgICB0aGlzLl90aWxlc2V0cyA9IHRpbGVzZXRzO1xuICAgICAgICB2YXIgdGV4dHVyZXMgPSB0aGlzLl90ZXh0dXJlcyA9IFtdO1xuICAgICAgICB2YXIgdGV4R3JpZHMgPSB0aGlzLl90ZXhHcmlkcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRpbGVzZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdGlsZXNldCA9IHRpbGVzZXRzW2ldO1xuICAgICAgICAgICAgaWYgKHRpbGVzZXQpIHtcbiAgICAgICAgICAgICAgICB0ZXh0dXJlc1tpXSA9IHRpbGVzZXQuc291cmNlSW1hZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjYy5UaWxlZE1hcC5sb2FkQWxsVGV4dHVyZXModGV4dHVyZXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgbCA9IHRpbGVzZXRzLmxlbmd0aDsgX2kgPCBsOyArK19pKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRpbGVzZXRJbmZvID0gdGlsZXNldHNbX2ldO1xuICAgICAgICAgICAgICAgIGlmICghdGlsZXNldEluZm8pIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNjLlRpbGVkTWFwLmZpbGxUZXh0dXJlR3JpZHModGlsZXNldEluZm8sIHRleEdyaWRzLCBfaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9wcmVwYXJlVG9SZW5kZXIoKTtcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICB9LFxuICAgIF90cmF2ZXJzZUFsbEdyaWQ6IGZ1bmN0aW9uIF90cmF2ZXJzZUFsbEdyaWQoKSB7XG4gICAgICAgIHZhciB0aWxlcyA9IHRoaXMuX3RpbGVzO1xuICAgICAgICB2YXIgdGV4R3JpZHMgPSB0aGlzLl90ZXhHcmlkcztcbiAgICAgICAgdmFyIHRpbGVzZXRJbmRleEFyciA9IHRoaXMuX3RpbGVzZXRJbmRleEFycjtcbiAgICAgICAgdmFyIHRpbGVzZXRJZHhNYXAgPSB7fTtcblxuICAgICAgICB2YXIgVGlsZWRNYXAgPSBjYy5UaWxlZE1hcDtcbiAgICAgICAgdmFyIFRpbGVGbGFnID0gVGlsZWRNYXAuVGlsZUZsYWc7XG4gICAgICAgIHZhciBGTElQUEVEX01BU0sgPSBUaWxlRmxhZy5GTElQUEVEX01BU0s7XG5cbiAgICAgICAgdGlsZXNldEluZGV4QXJyLmxlbmd0aCA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBnaWQgPSB0aWxlc1tpXTtcbiAgICAgICAgICAgIGlmIChnaWQgPT09IDApIGNvbnRpbnVlO1xuICAgICAgICAgICAgZ2lkID0gKGdpZCAmIEZMSVBQRURfTUFTSykgPj4+IDA7XG4gICAgICAgICAgICB2YXIgZ3JpZCA9IHRleEdyaWRzW2dpZF07XG4gICAgICAgICAgICBpZiAoIWdyaWQpIHtcbiAgICAgICAgICAgICAgICBjYy5lcnJvcihcIkNDVGlsZWRMYXllcjpfdHJhdmVyc2VBbGxHcmlkIGdyaWQgaXMgbnVsbCwgZ2lkIGlzOlwiLCBnaWQpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHRpbGVzZXRJZHggPSBncmlkLnRleElkO1xuICAgICAgICAgICAgaWYgKHRpbGVzZXRJZHhNYXBbdGlsZXNldElkeF0pIGNvbnRpbnVlO1xuICAgICAgICAgICAgdGlsZXNldElkeE1hcFt0aWxlc2V0SWR4XSA9IHRydWU7XG4gICAgICAgICAgICB0aWxlc2V0SW5kZXhBcnIucHVzaCh0aWxlc2V0SWR4KTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgX2luaXQ6IGZ1bmN0aW9uIF9pbml0KGxheWVySW5mbywgbWFwSW5mbywgdGlsZXNldHMsIHRleHR1cmVzLCB0ZXhHcmlkcykge1xuXG4gICAgICAgIHRoaXMuX2N1bGxpbmdEaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuX2xheWVySW5mbyA9IGxheWVySW5mbztcbiAgICAgICAgdGhpcy5fbWFwSW5mbyA9IG1hcEluZm87XG5cbiAgICAgICAgdmFyIHNpemUgPSBsYXllckluZm8uX2xheWVyU2l6ZTtcblxuICAgICAgICAvLyBsYXllckluZm9cbiAgICAgICAgdGhpcy5fbGF5ZXJOYW1lID0gbGF5ZXJJbmZvLm5hbWU7XG4gICAgICAgIHRoaXMuX3RpbGVzID0gbGF5ZXJJbmZvLl90aWxlcztcbiAgICAgICAgdGhpcy5fcHJvcGVydGllcyA9IGxheWVySW5mby5wcm9wZXJ0aWVzO1xuICAgICAgICB0aGlzLl9sYXllclNpemUgPSBzaXplO1xuICAgICAgICB0aGlzLl9taW5HSUQgPSBsYXllckluZm8uX21pbkdJRDtcbiAgICAgICAgdGhpcy5fbWF4R0lEID0gbGF5ZXJJbmZvLl9tYXhHSUQ7XG4gICAgICAgIHRoaXMuX29wYWNpdHkgPSBsYXllckluZm8uX29wYWNpdHk7XG4gICAgICAgIHRoaXMuX3JlbmRlck9yZGVyID0gbWFwSW5mby5yZW5kZXJPcmRlcjtcbiAgICAgICAgdGhpcy5fc3RhZ2dlckF4aXMgPSBtYXBJbmZvLmdldFN0YWdnZXJBeGlzKCk7XG4gICAgICAgIHRoaXMuX3N0YWdnZXJJbmRleCA9IG1hcEluZm8uZ2V0U3RhZ2dlckluZGV4KCk7XG4gICAgICAgIHRoaXMuX2hleFNpZGVMZW5ndGggPSBtYXBJbmZvLmdldEhleFNpZGVMZW5ndGgoKTtcbiAgICAgICAgdGhpcy5fYW5pbWF0aW9ucyA9IG1hcEluZm8uZ2V0VGlsZUFuaW1hdGlvbnMoKTtcblxuICAgICAgICAvLyB0aWxlc2V0c1xuICAgICAgICB0aGlzLl90aWxlc2V0cyA9IHRpbGVzZXRzO1xuICAgICAgICAvLyB0ZXh0dXJlc1xuICAgICAgICB0aGlzLl90ZXh0dXJlcyA9IHRleHR1cmVzO1xuICAgICAgICAvLyBncmlkIHRleHR1cmVcbiAgICAgICAgdGhpcy5fdGV4R3JpZHMgPSB0ZXhHcmlkcztcblxuICAgICAgICAvLyBtYXBJbmZvXG4gICAgICAgIHRoaXMuX2xheWVyT3JpZW50YXRpb24gPSBtYXBJbmZvLm9yaWVudGF0aW9uO1xuICAgICAgICB0aGlzLl9tYXBUaWxlU2l6ZSA9IG1hcEluZm8uZ2V0VGlsZVNpemUoKTtcblxuICAgICAgICBpZiAodGhpcy5fbGF5ZXJPcmllbnRhdGlvbiA9PT0gY2MuVGlsZWRNYXAuT3JpZW50YXRpb24uSEVYKSB7XG4gICAgICAgICAgICAvLyBoYW5kbGUgaGV4IG1hcFxuICAgICAgICAgICAgdmFyIFRpbGVkTWFwID0gY2MuVGlsZWRNYXA7XG4gICAgICAgICAgICB2YXIgU3RhZ2dlckF4aXMgPSBUaWxlZE1hcC5TdGFnZ2VyQXhpcztcbiAgICAgICAgICAgIHZhciBTdGFnZ2VySW5kZXggPSBUaWxlZE1hcC5TdGFnZ2VySW5kZXg7XG5cbiAgICAgICAgICAgIHZhciBtYXB0dyA9IHRoaXMuX21hcFRpbGVTaXplLndpZHRoO1xuICAgICAgICAgICAgdmFyIG1hcHRoID0gdGhpcy5fbWFwVGlsZVNpemUuaGVpZ2h0O1xuICAgICAgICAgICAgdmFyIHdpZHRoID0gMCxcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSAwO1xuXG4gICAgICAgICAgICB0aGlzLl9vZGRfZXZlbiA9IHRoaXMuX3N0YWdnZXJJbmRleCA9PT0gU3RhZ2dlckluZGV4LlNUQUdHRVJJTkRFWF9PREQgPyAxIDogLTE7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9zdGFnZ2VyQXhpcyA9PT0gU3RhZ2dlckF4aXMuU1RBR0dFUkFYSVNfWCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RpZmZYMSA9IChtYXB0dyAtIHRoaXMuX2hleFNpZGVMZW5ndGgpIC8gMjtcbiAgICAgICAgICAgICAgICB0aGlzLl9kaWZmWTEgPSAwO1xuICAgICAgICAgICAgICAgIGhlaWdodCA9IG1hcHRoICogKHRoaXMuX2xheWVyU2l6ZS5oZWlnaHQgKyAwLjUpO1xuICAgICAgICAgICAgICAgIHdpZHRoID0gKG1hcHR3ICsgdGhpcy5faGV4U2lkZUxlbmd0aCkgKiBNYXRoLmZsb29yKHRoaXMuX2xheWVyU2l6ZS53aWR0aCAvIDIpICsgbWFwdHcgKiAodGhpcy5fbGF5ZXJTaXplLndpZHRoICUgMik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RpZmZYMSA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGlmZlkxID0gKG1hcHRoIC0gdGhpcy5faGV4U2lkZUxlbmd0aCkgLyAyO1xuICAgICAgICAgICAgICAgIHdpZHRoID0gbWFwdHcgKiAodGhpcy5fbGF5ZXJTaXplLndpZHRoICsgMC41KTtcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSAobWFwdGggKyB0aGlzLl9oZXhTaWRlTGVuZ3RoKSAqIE1hdGguZmxvb3IodGhpcy5fbGF5ZXJTaXplLmhlaWdodCAvIDIpICsgbWFwdGggKiAodGhpcy5fbGF5ZXJTaXplLmhlaWdodCAlIDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ub2RlLnNldENvbnRlbnRTaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5ub2RlLnNldENvbnRlbnRTaXplKHRoaXMuX2xheWVyU2l6ZS53aWR0aCAqIHRoaXMuX21hcFRpbGVTaXplLndpZHRoLCB0aGlzLl9sYXllclNpemUuaGVpZ2h0ICogdGhpcy5fbWFwVGlsZVNpemUuaGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG9mZnNldCAoYWZ0ZXIgbGF5ZXIgb3JpZW50YXRpb24gaXMgc2V0KTtcbiAgICAgICAgdGhpcy5fb2Zmc2V0ID0gY2MudjIobGF5ZXJJbmZvLm9mZnNldC54LCAtbGF5ZXJJbmZvLm9mZnNldC55KTtcbiAgICAgICAgdGhpcy5fdXNlQXV0b21hdGljVmVydGV4WiA9IGZhbHNlO1xuICAgICAgICB0aGlzLl92ZXJ0ZXhadmFsdWUgPSAwO1xuICAgICAgICB0aGlzLl9zeW5jQW5jaG9yUG9pbnQoKTtcbiAgICAgICAgdGhpcy5fcHJlcGFyZVRvUmVuZGVyKCk7XG4gICAgfSxcbiAgICBfcHJlcGFyZVRvUmVuZGVyOiBmdW5jdGlvbiBfcHJlcGFyZVRvUmVuZGVyKCkge1xuICAgICAgICB0aGlzLl91cGRhdGVWZXJ0aWNlcygpO1xuICAgICAgICB0aGlzLl90cmF2ZXJzZUFsbEdyaWQoKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlQWxsVXNlck5vZGUoKTtcbiAgICAgICAgdGhpcy5fYWN0aXZhdGVNYXRlcmlhbCgpO1xuICAgIH0sXG4gICAgX2FjdGl2YXRlTWF0ZXJpYWw6IGZ1bmN0aW9uIF9hY3RpdmF0ZU1hdGVyaWFsKCkge1xuICAgICAgICB2YXIgdGlsZXNldEluZGV4QXJyID0gdGhpcy5fdGlsZXNldEluZGV4QXJyO1xuICAgICAgICBpZiAodGlsZXNldEluZGV4QXJyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlUmVuZGVyKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGV4SWRNYXRJZHggPSB0aGlzLl90ZXhJZFRvTWF0SW5kZXggPSB7fTtcbiAgICAgICAgdmFyIHRleHR1cmVzID0gdGhpcy5fdGV4dHVyZXM7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aWxlc2V0SW5kZXhBcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciB0aWxlc2V0SWR4ID0gdGlsZXNldEluZGV4QXJyW2ldO1xuICAgICAgICAgICAgdmFyIHRleHR1cmUgPSB0ZXh0dXJlc1t0aWxlc2V0SWR4XTtcblxuICAgICAgICAgICAgdmFyIG1hdGVyaWFsID0gdGhpcy5zaGFyZWRNYXRlcmlhbHNbaV07XG4gICAgICAgICAgICBpZiAoIW1hdGVyaWFsKSB7XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwgPSBNYXRlcmlhbC5nZXRJbnN0YW50aWF0ZWRCdWlsdGluTWF0ZXJpYWwoJzJkLXNwcml0ZScsIHRoaXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbCA9IE1hdGVyaWFsLmdldEluc3RhbnRpYXRlZE1hdGVyaWFsKG1hdGVyaWFsLCB0aGlzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWF0ZXJpYWwuZGVmaW5lKCdVU0VfVEVYVFVSRScsIHRydWUpO1xuICAgICAgICAgICAgbWF0ZXJpYWwuZGVmaW5lKCdDQ19VU0VfTU9ERUwnLCB0cnVlKTtcbiAgICAgICAgICAgIG1hdGVyaWFsLnNldFByb3BlcnR5KCd0ZXh0dXJlJywgdGV4dHVyZSk7XG4gICAgICAgICAgICB0aGlzLnNldE1hdGVyaWFsKGksIG1hdGVyaWFsKTtcbiAgICAgICAgICAgIHRleElkTWF0SWR4W3RpbGVzZXRJZHhdID0gaTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubWFya0ZvclVwZGF0ZVJlbmRlckRhdGEodHJ1ZSk7XG4gICAgICAgIHRoaXMubWFya0ZvclJlbmRlcih0cnVlKTtcbiAgICB9XG59KTtcblxuY2MuVGlsZWRMYXllciA9IG1vZHVsZS5leHBvcnRzID0gVGlsZWRMYXllcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrTkRWR2xzWldSTVlYbGxjaTVxY3lKZExDSnVZVzFsY3lJNld5SlNaVzVrWlhKRGIyMXdiMjVsYm5RaUxDSnlaWEYxYVhKbElpd2lUV0YwWlhKcFlXd2lMQ0pTWlc1a1pYSkdiRzkzSWl3aVgyMWhkRFJmZEdWdGNDSXNJbTFoZERRaUxDSmpjbVZoZEdVaUxDSmZkbVZqTWw5MFpXMXdJaXdpZG1Wak1pSXNJbDkyWldNeVgzUmxiWEF5SWl3aVgzUmxiWEJTYjNkRGIyd2lMQ0p5YjNjaUxDSmpiMndpTENKVWFXeGxaRlZ6WlhKT2IyUmxSR0YwWVNJc0ltTmpJaXdpUTJ4aGMzTWlMQ0p1WVcxbElpd2laWGgwWlc1a2N5SXNJa052YlhCdmJtVnVkQ0lzSW1OMGIzSWlMQ0pmYVc1a1pYZ2lMQ0pmY205M0lpd2lYMk52YkNJc0lsOTBhV3hsWkV4aGVXVnlJaXdpVkdsc1pXUk1ZWGxsY2lJc0ltVmthWFJ2Y2lJc0ltbHVjM0JsWTNSdmNpSXNJbDkxYzJWeVRtOWtaVWR5YVdRaUxDSmZkWE5sY2s1dlpHVk5ZWEFpTENKZmRYTmxjazV2WkdWRWFYSjBlU0lzSWw5MGFXeGxaRlJwYkdWeklpd2lYM1JwYkdWelpYUkpibVJsZUVGeWNpSXNJbDkwWlhoSlpGUnZUV0YwU1c1a1pYZ2lMQ0pmZG1sbGQxQnZjblFpTENKNElpd2llU0lzSW5kcFpIUm9JaXdpYUdWcFoyaDBJaXdpWDJOMWJHeHBibWRTWldOMElpd2liR1ZtZEVSdmQyNGlMQ0p5YVdkb2RGUnZjQ0lzSWw5amRXeHNhVzVuUkdseWRIa2lMQ0pmY21sbmFIUlViM0FpTENKZmJHRjVaWEpKYm1adklpd2lYMjFoY0VsdVptOGlMQ0pmZEc5d1QyWm1jMlYwSWl3aVgyUnZkMjVQWm1aelpYUWlMQ0pmYkdWbWRFOW1abk5sZENJc0lsOXlhV2RvZEU5bVpuTmxkQ0lzSWw5MGFXeGxjeUlzSWw5MlpYSjBhV05sY3lJc0lsOTJaWEowYVdObGMwUnBjblI1SWl3aVgyeGhlV1Z5VG1GdFpTSXNJbDlzWVhsbGNrOXlhV1Z1ZEdGMGFXOXVJaXdpWDNSbGVFZHlhV1J6SWl3aVgzUmxlSFIxY21Weklpd2lYM1JwYkdWelpYUnpJaXdpWDJ4bFpuUkViM2R1Vkc5RFpXNTBaWEpZSWl3aVgyeGxablJFYjNkdVZHOURaVzUwWlhKWklpd2lYMmhoYzFScGJHVmtUbTlrWlVkeWFXUWlMQ0pmYUdGelFXNXBSM0pwWkNJc0lsOWhibWx0WVhScGIyNXpJaXdpWDJWdVlXSnNaVU4xYkd4cGJtY2lMQ0p0WVdOeWJ5SXNJa1ZPUVVKTVJWOVVTVXhGUkUxQlVGOURWVXhNU1U1SElpd2lYMmhoYzFScGJHVmtUbTlrWlNJc0lsOW9ZWE5CYm1sdFlYUnBiMjRpTENKbGJtRmliR1ZEZFd4c2FXNW5JaXdpZG1Gc2RXVWlMQ0poWkdSVmMyVnlUbTlrWlNJc0ltNXZaR1VpTENKa1lYUmhRMjl0Y0NJc0ltZGxkRU52YlhCdmJtVnVkQ0lzSW5kaGNtNGlMQ0poWkdSRGIyMXdiMjVsYm5RaUxDSndZWEpsYm5RaUxDSmZjbVZ1WkdWeVJteGhaeUlzSWtaTVFVZGZRbEpGUVV0ZlJreFBWeUlzSWw5cFpDSXNJbDl1YjJSbFRHOWpZV3hRYjNOVWIweGhlV1Z5VUc5eklpd2lYM0J2YzJsMGFXOXVWRzlTYjNkRGIyd2lMQ0pmWVdSa1ZYTmxjazV2WkdWVWIwZHlhV1FpTENKZmRYQmtZWFJsUTNWc2JHbHVaMDltWm5ObGRFSjVWWE5sY2s1dlpHVWlMQ0p2YmlJc0lrNXZaR1VpTENKRmRtVnVkRlI1Y0dVaUxDSlFUMU5KVkVsUFRsOURTRUZPUjBWRUlpd2lYM1Z6WlhKT2IyUmxVRzl6UTJoaGJtZGxJaXdpVTBsYVJWOURTRUZPUjBWRUlpd2lYM1Z6WlhKT2IyUmxVMmw2WlVOb1lXNW5aU0lzSW5KbGJXOTJaVlZ6WlhKT2IyUmxJaXdpYjJabUlpd2lYM0psYlc5MlpWVnpaWEpPYjJSbFJuSnZiVWR5YVdRaUxDSmZjbVZ0YjNabFEyOXRjRzl1Wlc1MElpd2laR1Z6ZEhKdmVTSXNJbkpsYlc5MlpVWnliMjFRWVhKbGJuUWlMQ0prWlhOMGNtOTVWWE5sY2s1dlpHVWlMQ0p1YjJSbFVHOXpJaXdpYjNWMElpd2lYMmRsZEU1dlpHVnpRbmxTYjNkRGIyd2lMQ0p5YjNkRVlYUmhJaXdpWDJkbGRFNXZaR1Z6UTI5MWJuUkNlVkp2ZHlJc0ltTnZkVzUwSWl3aVgzVndaR0YwWlVGc2JGVnpaWEpPYjJSbElpd2laR0YwWVVsa0lpd2ljMlZzWmlJc0ltbHVaR1Y0SWl3aVkyOXNSR0YwWVNJc0lteHBjM1FpTENKc1pXNW5kR2dpTENKZmFYTkpia3hoZVdWeUlpd2lkR1Z0Y0ZKdmQwTnZiQ0lzSW5CMWMyZ2lMQ0pmYVhOVmMyVnlUbTlrWlVScGNuUjVJaXdpWDNObGRGVnpaWEpPYjJSbFJHbHlkSGtpTENKdmJrVnVZV0pzWlNJc0lsOXpkWEJsY2lJc0lrRk9RMGhQVWw5RFNFRk9SMFZFSWl3aVgzTjVibU5CYm1Ob2IzSlFiMmx1ZENJc0lsOWhZM1JwZG1GMFpVMWhkR1Z5YVdGc0lpd2liMjVFYVhOaFlteGxJaXdpWVc1amFHOXlXQ0lzSW5OallXeGxXQ0lzSW1GdVkyaHZjbGtpTENKelkyRnNaVmtpTENKdmJrUmxjM1J5YjNraUxDSmZZblZtWm1WeUlpd2lYM0psYm1SbGNrUmhkR0ZNYVhOMElpd2laMlYwVEdGNVpYSk9ZVzFsSWl3aWMyVjBUR0Y1WlhKT1lXMWxJaXdpYkdGNVpYSk9ZVzFsSWl3aVoyVjBVSEp2Y0dWeWRIa2lMQ0p3Y205d1pYSjBlVTVoYldVaUxDSmZjSEp2Y0dWeWRHbGxjeUlzSW1kbGRGQnZjMmwwYVc5dVFYUWlMQ0p3YjNNaUxDSjFibVJsWm1sdVpXUWlMQ0pOWVhSb0lpd2labXh2YjNJaUxDSnlaWFFpTENKVWFXeGxaRTFoY0NJc0lrOXlhV1Z1ZEdGMGFXOXVJaXdpVDFKVVNFOGlMQ0pmY0c5emFYUnBiMjVHYjNKUGNuUm9iMEYwSWl3aVNWTlBJaXdpWDNCdmMybDBhVzl1Um05eVNYTnZRWFFpTENKSVJWZ2lMQ0pmY0c5emFYUnBiMjVHYjNKSVpYaEJkQ0lzSWw5cGMwbHVkbUZzYVdSUWIzTnBkR2x2YmlJc0lsOXNZWGxsY2xOcGVtVWlMQ0oyTWlJc0lsOXRZWEJVYVd4bFUybDZaU0lzSW5ScGJHVlhhV1IwYUNJc0luUnBiR1ZJWldsbmFIUWlMQ0p5YjNkeklpd2laMmxrSWl3aWRHbHNaWE5sZENJc0ltOW1abk5sZENJc0luUnBiR1ZQWm1aelpYUWlMQ0pqWlc1MFpYSlhhV1IwYUNJc0ltTmxiblJsY2tobGFXZG9kQ0lzSW05a1pGOWxkbVZ1SWl3aVgzTjBZV2RuWlhKSmJtUmxlQ0lzSWxOMFlXZG5aWEpKYm1SbGVDSXNJbE5VUVVkSFJWSkpUa1JGV0Y5UFJFUWlMQ0prYVdabVdDSXNJbVJwWm1aWU1TSXNJbVJwWm1aWklpd2laR2xtWmxreElpd2lYM04wWVdkblpYSkJlR2x6SWl3aVUzUmhaMmRsY2tGNGFYTWlMQ0pUVkVGSFIwVlNRVmhKVTE5Wklpd2lYMmhsZUZOcFpHVk1aVzVuZEdnaUxDSlRWRUZIUjBWU1FWaEpVMTlZSWl3aWMyVjBWR2xzWlVkSlJFRjBJaXdpY0c5elQzSllJaXdpWm14aFozTlBjbGtpTENKbWJHRm5jeUlzSWtWeWNtOXlJaXdpVm1Wak1pSXNJbXh2WjBsRUlpd2labWx5YzNSSGFXUWlMQ0pqZFhKeVpXNTBSbXhoWjNNaUxDSm5aWFJVYVd4bFJteGhaM05CZENJc0ltTjFjbkpsYm5SSFNVUWlMQ0puWlhSVWFXeGxSMGxFUVhRaUxDSm5hV1JCYm1SR2JHRm5jeUlzSWw5MWNHUmhkR1ZVYVd4bFJtOXlSMGxFSWl3aWFXUjRJaXdpZEdsc1pTSXNJbFJwYkdWR2JHRm5JaXdpUmt4SlVGQkZSRjlOUVZOTElpd2lSa3hKVUZCRlJGOUJURXdpTENKZmMyVjBRM1ZzYkdsdVowUnBjblI1SWl3aVgybHpRM1ZzYkdsdVowUnBjblI1SWl3aVgzVndaR0YwWlZacFpYZFFiM0owSWl3aWNtVnpaWEoyWlV4cGJtVWlMQ0oyY0hnaUxDSmZiMlptYzJWMElpd2lkbkI1SWl3aWJHVm1kRVJ2ZDI1WUlpd2liR1ZtZEVSdmQyNVpJaXdpY21sbmFIUlViM0JZSWl3aWNtbG5hSFJVYjNCWklpd2ljbVZ6ZFd4MElpd2liV0Z3ZEhjaUxDSnRZWEIwYUNJc0ltMWhjSFIzTWlJc0ltMWhjSFJvTWlJc0ltUnBabVpZTWlJc0ltUnBabVpaTWlJc0ltRjRhWE1pTENKamIyeHpJaXdpWDJScFptWlpNU0lzSWw5dlpHUmZaWFpsYmlJc0lsOWthV1ptV0RFaUxDSmZkWEJrWVhSbFEzVnNiR2x1WnlJc0lrTkRYMFZFU1ZSUFVpSXNJbDkxY0dSaGRHVlhiM0pzWkUxaGRISnBlQ0lzSW1sdWRtVnlkQ0lzSWw5M2IzSnNaRTFoZEhKcGVDSXNJbkpsWTNRaUxDSjJhWE5wWW14bFVtVmpkQ0lzSW1OaGJXVnlZU0lzSWtOaGJXVnlZU0lzSW1acGJtUkRZVzFsY21FaUxDSm5aWFJUWTNKbFpXNVViMWR2Y214a1VHOXBiblFpTENKMGNtRnVjMlp2Y20xTllYUTBJaXdpWjJWMFRHRjVaWEpQY21sbGJuUmhkR2x2YmlJc0ltZGxkRkJ5YjNCbGNuUnBaWE1pTENKZmRYQmtZWFJsVm1WeWRHbGpaWE1pTENKMlpYSjBhV05sY3lJc0lteGhlV1Z5VDNKcFpXNTBZWFJwYjI0aUxDSjBhV3hsY3lJc0ltZHlhV1J6SWl3aVkyOXNUMlptYzJWMElpd2laM0pwWkNJc0lteGxablFpTENKaWIzUjBiMjBpTENKamRXeHNhVzVuUTI5c0lpd2lZM1ZzYkdsdVoxSnZkeUlzSW1keWFXUkhTVVFpTENKMGIzQkNiM0prWlhJaUxDSmtiM2R1UW05eVpHVnlJaXdpYkdWbWRFSnZjbVJsY2lJc0luSnBaMmgwUW05eVpHVnlJaXdpYldsdVEyOXNJaXdpYldGNFEyOXNJaXdpWDNScGJHVlRhWHBsSWl3aVoyVjBWR2xzWldSVWFXeGxRWFFpTENKbWIzSmpaVU55WldGMFpTSXNJbFJwYkdWa1ZHbHNaU0lzSWw5NElpd2lYM2tpTENKZmJHRjVaWElpTENKZmRYQmtZWFJsU1c1bWJ5SXNJbk5sZEZScGJHVmtWR2xzWlVGMElpd2lkR2xzWldSVWFXeGxJaXdpYzI5dFpTSXNJblJwYkdWa1RtOWtaU0lzSW1kbGRGUmxlSFIxY21VaUxDSm5aWFJVWlhoMGRYSmxjeUlzSW5ObGRGUmxlSFIxY21VaUxDSjBaWGgwZFhKbElpd2ljMlYwVkdWNGRIVnlaWE1pTENKMFpYaDBkWEpsY3lJc0ltZGxkRXhoZVdWeVUybDZaU0lzSW1kbGRFMWhjRlJwYkdWVGFYcGxJaXdpWjJWMFZHbHNaVk5sZENJc0ltZGxkRlJwYkdWVFpYUnpJaXdpYzJWMFZHbHNaVk5sZENJc0luTmxkRlJwYkdWVFpYUnpJaXdpZEdsc1pYTmxkSE1pTENKMFpYaEhjbWxrY3lJc0lta2lMQ0p6YjNWeVkyVkpiV0ZuWlNJc0lteHZZV1JCYkd4VVpYaDBkWEpsY3lJc0ltd2lMQ0owYVd4bGMyVjBTVzVtYnlJc0ltWnBiR3hVWlhoMGRYSmxSM0pwWkhNaUxDSmZjSEpsY0dGeVpWUnZVbVZ1WkdWeUlpd2lZbWx1WkNJc0lsOTBjbUYyWlhKelpVRnNiRWR5YVdRaUxDSjBhV3hsYzJWMFNXNWtaWGhCY25JaUxDSjBhV3hsYzJWMFNXUjRUV0Z3SWl3aVpYSnliM0lpTENKMGFXeGxjMlYwU1dSNElpd2lkR1Y0U1dRaUxDSmZhVzVwZENJc0lteGhlV1Z5U1c1bWJ5SXNJbTFoY0VsdVptOGlMQ0p6YVhwbElpd2ljSEp2Y0dWeWRHbGxjeUlzSWw5dGFXNUhTVVFpTENKZmJXRjRSMGxFSWl3aVgyOXdZV05wZEhraUxDSmZjbVZ1WkdWeVQzSmtaWElpTENKeVpXNWtaWEpQY21SbGNpSXNJbWRsZEZOMFlXZG5aWEpCZUdseklpd2laMlYwVTNSaFoyZGxja2x1WkdWNElpd2laMlYwU0dWNFUybGtaVXhsYm1kMGFDSXNJbWRsZEZScGJHVkJibWx0WVhScGIyNXpJaXdpYjNKcFpXNTBZWFJwYjI0aUxDSm5aWFJVYVd4bFUybDZaU0lzSW5ObGRFTnZiblJsYm5SVGFYcGxJaXdpWDNWelpVRjFkRzl0WVhScFkxWmxjblJsZUZvaUxDSmZkbVZ5ZEdWNFduWmhiSFZsSWl3aVpHbHpZV0pzWlZKbGJtUmxjaUlzSW5SbGVFbGtUV0YwU1dSNElpd2liV0YwWlhKcFlXd2lMQ0p6YUdGeVpXUk5ZWFJsY21saGJITWlMQ0puWlhSSmJuTjBZVzUwYVdGMFpXUkNkV2xzZEdsdVRXRjBaWEpwWVd3aUxDSm5aWFJKYm5OMFlXNTBhV0YwWldSTllYUmxjbWxoYkNJc0ltUmxabWx1WlNJc0luTmxkRkJ5YjNCbGNuUjVJaXdpYzJWMFRXRjBaWEpwWVd3aUxDSnRZWEpyUm05eVZYQmtZWFJsVW1WdVpHVnlSR0YwWVNJc0ltMWhjbXRHYjNKU1pXNWtaWElpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lPenM3TzBGQk5rSkJPenRCUVRkQ1FUczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFYbENRU3hKUVVGTlFTeHJRa0ZCYTBKRExGRkJRVkVzYzBOQlFWSXNRMEZCZUVJN1FVRkRRU3hKUVVGTlF5eFhRVUZYUkN4UlFVRlJMRzlEUVVGU0xFTkJRV3BDTzBGQlEwRXNTVUZCVFVVc1lVRkJZVVlzVVVGQlVTdzRRa0ZCVWl4RFFVRnVRanM3UVVGSFFTeEpRVUZKUnl4aFFVRmhReXhaUVVGTFF5eE5RVUZNTEVWQlFXcENPMEZCUTBFc1NVRkJTVU1zWVVGQllVTXNXVUZCUzBZc1RVRkJUQ3hGUVVGcVFqdEJRVU5CTEVsQlFVbEhMR05CUVdORUxGbEJRVXRHTEUxQlFVd3NSVUZCYkVJN1FVRkRRU3hKUVVGSlNTeGpRVUZqTEVWQlFVTkRMRXRCUVVrc1EwRkJUQ3hGUVVGUlF5eExRVUZKTEVOQlFWb3NSVUZCYkVJN08wRkJSVUVzU1VGQlNVTXNiMEpCUVc5Q1F5eEhRVUZIUXl4TFFVRklMRU5CUVZNN1FVRkROMEpETEZWQlFVMHNjMEpCUkhWQ08wRkJSVGRDUXl4aFFVRlRTQ3hIUVVGSFNTeFRRVVpwUWpzN1FVRkpOMEpETEZGQlNqWkNMR3RDUVVseVFqdEJRVU5LTEdGQlFVdERMRTFCUVV3c1IwRkJZeXhEUVVGRExFTkJRV1k3UVVGRFFTeGhRVUZMUXl4SlFVRk1MRWRCUVZrc1EwRkJReXhEUVVGaU8wRkJRMEVzWVVGQlMwTXNTVUZCVEN4SFFVRlpMRU5CUVVNc1EwRkJZanRCUVVOQkxHRkJRVXRETEZkQlFVd3NSMEZCYlVJc1NVRkJia0k3UVVGRFNEdEJRVlEwUWl4RFFVRlVMRU5CUVhoQ096dEJRV0ZCT3pzN096czdRVUZOUVN4SlFVRkpReXhoUVVGaFZpeEhRVUZIUXl4TFFVRklMRU5CUVZNN1FVRkRkRUpETEZWQlFVMHNaVUZFWjBJN08wRkJSM1JDTzBGQlEwRTdRVUZEUVVNc1lVRkJVMnBDTEdWQlRHRTdPMEZCVDNSQ2VVSXNXVUZCVVR0QlFVTktReXh0UWtGQlZ6dEJRVVJRTEV0QlVHTTdPMEZCVjNSQ1VDeFJRVmh6UWl4clFrRlhaRHRCUVVOS0xHRkJRVXRSTEdGQlFVd3NSMEZCY1VJc1JVRkJja0lzUTBGRVNTeERRVU52UWp0QlFVTjRRaXhoUVVGTFF5eFpRVUZNTEVkQlFXOUNMRVZCUVhCQ0xFTkJSa2tzUTBGRmJVSTdRVUZEZGtJc1lVRkJTME1zWTBGQlRDeEhRVUZ6UWl4TFFVRjBRanM3UVVGRlFUdEJRVU5CTEdGQlFVdERMRmRCUVV3c1IwRkJiVUlzUlVGQmJrSTdPMEZCUlVFN1FVRkRRU3hoUVVGTFF5eG5Ra0ZCVEN4SFFVRjNRaXhGUVVGNFFqdEJRVU5CTzBGQlEwRXNZVUZCUzBNc1owSkJRVXdzUjBGQmQwSXNSVUZCZUVJN08wRkJSVUVzWVVGQlMwTXNVMEZCVEN4SFFVRnBRaXhGUVVGRFF5eEhRVUZGTEVOQlFVTXNRMEZCU2l4RlFVRlBReXhIUVVGRkxFTkJRVU1zUTBGQlZpeEZRVUZoUXl4UFFVRk5MRU5CUVVNc1EwRkJjRUlzUlVGQmRVSkRMRkZCUVU4c1EwRkJReXhEUVVFdlFpeEZRVUZxUWp0QlFVTkJMR0ZCUVV0RExGbEJRVXdzUjBGQmIwSTdRVUZEYUVKRExITkNRVUZUTEVWQlFVTTFRaXhMUVVGSkxFTkJRVU1zUTBGQlRpeEZRVUZUUXl4TFFVRkpMRU5CUVVNc1EwRkJaQ3hGUVVSUE8wRkJSV2hDTkVJc2MwSkJRVk1zUlVGQlF6ZENMRXRCUVVrc1EwRkJReXhEUVVGT0xFVkJRVk5ETEV0QlFVa3NRMEZCUXl4RFFVRmtPMEZCUms4c1UwRkJjRUk3UVVGSlFTeGhRVUZMTmtJc1lVRkJUQ3hIUVVGeFFpeEpRVUZ5UWp0QlFVTkJMR0ZCUVV0RExGTkJRVXdzUjBGQmFVSXNSVUZCUXk5Q0xFdEJRVWtzUTBGQlF5eERRVUZPTEVWQlFWTkRMRXRCUVVrc1EwRkJReXhEUVVGa0xFVkJRV3BDT3p0QlFVVkJMR0ZCUVVzclFpeFZRVUZNTEVkQlFXdENMRWxCUVd4Q08wRkJRMEVzWVVGQlMwTXNVVUZCVEN4SFFVRm5RaXhKUVVGb1FqczdRVUZGUVR0QlFVTkJPMEZCUTBFc1lVRkJTME1zVlVGQlRDeEhRVUZyUWl4RFFVRnNRanRCUVVOQkxHRkJRVXRETEZkQlFVd3NSMEZCYlVJc1EwRkJia0k3UVVGRFFTeGhRVUZMUXl4WFFVRk1MRWRCUVcxQ0xFTkJRVzVDTzBGQlEwRXNZVUZCUzBNc1dVRkJUQ3hIUVVGdlFpeERRVUZ3UWpzN1FVRkZRVHRCUVVOQkxHRkJRVXRETEUxQlFVd3NSMEZCWXl4RlFVRmtPMEZCUTBFN1FVRkRRU3hoUVVGTFF5eFRRVUZNTEVkQlFXbENMRVZCUVdwQ08wRkJRMEU3UVVGRFFTeGhRVUZMUXl4alFVRk1MRWRCUVhOQ0xFbEJRWFJDT3p0QlFVVkJMR0ZCUVV0RExGVkJRVXdzUjBGQmEwSXNSVUZCYkVJN1FVRkRRU3hoUVVGTFF5eHBRa0ZCVEN4SFFVRjVRaXhKUVVGNlFqczdRVUZGUVR0QlFVTkJMR0ZCUVV0RExGTkJRVXdzUjBGQmFVSXNTVUZCYWtJN1FVRkRRVHRCUVVOQkxHRkJRVXRETEZOQlFVd3NSMEZCYVVJc1NVRkJha0k3UVVGRFFTeGhRVUZMUXl4VFFVRk1MRWRCUVdsQ0xFbEJRV3BDT3p0QlFVVkJMR0ZCUVV0RExHdENRVUZNTEVkQlFUQkNMRU5CUVRGQ08wRkJRMEVzWVVGQlMwTXNhMEpCUVV3c1IwRkJNRUlzUTBGQk1VSTdPMEZCUlVFc1lVRkJTME1zYVVKQlFVd3NSMEZCZVVJc1MwRkJla0k3UVVGRFFTeGhRVUZMUXl4WFFVRk1MRWRCUVcxQ0xFdEJRVzVDTzBGQlEwRXNZVUZCUzBNc1YwRkJUQ3hIUVVGdFFpeEpRVUZ1UWpzN1FVRkZRVHRCUVVOQkxHRkJRVXRETEdOQlFVd3NSMEZCYzBKb1JDeEhRVUZIYVVRc1MwRkJTQ3hEUVVGVFF5eDFRa0ZCTDBJN1FVRkRTQ3hMUVc1RmNVSTdRVUZ4UlhSQ1F5eHBRa0Z5UlhOQ0xESkNRWEZGVER0QlFVTmlMR1ZCUVU4c1MwRkJTMDRzYVVKQlFWbzdRVUZEU0N4TFFYWkZjVUk3UVVGNVJYUkNUeXhwUWtGNlJYTkNMREpDUVhsRlREdEJRVU5pTEdWQlFVOHNTMEZCUzA0c1YwRkJXanRCUVVOSUxFdEJNMFZ4UWpzN08wRkJOa1YwUWpzN096czdPMEZCVFVGUExHbENRVzVHYzBJc2VVSkJiVVpRUXl4TFFXNUdUeXhGUVcxR1FUdEJRVU5zUWl4WlFVRkpMRXRCUVV0T0xHTkJRVXdzU1VGQmRVSk5MRXRCUVROQ0xFVkJRV3RETzBGQlF6bENMR2xDUVVGTFRpeGpRVUZNTEVkQlFYTkNUU3hMUVVGMFFqdEJRVU5CTEdsQ1FVRkxNMElzWVVGQlRDeEhRVUZ4UWl4SlFVRnlRanRCUVVOSU8wRkJRMG9zUzBGNFJuRkNPenM3UVVFd1JuUkNPenM3T3pzN08wRkJUMEUwUWl4bFFXcEhjMElzZFVKQmFVZFVReXhKUVdwSFV5eEZRV2xIU0R0QlFVTm1MRmxCUVVsRExGZEJRVmRFTEV0QlFVdEZMRmxCUVV3c1EwRkJhMEl6UkN4cFFrRkJiRUlzUTBGQlpqdEJRVU5CTEZsQlFVa3dSQ3hSUVVGS0xFVkJRV003UVVGRFZucEVMR1ZCUVVjeVJDeEpRVUZJTEVOQlFWRXNPRU5CUVZJN1FVRkRRU3h0UWtGQlR5eExRVUZRTzBGQlEwZzdPMEZCUlVSR0xHMUNRVUZYUkN4TFFVRkxTU3haUVVGTUxFTkJRV3RDTjBRc2FVSkJRV3hDTEVOQlFWZzdRVUZEUVhsRUxHRkJRVXRMTEUxQlFVd3NSMEZCWXl4TFFVRkxUQ3hKUVVGdVFqdEJRVU5CUVN4aFFVRkxUU3hYUVVGTUxFbEJRVzlDZWtVc1YwRkJWekJGTEdWQlFTOUNPMEZCUTBFc1lVRkJTMnBFTEZsQlFVd3NRMEZCYTBJd1F5eExRVUZMVVN4SFFVRjJRaXhKUVVFNFFsQXNVVUZCT1VJN08wRkJSVUZCTEdsQ1FVRlRiRVFzU1VGQlZDeEhRVUZuUWl4RFFVRkRMRU5CUVdwQ08wRkJRMEZyUkN4cFFrRkJVMnBFTEVsQlFWUXNSMEZCWjBJc1EwRkJReXhEUVVGcVFqdEJRVU5CYVVRc2FVSkJRVk5vUkN4WFFVRlVMRWRCUVhWQ0xFbEJRWFpDT3p0QlFVVkJMR0ZCUVV0M1JDeDFRa0ZCVEN4RFFVRTJRbFFzU1VGQk4wSXNSVUZCYlVNdlJDeFZRVUZ1UXp0QlFVTkJMR0ZCUVV0NVJTeHBRa0ZCVEN4RFFVRjFRbnBGTEZkQlFWY3lRaXhEUVVGc1F5eEZRVUZ4UXpOQ0xGZEJRVmMwUWl4RFFVRm9SQ3hGUVVGdFJIcENMRmRCUVc1RU8wRkJRMEVzWVVGQlMzVkZMR3RDUVVGTUxFTkJRWGRDVml4UlFVRjRRaXhGUVVGclF6ZEVMRmRCUVd4RE8wRkJRMEVzWVVGQlMzZEZMRGhDUVVGTUxFTkJRVzlEV2l4SlFVRndRenRCUVVOQlFTeGhRVUZMWVN4RlFVRk1MRU5CUVZGeVJTeEhRVUZIYzBVc1NVRkJTQ3hEUVVGUlF5eFRRVUZTTEVOQlFXdENReXhuUWtGQk1VSXNSVUZCTkVNc1MwRkJTME1zYTBKQlFXcEVMRVZCUVhGRmFFSXNVVUZCY2tVN1FVRkRRVVFzWVVGQlMyRXNSVUZCVEN4RFFVRlJja1VzUjBGQlIzTkZMRWxCUVVnc1EwRkJVVU1zVTBGQlVpeERRVUZyUWtjc1dVRkJNVUlzUlVGQmQwTXNTMEZCUzBNc2JVSkJRVGRETEVWQlFXdEZiRUlzVVVGQmJFVTdRVUZEUVN4bFFVRlBMRWxCUVZBN1FVRkRTQ3hMUVhoSWNVSTdPenRCUVRCSWRFSTdPenM3T3pzN1FVRlBRVzFDTEd0Q1FXcEpjMElzTUVKQmFVbE9jRUlzU1VGcVNVMHNSVUZwU1VFN1FVRkRiRUlzV1VGQlNVTXNWMEZCVjBRc1MwRkJTMFVzV1VGQlRDeERRVUZyUWpORUxHbENRVUZzUWl4RFFVRm1PMEZCUTBFc1dVRkJTU3hEUVVGRE1FUXNVVUZCVEN4RlFVRmxPMEZCUTFoNlJDeGxRVUZITWtRc1NVRkJTQ3hEUVVGUkxDdERRVUZTTzBGQlEwRXNiVUpCUVU4c1MwRkJVRHRCUVVOSU8wRkJRMFJJTEdGQlFVdHhRaXhIUVVGTUxFTkJRVk0zUlN4SFFVRkhjMFVzU1VGQlNDeERRVUZSUXl4VFFVRlNMRU5CUVd0Q1F5eG5Ra0ZCTTBJc1JVRkJOa01zUzBGQlMwTXNhMEpCUVd4RUxFVkJRWE5GYUVJc1VVRkJkRVU3UVVGRFFVUXNZVUZCUzNGQ0xFZEJRVXdzUTBGQlV6ZEZMRWRCUVVkelJTeEpRVUZJTEVOQlFWRkRMRk5CUVZJc1EwRkJhMEpITEZsQlFUTkNMRVZCUVhsRExFdEJRVXRETEcxQ1FVRTVReXhGUVVGdFJXeENMRkZCUVc1Rk8wRkJRMEVzWVVGQlMzRkNMSFZDUVVGTUxFTkJRVFpDY2tJc1VVRkJOMEk3UVVGRFFTeGxRVUZQTEV0QlFVc3pReXhaUVVGTUxFTkJRV3RDTUVNc1MwRkJTMUVzUjBGQmRrSXNRMEZCVUR0QlFVTkJVaXhoUVVGTGRVSXNaMEpCUVV3c1EwRkJjMEowUWl4UlFVRjBRanRCUVVOQlFTeHBRa0ZCVTNWQ0xFOUJRVlE3UVVGRFFYaENMR0ZCUVV0NVFpeG5Ra0ZCVEN4RFFVRnpRaXhKUVVGMFFqdEJRVU5CZWtJc1lVRkJTMDBzVjBGQlRDeEpRVUZ2UWl4RFFVRkRla1VzVjBGQlZ6QkZMR1ZCUVdoRE8wRkJRMEVzWlVGQlR5eEpRVUZRTzBGQlEwZ3NTMEZvU25GQ096czdRVUZyU25SQ096czdPenM3UVVGTlFXMUNMRzFDUVhoS2MwSXNNa0pCZDBwTU1VSXNTVUY0U2tzc1JVRjNTa003UVVGRGJrSXNZVUZCUzI5Q0xHTkJRVXdzUTBGQmIwSndRaXhKUVVGd1FqdEJRVU5CUVN4aFFVRkxkMElzVDBGQlREdEJRVU5JTEV0Qk0wcHhRanM3TzBGQk5rcDBRanRCUVVOQlppd3lRa0U1U25OQ0xHMURRVGhLUjJ0Q0xFOUJPVXBJTEVWQk9FcFpReXhIUVRsS1dpeEZRVGhLYVVJN1FVRkRia05CTEZsQlFVbG9SU3hEUVVGS0xFZEJRVkVyUkN4UlFVRlJMMFFzUTBGQlVpeEhRVUZaTEV0QlFVdDFRaXhyUWtGQmVrSTdRVUZEUVhsRExGbEJRVWt2UkN4RFFVRktMRWRCUVZFNFJDeFJRVUZST1VRc1EwRkJVaXhIUVVGWkxFdEJRVXQxUWl4clFrRkJla0k3UVVGRFNDeExRV3BMY1VJN1FVRnRTM1JDZVVNc2NVSkJia3R6UWl3MlFrRnRTMGg0Uml4SFFXNUxSeXhGUVcxTFJVTXNSMEZ1UzBZc1JVRnRTMDg3UVVGRGVrSXNXVUZCU1hkR0xGVkJRVlVzUzBGQlMzcEZMR0ZCUVV3c1EwRkJiVUpvUWl4SFFVRnVRaXhEUVVGa08wRkJRMEVzV1VGQlNTeERRVUZEZVVZc1QwRkJUQ3hGUVVGakxFOUJRVThzU1VGQlVEdEJRVU5rTEdWQlFVOUJMRkZCUVZGNFJpeEhRVUZTTEVOQlFWQTdRVUZEU0N4TFFYWkxjVUk3UVVGNVMzUkNlVVlzZFVKQmVrdHpRaXdyUWtGNVMwUXhSaXhIUVhwTFF5eEZRWGxMU1R0QlFVTjBRaXhaUVVGSmVVWXNWVUZCVlN4TFFVRkxla1VzWVVGQlRDeERRVUZ0UW1oQ0xFZEJRVzVDTEVOQlFXUTdRVUZEUVN4WlFVRkpMRU5CUVVONVJpeFBRVUZNTEVWQlFXTXNUMEZCVHl4RFFVRlFPMEZCUTJRc1pVRkJUMEVzVVVGQlVVVXNTMEZCWmp0QlFVTklMRXRCTjB0eFFqdEJRU3RMZEVKRExITkNRUzlMYzBJc1owTkJLMHRCTzBGQlEyeENMR0ZCUVVzMVJTeGhRVUZNTEVkQlFYRkNMRVZCUVhKQ08wRkJRMEVzWVVGQlN5eEpRVUZKTmtVc1RVRkJWQ3hKUVVGdFFpeExRVUZMTlVVc1dVRkJlRUlzUlVGQmMwTTdRVUZEYkVNc1owSkJRVWt5UXl4WFFVRlhMRXRCUVVzelF5eFpRVUZNTEVOQlFXdENORVVzVFVGQmJFSXNRMEZCWmp0QlFVTkJMR2xDUVVGTGVrSXNkVUpCUVV3c1EwRkJOa0pTTEZOQlFWTkVMRWxCUVhSRExFVkJRVFJETDBRc1ZVRkJOVU03UVVGRFFTeHBRa0ZCUzNsRkxHbENRVUZNTEVOQlFYVkNla1VzVjBGQlZ6SkNMRU5CUVd4RExFVkJRWEZETTBJc1YwRkJWelJDTEVOQlFXaEVMRVZCUVcxRWVrSXNWMEZCYmtRN1FVRkRRU3hwUWtGQlMzVkZMR3RDUVVGTUxFTkJRWGRDVml4UlFVRjRRaXhGUVVGclF6ZEVMRmRCUVd4RE8wRkJRMEVzYVVKQlFVdDNSU3c0UWtGQlRDeERRVUZ2UTFnc1UwRkJVMFFzU1VGQk4wTTdRVUZEU0R0QlFVTktMRXRCZUV4eFFqdEJRVEJNZEVKWkxHdERRVEZNYzBJc01FTkJNRXhWV2l4SlFURk1WaXhGUVRCTVowSTdRVUZEYkVNc1dVRkJTU3hMUVVGTGVrSXNWVUZCVEN4SFFVRnJRbmxDTEV0QlFVdHFReXhOUVVFelFpeEZRVUZ0UXp0QlFVTXZRaXhwUWtGQlMxRXNWVUZCVEN4SFFVRnJRbmxDTEV0QlFVdHFReXhOUVVGMlFqdEJRVU5JTzBGQlEwUXNXVUZCU1N4TFFVRkxVeXhYUVVGTUxFZEJRVzFDZDBJc1MwRkJTMnBETEUxQlFUVkNMRVZCUVc5RE8wRkJRMmhETEdsQ1FVRkxVeXhYUVVGTUxFZEJRVzFDZDBJc1MwRkJTMnBETEUxQlFYaENPMEZCUTBnN1FVRkRSQ3haUVVGSkxFdEJRVXRWTEZkQlFVd3NSMEZCYlVKMVFpeExRVUZMYkVNc1MwRkJOVUlzUlVGQmJVTTdRVUZETDBJc2FVSkJRVXRYTEZkQlFVd3NSMEZCYlVKMVFpeExRVUZMYkVNc1MwRkJlRUk3UVVGRFNEdEJRVU5FTEZsQlFVa3NTMEZCUzFrc1dVRkJUQ3hIUVVGdlFuTkNMRXRCUVV0c1F5eExRVUUzUWl4RlFVRnZRenRCUVVOb1F5eHBRa0ZCUzFrc1dVRkJUQ3hIUVVGdlFuTkNMRXRCUVV0c1F5eExRVUY2UWp0QlFVTklPMEZCUTBvc1MwRjJUWEZDTzBGQmVVMTBRbkZFTEhWQ1FYcE5jMElzYVVOQmVVMURPMEZCUTI1Q0xGbEJRVWxzUWl4WFFVRlhMRWxCUVdZN1FVRkRRU3haUVVGSlJDeFBRVUZQUXl4VFFVRlRSQ3hKUVVGd1FqdEJRVU5CTEZsQlFVbHRReXhQUVVGUGJFTXNVMEZCVTJoRUxGZEJRWEJDTzBGQlEwRnJSaXhoUVVGTGRrSXNPRUpCUVV3c1EwRkJiME5hTEVsQlFYQkRPMEZCUTBnc1MwRTVUWEZDTzBGQlowNTBRbWxDTEhOQ1FXaE9jMElzWjBOQlowNUJPMEZCUTJ4Q0xGbEJRVWxvUWl4WFFVRlhMRWxCUVdZN1FVRkRRU3haUVVGSlJDeFBRVUZQUXl4VFFVRlRSQ3hKUVVGd1FqdEJRVU5CTEZsQlFVbHRReXhQUVVGUGJFTXNVMEZCVTJoRUxGZEJRWEJDTzBGQlEwRnJSaXhoUVVGTE1VSXNkVUpCUVV3c1EwRkJOa0pVTEVsQlFUZENMRVZCUVcxREwwUXNWVUZCYmtNN1FVRkRRV3RITEdGQlFVdDZRaXhwUWtGQlRDeERRVUYxUW5wRkxGZEJRVmN5UWl4RFFVRnNReXhGUVVGeFF6TkNMRmRCUVZjMFFpeERRVUZvUkN4RlFVRnRSSHBDTEZkQlFXNUVPMEZCUTBFN1FVRkRRU3haUVVGSlFTeFpRVUZaUXl4SFFVRmFMRXRCUVc5Q05FUXNVMEZCVTJ4RUxFbEJRVGRDTEVsQlFYRkRXQ3haUVVGWlJTeEhRVUZhTEV0QlFXOUNNa1FzVTBGQlUycEVMRWxCUVhSRkxFVkJRVFJGT3p0QlFVVTFSVzFHTEdGQlFVdGlMSFZDUVVGTUxFTkJRVFpDY2tJc1VVRkJOMEk3UVVGRFFXdERMR0ZCUVV0NFFpeHJRa0ZCVEN4RFFVRjNRbFlzVVVGQmVFSXNSVUZCYTBNM1JDeFhRVUZzUXp0QlFVTklMRXRCTTA1eFFqdEJRVFpPZEVKclJpd3lRa0UzVG5OQ0xHMURRVFpPUjNKQ0xGRkJOMDVJTEVWQk5rNWhPMEZCUXk5Q0xGbEJRVWsxUkN4TlFVRk5ORVFzVTBGQlUyeEVMRWxCUVc1Q08wRkJRMEVzV1VGQlNWUXNUVUZCVFRKRUxGTkJRVk5xUkN4SlFVRnVRanRCUVVOQkxGbEJRVWx2Uml4UlFVRlJia01zVTBGQlUyNUVMRTFCUVhKQ096dEJRVVZCTEZsQlFVbG5SaXhWUVVGVkxFdEJRVXQ2UlN4aFFVRk1MRU5CUVcxQ2FFSXNSMEZCYmtJc1EwRkJaRHRCUVVOQkxGbEJRVWxuUnl4VlFVRlZVQ3hYUVVGWFFTeFJRVUZSZUVZc1IwRkJVaXhEUVVGNlFqdEJRVU5CTEZsQlFVa3JSaXhQUVVGS0xFVkJRV0U3UVVGRFZGQXNiMEpCUVZGRkxFdEJRVkk3UVVGRFFVc3NiMEpCUVZGTUxFdEJRVkk3UVVGRFFVc3NiMEpCUVZGRExFbEJRVklzUTBGQllVWXNTMEZCWWl4SlFVRnpRaXhKUVVGMFFqdEJRVU5CTEdkQ1FVRkpReXhSUVVGUlRDeExRVUZTTEVsQlFXbENMRU5CUVhKQ0xFVkJRWGRDTzBGQlEzQkNTeXgzUWtGQlVVTXNTVUZCVWl4RFFVRmhReXhOUVVGaUxFZEJRWE5DTEVOQlFYUkNPMEZCUTBGR0xIZENRVUZSVEN4TFFVRlNMRWRCUVdkQ0xFTkJRV2hDTzBGQlEwZzdRVUZEU2pzN1FVRkZSQzlDTEdsQ1FVRlRiRVFzU1VGQlZDeEhRVUZuUWl4RFFVRkRMRU5CUVdwQ08wRkJRMEZyUkN4cFFrRkJVMnBFTEVsQlFWUXNSMEZCWjBJc1EwRkJReXhEUVVGcVFqdEJRVU5CYVVRc2FVSkJRVk51UkN4TlFVRlVMRWRCUVd0Q0xFTkJRVU1zUTBGQmJrSTdRVUZEUVN4aFFVRkxVeXhqUVVGTUxFZEJRWE5DTEVsQlFYUkNPMEZCUTBnc1MwRnNVSEZDTzBGQmIxQjBRbWxHTEdOQmNGQnpRaXh6UWtGdlVGWnVSeXhIUVhCUVZTeEZRVzlRVEVNc1IwRndVRXNzUlVGdlVFRTdRVUZEYkVJc1pVRkJUMFFzVDBGQlR5eERRVUZRTEVsQlFWbERMRTlCUVU4c1EwRkJia0lzU1VGQmQwSkVMRTlCUVU4c1MwRkJTeXRDTEZOQlFVd3NRMEZCWlM5Q0xFZEJRVGxETEVsQlFYRkVReXhQUVVGUExFdEJRVXM0UWl4VFFVRk1MRU5CUVdVNVFpeEhRVUZzUmp0QlFVTklMRXRCZEZCeFFqdEJRWGRRZEVKeFJTeHpRa0Y0VUhOQ0xEaENRWGRRUmxZc1VVRjRVRVVzUlVGM1VGRjNReXhWUVhoUVVpeEZRWGRRYjBJN1FVRkRkRU1zV1VGQlNYQkhMRTFCUVUxdlJ5eFhRVUZYY0Vjc1IwRkJja0k3UVVGRFFTeFpRVUZKUXl4TlFVRk5iVWNzVjBGQlYyNUhMRWRCUVhKQ08wRkJRMEVzV1VGQlNTeExRVUZMYTBjc1ZVRkJUQ3hEUVVGblFtNUhMRWRCUVdoQ0xFVkJRWEZDUXl4SFFVRnlRaXhEUVVGS0xFVkJRU3RDTzBGQlF6TkNMR2RDUVVGSmQwWXNWVUZCVlN4TFFVRkxla1VzWVVGQlRDeERRVUZ0UW1oQ0xFZEJRVzVDTEVsQlFUQkNMRXRCUVV0blFpeGhRVUZNTEVOQlFXMUNhRUlzUjBGQmJrSXNTMEZCTWtJc1JVRkJRekpHTEU5QlFWRXNRMEZCVkN4RlFVRnVSVHRCUVVOQkxHZENRVUZKU3l4VlFVRlZVQ3hSUVVGUmVFWXNSMEZCVWl4SlFVRmxkMFlzVVVGQlVYaEdMRWRCUVZJc1MwRkJaMElzUlVGQlF6QkdMRTlCUVZFc1EwRkJWQ3hGUVVGWlRTeE5RVUZOTEVWQlFXeENMRVZCUVRkRE8wRkJRMEZ5UXl4eFFrRkJVMnhFTEVsQlFWUXNSMEZCWjBKV0xFZEJRV2hDTzBGQlEwRTBSQ3h4UWtGQlUycEVMRWxCUVZRc1IwRkJaMEpXTEVkQlFXaENPMEZCUTBFeVJDeHhRa0ZCVTI1RUxFMUJRVlFzUjBGQmEwSjFSaXhSUVVGUlF5eEpRVUZTTEVOQlFXRkRMRTFCUVM5Q08wRkJRMEZVTEc5Q1FVRlJSU3hMUVVGU08wRkJRMEZMTEc5Q1FVRlJUQ3hMUVVGU08wRkJRMEZMTEc5Q1FVRlJReXhKUVVGU0xFTkJRV0ZKTEVsQlFXSXNRMEZCYTBKNlF5eFJRVUZzUWp0QlFVTklMRk5CVkVRc1RVRlRUenRCUVVOSVFTeHhRa0ZCVTJ4RUxFbEJRVlFzUjBGQlowSXNRMEZCUXl4RFFVRnFRanRCUVVOQmEwUXNjVUpCUVZOcVJDeEpRVUZVTEVkQlFXZENMRU5CUVVNc1EwRkJha0k3UVVGRFFXbEVMSEZDUVVGVGJrUXNUVUZCVkN4SFFVRnJRaXhEUVVGRExFTkJRVzVDTzBGQlEwZzdRVUZEUkN4aFFVRkxVeXhqUVVGTUxFZEJRWE5DTEVsQlFYUkNPMEZCUTBnc1MwRXhVWEZDTzBGQk5GRjBRbTlHTEc5Q1FUVlJjMElzT0VKQk5GRkdPMEZCUTJoQ0xHVkJRVThzUzBGQlMzQkdMR05CUVZvN1FVRkRTQ3hMUVRsUmNVSTdRVUZuVW5SQ2NVWXNjVUpCYUZKelFpdzJRa0ZuVWtnNVF5eExRV2hTUnl4RlFXZFNTVHRCUVVOMFFpeGhRVUZMZGtNc1kwRkJUQ3hIUVVGelFuVkRMRXRCUVhSQ08wRkJRMGdzUzBGc1VuRkNPMEZCYjFKMFFpdERMRmxCY0ZKelFpeHpRa0Z2VWxZN1FVRkRVaXhoUVVGTFF5eE5RVUZNTzBGQlEwRXNZVUZCU3psRExFbEJRVXdzUTBGQlZXRXNSVUZCVml4RFFVRmhja1VzUjBGQlIzTkZMRWxCUVVnc1EwRkJVVU1zVTBGQlVpeERRVUZyUW1kRExHTkJRUzlDTEVWQlFTdERMRXRCUVV0RExHZENRVUZ3UkN4RlFVRnpSU3hKUVVGMFJUdEJRVU5CTEdGQlFVdERMR2xDUVVGTU8wRkJRMGdzUzBGNFVuRkNPMEZCTUZKMFFrTXNZVUV4VW5OQ0xIVkNRVEJTVkR0QlFVTlVMR0ZCUVV0S0xFMUJRVXc3UVVGRFFTeGhRVUZMT1VNc1NVRkJUQ3hEUVVGVmNVSXNSMEZCVml4RFFVRmpOMFVzUjBGQlIzTkZMRWxCUVVnc1EwRkJVVU1zVTBGQlVpeERRVUZyUW1kRExHTkJRV2hETEVWQlFXZEVMRXRCUVV0RExHZENRVUZ5UkN4RlFVRjFSU3hKUVVGMlJUdEJRVU5JTEV0Qk4xSnhRanRCUVN0U2RFSkJMRzlDUVM5U2MwSXNPRUpCSzFKR08wRkJRMmhDTEZsQlFVbG9SQ3hQUVVGUExFdEJRVXRCTEVsQlFXaENPMEZCUTBFc1lVRkJTMklzYTBKQlFVd3NSMEZCTUVKaExFdEJRVXRzUXl4TFFVRk1MRWRCUVdGclF5eExRVUZMYlVRc1QwRkJiRUlzUjBGQk5FSnVSQ3hMUVVGTGIwUXNUVUZCTTBRN1FVRkRRU3hoUVVGTGFFVXNhMEpCUVV3c1IwRkJNRUpaTEV0QlFVdHFReXhOUVVGTUxFZEJRV05wUXl4TFFVRkxjVVFzVDBGQmJrSXNSMEZCTmtKeVJDeExRVUZMYzBRc1RVRkJOVVE3UVVGRFFTeGhRVUZMYmtZc1lVRkJUQ3hIUVVGeFFpeEpRVUZ5UWp0QlFVTklMRXRCY0ZOeFFqdEJRWE5UZEVKdlJpeGhRWFJUYzBJc2RVSkJjMU5VTzBGQlExUXNZVUZCUzFRc1RVRkJURHRCUVVOQkxGbEJRVWtzUzBGQlMxVXNUMEZCVkN4RlFVRnJRanRCUVVOa0xHbENRVUZMUVN4UFFVRk1MRU5CUVdGb1F5eFBRVUZpTzBGQlEwRXNhVUpCUVV0blF5eFBRVUZNTEVkQlFXVXNTVUZCWmp0QlFVTklPMEZCUTBRc1lVRkJTME1zWlVGQlRDeEhRVUYxUWl4SlFVRjJRanRCUVVOSUxFdEJOMU54UWpzN08wRkJLMU4wUWpzN096czdPenM3TzBGQlUwRkRMR2RDUVhoVWMwSXNNRUpCZDFST08wRkJRMW9zWlVGQlR5eExRVUZMTlVVc1ZVRkJXanRCUVVOSUxFdEJNVlJ4UWpzN08wRkJORlIwUWpzN096czdPenM3UVVGUlFUWkZMR2RDUVhCVmMwSXNkMEpCYjFWU1F5eFRRWEJWVVN4RlFXOVZSenRCUVVOeVFpeGhRVUZMT1VVc1ZVRkJUQ3hIUVVGclFqaEZMRk5CUVd4Q08wRkJRMGdzUzBGMFZYRkNPenM3UVVGM1ZYUkNPenM3T3pzN096czdPMEZCVlVGRExHVkJiRlp6UWl4MVFrRnJWbFJETEZsQmJGWlRMRVZCYTFaTE8wRkJRM1pDTEdWQlFVOHNTMEZCUzBNc1YwRkJUQ3hEUVVGcFFrUXNXVUZCYWtJc1EwRkJVRHRCUVVOSUxFdEJjRlp4UWpzN08wRkJjMVowUWpzN096czdPenM3T3pzN096dEJRV0ZCUlN4cFFrRnVWM05DTEhsQ1FXMVhVRU1zUjBGdVYwOHNSVUZ0VjBad1J5eERRVzVYUlN4RlFXMVhRenRCUVVOdVFpeFpRVUZKUkN4VlFVRktPMEZCUTBFc1dVRkJTVU1zVFVGQlRYRkhMRk5CUVZZc1JVRkJjVUk3UVVGRGFrSjBSeXhuUWtGQlNYVkhMRXRCUVV0RExFdEJRVXdzUTBGQlYwZ3NSMEZCV0N4RFFVRktPMEZCUTBGd1J5eG5Ra0ZCU1hOSExFdEJRVXRETEV0QlFVd3NRMEZCVjNaSExFTkJRVmdzUTBGQlNqdEJRVU5JTEZOQlNFUXNUVUZKU3p0QlFVTkVSQ3huUWtGQlNYVkhMRXRCUVV0RExFdEJRVXdzUTBGQlYwZ3NTVUZCU1hKSExFTkJRV1lzUTBGQlNqdEJRVU5CUXl4blFrRkJTWE5ITEV0QlFVdERMRXRCUVV3c1EwRkJWMGdzU1VGQlNYQkhMRU5CUVdZc1EwRkJTanRCUVVOSU96dEJRVVZFTEZsQlFVbDNSeXhaUVVGS08wRkJRMEVzWjBKQlFWRXNTMEZCUzNSR0xHbENRVUZpTzBGQlEwa3NhVUpCUVV0MlF5eEhRVUZIT0Vnc1VVRkJTQ3hEUVVGWlF5eFhRVUZhTEVOQlFYZENReXhMUVVFM1FqdEJRVU5KU0N4elFrRkJUU3hMUVVGTFNTeHRRa0ZCVEN4RFFVRjVRamRITEVOQlFYcENMRVZCUVRSQ1F5eERRVUUxUWl4RFFVRk9PMEZCUTBFN1FVRkRTaXhwUWtGQlMzSkNMRWRCUVVjNFNDeFJRVUZJTEVOQlFWbERMRmRCUVZvc1EwRkJkMEpITEVkQlFUZENPMEZCUTBsTUxITkNRVUZOTEV0QlFVdE5MR2xDUVVGTUxFTkJRWFZDTDBjc1EwRkJka0lzUlVGQk1FSkRMRU5CUVRGQ0xFTkJRVTQ3UVVGRFFUdEJRVU5LTEdsQ1FVRkxja0lzUjBGQlJ6aElMRkZCUVVnc1EwRkJXVU1zVjBGQldpeERRVUYzUWtzc1IwRkJOMEk3UVVGRFNWQXNjMEpCUVUwc1MwRkJTMUVzYVVKQlFVd3NRMEZCZFVKcVNDeERRVUYyUWl4RlFVRXdRa01zUTBGQk1VSXNRMEZCVGp0QlFVTkJPMEZCVkZJN1FVRlhRU3hsUVVGUGQwY3NSMEZCVUR0QlFVTklMRXRCTTFoeFFqdEJRVFpZZEVKVExITkNRVGRZYzBJc09FSkJObGhHYkVnc1EwRTNXRVVzUlVFMldFTkRMRU5CTjFoRUxFVkJObGhKTzBGQlEzUkNMRmxCUVVsRUxFdEJRVXNzVVVGQlQwRXNRMEZCVUN4NVEwRkJUMEVzUTBGQlVDeFBRVUZoTEZGQlFYUkNMRVZCUVdkRE8wRkJRelZDTEdkQ1FVRkpjVWNzVFVGQlRYSkhMRU5CUVZZN1FVRkRRVU1zWjBKQlFVbHZSeXhKUVVGSmNFY3NRMEZCVWp0QlFVTkJSQ3huUWtGQlNYRkhMRWxCUVVseVJ5eERRVUZTTzBGQlEwZzdRVUZEUkN4bFFVRlBRU3hMUVVGTExFdEJRVXR0U0N4VlFVRk1MRU5CUVdkQ2FrZ3NTMEZCY2tJc1NVRkJPRUpFTEV0QlFVc3NTMEZCUzJ0SUxGVkJRVXdzUTBGQlowSm9TQ3hOUVVGdVJDeEpRVUUyUkVnc1NVRkJTU3hEUVVGcVJTeEpRVUZ6UlVNc1NVRkJTU3hEUVVGcVJqdEJRVU5JTEV0QmNGbHhRanRCUVhOWmRFSTRSeXh4UWtGMFdYTkNMRFpDUVhOWlNDOUhMRU5CZEZsSExFVkJjMWxCUXl4RFFYUlpRU3hGUVhOWlJ6dEJRVU55UWl4bFFVRlBja0lzUjBGQlIzZEpMRVZCUVVnc1EwRkRTQ3hMUVVGTFF5eFpRVUZNTEVOQlFXdENia2dzUzBGQmJFSXNSMEZCTUVJc1EwRkJNVUlzU1VGQlowTXNTMEZCUzJsSUxGVkJRVXdzUTBGQlowSnFTQ3hMUVVGb1FpeEhRVUYzUWtZc1EwRkJlRUlzUjBGQk5FSkRMRU5CUVRWQ0xFZEJRV2RETEVOQlFXaEZMRU5CUkVjc1JVRkZTQ3hMUVVGTGIwZ3NXVUZCVEN4RFFVRnJRbXhJTEUxQlFXeENMRWRCUVRKQ0xFTkJRVE5DTEVsQlFXdERMRXRCUVV0blNDeFZRVUZNTEVOQlFXZENhRWdzVFVGQmFFSXNSMEZCZVVJc1EwRkJla0lzUjBGQk5rSklMRU5CUVRkQ0xFZEJRV2xEUXl4RFFVRnVReXhIUVVGM1F5eERRVUY0UlN4RFFVWkhMRU5CUVZBN1FVRkpTQ3hMUVROWmNVSTdRVUUyV1hSQ05FY3NkVUpCTjFselFpd3JRa0UyV1VRM1J5eERRVGRaUXl4RlFUWlpSVU1zUTBFM1dVWXNSVUUyV1VzN1FVRkRka0lzWlVGQlQzSkNMRWRCUVVkM1NTeEZRVUZJTEVOQlEwaHdTQ3hKUVVGSkxFdEJRVXR4U0N4WlFVRk1MRU5CUVd0Q2JrZ3NTMEZFYmtJc1JVRkZTQ3hEUVVGRExFdEJRVXRwU0N4VlFVRk1MRU5CUVdkQ2FFZ3NUVUZCYUVJc1IwRkJlVUpHTEVOQlFYcENMRWRCUVRaQ0xFTkJRVGxDTEVsQlFXMURMRXRCUVV0dlNDeFpRVUZNTEVOQlFXdENiRWdzVFVGR2JFUXNRMEZCVUR0QlFVbElMRXRCYkZweFFqdEJRVzlhZEVJNFJ5eHhRa0Z3V25OQ0xEWkNRVzlhU0haSkxFZEJjRnBITEVWQmIxcEZSQ3hIUVhCYVJpeEZRVzlhVHp0QlFVTjZRaXhaUVVGSk5ra3NXVUZCV1N4TFFVRkxSQ3haUVVGTUxFTkJRV3RDYmtnc1MwRkJiRU03UVVGRFFTeFpRVUZKY1Vnc1lVRkJZU3hMUVVGTFJpeFpRVUZNTEVOQlFXdENiRWdzVFVGQmJrTTdRVUZEUVN4WlFVRkpjVWdzVDBGQlR5eExRVUZMVEN4VlFVRk1MRU5CUVdkQ2FFZ3NUVUZCTTBJN08wRkJSVUVzV1VGQlNYRkZMRkZCUVZFclFpeExRVUZMUXl4TFFVRk1MRU5CUVZjNVNDeEhRVUZZTEVsQlFXdENOa2dzUzBGQlMwTXNTMEZCVEN4RFFVRlhMMGdzUjBGQldDeEpRVUZyUWl4TFFVRkxNRWtzVlVGQlRDeERRVUZuUW1wSUxFdEJRV2hGTzBGQlEwRXNXVUZCU1hWSUxFMUJRVTBzUzBGQlN6RkhMRTFCUVV3c1EwRkJXWGxFTEV0QlFWb3NRMEZCVmp0QlFVTkJMRmxCUVVsclJDeFZRVUZWTEV0QlFVdDBSeXhUUVVGTUxFTkJRV1Z4Unl4SFFVRm1MRVZCUVc5Q1F5eFBRVUZzUXp0QlFVTkJMRmxCUVVsRExGTkJRVk5FTEZGQlFWRkZMRlZCUVhKQ096dEJRVVZCTEZsQlFVbERMR05CUVdNc1MwRkJTM3BHTEVsQlFVd3NRMEZCVld4RExFdEJRVllzUjBGQmEwSXNRMEZCY0VNN1FVRkRRU3haUVVGSk5FZ3NaVUZCWlN4TFFVRkxNVVlzU1VGQlRDeERRVUZWYWtNc1RVRkJWaXhIUVVGdFFpeERRVUYwUXp0QlFVTkJMRmxCUVVrMFNDeFhRVUZaTEV0QlFVdERMR0ZCUVV3c1MwRkJkVUp3U2l4SFFVRkhPRWdzVVVGQlNDeERRVUZaZFVJc1dVRkJXaXhEUVVGNVFrTXNaMEpCUVdwRUxFZEJRWEZGTEVOQlFYSkZMRWRCUVhsRkxFTkJRVU1zUTBGQmVrWTdRVUZEUVN4WlFVRkpiRWtzU1VGQlNTeERRVUZTTzBGQlFVRXNXVUZCVjBNc1NVRkJTU3hEUVVGbU8wRkJRMEVzV1VGQlNXdEpMRkZCUVZFc1EwRkJXanRCUVVOQkxGbEJRVWxETEZOQlFWTXNRMEZCWWp0QlFVTkJMRmxCUVVsRExGRkJRVkVzUTBGQldqdEJRVU5CTEZsQlFVbERMRk5CUVZNc1EwRkJZanRCUVVOQkxHZENRVUZSTEV0QlFVdERMRmxCUVdJN1FVRkRTU3hwUWtGQlN6TktMRWRCUVVjNFNDeFJRVUZJTEVOQlFWazRRaXhYUVVGYUxFTkJRWGRDUXl4aFFVRTNRanRCUVVOSlRpeDNRa0ZCVVN4RFFVRlNPMEZCUTBGRExIbENRVUZWTEV0QlFVdEtMR0ZCUVV3c1MwRkJkVUp3U2l4SFFVRkhPRWdzVVVGQlNDeERRVUZaZFVJc1dVRkJXaXhEUVVGNVFrTXNaMEpCUVdwRUxFZEJRWEZGTEVOQlFYSkZMRWRCUVhsRldpeFpRVUZaTEVOQlFUbEdPMEZCUTBFc2IwSkJRVWszU1N4TlFVRk5MRU5CUVU0c1MwRkJXU3hEUVVGb1FpeEZRVUZ0UWp0QlFVTm1NRW9zTkVKQlFWRmlMRmxCUVZrc1EwRkJXaXhIUVVGblFsTXNVVUZCZUVJN1FVRkRTRHRCUVVORUwwZ3NiMEpCUVVsMFFpeE5RVUZOTkVrc1UwRkJUaXhIUVVGclFtRXNTMEZCYkVJc1IwRkJNRUpETEUxQlFURkNMRWRCUVcxRFZDeFBRVUZQTTBnc1EwRkJNVU1zUjBGQk9FTTJTQ3hYUVVGc1JEdEJRVU5CTlVnc2IwSkJRVWtzUTBGQlEzVklMRTlCUVU4dlNTeEhRVUZRTEVkQlFXRXNRMEZCWkN4TFFVRnZRamhKTEdGQlFXRXNRMEZCUTBFc1lVRkJZU3hMUVVGTGJVSXNZMEZCYmtJc1NVRkJjVU1zUTBGQmRFVXNTVUZCTWtWbUxFOUJRVTh4U0N4RFFVRnNSaXhIUVVGelJqWklMRmxCUVRGR08wRkJRMEU3UVVGRFNpeHBRa0ZCUzJ4S0xFZEJRVWM0U0N4UlFVRklMRU5CUVZrNFFpeFhRVUZhTEVOQlFYZENSeXhoUVVFM1FqdEJRVU5KVGl4M1FrRkJVU3hEUVVGU08wRkJRMEZETEhsQ1FVRlZMRXRCUVV0T0xHRkJRVXdzUzBGQmRVSndTaXhIUVVGSE9FZ3NVVUZCU0N4RFFVRlpkVUlzV1VGQldpeERRVUY1UWtNc1owSkJRV3BFTEVkQlFYRkZXQ3hoUVVGaExFTkJRV3hHTEVkQlFYTkdMRU5CUVM5R08wRkJRMEVzYjBKQlFVazNTU3hOUVVGTkxFTkJRVTRzUzBGQldTeERRVUZvUWl4RlFVRnRRanRCUVVObU1rb3NORUpCUVZGa0xHRkJRV0VzUTBGQllpeEhRVUZwUWl4RFFVRkRVU3hSUVVFeFFqdEJRVU5JTzBGQlEwUXZTQ3h2UWtGQlNYUkNMRTlCUVU4MFNTeFpRVUZaTEVOQlFVTkJMRmxCUVZrc1MwRkJTMjlDTEdOQlFXeENMRWxCUVc5RExFTkJRWFpFTEVsQlFUUkVaaXhQUVVGUE0wZ3NRMEZCYmtVc1IwRkJkVVUyU0N4WFFVRXpSVHRCUVVOQk5VZ3NiMEpCUVVrc1EwRkJRM1ZJTEU5QlFVOHZTU3hIUVVGUUxFZEJRV0VzUTBGQlpDeEpRVUZ0UWpoSkxGVkJRVzVDTEVkQlFXZERZeXhMUVVGb1F5eEhRVUYzUTBNc1RVRkJlRU1zUjBGQmFVUllMRTlCUVU4eFNDeERRVUY0UkN4SFFVRTBSRFpJTEZsQlFXaEZPMEZCUTBFN1FVRnNRbEk3UVVGdlFrRXNaVUZCVDJ4S0xFZEJRVWQzU1N4RlFVRklMRU5CUVUxd1NDeERRVUZPTEVWQlFWTkRMRU5CUVZRc1EwRkJVRHRCUVVOSUxFdEJNMkp4UWpzN08wRkJObUowUWpzN096czdPenM3T3pzN096czdPenM3UVVGcFFrRXlTU3huUWtFNVkzTkNMSGRDUVRoalVtNUNMRWRCT1dOUkxFVkJPR05JYjBJc1RVRTVZMGNzUlVFNFkwdERMRkZCT1dOTUxFVkJPR05sUXl4TFFUbGpaaXhGUVRoamMwSTdRVUZEZUVNc1dVRkJTVVlzVjBGQlYzWkRMRk5CUVdZc1JVRkJNRUk3UVVGRGRFSXNhMEpCUVUwc1NVRkJTVEJETEV0QlFVb3NRMEZCVlN4elJFRkJWaXhEUVVGT08wRkJRMGc3UVVGRFJDeFpRVUZKTTBNc1dVRkJTanRCUVVOQkxGbEJRVWt3UXl4VlFVRlZla01zVTBGQlZpeEpRVUYxUWl4RlFVRkZkVU1zYTBKQlFXdENha3NzUjBGQlIzRkxMRWxCUVhaQ0xFTkJRVE5DTEVWQlFYbEVPMEZCUTNKRU8wRkJRMEUxUXl4clFrRkJUWHBJTEVkQlFVZDNTU3hGUVVGSUxFTkJRVTE1UWl4TlFVRk9MRVZCUVdORExGRkJRV1FzUTBGQlRqdEJRVU5JTEZOQlNFUXNUVUZIVHp0QlFVTklla01zYTBKQlFVMTNReXhOUVVGT08wRkJRMEZGTEc5Q1FVRlJSQ3hSUVVGU08wRkJRMGc3TzBGQlJVUjZReXhaUVVGSmNrY3NRMEZCU2l4SFFVRlJkVWNzUzBGQlMwTXNTMEZCVEN4RFFVRlhTQ3hKUVVGSmNrY3NRMEZCWml4RFFVRlNPMEZCUTBGeFJ5eFpRVUZKY0Vjc1EwRkJTaXhIUVVGUmMwY3NTMEZCUzBNc1MwRkJUQ3hEUVVGWFNDeEpRVUZKY0Vjc1EwRkJaaXhEUVVGU08wRkJRMEVzV1VGQlNTeExRVUZMYVVnc2EwSkJRVXdzUTBGQmQwSmlMRWRCUVhoQ0xFTkJRVW9zUlVGQmEwTTdRVUZET1VJc2EwSkJRVTBzU1VGQlNUSkRMRXRCUVVvc1EwRkJWU3huUkVGQlZpeERRVUZPTzBGQlEwZzdRVUZEUkN4WlFVRkpMRU5CUVVNc1MwRkJTMnBKTEUxQlFVNHNTVUZCWjBJc1EwRkJReXhMUVVGTFR5eFRRVUYwUWl4SlFVRnRReXhMUVVGTFFTeFRRVUZNTEVOQlFXVnhSQ3hOUVVGbUxFbEJRWGxDTEVOQlFXaEZMRVZCUVcxRk8wRkJReTlFTDBZc1pVRkJSM05MTEV0QlFVZ3NRMEZCVXl4SlFVRlVPMEZCUTBFN1FVRkRTRHRCUVVORUxGbEJRVWw2UWl4UlFVRlJMRU5CUVZJc1NVRkJZVUVzVFVGQlRTeExRVUZMYmtjc1UwRkJUQ3hEUVVGbExFTkJRV1lzUlVGQmEwSTJTQ3hSUVVGNlF5eEZRVUZ0UkR0QlFVTXZRM1pMTEdWQlFVZHpTeXhMUVVGSUxFTkJRVk1zU1VGQlZDeEZRVUZsZWtJc1IwRkJaanRCUVVOQk8wRkJRMGc3TzBGQlJVUnpRaXhuUWtGQlVVRXNVMEZCVXl4RFFVRnFRanRCUVVOQkxGbEJRVWxMTEdWQlFXVXNTMEZCUzBNc1kwRkJUQ3hEUVVGdlFtaEVMRWRCUVhCQ0xFTkJRVzVDTzBGQlEwRXNXVUZCU1dsRUxHRkJRV0VzUzBGQlMwTXNXVUZCVEN4RFFVRnJRbXhFTEVkQlFXeENMRU5CUVdwQ096dEJRVVZCTEZsQlFVbHBSQ3hsUVVGbE4wSXNSMEZCWml4SlFVRnpRakpDTEdsQ1FVRnBRa3dzUzBGQk0wTXNSVUZCYTBRN08wRkJSV3hFTEZsQlFVbFRMR05CUVdNc1EwRkJReTlDTEUxQlFVMXpRaXhMUVVGUUxFMUJRV3RDTEVOQlFYQkRPMEZCUTBFc1lVRkJTMVVzYVVKQlFVd3NRMEZCZFVKRUxGZEJRWFpDTEVWQlFXOURia1FzUjBGQmNFTTdRVUZEU0N4TFFXcG1jVUk3UVVGdFpuUkNiMFFzY1VKQmJtWnpRaXcyUWtGdFpraG9ReXhIUVc1bVJ5eEZRVzFtUlhCQ0xFZEJibVpHTEVWQmJXWlBPMEZCUTNwQ0xGbEJRVWx2UWl4UlFVRlJMRU5CUVZJc1NVRkJZU3hEUVVGRExFdEJRVXR5Unl4VFFVRk1MRU5CUVdWeFJ5eEhRVUZtTEVOQlFXeENMRVZCUVhWRE8wRkJRMjVETzBGQlEwZzdPMEZCUlVRc1dVRkJTV2xETEUxQlFVMHNTVUZCUzNKRUxFbEJRVWx5Unl4RFFVRktMRWRCUVZGeFJ5eEpRVUZKY0Vjc1EwRkJTaXhIUVVGUkxFdEJRVXRyU0N4VlFVRk1MRU5CUVdkQ2FrZ3NTMEZCTDBNN1FVRkRRU3haUVVGSmQwb3NUVUZCVFN4TFFVRkxNMGtzVFVGQlRDeERRVUZaTkVRc1RVRkJkRUlzUlVGQk9FSTdRVUZETVVJc2FVSkJRVXMxUkN4TlFVRk1MRU5CUVZreVNTeEhRVUZhTEVsQlFXMUNha01zUjBGQmJrSTdRVUZEUVN4cFFrRkJTMnhJTEdGQlFVd3NSMEZCY1VJc1NVRkJja0k3UVVGRFNEdEJRVU5LTEV0Qk4yWnhRanM3TzBGQksyWjBRanM3T3pzN096czdPenM3T3pzN1FVRmpRV2RLTEdkQ1FUZG5Rbk5DTEhkQ1FUWm5RbEpzUkN4SFFUZG5RbEVzUlVFMlowSkljRWNzUTBFM1owSkhMRVZCTm1kQ1FUdEJRVU5zUWl4WlFVRkpiMGNzVVVGQlVVTXNVMEZCV2l4RlFVRjFRanRCUVVOdVFpeHJRa0ZCVFN4SlFVRkpNRU1zUzBGQlNpeERRVUZWTEhORVFVRldMRU5CUVU0N1FVRkRTRHRCUVVORUxGbEJRVWxvU2l4SlFVRkpjVWNzUjBGQlVqdEJRVU5CTEZsQlFVbHdSeXhOUVVGTmNVY3NVMEZCVml4RlFVRnhRanRCUVVOcVFuUkhMR2RDUVVGSmNVY3NTVUZCU1hKSExFTkJRVkk3UVVGRFFVTXNaMEpCUVVsdlJ5eEpRVUZKY0Vjc1EwRkJVanRCUVVOSU8wRkJRMFFzV1VGQlNTeExRVUZMYVVnc2EwSkJRVXdzUTBGQmQwSnNTQ3hEUVVGNFFpeEZRVUV5UWtNc1EwRkJNMElzUTBGQlNpeEZRVUZ0UXp0QlFVTXZRaXhyUWtGQlRTeEpRVUZKSzBrc1MwRkJTaXhEUVVGVkxHZEVRVUZXTEVOQlFVNDdRVUZEU0R0QlFVTkVMRmxCUVVrc1EwRkJReXhMUVVGTGFra3NUVUZCVml4RlFVRnJRanRCUVVOa2JrTXNaVUZCUjNOTExFdEJRVWdzUTBGQlV5eEpRVUZVTzBGQlEwRXNiVUpCUVU4c1NVRkJVRHRCUVVOSU96dEJRVVZFTEZsQlFVa3hSU3hSUVVGUkswSXNTMEZCUzBNc1MwRkJUQ3hEUVVGWGVFY3NRMEZCV0N4SlFVRm5RblZITEV0QlFVdERMRXRCUVV3c1EwRkJWM1pITEVOQlFWZ3NTVUZCWjBJc1MwRkJTMnRJTEZWQlFVd3NRMEZCWjBKcVNDeExRVUUxUkR0QlFVTkJPMEZCUTBFc1dVRkJTWGxLTEU5QlFVOHNTMEZCU3pWSkxFMUJRVXdzUTBGQldYbEVMRXRCUVZvc1EwRkJXRHM3UVVGRlFTeGxRVUZQTEVOQlFVTnRSaXhQUVVGUEwwc3NSMEZCUnpoSUxGRkJRVWdzUTBGQldXdEVMRkZCUVZvc1EwRkJjVUpETEZsQlFUZENMRTFCUVN0RExFTkJRWFJFTzBGQlEwZ3NTMEZ1YVVKeFFqdEJRWEZwUW5SQ1VpeHJRa0Z5YVVKelFpd3dRa0Z4YVVKT2FFUXNSMEZ5YVVKTkxFVkJjV2xDUkhCSExFTkJjbWxDUXl4RlFYRnBRa1U3UVVGRGNFSXNXVUZCU1N4RFFVRkRiMGNzUjBGQlRDeEZRVUZWTzBGQlEwNHNhMEpCUVUwc1NVRkJTVEpETEV0QlFVb3NRMEZCVlN4dFJFRkJWaXhEUVVGT08wRkJRMGc3UVVGRFJDeFpRVUZKTDBrc1RVRkJUWEZITEZOQlFWWXNSVUZCY1VJN1FVRkRha0pFTEd0Q1FVRk5la2dzUjBGQlIzZEpMRVZCUVVnc1EwRkJUV1lzUjBGQlRpeEZRVUZYY0Vjc1EwRkJXQ3hEUVVGT08wRkJRMGc3UVVGRFJDeFpRVUZKTEV0QlFVdHBTQ3hyUWtGQlRDeERRVUYzUW1Jc1IwRkJlRUlzUTBGQlNpeEZRVUZyUXp0QlFVTTVRaXhyUWtGQlRTeEpRVUZKTWtNc1MwRkJTaXhEUVVGVkxEWkRRVUZXTEVOQlFVNDdRVUZEU0R0QlFVTkVMRmxCUVVrc1EwRkJReXhMUVVGTGFra3NUVUZCVml4RlFVRnJRanRCUVVOa2JrTXNaVUZCUjNOTExFdEJRVWdzUTBGQlV5eEpRVUZVTzBGQlEwRXNiVUpCUVU4c1NVRkJVRHRCUVVOSU96dEJRVVZFTEZsQlFVbFJMRTFCUVUxdVJDeExRVUZMUXl4TFFVRk1MRU5CUVZkSUxFbEJRVWx5Unl4RFFVRm1MRWxCUVc5Q2RVY3NTMEZCUzBNc1MwRkJUQ3hEUVVGWFNDeEpRVUZKY0Vjc1EwRkJaaXhKUVVGdlFpeExRVUZMYTBnc1ZVRkJUQ3hEUVVGblFtcElMRXRCUVd4Rk8wRkJRMEU3UVVGRFFTeFpRVUZKZVVvc1QwRkJUeXhMUVVGTE5Va3NUVUZCVEN4RFFVRlpNa2tzUjBGQldpeERRVUZZT3p0QlFVVkJMR1ZCUVU4c1EwRkJRME1zVDBGQlR5OUxMRWRCUVVjNFNDeFJRVUZJTEVOQlFWbHJSQ3hSUVVGYUxFTkJRWEZDUlN4WFFVRTNRaXhOUVVFNFF5eERRVUZ5UkR0QlFVTklMRXRCZW1wQ2NVSTdRVUV5YWtKMFFrTXNiMEpCTTJwQ2MwSXNORUpCTW1wQ1NqZElMRXRCTTJwQ1NTeEZRVEpxUWtjN1FVRkRja0lzWVVGQlN6TkNMR0ZCUVV3c1IwRkJjVUl5UWl4TFFVRnlRanRCUVVOSUxFdEJOMnBDY1VJN1FVRXJha0owUWpoSUxHMUNRUzlxUW5OQ0xEWkNRU3RxUWtnN1FVRkRaaXhsUVVGUExFdEJRVXQ2U2l4aFFVRmFPMEZCUTBnc1MwRnFhMEp4UWpzN08wRkJiV3RDZEVJN1FVRkRRVHRCUVVOQk1Fb3NiVUpCY210Q2MwSXNNa0pCY1d0Q1RHcExMRU5CY210Q1N5eEZRWEZyUWtaRExFTkJjbXRDUlN4RlFYRnJRa05ETEV0QmNtdENSQ3hGUVhGclFsRkRMRTFCY210Q1VpeEZRWEZyUW1kQ08wRkJRMnhETEZsQlFVa3NTMEZCUzBvc1UwRkJUQ3hEUVVGbFJ5eExRVUZtTEV0QlFYbENRU3hMUVVGNlFpeEpRVU5CTEV0QlFVdElMRk5CUVV3c1EwRkJaVWtzVFVGQlppeExRVUV3UWtFc1RVRkVNVUlzU1VGRlFTeExRVUZMU2l4VFFVRk1MRU5CUVdWRExFTkJRV1lzUzBGQmNVSkJMRU5CUm5KQ0xFbEJSMEVzUzBGQlMwUXNVMEZCVEN4RFFVRmxSU3hEUVVGbUxFdEJRWEZDUVN4RFFVaDZRaXhGUVVjMFFqdEJRVU40UWp0QlFVTklPMEZCUTBRc1lVRkJTMFlzVTBGQlRDeERRVUZsUXl4RFFVRm1MRWRCUVcxQ1FTeERRVUZ1UWp0QlFVTkJMR0ZCUVV0RUxGTkJRVXdzUTBGQlpVVXNRMEZCWml4SFFVRnRRa0VzUTBGQmJrSTdRVUZEUVN4aFFVRkxSaXhUUVVGTUxFTkJRV1ZITEV0QlFXWXNSMEZCZFVKQkxFdEJRWFpDTzBGQlEwRXNZVUZCUzBnc1UwRkJUQ3hEUVVGbFNTeE5RVUZtTEVkQlFYZENRU3hOUVVGNFFqczdRVUZGUVR0QlFVTkJMRmxCUVVrclNpeGpRVUZqTEVOQlFXeENPMEZCUTBFc1dVRkJTU3hMUVVGTEwwa3NhVUpCUVV3c1MwRkJNa0oyUXl4SFFVRkhPRWdzVVVGQlNDeERRVUZaUXl4WFFVRmFMRU5CUVhkQ1J5eEhRVUYyUkN4RlFVRTBSRHRCUVVONFJHOUVMREJDUVVGakxFTkJRV1E3UVVGRFNEczdRVUZGUkN4WlFVRkpReXhOUVVGTkxFdEJRVXR3U3l4VFFVRk1MRU5CUVdWRExFTkJRV1lzUjBGQmJVSXNTMEZCUzI5TExFOUJRVXdzUTBGQllYQkxMRU5CUVdoRExFZEJRVzlETEV0QlFVdDFRaXhyUWtGQmJrUTdRVUZEUVN4WlFVRkpPRWtzVFVGQlRTeExRVUZMZEVzc1UwRkJUQ3hEUVVGbFJTeERRVUZtTEVkQlFXMUNMRXRCUVV0dFN5eFBRVUZNTEVOQlFXRnVTeXhEUVVGb1F5eEhRVUZ2UXl4TFFVRkxkVUlzYTBKQlFXNUVPenRCUVVWQkxGbEJRVWs0U1N4WlFVRlpTQ3hOUVVGTkxFdEJRVXQwU2l4WFFVRXpRanRCUVVOQkxGbEJRVWt3U2l4WlFVRlpSaXhOUVVGTkxFdEJRVXQ2U2l4WFFVRXpRanRCUVVOQkxGbEJRVWswU2l4WlFVRlpUQ3hOUVVGTmFrc3NTMEZCVGl4SFFVRmpMRXRCUVV0WkxGbEJRVzVETzBGQlEwRXNXVUZCU1RKS0xGbEJRVmxLTEUxQlFVMXNTeXhOUVVGT0xFZEJRV1VzUzBGQlMxRXNWVUZCY0VNN08wRkJSVUVzV1VGQlNVNHNWMEZCVnl4TFFVRkxSQ3haUVVGTUxFTkJRV3RDUXl4UlFVRnFRenRCUVVOQkxGbEJRVWxETEZkQlFWY3NTMEZCUzBZc1dVRkJUQ3hEUVVGclFrVXNVVUZCYWtNN08wRkJSVUVzV1VGQlNXZExMRmxCUVZrc1EwRkJhRUlzUlVGQmJVSkJMRmxCUVZrc1EwRkJXanRCUVVOdVFpeFpRVUZKUXl4WlFVRlpMRU5CUVdoQ0xFVkJRVzFDUVN4WlFVRlpMRU5CUVZvN08wRkJSVzVDTzBGQlEwRXNZVUZCUzNwSUxHbENRVUZNTEVOQlFYVkNkMGdzVTBGQmRrSXNSVUZCYTBORExGTkJRV3hETEVWQlFUWkRMMHdzVjBGQk4wTTdRVUZEUVR0QlFVTkJRU3h2UWtGQldVTXNSMEZCV2l4SlFVRnBRbmxNTEZkQlFXcENPMEZCUTBFeFRDeHZRa0ZCV1VVc1IwRkJXaXhKUVVGcFFuZE1MRmRCUVdwQ08wRkJRMEU3UVVGRFFURk1MRzlDUVVGWlF5eEhRVUZhTEVkQlFXdENSQ3haUVVGWlF5eEhRVUZhTEVkQlFXdENMRU5CUVd4Q0xFZEJRWE5DUkN4WlFVRlpReXhIUVVGc1F5eEhRVUYzUXl4RFFVRXhSRHRCUVVOQlJDeHZRa0ZCV1VVc1IwRkJXaXhIUVVGclFrWXNXVUZCV1VVc1IwRkJXaXhIUVVGclFpeERRVUZzUWl4SFFVRnpRa1lzV1VGQldVVXNSMEZCYkVNc1IwRkJkME1zUTBGQk1VUTdPMEZCUlVFc1dVRkJTVVlzV1VGQldVTXNSMEZCV2l4TFFVRnZRalJDTEZOQlFWTTFRaXhIUVVFM1FpeEpRVUZ2UTBRc1dVRkJXVVVzUjBGQldpeExRVUZ2UWpKQ0xGTkJRVk16UWl4SFFVRnlSU3hGUVVFd1JUdEJRVU4wUlRKQ0xIRkNRVUZUTlVJc1IwRkJWQ3hIUVVGbFJDeFpRVUZaUXl4SFFVRXpRanRCUVVOQk5FSXNjVUpCUVZNelFpeEhRVUZVTEVkQlFXVkdMRmxCUVZsRkxFZEJRVE5DTzBGQlEwRXNhVUpCUVVzMlFpeGhRVUZNTEVkQlFYRkNMRWxCUVhKQ08wRkJRMGc3TzBGQlJVUTdRVUZEUVN4WlFVRkphVXNzV1VGQldTeERRVUZhTEVsQlFXbENReXhaUVVGWkxFTkJRV3BETEVWQlFXOURPMEZCUTJoRGFrMHNkMEpCUVZsRExFZEJRVm9zUjBGQmEwSXNRMEZCUXl4RFFVRnVRanRCUVVOQlJDeDNRa0ZCV1VVc1IwRkJXaXhIUVVGclFpeERRVUZETEVOQlFXNUNPMEZCUTBnc1UwRklSQ3hOUVVkUE8wRkJRMGc3UVVGRFFTeHBRa0ZCUzI5RkxHbENRVUZNTEVOQlFYVkNNRWdzVTBGQmRrSXNSVUZCYTBORExGTkJRV3hETEVWQlFUWkRhazBzVjBGQk4wTTdRVUZEUVR0QlFVTkJRU3gzUWtGQldVTXNSMEZCV2p0QlFVTkJSQ3gzUWtGQldVVXNSMEZCV2p0QlFVTklPenRCUVVWRU8wRkJRMEVzV1VGQlNVWXNXVUZCV1VNc1IwRkJXaXhIUVVGclFpeExRVUZMSzBJc1UwRkJUQ3hEUVVGbEwwSXNSMEZCY2tNc1JVRkJNRU5FTEZsQlFWbERMRWRCUVZvc1IwRkJhMElzUzBGQlN5dENMRk5CUVV3c1EwRkJaUzlDTEVkQlFXcERPMEZCUXpGRExGbEJRVWxFTEZsQlFWbEZMRWRCUVZvc1IwRkJhMElzUzBGQlN6aENMRk5CUVV3c1EwRkJaVGxDTEVkQlFYSkRMRVZCUVRCRFJpeFpRVUZaUlN4SFFVRmFMRWRCUVd0Q0xFdEJRVXM0UWl4VFFVRk1MRU5CUVdVNVFpeEhRVUZxUXpzN1FVRkZNVU1zV1VGQlNVWXNXVUZCV1VNc1IwRkJXaXhMUVVGdlFqWkNMRk5CUVZNM1FpeEhRVUUzUWl4SlFVRnZRMFFzV1VGQldVVXNSMEZCV2l4TFFVRnZRalJDTEZOQlFWTTFRaXhIUVVGeVJTeEZRVUV3UlR0QlFVTjBSVFJDTEhGQ1FVRlROMElzUjBGQlZDeEhRVUZsUkN4WlFVRlpReXhIUVVFelFqdEJRVU5CTmtJc2NVSkJRVk0xUWl4SFFVRlVMRWRCUVdWR0xGbEJRVmxGTEVkQlFUTkNPMEZCUTBFc2FVSkJRVXMyUWl4aFFVRk1MRWRCUVhGQ0xFbEJRWEpDTzBGQlEwZzdRVUZEU2l4TFFYcHZRbkZDT3pzN1FVRXliMEowUWp0QlFVTkJkVU1zY1VKQk5XOUNjMElzTmtKQk5HOUNTRGxETEVOQk5XOUNSeXhGUVRSdlFrRkRMRU5CTlc5Q1FTeEZRVFJ2UWtkNVN5eE5RVFZ2UWtnc1JVRTBiMEpYTzBGQlF6ZENMRmxCUVUxb1JTeFhRVUZYT1Vnc1IwRkJSemhJTEZGQlFYQkNPMEZCUTBFc1dVRkJUVU1zWTBGQlkwUXNVMEZCVTBNc1YwRkJOMEk3UVVGRFFTeFpRVUZOTmtJc1kwRkJZemxDTEZOQlFWTTRRaXhYUVVFM1FqczdRVUZGUVN4WlFVRkpiVU1zVVVGQlVTeExRVUZMZEVRc1dVRkJUQ3hEUVVGclFtNUlMRXRCUVRsQ08wRkJRVUVzV1VGRFNUQkxMRkZCUVZFc1MwRkJTM1pFTEZsQlFVd3NRMEZCYTBKc1NDeE5RVVE1UWp0QlFVRkJMRmxCUlVrd1N5eFRRVUZUUml4UlFVRlJMRWRCUm5KQ08wRkJRVUVzV1VGSFNVY3NVMEZCVTBZc1VVRkJVU3hIUVVoeVFqdEJRVWxCTEZsQlFVbHVUU3hOUVVGTkxFTkJRVlk3UVVGQlFTeFpRVUZoUXl4TlFVRk5MRU5CUVc1Q08wRkJRVUVzV1VGQmMwSnhUU3hUUVVGVExFTkJRUzlDTzBGQlFVRXNXVUZCYTBORExGTkJRVk1zUTBGQk0wTTdRVUZCUVN4WlFVRTRRME1zVDBGQlR5eExRVUZMTVVNc1dVRkJNVVE3UVVGRFFTeFpRVUZKTWtNc1QwRkJUeXhMUVVGTEwwUXNWVUZCVEN4RFFVRm5RbXBJTEV0QlFUTkNPenRCUVVWQkxHZENRVUZSTEV0QlFVdHBRaXhwUWtGQllqdEJRVU5KTzBGQlEwRXNhVUpCUVV0M1JpeFpRVUZaUXl4TFFVRnFRanRCUVVOSmJFa3NjMEpCUVUwMlNDeExRVUZMUXl4TFFVRk1MRU5CUVZkNFJ5eEpRVUZKTWtzc1MwRkJaaXhEUVVGT08wRkJRMEZzVFN4elFrRkJUVGhJTEV0QlFVdERMRXRCUVV3c1EwRkJWM1pITEVsQlFVa3lTeXhMUVVGbUxFTkJRVTQ3UVVGRFFUdEJRVU5LTzBGQlEwRTdRVUZEUVN4cFFrRkJTMnBGTEZsQlFWbEhMRWRCUVdwQ08wRkJRMGx3U1N4elFrRkJUVFpJTEV0QlFVdERMRXRCUVV3c1EwRkJWM2hITEVsQlFVazJTeXhOUVVGbUxFTkJRVTQ3UVVGRFFYQk5MSE5DUVVGTk9FZ3NTMEZCUzBNc1MwRkJUQ3hEUVVGWGRrY3NTVUZCU1RaTExFMUJRV1lzUTBGQlRqdEJRVU5CTzBGQlEwbzdRVUZEUVN4cFFrRkJTMjVGTEZsQlFWbExMRWRCUVdwQ08wRkJRMGtzYjBKQlFVbHBSU3hUUVVGVGVrTXNXVUZCV1VNc1lVRkJla0lzUlVGQmQwTTdRVUZEY0VOb1N5d3dRa0ZCVFRoSUxFdEJRVXRETEV0QlFVd3NRMEZCVjNaSExFdEJRVXN5U3l4UlFVRlJMRXRCUVV0UExFOUJRV3hDTEVOQlFWZ3NRMEZCVGp0QlFVTkJTaXcyUWtGQlUzUk5MRTFCUVUwc1EwRkJUaXhMUVVGWkxFTkJRVm9zUjBGQlowSnZUU3hUUVVGVExFdEJRVXRQTEZOQlFUbENMRWRCUVRCRExFTkJRVzVFTzBGQlEwRXhUU3d3UWtGQlRUWklMRXRCUVV0RExFdEJRVXdzUTBGQlZ5eERRVUZEZUVjc1NVRkJTU3RMTEUxQlFVd3NTVUZCWlVvc1MwRkJNVUlzUTBGQlRqdEJRVU5JTEdsQ1FVcEVMRTFCU1U4N1FVRkRTR3BOTERCQ1FVRk5Oa2dzUzBGQlMwTXNTMEZCVEN4RFFVRlhlRWNzUzBGQlN6SkxMRkZCUVZFc1MwRkJTMVVzVDBGQmJFSXNRMEZCV0N4RFFVRk9PMEZCUTBGTUxEWkNRVUZUZEUwc1RVRkJUU3hEUVVGT0xFdEJRVmtzUTBGQldpeEhRVUZuUW05TkxGTkJRVk1zUTBGQlF5eExRVUZMVFN4VFFVRXZRaXhIUVVFeVF5eERRVUZ3UkR0QlFVTkJNMDBzTUVKQlFVMDRTQ3hMUVVGTFF5eExRVUZNTEVOQlFWY3NRMEZCUTNaSExFbEJRVWtyU3l4TlFVRk1MRWxCUVdWS0xFdEJRVEZDTEVOQlFVNDdRVUZEU0R0QlFVTkVPMEZCZGtKU08wRkJlVUpCUml4bFFVRlBhazBzUjBGQlVDeEhRVUZoUVN4SFFVRmlPMEZCUTBGcFRTeGxRVUZQYUUwc1IwRkJVQ3hIUVVGaFFTeEhRVUZpTzBGQlEwRXNaVUZCVDJkTkxFMUJRVkE3UVVGRFNDeExRWEJ5UW5GQ08wRkJjM0pDZEVKWkxHdENRWFJ5UW5OQ0xEUkNRWE55UWtvN1FVRkRaQ3haUVVGSlF5eFRRVUZLTEVWQlFXVTdRVUZEV0N4cFFrRkJTM1JLTEdGQlFVd3NRMEZCYlVJc1MwRkJia0k3UVVGRFNDeFRRVVpFTEUxQlJVOHNTVUZCU1N4TFFVRkxUQ3hqUVVGVUxFVkJRWGxDTzBGQlF6VkNMR2xDUVVGTFVTeEpRVUZNTEVOQlFWVnZTaXhyUWtGQlZqdEJRVU5CY2s0c2QwSkJRVXR6VGl4TlFVRk1MRU5CUVZsMlRpeFZRVUZhTEVWQlFYZENMRXRCUVV0clJTeEpRVUZNTEVOQlFWVnpTaXhaUVVGc1F6dEJRVU5CTEdkQ1FVRkpReXhQUVVGUEwwMHNSMEZCUjJkT0xGZEJRV1E3UVVGRFFTeG5Ra0ZCU1VNc1UwRkJVMnBPTEVkQlFVZHJUaXhOUVVGSUxFTkJRVlZETEZWQlFWWXNRMEZCY1VJc1MwRkJTek5LTEVsQlFURkNMRU5CUVdJN1FVRkRRU3huUWtGQlNYbEtMRTFCUVVvc1JVRkJXVHRCUVVOU2VFNHNNa0pCUVZjeVFpeERRVUZZTEVkQlFXVXNRMEZCWmp0QlFVTkJNMElzTWtKQlFWYzBRaXhEUVVGWUxFZEJRV1VzUTBGQlpqdEJRVU5CTVVJc05FSkJRVmw1UWl4RFFVRmFMRWRCUVdkQ00wSXNWMEZCVnpKQ0xFTkJRVmdzUjBGQlpUSk1MRXRCUVV0NlRDeExRVUZ3UXp0QlFVTkJNMElzTkVKQlFWa3dRaXhEUVVGYUxFZEJRV2RDTlVJc1YwRkJWelJDTEVOQlFWZ3NSMEZCWlRCTUxFdEJRVXQ0VEN4TlFVRndRenRCUVVOQk1Fd3NkVUpCUVU5SExIRkNRVUZRTEVOQlFUWkNNMDRzVlVGQk4wSXNSVUZCZVVOQkxGVkJRWHBETzBGQlEwRjNUaXgxUWtGQlQwY3NjVUpCUVZBc1EwRkJOa0o2VGl4WFFVRTNRaXhGUVVFd1EwRXNWMEZCTVVNN1FVRkRRVVFzTkVKQlFVc3lUaXhoUVVGTUxFTkJRVzFDTlU0c1ZVRkJia0lzUlVGQkswSkJMRlZCUVM5Q0xFVkJRVEpEU0N4VlFVRXpRenRCUVVOQlNTdzBRa0ZCU3pKT0xHRkJRVXdzUTBGQmJVSXhUaXhYUVVGdVFpeEZRVUZuUTBFc1YwRkJhRU1zUlVGQk5rTk1MRlZCUVRkRE8wRkJRMEVzY1VKQlFVc3JUQ3hsUVVGTUxFTkJRWEZDTlV3c1YwRkJWekpDTEVOQlFXaERMRVZCUVcxRE0wSXNWMEZCVnpSQ0xFTkJRVGxETEVWQlFXbEVNVUlzV1VGQldYbENMRU5CUVZvc1IwRkJaMEl6UWl4WFFVRlhNa0lzUTBGQk5VVXNSVUZCSzBWNlFpeFpRVUZaTUVJc1EwRkJXaXhIUVVGblFqVkNMRmRCUVZjMFFpeERRVUV4Unp0QlFVTklPMEZCUTBvN1FVRkRTaXhMUVRGelFuRkNPenM3UVVFMGMwSjBRanM3T3pzN096czdPMEZCVTBGcFRTeDFRa0Z5ZEVKelFpeHBRMEZ4ZEVKRE8wRkJRMjVDTEdWQlFVOHNTMEZCU3k5TExHbENRVUZhTzBGQlEwZ3NTMEYyZEVKeFFqczdPMEZCZVhSQ2RFSTdPenM3T3pzN096dEJRVk5CWjB3c2FVSkJiSFZDYzBJc01rSkJhM1ZDVER0QlFVTmlMR1ZCUVU4c1MwRkJTMmhITEZkQlFWbzdRVUZEU0N4TFFYQjFRbkZDTzBGQmMzVkNkRUpwUnl4dFFrRjBkVUp6UWl3MlFrRnpkVUpJTzBGQlEyWXNXVUZCVFRGR0xGZEJRVmM1U0N4SFFVRkhPRWdzVVVGQmNFSTdRVUZEUVN4WlFVRk5hMFFzVjBGQlYyeEVMRk5CUVZOclJDeFJRVUV4UWp0QlFVTkJMRmxCUVUxRExHVkJRV1ZFTEZOQlFWTkRMRmxCUVRsQ08wRkJRMEVzV1VGQlRYSkNMR05CUVdNNVFpeFRRVUZUT0VJc1YwRkJOMEk3UVVGRFFTeFpRVUZOTjBJc1kwRkJZMFFzVTBGQlUwTXNWMEZCTjBJN08wRkJSVUVzV1VGQlNUQkdMRmRCUVZjc1MwRkJTM0pNTEZOQlFYQkNPMEZCUTBGeFRDeHBRa0ZCVXpGSUxFMUJRVlFzUjBGQmEwSXNRMEZCYkVJN08wRkJSVUVzV1VGQlNUSklMRzFDUVVGdFFpeExRVUZMYmt3c2FVSkJRVFZDTzBGQlFVRXNXVUZEU1c5TUxGRkJRVkVzUzBGQlMzaE1MRTFCUkdwQ096dEJRVWRCTEZsQlFVa3NRMEZCUTNkTUxFdEJRVXdzUlVGQldUdEJRVU5TTzBGQlEwZzdPMEZCUlVRc1dVRkJTV3BOTEZkQlFWY3NTMEZCUzBVc1UwRkJjRUk3UVVGRFFVWXNhVUpCUVZNM1FpeEhRVUZVTEVkQlFXVXNRMEZCUXl4RFFVRm9RanRCUVVOQk5rSXNhVUpCUVZNMVFpeEhRVUZVTEVkQlFXVXNRMEZCUXl4RFFVRm9RanM3UVVGRlFTeFpRVUZKYVUwc1VVRkJVU3hMUVVGTGRFUXNXVUZCVEN4RFFVRnJRbTVJTEV0QlFUbENPMEZCUVVFc1dVRkRTVEJMTEZGQlFWRXNTMEZCUzNaRUxGbEJRVXdzUTBGQmEwSnNTQ3hOUVVRNVFqdEJRVUZCTEZsQlJVa3dTeXhUUVVGVFJpeFJRVUZSTEVkQlJuSkNPMEZCUVVFc1dVRkhTVWNzVTBGQlUwWXNVVUZCVVN4SFFVaHlRanRCUVVGQkxGbEJTVWx3UkN4UFFVRlBMRXRCUVV0TUxGVkJRVXdzUTBGQlowSm9TQ3hOUVVvelFqdEJRVUZCTEZsQlMwa3JTeXhQUVVGUExFdEJRVXN2UkN4VlFVRk1MRU5CUVdkQ2FrZ3NTMEZNTTBJN1FVRkJRU3haUVUxSmMwMHNVVUZCVVN4TFFVRkxjRXdzVTBGT2FrSTdPMEZCVVVFc1dVRkJTWEZNTEZsQlFWa3NRMEZCYUVJN1FVRkJRU3haUVVGdFFtaEdMRmxCUVc1Q08wRkJRVUVzV1VGQmQwSnBSaXhoUVVGNFFqdEJRVUZCTEZsQlFUaENReXhoUVVFNVFqdEJRVUZCTEZsQlFXOURReXhsUVVGd1F6dEJRVUZCTEZsQlEwa3pRaXhoUVVSS08wRkJRVUVzV1VGRFZUZERMR1ZCUkZZN1FVRkJRU3haUVVOclFrVXNaVUZFYkVJN1FVRkJRU3haUVVNd1FsQXNhVUpCUkRGQ08wRkJRVUVzV1VGRGIwTm5SQ3hsUVVSd1F6dEJRVUZCTEZsQlF6UkRReXhsUVVRMVF6czdRVUZIUVN4WlFVRkpjMElzY1VKQlFYRkNNMFlzV1VGQldVc3NSMEZCY2tNc1JVRkJNRU03UVVGRGRFTnBSU3h0UWtGQlR5eExRVUZMTVVNc1dVRkJXanRCUVVOQlNDeHhRa0ZCVXl4TFFVRkxhVVFzVDBGQlpEdEJRVU5CTDBNc2NVSkJRVk1zUzBGQlN6WkRMRTlCUVdRN1FVRkRRWEJFTEhWQ1FVRlhMRXRCUVV0eFJDeFRRVUZvUWp0QlFVTklPenRCUVVWRUxGbEJRVWw1UWl4aFFVRmhMRU5CUVdwQ08wRkJRVUVzV1VGQmIwSkRMR0ZCUVdFc1EwRkJha003UVVGRFFTeFpRVUZKYkVZc1lVRkJZU3hKUVVGcVFqdEJRVUZCTEZsQlFYVkNiVVlzVlVGQlZTeERRVUZxUXpzN1FVRkZRU3hoUVVGTGNFMHNWVUZCVEN4SFFVRnJRaXhEUVVGc1FqdEJRVU5CTEdGQlFVdERMRmRCUVV3c1IwRkJiVUlzUTBGQmJrSTdRVUZEUVN4aFFVRkxReXhYUVVGTUxFZEJRVzFDTEVOQlFXNUNPMEZCUTBFc1lVRkJTME1zV1VGQlRDeEhRVUZ2UWl4RFFVRndRanRCUVVOQkxHRkJRVXRaTEZkQlFVd3NSMEZCYlVJc1MwRkJia0k3TzBGQlJVRTdRVUZEUVN4WlFVRkpjMHdzV1VGQldTeERRVUZvUWp0QlFVRkJMRmxCUVcxQ1F5eGhRVUZoTEVOQlFXaERPMEZCUVVFc1dVRkJiVU5ETEdGQlFXRXNRMEZCYUVRN1FVRkJRU3haUVVGdFJFTXNZMEZCWXl4RFFVRnFSVHM3UVVGRlFTeGhRVUZMTEVsQlFVa3hUeXhOUVVGTkxFTkJRV1lzUlVGQmEwSkJMRTFCUVUwclNTeEpRVUY0UWl4RlFVRTRRaXhGUVVGRkwwa3NSMEZCYUVNc1JVRkJjVU03UVVGRGFrTXNhVUpCUVVzc1NVRkJTVU1zVFVGQlRTeERRVUZtTEVWQlFXdENRU3hOUVVGTmQwMHNTVUZCZUVJc1JVRkJPRUlzUlVGQlJYaE5MRWRCUVdoRExFVkJRWEZETzBGQlEycERMRzlDUVVGSk9FWXNVVUZCVVdsSkxGbEJRVmt2VGl4SFFVRjRRanRCUVVOQkswa3NjMEpCUVUwNFJTeE5RVUZOTDBnc1MwRkJUaXhEUVVGT08wRkJRMEYxU1N3d1FrRkJWeXhEUVVGRGRFWXNUVUZCVFc5RExGbEJRVkFzVFVGQmVVSXNRMEZCY0VNN1FVRkRRVFpETEhWQ1FVRlBSaXhOUVVGTlR5eFBRVUZPTEVOQlFWQTdPMEZCUlVFN1FVRkRRU3h2UWtGQlNTeExRVUZMY0V3c1YwRkJUQ3hEUVVGcFFtOU1MRTlCUVdwQ0xFTkJRVW9zUlVGQkswSTdRVUZETTBJc2VVSkJRVXR5VEN4WFFVRk1MRWRCUVcxQ0xFbEJRVzVDTzBGQlEwZzdPMEZCUlVRc2IwSkJRVWtzUTBGQlEyZE1MRWxCUVV3c1JVRkJWenRCUVVOUU8wRkJRMGc3TzBGQlJVUXNkMEpCUVZGS0xHZENRVUZTTzBGQlEwazdRVUZEUVN4NVFrRkJTek5HTEZsQlFWbERMRXRCUVdwQ08wRkJRMGxwUnl4eFEwRkJZVzVQTEVkQlFXSTdRVUZEUVc5UExIRkRRVUZoZEVZc1QwRkJUeTlKTEVkQlFWQXNSMEZCWVN4RFFVRXhRanRCUVVOQmEwOHNLMEpCUVU5RkxHRkJRV0ZzUXl4TFFVRndRanRCUVVOQmFVTXNhVU5CUVZORkxHRkJRV0ZzUXl4TFFVRjBRanRCUVVOQk8wRkJRMG83UVVGRFFTeDVRa0ZCUzJwRkxGbEJRVmxITEVkQlFXcENPMEZCUTBrN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTdEdMSEZEUVVGaGNrWXNUMEZCVHpsSkxFZEJRVkFzUjBGQllVUXNSMEZCWWl4SFFVRnRRaXhEUVVGb1F6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBGeFR5eHhRMEZCWVhSR0xFOUJRVTh3UkN4SlFVRlFMRWRCUVdONFRTeEhRVUZrTEVkQlFXOUNSQ3hIUVVGd1FpeEhRVUV3UWl4RFFVRjJRenRCUVVOQmEwOHNLMEpCUVU4NVFpeFRRVUZUWjBNc1ZVRkJhRUk3UVVGRFFVUXNhVU5CUVZNNVFpeFRRVUZUWjBNc1ZVRkJiRUk3UVVGRFFUdEJRVU5LTzBGQlEwRXNlVUpCUVV0dVJ5eFpRVUZaU3l4SFFVRnFRanRCUVVOSkswUXNhVU5CUVZWRkxGTkJRVk42UXl4WlFVRlpReXhoUVVGeVFpeEpRVUZ6UTJoTExFMUJRVTBzUTBGQlRpeExRVUZaTEVOQlFXNUVMRWRCUVhkRWIwMHNVMEZCVXpsRExGRkJRV3BGTEVkQlFUUkZMRU5CUVhKR08wRkJRMEZwUkN4cFEwRkJWVU1zVTBGQlUzcERMRmxCUVZsSExHRkJRWEpDTEVsQlFYTkRha3NzVFVGQlRTeERRVUZPTEV0QlFWa3NRMEZCYmtRc1IwRkJkMFJ2VFN4VFFVRlRMRU5CUVVNdlF5eFJRVUZzUlN4SFFVRTJSU3hEUVVGMFJqczdRVUZGUVRSRkxDdENRVUZQYWs4c1QwRkJUMmxOTEZGQlFWRjJReXhOUVVGbUxFbEJRWGxDTWtNc1RVRkJhRU03UVVGRFFUWkNMR2xEUVVGVExFTkJRVU53Uml4UFFVRlBMMGtzUjBGQlVDeEhRVUZoTEVOQlFXUXNTMEZCYjBKdFRTeFJRVUZSZEVNc1RVRkJOVUlzU1VGQmMwTXdReXhOUVVFdlF6dEJRVU5CTmtJc2NVTkJRV0Z1VHl4SFFVRmlPMEZCUTBGdlR5eHhRMEZCWVhSR0xFOUJRVTh2U1N4SFFVRlFMRWRCUVdFc1EwRkJNVUk3UVVGRFFUdEJRV2hEVWpzN1FVRnRRMEVzYjBKQlFVbDVSaXhWUVVGVmJVa3NVMEZCVTFNc1ZVRkJWQ3hKUVVGMVFsUXNVMEZCVTFNc1ZVRkJWQ3hMUVVGM1FpeEZRVUZEVFN4UlFVRlBMRU5CUVZJc1JVRkJWME1zVVVGQlR5eERRVUZzUWl4RlFVRTNSRHRCUVVOQkxHOUNRVUZKTlVrc1ZVRkJWVkFzVVVGQlVUSkpMRlZCUVZJc1NVRkJjMEl6U1N4UlFVRlJNa2tzVlVGQlVpeExRVUYxUWl4RlFVRXpSRHM3UVVGRlFUdEJRVU5CTEc5Q1FVRkpNMGtzVVVGQlVXdEtMRTFCUVZJc1IwRkJhVUpRTEZWQlFYSkNMRVZCUVdsRE8wRkJRemRDTTBrc05FSkJRVkZyU2l4TlFVRlNMRWRCUVdsQ1VDeFZRVUZxUWp0QlFVTklPenRCUVVWRUxHOUNRVUZKTTBrc1VVRkJVVzFLTEUxQlFWSXNSMEZCYVVKU0xGVkJRWEpDTEVWQlFXbERPMEZCUXpkQ00wa3NORUpCUVZGdFNpeE5RVUZTTEVkQlFXbENVaXhWUVVGcVFqdEJRVU5JT3p0QlFVVkVPMEZCUTBFc2IwSkJRVWwyVFN4VFFVRlROMElzUjBGQlZDeEhRVUZsY1U4c1ZVRkJia0lzUlVGQkswSTdRVUZETTBKNFRTdzJRa0ZCVXpkQ0xFZEJRVlFzUjBGQlpYRlBMRlZCUVdZN1FVRkRTRHM3UVVGRlJDeHZRa0ZCU1hoTkxGTkJRVk0xUWl4SFFVRlVMRWRCUVdWdFR5eFZRVUZ1UWl4RlFVRXJRanRCUVVNelFuWk5MRFpDUVVGVE5VSXNSMEZCVkN4SFFVRmxiVThzVlVGQlpqdEJRVU5JT3p0QlFVVkVPMEZCUTBFN1FVRkRRVHRCUVVOQmFrWXNOa0pCUVdFNFJTeExRVUZMYUVZc1QwRkJUQ3hEUVVGaFJTeFZRVUV4UWp0QlFVTkJLMFVzZDBKQlFWRXNTMEZCUzNaRExFOUJRVXdzUTBGQllYQkxMRU5CUVdJc1IwRkJhVUkwU0N4WFFVRlhOVWdzUTBGQmNFTTdRVUZEUVRSTkxEQkNRVUZWTEV0QlFVdDRReXhQUVVGTUxFTkJRV0Z1U3l4RFFVRmlMRWRCUVdsQ01rZ3NWMEZCVnpOSUxFTkJRWFJET3p0QlFVVkJLMDBzTkVKQlFWa3NRMEZCUTNCR0xGZEJRVmN6U0N4RFFVRmFMRWRCUVdkQ2VVMHNTMEZCUzJoR0xFOUJRVXdzUTBGQllUUkdMRk5CUVdJc1EwRkJkVUp1VGl4TlFVRjJReXhIUVVGblJIbExMRXRCUVRWRU8wRkJRMEZ2UXl3MFFrRkJXVUVzV1VGQldTeERRVUZhTEVkQlFXZENMRU5CUVdoQ0xFZEJRVzlDUVN4VFFVRm9RenRCUVVOQlF5dzJRa0ZCWVhKR0xGZEJRVmN6U0N4RFFVRllMRWRCUVdVc1EwRkJaaXhIUVVGdFFpeERRVUZ1UWl4SFFVRjFRakpJTEZkQlFWY3pTQ3hEUVVFdlF6dEJRVU5CYVU0c05rSkJRV0VzUTBGQlEzUkdMRmRCUVZjMVNDeERRVUZhTEVkQlFXZENMRU5CUVdoQ0xFZEJRVzlDTEVOQlFYQkNMRWRCUVhkQ0xFTkJRVU0wU0N4WFFVRlhOVWdzUTBGQmFrUTdRVUZEUVcxT0xEaENRVUZqZGtZc1YwRkJWelZJTEVOQlFWZ3NSMEZCWlRCTkxFdEJRVXRvUml4UFFVRk1MRU5CUVdFMFJpeFRRVUZpTEVOQlFYVkNjRTRzUzBGQmRFTXNSMEZCT0VONVN5eExRVUUxUkR0QlFVTkJkME1zT0VKQlFXTkJMR05CUVdNc1EwRkJaQ3hIUVVGclFpeERRVUZzUWl4SFFVRnpRa0VzVjBGQmNFTTdPMEZCUlVFc2IwSkJRVWtzUzBGQlMzSk5MRmxCUVV3c1IwRkJiMEp2VFN4VlFVRjRRaXhGUVVGdlF6dEJRVU5vUXl4NVFrRkJTM0JOTEZsQlFVd3NSMEZCYjBKdlRTeFZRVUZ3UWp0QlFVTklPenRCUVVWRUxHOUNRVUZKTEV0QlFVdHlUU3hYUVVGTUxFZEJRVzFDYzAwc1YwRkJka0lzUlVGQmIwTTdRVUZEYUVNc2VVSkJRVXQwVFN4WFFVRk1MRWRCUVcxQ2MwMHNWMEZCYmtJN1FVRkRTRHM3UVVGRlJDeHZRa0ZCU1N4TFFVRkxlRTBzVlVGQlRDeEhRVUZyUW5OTkxGVkJRWFJDTEVWQlFXdERPMEZCUXpsQ0xIbENRVUZMZEUwc1ZVRkJUQ3hIUVVGclFuTk5MRlZCUVd4Q08wRkJRMGc3TzBGQlJVUXNiMEpCUVVrc1MwRkJTM0pOTEZkQlFVd3NSMEZCYlVKdlRTeFRRVUYyUWl4RlFVRnJRenRCUVVNNVFpeDVRa0ZCUzNCTkxGZEJRVXdzUjBGQmJVSnZUU3hUUVVGdVFqdEJRVU5JT3p0QlFVVkVka2tzZDBKQlFWRnJTU3hKUVVGU0xFZEJRV1ZCTEVsQlFXWTdRVUZEUVd4SkxIZENRVUZSYlVrc1RVRkJVaXhIUVVGcFFrRXNUVUZCYWtJN1FVRkRRVHRCUVVOQmJra3NkMEpCUVZGRUxFdEJRVklzUjBGQlowSkJMRXRCUVdoQ08wRkJRMGc3UVVGRFJHbEpMSGxDUVVGaGRrSXNTVUZCWWp0QlFVTklPMEZCUTBRc1lVRkJTMnBMTEdOQlFVd3NSMEZCYzBJc1MwRkJkRUk3UVVGRFNDeExRWFkwUW5GQ096czdRVUY1TkVKMFFqczdPenM3T3pzN096czdPenM3T3pzN096dEJRVzFDUVhOTkxHdENRVFUxUW5OQ0xEQkNRVFExUWs1MlRpeERRVFUxUWswc1JVRTBOVUpJUXl4RFFUVTFRa2NzUlVFME5VSkJkVTRzVjBFMU5VSkJMRVZCTkRWQ1lUdEJRVU12UWl4WlFVRkpMRXRCUVV0MFJ5eHJRa0ZCVEN4RFFVRjNRbXhJTEVOQlFYaENMRVZCUVRKQ1F5eERRVUV6UWl4RFFVRktMRVZCUVcxRE8wRkJReTlDTEd0Q1FVRk5MRWxCUVVrclNTeExRVUZLTEVOQlFWVXNOa05CUVZZc1EwRkJUanRCUVVOSU8wRkJRMFFzV1VGQlNTeERRVUZETEV0QlFVdHFTU3hOUVVGV0xFVkJRV3RDTzBGQlEyUnVReXhsUVVGSGMwc3NTMEZCU0N4RFFVRlRMRWxCUVZRN1FVRkRRU3h0UWtGQlR5eEpRVUZRTzBGQlEwZzdPMEZCUlVRc1dVRkJTVEZGTEZGQlFWRXJRaXhMUVVGTFF5eExRVUZNTEVOQlFWZDRSeXhEUVVGWUxFbEJRV2RDZFVjc1MwRkJTME1zUzBGQlRDeERRVUZYZGtjc1EwRkJXQ3hKUVVGblFpeExRVUZMYTBnc1ZVRkJUQ3hEUVVGblFtcElMRXRCUVRWRU8wRkJRMEVzV1VGQlNYbEtMRTlCUVU4c1MwRkJTeTlLTEZkQlFVd3NRMEZCYVVJMFJTeExRVUZxUWl4RFFVRllPMEZCUTBFc1dVRkJTU3hEUVVGRGJVWXNTVUZCUkN4SlFVRlROa1FzVjBGQllpeEZRVUV3UWp0QlFVTjBRaXhuUWtGQlNYQk1MRTlCUVU4c1NVRkJTWGhFTEVkQlFVZHpSU3hKUVVGUUxFVkJRVmc3UVVGRFFYbEhMRzFDUVVGUGRrZ3NTMEZCUzBrc1dVRkJUQ3hEUVVGclFqVkVMRWRCUVVjMlR5eFRRVUZ5UWl4RFFVRlFPMEZCUTBFNVJDeHBRa0ZCU3l0RUxFVkJRVXdzUjBGQlZURk9MRU5CUVZZN1FVRkRRVEpLTEdsQ1FVRkxaMFVzUlVGQlRDeEhRVUZWTVU0c1EwRkJWanRCUVVOQk1Fb3NhVUpCUVV0cFJTeE5RVUZNTEVkQlFXTXNTVUZCWkR0QlFVTkJha1VzYVVKQlFVdHJSU3hYUVVGTU8wRkJRMEY2VEN4cFFrRkJTMHNzVFVGQlRDeEhRVUZqTEV0QlFVdE1MRWxCUVc1Q08wRkJRMEVzYlVKQlFVOTFTQ3hKUVVGUU8wRkJRMGc3UVVGRFJDeGxRVUZQUVN4SlFVRlFPMEZCUTBnc1MwRnNOMEp4UWpzN08wRkJiemRDZEVJN096czdPenM3T3pzN08wRkJWMEZ0UlN4clFrRXZOMEp6UWl3d1FrRXJOMEpPT1U0c1EwRXZOMEpOTEVWQkt6ZENTRU1zUTBFdk4wSkhMRVZCS3pkQ1FUaE9MRk5CTHpkQ1FTeEZRU3MzUWxjN1FVRkROMElzV1VGQlNTeExRVUZMTjBjc2EwSkJRVXdzUTBGQmQwSnNTQ3hEUVVGNFFpeEZRVUV5UWtNc1EwRkJNMElzUTBGQlNpeEZRVUZ0UXp0QlFVTXZRaXhyUWtGQlRTeEpRVUZKSzBrc1MwRkJTaXhEUVVGVkxEWkRRVUZXTEVOQlFVNDdRVUZEU0R0QlFVTkVMRmxCUVVrc1EwRkJReXhMUVVGTGFra3NUVUZCVml4RlFVRnJRanRCUVVOa2JrTXNaVUZCUjNOTExFdEJRVWdzUTBGQlV5eEpRVUZVTzBGQlEwRXNiVUpCUVU4c1NVRkJVRHRCUVVOSU96dEJRVVZFTEZsQlFVa3hSU3hSUVVGUkswSXNTMEZCUzBNc1MwRkJUQ3hEUVVGWGVFY3NRMEZCV0N4SlFVRm5RblZITEV0QlFVdERMRXRCUVV3c1EwRkJWM1pITEVOQlFWZ3NTVUZCWjBJc1MwRkJTMnRJTEZWQlFVd3NRMEZCWjBKcVNDeExRVUUxUkR0QlFVTkJMR0ZCUVV0T0xGZEJRVXdzUTBGQmFVSTBSU3hMUVVGcVFpeEpRVUV3UW5WS0xGTkJRVEZDTzBGQlEwRXNZVUZCUzNoT0xHRkJRVXdzUjBGQmNVSXNTVUZCY2tJN08wRkJSVUVzV1VGQlNYZE9MRk5CUVVvc1JVRkJaVHRCUVVOWUxHbENRVUZMZEUwc2FVSkJRVXdzUjBGQmVVSXNTVUZCZWtJN1FVRkRTQ3hUUVVaRUxFMUJSVTg3UVVGRFNDeHBRa0ZCUzBFc2FVSkJRVXdzUjBGQmVVSXNTMEZCU3pkQ0xGZEJRVXdzUTBGQmFVSnZUeXhKUVVGcVFpeERRVUZ6UWl4VlFVRlZReXhUUVVGV0xFVkJRWEZDZWtvc1MwRkJja0lzUlVGQk5FSTdRVUZEZGtVc2RVSkJRVThzUTBGQlF5eERRVUZEZVVvc1UwRkJWRHRCUVVOSUxHRkJSbmRDTEVOQlFYcENPMEZCUjBnN08wRkJSVVFzWlVGQlQwWXNVMEZCVUR0QlFVTklMRXRCY2psQ2NVSTdPenRCUVhVNVFuUkNPenM3T3pzN08wRkJUMEZITEdOQk9UbENjMElzYzBKQk9EbENWakZLTEV0Qk9UbENWU3hGUVRnNVFrZzdRVUZEWmtFc1owSkJRVkZCTEZOQlFWTXNRMEZCYWtJN1FVRkRRU3haUVVGSkxFdEJRVXR1UkN4VFFVRk1MRWxCUVd0Q2JVUXNVMEZCVXl4RFFVRXpRaXhKUVVGblF5eExRVUZMYmtRc1UwRkJUQ3hEUVVGbGMwUXNUVUZCWml4SFFVRjNRa2dzUzBGQk5VUXNSVUZCYlVVN1FVRkRMMFFzYlVKQlFVOHNTMEZCUzI1RUxGTkJRVXdzUTBGQlpXMUVMRXRCUVdZc1EwRkJVRHRCUVVOSU8wRkJRMFFzWlVGQlR5eEpRVUZRTzBGQlEwZ3NTMEZ3SzBKeFFqczdPMEZCY3l0Q2RFSTdPenM3T3p0QlFVMUJNa29zWlVFMUswSnpRaXg1UWtFMEswSlFPMEZCUTFnc1pVRkJUeXhMUVVGTE9VMHNVMEZCV2p0QlFVTklMRXRCT1N0Q2NVSTdPenRCUVdjdlFuUkNPenM3T3pzN1FVRk5RU3ROTEdOQmRDOUNjMElzYzBKQmN5OUNWa01zVDBGMEwwSlZMRVZCY3k5Q1JqdEJRVU5vUWl4aFFVRkxReXhYUVVGTUxFTkJRV2xDTEVOQlFVTkVMRTlCUVVRc1EwRkJha0k3UVVGRFNDeExRWGd2UW5GQ096czdRVUV3TDBKMFFqczdPenM3TzBGQlRVRkRMR1ZCYUdkRGMwSXNkVUpCWjJkRFZFTXNVVUZvWjBOVExFVkJaMmREUXp0QlFVTnVRaXhoUVVGTGJFNHNVMEZCVEN4SFFVRnBRbXRPTEZGQlFXcENPMEZCUTBFc1lVRkJTMnhLTEdsQ1FVRk1PMEZCUTBnc1MwRnVaME54UWpzN08wRkJjV2REZEVJN096czdPenM3T3p0QlFWTkJiVW9zWjBKQk9XZERjMElzTUVKQk9HZERUanRCUVVOYUxHVkJRVThzUzBGQlMzSklMRlZCUVZvN1FVRkRTQ3hMUVdob1EzRkNPenM3UVVGcmFFTjBRanM3T3pzN096czdPMEZCVTBGelNDeHJRa0V6YUVOelFpdzBRa0V5YUVOS08wRkJRMlFzWlVGQlR5eExRVUZMY0Vnc1dVRkJXanRCUVVOSUxFdEJOMmhEY1VJN096dEJRU3RvUTNSQ096czdPenM3TzBGQlQwRnhTQ3hqUVhScFEzTkNMSE5DUVhOcFExWnNTeXhMUVhScFExVXNSVUZ6YVVOSU8wRkJRMlpCTEdkQ1FVRlJRU3hUUVVGVExFTkJRV3BDTzBGQlEwRXNXVUZCU1N4TFFVRkxiRVFzVTBGQlRDeEpRVUZyUW10RUxGTkJRVk1zUTBGQk0wSXNTVUZCWjBNc1MwRkJTMnhFTEZOQlFVd3NRMEZCWlhGRUxFMUJRV1lzUjBGQmQwSklMRXRCUVRWRUxFVkJRVzFGTzBGQlF5OUVMRzFDUVVGUExFdEJRVXRzUkN4VFFVRk1MRU5CUVdWclJDeExRVUZtTEVOQlFWQTdRVUZEU0R0QlFVTkVMR1ZCUVU4c1NVRkJVRHRCUVVOSUxFdEJOV2xEY1VJN096dEJRVGhwUTNSQ096czdPenM3UVVGTlFXMUxMR1ZCY0dwRGMwSXNlVUpCYjJwRFVEdEJRVU5ZTEdWQlFVOHNTMEZCUzNKT0xGTkJRVm83UVVGRFNDeExRWFJxUTNGQ096czdRVUYzYWtOMFFqczdPenM3TzBGQlRVRnpUaXhqUVRscVEzTkNMSE5DUVRocVExWnNTQ3hQUVRscVExVXNSVUU0YWtORU8wRkJRMnBDTEdGQlFVdHRTQ3hYUVVGTUxFTkJRV2xDTEVOQlFVTnVTQ3hQUVVGRUxFTkJRV3BDTzBGQlEwZ3NTMEZvYTBOeFFqczdPMEZCYTJ0RGRFSTdPenM3T3p0QlFVMUJiVWdzWlVGNGEwTnpRaXgxUWtGM2EwTlVReXhSUVhoclExTXNSVUYzYTBORE8wRkJRMjVDTEdGQlFVdDRUaXhUUVVGTUxFZEJRV2xDZDA0c1VVRkJha0k3UVVGRFFTeFpRVUZKVUN4WFFVRlhMRXRCUVV0c1RpeFRRVUZNTEVkQlFXbENMRVZCUVdoRE8wRkJRMEVzV1VGQlNUQk9MRmRCUVZjc1MwRkJTek5PTEZOQlFVd3NSMEZCYVVJc1JVRkJhRU03UVVGRFFTeGhRVUZMTEVsQlFVazBUaXhKUVVGSkxFTkJRV0lzUlVGQlowSkJMRWxCUVVsR0xGTkJRVk51U3l4TlFVRTNRaXhGUVVGeFEzRkxMRWRCUVhKRExFVkJRVEJETzBGQlEzUkRMR2RDUVVGSmRFZ3NWVUZCVlc5SUxGTkJRVk5GTEVOQlFWUXNRMEZCWkR0QlFVTkJMR2RDUVVGSmRFZ3NUMEZCU2l4RlFVRmhPMEZCUTFRMlJ5eDVRa0ZCVTFNc1EwRkJWQ3hKUVVGamRFZ3NVVUZCVVhWSUxGZEJRWFJDTzBGQlEwZzdRVUZEU2pzN1FVRkZSSEpSTEZkQlFVYzRTQ3hSUVVGSUxFTkJRVmwzU1N4bFFVRmFMRU5CUVRaQ1dDeFJRVUUzUWl4RlFVRjFReXhaUVVGWk8wRkJReTlETEdsQ1FVRkxMRWxCUVVsVExFdEJRVWtzUTBGQlVpeEZRVUZYUnl4SlFVRkpUQ3hUUVVGVGJrc3NUVUZCTjBJc1JVRkJjVU54U3l4TFFVRkpSeXhEUVVGNlF5eEZRVUUwUXl4RlFVRkZTQ3hGUVVFNVF5eEZRVUZwUkR0QlFVTTNReXh2UWtGQlNVa3NZMEZCWTA0c1UwRkJVMFVzUlVGQlZDeERRVUZzUWp0QlFVTkJMRzlDUVVGSkxFTkJRVU5KTEZkQlFVd3NSVUZCYTBJN1FVRkRiRUo0VVN4dFFrRkJSemhJTEZGQlFVZ3NRMEZCV1RKSkxHZENRVUZhTEVOQlFUWkNSQ3hYUVVFM1FpeEZRVUV3UTB3c1VVRkJNVU1zUlVGQmIwUkRMRVZCUVhCRU8wRkJRMGc3UVVGRFJDeHBRa0ZCUzAwc1owSkJRVXc3UVVGRFNDeFRRVkJ6UXl4RFFVOXlRME1zU1VGUWNVTXNRMEZQYUVNc1NVRlFaME1zUTBGQmRrTTdRVUZSU0N4TFFUTnNRM0ZDTzBGQk5teERkRUpETEc5Q1FUZHNRM05DTERoQ1FUWnNRMFk3UVVGRGFFSXNXVUZCU1dwRUxGRkJRVkVzUzBGQlMzaE1MRTFCUVdwQ08wRkJRMEVzV1VGQlNXZFBMRmRCUVZjc1MwRkJTek5PTEZOQlFYQkNPMEZCUTBFc1dVRkJTWEZQTEd0Q1FVRnJRaXhMUVVGTE5WQXNaMEpCUVROQ08wRkJRMEVzV1VGQlNUWlFMR2RDUVVGblFpeEZRVUZ3UWpzN1FVRkZRU3haUVVGTmFFb3NWMEZCVnpsSUxFZEJRVWM0U0N4UlFVRndRanRCUVVOQkxGbEJRVTFyUkN4WFFVRlhiRVFzVTBGQlUydEVMRkZCUVRGQ08wRkJRMEVzV1VGQlRVTXNaVUZCWlVRc1UwRkJVME1zV1VGQk9VSTdPMEZCUlVFMFJpeDNRa0ZCWjBJNVN5eE5RVUZvUWl4SFFVRjVRaXhEUVVGNlFqdEJRVU5CTEdGQlFVc3NTVUZCU1hGTExFbEJRVWtzUTBGQllpeEZRVUZuUWtFc1NVRkJTWHBETEUxQlFVMDFTQ3hOUVVFeFFpeEZRVUZyUTNGTExFZEJRV3hETEVWQlFYVkRPMEZCUTI1RExHZENRVUZKZGtnc1RVRkJUVGhGTEUxQlFVMTVReXhEUVVGT0xFTkJRVlk3UVVGRFFTeG5Ra0ZCU1haSUxGRkJRVkVzUTBGQldpeEZRVUZsTzBGQlEyWkJMR3RDUVVGUExFTkJRVU5CTEUxQlFVMXZReXhaUVVGUUxFMUJRWGxDTEVOQlFXaERPMEZCUTBFc1owSkJRVWsyUXl4UFFVRlBjVU1zVTBGQlUzUklMRWRCUVZRc1EwRkJXRHRCUVVOQkxHZENRVUZKTEVOQlFVTnBSaXhKUVVGTUxFVkJRVmM3UVVGRFVEbE9MRzFDUVVGSEsxRXNTMEZCU0N4RFFVRlRMSEZFUVVGVUxFVkJRV2RGYkVrc1IwRkJhRVU3UVVGRFFUdEJRVU5JTzBGQlEwUXNaMEpCUVVsdFNTeGhRVUZoYkVRc1MwRkJTMjFFTEV0QlFYUkNPMEZCUTBFc1owSkJRVWxJTEdOQlFXTkZMRlZCUVdRc1EwRkJTaXhGUVVFclFqdEJRVU12UWtZc01FSkJRV05GTEZWQlFXUXNTVUZCTkVJc1NVRkJOVUk3UVVGRFFVZ3NORUpCUVdkQ00wc3NTVUZCYUVJc1EwRkJjVUk0U3l4VlFVRnlRanRCUVVOSU8wRkJRMG9zUzBGMGJrTnhRanRCUVhkdVEzUkNSU3hUUVhodVEzTkNMR2xDUVhkdVEyWkRMRk5CZUc1RFpTeEZRWGR1UTBwRExFOUJlRzVEU1N4RlFYZHVRMHRzUWl4UlFYaHVRMHdzUlVGM2JrTmxVQ3hSUVhodVEyWXNSVUYzYmtONVFsRXNVVUY0YmtONlFpeEZRWGR1UTIxRE96dEJRVVZ5UkN4aFFVRkxlRThzWVVGQlRDeEhRVUZ4UWl4SlFVRnlRanRCUVVOQkxHRkJRVXRGTEZWQlFVd3NSMEZCYTBKelVDeFRRVUZzUWp0QlFVTkJMR0ZCUVV0eVVDeFJRVUZNTEVkQlFXZENjMUFzVDBGQmFFSTdPMEZCUlVFc1dVRkJTVU1zVDBGQlQwWXNWVUZCVlRWSkxGVkJRWEpDT3p0QlFVVkJPMEZCUTBFc1lVRkJTMnBITEZWQlFVd3NSMEZCYTBJMlR5eFZRVUZWYWxJc1NVRkJOVUk3UVVGRFFTeGhRVUZMYVVNc1RVRkJUQ3hIUVVGaloxQXNWVUZCVldoUUxFMUJRWGhDTzBGQlEwRXNZVUZCUzI5R0xGZEJRVXdzUjBGQmJVSTBTaXhWUVVGVlJ5eFZRVUUzUWp0QlFVTkJMR0ZCUVVzdlNTeFZRVUZNTEVkQlFXdENPRWtzU1VGQmJFSTdRVUZEUVN4aFFVRkxSU3hQUVVGTUxFZEJRV1ZLTEZWQlFWVkpMRTlCUVhwQ08wRkJRMEVzWVVGQlMwTXNUMEZCVEN4SFFVRmxUQ3hWUVVGVlN5eFBRVUY2UWp0QlFVTkJMR0ZCUVV0RExGRkJRVXdzUjBGQlowSk9MRlZCUVZWTkxGRkJRVEZDTzBGQlEwRXNZVUZCUzBNc1dVRkJUQ3hIUVVGdlFrNHNVVUZCVVU4c1YwRkJOVUk3UVVGRFFTeGhRVUZMYUVrc1dVRkJUQ3hIUVVGdlFubElMRkZCUVZGUkxHTkJRVklzUlVGQmNFSTdRVUZEUVN4aFFVRkxlRWtzWVVGQlRDeEhRVUZ4UW1kSkxGRkJRVkZUTEdWQlFWSXNSVUZCY2tJN1FVRkRRU3hoUVVGTEwwZ3NZMEZCVEN4SFFVRnpRbk5JTEZGQlFWRlZMR2RDUVVGU0xFVkJRWFJDTzBGQlEwRXNZVUZCU3k5UExGZEJRVXdzUjBGQmJVSnhUeXhSUVVGUlZ5eHBRa0ZCVWl4RlFVRnVRanM3UVVGRlFUdEJRVU5CTEdGQlFVdHlVQ3hUUVVGTUxFZEJRV2xDZDA0c1VVRkJha0k3UVVGRFFUdEJRVU5CTEdGQlFVdDZUaXhUUVVGTUxFZEJRV2xDYTA0c1VVRkJha0k3UVVGRFFUdEJRVU5CTEdGQlFVdHVUaXhUUVVGTUxFZEJRV2xDTWs0c1VVRkJha0k3TzBGQlJVRTdRVUZEUVN4aFFVRkxOVTRzYVVKQlFVd3NSMEZCZVVJMlR5eFJRVUZSV1N4WFFVRnFRenRCUVVOQkxHRkJRVXQyU2l4WlFVRk1MRWRCUVc5Q01ra3NVVUZCVVdFc1YwRkJVaXhGUVVGd1FqczdRVUZGUVN4WlFVRkpMRXRCUVVzeFVDeHBRa0ZCVEN4TFFVRXlRblpETEVkQlFVYzRTQ3hSUVVGSUxFTkJRVmxETEZkQlFWb3NRMEZCZDBKTExFZEJRWFpFTEVWQlFUUkVPMEZCUTNoRU8wRkJRMEVzWjBKQlFVMU9MRmRCUVZjNVNDeEhRVUZIT0Vnc1VVRkJjRUk3UVVGRFFTeG5Ra0ZCVFRoQ0xHTkJRV001UWl4VFFVRlRPRUlzVjBGQk4wSTdRVUZEUVN4blFrRkJUVkFzWlVGQlpYWkNMRk5CUVZOMVFpeFpRVUU1UWpzN1FVRkZRU3huUWtGQlNUQkRMRkZCUVZFc1MwRkJTM1JFTEZsQlFVd3NRMEZCYTBKdVNDeExRVUU1UWp0QlFVTkJMR2RDUVVGSk1Fc3NVVUZCVVN4TFFVRkxka1FzV1VGQlRDeERRVUZyUW14SUxFMUJRVGxDTzBGQlEwRXNaMEpCUVVsRUxGRkJRVkVzUTBGQldqdEJRVUZCTEdkQ1FVRmxReXhUUVVGVExFTkJRWGhDT3p0QlFVVkJMR2xDUVVGTGFVd3NVMEZCVEN4SFFVRnJRaXhMUVVGTGNFUXNZVUZCVEN4TFFVRjFRa01zWVVGQllVTXNaMEpCUVhKRExFZEJRWGxFTEVOQlFYcEVMRWRCUVRaRUxFTkJRVU1zUTBGQkwwVTdPMEZCUlVFc1owSkJRVWtzUzBGQlMwc3NXVUZCVEN4TFFVRnpRa01zV1VGQldVY3NZVUZCZEVNc1JVRkJjVVE3UVVGRGFrUXNjVUpCUVVzd1F5eFBRVUZNTEVkQlFXVXNRMEZCUTFZc1VVRkJVU3hMUVVGTGFrTXNZMEZCWkN4SlFVRm5ReXhEUVVFdlF6dEJRVU5CTEhGQ1FVRkxlVU1zVDBGQlRDeEhRVUZsTEVOQlFXWTdRVUZEUVdoTUxIbENRVUZUZVVzc1UwRkJVeXhMUVVGTGVrUXNWVUZCVEN4RFFVRm5RbWhJTEUxQlFXaENMRWRCUVhsQ0xFZEJRV3hETEVOQlFWUTdRVUZEUVVRc2QwSkJRVkVzUTBGQlEzbExMRkZCUVZFc1MwRkJTMnBETEdOQlFXUXNTVUZCWjBOdVF5eExRVUZMUXl4TFFVRk1MRU5CUVZjc1MwRkJTMWNzVlVGQlRDeERRVUZuUW1wSUxFdEJRV2hDTEVkQlFYZENMRU5CUVc1RExFTkJRV2hETEVkQlFYZEZlVXNzVTBGQlV5eExRVUZMZUVRc1ZVRkJUQ3hEUVVGblFtcElMRXRCUVdoQ0xFZEJRWGRDTEVOQlFXcERMRU5CUVdoR08wRkJRMGdzWVVGTVJDeE5RVXRQTzBGQlEwZ3NjVUpCUVV0dFRDeFBRVUZNTEVkQlFXVXNRMEZCWmp0QlFVTkJMSEZDUVVGTFJpeFBRVUZNTEVkQlFXVXNRMEZCUTFBc1VVRkJVU3hMUVVGTGJFTXNZMEZCWkN4SlFVRm5ReXhEUVVFdlF6dEJRVU5CZUVrc2QwSkJRVkY1U3l4VFFVRlRMRXRCUVV0NFJDeFZRVUZNTEVOQlFXZENha2dzUzBGQmFFSXNSMEZCZDBJc1IwRkJha01zUTBGQlVqdEJRVU5CUXl4NVFrRkJVeXhEUVVGRGVVc3NVVUZCVVN4TFFVRkxiRU1zWTBGQlpDeEpRVUZuUTI1RExFdEJRVXRETEV0QlFVd3NRMEZCVnl4TFFVRkxWeXhWUVVGTUxFTkJRV2RDYUVnc1RVRkJhRUlzUjBGQmVVSXNRMEZCY0VNc1EwRkJhRU1zUjBGQmVVVjVTeXhUUVVGVExFdEJRVXQ2UkN4VlFVRk1MRU5CUVdkQ2FFZ3NUVUZCYUVJc1IwRkJlVUlzUTBGQmJFTXNRMEZCYkVZN1FVRkRTRHRCUVVORUxHbENRVUZMYVVNc1NVRkJUQ3hEUVVGVk1FOHNZMEZCVml4RFFVRjVRalZSTEV0QlFYcENMRVZCUVdkRFF5eE5RVUZvUXp0QlFVTklMRk5CZUVKRUxFMUJkMEpQTzBGQlEwZ3NhVUpCUVV0cFF5eEpRVUZNTEVOQlFWVXdUeXhqUVVGV0xFTkJRWGxDTEV0QlFVc3pTaXhWUVVGTUxFTkJRV2RDYWtnc1MwRkJhRUlzUjBGQmQwSXNTMEZCUzIxSUxGbEJRVXdzUTBGQmEwSnVTQ3hMUVVGdVJTeEZRVU5KTEV0QlFVdHBTQ3hWUVVGTUxFTkJRV2RDYUVnc1RVRkJhRUlzUjBGQmVVSXNTMEZCUzJ0SUxGbEJRVXdzUTBGQmEwSnNTQ3hOUVVRdlF6dEJRVVZJT3p0QlFVVkVPMEZCUTBFc1lVRkJTMmxMTEU5QlFVd3NSMEZCWlhoTUxFZEJRVWQzU1N4RlFVRklMRU5CUVUweVNTeFZRVUZWY0Vrc1RVRkJWaXhEUVVGcFFqTklMRU5CUVhaQ0xFVkJRVEJDTEVOQlFVTXJVQ3hWUVVGVmNFa3NUVUZCVml4RFFVRnBRakZJTEVOQlFUVkRMRU5CUVdZN1FVRkRRU3hoUVVGTE9GRXNiMEpCUVV3c1IwRkJORUlzUzBGQk5VSTdRVUZEUVN4aFFVRkxReXhoUVVGTUxFZEJRWEZDTEVOQlFYSkNPMEZCUTBFc1lVRkJTelZNTEdkQ1FVRk1PMEZCUTBFc1lVRkJTMnRMTEdkQ1FVRk1PMEZCUTBnc1MwRTFja054UWp0QlFUaHlRM1JDUVN4dlFrRTVja056UWl3NFFrRTRja05HTzBGQlEyaENMR0ZCUVV0c1JDeGxRVUZNTzBGQlEwRXNZVUZCUzI5RUxHZENRVUZNTzBGQlEwRXNZVUZCUzI1TUxHdENRVUZNTzBGQlEwRXNZVUZCUzJkQ0xHbENRVUZNTzBGQlEwZ3NTMEZ1YzBOeFFqdEJRWEZ6UTNSQ1FTeHhRa0Z5YzBOelFpd3JRa0Z4YzBORU8wRkJRMnBDTEZsQlFVbHZTeXhyUWtGQmEwSXNTMEZCU3pWUUxHZENRVUV6UWp0QlFVTkJMRmxCUVVrMFVDeG5Ra0ZCWjBJNVN5eE5RVUZvUWl4TFFVRXlRaXhEUVVFdlFpeEZRVUZyUXp0QlFVTTVRaXhwUWtGQlMzTk5MR0ZCUVV3N1FVRkRRVHRCUVVOSU96dEJRVVZFTEZsQlFVbERMR05CUVdNc1MwRkJTM0JTTEdkQ1FVRk1MRWRCUVhkQ0xFVkJRVEZETzBGQlEwRXNXVUZCU1hsUExGZEJRVmNzUzBGQlMyeE9MRk5CUVhCQ096dEJRVVZCTEdGQlFVc3NTVUZCU1RKT0xFbEJRVWtzUTBGQllpeEZRVUZuUWtFc1NVRkJTVk1zWjBKQlFXZENPVXNzVFVGQmNFTXNSVUZCTkVOeFN5eEhRVUUxUXl4RlFVRnBSRHRCUVVNM1F5eG5Ra0ZCU1Zrc1lVRkJZVWdzWjBKQlFXZENWQ3hEUVVGb1FpeERRVUZxUWp0QlFVTkJMR2RDUVVGSldDeFZRVUZWUlN4VFFVRlRjVUlzVlVGQlZDeERRVUZrT3p0QlFVVkJMR2RDUVVGSmRVSXNWMEZCVnl4TFFVRkxReXhsUVVGTUxFTkJRWEZDY0VNc1EwRkJja0lzUTBGQlpqdEJRVU5CTEdkQ1FVRkpMRU5CUVVOdFF5eFJRVUZNTEVWQlFXVTdRVUZEV0VFc01rSkJRVmR1VkN4VFFVRlRjVlFzT0VKQlFWUXNRMEZCZDBNc1YwRkJlRU1zUlVGQmNVUXNTVUZCY2tRc1EwRkJXRHRCUVVOSUxHRkJSa1FzVFVGSFN6dEJRVU5FUml3eVFrRkJWMjVVTEZOQlFWTnpWQ3gxUWtGQlZDeERRVUZwUTBnc1VVRkJha01zUlVGQk1rTXNTVUZCTTBNc1EwRkJXRHRCUVVOSU96dEJRVVZFUVN4eFFrRkJVMGtzVFVGQlZDeERRVUZuUWl4aFFVRm9RaXhGUVVFclFpeEpRVUV2UWp0QlFVTkJTaXh4UWtGQlUwa3NUVUZCVkN4RFFVRm5RaXhqUVVGb1FpeEZRVUZuUXl4SlFVRm9RenRCUVVOQlNpeHhRa0ZCVTBzc1YwRkJWQ3hEUVVGeFFpeFRRVUZ5UWl4RlFVRm5RMjVFTEU5QlFXaERPMEZCUTBFc2FVSkJRVXR2UkN4WFFVRk1MRU5CUVdsQ2VrTXNRMEZCYWtJc1JVRkJiMEp0UXl4UlFVRndRanRCUVVOQlJDeDNRa0ZCV1hSQ0xGVkJRVm9zU1VGQk1FSmFMRU5CUVRGQ08wRkJRMGc3TzBGQlJVUXNZVUZCU3pCRExIVkNRVUZNTEVOQlFUWkNMRWxCUVRkQ08wRkJRMEVzWVVGQlMwTXNZVUZCVEN4RFFVRnRRaXhKUVVGdVFqdEJRVU5JTzBGQmNIVkRjVUlzUTBGQlZDeERRVUZxUWpzN1FVRjFkVU5CTDFNc1IwRkJSMVVzVlVGQlNDeEhRVUZuUW5OVExFOUJRVTlETEU5QlFWQXNSMEZCYVVKMlV5eFZRVUZxUXlJc0ltWnBiR1VpT2lKRFExUnBiR1ZrVEdGNVpYSXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUVOdmNIbHlhV2RvZENBb1l5a2dNakF4TXkweU1ERTJJRU5vZFd0dmJtY2dWR1ZqYUc1dmJHOW5hV1Z6SUVsdVl5NWNiaUJEYjNCNWNtbG5hSFFnS0dNcElESXdNVGN0TWpBeE9DQllhV0Z0Wlc0Z1dXRnFhU0JUYjJaMGQyRnlaU0JEYnk0c0lFeDBaQzVjYmx4dUlHaDBkSEJ6T2k4dmQzZDNMbU52WTI5ekxtTnZiUzljYmx4dUlGQmxjbTFwYzNOcGIyNGdhWE1nYUdWeVpXSjVJR2R5WVc1MFpXUXNJR1p5WldVZ2IyWWdZMmhoY21kbExDQjBieUJoYm5rZ2NHVnljMjl1SUc5aWRHRnBibWx1WnlCaElHTnZjSGxjYmlCdlppQjBhR2x6SUhOdlpuUjNZWEpsSUdGdVpDQmhjM052WTJsaGRHVmtJR1Z1WjJsdVpTQnpiM1Z5WTJVZ1kyOWtaU0FvZEdobElGd2lVMjltZEhkaGNtVmNJaWtzSUdFZ2JHbHRhWFJsWkN4Y2JpQWdkMjl5YkdSM2FXUmxMQ0J5YjNsaGJIUjVMV1p5WldVc0lHNXZiaTFoYzNOcFoyNWhZbXhsTENCeVpYWnZZMkZpYkdVZ1lXNWtJRzV2YmkxbGVHTnNkWE5wZG1VZ2JHbGpaVzV6WlZ4dUlIUnZJSFZ6WlNCRGIyTnZjeUJEY21WaGRHOXlJSE52YkdWc2VTQjBieUJrWlhabGJHOXdJR2RoYldWeklHOXVJSGx2ZFhJZ2RHRnlaMlYwSUhCc1lYUm1iM0p0Y3k0Z1dXOTFJSE5vWVd4c1hHNGdJRzV2ZENCMWMyVWdRMjlqYjNNZ1EzSmxZWFJ2Y2lCemIyWjBkMkZ5WlNCbWIzSWdaR1YyWld4dmNHbHVaeUJ2ZEdobGNpQnpiMlowZDJGeVpTQnZjaUIwYjI5c2N5QjBhR0YwSjNOY2JpQWdkWE5sWkNCbWIzSWdaR1YyWld4dmNHbHVaeUJuWVcxbGN5NGdXVzkxSUdGeVpTQnViM1FnWjNKaGJuUmxaQ0IwYnlCd2RXSnNhWE5vTENCa2FYTjBjbWxpZFhSbExGeHVJQ0J6ZFdKc2FXTmxibk5sTENCaGJtUXZiM0lnYzJWc2JDQmpiM0JwWlhNZ2IyWWdRMjlqYjNNZ1EzSmxZWFJ2Y2k1Y2JseHVJRlJvWlNCemIyWjBkMkZ5WlNCdmNpQjBiMjlzY3lCcGJpQjBhR2x6SUV4cFkyVnVjMlVnUVdkeVpXVnRaVzUwSUdGeVpTQnNhV05sYm5ObFpDd2dibTkwSUhOdmJHUXVYRzRnV0dsaGJXVnVJRmxoYW1rZ1UyOW1kSGRoY21VZ1EyOHVMQ0JNZEdRdUlISmxjMlZ5ZG1WeklHRnNiQ0J5YVdkb2RITWdibTkwSUdWNGNISmxjM05zZVNCbmNtRnVkR1ZrSUhSdklIbHZkUzVjYmx4dUlGUklSU0JUVDBaVVYwRlNSU0JKVXlCUVVrOVdTVVJGUkNCY0lrRlRJRWxUWENJc0lGZEpWRWhQVlZRZ1YwRlNVa0ZPVkZrZ1QwWWdRVTVaSUV0SlRrUXNJRVZZVUZKRlUxTWdUMUpjYmlCSlRWQk1TVVZFTENCSlRrTk1WVVJKVGtjZ1FsVlVJRTVQVkNCTVNVMUpWRVZFSUZSUElGUklSU0JYUVZKU1FVNVVTVVZUSUU5R0lFMUZVa05JUVU1VVFVSkpURWxVV1N4Y2JpQkdTVlJPUlZOVElFWlBVaUJCSUZCQlVsUkpRMVZNUVZJZ1VGVlNVRTlUUlNCQlRrUWdUazlPU1U1R1VrbE9SMFZOUlU1VUxpQkpUaUJPVHlCRlZrVk9WQ0JUU0VGTVRDQlVTRVZjYmlCQlZWUklUMUpUSUU5U0lFTlBVRmxTU1VkSVZDQklUMHhFUlZKVElFSkZJRXhKUVVKTVJTQkdUMUlnUVU1WklFTk1RVWxOTENCRVFVMUJSMFZUSUU5U0lFOVVTRVZTWEc0Z1RFbEJRa2xNU1ZSWkxDQlhTRVZVU0VWU0lFbE9JRUZPSUVGRFZFbFBUaUJQUmlCRFQwNVVVa0ZEVkN3Z1ZFOVNWQ0JQVWlCUFZFaEZVbGRKVTBVc0lFRlNTVk5KVGtjZ1JsSlBUU3hjYmlCUFZWUWdUMFlnVDFJZ1NVNGdRMDlPVGtWRFZFbFBUaUJYU1ZSSUlGUklSU0JUVDBaVVYwRlNSU0JQVWlCVVNFVWdWVk5GSUU5U0lFOVVTRVZTSUVSRlFVeEpUa2RUSUVsT1hHNGdWRWhGSUZOUFJsUlhRVkpGTGx4dUlDb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW92WEc1amIyNXpkQ0JTWlc1a1pYSkRiMjF3YjI1bGJuUWdQU0J5WlhGMWFYSmxLQ2N1TGk5amIzSmxMMk52YlhCdmJtVnVkSE12UTBOU1pXNWtaWEpEYjIxd2IyNWxiblFuS1R0Y2JtTnZibk4wSUUxaGRHVnlhV0ZzSUQwZ2NtVnhkV2x5WlNnbkxpNHZZMjl5WlM5aGMzTmxkSE12YldGMFpYSnBZV3d2UTBOTllYUmxjbWxoYkNjcE8xeHVZMjl1YzNRZ1VtVnVaR1Z5Um14dmR5QTlJSEpsY1hWcGNtVW9KeTR1TDJOdmNtVXZjbVZ1WkdWeVpYSXZjbVZ1WkdWeUxXWnNiM2NuS1R0Y2JseHVhVzF3YjNKMElIc2diV0YwTkN3Z2RtVmpNaUI5SUdaeWIyMGdKeTR1TDJOdmNtVXZkbTFoZEdnbk8xeHViR1YwSUY5dFlYUTBYM1JsYlhBZ1BTQnRZWFEwTG1OeVpXRjBaU2dwTzF4dWJHVjBJRjkyWldNeVgzUmxiWEFnUFNCMlpXTXlMbU55WldGMFpTZ3BPMXh1YkdWMElGOTJaV015WDNSbGJYQXlJRDBnZG1Wak1pNWpjbVZoZEdVb0tUdGNibXhsZENCZmRHVnRjRkp2ZDBOdmJDQTlJSHR5YjNjNk1Dd2dZMjlzT2pCOU8xeHVYRzVzWlhRZ1ZHbHNaV1JWYzJWeVRtOWtaVVJoZEdFZ1BTQmpZeTVEYkdGemN5aDdYRzRnSUNBZ2JtRnRaVG9nSjJOakxsUnBiR1ZrVlhObGNrNXZaR1ZFWVhSaEp5eGNiaUFnSUNCbGVIUmxibVJ6T2lCall5NURiMjF3YjI1bGJuUXNYRzVjYmlBZ0lDQmpkRzl5SUNncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmFXNWtaWGdnUFNBdE1UdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmNtOTNJRDBnTFRFN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJOdmJDQTlJQzB4TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDkwYVd4bFpFeGhlV1Z5SUQwZ2JuVnNiRHRjYmlBZ0lDQjlYRzVjYm4wcE8xeHVYRzR2S2lwY2JpQXFJQ0VqWlc0Z1VtVnVaR1Z5SUhSb1pTQlVUVmdnYkdGNVpYSXVYRzRnS2lBaEkzcG9JT2E0c3VhZmt5QlVUVmdnYkdGNVpYTGpnSUpjYmlBcUlFQmpiR0Z6Y3lCVWFXeGxaRXhoZVdWeVhHNGdLaUJBWlhoMFpXNWtjeUJEYjIxd2IyNWxiblJjYmlBcUwxeHViR1YwSUZScGJHVmtUR0Y1WlhJZ1BTQmpZeTVEYkdGemN5aDdYRzRnSUNBZ2JtRnRaVG9nSjJOakxsUnBiR1ZrVEdGNVpYSW5MRnh1WEc0Z0lDQWdMeThnU1c1b1pYSnBkSE1nWm5KdmJTQjBhR1VnWVdKemRISmhZM1FnWTJ4aGMzTWdaR2x5WldOMGJIa3NYRzRnSUNBZ0x5OGdZbVZqWVhWelpTQlVhV3hsWkV4aGVXVnlJRzV2ZENCamNtVmhkR1VnYjNJZ2JXRnBiblJoYVc1eklIUm9aU0J6WjA1dlpHVWdZbmtnYVhSelpXeG1MbHh1SUNBZ0lHVjRkR1Z1WkhNNklGSmxibVJsY2tOdmJYQnZibVZ1ZEN4Y2JseHVJQ0FnSUdWa2FYUnZjam9nZTF4dUlDQWdJQ0FnSUNCcGJuTndaV04wYjNJNklDZHdZV05yWVdkbGN6b3ZMMmx1YzNCbFkzUnZjaTlwYm5Od1pXTjBiM0p6TDJOdmJYQnpMM1JwYkdWa0xXeGhlV1Z5TG1wekp5eGNiaUFnSUNCOUxGeHVYRzRnSUNBZ1kzUnZjaUFvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNWelpYSk9iMlJsUjNKcFpDQTlJSHQ5T3k4dklGdHliM2RkVzJOdmJGMGdQU0I3WTI5MWJuUTZJREFzSUc1dlpHVnpUR2x6ZERvZ1cxMTlPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOTFjMlZ5VG05a1pVMWhjQ0E5SUh0OU95OHZJRnRwWkYwZ1BTQnViMlJsTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDkxYzJWeVRtOWtaVVJwY25SNUlEMGdabUZzYzJVN1hHNWNiaUFnSUNBZ0lDQWdMeThnYzNSdmNtVWdkR2hsSUd4aGVXVnlJSFJwYkdWeklHNXZaR1VzSUdsdVpHVjRJR2x6SUdOaFkzVnNZWFJsWkNCaWVTQW5lQ0FySUhkcFpIUm9JQ29nZVNjc0lHWnZjbTFoZENCc2FXdGxjeUFuV3pCZFBYUnBiR1ZPYjJSbE1DeGJNVjA5ZEdsc1pVNXZaR1V4TENBdUxpNG5YRzRnSUNBZ0lDQWdJSFJvYVhNdVgzUnBiR1ZrVkdsc1pYTWdQU0JiWFR0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJ6ZEc5eVpTQjBhR1VnYkdGNVpYSWdkR2xzWlhObGRITWdhVzVrWlhnZ1lYSnlZWGxjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkR2xzWlhObGRFbHVaR1Y0UVhKeUlEMGdXMTA3WEc0Z0lDQWdJQ0FnSUM4dklIUmxlSFIxY21VZ2FXUWdkRzhnYldGMFpYSnBZV3dnYVc1a1pYaGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmRHVjRTV1JVYjAxaGRFbHVaR1Y0SUQwZ2UzMDdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkbWxsZDFCdmNuUWdQU0I3ZURvdE1Td2dlVG90TVN3Z2QybGtkR2c2TFRFc0lHaGxhV2RvZERvdE1YMDdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyTjFiR3hwYm1kU1pXTjBJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1ZtZEVSdmQyNDZlM0p2ZHpvdE1Td2dZMjlzT2kweGZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhKcFoyaDBWRzl3T250eWIzYzZMVEVzSUdOdmJEb3RNWDFjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWTNWc2JHbHVaMFJwY25SNUlEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY21sbmFIUlViM0FnUFNCN2NtOTNPaTB4TENCamIydzZMVEY5TzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDJ4aGVXVnlTVzVtYnlBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjFoY0VsdVptOGdQU0J1ZFd4c08xeHVYRzRnSUNBZ0lDQWdJQzh2SUhKbFkyOXlaQ0J0WVhnZ2IzSWdiV2x1SUhScGJHVWdkR1Y0ZEhWeVpTQnZabVp6WlhRc0lGeHVJQ0FnSUNBZ0lDQXZMeUJwZENCM2FXeHNJRzFoYTJVZ1kzVnNiR2x1WnlCeVpXTjBJRzF2Y21VZ2JHRnlaMlVzSUhkb2FXTm9JR2x1YzNWeVpTQmpkV3hzYVc1bklISmxZM1FnWTI5eWNtVmpkQzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkRzl3VDJabWMyVjBJRDBnTUR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWkc5M2JrOW1abk5sZENBOUlEQTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyeGxablJQWm1aelpYUWdQU0F3TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl5YVdkb2RFOW1abk5sZENBOUlEQTdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z2MzUnZjbVVnZEdobElHeGhlV1Z5SUhScGJHVnpMQ0JwYm1SbGVDQnBjeUJqWVdOMWJHRjBaV1FnWW5rZ0ozZ2dLeUIzYVdSMGFDQXFJSGtuTENCbWIzSnRZWFFnYkdsclpYTWdKMXN3WFQxbmFXUXdMRnN4WFQxbmFXUXhMQ0F1TGk0blhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNScGJHVnpJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lDOHZJSFpsY25SbGVDQmhjbkpoZVZ4dUlDQWdJQ0FnSUNCMGFHbHpMbDkyWlhKMGFXTmxjeUE5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQXZMeUIyWlhKMGFXTmxjeUJrYVhKMGVWeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5MlpYSjBhV05sYzBScGNuUjVJRDBnZEhKMVpUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxsOXNZWGxsY2s1aGJXVWdQU0FuSnp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYkdGNVpYSlBjbWxsYm5SaGRHbHZiaUE5SUc1MWJHdzdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z2MzUnZjbVVnWVd4c0lHeGhlV1Z5SUdkcFpDQmpiM0p5WlhOd2IyNWthVzVuSUhSbGVIUjFjbVVnYVc1bWJ5d2dhVzVrWlhnZ2FYTWdaMmxrTENCbWIzSnRZWFFnYkdsclpYTWdKMXRuYVdRd1hUMTBaWGd0YVc1bWJ5eGJaMmxrTVYwOWRHVjRMV2x1Wm04c0lDNHVMaWRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkR1Y0UjNKcFpITWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQXZMeUJ6ZEc5eVpTQmhiR3dnZEdsc1pYTmxkQ0IwWlhoMGRYSmxMQ0JwYm1SbGVDQnBjeUIwYVd4bGMyVjBJR2x1WkdWNExDQm1iM0p0WVhRZ2JHbHJaWE1nSjFzd1hUMTBaWGgwZFhKbE1Dd2dXekZkUFhSbGVIUjFjbVV4TENBdUxpNG5YRzRnSUNBZ0lDQWdJSFJvYVhNdVgzUmxlSFIxY21WeklEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZEdsc1pYTmxkSE1nUFNCdWRXeHNPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMnhsWm5SRWIzZHVWRzlEWlc1MFpYSllJRDBnTUR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYkdWbWRFUnZkMjVVYjBObGJuUmxjbGtnUFNBd08xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyaGhjMVJwYkdWa1RtOWtaVWR5YVdRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYUdGelFXNXBSM0pwWkNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDloYm1sdFlYUnBiMjV6SUQwZ2JuVnNiRHRjYmx4dUlDQWdJQ0FnSUNBdkx5QnpkMmwwWTJnZ2IyWWdZM1ZzYkdsdVoxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5bGJtRmliR1ZEZFd4c2FXNW5JRDBnWTJNdWJXRmpjbTh1UlU1QlFreEZYMVJKVEVWRVRVRlFYME5WVEV4SlRrYzdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lGOW9ZWE5VYVd4bFpFNXZaR1VnS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYUdGelZHbHNaV1JPYjJSbFIzSnBaRHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdYMmhoYzBGdWFXMWhkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5b1lYTkJibWxIY21sa08xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1SUdWdVlXSnNaU0J2Y2lCa2FYTmhZbXhsSUdOMWJHeHBibWRjYmlBZ0lDQWdLaUFoSTNwb0lPVzhnT1dRcithSWx1V0ZzK21YcmVpamdlV0pxdU9BZ2x4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnWlc1aFlteGxRM1ZzYkdsdVoxeHVJQ0FnSUNBcUlFQndZWEpoYlNCMllXeDFaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHVnVZV0pzWlVOMWJHeHBibWNnS0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5bGJtRmliR1ZEZFd4c2FXNW5JQ0U5SUhaaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5bGJtRmliR1ZEZFd4c2FXNW5JRDBnZG1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlqZFd4c2FXNW5SR2x5ZEhrZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnUVdSa2N5QjFjMlZ5SjNNZ2JtOWtaU0JwYm5SdklHeGhlV1Z5TGx4dUlDQWdJQ0FxSUNFamVtZ2c1cmU3NVlxZzU1U281b2kzNklxQzU0SzU0NENDWEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0JoWkdSVmMyVnlUbTlrWlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3WTJNdVRtOWtaWDBnYm05a1pWeHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UwSnZiMnhsWVc1OVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWVdSa1ZYTmxjazV2WkdVZ0tHNXZaR1VwSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJR1JoZEdGRGIyMXdJRDBnYm05a1pTNW5aWFJEYjIxd2IyNWxiblFvVkdsc1pXUlZjMlZ5VG05a1pVUmhkR0VwTzF4dUlDQWdJQ0FnSUNCcFppQW9aR0YwWVVOdmJYQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmpMbmRoY200b1hDSkRRMVJwYkdWa1RHRjVaWEk2WVdSa1ZYTmxjazV2WkdVZ2JtOWtaU0JvWVhNZ1ltVmxiaUJoWkdSbFpGd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHUmhkR0ZEYjIxd0lEMGdibTlrWlM1aFpHUkRiMjF3YjI1bGJuUW9WR2xzWldSVmMyVnlUbTlrWlVSaGRHRXBPMXh1SUNBZ0lDQWdJQ0J1YjJSbExuQmhjbVZ1ZENBOUlIUm9hWE11Ym05a1pUdGNiaUFnSUNBZ0lDQWdibTlrWlM1ZmNtVnVaR1Z5Um14aFp5QjhQU0JTWlc1a1pYSkdiRzkzTGtaTVFVZGZRbEpGUVV0ZlJreFBWenRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkWE5sY2s1dlpHVk5ZWEJiYm05a1pTNWZhV1JkSUQwZ1pHRjBZVU52YlhBN1hHNWNiaUFnSUNBZ0lDQWdaR0YwWVVOdmJYQXVYM0p2ZHlBOUlDMHhPMXh1SUNBZ0lDQWdJQ0JrWVhSaFEyOXRjQzVmWTI5c0lEMGdMVEU3WEc0Z0lDQWdJQ0FnSUdSaGRHRkRiMjF3TGw5MGFXeGxaRXhoZVdWeUlEMGdkR2hwY3p0Y2JpQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDI1dlpHVk1iMk5oYkZCdmMxUnZUR0Y1WlhKUWIzTW9ibTlrWlN3Z1gzWmxZekpmZEdWdGNDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzQnZjMmwwYVc5dVZHOVNiM2REYjJ3b1gzWmxZekpmZEdWdGNDNTRMQ0JmZG1Wak1sOTBaVzF3TG5rc0lGOTBaVzF3VW05M1EyOXNLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZV1JrVlhObGNrNXZaR1ZVYjBkeWFXUW9aR0YwWVVOdmJYQXNJRjkwWlcxd1VtOTNRMjlzS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZFhCa1lYUmxRM1ZzYkdsdVowOW1abk5sZEVKNVZYTmxjazV2WkdVb2JtOWtaU2s3WEc0Z0lDQWdJQ0FnSUc1dlpHVXViMjRvWTJNdVRtOWtaUzVGZG1WdWRGUjVjR1V1VUU5VFNWUkpUMDVmUTBoQlRrZEZSQ3dnZEdocGN5NWZkWE5sY2s1dlpHVlFiM05EYUdGdVoyVXNJR1JoZEdGRGIyMXdLVHRjYmlBZ0lDQWdJQ0FnYm05a1pTNXZiaWhqWXk1T2IyUmxMa1YyWlc1MFZIbHdaUzVUU1ZwRlgwTklRVTVIUlVRc0lIUm9hWE11WDNWelpYSk9iMlJsVTJsNlpVTm9ZVzVuWlN3Z1pHRjBZVU52YlhBcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQlNaVzF2ZG1WeklIVnpaWEluY3lCdWIyUmxMbHh1SUNBZ0lDQXFJQ0VqZW1nZzU2ZTc2Wm1rNTVTbzVvaTM2SXFDNTRLNTQ0Q0NYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQnlaVzF2ZG1WVmMyVnlUbTlrWlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3WTJNdVRtOWtaWDBnYm05a1pWeHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UwSnZiMnhsWVc1OVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY21WdGIzWmxWWE5sY2s1dlpHVWdLRzV2WkdVcElIdGNiaUFnSUNBZ0lDQWdiR1YwSUdSaGRHRkRiMjF3SUQwZ2JtOWtaUzVuWlhSRGIyMXdiMjVsYm5Rb1ZHbHNaV1JWYzJWeVRtOWtaVVJoZEdFcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvSVdSaGRHRkRiMjF3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWXk1M1lYSnVLRndpUTBOVWFXeGxaRXhoZVdWeU9uSmxiVzkyWlZWelpYSk9iMlJsSUc1dlpHVWdhWE1nYm05MElHVjRhWE4wWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJRzV2WkdVdWIyWm1LR05qTGs1dlpHVXVSWFpsYm5SVWVYQmxMbEJQVTBsVVNVOU9YME5JUVU1SFJVUXNJSFJvYVhNdVgzVnpaWEpPYjJSbFVHOXpRMmhoYm1kbExDQmtZWFJoUTI5dGNDazdYRzRnSUNBZ0lDQWdJRzV2WkdVdWIyWm1LR05qTGs1dlpHVXVSWFpsYm5SVWVYQmxMbE5KV2tWZlEwaEJUa2RGUkN3Z2RHaHBjeTVmZFhObGNrNXZaR1ZUYVhwbFEyaGhibWRsTENCa1lYUmhRMjl0Y0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNKbGJXOTJaVlZ6WlhKT2IyUmxSbkp2YlVkeWFXUW9aR0YwWVVOdmJYQXBPMXh1SUNBZ0lDQWdJQ0JrWld4bGRHVWdkR2hwY3k1ZmRYTmxjazV2WkdWTllYQmJibTlrWlM1ZmFXUmRPMXh1SUNBZ0lDQWdJQ0J1YjJSbExsOXlaVzF2ZG1WRGIyMXdiMjVsYm5Rb1pHRjBZVU52YlhBcE8xeHVJQ0FnSUNBZ0lDQmtZWFJoUTI5dGNDNWtaWE4wY205NUtDazdYRzRnSUNBZ0lDQWdJRzV2WkdVdWNtVnRiM1psUm5KdmJWQmhjbVZ1ZENoMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnYm05a1pTNWZjbVZ1WkdWeVJteGhaeUFtUFNCK1VtVnVaR1Z5Um14dmR5NUdURUZIWDBKU1JVRkxYMFpNVDFjN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdUlFUmxjM1J5YjNrZ2RYTmxjaWR6SUc1dlpHVXVYRzRnSUNBZ0lDb2dJU042YUNEcGxJRG1yNEhubEtqbWlMZm9pb0xuZ3JuamdJSmNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lHUmxjM1J5YjNsVmMyVnlUbTlrWlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3WTJNdVRtOWtaWDBnYm05a1pWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdSbGMzUnliM2xWYzJWeVRtOWtaU0FvYm05a1pTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuSmxiVzkyWlZWelpYSk9iMlJsS0c1dlpHVXBPMXh1SUNBZ0lDQWdJQ0J1YjJSbExtUmxjM1J5YjNrb0tUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5OGdZV052Y21ScGJtY2diR0Y1WlhJZ1lXNWphRzl5SUhCdmFXNTBJSFJ2SUdOaGJHTjFiR0YwWlNCdWIyUmxJR3hoZVdWeUlIQnZjMXh1SUNBZ0lGOXViMlJsVEc5allXeFFiM05VYjB4aGVXVnlVRzl6SUNodWIyUmxVRzl6TENCdmRYUXBJSHRjYmlBZ0lDQWdJQ0FnYjNWMExuZ2dQU0J1YjJSbFVHOXpMbmdnS3lCMGFHbHpMbDlzWldaMFJHOTNibFJ2UTJWdWRHVnlXRHRjYmlBZ0lDQWdJQ0FnYjNWMExua2dQU0J1YjJSbFVHOXpMbmtnS3lCMGFHbHpMbDlzWldaMFJHOTNibFJ2UTJWdWRHVnlXVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdYMmRsZEU1dlpHVnpRbmxTYjNkRGIyd2dLSEp2ZHl3Z1kyOXNLU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQnliM2RFWVhSaElEMGdkR2hwY3k1ZmRYTmxjazV2WkdWSGNtbGtXM0p2ZDEwN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doY205M1JHRjBZU2tnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCeWIzZEVZWFJoVzJOdmJGMDdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lGOW5aWFJPYjJSbGMwTnZkVzUwUW5sU2IzY2dLSEp2ZHlrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnY205M1JHRjBZU0E5SUhSb2FYTXVYM1Z6WlhKT2IyUmxSM0pwWkZ0eWIzZGRPMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYSnZkMFJoZEdFcElISmxkSFZ5YmlBd08xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtOTNSR0YwWVM1amIzVnVkRHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdYM1Z3WkdGMFpVRnNiRlZ6WlhKT2IyUmxJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZFhObGNrNXZaR1ZIY21sa0lEMGdlMzA3WEc0Z0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdSaGRHRkpaQ0JwYmlCMGFHbHpMbDkxYzJWeVRtOWtaVTFoY0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHUmhkR0ZEYjIxd0lEMGdkR2hwY3k1ZmRYTmxjazV2WkdWTllYQmJaR0YwWVVsa1hUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMjV2WkdWTWIyTmhiRkJ2YzFSdlRHRjVaWEpRYjNNb1pHRjBZVU52YlhBdWJtOWtaU3dnWDNabFl6SmZkR1Z0Y0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXdiM05wZEdsdmJsUnZVbTkzUTI5c0tGOTJaV015WDNSbGJYQXVlQ3dnWDNabFl6SmZkR1Z0Y0M1NUxDQmZkR1Z0Y0ZKdmQwTnZiQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5aFpHUlZjMlZ5VG05a1pWUnZSM0pwWkNoa1lYUmhRMjl0Y0N3Z1gzUmxiWEJTYjNkRGIyd3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmZFhCa1lYUmxRM1ZzYkdsdVowOW1abk5sZEVKNVZYTmxjazV2WkdVb1pHRjBZVU52YlhBdWJtOWtaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWDNWd1pHRjBaVU4xYkd4cGJtZFBabVp6WlhSQ2VWVnpaWEpPYjJSbElDaHViMlJsS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOTBiM0JQWm1aelpYUWdQQ0J1YjJSbExtaGxhV2RvZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZkRzl3VDJabWMyVjBJRDBnYm05a1pTNW9aV2xuYUhRN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYMlJ2ZDI1UFptWnpaWFFnUENCdWIyUmxMbWhsYVdkb2RDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWkc5M2JrOW1abk5sZENBOUlHNXZaR1V1YUdWcFoyaDBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5c1pXWjBUMlptYzJWMElEd2dibTlrWlM1M2FXUjBhQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmJHVm1kRTltWm5ObGRDQTlJRzV2WkdVdWQybGtkR2c3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgzSnBaMmgwVDJabWMyVjBJRHdnYm05a1pTNTNhV1IwYUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjbWxuYUhSUFptWnpaWFFnUFNCdWIyUmxMbmRwWkhSb08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lGOTFjMlZ5VG05a1pWTnBlbVZEYUdGdVoyVWdLQ2tnZTF4dUlDQWdJQ0FnSUNCc1pYUWdaR0YwWVVOdmJYQWdQU0IwYUdsek8xeHVJQ0FnSUNBZ0lDQnNaWFFnYm05a1pTQTlJR1JoZEdGRGIyMXdMbTV2WkdVN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J6Wld4bUlEMGdaR0YwWVVOdmJYQXVYM1JwYkdWa1RHRjVaWEk3WEc0Z0lDQWdJQ0FnSUhObGJHWXVYM1Z3WkdGMFpVTjFiR3hwYm1kUFptWnpaWFJDZVZWelpYSk9iMlJsS0c1dlpHVXBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQmZkWE5sY2s1dlpHVlFiM05EYUdGdVoyVWdLQ2tnZTF4dUlDQWdJQ0FnSUNCc1pYUWdaR0YwWVVOdmJYQWdQU0IwYUdsek8xeHVJQ0FnSUNBZ0lDQnNaWFFnYm05a1pTQTlJR1JoZEdGRGIyMXdMbTV2WkdVN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J6Wld4bUlEMGdaR0YwWVVOdmJYQXVYM1JwYkdWa1RHRjVaWEk3WEc0Z0lDQWdJQ0FnSUhObGJHWXVYMjV2WkdWTWIyTmhiRkJ2YzFSdlRHRjVaWEpRYjNNb2JtOWtaU3dnWDNabFl6SmZkR1Z0Y0NrN1hHNGdJQ0FnSUNBZ0lITmxiR1l1WDNCdmMybDBhVzl1Vkc5U2IzZERiMndvWDNabFl6SmZkR1Z0Y0M1NExDQmZkbVZqTWw5MFpXMXdMbmtzSUY5MFpXMXdVbTkzUTI5c0tUdGNiaUFnSUNBZ0lDQWdMeThnZFhObGNuTWdjRzl6SUc1dmRDQmphR0Z1WjJWY2JpQWdJQ0FnSUNBZ2FXWWdLRjkwWlcxd1VtOTNRMjlzTG5KdmR5QTlQVDBnWkdGMFlVTnZiWEF1WDNKdmR5QW1KaUJmZEdWdGNGSnZkME52YkM1amIyd2dQVDA5SUdSaGRHRkRiMjF3TGw5amIyd3BJSEpsZEhWeWJqdGNibHh1SUNBZ0lDQWdJQ0J6Wld4bUxsOXlaVzF2ZG1WVmMyVnlUbTlrWlVaeWIyMUhjbWxrS0dSaGRHRkRiMjF3S1R0Y2JpQWdJQ0FnSUNBZ2MyVnNaaTVmWVdSa1ZYTmxjazV2WkdWVWIwZHlhV1FvWkdGMFlVTnZiWEFzSUY5MFpXMXdVbTkzUTI5c0tUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ1gzSmxiVzkyWlZWelpYSk9iMlJsUm5KdmJVZHlhV1FnS0dSaGRHRkRiMjF3S1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J5YjNjZ1BTQmtZWFJoUTI5dGNDNWZjbTkzTzF4dUlDQWdJQ0FnSUNCc1pYUWdZMjlzSUQwZ1pHRjBZVU52YlhBdVgyTnZiRHRjYmlBZ0lDQWdJQ0FnYkdWMElHbHVaR1Y0SUQwZ1pHRjBZVU52YlhBdVgybHVaR1Y0TzF4dVhHNGdJQ0FnSUNBZ0lHeGxkQ0J5YjNkRVlYUmhJRDBnZEdocGN5NWZkWE5sY2s1dlpHVkhjbWxrVzNKdmQxMDdYRzRnSUNBZ0lDQWdJR3hsZENCamIyeEVZWFJoSUQwZ2NtOTNSR0YwWVNBbUppQnliM2RFWVhSaFcyTnZiRjA3WEc0Z0lDQWdJQ0FnSUdsbUlDaGpiMnhFWVhSaEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeWIzZEVZWFJoTG1OdmRXNTBJQzB0TzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjlzUkdGMFlTNWpiM1Z1ZENBdExUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJFUmhkR0V1YkdsemRGdHBibVJsZUYwZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dOdmJFUmhkR0V1WTI5MWJuUWdQRDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiRVJoZEdFdWJHbHpkQzVzWlc1bmRHZ2dQU0F3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJFUmhkR0V1WTI5MWJuUWdQU0F3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ1pHRjBZVU52YlhBdVgzSnZkeUE5SUMweE8xeHVJQ0FnSUNBZ0lDQmtZWFJoUTI5dGNDNWZZMjlzSUQwZ0xURTdYRzRnSUNBZ0lDQWdJR1JoZEdGRGIyMXdMbDlwYm1SbGVDQTlJQzB4TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDkxYzJWeVRtOWtaVVJwY25SNUlEMGdkSEoxWlR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWDJselNXNU1ZWGxsY2lBb2NtOTNMQ0JqYjJ3cElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISnZkeUErUFNBd0lDWW1JR052YkNBK1BTQXdJQ1ltSUhKdmR5QThQU0IwYUdsekxsOXlhV2RvZEZSdmNDNXliM2NnSmlZZ1kyOXNJRHc5SUhSb2FYTXVYM0pwWjJoMFZHOXdMbU52YkR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWDJGa1pGVnpaWEpPYjJSbFZHOUhjbWxrSUNoa1lYUmhRMjl0Y0N3Z2RHVnRjRkp2ZDBOdmJDa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2NtOTNJRDBnZEdWdGNGSnZkME52YkM1eWIzYzdYRzRnSUNBZ0lDQWdJR3hsZENCamIyd2dQU0IwWlcxd1VtOTNRMjlzTG1OdmJEdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYMmx6U1c1TVlYbGxjaWh5YjNjc0lHTnZiQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCeWIzZEVZWFJoSUQwZ2RHaHBjeTVmZFhObGNrNXZaR1ZIY21sa1czSnZkMTBnUFNCMGFHbHpMbDkxYzJWeVRtOWtaVWR5YVdSYmNtOTNYU0I4ZkNCN1kyOTFiblFnT2lBd2ZUdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmpiMnhFWVhSaElEMGdjbTkzUkdGMFlWdGpiMnhkSUQwZ2NtOTNSR0YwWVZ0amIyeGRJSHg4SUh0amIzVnVkQ0E2SURBc0lHeHBjM1E2SUZ0ZGZUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSaGRHRkRiMjF3TGw5eWIzY2dQU0J5YjNjN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaFEyOXRjQzVmWTI5c0lEMGdZMjlzTzF4dUlDQWdJQ0FnSUNBZ0lDQWdaR0YwWVVOdmJYQXVYMmx1WkdWNElEMGdZMjlzUkdGMFlTNXNhWE4wTG14bGJtZDBhRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISnZkMFJoZEdFdVkyOTFiblFyS3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052YkVSaGRHRXVZMjkxYm5Rckt6dGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJFUmhkR0V1YkdsemRDNXdkWE5vS0dSaGRHRkRiMjF3S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JoZEdGRGIyMXdMbDl5YjNjZ1BTQXRNVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0ZEYjIxd0xsOWpiMndnUFNBdE1UdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSaGRHRkRiMjF3TGw5cGJtUmxlQ0E5SUMweE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzVnpaWEpPYjJSbFJHbHlkSGtnUFNCMGNuVmxPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQmZhWE5WYzJWeVRtOWtaVVJwY25SNUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzVnpaWEpPYjJSbFJHbHlkSGs3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJRjl6WlhSVmMyVnlUbTlrWlVScGNuUjVJQ2gyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOTFjMlZ5VG05a1pVUnBjblI1SUQwZ2RtRnNkV1U3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJRzl1Ulc1aFlteGxJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYzNWd1pYSW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXViMlJsTG05dUtHTmpMazV2WkdVdVJYWmxiblJVZVhCbExrRk9RMGhQVWw5RFNFRk9SMFZFTENCMGFHbHpMbDl6ZVc1alFXNWphRzl5VUc5cGJuUXNJSFJvYVhNcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5aFkzUnBkbUYwWlUxaGRHVnlhV0ZzS0NrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUc5dVJHbHpZV0pzWlNBb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzTjFjR1Z5S0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Ym05a1pTNXZabVlvWTJNdVRtOWtaUzVGZG1WdWRGUjVjR1V1UVU1RFNFOVNYME5JUVU1SFJVUXNJSFJvYVhNdVgzTjVibU5CYm1Ob2IzSlFiMmx1ZEN3Z2RHaHBjeWs3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJRjl6ZVc1alFXNWphRzl5VUc5cGJuUWdLQ2tnZTF4dUlDQWdJQ0FnSUNCc1pYUWdibTlrWlNBOUlIUm9hWE11Ym05a1pUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmJHVm1kRVJ2ZDI1VWIwTmxiblJsY2xnZ1BTQnViMlJsTG5kcFpIUm9JQ29nYm05a1pTNWhibU5vYjNKWUlDb2dibTlrWlM1elkyRnNaVmc3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMnhsWm5SRWIzZHVWRzlEWlc1MFpYSlpJRDBnYm05a1pTNW9aV2xuYUhRZ0tpQnViMlJsTG1GdVkyaHZjbGtnS2lCdWIyUmxMbk5qWVd4bFdUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlkzVnNiR2x1WjBScGNuUjVJRDBnZEhKMVpUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2IyNUVaWE4wY205NUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjM1Z3WlhJb0tUdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYMkoxWm1abGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWW5WbVptVnlMbVJsYzNSeWIza29LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJKMVptWmxjaUE5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjbVZ1WkdWeVJHRjBZVXhwYzNRZ1BTQnVkV3hzTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRWRsZEhNZ2RHaGxJR3hoZVdWeUlHNWhiV1V1WEc0Z0lDQWdJQ29nSVNONmFDRG9qcmZsajVibHNZTG5tb1Rsa0kzbnA3RGpnSUpjYmlBZ0lDQWdLaUJBYldWMGFHOWtJR2RsZEV4aGVXVnlUbUZ0WlZ4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTFOMGNtbHVaMzFjYmlBZ0lDQWdLaUJBWlhoaGJYQnNaVnh1SUNBZ0lDQXFJR3hsZENCc1lYbGxjazVoYldVZ1BTQjBhV3hsWkV4aGVXVnlMbWRsZEV4aGVXVnlUbUZ0WlNncE8xeHVJQ0FnSUNBcUlHTmpMbXh2Wnloc1lYbGxjazVoYldVcE8xeHVJQ0FnSUNBcUwxeHVJQ0FnSUdkbGRFeGhlV1Z5VG1GdFpTQW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXNZWGxsY2s1aGJXVTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1UyVjBJSFJvWlNCc1lYbGxjaUJ1WVcxbExseHVJQ0FnSUNBcUlDRWplbWdnNks2KzU3MnU1YkdDNTVxRTVaQ041NmV3WEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0JUWlhSTVlYbGxjazVoYldWY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnYkdGNVpYSk9ZVzFsWEc0Z0lDQWdJQ29nUUdWNFlXMXdiR1ZjYmlBZ0lDQWdLaUIwYVd4bFpFeGhlV1Z5TG5ObGRFeGhlV1Z5VG1GdFpTaGNJazVsZHlCTVlYbGxjbHdpS1R0Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6WlhSTVlYbGxjazVoYldVZ0tHeGhlV1Z5VG1GdFpTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXNZWGxsY2s1aGJXVWdQU0JzWVhsbGNrNWhiV1U3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdVbVYwZFhKdUlIUm9aU0IyWVd4MVpTQm1iM0lnZEdobElITndaV05wWm1saklIQnliM0JsY25SNUlHNWhiV1V1WEc0Z0lDQWdJQ29nSVNONmFDRG9qcmZsajVibWpJZmxycHJsc1o3bWdLZmxrSTNubW9UbGdMempnSUpjYmlBZ0lDQWdLaUJBYldWMGFHOWtJR2RsZEZCeWIzQmxjblI1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJSEJ5YjNCbGNuUjVUbUZ0WlZ4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZXlwOVhHNGdJQ0FnSUNvZ1FHVjRZVzF3YkdWY2JpQWdJQ0FnS2lCc1pYUWdjSEp2Y0dWeWRIa2dQU0IwYVd4bFpFeGhlV1Z5TG1kbGRGQnliM0JsY25SNUtGd2lhVzVtYjF3aUtUdGNiaUFnSUNBZ0tpQmpZeTVzYjJjb2NISnZjR1Z5ZEhrcE8xeHVJQ0FnSUNBcUwxeHVJQ0FnSUdkbGRGQnliM0JsY25SNUlDaHdjbTl3WlhKMGVVNWhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0J5YjNCbGNuUnBaWE5iY0hKdmNHVnlkSGxPWVcxbFhUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCU1pYUjFjbTV6SUhSb1pTQndiM05wZEdsdmJpQnBiaUJ3YVhobGJITWdiMllnWVNCbmFYWmxiaUIwYVd4bElHTnZiM0prYVc1aGRHVXVYRzRnSUNBZ0lDb2dJU042YUNEb2pyZmxqNWJtaklmbHJwb2dkR2xzWlNEbm1vVGxnNC9udEtEbG5aRG1vSWZqZ0lKY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUdkbGRGQnZjMmwwYVc5dVFYUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UxWmxZeko4VG5WdFltVnlmU0J3YjNNZ2NHOXphWFJwYjI0Z2IzSWdlRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQmJlVjFjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRXWldNeWZWeHVJQ0FnSUNBcUlFQmxlR0Z0Y0d4bFhHNGdJQ0FnSUNvZ2JHVjBJSEJ2Y3lBOUlIUnBiR1ZrVEdGNVpYSXVaMlYwVUc5emFYUnBiMjVCZENoall5NTJNaWd3TENBd0tTazdYRzRnSUNBZ0lDb2dZMk11Ykc5bktGd2lVRzl6T2lCY0lpQXJJSEJ2Y3lrN1hHNGdJQ0FnSUNvZ2JHVjBJSEJ2Y3lBOUlIUnBiR1ZrVEdGNVpYSXVaMlYwVUc5emFYUnBiMjVCZENnd0xDQXdLVHRjYmlBZ0lDQWdLaUJqWXk1c2IyY29YQ0pRYjNNNklGd2lJQ3NnY0c5ektUdGNiaUFnSUNBZ0tpOWNiaUFnSUNCblpYUlFiM05wZEdsdmJrRjBJQ2h3YjNNc0lIa3BJSHRjYmlBZ0lDQWdJQ0FnYkdWMElIZzdYRzRnSUNBZ0lDQWdJR2xtSUNoNUlDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSGdnUFNCTllYUm9MbVpzYjI5eUtIQnZjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjVJRDBnVFdGMGFDNW1iRzl2Y2loNUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhnZ1BTQk5ZWFJvTG1ac2IyOXlLSEJ2Y3k1NEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhrZ1BTQk5ZWFJvTG1ac2IyOXlLSEJ2Y3k1NUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnYkdWMElISmxkRHRjYmlBZ0lDQWdJQ0FnYzNkcGRHTm9JQ2gwYUdsekxsOXNZWGxsY2s5eWFXVnVkR0YwYVc5dUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJR05qTGxScGJHVmtUV0Z3TGs5eWFXVnVkR0YwYVc5dUxrOVNWRWhQT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRDQTlJSFJvYVhNdVgzQnZjMmwwYVc5dVJtOXlUM0owYUc5QmRDaDRMQ0I1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnWTJNdVZHbHNaV1JOWVhBdVQzSnBaVzUwWVhScGIyNHVTVk5QT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRDQTlJSFJvYVhNdVgzQnZjMmwwYVc5dVJtOXlTWE52UVhRb2VDd2dlU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJR05qTGxScGJHVmtUV0Z3TGs5eWFXVnVkR0YwYVc5dUxraEZXRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhRZ1BTQjBhR2x6TGw5d2IzTnBkR2x2YmtadmNraGxlRUYwS0hnc0lIa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWFE3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJRjlwYzBsdWRtRnNhV1JRYjNOcGRHbHZiaUFvZUN3Z2VTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2VDQW1KaUIwZVhCbGIyWWdlQ0E5UFQwZ0oyOWlhbVZqZENjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQndiM01nUFNCNE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZVNBOUlIQnZjeTU1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdlQ0E5SUhCdmN5NTRPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUI0SUQ0OUlIUm9hWE11WDJ4aGVXVnlVMmw2WlM1M2FXUjBhQ0I4ZkNCNUlENDlJSFJvYVhNdVgyeGhlV1Z5VTJsNlpTNW9aV2xuYUhRZ2ZId2dlQ0E4SURBZ2ZId2dlU0E4SURBN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUY5d2IzTnBkR2x2YmtadmNrbHpiMEYwSUNoNExDQjVLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJqWXk1Mk1paGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMjFoY0ZScGJHVlRhWHBsTG5kcFpIUm9JQzhnTWlBcUlDZ2dkR2hwY3k1ZmJHRjVaWEpUYVhwbExuZHBaSFJvSUNzZ2VDQXRJSGtnTFNBeEtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMjFoY0ZScGJHVlRhWHBsTG1obGFXZG9kQ0F2SURJZ0tpQW9LQ0IwYUdsekxsOXNZWGxsY2xOcGVtVXVhR1ZwWjJoMElDb2dNaUF0SUhnZ0xTQjVLU0F0SURJcFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lGOXdiM05wZEdsdmJrWnZjazl5ZEdodlFYUWdLSGdzSUhrcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHTmpMbll5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdlQ0FxSUhSb2FYTXVYMjFoY0ZScGJHVlRhWHBsTG5kcFpIUm9MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tIUm9hWE11WDJ4aGVXVnlVMmw2WlM1b1pXbG5hSFFnTFNCNUlDMGdNU2tnS2lCMGFHbHpMbDl0WVhCVWFXeGxVMmw2WlM1b1pXbG5hSFJjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWDNCdmMybDBhVzl1Um05eVNHVjRRWFFnS0dOdmJDd2djbTkzS1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0IwYVd4bFYybGtkR2dnUFNCMGFHbHpMbDl0WVhCVWFXeGxVMmw2WlM1M2FXUjBhRHRjYmlBZ0lDQWdJQ0FnYkdWMElIUnBiR1ZJWldsbmFIUWdQU0IwYUdsekxsOXRZWEJVYVd4bFUybDZaUzVvWldsbmFIUTdYRzRnSUNBZ0lDQWdJR3hsZENCeWIzZHpJRDBnZEdocGN5NWZiR0Y1WlhKVGFYcGxMbWhsYVdkb2REdGNibHh1SUNBZ0lDQWdJQ0JzWlhRZ2FXNWtaWGdnUFNCTllYUm9MbVpzYjI5eUtHTnZiQ2tnS3lCTllYUm9MbVpzYjI5eUtISnZkeWtnS2lCMGFHbHpMbDlzWVhsbGNsTnBlbVV1ZDJsa2RHZzdYRzRnSUNBZ0lDQWdJR3hsZENCbmFXUWdQU0IwYUdsekxsOTBhV3hsYzF0cGJtUmxlRjA3WEc0Z0lDQWdJQ0FnSUd4bGRDQjBhV3hsYzJWMElEMGdkR2hwY3k1ZmRHVjRSM0pwWkhOYloybGtYUzUwYVd4bGMyVjBPMXh1SUNBZ0lDQWdJQ0JzWlhRZ2IyWm1jMlYwSUQwZ2RHbHNaWE5sZEM1MGFXeGxUMlptYzJWME8xeHVYRzRnSUNBZ0lDQWdJR3hsZENCalpXNTBaWEpYYVdSMGFDQTlJSFJvYVhNdWJtOWtaUzUzYVdSMGFDQXZJREk3WEc0Z0lDQWdJQ0FnSUd4bGRDQmpaVzUwWlhKSVpXbG5hSFFnUFNCMGFHbHpMbTV2WkdVdWFHVnBaMmgwSUM4Z01qdGNiaUFnSUNBZ0lDQWdiR1YwSUc5a1pGOWxkbVZ1SUQwZ0tIUm9hWE11WDNOMFlXZG5aWEpKYm1SbGVDQTlQVDBnWTJNdVZHbHNaV1JOWVhBdVUzUmhaMmRsY2tsdVpHVjRMbE5VUVVkSFJWSkpUa1JGV0Y5UFJFUXBJRDhnTVNBNklDMHhPMXh1SUNBZ0lDQWdJQ0JzWlhRZ2VDQTlJREFzSUhrZ1BTQXdPMXh1SUNBZ0lDQWdJQ0JzWlhRZ1pHbG1abGdnUFNBd08xeHVJQ0FnSUNBZ0lDQnNaWFFnWkdsbVpsZ3hJRDBnTUR0Y2JpQWdJQ0FnSUNBZ2JHVjBJR1JwWm1aWklEMGdNRHRjYmlBZ0lDQWdJQ0FnYkdWMElHUnBabVpaTVNBOUlEQTdYRzRnSUNBZ0lDQWdJSE4zYVhSamFDQW9kR2hwY3k1ZmMzUmhaMmRsY2tGNGFYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnWTJNdVZHbHNaV1JOWVhBdVUzUmhaMmRsY2tGNGFYTXVVMVJCUjBkRlVrRllTVk5mV1RwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2FXWm1XQ0E5SURBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHbG1abGd4SUQwZ0tIUm9hWE11WDNOMFlXZG5aWEpKYm1SbGVDQTlQVDBnWTJNdVZHbHNaV1JOWVhBdVUzUmhaMmRsY2tsdVpHVjRMbE5VUVVkSFJWSkpUa1JGV0Y5UFJFUXBJRDhnTUNBNklIUnBiR1ZYYVdSMGFDQXZJREk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISnZkeUFsSURJZ1BUMDlJREVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR2xtWmxnZ1BTQjBhV3hsVjJsa2RHZ2dMeUF5SUNvZ2IyUmtYMlYyWlc0N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZ2dQU0JqYjJ3Z0tpQjBhV3hsVjJsa2RHZ2dLeUJrYVdabVdDQXJJR1JwWm1aWU1TQXJJRzltWm5ObGRDNTRJQzBnWTJWdWRHVnlWMmxrZEdnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VTQTlJQ2h5YjNkeklDMGdjbTkzSUMwZ01Ta2dLaUFvZEdsc1pVaGxhV2RvZENBdElDaDBhV3hsU0dWcFoyaDBJQzBnZEdocGN5NWZhR1Y0VTJsa1pVeGxibWQwYUNrZ0x5QXlLU0F0SUc5bVpuTmxkQzU1SUMwZ1kyVnVkR1Z5U0dWcFoyaDBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQmpZeTVVYVd4bFpFMWhjQzVUZEdGbloyVnlRWGhwY3k1VFZFRkhSMFZTUVZoSlUxOVlPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JwWm1aWklEMGdNRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYVdabVdURWdQU0FvZEdocGN5NWZjM1JoWjJkbGNrbHVaR1Y0SUQwOVBTQmpZeTVVYVd4bFpFMWhjQzVUZEdGbloyVnlTVzVrWlhndVUxUkJSMGRGVWtsT1JFVllYMDlFUkNrZ1B5QjBhV3hsU0dWcFoyaDBJQzhnTWlBNklEQTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dOdmJDQWxJRElnUFQwOUlERXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHbG1abGtnUFNCMGFXeGxTR1ZwWjJoMElDOGdNaUFxSUMxdlpHUmZaWFpsYmp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VDQTlJR052YkNBcUlDaDBhV3hsVjJsa2RHZ2dMU0FvZEdsc1pWZHBaSFJvSUMwZ2RHaHBjeTVmYUdWNFUybGtaVXhsYm1kMGFDa2dMeUF5S1NBcklHOW1abk5sZEM1NElDMGdZMlZ1ZEdWeVYybGtkR2c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZVNBOUlDaHliM2R6SUMwZ2NtOTNJQzBnTVNrZ0tpQjBhV3hsU0dWcFoyaDBJQ3NnWkdsbVpsa2dLeUJrYVdabVdURWdMU0J2Wm1aelpYUXVlU0F0SUdObGJuUmxja2hsYVdkb2REdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyTXVkaklvZUN3Z2VTazdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc1Y2JpQWdJQ0FnS2lCVFpYUnpJSFJvWlNCMGFXeGxJR2RwWkNBb1oybGtJRDBnZEdsc1pTQm5iRzlpWVd3Z2FXUXBJR0YwSUdFZ1oybDJaVzRnZEdsc1pTQmpiMjl5WkdsdVlYUmxManhpY2lBdlBseHVJQ0FnSUNBcUlGUm9aU0JVYVd4bElFZEpSQ0JqWVc0Z1ltVWdiMkowWVdsdVpXUWdZbmtnZFhOcGJtY2dkR2hsSUcxbGRHaHZaQ0JjSW5ScGJHVkhTVVJCZEZ3aUlHOXlJR0o1SUhWemFXNW5JSFJvWlNCVVRWZ2daV1JwZEc5eUlDNGdWR2xzWlhObGRDQk5aM0lnS3pFdVBHSnlJQzgrWEc0Z0lDQWdJQ29nU1dZZ1lTQjBhV3hsSUdseklHRnNjbVZoWkhrZ2NHeGhZMlZrSUdGMElIUm9ZWFFnY0c5emFYUnBiMjRzSUhSb1pXNGdhWFFnZDJsc2JDQmlaU0J5WlcxdmRtVmtMbHh1SUNBZ0lDQXFJQ0VqZW1oY2JpQWdJQ0FnS2lEb3JyN252YTdudTVubHJwcmxuWkRtb0lmbm1vUWdkR2xzWlNEbm1vUWdaMmxrSUNobmFXUWdQU0IwYVd4bElPV0ZxT1d4Z0NCcFpDbnZ2SXhjYmlBZ0lDQWdLaUIwYVd4bElPZWFoQ0JIU1VRZzVZK3Y1THVsNUwyLzU1U281cGE1NXJPVklPS0FuSFJwYkdWSFNVUkJkT0tBblNEbW5hWG9qcmZsdnBmamdJSThZbklnTHo1Y2JpQWdJQ0FnS2lEbHBvTG1ucHprdUlEa3VLb2dkR2xzWlNEbHQ3TG51NC9tbEw3bG5LanBncVBrdUtya3ZZM252YTd2dkl6cGdxUGt1WWpscm9QbHNJYm9vcXZsaUtEcG1hVGpnSUpjYmlBZ0lDQWdLaUJBYldWMGFHOWtJSE5sZEZScGJHVkhTVVJCZEZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JuYVdSY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFabFl6SjhUblZ0WW1WeWZTQndiM05QY2xnZ2NHOXphWFJwYjI0Z2IzSWdlRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQm1iR0ZuYzA5eVdTQm1iR0ZuY3lCdmNpQjVYRzRnSUNBZ0lDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlGdG1iR0ZuYzExY2JpQWdJQ0FnS2lCQVpYaGhiWEJzWlZ4dUlDQWdJQ0FxSUhScGJHVmtUR0Y1WlhJdWMyVjBWR2xzWlVkSlJFRjBLREV3TURFc0lERXdMQ0F4TUN3Z01TbGNiaUFnSUNBZ0tpOWNiaUFnSUNCelpYUlVhV3hsUjBsRVFYUWdLR2RwWkN3Z2NHOXpUM0pZTENCbWJHRm5jMDl5V1N3Z1pteGhaM01wSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSEJ2YzA5eVdDQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0pqWXk1VWFXeGxaRXhoZVdWeUxuTmxkRlJwYkdWSFNVUkJkQ2dwT2lCd2IzTWdjMmh2ZFd4a0lHSmxJRzV2YmkxdWRXeHNYQ0lwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHeGxkQ0J3YjNNN1hHNGdJQ0FnSUNBZ0lHbG1JQ2htYkdGbmN5QWhQVDBnZFc1a1pXWnBibVZrSUh4OElDRW9jRzl6VDNKWUlHbHVjM1JoYm1ObGIyWWdZMk11Vm1Wak1pa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR1p2ZFhJZ2NHRnlZVzFsZEdWeWN5QnZjaUJ3YjNOUGNsZ2dhWE1nYm05MElHRWdWbVZqTWlCdlltcGxZM1JjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnZjeUE5SUdOakxuWXlLSEJ2YzA5eVdDd2dabXhoWjNOUGNsa3BPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NHOXpJRDBnY0c5elQzSllPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pteGhaM01nUFNCbWJHRm5jMDl5V1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSEJ2Y3k1NElEMGdUV0YwYUM1bWJHOXZjaWh3YjNNdWVDazdYRzRnSUNBZ0lDQWdJSEJ2Y3k1NUlEMGdUV0YwYUM1bWJHOXZjaWh3YjNNdWVTazdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDlwYzBsdWRtRnNhV1JRYjNOcGRHbHZiaWh3YjNNcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKall5NVVhV3hsWkV4aGVXVnlMbk5sZEZScGJHVkhTVVJCZENncE9pQnBiblpoYkdsa0lIQnZjMmwwYVc5dVhDSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1ZmRHbHNaWE1nZkh3Z0lYUm9hWE11WDNScGJHVnpaWFJ6SUh4OElIUm9hWE11WDNScGJHVnpaWFJ6TG14bGJtZDBhQ0E5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCall5NXNiMmRKUkNnM01qTTRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvWjJsa0lDRTlQU0F3SUNZbUlHZHBaQ0E4SUhSb2FYTXVYM1JwYkdWelpYUnpXekJkTG1acGNuTjBSMmxrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWXk1c2IyZEpSQ2czTWpNNUxDQm5hV1FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnWm14aFozTWdQU0JtYkdGbmN5QjhmQ0F3TzF4dUlDQWdJQ0FnSUNCc1pYUWdZM1Z5Y21WdWRFWnNZV2R6SUQwZ2RHaHBjeTVuWlhSVWFXeGxSbXhoWjNOQmRDaHdiM01wTzF4dUlDQWdJQ0FnSUNCc1pYUWdZM1Z5Y21WdWRFZEpSQ0E5SUhSb2FYTXVaMlYwVkdsc1pVZEpSRUYwS0hCdmN5azdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHTjFjbkpsYm5SSFNVUWdQVDA5SUdkcFpDQW1KaUJqZFhKeVpXNTBSbXhoWjNNZ1BUMDlJR1pzWVdkektTQnlaWFIxY200N1hHNWNiaUFnSUNBZ0lDQWdiR1YwSUdkcFpFRnVaRVpzWVdkeklEMGdLR2RwWkNCOElHWnNZV2R6S1NBK1BqNGdNRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkWEJrWVhSbFZHbHNaVVp2Y2tkSlJDaG5hV1JCYm1SR2JHRm5jeXdnY0c5ektUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ1gzVndaR0YwWlZScGJHVkdiM0pIU1VRZ0tHZHBaQ3dnY0c5ektTQjdYRzRnSUNBZ0lDQWdJR2xtSUNobmFXUWdJVDA5SURBZ0ppWWdJWFJvYVhNdVgzUmxlRWR5YVdSelcyZHBaRjBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUd4bGRDQnBaSGdnUFNBd0lId2dLSEJ2Y3k1NElDc2djRzl6TG5rZ0tpQjBhR2x6TGw5c1lYbGxjbE5wZW1VdWQybGtkR2dwTzF4dUlDQWdJQ0FnSUNCcFppQW9hV1I0SUR3Z2RHaHBjeTVmZEdsc1pYTXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDkwYVd4bGMxdHBaSGhkSUQwZ1oybGtPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWTNWc2JHbHVaMFJwY25SNUlEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1WEc0Z0lDQWdJQ29nVW1WMGRYSnVjeUIwYUdVZ2RHbHNaU0JuYVdRZ1lYUWdZU0JuYVhabGJpQjBhV3hsSUdOdmIzSmthVzVoZEdVdUlEeGljaUF2UGx4dUlDQWdJQ0FxSUdsbUlHbDBJSEpsZEhWeWJuTWdNQ3dnYVhRZ2JXVmhibk1nZEdoaGRDQjBhR1VnZEdsc1pTQnBjeUJsYlhCMGVTNGdQR0p5SUM4K1hHNGdJQ0FnSUNvZ0lTTjZhRnh1SUNBZ0lDQXFJT21BbXVpL2grZTdtZVd1bXVlYWhDQjBhV3hsSU9XZGtPYWdoK09BZ1dac1lXZHo3N3lJNVkrdjZZQ0o3N3lKNkwrVTVadWVJSFJwYkdVZzU1cUVJRWRKUkM0Z1BHSnlJQzgrWEc0Z0lDQWdJQ29nNWFhQzVwNmM1YTZENkwrVTVadWVJRER2dkl6bGlKbm9vYWpucExyb3I2VWdkR2xzWlNEa3VMcm5xYnJqZ0lJOFluSWdMejVjYmlBZ0lDQWdLaUJBYldWMGFHOWtJR2RsZEZScGJHVkhTVVJCZEZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Vm1Wak1ueE9kVzFpWlhKOUlIQnZjeUJ2Y2lCNFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUZ0NVhWeHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UwNTFiV0psY24xY2JpQWdJQ0FnS2lCQVpYaGhiWEJzWlZ4dUlDQWdJQ0FxSUd4bGRDQjBhV3hsUjJsa0lEMGdkR2xzWldSTVlYbGxjaTVuWlhSVWFXeGxSMGxFUVhRb01Dd2dNQ2s3WEc0Z0lDQWdJQ292WEc0Z0lDQWdaMlYwVkdsc1pVZEpSRUYwSUNod2IzTXNJSGtwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSEJ2Y3lBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSmpZeTVVYVd4bFpFeGhlV1Z5TG1kbGRGUnBiR1ZIU1VSQmRDZ3BPaUJ3YjNNZ2MyaHZkV3hrSUdKbElHNXZiaTF1ZFd4c1hDSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUd4bGRDQjRJRDBnY0c5ek8xeHVJQ0FnSUNBZ0lDQnBaaUFvZVNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjRJRDBnY0c5ekxuZzdYRzRnSUNBZ0lDQWdJQ0FnSUNCNUlEMGdjRzl6TG5rN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYMmx6U1c1MllXeHBaRkJ2YzJsMGFXOXVLSGdzSUhrcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKall5NVVhV3hsWkV4aGVXVnlMbWRsZEZScGJHVkhTVVJCZENncE9pQnBiblpoYkdsa0lIQnZjMmwwYVc5dVhDSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1ZmRHbHNaWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05qTG14dlowbEVLRGN5TXpjcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JzWlhRZ2FXNWtaWGdnUFNCTllYUm9MbVpzYjI5eUtIZ3BJQ3NnVFdGMGFDNW1iRzl2Y2loNUtTQXFJSFJvYVhNdVgyeGhlV1Z5VTJsNlpTNTNhV1IwYUR0Y2JpQWdJQ0FnSUNBZ0x5OGdRbWwwY3lCdmJpQjBhR1VnWm1GeUlHVnVaQ0J2WmlCMGFHVWdNekl0WW1sMElHZHNiMkpoYkNCMGFXeGxJRWxFSUdGeVpTQjFjMlZrSUdadmNpQjBhV3hsSUdac1lXZHpYRzRnSUNBZ0lDQWdJR3hsZENCMGFXeGxJRDBnZEdocGN5NWZkR2xzWlhOYmFXNWtaWGhkTzF4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBb2RHbHNaU0FtSUdOakxsUnBiR1ZrVFdGd0xsUnBiR1ZHYkdGbkxrWk1TVkJRUlVSZlRVRlRTeWtnUGo0K0lEQTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHZGxkRlJwYkdWR2JHRm5jMEYwSUNod2IzTXNJSGtwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0Z3YjNNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSWxScGJHVmtUR0Y1WlhJdVoyVjBWR2xzWlVac1lXZHpRWFE2SUhCdmN5QnphRzkxYkdRZ1ltVWdibTl1TFc1MWJHeGNJaWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLSGtnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NHOXpJRDBnWTJNdWRqSW9jRzl6TENCNUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmYVhOSmJuWmhiR2xrVUc5emFYUnBiMjRvY0c5ektTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVZHbHNaV1JNWVhsbGNpNW5aWFJVYVd4bFJteGhaM05CZERvZ2FXNTJZV3hwWkNCd2IzTnBkR2x2Ymx3aUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11WDNScGJHVnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZeTVzYjJkSlJDZzNNalF3S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdiR1YwSUdsa2VDQTlJRTFoZEdndVpteHZiM0lvY0c5ekxuZ3BJQ3NnVFdGMGFDNW1iRzl2Y2lod2IzTXVlU2tnS2lCMGFHbHpMbDlzWVhsbGNsTnBlbVV1ZDJsa2RHZzdYRzRnSUNBZ0lDQWdJQzh2SUVKcGRITWdiMjRnZEdobElHWmhjaUJsYm1RZ2IyWWdkR2hsSURNeUxXSnBkQ0JuYkc5aVlXd2dkR2xzWlNCSlJDQmhjbVVnZFhObFpDQm1iM0lnZEdsc1pTQm1iR0ZuYzF4dUlDQWdJQ0FnSUNCc1pYUWdkR2xzWlNBOUlIUm9hWE11WDNScGJHVnpXMmxrZUYwN1hHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDaDBhV3hsSUNZZ1kyTXVWR2xzWldSTllYQXVWR2xzWlVac1lXY3VSa3hKVUZCRlJGOUJURXdwSUQ0K1BpQXdPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQmZjMlYwUTNWc2JHbHVaMFJwY25SNUlDaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5amRXeHNhVzVuUkdseWRIa2dQU0IyWVd4MVpUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ1gybHpRM1ZzYkdsdVowUnBjblI1SUNncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJOMWJHeHBibWRFYVhKMGVUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5OGdKM2dzSUhrbklHbHpJSFJvWlNCd2IzTnBkR2x2YmlCdlppQjJhV1YzVUc5eWRDd2dkMmhwWTJnbmN5QmhibU5vYjNJZ2NHOXBiblFnYVhNZ1lYUWdkR2hsSUdObGJuUmxjaUJ2WmlCeVpXTjBMbHh1SUNBZ0lDOHZJQ2QzYVdSMGFDd2dhR1ZwWjJoMEp5QnBjeUIwYUdVZ2MybDZaU0J2WmlCMmFXVjNVRzl5ZEM1Y2JpQWdJQ0JmZFhCa1lYUmxWbWxsZDFCdmNuUWdLSGdzSUhrc0lIZHBaSFJvTENCb1pXbG5hSFFwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgzWnBaWGRRYjNKMExuZHBaSFJvSUQwOVBTQjNhV1IwYUNBbUppQmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM1pwWlhkUWIzSjBMbWhsYVdkb2RDQTlQVDBnYUdWcFoyaDBJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5MmFXVjNVRzl5ZEM1NElEMDlQU0I0SUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTJhV1YzVUc5eWRDNTVJRDA5UFNCNUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZG1sbGQxQnZjblF1ZUNBOUlIZzdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzWnBaWGRRYjNKMExua2dQU0I1TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDkyYVdWM1VHOXlkQzUzYVdSMGFDQTlJSGRwWkhSb08xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5MmFXVjNVRzl5ZEM1b1pXbG5hSFFnUFNCb1pXbG5hSFE3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdhV1lnYldGd0ozTWdkSGx3WlNCcGN5QnBjMjhzSUhKbGMyVnlkbVVnWW05MGRHOXRJR3hwYm1VZ2FYTWdNaUIwYnlCaGRtOXBaQ0J6YUc5M0lHVnRjSFI1SUdkeWFXUWdZbVZqWVhWelpTQnZaaUJwYzI4Z1ozSnBaQ0JoY21sMGFHMWxkR2xqWEc0Z0lDQWdJQ0FnSUd4bGRDQnlaWE5sY25abFRHbHVaU0E5SURFN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOXNZWGxsY2s5eWFXVnVkR0YwYVc5dUlEMDlQU0JqWXk1VWFXeGxaRTFoY0M1UGNtbGxiblJoZEdsdmJpNUpVMDhwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzJWeWRtVk1hVzVsSUQwZ01qdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUd4bGRDQjJjSGdnUFNCMGFHbHpMbDkyYVdWM1VHOXlkQzU0SUMwZ2RHaHBjeTVmYjJabWMyVjBMbmdnS3lCMGFHbHpMbDlzWldaMFJHOTNibFJ2UTJWdWRHVnlXRHRjYmlBZ0lDQWdJQ0FnYkdWMElIWndlU0E5SUhSb2FYTXVYM1pwWlhkUWIzSjBMbmtnTFNCMGFHbHpMbDl2Wm1aelpYUXVlU0FySUhSb2FYTXVYMnhsWm5SRWIzZHVWRzlEWlc1MFpYSlpPMXh1WEc0Z0lDQWdJQ0FnSUd4bGRDQnNaV1owUkc5M2JsZ2dQU0IyY0hnZ0xTQjBhR2x6TGw5c1pXWjBUMlptYzJWME8xeHVJQ0FnSUNBZ0lDQnNaWFFnYkdWbWRFUnZkMjVaSUQwZ2RuQjVJQzBnZEdocGN5NWZaRzkzYms5bVpuTmxkRHRjYmlBZ0lDQWdJQ0FnYkdWMElISnBaMmgwVkc5d1dDQTlJSFp3ZUNBcklIZHBaSFJvSUNzZ2RHaHBjeTVmY21sbmFIUlBabVp6WlhRN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J5YVdkb2RGUnZjRmtnUFNCMmNIa2dLeUJvWldsbmFIUWdLeUIwYUdsekxsOTBiM0JQWm1aelpYUTdYRzVjYmlBZ0lDQWdJQ0FnYkdWMElHeGxablJFYjNkdUlEMGdkR2hwY3k1ZlkzVnNiR2x1WjFKbFkzUXViR1ZtZEVSdmQyNDdYRzRnSUNBZ0lDQWdJR3hsZENCeWFXZG9kRlJ2Y0NBOUlIUm9hWE11WDJOMWJHeHBibWRTWldOMExuSnBaMmgwVkc5d08xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoc1pXWjBSRzkzYmxnZ1BDQXdLU0JzWldaMFJHOTNibGdnUFNBd08xeHVJQ0FnSUNBZ0lDQnBaaUFvYkdWbWRFUnZkMjVaSUR3Z01Da2diR1ZtZEVSdmQyNVpJRDBnTUR0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJqWVd4aklHeGxablFnWkc5M2JseHVJQ0FnSUNBZ0lDQjBhR2x6TGw5d2IzTnBkR2x2YmxSdlVtOTNRMjlzS0d4bFpuUkViM2R1V0N3Z2JHVm1kRVJ2ZDI1WkxDQmZkR1Z0Y0ZKdmQwTnZiQ2s3WEc0Z0lDQWdJQ0FnSUM4dklHMWhhMlVnY21GdVoyVWdiR0Z5WjJWY2JpQWdJQ0FnSUNBZ1gzUmxiWEJTYjNkRGIyd3VjbTkzTFQxeVpYTmxjblpsVEdsdVpUdGNiaUFnSUNBZ0lDQWdYM1JsYlhCU2IzZERiMnd1WTI5c0xUMXlaWE5sY25abFRHbHVaVHRjYmlBZ0lDQWdJQ0FnTHk4Z2FXNXpkWEpsSUd4bFpuUWdaRzkzYmlCeWIzY2dZMjlzSUdkeVpXRjBaWElnZEdoaGJpQXdYRzRnSUNBZ0lDQWdJRjkwWlcxd1VtOTNRMjlzTG5KdmR5QTlJRjkwWlcxd1VtOTNRMjlzTG5KdmR5QStJREFnUHlCZmRHVnRjRkp2ZDBOdmJDNXliM2NnT2lBd08xeHVJQ0FnSUNBZ0lDQmZkR1Z0Y0ZKdmQwTnZiQzVqYjJ3Z1BTQmZkR1Z0Y0ZKdmQwTnZiQzVqYjJ3Z1BpQXdJRDhnWDNSbGJYQlNiM2REYjJ3dVkyOXNJRG9nTURzZ0lDQWdJQ0FnSUZ4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hmZEdWdGNGSnZkME52YkM1eWIzY2dJVDA5SUd4bFpuUkViM2R1TG5KdmR5QjhmQ0JmZEdWdGNGSnZkME52YkM1amIyd2dJVDA5SUd4bFpuUkViM2R1TG1OdmJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVm1kRVJ2ZDI0dWNtOTNJRDBnWDNSbGJYQlNiM2REYjJ3dWNtOTNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVm1kRVJ2ZDI0dVkyOXNJRDBnWDNSbGJYQlNiM2REYjJ3dVkyOXNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWTNWc2JHbHVaMFJwY25SNUlEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQzh2SUhOb2IzY2dibTkwYUdsdVoxeHVJQ0FnSUNBZ0lDQnBaaUFvY21sbmFIUlViM0JZSUR3Z01DQjhmQ0J5YVdkb2RGUnZjRmtnUENBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCZmRHVnRjRkp2ZDBOdmJDNXliM2NnUFNBdE1UdGNiaUFnSUNBZ0lDQWdJQ0FnSUY5MFpXMXdVbTkzUTI5c0xtTnZiQ0E5SUMweE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1kyRnNZeUJ5YVdkb2RDQjBiM0JjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNCdmMybDBhVzl1Vkc5U2IzZERiMndvY21sbmFIUlViM0JZTENCeWFXZG9kRlJ2Y0Zrc0lGOTBaVzF3VW05M1EyOXNLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRzFoYTJVZ2NtRnVaMlVnYkdGeVoyVmNiaUFnSUNBZ0lDQWdJQ0FnSUY5MFpXMXdVbTkzUTI5c0xuSnZkeXNyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JsYlhCU2IzZERiMnd1WTI5c0t5czdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBdkx5QmhkbTlwWkNCeVlXNW5aU0J2ZFhRZ2IyWWdiV0Y0SUhKbFkzUmNiaUFnSUNBZ0lDQWdhV1lnS0Y5MFpXMXdVbTkzUTI5c0xuSnZkeUErSUhSb2FYTXVYM0pwWjJoMFZHOXdMbkp2ZHlrZ1gzUmxiWEJTYjNkRGIyd3VjbTkzSUQwZ2RHaHBjeTVmY21sbmFIUlViM0F1Y205M08xeHVJQ0FnSUNBZ0lDQnBaaUFvWDNSbGJYQlNiM2REYjJ3dVkyOXNJRDRnZEdocGN5NWZjbWxuYUhSVWIzQXVZMjlzS1NCZmRHVnRjRkp2ZDBOdmJDNWpiMndnUFNCMGFHbHpMbDl5YVdkb2RGUnZjQzVqYjJ3N1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0Y5MFpXMXdVbTkzUTI5c0xuSnZkeUFoUFQwZ2NtbG5hSFJVYjNBdWNtOTNJSHg4SUY5MFpXMXdVbTkzUTI5c0xtTnZiQ0FoUFQwZ2NtbG5hSFJVYjNBdVkyOXNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlhV2RvZEZSdmNDNXliM2NnUFNCZmRHVnRjRkp2ZDBOdmJDNXliM2M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlhV2RvZEZSdmNDNWpiMndnUFNCZmRHVnRjRkp2ZDBOdmJDNWpiMnc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5amRXeHNhVzVuUkdseWRIa2dQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHZJSFJvWlNCeVpYTjFiSFFnYldGNUlHNXZkQ0J3Y21WamFYTmxMQ0JpZFhRZ2FYUWdaRzl6WlNkMElHMWhkSFJsY2l3Z2FYUWdhblZ6ZENCMWMyVnpJSFJ2SUdKbElHZHZkQ0J5WVc1blpWeHVJQ0FnSUY5d2IzTnBkR2x2YmxSdlVtOTNRMjlzSUNoNExDQjVMQ0J5WlhOMWJIUXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdWR2xzWldSTllYQWdQU0JqWXk1VWFXeGxaRTFoY0R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnVDNKcFpXNTBZWFJwYjI0Z1BTQlVhV3hsWkUxaGNDNVBjbWxsYm5SaGRHbHZianRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdVM1JoWjJkbGNrRjRhWE1nUFNCVWFXeGxaRTFoY0M1VGRHRm5aMlZ5UVhocGN6dGNibHh1SUNBZ0lDQWdJQ0JzWlhRZ2JXRndkSGNnUFNCMGFHbHpMbDl0WVhCVWFXeGxVMmw2WlM1M2FXUjBhQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHMWhjSFJvSUQwZ2RHaHBjeTVmYldGd1ZHbHNaVk5wZW1VdWFHVnBaMmgwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiV0Z3ZEhjeUlEMGdiV0Z3ZEhjZ0tpQXdMalVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnRZWEIwYURJZ1BTQnRZWEIwYUNBcUlEQXVOVHRjYmlBZ0lDQWdJQ0FnYkdWMElISnZkeUE5SURBc0lHTnZiQ0E5SURBc0lHUnBabVpZTWlBOUlEQXNJR1JwWm1aWk1pQTlJREFzSUdGNGFYTWdQU0IwYUdsekxsOXpkR0ZuWjJWeVFYaHBjenRjYmlBZ0lDQWdJQ0FnYkdWMElHTnZiSE1nUFNCMGFHbHpMbDlzWVhsbGNsTnBlbVV1ZDJsa2RHZzdYRzVjYmlBZ0lDQWdJQ0FnYzNkcGRHTm9JQ2gwYUdsekxsOXNZWGxsY2s5eWFXVnVkR0YwYVc5dUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnNaV1owSUhSdmNDQjBieUJ5YVdkb2RDQmtiM2R0WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUU5eWFXVnVkR0YwYVc5dUxrOVNWRWhQT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJDQTlJRTFoZEdndVpteHZiM0lvZUNBdklHMWhjSFIzS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeWIzY2dQU0JOWVhSb0xtWnNiMjl5S0hrZ0x5QnRZWEIwYUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJ5YVdkb2RDQjBiM0FnZEc4Z2JHVm1kQ0JrYjNkdVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCcGMyOGdZMkZ1SUdKbElIUnlaV0YwSUdGeklITndaV05wWVd3Z2FHVjRJSGRvYjNObElHaGxlQ0J6YVdSbElHeGxibWQwYUNCcGN5QXdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRTl5YVdWdWRHRjBhVzl1TGtsVFR6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMndnUFNCTllYUm9MbVpzYjI5eUtIZ2dMeUJ0WVhCMGR6SXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEp2ZHlBOUlFMWhkR2d1Wm14dmIzSW9lU0F2SUcxaGNIUm9NaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnNaV1owSUhSdmNDQjBieUJ5YVdkb2RDQmtiM2R0WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUU5eWFXVnVkR0YwYVc5dUxraEZXRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1lYaHBjeUE5UFQwZ1UzUmhaMmRsY2tGNGFYTXVVMVJCUjBkRlVrRllTVk5mV1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5YjNjZ1BTQk5ZWFJvTG1ac2IyOXlLSGtnTHlBb2JXRndkR2dnTFNCMGFHbHpMbDlrYVdabVdURXBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHbG1abGd5SUQwZ2NtOTNJQ1VnTWlBOVBUMGdNU0EvSUcxaGNIUjNNaUFxSUhSb2FYTXVYMjlrWkY5bGRtVnVJRG9nTUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjlzSUQwZ1RXRjBhQzVtYkc5dmNpZ29lQ0F0SUdScFptWllNaWtnTHlCdFlYQjBkeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXNJRDBnVFdGMGFDNW1iRzl2Y2loNElDOGdLRzFoY0hSM0lDMGdkR2hwY3k1ZlpHbG1abGd4S1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JwWm1aWk1pQTlJR052YkNBbElESWdQVDA5SURFZ1B5QnRZWEIwYURJZ0tpQXRkR2hwY3k1ZmIyUmtYMlYyWlc0Z09pQXdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeWIzY2dQU0JOWVhSb0xtWnNiMjl5S0NoNUlDMGdaR2xtWmxreUtTQXZJRzFoY0hSb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVZ6ZFd4MExuSnZkeUE5SUhKdmR6dGNiaUFnSUNBZ0lDQWdjbVZ6ZFd4MExtTnZiQ0E5SUdOdmJEdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWDNWd1pHRjBaVU4xYkd4cGJtY2dLQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9RME5mUlVSSlZFOVNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1WdVlXSnNaVU4xYkd4cGJtY29abUZzYzJVcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFJvYVhNdVgyVnVZV0pzWlVOMWJHeHBibWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJtOWtaUzVmZFhCa1lYUmxWMjl5YkdSTllYUnlhWGdvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzFoZERRdWFXNTJaWEowS0Y5dFlYUTBYM1JsYlhBc0lIUm9hWE11Ym05a1pTNWZkMjl5YkdSTllYUnlhWGdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhKbFkzUWdQU0JqWXk1MmFYTnBZbXhsVW1WamREdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmpZVzFsY21FZ1BTQmpZeTVEWVcxbGNtRXVabWx1WkVOaGJXVnlZU2gwYUdsekxtNXZaR1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dOaGJXVnlZU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5MlpXTXlYM1JsYlhBdWVDQTlJREE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNabFl6SmZkR1Z0Y0M1NUlEMGdNRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmZG1Wak1sOTBaVzF3TWk1NElEMGdYM1psWXpKZmRHVnRjQzU0SUNzZ2NtVmpkQzUzYVdSMGFEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZkbVZqTWw5MFpXMXdNaTU1SUQwZ1gzWmxZekpmZEdWdGNDNTVJQ3NnY21WamRDNW9aV2xuYUhRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnRaWEpoTG1kbGRGTmpjbVZsYmxSdlYyOXliR1JRYjJsdWRDaGZkbVZqTWw5MFpXMXdMQ0JmZG1Wak1sOTBaVzF3S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallXMWxjbUV1WjJWMFUyTnlaV1Z1Vkc5WGIzSnNaRkJ2YVc1MEtGOTJaV015WDNSbGJYQXlMQ0JmZG1Wak1sOTBaVzF3TWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtVmpNaTUwY21GdWMyWnZjbTFOWVhRMEtGOTJaV015WDNSbGJYQXNJRjkyWldNeVgzUmxiWEFzSUY5dFlYUTBYM1JsYlhBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmxZekl1ZEhKaGJuTm1iM0p0VFdGME5DaGZkbVZqTWw5MFpXMXdNaXdnWDNabFl6SmZkR1Z0Y0RJc0lGOXRZWFEwWDNSbGJYQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzVndaR0YwWlZacFpYZFFiM0owS0Y5MlpXTXlYM1JsYlhBdWVDd2dYM1psWXpKZmRHVnRjQzU1TENCZmRtVmpNbDkwWlcxd01pNTRJQzBnWDNabFl6SmZkR1Z0Y0M1NExDQmZkbVZqTWw5MFpXMXdNaTU1SUMwZ1gzWmxZekpmZEdWdGNDNTVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdUlFeGhlV1Z5SUc5eWFXVnVkR0YwYVc5dUxDQjNhR2xqYUNCcGN5QjBhR1VnYzJGdFpTQmhjeUIwYUdVZ2JXRndJRzl5YVdWdWRHRjBhVzl1TGx4dUlDQWdJQ0FxSUNFamVtZ2c2STYzNVkrV0lFeGhlV1Z5SU9hV3VlV1FrU2psa0l6bG5MRGxtNzdtbHJubGtKRXA0NENDWEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0JuWlhSTVlYbGxjazl5YVdWdWRHRjBhVzl1WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3VG5WdFltVnlmVnh1SUNBZ0lDQXFJRUJsZUdGdGNHeGxYRzRnSUNBZ0lDb2diR1YwSUc5eWFXVnVkR0YwYVc5dUlEMGdkR2xzWldSTVlYbGxjaTVuWlhSTVlYbGxjazl5YVdWdWRHRjBhVzl1S0NrN1hHNGdJQ0FnSUNvZ1kyTXViRzluS0Z3aVRHRjVaWElnVDNKcFpXNTBZWFJwYjI0NklGd2lJQ3NnYjNKcFpXNTBZWFJwYjI0cE8xeHVJQ0FnSUNBcUwxeHVJQ0FnSUdkbGRFeGhlV1Z5VDNKcFpXNTBZWFJwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJHRjVaWEpQY21sbGJuUmhkR2x2Ymp0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJ3Y205d1pYSjBhV1Z6SUdaeWIyMGdkR2hsSUd4aGVXVnlMaUJVYUdWNUlHTmhiaUJpWlNCaFpHUmxaQ0IxYzJsdVp5QlVhV3hsWkM1Y2JpQWdJQ0FnS2lBaEkzcG9JT2lPdCtXUGxpQnNZWGxsY2lEbm1vVGxzWjdtZ0tmdnZJemxqNi9rdTZYa3ZiL25sS2dnVkdsc1pXUWc1N3lXNkw2UjVabW81cmU3NVlxZzViR2U1b0NuNDRDQ1hHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCblpYUlFjbTl3WlhKMGFXVnpYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdRWEp5WVhsOVhHNGdJQ0FnSUNvZ1FHVjRZVzF3YkdWY2JpQWdJQ0FnS2lCc1pYUWdjSEp2Y0dWeWRHbGxjeUE5SUhScGJHVmtUR0Y1WlhJdVoyVjBVSEp2Y0dWeWRHbGxjeWdwTzF4dUlDQWdJQ0FxSUdOakxteHZaeWhjSWxCeWIzQmxjblJwWlhNNklGd2lJQ3NnY0hKdmNHVnlkR2xsY3lrN1hHNGdJQ0FnSUNvdlhHNGdJQ0FnWjJWMFVISnZjR1Z5ZEdsbGN5QW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXdjbTl3WlhKMGFXVnpPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQmZkWEJrWVhSbFZtVnlkR2xqWlhNZ0tDa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQlVhV3hsWkUxaGNDQTlJR05qTGxScGJHVmtUV0Z3TzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JVYVd4bFJteGhaeUE5SUZScGJHVmtUV0Z3TGxScGJHVkdiR0ZuTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JHVEVsUVVFVkVYMDFCVTBzZ1BTQlVhV3hsUm14aFp5NUdURWxRVUVWRVgwMUJVMHM3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRk4wWVdkblpYSkJlR2x6SUQwZ1ZHbHNaV1JOWVhBdVUzUmhaMmRsY2tGNGFYTTdYRzRnSUNBZ0lDQWdJR052Ym5OMElFOXlhV1Z1ZEdGMGFXOXVJRDBnVkdsc1pXUk5ZWEF1VDNKcFpXNTBZWFJwYjI0N1hHNWNiaUFnSUNBZ0lDQWdiR1YwSUhabGNuUnBZMlZ6SUQwZ2RHaHBjeTVmZG1WeWRHbGpaWE03WEc0Z0lDQWdJQ0FnSUhabGNuUnBZMlZ6TG14bGJtZDBhQ0E5SURBN1hHNWNiaUFnSUNBZ0lDQWdiR1YwSUd4aGVXVnlUM0pwWlc1MFlYUnBiMjRnUFNCMGFHbHpMbDlzWVhsbGNrOXlhV1Z1ZEdGMGFXOXVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHbHNaWE1nUFNCMGFHbHpMbDkwYVd4bGN6dGNibHh1SUNBZ0lDQWdJQ0JwWmlBb0lYUnBiR1Z6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCc1pYUWdjbWxuYUhSVWIzQWdQU0IwYUdsekxsOXlhV2RvZEZSdmNEdGNiaUFnSUNBZ0lDQWdjbWxuYUhSVWIzQXVjbTkzSUQwZ0xURTdYRzRnSUNBZ0lDQWdJSEpwWjJoMFZHOXdMbU52YkNBOUlDMHhPMXh1WEc0Z0lDQWdJQ0FnSUd4bGRDQnRZWEIwZHlBOUlIUm9hWE11WDIxaGNGUnBiR1ZUYVhwbExuZHBaSFJvTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiV0Z3ZEdnZ1BTQjBhR2x6TGw5dFlYQlVhV3hsVTJsNlpTNW9aV2xuYUhRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0WVhCMGR6SWdQU0J0WVhCMGR5QXFJREF1TlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzFoY0hSb01pQTlJRzFoY0hSb0lDb2dNQzQxTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbTkzY3lBOUlIUm9hWE11WDJ4aGVXVnlVMmw2WlM1b1pXbG5hSFFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMnh6SUQwZ2RHaHBjeTVmYkdGNVpYSlRhWHBsTG5kcFpIUm9MRnh1SUNBZ0lDQWdJQ0FnSUNBZ1ozSnBaSE1nUFNCMGFHbHpMbDkwWlhoSGNtbGtjenRjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUd4bGRDQmpiMnhQWm1aelpYUWdQU0F3TENCbmFXUXNJR2R5YVdRc0lHeGxablFzSUdKdmRIUnZiU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHRjRhWE1zSUdScFptWllNU3dnWkdsbVpsa3hMQ0J2WkdSZlpYWmxiaXdnWkdsbVpsZ3lMQ0JrYVdabVdUSTdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHeGhlV1Z5VDNKcFpXNTBZWFJwYjI0Z1BUMDlJRTl5YVdWdWRHRjBhVzl1TGtoRldDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lYaHBjeUE5SUhSb2FYTXVYM04wWVdkblpYSkJlR2x6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdaR2xtWmxneElEMGdkR2hwY3k1ZlpHbG1abGd4TzF4dUlDQWdJQ0FnSUNBZ0lDQWdaR2xtWmxreElEMGdkR2hwY3k1ZlpHbG1abGt4TzF4dUlDQWdJQ0FnSUNBZ0lDQWdiMlJrWDJWMlpXNGdQU0IwYUdsekxsOXZaR1JmWlhabGJqdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUd4bGRDQmpkV3hzYVc1blEyOXNJRDBnTUN3Z1kzVnNiR2x1WjFKdmR5QTlJREE3WEc0Z0lDQWdJQ0FnSUd4bGRDQjBhV3hsVDJabWMyVjBJRDBnYm5Wc2JDd2daM0pwWkVkSlJDQTlJREE3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZEc5d1QyWm1jMlYwSUQwZ01EdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlpHOTNiazltWm5ObGRDQTlJREE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMnhsWm5SUFptWnpaWFFnUFNBd08xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5eWFXZG9kRTltWm5ObGRDQTlJREE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMmhoYzBGdWFVZHlhV1FnUFNCbVlXeHpaVHRjYmx4dUlDQWdJQ0FnSUNBdkx5Qm5jbWxrSUdKdmNtUmxjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2RHOXdRbTl5WkdWeUlEMGdNQ3dnWkc5M2JrSnZjbVJsY2lBOUlEQXNJR3hsWm5SQ2IzSmtaWElnUFNBd0xDQnlhV2RvZEVKdmNtUmxjaUE5SURBN1hHNWNiaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdjbTkzSUQwZ01Ec2djbTkzSUR3Z2NtOTNjenNnS3l0eWIzY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHTnZiQ0E5SURBN0lHTnZiQ0E4SUdOdmJITTdJQ3NyWTI5c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdsdVpHVjRJRDBnWTI5c1QyWm1jMlYwSUNzZ1kyOXNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2RwWkNBOUlIUnBiR1Z6VzJsdVpHVjRYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JuY21sa1IwbEVJRDBnS0NobmFXUWdKaUJHVEVsUVVFVkVYMDFCVTBzcElENCtQaUF3S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbmNtbGtJRDBnWjNKcFpITmJaM0pwWkVkSlJGMDdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCcFppQm9ZWE1nWVc1cGJXRjBhVzl1TENCbmNtbGtJRzExYzNRZ1ltVWdkWEJrWVhSbFpDQndaWElnWm5KaGJXVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZZVzVwYldGMGFXOXVjMXRuY21sa1IwbEVYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5b1lYTkJibWxIY21sa0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdkeWFXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR2x1ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM2RwZEdOb0lDaHNZWGxsY2s5eWFXVnVkR0YwYVc5dUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHeGxablFnZEc5d0lIUnZJSEpwWjJoMElHUnZkMjFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JQY21sbGJuUmhkR2x2Ymk1UFVsUklUenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR04xYkd4cGJtZERiMndnUFNCamIydzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpkV3hzYVc1blVtOTNJRDBnY205M2N5QXRJSEp2ZHlBdElERTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaV1owSUQwZ1kzVnNiR2x1WjBOdmJDQXFJRzFoY0hSM08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ltOTBkRzl0SUQwZ1kzVnNiR2x1WjFKdmR5QXFJRzFoY0hSb08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJSEpwWjJoMElIUnZjQ0IwYnlCc1pXWjBJR1J2ZDI1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCUGNtbGxiblJoZEdsdmJpNUpVMDg2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCcFppQnViM1FnWTI5dWMybGtaWElnWVdKdmRYUWdZMjlzTENCMGFHVnVJR3hsWm5RZ2FYTWdKM2N2TWlBcUlDaHliM2R6SUMwZ2NtOTNJQzBnTVNrblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QnBaaUJqYjI1emFXUmxjaUJoWW05MWRDQmpiMndnZEdobGJpQnNaV1owSUcxMWMzUWdZV1JrSUNkM0x6SWdLaUJqYjJ3blhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QnpieUJzWldaMElHbHpJQ2QzTHpJZ0tpQW9jbTkzY3lBdElISnZkeUF0SURFcElDc2dkeTh5SUNvZ1kyOXNKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnWTI5dFltbHVaU0JsZUhCeVpYTnphVzl1SUdseklDZDNMeklnS2lBb2NtOTNjeUF0SUhKdmR5QXJJR052YkNBdE1Ta25YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpkV3hzYVc1blEyOXNJRDBnY205M2N5QXJJR052YkNBdElISnZkeUF0SURFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QnBaaUJ1YjNRZ1kyOXVjMmxrWlhJZ1lXSnZkWFFnY205M0xDQjBhR1Z1SUdKdmRIUnZiU0JwY3lBbmFDOHlJQ29nS0dOdmJITWdMU0JqYjJ3Z0xURXBKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnYVdZZ1kyOXVjMmxrWlhJZ1lXSnZkWFFnY205M0lIUm9aVzRnWW05MGRHOXRJRzExYzNRZ1lXUmtJQ2RvTHpJZ0tpQW9jbTkzY3lBdElISnZkeUF0SURFcEoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjMjhnWW05MGRHOXRJR2x6SUNkb0x6SWdLaUFvWTI5c2N5QXRJR052YkNBdE1Ta2dLeUJvTHpJZ0tpQW9jbTkzY3lBdElISnZkeUF0SURFcEoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdZMjl0WW1sdVpTQmxlSEJ5WlhOemFXOXViaUJwY3lBbmFDOHlJQ29nS0hKdmQzTWdLeUJqYjJ4eklDMGdZMjlzSUMwZ2NtOTNJQzBnTWlrblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamRXeHNhVzVuVW05M0lEMGdjbTkzY3lBcklHTnZiSE1nTFNCamIyd2dMU0J5YjNjZ0xTQXlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1ZtZENBOUlHMWhjSFIzTWlBcUlHTjFiR3hwYm1kRGIydzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmliM1IwYjIwZ1BTQnRZWEIwYURJZ0tpQmpkV3hzYVc1blVtOTNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUd4bFpuUWdkRzl3SUhSdklISnBaMmgwSUdSdmQyMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQlBjbWxsYm5SaGRHbHZiaTVJUlZnNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2FXWm1XRElnUFNBb1lYaHBjeUE5UFQwZ1UzUmhaMmRsY2tGNGFYTXVVMVJCUjBkRlVrRllTVk5mV1NBbUppQnliM2NnSlNBeUlEMDlQU0F4S1NBL0lHMWhjSFIzTWlBcUlHOWtaRjlsZG1WdUlEb2dNRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JwWm1aWk1pQTlJQ2hoZUdseklEMDlQU0JUZEdGbloyVnlRWGhwY3k1VFZFRkhSMFZTUVZoSlUxOVlJQ1ltSUdOdmJDQWxJRElnUFQwOUlERXBJRDhnYldGd2RHZ3lJQ29nTFc5a1pGOWxkbVZ1SURvZ01EdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1ZtZENBOUlHTnZiQ0FxSUNodFlYQjBkeUF0SUdScFptWllNU2tnS3lCa2FXWm1XREk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpYjNSMGIyMGdQU0FvY205M2N5QXRJSEp2ZHlBdElERXBJQ29nS0cxaGNIUm9JQzBnWkdsbVpsa3hLU0FySUdScFptWlpNanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR04xYkd4cGJtZERiMndnUFNCamIydzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpkV3hzYVc1blVtOTNJRDBnY205M2N5QXRJSEp2ZHlBdElERTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY205M1JHRjBZU0E5SUhabGNuUnBZMlZ6VzJOMWJHeHBibWRTYjNkZElEMGdkbVZ5ZEdsalpYTmJZM1ZzYkdsdVoxSnZkMTBnZkh3Z2UyMXBia052YkRvd0xDQnRZWGhEYjJ3Nk1IMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdOdmJFUmhkR0VnUFNCeWIzZEVZWFJoVzJOMWJHeHBibWREYjJ4ZElEMGdjbTkzUkdGMFlWdGpkV3hzYVc1blEyOXNYU0I4ZkNCN2ZUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJ5WldOdmNtUWdaV0ZqYUNCeWIzY2djbUZ1WjJVc0lHbDBJSGRwYkd3Z1ptRnpkR1Z5SUhkb1pXNGdZM1ZzYkdsdVp5Qm5jbWxrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISnZkMFJoZEdFdWJXbHVRMjlzSUQ0Z1kzVnNiR2x1WjBOdmJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeWIzZEVZWFJoTG0xcGJrTnZiQ0E5SUdOMWJHeHBibWREYjJ3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hKdmQwUmhkR0V1YldGNFEyOXNJRHdnWTNWc2JHbHVaME52YkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5YjNkRVlYUmhMbTFoZUVOdmJDQTlJR04xYkd4cGJtZERiMnc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjbVZqYjNKa0lHMWhlQ0J5WldOMExDQjNhR1Z1SUhacFpYZFFiM0owSUdseklHSnBaMmRsY2lCMGFHRnVJR3hoZVdWeUxDQmpZVzRnYldGclpTQnBkQ0J6YldGc2JHVnlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hKcFoyaDBWRzl3TG5KdmR5QThJR04xYkd4cGJtZFNiM2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbWxuYUhSVWIzQXVjbTkzSUQwZ1kzVnNiR2x1WjFKdmR6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NtbG5hSFJVYjNBdVkyOXNJRHdnWTNWc2JHbHVaME52YkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5YVdkb2RGUnZjQzVqYjJ3Z1BTQmpkV3hzYVc1blEyOXNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGOXZabVp6WlhRZ2FYTWdkMmh2YkdVZ2JHRjVaWElnYjJabWMyVjBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnZEdsc1pVOW1abk5sZENCcGN5QjBhV3hsYzJWMElHOW1abk5sZENCM2FHbGphQ0JwY3lCeVpXeGhkR1ZrSUhSdklHVmhZMmdnWjNKcFpGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJSFJwYkdWUFptWnpaWFFnWTI5dmNtUnBibUYwWlNCemVYTjBaVzBuY3lCNUlHRjRhWE1nYVhNZ2IzQndiM05wZEdVZ2QybDBhQ0JsYm1kcGJtVW5jeUI1SUdGNGFYTXVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2xzWlU5bVpuTmxkQ0E5SUdkeWFXUXVkR2xzWlhObGRDNTBhV3hsVDJabWMyVjBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsWm5RZ0t6MGdkR2hwY3k1ZmIyWm1jMlYwTG5nZ0t5QjBhV3hsVDJabWMyVjBMbmc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW05MGRHOXRJQ3M5SUhSb2FYTXVYMjltWm5ObGRDNTVJQzBnZEdsc1pVOW1abk5sZEM1NU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnZjRUp2Y21SbGNpQTlJQzEwYVd4bFQyWm1jMlYwTG5rZ0t5Qm5jbWxrTG5ScGJHVnpaWFF1WDNScGJHVlRhWHBsTG1obGFXZG9kQ0F0SUcxaGNIUm9PMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ2Y0VKdmNtUmxjaUE5SUhSdmNFSnZjbVJsY2lBOElEQWdQeUF3SURvZ2RHOXdRbTl5WkdWeU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnZkMjVDYjNKa1pYSWdQU0IwYVd4bFQyWm1jMlYwTG5rZ1BDQXdJRDhnTUNBNklIUnBiR1ZQWm1aelpYUXVlVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWldaMFFtOXlaR1Z5SUQwZ0xYUnBiR1ZQWm1aelpYUXVlQ0E4SURBZ1B5QXdJRG9nTFhScGJHVlBabVp6WlhRdWVEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlhV2RvZEVKdmNtUmxjaUE5SUhScGJHVlBabVp6WlhRdWVDQXJJR2R5YVdRdWRHbHNaWE5sZEM1ZmRHbHNaVk5wZW1VdWQybGtkR2dnTFNCdFlYQjBkenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5YVdkb2RFSnZjbVJsY2lBOUlISnBaMmgwUW05eVpHVnlJRHdnTUNBL0lEQWdPaUJ5YVdkb2RFSnZjbVJsY2p0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOXlhV2RvZEU5bVpuTmxkQ0E4SUd4bFpuUkNiM0prWlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjbWxuYUhSUFptWnpaWFFnUFNCc1pXWjBRbTl5WkdWeU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDlzWldaMFQyWm1jMlYwSUR3Z2NtbG5hSFJDYjNKa1pYSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYkdWbWRFOW1abk5sZENBOUlISnBaMmgwUW05eVpHVnlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5MGIzQlBabVp6WlhRZ1BDQmtiM2R1UW05eVpHVnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNSdmNFOW1abk5sZENBOUlHUnZkMjVDYjNKa1pYSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDJSdmQyNVBabVp6WlhRZ1BDQjBiM0JDYjNKa1pYSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWkc5M2JrOW1abk5sZENBOUlIUnZjRUp2Y21SbGNqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjJ4RVlYUmhMbXhsWm5RZ1BTQnNaV1owTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJFUmhkR0V1WW05MGRHOXRJRDBnWW05MGRHOXRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUhSb2FYTWdhVzVrWlhnZ2FYTWdkR2xzWldSdFlYQWdaM0pwWkNCcGJtUmxlRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052YkVSaGRHRXVhVzVrWlhnZ1BTQnBibVJsZURzZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMnhQWm1aelpYUWdLejBnWTI5c2N6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYUdsekxsOTJaWEowYVdObGMwUnBjblI1SUQwZ1ptRnNjMlU3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNWNiaUFnSUNBZ0tpQkhaWFFnZEdobElGUnBiR1ZrVkdsc1pTQjNhWFJvSUhSb1pTQjBhV3hsSUdOdmIzSmthVzVoZEdVdVBHSnlMejVjYmlBZ0lDQWdLaUJKWmlCMGFHVnlaU0JwY3lCdWJ5QjBhV3hsSUdsdUlIUm9aU0J6Y0dWamFXWnBaV1FnWTI5dmNtUnBibUYwWlNCaGJtUWdabTl5WTJWRGNtVmhkR1VnY0dGeVlXMWxkR1Z5SUdseklIUnlkV1VzSUR4aWNpOCtYRzRnSUNBZ0lDb2dkR2hsYmlCM2FXeHNJR055WldGMFpTQmhJRzVsZHlCVWFXeGxaRlJwYkdVZ1lYUWdkR2hsSUdOdmIzSmthVzVoZEdVdVhHNGdJQ0FnSUNvZ1ZHaGxJSEpsYm1SbGNtVnlJSGRwYkd3Z2NtVnVaR1Z5SUhSb1pTQjBhV3hsSUhkcGRHZ2dkR2hsSUhKdmRHRjBhVzl1TENCelkyRnNaU3dnY0c5emFYUnBiMjRnWVc1a0lHTnZiRzl5SUhCeWIzQmxjblI1SUc5bUlIUm9aU0JVYVd4bFpGUnBiR1V1WEc0Z0lDQWdJQ29nSVNONmFGeHVJQ0FnSUNBcUlPbUFtdWkvaCthTWgrV3VtdWVhaENCMGFXeGxJT1dka09hZ2graU90K1dQbHVXdnVlVzZsT2VhaENCVWFXeGxaRlJwYkdYamdJSWdQR0p5THo1Y2JpQWdJQ0FnS2lEbHBvTG1ucHptaklmbHJwcm5tb1RsblpEbW9JZm1zcUhtbklrZ2RHbHNaZSs4ak9XNXR1UzRsT2l1dnVlOXJ1UzZoaUJtYjNKalpVTnlaV0YwWlNEcGdxUGt1WWpsc0lia3ZKcmxuS2ptaklmbHJwcm5tb1RsblpEbW9JZmxpSnZsdTdya3VJRGt1S3JtbHJEbm1vUWdWR2xzWldSVWFXeGxJT09BZ2p4aWNpOCtYRzRnSUNBZ0lDb2c1WnlvNXJpeTVwK1Q2TCtaNUxpcUlIUnBiR1VnNTVxRTVwZTI1WUNaNzd5TTViQ0c1THlhNUwyLzU1U29JRlJwYkdWa1ZHbHNaU0RubW9Ub2lvTG5ncm5ubW9UbWw0dm92YXpqZ0lIbnZLbm1sTDdqZ0lIa3ZZM25wN3ZqZ0lIcG9wem9pYkxsc1o3bWdLZmpnSUk4WW5JdlBseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ1oyVjBWR2xzWldSVWFXeGxRWFJjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMGx1ZEdWblpYSjlJSGhjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMGx1ZEdWblpYSjlJSGxjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMEp2YjJ4bFlXNTlJR1p2Y21ObFEzSmxZWFJsWEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3WTJNdVZHbHNaV1JVYVd4bGZWeHVJQ0FnSUNBcUlFQmxlR0Z0Y0d4bFhHNGdJQ0FnSUNvZ2JHVjBJSFJwYkdVZ1BTQjBhV3hsWkV4aGVXVnlMbWRsZEZScGJHVmtWR2xzWlVGMEtERXdNQ3dnTVRBd0xDQjBjblZsS1R0Y2JpQWdJQ0FnS2lCall5NXNiMmNvZEdsc1pTazdYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1oyVjBWR2xzWldSVWFXeGxRWFFnS0hnc0lIa3NJR1p2Y21ObFEzSmxZWFJsS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOXBjMGx1ZG1Gc2FXUlFiM05wZEdsdmJpaDRMQ0I1S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpVkdsc1pXUk1ZWGxsY2k1blpYUlVhV3hsWkZScGJHVkJkRG9nYVc1MllXeHBaQ0J3YjNOcGRHbHZibHdpS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVYM1JwYkdWektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCall5NXNiMmRKUkNnM01qTTJLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2JHVjBJR2x1WkdWNElEMGdUV0YwYUM1bWJHOXZjaWg0S1NBcklFMWhkR2d1Wm14dmIzSW9lU2tnS2lCMGFHbHpMbDlzWVhsbGNsTnBlbVV1ZDJsa2RHZzdYRzRnSUNBZ0lDQWdJR3hsZENCMGFXeGxJRDBnZEdocGN5NWZkR2xzWldSVWFXeGxjMXRwYm1SbGVGMDdYRzRnSUNBZ0lDQWdJR2xtSUNnaGRHbHNaU0FtSmlCbWIzSmpaVU55WldGMFpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzV2WkdVZ1BTQnVaWGNnWTJNdVRtOWtaU2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2xzWlNBOUlHNXZaR1V1WVdSa1EyOXRjRzl1Wlc1MEtHTmpMbFJwYkdWa1ZHbHNaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhV3hsTGw5NElEMGdlRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnBiR1V1WDNrZ1BTQjVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHbHNaUzVmYkdGNVpYSWdQU0IwYUdsek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdsc1pTNWZkWEJrWVhSbFNXNW1ieWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdibTlrWlM1d1lYSmxiblFnUFNCMGFHbHpMbTV2WkdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2xzWlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHbHNaVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xSUZ4dUlDQWdJQ0FxSUNFalpXNWNiaUFnSUNBZ0tpQkRhR0Z1WjJVZ2RHbHNaU0IwYnlCVWFXeGxaRlJwYkdVZ1lYUWdkR2hsSUhOd1pXTnBabWxsWkNCamIyOXlaR2x1WVhSbExseHVJQ0FnSUNBcUlDRWplbWhjYmlBZ0lDQWdLaURsc0libWpJZmxycHJubW9RZ2RHbHNaU0RsblpEbW9JZm1tNy9tamFMa3VMcm1qSWZscnBybm1vUWdWR2xzWldSVWFXeGw0NENDWEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0J6WlhSVWFXeGxaRlJwYkdWQmRGeHVJQ0FnSUNBcUlFQndZWEpoYlNCN1NXNTBaV2RsY24wZ2VGeHVJQ0FnSUNBcUlFQndZWEpoYlNCN1NXNTBaV2RsY24wZ2VWeHVJQ0FnSUNBcUlFQndZWEpoYlNCN1kyTXVWR2xzWldSVWFXeGxmU0IwYVd4bFpGUnBiR1ZjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRqWXk1VWFXeGxaRlJwYkdWOVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzJWMFZHbHNaV1JVYVd4bFFYUWdLSGdzSUhrc0lIUnBiR1ZrVkdsc1pTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmYVhOSmJuWmhiR2xrVUc5emFYUnBiMjRvZUN3Z2VTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0lsUnBiR1ZrVEdGNVpYSXVjMlYwVkdsc1pXUlVhV3hsUVhRNklHbHVkbUZzYVdRZ2NHOXphWFJwYjI1Y0lpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TGw5MGFXeGxjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMk11Ykc5blNVUW9Oekl6TmlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR3hsZENCcGJtUmxlQ0E5SUUxaGRHZ3VabXh2YjNJb2VDa2dLeUJOWVhSb0xtWnNiMjl5S0hrcElDb2dkR2hwY3k1ZmJHRjVaWEpUYVhwbExuZHBaSFJvTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDkwYVd4bFpGUnBiR1Z6VzJsdVpHVjRYU0E5SUhScGJHVmtWR2xzWlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWTNWc2JHbHVaMFJwY25SNUlEMGdkSEoxWlR0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvZEdsc1pXUlVhV3hsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOW9ZWE5VYVd4bFpFNXZaR1ZIY21sa0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyaGhjMVJwYkdWa1RtOWtaVWR5YVdRZ1BTQjBhR2x6TGw5MGFXeGxaRlJwYkdWekxuTnZiV1VvWm5WdVkzUnBiMjRnS0hScGJHVmtUbTlrWlN3Z2FXNWtaWGdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnSVNGMGFXeGxaRTV2WkdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhV3hsWkZScGJHVTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1VtVjBkWEp1SUhSbGVIUjFjbVV1WEc0Z0lDQWdJQ29nSVNONmFDRG9qcmZsajVibnVybm5rSWJqZ0lKY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUdkbGRGUmxlSFIxY21WY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYVc1a1pYZ2dWR2hsSUdsdVpHVjRJRzltSUhSbGVIUjFjbVZ6WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3VkdWNGRIVnlaVEpFZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJR2RsZEZSbGVIUjFjbVVnS0dsdVpHVjRLU0I3WEc0Z0lDQWdJQ0FnSUdsdVpHVjRJRDBnYVc1a1pYZ2dmSHdnTUR0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgzUmxlSFIxY21WeklDWW1JR2x1WkdWNElENDlJREFnSmlZZ2RHaHBjeTVmZEdWNGRIVnlaWE11YkdWdVozUm9JRDRnYVc1a1pYZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDkwWlhoMGRYSmxjMXRwYm1SbGVGMDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnVW1WMGRYSnVJSFJsZUhSMWNtVXVYRzRnSUNBZ0lDb2dJU042YUNEb2pyZmxqNWJudXJubmtJYmpnSUpjYmlBZ0lDQWdLaUJBYldWMGFHOWtJR2RsZEZSbGVIUjFjbVZ6WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3VkdWNGRIVnlaVEpFZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJR2RsZEZSbGVIUjFjbVZ6SUNncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNSbGVIUjFjbVZ6TzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRk5sZENCMGFHVWdkR1Y0ZEhWeVpTNWNiaUFnSUNBZ0tpQWhJM3BvSU9pdXZ1ZTlydWU2dWVlUWh1T0FnbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdjMlYwVkdWNGRIVnlaVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdWR1Y0ZEhWeVpUSkVmU0IwWlhoMGRYSmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MyVjBWR1Y0ZEhWeVpTQW9kR1Y0ZEhWeVpTbDdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVjBWR1Y0ZEhWeVpYTW9XM1JsZUhSMWNtVmRLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQlRaWFFnZEdobElIUmxlSFIxY21VdVhHNGdJQ0FnSUNvZ0lTTjZhQ0RvcnI3bnZhN251cm5ua0liamdJSmNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lITmxkRlJsZUhSMWNtVmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UxUmxlSFIxY21VeVJIMGdkR1Y0ZEhWeVpYTmNiaUFnSUNBZ0tpOWNiaUFnSUNCelpYUlVaWGgwZFhKbGN5QW9kR1Y0ZEhWeVpYTXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkR1Y0ZEhWeVpYTWdQU0IwWlhoMGRYSmxjenRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZV04wYVhaaGRHVk5ZWFJsY21saGJDZ3BPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdUlFZGxkSE1nYkdGNVpYSWdjMmw2WlM1Y2JpQWdJQ0FnS2lBaEkzcG9JT2lPdCtXK2wrV3hndVdrcCtXd2orT0FnbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdaMlYwVEdGNVpYSlRhWHBsWEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3VTJsNlpYMWNiaUFnSUNBZ0tpQkFaWGhoYlhCc1pWeHVJQ0FnSUNBcUlHeGxkQ0J6YVhwbElEMGdkR2xzWldSTVlYbGxjaTVuWlhSTVlYbGxjbE5wZW1Vb0tUdGNiaUFnSUNBZ0tpQmpZeTVzYjJjb1hDSnNZWGxsY2lCemFYcGxPaUJjSWlBcklITnBlbVVwTzF4dUlDQWdJQ0FxTDF4dUlDQWdJR2RsZEV4aGVXVnlVMmw2WlNBb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5c1lYbGxjbE5wZW1VN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnVTJsNlpTQnZaaUIwYUdVZ2JXRndKM01nZEdsc1pTQW9ZMjkxYkdRZ1ltVWdaR2xtWm1WeVpXNTBJR1p5YjIwZ2RHaGxJSFJwYkdVbmN5QnphWHBsS1M1Y2JpQWdJQ0FnS2lBaEkzcG9JT2lPdCtXUGxpQjBhV3hsSU9lYWhPV2twK1d3anlnZ2RHbHNaU0RubW9UbHBLZmxzSS9sajYvb2c3M2t2SnJtbklubWlZRGt1STNsa0l3cDQ0Q0NYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQm5aWFJOWVhCVWFXeGxVMmw2WlZ4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTFOcGVtVjlYRzRnSUNBZ0lDb2dRR1Y0WVcxd2JHVmNiaUFnSUNBZ0tpQnNaWFFnYldGd1ZHbHNaVk5wZW1VZ1BTQjBhV3hsWkV4aGVXVnlMbWRsZEUxaGNGUnBiR1ZUYVhwbEtDazdYRzRnSUNBZ0lDb2dZMk11Ykc5bktGd2lUV0Z3Vkdsc1pTQnphWHBsT2lCY0lpQXJJRzFoY0ZScGJHVlRhWHBsS1R0Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JuWlhSTllYQlVhV3hsVTJsNlpTQW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXRZWEJVYVd4bFUybDZaVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQkhaWFJ6SUZScGJHVWdjMlYwSUdacGNuTjBJR2x1Wm05eWJXRjBhVzl1SUdadmNpQjBhR1VnYkdGNVpYSXVYRzRnSUNBZ0lDb2dJU042YUNEb2pyZmxqNVlnYkdGNVpYSWc1N1NpNWJ5VjVMMk41NzJ1NUxpNk1PZWFoQ0JVYVd4bGMyVjBJT1Mvb2VhQnIrT0FnbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdaMlYwVkdsc1pWTmxkRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnBibVJsZUNCVWFHVWdhVzVrWlhnZ2IyWWdkR2xzWlhObGRITmNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdFVUVmhVYVd4bGMyVjBTVzVtYjMxY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JuWlhSVWFXeGxVMlYwSUNocGJtUmxlQ2tnZTF4dUlDQWdJQ0FnSUNCcGJtUmxlQ0E5SUdsdVpHVjRJSHg4SURBN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOTBhV3hsYzJWMGN5QW1KaUJwYm1SbGVDQStQU0F3SUNZbUlIUm9hWE11WDNScGJHVnpaWFJ6TG14bGJtZDBhQ0ErSUdsdVpHVjRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmZEdsc1pYTmxkSE5iYVc1a1pYaGRPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1SUVkbGRITWdkR2xzWlNCelpYUWdZV3hzSUdsdVptOXliV0YwYVc5dUlHWnZjaUIwYUdVZ2JHRjVaWEl1WEc0Z0lDQWdJQ29nSVNONmFDRG9qcmZsajVZZ2JHRjVaWElnNW9tQTVweUo1NXFFSUZScGJHVnpaWFFnNUwraDVvR3Y0NENDWEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0JuWlhSVWFXeGxVMlYwWEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3VkUxWVZHbHNaWE5sZEVsdVptOTlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1oyVjBWR2xzWlZObGRITWdLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZkR2xzWlhObGRITTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1UyVjBjeUIwYVd4bElITmxkQ0JwYm1admNtMWhkR2x2YmlCbWIzSWdkR2hsSUd4aGVXVnlMbHh1SUNBZ0lDQXFJQ0VqZW1nZzZLNis1NzJ1SUd4aGVXVnlJT2VhaENCMGFXeGxjMlYwSU9TL29lYUJyK09BZ2x4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnYzJWMFZHbHNaVk5sZEZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VkUxWVZHbHNaWE5sZEVsdVptOTlJSFJwYkdWelpYUmNiaUFnSUNBZ0tpOWNiaUFnSUNCelpYUlVhV3hsVTJWMElDaDBhV3hsYzJWMEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVjBWR2xzWlZObGRITW9XM1JwYkdWelpYUmRLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQlRaWFJ6SUZScGJHVWdjMlYwSUdsdVptOXliV0YwYVc5dUlHWnZjaUIwYUdVZ2JHRjVaWEl1WEc0Z0lDQWdJQ29nSVNONmFDRG9ycjdudmE0Z2JHRjVaWElnNTVxRUlGUnBiR1Z6WlhRZzVMK2g1b0d2NDRDQ1hHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCelpYUlVhV3hsVTJWMGMxeHVJQ0FnSUNBcUlFQndZWEpoYlNCN1ZFMVlWR2xzWlhObGRFbHVabTk5SUhScGJHVnpaWFJ6WEc0Z0lDQWdJQ292WEc0Z0lDQWdjMlYwVkdsc1pWTmxkSE1nS0hScGJHVnpaWFJ6S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNScGJHVnpaWFJ6SUQwZ2RHbHNaWE5sZEhNN1hHNGdJQ0FnSUNBZ0lHeGxkQ0IwWlhoMGRYSmxjeUE5SUhSb2FYTXVYM1JsZUhSMWNtVnpJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lHeGxkQ0IwWlhoSGNtbGtjeUE5SUhSb2FYTXVYM1JsZUVkeWFXUnpJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dkR2xzWlhObGRITXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMGFXeGxjMlYwSUQwZ2RHbHNaWE5sZEhOYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2xzWlhObGRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJsZUhSMWNtVnpXMmxkSUQwZ2RHbHNaWE5sZEM1emIzVnlZMlZKYldGblpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR05qTGxScGJHVmtUV0Z3TG14dllXUkJiR3hVWlhoMGRYSmxjeUFvZEdWNGRIVnlaWE1zSUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdMQ0JzSUQwZ2RHbHNaWE5sZEhNdWJHVnVaM1JvT3lCcElEd2diRHNnS3l0cEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhScGJHVnpaWFJKYm1adklEMGdkR2xzWlhObGRITmJhVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRjBhV3hsYzJWMFNXNW1ieWtnWTI5dWRHbHVkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJNdVZHbHNaV1JOWVhBdVptbHNiRlJsZUhSMWNtVkhjbWxrY3loMGFXeGxjMlYwU1c1bWJ5d2dkR1Y0UjNKcFpITXNJR2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmY0hKbGNHRnlaVlJ2VW1WdVpHVnlLQ2s3WEc0Z0lDQWdJQ0FnSUgwdVltbHVaQ2gwYUdsektTazdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lGOTBjbUYyWlhKelpVRnNiRWR5YVdRZ0tDa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2RHbHNaWE1nUFNCMGFHbHpMbDkwYVd4bGN6dGNiaUFnSUNBZ0lDQWdiR1YwSUhSbGVFZHlhV1J6SUQwZ2RHaHBjeTVmZEdWNFIzSnBaSE03WEc0Z0lDQWdJQ0FnSUd4bGRDQjBhV3hsYzJWMFNXNWtaWGhCY25JZ1BTQjBhR2x6TGw5MGFXeGxjMlYwU1c1a1pYaEJjbkk3WEc0Z0lDQWdJQ0FnSUd4bGRDQjBhV3hsYzJWMFNXUjRUV0Z3SUQwZ2UzMDdYRzVjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdWR2xzWldSTllYQWdQU0JqWXk1VWFXeGxaRTFoY0R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnVkdsc1pVWnNZV2NnUFNCVWFXeGxaRTFoY0M1VWFXeGxSbXhoWnp0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnUmt4SlVGQkZSRjlOUVZOTElEMGdWR2xzWlVac1lXY3VSa3hKVUZCRlJGOU5RVk5MTzF4dVhHNGdJQ0FnSUNBZ0lIUnBiR1Z6WlhSSmJtUmxlRUZ5Y2k1c1pXNW5kR2dnUFNBd08xeHVJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJSFJwYkdWekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWjJsa0lEMGdkR2xzWlhOYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aMmxrSUQwOVBTQXdLU0JqYjI1MGFXNTFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHZHBaQ0E5SUNnb1oybGtJQ1lnUmt4SlVGQkZSRjlOUVZOTEtTQStQajRnTUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ozSnBaQ0E5SUhSbGVFZHlhV1J6VzJkcFpGMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JV2R5YVdRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZeTVsY25KdmNpaGNJa05EVkdsc1pXUk1ZWGxsY2pwZmRISmhkbVZ5YzJWQmJHeEhjbWxrSUdkeWFXUWdhWE1nYm5Wc2JDd2daMmxrSUdsek9sd2lMQ0JuYVdRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJwYm5WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhScGJHVnpaWFJKWkhnZ1BTQm5jbWxrTG5SbGVFbGtPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJwYkdWelpYUkpaSGhOWVhCYmRHbHNaWE5sZEVsa2VGMHBJR052Ym5ScGJuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHbHNaWE5sZEVsa2VFMWhjRnQwYVd4bGMyVjBTV1I0WFNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhV3hsYzJWMFNXNWtaWGhCY25JdWNIVnphQ2gwYVd4bGMyVjBTV1I0S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNWNiaUFnSUNCZmFXNXBkQ0FvYkdGNVpYSkpibVp2TENCdFlYQkpibVp2TENCMGFXeGxjMlYwY3l3Z2RHVjRkSFZ5WlhNc0lIUmxlRWR5YVdSektTQjdYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0IwYUdsekxsOWpkV3hzYVc1blJHbHlkSGtnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXNZWGxsY2tsdVptOGdQU0JzWVhsbGNrbHVabTg3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjFoY0VsdVptOGdQU0J0WVhCSmJtWnZPMXh1WEc0Z0lDQWdJQ0FnSUd4bGRDQnphWHBsSUQwZ2JHRjVaWEpKYm1adkxsOXNZWGxsY2xOcGVtVTdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z2JHRjVaWEpKYm1adlhHNGdJQ0FnSUNBZ0lIUm9hWE11WDJ4aGVXVnlUbUZ0WlNBOUlHeGhlV1Z5U1c1bWJ5NXVZVzFsTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDkwYVd4bGN5QTlJR3hoZVdWeVNXNW1ieTVmZEdsc1pYTTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzQnliM0JsY25ScFpYTWdQU0JzWVhsbGNrbHVabTh1Y0hKdmNHVnlkR2xsY3p0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYkdGNVpYSlRhWHBsSUQwZ2MybDZaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZiV2x1UjBsRUlEMGdiR0Y1WlhKSmJtWnZMbDl0YVc1SFNVUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyMWhlRWRKUkNBOUlHeGhlV1Z5U1c1bWJ5NWZiV0Y0UjBsRU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5dmNHRmphWFI1SUQwZ2JHRjVaWEpKYm1adkxsOXZjR0ZqYVhSNU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5eVpXNWtaWEpQY21SbGNpQTlJRzFoY0VsdVptOHVjbVZ1WkdWeVQzSmtaWEk3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM04wWVdkblpYSkJlR2x6SUQwZ2JXRndTVzVtYnk1blpYUlRkR0ZuWjJWeVFYaHBjeWdwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl6ZEdGbloyVnlTVzVrWlhnZ1BTQnRZWEJKYm1adkxtZGxkRk4wWVdkblpYSkpibVJsZUNncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5b1pYaFRhV1JsVEdWdVozUm9JRDBnYldGd1NXNW1ieTVuWlhSSVpYaFRhV1JsVEdWdVozUm9LQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMkZ1YVcxaGRHbHZibk1nUFNCdFlYQkpibVp2TG1kbGRGUnBiR1ZCYm1sdFlYUnBiMjV6S0NrN1hHNWNiaUFnSUNBZ0lDQWdMeThnZEdsc1pYTmxkSE5jYmlBZ0lDQWdJQ0FnZEdocGN5NWZkR2xzWlhObGRITWdQU0IwYVd4bGMyVjBjenRjYmlBZ0lDQWdJQ0FnTHk4Z2RHVjRkSFZ5WlhOY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZEdWNGRIVnlaWE1nUFNCMFpYaDBkWEpsY3p0Y2JpQWdJQ0FnSUNBZ0x5OGdaM0pwWkNCMFpYaDBkWEpsWEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM1JsZUVkeWFXUnpJRDBnZEdWNFIzSnBaSE03WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdiV0Z3U1c1bWIxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5c1lYbGxjazl5YVdWdWRHRjBhVzl1SUQwZ2JXRndTVzVtYnk1dmNtbGxiblJoZEdsdmJqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmJXRndWR2xzWlZOcGVtVWdQU0J0WVhCSmJtWnZMbWRsZEZScGJHVlRhWHBsS0NrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYMnhoZVdWeVQzSnBaVzUwWVhScGIyNGdQVDA5SUdOakxsUnBiR1ZrVFdGd0xrOXlhV1Z1ZEdGMGFXOXVMa2hGV0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2FHRnVaR3hsSUdobGVDQnRZWEJjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUZScGJHVmtUV0Z3SUQwZ1kyTXVWR2xzWldSTllYQTdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JUZEdGbloyVnlRWGhwY3lBOUlGUnBiR1ZrVFdGd0xsTjBZV2RuWlhKQmVHbHpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnVTNSaFoyZGxja2x1WkdWNElEMGdWR2xzWldSTllYQXVVM1JoWjJkbGNrbHVaR1Y0TzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JXRndkSGNnUFNCMGFHbHpMbDl0WVhCVWFXeGxVMmw2WlM1M2FXUjBhRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J0WVhCMGFDQTlJSFJvYVhNdVgyMWhjRlJwYkdWVGFYcGxMbWhsYVdkb2REdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjNhV1IwYUNBOUlEQXNJR2hsYVdkb2RDQTlJREE3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyOWtaRjlsZG1WdUlEMGdLSFJvYVhNdVgzTjBZV2RuWlhKSmJtUmxlQ0E5UFQwZ1UzUmhaMmRsY2tsdVpHVjRMbE5VUVVkSFJWSkpUa1JGV0Y5UFJFUXBJRDhnTVNBNklDMHhPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZjM1JoWjJkbGNrRjRhWE1nUFQwOUlGTjBZV2RuWlhKQmVHbHpMbE5VUVVkSFJWSkJXRWxUWDFncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5a2FXWm1XREVnUFNBb2JXRndkSGNnTFNCMGFHbHpMbDlvWlhoVGFXUmxUR1Z1WjNSb0tTQXZJREk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZaR2xtWmxreElEMGdNRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvWldsbmFIUWdQU0J0WVhCMGFDQXFJQ2gwYUdsekxsOXNZWGxsY2xOcGVtVXVhR1ZwWjJoMElDc2dNQzQxS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM2FXUjBhQ0E5SUNodFlYQjBkeUFySUhSb2FYTXVYMmhsZUZOcFpHVk1aVzVuZEdncElDb2dUV0YwYUM1bWJHOXZjaWgwYUdsekxsOXNZWGxsY2xOcGVtVXVkMmxrZEdnZ0x5QXlLU0FySUcxaGNIUjNJQ29nS0hSb2FYTXVYMnhoZVdWeVUybDZaUzUzYVdSMGFDQWxJRElwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5a2FXWm1XREVnUFNBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJScFptWlpNU0E5SUNodFlYQjBhQ0F0SUhSb2FYTXVYMmhsZUZOcFpHVk1aVzVuZEdncElDOGdNanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IzYVdSMGFDQTlJRzFoY0hSM0lDb2dLSFJvYVhNdVgyeGhlV1Z5VTJsNlpTNTNhV1IwYUNBcklEQXVOU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYUdWcFoyaDBJRDBnS0cxaGNIUm9JQ3NnZEdocGN5NWZhR1Y0VTJsa1pVeGxibWQwYUNrZ0tpQk5ZWFJvTG1ac2IyOXlLSFJvYVhNdVgyeGhlV1Z5VTJsNlpTNW9aV2xuYUhRZ0x5QXlLU0FySUcxaGNIUm9JQ29nS0hSb2FYTXVYMnhoZVdWeVUybDZaUzVvWldsbmFIUWdKU0F5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Ym05a1pTNXpaWFJEYjI1MFpXNTBVMmw2WlNoM2FXUjBhQ3dnYUdWcFoyaDBLVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Ym05a1pTNXpaWFJEYjI1MFpXNTBVMmw2WlNoMGFHbHpMbDlzWVhsbGNsTnBlbVV1ZDJsa2RHZ2dLaUIwYUdsekxsOXRZWEJVYVd4bFUybDZaUzUzYVdSMGFDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5c1lYbGxjbE5wZW1VdWFHVnBaMmgwSUNvZ2RHaHBjeTVmYldGd1ZHbHNaVk5wZW1VdWFHVnBaMmgwS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQzh2SUc5bVpuTmxkQ0FvWVdaMFpYSWdiR0Y1WlhJZ2IzSnBaVzUwWVhScGIyNGdhWE1nYzJWMEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmIyWm1jMlYwSUQwZ1kyTXVkaklvYkdGNVpYSkpibVp2TG05bVpuTmxkQzU0TENBdGJHRjVaWEpKYm1adkxtOW1abk5sZEM1NUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmRYTmxRWFYwYjIxaGRHbGpWbVZ5ZEdWNFdpQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5MlpYSjBaWGhhZG1Gc2RXVWdQU0F3TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl6ZVc1alFXNWphRzl5VUc5cGJuUW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjSEpsY0dGeVpWUnZVbVZ1WkdWeUtDazdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lGOXdjbVZ3WVhKbFZHOVNaVzVrWlhJZ0tDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOTFjR1JoZEdWV1pYSjBhV05sY3lncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5MGNtRjJaWEp6WlVGc2JFZHlhV1FvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZFhCa1lYUmxRV3hzVlhObGNrNXZaR1VvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWVdOMGFYWmhkR1ZOWVhSbGNtbGhiQ2dwTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JmWVdOMGFYWmhkR1ZOWVhSbGNtbGhiQ0FvS1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0IwYVd4bGMyVjBTVzVrWlhoQmNuSWdQU0IwYUdsekxsOTBhV3hsYzJWMFNXNWtaWGhCY25JN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYVd4bGMyVjBTVzVrWlhoQmNuSXViR1Z1WjNSb0lEMDlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtUnBjMkZpYkdWU1pXNWtaWElvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUd4bGRDQjBaWGhKWkUxaGRFbGtlQ0E5SUhSb2FYTXVYM1JsZUVsa1ZHOU5ZWFJKYm1SbGVDQTlJSHQ5TzF4dUlDQWdJQ0FnSUNCc1pYUWdkR1Y0ZEhWeVpYTWdQU0IwYUdsekxsOTBaWGgwZFhKbGN6dGNibHh1SUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUhScGJHVnpaWFJKYm1SbGVFRnljaTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIUnBiR1Z6WlhSSlpIZ2dQU0IwYVd4bGMyVjBTVzVrWlhoQmNuSmJhVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZEdWNGRIVnlaU0E5SUhSbGVIUjFjbVZ6VzNScGJHVnpaWFJKWkhoZE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiV0YwWlhKcFlXd2dQU0IwYUdsekxuTm9ZWEpsWkUxaGRHVnlhV0ZzYzF0cFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hiV0YwWlhKcFlXd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WVhSbGNtbGhiQ0E5SUUxaGRHVnlhV0ZzTG1kbGRFbHVjM1JoYm5ScFlYUmxaRUoxYVd4MGFXNU5ZWFJsY21saGJDZ25NbVF0YzNCeWFYUmxKeXdnZEdocGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRZWFJsY21saGJDQTlJRTFoZEdWeWFXRnNMbWRsZEVsdWMzUmhiblJwWVhSbFpFMWhkR1Z5YVdGc0tHMWhkR1Z5YVdGc0xDQjBhR2x6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdiV0YwWlhKcFlXd3VaR1ZtYVc1bEtDZFZVMFZmVkVWWVZGVlNSU2NzSUhSeWRXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JXRjBaWEpwWVd3dVpHVm1hVzVsS0NkRFExOVZVMFZmVFU5RVJVd25MQ0IwY25WbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUcxaGRHVnlhV0ZzTG5ObGRGQnliM0JsY25SNUtDZDBaWGgwZFhKbEp5d2dkR1Y0ZEhWeVpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEUxaGRHVnlhV0ZzS0drc0lHMWhkR1Z5YVdGc0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSbGVFbGtUV0YwU1dSNFczUnBiR1Z6WlhSSlpIaGRJRDBnYVR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdWJXRnlhMFp2Y2xWd1pHRjBaVkpsYm1SbGNrUmhkR0VvZEhKMVpTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJXRnlhMFp2Y2xKbGJtUmxjaWgwY25WbEtUdGNiaUFnSUNCOUxGeHVmU2s3WEc1Y2JtTmpMbFJwYkdWa1RHRjVaWElnUFNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUZScGJHVmtUR0Y1WlhJN1hHNGlYWDA9Il19