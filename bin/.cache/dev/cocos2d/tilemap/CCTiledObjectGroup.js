(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/tilemap/CCTiledObjectGroup.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var TiledObjectGroup = cc.Class({
            name: 'cc.TiledObjectGroup',
            extends: cc.Component,
            getPositionOffset: function getPositionOffset() {
                return this._positionOffset;
            },
            getProperties: function getProperties() {
                this._properties;
            },
            getGroupName: function getGroupName() {
                return this._groupName;
            },
            getProperty: function getProperty(propertyName) {
                return this._properties[propertyName.toString()];
            },
            getObject: function getObject(objectName) {
                for (var i = 0, len = this._objects.length; i < len; i++) {
                    var obj = this._objects[i];
                    if (obj && obj.name === objectName) {
                        return obj;
                    }
                }
                return null;
            },
            getObjects: function getObjects() {
                return this._objects;
            },
            _init: function _init(groupInfo, mapInfo, texGrids) {
                var TiledMap = cc.TiledMap;
                var TMXObjectType = TiledMap.TMXObjectType;
                var Orientation = TiledMap.Orientation;
                var StaggerAxis = TiledMap.StaggerAxis;
                var TileFlag = TiledMap.TileFlag;
                var FLIPPED_MASK = TileFlag.FLIPPED_MASK;
                this._groupName = groupInfo.name;
                this._positionOffset = groupInfo.offset;
                this._mapInfo = mapInfo;
                this._properties = groupInfo.getProperties();
                this._offset = cc.v2(groupInfo.offset.x, -groupInfo.offset.y);
                this._opacity = groupInfo._opacity;
                var mapSize = mapInfo._mapSize;
                var tileSize = mapInfo._tileSize;
                var width = 0, height = 0;
                if (mapInfo.orientation === Orientation.HEX) {
                    if (mapInfo.getStaggerAxis() === StaggerAxis.STAGGERAXIS_X) {
                        height = tileSize.height * (mapSize.height + 0.5);
                        width = (tileSize.width + mapInfo.getHexSideLength()) * Math.floor(mapSize.width / 2) + tileSize.width * (mapSize.width % 2);
                    } else {
                        width = tileSize.width * (mapSize.width + 0.5);
                        height = (tileSize.height + mapInfo.getHexSideLength()) * Math.floor(mapSize.height / 2) + tileSize.height * (mapSize.height % 2);
                    }
                } else {
                    width = mapSize.width * tileSize.width;
                    height = mapSize.height * tileSize.height;
                }
                this.node.setContentSize(width, height);
                var leftTopX = width * this.node.anchorX;
                var leftTopY = height * (1 - this.node.anchorY);
                var objects = groupInfo._objects;
                var aliveNodes = {};
                for (var i = 0, childIdx = objects.length - 1, l = objects.length; i < l; i++, childIdx--) {
                    var object = objects[i];
                    var objType = object.type;
                    object.offset = cc.v2(object.x, object.y);
                    var points = object.points || object.polylinePoints;
                    if (points) {
                        for (var pi = 0; pi < points.length; pi++) {
                            points[pi].y *= -1;
                        }
                    }
                    if (Orientation.ISO !== mapInfo.orientation) {
                        object.y = height - object.y;
                    } else {
                        var posIdxX = object.x / tileSize.width * 2;
                        var posIdxY = object.y / tileSize.height;
                        object.x = tileSize.width / 2 * (mapSize.width + posIdxX - posIdxY);
                        object.y = tileSize.height / 2 * (mapSize.height * 2 - posIdxX - posIdxY);
                    }
                    if (objType === TMXObjectType.TEXT) {
                        var textName = 'text' + object.id;
                        aliveNodes[textName] = true;
                        var textNode = this.node.getChildByName(textName);
                        if (!textNode) {
                            textNode = new cc.Node();
                        }
                        textNode.anchorX = 0;
                        textNode.anchorY = 1;
                        textNode.angle = -object.rotation;
                        textNode.x = object.x - leftTopX;
                        textNode.y = object.y - leftTopY;
                        textNode.name = textName;
                        textNode.parent = this.node;
                        textNode.color = object.color;
                        textNode.opacity = this._opacity;
                        textNode.setSiblingIndex(childIdx);
                        var label = textNode.getComponent(cc.Label);
                        if (!label) {
                            label = textNode.addComponent(cc.Label);
                        }
                        label.overflow = cc.Label.Overflow.SHRINK;
                        label.lineHeight = object.height;
                        label.string = object.text;
                        label.horizontalAlign = object.halign;
                        label.verticalAlign = object.valign;
                        label.fontSize = object.pixelsize;
                        textNode.width = object.width;
                        textNode.height = object.height;
                    }
                    if (objType === TMXObjectType.IMAGE) {
                        var grid = texGrids[(object.gid & FLIPPED_MASK) >>> 0];
                        if (!grid)
                            continue;
                        var tileset = grid.tileset;
                        var imgName = 'img' + object.id;
                        aliveNodes[imgName] = true;
                        var imgNode = this.node.getChildByName(imgName);
                        if (imgNode instanceof cc.PrivateNode) {
                            imgNode.removeFromParent();
                            imgNode.destroy();
                            imgNode = null;
                        }
                        if (!imgNode) {
                            imgNode = new cc.Node();
                        }
                        if (Orientation.ISO == mapInfo.orientation) {
                            imgNode.anchorX = 0.5;
                            imgNode.anchorY = 0;
                        } else {
                            imgNode.anchorX = 0;
                            imgNode.anchorY = 0;
                        }
                        imgNode.angle = -object.rotation;
                        imgNode.x = object.x - leftTopX + tileset.tileOffset.x;
                        imgNode.y = object.y - leftTopY + tileset.tileOffset.y;
                        imgNode.name = imgName;
                        imgNode.parent = this.node;
                        imgNode.opacity = this._opacity;
                        imgNode.setSiblingIndex(childIdx);
                        var sp = imgNode.getComponent(cc.Sprite);
                        if (!sp) {
                            sp = imgNode.addComponent(cc.Sprite);
                        }
                        var spf = new cc.SpriteFrame();
                        spf.setTexture(grid.tileset.sourceImage, cc.rect(grid));
                        sp.spriteFrame = spf;
                        imgNode.width = object.width;
                        imgNode.height = object.height;
                    }
                }
                this._objects = objects;
                var children = this.node.children;
                var imgExp = /^img\d+$/;
                var txtExp = /^text\d+$/;
                for (var _i = 0, n = children.length; _i < n; _i++) {
                    var c = children[_i];
                    var cName = c._name;
                    var isUseless = imgExp.test(cName);
                    isUseless = isUseless || txtExp.test(cName);
                    if (isUseless && !aliveNodes[cName])
                        c.destroy();
                }
            }
        });
        cc.TiledObjectGroup = module.exports = TiledObjectGroup;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDVGlsZWRPYmplY3RHcm91cC5qcyIsIi9Vc2Vycy9TaGFyZWQvYmluZ29fZnJlbnp5L2VuZ2luZS9jb2NvczJkL3RpbGVtYXAvQ0NUaWxlZE9iamVjdEdyb3VwLmpzIl0sIm5hbWVzIjpbIlRpbGVkT2JqZWN0R3JvdXAiLCJjYyIsIkNsYXNzIiwibmFtZSIsImV4dGVuZHMiLCJDb21wb25lbnQiLCJnZXRQb3NpdGlvbk9mZnNldCIsIl9wb3NpdGlvbk9mZnNldCIsImdldFByb3BlcnRpZXMiLCJfcHJvcGVydGllcyIsImdldEdyb3VwTmFtZSIsIl9ncm91cE5hbWUiLCJnZXRQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInRvU3RyaW5nIiwiZ2V0T2JqZWN0Iiwib2JqZWN0TmFtZSIsImkiLCJsZW4iLCJfb2JqZWN0cyIsImxlbmd0aCIsIm9iaiIsImdldE9iamVjdHMiLCJfaW5pdCIsImdyb3VwSW5mbyIsIm1hcEluZm8iLCJ0ZXhHcmlkcyIsIlRpbGVkTWFwIiwiVE1YT2JqZWN0VHlwZSIsIk9yaWVudGF0aW9uIiwiU3RhZ2dlckF4aXMiLCJUaWxlRmxhZyIsIkZMSVBQRURfTUFTSyIsIm9mZnNldCIsIl9tYXBJbmZvIiwiX29mZnNldCIsInYyIiwieCIsInkiLCJfb3BhY2l0eSIsIm1hcFNpemUiLCJfbWFwU2l6ZSIsInRpbGVTaXplIiwiX3RpbGVTaXplIiwid2lkdGgiLCJoZWlnaHQiLCJvcmllbnRhdGlvbiIsIkhFWCIsImdldFN0YWdnZXJBeGlzIiwiU1RBR0dFUkFYSVNfWCIsImdldEhleFNpZGVMZW5ndGgiLCJNYXRoIiwiZmxvb3IiLCJub2RlIiwic2V0Q29udGVudFNpemUiLCJsZWZ0VG9wWCIsImFuY2hvclgiLCJsZWZ0VG9wWSIsImFuY2hvclkiLCJvYmplY3RzIiwiYWxpdmVOb2RlcyIsImNoaWxkSWR4IiwibCIsIm9iamVjdCIsIm9ialR5cGUiLCJ0eXBlIiwicG9pbnRzIiwicG9seWxpbmVQb2ludHMiLCJwaSIsIklTTyIsInBvc0lkeFgiLCJwb3NJZHhZIiwiVEVYVCIsInRleHROYW1lIiwiaWQiLCJ0ZXh0Tm9kZSIsImdldENoaWxkQnlOYW1lIiwiTm9kZSIsImFuZ2xlIiwicm90YXRpb24iLCJwYXJlbnQiLCJjb2xvciIsIm9wYWNpdHkiLCJzZXRTaWJsaW5nSW5kZXgiLCJsYWJlbCIsImdldENvbXBvbmVudCIsIkxhYmVsIiwiYWRkQ29tcG9uZW50Iiwib3ZlcmZsb3ciLCJPdmVyZmxvdyIsIlNIUklOSyIsImxpbmVIZWlnaHQiLCJzdHJpbmciLCJ0ZXh0IiwiaG9yaXpvbnRhbEFsaWduIiwiaGFsaWduIiwidmVydGljYWxBbGlnbiIsInZhbGlnbiIsImZvbnRTaXplIiwicGl4ZWxzaXplIiwiSU1BR0UiLCJncmlkIiwiZ2lkIiwidGlsZXNldCIsImltZ05hbWUiLCJpbWdOb2RlIiwiUHJpdmF0ZU5vZGUiLCJyZW1vdmVGcm9tUGFyZW50IiwiZGVzdHJveSIsInRpbGVPZmZzZXQiLCJzcCIsIlNwcml0ZSIsInNwZiIsIlNwcml0ZUZyYW1lIiwic2V0VGV4dHVyZSIsInNvdXJjZUltYWdlIiwicmVjdCIsInNwcml0ZUZyYW1lIiwiY2hpbGRyZW4iLCJpbWdFeHAiLCJ0eHRFeHAiLCJuIiwiYyIsImNOYW1lIiwiX25hbWUiLCJpc1VzZWxlc3MiLCJ0ZXN0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjtJQUFBLElBQUEsT0FBQSxHQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUEsSUFBQSxPQUFBLE9BQUEsS0FBQSxXQUFBOzs7Ozs7Ozs7Ozs7O1FBK0JBLElBQUlBLGdCQUFBQSxHQUFtQkMsRUFBQUEsQ0FBR0MsS0FBSEQsQ0FBUztBQUFBLFlBQzVCRSxJQUFBQSxFQUFNLHFCQURzQjtBQUFBLFlBSzVCQyxPQUFBQSxFQUFTSCxFQUFBQSxDQUFHSSxTQUxnQjtBQUFBLFlBZTVCQyxpQkFBQUEsRUFmNEIsU0FBQSxpQkFBQSxHQWVQO0FBQUEsZ0JBQ2pCLE9BQU8sS0FBS0MsZUFBWixDQURpQjtBQUFBLGFBZk87QUFBQSxZ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LEtBQWQsQ0FGNkM7QUFBQSxvQkFHN0MsSUFBSUMsU0FBQUEsR0FBWU4sTUFBQUEsQ0FBT08sSUFBUFAsQ0FBWUksS0FBWkosQ0FBaEIsQ0FINkM7QUFBQSxvQkFJN0NNLFNBQUFBLEdBQVlBLFNBQUFBLElBQWFMLE1BQUFBLENBQU9NLElBQVBOLENBQVlHLEtBQVpILENBQXpCSyxDQUo2QztBQUFBLG9CQUs3QyxJQUFJQSxTQUFBQSxJQUFhLENBQUNqRSxVQUFBQSxDQUFXK0QsS0FBWC9ELENBQWxCO0FBQUEsd0JBQXFDOEQsQ0FBQUEsQ0FBRWQsT0FBRmMsR0FMUTtBQUFBLGlCQW5KaEI7QUFBQSxhQXRGVDtBQUFBLFNBQVR6SCxDQUF2QjtRQW1QQUEsRUFBQUEsQ0FBR0QsZ0JBQUhDLEdBQXNCOEgsTUFBQUEsQ0FBT0MsT0FBUEQsR0FBaUIvSCxnQkFBdkNDIiwiZmlsZSI6IkNDVGlsZWRPYmplY3RHcm91cC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gQ29weXJpZ2h0IChjKSAyMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcbiBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxuXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKlxuICogISNlbiBSZW5kZXJzIHRoZSBUTVggb2JqZWN0IGdyb3VwLlxuICogISN6aCDmuLLmn5MgdG14IG9iamVjdCBncm91cOOAglxuICogQGNsYXNzIFRpbGVkT2JqZWN0R3JvdXBcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG5sZXQgVGlsZWRPYmplY3RHcm91cCA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuVGlsZWRPYmplY3RHcm91cCcsXG5cbiAgICAvLyBJbmhlcml0cyBmcm9tIHRoZSBhYnN0cmFjdCBjbGFzcyBkaXJlY3RseSxcbiAgICAvLyBiZWNhdXNlIFRpbGVkTGF5ZXIgbm90IGNyZWF0ZSBvciBtYWludGFpbnMgdGhlIHNnTm9kZSBieSBpdHNlbGYuXG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBPZmZzZXQgcG9zaXRpb24gb2YgY2hpbGQgb2JqZWN0cy5cbiAgICAgKiAhI3poIOiOt+WPluWtkOWvueixoeeahOWBj+enu+S9jee9ruOAglxuICAgICAqIEBtZXRob2QgZ2V0UG9zaXRpb25PZmZzZXRcbiAgICAgKiBAcmV0dXJuIHtWZWMyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogbGV0IG9mZnNldCA9IHRNWE9iamVjdEdyb3VwLmdldFBvc2l0aW9uT2Zmc2V0KCk7XG4gICAgICovXG4gICAgZ2V0UG9zaXRpb25PZmZzZXQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcG9zaXRpb25PZmZzZXQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gTGlzdCBvZiBwcm9wZXJ0aWVzIHN0b3JlZCBpbiBhIGRpY3Rpb25hcnkuXG4gICAgICogISN6aCDku6XmmKDlsITnmoTlvaLlvI/ojrflj5blsZ7mgKfliJfooajjgIJcbiAgICAgKiBAbWV0aG9kIGdldFByb3BlcnRpZXNcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBsZXQgb2Zmc2V0ID0gdE1YT2JqZWN0R3JvdXAuZ2V0UHJvcGVydGllcygpO1xuICAgICAqL1xuICAgIGdldFByb3BlcnRpZXMgKCkge1xuICAgICAgICB0aGlzLl9wcm9wZXJ0aWVzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIEdldHMgdGhlIEdyb3VwIG5hbWUuXG4gICAgICogISN6aCDojrflj5bnu4TlkI3np7DjgIJcbiAgICAgKiBAbWV0aG9kIGdldEdyb3VwTmFtZVxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGxldCBncm91cE5hbWUgPSB0TVhPYmplY3RHcm91cC5nZXRHcm91cE5hbWU7XG4gICAgICovXG4gICAgZ2V0R3JvdXBOYW1lICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dyb3VwTmFtZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSB2YWx1ZSBmb3IgdGhlIHNwZWNpZmljIHByb3BlcnR5IG5hbWVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlOYW1lXG4gICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAqL1xuICAgIGdldFByb3BlcnR5IChwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3BlcnRpZXNbcHJvcGVydHlOYW1lLnRvU3RyaW5nKCldO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogUmV0dXJuIHRoZSBvYmplY3QgZm9yIHRoZSBzcGVjaWZpYyBvYmplY3QgbmFtZS4gPGJyIC8+XG4gICAgICogSXQgd2lsbCByZXR1cm4gdGhlIDFzdCBvYmplY3QgZm91bmQgb24gdGhlIGFycmF5IGZvciB0aGUgZ2l2ZW4gbmFtZS5cbiAgICAgKiAhI3poIOiOt+WPluaMh+WumueahOWvueixoeOAglxuICAgICAqIEBtZXRob2QgZ2V0T2JqZWN0XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG9iamVjdE5hbWVcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R8TnVsbH1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGxldCBvYmplY3QgPSB0TVhPYmplY3RHcm91cC5nZXRPYmplY3QoXCJHcm91cFwiKTtcbiAgICAgKi9cbiAgICBnZXRPYmplY3QgKG9iamVjdE5hbWUpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRoaXMuX29iamVjdHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBvYmogPSB0aGlzLl9vYmplY3RzW2ldO1xuICAgICAgICAgICAgaWYgKG9iaiAmJiBvYmoubmFtZSA9PT0gb2JqZWN0TmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gb2JqZWN0IG5vdCBmb3VuZFxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBHZXRzIHRoZSBvYmplY3RzLlxuICAgICAqICEjemgg6I635Y+W5a+56LGh5pWw57uE44CCXG4gICAgICogQG1ldGhvZCBnZXRPYmplY3RzXG4gICAgICogQHJldHVybiB7QXJyYXl9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBsZXQgb2JqZWN0cyA9IHRNWE9iamVjdEdyb3VwLmdldE9iamVjdHMoKTtcbiAgICAgKi9cbiAgICBnZXRPYmplY3RzICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29iamVjdHM7XG4gICAgfSxcblxuICAgIF9pbml0IChncm91cEluZm8sIG1hcEluZm8sIHRleEdyaWRzKSB7XG4gICAgICAgIGNvbnN0IFRpbGVkTWFwID0gY2MuVGlsZWRNYXA7XG4gICAgICAgIGNvbnN0IFRNWE9iamVjdFR5cGUgPSBUaWxlZE1hcC5UTVhPYmplY3RUeXBlO1xuICAgICAgICBjb25zdCBPcmllbnRhdGlvbiA9IFRpbGVkTWFwLk9yaWVudGF0aW9uO1xuICAgICAgICBjb25zdCBTdGFnZ2VyQXhpcyA9IFRpbGVkTWFwLlN0YWdnZXJBeGlzO1xuICAgICAgICBjb25zdCBUaWxlRmxhZyA9IFRpbGVkTWFwLlRpbGVGbGFnO1xuICAgICAgICBjb25zdCBGTElQUEVEX01BU0sgPSBUaWxlRmxhZy5GTElQUEVEX01BU0s7XG5cbiAgICAgICAgdGhpcy5fZ3JvdXBOYW1lID0gZ3JvdXBJbmZvLm5hbWU7XG4gICAgICAgIHRoaXMuX3Bvc2l0aW9uT2Zmc2V0ID0gZ3JvdXBJbmZvLm9mZnNldDtcbiAgICAgICAgdGhpcy5fbWFwSW5mbyA9IG1hcEluZm87XG4gICAgICAgIHRoaXMuX3Byb3BlcnRpZXMgPSBncm91cEluZm8uZ2V0UHJvcGVydGllcygpO1xuICAgICAgICB0aGlzLl9vZmZzZXQgPSBjYy52Mihncm91cEluZm8ub2Zmc2V0LngsIC1ncm91cEluZm8ub2Zmc2V0LnkpO1xuICAgICAgICB0aGlzLl9vcGFjaXR5ID0gZ3JvdXBJbmZvLl9vcGFjaXR5O1xuXG4gICAgICAgIGxldCBtYXBTaXplID0gbWFwSW5mby5fbWFwU2l6ZTtcbiAgICAgICAgbGV0IHRpbGVTaXplID0gbWFwSW5mby5fdGlsZVNpemU7XG4gICAgICAgIGxldCB3aWR0aCA9IDAsIGhlaWdodCA9IDA7XG4gICAgICAgIGlmIChtYXBJbmZvLm9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IRVgpIHtcbiAgICAgICAgICAgIGlmIChtYXBJbmZvLmdldFN0YWdnZXJBeGlzKCkgPT09IFN0YWdnZXJBeGlzLlNUQUdHRVJBWElTX1gpIHtcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSB0aWxlU2l6ZS5oZWlnaHQgKiAobWFwU2l6ZS5oZWlnaHQgKyAwLjUpO1xuICAgICAgICAgICAgICAgIHdpZHRoID0gKHRpbGVTaXplLndpZHRoICsgbWFwSW5mby5nZXRIZXhTaWRlTGVuZ3RoKCkpICogTWF0aC5mbG9vcihtYXBTaXplLndpZHRoIC8gMikgKyB0aWxlU2l6ZS53aWR0aCAqIChtYXBTaXplLndpZHRoICUgMik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHdpZHRoID0gdGlsZVNpemUud2lkdGggKiAobWFwU2l6ZS53aWR0aCArIDAuNSk7XG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gKHRpbGVTaXplLmhlaWdodCArIG1hcEluZm8uZ2V0SGV4U2lkZUxlbmd0aCgpKSAqIE1hdGguZmxvb3IobWFwU2l6ZS5oZWlnaHQgLyAyKSArIHRpbGVTaXplLmhlaWdodCAqIChtYXBTaXplLmhlaWdodCAlIDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2lkdGggPSBtYXBTaXplLndpZHRoICogdGlsZVNpemUud2lkdGg7IFxuICAgICAgICAgICAgaGVpZ2h0ID0gbWFwU2l6ZS5oZWlnaHQgKiB0aWxlU2l6ZS5oZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ub2RlLnNldENvbnRlbnRTaXplKHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgIGxldCBsZWZ0VG9wWCA9IHdpZHRoICogdGhpcy5ub2RlLmFuY2hvclg7XG4gICAgICAgIGxldCBsZWZ0VG9wWSA9IGhlaWdodCAqICgxIC0gdGhpcy5ub2RlLmFuY2hvclkpO1xuXG4gICAgICAgIGxldCBvYmplY3RzID0gZ3JvdXBJbmZvLl9vYmplY3RzO1xuICAgICAgICBsZXQgYWxpdmVOb2RlcyA9IHt9O1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgY2hpbGRJZHggPSBvYmplY3RzLmxlbmd0aCAtIDEsIGwgPSBvYmplY3RzLmxlbmd0aDsgaSA8IGw7IGkrKywgY2hpbGRJZHgtLSkge1xuICAgICAgICAgICAgbGV0IG9iamVjdCA9IG9iamVjdHNbaV07XG4gICAgICAgICAgICBsZXQgb2JqVHlwZSA9IG9iamVjdC50eXBlO1xuICAgICAgICAgICAgb2JqZWN0Lm9mZnNldCA9IGNjLnYyKG9iamVjdC54LCBvYmplY3QueSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGxldCBwb2ludHMgPSBvYmplY3QucG9pbnRzIHx8IG9iamVjdC5wb2x5bGluZVBvaW50cztcbiAgICAgICAgICAgIGlmIChwb2ludHMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBwaSA9IDA7IHBpIDwgcG9pbnRzLmxlbmd0aDsgcGkrKykge1xuICAgICAgICAgICAgICAgICAgICBwb2ludHNbcGldLnkgKj0gLTE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoT3JpZW50YXRpb24uSVNPICE9PSBtYXBJbmZvLm9yaWVudGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0LnkgPSBoZWlnaHQgLSBvYmplY3QueTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IHBvc0lkeFggPSBvYmplY3QueCAvIHRpbGVTaXplLndpZHRoICogMjtcbiAgICAgICAgICAgICAgICBsZXQgcG9zSWR4WSA9IG9iamVjdC55IC8gdGlsZVNpemUuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIG9iamVjdC54ID0gdGlsZVNpemUud2lkdGggLyAyICogKG1hcFNpemUud2lkdGggKyBwb3NJZHhYIC0gcG9zSWR4WSk7XG4gICAgICAgICAgICAgICAgb2JqZWN0LnkgPSB0aWxlU2l6ZS5oZWlnaHQgLyAyICogKG1hcFNpemUuaGVpZ2h0ICogMiAtIHBvc0lkeFggLSBwb3NJZHhZKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG9ialR5cGUgPT09IFRNWE9iamVjdFR5cGUuVEVYVCkge1xuICAgICAgICAgICAgICAgIGxldCB0ZXh0TmFtZSA9IFwidGV4dFwiICsgb2JqZWN0LmlkO1xuICAgICAgICAgICAgICAgIGFsaXZlTm9kZXNbdGV4dE5hbWVdID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIGxldCB0ZXh0Tm9kZSA9IHRoaXMubm9kZS5nZXRDaGlsZEJ5TmFtZSh0ZXh0TmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKCF0ZXh0Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0Tm9kZSA9IG5ldyBjYy5Ob2RlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGV4dE5vZGUuYW5jaG9yWCA9IDA7XG4gICAgICAgICAgICAgICAgdGV4dE5vZGUuYW5jaG9yWSA9IDE7XG4gICAgICAgICAgICAgICAgdGV4dE5vZGUuYW5nbGUgPSAtb2JqZWN0LnJvdGF0aW9uO1xuICAgICAgICAgICAgICAgIHRleHROb2RlLnggPSBvYmplY3QueCAtIGxlZnRUb3BYO1xuICAgICAgICAgICAgICAgIHRleHROb2RlLnkgPSBvYmplY3QueSAtIGxlZnRUb3BZO1xuICAgICAgICAgICAgICAgIHRleHROb2RlLm5hbWUgPSB0ZXh0TmFtZTtcbiAgICAgICAgICAgICAgICB0ZXh0Tm9kZS5wYXJlbnQgPSB0aGlzLm5vZGU7XG4gICAgICAgICAgICAgICAgdGV4dE5vZGUuY29sb3IgPSBvYmplY3QuY29sb3I7XG4gICAgICAgICAgICAgICAgdGV4dE5vZGUub3BhY2l0eSA9IHRoaXMuX29wYWNpdHk7XG4gICAgICAgICAgICAgICAgdGV4dE5vZGUuc2V0U2libGluZ0luZGV4KGNoaWxkSWR4KTtcblxuICAgICAgICAgICAgICAgIGxldCBsYWJlbCA9IHRleHROb2RlLmdldENvbXBvbmVudChjYy5MYWJlbCk7XG4gICAgICAgICAgICAgICAgaWYgKCFsYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbCA9IHRleHROb2RlLmFkZENvbXBvbmVudChjYy5MYWJlbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGxhYmVsLm92ZXJmbG93ID0gY2MuTGFiZWwuT3ZlcmZsb3cuU0hSSU5LO1xuICAgICAgICAgICAgICAgIGxhYmVsLmxpbmVIZWlnaHQgPSBvYmplY3QuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIGxhYmVsLnN0cmluZyA9IG9iamVjdC50ZXh0O1xuICAgICAgICAgICAgICAgIGxhYmVsLmhvcml6b250YWxBbGlnbiA9IG9iamVjdC5oYWxpZ247XG4gICAgICAgICAgICAgICAgbGFiZWwudmVydGljYWxBbGlnbiA9IG9iamVjdC52YWxpZ247XG4gICAgICAgICAgICAgICAgbGFiZWwuZm9udFNpemUgPSBvYmplY3QucGl4ZWxzaXplO1xuXG4gICAgICAgICAgICAgICAgdGV4dE5vZGUud2lkdGggPSBvYmplY3Qud2lkdGg7XG4gICAgICAgICAgICAgICAgdGV4dE5vZGUuaGVpZ2h0ID0gb2JqZWN0LmhlaWdodDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG9ialR5cGUgPT09IFRNWE9iamVjdFR5cGUuSU1BR0UpIHtcbiAgICAgICAgICAgICAgICBsZXQgZ3JpZCA9IHRleEdyaWRzWyhvYmplY3QuZ2lkICYgRkxJUFBFRF9NQVNLKSA+Pj4gMF07XG4gICAgICAgICAgICAgICAgaWYgKCFncmlkKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBsZXQgdGlsZXNldCA9IGdyaWQudGlsZXNldDtcbiAgICAgICAgICAgICAgICBsZXQgaW1nTmFtZSA9IFwiaW1nXCIgKyBvYmplY3QuaWQ7XG4gICAgICAgICAgICAgICAgYWxpdmVOb2Rlc1tpbWdOYW1lXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgbGV0IGltZ05vZGUgPSB0aGlzLm5vZGUuZ2V0Q2hpbGRCeU5hbWUoaW1nTmFtZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBEZWxldGUgaW1hZ2Ugbm9kZXMgaW1wbGVtZW50ZWQgYXMgcHJpdmF0ZSBub2Rlc1xuICAgICAgICAgICAgICAgIC8vIFVzZSBjYy5Ob2RlIHRvIGltcGxlbWVudCBub2RlLWxldmVsIHJlcXVpcmVtZW50c1xuICAgICAgICAgICAgICAgIGlmIChpbWdOb2RlIGluc3RhbmNlb2YgY2MuUHJpdmF0ZU5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaW1nTm9kZS5yZW1vdmVGcm9tUGFyZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIGltZ05vZGUuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICAgICBpbWdOb2RlID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIWltZ05vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaW1nTm9kZSA9IG5ldyBjYy5Ob2RlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKE9yaWVudGF0aW9uLklTTyA9PSBtYXBJbmZvLm9yaWVudGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGltZ05vZGUuYW5jaG9yWCA9IDAuNTtcbiAgICAgICAgICAgICAgICAgICAgaW1nTm9kZS5hbmNob3JZID0gMDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpbWdOb2RlLmFuY2hvclggPSAwO1xuICAgICAgICAgICAgICAgICAgICBpbWdOb2RlLmFuY2hvclkgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpbWdOb2RlLmFuZ2xlID0gLW9iamVjdC5yb3RhdGlvbjtcbiAgICAgICAgICAgICAgICBpbWdOb2RlLnggPSBvYmplY3QueCAtIGxlZnRUb3BYICsgdGlsZXNldC50aWxlT2Zmc2V0Lng7XG4gICAgICAgICAgICAgICAgaW1nTm9kZS55ID0gb2JqZWN0LnkgLSBsZWZ0VG9wWSArIHRpbGVzZXQudGlsZU9mZnNldC55O1xuICAgICAgICAgICAgICAgIGltZ05vZGUubmFtZSA9IGltZ05hbWU7XG4gICAgICAgICAgICAgICAgaW1nTm9kZS5wYXJlbnQgPSB0aGlzLm5vZGU7XG4gICAgICAgICAgICAgICAgaW1nTm9kZS5vcGFjaXR5ID0gdGhpcy5fb3BhY2l0eTtcbiAgICAgICAgICAgICAgICBpbWdOb2RlLnNldFNpYmxpbmdJbmRleChjaGlsZElkeCk7XG5cbiAgICAgICAgICAgICAgICBsZXQgc3AgPSBpbWdOb2RlLmdldENvbXBvbmVudChjYy5TcHJpdGUpO1xuICAgICAgICAgICAgICAgIGlmICghc3ApIHtcbiAgICAgICAgICAgICAgICAgICAgc3AgPSBpbWdOb2RlLmFkZENvbXBvbmVudChjYy5TcHJpdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgc3BmID0gbmV3IGNjLlNwcml0ZUZyYW1lKCk7XG4gICAgICAgICAgICAgICAgc3BmLnNldFRleHR1cmUoZ3JpZC50aWxlc2V0LnNvdXJjZUltYWdlLCBjYy5yZWN0KGdyaWQpKTtcbiAgICAgICAgICAgICAgICBzcC5zcHJpdGVGcmFtZSA9IHNwZjtcblxuICAgICAgICAgICAgICAgIGltZ05vZGUud2lkdGggPSBvYmplY3Qud2lkdGg7XG4gICAgICAgICAgICAgICAgaW1nTm9kZS5oZWlnaHQgPSBvYmplY3QuaGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX29iamVjdHMgPSBvYmplY3RzO1xuXG4gICAgICAgIC8vIGRlc3Ryb3kgdXNlbGVzcyBub2RlXG4gICAgICAgIGxldCBjaGlsZHJlbiA9IHRoaXMubm9kZS5jaGlsZHJlbjtcbiAgICAgICAgbGV0IGltZ0V4cCA9IC9eaW1nXFxkKyQvO1xuICAgICAgICBsZXQgdHh0RXhwID0gL150ZXh0XFxkKyQvO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgbGV0IGMgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgICAgIGxldCBjTmFtZSA9IGMuX25hbWU7XG4gICAgICAgICAgICBsZXQgaXNVc2VsZXNzID0gaW1nRXhwLnRlc3QoY05hbWUpO1xuICAgICAgICAgICAgaXNVc2VsZXNzID0gaXNVc2VsZXNzIHx8IHR4dEV4cC50ZXN0KGNOYW1lKTtcbiAgICAgICAgICAgIGlmIChpc1VzZWxlc3MgJiYgIWFsaXZlTm9kZXNbY05hbWVdKSBjLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG5jYy5UaWxlZE9iamVjdEdyb3VwID0gbW9kdWxlLmV4cG9ydHMgPSBUaWxlZE9iamVjdEdyb3VwO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gQ29weXJpZ2h0IChjKSAyMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcbiBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxuXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKlxuICogISNlbiBSZW5kZXJzIHRoZSBUTVggb2JqZWN0IGdyb3VwLlxuICogISN6aCDmuLLmn5MgdG14IG9iamVjdCBncm91cOOAglxuICogQGNsYXNzIFRpbGVkT2JqZWN0R3JvdXBcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG52YXIgVGlsZWRPYmplY3RHcm91cCA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuVGlsZWRPYmplY3RHcm91cCcsXG5cbiAgICAvLyBJbmhlcml0cyBmcm9tIHRoZSBhYnN0cmFjdCBjbGFzcyBkaXJlY3RseSxcbiAgICAvLyBiZWNhdXNlIFRpbGVkTGF5ZXIgbm90IGNyZWF0ZSBvciBtYWludGFpbnMgdGhlIHNnTm9kZSBieSBpdHNlbGYuXG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBPZmZzZXQgcG9zaXRpb24gb2YgY2hpbGQgb2JqZWN0cy5cbiAgICAgKiAhI3poIOiOt+WPluWtkOWvueixoeeahOWBj+enu+S9jee9ruOAglxuICAgICAqIEBtZXRob2QgZ2V0UG9zaXRpb25PZmZzZXRcbiAgICAgKiBAcmV0dXJuIHtWZWMyfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogbGV0IG9mZnNldCA9IHRNWE9iamVjdEdyb3VwLmdldFBvc2l0aW9uT2Zmc2V0KCk7XG4gICAgICovXG4gICAgZ2V0UG9zaXRpb25PZmZzZXQ6IGZ1bmN0aW9uIGdldFBvc2l0aW9uT2Zmc2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcG9zaXRpb25PZmZzZXQ7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogISNlbiBMaXN0IG9mIHByb3BlcnRpZXMgc3RvcmVkIGluIGEgZGljdGlvbmFyeS5cbiAgICAgKiAhI3poIOS7peaYoOWwhOeahOW9ouW8j+iOt+WPluWxnuaAp+WIl+ihqOOAglxuICAgICAqIEBtZXRob2QgZ2V0UHJvcGVydGllc1xuICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGxldCBvZmZzZXQgPSB0TVhPYmplY3RHcm91cC5nZXRQcm9wZXJ0aWVzKCk7XG4gICAgICovXG4gICAgZ2V0UHJvcGVydGllczogZnVuY3Rpb24gZ2V0UHJvcGVydGllcygpIHtcbiAgICAgICAgdGhpcy5fcHJvcGVydGllcztcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIEdldHMgdGhlIEdyb3VwIG5hbWUuXG4gICAgICogISN6aCDojrflj5bnu4TlkI3np7DjgIJcbiAgICAgKiBAbWV0aG9kIGdldEdyb3VwTmFtZVxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGxldCBncm91cE5hbWUgPSB0TVhPYmplY3RHcm91cC5nZXRHcm91cE5hbWU7XG4gICAgICovXG4gICAgZ2V0R3JvdXBOYW1lOiBmdW5jdGlvbiBnZXRHcm91cE5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ncm91cE5hbWU7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSB2YWx1ZSBmb3IgdGhlIHNwZWNpZmljIHByb3BlcnR5IG5hbWVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlOYW1lXG4gICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAqL1xuICAgIGdldFByb3BlcnR5OiBmdW5jdGlvbiBnZXRQcm9wZXJ0eShwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3BlcnRpZXNbcHJvcGVydHlOYW1lLnRvU3RyaW5nKCldO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBSZXR1cm4gdGhlIG9iamVjdCBmb3IgdGhlIHNwZWNpZmljIG9iamVjdCBuYW1lLiA8YnIgLz5cbiAgICAgKiBJdCB3aWxsIHJldHVybiB0aGUgMXN0IG9iamVjdCBmb3VuZCBvbiB0aGUgYXJyYXkgZm9yIHRoZSBnaXZlbiBuYW1lLlxuICAgICAqICEjemgg6I635Y+W5oyH5a6a55qE5a+56LGh44CCXG4gICAgICogQG1ldGhvZCBnZXRPYmplY3RcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb2JqZWN0TmFtZVxuICAgICAqIEByZXR1cm4ge09iamVjdHxOdWxsfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogbGV0IG9iamVjdCA9IHRNWE9iamVjdEdyb3VwLmdldE9iamVjdChcIkdyb3VwXCIpO1xuICAgICAqL1xuICAgIGdldE9iamVjdDogZnVuY3Rpb24gZ2V0T2JqZWN0KG9iamVjdE5hbWUpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuX29iamVjdHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBvYmogPSB0aGlzLl9vYmplY3RzW2ldO1xuICAgICAgICAgICAgaWYgKG9iaiAmJiBvYmoubmFtZSA9PT0gb2JqZWN0TmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gb2JqZWN0IG5vdCBmb3VuZFxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIEdldHMgdGhlIG9iamVjdHMuXG4gICAgICogISN6aCDojrflj5blr7nosaHmlbDnu4TjgIJcbiAgICAgKiBAbWV0aG9kIGdldE9iamVjdHNcbiAgICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGxldCBvYmplY3RzID0gdE1YT2JqZWN0R3JvdXAuZ2V0T2JqZWN0cygpO1xuICAgICAqL1xuICAgIGdldE9iamVjdHM6IGZ1bmN0aW9uIGdldE9iamVjdHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vYmplY3RzO1xuICAgIH0sXG4gICAgX2luaXQ6IGZ1bmN0aW9uIF9pbml0KGdyb3VwSW5mbywgbWFwSW5mbywgdGV4R3JpZHMpIHtcbiAgICAgICAgdmFyIFRpbGVkTWFwID0gY2MuVGlsZWRNYXA7XG4gICAgICAgIHZhciBUTVhPYmplY3RUeXBlID0gVGlsZWRNYXAuVE1YT2JqZWN0VHlwZTtcbiAgICAgICAgdmFyIE9yaWVudGF0aW9uID0gVGlsZWRNYXAuT3JpZW50YXRpb247XG4gICAgICAgIHZhciBTdGFnZ2VyQXhpcyA9IFRpbGVkTWFwLlN0YWdnZXJBeGlzO1xuICAgICAgICB2YXIgVGlsZUZsYWcgPSBUaWxlZE1hcC5UaWxlRmxhZztcbiAgICAgICAgdmFyIEZMSVBQRURfTUFTSyA9IFRpbGVGbGFnLkZMSVBQRURfTUFTSztcblxuICAgICAgICB0aGlzLl9ncm91cE5hbWUgPSBncm91cEluZm8ubmFtZTtcbiAgICAgICAgdGhpcy5fcG9zaXRpb25PZmZzZXQgPSBncm91cEluZm8ub2Zmc2V0O1xuICAgICAgICB0aGlzLl9tYXBJbmZvID0gbWFwSW5mbztcbiAgICAgICAgdGhpcy5fcHJvcGVydGllcyA9IGdyb3VwSW5mby5nZXRQcm9wZXJ0aWVzKCk7XG4gICAgICAgIHRoaXMuX29mZnNldCA9IGNjLnYyKGdyb3VwSW5mby5vZmZzZXQueCwgLWdyb3VwSW5mby5vZmZzZXQueSk7XG4gICAgICAgIHRoaXMuX29wYWNpdHkgPSBncm91cEluZm8uX29wYWNpdHk7XG5cbiAgICAgICAgdmFyIG1hcFNpemUgPSBtYXBJbmZvLl9tYXBTaXplO1xuICAgICAgICB2YXIgdGlsZVNpemUgPSBtYXBJbmZvLl90aWxlU2l6ZTtcbiAgICAgICAgdmFyIHdpZHRoID0gMCxcbiAgICAgICAgICAgIGhlaWdodCA9IDA7XG4gICAgICAgIGlmIChtYXBJbmZvLm9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IRVgpIHtcbiAgICAgICAgICAgIGlmIChtYXBJbmZvLmdldFN0YWdnZXJBeGlzKCkgPT09IFN0YWdnZXJBeGlzLlNUQUdHRVJBWElTX1gpIHtcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSB0aWxlU2l6ZS5oZWlnaHQgKiAobWFwU2l6ZS5oZWlnaHQgKyAwLjUpO1xuICAgICAgICAgICAgICAgIHdpZHRoID0gKHRpbGVTaXplLndpZHRoICsgbWFwSW5mby5nZXRIZXhTaWRlTGVuZ3RoKCkpICogTWF0aC5mbG9vcihtYXBTaXplLndpZHRoIC8gMikgKyB0aWxlU2l6ZS53aWR0aCAqIChtYXBTaXplLndpZHRoICUgMik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHdpZHRoID0gdGlsZVNpemUud2lkdGggKiAobWFwU2l6ZS53aWR0aCArIDAuNSk7XG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gKHRpbGVTaXplLmhlaWdodCArIG1hcEluZm8uZ2V0SGV4U2lkZUxlbmd0aCgpKSAqIE1hdGguZmxvb3IobWFwU2l6ZS5oZWlnaHQgLyAyKSArIHRpbGVTaXplLmhlaWdodCAqIChtYXBTaXplLmhlaWdodCAlIDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2lkdGggPSBtYXBTaXplLndpZHRoICogdGlsZVNpemUud2lkdGg7XG4gICAgICAgICAgICBoZWlnaHQgPSBtYXBTaXplLmhlaWdodCAqIHRpbGVTaXplLmhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5vZGUuc2V0Q29udGVudFNpemUod2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgdmFyIGxlZnRUb3BYID0gd2lkdGggKiB0aGlzLm5vZGUuYW5jaG9yWDtcbiAgICAgICAgdmFyIGxlZnRUb3BZID0gaGVpZ2h0ICogKDEgLSB0aGlzLm5vZGUuYW5jaG9yWSk7XG5cbiAgICAgICAgdmFyIG9iamVjdHMgPSBncm91cEluZm8uX29iamVjdHM7XG4gICAgICAgIHZhciBhbGl2ZU5vZGVzID0ge307XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBjaGlsZElkeCA9IG9iamVjdHMubGVuZ3RoIC0gMSwgbCA9IG9iamVjdHMubGVuZ3RoOyBpIDwgbDsgaSsrLCBjaGlsZElkeC0tKSB7XG4gICAgICAgICAgICB2YXIgb2JqZWN0ID0gb2JqZWN0c1tpXTtcbiAgICAgICAgICAgIHZhciBvYmpUeXBlID0gb2JqZWN0LnR5cGU7XG4gICAgICAgICAgICBvYmplY3Qub2Zmc2V0ID0gY2MudjIob2JqZWN0LngsIG9iamVjdC55KTtcblxuICAgICAgICAgICAgdmFyIHBvaW50cyA9IG9iamVjdC5wb2ludHMgfHwgb2JqZWN0LnBvbHlsaW5lUG9pbnRzO1xuICAgICAgICAgICAgaWYgKHBvaW50cykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHBpID0gMDsgcGkgPCBwb2ludHMubGVuZ3RoOyBwaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvaW50c1twaV0ueSAqPSAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChPcmllbnRhdGlvbi5JU08gIT09IG1hcEluZm8ub3JpZW50YXRpb24pIHtcbiAgICAgICAgICAgICAgICBvYmplY3QueSA9IGhlaWdodCAtIG9iamVjdC55O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgcG9zSWR4WCA9IG9iamVjdC54IC8gdGlsZVNpemUud2lkdGggKiAyO1xuICAgICAgICAgICAgICAgIHZhciBwb3NJZHhZID0gb2JqZWN0LnkgLyB0aWxlU2l6ZS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgb2JqZWN0LnggPSB0aWxlU2l6ZS53aWR0aCAvIDIgKiAobWFwU2l6ZS53aWR0aCArIHBvc0lkeFggLSBwb3NJZHhZKTtcbiAgICAgICAgICAgICAgICBvYmplY3QueSA9IHRpbGVTaXplLmhlaWdodCAvIDIgKiAobWFwU2l6ZS5oZWlnaHQgKiAyIC0gcG9zSWR4WCAtIHBvc0lkeFkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob2JqVHlwZSA9PT0gVE1YT2JqZWN0VHlwZS5URVhUKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRleHROYW1lID0gXCJ0ZXh0XCIgKyBvYmplY3QuaWQ7XG4gICAgICAgICAgICAgICAgYWxpdmVOb2Rlc1t0ZXh0TmFtZV0gPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgdmFyIHRleHROb2RlID0gdGhpcy5ub2RlLmdldENoaWxkQnlOYW1lKHRleHROYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAoIXRleHROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHROb2RlID0gbmV3IGNjLk5vZGUoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0ZXh0Tm9kZS5hbmNob3JYID0gMDtcbiAgICAgICAgICAgICAgICB0ZXh0Tm9kZS5hbmNob3JZID0gMTtcbiAgICAgICAgICAgICAgICB0ZXh0Tm9kZS5hbmdsZSA9IC1vYmplY3Qucm90YXRpb247XG4gICAgICAgICAgICAgICAgdGV4dE5vZGUueCA9IG9iamVjdC54IC0gbGVmdFRvcFg7XG4gICAgICAgICAgICAgICAgdGV4dE5vZGUueSA9IG9iamVjdC55IC0gbGVmdFRvcFk7XG4gICAgICAgICAgICAgICAgdGV4dE5vZGUubmFtZSA9IHRleHROYW1lO1xuICAgICAgICAgICAgICAgIHRleHROb2RlLnBhcmVudCA9IHRoaXMubm9kZTtcbiAgICAgICAgICAgICAgICB0ZXh0Tm9kZS5jb2xvciA9IG9iamVjdC5jb2xvcjtcbiAgICAgICAgICAgICAgICB0ZXh0Tm9kZS5vcGFjaXR5ID0gdGhpcy5fb3BhY2l0eTtcbiAgICAgICAgICAgICAgICB0ZXh0Tm9kZS5zZXRTaWJsaW5nSW5kZXgoY2hpbGRJZHgpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGxhYmVsID0gdGV4dE5vZGUuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKTtcbiAgICAgICAgICAgICAgICBpZiAoIWxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsID0gdGV4dE5vZGUuYWRkQ29tcG9uZW50KGNjLkxhYmVsKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsYWJlbC5vdmVyZmxvdyA9IGNjLkxhYmVsLk92ZXJmbG93LlNIUklOSztcbiAgICAgICAgICAgICAgICBsYWJlbC5saW5lSGVpZ2h0ID0gb2JqZWN0LmhlaWdodDtcbiAgICAgICAgICAgICAgICBsYWJlbC5zdHJpbmcgPSBvYmplY3QudGV4dDtcbiAgICAgICAgICAgICAgICBsYWJlbC5ob3Jpem9udGFsQWxpZ24gPSBvYmplY3QuaGFsaWduO1xuICAgICAgICAgICAgICAgIGxhYmVsLnZlcnRpY2FsQWxpZ24gPSBvYmplY3QudmFsaWduO1xuICAgICAgICAgICAgICAgIGxhYmVsLmZvbnRTaXplID0gb2JqZWN0LnBpeGVsc2l6ZTtcblxuICAgICAgICAgICAgICAgIHRleHROb2RlLndpZHRoID0gb2JqZWN0LndpZHRoO1xuICAgICAgICAgICAgICAgIHRleHROb2RlLmhlaWdodCA9IG9iamVjdC5oZWlnaHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvYmpUeXBlID09PSBUTVhPYmplY3RUeXBlLklNQUdFKSB7XG4gICAgICAgICAgICAgICAgdmFyIGdyaWQgPSB0ZXhHcmlkc1sob2JqZWN0LmdpZCAmIEZMSVBQRURfTUFTSykgPj4+IDBdO1xuICAgICAgICAgICAgICAgIGlmICghZ3JpZCkgY29udGludWU7XG4gICAgICAgICAgICAgICAgdmFyIHRpbGVzZXQgPSBncmlkLnRpbGVzZXQ7XG4gICAgICAgICAgICAgICAgdmFyIGltZ05hbWUgPSBcImltZ1wiICsgb2JqZWN0LmlkO1xuICAgICAgICAgICAgICAgIGFsaXZlTm9kZXNbaW1nTmFtZV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBpbWdOb2RlID0gdGhpcy5ub2RlLmdldENoaWxkQnlOYW1lKGltZ05hbWUpO1xuXG4gICAgICAgICAgICAgICAgLy8gRGVsZXRlIGltYWdlIG5vZGVzIGltcGxlbWVudGVkIGFzIHByaXZhdGUgbm9kZXNcbiAgICAgICAgICAgICAgICAvLyBVc2UgY2MuTm9kZSB0byBpbXBsZW1lbnQgbm9kZS1sZXZlbCByZXF1aXJlbWVudHNcbiAgICAgICAgICAgICAgICBpZiAoaW1nTm9kZSBpbnN0YW5jZW9mIGNjLlByaXZhdGVOb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGltZ05vZGUucmVtb3ZlRnJvbVBhcmVudCgpO1xuICAgICAgICAgICAgICAgICAgICBpbWdOb2RlLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgaW1nTm9kZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFpbWdOb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGltZ05vZGUgPSBuZXcgY2MuTm9kZSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChPcmllbnRhdGlvbi5JU08gPT0gbWFwSW5mby5vcmllbnRhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBpbWdOb2RlLmFuY2hvclggPSAwLjU7XG4gICAgICAgICAgICAgICAgICAgIGltZ05vZGUuYW5jaG9yWSA9IDA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaW1nTm9kZS5hbmNob3JYID0gMDtcbiAgICAgICAgICAgICAgICAgICAgaW1nTm9kZS5hbmNob3JZID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaW1nTm9kZS5hbmdsZSA9IC1vYmplY3Qucm90YXRpb247XG4gICAgICAgICAgICAgICAgaW1nTm9kZS54ID0gb2JqZWN0LnggLSBsZWZ0VG9wWCArIHRpbGVzZXQudGlsZU9mZnNldC54O1xuICAgICAgICAgICAgICAgIGltZ05vZGUueSA9IG9iamVjdC55IC0gbGVmdFRvcFkgKyB0aWxlc2V0LnRpbGVPZmZzZXQueTtcbiAgICAgICAgICAgICAgICBpbWdOb2RlLm5hbWUgPSBpbWdOYW1lO1xuICAgICAgICAgICAgICAgIGltZ05vZGUucGFyZW50ID0gdGhpcy5ub2RlO1xuICAgICAgICAgICAgICAgIGltZ05vZGUub3BhY2l0eSA9IHRoaXMuX29wYWNpdHk7XG4gICAgICAgICAgICAgICAgaW1nTm9kZS5zZXRTaWJsaW5nSW5kZXgoY2hpbGRJZHgpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHNwID0gaW1nTm9kZS5nZXRDb21wb25lbnQoY2MuU3ByaXRlKTtcbiAgICAgICAgICAgICAgICBpZiAoIXNwKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwID0gaW1nTm9kZS5hZGRDb21wb25lbnQoY2MuU3ByaXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHNwZiA9IG5ldyBjYy5TcHJpdGVGcmFtZSgpO1xuICAgICAgICAgICAgICAgIHNwZi5zZXRUZXh0dXJlKGdyaWQudGlsZXNldC5zb3VyY2VJbWFnZSwgY2MucmVjdChncmlkKSk7XG4gICAgICAgICAgICAgICAgc3Auc3ByaXRlRnJhbWUgPSBzcGY7XG5cbiAgICAgICAgICAgICAgICBpbWdOb2RlLndpZHRoID0gb2JqZWN0LndpZHRoO1xuICAgICAgICAgICAgICAgIGltZ05vZGUuaGVpZ2h0ID0gb2JqZWN0LmhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9vYmplY3RzID0gb2JqZWN0cztcblxuICAgICAgICAvLyBkZXN0cm95IHVzZWxlc3Mgbm9kZVxuICAgICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLm5vZGUuY2hpbGRyZW47XG4gICAgICAgIHZhciBpbWdFeHAgPSAvXmltZ1xcZCskLztcbiAgICAgICAgdmFyIHR4dEV4cCA9IC9edGV4dFxcZCskLztcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBuID0gY2hpbGRyZW4ubGVuZ3RoOyBfaSA8IG47IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBjID0gY2hpbGRyZW5bX2ldO1xuICAgICAgICAgICAgdmFyIGNOYW1lID0gYy5fbmFtZTtcbiAgICAgICAgICAgIHZhciBpc1VzZWxlc3MgPSBpbWdFeHAudGVzdChjTmFtZSk7XG4gICAgICAgICAgICBpc1VzZWxlc3MgPSBpc1VzZWxlc3MgfHwgdHh0RXhwLnRlc3QoY05hbWUpO1xuICAgICAgICAgICAgaWYgKGlzVXNlbGVzcyAmJiAhYWxpdmVOb2Rlc1tjTmFtZV0pIGMuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbmNjLlRpbGVkT2JqZWN0R3JvdXAgPSBtb2R1bGUuZXhwb3J0cyA9IFRpbGVkT2JqZWN0R3JvdXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa05EVkdsc1pXUlBZbXBsWTNSSGNtOTFjQzVxY3lKZExDSnVZVzFsY3lJNld5SlVhV3hsWkU5aWFtVmpkRWR5YjNWd0lpd2lZMk1pTENKRGJHRnpjeUlzSW01aGJXVWlMQ0psZUhSbGJtUnpJaXdpUTI5dGNHOXVaVzUwSWl3aVoyVjBVRzl6YVhScGIyNVBabVp6WlhRaUxDSmZjRzl6YVhScGIyNVBabVp6WlhRaUxDSm5aWFJRY205d1pYSjBhV1Z6SWl3aVgzQnliM0JsY25ScFpYTWlMQ0puWlhSSGNtOTFjRTVoYldVaUxDSmZaM0p2ZFhCT1lXMWxJaXdpWjJWMFVISnZjR1Z5ZEhraUxDSndjbTl3WlhKMGVVNWhiV1VpTENKMGIxTjBjbWx1WnlJc0ltZGxkRTlpYW1WamRDSXNJbTlpYW1WamRFNWhiV1VpTENKcElpd2liR1Z1SWl3aVgyOWlhbVZqZEhNaUxDSnNaVzVuZEdnaUxDSnZZbW9pTENKblpYUlBZbXBsWTNSeklpd2lYMmx1YVhRaUxDSm5jbTkxY0VsdVptOGlMQ0p0WVhCSmJtWnZJaXdpZEdWNFIzSnBaSE1pTENKVWFXeGxaRTFoY0NJc0lsUk5XRTlpYW1WamRGUjVjR1VpTENKUGNtbGxiblJoZEdsdmJpSXNJbE4wWVdkblpYSkJlR2x6SWl3aVZHbHNaVVpzWVdjaUxDSkdURWxRVUVWRVgwMUJVMHNpTENKdlptWnpaWFFpTENKZmJXRndTVzVtYnlJc0lsOXZabVp6WlhRaUxDSjJNaUlzSW5naUxDSjVJaXdpWDI5d1lXTnBkSGtpTENKdFlYQlRhWHBsSWl3aVgyMWhjRk5wZW1VaUxDSjBhV3hsVTJsNlpTSXNJbDkwYVd4bFUybDZaU0lzSW5kcFpIUm9JaXdpYUdWcFoyaDBJaXdpYjNKcFpXNTBZWFJwYjI0aUxDSklSVmdpTENKblpYUlRkR0ZuWjJWeVFYaHBjeUlzSWxOVVFVZEhSVkpCV0VsVFgxZ2lMQ0puWlhSSVpYaFRhV1JsVEdWdVozUm9JaXdpVFdGMGFDSXNJbVpzYjI5eUlpd2libTlrWlNJc0luTmxkRU52Ym5SbGJuUlRhWHBsSWl3aWJHVm1kRlJ2Y0ZnaUxDSmhibU5vYjNKWUlpd2liR1ZtZEZSdmNGa2lMQ0poYm1Ob2IzSlpJaXdpYjJKcVpXTjBjeUlzSW1Gc2FYWmxUbTlrWlhNaUxDSmphR2xzWkVsa2VDSXNJbXdpTENKdlltcGxZM1FpTENKdlltcFVlWEJsSWl3aWRIbHdaU0lzSW5CdmFXNTBjeUlzSW5CdmJIbHNhVzVsVUc5cGJuUnpJaXdpY0draUxDSkpVMDhpTENKd2IzTkpaSGhZSWl3aWNHOXpTV1I0V1NJc0lsUkZXRlFpTENKMFpYaDBUbUZ0WlNJc0ltbGtJaXdpZEdWNGRFNXZaR1VpTENKblpYUkRhR2xzWkVKNVRtRnRaU0lzSWs1dlpHVWlMQ0poYm1kc1pTSXNJbkp2ZEdGMGFXOXVJaXdpY0dGeVpXNTBJaXdpWTI5c2IzSWlMQ0p2Y0dGamFYUjVJaXdpYzJWMFUybGliR2x1WjBsdVpHVjRJaXdpYkdGaVpXd2lMQ0puWlhSRGIyMXdiMjVsYm5RaUxDSk1ZV0psYkNJc0ltRmtaRU52YlhCdmJtVnVkQ0lzSW05MlpYSm1iRzkzSWl3aVQzWmxjbVpzYjNjaUxDSlRTRkpKVGtzaUxDSnNhVzVsU0dWcFoyaDBJaXdpYzNSeWFXNW5JaXdpZEdWNGRDSXNJbWh2Y21sNmIyNTBZV3hCYkdsbmJpSXNJbWhoYkdsbmJpSXNJblpsY25ScFkyRnNRV3hwWjI0aUxDSjJZV3hwWjI0aUxDSm1iMjUwVTJsNlpTSXNJbkJwZUdWc2MybDZaU0lzSWtsTlFVZEZJaXdpWjNKcFpDSXNJbWRwWkNJc0luUnBiR1Z6WlhRaUxDSnBiV2RPWVcxbElpd2lhVzFuVG05a1pTSXNJbEJ5YVhaaGRHVk9iMlJsSWl3aWNtVnRiM1psUm5KdmJWQmhjbVZ1ZENJc0ltUmxjM1J5YjNraUxDSjBhV3hsVDJabWMyVjBJaXdpYzNBaUxDSlRjSEpwZEdVaUxDSnpjR1lpTENKVGNISnBkR1ZHY21GdFpTSXNJbk5sZEZSbGVIUjFjbVVpTENKemIzVnlZMlZKYldGblpTSXNJbkpsWTNRaUxDSnpjSEpwZEdWR2NtRnRaU0lzSW1Ob2FXeGtjbVZ1SWl3aWFXMW5SWGh3SWl3aWRIaDBSWGh3SWl3aWJpSXNJbU1pTENKalRtRnRaU0lzSWw5dVlXMWxJaXdpYVhOVmMyVnNaWE56SWl3aWRHVnpkQ0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVGNVFrRTdPenM3T3p0QlFVMUJMRWxCUVVsQkxHMUNRVUZ0UWtNc1IwRkJSME1zUzBGQlNDeERRVUZUTzBGQlF6VkNReXhWUVVGTkxIRkNRVVJ6UWpzN1FVRkhOVUk3UVVGRFFUdEJRVU5CUXl4aFFVRlRTQ3hIUVVGSFNTeFRRVXhuUWpzN1FVRlBOVUk3T3pzN096czdPMEZCVVVGRExIRkNRV1kwUWl3clFrRmxVRHRCUVVOcVFpeGxRVUZQTEV0QlFVdERMR1ZCUVZvN1FVRkRTQ3hMUVdwQ01rSTdPenRCUVcxQ05VSTdPenM3T3pzN08wRkJVVUZETEdsQ1FUTkNORUlzTWtKQk1rSllPMEZCUTJJc1lVRkJTME1zVjBGQlREdEJRVU5JTEV0Qk4wSXlRanM3TzBGQkswSTFRanM3T3pzN096czdRVUZSUVVNc1owSkJka00wUWl3d1FrRjFRMW83UVVGRFdpeGxRVUZQTEV0QlFVdERMRlZCUVZvN1FVRkRTQ3hMUVhwRE1rSTdPenRCUVRKRE5VSTdPenM3TzBGQlMwRkRMR1ZCYUVRMFFpeDFRa0ZuUkdaRExGbEJhRVJsTEVWQlowUkVPMEZCUTNaQ0xHVkJRVThzUzBGQlMwb3NWMEZCVEN4RFFVRnBRa2tzWVVGQllVTXNVVUZCWWl4RlFVRnFRaXhEUVVGUU8wRkJRMGdzUzBGc1JESkNPenM3UVVGdlJEVkNPenM3T3pzN096czdPenRCUVZkQlF5eGhRUzlFTkVJc2NVSkJLMFJxUWtNc1ZVRXZSR2xDTEVWQkswUk1PMEZCUTI1Q0xHRkJRVXNzU1VGQlNVTXNTVUZCU1N4RFFVRlNMRVZCUVZkRExFMUJRVTBzUzBGQlMwTXNVVUZCVEN4RFFVRmpReXhOUVVGd1F5eEZRVUUwUTBnc1NVRkJTVU1zUjBGQmFFUXNSVUZCY1VSRUxFZEJRWEpFTEVWQlFUQkVPMEZCUTNSRUxHZENRVUZKU1N4TlFVRk5MRXRCUVV0R0xGRkJRVXdzUTBGQlkwWXNRMEZCWkN4RFFVRldPMEZCUTBFc1owSkJRVWxKTEU5QlFVOUJMRWxCUVVsc1FpeEpRVUZLTEV0QlFXRmhMRlZCUVhoQ0xFVkJRVzlETzBGQlEyaERMSFZDUVVGUFN5eEhRVUZRTzBGQlEwZzdRVUZEU2p0QlFVTkVPMEZCUTBFc1pVRkJUeXhKUVVGUU8wRkJRMGdzUzBGNFJUSkNPenM3UVVFd1JUVkNPenM3T3pzN096dEJRVkZCUXl4alFXeEdORUlzZDBKQmEwWmtPMEZCUTFZc1pVRkJUeXhMUVVGTFNDeFJRVUZhTzBGQlEwZ3NTMEZ3UmpKQ08wRkJjMFkxUWtrc1UwRjBSalJDTEdsQ1FYTkdja0pETEZOQmRFWnhRaXhGUVhOR1ZrTXNUMEYwUmxVc1JVRnpSa1JETEZGQmRFWkRMRVZCYzBaVE8wRkJRMnBETEZsQlFVMURMRmRCUVZjeFFpeEhRVUZITUVJc1VVRkJjRUk3UVVGRFFTeFpRVUZOUXl4blFrRkJaMEpFTEZOQlFWTkRMR0ZCUVM5Q08wRkJRMEVzV1VGQlRVTXNZMEZCWTBZc1UwRkJVMFVzVjBGQk4wSTdRVUZEUVN4WlFVRk5ReXhqUVVGalNDeFRRVUZUUnl4WFFVRTNRanRCUVVOQkxGbEJRVTFETEZkQlFWZEtMRk5CUVZOSkxGRkJRVEZDTzBGQlEwRXNXVUZCVFVNc1pVRkJaVVFzVTBGQlUwTXNXVUZCT1VJN08wRkJSVUVzWVVGQlMzSkNMRlZCUVV3c1IwRkJhMEpoTEZWQlFWVnlRaXhKUVVFMVFqdEJRVU5CTEdGQlFVdEpMR1ZCUVV3c1IwRkJkVUpwUWl4VlFVRlZVeXhOUVVGcVF6dEJRVU5CTEdGQlFVdERMRkZCUVV3c1IwRkJaMEpVTEU5QlFXaENPMEZCUTBFc1lVRkJTMmhDTEZkQlFVd3NSMEZCYlVKbExGVkJRVlZvUWl4aFFVRldMRVZCUVc1Q08wRkJRMEVzWVVGQlN6SkNMRTlCUVV3c1IwRkJaV3hETEVkQlFVZHRReXhGUVVGSUxFTkJRVTFhTEZWQlFWVlRMRTFCUVZZc1EwRkJhVUpKTEVOQlFYWkNMRVZCUVRCQ0xFTkJRVU5pTEZWQlFWVlRMRTFCUVZZc1EwRkJhVUpMTEVOQlFUVkRMRU5CUVdZN1FVRkRRU3hoUVVGTFF5eFJRVUZNTEVkQlFXZENaaXhWUVVGVlpTeFJRVUV4UWpzN1FVRkZRU3haUVVGSlF5eFZRVUZWWml4UlFVRlJaMElzVVVGQmRFSTdRVUZEUVN4WlFVRkpReXhYUVVGWGFrSXNVVUZCVVd0Q0xGTkJRWFpDTzBGQlEwRXNXVUZCU1VNc1VVRkJVU3hEUVVGYU8wRkJRVUVzV1VGQlpVTXNVMEZCVXl4RFFVRjRRanRCUVVOQkxGbEJRVWx3UWl4UlFVRlJjVUlzVjBGQlVpeExRVUYzUW1wQ0xGbEJRVmxyUWl4SFFVRjRReXhGUVVFMlF6dEJRVU42UXl4blFrRkJTWFJDTEZGQlFWRjFRaXhqUVVGU0xFOUJRVFpDYkVJc1dVRkJXVzFDTEdGQlFUZERMRVZCUVRSRU8wRkJRM2hFU2l4NVFrRkJVMGdzVTBGQlUwY3NUVUZCVkN4SlFVRnRRa3dzVVVGQlVVc3NUVUZCVWl4SFFVRnBRaXhIUVVGd1F5eERRVUZVTzBGQlEwRkVMSGRDUVVGUkxFTkJRVU5HTEZOQlFWTkZMRXRCUVZRc1IwRkJhVUp1UWl4UlFVRlJlVUlzWjBKQlFWSXNSVUZCYkVJc1NVRkJaMFJETEV0QlFVdERMRXRCUVV3c1EwRkJWMW9zVVVGQlVVa3NTMEZCVWl4SFFVRm5RaXhEUVVFelFpeERRVUZvUkN4SFFVRm5Sa1lzVTBGQlUwVXNTMEZCVkN4SlFVRnJRa29zVVVGQlVVa3NTMEZCVWl4SFFVRm5RaXhEUVVGc1F5eERRVUY0Ump0QlFVTklMR0ZCU0VRc1RVRkhUenRCUVVOSVFTeDNRa0ZCVVVZc1UwRkJVMFVzUzBGQlZDeEpRVUZyUWtvc1VVRkJVVWtzUzBGQlVpeEhRVUZuUWl4SFFVRnNReXhEUVVGU08wRkJRMEZETEhsQ1FVRlRMRU5CUVVOSUxGTkJRVk5ITEUxQlFWUXNSMEZCYTBKd1FpeFJRVUZSZVVJc1owSkJRVklzUlVGQmJrSXNTVUZCYVVSRExFdEJRVXRETEV0QlFVd3NRMEZCVjFvc1VVRkJVVXNzVFVGQlVpeEhRVUZwUWl4RFFVRTFRaXhEUVVGcVJDeEhRVUZyUmtnc1UwRkJVMGNzVFVGQlZDeEpRVUZ0UWt3c1VVRkJVVXNzVFVGQlVpeEhRVUZwUWl4RFFVRndReXhEUVVFelJqdEJRVU5JTzBGQlEwb3NVMEZTUkN4TlFWRlBPMEZCUTBoRUxHOUNRVUZSU2l4UlFVRlJTU3hMUVVGU0xFZEJRV2RDUml4VFFVRlRSU3hMUVVGcVF6dEJRVU5CUXl4eFFrRkJVMHdzVVVGQlVVc3NUVUZCVWl4SFFVRnBRa2dzVTBGQlUwY3NUVUZCYmtNN1FVRkRTRHRCUVVORUxHRkJRVXRSTEVsQlFVd3NRMEZCVlVNc1kwRkJWaXhEUVVGNVFsWXNTMEZCZWtJc1JVRkJaME5ETEUxQlFXaERPenRCUVVWQkxGbEJRVWxWTEZkQlFWZFlMRkZCUVZFc1MwRkJTMU1zU1VGQlRDeERRVUZWUnl4UFFVRnFRenRCUVVOQkxGbEJRVWxETEZkQlFWZGFMRlZCUVZVc1NVRkJTU3hMUVVGTFVTeEpRVUZNTEVOQlFWVkxMRTlCUVhoQ0xFTkJRV1k3TzBGQlJVRXNXVUZCU1VNc1ZVRkJWVzVETEZWQlFWVk1MRkZCUVhoQ08wRkJRMEVzV1VGQlNYbERMR0ZCUVdFc1JVRkJha0k3UVVGRFFTeGhRVUZMTEVsQlFVa3pReXhKUVVGSkxFTkJRVklzUlVGQlZ6UkRMRmRCUVZkR0xGRkJRVkYyUXl4TlFVRlNMRWRCUVdsQ0xFTkJRWFpETEVWQlFUQkRNRU1zU1VGQlNVZ3NVVUZCVVhaRExFMUJRVE5FTEVWQlFXMUZTQ3hKUVVGSk5rTXNRMEZCZGtVc1JVRkJNRVUzUXl4TFFVRkxORU1zVlVGQkwwVXNSVUZCTWtZN1FVRkRka1lzWjBKQlFVbEZMRk5CUVZOS0xGRkJRVkV4UXl4RFFVRlNMRU5CUVdJN1FVRkRRU3huUWtGQlNTdERMRlZCUVZWRUxFOUJRVTlGTEVsQlFYSkNPMEZCUTBGR0xHMUNRVUZQT1VJc1RVRkJVQ3hIUVVGblFtaERMRWRCUVVkdFF5eEZRVUZJTEVOQlFVMHlRaXhQUVVGUE1VSXNRMEZCWWl4RlFVRm5RakJDTEU5QlFVOTZRaXhEUVVGMlFpeERRVUZvUWpzN1FVRkZRU3huUWtGQlNUUkNMRk5CUVZOSUxFOUJRVTlITEUxQlFWQXNTVUZCYVVKSUxFOUJRVTlKTEdOQlFYSkRPMEZCUTBFc1owSkJRVWxFTEUxQlFVb3NSVUZCV1R0QlFVTlNMSEZDUVVGTExFbEJRVWxGTEV0QlFVc3NRMEZCWkN4RlFVRnBRa0VzUzBGQlMwWXNUMEZCVHpsRExFMUJRVGRDTEVWQlFYRkRaMFFzU1VGQmNrTXNSVUZCTWtNN1FVRkRka05HTERKQ1FVRlBSU3hGUVVGUUxFVkJRVmM1UWl4RFFVRllMRWxCUVdkQ0xFTkJRVU1zUTBGQmFrSTdRVUZEU0R0QlFVTktPenRCUVVWRUxHZENRVUZKVkN4WlFVRlpkME1zUjBGQldpeExRVUZ2UWpWRExGRkJRVkZ4UWl4WFFVRm9ReXhGUVVFMlF6dEJRVU42UTJsQ0xIVkNRVUZQZWtJc1EwRkJVQ3hIUVVGWFR5eFRRVUZUYTBJc1QwRkJUM3BDTEVOQlFUTkNPMEZCUTBnc1lVRkdSQ3hOUVVWUE8wRkJRMGdzYjBKQlFVbG5ReXhWUVVGVlVDeFBRVUZQTVVJc1EwRkJVQ3hIUVVGWFN5eFRRVUZUUlN4TFFVRndRaXhIUVVFMFFpeERRVUV4UXp0QlFVTkJMRzlDUVVGSk1rSXNWVUZCVlZJc1QwRkJUM3BDTEVOQlFWQXNSMEZCVjBrc1UwRkJVMGNzVFVGQmJFTTdRVUZEUVd0Q0xIVkNRVUZQTVVJc1EwRkJVQ3hIUVVGWFN5eFRRVUZUUlN4TFFVRlVMRWRCUVdsQ0xFTkJRV3BDTEVsQlFYTkNTaXhSUVVGUlNTeExRVUZTTEVkQlFXZENNRUlzVDBGQmFFSXNSMEZCTUVKRExFOUJRV2hFTEVOQlFWZzdRVUZEUVZJc2RVSkJRVTk2UWl4RFFVRlFMRWRCUVZkSkxGTkJRVk5ITEUxQlFWUXNSMEZCYTBJc1EwRkJiRUlzU1VGQmRVSk1MRkZCUVZGTExFMUJRVklzUjBGQmFVSXNRMEZCYWtJc1IwRkJjVUo1UWl4UFFVRnlRaXhIUVVFclFrTXNUMEZCZEVRc1EwRkJXRHRCUVVOSU96dEJRVVZFTEdkQ1FVRkpVQ3haUVVGWmNFTXNZMEZCWXpSRExFbEJRVGxDTEVWQlFXOURPMEZCUTJoRExHOUNRVUZKUXl4WFFVRlhMRk5CUVZOV0xFOUJRVTlYTEVWQlFTOUNPMEZCUTBGa0xESkNRVUZYWVN4UlFVRllMRWxCUVhWQ0xFbEJRWFpDT3p0QlFVVkJMRzlDUVVGSlJTeFhRVUZYTEV0QlFVdDBRaXhKUVVGTUxFTkJRVlYxUWl4alFVRldMRU5CUVhsQ1NDeFJRVUY2UWl4RFFVRm1PMEZCUTBFc2IwSkJRVWtzUTBGQlEwVXNVVUZCVEN4RlFVRmxPMEZCUTFoQkxDdENRVUZYTEVsQlFVa3hSU3hIUVVGSE5FVXNTVUZCVUN4RlFVRllPMEZCUTBnN08wRkJSVVJHTEhsQ1FVRlRia0lzVDBGQlZDeEhRVUZ0UWl4RFFVRnVRanRCUVVOQmJVSXNlVUpCUVZOcVFpeFBRVUZVTEVkQlFXMUNMRU5CUVc1Q08wRkJRMEZwUWl4NVFrRkJVMGNzUzBGQlZDeEhRVUZwUWl4RFFVRkRaaXhQUVVGUFowSXNVVUZCZWtJN1FVRkRRVW9zZVVKQlFWTjBReXhEUVVGVUxFZEJRV0V3UWl4UFFVRlBNVUlzUTBGQlVDeEhRVUZYYTBJc1VVRkJlRUk3UVVGRFFXOUNMSGxDUVVGVGNrTXNRMEZCVkN4SFFVRmhlVUlzVDBGQlQzcENMRU5CUVZBc1IwRkJWMjFDTEZGQlFYaENPMEZCUTBGclFpeDVRa0ZCVTNoRkxFbEJRVlFzUjBGQlowSnpSU3hSUVVGb1FqdEJRVU5CUlN4NVFrRkJVMHNzVFVGQlZDeEhRVUZyUWl4TFFVRkxNMElzU1VGQmRrSTdRVUZEUVhOQ0xIbENRVUZUVFN4TFFVRlVMRWRCUVdsQ2JFSXNUMEZCVDJ0Q0xFdEJRWGhDTzBGQlEwRk9MSGxDUVVGVFR5eFBRVUZVTEVkQlFXMUNMRXRCUVVzelF5eFJRVUY0UWp0QlFVTkJiME1zZVVKQlFWTlJMR1ZCUVZRc1EwRkJlVUowUWl4UlFVRjZRanM3UVVGRlFTeHZRa0ZCU1hWQ0xGRkJRVkZVTEZOQlFWTlZMRmxCUVZRc1EwRkJjMEp3Uml4SFFVRkhjVVlzUzBGQmVrSXNRMEZCV2p0QlFVTkJMRzlDUVVGSkxFTkJRVU5HTEV0QlFVd3NSVUZCV1R0QlFVTlNRU3cwUWtGQlVWUXNVMEZCVTFrc1dVRkJWQ3hEUVVGelFuUkdMRWRCUVVkeFJpeExRVUY2UWl4RFFVRlNPMEZCUTBnN08wRkJSVVJHTEhOQ1FVRk5TU3hSUVVGT0xFZEJRV2xDZGtZc1IwRkJSM0ZHTEV0QlFVZ3NRMEZCVTBjc1VVRkJWQ3hEUVVGclFrTXNUVUZCYmtNN1FVRkRRVTRzYzBKQlFVMVBMRlZCUVU0c1IwRkJiVUkxUWl4UFFVRlBiRUlzVFVGQk1VSTdRVUZEUVhWRExITkNRVUZOVVN4TlFVRk9MRWRCUVdVM1FpeFBRVUZQT0VJc1NVRkJkRUk3UVVGRFFWUXNjMEpCUVUxVkxHVkJRVTRzUjBGQmQwSXZRaXhQUVVGUFowTXNUVUZCTDBJN1FVRkRRVmdzYzBKQlFVMVpMR0ZCUVU0c1IwRkJjMEpxUXl4UFFVRlBhME1zVFVGQk4wSTdRVUZEUVdJc2MwSkJRVTFqTEZGQlFVNHNSMEZCYVVKdVF5eFBRVUZQYjBNc1UwRkJlRUk3TzBGQlJVRjRRaXg1UWtGQlV5OUNMRXRCUVZRc1IwRkJhVUp0UWl4UFFVRlBia0lzUzBGQmVFSTdRVUZEUVN0Q0xIbENRVUZUT1VJc1RVRkJWQ3hIUVVGclFtdENMRTlCUVU5c1FpeE5RVUY2UWp0QlFVTklPenRCUVVWRUxHZENRVUZKYlVJc1dVRkJXWEJETEdOQlFXTjNSU3hMUVVFNVFpeEZRVUZ4UXp0QlFVTnFReXh2UWtGQlNVTXNUMEZCVHpORkxGTkJRVk1zUTBGQlEzRkRMRTlCUVU5MVF5eEhRVUZRTEVkQlFXRjBSU3haUVVGa0xFMUJRV2RETEVOQlFYcERMRU5CUVZnN1FVRkRRU3h2UWtGQlNTeERRVUZEY1VVc1NVRkJUQ3hGUVVGWE8wRkJRMWdzYjBKQlFVbEZMRlZCUVZWR0xFdEJRVXRGTEU5QlFXNUNPMEZCUTBFc2IwSkJRVWxETEZWQlFWVXNVVUZCVVhwRExFOUJRVTlYTEVWQlFUZENPMEZCUTBGa0xESkNRVUZYTkVNc1QwRkJXQ3hKUVVGelFpeEpRVUYwUWp0QlFVTkJMRzlDUVVGSlF5eFZRVUZWTEV0QlFVdHdSQ3hKUVVGTUxFTkJRVlYxUWl4alFVRldMRU5CUVhsQ05FSXNUMEZCZWtJc1EwRkJaRHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNiMEpCUVVsRExHMUNRVUZ0UW5oSExFZEJRVWQ1Unl4WFFVRXhRaXhGUVVGMVF6dEJRVU51UTBRc05FSkJRVkZGTEdkQ1FVRlNPMEZCUTBGR0xEUkNRVUZSUnl4UFFVRlNPMEZCUTBGSUxEaENRVUZWTEVsQlFWWTdRVUZEU0RzN1FVRkZSQ3h2UWtGQlNTeERRVUZEUVN4UFFVRk1MRVZCUVdNN1FVRkRWa0VzT0VKQlFWVXNTVUZCU1hoSExFZEJRVWMwUlN4SlFVRlFMRVZCUVZZN1FVRkRTRHM3UVVGRlJDeHZRa0ZCU1doRUxGbEJRVmwzUXl4SFFVRmFMRWxCUVcxQ05VTXNVVUZCVVhGQ0xGZEJRUzlDTEVWQlFUUkRPMEZCUTNoRE1rUXNORUpCUVZGcVJDeFBRVUZTTEVkQlFXdENMRWRCUVd4Q08wRkJRMEZwUkN3MFFrRkJVUzlETEU5QlFWSXNSMEZCYTBJc1EwRkJiRUk3UVVGRFNDeHBRa0ZJUkN4TlFVZFBPMEZCUTBnclF5dzBRa0ZCVVdwRUxFOUJRVklzUjBGQmEwSXNRMEZCYkVJN1FVRkRRV2xFTERSQ1FVRlJMME1zVDBGQlVpeEhRVUZyUWl4RFFVRnNRanRCUVVOSU8wRkJRMFFyUXl4M1FrRkJVVE5DTEV0QlFWSXNSMEZCWjBJc1EwRkJRMllzVDBGQlQyZENMRkZCUVhoQ08wRkJRMEV3UWl4M1FrRkJVWEJGTEVOQlFWSXNSMEZCV1RCQ0xFOUJRVTh4UWl4RFFVRlFMRWRCUVZkclFpeFJRVUZZTEVkQlFYTkNaMFFzVVVGQlVVMHNWVUZCVWl4RFFVRnRRbmhGTEVOQlFYSkVPMEZCUTBGdlJTeDNRa0ZCVVc1RkxFTkJRVklzUjBGQldYbENMRTlCUVU5NlFpeERRVUZRTEVkQlFWZHRRaXhSUVVGWUxFZEJRWE5DT0VNc1VVRkJVVTBzVlVGQlVpeERRVUZ0UW5aRkxFTkJRWEpFTzBGQlEwRnRSU3gzUWtGQlVYUkhMRWxCUVZJc1IwRkJaWEZITEU5QlFXWTdRVUZEUVVNc2QwSkJRVkY2UWl4TlFVRlNMRWRCUVdsQ0xFdEJRVXN6UWl4SlFVRjBRanRCUVVOQmIwUXNkMEpCUVZGMlFpeFBRVUZTTEVkQlFXdENMRXRCUVVzelF5eFJRVUYyUWp0QlFVTkJhMFVzZDBKQlFWRjBRaXhsUVVGU0xFTkJRWGRDZEVJc1VVRkJlRUk3TzBGQlJVRXNiMEpCUVVscFJDeExRVUZMVEN4UlFVRlJjRUlzV1VGQlVpeERRVUZ4UW5CR0xFZEJRVWM0Unl4TlFVRjRRaXhEUVVGVU8wRkJRMEVzYjBKQlFVa3NRMEZCUTBRc1JVRkJUQ3hGUVVGVE8wRkJRMHhCTEhsQ1FVRkxUQ3hSUVVGUmJFSXNXVUZCVWl4RFFVRnhRblJHTEVkQlFVYzRSeXhOUVVGNFFpeERRVUZNTzBGQlEwZzdRVUZEUkN4dlFrRkJTVU1zVFVGQlRTeEpRVUZKTDBjc1IwRkJSMmRJTEZkQlFWQXNSVUZCVmp0QlFVTkJSQ3h2UWtGQlNVVXNWVUZCU2l4RFFVRmxZaXhMUVVGTFJTeFBRVUZNTEVOQlFXRlpMRmRCUVRWQ0xFVkJRWGxEYkVnc1IwRkJSMjFJTEVsQlFVZ3NRMEZCVVdZc1NVRkJVaXhEUVVGNlF6dEJRVU5CVXl4dFFrRkJSMDhzVjBGQlNDeEhRVUZwUWt3c1IwRkJha0k3TzBGQlJVRlFMSGRDUVVGUk4wUXNTMEZCVWl4SFFVRm5RbTFDTEU5QlFVOXVRaXhMUVVGMlFqdEJRVU5CTmtRc2QwSkJRVkUxUkN4TlFVRlNMRWRCUVdsQ2EwSXNUMEZCVDJ4Q0xFMUJRWGhDTzBGQlEwZzdRVUZEU2p0QlFVTkVMR0ZCUVVzeFFpeFJRVUZNTEVkQlFXZENkME1zVDBGQmFFSTdPMEZCUlVFN1FVRkRRU3haUVVGSk1rUXNWMEZCVnl4TFFVRkxha1VzU1VGQlRDeERRVUZWYVVVc1VVRkJla0k3UVVGRFFTeFpRVUZKUXl4VFFVRlRMRlZCUVdJN1FVRkRRU3haUVVGSlF5eFRRVUZUTEZkQlFXSTdRVUZEUVN4aFFVRkxMRWxCUVVsMlJ5eExRVUZKTEVOQlFWSXNSVUZCVjNkSExFbEJRVWxJTEZOQlFWTnNSeXhOUVVFM1FpeEZRVUZ4UTBnc1MwRkJTWGRITEVOQlFYcERMRVZCUVRSRGVFY3NTVUZCTlVNc1JVRkJhVVE3UVVGRE4wTXNaMEpCUVVsNVJ5eEpRVUZKU2l4VFFVRlRja2NzUlVGQlZDeERRVUZTTzBGQlEwRXNaMEpCUVVrd1J5eFJRVUZSUkN4RlFVRkZSU3hMUVVGa08wRkJRMEVzWjBKQlFVbERMRmxCUVZsT0xFOUJRVTlQTEVsQlFWQXNRMEZCV1Vnc1MwRkJXaXhEUVVGb1FqdEJRVU5CUlN4M1FrRkJXVUVzWVVGQllVd3NUMEZCVDAwc1NVRkJVQ3hEUVVGWlNDeExRVUZhTEVOQlFYcENPMEZCUTBFc1owSkJRVWxGTEdGQlFXRXNRMEZCUTJwRkxGZEJRVmNyUkN4TFFVRllMRU5CUVd4Q0xFVkJRWEZEUkN4RlFVRkZaQ3hQUVVGR08wRkJRM2hETzBGQlEwbzdRVUZvVURKQ0xFTkJRVlFzUTBGQmRrSTdPMEZCYlZCQk0wY3NSMEZCUjBRc1owSkJRVWdzUjBGQmMwSXJTQ3hQUVVGUFF5eFBRVUZRTEVkQlFXbENhRWtzWjBKQlFYWkRJaXdpWm1sc1pTSTZJa05EVkdsc1pXUlBZbXBsWTNSSGNtOTFjQzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z1EyOXdlWEpwWjJoMElDaGpLU0F5TURFMklFTm9kV3R2Ym1jZ1ZHVmphRzV2Ykc5bmFXVnpJRWx1WXk1Y2JpQkRiM0I1Y21sbmFIUWdLR01wSURJd01UY3RNakF4T0NCWWFXRnRaVzRnV1dGcWFTQlRiMlowZDJGeVpTQkRieTRzSUV4MFpDNWNibHh1SUdoMGRIQnpPaTh2ZDNkM0xtTnZZMjl6TG1OdmJTOWNibHh1SUZCbGNtMXBjM05wYjI0Z2FYTWdhR1Z5WldKNUlHZHlZVzUwWldRc0lHWnlaV1VnYjJZZ1kyaGhjbWRsTENCMGJ5QmhibmtnY0dWeWMyOXVJRzlpZEdGcGJtbHVaeUJoSUdOdmNIbGNiaUJ2WmlCMGFHbHpJSE52Wm5SM1lYSmxJR0Z1WkNCaGMzTnZZMmxoZEdWa0lHVnVaMmx1WlNCemIzVnlZMlVnWTI5a1pTQW9kR2hsSUZ3aVUyOW1kSGRoY21WY0lpa3NJR0VnYkdsdGFYUmxaQ3hjYmlCM2IzSnNaSGRwWkdVc0lISnZlV0ZzZEhrdFpuSmxaU3dnYm05dUxXRnpjMmxuYm1GaWJHVXNJSEpsZG05allXSnNaU0JoYm1RZ2JtOXVMV1Y0WTJ4MWMybDJaU0JzYVdObGJuTmxYRzRnZEc4Z2RYTmxJRU52WTI5eklFTnlaV0YwYjNJZ2MyOXNaV3g1SUhSdklHUmxkbVZzYjNBZ1oyRnRaWE1nYjI0Z2VXOTFjaUIwWVhKblpYUWdjR3hoZEdadmNtMXpMaUJaYjNVZ2MyaGhiR3hjYmlCdWIzUWdkWE5sSUVOdlkyOXpJRU55WldGMGIzSWdjMjltZEhkaGNtVWdabTl5SUdSbGRtVnNiM0JwYm1jZ2IzUm9aWElnYzI5bWRIZGhjbVVnYjNJZ2RHOXZiSE1nZEdoaGRDZHpYRzRnZFhObFpDQm1iM0lnWkdWMlpXeHZjR2x1WnlCbllXMWxjeTRnV1c5MUlHRnlaU0J1YjNRZ1ozSmhiblJsWkNCMGJ5QndkV0pzYVhOb0xDQmthWE4wY21saWRYUmxMRnh1SUhOMVlteHBZMlZ1YzJVc0lHRnVaQzl2Y2lCelpXeHNJR052Y0dsbGN5QnZaaUJEYjJOdmN5QkRjbVZoZEc5eUxseHVYRzRnVkdobElITnZablIzWVhKbElHOXlJSFJ2YjJ4eklHbHVJSFJvYVhNZ1RHbGpaVzV6WlNCQlozSmxaVzFsYm5RZ1lYSmxJR3hwWTJWdWMyVmtMQ0J1YjNRZ2MyOXNaQzVjYmlCWWFXRnRaVzRnV1dGcWFTQlRiMlowZDJGeVpTQkRieTRzSUV4MFpDNGdjbVZ6WlhKMlpYTWdZV3hzSUhKcFoyaDBjeUJ1YjNRZ1pYaHdjbVZ6YzJ4NUlHZHlZVzUwWldRZ2RHOGdlVzkxTGx4dVhHNGdWRWhGSUZOUFJsUlhRVkpGSUVsVElGQlNUMVpKUkVWRUlGd2lRVk1nU1ZOY0lpd2dWMGxVU0U5VlZDQlhRVkpTUVU1VVdTQlBSaUJCVGxrZ1MwbE9SQ3dnUlZoUVVrVlRVeUJQVWx4dUlFbE5VRXhKUlVRc0lFbE9RMHhWUkVsT1J5QkNWVlFnVGs5VUlFeEpUVWxVUlVRZ1ZFOGdWRWhGSUZkQlVsSkJUbFJKUlZNZ1QwWWdUVVZTUTBoQlRsUkJRa2xNU1ZSWkxGeHVJRVpKVkU1RlUxTWdSazlTSUVFZ1VFRlNWRWxEVlV4QlVpQlFWVkpRVDFORklFRk9SQ0JPVDA1SlRrWlNTVTVIUlUxRlRsUXVJRWxPSUU1UElFVldSVTVVSUZOSVFVeE1JRlJJUlZ4dUlFRlZWRWhQVWxNZ1QxSWdRMDlRV1ZKSlIwaFVJRWhQVEVSRlVsTWdRa1VnVEVsQlFreEZJRVpQVWlCQlRsa2dRMHhCU1Uwc0lFUkJUVUZIUlZNZ1QxSWdUMVJJUlZKY2JpQk1TVUZDU1V4SlZGa3NJRmRJUlZSSVJWSWdTVTRnUVU0Z1FVTlVTVTlPSUU5R0lFTlBUbFJTUVVOVUxDQlVUMUpVSUU5U0lFOVVTRVZTVjBsVFJTd2dRVkpKVTBsT1J5QkdVazlOTEZ4dUlFOVZWQ0JQUmlCUFVpQkpUaUJEVDA1T1JVTlVTVTlPSUZkSlZFZ2dWRWhGSUZOUFJsUlhRVkpGSUU5U0lGUklSU0JWVTBVZ1QxSWdUMVJJUlZJZ1JFVkJURWxPUjFNZ1NVNWNiaUJVU0VVZ1UwOUdWRmRCVWtVdVhHNGdLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2k5Y2JpOHFLbHh1SUNvZ0lTTmxiaUJTWlc1a1pYSnpJSFJvWlNCVVRWZ2diMkpxWldOMElHZHliM1Z3TGx4dUlDb2dJU042YUNEbXVMTG1uNU1nZEcxNElHOWlhbVZqZENCbmNtOTFjT09BZ2x4dUlDb2dRR05zWVhOeklGUnBiR1ZrVDJKcVpXTjBSM0p2ZFhCY2JpQXFJRUJsZUhSbGJtUnpJRU52YlhCdmJtVnVkRnh1SUNvdlhHNXNaWFFnVkdsc1pXUlBZbXBsWTNSSGNtOTFjQ0E5SUdOakxrTnNZWE56S0h0Y2JpQWdJQ0J1WVcxbE9pQW5ZMk11Vkdsc1pXUlBZbXBsWTNSSGNtOTFjQ2NzWEc1Y2JpQWdJQ0F2THlCSmJtaGxjbWwwY3lCbWNtOXRJSFJvWlNCaFluTjBjbUZqZENCamJHRnpjeUJrYVhKbFkzUnNlU3hjYmlBZ0lDQXZMeUJpWldOaGRYTmxJRlJwYkdWa1RHRjVaWElnYm05MElHTnlaV0YwWlNCdmNpQnRZV2x1ZEdGcGJuTWdkR2hsSUhOblRtOWtaU0JpZVNCcGRITmxiR1l1WEc0Z0lDQWdaWGgwWlc1a2N6b2dZMk11UTI5dGNHOXVaVzUwTEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJQWm1aelpYUWdjRzl6YVhScGIyNGdiMllnWTJocGJHUWdiMkpxWldOMGN5NWNiaUFnSUNBZ0tpQWhJM3BvSU9pT3QrV1BsdVd0a09XdnVlaXhvZWVhaE9XQmorZW51K1M5amVlOXJ1T0FnbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdaMlYwVUc5emFYUnBiMjVQWm1aelpYUmNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdFdaV015ZlZ4dUlDQWdJQ0FxSUVCbGVHRnRjR3hsWEc0Z0lDQWdJQ29nYkdWMElHOW1abk5sZENBOUlIUk5XRTlpYW1WamRFZHliM1Z3TG1kbGRGQnZjMmwwYVc5dVQyWm1jMlYwS0NrN1hHNGdJQ0FnSUNvdlhHNGdJQ0FnWjJWMFVHOXphWFJwYjI1UFptWnpaWFFnS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY0c5emFYUnBiMjVQWm1aelpYUTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1RHbHpkQ0J2WmlCd2NtOXdaWEowYVdWeklITjBiM0psWkNCcGJpQmhJR1JwWTNScGIyNWhjbmt1WEc0Z0lDQWdJQ29nSVNONmFDRGt1NlhtbUtEbHNJVG5tb1RsdmFMbHZJL29qcmZsajVibHNaN21nS2ZsaUpmb29hampnSUpjYmlBZ0lDQWdLaUJBYldWMGFHOWtJR2RsZEZCeWIzQmxjblJwWlhOY2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0UFltcGxZM1I5WEc0Z0lDQWdJQ29nUUdWNFlXMXdiR1ZjYmlBZ0lDQWdLaUJzWlhRZ2IyWm1jMlYwSUQwZ2RFMVlUMkpxWldOMFIzSnZkWEF1WjJWMFVISnZjR1Z5ZEdsbGN5Z3BPMXh1SUNBZ0lDQXFMMXh1SUNBZ0lHZGxkRkJ5YjNCbGNuUnBaWE1nS0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5d2NtOXdaWEowYVdWek8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1SUVkbGRITWdkR2hsSUVkeWIzVndJRzVoYldVdVhHNGdJQ0FnSUNvZ0lTTjZhQ0RvanJmbGo1Ym51NFRsa0kzbnA3RGpnSUpjYmlBZ0lDQWdLaUJBYldWMGFHOWtJR2RsZEVkeWIzVndUbUZ0WlZ4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTFOMGNtbHVaMzFjYmlBZ0lDQWdLaUJBWlhoaGJYQnNaVnh1SUNBZ0lDQXFJR3hsZENCbmNtOTFjRTVoYldVZ1BTQjBUVmhQWW1wbFkzUkhjbTkxY0M1blpYUkhjbTkxY0U1aGJXVTdYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1oyVjBSM0p2ZFhCT1lXMWxJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMmR5YjNWd1RtRnRaVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVW1WMGRYSnVJSFJvWlNCMllXeDFaU0JtYjNJZ2RHaGxJSE53WldOcFptbGpJSEJ5YjNCbGNuUjVJRzVoYldWY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnY0hKdmNHVnlkSGxPWVcxbFhHNGdJQ0FnSUNvZ1FISmxkSFZ5YmlCN1QySnFaV04wZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJR2RsZEZCeWIzQmxjblI1SUNod2NtOXdaWEowZVU1aGJXVXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzQnliM0JsY25ScFpYTmJjSEp2Y0dWeWRIbE9ZVzFsTG5SdlUzUnlhVzVuS0NsZE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1WEc0Z0lDQWdJQ29nVW1WMGRYSnVJSFJvWlNCdlltcGxZM1FnWm05eUlIUm9aU0J6Y0dWamFXWnBZeUJ2WW1wbFkzUWdibUZ0WlM0Z1BHSnlJQzgrWEc0Z0lDQWdJQ29nU1hRZ2QybHNiQ0J5WlhSMWNtNGdkR2hsSURGemRDQnZZbXBsWTNRZ1ptOTFibVFnYjI0Z2RHaGxJR0Z5Y21GNUlHWnZjaUIwYUdVZ1oybDJaVzRnYm1GdFpTNWNiaUFnSUNBZ0tpQWhJM3BvSU9pT3QrV1BsdWFNaCtXdW11ZWFoT1d2dWVpeG9lT0FnbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdaMlYwVDJKcVpXTjBYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlHOWlhbVZqZEU1aGJXVmNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdFBZbXBsWTNSOFRuVnNiSDFjYmlBZ0lDQWdLaUJBWlhoaGJYQnNaVnh1SUNBZ0lDQXFJR3hsZENCdlltcGxZM1FnUFNCMFRWaFBZbXBsWTNSSGNtOTFjQzVuWlhSUFltcGxZM1FvWENKSGNtOTFjRndpS1R0Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JuWlhSUFltcGxZM1FnS0c5aWFtVmpkRTVoYldVcElIdGNiaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBc0lHeGxiaUE5SUhSb2FYTXVYMjlpYW1WamRITXViR1Z1WjNSb095QnBJRHdnYkdWdU95QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdlltb2dQU0IwYUdsekxsOXZZbXBsWTNSelcybGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzlpYWlBbUppQnZZbW91Ym1GdFpTQTlQVDBnYjJKcVpXTjBUbUZ0WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdlltbzdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdMeThnYjJKcVpXTjBJRzV2ZENCbWIzVnVaRnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJIWlhSeklIUm9aU0J2WW1wbFkzUnpMbHh1SUNBZ0lDQXFJQ0VqZW1nZzZJNjM1WStXNWErNTZMR2g1cFd3NTd1RTQ0Q0NYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQm5aWFJQWW1wbFkzUnpYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdRWEp5WVhsOVhHNGdJQ0FnSUNvZ1FHVjRZVzF3YkdWY2JpQWdJQ0FnS2lCc1pYUWdiMkpxWldOMGN5QTlJSFJOV0U5aWFtVmpkRWR5YjNWd0xtZGxkRTlpYW1WamRITW9LVHRjYmlBZ0lDQWdLaTljYmlBZ0lDQm5aWFJQWW1wbFkzUnpJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjlpYW1WamRITTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lGOXBibWwwSUNobmNtOTFjRWx1Wm04c0lHMWhjRWx1Wm04c0lIUmxlRWR5YVdSektTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElGUnBiR1ZrVFdGd0lEMGdZMk11Vkdsc1pXUk5ZWEE3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRlJOV0U5aWFtVmpkRlI1Y0dVZ1BTQlVhV3hsWkUxaGNDNVVUVmhQWW1wbFkzUlVlWEJsTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JQY21sbGJuUmhkR2x2YmlBOUlGUnBiR1ZrVFdGd0xrOXlhV1Z1ZEdGMGFXOXVPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQlRkR0ZuWjJWeVFYaHBjeUE5SUZScGJHVmtUV0Z3TGxOMFlXZG5aWEpCZUdsek8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCVWFXeGxSbXhoWnlBOUlGUnBiR1ZrVFdGd0xsUnBiR1ZHYkdGbk8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCR1RFbFFVRVZFWDAxQlUwc2dQU0JVYVd4bFJteGhaeTVHVEVsUVVFVkVYMDFCVTBzN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlozSnZkWEJPWVcxbElEMGdaM0p2ZFhCSmJtWnZMbTVoYldVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNCdmMybDBhVzl1VDJabWMyVjBJRDBnWjNKdmRYQkpibVp2TG05bVpuTmxkRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZiV0Z3U1c1bWJ5QTlJRzFoY0VsdVptODdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzQnliM0JsY25ScFpYTWdQU0JuY205MWNFbHVabTh1WjJWMFVISnZjR1Z5ZEdsbGN5Z3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXZabVp6WlhRZ1BTQmpZeTUyTWlobmNtOTFjRWx1Wm04dWIyWm1jMlYwTG5nc0lDMW5jbTkxY0VsdVptOHViMlptYzJWMExua3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXZjR0ZqYVhSNUlEMGdaM0p2ZFhCSmJtWnZMbDl2Y0dGamFYUjVPMXh1WEc0Z0lDQWdJQ0FnSUd4bGRDQnRZWEJUYVhwbElEMGdiV0Z3U1c1bWJ5NWZiV0Z3VTJsNlpUdGNiaUFnSUNBZ0lDQWdiR1YwSUhScGJHVlRhWHBsSUQwZ2JXRndTVzVtYnk1ZmRHbHNaVk5wZW1VN1hHNGdJQ0FnSUNBZ0lHeGxkQ0IzYVdSMGFDQTlJREFzSUdobGFXZG9kQ0E5SURBN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h0WVhCSmJtWnZMbTl5YVdWdWRHRjBhVzl1SUQwOVBTQlBjbWxsYm5SaGRHbHZiaTVJUlZncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHRZWEJKYm1adkxtZGxkRk4wWVdkblpYSkJlR2x6S0NrZ1BUMDlJRk4wWVdkblpYSkJlR2x6TGxOVVFVZEhSVkpCV0VsVFgxZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvWldsbmFIUWdQU0IwYVd4bFUybDZaUzVvWldsbmFIUWdLaUFvYldGd1UybDZaUzVvWldsbmFIUWdLeUF3TGpVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZHBaSFJvSUQwZ0tIUnBiR1ZUYVhwbExuZHBaSFJvSUNzZ2JXRndTVzVtYnk1blpYUklaWGhUYVdSbFRHVnVaM1JvS0NrcElDb2dUV0YwYUM1bWJHOXZjaWh0WVhCVGFYcGxMbmRwWkhSb0lDOGdNaWtnS3lCMGFXeGxVMmw2WlM1M2FXUjBhQ0FxSUNodFlYQlRhWHBsTG5kcFpIUm9JQ1VnTWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRwWkhSb0lEMGdkR2xzWlZOcGVtVXVkMmxrZEdnZ0tpQW9iV0Z3VTJsNlpTNTNhV1IwYUNBcklEQXVOU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYUdWcFoyaDBJRDBnS0hScGJHVlRhWHBsTG1obGFXZG9kQ0FySUcxaGNFbHVabTh1WjJWMFNHVjRVMmxrWlV4bGJtZDBhQ2dwS1NBcUlFMWhkR2d1Wm14dmIzSW9iV0Z3VTJsNlpTNW9aV2xuYUhRZ0x5QXlLU0FySUhScGJHVlRhWHBsTG1obGFXZG9kQ0FxSUNodFlYQlRhWHBsTG1obGFXZG9kQ0FsSURJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkMmxrZEdnZ1BTQnRZWEJUYVhwbExuZHBaSFJvSUNvZ2RHbHNaVk5wZW1VdWQybGtkR2c3SUZ4dUlDQWdJQ0FnSUNBZ0lDQWdhR1ZwWjJoMElEMGdiV0Z3VTJsNlpTNW9aV2xuYUhRZ0tpQjBhV3hsVTJsNlpTNW9aV2xuYUhRN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1dWIyUmxMbk5sZEVOdmJuUmxiblJUYVhwbEtIZHBaSFJvTENCb1pXbG5hSFFwTzF4dVhHNGdJQ0FnSUNBZ0lHeGxkQ0JzWldaMFZHOXdXQ0E5SUhkcFpIUm9JQ29nZEdocGN5NXViMlJsTG1GdVkyaHZjbGc3WEc0Z0lDQWdJQ0FnSUd4bGRDQnNaV1owVkc5d1dTQTlJR2hsYVdkb2RDQXFJQ2d4SUMwZ2RHaHBjeTV1YjJSbExtRnVZMmh2Y2xrcE8xeHVYRzRnSUNBZ0lDQWdJR3hsZENCdlltcGxZM1J6SUQwZ1ozSnZkWEJKYm1adkxsOXZZbXBsWTNSek8xeHVJQ0FnSUNBZ0lDQnNaWFFnWVd4cGRtVk9iMlJsY3lBOUlIdDlPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Dd2dZMmhwYkdSSlpIZ2dQU0J2WW1wbFkzUnpMbXhsYm1kMGFDQXRJREVzSUd3Z1BTQnZZbXBsWTNSekxteGxibWQwYURzZ2FTQThJR3c3SUdrckt5d2dZMmhwYkdSSlpIZ3RMU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUc5aWFtVmpkQ0E5SUc5aWFtVmpkSE5iYVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2IySnFWSGx3WlNBOUlHOWlhbVZqZEM1MGVYQmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2IySnFaV04wTG05bVpuTmxkQ0E5SUdOakxuWXlLRzlpYW1WamRDNTRMQ0J2WW1wbFkzUXVlU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQndiMmx1ZEhNZ1BTQnZZbXBsWTNRdWNHOXBiblJ6SUh4OElHOWlhbVZqZEM1d2IyeDViR2x1WlZCdmFXNTBjenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h3YjJsdWRITXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0J3YVNBOUlEQTdJSEJwSUR3Z2NHOXBiblJ6TG14bGJtZDBhRHNnY0drckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2IybHVkSE5iY0dsZExua2dLajBnTFRFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1QzSnBaVzUwWVhScGIyNHVTVk5QSUNFOVBTQnRZWEJKYm1adkxtOXlhV1Z1ZEdGMGFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjJKcVpXTjBMbmtnUFNCb1pXbG5hSFFnTFNCdlltcGxZM1F1ZVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhCdmMwbGtlRmdnUFNCdlltcGxZM1F1ZUNBdklIUnBiR1ZUYVhwbExuZHBaSFJvSUNvZ01qdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY0c5elNXUjRXU0E5SUc5aWFtVmpkQzU1SUM4Z2RHbHNaVk5wZW1VdWFHVnBaMmgwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5aWFtVmpkQzU0SUQwZ2RHbHNaVk5wZW1VdWQybGtkR2dnTHlBeUlDb2dLRzFoY0ZOcGVtVXVkMmxrZEdnZ0t5QndiM05KWkhoWUlDMGdjRzl6U1dSNFdTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiMkpxWldOMExua2dQU0IwYVd4bFUybDZaUzVvWldsbmFIUWdMeUF5SUNvZ0tHMWhjRk5wZW1VdWFHVnBaMmgwSUNvZ01pQXRJSEJ2YzBsa2VGZ2dMU0J3YjNOSlpIaFpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzlpYWxSNWNHVWdQVDA5SUZSTldFOWlhbVZqZEZSNWNHVXVWRVZZVkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IwWlhoMFRtRnRaU0E5SUZ3aWRHVjRkRndpSUNzZ2IySnFaV04wTG1sa08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnNhWFpsVG05a1pYTmJkR1Y0ZEU1aGJXVmRJRDBnZEhKMVpUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMFpYaDBUbTlrWlNBOUlIUm9hWE11Ym05a1pTNW5aWFJEYUdsc1pFSjVUbUZ0WlNoMFpYaDBUbUZ0WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0YwWlhoMFRtOWtaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBaWGgwVG05a1pTQTlJRzVsZHlCall5NU9iMlJsS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR1Y0ZEU1dlpHVXVZVzVqYUc5eVdDQTlJREE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdWNGRFNXZaR1V1WVc1amFHOXlXU0E5SURFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHVjRkRTV2WkdVdVlXNW5iR1VnUFNBdGIySnFaV04wTG5KdmRHRjBhVzl1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSbGVIUk9iMlJsTG5nZ1BTQnZZbXBsWTNRdWVDQXRJR3hsWm5SVWIzQllPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJsZUhST2IyUmxMbmtnUFNCdlltcGxZM1F1ZVNBdElHeGxablJVYjNCWk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUmxlSFJPYjJSbExtNWhiV1VnUFNCMFpYaDBUbUZ0WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBUbTlrWlM1d1lYSmxiblFnUFNCMGFHbHpMbTV2WkdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHVjRkRTV2WkdVdVkyOXNiM0lnUFNCdlltcGxZM1F1WTI5c2IzSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR1Y0ZEU1dlpHVXViM0JoWTJsMGVTQTlJSFJvYVhNdVgyOXdZV05wZEhrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHVjRkRTV2WkdVdWMyVjBVMmxpYkdsdVowbHVaR1Y0S0dOb2FXeGtTV1I0S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JzWVdKbGJDQTlJSFJsZUhST2IyUmxMbWRsZEVOdmJYQnZibVZ1ZENoall5NU1ZV0psYkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZzWVdKbGJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1lXSmxiQ0E5SUhSbGVIUk9iMlJsTG1Ga1pFTnZiWEJ2Ym1WdWRDaGpZeTVNWVdKbGJDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hoWW1Wc0xtOTJaWEptYkc5M0lEMGdZMk11VEdGaVpXd3VUM1psY21ac2IzY3VVMGhTU1U1TE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGhZbVZzTG14cGJtVklaV2xuYUhRZ1BTQnZZbXBsWTNRdWFHVnBaMmgwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4aFltVnNMbk4wY21sdVp5QTlJRzlpYW1WamRDNTBaWGgwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4aFltVnNMbWh2Y21sNmIyNTBZV3hCYkdsbmJpQTlJRzlpYW1WamRDNW9ZV3hwWjI0N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHRmlaV3d1ZG1WeWRHbGpZV3hCYkdsbmJpQTlJRzlpYW1WamRDNTJZV3hwWjI0N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHRmlaV3d1Wm05dWRGTnBlbVVnUFNCdlltcGxZM1F1Y0dsNFpXeHphWHBsTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHVjRkRTV2WkdVdWQybGtkR2dnUFNCdlltcGxZM1F1ZDJsa2RHZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR1Y0ZEU1dlpHVXVhR1ZwWjJoMElEMGdiMkpxWldOMExtaGxhV2RvZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c5aWFsUjVjR1VnUFQwOUlGUk5XRTlpYW1WamRGUjVjR1V1U1UxQlIwVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ozSnBaQ0E5SUhSbGVFZHlhV1J6V3lodlltcGxZM1F1WjJsa0lDWWdSa3hKVUZCRlJGOU5RVk5MS1NBK1BqNGdNRjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRm5jbWxrS1NCamIyNTBhVzUxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkR2xzWlhObGRDQTlJR2R5YVdRdWRHbHNaWE5sZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhVzFuVG1GdFpTQTlJRndpYVcxblhDSWdLeUJ2WW1wbFkzUXVhV1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVd4cGRtVk9iMlJsYzF0cGJXZE9ZVzFsWFNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHbHRaMDV2WkdVZ1BTQjBhR2x6TG01dlpHVXVaMlYwUTJocGJHUkNlVTVoYldVb2FXMW5UbUZ0WlNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJFWld4bGRHVWdhVzFoWjJVZ2JtOWtaWE1nYVcxd2JHVnRaVzUwWldRZ1lYTWdjSEpwZG1GMFpTQnViMlJsYzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGVnpaU0JqWXk1T2IyUmxJSFJ2SUdsdGNHeGxiV1Z1ZENCdWIyUmxMV3hsZG1Wc0lISmxjWFZwY21WdFpXNTBjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocGJXZE9iMlJsSUdsdWMzUmhibU5sYjJZZ1kyTXVVSEpwZG1GMFpVNXZaR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzFuVG05a1pTNXlaVzF2ZG1WR2NtOXRVR0Z5Wlc1MEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdFowNXZaR1V1WkdWemRISnZlU2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBiV2RPYjJSbElEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdsdFowNXZaR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzFuVG05a1pTQTlJRzVsZHlCall5NU9iMlJsS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0U5eWFXVnVkR0YwYVc5dUxrbFRUeUE5UFNCdFlYQkpibVp2TG05eWFXVnVkR0YwYVc5dUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdFowNXZaR1V1WVc1amFHOXlXQ0E5SURBdU5UdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVcxblRtOWtaUzVoYm1Ob2IzSlpJRDBnTUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBiV2RPYjJSbExtRnVZMmh2Y2xnZ1BTQXdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJXZE9iMlJsTG1GdVkyaHZjbGtnUFNBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBiV2RPYjJSbExtRnVaMnhsSUQwZ0xXOWlhbVZqZEM1eWIzUmhkR2x2Ymp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJXZE9iMlJsTG5nZ1BTQnZZbXBsWTNRdWVDQXRJR3hsWm5SVWIzQllJQ3NnZEdsc1pYTmxkQzUwYVd4bFQyWm1jMlYwTG5nN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXMW5UbTlrWlM1NUlEMGdiMkpxWldOMExua2dMU0JzWldaMFZHOXdXU0FySUhScGJHVnpaWFF1ZEdsc1pVOW1abk5sZEM1NU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHRaMDV2WkdVdWJtRnRaU0E5SUdsdFowNWhiV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVcxblRtOWtaUzV3WVhKbGJuUWdQU0IwYUdsekxtNXZaR1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVcxblRtOWtaUzV2Y0dGamFYUjVJRDBnZEdocGN5NWZiM0JoWTJsMGVUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBiV2RPYjJSbExuTmxkRk5wWW14cGJtZEpibVJsZUNoamFHbHNaRWxrZUNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYzNBZ1BTQnBiV2RPYjJSbExtZGxkRU52YlhCdmJtVnVkQ2hqWXk1VGNISnBkR1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hjM0FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM0FnUFNCcGJXZE9iMlJsTG1Ga1pFTnZiWEJ2Ym1WdWRDaGpZeTVUY0hKcGRHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2MzQm1JRDBnYm1WM0lHTmpMbE53Y21sMFpVWnlZVzFsS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzQm1Mbk5sZEZSbGVIUjFjbVVvWjNKcFpDNTBhV3hsYzJWMExuTnZkWEpqWlVsdFlXZGxMQ0JqWXk1eVpXTjBLR2R5YVdRcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpjQzV6Y0hKcGRHVkdjbUZ0WlNBOUlITndaanRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdFowNXZaR1V1ZDJsa2RHZ2dQU0J2WW1wbFkzUXVkMmxrZEdnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXMW5UbTlrWlM1b1pXbG5hSFFnUFNCdlltcGxZM1F1YUdWcFoyaDBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyOWlhbVZqZEhNZ1BTQnZZbXBsWTNSek8xeHVYRzRnSUNBZ0lDQWdJQzh2SUdSbGMzUnliM2tnZFhObGJHVnpjeUJ1YjJSbFhHNGdJQ0FnSUNBZ0lHeGxkQ0JqYUdsc1pISmxiaUE5SUhSb2FYTXVibTlrWlM1amFHbHNaSEpsYmp0Y2JpQWdJQ0FnSUNBZ2JHVjBJR2x0WjBWNGNDQTlJQzllYVcxblhGeGtLeVF2TzF4dUlDQWdJQ0FnSUNCc1pYUWdkSGgwUlhod0lEMGdMMTUwWlhoMFhGeGtLeVF2TzF4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNQ3dnYmlBOUlHTm9hV3hrY21WdUxteGxibWQwYURzZ2FTQThJRzQ3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR01nUFNCamFHbHNaSEpsYmx0cFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmpUbUZ0WlNBOUlHTXVYMjVoYldVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2FYTlZjMlZzWlhOeklEMGdhVzFuUlhod0xuUmxjM1FvWTA1aGJXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FYTlZjMlZzWlhOeklEMGdhWE5WYzJWc1pYTnpJSHg4SUhSNGRFVjRjQzUwWlhOMEtHTk9ZVzFsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocGMxVnpaV3hsYzNNZ0ppWWdJV0ZzYVhabFRtOWtaWE5iWTA1aGJXVmRLU0JqTG1SbGMzUnliM2tvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JuMHBPMXh1WEc1all5NVVhV3hsWkU5aWFtVmpkRWR5YjNWd0lEMGdiVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlVhV3hsWkU5aWFtVmpkRWR5YjNWd08xeHVJbDE5Il19