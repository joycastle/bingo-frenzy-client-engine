(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/index.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _global = typeof window === 'undefined' ? global : window;
        _global.cc = _global.cc || {};
        _global._cc = _global._cc || {};
        require('./predefine');
        require('./polyfill/string');
        require('./polyfill/misc');
        require('./polyfill/array');
        require('./polyfill/object');
        require('./polyfill/array-buffer');
        require('./polyfill/number');
        if (!(CC_EDITOR && Editor.isMainProcess)) {
            require('./polyfill/typescript');
        }
        require('./cocos2d/core/predefine');
        if (!(CC_EDITOR && Editor.isMainProcess)) {
            require('./cocos2d');
        }
        require('./extends');
        if (CC_EDITOR) {
            if (Editor.isMainProcess) {
                Editor.versions['cocos2d'] = require('./package').version;
            }
        }
        module.exports = _global.cc;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,