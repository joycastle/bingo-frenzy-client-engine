(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/polyfill/object.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        if (!Object.assign) {
            Object.assign = function (target, source) {
                return cc.js.mixin(target, source);
            };
        }
        if (!Object.getOwnPropertyDescriptors) {
            Object.getOwnPropertyDescriptors = function (obj) {
                var descriptors = {};
                var ownKeys = Object.getOwnPropertyNames(obj);
                if (Object.getOwnPropertySymbols) {
                    ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(obj));
                }
                for (var i = 0; i < ownKeys.length; ++i) {
                    var key = ownKeys[i];
                    descriptors[key] = Object.getOwnPropertyDescriptor(obj, key);
                }
                return descriptors;
            };
        }
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,