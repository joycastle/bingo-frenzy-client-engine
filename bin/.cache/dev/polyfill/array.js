(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/polyfill/array.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        if (!Array.isArray) {
            Array.isArray = function (arg) {
                return Object.prototype.toString.call(arg) === '[object Array]';
            };
        }
        if (!Array.prototype.find) {
            Array.prototype.find = function (callback) {
                var length = this.length;
                for (var i = 0; i < length; i++) {
                    var element = this[i];
                    if (callback.call(this, element, i, this)) {
                        return element;
                    }
                }
                return undefined;
            };
        }
        if (!Array.prototype.includes) {
            Array.prototype.includes = function (value) {
                return this.indexOf(value) !== -1;
            };
        }
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFycmF5LmpzIiwiL1VzZXJzL2dhb3lhbmcvV29ya1NwYWNlL2pveWNhc3RsZS9iaW5nby9jbGllbnQvYmluZ28vZW5naW5lL3BvbHlmaWxsL2FycmF5LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiZmluZCIsImxlbmd0aCIsImkiLCJBcnJheSIsImlzQXJyYXkiLCJhcmciLCJjYWxsIiwiY2FsbGJhY2siLCJlbGVtZW50IiwidW5kZWZpbmVkIiwiaW5jbHVkZXMiLCJ2YWx1ZSIsImluZGV4T2YiXSwibWFwcGluZ3MiOiI7SUFBb0IsSUFBQSxPQUFBLEdBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQSxJQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUE7SUFDQSxJQUFBLFFBQUEsR0FBZSxPQUFBLEdBQUEsTUFBQSxHQUFBLEVBQUEsT0FBQSxFQUFBLEVBQUEsRUFBZjtJQUNMQSxJQUFPQyxVQUFBQSxHQUFVQyw4QkFBakJGO0lBRFgsSUFBQSxTQUFBLEdBQUEsT0FBQSxHQUFBLFVBQUEsT0FBQSxFQUFBO0FBQUEsUUFHSCxPQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUEsQ0FIRztBQUFBLEtBQUE7UUFLaUJHLE9BQU0saUJBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxFQUFBLFVBQUEsQ0FBTkE7S0FMakI7SUFPUUMsU0FBY0EsUUFBZEEsQ0FBSixPQUFJQSxFQUFKLE9BQUlBLEVBQUosTUFBSUEsRUFBSjtBQUFBLFFBQ2dCQyxJQUFJRCxDQUFBQSxPQUFKQyxFQUFZQTtBQUFBQSxZQUE1QixpQkFBQSxDQUFpQyxjQUFqQyxDQUFpQyxVQUFqQyxFQUFpQyxNQUFqQyxFQUE0QkE7QUFBQUEsU0FENUI7QUFBQTtRQVJSLElBQUksQ0FBQ0MsS0FBQUEsQ0FBTUMsT0FBWCxFQUFvQjtBQUFBLFlBQ2hCRCxLQUFBQSxDQUFNQyxPQUFORCxHQUFnQixVQUFVRSxHQUFWLEVBQWU7QUFBQSxnQkFDM0IsT0FBT1IsTUFBQUEsQ0FBT0MsU0FBUEQsQ0FBaUJFLFFBQWpCRixDQUEwQlMsSUFBMUJULENBQStCUSxHQUEvQlIsTUFBd0MsZ0JBQS9DLENBRDJCO0FBQUEsYUFBL0JNLENBRGdCO0FBQUE7UUFNcEIsSUFBSSxDQUFDQSxLQUFBQSxDQUFNTCxTQUFOSyxDQUFnQkgsSUFBckIsRUFBMkI7QUFBQSxZQUN2QkcsS0FBQUEsQ0FBTUwsU0FBTkssQ0FBZ0JILElBQWhCRyxHQUF1QixVQUFVSSxRQUFWLEVBQW9CO0FBQUEsZ0JBQ3ZDLElBQUlOLE1BQUFBLEdBQVMsS0FBS0EsTUFBbEIsQ0FEdUM7QUFBQSxnQkFFdkMsS0FBSyxJQUFJQyxDQUFBQSxHQUFJLENBQVIsQ0FBTCxDQUFnQkEsQ0FBQUEsR0FBSUQsTUFBcEIsRUFBNEJDLENBQUFBLEVBQTVCLEVBQWlDO0FBQUEsb0JBQzdCLElBQUlNLE9BQUFBLEdBQVUsS0FBS04sQ0FBTCxDQUFkLENBRDZCO0FBQUEsb0JBRTdCLElBQUlLLFFBQUFBLENBQVNELElBQVRDLENBQWMsSUFBZEEsRUFBb0JDLE9BQXBCRCxFQUE2QkwsQ0FBN0JLLEVBQWdDLElBQWhDQSxDQUFKLEVBQTJDO0FBQUEsd0JBQ3ZDLE9BQU9DLE9BQVAsQ0FEdUM7QUFBQSxxQkFGZDtBQUFBLGlCQUZNO0FBQUEsZ0JBU3ZDLE9BQU9DLFNBQVAsQ0FUdUM7QUFBQSxhQUEzQ04sQ0FEdUI7QUFBQTtRQWUzQixJQUFJLENBQUNBLEtBQUFBLENBQU1MLFNBQU5LLENBQWdCTyxRQUFyQixFQUErQjtBQUFBLFlBQzNCUCxLQUFBQSxDQUFNTCxTQUFOSyxDQUFnQk8sUUFBaEJQLEdBQTJCLFVBQVVRLEtBQVYsRUFBaUI7QUFBQSxnQkFDeEMsT0FBTyxLQUFLQyxPQUFMLENBQWFELEtBQWIsTUFBd0IsQ0FBQyxDQUFoQyxDQUR3QztBQUFBLGFBQTVDUixDQUQyQjtBQUFBLFNBYnZCO0FBQUE7SUFHUUksSUFBQUEsT0FBQUEsRUFBYztBQUFBLFFBQ1BDLFFBQUFBLENBQVAsUUFBQSxDQUFBLE9BQU9BLEVBQVAsU0FBT0EsRUFBUCxRQUFPQSxFQURPO0FBQUEsS0FBZEQsTUFHUDtBQUFBO1lBRUQsUUFBQSxDQUFBLFFBQUEsQ0FBQSxPQUFBLEVBQUEsU0FBQSxFQUFBLFFBQUE7V0FGQztBQUFBIiwiZmlsZSI6ImFycmF5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaWYgKCFBcnJheS5pc0FycmF5KSB7XG4gICAgQXJyYXkuaXNBcnJheSA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmcpID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgIH07XG59XG5cbmlmICghQXJyYXkucHJvdG90eXBlLmZpbmQpIHtcbiAgICBBcnJheS5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gdGhpc1tpXTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjay5jYWxsKHRoaXMsIGVsZW1lbnQsIGksIHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG59XG5cbi8vIGZvciBpZSAxMVxuaWYgKCFBcnJheS5wcm90b3R5cGUuaW5jbHVkZXMpIHtcbiAgICBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWx1ZSkgIT09IC0xO1xuICAgIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmICghQXJyYXkuaXNBcnJheSkge1xuICAgIEFycmF5LmlzQXJyYXkgPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJnKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgICB9O1xufVxuXG5pZiAoIUFycmF5LnByb3RvdHlwZS5maW5kKSB7XG4gICAgQXJyYXkucHJvdG90eXBlLmZpbmQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXNbaV07XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2suY2FsbCh0aGlzLCBlbGVtZW50LCBpLCB0aGlzKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xufVxuXG4vLyBmb3IgaWUgMTFcbmlmICghQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzKSB7XG4gICAgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4T2YodmFsdWUpICE9PSAtMTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1GeWNtRjVMbXB6SWwwc0ltNWhiV1Z6SWpwYklrRnljbUY1SWl3aWFYTkJjbkpoZVNJc0ltRnlaeUlzSWs5aWFtVmpkQ0lzSW5CeWIzUnZkSGx3WlNJc0luUnZVM1J5YVc1bklpd2lZMkZzYkNJc0ltWnBibVFpTENKallXeHNZbUZqYXlJc0lteGxibWQwYUNJc0lta2lMQ0psYkdWdFpXNTBJaXdpZFc1a1pXWnBibVZrSWl3aWFXNWpiSFZrWlhNaUxDSjJZV3gxWlNJc0ltbHVaR1Y0VDJZaVhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRXNTVUZCU1N4RFFVRkRRU3hOUVVGTlF5eFBRVUZZTEVWQlFXOUNPMEZCUTJoQ1JDeFZRVUZOUXl4UFFVRk9MRWRCUVdkQ0xGVkJRVlZETEVkQlFWWXNSVUZCWlR0QlFVTXpRaXhsUVVGUFF5eFBRVUZQUXl4VFFVRlFMRU5CUVdsQ1F5eFJRVUZxUWl4RFFVRXdRa01zU1VGQk1VSXNRMEZCSzBKS0xFZEJRUzlDTEUxQlFYZERMR2RDUVVFdlF6dEJRVU5JTEV0QlJrUTdRVUZIU0RzN1FVRkZSQ3hKUVVGSkxFTkJRVU5HTEUxQlFVMUpMRk5CUVU0c1EwRkJaMEpITEVsQlFYSkNMRVZCUVRKQ08wRkJRM1pDVUN4VlFVRk5TU3hUUVVGT0xFTkJRV2RDUnl4SlFVRm9RaXhIUVVGMVFpeFZRVUZWUXl4UlFVRldMRVZCUVc5Q08wRkJRM1pETEZsQlFVbERMRk5CUVZNc1MwRkJTMEVzVFVGQmJFSTdRVUZEUVN4aFFVRkxMRWxCUVVsRExFbEJRVWtzUTBGQllpeEZRVUZuUWtFc1NVRkJTVVFzVFVGQmNFSXNSVUZCTkVKRExFZEJRVFZDTEVWQlFXbERPMEZCUXpkQ0xHZENRVUZKUXl4VlFVRlZMRXRCUVV0RUxFTkJRVXdzUTBGQlpEdEJRVU5CTEdkQ1FVRkpSaXhUUVVGVFJpeEpRVUZVTEVOQlFXTXNTVUZCWkN4RlFVRnZRa3NzVDBGQmNFSXNSVUZCTmtKRUxFTkJRVGRDTEVWQlFXZERMRWxCUVdoRExFTkJRVW9zUlVGQk1rTTdRVUZEZGtNc2RVSkJRVTlETEU5QlFWQTdRVUZEU0R0QlFVTktPenRCUVVWRUxHVkJRVTlETEZOQlFWQTdRVUZEU0N4TFFWWkVPMEZCVjBnN08wRkJSVVE3UVVGRFFTeEpRVUZKTEVOQlFVTmFMRTFCUVUxSkxGTkJRVTRzUTBGQlowSlRMRkZCUVhKQ0xFVkJRU3RDTzBGQlF6TkNZaXhWUVVGTlNTeFRRVUZPTEVOQlFXZENVeXhSUVVGb1FpeEhRVUV5UWl4VlFVRlZReXhMUVVGV0xFVkJRV2xDTzBGQlEzaERMR1ZCUVU4c1MwRkJTME1zVDBGQlRDeERRVUZoUkN4TFFVRmlMRTFCUVhkQ0xFTkJRVU1zUTBGQmFFTTdRVUZEU0N4TFFVWkVPMEZCUjBnaUxDSm1hV3hsSWpvaVlYSnlZWGt1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBaaUFvSVVGeWNtRjVMbWx6UVhKeVlYa3BJSHRjYmlBZ0lDQkJjbkpoZVM1cGMwRnljbUY1SUQwZ1puVnVZM1JwYjI0Z0tHRnlaeWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaeTVqWVd4c0tHRnlaeWtnUFQwOUlDZGJiMkpxWldOMElFRnljbUY1WFNjN1hHNGdJQ0FnZlR0Y2JuMWNibHh1YVdZZ0tDRkJjbkpoZVM1d2NtOTBiM1I1Y0dVdVptbHVaQ2tnZTF4dUlDQWdJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNW1hVzVrSUQwZ1puVnVZM1JwYjI0Z0tHTmhiR3hpWVdOcktTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCc1pXNW5kR2dnUFNCMGFHbHpMbXhsYm1kMGFEdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHVnNaVzFsYm5RZ1BTQjBhR2x6VzJsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTmhiR3hpWVdOckxtTmhiR3dvZEdocGN5d2daV3hsYldWdWRDd2dhU3dnZEdocGN5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaV3hsYldWdWREdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjFibVJsWm1sdVpXUTdYRzRnSUNBZ2ZUdGNibjFjYmx4dUx5OGdabTl5SUdsbElERXhYRzVwWmlBb0lVRnljbUY1TG5CeWIzUnZkSGx3WlM1cGJtTnNkV1JsY3lrZ2UxeHVJQ0FnSUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzVwYm1Oc2RXUmxjeUE5SUdaMWJtTjBhVzl1SUNoMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXBibVJsZUU5bUtIWmhiSFZsS1NBaFBUMGdMVEU3WEc0Z0lDQWdmVHRjYm4xY2JpSmRmUT09Il19