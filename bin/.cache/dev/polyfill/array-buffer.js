(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/polyfill/array-buffer.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        if (!ArrayBuffer.isView) {
            var TypedArray = Object.getPrototypeOf(Int8Array);
            ArrayBuffer.isView = typeof TypedArray === 'function' ? function (obj) {
                return obj instanceof TypedArray;
            } : function (obj) {
                if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') {
                    return false;
                }
                var ctor = obj.constructor;
                return ctor === Float32Array || ctor === Uint8Array || ctor === Uint32Array || ctor === Int8Array;
            };
        }
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFycmF5LWJ1ZmZlci5qcyIsIi9Vc2Vycy9TaGFyZWQvYmluZ29fZnJlbnp5L2VuZ2luZS9wb2x5ZmlsbC9hcnJheS1idWZmZXIuanMiXSwibmFtZXMiOlsiaXNWaWV3IiwiVHlwZWRBcnJheSIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwiSW50OEFycmF5Iiwib2JqIiwiQXJyYXlCdWZmZXIiLCJjdG9yIiwiY29uc3RydWN0b3IiLCJGbG9hdDMyQXJyYXkiLCJVaW50OEFycmF5IiwiVWludDMyQXJyYXkiXSwibWFwcGluZ3MiOiI7OztJQUFpQkEsSUFBakIsVUFBQSxHQUF5QixxQ0FBUkE7SUFDUEMsSUFBYUMsU0FBQUEsR0FBT0MsT0FBQUEsR0FBZUMsVUFBekMsT0FBeUNBLEVBQXpDO0FBQUEsUUFDQSxPQUFzQixPQUFBLENBQU9ILE9BQVAsQ0FBdEIsQ0FEQTtBQUFBLEtBQTBCRSxHQUVmRSxVQUFlSixPQUFmSSxFQUFQO0FBQUEsUUFDZSxPQUFBLGlCQUFBLENBQUEsT0FBQSxDQUFBLE9BQUEsRUFBQSxVQUFBLENBQUEsQ0FEZjtBQUFBLEtBRkVKO0lBS1NJLFNBQVAsUUFBT0EsQ0FBUCxPQUFPQSxFQUFQLE9BQU9BLEVBQVAsTUFBT0EsRUFBQUE7QUFBQUEsUUFDUCxJQUFBLENBQUEsT0FBQSxFQUFBO0FBQUEsWUFBQSxpQkFBQSxDQUFBLGNBQUEsQ0FBQSxVQUFBLEVBQUEsTUFBQSxFQUFBO0FBQUEsU0FET0E7QUFBQUE7Ozs7OztRQU5uQixJQUFJLENBQUNDLFdBQUFBLENBQVlOLE1BQWpCLEVBQXlCO0FBQUEsWUFDckIsSUFBTUMsVUFBQUEsR0FBYUMsTUFBQUEsQ0FBT0MsY0FBUEQsQ0FBc0JFLFNBQXRCRixDQUFuQixDQURxQjtBQUFBLFlBRXJCSSxXQUFBQSxDQUFZTixNQUFaTSxHQUFzQixPQUFPTCxVQUFQLEtBQXNCLFVBQXRCLEdBQW9DLFVBQVVJLEdBQVYsRUFBZTtBQUFBLGdCQUNyRSxPQUFPQSxHQUFBQSxZQUFlSixVQUF0QixDQURxRTtBQUFBLGFBQW5ELEdBRWxCLFVBQVVJLEdBQVYsRUFBZTtBQUFBLGdCQUVmLElBQUksUUFBT0EsR0FBUCxLQUFBLFdBQUEsR0FBQSxXQUFBLEdBQUEsT0FBQSxDQUFPQSxHQUFQLENBQUEsQ0FBQSxLQUFlLFFBQW5CLEVBQTZCO0FBQUEsb0JBQ3pCLE9BQU8sS0FBUCxDQUR5QjtBQUFBLGlCQUZkO0FBQUEsZ0JBS2YsSUFBSUUsSUFBQUEsR0FBT0YsR0FBQUEsQ0FBSUcsV0FBZixDQUxlO0FBQUEsZ0JBTWYsT0FBT0QsSUFBQUEsS0FBU0UsWUFBVEYsSUFBeUJBLElBQUFBLEtBQVNHLFVBQWxDSCxJQUFnREEsSUFBQUEsS0FBU0ksV0FBekRKLElBQXdFQSxJQUFBQSxLQUFTSCxTQUF4RixDQU5lO0FBQUEsYUFGbkJFLENBRnFCO0FBQUEsU0FNTkQ7QUFBQUE7SUFHQUEsSUFBSUcsT0FBSkgsRUFBSUc7QUFBQUEsUUFDQ0MsUUFBQUEsQ0FBQUEsUUFBQUEsQ0FBZ0JGLE9BQWhCRSxFQUF5QkMsU0FBekJELEVBQVQsUUFBU0EsRUFEREQ7QUFBQUEsS0FBSkgsTUFHbEI7QUFBQTs7V0FBQTtBQUFBIiwiZmlsZSI6ImFycmF5LWJ1ZmZlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImlmICghQXJyYXlCdWZmZXIuaXNWaWV3KSB7XG4gICAgY29uc3QgVHlwZWRBcnJheSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihJbnQ4QXJyYXkpO1xuICAgIEFycmF5QnVmZmVyLmlzVmlldyA9ICh0eXBlb2YgVHlwZWRBcnJheSA9PT0gJ2Z1bmN0aW9uJykgPyBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBUeXBlZEFycmF5O1xuICAgIH0gOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIC8vIG9sZCBKU0MsIHBoYW50b20sIFF0V2Vidmlld1xuICAgICAgICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY3RvciA9IG9iai5jb25zdHJ1Y3RvcjtcbiAgICAgICAgcmV0dXJuIGN0b3IgPT09IEZsb2F0MzJBcnJheSB8fCBjdG9yID09PSBVaW50OEFycmF5IHx8IGN0b3IgPT09IFVpbnQzMkFycmF5IHx8IGN0b3IgPT09IEludDhBcnJheTtcbiAgICB9O1xufSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5pZiAoIUFycmF5QnVmZmVyLmlzVmlldykge1xuICAgIHZhciBUeXBlZEFycmF5ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKEludDhBcnJheSk7XG4gICAgQXJyYXlCdWZmZXIuaXNWaWV3ID0gdHlwZW9mIFR5cGVkQXJyYXkgPT09ICdmdW5jdGlvbicgPyBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBUeXBlZEFycmF5O1xuICAgIH0gOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIC8vIG9sZCBKU0MsIHBoYW50b20sIFF0V2Vidmlld1xuICAgICAgICBpZiAoKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG9iaikpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjdG9yID0gb2JqLmNvbnN0cnVjdG9yO1xuICAgICAgICByZXR1cm4gY3RvciA9PT0gRmxvYXQzMkFycmF5IHx8IGN0b3IgPT09IFVpbnQ4QXJyYXkgfHwgY3RvciA9PT0gVWludDMyQXJyYXkgfHwgY3RvciA9PT0gSW50OEFycmF5O1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUZ5Y21GNUxXSjFabVpsY2k1cWN5SmRMQ0p1WVcxbGN5STZXeUpCY25KaGVVSjFabVpsY2lJc0ltbHpWbWxsZHlJc0lsUjVjR1ZrUVhKeVlYa2lMQ0pQWW1wbFkzUWlMQ0puWlhSUWNtOTBiM1I1Y0dWUFppSXNJa2x1ZERoQmNuSmhlU0lzSW05aWFpSXNJbU4wYjNJaUxDSmpiMjV6ZEhKMVkzUnZjaUlzSWtac2IyRjBNekpCY25KaGVTSXNJbFZwYm5RNFFYSnlZWGtpTENKVmFXNTBNekpCY25KaGVTSmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096dEJRVUZCTEVsQlFVa3NRMEZCUTBFc1dVRkJXVU1zVFVGQmFrSXNSVUZCZVVJN1FVRkRja0lzVVVGQlRVTXNZVUZCWVVNc1QwRkJUME1zWTBGQlVDeERRVUZ6UWtNc1UwRkJkRUlzUTBGQmJrSTdRVUZEUVV3c1owSkJRVmxETEUxQlFWb3NSMEZCYzBJc1QwRkJUME1zVlVGQlVDeExRVUZ6UWl4VlFVRjJRaXhIUVVGeFF5eFZRVUZWU1N4SFFVRldMRVZCUVdVN1FVRkRja1VzWlVGQlQwRXNaVUZCWlVvc1ZVRkJkRUk3UVVGRFNDeExRVVp2UWl4SFFVVnFRaXhWUVVGVlNTeEhRVUZXTEVWQlFXVTdRVUZEWmp0QlFVTkJMRmxCUVVrc1VVRkJUMEVzUjBGQlVDeDVRMEZCVDBFc1IwRkJVQ3hQUVVGbExGRkJRVzVDTEVWQlFUWkNPMEZCUTNwQ0xHMUNRVUZQTEV0QlFWQTdRVUZEU0R0QlFVTkVMRmxCUVVsRExFOUJRVTlFTEVsQlFVbEZMRmRCUVdZN1FVRkRRU3hsUVVGUFJDeFRRVUZUUlN4WlFVRlVMRWxCUVhsQ1JpeFRRVUZUUnl4VlFVRnNReXhKUVVGblJFZ3NVMEZCVTBrc1YwRkJla1FzU1VGQmQwVktMRk5CUVZOR0xGTkJRWGhHTzBGQlEwZ3NTMEZVUkR0QlFWVklJaXdpWm1sc1pTSTZJbUZ5Y21GNUxXSjFabVpsY2k1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWxtSUNnaFFYSnlZWGxDZFdabVpYSXVhWE5XYVdWM0tTQjdYRzRnSUNBZ1kyOXVjM1FnVkhsd1pXUkJjbkpoZVNBOUlFOWlhbVZqZEM1blpYUlFjbTkwYjNSNWNHVlBaaWhKYm5RNFFYSnlZWGtwTzF4dUlDQWdJRUZ5Y21GNVFuVm1abVZ5TG1selZtbGxkeUE5SUNoMGVYQmxiMllnVkhsd1pXUkJjbkpoZVNBOVBUMGdKMloxYm1OMGFXOXVKeWtnUHlCbWRXNWpkR2x2YmlBb2IySnFLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ2WW1vZ2FXNXpkR0Z1WTJWdlppQlVlWEJsWkVGeWNtRjVPMXh1SUNBZ0lIMGdPaUJtZFc1amRHbHZiaUFvYjJKcUtTQjdYRzRnSUNBZ0lDQWdJQzh2SUc5c1pDQktVME1zSUhCb1lXNTBiMjBzSUZGMFYyVmlkbWxsZDF4dUlDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHOWlhaUFoUFQwZ0oyOWlhbVZqZENjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JzWlhRZ1kzUnZjaUE5SUc5aWFpNWpiMjV6ZEhKMVkzUnZjanRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR04wYjNJZ1BUMDlJRVpzYjJGME16SkJjbkpoZVNCOGZDQmpkRzl5SUQwOVBTQlZhVzUwT0VGeWNtRjVJSHg4SUdOMGIzSWdQVDA5SUZWcGJuUXpNa0Z5Y21GNUlIeDhJR04wYjNJZ1BUMDlJRWx1ZERoQmNuSmhlVHRjYmlBZ0lDQjlPMXh1ZlNKZGZRPT0iXX0=