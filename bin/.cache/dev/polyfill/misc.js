(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/polyfill/misc.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        if (!Math.sign) {
            Math.sign = function (x) {
                x = +x;
                if (x === 0 || isNaN(x)) {
                    return x;
                }
                return x > 0 ? 1 : -1;
            };
        }
        if (!Math.log2) {
            Math.log2 = function (x) {
                return Math.log(x) * Math.LOG2E;
            };
        }
        if (!Number.isInteger) {
            Number.isInteger = function (value) {
                return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
            };
        }
        if (CC_JSB || CC_RUNTIME || !console.time) {
            var Timer = window.performance || Date;
            var _timerTable = Object.create(null);
            console.time = function (label) {
                _timerTable[label] = Timer.now();
            };
            console.timeEnd = function (label) {
                var startTime = _timerTable[label];
                var duration = Timer.now() - startTime;
                console.log(label + ': ' + duration + 'ms');
            };
        }
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,